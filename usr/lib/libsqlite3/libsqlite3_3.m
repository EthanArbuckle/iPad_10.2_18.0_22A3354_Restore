BOOL sub_1ACC63830(uint64_t a1, int *a2)
{
  int v2;
  _BOOL4 v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  sqlite3_int64 v9;
  int v10;
  unint64_t v11;
  int64_t v12;
  const unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int **v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  int *v26;
  int v27;
  BOOL v28;
  size_t v29;
  BOOL v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t (**v36)(uint64_t);
  BOOL v37;
  _QWORD *v39;
  int64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  void *__s1;

  v2 = *a2;
  v41 = v2;
  if (v2)
  {
    v3 = 0;
    return !v2 && v3;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v41 = sub_1ACC64070(0, a1);
    if (!v41)
    {
      v45 = 0;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_50;
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD **)(*(_QWORD *)a1 + 72);
      v8 = *v7;
      v9 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 0);
      v10 = *(_DWORD *)(v6 + 48);
      if (v10 >= 1)
      {
        v11 = v9;
        v12 = 0;
        v39 = v7;
        do
        {
          while (*(_BYTE *)(*(_QWORD *)(v6 + 64) + v12))
          {
            if (++v12 >= v10)
              goto LABEL_49;
          }
          v40 = v12 + 1;
          v13 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), (int)v12 + 1);
          v14 = *(unsigned int *)(a1 + 32);
          v15 = *v7;
          __s1 = 0;
          v16 = (*(uint64_t (**)(_QWORD *, const unsigned __int8 *, uint64_t, void **))(v15 + 24))(v7, v13, 0xFFFFFFFFLL, &__s1);
          v17 = v7;
          v18 = __s1;
          if (v16)
          {
            v19 = v16;
            v45 = v16;
          }
          else
          {
            *(_QWORD *)__s1 = v17;
            v18 = __s1;
            if (*(int *)v15 >= 1
              && (v20 = (*(uint64_t (**)(void *, uint64_t))(v15 + 48))(__s1, v14), v18 = __s1, v20))
            {
              v19 = v20;
              (*(void (**)(void *))(v15 + 32))(__s1);
              v18 = 0;
              v45 = v19;
            }
            else
            {
              do
              {
                __s1 = 0;
                v44 = 0;
                v43 = 0;
                v42 = 0;
                v21 = (*(uint64_t (**)(void *, void **, int *, char *, uint64_t *, int *))(v8 + 40))(v18, &__s1, &v44, (char *)&v43 + 4, &v43, &v42);
                v19 = v21;
                v45 = v21;
                v22 = *(int ***)(a1 + 40);
                if (v22)
                  v23 = v21 == 0;
                else
                  v23 = 0;
                if (v23)
                {
                  v19 = 0;
                  do
                  {
                    v24 = *((unsigned int *)v22 + 2);
                    v25 = v12 != v24 && (int)v24 < *(_DWORD *)(v6 + 48);
                    if (!v25
                      && ((v26 = *v22, v27 = v42, (*v22)[4]) ? (v28 = v42 == 0) : (v28 = 1),
                          v28
                       && ((v29 = v26[2], (_DWORD)v29 == v44) || ((int)v29 < v44 ? (v30 = v26[3] == 0) : (v30 = 1), !v30)))
                      && !memcmp(__s1, *(const void **)v26, v29))
                    {
                      sub_1ACC64E5C(v22 + 3, v11, v12, v27, &v45);
                      v19 = v45;
                      v31 = v45;
                    }
                    else
                    {
                      v31 = 0;
                    }
                    v22 = (int **)v22[2];
                    if (v22)
                      v32 = v31 == 0;
                    else
                      v32 = 0;
                  }
                  while (v32);
                }
              }
              while (!v19);
            }
          }
          if (v18)
            (*(void (**)(void *))(v8 + 32))(v18);
          if (v19 != 101)
            goto LABEL_51;
          v45 = 0;
          v10 = *(_DWORD *)(v6 + 48);
          v7 = v39;
          ++v12;
        }
        while (v40 < v10);
      }
LABEL_49:
      v33 = *(_QWORD *)(a1 + 40);
      if (v33)
      {
        do
        {
          if (*(_QWORD *)(v33 + 24))
            v19 = sub_1ACC64F7C((int **)(v33 + 24), 0);
          else
            v19 = 0;
          v33 = *(_QWORD *)(v33 + 16);
          if (v33)
            v37 = v19 == 0;
          else
            v37 = 0;
        }
        while (v37);
      }
      else
      {
LABEL_50:
        v19 = 0;
      }
LABEL_51:
      v41 = v19;
    }
  }
  v3 = sub_1ACC6421C(a1, *(_QWORD *)(a1 + 24), &v41) == 0;
  for (i = *(_QWORD *)(a1 + 40); i; i = *(_QWORD *)(i + 16))
  {
    v35 = *(_QWORD *)(i + 24);
    if (v35)
    {
      v36 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v35);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v35);
        v35 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_55;
        v36 = &xmmword_1ECD3B1D0;
      }
      (*v36)(v35);
    }
LABEL_55:
    *(_QWORD *)(i + 24) = 0;
  }
  v2 = v41;
  *a2 = v41;
  return !v2 && v3;
}

uint64_t sub_1ACC63BB8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;

  v5 = result;
  v6 = *(char **)(a2 + 16);
  v7 = *(char **)a2;
  if ((v6 || (v6 = *(char **)a2, v7)) && (v8 = *(int *)(a2 + 8), v6 < &v7[v8]))
  {
    v17 = 0;
    result = sub_1ACC53378(v6, &v17);
    v9 = &v6[(int)result];
    if (*(_BYTE *)(v5 + 463) && *(_QWORD *)(a2 + 16))
      v10 = *(_QWORD *)(a2 + 24) - v17;
    else
      v10 = *(_QWORD *)(a2 + 24) + v17;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 40) = v9;
    v11 = *v9;
    v12 = (unint64_t)&v6[(int)result];
    if (*v9)
    {
      v12 = (unint64_t)&v6[(int)result];
      do
      {
        v13 = v11 & 0xFFFFFF80;
        v14 = *(char *)++v12;
        v11 = v14;
      }
      while (v13 | v14);
    }
    v15 = (char *)(v12 + 1);
    *(_DWORD *)(a2 + 48) = v12 + 1 - (_DWORD)v9;
    if (v12 + 1 < (unint64_t)&v7[v8])
    {
      v16 = &v7[v8 + ~v12];
      while (!*v15)
      {
        ++v15;
        if (!--v16)
        {
          v15 = &v7[v8];
          break;
        }
      }
    }
    *(_QWORD *)(a2 + 16) = v15;
    *a3 = 0;
  }
  else
  {
    *a3 = 1;
  }
  return result;
}

uint64_t sub_1ACC63CD8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  int64_t v37;
  char v38;
  char *v39;
  uint64_t v45;
  unsigned int v46;
  char *v47;

  v5 = *(int *)(a2 + 12);
  if (*(_BYTE *)(a1 + 463))
    v6 = sub_1ACC546D8;
  else
    v6 = sub_1ACC54730;
  if (!(_DWORD)v5)
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  v7 = *(uint64_t **)a2;
  if (!*(_QWORD *)(**(_QWORD **)a2 + 112))
  {
LABEL_63:
    result = 0;
    *a4 = 0;
    return result;
  }
  v8 = a1;
  while (1)
  {
    v47 = 0;
    v46 = 0;
    v9 = *(_QWORD *)(*v7 + 128);
    result = sub_1ACC5484C(v8, *v7, &v47, &v46);
    v11 = (_DWORD)result || (int)v5 < 2;
    v45 = v9;
    if (v11)
    {
      if ((_DWORD)result)
        return result;
      LODWORD(v12) = 1;
    }
    else
    {
      v12 = 1;
      while (1)
      {
        v13 = v7[v12];
        if (!*(_QWORD *)(v13 + 112) || *(_QWORD *)(v13 + 128) != v9)
          break;
        result = sub_1ACC5484C(v8, v13, 0, 0);
        ++v12;
        if ((_DWORD)result)
          v14 = 0;
        else
          v14 = v12 < v5;
        if (!v14)
        {
          if ((_DWORD)result)
            return result;
          break;
        }
      }
    }
    v15 = v12 - ((_DWORD)v12 == (_DWORD)v5);
    if ((int)v15 >= 1)
    {
      v16 = *(uint64_t **)a2;
      v17 = *(_QWORD *)a2 + 8 * v15 - 8;
      do
      {
        v18 = v15--;
        if ((int)v5 > v18)
        {
          v19 = v16[v15];
          v20 = (int8x16_t *)v17;
          v21 = v15;
          do
          {
            if ((v6(v19, v20->i64[1]) & 0x80000000) != 0)
              break;
            ++v21;
            v22 = *v20;
            *v20 = vextq_s8(*v20, *v20, 8uLL);
            v20 = (int8x16_t *)((char *)v20 + 8);
            v19 = v22.i64[0];
          }
          while (v21 < v5 - 1);
        }
        v17 -= 8;
      }
      while (v18 > 1);
    }
    v23 = v46;
    if ((int)v46 >= 1)
    {
      if (*(_QWORD *)(*v7 + 64))
        break;
    }
LABEL_37:
    v30 = *(_DWORD *)(a2 + 40);
    if ((v30 & 0x80000000) == 0)
    {
      v31 = 0;
      v32 = (unsigned __int8 *)v47;
      v33 = &v47[(int)v23];
      v34 = v47;
      while (1)
      {
        v35 = (char *)v32;
        if (v34 < v33)
        {
          v36 = 0;
          v37 = v33 - v34;
          while (1)
          {
            v38 = *v34;
            if (!(*v34 & 0xFE | v36))
              break;
            ++v34;
            v36 = v38 & 0x80;
            if (!--v37)
            {
              v32 = (unsigned __int8 *)v33;
              if (v31 != v30)
                goto LABEL_47;
              goto LABEL_56;
            }
          }
        }
        v32 = (unsigned __int8 *)v34;
        if (v31 == v30)
        {
LABEL_56:
          LODWORD(v23) = (_DWORD)v32 - (_DWORD)v35;
          goto LABEL_58;
        }
LABEL_47:
        LODWORD(v23) = v23 + (_DWORD)v35 - (_DWORD)v32;
        if ((int)v23 < 1)
          break;
        v31 = v32[1];
        if ((char)v32[1] < 0)
        {
          v31 = v31 & 0x7F | (v32[2] << 7);
          if ((char)v32[2] < 0)
          {
            v31 = v31 & 0x3FFF | (v32[3] << 14);
            if ((char)v32[3] < 0)
            {
              v31 = v31 & 0x1FFFFF | (v32[4] << 21);
              if ((char)v32[4] < 0)
              {
                v31 = v31 & 0xFFFFFFF | ((v32[5] & 7) << 28);
                v34 = (char *)(v32 + 6);
              }
              else
              {
                v34 = (char *)(v32 + 5);
              }
            }
            else
            {
              v34 = (char *)(v32 + 4);
            }
          }
          else
          {
            v34 = (char *)(v32 + 3);
          }
        }
        else
        {
          v34 = (char *)(v32 + 2);
        }
      }
      v35 = (char *)v32;
LABEL_58:
      v39 = &v35[(int)v23];
      if (v33 - v39 >= 1)
        bzero(v39, v33 - v39);
      v47 = v35;
    }
    if ((int)v23 >= 1)
    {
      result = 0;
      *a4 = v47;
      *a3 = v45;
      *a5 = v23;
      return result;
    }
    v8 = a1;
    if (!*(_QWORD *)(**(_QWORD **)a2 + 112))
      goto LABEL_63;
  }
  v24 = v47;
  v25 = v46 + 1;
  if (v46 + 21 <= *(_QWORD *)(a2 + 32))
  {
    v28 = *(void **)(a2 + 24);
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(a2 + 24);
  if (!sqlite3_initialize())
  {
    v27 = 2 * (int)v25 + 20;
    v28 = (void *)sub_1ACB6BB48(v26, v27);
    if (v28)
    {
      *(_QWORD *)(a2 + 24) = v28;
      *(_QWORD *)(a2 + 32) = v27;
LABEL_36:
      memcpy(v28, v24, v23 + 1);
      v29 = *(_QWORD *)(a2 + 24) + v25;
      *(_DWORD *)(v29 + 16) = 0;
      *(_QWORD *)v29 = 0;
      *(_QWORD *)(v29 + 8) = 0;
      v47 = *(char **)(a2 + 24);
      goto LABEL_37;
    }
  }
  return 7;
}

uint64_t sub_1ACC64070(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!*(_BYTE *)(a2 + 11))
    return 0;
  v4 = sub_1ACC5EBEC((uint64_t *)a2);
  if ((_DWORD)v4)
  {
LABEL_3:
    if (a1)
    {
      a1[9] = v4;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
      {
        switch((_DWORD)v4)
        {
          case 0x204:
            v5 = "abort due to ROLLBACK";
            break;
          case 0x65:
            v5 = "no more rows available";
            break;
          case 0x64:
            v5 = "another row available";
            break;
          default:
            if (v4 > 0x1Cu || ((0x1410004uLL >> v4) & 1) != 0)
              v5 = "unknown error";
            else
              v5 = off_1E5C74AE8[v4];
            break;
        }
        sub_1ACBC69D0((uint64_t)a1, v5, -1, 1u, 0);
      }
    }
    return v4;
  }
  v6 = *(_QWORD *)a2;
  ++*(_DWORD *)(*(_QWORD *)a2 + 104);
  v7 = *(_QWORD **)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 48);
  if (!sub_1ACBA0E50((uint64_t)v7, 0))
  {
    v9 = v7[16];
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v9, v8);
    }
    else
    {
      *(_QWORD *)v9 = v8;
      *(_WORD *)(v9 + 20) = 4;
    }
    v10 = *(_QWORD *)(*v7 + 24);
    if (v10)
      xmmword_1ECD3B1D0(v10);
  }
  *(_BYTE *)(a2 + 11) = 0;
  v11 = sqlite3_step(*(sqlite3_stmt **)(a2 + 16));
  v4 = 0;
  --*(_DWORD *)(v6 + 104);
  if (v11 != 100)
  {
    v4 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 16));
    if ((_DWORD)v4)
      goto LABEL_3;
    if (!*(_QWORD *)(*(_QWORD *)a2 + 80))
    {
      *(_BYTE *)(a2 + 10) = 1;
      v4 = 267;
      goto LABEL_3;
    }
    return 0;
  }
  return v4;
}

uint64_t sub_1ACC6421C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  int *v29;
  void (**v30)(unsigned __int8 *);
  unsigned int v31;
  unsigned __int8 *v32;
  int v33;
  BOOL v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  void (**v38)(unsigned __int8 *);
  int v39;
  uint64_t v40;
  void (**v41)(unsigned __int8 *);
  uint64_t (**v42)(uint64_t);
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  void (**v57)(void *);
  uint64_t v58;
  uint64_t (**v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  size_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int v69;
  uint64_t (**v70)(uint64_t);
  void (**v71)(char *);
  _BYTE *v72;
  uint64_t (**v73)(_QWORD);
  void (**v74)(unsigned __int8 *);
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;

  if (*a3)
    return 1;
  v5 = a2;
  switch(*(_DWORD *)a2)
  {
    case 1:
    case 3:
      if (!sub_1ACC6421C(a1, *(_QWORD *)(a2 + 16), a3)
        || !sub_1ACC6421C(a1, *(_QWORD *)(v5 + 24), a3))
      {
        goto LABEL_88;
      }
      if (*a3)
        return 1;
      if (*(_DWORD *)v5 != 1)
        return 1;
      v7 = *(_DWORD **)(v5 + 8);
      if (v7)
      {
        if (*v7 == 1)
          return 1;
      }
      v8 = *(_QWORD *)(v5 + 16);
      if (v8)
      {
        v9 = 0;
        v10 = v5;
        do
        {
          v11 = v8;
          v9 += *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 32) + 48);
          v8 = *(_QWORD *)(v8 + 16);
          v10 = v11;
        }
        while (v8);
      }
      else
      {
        v9 = 0;
        v11 = v5;
      }
      v43 = *(int *)(*(_QWORD *)(v11 + 32) + 48);
      if (sqlite3_initialize() || (v50 = sub_1ACB5D828(2 * (v9 + v43))) == 0)
      {
        *a3 = 7;
        goto LABEL_88;
      }
      v51 = (char *)v50;
      v52 = *(_QWORD *)(v11 + 32);
      v79 = *(unsigned __int8 **)(v52 + 40);
      LODWORD(v78) = *(_DWORD *)(v52 + 80);
      v53 = *(_QWORD *)(v11 + 8);
      if (!v53)
        goto LABEL_132;
      while (*(_DWORD *)v53 == 1)
      {
        v54 = sub_1ACC65124(*(_DWORD *)(v53 + 4), v51, &v79, &v78, *(_QWORD *)(*(_QWORD *)(v53 + 24) + 32));
        v53 = *(_QWORD *)(v53 + 8);
        if (v54)
          v55 = v53 == 0;
        else
          v55 = 1;
        if (v55)
        {
          v56 = v54;
          goto LABEL_133;
        }
      }
LABEL_132:
      v56 = 1;
LABEL_133:
      v60 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 32);
      v79 = *(unsigned __int8 **)(v60 + 40);
      LODWORD(v78) = *(_DWORD *)(v60 + 80);
      if (v56)
      {
        v61 = *(_QWORD *)(v5 + 16);
        if (v61)
        {
          do
          {
            v64 = v61;
            if (*(_DWORD *)v61 == 1)
              v64 = *(_QWORD *)(v61 + 24);
            v62 = sub_1ACC65124(*(_DWORD *)(*(_QWORD *)(v61 + 8) + 4), v51, &v79, &v78, *(_QWORD *)(v64 + 32));
            v61 = *(_QWORD *)(v61 + 16);
            if (v61)
              v63 = v62 == 0;
            else
              v63 = 1;
          }
          while (!v63);
          v56 = v62;
        }
      }
      v71 = (void (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_163;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v51);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v51);
      v51 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v71 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_163:
        (*v71)(v51);
      }
      if (v56)
        return 1;
LABEL_88:
      if (*(_DWORD *)v5 != 1)
        return 0;
      v44 = *(_DWORD **)(v5 + 8);
      if (v44)
      {
        if (*v44 == 1)
          return 0;
      }
      v45 = *(_QWORD *)(v5 + 32);
      if (v45)
      {
LABEL_92:
        if (*(_QWORD *)(v5 + 40) != *(_QWORD *)(a1 + 48))
          return 0;
        sub_1ACC5EB2C(v45);
        return 0;
      }
      while (1)
      {
        v46 = *(_QWORD *)(v5 + 24);
        if (*(_QWORD *)(v46 + 40) != *(_QWORD *)(a1 + 48))
          goto LABEL_98;
        v47 = *(_QWORD *)(v46 + 32);
        if (*(_DWORD *)(v47 + 32))
        {
          v48 = *(_QWORD *)(v47 + 40);
          if (v48)
          {
            v49 = &off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v48);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v48);
              v48 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_97;
              v49 = &xmmword_1ECD3B1D0;
            }
            (*v49)(v48);
          }
        }
LABEL_97:
        *(_QWORD *)(v47 + 40) = 0;
        *(_DWORD *)(v47 + 48) = 0;
        *(_DWORD *)(v47 + 32) = 0;
LABEL_98:
        v5 = *(_QWORD *)(v5 + 16);
        v45 = *(_QWORD *)(v5 + 32);
        if (v45)
          goto LABEL_92;
      }
    case 2:
      result = sub_1ACC6421C(a1, *(_QWORD *)(a2 + 16), a3);
      if ((_DWORD)result)
        return sub_1ACC6421C(a1, *(_QWORD *)(v5 + 24), a3) == 0;
      return result;
    case 4:
      v22 = sub_1ACC6421C(a1, *(_QWORD *)(a2 + 16), a3);
      return (v22 | sub_1ACC6421C(a1, *(_QWORD *)(v5 + 24), a3)) != 0;
    default:
      if (!*(_QWORD *)(a1 + 40))
        return !*(_BYTE *)(a2 + 48)
            && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a1 + 48)
            && *(_DWORD *)(*(_QWORD *)(a2 + 32) + 48) > 0;
      if (*(_BYTE *)(a2 + 50))
      {
        v12 = *(_QWORD *)(a2 + 32);
        if (*(_DWORD *)(v12 + 32))
        {
          v13 = *(_QWORD *)(v12 + 40);
          if (v13)
          {
            v14 = &off_1ECD3B168;
            v15 = *(_QWORD *)(a2 + 32);
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v13);
              v13 = xmmword_1ECD3E930;
              v12 = v15;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_25;
              v14 = &xmmword_1ECD3B1D0;
            }
            (*v14)(v13);
            v12 = v15;
          }
        }
LABEL_25:
        v16 = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_DWORD *)(v12 + 48) = 0;
        *(_DWORD *)(v12 + 32) = 0;
LABEL_26:
        v76 = v12;
        if (*(int *)(v12 + 80) < 1)
          goto LABEL_122;
        v75 = v16;
        v17 = 0;
        LODWORD(v18) = 0;
        v19 = 0;
        v20 = (uint64_t *)(v12 + 112);
        v21 = -1;
        while (1)
        {
          v23 = *v20;
          if (!*v20)
            goto LABEL_34;
          v24 = *(int **)(v23 + 24);
          if (!v24)
          {
            v40 = v75;
            if (v19)
            {
              v41 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_76;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v19);
              v19 = (unsigned __int8 *)xmmword_1ECD3E930;
              v12 = v76;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v41 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_76:
                (*v41)(v19);
                v12 = v76;
              }
            }
            if (v75)
            {
              v42 = &off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_83;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v75);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v75);
              v40 = xmmword_1ECD3E930;
              v12 = v76;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v42 = &xmmword_1ECD3B1D0;
LABEL_83:
                (*v42)(v40);
                v12 = v76;
              }
            }
            v39 = 0;
LABEL_155:
            *(_QWORD *)(v12 + 40) = 0;
            *(_DWORD *)(v12 + 48) = 0;
LABEL_156:
            *a3 = v39;
            result = *(_QWORD *)(v12 + 40) != 0;
            *(_QWORD *)(v5 + 40) = *(_QWORD *)(a1 + 48);
            return result;
          }
          v25 = *v24;
          if (sqlite3_initialize())
            goto LABEL_69;
          v26 = sub_1ACB5D828(v25);
          if (!v26)
            goto LABEL_69;
          v27 = (void *)v26;
          v28 = sub_1ACC53378(*(char **)(*(_QWORD *)(v23 + 24) + 8), (unint64_t *)&v79);
          v29 = *(int **)(v23 + 24);
          v18 = *v29 - (uint64_t)v28;
          memcpy(v27, (const void *)(*((_QWORD *)v29 + 1) + v28), v18);
          if (v19)
            break;
LABEL_33:
          v19 = (unsigned __int8 *)v27;
          v21 = v17;
          v12 = v76;
LABEL_34:
          ++v17;
          v20 += 5;
          if (v17 >= *(int *)(v12 + 80))
          {
            v16 = v75;
            if ((v21 & 0x80000000) != 0)
              goto LABEL_122;
            v31 = *(_DWORD *)(v12 + 60);
            if ((v31 & 0x80000000) != 0)
            {
              *(_QWORD *)(v12 + 40) = v19;
              *(_DWORD *)(v12 + 48) = v18;
              *(_QWORD *)(v12 + 24) = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v12 + 32) = 1;
              goto LABEL_122;
            }
            v32 = *(unsigned __int8 **)(v12 + 40);
            v33 = v21 - v31;
            v34 = v31 >= v21;
            v35 = v31 - v21;
            if (v35 != 0 && v34)
              v36 = v19;
            else
              v36 = v32;
            if (v35 != 0 && v34)
            {
              v37 = v35;
            }
            else
            {
              v32 = v19;
              v37 = v33;
            }
            v78 = v32;
            v79 = v36;
            if (!sqlite3_initialize())
            {
              v65 = v18 + 8;
              v66 = (int)v18 + 8;
              v67 = (_BYTE *)sub_1ACB5D828(v65);
              if (v67)
              {
                v68 = v67;
                bzero(v67, v66);
                v77 = v68;
                *(_QWORD *)(v76 + 40) = v68;
                if (sub_1ACC62408(&v77, v37, 0, 1, &v79, &v78))
                {
                  *(_DWORD *)(v76 + 32) = 1;
                  v69 = (_DWORD)v77 - *(_DWORD *)(v76 + 40);
                  v12 = v76;
                  goto LABEL_174;
                }
                v72 = v77;
                if (v77)
                {
                  v73 = &off_1ECD3B168;
                  if (!dword_1ECD3B140)
                    goto LABEL_172;
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v72);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v72);
                  v72 = (_BYTE *)xmmword_1ECD3E930;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v73 = &xmmword_1ECD3B1D0;
LABEL_172:
                    (*v73)(v72);
                  }
                }
                v69 = 0;
                v12 = v76;
                *(_QWORD *)(v76 + 40) = 0;
LABEL_174:
                *(_DWORD *)(v12 + 48) = v69;
                if (v19)
                {
                  v74 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
                  if (!dword_1ECD3B140)
                    goto LABEL_180;
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v19);
                  v19 = (unsigned __int8 *)xmmword_1ECD3E930;
                  v12 = v76;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v74 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_180:
                    (*v74)(v19);
                    v12 = v76;
                  }
                }
LABEL_122:
                v39 = 0;
                if (!v16 || *(_QWORD *)(v12 + 40) == v16)
                  goto LABEL_156;
                v59 = &off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v16);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v16);
                  v16 = xmmword_1ECD3E930;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v59 = &xmmword_1ECD3B1D0;
                    goto LABEL_129;
                  }
                }
                else
                {
LABEL_129:
                  (*v59)(v16);
                }
                v39 = 0;
LABEL_131:
                v12 = v76;
                goto LABEL_156;
              }
            }
            if (v19)
            {
              v38 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_68;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v19);
              v19 = (unsigned __int8 *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v38 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_68:
                (*v38)(v19);
              }
            }
LABEL_69:
            v39 = 7;
            goto LABEL_131;
          }
        }
        v78 = v19;
        v79 = (unsigned __int8 *)v27;
        v77 = v27;
        sub_1ACC62408(&v79, v17 - v21, 0, 1, &v78, &v77);
        v30 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v19);
          v19 = (unsigned __int8 *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
          {
LABEL_32:
            LODWORD(v18) = (_DWORD)v79 - (_DWORD)v27;
            if ((_DWORD)v79 == (_DWORD)v27)
            {
              v57 = (void (**)(void *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                v58 = v75;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v27);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v27);
                v27 = (void *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v57 = (void (**)(void *))&xmmword_1ECD3B1D0;
                  goto LABEL_146;
                }
              }
              else
              {
                v58 = v75;
LABEL_146:
                (*v57)(v27);
              }
              if (v58)
              {
                v70 = &off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_153;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v58);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v58);
                v58 = xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v70 = &xmmword_1ECD3B1D0;
LABEL_153:
                  (*v70)(v58);
                }
              }
              v39 = 0;
              v12 = v76;
              goto LABEL_155;
            }
            goto LABEL_33;
          }
          v30 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
        }
        (*v30)(v19);
        goto LABEL_32;
      }
      if (*(_QWORD *)(a2 + 40) == *(_QWORD *)(a1 + 48))
      {
        v12 = *(_QWORD *)(a2 + 32);
        if (*(_QWORD *)(v12 + 40))
        {
          if (*(_DWORD *)(v12 + 32))
            v16 = *(_QWORD *)(v12 + 40);
          else
            v16 = 0;
          goto LABEL_26;
        }
      }
      return !*(_BYTE *)(a2 + 48)
          && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a1 + 48)
          && *(_DWORD *)(*(_QWORD *)(a2 + 32) + 48) > 0;
  }
}

uint64_t sub_1ACC64E5C(int **a1, unint64_t a2, int64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v8;
  int *v10;
  uint64_t v11;
  int v12;
  int *v14;

  v8 = a2;
  v10 = *a1;
  v14 = v10;
  if (v10)
  {
    v11 = *((_QWORD *)v10 + 3);
    a2 -= v11;
    if (v8 == v11)
      goto LABEL_6;
    ++*v10;
  }
  v12 = sub_1ACC64F7C(&v14, a2);
  v10 = v14;
  if (v12)
    goto LABEL_15;
  *((_OWORD *)v14 + 2) = xmmword_1ACCBDE20;
  *((_QWORD *)v10 + 3) = v8;
LABEL_6:
  if (a3 < 1)
  {
    if (a3 < 0)
    {
      v12 = 0;
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (*((_QWORD *)v10 + 4) == a3)
  {
LABEL_11:
    v12 = sub_1ACC64F7C(&v14, a4 - *((_QWORD *)v10 + 5) + 2);
    v10 = v14;
    if (!v12)
      *((_QWORD *)v14 + 5) = a4;
    goto LABEL_15;
  }
  v12 = sub_1ACC64F7C(&v14, 1uLL);
  if (v12)
  {
    v10 = v14;
    goto LABEL_15;
  }
  v12 = sub_1ACC64F7C(&v14, a3);
  v10 = v14;
  if (!v12)
  {
    *((_QWORD *)v14 + 4) = a3;
    *((_QWORD *)v10 + 5) = 0;
    goto LABEL_11;
  }
LABEL_15:
  *a5 = v12;
  if (v10 == *a1)
    return 0;
  *a1 = v10;
  return 1;
}

uint64_t sub_1ACC64F7C(int **a1, unint64_t a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  void (**v7)(int *);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;

  v4 = *a1;
  if (!*a1)
  {
    if (sqlite3_initialize())
      return 7;
    v10 = sub_1ACB5D828(148);
    if (!v10)
      return 7;
    v4 = (int *)v10;
    v5 = 0;
    *(_DWORD *)(v10 + 16) = 100;
    v9 = v10 + 48;
    *(_QWORD *)(v10 + 8) = v10 + 48;
    *(_DWORD *)v10 = 0;
    goto LABEL_19;
  }
  v5 = *v4;
  v6 = v4[4];
  if (*v4 + 11 <= (int)v6)
  {
    v9 = *((_QWORD *)v4 + 1);
    goto LABEL_19;
  }
  if (!sqlite3_initialize())
  {
    v11 = 2 * v6;
    v12 = sub_1ACB6BB48((uint64_t)v4, v11 + 48);
    if (v12)
    {
      v4 = (int *)v12;
      *(_DWORD *)(v12 + 16) = v11;
      v9 = v12 + 48;
      *(_QWORD *)(v12 + 8) = v12 + 48;
      v5 = *(_DWORD *)v12;
LABEL_19:
      v13 = 0;
      v14 = v9 + v5;
      do
      {
        v15 = a2;
        *(_BYTE *)(v14 + v13++) = a2 | 0x80;
        v16 = a2 > 0x7F;
        a2 >>= 7;
      }
      while (v16);
      result = 0;
      *(_BYTE *)(v14 + v13 - 1) = v15 & 0x7F;
      v17 = *v4;
      *v4 = v17 + v13;
      *(_BYTE *)(*((_QWORD *)v4 + 1) + v17 + v13) = 0;
      goto LABEL_22;
    }
  }
  v4 = *a1;
  if (!*a1)
    goto LABEL_16;
  v7 = (void (**)(int *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v4);
    v4 = (int *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = (void (**)(int *))&xmmword_1ECD3B1D0;
      goto LABEL_10;
    }
LABEL_16:
    result = 7;
    goto LABEL_22;
  }
LABEL_10:
  (*v7)(v4);
  v4 = 0;
  result = 7;
LABEL_22:
  *a1 = v4;
  return result;
}

uint64_t sub_1ACC65124(int a1, char *a2, unsigned __int8 **a3, _DWORD *a4, uint64_t a5)
{
  int v9;
  int v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  int v15;
  char *v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  size_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v30;
  unsigned __int8 *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;

  v9 = *(_DWORD *)(a5 + 80) + a1;
  v10 = *a4 + a1;
  v11 = *(_BYTE **)(a5 + 40);
  v30 = v11;
  v31 = v11;
  v34 = a2;
  v35 = a2;
  v12 = *a3;
  sub_1ACC62408(&v34, v9, 0, 0, a3, &v31);
  v13 = v34;
  v32 = v34;
  v33 = v34;
  *a3 = v12;
  v31 = v11;
  sub_1ACC62408(&v33, v10, 1, 0, &v31, a3);
  if (v13 == a2)
  {
    if (v33 == a2)
      return 0;
    v15 = *a2;
    LODWORD(v16) = (_DWORD)a2;
    if (*a2)
    {
      v16 = a2;
      do
      {
        v17 = v15 & 0xFFFFFF80;
        v18 = *++v16;
        v15 = v18;
      }
      while (v17 | v18);
    }
    goto LABEL_12;
  }
  if (v33 == v13)
  {
    v19 = *a2;
    LODWORD(v16) = (_DWORD)a2;
    if (*a2)
    {
      v16 = a2;
      do
      {
        v20 = v19 & 0xFFFFFF80;
        v21 = *++v16;
        v19 = v21;
      }
      while (v20 | v21);
    }
LABEL_12:
    v22 = (int)v16 - (int)a2 + 1;
    memcpy(v11, a2, v22);
    v14 = (_DWORD)v11 + v22;
    goto LABEL_13;
  }
  sub_1ACC61E54(&v30, (unsigned __int8 **)&v35, &v32);
  v14 = (int)v30;
LABEL_13:
  v23 = *(unsigned __int8 **)(a5 + 40);
  v24 = v14 - (_DWORD)v23;
  v25 = v24 - 1;
  if (v24 >= 1)
  {
    v26 = *(_DWORD *)(a5 + 48);
    v27 = __OFSUB__(v26, v25);
    v28 = v26 - v25;
    if (v28 < 0 == v27)
    {
      bzero(&v23[v25], v28);
      *(_DWORD *)(a5 + 48) = v25;
      v23 = *(unsigned __int8 **)(a5 + 40);
    }
  }
  *a3 = v23;
  *a4 = *(_DWORD *)(a5 + 80);
  return 1;
}

uint64_t sub_1ACC652B8(uint64_t a1, sqlite3_stmt *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v11;
  sqlite3_stmt *v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  sqlite3_int64 v15;
  uint64_t v16;
  _DWORD *v17;
  const unsigned __int8 *v18;
  sqlite3_stmt *v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  int v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *pStmt;
  sqlite3_stmt *v27;

  v25 = a2;
  pStmt = 0;
  v27 = a2;
  v8 = sub_1ACC52F20((uint64_t *)a1, 7, &pStmt, (uint64_t)&v27);
  v9 = pStmt;
  if ((_DWORD)v8)
  {
LABEL_2:
    sqlite3_reset(v9);
    return v8;
  }
  if (sqlite3_step(pStmt) != 100)
  {
    v12 = v9;
    return sqlite3_reset(v12);
  }
  if (*(_QWORD *)(a1 + 88))
    v11 = sqlite3_column_int(v9, *(_DWORD *)(a1 + 48) + 1);
  else
    v11 = 0;
  v13 = sqlite3_column_int64(v9, 0);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 512);
  if (v15 > v13
    || v15 == v13 && !*(_DWORD *)(a1 + 524)
    || *(_DWORD *)(a1 + 520) != (_DWORD)v11
    || *(_DWORD *)(a1 + 508) > *(_DWORD *)(a1 + 504))
  {
    v8 = sub_1ACC66198(a1);
    if ((_DWORD)v8)
      goto LABEL_2;
  }
  v16 = 0;
  *(_QWORD *)(a1 + 512) = v14;
  *(_DWORD *)(a1 + 520) = v11;
  *(_DWORD *)(a1 + 524) = 1;
  v17 = a4;
  while (v16 + 1 <= *(int *)(a1 + 48))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + v16))
    {
      v8 = 0;
    }
    else
    {
      v18 = sqlite3_column_text(v9, (int)v16 + 1);
      v8 = sub_1ACC681EC(a1, v11, (uint64_t)v18, -1, v17);
      a4[*(int *)(a1 + 48)] += sqlite3_column_bytes(v9, v16 + 1);
    }
    ++v16;
    ++v17;
    if ((_DWORD)v8)
      goto LABEL_2;
  }
  v8 = sqlite3_reset(v9);
  if (!(_DWORD)v8)
  {
    v27 = a2;
    if (*(_QWORD *)(a1 + 80))
    {
      --*a3;
LABEL_25:
      if (!*(_BYTE *)(a1 + 462))
        return 0;
      goto LABEL_26;
    }
    pStmt = 0;
    v20 = sub_1ACC52F20((uint64_t *)a1, 1, &pStmt, (uint64_t)&v27);
    if ((_DWORD)v20)
      return v20;
    v21 = pStmt;
    if (sqlite3_step(pStmt) == 100)
    {
      v22 = sqlite3_column_int(v21, 0);
      v8 = sqlite3_reset(v21);
      if ((_DWORD)v8)
        return v8;
      if (v22)
      {
        v8 = sub_1ACC680AC(a1, 1);
        *a3 = 0;
        bzero(a4, 8 * *(int *)(a1 + 48) + 8);
        return v8;
      }
    }
    else
    {
      v8 = sqlite3_reset(v21);
      if ((_DWORD)v8)
        return v8;
    }
    v23 = *(_QWORD *)(a1 + 80);
    --*a3;
    if (v23)
      goto LABEL_25;
    v27 = 0;
    v8 = sub_1ACC52F20((uint64_t *)a1, 0, &v27, (uint64_t)&v25);
    if (!(_DWORD)v8)
    {
      v24 = v27;
      sqlite3_step(v27);
      v8 = sqlite3_reset(v24);
    }
    if (*(_BYTE *)(a1 + 462) && !(_DWORD)v8)
    {
LABEL_26:
      v27 = 0;
      v8 = sub_1ACC52F20((uint64_t *)a1, 19, &v27, (uint64_t)&v25);
      if ((_DWORD)v8)
        return v8;
      v19 = v27;
      sqlite3_step(v27);
      v12 = v19;
      return sqlite3_reset(v12);
    }
  }
  return v8;
}

uint64_t sub_1ACC655C8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  __int16 v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  sqlite3_stmt *v19;
  double v20;
  uint64_t v21;
  int v22;
  const char *v23;
  double v24;
  uint64_t v25;
  sqlite3_stmt *v27;

  if (!*(_QWORD *)(a1 + 80))
  {
    v27 = 0;
    v9 = a2 + 1;
    v10 = sub_1ACC52F20((uint64_t *)a1, 18, &v27, (uint64_t)(a2 + 1));
    if ((_DWORD)v10)
      return v10;
    if (!*(_QWORD *)(a1 + 88))
    {
LABEL_26:
      v18 = a2[*(int *)(a1 + 48) + 3];
      if (v18)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v18 + 20)) & 1) != 0)
        {
          v19 = v27;
          goto LABEL_39;
        }
      }
      else
      {
        sub_1ACBBE20C(97202);
      }
      if (*a2)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a2 + 20)) & 1) != 0)
        {
          if (!*v9)
          {
            sub_1ACBBE20C(97202);
            return 1;
          }
          if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*v9 + 20)) & 1) == 0)
            return 1;
        }
      }
      else
      {
        sub_1ACBBE20C(97202);
      }
      v19 = v27;
      v10 = sqlite3_bind_value(v27, 1, (const sqlite3_value *)a2[*(int *)(a1 + 48) + 3]);
      if ((_DWORD)v10)
        return v10;
LABEL_39:
      sqlite3_step(v19);
      v10 = sqlite3_reset(v19);
      v21 = *(_QWORD *)(a1 + 24);
      if (v21)
      {
        v22 = *(unsigned __int8 *)(v21 + 113);
        switch(v22)
        {
          case 186:
            goto LABEL_43;
          case 118:
            v25 = *(_QWORD *)(v21 + 56);
LABEL_59:
            *a3 = v25;
            return v10;
          case 109:
LABEL_43:
            v23 = "unopened";
            break;
          default:
            v23 = "invalid";
            break;
        }
      }
      else
      {
        v23 = "NULL";
      }
      sqlite3_log(21, "API call with %s database connection pointer", v23);
      sub_1ACBBE20C(186245);
      v25 = 0;
      goto LABEL_59;
    }
    v11 = v27;
    v12 = *(_DWORD *)(a1 + 48);
    v13 = v12 + 2;
    v14 = a2[v12 + 4];
    if (v14)
    {
      v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 0x24) != 0)
      {
        v16 = *(double *)v14;
        goto LABEL_25;
      }
      if ((v15 & 8) != 0)
      {
        v24 = *(double *)v14;
        if (*(double *)v14 >= -9.22337204e18)
        {
          if (v24 <= 9.22337204e18)
            *(_QWORD *)&v16 = (uint64_t)v24;
          else
            LODWORD(v16) = -1;
        }
        else
        {
          LODWORD(v16) = 0;
        }
LABEL_25:
        v10 = sqlite3_bind_int64(v11, v13, SLODWORD(v16));
        if ((_DWORD)v10)
          return v10;
        goto LABEL_26;
      }
      if ((v15 & 0x12) != 0 && *(_QWORD *)(v14 + 8))
      {
        LODWORD(v16) = sub_1ACBF2FC0(v14);
        goto LABEL_25;
      }
    }
    else
    {
      sub_1ACBBE20C(89699);
    }
    LODWORD(v16) = 0;
    goto LABEL_25;
  }
  v6 = a2[*(int *)(a1 + 48) + 3];
  if (!v6)
  {
    sub_1ACBBE20C(97202);
    goto LABEL_15;
  }
  v7 = *(_WORD *)(v6 + 20);
  if (((0xAAAAAAAAAAAAAAAALL >> v7) & 1) == 0)
  {
    v8 = v7 & 0x3F;
    goto LABEL_13;
  }
  v6 = a2[1];
  if (!v6)
  {
LABEL_15:
    sub_1ACBBE20C(97202);
    return 19;
  }
  v7 = *(_WORD *)(v6 + 20);
  v8 = v7 & 0x3F;
LABEL_13:
  if (((0x50505050uLL >> v8) & 1) == 0)
    return 19;
  if ((v7 & 0x24) != 0)
  {
    v17 = *(_QWORD *)v6;
  }
  else if ((v7 & 8) != 0)
  {
    v20 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v20 <= 9.22337204e18)
        v17 = (uint64_t)v20;
      else
        v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v17 = 0x8000000000000000;
    }
  }
  else if ((v7 & 0x12) != 0 && *(_QWORD *)(v6 + 8))
  {
    v17 = sub_1ACBF2FC0(v6);
  }
  else
  {
    v17 = 0;
  }
  v10 = 0;
  *a3 = v17;
  return v10;
}

uint64_t sub_1ACC65914(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BYTE *v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t (**v17)(char *);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_stmt *v22;

  if (!*(_DWORD *)result)
  {
    v5 = (_DWORD *)result;
    v6 = *(int *)(a2 + 48);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB5D828(10 * v6)) == 0)
    {
      v7 = 7;
    }
    else
    {
      v8 = (char *)result;
      v9 = *(unsigned int *)(a2 + 48);
      if ((int)v9 < 1)
      {
        v11 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(unsigned int *)(a3 + 4 * v10);
          v13 = (_BYTE *)(result + (int)v11);
          do
          {
            v14 = v12;
            *v13++ = v12 | 0x80;
            ++v11;
            v15 = v12 > 0x7F;
            v12 >>= 7;
          }
          while (v15);
          *(v13 - 1) = v14 & 0x7F;
          ++v10;
        }
        while (v10 != v9);
      }
      v22 = 0;
      v16 = sub_1ACC52F20((uint64_t *)a2, 20, &v22, 0);
      if (!v16)
      {
        v18 = (uint64_t *)v22;
        v19 = *(_QWORD *)(a2 + 512);
        if (!sub_1ACBA0E50((uint64_t)v22, 0))
        {
          v20 = v18[16];
          if ((*(_WORD *)(v20 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v20, v19);
          }
          else
          {
            *(_QWORD *)v20 = v19;
            *(_WORD *)(v20 + 20) = 4;
          }
          v21 = *(_QWORD *)(*v18 + 24);
          if (v21)
            xmmword_1ECD3B1D0(v21);
        }
        if ((v11 & 0x80000000) != 0)
          sub_1ACBBE20C(98722);
        else
          sub_1ACBA0CE0(v18, 2, v8, v11, (uint64_t (*)(uint64_t))sqlite3_free, 0);
        sqlite3_step((sqlite3_stmt *)v18);
        result = sqlite3_reset((sqlite3_stmt *)v18);
        v7 = result;
        goto LABEL_4;
      }
      v7 = v16;
      v17 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v8);
        v8 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v17 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      }
      result = (*v17)(v8);
    }
LABEL_4:
    *v5 = v7;
  }
  return result;
}

void sub_1ACC65B24(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  size_t v23;
  _DWORD *v24;
  int v25;
  uint64_t (**v26)(_QWORD);
  BOOL v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  _BYTE *v39;
  char v40;
  int v41;
  int v42;
  uint64_t (**v43)(_QWORD);
  sqlite3_stmt *v44;
  sqlite3_stmt *v45;
  unint64_t v46;
  _DWORD *v47;
  sqlite3_stmt *v48;
  unint64_t v49;

  if (!*a1)
  {
    v10 = *(int *)(a2 + 48);
    if (sqlite3_initialize() || (v11 = v10 + 2, (v12 = sub_1ACB5D828(14 * (v10 + 2))) == 0))
    {
      *a1 = 7;
      return;
    }
    v13 = (_DWORD *)v12;
    v48 = 0;
    v14 = sub_1ACC52F20((uint64_t *)a2, 22, &v48, 0);
    if (v14)
    {
LABEL_27:
      v25 = v14;
      v26 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v13);
        v13 = (_DWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_33;
        v26 = &xmmword_1ECD3B1D0;
      }
      (*v26)(v13);
LABEL_33:
      *a1 = v25;
      return;
    }
    v15 = v48;
    if (!sub_1ACBA0E50((uint64_t)v48, 0))
    {
      v16 = *((_QWORD *)v15 + 16);
      if ((*(_WORD *)(v16 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v16, 0);
      }
      else
      {
        *(_QWORD *)v16 = 0;
        *(_WORD *)(v16 + 20) = 4;
      }
      v17 = *(_QWORD *)(*(_QWORD *)v15 + 24);
      if (v17)
        xmmword_1ECD3B1D0(v17);
    }
    if (sqlite3_step(v15) == 100)
    {
      v47 = v13;
      v18 = (unint64_t)sqlite3_column_blob(v15, 0);
      v19 = sqlite3_column_bytes(v15, 0);
      if (!v19 || (v20 = v19, *(char *)(v18 + v19 - 1) < 0))
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v46 = v18;
        LODWORD(v18) = 0;
        if ((int)v10 >= -1 && v19 >= 1)
        {
          v45 = v15;
          v18 = 0;
          v21 = 0;
          do
          {
            v49 = 0;
            v22 = sub_1ACC53378((char *)(v46 + v21), &v49);
            v47[v18++] = v49;
            if (v18 >= v11)
              break;
            v21 += v22;
          }
          while (v21 < v20);
          v15 = v45;
        }
      }
      v13 = v47;
      if ((int)v18 >= (int)v11)
      {
LABEL_26:
        v14 = sqlite3_reset(v15);
        if (v14)
          goto LABEL_27;
        v27 = *v13 < -a5 && a5 < 0;
        v28 = *v13 + a5;
        if (v27)
          v28 = 0;
        *v13 = v28;
        if ((*(_DWORD *)(a2 + 48) & 0x80000000) == 0)
        {
          v29 = 0;
          v30 = v13 + 1;
          do
          {
            v31 = *(_DWORD *)(a3 + 4 * v29) + v30[v29];
            v32 = *(_DWORD *)(a4 + 4 * v29);
            v33 = v31 >= v32;
            v34 = v31 - v32;
            if (!v33)
              v34 = 0;
            v30[v29] = v34;
            v35 = v29++ < *(int *)(a2 + 48);
          }
          while (v35);
        }
        if ((int)v10 < -1)
        {
          v37 = 0;
        }
        else
        {
          v36 = 0;
          v37 = 0;
          do
          {
            v38 = v13[v36];
            v39 = (char *)&v13[v11] + v37;
            do
            {
              v40 = v38;
              *v39++ = v38 | 0x80;
              ++v37;
              v35 = v38 > 0x7F;
              v38 >>= 7;
            }
            while (v35);
            *(v39 - 1) = v40 & 0x7F;
            ++v36;
          }
          while (v36 != v11);
        }
        v41 = sub_1ACC52F20((uint64_t *)a2, 23, &v48, 0);
        if (!v41)
        {
          v44 = v48;
          sqlite3_bind_int64(v48, 1, 0);
          sqlite3_bind_blob(v44, 2, &v13[v11], v37, 0);
          sqlite3_step(v44);
          *a1 = sqlite3_reset(v44);
          sqlite3_bind_null(v44, 2);
          sqlite3_free(v13);
          return;
        }
        v42 = v41;
        v43 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v13);
          v13 = (_DWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_59;
          v43 = &xmmword_1ECD3B1D0;
        }
        (*v43)(v13);
LABEL_59:
        *a1 = v42;
        return;
      }
      v24 = &v47[v18];
      v23 = 4 * (v11 + ~(_DWORD)v18) + 4;
    }
    else
    {
      v23 = 4 * v11;
      v24 = v13;
    }
    bzero(v24, v23);
    goto LABEL_26;
  }
}

uint64_t sub_1ACC65F70(uint64_t a1, int a2)
{
  unsigned int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unsigned int v17;
  _QWORD *v18;
  sqlite3_stmt *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v26;
  sqlite3_stmt *v27;

  v27 = 0;
  v4 = sub_1ACC66198(a1);
  if (v4)
    goto LABEL_28;
  v4 = sub_1ACC52F20((uint64_t *)a1, 27, &v27, 0);
  if (v4)
    goto LABEL_28;
  v5 = v27;
  v6 = *(int *)(a1 + 520);
  if (!sub_1ACBA0E50((uint64_t)v27, 0))
  {
    v7 = *((_QWORD *)v5 + 16);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v7, v6);
    }
    else
    {
      *(_QWORD *)v7 = v6;
      *(_WORD *)(v7 + 20) = 4;
    }
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
    if (v8)
      xmmword_1ECD3B1D0(v8);
  }
  v9 = *(int *)(a1 + 488);
  if (!sub_1ACBA0E50((uint64_t)v5, 1u))
  {
    v10 = *((_QWORD *)v5 + 16);
    if ((*(_WORD *)(v10 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10 + 64, v9);
    }
    else
    {
      *(_QWORD *)(v10 + 64) = v9;
      *(_WORD *)(v10 + 84) = 4;
    }
    v11 = *(_QWORD *)(*(_QWORD *)v5 + 24);
    if (v11)
      xmmword_1ECD3B1D0(v11);
  }
  if (sqlite3_step(v5) != 100)
  {
    v4 = sqlite3_reset(v5);
LABEL_28:
    v12 = v4;
    v13 = 0;
    goto LABEL_29;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = sqlite3_column_int(v5, 0);
    if (!v12)
    {
      v15 = v14;
      for (i = 0; (int)i < *(_DWORD *)(a1 + 488); i = (i + 1))
      {
        v17 = sub_1ACC662C0(a1, v15, i, -2);
        if (v17 == 101)
        {
          v13 = 1;
        }
        else
        {
          v12 = v17;
          if (v17)
            goto LABEL_18;
        }
      }
      v12 = 0;
    }
LABEL_18:
    ;
  }
  while (sqlite3_step(v5) == 100);
  v26 = sqlite3_reset(v5);
  if (!v12)
    v12 = v26;
LABEL_29:
  v18 = *(_QWORD **)(a1 + 480);
  if (v18)
  {
    v19 = (sqlite3_stmt *)v18[3];
    v20 = (_QWORD *)v18[4];
    v21 = v20[3];
    if (v21)
      xmmword_1ECD3B1C0(v21);
    sub_1ACBE0F9C(v20, v18);
    v22 = v20[3];
    if (v22)
      xmmword_1ECD3B1D0(v22);
    sqlite3_finalize(v19);
  }
  *(_QWORD *)(a1 + 480) = 0;
  if (v13)
    v23 = v12 == 0;
  else
    v23 = 0;
  if (!v23 || a2 == 0)
    return v12;
  else
    return 101;
}

uint64_t sub_1ACC66198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_stmt *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  sqlite3_stmt *v11;

  if (*(int *)(a1 + 488) >= 1)
  {
    v2 = 0;
    while (1)
    {
      v3 = sub_1ACC662C0(a1, *(unsigned int *)(a1 + 520), v2, -1);
      if ((_DWORD)v3 != 101 && (_DWORD)v3 != 0)
        break;
      v2 = (v2 + 1);
      if ((int)v2 >= *(_DWORD *)(a1 + 488))
        goto LABEL_9;
    }
    v9 = v3;
    sub_1ACC67078(a1);
    return v9;
  }
LABEL_9:
  sub_1ACC67078(a1);
  if (!*(_BYTE *)(a1 + 461) || *(_DWORD *)(a1 + 96) != 255 || !*(_DWORD *)(a1 + 100))
    return 0;
  v11 = 0;
  v9 = sub_1ACC52F20((uint64_t *)a1, 22, &v11, 0);
  if (!(_DWORD)v9)
  {
    v5 = v11;
    sqlite3_bind_int64(v11, 1, 2);
    v6 = sqlite3_step(v5);
    if (v6 == 101)
    {
      v8 = 0;
    }
    else
    {
      if (v6 != 100)
        return sqlite3_reset(v5);
      v7 = sqlite3_column_int(v5, 0);
      if (v7 == 1)
        v8 = 8;
      else
        v8 = v7;
    }
    *(_DWORD *)(a1 + 96) = v8;
    return sqlite3_reset(v5);
  }
  return v9;
}

uint64_t sub_1ACC662C0(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  sqlite3_int64 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  sqlite3_stmt *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  sqlite3_int64 v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  sqlite3_stmt *v50;
  sqlite3_int64 v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _BYTE *v81;
  unint64_t v82;
  _BYTE *v83;
  int v84;
  char v85;
  int v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  unint64_t v90;
  _BYTE *v91;
  int v92;
  char v93;
  int v94;
  int v95;
  _BYTE *v96;
  unint64_t v97;
  char v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  BOOL v105;
  sqlite3_stmt *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)(uint64_t);
  uint64_t v112;
  uint64_t (**v113)(uint64_t);
  void (**v114)(uint64_t *);
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  char v143;
  int v144;
  uint64_t v145;
  int v146;
  void *v147;
  size_t __n;
  uint64_t *v149;
  uint64_t *v150;
  int v151;
  size_t v152;
  unsigned __int8 *__src;
  sqlite3_int64 v154;
  sqlite3_int64 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  sqlite3_stmt *v165[2];

  v162 = 0;
  v163 = 0;
  v164 = 0;
  v161 = 0;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v156 = 0u;
  v8 = sub_1ACC51FD0(a1, a2, a3, a4, 0, 0, 1, 0, (uint64_t)&v156);
  if ((_DWORD)v8)
    goto LABEL_157;
  v9 = DWORD2(v156);
  if (!DWORD2(v156))
    goto LABEL_157;
  if (a4 == -1)
  {
    v11 = 0;
    v12 = a2;
    v13 = (int)a3;
    goto LABEL_7;
  }
  v165[0] = 0;
  v10 = sub_1ACC52F20((uint64_t *)a1, 15, v165, 0);
  if ((_DWORD)v10)
  {
    v8 = v10;
    goto LABEL_157;
  }
  v21 = v165[0];
  v12 = a2;
  v22 = *(_DWORD *)(a1 + 488);
  v13 = (int)a3;
  if (!sub_1ACBA0E50((uint64_t)v165[0], 0))
  {
    v23 = ((int)a3 + v22 * (uint64_t)(int)a2) << 10;
    v24 = *((_QWORD *)v21 + 16);
    if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v24, v23);
    }
    else
    {
      *(_QWORD *)v24 = v23;
      *(_WORD *)(v24 + 20) = 4;
    }
    v25 = *(_QWORD *)(*(_QWORD *)v21 + 24);
    if (v25)
      xmmword_1ECD3B1D0(v25);
  }
  v26 = *(_DWORD *)(a1 + 488);
  if (!sub_1ACBA0E50((uint64_t)v21, 1u))
  {
    v27 = (((int)a3 + v26 * (uint64_t)(int)a2) << 10) | 0x3FF;
    v28 = *((_QWORD *)v21 + 16);
    if ((*(_WORD *)(v28 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v28 + 64, v27);
    }
    else
    {
      *(_QWORD *)(v28 + 64) = v27;
      *(_WORD *)(v28 + 84) = 4;
    }
    v29 = *(_QWORD *)(*(_QWORD *)v21 + 24);
    if (v29)
      xmmword_1ECD3B1D0(v29);
  }
  if (sqlite3_step(v21) == 100)
    v11 = sqlite3_column_int64(v21, 0);
  else
    v11 = 0;
  v8 = sqlite3_reset(v21);
  if ((_DWORD)v8)
    goto LABEL_157;
  if (a4 != -2)
  {
LABEL_7:
    v14 = *(_DWORD *)(a1 + 488);
    v165[0] = 0;
    v8 = sub_1ACC52F20((uint64_t *)a1, 8, v165, 0);
    if ((_DWORD)v8)
      goto LABEL_157;
    v154 = v11;
    v15 = v13 + v12 * (uint64_t)v14;
    v16 = a4 + 1;
    v17 = v165[0];
    v18 = *(_DWORD *)(a1 + 488);
    if (!sub_1ACBA0E50((uint64_t)v165[0], 0))
    {
      v19 = v16 + ((v13 + v12 * (uint64_t)v18) << 10);
      v20 = *((_QWORD *)v17 + 16);
      if ((*(_WORD *)(v20 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v20, v19);
      }
      else
      {
        *(_QWORD *)v20 = v19;
        *(_WORD *)(v20 + 20) = 4;
      }
      v34 = *(_QWORD *)(*(_QWORD *)v17 + 24);
      if (v34)
        xmmword_1ECD3B1D0(v34);
    }
    v33 = v16 + (v15 << 10);
    if (sqlite3_step(v17) == 100)
    {
      v30 = sqlite3_column_int(v17, 0);
      v8 = sqlite3_reset(v17);
      v11 = v154;
      if ((_DWORD)v8)
        goto LABEL_157;
      if (v30 > 15)
      {
        v35 = sub_1ACC662C0(a1, a2, a3, v16);
        v8 = v35;
        v36 = a4 == -1 || v33 <= v154;
        v37 = !v36;
        if ((_DWORD)v35)
          goto LABEL_157;
        v30 = 0;
        goto LABEL_53;
      }
    }
    else
    {
      v8 = sqlite3_reset(v17);
      v11 = v154;
      if ((_DWORD)v8)
        goto LABEL_157;
      v30 = 0;
    }
    v37 = a4 != -1 && v33 > v11;
LABEL_53:
    v32 = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    if (v37)
      v31 = 3;
    else
      v31 = 1;
    goto LABEL_56;
  }
  if (v9 == 1 && !*(_QWORD *)(*(_QWORD *)v156 + 64))
  {
    v8 = 101;
    goto LABEL_157;
  }
  v30 = 0;
  v162 = 0;
  v163 = 0;
  v31 = 3;
  v32 = 1;
  v33 = v11;
  v164 = 0;
LABEL_56:
  LODWORD(v164) = v31;
  *(_QWORD *)&v157 = &v162;
  v8 = sub_1ACC53478(a1, (uint64_t *)&v156, 0, 0);
  if ((_DWORD)v8)
    goto LABEL_157;
  v146 = v32;
  v144 = v30;
  v145 = v33;
  v39 = 0;
  v155 = v11;
  while (1)
  {
    v41 = sub_1ACC53D44(a1, (uint64_t)&v156);
    if ((_DWORD)v41 != 100)
      break;
    v42 = (unsigned __int8 *)*((_QWORD *)&v159 + 1);
    v43 = v160;
    v44 = (void *)*((_QWORD *)&v160 + 1);
    v45 = (int)v161;
    v151 = v160;
    v152 = (int)v161;
    if (!v39)
    {
      v165[0] = 0;
      if (sqlite3_initialize())
      {
        v39 = 0;
LABEL_135:
        v8 = 7;
        goto LABEL_136;
      }
      v46 = sub_1ACB5D828(72);
      v39 = (uint64_t *)v46;
      if (!v46)
        goto LABEL_135;
      *(_QWORD *)(v46 + 64) = 0;
      *(_OWORD *)(v46 + 32) = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      *(_OWORD *)v46 = 0u;
      *(_OWORD *)(v46 + 16) = 0u;
      v47 = *(int *)(a1 + 456);
      if (sqlite3_initialize())
      {
        v39[7] = 0;
        goto LABEL_135;
      }
      v48 = sub_1ACB5D828(v47);
      v39[7] = v48;
      if (!v48)
        goto LABEL_135;
      *((_DWORD *)v39 + 12) = *(_DWORD *)(a1 + 456);
      v49 = sub_1ACC52F20((uint64_t *)a1, 10, v165, 0);
      if ((_DWORD)v49)
      {
        v8 = v49;
        goto LABEL_136;
      }
      v50 = v165[0];
      if (sqlite3_step(v165[0]) == 100)
      {
        v51 = sqlite3_column_int64(v50, 0);
        v39[1] = v51;
        v39[2] = v51;
      }
      v52 = sqlite3_reset(v50);
      if ((_DWORD)v52)
      {
        v8 = v52;
        goto LABEL_137;
      }
      v43 = v151;
      v45 = v152;
    }
    v53 = *((_DWORD *)v39 + 8);
    if ((int)v53 >= (int)v43)
      v54 = v43;
    else
      v54 = v53;
    v147 = v44;
    if ((int)v54 < 1)
    {
      LODWORD(v54) = 0;
    }
    else
    {
      v55 = 0;
      while (*(unsigned __int8 *)(v39[3] + v55) == v42[v55])
      {
        if (v54 == ++v55)
          goto LABEL_81;
      }
      LODWORD(v54) = v55;
    }
LABEL_81:
    v56 = v43 - v54;
    if ((int)v56 < 1)
    {
      v8 = 267;
      goto LABEL_136;
    }
    __src = v42;
    v57 = 0;
    __n = (int)v43;
    v149 = v39;
    v58 = *((unsigned int *)v39 + 13);
    v59 = (int)v54;
    v60 = v43 + v45;
    v61 = v43 + v45 + 1;
    v62 = v61 - v54;
    v63 = v60 + 2;
    v64 = v60 + 2 - v54;
    do
    {
      v65 = v62;
      v66 = v64;
      ++v57;
      ++v62;
      ++v64;
      v36 = v59 > 0x7F;
      v59 >>= 7;
    }
    while (v36);
    v67 = v56;
    do
    {
      v68 = v66;
      ++v65;
      ++v66;
      v36 = v67 > 0x7F;
      v67 >>= 7;
    }
    while (v36);
    v69 = v45;
    do
    {
      ++v68;
      v36 = v69 > 0x7F;
      v69 >>= 7;
    }
    while (v36);
    v70 = v68;
    if ((int)v58 >= 1 && v68 + v58 > *(int *)(a1 + 456))
    {
      v71 = v149[2];
      if (v71 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v8 = 267;
        v39 = v149;
        goto LABEL_137;
      }
      v149[2] = v71 + 1;
      v72 = sub_1ACC67638((uint64_t *)a1, v71, (char *)v149[7], v58);
      if ((_DWORD)v72
        || (++*(_DWORD *)(a1 + 100), v72 = sub_1ACC677A8(a1, v149, __src, (v54 + 1)), (_DWORD)v72))
      {
        v8 = v72;
        v39 = v149;
        goto LABEL_137;
      }
      *((_DWORD *)v149 + 8) = 0;
      v73 = __n;
      do
      {
        v74 = v63;
        ++v61;
        ++v63;
        v36 = v73 > 0x7F;
        v73 >>= 7;
      }
      while (v36);
      LODWORD(v45) = v152;
      v75 = v152;
      do
      {
        ++v74;
        v36 = v75 > 0x7F;
        v75 >>= 7;
      }
      while (v36);
      LODWORD(v54) = 0;
      LODWORD(v58) = 0;
      v70 = v74;
      LODWORD(v56) = v151;
    }
    v39 = v149;
    v76 = v149[7];
    v149[8] += v70;
    if (v70 > *((int *)v149 + 12))
    {
      if (sqlite3_initialize() || (v77 = sub_1ACB6BB48(v76, v70)) == 0)
      {
LABEL_128:
        v8 = 7;
        goto LABEL_137;
      }
      v76 = v77;
      v149[7] = v77;
      *((_DWORD *)v149 + 12) = v70;
      LODWORD(v45) = v152;
    }
    v78 = (int)v54;
    v79 = v56 + v58 + 2;
    v80 = v79 + v45;
    v81 = (_BYTE *)(v76 + (int)v58);
    v82 = (int)v54;
    do
    {
      v83 = v81;
      v84 = v80;
      v85 = v82;
      *v81++ = v82 | 0x80;
      v86 = v79;
      ++v80;
      ++v79;
      v36 = v82 > 0x7F;
      v82 >>= 7;
    }
    while (v36);
    *v83 = v85 & 0x7F;
    v87 = (int)v58 + (uint64_t)((int)v81 - ((int)v76 + (int)v58));
    v88 = (_BYTE *)(v149[7] + v87);
    v89 = v88;
    v90 = (int)v56;
    v11 = v155;
    do
    {
      v91 = v89;
      v92 = v84;
      v93 = v90;
      *v89++ = v90 | 0x80;
      v94 = v86;
      ++v84;
      ++v86;
      v36 = v90 > 0x7F;
      v90 >>= 7;
    }
    while (v36);
    *v91 = v93 & 0x7F;
    v95 = v87 + (_DWORD)v89 - (_DWORD)v88;
    memcpy((void *)(v149[7] + v95), &__src[v78], (int)v56);
    v96 = (_BYTE *)(v149[7] + v95 + (int)v56);
    v97 = v152;
    do
    {
      v98 = v97;
      *v96++ = v97 | 0x80;
      ++v92;
      ++v94;
      v36 = v97 > 0x7F;
      v97 >>= 7;
    }
    while (v36);
    *(v96 - 1) = v98 & 0x7F;
    memcpy((void *)(v149[7] + v94), v147, v152);
    *((_DWORD *)v149 + 13) = v92;
    v99 = v151;
    if (*((_DWORD *)v149 + 9) >= v151)
    {
      v40 = (void *)v149[3];
    }
    else
    {
      v100 = v149[5];
      if (sqlite3_initialize())
        goto LABEL_128;
      v40 = (void *)sub_1ACB6BB48(v100, 2 * __n);
      if (!v40)
        goto LABEL_128;
      v99 = v151;
      *((_DWORD *)v149 + 9) = 2 * v151;
      v149[5] = (uint64_t)v40;
      v149[3] = (uint64_t)v40;
    }
    memcpy(v40, __src, __n);
    *((_DWORD *)v149 + 8) = v99;
  }
  v8 = v41;
  if ((_DWORD)v41)
    goto LABEL_136;
  if (a4 == -1)
  {
    if (!v39)
    {
      v8 = 0;
      goto LABEL_157;
    }
LABEL_177:
    if (*v39)
    {
      v125 = v39[2];
      v39[2] = v125 + 1;
      v150 = v39;
      v8 = sub_1ACC67638((uint64_t *)a1, v125, (char *)v39[7], *((_DWORD *)v39 + 13));
      if ((_DWORD)v8)
      {
LABEL_179:
        ++*(_DWORD *)(a1 + 100);
        v39 = v150;
        goto LABEL_136;
      }
      v126 = (_QWORD *)*v39;
      v127 = v39[1];
      v128 = v39[2];
      v129 = *(_QWORD **)*v39;
      if (v129)
      {
        v130 = 1;
        do
        {
          v131 = v128;
          v132 = v126[2];
          v133 = v129;
          if (v132)
          {
            do
            {
              v134 = 10;
              v135 = v127;
              do
              {
                --v134;
                v36 = v135 > 0x7F;
                v135 >>= 7;
              }
              while (v36);
              *(_BYTE *)(*(_QWORD *)(v132 + 64) + v134) = v130;
              v136 = (_BYTE *)(*(_QWORD *)(v132 + 64) + v134 + 1);
              v137 = v127;
              do
              {
                v138 = v137;
                *v136++ = v137 | 0x80;
                v36 = v137 > 0x7F;
                v137 >>= 7;
              }
              while (v36);
              *(v136 - 1) = v138 & 0x7F;
              v139 = sub_1ACC67638((uint64_t *)a1, v128, (char *)(*(_QWORD *)(v132 + 64) + v134), *(_DWORD *)(v132 + 56) - (int)v134);
              v8 = v139;
              ++v128;
              if (!*(_QWORD *)(v132 + 8))
                break;
              v127 += *(int *)(v132 + 24) + 1;
              v132 = *(_QWORD *)(v132 + 8);
            }
            while (!(_DWORD)v139);
            if ((_DWORD)v139)
              goto LABEL_179;
            v133 = (_QWORD *)*v126;
          }
          ++v130;
          v129 = (_QWORD *)*v133;
          v127 = v131;
          v126 = v133;
        }
        while (*v133);
        v126 = v133;
        v127 = v131;
      }
      else
      {
        v130 = 1;
      }
      v140 = 10;
      v141 = v127;
      do
      {
        --v140;
        v36 = v141 > 0x7F;
        v141 >>= 7;
      }
      while (v36);
      *(_BYTE *)(v126[8] + v140) = v130;
      v142 = (_BYTE *)(v126[8] + v140 + 1);
      do
      {
        v143 = v127;
        *v142++ = v127 | 0x80;
        v105 = v127 >= 0x80;
        v127 >>= 7;
      }
      while (v105);
      *(v142 - 1) = v143 & 0x7F;
      v39 = v150;
      v8 = sub_1ACC67BB8((uint64_t *)a1, v145, v144, v150[1], v125, v128 - 1, v150[8], (char *)(v126[8] + v140), *((_DWORD *)v126 + 14) - (int)v140);
      v11 = v155;
    }
    else
    {
      v8 = sub_1ACC67BB8((uint64_t *)a1, v145, v144, 0, 0, 0, v39[8], (char *)v39[7], *((_DWORD *)v39 + 13));
    }
    ++*(_DWORD *)(a1 + 100);
    if (!(_DWORD)v8)
    {
      if (a4 == -1 || v145 < v11)
        v8 = sub_1ACC67194((uint64_t *)a1, v145, v39[8]);
      else
        v8 = 0;
    }
    goto LABEL_137;
  }
  v101 = v156;
  v102 = DWORD2(v156);
  v165[0] = 0;
  if (SDWORD2(v156) < 1)
    goto LABEL_122;
  v103 = 0;
  do
  {
    v104 = sub_1ACC67A9C((uint64_t *)a1, *(_QWORD *)(v101 + 8 * v103++));
    if ((_DWORD)v104)
      v105 = 1;
    else
      v105 = v103 >= v102;
  }
  while (!v105);
  v8 = v104;
  if (!(_DWORD)v104)
  {
LABEL_122:
    if (v146)
    {
      v8 = sub_1ACC52F20((uint64_t *)a1, 26, v165, 0);
      if ((_DWORD)v8)
        goto LABEL_136;
      v106 = v165[0];
      v107 = *(_DWORD *)(a1 + 488);
      if (!sub_1ACBA0E50((uint64_t)v165[0], 0))
      {
        v108 = ((int)a3 + v107 * (uint64_t)(int)a2) << 10;
        v109 = *((_QWORD *)v106 + 16);
        if ((*(_WORD *)(v109 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v109, v108);
        }
        else
        {
          *(_QWORD *)v109 = v108;
          *(_WORD *)(v109 + 20) = 4;
        }
        v119 = *(_QWORD *)(*(_QWORD *)v106 + 24);
        v11 = v155;
        if (v119)
          xmmword_1ECD3B1D0(v119);
      }
      v120 = *(_DWORD *)(a1 + 488);
      if (!sub_1ACBA0E50((uint64_t)v106, 1u))
      {
        v121 = (((int)a3 + v120 * (uint64_t)(int)a2) << 10) | 0x3FF;
        v122 = *((_QWORD *)v106 + 16);
        if ((*(_WORD *)(v122 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v122 + 64, v121);
        }
        else
        {
          *(_QWORD *)(v122 + 64) = v121;
          *(_WORD *)(v122 + 84) = 4;
        }
        goto LABEL_173;
      }
    }
    else
    {
      v8 = sub_1ACC52F20((uint64_t *)a1, 16, v165, 0);
      if ((_DWORD)v8)
        goto LABEL_136;
      v106 = v165[0];
      v116 = *(_DWORD *)(a1 + 488);
      if (!sub_1ACBA0E50((uint64_t)v165[0], 0))
      {
        v117 = (((int)a3 + v116 * (uint64_t)(int)a2) << 10) + a4;
        v118 = *((_QWORD *)v106 + 16);
        if ((*(_WORD *)(v118 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v118, v117);
        }
        else
        {
          *(_QWORD *)v118 = v117;
          *(_WORD *)(v118 + 20) = 4;
        }
LABEL_173:
        v123 = *(_QWORD *)(*(_QWORD *)v106 + 24);
        v11 = v155;
        if (v123)
          xmmword_1ECD3B1D0(v123);
      }
    }
    sqlite3_step(v106);
    v124 = sqlite3_reset(v106);
    v8 = v124;
    if (v39 && !(_DWORD)v124)
      goto LABEL_177;
  }
LABEL_136:
  if (!v39)
    goto LABEL_157;
LABEL_137:
  v110 = v39[7];
  if (v110)
  {
    v111 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_143:
      (*v111)(v110);
      goto LABEL_144;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v110);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v110);
    v110 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v111 = &xmmword_1ECD3B1D0;
      goto LABEL_143;
    }
  }
LABEL_144:
  v112 = v39[5];
  if (v112)
  {
    v113 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v112);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v112);
      v112 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_151;
      v113 = &xmmword_1ECD3B1D0;
    }
    (*v113)(v112);
  }
LABEL_151:
  sub_1ACC67EF0(*v39);
  v114 = (void (**)(uint64_t *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_156:
    (*v114)(v39);
    goto LABEL_157;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v39);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v39);
  v39 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v114 = (void (**)(uint64_t *))&xmmword_1ECD3B1D0;
    goto LABEL_156;
  }
LABEL_157:
  sub_1ACC51C60((uint64_t)&v156);
  return v8;
}

uint64_t sub_1ACC67078(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  v1 = result;
  if (*(int *)(result + 488) >= 1)
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(v1 + 496) + 40 * v2;
      v4 = *(_QWORD **)(v3 + 16);
      if (v4)
        break;
LABEL_3:
      result = sub_1ACC4F9D0(v3 + 8);
      if (++v2 >= *(int *)(v1 + 488))
        goto LABEL_14;
    }
    while (1)
    {
      v5 = v4[2];
      if (v5)
      {
        v6 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v5);
          v5 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_7;
          v6 = &xmmword_1ECD3B1D0;
        }
        (*v6)(v5);
      }
LABEL_7:
      v4 = (_QWORD *)*v4;
      if (!v4)
        goto LABEL_3;
    }
  }
LABEL_14:
  *(_DWORD *)(v1 + 508) = 0;
  return result;
}

uint64_t sub_1ACC67194(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  sqlite3_stmt *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  sqlite3_stmt *v47;
  uint64_t v48;
  uint64_t v49;
  sqlite3_stmt *v50;
  sqlite3_stmt *v51;
  sqlite3_stmt *v52;

  v52 = 0;
  v6 = sub_1ACC52F20(a1, 37, &v52, 0);
  if ((_DWORD)v6)
    return v6;
  if (a2 >= 0)
    v8 = a2;
  else
    v8 = a2 + 1023;
  if (3 * a3 >= 0)
    v9 = 3 * a3;
  else
    v9 = 3 * a3 + 1;
  v10 = v52;
  if (!sub_1ACBA0E50((uint64_t)v52, 0))
  {
    v11 = a2 + 1;
    v12 = *((_QWORD *)v10 + 16);
    if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v12, v11);
    }
    else
    {
      *(_QWORD *)v12 = v11;
      *(_WORD *)(v12 + 20) = 4;
    }
    v13 = *(_QWORD *)(*(_QWORD *)v10 + 24);
    if (v13)
      xmmword_1ECD3B1D0(v13);
  }
  if (!sub_1ACBA0E50((uint64_t)v10, 1u))
  {
    v14 = v8 | 0x3FF;
    v15 = *((_QWORD *)v10 + 16);
    if ((*(_WORD *)(v15 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v15 + 64, v14);
    }
    else
    {
      *(_QWORD *)(v15 + 64) = v14;
      *(_WORD *)(v15 + 84) = 4;
    }
    v16 = *(_QWORD *)(*(_QWORD *)v10 + 24);
    if (v16)
      xmmword_1ECD3B1D0(v16);
  }
  if (sqlite3_step(v10) == 100)
  {
    v17 = v9 >> 1;
    while (1)
    {
      v18 = sqlite3_column_text(v10, 2);
      if (!v18)
        break;
      if (*v18 - 48 > 9)
      {
        v22 = 0;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = v19 + 1;
          v21 = v18[++v19] - 48;
        }
        while (v21 < 0xA);
        v22 = v20;
      }
      while (1)
      {
        v23 = v18[v22];
        if (v23 != 32)
          break;
        ++v22;
      }
      v24 = v23 == 45;
      v25 = v23 == 45 ? v22 + 1 : v22;
      v26 = v24 ? -1 : 1;
      v27 = v25;
      v28 = v18[v25];
      if ((v28 - 48) > 9)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        v30 = &v18[v27 + 1];
        do
        {
          v29 = (v28 - 48) + 10 * v29;
          v31 = *v30++;
          v28 = v31;
        }
        while ((v31 - 48) < 0xA);
      }
      v32 = v29 * v26;
      if (v32 < 1 || v32 > v17)
        break;
      if (sqlite3_step(v10) != 100)
      {
        v6 = sqlite3_reset(v10);
        v50 = 0;
        v51 = 0;
        if (!(_DWORD)v6)
        {
          v6 = sub_1ACC52F20(a1, 38, &v51, 0);
          if (!(_DWORD)v6)
          {
            v6 = sub_1ACC52F20(a1, 39, &v50, 0);
            if (!(_DWORD)v6)
            {
              if (!sub_1ACBA0E50((uint64_t)v10, 0))
              {
                v34 = *((_QWORD *)v10 + 16);
                if ((*(_WORD *)(v34 + 20) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v34, a2);
                }
                else
                {
                  *(_QWORD *)v34 = a2;
                  *(_WORD *)(v34 + 20) = 4;
                }
                v35 = *(_QWORD *)(*(_QWORD *)v10 + 24);
                if (v35)
                  xmmword_1ECD3B1D0(v35);
              }
              v36 = 0;
              v37 = v51;
              while (sqlite3_step(v10) == 100)
              {
                if (!sub_1ACBA0E50((uint64_t)v37, 0))
                {
                  v39 = *((_QWORD *)v37 + 16);
                  if ((*(_WORD *)(v39 + 20) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v39, v36);
                  }
                  else
                  {
                    *(_QWORD *)v39 = v36;
                    *(_WORD *)(v39 + 20) = 4;
                  }
                  v40 = *(_QWORD *)(*(_QWORD *)v37 + 24);
                  if (v40)
                    xmmword_1ECD3B1D0(v40);
                }
                v41 = sqlite3_column_int(v10, 0);
                if (!sub_1ACBA0E50((uint64_t)v37, 1u))
                {
                  v42 = *((_QWORD *)v37 + 16);
                  if ((*(_WORD *)(v42 + 84) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v42 + 64, v41);
                  }
                  else
                  {
                    *(_QWORD *)(v42 + 64) = v41;
                    *(_WORD *)(v42 + 84) = 4;
                  }
                  v43 = *(_QWORD *)(*(_QWORD *)v37 + 24);
                  if (v43)
                    xmmword_1ECD3B1D0(v43);
                }
                v44 = sqlite3_column_int(v10, 1);
                if (!sub_1ACBA0E50((uint64_t)v37, 2u))
                {
                  v45 = *((_QWORD *)v37 + 16);
                  if ((*(_WORD *)(v45 + 148) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v45 + 128, v44);
                  }
                  else
                  {
                    *(_QWORD *)(v45 + 128) = v44;
                    *(_WORD *)(v45 + 148) = 4;
                  }
                  v46 = *(_QWORD *)(*(_QWORD *)v37 + 24);
                  if (v46)
                    xmmword_1ECD3B1D0(v46);
                }
                sqlite3_step(v37);
                v38 = sqlite3_reset(v37);
                ++v36;
                if ((_DWORD)v38)
                {
                  v6 = v38;
                  sqlite3_reset(v10);
                  return v6;
                }
              }
              v6 = sqlite3_reset(v10);
              if (!(_DWORD)v6)
              {
                v47 = v50;
                if (!sub_1ACBA0E50((uint64_t)v50, 0))
                {
                  v48 = *((_QWORD *)v47 + 16);
                  if ((*(_WORD *)(v48 + 20) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v48, a2);
                  }
                  else
                  {
                    *(_QWORD *)v48 = a2;
                    *(_WORD *)(v48 + 20) = 4;
                  }
                  v49 = *(_QWORD *)(*(_QWORD *)v47 + 24);
                  if (v49)
                    xmmword_1ECD3B1D0(v49);
                }
                sqlite3_step(v47);
                return sqlite3_reset(v47);
              }
            }
          }
        }
        return v6;
      }
    }
  }
  return sqlite3_reset(v10);
}

uint64_t sub_1ACC67638(uint64_t *a1, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  sqlite3_stmt *v17;

  v17 = 0;
  v7 = sub_1ACC52F20(a1, 9, &v17, 0);
  if (!(_DWORD)v7)
  {
    v8 = (uint64_t *)v17;
    if (!sub_1ACBA0E50((uint64_t)v17, 0))
    {
      v9 = v8[16];
      if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v9, a2);
      }
      else
      {
        *(_QWORD *)v9 = a2;
        *(_WORD *)(v9 + 20) = 4;
      }
      v10 = *(_QWORD *)(*v8 + 24);
      if (v10)
        xmmword_1ECD3B1D0(v10);
    }
    if ((a4 & 0x80000000) != 0)
    {
      sub_1ACBBE20C(98722);
    }
    else if (!sub_1ACBA0E50((uint64_t)v8, 1u))
    {
      if (a3)
      {
        v11 = sub_1ACB57870(v8[16] + 64, a3, a4, 0, 0);
        if (v11)
        {
          v12 = v11;
          v13 = *v8;
          *(_DWORD *)(v13 + 80) = v12;
          sub_1ACBE938C(v13, v12);
          sub_1ACBF2990(*v8, v12);
        }
      }
      v14 = *(_QWORD *)(*v8 + 24);
      if (v14)
        xmmword_1ECD3B1D0(v14);
    }
    sqlite3_step((sqlite3_stmt *)v8);
    v7 = sqlite3_reset((sqlite3_stmt *)v8);
    if (!sub_1ACBA0E50((uint64_t)v8, 1u))
    {
      v15 = *(_QWORD *)(*v8 + 24);
      if (v15)
        xmmword_1ECD3B1D0(v15);
    }
  }
  return v7;
}

uint64_t sub_1ACC677A8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  char v27;
  _BYTE *v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = (uint64_t *)*a2;
  if (*a2)
  {
    v9 = v8[4];
    LODWORD(v10) = *((_DWORD *)v8 + 10);
    if ((int)v10 >= (int)a4)
      v10 = a4;
    else
      v10 = v10;
    if ((int)v10 < 1)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = 0;
      while (*(unsigned __int8 *)(v9 + v11) == a3[v11])
      {
        if (v10 == ++v11)
          goto LABEL_13;
      }
      LODWORD(v10) = v11;
    }
LABEL_13:
    v13 = (a4 - v10);
    if ((int)v13 < 1)
      return 267;
    v14 = *((_DWORD *)v8 + 14);
    v15 = v14;
    v16 = (int)v10;
    v17 = v14 + a4 - v10;
    v10 = (int)v10;
    do
    {
      ++v17;
      v18 = v10 > 0x7F;
      v10 >>= 7;
    }
    while (v18);
    v19 = v13;
    do
    {
      ++v17;
      v18 = v19 > 0x7F;
      v19 >>= 7;
    }
    while (v18);
    v12 = *(_DWORD *)(a1 + 456);
    if (v17 > v12)
    {
      if (v9)
        goto LABEL_20;
      if (sqlite3_initialize())
      {
        v8[8] = 0;
        return 7;
      }
      v24 = sub_1ACB5D828(v17);
      v8[8] = v24;
      if (!v24)
        return 7;
      v9 = v8[4];
      v15 = v14;
    }
    if (v9)
    {
      v25 = (_BYTE *)(v8[8] + v15);
      v26 = v16;
      do
      {
        v27 = v26;
        *v25++ = v26 | 0x80;
        ++v14;
        v18 = v26 > 0x7F;
        v26 >>= 7;
      }
      while (v18);
      *(v25 - 1) = v27 & 0x7F;
    }
    v28 = (_BYTE *)(v8[8] + v14);
    v29 = v13;
    do
    {
      v30 = v29;
      *v28++ = v29 | 0x80;
      ++v14;
      v18 = v29 > 0x7F;
      v29 >>= 7;
    }
    while (v18);
    *(v28 - 1) = v30 & 0x7F;
    memcpy((void *)(v8[8] + v14), &a3[v16], v13);
    *((_DWORD *)v8 + 14) = v13 + v14;
    ++*((_DWORD *)v8 + 6);
    v31 = (void *)v8[6];
    if (*((_DWORD *)v8 + 11) >= (int)a4)
    {
      v33 = (int)a4;
    }
    else
    {
      if (sqlite3_initialize())
        return 7;
      v32 = sub_1ACB6BB48((uint64_t)v31, 2 * (int)a4);
      if (!v32)
        return 7;
      v31 = (void *)v32;
      v33 = (int)a4;
      *((_DWORD *)v8 + 11) = 2 * a4;
      v8[6] = v32;
    }
    v8[4] = (uint64_t)v31;
    memcpy(v31, a3, v33);
    result = 0;
    *((_DWORD *)v8 + 10) = a4;
    return result;
  }
  v12 = *(_DWORD *)(a1 + 456);
LABEL_20:
  if (sqlite3_initialize())
    return 7;
  v21 = sub_1ACB5D828(v12 + 72);
  v35 = v21;
  if (!v21)
    return 7;
  v22 = v21;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_DWORD *)(v21 + 56) = 11;
  *(_QWORD *)(v21 + 64) = v21 + 72;
  if (v8)
  {
    v34 = *v8;
    result = sub_1ACC677A8(a1, &v34, a3, a4);
    v23 = v34;
    if (!*v8)
      *v8 = v34;
    v8[1] = v22;
    *(_QWORD *)(v22 + 16) = v8[2];
    *(_QWORD *)v22 = v23;
    *(_QWORD *)(v22 + 48) = v8[6];
    *(_DWORD *)(v22 + 44) = *((_DWORD *)v8 + 11);
    v8[6] = 0;
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v21;
    result = sub_1ACC677A8(a1, &v35, a3, a4);
    v22 = v35;
  }
  *a2 = v22;
  return result;
}

uint64_t sub_1ACC67A9C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;

  if (!*(_QWORD *)(a2 + 8))
    return 0;
  v11 = 0;
  result = sub_1ACC52F20(a1, 17, &v11, 0);
  if (!(_DWORD)result)
  {
    v4 = v11;
    v5 = *(_QWORD *)(a2 + 8);
    if (!sub_1ACBA0E50((uint64_t)v11, 0))
    {
      v6 = *((_QWORD *)v4 + 16);
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v6, v5);
      }
      else
      {
        *(_QWORD *)v6 = v5;
        *(_WORD *)(v6 + 20) = 4;
      }
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 24);
      if (v7)
        xmmword_1ECD3B1D0(v7);
    }
    v8 = *(_QWORD *)(a2 + 24);
    if (!sub_1ACBA0E50((uint64_t)v4, 1u))
    {
      v9 = *((_QWORD *)v4 + 16);
      if ((*(_WORD *)(v9 + 84) & 0x9000) != 0)
      {
        sub_1ACBF327C(v9 + 64, v8);
      }
      else
      {
        *(_QWORD *)(v9 + 64) = v8;
        *(_WORD *)(v9 + 84) = 4;
      }
      v10 = *(_QWORD *)(*(_QWORD *)v4 + 24);
      if (v10)
        xmmword_1ECD3B1D0(v10);
    }
    sqlite3_step(v4);
    return sqlite3_reset(v4);
  }
  return result;
}

uint64_t sub_1ACC67BB8(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, unsigned int a9)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  sqlite3_stmt *v35;

  v35 = 0;
  v16 = sub_1ACC52F20(a1, 11, &v35, 0);
  if (!(_DWORD)v16)
  {
    v17 = (uint64_t *)v35;
    if (!sub_1ACBA0E50((uint64_t)v35, 0))
    {
      v18 = v17[16];
      if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v18, a2);
      }
      else
      {
        *(_QWORD *)v18 = a2;
        *(_WORD *)(v18 + 20) = 4;
      }
      v19 = *(_QWORD *)(*v17 + 24);
      if (v19)
        xmmword_1ECD3B1D0(v19);
    }
    if (!sub_1ACBA0E50((uint64_t)v17, 1u))
    {
      v20 = v17[16];
      if ((*(_WORD *)(v20 + 84) & 0x9000) != 0)
      {
        sub_1ACBF327C(v20 + 64, a3);
      }
      else
      {
        *(_QWORD *)(v20 + 64) = a3;
        *(_WORD *)(v20 + 84) = 4;
      }
      v21 = *(_QWORD *)(*v17 + 24);
      if (v21)
        xmmword_1ECD3B1D0(v21);
    }
    if (!sub_1ACBA0E50((uint64_t)v17, 2u))
    {
      v22 = v17[16];
      if ((*(_WORD *)(v22 + 148) & 0x9000) != 0)
      {
        sub_1ACBF327C(v22 + 128, a4);
      }
      else
      {
        *(_QWORD *)(v22 + 128) = a4;
        *(_WORD *)(v22 + 148) = 4;
      }
      v23 = *(_QWORD *)(*v17 + 24);
      if (v23)
        xmmword_1ECD3B1D0(v23);
    }
    if (!sub_1ACBA0E50((uint64_t)v17, 3u))
    {
      v24 = v17[16];
      if ((*(_WORD *)(v24 + 212) & 0x9000) != 0)
      {
        sub_1ACBF327C(v24 + 192, a5);
      }
      else
      {
        *(_QWORD *)(v24 + 192) = a5;
        *(_WORD *)(v24 + 212) = 4;
      }
      v25 = *(_QWORD *)(*v17 + 24);
      if (v25)
        xmmword_1ECD3B1D0(v25);
    }
    if (a7)
    {
      v26 = sqlite3_mprintf("%lld %lld", a6, a7);
      if (!v26)
        return 7;
      sub_1ACBA0CE0(v17, 5, v26, -1, (uint64_t (*)(uint64_t))sqlite3_free, 1u);
    }
    else if (!sub_1ACBA0E50((uint64_t)v17, 4u))
    {
      v27 = v17[16];
      if ((*(_WORD *)(v27 + 276) & 0x9000) != 0)
      {
        sub_1ACBF327C(v27 + 256, a6);
      }
      else
      {
        *(_QWORD *)(v27 + 256) = a6;
        *(_WORD *)(v27 + 276) = 4;
      }
      v28 = *(_QWORD *)(*v17 + 24);
      if (v28)
        xmmword_1ECD3B1D0(v28);
    }
    if ((a9 & 0x80000000) != 0)
    {
      sub_1ACBBE20C(98722);
    }
    else if (!sub_1ACBA0E50((uint64_t)v17, 5u))
    {
      if (a8)
      {
        v29 = sub_1ACB57870(v17[16] + 320, a8, a9, 0, 0);
        if (v29)
        {
          v30 = v29;
          v31 = *v17;
          *(_DWORD *)(v31 + 80) = v30;
          sub_1ACBE938C(v31, v30);
          sub_1ACBF2990(*v17, v30);
        }
      }
      v32 = *(_QWORD *)(*v17 + 24);
      if (v32)
        xmmword_1ECD3B1D0(v32);
    }
    sqlite3_step((sqlite3_stmt *)v17);
    v16 = sqlite3_reset((sqlite3_stmt *)v17);
    if (!sub_1ACBA0E50((uint64_t)v17, 5u))
    {
      v33 = *(_QWORD *)(*v17 + 24);
      if (v33)
        xmmword_1ECD3B1D0(v33);
    }
  }
  return v16;
}

uint64_t sub_1ACC67EF0(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (**v5)(_QWORD);
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t (**v8)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD **)(result + 16);
    sub_1ACC67EF0(*v1);
    while (1)
    {
      v2 = (_QWORD *)v1[1];
      v3 = (_QWORD *)v1[8];
      if (v3 != v1 + 9 && v3 != 0)
      {
        v5 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_14;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v3);
        v3 = (_QWORD *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
          break;
      }
LABEL_15:
      v6 = v1[6];
      if (!v6)
        goto LABEL_22;
      v7 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_21;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v7 = &xmmword_1ECD3B1D0;
LABEL_21:
        (*v7)(v6);
      }
LABEL_22:
      v8 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v1);
        v1 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v8 = &xmmword_1ECD3B1D0;
      }
      result = (*v8)(v1);
LABEL_4:
      v1 = v2;
      if (!v2)
        return result;
    }
    v5 = &xmmword_1ECD3B1D0;
LABEL_14:
    (*v5)(v3);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1ACC680AC(uint64_t a1, int a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;

  sub_1ACC67078(a1);
  if (!a2
    || (v10 = 0, result = sub_1ACC52F20((uint64_t *)a1, 2, &v10, 0), !(_DWORD)result)
    && (v5 = v10, sqlite3_step(v10), result = sqlite3_reset(v5), !(_DWORD)result))
  {
    v10 = 0;
    result = sub_1ACC52F20((uint64_t *)a1, 3, &v10, 0);
    if (!(_DWORD)result)
    {
      v6 = v10;
      sqlite3_step(v10);
      result = sqlite3_reset(v6);
      if (!(_DWORD)result)
      {
        v10 = 0;
        result = sub_1ACC52F20((uint64_t *)a1, 4, &v10, 0);
        if (!(_DWORD)result)
        {
          v7 = v10;
          sqlite3_step(v10);
          result = sqlite3_reset(v7);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 462))
  {
    if (!(_DWORD)result)
    {
      v10 = 0;
      result = sub_1ACC52F20((uint64_t *)a1, 5, &v10, 0);
      if (!(_DWORD)result)
      {
        v8 = v10;
        sqlite3_step(v10);
        result = sqlite3_reset(v8);
      }
    }
  }
  if (*(_BYTE *)(a1 + 461) && !(_DWORD)result)
  {
    v10 = 0;
    result = sub_1ACC52F20((uint64_t *)a1, 6, &v10, 0);
    if (!(_DWORD)result)
    {
      v9 = v10;
      sqlite3_step(v10);
      return sqlite3_reset(v9);
    }
  }
  return result;
}

uint64_t sub_1ACC681EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t **, char **, int *, char *, uint64_t *, int *);
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t **v29;

  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  if (a3)
  {
    v9 = *(uint64_t **)(a1 + 72);
    v10 = *v9;
    v29 = 0;
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t ***))(v10 + 24))(v9, a3, 0xFFFFFFFFLL, &v29);
    if (!(_DWORD)v11)
    {
      *v29 = v9;
      v12 = v29;
      if (*(int *)v10 >= 1
        && (v13 = (*(uint64_t (**)(uint64_t **, uint64_t))(v10 + 48))(v29, a2), v12 = v29, (_DWORD)v13))
      {
        v11 = v13;
        (*(void (**)(uint64_t **))(v10 + 32))(v29);
      }
      else
      {
        v14 = *(uint64_t (**)(uint64_t **, char **, int *, char *, uint64_t *, int *))(v10 + 40);
        v15 = v14(v12, &v26, &v25, (char *)&v28 + 4, &v28, &v27);
        if (v15)
        {
          v16 = v15;
          v17 = 0;
        }
        else
        {
          v17 = 0;
          do
          {
            if (v27 >= v17)
              v17 = v27 + 1;
            v16 = 1;
            if (v27 < 0)
              break;
            if (!v26 || v25 < 1)
              break;
            v20 = sub_1ACC683F8(a1, a4, v27, *(_QWORD *)(a1 + 496) + 8, v26, v25);
            if (v20)
            {
              v16 = v20;
              break;
            }
            v21 = 0;
            v22 = 40;
            while (++v21 < *(int *)(a1 + 488))
            {
              v23 = *(_QWORD *)(a1 + 496);
              v24 = *(unsigned int *)(v23 + v22);
              if (v25 >= (int)v24)
              {
                v16 = sub_1ACC683F8(a1, a4, v27, v23 + v22 + 8, v26, v24);
                v22 += 40;
                if (v16)
                  goto LABEL_9;
              }
              else
              {
                v22 += 40;
              }
            }
            v16 = v14(v12, &v26, &v25, (char *)&v28 + 4, &v28, &v27);
          }
          while (!v16);
        }
LABEL_9:
        (*(void (**)(uint64_t **))(v10 + 32))(v12);
        *a5 += v17;
        if (v16 == 101)
          return 0;
        else
          return v16;
      }
    }
  }
  else
  {
    v11 = 0;
    *a5 = 0;
  }
  return v11;
}

uint64_t sub_1ACC683F8(uint64_t a1, int a2, int a3, uint64_t a4, char *a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  int v17;
  void *v18;
  int *v19;
  int *v20;
  uint64_t result;
  void (**v22)(int *);
  unsigned int v23;
  int *v24;

  v23 = 0;
  if (a4 && *(_QWORD *)(a4 + 24))
  {
    v12 = *(_BYTE *)a4 == 1 ? sub_1ACB5BD38(a5, a6) : sub_1ACC52EC8(a5, a6);
    v13 = *(_QWORD *)(a4 + 24);
    if (v13)
    {
      v14 = (int *)(v13 + 16 * ((*(_DWORD *)(a4 + 16) - 1) & v12));
      v17 = *v14;
      v15 = v14 + 2;
      v16 = v17;
      if (*(_BYTE *)a4 == 1)
        v18 = sub_1ACB5BD9C;
      else
        v18 = sub_1ACC52F00;
      while (v16)
      {
        v15 = *(_DWORD **)v15;
        if (!v15)
          break;
        --v16;
        if (!((unsigned int (*)(_QWORD, _QWORD, char *, uint64_t))v18)(*((_QWORD *)v15 + 3), v15[8], a5, a6))
        {
          v19 = (int *)*((_QWORD *)v15 + 2);
          v24 = v19;
          if (v19)
            *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) - a6 - *v19 - 40;
          goto LABEL_16;
        }
      }
    }
  }
  v24 = 0;
LABEL_16:
  if (sub_1ACC64E5C(&v24, *(_QWORD *)(a1 + 512), a2, a3, &v23))
  {
    v20 = v24;
    if (v20 == (int *)sub_1ACB5B970(a4, a5, a6, (uint64_t)v24))
    {
      if (v20)
      {
        v22 = (void (**)(int *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v20);
          v20 = (int *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            return 7;
          v22 = (void (**)(int *))&xmmword_1ECD3B1D0;
        }
        (*v22)(v20);
      }
      return 7;
    }
  }
  result = v23;
  if (!v23)
    *(_DWORD *)(a1 + 508) += a6 + *v24 + 40;
  return result;
}

uint64_t sub_1ACC68600(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t (**v14)(char *);
  uint64_t v15;
  sqlite3_stmt *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  sqlite3_stmt *v52;
  uint64_t v53;
  sqlite3_stmt *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void *v66;
  sqlite3_stmt *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  _BOOL4 v73;
  sqlite3_int64 v74;
  sqlite3_int64 v75;
  sqlite3_int64 v76;
  _QWORD *v77;
  const void *v78;
  int v79;
  const void *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  sqlite3_stmt *v88;
  uint64_t v89;
  sqlite3_stmt *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  sqlite3_int64 v98;
  const unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  sqlite3_stmt *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  const unsigned __int8 *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  sqlite3_stmt *v121;
  sqlite3_int64 v122;
  uint64_t v123;
  sqlite3_stmt *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _BOOL4 v128;
  uint64_t v129;
  char *v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  BOOL v135;
  int v137;
  uint64_t (**v138)(uint64_t);
  void (**v139)(char *);
  uint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  uint64x2_t v144;
  _QWORD *v145;
  sqlite3_int64 v146;
  int32x2_t v147;
  uint64_t v148;
  int v149;
  int *v150;
  int v151;
  uint64_t *v152;
  void *v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  int v159;
  int v160;
  uint64_t v161;
  _BOOL4 v162;
  uint64_t v163;
  BOOL v164;
  void **v165;
  size_t v166;
  uint64_t v167;
  _DWORD *v168;
  int v169;
  void *v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  sqlite3_int64 v174;
  uint64_t v175;
  int v176;
  int v177;
  void **v178;
  int v179;
  uint64_t v180;
  _DWORD *v181;
  int v182;
  void *v183;
  char *v184;
  uint64_t v185;
  uint64_t (**v186)(uint64_t);
  uint64_t v187;
  char *v188;
  void (**v189)(char *);
  int v190;
  uint64_t v191;
  unsigned __int8 *v192;
  signed int v193;
  signed int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  const void *v199;
  int v200;
  unint64_t v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  unint64_t v209;
  signed int v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  int v214;
  const void *v215;
  signed int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _DWORD *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  unint64_t v231;
  int v232;
  int v233;
  unint64_t v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  _DWORD *v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  _DWORD *v250;
  int v251;
  _BYTE *v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  char v256;
  int v257;
  uint64_t v258;
  _DWORD *v259;
  signed int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _DWORD *v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t (**v283)(uint64_t);
  uint64_t v284;
  uint64_t (**v285)(uint64_t);
  uint64_t v286;
  uint64_t v287;
  _BYTE *v288;
  uint64_t v289;
  uint64_t (**v290)(uint64_t);
  uint64_t v291;
  uint64_t (**v292)(uint64_t);
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t v301;
  uint64_t (**v302)(uint64_t);
  uint64_t v303;
  uint64_t (**v304)(uint64_t);
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  size_t v316;
  int *v317;
  const void *v318;
  unint64_t v319;
  unint64_t v320;
  void **v321;
  sqlite3_int64 v322;
  int v323;
  _BOOL4 __src;
  char *__srca;
  uint64_t *__srcb;
  uint64_t v327;
  unsigned int *v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int __s1;
  void *__s1a;
  _DWORD *__s1b;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  int v342;
  sqlite3_int64 v343;
  sqlite3_stmt *v344;
  char *v345;
  uint64_t v346;
  int v347;
  unsigned int v348;
  _OWORD v349[4];
  int v350;
  char *v351;
  sqlite3_stmt *v352[2];

  v345 = 0;
  v346 = 0;
  if (sqlite3_initialize())
    return 7;
  v8 = sub_1ACB5D828(808);
  if (!v8)
    return 7;
  v9 = v8;
  v340 = a3;
  *(_QWORD *)&v349[0] = 0;
  LODWORD(v346) = 0;
  v6 = sub_1ACC52F20((uint64_t *)a1, 22, (sqlite3_stmt **)v349, 0);
  v10 = &qword_1ECD3DBE0[132];
  if (!(_DWORD)v6)
  {
    v16 = *(sqlite3_stmt **)&v349[0];
    if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
    {
      v17 = *((_QWORD *)v16 + 16);
      if ((*(_WORD *)(v17 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v17, 1);
      }
      else
      {
        *(_QWORD *)v17 = 1;
        *(_WORD *)(v17 + 20) = 4;
      }
      v18 = *(_QWORD *)(*(_QWORD *)v16 + 24);
      if (v18)
        xmmword_1ECD3B1D0(v18);
    }
    if (sqlite3_step(v16) == 100)
    {
      v19 = sqlite3_column_blob(v16, 0);
      v20 = sqlite3_column_bytes(v16, 0);
      if (v19)
      {
        v21 = v20;
        if (v20 >= 1)
        {
          if (sqlite3_initialize() || (v22 = (char *)sub_1ACB6BB48(0, v21)) == 0)
          {
            sqlite3_reset(v16);
            v6 = 7;
            goto LABEL_6;
          }
          HIDWORD(v346) = v21;
          v345 = v22;
          memcpy(v22, v19, v21);
        }
        LODWORD(v346) = v21;
      }
    }
    v6 = sqlite3_reset(v16);
    v348 = v6;
    if (!(_DWORD)v6 && a2 >= 1)
    {
      v338 = 0;
      v343 = 0;
      if (a3 <= 2)
        v23 = 2;
      else
        v23 = a3;
      v333 = v23;
      v330 = (uint64_t *)(v9 + 80);
      v331 = v9 + 696;
      v327 = v9 + 96;
      v328 = (unsigned int *)(v9 + 88);
      v329 = (uint64_t *)(v9 + 64);
      v334 = v9;
      v339 = a1;
      v341 = v9 + 720;
      while (1)
      {
        v26 = *(int *)(a1 + 488);
        v344 = 0;
        sub_1ACC52F20((uint64_t *)a1, 28, &v344, 0);
        v27 = v344;
        if (!sub_1ACBA0E50((uint64_t)v344, 0))
        {
          v28 = *((_QWORD *)v27 + 16);
          if ((*(_WORD *)(v28 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v28, v333);
          }
          else
          {
            *(_QWORD *)v28 = v333;
            *(_WORD *)(v28 + 20) = 4;
          }
          v29 = *(_QWORD *)(*(_QWORD *)v27 + 24);
          if (v29)
            xmmword_1ECD3B1D0(v29);
        }
        if (sqlite3_step(v27) == 100)
        {
          v343 = sqlite3_column_int64(v27, 0);
          v30 = sqlite3_column_int(v27, 1);
        }
        else
        {
          v30 = -1;
        }
        v31 = v26 << 10;
        v347 = v30;
        v6 = sqlite3_reset(v27);
        v32 = 0;
        v348 = v6;
        if ((_DWORD)v6)
          goto LABEL_89;
        v33 = v346;
        if (!(_DWORD)v346)
          goto LABEL_88;
        *(_QWORD *)&v349[0] = 0;
        v34 = (int)v346 - 1;
        v35 = v345;
        if (v345[v34] < 0)
          goto LABEL_63;
        v36 = v34 & ((int)v34 >> 31);
        v37 = &v345[v34 - 1];
        v38 = v346;
        while (--v38 >= 1)
        {
          v39 = *v37--;
          if ((v39 & 0x80000000) == 0)
            goto LABEL_65;
        }
        v38 = v36;
        if ((int)v346 > 0)
        {
LABEL_63:
          v40 = 0;
          v41 = 0;
          v6 = 267;
          v348 = 267;
          if (v30 < 0)
            goto LABEL_91;
        }
        else
        {
LABEL_65:
          if (v38 >= 1)
            v42 = 1;
          else
            v42 = v38;
          v43 = v42 - 1;
          v44 = v38 + 4294967294;
          while (v38 >= 2)
          {
            v45 = v345[v44--];
            --v38;
            if ((v45 & 0x80000000) == 0)
              goto LABEL_73;
          }
          v38 = v43;
LABEL_73:
          LODWORD(v346) = v38;
          v46 = v38 + (uint64_t)(int)sub_1ACC53378(&v345[v38], (unint64_t *)v349);
          v47 = (unsigned __int8 *)&v35[v46];
          v41 = v35[v46];
          if ((v41 & 0x80) != 0)
          {
            v41 = v41 & 0x7F | (v47[1] << 7);
            v9 = v334;
            if ((char)v47[1] < 0)
            {
              v41 = v41 & 0x3FFF | (v47[2] << 14);
              if ((char)v47[2] < 0)
              {
                v41 = v41 & 0x1FFFFF | (v47[3] << 21);
                if ((char)v47[3] < 0)
                {
                  v41 = v41 & 0xFFFFFFF | ((v47[4] & 7) << 28);
                  v48 = 5;
                }
                else
                {
                  v48 = 4;
                }
              }
              else
              {
                v48 = 3;
              }
            }
            else
            {
              v48 = 2;
            }
          }
          else
          {
            v48 = 1;
            v9 = v334;
          }
          if (v48 + (_DWORD)v46 == v33)
            v6 = 0;
          else
            v6 = 267;
          v40 = *(_QWORD *)&v349[0];
          v348 = v6;
          if (v30 < 0)
            goto LABEL_91;
        }
        if (v343 % v31 < v40 % v31)
        {
          v32 = 0;
          LODWORD(v346) = v33;
LABEL_88:
          a1 = v339;
LABEL_89:
          v40 = v343;
          if (v30 < 1)
            goto LABEL_540;
          goto LABEL_97;
        }
LABEL_91:
        v49 = v340;
        if (v30 > v340)
          v49 = v30;
        if (v49 >= v41)
          v30 = v41;
        else
          v30 = v49;
        v347 = v30;
        v338 = 1;
        v32 = 1;
        a1 = v339;
        if (v30 < 1)
        {
LABEL_540:
          v50 = v6;
LABEL_541:
          v6 = v50;
LABEL_542:
          if (v338)
          {
            if (!(_DWORD)v6)
            {
              *(_QWORD *)&v349[0] = 0;
              v6 = sub_1ACC52F20((uint64_t *)a1, 23, (sqlite3_stmt **)v349, 0);
              if (!(_DWORD)v6)
              {
                v305 = *(uint64_t **)&v349[0];
                if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
                {
                  v306 = v305[16];
                  if ((*(_WORD *)(v306 + 20) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v306, 1);
                  }
                  else
                  {
                    *(_QWORD *)v306 = 1;
                    *(_WORD *)(v306 + 20) = 4;
                  }
                  v307 = *(_QWORD *)(*v305 + 24);
                  if (v307)
                    xmmword_1ECD3B1D0(v307);
                }
                v308 = v346;
                if ((v346 & 0x80000000) != 0)
                {
                  sub_1ACBBE20C(98722);
                }
                else
                {
                  v309 = v345;
                  if (!sub_1ACBA0E50((uint64_t)v305, 1u))
                  {
                    if (v309)
                    {
                      v310 = sub_1ACB57870(v305[16] + 64, v309, v308, 0, 0);
                      if (v310)
                      {
                        v311 = v310;
                        v312 = *v305;
                        *(_DWORD *)(v312 + 80) = v311;
                        sub_1ACBE938C(v312, v311);
                        sub_1ACBF2990(*v305, v311);
                      }
                    }
                    v313 = *(_QWORD *)(*v305 + 24);
                    if (v313)
                      xmmword_1ECD3B1D0(v313);
                  }
                }
                sqlite3_step((sqlite3_stmt *)v305);
                v6 = sqlite3_reset((sqlite3_stmt *)v305);
                if (!sub_1ACBA0E50((uint64_t)v305, 1u))
                {
                  v314 = *(_QWORD *)(*v305 + 24);
                  if (v314)
                    xmmword_1ECD3B1D0(v314);
                }
                v9 = v334;
              }
            }
          }
          break;
        }
LABEL_97:
        v342 = a2;
        v50 = 267;
        if (v40 < 0 || v40 > v31 << 32)
          goto LABEL_541;
        v343 = v40;
        bzero((void *)v9, 0x328uLL);
        *(_DWORD *)(v9 + 712) = 1;
        if ((_DWORD)v6)
          goto LABEL_41;
        *(_QWORD *)&v349[0] = 0;
        v332 = v343 + 1;
        a2 = v342;
        v24 = v341;
        if (sub_1ACC52F20((uint64_t *)a1, 8, (sqlite3_stmt **)v349, 0))
        {
          __s1 = 0;
        }
        else
        {
          v52 = *(sqlite3_stmt **)&v349[0];
          if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
          {
            v53 = *((_QWORD *)v52 + 16);
            if ((*(_WORD *)(v53 + 20) & 0x9000) != 0)
            {
              sub_1ACBF327C(v53, v332);
            }
            else
            {
              *(_QWORD *)v53 = v332;
              *(_WORD *)(v53 + 20) = 4;
            }
            v57 = *(_QWORD *)(*(_QWORD *)v52 + 24);
            if (v57)
              xmmword_1ECD3B1D0(v57);
          }
          v58 = v10;
          sqlite3_step(v52);
          v59 = sqlite3_column_int(v52, 0);
          v60 = sqlite3_reset(v52);
          v348 = v60;
          __s1 = v59;
          if (v59)
          {
            v6 = v60;
            if (!v32)
            {
              v10 = v58;
              goto LABEL_134;
            }
            v10 = v58;
            if (__s1 != 1)
              goto LABEL_134;
            __s1 = 1;
          }
          else
          {
            __s1 = 0;
            v10 = v58;
          }
        }
        *(_QWORD *)&v349[0] = 0;
        v51 = sub_1ACC52F20((uint64_t *)a1, 15, (sqlite3_stmt **)v349, 0);
        if ((_DWORD)v51)
        {
          v6 = v51;
LABEL_104:
          v348 = v6;
          goto LABEL_42;
        }
        v54 = *(sqlite3_stmt **)&v349[0];
        if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
        {
          v55 = v343 + 2;
          v56 = *((_QWORD *)v54 + 16);
          if ((*(_WORD *)(v56 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v56, v55);
          }
          else
          {
            *(_QWORD *)v56 = v55;
            *(_WORD *)(v56 + 20) = 4;
          }
          v61 = *(_QWORD *)(*(_QWORD *)v54 + 24);
          if (v61)
            xmmword_1ECD3B1D0(v61);
        }
        if (!sub_1ACBA0E50((uint64_t)v54, 1u))
        {
          v62 = (v332 & 0xFFFFFFFFFFFFFC00) + 1024;
          v63 = *((_QWORD *)v54 + 16);
          if ((*(_WORD *)(v63 + 84) & 0x9000) != 0)
          {
            sub_1ACBF327C(v63 + 64, v62);
          }
          else
          {
            *(_QWORD *)(v63 + 64) = v62;
            *(_WORD *)(v63 + 84) = 4;
          }
          v64 = *(_QWORD *)(*(_QWORD *)v54 + 24);
          if (v64)
            xmmword_1ECD3B1D0(v64);
        }
        if (sqlite3_step(v54) == 100)
        {
          v65 = sqlite3_column_type(v54, 0);
          v6 = sqlite3_reset(v54);
          v348 = v6;
          if (v65 == 5)
            *(_DWORD *)(v9 + 712) |= 2u;
        }
        else
        {
          v6 = sqlite3_reset(v54);
          v348 = v6;
        }
LABEL_134:
        if ((_DWORD)v6)
          goto LABEL_42;
        *(_QWORD *)&v349[0] = 0;
        *(_OWORD *)v341 = 0u;
        *(_OWORD *)(v341 + 16) = 0u;
        *(_OWORD *)(v341 + 32) = 0u;
        *(_OWORD *)(v341 + 48) = 0u;
        *(_OWORD *)(v341 + 64) = 0u;
        *(_QWORD *)(v341 + 80) = 0;
        if (sqlite3_initialize())
        {
          *(_QWORD *)v341 = 0;
          v6 = 7;
          goto LABEL_104;
        }
        v66 = (void *)sub_1ACB5D828(8 * v30);
        *(_QWORD *)v341 = v66;
        if (!v66)
        {
          v6 = 7;
          goto LABEL_104;
        }
        bzero(v66, 8 * v30);
        v6 = sub_1ACC52F20((uint64_t *)a1, 12, (sqlite3_stmt **)v349, 0);
        if ((_DWORD)v6)
          goto LABEL_104;
        v67 = *(sqlite3_stmt **)&v349[0];
        if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
        {
          v68 = *((_QWORD *)v67 + 16);
          if ((*(_WORD *)(v68 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v68, v343);
          }
          else
          {
            *(_QWORD *)v68 = v343;
            *(_WORD *)(v68 + 20) = 4;
          }
          v69 = *(_QWORD *)(*(_QWORD *)v67 + 24);
          if (v69)
            xmmword_1ECD3B1D0(v69);
        }
        v70 = 0;
        v71 = 0;
        while (1)
        {
          v72 = sqlite3_step(v67) != 100 || v71 >= v30;
          v73 = v72;
          __src = v73;
          if (v72)
            break;
          v74 = sqlite3_column_int64(v67, 1);
          v75 = sqlite3_column_int64(v67, 2);
          v76 = sqlite3_column_int64(v67, 3);
          v77 = v10;
          v78 = sqlite3_column_blob(v67, 4);
          v79 = sqlite3_column_bytes(v67, 4);
          v80 = v78;
          v10 = v77;
          v9 = v334;
          v81 = sub_1ACC52D5C(v71, 0, v74, v75, v76, v80, v79, (uint64_t *)(*(_QWORD *)(v334 + 720) + v70));
          ++*(_DWORD *)(v334 + 728);
          ++v71;
          v70 += 8;
          if (v81)
          {
            v82 = v81;
            goto LABEL_157;
          }
        }
        v82 = 0;
LABEL_157:
        a1 = v339;
        v24 = v341;
        v83 = sqlite3_reset(v67);
        if (__src)
          v6 = v83;
        else
          v6 = v82;
        v348 = v6;
        a2 = v342;
        if ((_DWORD)v6)
          goto LABEL_42;
        if (*(_DWORD *)(v9 + 728) != v30)
        {
          v6 = 0;
          goto LABEL_42;
        }
        *(_QWORD *)(v9 + 736) = v331;
        v84 = sub_1ACC53478(v339, (uint64_t *)v341, *(const void **)(v9 + 696), *(_DWORD *)(v9 + 704));
        v348 = v84;
        if ((_DWORD)v84)
        {
          v6 = v84;
          goto LABEL_42;
        }
        v85 = sub_1ACC53D44(v339, v341);
        v50 = v85;
        v348 = v85;
        if ((_DWORD)v85 != 100 && (_DWORD)v85)
        {
          sub_1ACC51C60(v341);
          goto LABEL_541;
        }
        if (!v32 || (v86 = (__s1 - 1), __s1 < 1))
        {
          *(_QWORD *)&v349[0] = 0;
          v352[0] = 0;
          v6 = sub_1ACC52F20((uint64_t *)v339, 29, (sqlite3_stmt **)v349, 0);
          if (!(_DWORD)v6)
          {
            v90 = *(sqlite3_stmt **)&v349[0];
            if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
            {
              v91 = *((_QWORD *)v90 + 16);
              if ((*(_WORD *)(v91 + 20) & 0x9000) != 0)
              {
                sub_1ACBF327C(v91, v343);
              }
              else
              {
                *(_QWORD *)v91 = v343;
                *(_WORD *)(v91 + 20) = 4;
              }
              v94 = *(_QWORD *)(*(_QWORD *)v90 + 24);
              if (v94)
                xmmword_1ECD3B1D0(v94);
            }
            v95 = *(int *)(v334 + 728);
            if (!sub_1ACBA0E50((uint64_t)v90, 1u))
            {
              v96 = *((_QWORD *)v90 + 16);
              if ((*(_WORD *)(v96 + 84) & 0x9000) != 0)
              {
                sub_1ACBF327C(v96 + 64, v95);
              }
              else
              {
                *(_QWORD *)(v96 + 64) = v95;
                *(_WORD *)(v96 + 84) = 4;
              }
              v119 = *(_QWORD *)(*(_QWORD *)v90 + 24);
              if (v119)
                xmmword_1ECD3B1D0(v119);
            }
            if (sqlite3_step(v90) == 100)
              v120 = sqlite3_column_int(v90, 0);
            else
              v120 = 0;
            v6 = sqlite3_reset(v90);
            if (!(_DWORD)v6)
            {
              v6 = sub_1ACC52F20((uint64_t *)v339, 10, v352, 0);
              if (!(_DWORD)v6)
              {
                v121 = v352[0];
                if (sqlite3_step(v352[0]) == 100)
                {
                  v122 = sqlite3_column_int64(v121, 0);
                  *(_QWORD *)(v334 + 24) = v122;
                  *(_QWORD *)(v334 + 32) = v122 + 16 * v120 - 1;
                }
                v6 = sqlite3_reset(v121);
                if (!(_DWORD)v6)
                {
                  v6 = sub_1ACC67638((uint64_t *)v339, *(_QWORD *)(v334 + 32), 0, 0);
                  if (!(_DWORD)v6)
                  {
                    *(_DWORD *)(v334 + 16) = __s1;
                    v123 = *(_QWORD *)(v334 + 24);
                    *(_QWORD *)(v334 + 96) = v123 + v120;
                    *(_QWORD *)(v334 + 136) = v123 + 2 * v120;
                    *(_QWORD *)(v334 + 176) = v123 + 3 * v120;
                    *(_QWORD *)(v334 + 216) = v123 + 4 * v120;
                    *(_QWORD *)(v334 + 256) = v123 + 5 * v120;
                    *(_QWORD *)(v334 + 296) = v123 + 6 * v120;
                    *(_QWORD *)(v334 + 336) = v123 + 7 * v120;
                    *(_QWORD *)(v334 + 376) = v123 + 8 * v120;
                    *(_QWORD *)(v334 + 8) = v343;
                    *(_DWORD *)v334 = v120;
                    *(_QWORD *)(v334 + 56) = v123;
                    *(_QWORD *)(v334 + 416) = v123 + 9 * v120;
                    *(_QWORD *)(v334 + 456) = v123 + 10 * v120;
                    *(_QWORD *)(v334 + 496) = v123 + 11 * v120;
                    *(_QWORD *)(v334 + 536) = v123 + 12 * v120;
                    *(_QWORD *)(v334 + 576) = v123 + 13 * v120;
                    *(_QWORD *)(v334 + 616) = v123 + 14 * v120;
                    *(_QWORD *)(v334 + 656) = v123 - v120 + 16 * v120;
                  }
                }
              }
            }
          }
          goto LABEL_360;
        }
        __s1a = *(void **)(v9 + 776);
        v87 = *(_DWORD *)(v9 + 784);
        v352[0] = 0;
        v6 = sub_1ACC52F20((uint64_t *)v339, 32, v352, 0);
        if (!(_DWORD)v6)
        {
          v88 = v352[0];
          if (!sub_1ACBA0E50((uint64_t)v352[0], 0))
          {
            v89 = *((_QWORD *)v88 + 16);
            if ((*(_WORD *)(v89 + 20) & 0x9000) != 0)
            {
              sub_1ACBF327C(v89, v332);
            }
            else
            {
              *(_QWORD *)v89 = v332;
              *(_WORD *)(v89 + 20) = 4;
            }
            v92 = *(_QWORD *)(*(_QWORD *)v88 + 24);
            if (v92)
              xmmword_1ECD3B1D0(v92);
          }
          if (!sub_1ACBA0E50((uint64_t)v88, 1u))
          {
            v93 = *((_QWORD *)v88 + 16);
            if ((*(_WORD *)(v93 + 84) & 0x9000) != 0)
            {
              sub_1ACBF327C(v93 + 64, v86);
            }
            else
            {
              *(_QWORD *)(v93 + 64) = v86;
              *(_WORD *)(v93 + 84) = 4;
            }
            v97 = *(_QWORD *)(*(_QWORD *)v88 + 24);
            if (v97)
              xmmword_1ECD3B1D0(v97);
          }
          if (sqlite3_step(v88) == 100)
          {
            v322 = sqlite3_column_int64(v88, 1);
            v98 = sqlite3_column_int64(v88, 2);
            v99 = sqlite3_column_text(v88, 3);
            if (v99)
            {
              v100 = *v99;
              if ((v100 - 48) > 9)
              {
                v104 = 0;
                v102 = 0;
              }
              else
              {
                v101 = 0;
                v102 = 0;
                do
                {
                  v102 = (v100 - 48) + 10 * v102;
                  v103 = v101 + 1;
                  v100 = v99[++v101];
                }
                while ((v100 - 48) < 0xA);
                v104 = v103;
              }
              while (1)
              {
                v108 = v99[v104];
                if (v108 != 32)
                  break;
                ++v104;
              }
              v109 = v108 == 45;
              if (v108 == 45)
                v110 = v104 + 1;
              else
                v110 = v104;
              v111 = 1;
              if (v109)
                v111 = -1;
              v112 = v110;
              v113 = v99[v110];
              if ((v113 - 48) > 9)
              {
                v114 = 0;
              }
              else
              {
                v114 = 0;
                v115 = &v99[v112 + 1];
                do
                {
                  v114 = (v113 - 48) + 10 * v114;
                  v116 = *v115++;
                  v113 = v116;
                }
                while ((v116 - 48) < 0xA);
              }
              v107 = v114 * v111;
              *(_QWORD *)(v334 + 40) = v107;
            }
            else
            {
              v102 = 0;
              v107 = *(_QWORD *)(v334 + 40);
            }
            if (v107 < 0)
            {
              *(_QWORD *)(v334 + 40) = -v107;
              v107 = 1;
            }
            *(_BYTE *)(v334 + 48) = v107 == 0;
            v117 = sqlite3_column_bytes(v88, 4);
            __srca = (char *)sqlite3_column_blob(v88, 4);
            if (!__srca)
            {
              sqlite3_reset(v88);
              if (v117)
                v6 = 7;
              else
                v6 = 267;
              goto LABEL_360;
            }
            *(_QWORD *)&v349[0] = 0;
            v118 = sub_1ACC52F20((uint64_t *)v339, 34, (sqlite3_stmt **)v349, 0);
            if ((_DWORD)v118)
            {
              v6 = v118;
              sqlite3_reset(v88);
              goto LABEL_360;
            }
            v124 = *(sqlite3_stmt **)&v349[0];
            if (!sub_1ACBA0E50(*(uint64_t *)&v349[0], 0))
            {
              v125 = *((_QWORD *)v124 + 16);
              if ((*(_WORD *)(v125 + 20) & 0x9000) != 0)
              {
                sub_1ACBF327C(v125, v102);
              }
              else
              {
                *(_QWORD *)v125 = v102;
                *(_WORD *)(v125 + 20) = 4;
              }
              v126 = *(_QWORD *)(*(_QWORD *)v124 + 24);
              if (v126)
                xmmword_1ECD3B1D0(v126);
            }
            v127 = sqlite3_step(v124);
            v128 = v127 == 100;
            v6 = sqlite3_reset(v124);
            if (!(_DWORD)v6 && v127 == 100)
            {
              v351 = 0;
              v350 = 0;
              v129 = sub_1ACC5319C(v339, v98, &v351, &v350);
              v130 = v351;
              if ((_DWORD)v129)
              {
                v6 = v129;
                v128 = 1;
                goto LABEL_282;
              }
              memset((char *)v349 + 8, 0, 48);
              *(_QWORD *)&v349[0] = v351;
              DWORD2(v349[0]) = v350;
              if (v351)
              {
                if (*v351)
                  v131 = sub_1ACC53378(v351 + 1, (unint64_t *)&v349[1]) + 1;
                else
                  v131 = 1;
                HIDWORD(v349[0]) = v131;
                do
                  v6 = sub_1ACC6B810((uint64_t *)v349);
                while (!(_DWORD)v6 && *(_QWORD *)&v349[0]);
              }
              else
              {
                v6 = 0;
              }
              v132 = *((_QWORD *)&v349[1] + 1);
              v133 = v349[2];
              if (v87 >= SLODWORD(v349[2]))
                v134 = v349[2];
              else
                v134 = v87;
              if (*((_QWORD *)&v349[1] + 1))
                v135 = __s1a == 0;
              else
                v135 = 1;
              if (!v135 && v134 != 0)
              {
                v137 = memcmp(__s1a, *((const void **)&v349[1] + 1), v134);
                if (v137)
                {
                  if (v137 <= 0)
                    v128 = 0;
                }
                else if (v133 >= v87)
                {
                  v128 = 0;
                }
                goto LABEL_275;
              }
              if (SLODWORD(v349[2]) >= v87)
                v128 = 0;
              if (*((_QWORD *)&v349[1] + 1))
              {
LABEL_275:
                v138 = &off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v132);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v132);
                  v132 = xmmword_1ECD3E930;
                  if (!(_QWORD)xmmword_1ECD3E930)
                    goto LABEL_281;
                  v138 = &xmmword_1ECD3B1D0;
                }
                (*v138)(v132);
              }
LABEL_281:
              v130 = v351;
LABEL_282:
              if (v130)
              {
                v139 = (void (**)(char *))&off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_288;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v130);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v130);
                v130 = (char *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v139 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_288:
                  (*v139)(v130);
                }
              }
            }
            if ((_DWORD)v6 || !v128)
            {
LABEL_359:
              v106 = sqlite3_reset(v352[0]);
              if ((_DWORD)v6)
                goto LABEL_360;
            }
            else
            {
              v140 = *__srca;
              if ((v140 - 1) >= 0xF)
              {
                sqlite3_reset(v352[0]);
                v6 = 267;
                goto LABEL_360;
              }
              if ((int)v102 - (int)v322 + 1 >= 0)
                v141 = v102 - v322 + 1;
              else
                v141 = v102 - v322 + 16;
              v142 = v141 >> 4;
              *(_DWORD *)v334 = v142;
              *(_QWORD *)(v334 + 24) = v322;
              *(_QWORD *)(v334 + 32) = v102;
              *(_QWORD *)(v334 + 8) = v343;
              *(_DWORD *)(v334 + 16) = v86;
              if (v140 <= 0xE)
              {
                v143 = 0;
                v144 = (uint64x2_t)vdupq_n_s64(14 - (unint64_t)v140);
                v145 = (_QWORD *)(v327 + 40 * v140);
                v146 = v322;
                do
                {
                  v147 = vmovn_s64((int64x2_t)vcgeq_u64(v144, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v143), (int8x16_t)xmmword_1ACCBDC40)));
                  if ((v147.i8[0] & 1) != 0)
                    *v145 = v142 + v140 * (uint64_t)v142 + v146;
                  if ((v147.i8[4] & 1) != 0)
                    v145[5] = (v140 + 2) * (uint64_t)v142 + v146;
                  v143 += 2;
                  v145 += 10;
                  v146 += 2 * v142;
                }
                while (((16 - v140) & 0xFFFFFFFFFFFFFFFELL) != v143);
              }
              v148 = v334 + 40 * v140;
              v151 = *(_DWORD *)(v148 + 92);
              v150 = (int *)(v148 + 92);
              v149 = v151;
              v152 = (uint64_t *)(v150 - 3);
              v153 = *(void **)(v150 - 3);
              *(_QWORD *)(v150 - 9) = v322 + v142 * (int)v140;
              v154 = *(_DWORD *)(v339 + 456);
              if (v117 > v154)
                v154 = v117;
              v155 = v154 + 20;
              if (v149 < v154 + 20)
              {
                if (sqlite3_initialize() || (v156 = sub_1ACB6BB48((uint64_t)v153, v155)) == 0)
                {
                  sqlite3_reset(v352[0]);
                  v6 = 7;
                  goto LABEL_360;
                }
                v153 = (void *)v156;
                *v150 = v155;
                *v152 = v156;
              }
              memcpy(v153, __srca, v117);
              *(_DWORD *)(v334 + 40 * v140 + 88) = v117;
              v157 = *v152 + v117;
              *(_QWORD *)v157 = 0;
              *(_QWORD *)(v157 + 8) = 0;
              *(_DWORD *)(v157 + 16) = 0;
              if ((v140 & 0x80000000) == 0)
              {
                while (1)
                {
                  memset(v349, 0, 56);
                  v158 = *(_BYTE **)(v334 + 40 * v140 + 80);
                  if (!v158)
                  {
LABEL_338:
                    v6 = 0;
                    goto LABEL_339;
                  }
                  v159 = *(_DWORD *)(v334 + 40 * v140 + 88);
                  memset(&v349[1], 0, 40);
                  *(_QWORD *)&v349[0] = v158;
                  DWORD2(v349[0]) = v159;
                  if (*v158)
                    v160 = sub_1ACC53378(v158 + 1, (unint64_t *)&v349[1]) + 1;
                  else
                    v160 = 1;
                  HIDWORD(v349[0]) = v160;
                  v161 = sub_1ACC6B810((uint64_t *)v349);
                  v6 = v161;
                  v162 = v161 == 0;
                  if (*(_QWORD *)&v349[0] && !(_DWORD)v161)
                  {
                    do
                    {
                      v163 = sub_1ACC6B810((uint64_t *)v349);
                      v162 = v163 == 0;
                      if (*(_QWORD *)&v349[0])
                        v164 = (_DWORD)v163 == 0;
                      else
                        v164 = 0;
                    }
                    while (v164);
                    v6 = v163;
                  }
                  if (!v162)
                    goto LABEL_339;
                  v165 = (void **)(v334 + 40 * v140 + 64);
                  v166 = LODWORD(v349[2]);
                  v167 = v334 + 40 * v140;
                  v169 = *(_DWORD *)(v167 + 76);
                  v168 = (_DWORD *)(v167 + 76);
                  if (v169 < SLODWORD(v349[2]))
                  {
                    v170 = *v165;
                    if (sqlite3_initialize() || (v171 = sub_1ACB6BB48((uint64_t)v170, (int)v166)) == 0)
                    {
                      v6 = 7;
                      goto LABEL_339;
                    }
                    *v168 = v166;
                    *v165 = (void *)v171;
                  }
                  if ((int)v166 >= 1)
                    memcpy(*v165, *((const void **)&v349[1] + 1), v166);
                  *(_DWORD *)(v334 + 40 * v140 + 72) = v166;
                  if (v140 < 1)
                    goto LABEL_338;
                  v351 = 0;
                  v350 = 0;
                  v172 = v140 - 1;
                  v173 = v334 + 40 * (v140 - 1);
                  v174 = *(_QWORD *)&v349[1];
                  *(_QWORD *)(v173 + 56) = *(_QWORD *)&v349[1];
                  v175 = sub_1ACC5319C(v339, v174, &v351, &v350);
                  v6 = v175;
                  v176 = v350;
                  v177 = *(_DWORD *)(v339 + 456);
                  if (v350 > v177)
                    v177 = v350;
                  if (!(_DWORD)v175)
                  {
                    v178 = (void **)(v173 + 80);
                    v179 = v177 + 20;
                    v180 = v334 + 40 * v172;
                    v182 = *(_DWORD *)(v180 + 92);
                    v181 = (_DWORD *)(v180 + 92);
                    v183 = *v178;
                    if (v182 < v177 + 20)
                    {
                      if (sqlite3_initialize() || (v187 = sub_1ACB6BB48((uint64_t)v183, v179)) == 0)
                      {
                        v6 = 7;
                        v184 = v351;
                        if (!v351)
                          goto LABEL_339;
                        goto LABEL_353;
                      }
                      v183 = (void *)v187;
                      *v181 = v179;
                      *v178 = (void *)v187;
                    }
                    memcpy(v183, v351, v176);
                    v6 = 0;
                    *(_DWORD *)(v334 + 40 * v172 + 88) = v176;
                    v188 = (char *)*v178 + v176;
                    *(_QWORD *)v188 = 0;
                    *((_QWORD *)v188 + 1) = 0;
                    *((_DWORD *)v188 + 4) = 0;
                  }
                  v184 = v351;
                  if (!v351)
                    goto LABEL_339;
LABEL_353:
                  v189 = (void (**)(char *))&off_1ECD3B168;
                  if (!dword_1ECD3B140)
                    goto LABEL_358;
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v184);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v184);
                  v184 = (char *)xmmword_1ECD3E930;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v189 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_358:
                    (*v189)(v184);
                  }
LABEL_339:
                  v185 = *((_QWORD *)&v349[1] + 1);
                  if (*((_QWORD *)&v349[1] + 1))
                  {
                    v186 = &off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v185);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v185);
                      v185 = xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                        goto LABEL_346;
                      v186 = &xmmword_1ECD3B1D0;
                    }
                    (*v186)(v185);
                  }
LABEL_346:
                  v25 = v140-- < 1;
                  if (v25 || (_DWORD)v6)
                    goto LABEL_359;
                }
              }
              v105 = v352[0];
LABEL_199:
              v106 = sqlite3_reset(v105);
            }
            v6 = v106;
            goto LABEL_360;
          }
          v105 = v88;
          goto LABEL_199;
        }
LABEL_360:
        v348 = v6;
        if ((_DWORD)v6)
          goto LABEL_361;
        if (!*(_DWORD *)v334)
        {
          v6 = 0;
          goto LABEL_361;
        }
        if (!(_DWORD)v50)
        {
LABEL_460:
          v219 = *(_DWORD *)(v334 + 4);
LABEL_461:
          v342 += ~v219;
          v279 = sub_1ACC6AAF0(v339, v343, v341, &v347);
          v348 = v279;
          if (v347)
          {
            sub_1ACC6B6EC((uint64_t)&v345, v343, v347, &v348);
            v338 = 1;
            v6 = v348;
            goto LABEL_362;
          }
          v6 = v279;
          goto LABEL_464;
        }
        v191 = v334;
        do
        {
          v192 = *(unsigned __int8 **)(v191 + 776);
          v193 = *(_DWORD *)(v191 + 784);
          v194 = *(_DWORD *)(v191 + 72);
          if (v194 >= v193)
            v195 = v193;
          else
            v195 = v194;
          if ((int)v195 < 1)
          {
            LODWORD(v195) = 0;
          }
          else
          {
            v196 = 0;
            while (*(unsigned __int8 *)(*(_QWORD *)(v191 + 64) + v196) == v192[v196])
            {
              if (v195 == ++v196)
                goto LABEL_377;
            }
            LODWORD(v195) = v196;
          }
LABEL_377:
          v197 = (v193 - v195);
          if ((int)v197 < 1)
          {
            v6 = 267;
            goto LABEL_397;
          }
          v198 = 0;
          v199 = *(const void **)(v191 + 792);
          v200 = *(_DWORD *)(v191 + 800);
          v201 = (int)v195;
          v202 = v193 + v200 + 1;
          v203 = v202 - v195;
          v204 = v193 + v200 + 2;
          v205 = v204 - v195;
          do
          {
            v206 = v203;
            v207 = v205;
            ++v198;
            ++v203;
            ++v205;
            v25 = v201 > 0x7F;
            v201 >>= 7;
          }
          while (v25);
          do
          {
            v208 = v207;
            ++v206;
            ++v207;
            v25 = v197 > 0x7F;
            v197 >>= 7;
          }
          while (v25);
          v209 = *(int *)(v191 + 800);
          do
          {
            ++v208;
            v25 = v209 > 0x7F;
            v209 >>= 7;
          }
          while (v25);
          v210 = *(_DWORD *)(v191 + 88);
          v211 = v210 + v208;
          if (v210 < 1 || v211 <= *(_DWORD *)(v339 + 456))
          {
            *(_QWORD *)(v191 + 40) += v208;
          }
          else
          {
            v318 = *(const void **)(v191 + 792);
            v319 = *(int *)(v191 + 800);
            v320 = *(int *)(v191 + 784);
            v6 = sub_1ACC67638((uint64_t *)v339, *(_QWORD *)(v191 + 56), *(char **)(v191 + 80), v210);
            ++*(_DWORD *)(v191 + 4);
            if (!(_DWORD)v6)
            {
              v220 = v195 + 1;
              v221 = *(_QWORD *)(v191 + 56);
              v222 = 1;
              v323 = v195 + 1;
              while (1)
              {
                v223 = v191 + 40 * v222;
                v226 = *(_DWORD *)(v223 + 72);
                v225 = (_DWORD *)(v223 + 72);
                v224 = v226;
                v321 = (void **)(v225 - 2);
                if (v226 >= (int)v220)
                  v227 = v220;
                else
                  v227 = v224;
                if ((int)v227 < 1)
                {
                  LODWORD(v227) = 0;
                }
                else
                {
                  v228 = 0;
                  while (*(unsigned __int8 *)(*((_QWORD *)v225 - 1) + v228) == v192[v228])
                  {
                    if (v227 == ++v228)
                      goto LABEL_418;
                  }
                  LODWORD(v227) = v228;
                }
LABEL_418:
                v229 = v220 - v227;
                if ((int)v229 < 1)
                {
                  v6 = 267;
                  goto LABEL_386;
                }
                v230 = (uint64_t *)(v225 - 4);
                v231 = (int)v227;
                v232 = v195 + 2 - v227;
                v233 = v220 - v227;
                v234 = v231;
                do
                {
                  v235 = v232;
                  ++v233;
                  ++v232;
                  v25 = v234 > 0x7F;
                  v234 >>= 7;
                }
                while (v25);
                v236 = v229;
                do
                {
                  ++v235;
                  v25 = v236 > 0x7F;
                  v236 >>= 7;
                }
                while (v25);
                __s1b = v225;
                v237 = v191 + 40 * v222;
                v240 = *(_DWORD *)(v237 + 88);
                v239 = (_DWORD *)(v237 + 88);
                v238 = v240;
                if (!v224 || (signed int)(v238 + v235) <= *(_DWORD *)(v339 + 456))
                  break;
                v241 = v334 + 40 * v222;
                v242 = sub_1ACC67638((uint64_t *)v339, *v230, *(char **)(v241 + 80), v238);
                v6 = v242;
                v243 = 0;
                **(_BYTE **)(v241 + 80) = v222;
                v244 = *(_QWORD *)(v241 + 80);
                v245 = v221 + 1;
                do
                {
                  v246 = v245;
                  *(_BYTE *)(v244 + v243++ + 1) = v245 | 0x80;
                  v25 = v245 > 0x7F;
                  v245 >>= 7;
                }
                while (v25);
                *(_BYTE *)(v244 + v243) = v246 & 0x7F;
                *v239 = v243 + 1;
                v221 = (*v230)++;
                *__s1b = 0;
                v220 = v195 + 1;
                if ((_DWORD)v242)
                  goto LABEL_455;
                v191 = v334;
                if (!v221)
                  goto LABEL_386;
                if (++v222 == 16)
                {
                  v6 = 0;
                  goto LABEL_386;
                }
              }
              v315 = v231;
              v316 = v229;
              v247 = v334 + 40 * v222;
              __srcb = (uint64_t *)(v247 + 80);
              v317 = (int *)(v247 + 88);
              if (!v238)
              {
                v248 = *(_DWORD *)(v339 + 456);
                v249 = v334 + 40 * v222;
                v251 = *(_DWORD *)(v249 + 92);
                v250 = (_DWORD *)(v249 + 92);
                v252 = (_BYTE *)*__srcb;
                if (v251 < v248)
                {
                  if (sqlite3_initialize() || (v253 = sub_1ACB6BB48((uint64_t)v252, v248)) == 0)
                  {
LABEL_454:
                    v6 = 7;
LABEL_455:
                    v191 = v334;
                    goto LABEL_386;
                  }
                  v252 = (_BYTE *)v253;
                  *v250 = v248;
                  *__srcb = v253;
                }
                v254 = 0;
                *v252 = v222;
                v255 = (_BYTE *)*__srcb;
                do
                {
                  v256 = v221;
                  v255[++v254] = v221 | 0x80;
                  v25 = v221 > 0x7F;
                  v221 >>= 7;
                }
                while (v25);
                v255[v254] = v256 & 0x7F;
                v238 = v254 + 1;
                *v317 = v254 + 1;
              }
              v257 = v238 + v235;
              v258 = v334 + 40 * v222;
              v260 = *(_DWORD *)(v258 + 92);
              v259 = (_DWORD *)(v258 + 92);
              if (v260 < (int)(v238 + v235))
              {
                v261 = *__srcb;
                if (sqlite3_initialize())
                  goto LABEL_454;
                v262 = sub_1ACB6BB48(v261, v257);
                if (!v262)
                  goto LABEL_454;
                *v259 = v257;
                *__srcb = v262;
              }
              v263 = v334 + 40 * v222;
              v265 = *(_DWORD *)(v263 + 76);
              v264 = (_DWORD *)(v263 + 76);
              if (v265 <= (int)v195)
              {
                v277 = *v321;
                if (sqlite3_initialize())
                  goto LABEL_454;
                v278 = sub_1ACB6BB48((uint64_t)v277, v323);
                if (!v278)
                  goto LABEL_454;
                *v264 = v323;
                *v321 = (void *)v278;
              }
              v266 = *__srcb;
              v267 = *v317;
              if (*__s1b)
              {
                v268 = 0;
                v269 = v266 + v267;
                v270 = v315;
                do
                {
                  v271 = v270;
                  *(_BYTE *)(v269 + v268++) = v270 | 0x80;
                  v25 = v270 > 0x7F;
                  v270 >>= 7;
                }
                while (v25);
                *(_BYTE *)(v269 + v268 - 1) = v271 & 0x7F;
                v267 = *v317 + v268;
                *v317 = v267;
                v266 = *__srcb;
              }
              v272 = 0;
              v273 = v266 + v267;
              v274 = v316;
              do
              {
                v275 = v274;
                *(_BYTE *)(v273 + v272++) = v274 | 0x80;
                v25 = v274 > 0x7F;
                v274 >>= 7;
              }
              while (v25);
              *(_BYTE *)(v273 + v272 - 1) = v275 & 0x7F;
              v276 = *v317;
              *v317 = v276 + v272;
              memcpy((void *)(*__srcb + v276 + v272), &v192[v315], v316);
              *v317 += v316;
              memcpy(*v321, v192, v323);
              v6 = 0;
              *__s1b = v323;
              v191 = v334;
            }
LABEL_386:
            ++*(_QWORD *)(v191 + 56);
            *(_DWORD *)(v191 + 72) = 0;
            *(_DWORD *)(v191 + 88) = 0;
            v212 = v320;
            do
            {
              v211 = v204;
              ++v202;
              ++v204;
              v25 = v212 > 0x7F;
              v212 >>= 7;
            }
            while (v25);
            v213 = v319;
            do
            {
              ++v211;
              v72 = v213 >= 0x80;
              v213 >>= 7;
            }
            while (v72);
            v191 = v334;
            *(_QWORD *)(v334 + 40) += v211;
            if ((_DWORD)v6)
              goto LABEL_397;
            v210 = 0;
            v200 = v319;
            v193 = v320;
            v199 = v318;
          }
          if (*(_DWORD *)(v191 + 92) < v211)
          {
            v214 = v200;
            v215 = v199;
            v216 = v193;
            v217 = *v330;
            if (sqlite3_initialize())
            {
              v6 = 7;
LABEL_397:
              v348 = v6;
              goto LABEL_404;
            }
            v218 = sub_1ACB6BB48(v217, v211);
            if (!v218)
            {
              v6 = 7;
              v191 = v334;
              goto LABEL_397;
            }
            v191 = v334;
            *(_DWORD *)(v334 + 92) = v211;
            *(_QWORD *)(v334 + 80) = v218;
            v210 = *(_DWORD *)(v334 + 88);
            v193 = v216;
            v199 = v215;
            v200 = v214;
          }
          if (!v210)
          {
            *(_DWORD *)(v191 + 88) = 1;
            **(_BYTE **)(v191 + 80) = 0;
          }
          v6 = sub_1ACC6BA78((uint64_t)v330, v329, v192, v193, v199, v200);
          v348 = v6;
          if (!(_DWORD)v6)
          {
            v6 = sub_1ACC53D44(v339, v341);
            v348 = v6;
          }
LABEL_404:
          v219 = *(_DWORD *)(v191 + 4);
          if (v219 >= v342 && (_DWORD)v6 == 100)
            goto LABEL_461;
        }
        while ((_DWORD)v6 == 100);
        if (!(_DWORD)v6)
          goto LABEL_460;
LABEL_361:
        if (v347)
        {
LABEL_362:
          v190 = 0;
          *(_QWORD *)(v334 + 40) = -*(_QWORD *)(v334 + 40);
          goto LABEL_465;
        }
LABEL_464:
        v190 = 1;
LABEL_465:
        v10 = &qword_1ECD3DBE0[132];
        v280 = 15;
        while (2)
        {
          v281 = v280;
          if (*(int *)(v334 + 40 * v280 + 88) <= 0)
          {
            v282 = *(_QWORD *)(v334 + 40 * v280 + 80);
            if (v282)
            {
              v283 = &off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_475;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v282);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v282);
              v282 = xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v283 = &xmmword_1ECD3B1D0;
LABEL_475:
                (*v283)(v282);
              }
            }
            v284 = *(_QWORD *)(v334 + 40 * v281 + 64);
            if (v284)
            {
              v285 = &off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_466;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v284);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v284);
              v284 = xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v285 = &xmmword_1ECD3B1D0;
LABEL_466:
                (*v285)(v284);
              }
            }
            v280 = v281 - 1;
            if (!(_DWORD)v281)
              goto LABEL_508;
            continue;
          }
          break;
        }
        if (!v280)
        {
          if (!(_DWORD)v6)
          {
            v288 = *(_BYTE **)(v334 + 120);
            if (*(int *)(v334 + 132) > 10)
              goto LABEL_513;
            if (!sqlite3_initialize())
            {
              v293 = sub_1ACB6BB48((uint64_t)v288, 11);
              if (v293)
              {
                v288 = (_BYTE *)v293;
                *(_DWORD *)(v334 + 132) = 11;
                *(_QWORD *)(v334 + 120) = v293;
LABEL_513:
                v294 = 0;
                *v288 = 1;
                v295 = *(_QWORD *)(v334 + 120);
                v296 = *(_QWORD *)(v334 + 56);
                do
                {
                  v297 = v296;
                  *(_BYTE *)(v295 + v294++ + 1) = v296 | 0x80;
                  v25 = v296 > 0x7F;
                  v296 >>= 7;
                }
                while (v25);
                v6 = 0;
                *(_BYTE *)(v295 + v294) = v297 & 0x7F;
                *(_DWORD *)(v334 + 128) = v294 + 1;
                goto LABEL_516;
              }
            }
            v6 = 7;
          }
LABEL_516:
          v281 = 1;
          goto LABEL_517;
        }
        if ((int)v280 >= 1)
        {
LABEL_517:
          v298 = v281;
          v299 = v328;
          while (1)
          {
            if ((int)*v299 >= 1 && (_DWORD)v6 == 0)
              v6 = sub_1ACC67638((uint64_t *)v339, *((_QWORD *)v299 - 4), *((char **)v299 - 1), *v299);
            v301 = *((_QWORD *)v299 - 1);
            if (v301)
            {
              v302 = &off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_532;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v301);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v301);
              v301 = xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
                break;
            }
LABEL_533:
            v303 = *((_QWORD *)v299 - 3);
            if (v303)
            {
              v304 = &off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v303);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v303);
                v303 = xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_519;
                v304 = &xmmword_1ECD3B1D0;
              }
              (*v304)(v303);
            }
LABEL_519:
            v299 += 10;
            if (!--v298)
              goto LABEL_484;
          }
          v302 = &xmmword_1ECD3B1D0;
LABEL_532:
          (*v302)(v301);
          goto LABEL_533;
        }
LABEL_484:
        v286 = v334;
        if (!(_DWORD)v6)
        {
          if (*(_BYTE *)(v334 + 48))
            v287 = 0;
          else
            v287 = *(_QWORD *)(v334 + 40);
          v286 = v334;
          v6 = sub_1ACC67BB8((uint64_t *)v339, *(_QWORD *)(v334 + 8) + 1, *(_DWORD *)(v334 + 16), *(_QWORD *)(v334 + 24), *(_QWORD *)(v334 + 56), *(_QWORD *)(v334 + 32), v287, *(char **)(v334 + 40 * v281 + 80), *(_DWORD *)(v334 + 40 * v281 + 88));
        }
        v289 = *(_QWORD *)(v286 + 40 * v281 + 80);
        if (v289)
        {
          v290 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_499;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v289);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v289);
          v289 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v290 = &xmmword_1ECD3B1D0;
LABEL_499:
            (*v290)(v289);
          }
        }
        v291 = *(_QWORD *)(v334 + 40 * v281 + 64);
        if (v291)
        {
          v292 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_506;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v291);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v291);
          v291 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v292 = &xmmword_1ECD3B1D0;
LABEL_506:
            (*v292)(v291);
          }
        }
        v348 = v6;
LABEL_508:
        v9 = v334;
        if (!v190 || *(_BYTE *)(v334 + 48))
        {
          a1 = v339;
        }
        else
        {
          a1 = v339;
          sub_1ACC67194((uint64_t *)v339, v332, *(_QWORD *)(v334 + 40));
        }
LABEL_41:
        a2 = v342;
        v24 = v341;
LABEL_42:
        sub_1ACC51C60(v24);
        if ((_DWORD)v6)
          v25 = 1;
        else
          v25 = a2 <= 0;
        if (v25)
          goto LABEL_542;
      }
    }
  }
LABEL_6:
  v11 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_11:
    (*v11)(v9);
    goto LABEL_12;
  }
  v12 = v10[294];
  if (v12)
    xmmword_1ECD3B1C0(v12);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v9);
  v9 = v10[294];
  if (v9)
  {
    v11 = &xmmword_1ECD3B1D0;
    goto LABEL_11;
  }
LABEL_12:
  v13 = v345;
  if (v345)
  {
    v14 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v14)(v13);
      return v6;
    }
    v15 = v10[294];
    if (v15)
      xmmword_1ECD3B1C0(v15);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v13);
    v13 = (char *)v10[294];
    if (v13)
    {
      v14 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
  return v6;
}

uint64_t sub_1ACC6AAF0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int i;
  unint64_t v9;
  int *v10;
  int v12;
  const void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  sqlite3_stmt *v17;
  void (**v18)(sqlite3_stmt *);
  sqlite3_stmt *v19;
  void (**v20)(sqlite3_stmt *);
  uint64_t v21;
  sqlite3_stmt *v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  sqlite3_int64 v34;
  char *v35;
  void (**v36)(char *);
  uint64_t *v37;
  uint64_t v38;
  sqlite3_stmt *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  sqlite3_stmt *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(uint64_t);
  sqlite3_stmt *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  unint64_t j;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  sqlite3_int64 v83;
  uint64_t v85;
  int v88;
  char *v89;
  sqlite3_stmt *v90;
  sqlite3_int64 iRow;
  sqlite3_stmt *v92;
  uint64_t v93;
  sqlite3_stmt *pStmt;
  uint64_t v95;

  v5 = a1;
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 < 1)
  {
    v7 = 0;
    goto LABEL_127;
  }
  v7 = 0;
  for (i = *(_DWORD *)(a3 + 8); ; --i)
  {
    if (v6 < 1)
    {
      v10 = 0;
      if (!MEMORY[0x28])
        break;
      goto LABEL_11;
    }
    v9 = 0;
    do
      v10 = *(int **)(*(_QWORD *)a3 + 8 * v9++);
    while (*v10 != i - 1 && v9 < v6);
    if (!*((_QWORD *)v10 + 5))
      break;
LABEL_11:
    v12 = v7;
    v13 = (const void *)*((_QWORD *)v10 + 10);
    v14 = v10[18];
    v15 = *v10;
    pStmt = 0;
    v95 = 0;
    v92 = 0;
    v93 = 0;
    v90 = 0;
    iRow = 0;
    v16 = sub_1ACC52F20((uint64_t *)v5, 32, &v90, 0);
    if (!(_DWORD)v16)
    {
      v24 = v90;
      if (!sub_1ACBA0E50((uint64_t)v90, 0))
      {
        v25 = *((_QWORD *)v24 + 16);
        if ((*(_WORD *)(v25 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v25, a2);
        }
        else
        {
          *(_QWORD *)v25 = a2;
          *(_WORD *)(v25 + 20) = 4;
        }
        v26 = *(_QWORD *)(*(_QWORD *)v24 + 24);
        if (v26)
          xmmword_1ECD3B1D0(v26);
      }
      if (!sub_1ACBA0E50((uint64_t)v24, 1u))
      {
        v27 = *((_QWORD *)v24 + 16);
        if ((*(_WORD *)(v27 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v27 + 64, v15);
        }
        else
        {
          *(_QWORD *)(v27 + 64) = v15;
          *(_WORD *)(v27 + 84) = 4;
        }
        v28 = *(_QWORD *)(*(_QWORD *)v24 + 24);
        if (v28)
          xmmword_1ECD3B1D0(v28);
      }
      if (sqlite3_step(v24) != 100)
      {
        v32 = sqlite3_reset(v24);
        v33 = 0;
        goto LABEL_65;
      }
      v85 = v15;
      v29 = (char *)sqlite3_column_blob(v24, 4);
      v30 = sqlite3_column_bytes(v24, 4);
      v83 = sqlite3_column_int64(v24, 1);
      v31 = v29;
      v15 = v85;
      v16 = sub_1ACC6BCC0(v31, v30, (uint64_t)&pStmt, v13, v14, &iRow);
      v32 = sqlite3_reset(v24);
      if (!(_DWORD)v16)
      {
        v33 = 0;
        if ((_DWORD)v32)
          goto LABEL_65;
        v34 = iRow;
        if (!iRow)
          goto LABEL_65;
        while (1)
        {
          v33 = v34;
          v89 = 0;
          v88 = 0;
          v16 = sub_1ACC5319C(v5, v34, &v89, &v88);
          if ((_DWORD)v16 || (v16 = sub_1ACC6BCC0(v89, v88, (uint64_t)&v92, v13, v14, &iRow), (_DWORD)v16))
          {
            v35 = v89;
            if (!v89)
              goto LABEL_59;
          }
          else
          {
            v16 = sub_1ACC67638((uint64_t *)v5, v33, (char *)v92, v93);
            v35 = v89;
            if (!v89)
              goto LABEL_59;
          }
          v36 = (void (**)(char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v35);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v35);
            v35 = (char *)xmmword_1ECD3E930;
            v5 = a1;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_59;
            v36 = (void (**)(char *))&xmmword_1ECD3B1D0;
          }
          (*v36)(v35);
LABEL_59:
          if (!(_DWORD)v16)
          {
            v34 = iRow;
            if (iRow)
              continue;
          }
          v15 = v85;
          if (!(_DWORD)v16)
          {
            v89 = 0;
            v32 = sub_1ACC52F20((uint64_t *)v5, 17, (sqlite3_stmt **)&v89, 0);
            if (!(_DWORD)v32)
            {
              v39 = (sqlite3_stmt *)v89;
              if (!sub_1ACBA0E50((uint64_t)v89, 0))
              {
                v40 = *((_QWORD *)v39 + 16);
                if ((*(_WORD *)(v40 + 20) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v40, v83);
                }
                else
                {
                  *(_QWORD *)v40 = v83;
                  *(_WORD *)(v40 + 20) = 4;
                }
                v57 = *(_QWORD *)(*(_QWORD *)v39 + 24);
                if (v57)
                  xmmword_1ECD3B1D0(v57);
              }
              if (!sub_1ACBA0E50((uint64_t)v39, 1u))
              {
                v58 = v33 - 1;
                v59 = *((_QWORD *)v39 + 16);
                if ((*(_WORD *)(v59 + 84) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v59 + 64, v58);
                }
                else
                {
                  *(_QWORD *)(v59 + 64) = v58;
                  *(_WORD *)(v59 + 84) = 4;
                }
                v60 = *(_QWORD *)(*(_QWORD *)v39 + 24);
                if (v60)
                  xmmword_1ECD3B1D0(v60);
              }
              sqlite3_step(v39);
              v32 = sqlite3_reset(v39);
            }
LABEL_65:
            v16 = v32;
            if (!(_DWORD)v32)
            {
              v89 = 0;
              v16 = sub_1ACC52F20((uint64_t *)v5, 33, (sqlite3_stmt **)&v89, 0);
              if (!(_DWORD)v16)
              {
                v37 = (uint64_t *)v89;
                if (!sub_1ACBA0E50((uint64_t)v89, 0))
                {
                  v38 = v37[16];
                  if ((*(_WORD *)(v38 + 20) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v38, v33);
                  }
                  else
                  {
                    *(_QWORD *)v38 = v33;
                    *(_WORD *)(v38 + 20) = 4;
                  }
                  v44 = *(_QWORD *)(*v37 + 24);
                  if (v44)
                    xmmword_1ECD3B1D0(v44);
                }
                v45 = v15;
                v46 = v95;
                if ((v95 & 0x80000000) != 0)
                {
                  sub_1ACBBE20C(98722);
                }
                else
                {
                  v47 = (char *)pStmt;
                  if (!sub_1ACBA0E50((uint64_t)v37, 1u))
                  {
                    if (v47)
                    {
                      v48 = sub_1ACB57870(v37[16] + 64, v47, v46, 0, 0);
                      if (v48)
                      {
                        v49 = v48;
                        v50 = *v37;
                        *(_DWORD *)(v50 + 80) = v49;
                        sub_1ACBE938C(v50, v49);
                        sub_1ACBF2990(*v37, v49);
                      }
                    }
                    v51 = *(_QWORD *)(*v37 + 24);
                    if (v51)
                      xmmword_1ECD3B1D0(v51);
                  }
                }
                if (!sub_1ACBA0E50((uint64_t)v37, 2u))
                {
                  v52 = v37[16];
                  if ((*(_WORD *)(v52 + 148) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v52 + 128, a2);
                  }
                  else
                  {
                    *(_QWORD *)(v52 + 128) = a2;
                    *(_WORD *)(v52 + 148) = 4;
                  }
                  v53 = *(_QWORD *)(*v37 + 24);
                  if (v53)
                    xmmword_1ECD3B1D0(v53);
                }
                if (!sub_1ACBA0E50((uint64_t)v37, 3u))
                {
                  v54 = v37[16];
                  if ((*(_WORD *)(v54 + 212) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v54 + 192, v45);
                  }
                  else
                  {
                    *(_QWORD *)(v54 + 192) = v45;
                    *(_WORD *)(v54 + 212) = 4;
                  }
                  v55 = *(_QWORD *)(*v37 + 24);
                  if (v55)
                    xmmword_1ECD3B1D0(v55);
                }
                sqlite3_step((sqlite3_stmt *)v37);
                v16 = sqlite3_reset((sqlite3_stmt *)v37);
                if (!sub_1ACBA0E50((uint64_t)v37, 1u))
                {
                  v56 = *(_QWORD *)(*v37 + 24);
                  if (v56)
                    xmmword_1ECD3B1D0(v56);
                }
              }
            }
          }
          break;
        }
      }
    }
    v17 = pStmt;
    if (pStmt)
    {
      v18 = (void (**)(sqlite3_stmt *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_18;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v17);
      v17 = (sqlite3_stmt *)xmmword_1ECD3E930;
      v5 = a1;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v18 = (void (**)(sqlite3_stmt *))&xmmword_1ECD3B1D0;
LABEL_18:
        (*v18)(v17);
      }
    }
    v19 = v92;
    if (!v92)
      goto LABEL_26;
    v20 = (void (**)(sqlite3_stmt *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_25;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v19);
    v19 = (sqlite3_stmt *)xmmword_1ECD3E930;
    v5 = a1;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v20 = (void (**)(sqlite3_stmt *))&xmmword_1ECD3B1D0;
LABEL_25:
      (*v20)(v19);
    }
LABEL_26:
    v7 = v12 + 1;
    if (i < 2)
      goto LABEL_124;
LABEL_86:
    if ((_DWORD)v16)
      goto LABEL_124;
    v6 = *(_DWORD *)(a3 + 8);
  }
  v16 = sub_1ACC67A9C((uint64_t *)v5, (uint64_t)v10);
  if (!(_DWORD)v16)
  {
    v21 = *v10;
    pStmt = 0;
    v16 = sub_1ACC52F20((uint64_t *)v5, 30, &pStmt, 0);
    if (!(_DWORD)v16)
    {
      v22 = pStmt;
      if (!sub_1ACBA0E50((uint64_t)pStmt, 0))
      {
        v23 = *((_QWORD *)v22 + 16);
        if ((*(_WORD *)(v23 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v23, a2);
        }
        else
        {
          *(_QWORD *)v23 = a2;
          *(_WORD *)(v23 + 20) = 4;
        }
        v41 = *(_QWORD *)(*(_QWORD *)v22 + 24);
        if (v41)
          xmmword_1ECD3B1D0(v41);
      }
      if (!sub_1ACBA0E50((uint64_t)v22, 1u))
      {
        v42 = *((_QWORD *)v22 + 16);
        if ((*(_WORD *)(v42 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v42 + 64, v21);
        }
        else
        {
          *(_QWORD *)(v42 + 64) = v21;
          *(_WORD *)(v42 + 84) = 4;
        }
        v43 = *(_QWORD *)(*(_QWORD *)v22 + 24);
        if (v43)
          xmmword_1ECD3B1D0(v43);
      }
      sqlite3_step(v22);
      v16 = sqlite3_reset(v22);
    }
  }
  *a4 = 0;
  if (i >= 2)
    goto LABEL_86;
LABEL_124:
  if (!(_DWORD)v16)
  {
LABEL_127:
    if (v7 == *(_DWORD *)(a3 + 8))
    {
      v16 = 0;
      goto LABEL_157;
    }
    pStmt = 0;
    v92 = 0;
    v61 = sub_1ACC52F20((uint64_t *)v5, 35, &pStmt, 0);
    if ((_DWORD)v61)
    {
      v16 = v61;
      v62 = 0;
LABEL_150:
      *(_BYTE *)(v5 + 464) = 0;
      if (!v62)
        goto LABEL_157;
    }
    else
    {
      v63 = pStmt;
      if (!sub_1ACBA0E50((uint64_t)pStmt, 0))
      {
        v64 = *((_QWORD *)v63 + 16);
        if ((*(_WORD *)(v64 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v64, a2);
        }
        else
        {
          *(_QWORD *)v64 = a2;
          *(_WORD *)(v64 + 20) = 4;
        }
        v65 = *(_QWORD *)(*(_QWORD *)v63 + 24);
        if (v65)
          xmmword_1ECD3B1D0(v65);
      }
      if (sqlite3_step(v63) == 100)
      {
        v66 = 0;
        v67 = 0;
        v62 = 0;
        do
        {
          if (v66 >= v67)
          {
            if (sqlite3_initialize() || (v67 += 16, (v69 = sub_1ACB6BB48(v62, 4 * v67)) == 0))
            {
              sqlite3_reset(pStmt);
              v16 = 7;
              goto LABEL_150;
            }
            v62 = v69;
          }
          v68 = v66 + 1;
          *(_DWORD *)(v62 + 4 * v66++) = sqlite3_column_int(v63, 0);
        }
        while (sqlite3_step(v63) == 100);
        v63 = pStmt;
      }
      else
      {
        v68 = 0;
        v62 = 0;
      }
      v70 = sqlite3_reset(v63);
      if ((_DWORD)v70 || (v70 = sub_1ACC52F20((uint64_t *)v5, 31, &v92, 0), (_DWORD)v70))
      {
        v16 = v70;
        goto LABEL_150;
      }
      v73 = v92;
      if (!sub_1ACBA0E50((uint64_t)v92, 1u))
      {
        v74 = *((_QWORD *)v73 + 16);
        if ((*(_WORD *)(v74 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v74 + 64, a2);
        }
        else
        {
          *(_QWORD *)(v74 + 64) = a2;
          *(_WORD *)(v74 + 84) = 4;
        }
        v75 = *(_QWORD *)(*(_QWORD *)v73 + 24);
        if (v75)
          xmmword_1ECD3B1D0(v75);
      }
      v76 = (_BYTE *)(v5 + 464);
      *(_BYTE *)(v5 + 464) = 1;
      if (v68)
      {
        for (j = 0; j < v68; ++j)
        {
          v78 = *(unsigned int *)(v62 + 4 * j);
          if (j == v78)
          {
            v16 = 0;
          }
          else
          {
            if (!sub_1ACBA0E50((uint64_t)v73, 2u))
            {
              v79 = *((_QWORD *)v73 + 16);
              if ((*(_WORD *)(v79 + 148) & 0x9000) != 0)
              {
                sub_1ACBF327C(v79 + 128, (int)v78);
              }
              else
              {
                *(_QWORD *)(v79 + 128) = (int)v78;
                *(_WORD *)(v79 + 148) = 4;
              }
              v80 = *(_QWORD *)(*(_QWORD *)v73 + 24);
              if (v80)
                xmmword_1ECD3B1D0(v80);
            }
            if (!sub_1ACBA0E50((uint64_t)v73, 0))
            {
              v81 = *((_QWORD *)v73 + 16);
              if ((*(_WORD *)(v81 + 20) & 0x9000) != 0)
              {
                sub_1ACBF327C(v81, j);
              }
              else
              {
                *(_QWORD *)v81 = j;
                *(_WORD *)(v81 + 20) = 4;
              }
              v82 = *(_QWORD *)(*(_QWORD *)v73 + 24);
              if (v82)
                xmmword_1ECD3B1D0(v82);
            }
            sqlite3_step(v73);
            v16 = sqlite3_reset(v73);
          }
          if ((_DWORD)v16)
            break;
        }
        *v76 = 0;
      }
      else
      {
        v16 = 0;
        *v76 = 0;
        if (!v62)
          goto LABEL_157;
      }
    }
    v71 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_156:
      (*v71)(v62);
      goto LABEL_157;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v62);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v62);
    v62 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v71 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_156;
    }
  }
LABEL_157:
  *a4 = v7;
  return v16;
}

uint64_t sub_1ACC6B6EC(uint64_t result, unint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  if (!*a4)
  {
    v6 = result;
    v7 = *(int *)(result + 8);
    v8 = v7 + 20;
    if (*(_DWORD *)(result + 12) >= (int)v7 + 20)
      goto LABEL_7;
    v10 = *(_QWORD *)result;
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(v10, v8)) == 0)
    {
      *a4 = 7;
      return result;
    }
    *(_DWORD *)(v6 + 12) = v8;
    *(_QWORD *)v6 = result;
    if (!*a4)
    {
LABEL_7:
      v11 = 0;
      v12 = *(_QWORD *)v6 + *(int *)(v6 + 8);
      do
      {
        v13 = a2;
        *(_BYTE *)(v12 + v11++) = a2 | 0x80;
        v14 = a2 > 0x7F;
        a2 >>= 7;
      }
      while (v14);
      v15 = 0;
      *(_BYTE *)(v12 + v11 - 1) = v13 & 0x7F;
      v16 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = v16 + v11;
      v17 = *(_QWORD *)v6;
      v18 = a3;
      v19 = *(_QWORD *)v6 + v16 + (int)v11;
      do
      {
        v20 = v18;
        *(_BYTE *)(v19 + v15++) = v18 | 0x80;
        v14 = v18 > 0x7F;
        v18 >>= 7;
      }
      while (v14);
      *(_BYTE *)(v17 + v16 + (int)v11 + v15 - 1) = v20 & 0x7F;
      *(_DWORD *)(v6 + 8) += v15;
    }
  }
  return result;
}

uint64_t sub_1ACC6B810(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;

  v2 = *((_DWORD *)a1 + 8);
  v3 = a1[2];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
    a1[2] = v3 + 1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 3);
  if (v6 >= v5)
  {
    result = 0;
    *a1 = 0;
    return result;
  }
  v7 = *a1;
  if (v2)
  {
    v8 = (unsigned __int8 *)(v7 + v6);
    v9 = *v8;
    if ((char)*v8 < 0)
    {
      v9 = v9 & 0x7F | (v8[1] << 7);
      if ((char)v8[1] < 0)
      {
        v9 = v9 & 0x3FFF | (v8[2] << 14);
        if ((char)v8[2] < 0)
        {
          v9 = v9 & 0x1FFFFF | (v8[3] << 21);
          if ((char)v8[3] < 0)
          {
            v9 = v9 & 0xFFFFFFF | ((v8[4] & 7) << 28);
            v10 = 5;
          }
          else
          {
            v10 = 4;
          }
        }
        else
        {
          v10 = 3;
        }
      }
      else
      {
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
    v6 += v10;
    *((_DWORD *)a1 + 3) = v6;
  }
  else
  {
    v9 = 0;
  }
  v12 = (unsigned __int8 *)(v7 + v6);
  v13 = *v12;
  if ((char)*v12 < 0)
  {
    v13 = v13 & 0x7F | (v12[1] << 7);
    if ((char)v12[1] < 0)
    {
      v13 = v13 & 0x3FFF | (v12[2] << 14);
      if ((char)v12[2] < 0)
      {
        v13 = v13 & 0x1FFFFF | (v12[3] << 21);
        if ((char)v12[3] < 0)
        {
          v13 = v13 & 0xFFFFFFF | ((v12[4] & 7) << 28);
          v14 = 5;
        }
        else
        {
          v14 = 4;
        }
      }
      else
      {
        v14 = 3;
      }
    }
    else
    {
      v14 = 2;
    }
  }
  else
  {
    v14 = 1;
  }
  v15 = v14 + v6;
  *((_DWORD *)a1 + 3) = v15;
  if (v9 > v2)
    return 267;
  if (!v13 || (int)v13 > v5 - v15)
    return 267;
  v17 = v13 + v9;
  v18 = a1[3];
  if (*((_DWORD *)a1 + 9) >= (signed int)(v13 + v9))
  {
    if (!v18)
      return 0;
  }
  else
  {
    if (sqlite3_initialize())
      return 7;
    v19 = sub_1ACB6BB48(v18, v13 + v9);
    if (!v19)
      return 7;
    v18 = v19;
    *((_DWORD *)a1 + 9) = v17;
    a1[3] = v19;
    v7 = *a1;
    v15 = *((_DWORD *)a1 + 3);
  }
  memcpy((void *)(v18 + v9), (const void *)(v7 + v15), v13);
  *((_DWORD *)a1 + 8) = v17;
  v20 = *((int *)a1 + 3) + (unint64_t)v13;
  *((_DWORD *)a1 + 3) = v20;
  if (a1[2])
    return 0;
  v21 = (_BYTE *)(*a1 + v20);
  if ((char)*v21 < 0)
  {
    v23 = sub_1ACC5312C(v21, (int *)a1 + 12);
    LODWORD(v20) = *((_DWORD *)a1 + 3);
    v22 = *((_DWORD *)a1 + 12);
  }
  else
  {
    v22 = *v21;
    *((_DWORD *)a1 + 12) = v22;
    v23 = 1;
  }
  v24 = v20 + v23;
  *((_DWORD *)a1 + 3) = v24;
  if (*((_DWORD *)a1 + 2) - v24 < v22)
    return 267;
  result = 0;
  a1[5] = *a1 + v24;
  *((_DWORD *)a1 + 3) = v22 + v24;
  return result;
}

uint64_t sub_1ACC6BA78(uint64_t a1, uint64_t *a2, unsigned __int8 *__src, signed int a4, const void *a5, int a6)
{
  int v12;
  unsigned __int8 *v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v12 = *((_DWORD *)a2 + 2);
  v13 = (unsigned __int8 *)*a2;
  if (*((_DWORD *)a2 + 3) >= a4)
  {
    v15 = *((_DWORD *)a2 + 2);
  }
  else
  {
    if (sqlite3_initialize())
      return 7;
    v24 = sub_1ACB6BB48((uint64_t)v13, a4);
    if (!v24)
      return 7;
    v13 = (unsigned __int8 *)v24;
    *((_DWORD *)a2 + 3) = a4;
    *a2 = v24;
    v15 = *((_DWORD *)a2 + 2);
  }
  if ((int)v15 >= a4)
    v16 = a4;
  else
    v16 = v15;
  if ((int)v16 < 1)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v17 = 0;
    while (v13[v17] == __src[v17])
    {
      if (v16 == ++v17)
        goto LABEL_15;
    }
    LODWORD(v16) = v17;
  }
LABEL_15:
  if (a4 - (int)v16 < 1)
    return 267;
  memcpy(v13, __src, a4);
  *((_DWORD *)a2 + 2) = a4;
  if (v12)
  {
    v18 = 0;
    v19 = *(_QWORD *)a1 + *(int *)(a1 + 8);
    v20 = (int)v16;
    do
    {
      v21 = v20;
      *(_BYTE *)(v19 + v18++) = v20 | 0x80;
      v22 = v20 > 0x7F;
      v20 >>= 7;
    }
    while (v22);
    *(_BYTE *)(v19 + v18 - 1) = v21 & 0x7F;
    v23 = *(_DWORD *)(a1 + 8) + v18;
    *(_DWORD *)(a1 + 8) = v23;
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 8);
  }
  v25 = 0;
  v26 = *(_QWORD *)a1 + v23;
  v27 = (a4 - v16);
  do
  {
    v28 = v27;
    *(_BYTE *)(v26 + v25++) = v27 | 0x80;
    v22 = v27 > 0x7F;
    v27 >>= 7;
  }
  while (v22);
  *(_BYTE *)(v26 + v25 - 1) = v28 & 0x7F;
  v29 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v29 + v25;
  memcpy((void *)(*(_QWORD *)a1 + v29 + v25), &__src[(int)v16], (a4 - v16));
  v30 = *(int *)(a1 + 8) + (uint64_t)(a4 - (int)v16);
  *(_DWORD *)(a1 + 8) = v30;
  if (!a5)
    return 0;
  v31 = 0;
  v32 = *(_QWORD *)a1 + v30;
  v33 = a6;
  do
  {
    v34 = v33;
    *(_BYTE *)(v32 + v31++) = v33 | 0x80;
    v22 = v33 > 0x7F;
    v33 >>= 7;
  }
  while (v22);
  *(_BYTE *)(v32 + v31 - 1) = v34 & 0x7F;
  v35 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v35 + v31;
  memcpy((void *)(*(_QWORD *)a1 + v35 + v31), a5, a6);
  result = 0;
  *(_DWORD *)(a1 + 8) += a6;
  return result;
}

uint64_t sub_1ACC6BCC0(char *a1, int a2, uint64_t a3, const void *a4, int a5, _QWORD *a6)
{
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  signed int v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  char v25;
  void *v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  void *v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  char v36;
  int v37;
  void *v38;
  void (**v39)(void *);
  uint64_t v40;
  void (**v41)(uint64_t);
  uint64_t v43[2];
  char *v44;
  int v45;
  int v46;
  void *__s1[2];
  __int128 v48;
  uint64_t v49;

  v43[0] = 0;
  v43[1] = 0;
  if (a2 < 1)
    return 267;
  v12 = *a1;
  if (*(_DWORD *)(a3 + 12) < a2)
  {
    v13 = *(_BYTE **)a3;
    if (sqlite3_initialize())
      return 7;
    v15 = sub_1ACB6BB48((uint64_t)v13, a2);
    if (!v15)
      return 7;
    *(_DWORD *)(a3 + 12) = a2;
    *(_QWORD *)a3 = v15;
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(_OWORD *)__s1 = 0u;
  v48 = 0u;
  v49 = 0;
  v44 = a1;
  v45 = a2;
  if (*a1)
    v16 = sub_1ACC53378(a1 + 1, (unint64_t *)__s1) + 1;
  else
    v16 = 1;
  v46 = v16;
  while (1)
  {
    v14 = sub_1ACC6B810((uint64_t *)&v44);
    if ((_DWORD)v14 || !v44)
      break;
    v19 = (unsigned __int8 *)__s1[1];
    v20 = v48;
    if (*(_DWORD *)(a3 + 8))
    {
LABEL_14:
      v18 = sub_1ACC6BA78(a3, v43, v19, v20, *((const void **)&v48 + 1), v49);
      if ((_DWORD)v18)
      {
        v14 = v18;
        break;
      }
    }
    else
    {
      if ((int)v48 >= a5)
        v21 = a5;
      else
        v21 = v48;
      if (!a4 || (__s1[1] ? (v22 = v21 == 0) : (v22 = 1), v22 || (v23 = memcmp(__s1[1], a4, v21)) == 0))
        v23 = v20 - a5;
      if (v12)
        v24 = v23 == 0;
      else
        v24 = 0;
      v25 = v24;
      if ((v23 & 0x80000000) == 0 && (v25 & 1) == 0)
      {
        v26 = __s1[0];
        **(_BYTE **)a3 = *a1;
        if (v26)
        {
          v27 = 0;
          v28 = *(_BYTE **)a3;
          v29 = (unint64_t)v26;
          do
          {
            v30 = v29;
            v28[++v27] = v29 | 0x80;
            v31 = v29 > 0x7F;
            v29 >>= 7;
          }
          while (v31);
          v28[v27] = v30 & 0x7F;
          v17 = v27 + 1;
        }
        else
        {
          v17 = 1;
        }
        *(_DWORD *)(a3 + 8) = v17;
        *a6 = v26;
        goto LABEL_14;
      }
    }
  }
  if (!*(_DWORD *)(a3 + 8))
  {
    v32 = __s1[0];
    **(_BYTE **)a3 = *a1;
    if (v32)
    {
      v33 = 0;
      v34 = *(_BYTE **)a3;
      v35 = (unint64_t)v32;
      do
      {
        v36 = v35;
        v34[++v33] = v35 | 0x80;
        v31 = v35 > 0x7F;
        v35 >>= 7;
      }
      while (v31);
      v34[v33] = v36 & 0x7F;
      v37 = v33 + 1;
    }
    else
    {
      v37 = 1;
    }
    *(_DWORD *)(a3 + 8) = v37;
    *a6 = v32;
  }
  v38 = __s1[1];
  if (__s1[1])
  {
    v39 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_54;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v38);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v38);
    v38 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v39 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_54:
      (*v39)(v38);
    }
  }
  v40 = v43[0];
  if (v43[0])
  {
    v41 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_61;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v40);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v40);
    v40 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v41 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_61:
      (*v41)(v40);
    }
  }
  return v14;
}

uint64_t sub_1ACC6C018(uint64_t a1)
{
  char *v2;
  char *v3;
  int v4;
  uint64_t (**v5)(char *);
  uint64_t result;

  if (*(_BYTE *)(a1 + 461) != 2)
    return 0;
  v2 = sqlite3_mprintf("%s_stat", *(const char **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v4 = sqlite3_table_column_metadata(*(sqlite3 **)(a1 + 24), *(const char **)(a1 + 32), v2, 0, 0, 0, 0, 0, 0);
    v5 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_9;
      v5 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v5)(v3);
LABEL_9:
    result = 0;
    *(_BYTE *)(a1 + 461) = v4 == 0;
    return result;
  }
  return 7;
}

void sub_1ACC6C13C(uint64_t a1, int a2, uint64_t *a3)
{
  double v6;
  double v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _DWORD *v47;
  int8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int64x2_t *v53;
  uint64_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64x2_t v60;
  int8x16_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t m;
  char *v79;
  char *v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  uint64_t k;
  uint64_t v85;
  unsigned int v86;
  char *v87;
  unsigned __int8 **v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t i;
  char *v96;
  unsigned __int8 **v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  unint64_t v111;
  uint64_t j;
  int8x16_t v113;
  int8x16_t v114;
  uint64x2_t v115;
  uint64_t v116;
  int64x2_t v117;
  int8x16_t v118;
  unsigned int v119;
  char *v120;
  uint64_t (**v121)(char *);
  int8x8_t v122;
  int v123;
  double v125;
  char *v126;
  uint64_t v127;
  int v128;
  void (__cdecl *v129)(void *);
  double v130;
  uint64_t v131;
  _DWORD *v132;
  _QWORD *v133;
  int v134;
  sqlite3_stmt *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (**v140)(uint64_t);
  uint64_t v141;
  uint64_t *v142;
  _DWORD *v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  const unsigned __int8 *v147;
  sqlite3_stmt *v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t **v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t **v174;
  int v175;
  int v176;
  int v177;
  int v178;
  void (*v179)(uint64_t **);
  int v180;
  uint64_t v181;
  int v182;
  int v183;
  size_t v184;
  int v185;
  size_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  char v190;
  char *v191;
  int v192;
  size_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  char *v198;
  int v199;
  size_t v200;
  uint64_t v201;
  int v202;
  int v203;
  size_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  size_t v214;
  void (*v215)(uint64_t **);
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  char *v221;
  char *v222;
  char *v223;
  int v224;
  int v225;
  int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t v229;
  int64x2_t v230;
  int8x16_t v231;
  int64x2_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t **v246;
  int v247;
  int v248;
  uint64_t v249;
  int __s;
  char *__sa;
  int v252;
  int v253;
  _QWORD *v254;
  uint64_t **v255;
  int v256;
  int v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  _DWORD v268[25];
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  if (a2 >= 7)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, "wrong number of arguments to function snippet()", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
    return;
  }
  v254 = 0;
  if (sub_1ACC6F230(a1, "snippet", *a3, &v254))
    return;
  LODWORD(v6) = 15;
  LODWORD(v7) = -1;
  v8 = "<b>...</b>";
  v9 = "</b>";
  switch(a2)
  {
    case 2:
      goto LABEL_36;
    case 3:
      goto LABEL_28;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_14;
    case 6:
      v10 = a3[5];
      if (!v10)
      {
        sub_1ACBBE20C(89699);
        goto LABEL_13;
      }
      v11 = *(_WORD *)(v10 + 20);
      if ((v11 & 0x24) != 0)
      {
        v6 = *(double *)v10;
        goto LABEL_14;
      }
      if ((v11 & 8) == 0)
      {
        if ((v11 & 0x12) != 0 && *(_QWORD *)(v10 + 8))
        {
          LODWORD(v6) = sub_1ACBF2FC0(v10);
          goto LABEL_14;
        }
LABEL_13:
        LODWORD(v6) = 0;
        goto LABEL_14;
      }
      v130 = *(double *)v10;
      if (*(double *)v10 >= -9.22337204e18)
      {
        if (v130 <= 9.22337204e18)
          *(_QWORD *)&v6 = (uint64_t)v130;
        else
          LODWORD(v6) = -1;
      }
      else
      {
        LODWORD(v6) = 0;
      }
LABEL_14:
      v13 = a3[4];
      if (!v13)
      {
        sub_1ACBBE20C(89699);
        goto LABEL_18;
      }
      v14 = *(_WORD *)(v13 + 20);
      if ((v14 & 0x24) != 0)
      {
        v7 = *(double *)v13;
        goto LABEL_19;
      }
      if ((v14 & 8) == 0)
      {
        if ((v14 & 0x12) != 0 && *(_QWORD *)(v13 + 8))
        {
          LODWORD(v7) = sub_1ACBF2FC0(v13);
          goto LABEL_19;
        }
LABEL_18:
        LODWORD(v7) = 0;
        goto LABEL_19;
      }
      v125 = *(double *)v13;
      if (*(double *)v13 >= -9.22337204e18)
      {
        if (v125 <= 9.22337204e18)
          *(_QWORD *)&v7 = (uint64_t)v125;
        else
          LODWORD(v7) = -1;
      }
      else
      {
        LODWORD(v7) = 0;
      }
LABEL_19:
      v15 = a3[3];
      if (v15)
      {
        v16 = *(unsigned __int16 *)(v15 + 20);
        if ((~v16 & 0x202) != 0 || *(_BYTE *)(v15 + 22) != 1)
        {
          if ((v16 & 1) != 0)
          {
            v8 = 0;
            v17 = a3[2];
            if (!v17)
              goto LABEL_35;
          }
          else
          {
            v18 = LODWORD(v7);
            v19 = sub_1ACBF2B64((int *)v15, 1);
            LODWORD(v7) = v18;
            v8 = (const char *)v19;
            v17 = a3[2];
            if (!v17)
              goto LABEL_35;
          }
        }
        else
        {
          v8 = *(const char **)(v15 + 8);
          v17 = a3[2];
          if (!v17)
            goto LABEL_35;
        }
      }
      else
      {
        v8 = 0;
LABEL_28:
        v17 = a3[2];
        if (!v17)
          goto LABEL_35;
      }
      v20 = *(unsigned __int16 *)(v17 + 20);
      if ((~v20 & 0x202) == 0 && *(_BYTE *)(v17 + 22) == 1)
      {
        v9 = *(const char **)(v17 + 8);
        goto LABEL_36;
      }
      if ((v20 & 1) == 0)
      {
        v21 = LODWORD(v7);
        v22 = sub_1ACBF2B64((int *)v17, 1);
        LODWORD(v7) = v21;
        v9 = (const char *)v22;
        goto LABEL_36;
      }
LABEL_35:
      v9 = 0;
LABEL_36:
      v23 = a3[1];
      if (!v23)
        goto LABEL_202;
      v24 = *(unsigned __int16 *)(v23 + 20);
      if ((~v24 & 0x202) != 0 || *(_BYTE *)(v23 + 22) != 1)
      {
        if ((v24 & 1) == 0)
        {
          v25 = LODWORD(v7);
          v26 = sub_1ACBF2B64((int *)v23, 1);
          LODWORD(v7) = v25;
          v12 = (const char *)v26;
          goto LABEL_42;
        }
LABEL_202:
        sqlite3_result_error_nomem((sqlite3_context *)a1);
        return;
      }
      v12 = *(const char **)(v23 + 8);
LABEL_42:
      if (!v8 || !v9 || !v12)
        goto LABEL_202;
      if (!LODWORD(v6))
      {
        if (a1)
        {
          sub_1ACBC69D0(a1, &byte_1ACCBEAEE, -1, 1u, 0);
          return;
        }
        goto LABEL_217;
      }
LABEL_46:
      v252 = LODWORD(v7);
      v27 = v254;
      if (sub_1ACC64070((_DWORD *)a1, (uint64_t)v254))
        return;
      if (!v27[3])
      {
        if (a1)
        {
          v126 = &byte_1ACCBEAEE;
          v127 = a1;
          v128 = 0;
          v129 = 0;
LABEL_242:
          sub_1ACBC69D0(v127, v126, v128, 1u, (uint64_t (*)(uint64_t))v129);
          return;
        }
LABEL_217:
        sub_1ACBBE20C(97480);
        return;
      }
      v222 = (char *)v8;
      v223 = (char *)v12;
      v221 = (char *)v9;
      v227 = (_DWORD *)a1;
      v240 = v27;
      v28 = *v27;
      if (SLODWORD(v6) <= -64)
        v29 = -64;
      else
        v29 = LODWORD(v6);
      if (v29 >= 64)
        v30 = 64;
      else
        v30 = v29;
      v31 = v30 - 1;
      v32 = 1;
      v235 = *v27;
      v33 = v252;
      v225 = -v30;
      v226 = v30;
      v224 = v30 - 1;
      v232 = vdupq_n_s64(2uLL);
      v230 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
      v231 = (int8x16_t)vdupq_n_s64(0x3FuLL);
      v236 = -v30;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_55;
      while (2)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = v240;
        v228 = v32;
        do
        {
          v229 = v34;
          v38 = &v268[6 * v34 + 1];
          *v38 = 0;
          v38[1] = 0;
          v234 = v38;
          v38[2] = 0;
          if (*(int *)(v28 + 48) >= 1)
          {
            v39 = 0;
            v40 = 0xFFFFFFFFLL;
            while ((v33 & 0x80000000) == 0 && v39 != v33)
            {
              v41 = v40;
LABEL_61:
              ++v39;
              v40 = v41;
              if (v39 >= *(_DWORD *)(v28 + 48))
                goto LABEL_57;
            }
            v258 = 0;
            v259 = 0;
            v260 = 0;
            v261 = v37;
            v262 = 0;
            v42 = (_DWORD *)v37[3];
            v268[0] = 0;
            v43 = sub_1ACC6F4D4(v42, v268, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6F4B4, (uint64_t)&v261);
            if (v43)
              goto LABEL_225;
            v44 = v262;
            if (sqlite3_initialize())
            {
              v43 = 7;
LABEL_225:
              v131 = 0;
              v132 = v227;
              goto LABEL_227;
            }
            __s = v40;
            v45 = (char *)sub_1ACB5D828(48 * (int)v44);
            if (!v45)
            {
              v43 = 7;
              v28 = v235;
              goto LABEL_225;
            }
            v46 = v45;
            bzero(v45, 48 * (int)v44);
            v259 = v46;
            v37 = v240;
            v255 = (uint64_t **)v240;
            v256 = v39;
            v257 = v236;
            LODWORD(v258) = v44;
            LODWORD(v260) = -1;
            v47 = (_DWORD *)v240[3];
            LODWORD(v261) = 0;
            v43 = sub_1ACC6F4D4(v47, &v261, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6F39C, (uint64_t)&v255);
            v247 = v39;
            if (v43)
            {
              v238 = 0;
              v241 = 0;
              v245 = 0;
              v48 = 0;
              v41 = 0;
            }
            else
            {
              if ((int)v44 >= 1)
              {
                if (v44 >= 5)
                {
                  v50 = v44 & 3;
                  if ((v44 & 3) == 0)
                    v50 = 4;
                  v49 = v44 - v50;
                  v51 = 0uLL;
                  v52 = (int8x16_t)(unint64_t)v36;
                  v53 = (int64x2_t *)(v259 + 120);
                  v54 = v49;
                  v55 = (int64x2_t)xmmword_1ACCBDC40;
                  do
                  {
                    v56 = v53[-3];
                    v57 = v53[-6];
                    v58 = v53[3];
                    v59 = *v53;
                    v53 += 12;
                    v60 = (uint64x2_t)vdupq_n_s64(1uLL);
                    v52 = vorrq_s8(vbicq_s8((int8x16_t)vshlq_u64(v60, (uint64x2_t)vandq_s8((int8x16_t)v55, v231)), (int8x16_t)vceqzq_s64(vzip1q_s64(v57, v56))), v52);
                    v51 = vorrq_s8(vbicq_s8((int8x16_t)vshlq_u64(v60, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v55, v232), v231)), (int8x16_t)vceqzq_s64(vzip1q_s64(v59, v58))), v51);
                    v55 = vaddq_s64(v55, vdupq_n_s64(4uLL));
                    v54 -= 4;
                  }
                  while (v54);
                  v61 = vorrq_s8(v51, v52);
                  v36 = vorr_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
                }
                else
                {
                  v49 = 0;
                }
                v62 = (uint64_t *)&v259[48 * v49 + 24];
                do
                {
                  v63 = *v62;
                  v62 += 6;
                  if (v63)
                    v64 = 1 << v49;
                  else
                    v64 = 0;
                  *(_QWORD *)&v36 |= v64;
                  ++v49;
                }
                while (v44 != v49);
              }
              LODWORD(v65) = 0;
              v66 = 0;
              v67 = 0;
              v68 = v260;
              v69 = 0xFFFFFFFFLL;
              v70 = v258;
              v71 = v257;
LABEL_84:
              v41 = v69;
              v48 = v67;
              v245 = v66;
              v241 = v65;
              LODWORD(v65) = v68;
              while ((v65 & 0x80000000) != 0)
              {
                LODWORD(v260) = 0;
                if ((int)v70 >= 1)
                {
                  v92 = 0;
                  v93 = v257;
                  do
                  {
                    v96 = &v259[48 * v92];
                    v98 = (unsigned __int8 *)*((_QWORD *)v96 + 3);
                    v97 = (unsigned __int8 **)(v96 + 24);
                    v94 = v98;
                    if (v98)
                    {
                      for (i = (uint64_t)*(v97 - 1); ; i += (int)(v100 - 2))
                      {
                        if (i >= v93)
                          goto LABEL_133;
                        v100 = *v94;
                        if (v100 < 2)
                          break;
                        if ((v100 & 0x80) != 0)
                        {
                          v100 = v100 & 0x7F | (v94[1] << 7);
                          if ((char)v94[1] < 0)
                          {
                            v100 = v100 & 0x3FFF | (v94[2] << 14);
                            if ((char)v94[2] < 0)
                            {
                              v100 = v100 & 0x1FFFFF | (v94[3] << 21);
                              if ((char)v94[3] < 0)
                              {
                                v100 = v100 & 0xFFFFFFF | ((v94[4] & 7) << 28);
                                v99 = 5;
                              }
                              else
                              {
                                v99 = 4;
                              }
                            }
                            else
                            {
                              v99 = 3;
                            }
                          }
                          else
                          {
                            v99 = 2;
                          }
                        }
                        else
                        {
                          v99 = 1;
                        }
                        v94 += v99;
                      }
                      v94 = 0;
                      i = -1;
LABEL_133:
                      *(v97 - 1) = (unsigned __int8 *)i;
                      *v97 = v94;
                    }
                    ++v92;
                  }
                  while (v92 != v70);
                  LODWORD(v65) = 0;
LABEL_150:
                  v101 = 0;
                  v67 = 0;
                  v66 = 0;
                  v69 = 0;
                  v102 = v257 + (uint64_t)(int)v65;
                  while (1)
                  {
                    v103 = &v259[48 * v101];
                    v104 = (unsigned __int8 *)*((_QWORD *)v103 + 5);
                    if (v104)
                    {
                      v105 = *(_QWORD *)&v259[48 * v101 + 32];
                      if (v105 < v102 && v105 >= (int)v65)
                        break;
                    }
LABEL_152:
                    if (++v101 == v70)
                      goto LABEL_86;
                  }
                  v107 = *(unsigned int *)v103;
                  v108 = v66 | (1 << v101);
                  while (2)
                  {
                    if (((v66 | v35) & (1 << v101)) != 0)
                      v69 = (v69 + 1);
                    else
                      v69 = (v69 + 1000);
                    if ((int)v107 >= 1)
                    {
                      v111 = 1 << (v105 - v65);
                      if (v107 < 4)
                      {
                        j = 0;
                        goto LABEL_173;
                      }
                      v113 = 0uLL;
                      v114 = (int8x16_t)(unint64_t)v67;
                      v115 = (uint64x2_t)vdupq_n_s64(v111);
                      v116 = v107 & 0xFFFFFFFC;
                      v117 = (int64x2_t)xmmword_1ACCBDC40;
                      do
                      {
                        v114 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vnegq_s64(v117)), v114);
                        v113 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vsubq_s64(v230, v117)), v113);
                        v117 = vaddq_s64(v117, vdupq_n_s64(4uLL));
                        v116 -= 4;
                      }
                      while (v116);
                      v118 = vorrq_s8(v113, v114);
                      v67 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
                      for (j = v107 & 0xFFFFFFFC; v107 != j; ++j)
LABEL_173:
                        *(_QWORD *)&v67 |= v111 >> j;
                    }
                    v119 = *v104;
                    if (v119 < 2)
                      goto LABEL_151;
                    if ((v119 & 0x80) != 0)
                    {
                      v119 = v119 & 0x7F | (v104[1] << 7);
                      if ((char)v104[1] < 0)
                      {
                        v119 = v119 & 0x3FFF | (v104[2] << 14);
                        if ((char)v104[2] < 0)
                        {
                          v119 = v119 & 0x1FFFFF | (v104[3] << 21);
                          if ((char)v104[3] < 0)
                          {
                            v119 = v119 & 0xFFFFFFF | ((v104[4] & 7) << 28);
                            v109 = 5;
                          }
                          else
                          {
                            v109 = 4;
                          }
                        }
                        else
                        {
                          v109 = 3;
                        }
                      }
                      else
                      {
                        v109 = 2;
                      }
                    }
                    else
                    {
                      v109 = 1;
                    }
                    v104 += v109;
                    v105 += (int)(v119 - 2);
                    v110 = v105 >= v102 || v105 < (int)v65;
                    v66 = v108;
                    if (v110)
                    {
LABEL_151:
                      v66 = v108;
                      goto LABEL_152;
                    }
                    continue;
                  }
                }
                LODWORD(v65) = 0;
                v69 = 0;
                v66 = 0;
                v67 = 0;
LABEL_86:
                v68 = v65;
                if ((int)v69 > (int)v41)
                  goto LABEL_84;
              }
              if ((int)v70 >= 1)
              {
                v72 = v259 + 24;
                v73 = 0x7FFFFFFF;
                v74 = v70;
                do
                {
                  if (*v72 && *(v72 - 1) < v73)
                    v73 = *(v72 - 1);
                  v72 += 6;
                  --v74;
                }
                while (v74);
                if (v73 != 0x7FFFFFFF)
                {
                  v75 = 0;
                  v65 = v73 - v71 + 1;
                  LODWORD(v260) = v73 - v71 + 1;
                  v76 = v73 + 1;
                  do
                  {
                    v79 = v259;
                    v80 = &v259[48 * v75];
                    v83 = (unsigned __int8 *)*((_QWORD *)v80 + 3);
                    v81 = (unsigned __int8 **)(v80 + 24);
                    v82 = v83;
                    if (v83)
                    {
                      for (k = (uint64_t)*(v81 - 1); ; k += (int)(v86 - 2))
                      {
                        if (k >= v76)
                          goto LABEL_115;
                        v86 = *v82;
                        if (v86 < 2)
                          break;
                        if ((v86 & 0x80) != 0)
                        {
                          v86 = v86 & 0x7F | (v82[1] << 7);
                          if ((char)v82[1] < 0)
                          {
                            v86 = v86 & 0x3FFF | (v82[2] << 14);
                            if ((char)v82[2] < 0)
                            {
                              v86 = v86 & 0x1FFFFF | (v82[3] << 21);
                              if ((char)v82[3] < 0)
                              {
                                v86 = v86 & 0xFFFFFFF | ((v82[4] & 7) << 28);
                                v85 = 5;
                              }
                              else
                              {
                                v85 = 4;
                              }
                            }
                            else
                            {
                              v85 = 3;
                            }
                          }
                          else
                          {
                            v85 = 2;
                          }
                        }
                        else
                        {
                          v85 = 1;
                        }
                        v82 += v85;
                      }
                      v82 = 0;
                      k = -1;
LABEL_115:
                      *(v81 - 1) = (unsigned __int8 *)k;
                      *v81 = v82;
                    }
                    v87 = &v79[48 * v75];
                    v89 = (unsigned __int8 *)*((_QWORD *)v87 + 5);
                    v88 = (unsigned __int8 **)(v87 + 40);
                    v77 = v89;
                    if (v89)
                    {
                      for (m = (uint64_t)*(v88 - 1); ; m += (int)(v91 - 2))
                      {
                        if (m >= v65)
                          goto LABEL_98;
                        v91 = *v77;
                        if (v91 < 2)
                          break;
                        if ((v91 & 0x80) != 0)
                        {
                          v91 = v91 & 0x7F | (v77[1] << 7);
                          if ((char)v77[1] < 0)
                          {
                            v91 = v91 & 0x3FFF | (v77[2] << 14);
                            if ((char)v77[2] < 0)
                            {
                              v91 = v91 & 0x1FFFFF | (v77[3] << 21);
                              if ((char)v77[3] < 0)
                              {
                                v91 = v91 & 0xFFFFFFF | ((v77[4] & 7) << 28);
                                v90 = 5;
                              }
                              else
                              {
                                v90 = 4;
                              }
                            }
                            else
                            {
                              v90 = 3;
                            }
                          }
                          else
                          {
                            v90 = 2;
                          }
                        }
                        else
                        {
                          v90 = 1;
                        }
                        v77 += v90;
                      }
                      v77 = 0;
                      m = -1;
LABEL_98:
                      *(v88 - 1) = (unsigned __int8 *)m;
                      *v88 = v77;
                    }
                    ++v75;
                  }
                  while (v75 != v70);
                  goto LABEL_150;
                }
              }
              v238 = v39;
            }
            v33 = v252;
            v120 = v259;
            if (v259)
            {
              v121 = (uint64_t (**)(char *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                v122 = v48;
                v123 = v43;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v120);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v120);
                v120 = (char *)xmmword_1ECD3E930;
                v37 = v240;
                v33 = v252;
                v43 = v123;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_192;
                v121 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
              }
              else
              {
                v122 = v48;
                v123 = v43;
              }
              (*v121)(v120);
              v33 = v252;
              v43 = v123;
              v48 = v122;
            }
LABEL_192:
            if (v43)
            {
              v131 = 0;
              v132 = v227;
              v28 = v235;
              goto LABEL_227;
            }
            v28 = v235;
            v39 = v247;
            if ((int)v41 <= __s)
            {
              v41 = __s;
            }
            else
            {
              *(_DWORD *)v234 = v238;
              *((_DWORD *)v234 + 1) = v241;
              v234[1] = v245;
              v234[2] = v48;
            }
            goto LABEL_61;
          }
LABEL_57:
          v35 |= *(_QWORD *)&v268[6 * v229 + 3];
          v34 = v229 + 1;
        }
        while (v229 + 1 != v228);
        if (*(_QWORD *)&v36 != v35 && v228 != 4)
        {
          v32 = v228 + 1;
          v31 = v224;
          v236 = v225;
          if (v226 < 0)
            continue;
LABEL_55:
          v236 = (v31 + (int)v32) / (int)v32;
          continue;
        }
        break;
      }
      v141 = 0;
      v242 = 0;
      v253 = 0;
      v131 = 0;
      v132 = v227;
      v142 = v240;
      while (2)
      {
        v143 = &v268[6 * v141 + 1];
        v144 = *v142;
        v265 = 0;
        v145 = *((_QWORD *)v143 + 2);
        v248 = v143[1];
        v146 = *v143 + 1;
        v147 = sqlite3_column_text((sqlite3_stmt *)v142[2], v146);
        v148 = (sqlite3_stmt *)v142[2];
        if (!v147)
        {
          if (sqlite3_column_type(v148, v146) == 5)
            v43 = 0;
          else
            v43 = 7;
          goto LABEL_370;
        }
        v239 = v141;
        v149 = sqlite3_column_bytes(v148, v146);
        v233 = v144;
        v150 = *(uint64_t **)(v144 + 72);
        v151 = *v150;
        v152 = *((unsigned int *)v142 + 8);
        v255 = 0;
        v237 = v149;
        v153 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *))(v151 + 24))(v150, v147);
        if (v153)
        {
          v220 = v153;
LABEL_385:
          v132 = v227;
          v28 = v235;
          v43 = v220;
          break;
        }
        __sa = (char *)v147;
        *v255 = v150;
        v154 = v255;
        if (*(int *)v151 >= 1)
        {
          v155 = (*(uint64_t (**)(uint64_t **, uint64_t))(v151 + 48))(v255, v152);
          v154 = v255;
          if (v155)
          {
            v220 = v155;
            (*(void (**)(uint64_t **))(v151 + 32))(v255);
            goto LABEL_385;
          }
        }
        v28 = v235;
        v156 = v242;
        v157 = v248;
        v158 = 0;
        v243 = 0;
        v246 = v154;
        v249 = v151;
        while (1)
        {
          v261 = 0;
          v264 = -1;
          v263 = 0;
          v160 = (*(uint64_t (**)(uint64_t **, _QWORD **, int *, char *, uint64_t *, int *))(v151 + 40))(v154, &v261, &v264, (char *)&v263 + 4, &v263, &v265);
          if (v160)
          {
            v159 = v160;
            if (v160 != 101)
              goto LABEL_367;
            v209 = strlen(&__sa[v243]);
            v210 = v156;
            if (v253 + v209 + 1 >= (int)v156)
            {
              if (sqlite3_initialize())
                goto LABEL_361;
              v217 = sub_1ACB6BB48(v131, v209 + (uint64_t)(int)v156 + 100);
              if (!v217)
                goto LABEL_361;
              v131 = v217;
              v210 = v209 + v156 + 100;
            }
            memcpy((void *)(v131 + v253), &__sa[v243], v209);
            v211 = v253 + v209;
            goto LABEL_359;
          }
          v161 = v265;
          if (v265 >= v157)
            break;
          v159 = 0;
LABEL_270:
          if (v159)
            goto LABEL_369;
        }
        if (v158)
          goto LABEL_315;
        if (!v145)
          goto LABEL_291;
        v162 = 0;
        v163 = *((unsigned int *)v142 + 8);
        v164 = 1;
        do
        {
          v165 = v164;
          v166 = v145 >> v162++;
          ++v164;
        }
        while ((v166 & 1) == 0);
        v167 = v236 - 1;
        do
        {
          --v165;
          v168 = v145 >> v167--;
        }
        while ((v168 & 1) == 0);
        v169 = v165 >= 0 ? v165 : v165 + 1;
        if (v165 >= 2)
        {
          LODWORD(v170) = v156;
          v268[0] = 0;
          v171 = *(uint64_t **)(v233 + 72);
          v172 = *v171;
          v255 = 0;
          v173 = (*(uint64_t (**)(uint64_t *, char *, _QWORD, uint64_t ***))(v172 + 24))(v171, &__sa[SHIDWORD(v263)], (v237 - HIDWORD(v263)), &v255);
          if (v173)
          {
            v219 = v173;
            goto LABEL_382;
          }
          *v255 = v171;
          v174 = v255;
          if (*(int *)v172 >= 1)
          {
            v175 = (*(uint64_t (**)(uint64_t **, uint64_t))(v172 + 48))(v255, v163);
            v174 = v255;
            if (v175)
            {
              v219 = v175;
              (*(void (**)(uint64_t **))(v172 + 32))(v255);
              goto LABEL_382;
            }
          }
          v176 = (v169 >> 1) + v236;
          do
          {
            v177 = v268[0];
            if (v268[0] >= v176)
            {
              (*(void (**)(uint64_t **))(v172 + 32))(v174);
              goto LABEL_293;
            }
            v255 = 0;
            v267 = 0;
            v266 = 0;
            v178 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, _DWORD *))(v172 + 40))(v174, &v255, (char *)&v267 + 4, &v267, &v266, v268);
          }
          while (!v178);
          v179 = *(void (**)(uint64_t **))(v172 + 32);
          v180 = v178;
          v179(v174);
          if (v180 != 101)
          {
            v219 = v180;
            goto LABEL_382;
          }
LABEL_293:
          v182 = ((v177 < v176) - v236 + v268[0]) & ~(((v177 < v176) - v236 + v268[0]) >> 31);
          v157 += v182;
          v145 >>= v182;
          v181 = v239;
        }
        else
        {
LABEL_291:
          v181 = v239;
        }
        if (!v181 && v157 < 1)
        {
          v183 = HIDWORD(v263);
          if (HIDWORD(v263))
          {
            if (v263 < 0)
              v183 = strlen(__sa);
            v170 = v156;
            if (v253 + v183 + 1 >= (int)v156)
            {
              if (sqlite3_initialize())
                goto LABEL_375;
              v184 = v183;
              v189 = sub_1ACB6BB48(v131, v183 + (uint64_t)(int)v156 + 100);
              if (!v189)
                goto LABEL_375;
              v131 = v189;
              v170 = v183 + (uint64_t)(int)v156 + 100;
            }
            else
            {
              v184 = v183;
            }
            v188 = v253;
            memcpy((void *)(v131 + v253), __sa, v184);
            v28 = v235;
            v156 = v170;
LABEL_312:
            *(_BYTE *)(v131 + v183 + (uint64_t)v188) = 0;
            v253 = v183 + v188;
          }
          else
          {
            v28 = v235;
          }
          v161 = v265;
          v142 = v240;
          v154 = v246;
          v151 = v249;
          if (v265 < v157)
          {
            v159 = 0;
            v158 = 1;
            goto LABEL_270;
          }
LABEL_315:
          if (v161 < v157 + v236)
          {
            v190 = v161 - v157;
            if (v161 <= v157)
              goto LABEL_322;
            v191 = &__sa[v243];
            v192 = HIDWORD(v263) - v243;
            if (HIDWORD(v263) - v243 < 0)
              v192 = strlen(&__sa[v243]);
            if (v253 + v192 + 1 < (int)v156)
            {
              v193 = v192;
              goto LABEL_321;
            }
            if (sqlite3_initialize())
            {
LABEL_340:
              v159 = 7;
              goto LABEL_345;
            }
            v193 = v192;
            v244 = v156;
            v207 = sub_1ACB6BB48(v131, v192 + (uint64_t)(int)v156 + 100);
            if (!v207)
              goto LABEL_349;
            v131 = v207;
            v156 = v192 + (uint64_t)(int)v156 + 100;
LABEL_321:
            memcpy((void *)(v131 + v253), v191, v193);
            *(_BYTE *)(v131 + v253 + (uint64_t)v192) = 0;
            v253 += v192;
            v28 = v235;
LABEL_322:
            v194 = (1 << v190) & v145;
            if (!v194)
              goto LABEL_325;
            v195 = strlen(v223);
            v196 = v253;
            if (v253 + v195 + 1 < (int)v156)
              goto LABEL_324;
            if (sqlite3_initialize())
              goto LABEL_340;
            v244 = v156;
            v206 = sub_1ACB6BB48(v131, v195 + (uint64_t)(int)v156 + 100);
            if (!v206)
              goto LABEL_349;
            v131 = v206;
            v156 = v195 + (uint64_t)(int)v156 + 100;
            v28 = v235;
            v196 = v253;
LABEL_324:
            v197 = v196;
            memcpy((void *)(v131 + v196), v223, v195);
            *(_BYTE *)(v131 + v197 + v195) = 0;
            v253 = v197 + v195;
LABEL_325:
            v198 = &__sa[SHIDWORD(v263)];
            v199 = v263 - HIDWORD(v263);
            if ((int)v263 - HIDWORD(v263) < 0)
              v199 = strlen(&__sa[SHIDWORD(v263)]);
            if (v253 + v199 + 1 < (int)v156)
            {
              v200 = v199;
              goto LABEL_329;
            }
            if (sqlite3_initialize())
              goto LABEL_340;
            v200 = v199;
            v244 = v156;
            v205 = sub_1ACB6BB48(v131, v199 + (uint64_t)(int)v156 + 100);
            if (v205)
            {
              v131 = v205;
              v156 = v199 + (uint64_t)(int)v156 + 100;
LABEL_329:
              memcpy((void *)(v131 + v253), v198, v200);
              v201 = v253 + (uint64_t)v199;
              *(_BYTE *)(v131 + v201) = 0;
              if (!v194)
              {
                v253 = v201;
                v159 = 0;
                goto LABEL_344;
              }
              v202 = strlen(v221);
              v203 = v202;
              if ((int)v201 + v202 + 1 < (int)v156)
              {
                v204 = v202;
                goto LABEL_332;
              }
              v253 = v201;
              if (sqlite3_initialize())
              {
                v159 = 7;
                goto LABEL_344;
              }
              v204 = v203;
              v208 = sub_1ACB6BB48(v131, v203 + (uint64_t)(int)v156 + 100);
              if (v208)
              {
                v131 = v208;
                v156 = v203 + (uint64_t)(int)v156 + 100;
LABEL_332:
                memcpy((void *)(v131 + v201), v221, v204);
                v159 = 0;
                v253 = v201 + v203;
                *(_BYTE *)(v131 + (int)v201 + v203) = 0;
LABEL_344:
                v28 = v235;
LABEL_345:
                v142 = v240;
              }
              else
              {
                v159 = 7;
                v28 = v235;
                v142 = v240;
              }
            }
            else
            {
LABEL_349:
              v159 = 7;
              v28 = v235;
              v142 = v240;
              v156 = v244;
            }
            v154 = v246;
            v151 = v249;
            v158 = 1;
            v243 = v263;
            goto LABEL_270;
          }
          v210 = v156;
          if (v239 != (_DWORD)v228 - 1)
          {
            v159 = 0;
            goto LABEL_366;
          }
          v212 = strlen(v222);
          v213 = v212;
          if (v253 + v212 + 1 < (int)v156)
          {
            v214 = v212;
            goto LABEL_379;
          }
          if (!sqlite3_initialize())
          {
            v214 = v213;
            v218 = sub_1ACB6BB48(v131, v213 + (uint64_t)(int)v156 + 100);
            if (v218)
            {
              v131 = v218;
              v210 = v213 + v156 + 100;
LABEL_379:
              memcpy((void *)(v131 + v253), v222, v214);
              v211 = v253 + v213;
LABEL_359:
              v253 = v211;
              v159 = 0;
              *(_BYTE *)(v131 + v211) = 0;
LABEL_366:
              LODWORD(v156) = v210;
LABEL_367:
              v28 = v235;
              v142 = v240;
              goto LABEL_368;
            }
          }
LABEL_361:
          v159 = 7;
          goto LABEL_366;
        }
        v185 = strlen(v222);
        v183 = v185;
        if (v253 + v185 + 1 < (int)v156)
        {
          v186 = v185;
LABEL_306:
          v188 = v253;
          memcpy((void *)(v131 + v253), v222, v186);
          v28 = v235;
          goto LABEL_312;
        }
        LODWORD(v170) = v156;
        if (!sqlite3_initialize())
        {
          v186 = v183;
          v187 = sub_1ACB6BB48(v131, v183 + (uint64_t)(int)v156 + 100);
          if (v187)
          {
            v131 = v187;
            v156 = v183 + (uint64_t)(int)v156 + 100;
            goto LABEL_306;
          }
        }
LABEL_375:
        v219 = 7;
LABEL_382:
        v28 = v235;
        v142 = v240;
        v159 = v219;
        LODWORD(v156) = v170;
LABEL_368:
        v154 = v246;
        v151 = v249;
LABEL_369:
        v242 = v156;
        v215 = *(void (**)(uint64_t **))(v151 + 32);
        v216 = v159;
        v215(v154);
        v43 = v216;
        v132 = v227;
        v141 = v239;
LABEL_370:
        if (++v141 < (unint64_t)v228 && !v43)
          continue;
        break;
      }
LABEL_227:
      v133 = *(_QWORD **)(v28 + 480);
      if (v133)
      {
        v134 = v43;
        v135 = (sqlite3_stmt *)v133[3];
        v136 = (_QWORD *)v133[4];
        v137 = v136[3];
        if (v137)
          xmmword_1ECD3B1C0(v137);
        sub_1ACBE0F9C(v136, v133);
        v138 = v136[3];
        if (v138)
          xmmword_1ECD3B1D0(v138);
        sqlite3_finalize(v135);
        v43 = v134;
      }
      *(_QWORD *)(v28 + 480) = 0;
      if (!v43)
      {
        if (v132)
        {
          v129 = sqlite3_free;
          v127 = (uint64_t)v132;
          v126 = (char *)v131;
          v128 = -1;
          goto LABEL_242;
        }
        goto LABEL_217;
      }
      if (v132)
      {
        v132[9] = v43;
        if ((*(_WORD *)(*(_QWORD *)v132 + 20) & 1) != 0)
        {
          switch(v43)
          {
            case 516:
              v139 = "abort due to ROLLBACK";
              break;
            case 101:
              v139 = "no more rows available";
              break;
            case 100:
              v139 = "another row available";
              break;
            default:
              if (v43 > 0x1Cu || ((0x1410004uLL >> v43) & 1) != 0)
                v139 = "unknown error";
              else
                v139 = off_1E5C74AE8[v43];
              break;
          }
          sub_1ACBC69D0((uint64_t)v132, v139, -1, 1u, 0);
        }
      }
      else
      {
        sub_1ACBBE20C(97602);
      }
      if (v131)
      {
        v140 = (void (**)(uint64_t))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_262;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v131);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v131);
        v131 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v140 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_262:
          (*v140)(v131);
        }
      }
      return;
    default:
      v12 = "<b>";
      goto LABEL_46;
  }
}

void sub_1ACC6D924(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  void (__cdecl *v15)(void *);
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  _QWORD *v19;
  sqlite3_stmt *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  int v31;
  const unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  int v41;
  int v42;
  size_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  int v46;
  unsigned __int8 **v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t (**v58)(char *);
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _QWORD *__src;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v65 = 0;
  if (sub_1ACC6F230((uint64_t)a1, "offsets", *a3, &v65))
    return;
  v4 = v65;
  if (sub_1ACC64070(a1, v65))
    return;
  v5 = *(_DWORD **)(v4 + 24);
  if (!v5)
  {
    if (a1)
    {
      v12 = &byte_1ACCBEAEE;
      v13 = (uint64_t)a1;
      v14 = 0;
      v15 = 0;
LABEL_33:
      sub_1ACBC69D0(v13, v12, v14, 1u, (uint64_t (*)(uint64_t))v15);
      return;
    }
LABEL_34:
    sub_1ACBBE20C(97480);
    return;
  }
  v6 = *(_QWORD *)v4;
  v7 = **(_QWORD **)(*(_QWORD *)v4 + 72);
  v69 = 0u;
  v70 = 0u;
  __src = (_QWORD *)v4;
  v72 = 0;
  LODWORD(v68) = 0;
  v8 = sub_1ACC6F4D4(v5, &v68, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6F4B4, (uint64_t)&__src);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    LODWORD(v11) = 0;
    goto LABEL_11;
  }
  v16 = SHIDWORD(v72);
  if (sqlite3_initialize() || (v25 = (void *)sub_1ACB5D828(24 * v16)) == 0)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    *((_QWORD *)&v70 + 1) = 0;
    v9 = 7;
    goto LABEL_11;
  }
  v26 = v25;
  bzero(v25, 24 * v16);
  *(_QWORD *)&v70 = *(_QWORD *)(v4 + 48);
  *((_QWORD *)&v70 + 1) = v26;
  *(_QWORD *)&v69 = v4;
  if (*(int *)(v6 + 48) < 1)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    v9 = 0;
    goto LABEL_11;
  }
  v27 = 0;
  v11 = 0;
  v10 = 0;
  v60 = v16;
  v61 = v6;
  v28 = v16;
  v29 = 0;
  v59 = v28;
  while (1)
  {
    v67 = 0;
    v68 = 0;
    v66 = 0;
    *((_QWORD *)&v69 + 1) = v29;
    v30 = *(_DWORD **)(v4 + 24);
    LODWORD(__src) = 0;
    v31 = sub_1ACC6F4D4(v30, &__src, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6FBEC, (uint64_t)&v69);
    if (v31)
    {
      v9 = v31;
      goto LABEL_11;
    }
    v63 = v29;
    v64 = (uint64_t)v10;
    v32 = sqlite3_column_text(*(sqlite3_stmt **)(v4 + 16), ++v29);
    v33 = sqlite3_column_bytes(*(sqlite3_stmt **)(v4 + 16), v29);
    if (v32)
      break;
    if (sqlite3_column_type(*(sqlite3_stmt **)(v4 + 16), v29) != 5)
    {
      v9 = 7;
      v10 = (char *)v64;
      goto LABEL_11;
    }
LABEL_40:
    v10 = (char *)v64;
    v9 = 0;
    if (v29 >= *(_DWORD *)(v6 + 48))
      goto LABEL_11;
  }
  v62 = v29;
  v34 = v27;
  v35 = v11;
  v36 = *(uint64_t **)(v6 + 72);
  v37 = *(unsigned int *)(v4 + 32);
  v38 = *v36;
  __src = 0;
  v39 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *, uint64_t, _QWORD **))(v38 + 24))(v36, v32, v33, &__src);
  if (v39)
  {
    v9 = v39;
    goto LABEL_108;
  }
  *__src = v36;
  v40 = __src;
  if (*(int *)v38 >= 1)
  {
    v41 = (*(uint64_t (**)(_QWORD *, uint64_t))(v38 + 48))(__src, v37);
    v40 = __src;
    v29 = v62;
    if (!v41)
    {
      v6 = v61;
      goto LABEL_48;
    }
    v9 = v41;
    (*(void (**)(_QWORD *))(v38 + 32))(__src);
LABEL_108:
    LODWORD(v11) = v35;
    v6 = v61;
    v10 = (char *)v64;
    goto LABEL_11;
  }
  v6 = v61;
  v29 = v62;
LABEL_48:
  v42 = (*(uint64_t (**)(_QWORD *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(v7 + 40))(v40, &v68, (char *)&v67 + 4, &v67, (char *)&v66 + 4, &v66);
  v11 = v35;
  if (v42)
  {
    v9 = v42;
    (*(void (**)(_QWORD *))(v7 + 32))(v40);
    if (v9 != 101)
      goto LABEL_111;
    v27 = v34;
    goto LABEL_40;
  }
  v27 = v34;
  if (v60 < 1)
  {
LABEL_87:
    (*(void (**)(_QWORD *))(v7 + 32))(v40);
    goto LABEL_40;
  }
  while (1)
  {
    v45 = 0;
    v46 = 0x7FFFFFFF;
    v47 = (unsigned __int8 **)*((_QWORD *)&v70 + 1);
    v48 = v59;
    do
    {
      if (*v47 && v47[1] - v47[2] < v46)
      {
        v46 = *((_DWORD *)v47 + 2) - *((_DWORD *)v47 + 4);
        v45 = v47;
      }
      v47 += 3;
      --v48;
    }
    while (v48);
    if (!v45)
    {
      v6 = v61;
      v29 = v62;
      goto LABEL_87;
    }
    v49 = *v45;
    v50 = **v45;
    if (v50 > 1)
    {
      if ((v50 & 0x80) != 0)
      {
        v50 = v50 & 0x7F | (v49[1] << 7);
        if ((char)v49[1] < 0)
        {
          v50 = v50 & 0x3FFF | (v49[2] << 14);
          if ((char)v49[2] < 0)
          {
            v50 = v50 & 0x1FFFFF | (v49[3] << 21);
            if ((char)v49[3] < 0)
            {
              v50 = v50 & 0xFFFFFFF | ((v49[4] & 7) << 28);
              v51 = 5;
            }
            else
            {
              v51 = 4;
            }
          }
          else
          {
            v51 = 3;
          }
        }
        else
        {
          v51 = 2;
        }
      }
      else
      {
        v51 = 1;
      }
      v52 = &v45[1][v50 - 2];
      *v45 = &v49[v51];
      v45[1] = v52;
    }
    else
    {
      *v45 = 0;
    }
    if ((int)v66 < v46)
    {
      do
      {
        v53 = (*(uint64_t (**)(_QWORD *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(v7 + 40))(v40, &v68, (char *)&v67 + 4, &v67, (char *)&v66 + 4, &v66);
        if (v53)
          v54 = 0;
        else
          v54 = (int)v66 < v46;
      }
      while (v54);
      v9 = v53;
      if (v53)
        break;
    }
    sqlite3_snprintf(64, (char *)&__src, "%d %d %d %d ", v63, -1431655765 * (((uint64_t)v45 - *((_QWORD *)&v70 + 1)) >> 3), v67, HIDWORD(v66) - v67);
    v55 = strlen((const char *)&__src);
    v56 = v55;
    if ((int)v11 + v55 + 1 < (int)v27)
    {
      v43 = v55;
      v44 = v64;
    }
    else
    {
      if (sqlite3_initialize()
        || (v43 = v56, v27 = v56 + (uint64_t)(int)v27 + 100, (v57 = sub_1ACB6BB48(v64, v27)) == 0))
      {
        v9 = 7;
        goto LABEL_104;
      }
      v44 = v57;
    }
    memcpy((void *)(v44 + (int)v11), &__src, v43);
    v64 = v44;
    *(_BYTE *)(v44 + (int)v11 + (uint64_t)v56) = 0;
    v11 = (int)v11 + (uint64_t)v56;
  }
  if (v53 != 101)
  {
LABEL_104:
    (*(void (**)(_QWORD *))(v7 + 32))(v40);
    v10 = (char *)v64;
    v6 = v61;
    goto LABEL_11;
  }
  v6 = v61;
  v29 = v62;
  if (*(_QWORD *)(v61 + 80))
    goto LABEL_87;
  (*(void (**)(_QWORD *))(v7 + 32))(v40);
  v9 = 267;
LABEL_111:
  v10 = (char *)v64;
LABEL_11:
  v17 = *((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v18 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_17;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v17);
    v17 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v18 = &xmmword_1ECD3B1D0;
LABEL_17:
      (*v18)(v17);
    }
  }
  v19 = *(_QWORD **)(v6 + 480);
  if (v19)
  {
    v20 = (sqlite3_stmt *)v19[3];
    v21 = (_QWORD *)v19[4];
    v22 = v21[3];
    if (v22)
      xmmword_1ECD3B1C0(v22);
    sub_1ACBE0F9C(v21, v19);
    v23 = v21[3];
    if (v23)
      xmmword_1ECD3B1D0(v23);
    sqlite3_finalize(v20);
  }
  *(_QWORD *)(v6 + 480) = 0;
  if (!v9)
  {
    if (a1)
    {
      v14 = v11 - 1;
      v15 = sqlite3_free;
      v13 = (uint64_t)a1;
      v12 = v10;
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if (a1)
  {
    a1[9] = v9;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
    {
      switch(v9)
      {
        case 516:
          v24 = "abort due to ROLLBACK";
          break;
        case 101:
          v24 = "no more rows available";
          break;
        case 100:
          v24 = "another row available";
          break;
        default:
          if (v9 > 0x1Cu || ((0x1410004uLL >> v9) & 1) != 0)
            v24 = "unknown error";
          else
            v24 = off_1E5C74AE8[v9];
          break;
      }
      sub_1ACBC69D0((uint64_t)a1, v24, -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97602);
  }
  if (v10)
  {
    v58 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_101;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v58 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_101:
      (*v58)(v10);
    }
  }
}

void sub_1ACC6E0C8(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  sqlite3_stmt *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v14;
  uint64_t *v15;

  v15 = 0;
  if (sub_1ACC6F230((uint64_t)a1, "optimize", *a3, &v15))
    return;
  v4 = *v15;
  v5 = sqlite3_exec(*(sqlite3 **)(*v15 + 24), "SAVEPOINT fts3", 0, 0, 0);
  if (v5)
  {
    v6 = *(_QWORD **)(v4 + 480);
    if (!v6)
      goto LABEL_10;
    goto LABEL_5;
  }
  v12 = sub_1ACC65F70(v4, 1);
  v5 = v12;
  if (v12 != 101 && v12 != 0)
  {
    sqlite3_exec(*(sqlite3 **)(v4 + 24), "ROLLBACK TO fts3", 0, 0, 0);
    sqlite3_exec(*(sqlite3 **)(v4 + 24), "RELEASE fts3", 0, 0, 0);
    v6 = *(_QWORD **)(v4 + 480);
    if (!v6)
      goto LABEL_10;
    goto LABEL_5;
  }
  v14 = sqlite3_exec(*(sqlite3 **)(v4 + 24), "RELEASE fts3", 0, 0, 0);
  if (v14)
    v5 = v14;
  v6 = *(_QWORD **)(v4 + 480);
  if (v6)
  {
LABEL_5:
    v7 = (sqlite3_stmt *)v6[3];
    v8 = (_QWORD *)v6[4];
    v9 = v8[3];
    if (v9)
      xmmword_1ECD3B1C0(v9);
    sub_1ACBE0F9C(v8, v6);
    v10 = v8[3];
    if (v10)
      xmmword_1ECD3B1D0(v10);
    sqlite3_finalize(v7);
  }
LABEL_10:
  *(_QWORD *)(v4 + 480) = 0;
  if (v5 == 101)
  {
    if (a1)
    {
      v11 = "Index already optimal";
      goto LABEL_25;
    }
LABEL_31:
    sub_1ACBBE20C(97480);
    return;
  }
  if (!v5)
  {
    if (a1)
    {
      v11 = "Index optimized";
LABEL_25:
      sub_1ACBC69D0((uint64_t)a1, v11, -1, 1u, 0);
      return;
    }
    goto LABEL_31;
  }
  if (!a1)
  {
    sub_1ACBBE20C(97602);
    return;
  }
  a1[9] = v5;
  if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
  {
    if (v5 == 516)
    {
      v11 = "abort due to ROLLBACK";
    }
    else if (v5 == 100)
    {
      v11 = "another row available";
    }
    else if (v5 > 0x1Cu || ((0x1410004uLL >> v5) & 1) != 0)
    {
      v11 = "unknown error";
    }
    else
    {
      v11 = off_1E5C74AE8[v5];
    }
    goto LABEL_25;
  }
}

void sub_1ACC6E320(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  _DWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t (**v13)(void *);
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  size_t v25;
  char *v26;
  uint64_t (*v27)(uint64_t);
  int v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  sqlite3_stmt *v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  sqlite3_stmt *v54;
  uint64_t v55;
  sqlite3_stmt *v56;
  int v57;
  _BYTE *v58;
  int v59;
  int v60;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  sqlite3_stmt *v66;
  int v67;
  _BYTE *v68;
  int v69;
  size_t v70;
  void *v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char *v84;
  int v85;
  int v86;
  BOOL v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  int v93;
  uint64_t v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t (**v100)(uint64_t);
  int *v101;
  char *v102;
  int v103;
  char *v104;
  char *v105;
  void (**v106)(char *);
  _QWORD *v107;
  sqlite3_stmt *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  char *v115;
  uint64_t *v116;
  char v117;
  uint64_t *v118;
  uint64_t *v119;
  __int128 v120;
  __int128 v121;
  sqlite3_stmt *pStmt;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;

  v118 = 0;
  if (sub_1ACC6F230(a1, "matchinfo", *a3, &v118))
    return;
  if (a2 < 2)
    goto LABEL_9;
  v6 = a3[1];
  if (!v6)
    goto LABEL_10;
  v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) == 0 && *(_BYTE *)(v6 + 22) == 1)
  {
    v6 = *(_QWORD *)(v6 + 8);
    goto LABEL_10;
  }
  if ((v7 & 1) != 0)
LABEL_9:
    v6 = 0;
  else
    v6 = sub_1ACBF2B64((int *)v6, 1);
LABEL_10:
  v8 = (uint64_t)v118;
  if (v6)
    v9 = (const char *)v6;
  else
    v9 = "pcx";
  v10 = (_DWORD *)v118[3];
  if (!v10)
  {
    if (a1)
      sub_1ACBC69D0(a1, &byte_1ACCBEAEE, 0, 0, 0);
    else
      sub_1ACBBE20C(97348);
    return;
  }
  v11 = *v118;
  v120 = 0u;
  v121 = 0u;
  v119 = v118;
  LODWORD(v120) = *(_DWORD *)(v11 + 48);
  v12 = (char *)v118[15];
  if (!v12)
  {
LABEL_25:
    LODWORD(pStmt) = 0;
    LODWORD(v124) = 0;
    sub_1ACC6F4D4(v10, &v124, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6FD9C, (uint64_t)&pStmt);
    v14 = (int)pStmt;
    *(_DWORD *)(v8 + 36) = (_DWORD)pStmt;
    DWORD1(v120) = v14;
    v15 = *v9;
    if (*v9)
    {
      v16 = 0;
      v17 = v120 + 31;
      if ((int)v120 < -31)
        v17 = v120 + 62;
      v18 = (v17 >> 5) * v14;
      v19 = v120 * v14;
      v20 = (int)v120 * v14;
      v21 = 3 * v19;
      v22 = (unsigned __int8 *)(v9 + 1);
      while (2)
      {
        v124 = 0;
        v23 = 1;
        switch(v15)
        {
          case 'a':
            v23 = (int)v120;
            if (!*(_BYTE *)(v11 + 460))
              goto LABEL_54;
            goto LABEL_30;
          case 'b':
            v23 = v18;
            goto LABEL_30;
          case 'c':
          case 'p':
            goto LABEL_30;
          case 'l':
            v23 = (int)v120;
            if (!*(_BYTE *)(v11 + 462))
              goto LABEL_54;
            goto LABEL_30;
          case 'n':
            if (!*(_BYTE *)(v11 + 460))
              goto LABEL_54;
            v23 = 1;
LABEL_30:
            v16 += v23;
            v24 = *v22++;
            v15 = v24;
            if (v24)
              continue;
            goto LABEL_44;
          case 's':
            v23 = (int)v120;
            goto LABEL_30;
          case 'x':
            v23 = v21;
            goto LABEL_30;
          case 'y':
            v23 = v20;
            goto LABEL_30;
          default:
LABEL_54:
            sub_1ACC51B88((char **)&v124, "unrecognized matchinfo request: %c", v15);
            v34 = (char *)v124;
            if (a1)
            {
              *(_DWORD *)(a1 + 36) = 1;
              sub_1ACB57870(*(_QWORD *)a1, v34, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            }
            else
            {
              sub_1ACBBE20C(97389);
            }
            if (!v34)
              goto LABEL_232;
            v106 = (void (**)(char *))&off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_227;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v34);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v34);
            v34 = (char *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v106 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_227:
              (*v106)(v34);
            }
            break;
        }
        goto LABEL_232;
      }
    }
    v16 = 0;
LABEL_44:
    v25 = strlen(v9);
    if (sqlite3_initialize() || (v30 = 8 * v16 + 36, v31 = v25 + 1, (v32 = (char *)sub_1ACB5D828(v31 + v30)) == 0))
    {
      v26 = 0;
      v27 = 0;
      *(_QWORD *)(v8 + 120) = 0;
      *(_DWORD *)(v8 + 112) = 1;
      v28 = 7;
      goto LABEL_199;
    }
    v12 = v32;
    bzero(v32, v31 + v30);
    *((_DWORD *)v12 + 6) = 28;
    *(_DWORD *)&v12[4 * v16 + 28] = ((unint64_t)((v16 << 32) + 0x100000000) >> 30) + 28;
    *((_DWORD *)v12 + 1) = v16;
    *((_QWORD *)v12 + 2) = &v12[v30];
    memcpy(&v12[v30], v9, v31);
    v117 = 0;
    *v12 = 1;
    *(_QWORD *)(v8 + 120) = v12;
    *(_DWORD *)(v8 + 112) = 1;
    if (!v12[1])
      goto LABEL_52;
    goto LABEL_47;
  }
  if (strcmp(*((const char **)v12 + 2), v9))
  {
    *v12 = 0;
    if (!v12[1] && !v12[2])
    {
      v13 = (uint64_t (**)(void *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v12);
        v12 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_24;
        v13 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      }
      (*v13)(v12);
    }
LABEL_24:
    *(_QWORD *)(v8 + 120) = 0;
    v10 = *(_DWORD **)(v8 + 24);
    goto LABEL_25;
  }
  v117 = 1;
  if (!v12[1])
  {
LABEL_52:
    v12[1] = 1;
    v33 = v12 + 28;
    goto LABEL_57;
  }
LABEL_47:
  if (v12[2])
  {
    v29 = *((int *)v12 + 1);
    if (sqlite3_initialize() || (v104 = (char *)sub_1ACB5D828(4 * v29)) == 0)
    {
      v26 = 0;
      v27 = 0;
      v28 = 7;
      goto LABEL_199;
    }
    v105 = v104;
    if (*((_DWORD *)v12 + 2))
      memcpy(v104, v12 + 28, 4 * *((int *)v12 + 1));
    v114 = (uint64_t (*)(uint64_t))sqlite3_free;
    v33 = v105;
    goto LABEL_58;
  }
  v12[2] = 1;
  v33 = &v12[4 * *((int *)v12 + 1) + 32];
LABEL_57:
  v114 = sub_1ACC6FDB4;
LABEL_58:
  v35 = 0;
  *((_QWORD *)&v121 + 1) = v33;
  DWORD1(v120) = *(_DWORD *)(v8 + 36);
  v123 = 0;
  v115 = v33;
  v116 = *(uint64_t **)v8;
  pStmt = 0;
  while (1)
  {
    v37 = v9[v35];
    if (!v9[v35])
      break;
    LOBYTE(v121) = v9[v35];
    switch(v37)
    {
      case 'a':
        if ((v117 & 1) != 0)
          goto LABEL_175;
        v38 = pStmt;
        if (!pStmt)
        {
          v45 = sub_1ACC61758(v116, &pStmt);
          if (v45)
            goto LABEL_105;
          v38 = pStmt;
        }
        v39 = sqlite3_column_bytes(v38, 0);
        v40 = sqlite3_column_blob(v38, 0);
        if (!v40)
          goto LABEL_116;
        v41 = v40;
        v124 = 0;
        v42 = (unint64_t)&v40[v39];
        v43 = sub_1ACC61838(v40, v42, &v124);
        v44 = v124;
        v45 = 267;
        if (v124 < 1 || v43 > v39)
          goto LABEL_105;
        v123 = 0;
        if ((int)v120 < 1)
          goto LABEL_175;
        v46 = 0;
        v47 = &v41[v43];
        while (1)
        {
          v124 = 0;
          v47 += (int)sub_1ACC53378(v47, (unint64_t *)&v124);
          if ((unint64_t)v47 > v42)
            break;
          *(_DWORD *)(*((_QWORD *)&v121 + 1) + 4 * v46++) = (uint64_t)(v124 + ((unint64_t)v44 >> 1))
                                                          / v44;
          if (v46 >= (int)v120)
            goto LABEL_175;
        }
        v123 = 267;
        goto LABEL_175;
      case 'b':
        v48 = DWORD1(v120);
        v49 = v120 + 62;
        if ((int)v120 >= -31)
          v49 = v120 + 31;
        v50 = v49 >> 5;
        goto LABEL_103;
      case 'c':
        if ((v117 & 1) == 0)
          *(_DWORD *)v33 = v120;
        goto LABEL_175;
      case 'l':
        v52 = *(_QWORD *)(v8 + 48);
        v124 = 0;
        v53 = sub_1ACC52F20(v116, 21, (sqlite3_stmt **)&v124, 0);
        v54 = (sqlite3_stmt *)v124;
        if (v53)
          goto LABEL_173;
        if (!sub_1ACBA0E50(v124, 0))
        {
          v55 = *((_QWORD *)v54 + 16);
          if ((*(_WORD *)(v55 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v55, v52);
          }
          else
          {
            *(_QWORD *)v55 = v52;
            *(_WORD *)(v55 + 20) = 4;
          }
          v94 = *(_QWORD *)(*(_QWORD *)v54 + 24);
          if (v94)
            xmmword_1ECD3B1D0(v94);
        }
        if (sqlite3_step(v54) == 100 && sqlite3_column_type(v54, 0) == 4)
        {
          v123 = 0;
          v95 = sqlite3_column_blob(v54, 0);
          v96 = sqlite3_column_bytes(v54, 0);
          if ((int)v120 < 1)
            goto LABEL_174;
          v97 = 0;
          v98 = (unint64_t)&v95[v96];
          while (1)
          {
            v124 = 0;
            v95 += (int)sub_1ACC61838(v95, v98, &v124);
            if ((unint64_t)v95 > v98)
              break;
            *(_DWORD *)(*((_QWORD *)&v121 + 1) + 4 * v97++) = v124;
            if (v97 >= (int)v120)
              goto LABEL_174;
          }
          v123 = 267;
        }
        else
        {
          v53 = sqlite3_reset(v54);
          v54 = 0;
          if (!v53)
            v53 = 267;
LABEL_173:
          v123 = v53;
        }
LABEL_174:
        sqlite3_reset(v54);
        goto LABEL_175;
      case 'n':
        if ((v117 & 1) != 0)
          goto LABEL_175;
        v56 = pStmt;
        if (pStmt)
          goto LABEL_87;
        v63 = sub_1ACC61758(v116, &pStmt);
        if (v63)
        {
          v60 = 0;
        }
        else
        {
          v56 = pStmt;
LABEL_87:
          v57 = sqlite3_column_bytes(v56, 0);
          v58 = sqlite3_column_blob(v56, 0);
          if (v58)
          {
            v124 = 0;
            v59 = sub_1ACC61838(v58, (unint64_t)&v58[v57], &v124);
            v60 = v124;
            if (v124 < 1 || v59 > v57)
            {
              v60 = 0;
              v63 = 267;
            }
            else
            {
              v63 = 0;
            }
          }
          else
          {
            v60 = 0;
            v63 = 267;
          }
        }
        v123 = v63;
        **((_DWORD **)&v121 + 1) = v60;
        goto LABEL_175;
      case 'p':
        if ((v117 & 1) == 0)
          *(_DWORD *)v33 = DWORD1(v120);
        goto LABEL_175;
      case 's':
        v124 = v8;
        v125 = 0;
        v64 = *(_DWORD **)(v8 + 24);
        v126 = 0;
        v123 = sub_1ACC6F4D4(v64, &v126, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6F4B4, (uint64_t)&v124);
        if (v123)
          goto LABEL_175;
        v65 = *(int *)(v8 + 36);
        if (sqlite3_initialize() || (v70 = 32 * v65, (v71 = (void *)sub_1ACB5D828(32 * v65)) == 0))
        {
          v123 = 7;
          goto LABEL_175;
        }
        v72 = (uint64_t)v71;
        bzero(v71, v70);
        v73 = *(_DWORD **)(v8 + 24);
        LODWORD(v124) = 0;
        sub_1ACC6F4D4(v73, &v124, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC703C8, v72);
        v74 = DWORD1(v120);
        v75 = v72;
        if (SDWORD1(v120) >= 1)
        {
          v76 = 0;
          v77 = (_DWORD *)(v72 + 8);
          do
          {
            v76 -= *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v77 - 1) + 32) + 80);
            *v77 = v76;
            v77 += 8;
            --v74;
          }
          while (v74);
        }
        if ((int)v120 < 1)
          goto LABEL_158;
        v78 = 0;
        v112 = v72 + 16;
        v113 = v72;
        break;
      case 'y':
        v48 = v120;
        v50 = DWORD1(v120);
LABEL_103:
        bzero(v33, 4 * v50 * v48);
        v123 = sub_1ACC6FEA0(*(_QWORD *)(v8 + 24), &v119);
        goto LABEL_175;
      default:
        v51 = *(_DWORD **)(v8 + 24);
        v124 = v8;
        v125 = 0;
        v126 = 0;
        v123 = sub_1ACC6F4D4(v51, &v126, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC6F4B4, (uint64_t)&v124);
        if (v123)
          goto LABEL_175;
        if ((v117 & 1) != 0)
          goto LABEL_80;
        if (!*(_QWORD *)(v8 + 40))
          goto LABEL_112;
        v66 = pStmt;
        if (pStmt)
          goto LABEL_108;
        v45 = sub_1ACC61758(v116, &pStmt);
        if (v45)
          goto LABEL_105;
        v66 = pStmt;
LABEL_108:
        v67 = sqlite3_column_bytes(v66, 0);
        v68 = sqlite3_column_blob(v66, 0);
        if (v68)
        {
          v124 = 0;
          v69 = sub_1ACC61838(v68, (unint64_t)&v68[v67], &v124);
          v45 = 267;
          if (v124 < 1 || v69 > v67)
          {
LABEL_105:
            v123 = v45;
          }
          else
          {
            *((_QWORD *)&v120 + 1) = v124;
LABEL_112:
            LODWORD(v124) = 0;
            v123 = sub_1ACC6F4D4(v51, &v124, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC7006C, (uint64_t)&v119);
            sub_1ACC63830(v8, &v123);
            if (!v123)
            {
LABEL_80:
              LODWORD(v124) = 0;
              sub_1ACC6F4D4(v51, &v124, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC702FC, (uint64_t)&v119);
            }
          }
        }
        else
        {
LABEL_116:
          v123 = 267;
        }
        goto LABEL_175;
    }
    while (SDWORD1(v120) < 1)
    {
      v86 = 0;
LABEL_157:
      *(_DWORD *)(*((_QWORD *)&v121 + 1) + 4 * v78++) = v86;
      if (v78 >= (int)v120)
      {
LABEL_158:
        v93 = 0;
        goto LABEL_188;
      }
    }
    v79 = 0;
    v80 = 0;
    v81 = v112;
    while (1)
    {
      v83 = sub_1ACC6F564(v8, *(_QWORD *)(v81 - 16), v78, (char **)v81);
      if (v83)
      {
        v93 = v83;
        goto LABEL_187;
      }
      v84 = *(char **)v81;
      if (!*(_QWORD *)v81)
        goto LABEL_127;
      *(_DWORD *)(v81 + 8) = *(_DWORD *)(v81 - 8);
      v124 = 0;
      v85 = sub_1ACC53378(v84, (unint64_t *)&v124);
      if ((unint64_t)v124 <= 1)
        break;
      *(_DWORD *)(v81 + 8) = v124 + *(_DWORD *)(v81 + 8) - 2;
      *(_QWORD *)v81 = &v84[v85];
      ++v80;
LABEL_127:
      ++v79;
      LODWORD(v82) = DWORD1(v120);
      v81 += 32;
      if (v79 >= SDWORD1(v120))
      {
        if (v80 >= 1)
        {
          v86 = 0;
          v75 = v113;
          if ((int)v82 <= 0)
            goto LABEL_135;
          while (2)
          {
            v88 = 0;
            v89 = 0;
            v90 = v75;
            v82 = v82;
            do
            {
              if (*(_QWORD *)(v90 + 16))
              {
                if (!v89 || *(_DWORD *)(v90 + 24) < *(_DWORD *)(v89 + 24))
                  v89 = v90;
                if (v88 && *(_DWORD *)(v90 + 24) != *(_DWORD *)(v90 - 8))
                  v88 = 1;
                else
                  ++v88;
                if (v88 > v86)
                  v86 = v88;
              }
              else
              {
                v88 = 0;
              }
              v90 += 32;
              --v82;
            }
            while (v82);
            if (v89)
            {
              v124 = 0;
              v91 = *(char **)(v89 + 16);
              v92 = sub_1ACC53378(v91, (unint64_t *)&v124);
              if ((unint64_t)v124 <= 1)
              {
                *(_QWORD *)(v89 + 16) = 0;
                v75 = v113;
                goto LABEL_135;
              }
              *(_DWORD *)(v89 + 24) = v124 + *(_DWORD *)(v89 + 24) - 2;
              *(_QWORD *)(v89 + 16) = &v91[v92];
              v75 = v113;
            }
            else
            {
LABEL_135:
              v87 = __OFSUB__(v80--, 1);
              if ((v80 < 0) ^ v87 | (v80 == 0))
                goto LABEL_157;
            }
            LODWORD(v82) = DWORD1(v120);
            continue;
          }
        }
        v86 = 0;
        v75 = v113;
        goto LABEL_157;
      }
    }
    *(_QWORD *)v81 = 0;
    v93 = 267;
LABEL_187:
    v75 = v113;
LABEL_188:
    v100 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v75);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v75);
      v75 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v100 = &xmmword_1ECD3B1D0;
        goto LABEL_193;
      }
    }
    else
    {
LABEL_193:
      (*v100)(v75);
    }
    v123 = v93;
LABEL_175:
    v36 = 1;
    switch(v9[v35])
    {
      case 'a':
      case 'l':
      case 's':
        v36 = (int)v120;
        break;
      case 'b':
        v99 = v120 + 62;
        if ((int)v120 >= -31)
          v99 = v120 + 31;
        v36 = SDWORD1(v120) * (uint64_t)(v99 >> 5);
        break;
      case 'c':
      case 'n':
      case 'p':
        break;
      case 'y':
        v36 = SDWORD1(v120) * (uint64_t)(int)v120;
        break;
      default:
        v36 = 3 * (int)v120 * DWORD1(v120);
        break;
    }
    v33 = (char *)(*((_QWORD *)&v121 + 1) + 4 * v36);
    *((_QWORD *)&v121 + 1) = v33;
    ++v35;
    v28 = v123;
    if (v123)
      goto LABEL_196;
  }
  v28 = 0;
LABEL_196:
  sqlite3_reset(pStmt);
  v27 = v114;
  v26 = v115;
  if ((v117 & 1) == 0)
  {
    v101 = *(int **)(v8 + 120);
    v101[2] = 1;
    memcpy(&v101[v101[1] + 8], v101 + 7, 4 * v101[1]);
  }
  if (!v28)
  {
    if (!a1 || (v103 = 4 * *(_DWORD *)(*(_QWORD *)(v8 + 120) + 4), v103 < 0))
      sub_1ACBBE20C(97348);
    else
      sub_1ACBC69D0(a1, v115, v103, 0, v114);
    goto LABEL_232;
  }
LABEL_199:
  if (!a1)
  {
    sub_1ACBBE20C(97602);
LABEL_206:
    if (v27)
      goto LABEL_231;
    goto LABEL_232;
  }
  *(_DWORD *)(a1 + 36) = v28;
  if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) == 0)
    goto LABEL_206;
  switch(v28)
  {
    case 516:
      v102 = "abort due to ROLLBACK";
      break;
    case 101:
      v102 = "no more rows available";
      break;
    case 100:
      v102 = "another row available";
      break;
    default:
      if (v28 > 0x1Cu || ((0x1410004uLL >> v28) & 1) != 0)
        v102 = "unknown error";
      else
        v102 = off_1E5C74AE8[v28];
      break;
  }
  sub_1ACBC69D0(a1, v102, -1, 1u, 0);
  if (v27)
LABEL_231:
    v27((uint64_t)v26);
LABEL_232:
  v107 = *(_QWORD **)(v11 + 480);
  if (v107)
  {
    v108 = (sqlite3_stmt *)v107[3];
    v109 = (_QWORD *)v107[4];
    v110 = v109[3];
    if (v110)
      xmmword_1ECD3B1C0(v110);
    sub_1ACBE0F9C(v109, v107);
    v111 = v109[3];
    if (v111)
      xmmword_1ECD3B1D0(v111);
    sqlite3_finalize(v108);
  }
  *(_QWORD *)(v11 + 480) = 0;
}

uint64_t sub_1ACC6F230(uint64_t a1, const char *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  char *v10;
  void (**v11)(char *);

  if (!a3)
  {
    sub_1ACBBE20C(97100);
LABEL_8:
    *a4 = 0;
    goto LABEL_9;
  }
  if ((*(_WORD *)(a3 + 20) & 0xFBF) != 0xA01 || *(_BYTE *)(a3 + 23) != 112 || strcmp(*(const char **)a3, "fts3cursor"))
    goto LABEL_8;
  v8 = *(_QWORD *)(a3 + 8);
  *a4 = v8;
  if (v8)
    return 0;
LABEL_9:
  v10 = sqlite3_mprintf("illegal first argument to %s", a2);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    sub_1ACB57870(*(_QWORD *)a1, v10, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v10)
      return 1;
  }
  else
  {
    sub_1ACBBE20C(97389);
    if (!v10)
      return 1;
  }
  v11 = (void (**)(char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = (char *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      return 1;
    v11 = (void (**)(char *))&xmmword_1ECD3B1D0;
  }
  (*v11)(v10);
  return 1;
}

uint64_t sub_1ACC6F39C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  char *v17;

  v4 = *(_QWORD *)(a3 + 24);
  v17 = 0;
  *(_DWORD *)(v4 + 48 * a2) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80);
  result = sub_1ACC6F564(*(_QWORD *)a3, a1, *(_DWORD *)(a3 + 8), &v17);
  v6 = (unsigned __int8 *)v17;
  if (v17)
  {
    *(_QWORD *)(v4 + 48 * a2 + 8) = v17;
    v7 = *v6;
    if ((char)*v6 < 0)
    {
      v11 = v7 & 0x7F | (v6[1] << 7);
      if ((char)v6[1] < 0)
      {
        v12 = v11 & 0x3FFF | (v6[2] << 14);
        if ((char)v6[2] < 0)
        {
          v13 = v12 & 0x1FFFFF | (v6[3] << 21);
          if ((char)v6[3] < 0)
          {
            v14 = v13 & 0xFFFFFFF | ((v6[4] & 7) << 28);
            v8 = 5;
            v9 = v14 >= 2;
            v10 = v14 - 2;
            if (!v9)
              return 267;
          }
          else
          {
            v8 = 4;
            v9 = v13 >= 2;
            v10 = v13 - 2;
            if (!v9)
              return 267;
          }
        }
        else
        {
          v8 = 3;
          v9 = v12 >= 2;
          v10 = v12 - 2;
          if (!v9)
            return 267;
        }
      }
      else
      {
        v8 = 2;
        v9 = v11 >= 2;
        v10 = v11 - 2;
        if (!v9)
          return 267;
      }
    }
    else
    {
      v8 = 1;
      v9 = v7 >= 2;
      v10 = v7 - 2;
      if (!v9)
        return 267;
    }
    v15 = &v6[v8];
    v16 = (_QWORD *)(v4 + 48 * a2);
    v16[2] = v10;
    v16[3] = v15;
    v16[4] = v10;
    v16[5] = v15;
  }
  return result;
}

uint64_t sub_1ACC6F4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80);
  ++*(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 12) = v3;
  return 0;
}

uint64_t sub_1ACC6F4D4(_DWORD *a1, _DWORD *a2, uint64_t (*a3)(_DWORD *, _QWORD, uint64_t), uint64_t a4)
{
  _DWORD *v7;
  int v8;
  uint64_t result;

  v7 = a1;
  v8 = *a1;
  if (*a1 == 5)
  {
LABEL_5:
    result = a3(v7, *a2, a4);
    ++*a2;
  }
  else
  {
    while (1)
    {
      result = sub_1ACC6F4D4(*((_QWORD *)v7 + 2), a2, a3, a4);
      if (v8 == 2 || (_DWORD)result)
        break;
      v7 = (_DWORD *)*((_QWORD *)v7 + 3);
      v8 = *v7;
      if (*v7 == 5)
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1ACC6F564(uint64_t a1, uint64_t a2, int a3, char **a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  char *v38;
  _BOOL4 v39;
  BOOL v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned __int8 v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  *a4 = 0;
  v6 = *(_DWORD *)(v4 + 84);
  if (v6 != a3 && v6 < *(_DWORD *)(v5 + 48))
    return 0;
  v10 = a2;
  v12 = *(char **)(v4 + 40);
  v51 = *(_QWORD *)(a2 + 40);
  v52 = v12;
  if (v51 == *(_QWORD *)(a1 + 48) && !*(_BYTE *)(a2 + 48))
  {
LABEL_91:
    if (v12)
    {
      if (*v12 == 1)
        goto LABEL_95;
      v42 = 0;
      while (v42 < a3)
      {
        v45 = *v12;
        if (v45 >= 2)
        {
          do
          {
            v47 = *++v12;
            v46 = v47;
            v48 = v45 & 0x80;
            LOBYTE(v45) = v47;
          }
          while (v47 & 0xFE | v48);
          v45 = v46;
        }
        if (!v45)
          return 0;
LABEL_95:
        v43 = (unsigned __int8 *)(v12 + 1);
        v52 = v12 + 1;
        v42 = v12[1];
        if (v12[1] < 0)
        {
          v42 = v42 & 0x7F | (v12[2] << 7);
          if (v12[2] < 0)
          {
            v42 = v42 & 0x3FFF | (v12[3] << 14);
            if (v12[3] < 0)
            {
              v42 = v42 & 0x1FFFFF | (v12[4] << 21);
              if (v12[4] < 0)
              {
                v42 = v42 & 0xFFFFFFF | ((v12[5] & 7) << 28);
                v44 = 5;
              }
              else
              {
                v44 = 4;
              }
            }
            else
            {
              v44 = 3;
            }
          }
          else
          {
            v44 = 2;
          }
        }
        else
        {
          v44 = 1;
        }
        v12 = (char *)&v43[v44];
        v52 = v12;
      }
      result = 0;
      if (!*v12)
        v12 = 0;
      if (v42 != a3)
        v12 = 0;
      *a4 = v12;
      return result;
    }
    return 0;
  }
  v50 = 0;
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
    return 0;
  v14 = 0;
  v15 = 0;
  v16 = *(unsigned __int8 *)(v5 + 463);
  do
  {
    if (*(_DWORD *)v13 == 4)
      v15 = 1;
    if (*(_DWORD *)v13 == 1)
      v10 = v13;
    if (*(_BYTE *)(v13 + 48))
      v14 = 1;
    v13 = *(_QWORD *)(v13 + 8);
  }
  while (v13);
  if (!v15)
    return 0;
  v17 = v10;
  if (*(_BYTE *)(v10 + 50))
  {
    v17 = v10;
    do
      v17 = *(_QWORD *)(v17 + 8);
    while (*(_BYTE *)(v17 + 50));
  }
  if (!*(_DWORD *)(v4 + 56))
  {
LABEL_29:
    if (v14)
    {
      while (!*(_BYTE *)(v17 + 48))
      {
        sub_1ACC62D9C(a1, v17, (int *)&v50);
        result = v50;
        if (v50)
          return result;
      }
    }
    if (!v10)
      goto LABEL_88;
    v21 = 1;
    do
    {
      v23 = v10;
      if (*(_DWORD *)v10 == 1)
        v23 = *(_QWORD *)(v10 + 24);
      v24 = *(_QWORD *)(v23 + 32);
      v25 = *(char **)(v24 + 64);
      v51 = *(_QWORD *)(v24 + 72);
      v52 = v25;
      v26 = *(int *)(v24 + 8);
      if (*(unsigned __int8 *)(a1 + 76) != (_DWORD)v16)
      {
        if ((_DWORD)v26)
        {
          if (v25)
            v28 = (unint64_t)v25 <= *(_QWORD *)v24;
          else
            v28 = 0;
        }
        else
        {
          v28 = 1;
        }
        v49 = v28;
        while (1)
        {
          if (v25)
          {
            v29 = v51;
            v30 = *(_QWORD *)(a1 + 48);
            v39 = v51 < v30;
            if (!(_DWORD)v16)
              v39 = v51 > v30;
            v33 = v49;
            if (!v39 || v49 != 0)
              goto LABEL_81;
          }
          else if (v49)
          {
LABEL_35:
            v22 = v51;
            *(_QWORD *)(v24 + 64) = 0;
            *(_QWORD *)(v24 + 72) = v22;
            goto LABEL_36;
          }
          sub_1ACC54A40(v16, *(char **)v24, *(_DWORD *)(v24 + 8), &v52, &v51, (int *)&v53, &v49);
          v25 = v52;
        }
      }
      if ((_DWORD)v26)
        v27 = (unint64_t)v25 >= *(_QWORD *)v24 + v26;
      else
        v27 = 1;
      v49 = v27;
      while (1)
      {
LABEL_49:
        while (!v25)
        {
          if (v49)
            goto LABEL_35;
          v38 = *(char **)v24;
          v25 = &v38[(int)sub_1ACC53378(*(char **)v24, (unint64_t *)&v51)];
          v52 = v25;
        }
        v29 = v51;
        v30 = *(_QWORD *)(a1 + 48);
        if (v51 == v30)
          v31 = 0;
        else
          v31 = -1;
        if (v51 > v30)
          v31 = 1;
        v32 = (_DWORD)v16 ? -v31 : v31;
        v33 = v49;
        if ((v32 & 0x80000000) == 0 || v49)
          break;
        v34 = *v25;
        if (*v25)
        {
          do
          {
            v35 = v34 & 0xFFFFFF80;
            v36 = *++v25;
            v34 = v36;
          }
          while (v35 | v36);
        }
        do
        {
          if ((unint64_t)++v25 >= *(_QWORD *)v24 + *(int *)(v24 + 8))
          {
            v49 = 1;
            v52 = v25;
            goto LABEL_49;
          }
        }
        while (!*v25);
        v53 = 0;
        v25 += (int)sub_1ACC53378(v25, (unint64_t *)&v53);
        v37 = v53;
        if ((_DWORD)v16)
          v37 = -v53;
        v51 += v37;
        v52 = v25;
      }
LABEL_81:
      *(_QWORD *)(v24 + 64) = v25;
      *(_QWORD *)(v24 + 72) = v29;
      if (v33)
        v41 = 0;
      else
        v41 = v29 == v30;
      if (!v41)
LABEL_36:
        v21 = 0;
      v10 = *(_QWORD *)(v10 + 16);
    }
    while (v10);
    if (!v21)
      v12 = 0;
    else
LABEL_88:
      v12 = *(char **)(v4 + 64);
    v52 = v12;
    goto LABEL_91;
  }
  v18 = *(unsigned __int8 *)(v17 + 48);
  sub_1ACC6F9C4(a1, v17, &v50);
  while (1)
  {
    result = v50;
    if (v50)
      return result;
    v20 = *(unsigned __int8 *)(v17 + 48);
    if (*(_BYTE *)(v17 + 48))
      goto LABEL_28;
    sub_1ACC62D9C(a1, v17, (int *)&v50);
    if (!v18 && *(_QWORD *)(v17 + 40) == v51)
    {
      result = v50;
      if (v50)
        return result;
      v20 = *(unsigned __int8 *)(v17 + 48);
LABEL_28:
      if (v20 == v18)
        goto LABEL_29;
      return 267;
    }
  }
}

uint64_t sub_1ACC6F9C4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t i;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;

  if (a2)
  {
    v4 = a2;
    v5 = (uint64_t *)result;
    while (1)
    {
      if (*a3)
        return result;
      v7 = *(_QWORD *)(v4 + 32);
      if (v7)
        break;
LABEL_6:
      *(_QWORD *)(v4 + 40) = 0;
      *(_WORD *)(v4 + 48) = 0;
      result = sub_1ACC6F9C4(v5, *(_QWORD *)(v4 + 16), a3);
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return result;
    }
    if (*(_DWORD *)(v7 + 32))
    {
      v8 = *(_QWORD *)(v7 + 40);
      if (v8)
      {
        v9 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v8);
          v8 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_17;
          v9 = &xmmword_1ECD3B1D0;
        }
        (*v9)(v8);
      }
    }
LABEL_17:
    *(_QWORD *)(v7 + 40) = 0;
    *(_DWORD *)(v7 + 48) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    if (*(_DWORD *)(v7 + 56))
    {
      v10 = *(unsigned int *)(v7 + 80);
      if ((int)v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          v12 = *(uint64_t ***)(v7 + 40 * i + 120);
          if (v12)
          {
            *((_DWORD *)v12 + 3) = 0;
            *((_DWORD *)v12 + 11) = 1;
            v13 = *((unsigned int *)v12 + 2);
            if ((int)v13 >= 1)
            {
              v14 = *v12;
              do
              {
                *(_QWORD *)(*v14 + 112) = 0;
                v15 = *v14++;
                *(_DWORD *)(v15 + 120) = 0;
                *(_QWORD *)(v15 + 128) = 0;
                --v13;
              }
              while (v13);
            }
          }
        }
      }
      v16 = 0;
      v17 = *v5;
      v18 = v7 + 88;
      while (v16 < *(int *)(v7 + 80))
      {
        if (*(_QWORD *)(v18 + 32))
        {
          v20 = 0;
          v19 = 0;
          v6 = sub_1ACC60B4C(v17, v18, *(_DWORD *)(v7 + 84), &v20, &v19);
          if (!v6)
            v6 = sub_1ACC611A0(v17, v7, v16, v19, v20);
        }
        else
        {
          v6 = 0;
        }
        ++v16;
        v18 += 40;
        if (v6)
          goto LABEL_4;
      }
      v6 = 0;
LABEL_4:
      *(_DWORD *)(v7 + 56) = 0;
      *a3 = v6;
    }
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1ACC6FBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  double *v18;
  int32x2_t v19;
  uint64_t v20;
  int32x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double *v24;
  double *v25;
  int32x2_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  float64x2x3_t v31;

  v30 = 0;
  result = sub_1ACC6F564(*(_QWORD *)a3, a1, *(_DWORD *)(a3 + 8), &v30);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80);
  v7 = v30;
  if (v30)
  {
    v8 = *v30;
    if (*v30 < 0)
    {
      v8 = v8 & 0x7F | (v30[1] << 7);
      if (v30[1] < 0)
      {
        v8 = v8 & 0x3FFF | (v30[2] << 14);
        if (v30[2] < 0)
        {
          v8 = v8 & 0x1FFFFF | (v30[3] << 21);
          if (v30[3] < 0)
          {
            v8 = v8 & 0xFFFFFFF | ((v30[4] & 7) << 28);
            v9 = 5;
          }
          else
          {
            v9 = 4;
          }
        }
        else
        {
          v9 = 3;
        }
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
    v7 = &v30[v9];
    v10 = v8 - 2;
    if ((int)v6 >= 1)
    {
LABEL_14:
      v11 = *(_QWORD *)(a3 + 24);
      v12 = *(int *)(a3 + 12);
      if (v6 >= 4)
      {
        v13 = v6 & 0x7FFFFFFC;
        v15 = vdup_n_s32(v6);
        v14 = (v6 & 0xFFFFFFFC) + v12;
        v16 = vdupq_n_s64((unint64_t)v7);
        v17 = vdupq_n_s64(v10);
        v18 = (double *)(v11 + 24 * (int)v12);
        v19 = (int32x2_t)0x100000000;
        v20 = v6 & 0xFFFFFFFC;
        do
        {
          v21 = vadd_s32(v15, (int32x2_t)vmvn_s8((int8x8_t)v19));
          *(_QWORD *)&v22.f64[0] = v21.i32[0];
          *(_QWORD *)&v22.f64[1] = v21.i32[1];
          v23 = v22;
          v24 = v18 + 12;
          vst3q_f64(v18, *(float64x2x3_t *)v16.i8);
          v25 = v18 + 6;
          v26 = vadd_s32(vsub_s32(v15, v19), (int32x2_t)0x200000002);
          *(_QWORD *)&v22.f64[0] = v26.i32[0];
          *(_QWORD *)&v22.f64[1] = v26.i32[1];
          v31.val[2] = v22;
          v31.val[0] = (float64x2_t)v16;
          v31.val[1] = (float64x2_t)v17;
          vst3q_f64(v25, v31);
          v19 = vadd_s32(v19, (int32x2_t)0x400000004);
          v18 = v24;
          v20 -= 4;
        }
        while (v20);
        if (v13 == v6)
          goto LABEL_21;
      }
      else
      {
        v13 = 0;
        v14 = *(int *)(a3 + 12);
      }
      v27 = ~(_DWORD)v13 + v6;
      v28 = v6 - v13;
      v29 = (_QWORD *)(v11 + 24 * v14 + 16);
      LODWORD(v14) = v14 + v6 - v13;
      do
      {
        *(v29 - 1) = v10;
        *v29 = v27;
        *(v29 - 2) = v7;
        --v27;
        v29 += 3;
        --v28;
      }
      while (v28);
LABEL_21:
      *(_DWORD *)(a3 + 12) = v14;
    }
  }
  else
  {
    v10 = 0;
    if ((int)v6 >= 1)
      goto LABEL_14;
  }
  return result;
}

uint64_t sub_1ACC6FD9C(uint64_t a1, int a2, _DWORD *a3)
{
  ++*a3;
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t sub_1ACC6FDB4(uint64_t result)
{
  _BYTE *v1;
  uint64_t (**v2)(_QWORD);

  v1 = (_BYTE *)(result - *(unsigned int *)(result - 4));
  if (v1 + 28 == (_BYTE *)result)
  {
    v1[1] = 0;
    if (*v1)
      return result;
  }
  else
  {
    v1[2] = 0;
    if (*v1)
      return result;
  }
  if (!v1[1] && !v1[2])
  {
    v2 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v1);
      v1 = (_BYTE *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return result;
      v2 = &xmmword_1ECD3B1D0;
    }
    return (*v2)(v1);
  }
  return result;
}

uint64_t sub_1ACC6FEA0(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v22;
  int v23;
  unsigned __int8 *v24;

  if (!*(_BYTE *)(a1 + 48))
  {
    v4 = a1;
    while (*(_QWORD *)(v4 + 40) == (*a2)[6])
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (!v5)
      {
        v6 = *(_QWORD *)(v4 + 32);
        v7 = *(unsigned __int8 **)(v6 + 40);
        v8 = *((unsigned __int8 *)a2 + 24);
        v9 = *((_DWORD *)a2 + 2);
        v10 = v9 + 31;
        if (v9 < -31)
          v10 = v9 + 62;
        v11 = v10 >> 5;
        if (v8 != 121)
          v9 = v11;
        if (v7)
        {
          v12 = 0;
          v13 = **a2;
          v14 = v9 * *(_DWORD *)(v4 + 52);
          while (1)
          {
            v16 = *v7;
            if (v16 >= 2)
            {
              v17 = 0;
              do
              {
                v18 = v16 & 0x80;
                v19 = *++v7;
                v17 += v18 == 0;
                LOBYTE(v16) = v19;
              }
              while (v19 & 0xFE | v18);
            }
            else
            {
              v17 = 0;
            }
            v20 = *(_DWORD *)(v6 + 84);
            if (v20 == v12 || v20 >= *(_DWORD *)(v13 + 48))
            {
              if (v8 == 121)
              {
                *((_DWORD *)a2[4] + v12 + v14) = v17;
              }
              else if (v17)
              {
                v22 = 1 << v12;
                if (v12 >= -1)
                  v23 = v12 + 1;
                else
                  v23 = v12 + 32;
                *((_DWORD *)a2[4] + v14 + (v23 >> 5)) |= v22;
              }
            }
            if (*v7 != 1)
              break;
            v24 = v7 + 1;
            v12 = v7[1];
            if ((char)v7[1] < 0)
            {
              v12 = v12 & 0x7F | (v7[2] << 7);
              if ((char)v7[2] < 0)
              {
                v12 = v12 & 0x3FFF | (v7[3] << 14);
                if ((char)v7[3] < 0)
                {
                  v12 = v12 & 0x1FFFFF | (v7[4] << 21);
                  if ((char)v7[4] < 0)
                  {
                    v12 = v12 & 0xFFFFFFF | ((v7[5] & 7) << 28);
                    v15 = 5;
                  }
                  else
                  {
                    v15 = 4;
                  }
                }
                else
                {
                  v15 = 3;
                }
              }
              else
              {
                v15 = 2;
              }
            }
            else
            {
              v15 = 1;
            }
            v7 = &v24[v15];
            result = 267;
            if (v12 >= *((_DWORD *)a2 + 2))
              return result;
          }
        }
        return 0;
      }
      result = sub_1ACC6FEA0(v5, a2);
      if ((_DWORD)result)
        return result;
      v4 = *(_QWORD *)(v4 + 24);
      if (*(_BYTE *)(v4 + 48))
        return 0;
    }
  }
  return 0;
}

uint64_t sub_1ACC7006C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v24;
  int v25;

  v4 = *(uint64_t **)a3;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = 3 * a2 * *(_DWORD *)(a3 + 8);
  v7 = **(_QWORD **)a3;
  if (*(_BYTE *)(a1 + 50) && **(_DWORD **)(a1 + 8) != 1)
  {
    if (*(int *)(v7 + 48) >= 1)
    {
      v12 = 0;
      v13 = *((_DWORD *)v4 + 22);
      v14 = (_DWORD *)(v5 + 4 * v6 + 8);
      do
      {
        *(v14 - 1) = v13;
        *v14 = v13;
        ++v12;
        v14 += 3;
      }
      while (v12 < *(int *)(v7 + 48));
    }
    return 0;
  }
  v24 = 0;
  if (*(_QWORD *)(a1 + 56))
  {
LABEL_4:
    if (*(int *)(v7 + 48) >= 1)
    {
      v8 = 0;
      v9 = (_DWORD *)(v5 + 4 * v6 + 8);
      v10 = (int *)(*(_QWORD *)(a1 + 56) + 8);
      do
      {
        *(v9 - 1) = *(v10 - 1);
        v11 = *v10;
        v10 += 3;
        *v9 = v11;
        v9 += 3;
        ++v8;
      }
      while (v8 < *(int *)(v7 + 48));
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 8);
  v17 = a1;
  if (v16)
  {
    v17 = a1;
    do
    {
      v18 = v16;
      if (*(_DWORD *)v16 != 1 && !*(_BYTE *)(v17 + 50))
        break;
      v16 = *(_QWORD *)(v16 + 8);
      v17 = v18;
    }
    while (v16);
  }
  v19 = v4[6];
  v20 = *(_QWORD *)(v17 + 40);
  v21 = *(unsigned __int8 *)(v17 + 48);
  v25 = 0;
  result = sub_1ACC6F4D4((_DWORD *)v17, &v25, (uint64_t (*)(_DWORD *, _QWORD, uint64_t))sub_1ACC703D8, v7);
  v24 = result;
  if (!(_DWORD)result)
  {
    sub_1ACC6F9C4((uint64_t)v4, v17, &v24);
    result = v24;
    if (!*((_BYTE *)v4 + 10) && !v24)
    {
      while (1)
      {
        if (!*((_BYTE *)v4 + 11))
          sqlite3_reset((sqlite3_stmt *)v4[2]);
        sub_1ACC62D9C((uint64_t)v4, v17, (int *)&v24);
        v22 = *(unsigned __int8 *)(v17 + 48);
        *((_BYTE *)v4 + 10) = v22;
        *((_BYTE *)v4 + 11) = 1;
        *((_DWORD *)v4 + 28) = 1;
        v4[6] = *(_QWORD *)(v17 + 40);
        if (v22)
        {
          result = v24;
          goto LABEL_35;
        }
        if (*(_DWORD *)v17 != 1)
          break;
        if (!sub_1ACC63830((uint64_t)v4, (int *)&v24))
        {
          result = v24;
          if (v24)
            goto LABEL_35;
          if (*((_BYTE *)v4 + 10))
          {
            result = 0;
            goto LABEL_35;
          }
LABEL_31:
          sub_1ACC7044C(v17, *(unsigned int *)(v7 + 48));
          result = v24;
          if (*((_BYTE *)v4 + 10) || v24)
            goto LABEL_35;
        }
      }
      result = v24;
      if (v24)
        goto LABEL_35;
      goto LABEL_31;
    }
LABEL_35:
    *((_BYTE *)v4 + 10) = 0;
    v4[6] = v19;
    if (v21)
    {
      *(_BYTE *)(v17 + 48) = v21;
LABEL_43:
      if (!(_DWORD)result)
        goto LABEL_4;
    }
    else
    {
      sub_1ACC6F9C4((uint64_t)v4, v17, &v24);
      while (1)
      {
        sub_1ACC62D9C((uint64_t)v4, v17, (int *)&v24);
        if (*(_BYTE *)(v17 + 48))
          return 267;
        result = v24;
        if (*(_QWORD *)(v17 + 40) == v20 || v24 != 0)
          goto LABEL_43;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC702FC(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unsigned int v11;
  char *v12;
  int v13;
  char v14;
  char *v15;

  v3 = *(_DWORD *)(a3 + 8);
  if (v3 < 1)
    return 0;
  v6 = 0;
  v7 = v3 * a2;
  do
  {
    v15 = 0;
    result = sub_1ACC6F564(*(_QWORD *)a3, a1, v6, &v15);
    if (v15 && (v11 = *v15, v11 >= 2))
    {
      v8 = 0;
      v12 = v15 + 1;
      do
      {
        v13 = v11 & 0x80;
        v8 += v13 == 0;
        v14 = *v12++;
        LOBYTE(v11) = v14;
      }
      while (v14 & 0xFE | v13);
    }
    else
    {
      v8 = 0;
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 32) + 12 * (v7 + (int)v6++)) = v8;
  }
  while (v6 < *(int *)(a3 + 8) && (_DWORD)result == 0);
  return result;
}

uint64_t sub_1ACC703C8(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32 * a2) = a1;
  return 0;
}

uint64_t sub_1ACC703D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v7;

  v5 = *(void **)(a1 + 56);
  if (v5)
    goto LABEL_2;
  v7 = *(int *)(a3 + 48);
  if (sqlite3_initialize())
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v5 = (void *)sub_1ACB5D828(12 * v7);
    *(_QWORD *)(a1 + 56) = v5;
    if (v5)
    {
LABEL_2:
      bzero(v5, 12 * *(int *)(a3 + 48));
      return 0;
    }
  }
  return 7;
}

uint64_t sub_1ACC7044C(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;

  if (result)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v3[4];
      if (v4)
      {
        v5 = *(unsigned __int8 **)(v4 + 40);
        if (v5)
        {
          v6 = 0;
          v7 = v3[7];
          do
          {
            v9 = *v5;
            if (v9 >= 2)
            {
              v10 = 0;
              v11 = 0;
              do
              {
                if (!v11)
                  ++v10;
                v11 = v9 & 0x80;
                v12 = *++v5;
                LOBYTE(v9) = v12;
              }
              while (v12 & 0xFE | v11);
            }
            else
            {
              v10 = 0;
            }
            v13 = 3 * v6;
            *(_DWORD *)(v7 + 4 * (int)v13 + 4) += v10;
            v14 = v10 == 0;
            v15 = v7 + 4 * v13;
            v16 = *(_DWORD *)(v15 + 8);
            if (!v14)
              ++v16;
            *(_DWORD *)(v15 + 8) = v16;
            if (!*v5)
              break;
            v17 = v5 + 1;
            v6 = v5[1];
            if ((char)v5[1] < 0)
            {
              v6 = v6 & 0x7F | (v5[2] << 7);
              if ((char)v5[2] < 0)
              {
                v6 = v6 & 0x3FFF | (v5[3] << 14);
                if ((char)v5[3] < 0)
                {
                  v6 = v6 & 0x1FFFFF | (v5[4] << 21);
                  if ((char)v5[4] < 0)
                  {
                    v6 = v6 & 0xFFFFFFF | ((v5[5] & 7) << 28);
                    v8 = 5;
                  }
                  else
                  {
                    v8 = 4;
                  }
                }
                else
                {
                  v8 = 3;
                }
              }
              else
              {
                v8 = 2;
              }
            }
            else
            {
              v8 = 1;
            }
            v5 = &v17[v8];
          }
          while (v6 < (int)a2);
        }
      }
      result = sub_1ACC7044C(v3[2], a2);
      v3 = (_QWORD *)v3[3];
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1ACC7058C(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  char *v17;
  const char **v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  size_t v26;
  int v27;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  _DWORD *v37;
  int v38;
  int v39;
  void *v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(char **);
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char **v49;
  uint64_t v50;

  v50 = 0;
  v11 = sqlite3_declare_vtab(a1, "CREATE TABLE x(input, token, start, end, position)");
  if ((_DWORD)v11)
    return v11;
  v12 = (a3 - 3);
  if (a3 == 3)
  {
    v15 = 0;
    v17 = "simple";
  }
  else
  {
    v49 = a6;
    v13 = (const char **)(a4 + 24);
    if (a3 >= 4)
    {
      LODWORD(v14) = 0;
      v18 = v13;
      v19 = (a3 - 3);
      do
      {
        v20 = *v18++;
        LODWORD(v14) = v14 + strlen(v20) + 1;
        --v19;
      }
      while (v19);
      v14 = (int)v14;
      if (sqlite3_initialize())
        goto LABEL_5;
    }
    else
    {
      v14 = 0;
      if (sqlite3_initialize())
      {
LABEL_5:
        v15 = 0;
        goto LABEL_6;
      }
    }
    v21 = sub_1ACB5D828(v14 + 8 * (int)v12);
    v15 = (char **)v21;
    v48 = a5;
    if (a3 >= 4 && v21)
    {
      v22 = 0;
      v23 = (unsigned __int8 *)(v21 + 8 * (int)v12);
      do
      {
        v25 = strlen(v13[v22]);
        v15[v22] = (char *)v23;
        v26 = v25 + 1;
        memcpy(v23, v13[v22], v26);
        v27 = *v23;
        if ((v27 - 34) <= 0x3E && ((1 << (v27 - 34)) & 0x4200000000000021) != 0)
        {
          if (v27 == 91)
            v27 = 93;
          v29 = v23[1];
          if (v23[1])
          {
            v30 = 0;
            v31 = 1;
            while (1)
            {
              if (v29 == v27)
              {
                if (v23[v31 + 1] != v27)
                {
LABEL_15:
                  v24 = v30;
                  goto LABEL_16;
                }
                v23[v30] = v27;
                v31 += 2;
              }
              else
              {
                v23[v30] = v29;
                ++v31;
              }
              ++v30;
              v29 = v23[v31];
              if (!v23[v31])
                goto LABEL_15;
            }
          }
          v24 = 0;
LABEL_16:
          v23[v24] = 0;
        }
        v23 += v26;
        ++v22;
      }
      while (v22 != v12);
    }
    else if (!v21)
    {
LABEL_6:
      v16 = 0;
LABEL_7:
      v11 = 7;
      goto LABEL_59;
    }
    if (a3 >= 4)
      v17 = *v15;
    else
      v17 = "simple";
    a5 = v48;
    a6 = v49;
  }
  v32 = strlen(v17);
  if (a2 && *(_QWORD *)(a2 + 24))
  {
    v33 = (v32 + 1);
    v34 = *(_BYTE *)a2 == 1 ? sub_1ACB5BD38(v17, v33) : sub_1ACC52EC8(v17, v33);
    v35 = *(_QWORD *)(a2 + 24);
    if (v35)
    {
      v36 = (int *)(v35 + 16 * ((*(_DWORD *)(a2 + 16) - 1) & v34));
      v39 = *v36;
      v37 = v36 + 2;
      v38 = v39;
      if (*(_BYTE *)a2 == 1)
        v40 = sub_1ACB5BD9C;
      else
        v40 = sub_1ACC52F00;
      while (v38)
      {
        v37 = *(_DWORD **)v37;
        if (!v37)
          break;
        --v38;
        if (!((unsigned int (*)(_QWORD, _QWORD, char *, uint64_t))v40)(*((_QWORD *)v37 + 3), v37[8], v17, v33))
        {
          v16 = *((_QWORD *)v37 + 2);
          if (!v16)
            break;
          if (a3 <= 4)
            v41 = 0;
          else
            v41 = v15 + 1;
          if (a3 <= 4)
            v42 = 0;
          else
            v42 = (a3 - 4);
          v43 = (*(uint64_t (**)(uint64_t, char **, uint64_t *))(v16 + 8))(v42, v41, &v50);
          if ((_DWORD)v43)
          {
            v11 = v43;
            goto LABEL_59;
          }
          if (sqlite3_initialize())
            goto LABEL_7;
          v46 = sub_1ACB5D828(40);
          if (!v46)
            goto LABEL_7;
          v11 = 0;
          *(_OWORD *)v46 = 0u;
          *(_OWORD *)(v46 + 16) = 0u;
          v47 = v50;
          *(_QWORD *)(v46 + 24) = v16;
          *(_QWORD *)(v46 + 32) = v47;
          *a5 = v46;
          if (v15)
            goto LABEL_62;
          return v11;
        }
      }
    }
  }
  sub_1ACC51B88(a6, "unknown tokenizer: %s", v17);
  v16 = 0;
  v11 = 1;
LABEL_59:
  if (v50)
    (*(void (**)(void))(v16 + 16))();
  if (v15)
  {
LABEL_62:
    v44 = (void (**)(char **))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_67:
      (*v44)(v15);
      return v11;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v15);
    v15 = (char **)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v44 = (void (**)(char **))&xmmword_1ECD3B1D0;
      goto LABEL_67;
    }
  }
  return v11;
}

uint64_t sub_1ACC7093C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if ((int)v2 < 1)
  {
LABEL_8:
    a2[10] = 0;
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = (_BYTE *)(*((_QWORD *)a2 + 1) + 5);
    v5 = 8 * v2;
    while (!*v4 || *(_DWORD *)(v4 - 5) || *(v4 - 1) != 2)
    {
      v3 += 8;
      v4 += 12;
      if (v5 == v3)
        goto LABEL_8;
    }
    a2[10] = 1;
    v6 = *((_QWORD *)a2 + 4) + v3;
    *(_DWORD *)v6 = 1;
    *(_BYTE *)(v6 + 4) = 1;
    *((_QWORD *)a2 + 8) = 0x3FF0000000000000;
    return 0;
  }
}

uint64_t sub_1ACC709BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  v1 = a1;
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 32));
  v2 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_6;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v2 = &xmmword_1ECD3B1D0;
LABEL_6:
    (*v2)(v1);
  }
  return 0;
}

double sub_1ACC70A70(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v4;

  if (!sqlite3_initialize())
  {
    v4 = sub_1ACB5D828(56);
    if (v4)
    {
      *(_QWORD *)(v4 + 48) = 0;
      result = 0.0;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)v4 = 0u;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t sub_1ACC70AC4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(_QWORD);

  v1 = a1;
  if (a1[2])
  {
    (*(void (**)(void))(*(_QWORD *)(*a1 + 24) + 32))();
    v1[2] = 0;
  }
  v2 = v1[1];
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_9:
      (*v3)(v2);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_9;
    }
  }
LABEL_10:
  v1[1] = 0;
  *((_DWORD *)v1 + 6) = 0;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_15:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_1ACC70C10(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  int v13;
  const void *v14;
  __int16 v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v8 = *(_QWORD *)a1;
  v9 = (_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(void))(*(_QWORD *)(v8 + 24) + 32))();
    *v9 = 0;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_9:
      (*v11)(v10);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v11 = &xmmword_1ECD3B1D0;
      goto LABEL_9;
    }
  }
LABEL_10:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a2 != 1)
    return 1;
  v12 = *a5;
  if (!*a5)
  {
    v14 = 0;
    goto LABEL_22;
  }
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      v14 = 0;
      v15 = *(_WORD *)(v12 + 20);
      if ((v15 & 2) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    v14 = (const void *)sub_1ACBF2B64((int *)v12, 1);
    v12 = *a5;
    if (*a5)
    {
      v15 = *(_WORD *)(v12 + 20);
      if ((v15 & 2) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
LABEL_22:
    sub_1ACBBE20C(91120);
    goto LABEL_23;
  }
  v14 = *(const void **)(v12 + 8);
  v15 = *(_WORD *)(v12 + 20);
  if ((v15 & 2) == 0)
    goto LABEL_33;
LABEL_30:
  if (*(_BYTE *)(v12 + 22) == 1)
  {
    v17 = *(unsigned int *)(v12 + 16);
    if (!sqlite3_initialize())
      goto LABEL_24;
LABEL_40:
    *(_QWORD *)(a1 + 8) = 0;
    return 7;
  }
LABEL_33:
  if ((v15 & 0x10) != 0)
  {
    v17 = *(unsigned int *)(v12 + 16);
    if ((v15 & 0x400) != 0)
      v17 = (*(_DWORD *)v12 + v17);
    if (sqlite3_initialize())
      goto LABEL_40;
    goto LABEL_24;
  }
  if ((v15 & 1) != 0)
  {
LABEL_23:
    v17 = 0;
    if (!sqlite3_initialize())
      goto LABEL_24;
    goto LABEL_40;
  }
  v17 = sub_1ACBF2B3C(v12, 1);
  if (sqlite3_initialize())
    goto LABEL_40;
LABEL_24:
  v18 = (void *)sub_1ACB5D828((int)v17 + 1);
  *(_QWORD *)(a1 + 8) = v18;
  if (!v18)
    return 7;
  if ((int)v17 >= 1)
  {
    memcpy(v18, v14, v17);
    v18 = *(void **)(a1 + 8);
  }
  *((_BYTE *)v18 + (int)v17) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)(v8 + 24) + 24))(*(_QWORD *)(v8 + 32), *(_QWORD *)(a1 + 8), v17, v9);
  if (!(_DWORD)result)
  {
    **(_QWORD **)(a1 + 16) = *(_QWORD *)(v8 + 32);
    return sub_1ACC70E64((uint64_t *)a1);
  }
  return result;
}

uint64_t sub_1ACC70E64(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);

  v2 = *a1;
  ++*((_DWORD *)a1 + 6);
  v3 = a1 + 4;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v2 + 24)
                                                                                                 + 40))(a1[2], a1 + 4, a1 + 5, (uint64_t)a1 + 44, a1 + 6, (uint64_t)a1 + 52);
  if (!(_DWORD)result)
    return result;
  v5 = result;
  if (a1[2])
  {
    (*(void (**)(void))(*(_QWORD *)(*a1 + 24) + 32))();
    a1[2] = 0;
  }
  v6 = a1[1];
  if (v6)
  {
    v7 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_11;
      v7 = &xmmword_1ECD3B1D0;
    }
    (*v7)(v6);
  }
LABEL_11:
  a1[1] = 0;
  *((_DWORD *)a1 + 6) = 0;
  v3[1] = 0;
  v3[2] = 0;
  if (v5 == 101)
    result = 0;
  else
    result = v5;
  *v3 = 0;
  return result;
}

BOOL sub_1ACC70F8C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) == 0;
}

uint64_t sub_1ACC70F9C(uint64_t a1, uint64_t *a2, int a3)
{
  char *v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  switch(a3)
  {
    case 0:
      if (!a2)
        goto LABEL_16;
      v3 = *(char **)(a1 + 8);
      v4 = (uint64_t)a2;
      v5 = v3;
      v6 = -1;
      goto LABEL_8;
    case 1:
      if (a2)
      {
        v6 = *(_DWORD *)(a1 + 40);
        v8 = *(char **)(a1 + 32);
        v4 = (uint64_t)a2;
        v5 = v8;
LABEL_8:
        sub_1ACBC69D0(v4, v5, v6, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
LABEL_16:
        sub_1ACBBE20C(97480);
      }
      return 0;
    case 2:
      if (!a2)
        goto LABEL_15;
      v7 = *(int *)(a1 + 44);
      goto LABEL_13;
    case 3:
      if (!a2)
        goto LABEL_15;
      v7 = *(int *)(a1 + 48);
      goto LABEL_13;
    default:
      if (a2)
      {
        v7 = *(int *)(a1 + 52);
LABEL_13:
        v9 = *a2;
        if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v9, v7);
        }
        else
        {
          *(_QWORD *)v9 = v7;
          *(_WORD *)(v9 + 20) = 4;
        }
      }
      else
      {
LABEL_15:
        sub_1ACBBE20C(97413);
      }
      return 0;
  }
}

uint64_t sub_1ACC71080(uint64_t a1, _QWORD *a2)
{
  *a2 = *(int *)(a1 + 24);
  return 0;
}

uint64_t sub_1ACC71090(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, char **a6)
{
  return sub_1ACC76168(1, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1ACC710B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, char **a6)
{
  return sub_1ACC76168(0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1ACC710D0(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  int v49;
  int v50;
  _DWORD *v51;

  v51 = *(_DWORD **)(a1 + 24);
  if (v51[30])
  {
    *(_QWORD *)(a1 + 16) = sqlite3_mprintf("recursively defined fts5 content table");
    return 1;
  }
  v4 = v51[6];
  v5 = *a2;
  v6 = sqlite3_initialize();
  result = 7;
  if ((v5 & 0x80000000) == 0 && !v6)
  {
    v7 = 1;
    v8 = sub_1ACB5D828((8 * v5) | 1u);
    if (!v8)
      return 7;
    v9 = v8;
    *((_QWORD *)a2 + 6) = v8;
    a2[14] = 1;
    if (*a2 < 1)
    {
      LODWORD(v13) = 0;
      v16 = 0;
LABEL_45:
      v33 = 0;
      v34 = 0;
      goto LABEL_46;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v50 = 0;
    while (1)
    {
      v18 = *((_QWORD *)a2 + 1);
      v19 = *(_DWORD *)(v18 + v10);
      v20 = *(unsigned __int8 *)(v18 + v10 + 4);
      if (v20 != 64 && (v20 == 2 ? (v21 = v19 < v4) : (v21 = 1), v21))
      {
        if (*(_BYTE *)(v18 + v10 + 5))
        {
          if (v19 < 0 || v19 >= v4)
          {
LABEL_9:
            if (v14)
            {
              v14 = 1;
            }
            else if (v20 == 2 && v19 < 0)
            {
              *(_BYTE *)(v9 + v16++) = 61;
              *(_DWORD *)(*((_QWORD *)a2 + 4) + v11) = ++v15;
              v14 = 1;
            }
            goto LABEL_11;
          }
          v22 = v51[31];
          if (v22 == 65)
          {
            if ((v20 - 65) > 1)
              goto LABEL_9;
          }
          else if (v22 != 66 || v20 != 66)
          {
            goto LABEL_9;
          }
          if (v20 == 65)
            v27 = 76;
          else
            v27 = 71;
          *(_BYTE *)(v9 + v16) = v27;
          v28 = (char *)(v9 + v16 + 1);
          v49 = v16 + 1;
          v29 = v15;
          v30 = v13;
          v31 = v9;
          sqlite3_snprintf(6, v28, "%d", v19);
          v32 = strlen(v28);
          v13 = v30;
          v9 = v31 + v32;
          v15 = v29 + 1;
          *(_DWORD *)(*((_QWORD *)a2 + 4) + v11) = v29 + 1;
          v16 = v49;
        }
      }
      else
      {
        if (!*(_BYTE *)(v18 + v10 + 5) || v19 < 0)
        {
          result = 0;
          *((_QWORD *)a2 + 8) = 0x4A511B0EC57E649ALL;
          *(_BYTE *)(v9 + v16) = 0;
          return result;
        }
        if (v19 != v4 + 1)
        {
          v23 = v16 + 1;
          *(_BYTE *)(v9 + v16) = 77;
          v24 = (const char *)(v9 + v23);
          v25 = v9;
          sqlite3_snprintf(6, (char *)(v9 + v23), "%d", v19);
          v9 = v25 + strlen(v24);
          v13 = 1;
          v16 = v23;
LABEL_35:
          ++v15;
          v26 = *((_QWORD *)a2 + 4) + v11;
          *(_DWORD *)v26 = v15;
          *(_BYTE *)(v26 + 4) = 1;
          goto LABEL_11;
        }
        if (!v50)
        {
          *(_BYTE *)(v9 + v16++) = 114;
          v50 = 1;
          goto LABEL_35;
        }
        v50 = 1;
      }
LABEL_11:
      ++v12;
      v17 = *a2;
      v11 += 8;
      v10 += 12;
      if (v12 >= v17)
      {
        if (v14)
        {
          v7 = 0;
          goto LABEL_45;
        }
        if ((int)v17 < 1)
        {
          v33 = 0;
          v34 = 0;
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v34 = 0;
          v33 = 0;
          do
          {
            v41 = *((_QWORD *)a2 + 1);
            if ((*(_DWORD *)(v41 + v38) & 0x80000000) != 0)
            {
              v42 = v41 + v38;
              if (*(_BYTE *)(v42 + 5))
              {
                HIDWORD(v43) = *(unsigned __int8 *)(v42 + 4);
                LODWORD(v43) = (HIDWORD(v43) << 24) - 0x4000000;
                switch((v43 >> 26))
                {
                  case 0u:
                  case 7u:
                    if (!v33)
                    {
                      v33 = 1;
                      v44 = 62;
                      goto LABEL_57;
                    }
                    break;
                  case 1u:
                  case 3u:
                    if (!v34)
                    {
                      v34 = 1;
                      v44 = 60;
LABEL_57:
                      *(_BYTE *)(v9 + v16++) = v44;
                      *(_DWORD *)(*((_QWORD *)a2 + 4) + v39) = ++v15;
                    }
                    break;
                  default:
                    break;
                }
              }
            }
            ++v40;
            v39 += 8;
            v38 += 12;
          }
          while (v40 < *a2);
        }
        v7 = 1;
LABEL_46:
        v35 = 0;
        *(_BYTE *)(v9 + v16) = 0;
        if (a2[4] == 1)
        {
          v36 = *((_QWORD *)a2 + 3);
          if (*(_DWORD *)v36 != v51[6] + 1 || (_DWORD)v13 == 0)
          {
            if (*(_DWORD *)v36 == -1)
            {
              v35 = 64;
              goto LABEL_67;
            }
            v35 = 0;
          }
          else
          {
            v35 = 32;
LABEL_67:
            a2[15] = 1;
            if (*(_BYTE *)(v36 + 4))
              v35 |= 0x80u;
          }
        }
        if ((v7 & 1) != 0)
        {
          if (v34 && v33)
          {
            v45 = (_DWORD)v13 == 0;
            v46 = 500.0;
            v47 = 250000.0;
          }
          else
          {
            v45 = (_DWORD)v13 == 0;
            if (v34 | v33)
            {
              v46 = 750.0;
              v47 = 750000.0;
            }
            else
            {
              v46 = 1000.0;
              v47 = 1000000.0;
            }
          }
          if (v45)
            v46 = v47;
          *((double *)a2 + 8) = v46;
        }
        else
        {
          v48 = 100.0;
          if (!(_DWORD)v13)
            v48 = 10.0;
          *((double *)a2 + 8) = v48;
          if (!(_DWORD)v13)
            a2[20] |= 1u;
        }
        result = 0;
        a2[10] = v35;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC71598(uint64_t a1)
{
  sub_1ACC782C8(a1);
  return 0;
}

uint64_t sub_1ACC715B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  result = sub_1ACC79468(*(sqlite3 **)v2, 0, "DROP TABLE IF EXISTS %Q.'%q_data';DROP TABLE IF EXISTS %Q.'%q_idx';DROP TABLE IF EXISTS %Q.'%q_config';",
             *(_QWORD *)(v2 + 8),
             *(_QWORD *)(v2 + 16),
             *(_QWORD *)(v2 + 8),
             *(_QWORD *)(v2 + 16),
             *(_QWORD *)(v2 + 8),
             *(_QWORD *)(v2 + 16));
  if (!(_DWORD)result)
  {
    if (!*(_DWORD *)(v2 + 88)
      || (result = sub_1ACC79468(*(sqlite3 **)v2, 0, "DROP TABLE IF EXISTS %Q.'%q_docsize';",
                     *(_QWORD *)(v2 + 8),
                     *(_QWORD *)(v2 + 16)),
          !(_DWORD)result))
    {
      if (*(_DWORD *)(v2 + 64)
        || (result = sub_1ACC79468(*(sqlite3 **)v2, 0, "DROP TABLE IF EXISTS %Q.'%q_content';",
                       *(_QWORD *)(v2 + 8),
                       *(_QWORD *)(v2 + 16)),
            !(_DWORD)result))
      {
        sub_1ACC782C8(a1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC7165C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[3];
  v5 = *(_QWORD **)(a1[6] + 72);
  if (v5)
  {
    while ((_QWORD *)*v5 != a1)
    {
      v5 = (_QWORD *)v5[1];
      if (!v5)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v6 = *(_QWORD *)(a1[5] + 8);
    if (sub_1ACC7B778(v6) != *(_QWORD *)(v6 + 136))
    {
      v7 = *(_DWORD **)(v6 + 144);
      if (v7)
      {
        sub_1ACC7A15C(v7);
        *(_QWORD *)(v6 + 144) = 0;
      }
    }
    result = *(unsigned int *)(v6 + 60);
    *(_DWORD *)(v6 + 60) = 0;
    if ((_DWORD)result)
    {
      v9 = 0;
      goto LABEL_14;
    }
  }
  v10 = *(int *)(v4 + 24);
  if (sqlite3_initialize())
  {
    v9 = 0;
  }
  else
  {
    v11 = 4 * v10 + 184;
    v12 = (_QWORD *)sub_1ACB5D828(v11);
    v9 = v12;
    if (v12)
    {
      v13 = a1[6];
      bzero(v12, v11);
      result = 0;
      v9[1] = *(_QWORD *)(v13 + 72);
      v9[2] = v9 + 23;
      *(_QWORD *)(v13 + 72) = v9;
      v14 = *(_QWORD *)(v13 + 40) + 1;
      *(_QWORD *)(v13 + 40) = v14;
      v9[3] = v14;
      goto LABEL_14;
    }
  }
  result = 7;
LABEL_14:
  *a2 = v9;
  return result;
}

uint64_t sub_1ACC71750(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  void (**v7)(uint64_t *, __n128);

  if (a1)
  {
    v1 = a1;
    v2 = *a1;
    v3.n128_f64[0] = sub_1ACC7C6EC(a1);
    v4 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 72);
    do
    {
      v5 = v4;
      v6 = (uint64_t *)*v4;
      v4 = (_QWORD *)(*v4 + 8);
    }
    while (v6 != v1);
    *v5 = v1[1];
    v7 = (void (**)(uint64_t *, __n128))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_9;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = (void (**)(uint64_t *, __n128))&xmmword_1ECD3B1D0;
LABEL_9:
      (*v7)(v1, v3);
    }
  }
  return 0;
}

uint64_t sub_1ACC71828(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  char v28;
  unsigned __int8 *v29;
  int v30;
  int64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t *v52;
  uint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint8x16_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint64_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x8_t *v69;
  uint64_t v70;
  int8x8_t v71;
  uint16x8_t v72;
  uint64_t v73;
  const char *v74;
  char v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  char v85;
  unsigned __int8 *v86;
  int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  void (**v90)(unsigned __int8 *);
  int v91;
  int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  __int16 v99;
  double v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  double v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  int v111;
  unsigned __int8 *v112;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  int v127;
  int v128;
  char *v129;
  char **v130;
  sqlite3_stmt *v131;
  unsigned int v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const sqlite3_value *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(_QWORD *)(v6 + 184);
  v145 = 0;
  if (!*(_DWORD *)(v6 + 120))
  {
    v134 = v7;
    v14 = a1 + 32;
    if (*(_DWORD *)(a1 + 32))
    {
      sub_1ACC7C6EC((uint64_t *)a1);
      *(_QWORD *)(v14 + 144) = 0;
      *(_OWORD *)(v14 + 112) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
    }
    v133 = (int *)v14;
    v132 = a2;
    v135 = a1;
    v136 = (char **)(v5 + 16);
    *(_QWORD *)(v6 + 184) = v5 + 16;
    if (a4 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v138 = 0;
      v139 = 0;
      v140 = 0;
      v141 = a5;
      v137 = 0;
      v144 = a3 + 1;
      v17 = a4;
      v142 = v6;
      v143 = a4;
      while (2)
      {
        v20 = *(char *)(a3 + v16++);
        switch(v20)
        {
          case '<':
            v138 = *(_QWORD *)(a5 + 8 * v15);
            goto LABEL_9;
          case '=':
            v140 = *(const sqlite3_value **)(a5 + 8 * v15);
            goto LABEL_9;
          case 'G':
          case 'L':
            v21 = *(_QWORD *)(a5 + 8 * v15);
            if (!v21)
              goto LABEL_25;
            v22 = *(unsigned __int16 *)(v21 + 20);
            if ((~v22 & 0x202) != 0 || *(_BYTE *)(v21 + 22) != 1)
            {
              if ((v22 & 1) != 0)
LABEL_25:
                v23 = 0;
              else
                v23 = (const char *)sub_1ACBF2B64((int *)v21, 1);
            }
            else
            {
              v23 = *(const char **)(v21 + 8);
            }
            v26 = 0;
            v27 = v20;
            v28 = *(_BYTE *)(a3 + v16);
            v29 = (unsigned __int8 *)(v144 + v16);
            do
            {
              v26 = 10 * v26 + v28 - 48;
              v30 = *v29++;
              v28 = v30;
              ++v16;
            }
            while ((v30 - 48) < 0xA);
            if (!v23)
            {
              v18 = v145;
              a5 = v141;
              goto LABEL_8;
            }
            v31 = strlen(v23);
            if (sqlite3_initialize())
            {
              v18 = 0;
              v8 = 7;
              goto LABEL_171;
            }
            v32 = sub_1ACB5D828((4 * v31) | 1);
            if (!v32)
            {
              v18 = 0;
              v8 = 7;
              v6 = v142;
              goto LABEL_171;
            }
            v33 = (unsigned __int8 *)v32;
            if (v27 == 71)
              v34 = 91;
            else
              v34 = 0;
            if (v27 == 71)
              v35 = 63;
            else
              v35 = 37;
            if (v27 == 71)
              v36 = 42;
            else
              v36 = 95;
            a5 = v141;
            v37.i64[0] = 0x100000001;
            v37.i64[1] = 0x100000001;
            v38.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v38.i64[1] = 0xC0C0C0C0C0C0C0C0;
            v39.i64[0] = 0x8080808080808080;
            v39.i64[1] = 0x8080808080808080;
            if (v31 < 0)
              goto LABEL_90;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              if (v31 != v40)
              {
                v44 = v23[v40];
                v45 = v34 == v44 || v36 == v44;
                if (!v45 && v35 != v44)
                {
                  ++v42;
                  goto LABEL_44;
                }
              }
              v47 = (v42 - v41);
              if ((int)v47 >= 1)
              {
                if (v47 >= 8)
                {
                  if (v47 >= 0x20)
                  {
                    v50 = 0uLL;
                    v48 = v47 & 0xFFFFFFE0;
                    v51 = 0uLL;
                    v52 = (int8x16_t *)&v23[v41 + 16];
                    v53 = v48;
                    v54 = 0uLL;
                    v55 = 0uLL;
                    v56 = 0uLL;
                    v57 = 0uLL;
                    v58 = 0uLL;
                    v59 = 0uLL;
                    do
                    {
                      v60 = (uint8x16_t)vmvnq_s8(vceqq_s8(vandq_s8(v52[-1], v38), v39));
                      v61 = vmovl_u8(*(uint8x8_t *)v60.i8);
                      v62 = vmovl_high_u8(v60);
                      v63 = (uint8x16_t)vmvnq_s8(vceqq_s8(vandq_s8(*v52, v38), v39));
                      v64 = vmovl_u8(*(uint8x8_t *)v63.i8);
                      v65 = vmovl_high_u8(v63);
                      v55 = vaddq_s32(v55, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v62), v37));
                      v54 = vaddq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8), v37));
                      v51 = vaddq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v61), v37));
                      v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8), v37));
                      v59 = vaddq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v65), v37));
                      v58 = vaddq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v65.i8), v37));
                      v57 = vaddq_s32(v57, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v64), v37));
                      v56 = vaddq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8), v37));
                      v52 += 2;
                      v53 -= 32;
                    }
                    while (v53);
                    v49 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v56, v50), vaddq_s32(v58, v54)), vaddq_s32(vaddq_s32(v57, v51), vaddq_s32(v59, v55))));
                    if (v48 == v47)
                      goto LABEL_70;
                    if ((((_BYTE)v42 - (_BYTE)v41) & 0x18) == 0)
                      goto LABEL_66;
                  }
                  else
                  {
                    v49 = 0;
                    v48 = 0;
                  }
                  v66 = v48;
                  v48 = v47 & 0xFFFFFFF8;
                  v67 = 0uLL;
                  v68 = (int32x4_t)v49;
                  v69 = (int8x8_t *)&v23[v66 + v41];
                  v70 = v66 - v48;
                  do
                  {
                    v71 = *v69++;
                    v72 = vmovl_u8((uint8x8_t)vmvn_s8(vceq_s8(vand_s8(v71, (int8x8_t)0xC0C0C0C0C0C0C0C0), (int8x8_t)0x8080808080808080)));
                    v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v37));
                    v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v37));
                    v70 += 8;
                  }
                  while (v70);
                  v49 = vaddvq_s32(vaddq_s32(v68, v67));
                  if (v48 != v47)
                    goto LABEL_66;
                }
                else
                {
                  v48 = 0;
                  v49 = 0;
LABEL_66:
                  v73 = v47 - v48;
                  v74 = &v23[v48 + v41];
                  do
                  {
                    v75 = *v74++;
                    if ((v75 & 0xC0) != 0x80)
                      ++v49;
                    --v73;
                  }
                  while (v73);
                }
LABEL_70:
                if (v49 >= 3)
                {
                  v76 = v43 + 1;
                  v33[v43] = 34;
                  if (v42 <= v41)
                  {
                    LODWORD(v79) = v43 + 1;
                  }
                  else
                  {
                    v77 = v42 - (uint64_t)v41;
                    v78 = (unsigned __int8 *)&v23[v41];
                    do
                    {
                      v79 = v76 + 1;
                      v33[v76] = *v78;
                      v80 = *v78++;
                      if (v80 == 34)
                      {
                        v33[v79] = 34;
                        LODWORD(v79) = v76 + 2;
                      }
                      v76 = v79;
                      --v77;
                    }
                    while (v77);
                  }
                  *(_WORD *)&v33[(int)v79] = 8226;
                  v43 = v79 + 2;
                }
              }
              if (v34 == v23[v40])
              {
                v81 = v23[v42 + 1] == 94 ? 3 : 2;
                v42 += v81;
                v82 = v42;
                if (v31 > v42)
                {
                  while (v23[v82] != 93)
                  {
                    if (v31 <= ++v82)
                    {
                      LODWORD(v82) = v31;
                      break;
                    }
                  }
                  v42 = v82;
                }
              }
              v41 = ++v42;
LABEL_44:
              v40 = v42;
            }
            while (v31 >= v42);
            if (v43 < 1)
            {
LABEL_90:
              v8 = 0;
              v145 = 0;
              goto LABEL_104;
            }
            v83 = *(_DWORD *)(v142 + 92);
            if (v83)
            {
              if (v83 == 1)
                v26 = *(_DWORD *)(v142 + 24);
              else
                v83 = 1;
            }
            v33[v43] = 0;
            v8 = sub_1ACC7D8EC(v142, v83, v26, v33, &v145, *(_QWORD **)(v142 + 184));
LABEL_104:
            v90 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v33);
              v33 = (unsigned __int8 *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v90 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                goto LABEL_109;
              }
            }
            else
            {
LABEL_109:
              (*v90)(v33);
            }
            v18 = v145;
            v6 = v142;
            if ((_DWORD)v8)
            {
LABEL_171:
              sub_1ACC7CB68(v18);
              *(_QWORD *)(v6 + 184) = v134;
              return v8;
            }
LABEL_8:
            v19 = sub_1ACC7E47C((uint64_t *)(a1 + 64), v18);
            v145 = 0;
            v17 = v143;
            if ((_DWORD)v19)
              goto LABEL_169;
LABEL_9:
            if (++v15 == v17)
              goto LABEL_117;
            continue;
          case 'M':
            v24 = *(_QWORD *)(a5 + 8 * v15);
            if (v24)
            {
              v25 = *(unsigned __int16 *)(v24 + 20);
              if ((~v25 & 0x202) != 0 || *(_BYTE *)(v24 + 22) != 1)
              {
                if ((v25 & 1) != 0)
                  v24 = 0;
                else
                  v24 = sub_1ACBF2B64((int *)v24, 1);
              }
              else
              {
                v24 = *(_QWORD *)(v24 + 8);
              }
            }
            v84 = 0;
            v85 = *(_BYTE *)(a3 + v16);
            v86 = (unsigned __int8 *)(v144 + v16);
            do
            {
              v84 = 10 * v84 + v85 - 48;
              v87 = *v86++;
              v85 = v87;
              ++v16;
            }
            while ((v87 - 48) < 0xA);
            if (v24)
              v88 = (unsigned __int8 *)v24;
            else
              v88 = (unsigned __int8 *)&byte_1ACCBEAEE;
            if (*v88 != 42)
            {
              v89 = sub_1ACC7D8EC(v6, 0, v84, v88, &v145, v136);
              v18 = v145;
              if ((_DWORD)v89)
              {
                v8 = v89;
                goto LABEL_171;
              }
              goto LABEL_8;
            }
            do
            {
              v92 = *++v88;
              v91 = v92;
            }
            while (v92 == 32);
            v93 = 0;
            while ((v91 | 0x20) != 0x20)
            {
              v94 = &v88[v93++];
              v91 = v94[1];
            }
            *v133 = 3;
            if ((_DWORD)v93 != 2)
            {
              if ((_DWORD)v93 == 5)
              {
                v114 = *v88;
                if ((v114 & 0xFFFFFFDF) == 0x52)
                {
                  v114 = v88[1];
                  if ((v114 & 0xFFFFFFDF) == 0x45)
                  {
                    v114 = v88[2];
                    if ((v114 & 0xFFFFFFDF) == 0x41)
                    {
                      v114 = v88[3];
                      if ((v114 & 0xFFFFFFDF) == 0x44)
                      {
                        v114 = v88[4];
                        if ((v114 & 0xFFFFFFDF) == 0x53)
                        {
LABEL_261:
                          v18 = 0;
                          v8 = 0;
                          *(_QWORD *)(a1 + 88) = *(int *)(*(_QWORD *)(v5 + 32) + 112);
                          goto LABEL_171;
                        }
                        v115 = 115;
                      }
                      else
                      {
                        v115 = 100;
                      }
                    }
                    else
                    {
                      v115 = 97;
                    }
                  }
                  else
                  {
                    v115 = 101;
                  }
                }
                else
                {
                  v115 = 114;
                }
                if (v115 == byte_1ACCB6333[v114])
                  goto LABEL_261;
              }
              goto LABEL_262;
            }
            v127 = *v88;
            if ((v127 & 0xFFFFFFDF) == 0x49)
            {
              v127 = v88[1];
              if ((v127 & 0xFFFFFFDF) == 0x44)
                goto LABEL_252;
              v128 = 100;
            }
            else
            {
              v128 = 105;
            }
            if (v128 != byte_1ACCB6333[v127])
            {
LABEL_262:
              v129 = sqlite3_mprintf("unknown special query: %.*s", v93, (const char *)v88);
              v18 = 0;
              v130 = (char **)(v5 + 16);
              goto LABEL_263;
            }
LABEL_252:
            v18 = 0;
            v8 = 0;
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 24);
            goto LABEL_171;
          case 'r':
            v137 = *(_QWORD *)(a5 + 8 * v15);
            goto LABEL_9;
          default:
            v139 = *(_QWORD *)(a5 + 8 * v15);
            goto LABEL_9;
        }
      }
    }
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
LABEL_117:
    v95 = (v132 >> 7) & 1;
    *(_DWORD *)(a1 + 36) = v95;
    if (v140)
      v96 = (uint64_t)v140;
    else
      v96 = v138;
    if (v140)
      v97 = (uint64_t)v140;
    else
      v97 = v139;
    if ((v132 & 0x80) == 0)
    {
      v98 = v133;
      if (v96)
      {
        v99 = *(_WORD *)(v96 + 20);
        if (((0x4000000040004uLL >> v99) & 1) != 0)
        {
          sub_1ACBCA9CC(v96, 0);
          v99 = *(_WORD *)(v96 + 20);
          if (((0x50505050uLL >> (v99 & 0x3F)) & 1) != 0)
          {
LABEL_127:
            if ((v99 & 0x24) != 0)
            {
              v100 = *(double *)v96;
            }
            else if ((v99 & 8) != 0)
            {
              v123 = *(double *)v96;
              if (*(double *)v96 >= -9.22337204e18)
              {
                if (v123 <= 9.22337204e18)
                  *(_QWORD *)&v100 = (uint64_t)v123;
                else
                  v100 = NAN;
              }
              else
              {
                v100 = -0.0;
              }
            }
            else if ((v99 & 0x12) != 0 && *(_QWORD *)(v96 + 8))
            {
              v100 = COERCE_DOUBLE(sub_1ACBF2FC0(v96));
            }
            else
            {
              v100 = 0.0;
            }
LABEL_136:
            *(double *)(a1 + 48) = v100;
            if (v97)
            {
              v103 = *(_WORD *)(v97 + 20);
              if (((0x4000000040004uLL >> v103) & 1) != 0)
              {
                sub_1ACBCA9CC(v97, 0);
                v103 = *(_WORD *)(v97 + 20);
              }
              v105 = v5;
              if (((0x50505050uLL >> (v103 & 0x3F)) & 1) != 0)
              {
                if ((v103 & 0x24) != 0)
                {
                  v104 = *(double *)v97;
                  goto LABEL_154;
                }
                if ((v103 & 8) == 0)
                {
                  if ((v103 & 0x12) != 0 && *(_QWORD *)(v97 + 8))
                    v104 = COERCE_DOUBLE(sub_1ACBF2FC0(v97));
                  else
                    v104 = 0.0;
                  goto LABEL_154;
                }
                v125 = *(double *)v97;
                if (*(double *)v97 >= -9.22337204e18)
                {
                  if (v125 <= 9.22337204e18)
                    *(_QWORD *)&v104 = (uint64_t)v125;
                  else
                    v104 = NAN;
                  goto LABEL_154;
                }
              }
              v104 = -0.0;
            }
            else
            {
              v104 = -0.0;
              v105 = v5;
            }
LABEL_154:
            *(double *)(v135 + 40) = v104;
            goto LABEL_155;
          }
        }
        else if (((0x50505050uLL >> (v99 & 0x3F)) & 1) != 0)
        {
          goto LABEL_127;
        }
      }
      v100 = NAN;
      goto LABEL_136;
    }
    v98 = v133;
    if (v96)
    {
      v101 = *(_WORD *)(v96 + 20);
      if (((0x4000000040004uLL >> v101) & 1) != 0)
      {
        sub_1ACBCA9CC(v96, 0);
        v101 = *(_WORD *)(v96 + 20);
        if (((0x50505050uLL >> (v101 & 0x3F)) & 1) != 0)
        {
LABEL_132:
          if ((v101 & 0x24) != 0)
          {
            v102 = *(_QWORD *)v96;
          }
          else if ((v101 & 8) != 0)
          {
            v124 = *(double *)v96;
            if (*(double *)v96 >= -9.22337204e18)
            {
              if (v124 <= 9.22337204e18)
                v102 = (uint64_t)v124;
              else
                v102 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v102 = 0x8000000000000000;
            }
          }
          else if ((v101 & 0x12) != 0 && *(_QWORD *)(v96 + 8))
          {
            v102 = sub_1ACBF2FC0(v96);
          }
          else
          {
            v102 = 0;
          }
LABEL_142:
          *(_QWORD *)(a1 + 40) = v102;
          if (!v97)
          {
            v105 = v5;
            *(_QWORD *)(v135 + 48) = 0x8000000000000000;
            goto LABEL_155;
          }
          v106 = *(_WORD *)(v97 + 20);
          if (((0x4000000040004uLL >> v106) & 1) != 0)
          {
            sub_1ACBCA9CC(v97, 0);
            v106 = *(_WORD *)(v97 + 20);
          }
          v105 = v5;
          if (((0x50505050uLL >> (v106 & 0x3F)) & 1) == 0)
            goto LABEL_151;
          if ((v106 & 0x24) != 0)
          {
            *(_QWORD *)(v135 + 48) = *(_QWORD *)v97;
          }
          else if ((v106 & 8) != 0)
          {
            v126 = *(double *)v97;
            if (*(double *)v97 < -9.22337204e18)
            {
LABEL_151:
              *(_QWORD *)(v135 + 48) = 0x8000000000000000;
              goto LABEL_155;
            }
            if (v126 <= 9.22337204e18)
              *(_QWORD *)(v135 + 48) = (uint64_t)v126;
            else
              *(_QWORD *)(v135 + 48) = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if ((v106 & 0x12) != 0 && *(_QWORD *)(v97 + 8))
          {
            *(_QWORD *)(v135 + 48) = sub_1ACBF2FC0(v97);
          }
          else
          {
            *(_QWORD *)(v135 + 48) = 0;
          }
LABEL_155:
          v107 = *(_QWORD *)(v105 + 32);
          v108 = sub_1ACC7ABF8(v107);
          sub_1ACC7A15C(v108);
          v8 = *(unsigned int *)(v107 + 60);
          *(_DWORD *)(v107 + 60) = 0;
          if ((_DWORD)v8)
          {
LABEL_170:
            v18 = 0;
            goto LABEL_171;
          }
          v109 = *(_QWORD *)(v105 + 56);
          if (v109)
          {
            if (*(_DWORD *)(v109 + 36))
            {
              *(_QWORD *)(v135 + 48) = *(_QWORD *)(v109 + 40);
              v110 = (_QWORD *)(v109 + 48);
            }
            else
            {
              *(_QWORD *)(v135 + 48) = *(_QWORD *)(v109 + 48);
              v110 = (_QWORD *)(v109 + 40);
            }
            *(_QWORD *)(v135 + 40) = *v110;
            *(_DWORD *)(v135 + 32) = 2;
            *(_QWORD *)(v135 + 64) = *(_QWORD *)(v109 + 64);
            goto LABEL_168;
          }
          if (!*(_QWORD *)(v135 + 64))
          {
            if (!*(_QWORD *)(v6 + 72))
            {
              v129 = sqlite3_mprintf("%s: table does not support scanning", *(const char **)(v6 + 16));
              v18 = 0;
              v130 = *(char ***)(v6 + 184);
LABEL_263:
              *v130 = v129;
              v8 = 1;
              goto LABEL_171;
            }
            if (v140)
              v116 = 6;
            else
              v116 = 5;
            *v98 = v116;
            v117 = *(_QWORD *)(v105 + 40);
            if (v140)
              v118 = 2;
            else
              v118 = *(_DWORD *)(v135 + 36) != 0;
            v19 = sub_1ACC7A800(*(uint64_t **)(v105 + 40), v118, (sqlite3_stmt **)(v135 + 56), v136);
            if (!(_DWORD)v19)
            {
              *(_QWORD *)(v117 + 8 * v118 + 40) = 0;
              v131 = *(sqlite3_stmt **)(v135 + 56);
              if (v140)
              {
                sqlite3_bind_value(v131, 1, v140);
              }
              else
              {
                sqlite3_bind_int64(v131, 1, *(_QWORD *)(v135 + 40));
                sqlite3_bind_int64(*(sqlite3_stmt **)(v135 + 56), 2, *(_QWORD *)(v135 + 48));
              }
              v19 = sub_1ACC72670(v135);
            }
            goto LABEL_169;
          }
          if (!v137)
          {
            v122 = *(_QWORD *)(v6 + 160);
            if (v122)
            {
              *(_QWORD *)(v135 + 96) = v122;
              *(_QWORD *)(v135 + 104) = *(_QWORD *)(v6 + 168);
            }
            else
            {
              *(_QWORD *)(v135 + 96) = "bm25";
              *(_QWORD *)(v135 + 104) = 0;
            }
            goto LABEL_246;
          }
          v111 = *(unsigned __int16 *)(v137 + 20);
          if ((~v111 & 0x202) != 0 || *(_BYTE *)(v137 + 22) != 1)
          {
            if ((v111 & 1) != 0)
              goto LABEL_238;
            v112 = (unsigned __int8 *)sub_1ACBF2B64((int *)v137, 1);
          }
          else
          {
            v112 = *(unsigned __int8 **)(v137 + 8);
          }
          v146 = 0;
          v147 = 0;
          if (v112)
          {
            v119 = sub_1ACC7C4A0(v112, &v147, &v146);
            if ((_DWORD)v119 != 1)
            {
              v8 = v119;
              if ((_DWORD)v119)
                goto LABEL_170;
              v121 = v146;
              v120 = v147;
              goto LABEL_239;
            }
            goto LABEL_240;
          }
          LOWORD(v111) = *(_WORD *)(v137 + 20);
LABEL_238:
          v112 = 0;
          v121 = 0;
          v120 = 0;
          if (((0xAAAAAAAAAAAAAAAALL >> v111) & 1) == 0)
          {
LABEL_239:
            *(_QWORD *)(v135 + 96) = v120;
            *(_QWORD *)(v135 + 104) = v121;
            *(_DWORD *)(v135 + 80) |= 0x10u;
LABEL_246:
            if ((v132 & 0x20) != 0)
            {
              *(_DWORD *)(v135 + 32) = 4;
              v19 = sub_1ACC7E764(v105, v135);
              goto LABEL_169;
            }
            *(_DWORD *)(v135 + 32) = 1;
LABEL_168:
            v19 = sub_1ACC7E684(v105, v135, v95);
LABEL_169:
            v8 = v19;
            goto LABEL_170;
          }
LABEL_240:
          *(_QWORD *)(*(_QWORD *)v135 + 16) = sqlite3_mprintf("parse error in rank function: %s", (const char *)v112);
          v8 = 1;
          goto LABEL_170;
        }
      }
      else if (((0x50505050uLL >> (v101 & 0x3F)) & 1) != 0)
      {
        goto LABEL_132;
      }
    }
    v102 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_142;
  }
  *(_QWORD *)(v5 + 16) = sqlite3_mprintf("recursively defined fts5 content table");
  return 1;
}

uint64_t sub_1ACC72670(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 > 2)
  {
    if (v2 == 4)
      return sub_1ACC89340(a1);
    if (v2 != 3)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      ++*(_DWORD *)(v13 + 120);
      v14 = sqlite3_step(*(sqlite3_stmt **)(a1 + 56));
      --*(_DWORD *)(v13 + 120);
      if (v14 == 100)
        return 0;
      *(_DWORD *)(a1 + 80) |= 1u;
      v4 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
      if ((_DWORD)v4)
      {
        v18 = sqlite3_errmsg(*(sqlite3 **)v13);
        *(_QWORD *)(*(_QWORD *)a1 + 16) = sqlite3_mprintf("%s", v18);
      }
      return v4;
    }
    v4 = 0;
    v5 = *(_DWORD *)(a1 + 80) | 1;
    goto LABEL_41;
  }
  if ((*(_BYTE *)(a1 + 80) & 0x20) == 0)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_34;
  }
  v6 = *(_DWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *(_DWORD *)(v7 + 24) = v6;
  v10 = sub_1ACC831A8(v7, v8);
  if ((_DWORD)v10)
  {
    v4 = v10;
    v3 = 0;
    v11 = *(_QWORD *)(a1 + 64);
    goto LABEL_32;
  }
  if (*(_DWORD *)(v8 + 4))
    goto LABEL_13;
  v19 = *(_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v7 + 24))
  {
    if (v19 <= v9)
      goto LABEL_13;
LABEL_46:
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v8, 1, v9);
    goto LABEL_14;
  }
  if (v19 < v9)
    goto LABEL_46;
LABEL_13:
  v4 = 0;
LABEL_14:
  if (*(_DWORD *)(v8 + 8))
    v15 = (_DWORD)v4 == 0;
  else
    v15 = 0;
  if (v15)
  {
    do
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v8 + 16))(v7, v8, 0, 0);
      if (*(_DWORD *)(v8 + 8))
        v17 = (_DWORD)v16 == 0;
      else
        v17 = 0;
    }
    while (v17);
    v4 = v16;
  }
  v11 = *(_QWORD *)(a1 + 64);
  if ((_DWORD)v4)
    v3 = 0;
  else
    v3 = v9 != *(_QWORD *)(*(_QWORD *)(v11 + 16) + 24);
LABEL_32:
  v20 = *(_DWORD *)(a1 + 80) & 0xFFFFFF91;
  *(_DWORD *)(a1 + 80) = v20 | 0x4E;
  if (*(_DWORD *)(*(_QWORD *)(v11 + 16) + 4))
  {
    v5 = v20 | 0x4F;
LABEL_41:
    *(_DWORD *)(a1 + 80) = v5;
    return v4;
  }
LABEL_34:
  if (!(v4 | v3))
  {
    v21 = *(_QWORD *)(a1 + 64);
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(_QWORD *)(v21 + 16);
    do
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v23 + 16))(v21, v23, 0, 0);
    while (*(_DWORD *)(v23 + 8));
    v4 = v24;
    v25 = *(_QWORD *)(v23 + 24);
    if (*(_DWORD *)(v21 + 24))
    {
      if (v25 >= v22)
      {
LABEL_40:
        v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 4) | *(_DWORD *)(a1 + 80) | 0x4E;
        goto LABEL_41;
      }
    }
    else if (v25 <= v22)
    {
      goto LABEL_40;
    }
    *(_DWORD *)(v23 + 4) = 1;
    goto LABEL_40;
  }
  return v4;
}

uint64_t sub_1ACC72914(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) & 1;
}

uint64_t sub_1ACC72920(uint64_t *a1, sqlite3_context *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v19;
  void (**v20)(char *);
  uint64_t v21;
  int v22;
  sqlite3_value *v23;
  const char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t (**v28)(unsigned __int8 *);
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  char *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int8x8_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int8x8_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  sqlite3_stmt **p_pStmt;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  size_t v74;
  sqlite3_stmt *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  const void *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  const char *i;
  uint64_t v94;
  uint64_t v95;
  int __src;
  sqlite3_stmt *__srca;
  void *__srcb;
  sqlite3_stmt *pStmt;
  unsigned int v100;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 24);
  v8 = *((_DWORD *)a1 + 8);
  v9 = *(_DWORD *)(v7 + 24);
  if (v8 == 3)
  {
    if (v9 == a3)
    {
      if (a2)
      {
        v10 = a1[11];
LABEL_8:
        v11 = *(_QWORD *)a2;
        if ((*(_WORD *)(*(_QWORD *)a2 + 20) & 0x9000) == 0)
        {
          v16 = 0;
          *(_QWORD *)v11 = v10;
          *(_WORD *)(v11 + 20) = 4;
          return v16;
        }
        sub_1ACBF327C(v11, v10);
        return 0;
      }
LABEL_18:
      v17 = 97423;
LABEL_19:
      sub_1ACBBE20C(v17);
    }
    return 0;
  }
  if (v9 == a3)
  {
    if (a2)
    {
      v10 = a1[3];
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  if (v9 + 1 != a3)
  {
    if (*(_DWORD *)(v7 + 64) != 1)
    {
      *(_QWORD *)(v7 + 184) = v6 + 16;
      v16 = sub_1ACC894C0(a1, 1);
      if (!(_DWORD)v16)
      {
        v23 = sqlite3_column_value((sqlite3_stmt *)a1[7], a3 + 1);
        sqlite3_result_value(a2, v23);
      }
      *(_QWORD *)(v7 + 184) = 0;
      return v16;
    }
    if (*(_DWORD *)(v7 + 68))
    {
      if (!a2)
      {
        v17 = 97960;
        goto LABEL_19;
      }
      if (!*(_QWORD *)a2)
      {
        v17 = 97237;
        goto LABEL_19;
      }
      if ((~*(unsigned __int16 *)(*(_QWORD *)a2 + 20) & 0x401) == 0)
      {
        v19 = sqlite3_mprintf("cannot UPDATE a subset of columns on fts5 contentless-delete table: %s", *(const char **)(v7 + 16));
        *((_DWORD *)a2 + 9) = 1;
        sub_1ACB57870(*(_QWORD *)a2, v19, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if (v19)
        {
          v20 = (void (**)(char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v19);
            v19 = (char *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              return 0;
            v20 = (void (**)(char *))&xmmword_1ECD3B1D0;
          }
          (*v20)(v19);
        }
      }
    }
    return 0;
  }
  if (v8 != 1 && v8 != 4)
  {
    if (v8 != 2)
      return 0;
    v21 = a1[8];
    if (v21)
      v22 = *(_DWORD *)(v21 + 28);
    else
      v22 = 0;
    v34 = *(_DWORD *)(v7 + 92);
    if (v34)
    {
      if (v34 == 2)
      {
        if (v22 >= 2)
        {
          v35 = 0;
          LODWORD(v36) = 0;
          v37 = 0;
          v38 = 0;
          v39 = v22;
          v40 = (v22 - 1);
          while (1)
          {
            v41 = 0;
            v42 = 0;
            v100 = 0;
            v43 = a1[8];
            v44 = *(_QWORD *)(*(_QWORD *)(v43 + 32) + 8 * v35);
            if (!*(_DWORD *)(*(_QWORD *)v44 + 4))
            {
              v45 = *(_QWORD *)(*(_QWORD *)v44 + 24);
              if (v45 == *(_QWORD *)(*(_QWORD *)(v43 + 16) + 24) && *(int *)(v44 + 16) >= 1)
              {
                v46 = *(_QWORD *)(v44 + 56);
                if (v46)
                {
                  v42 = sub_1ACC8240C(v44 + 32, v45, v46 + 32, (uint64_t *)&pStmt, &v100);
                  v41 = v100;
                }
                else
                {
                  v42 = 0;
                  v41 = *(_DWORD *)(*(_QWORD *)(v44 + 48) + 16);
                }
              }
              else
              {
                v41 = 0;
                v42 = 0;
              }
            }
            v47 = (v37 + 9);
            if (v47 > v36)
            {
              if ((_DWORD)v36)
                LODWORD(v48) = v36;
              else
                LODWORD(v48) = 64;
              v48 = (int)v48;
              do
              {
                v36 = v48;
                v48 *= 2;
              }
              while (v36 < v47);
              if (sqlite3_initialize())
                goto LABEL_152;
              v49 = sub_1ACB6BB48((uint64_t)v38, v36);
              if (!v49)
                goto LABEL_152;
              v38 = (char *)v49;
            }
            v50 = (int8x8_t *)&v38[v37];
            if (v41 > 0x7F)
            {
              if (v41 >> 14)
              {
                v51 = sub_1ACBF8034(v50, (int)v41);
              }
              else
              {
                v50->i8[0] = (v41 >> 7) | 0x80;
                v50->i8[1] = v41 & 0x7F;
                v51 = 2;
              }
            }
            else
            {
              v50->i8[0] = v41;
              v51 = 1;
            }
            v37 += v51;
            if (!v42 && ++v35 < v40)
              continue;
            goto LABEL_111;
          }
        }
        v39 = v22;
        v42 = 0;
        v38 = 0;
        v37 = 0;
        LODWORD(v36) = 0;
LABEL_111:
        if (!v42 && v39 >= 1)
        {
          v64 = 0;
          v65 = v39;
          while (1)
          {
            pStmt = 0;
            v100 = 0;
            v66 = a1[8];
            v67 = *(_QWORD *)(*(_QWORD *)(v66 + 32) + 8 * v64);
            if (*(_DWORD *)(*(_QWORD *)v67 + 4)
              || (v68 = *(_QWORD *)(*(_QWORD *)v67 + 24), v68 != *(_QWORD *)(*(_QWORD *)(v66 + 16) + 24))
              || *(int *)(v67 + 16) < 1)
            {
              v72 = 0;
            }
            else
            {
              v69 = *(_QWORD *)(v67 + 56);
              if (v69)
              {
                p_pStmt = &pStmt;
                v71 = &v100;
                v72 = sub_1ACC8240C(v67 + 32, v68, v69 + 32, (uint64_t *)&pStmt, &v100);
              }
              else
              {
                v72 = 0;
                v73 = *(_QWORD *)(v67 + 48);
                p_pStmt = (sqlite3_stmt **)(v73 + 8);
                v71 = (unsigned int *)(v73 + 16);
              }
              v74 = *v71;
              if ((_DWORD)v74)
              {
                v75 = *p_pStmt;
                v76 = (v74 + v37);
                if (v76 > v36)
                {
                  __srca = v75;
                  if ((_DWORD)v36)
                    LODWORD(v77) = v36;
                  else
                    LODWORD(v77) = 64;
                  v77 = (int)v77;
                  do
                  {
                    v36 = v77;
                    v77 *= 2;
                  }
                  while (v36 < v76);
                  if (sqlite3_initialize())
                    break;
                  v78 = sub_1ACB6BB48((uint64_t)v38, v36);
                  if (!v78)
                    break;
                  v38 = (char *)v78;
                  v75 = __srca;
                }
                memcpy(&v38[v37], v75, v74);
                v37 += v74;
              }
            }
            if (!v72 && ++v64 < v65)
              continue;
            break;
          }
        }
      }
      else
      {
        v38 = 0;
        v37 = 0;
      }
LABEL_152:
      if (a2 && (v37 & 0x80000000) == 0)
      {
        sub_1ACBC69D0((uint64_t)a2, v38, v37, 0, (uint64_t (*)(uint64_t))sqlite3_free);
        return 0;
      }
      v17 = 97348;
      goto LABEL_19;
    }
    __src = v22;
    v52 = (v22 - 1);
    if (v22 > 1)
    {
      v53 = 0;
      v54 = 0;
      v37 = 0;
      v38 = 0;
      while (1)
      {
        v56 = a1[8];
        v57 = *(_DWORD **)(*(_QWORD *)(v56 + 32) + 8 * v53);
        if (*(_DWORD *)(*(_QWORD *)v57 + 4)
          || *(_QWORD *)(*(_QWORD *)v57 + 24) != *(_QWORD *)(*(_QWORD *)(v56 + 16) + 24))
        {
          v58 = 0;
        }
        else
        {
          v58 = v57[4];
        }
        v59 = (v37 + 9);
        if (v59 > v54)
        {
          if (v54)
            LODWORD(v60) = v54;
          else
            LODWORD(v60) = 64;
          v60 = (int)v60;
          do
          {
            v61 = v60;
            v60 *= 2;
          }
          while (v61 < v59);
          if (sqlite3_initialize())
            goto LABEL_89;
          v62 = sub_1ACB6BB48((uint64_t)v38, v61);
          if (!v62)
            goto LABEL_89;
          v38 = (char *)v62;
          v54 = v61;
        }
        v63 = (int8x8_t *)&v38[v37];
        if (v58 <= 0x7F)
        {
          v63->i8[0] = v58;
          v55 = 1;
        }
        else if (v58 >> 14)
        {
          v55 = sub_1ACBF8034(v63, (int)v58);
        }
        else
        {
          v63->i8[0] = (v58 >> 7) | 0x80;
          v63->i8[1] = v58 & 0x7F;
          v55 = 2;
        }
        v37 += v55;
LABEL_89:
        if (++v53 == v52)
          goto LABEL_136;
      }
    }
    v38 = 0;
    v37 = 0;
    v54 = 0;
LABEL_136:
    if (__src < 1)
      goto LABEL_152;
    v79 = 0;
    v80 = __src;
    while (1)
    {
      v81 = a1[8];
      v82 = *(_QWORD *)(*(_QWORD *)(v81 + 32) + 8 * v79);
      if (!*(_DWORD *)(*(_QWORD *)v82 + 4)
        && *(_QWORD *)(*(_QWORD *)v82 + 24) == *(_QWORD *)(*(_QWORD *)(v81 + 16) + 24))
      {
        v83 = *(unsigned int *)(v82 + 16);
        if ((_DWORD)v83)
        {
          v84 = *(const void **)(v82 + 8);
          v85 = (v83 + v37);
          if (v85 > v54)
          {
            __srcb = *(void **)(v82 + 8);
            if (v54)
              LODWORD(v86) = v54;
            else
              LODWORD(v86) = 64;
            v86 = (int)v86;
            do
            {
              v87 = v86;
              v86 *= 2;
            }
            while (v87 < v85);
            if (sqlite3_initialize())
              goto LABEL_139;
            v88 = sub_1ACB6BB48((uint64_t)v38, v87);
            if (!v88)
              goto LABEL_139;
            v38 = (char *)v88;
            v54 = v87;
            v84 = __srcb;
          }
          memcpy(&v38[v37], v84, v83);
          v37 += v83;
        }
      }
LABEL_139:
      if (++v79 == v80)
        goto LABEL_152;
    }
  }
  v13 = a1[14];
  if (v13)
    goto LABEL_17;
  v100 = 0;
  v24 = (const char *)a1[12];
  if (!a1[13])
    goto LABEL_171;
  v25 = (unsigned __int8 *)sub_1ACC78590(&v100, "SELECT %s", (const char *)a1[13]);
  if (!v25)
  {
    v16 = v100;
    goto LABEL_170;
  }
  v27 = v25;
  pStmt = 0;
  v16 = sub_1ACB5C66C(*(_QWORD *)v7, v25, 0xFFFFFFFFLL, 129, 0, &pStmt, 0, v26);
  v28 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_48;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v27);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v27);
  v27 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v28 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_48:
    (*v28)(v27);
  }
  if ((_DWORD)v16)
    goto LABEL_170;
  v29 = sqlite3_step(pStmt);
  v30 = (unsigned __int16 *)pStmt;
  if (v29 != 100)
  {
    v16 = sqlite3_finalize(pStmt);
    goto LABEL_170;
  }
  if (pStmt)
  {
    v31 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    if (v31)
    {
      xmmword_1ECD3B1C0(v31);
      v32 = *(_QWORD *)(*(_QWORD *)v30 + 24);
      v33 = v30[130];
      if (v32)
        xmmword_1ECD3B1D0(v32);
    }
    else
    {
      v33 = *((unsigned __int16 *)pStmt + 130);
    }
  }
  else
  {
    v33 = 0;
  }
  *((_DWORD *)a1 + 30) = v33;
  if (!sqlite3_initialize())
  {
    v89 = (void *)sub_1ACB5D828((8 * v33));
    if (v89)
    {
      v90 = (uint64_t)v89;
      bzero(v89, (8 * v33));
LABEL_165:
      a1[16] = v90;
      if (*((int *)a1 + 30) >= 1)
      {
        v91 = 0;
        do
        {
          *(_QWORD *)(a1[16] + 8 * v91) = sqlite3_column_value(pStmt, v91);
          ++v91;
        }
        while (v91 < *((int *)a1 + 30));
      }
      v16 = 0;
      goto LABEL_169;
    }
  }
  if (!v33)
  {
    v90 = 0;
    goto LABEL_165;
  }
  a1[16] = 0;
  v16 = 7;
LABEL_169:
  a1[17] = (uint64_t)pStmt;
LABEL_170:
  if ((_DWORD)v16)
  {
LABEL_184:
    a1[14] = 0;
    return v16;
  }
LABEL_171:
  v13 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 48);
  if (!v13)
  {
LABEL_183:
    *(_QWORD *)(v6 + 16) = sqlite3_mprintf("no such function: %s", v24);
    v16 = 1;
    goto LABEL_184;
  }
  while (1)
  {
    v92 = *(unsigned __int8 **)(v13 + 8);
    if (v24)
    {
      if (v92)
      {
        for (i = v24; ; ++i)
        {
          v94 = *(unsigned __int8 *)i;
          v95 = *v92;
          if ((_DWORD)v94 == (_DWORD)v95)
          {
            if (!*i)
              goto LABEL_182;
          }
          else if (byte_1ACCB6333[v94] != byte_1ACCB6333[v95])
          {
            goto LABEL_174;
          }
          ++v92;
        }
      }
      goto LABEL_174;
    }
    if (!v92)
      break;
LABEL_174:
    v13 = *(_QWORD *)(v13 + 40);
    if (!v13)
      goto LABEL_183;
  }
LABEL_182:
  a1[14] = v13;
LABEL_17:
  v14 = *((unsigned int *)a1 + 30);
  v15 = a1[16];
  a1[18] = v13;
  (*(void (**)(void *, uint64_t *, sqlite3_context *, uint64_t, uint64_t))(v13 + 24))(&unk_1E5C75210, a1, a2, v14, v15);
  v16 = 0;
  a1[18] = 0;
  return v16;
}

uint64_t sub_1ACC73294(uint64_t a1, sqlite3_int64 *a2)
{
  int v3;
  uint64_t v4;
  sqlite3_int64 v5;

  v3 = *(_DWORD *)(a1 + 32);
  if ((v3 - 1) >= 2)
  {
    if (v3 == 3)
    {
      v5 = 0;
      goto LABEL_9;
    }
    if (v3 != 4)
    {
      v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 56), 0);
      goto LABEL_9;
    }
  }
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 24);
LABEL_9:
  *a2 = v5;
  return 0;
}

uint64_t sub_1ACC7330C(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t i;
  __int16 v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  int v21;
  uint64_t v22;
  int v23;
  char *v24;
  const char *v25;
  char *j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  char *k;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *m;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *n;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *ii;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *jj;
  int v49;
  uint64_t v50;
  __int16 v51;
  unint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  signed int v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  __int16 v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  _DWORD *v99;
  char *v100;
  int v101;
  unsigned int v103;
  sqlite3_stmt *v104;
  int v105;
  BOOL v106;
  sqlite3_int64 v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  sqlite3_stmt *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  size_t v129;
  int v130;
  char v131;
  sqlite3_stmt *v132;
  int *v133;
  sqlite3_int64 v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  const unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (**v147)(uint64_t);
  uint64_t v148;
  _DWORD *v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int *v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t (**v163)(unsigned __int8 *);
  uint64_t v164;
  uint64_t v165;
  const void *v166;
  int v167;
  int v168;
  _DWORD *v169;
  _DWORD *v170;
  int v171;
  signed int v172;
  unsigned __int16 *v173;
  char *v174;
  unsigned int v175;
  int v176;
  BOOL v177;
  BOOL v178;
  int v179;
  unsigned int v180;
  char *v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  size_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  char *v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  size_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  void *v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  void (**v240)(void *);
  uint64_t v241;
  void (**v242)(void *);
  uint64_t (**v243)(_QWORD);
  int v244;
  _DWORD *v245;
  uint64_t v246;
  _DWORD *v247;
  _DWORD *v248;
  uint64_t (**v249)(_QWORD);
  int v250;
  uint64_t v251;
  int *v252;
  int *v253;
  uint64_t v254;
  int v255;
  signed int v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t (**v259)(_QWORD);
  uint64_t v260;
  _DWORD *v261;
  _DWORD *v262;
  _DWORD *v263;
  _DWORD *v264;
  unsigned int v265;
  sqlite3_stmt *v266;
  _BOOL4 v267;
  uint64_t (**v268)(_QWORD);
  uint64_t v269;
  uint64_t (**v270)(_QWORD);
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  sqlite3_int64 v275;
  void (**v276)(sqlite3_int64);
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t (**v297)(void *);
  uint64_t v298;
  _QWORD *v299;
  char v300;
  int v301;
  _DWORD *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unsigned int *v306;
  int v307;
  unsigned int v308;
  _QWORD *v309;
  int *v310;
  int v311;
  int v312;
  uint64_t v313;
  unsigned int v314;
  int v315;
  int v316;
  unsigned int *v317;
  _DWORD *v318;
  unsigned int v319;
  unsigned int v320;
  char *__dst;
  void *v322;
  _DWORD *v323;
  _DWORD *v324;
  unsigned int v325;
  int v326;
  sqlite3_stmt *v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  sqlite3_int64 v332;
  uint64_t v333;
  sqlite3_stmt *v334;
  sqlite3_stmt *v335[2];

  v8 = (uint64_t *)a1[3];
  v325 = 0;
  v9 = v8;
  if (!*((_DWORD *)v8 + 34))
  {
    v13 = a1[4];
    v14 = sub_1ACC7ABF8(v13);
    sub_1ACC7A15C(v14);
    v15 = *(unsigned int *)(v13 + 60);
    *(_DWORD *)(v13 + 60) = 0;
    v325 = v15;
    if ((_DWORD)v15)
      return v15;
    v9 = (uint64_t *)a1[3];
  }
  v9[23] = (uint64_t)(a1 + 2);
  for (i = *(_QWORD *)(a1[6] + 72); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(_QWORD **)i == a1)
      *(_DWORD *)(i + 80) |= 0x20u;
  }
  if (!*a3)
  {
    sub_1ACBBE20C(97202);
    v12 = 0;
    if (!*((_DWORD *)v8 + 16))
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = *(_WORD *)(*a3 + 20);
  if (((0xAAAAAAAAAAAAAAAALL >> v11) & 1) == 0)
  {
    v12 = byte_1ACCB6445[v11 & 0x3F];
    if (!*((_DWORD *)v8 + 16))
      goto LABEL_19;
    goto LABEL_18;
  }
  v16 = *((int *)v8 + 6) + 2;
  v17 = a3[v16];
  if (v17)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v17 + 20)) & 1) != 0)
    {
      v12 = 5;
      if (!*((_DWORD *)v8 + 16))
        goto LABEL_19;
LABEL_18:
      if (!*((_DWORD *)v8 + 17))
      {
        v21 = 4;
        if (v12 != 1)
          goto LABEL_75;
        goto LABEL_73;
      }
LABEL_19:
      v18 = *v8;
      if (*v8)
      {
        v19 = *(unsigned __int8 *)(v18 + 113);
        switch(v19)
        {
          case 186:
            goto LABEL_23;
          case 118:
            v49 = *(unsigned __int8 *)(v18 + 108);
            if ((v49 - 1) < 5)
            {
              v21 = byte_1ACCB6648[v49 - 1];
              if (v12 != 1)
                goto LABEL_75;
              goto LABEL_73;
            }
            goto LABEL_72;
          case 109:
LABEL_23:
            v20 = "unopened";
            break;
          default:
            v20 = "invalid";
            break;
        }
      }
      else
      {
        v20 = "NULL";
      }
      sqlite3_log(21, "API call with %s database connection pointer", v20);
LABEL_72:
      sub_1ACBBE20C(162422);
      v21 = 0;
      if (v12 != 1)
        goto LABEL_75;
LABEL_73:
      if (*((_DWORD *)v8 + 16) == 1 && !*((_DWORD *)v8 + 17))
      {
        v65 = "DELETE from";
        if (a2 > 1)
          v65 = "UPDATE";
        a1[2] = sqlite3_mprintf("cannot %s contentless fts5 table: %s", v65, (const char *)v8[2]);
        v15 = 1;
        goto LABEL_238;
      }
LABEL_75:
      if (a2 == 1)
      {
        v50 = *a3;
        if (*a3)
        {
          v51 = *(_WORD *)(v50 + 20);
          if ((v51 & 0x24) != 0)
          {
            v52 = *(_QWORD *)v50;
LABEL_86:
            v56 = sub_1ACC8B5B8(a1[5], v52, 0);
            goto LABEL_87;
          }
          if ((v51 & 8) != 0)
          {
            v71 = *(double *)v50;
            if (*(double *)v50 >= -9.22337204e18)
            {
              if (v71 <= 9.22337204e18)
                v52 = (uint64_t)v71;
              else
                v52 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v52 = 0x8000000000000000;
            }
            goto LABEL_86;
          }
          if ((v51 & 0x12) != 0 && *(_QWORD *)(v50 + 8))
          {
            v52 = sub_1ACBF2FC0(v50);
            goto LABEL_86;
          }
        }
        else
        {
          sub_1ACBBE20C(89699);
        }
        v52 = 0;
        goto LABEL_86;
      }
      v53 = a3[1];
      if (!v53)
      {
        sub_1ACBBE20C(97202);
        v15 = 20;
        goto LABEL_238;
      }
      v54 = *(_WORD *)(v53 + 20);
      if (((0x4000000040004uLL >> v54) & 1) != 0)
      {
        sub_1ACBCA9CC(a3[1], 0);
        v54 = *(_WORD *)(v53 + 20);
      }
      v55 = v54 & 0x3F;
      if (((0xAAAAAAAAFAFAFAFALL >> (v54 & 0x3F)) & 1) == 0)
      {
        v15 = 20;
        goto LABEL_238;
      }
      if (v12 == 1)
      {
        v58 = *a3;
        if (*a3)
        {
          v59 = *(_WORD *)(v58 + 20);
          if ((v59 & 0x24) != 0)
          {
            v60 = *(_QWORD *)v58;
            goto LABEL_130;
          }
          if ((v59 & 8) != 0)
          {
            v89 = *(double *)v58;
            if (*(double *)v58 >= -9.22337204e18)
            {
              if (v89 <= 9.22337204e18)
                v60 = (uint64_t)v89;
              else
                v60 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v60 = 0x8000000000000000;
            }
LABEL_130:
            v73 = a3[1];
            if (v73)
            {
              v74 = *(_WORD *)(v73 + 20);
              if ((v74 & 0x24) != 0)
              {
                v75 = *(_QWORD *)v73;
                goto LABEL_137;
              }
              if ((v74 & 8) != 0)
              {
                v90 = *(double *)v73;
                if (*(double *)v73 >= -9.22337204e18)
                {
                  if (v90 <= 9.22337204e18)
                    v75 = (uint64_t)v90;
                  else
                    v75 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  v75 = 0x8000000000000000;
                }
                goto LABEL_137;
              }
              if ((v74 & 0x12) != 0 && *(_QWORD *)(v73 + 8))
              {
                v75 = sub_1ACBF2FC0(v73);
LABEL_137:
                if (((0xFFFFFFFFAFAFAFAFLL >> v55) & 1) != 0 || v60 == v75)
                {
                  v56 = sub_1ACC8B5B8(a1[5], v60, 0);
                  if ((_DWORD)v56)
                    goto LABEL_87;
                  v56 = sub_1ACC8C1FC((uint64_t *)a1[5], (uint64_t)a3, a4);
                  if ((_DWORD)v56)
                    goto LABEL_87;
                }
                else
                {
                  v76 = (uint64_t *)a1[5];
                  if (v21 == 5)
                  {
                    v325 = sub_1ACC8B5B8((uint64_t)v76, v60, 0);
                    if (!v325)
                      v325 = sub_1ACC8B5B8(a1[5], v75, 0);
                    sub_1ACC8C19C(&v325, (uint64_t)a1, (uint64_t)a3, a4);
                    v57 = 1;
                    v15 = v325;
                    goto LABEL_88;
                  }
                  v15 = sub_1ACC8C1FC(v76, (uint64_t)a3, a4);
                  if ((_DWORD)v15)
                    goto LABEL_238;
                  v15 = sub_1ACC8B5B8(a1[5], v60, 0);
                  if ((_DWORD)v15)
                    goto LABEL_238;
                }
                v56 = sub_1ACC8C4F0(a1[5], (uint64_t)a3, *a4);
LABEL_87:
                v15 = v56;
                v57 = 1;
                goto LABEL_88;
              }
            }
            else
            {
              sub_1ACBBE20C(89699);
            }
            v75 = 0;
            goto LABEL_137;
          }
          if ((v59 & 0x12) != 0 && *(_QWORD *)(v58 + 8))
          {
            v60 = sub_1ACBF2FC0(v58);
            goto LABEL_130;
          }
        }
        else
        {
          sub_1ACBBE20C(89699);
        }
        v60 = 0;
        goto LABEL_130;
      }
      v57 = 0;
      if (v21 != 5 || ((0x50505050uLL >> v55) & 1) == 0)
      {
LABEL_165:
        v77 = sub_1ACC8C1FC((uint64_t *)a1[5], (uint64_t)a3, a4);
        if ((_DWORD)v77)
          v15 = v77;
        else
          v15 = sub_1ACC8C4F0(a1[5], (uint64_t)a3, *a4);
LABEL_88:
        if (v57 && !(_DWORD)v15)
        {
          if (*((_DWORD *)v8 + 44) && *((_DWORD *)v8 + 32) == 4)
          {
            v15 = sub_1ACC7A4F0((uint64_t *)a1[5], "version", 0, 5);
            if (!(_DWORD)v15)
              *((_DWORD *)v8 + 32) = 5;
          }
          else
          {
            v15 = 0;
          }
        }
        goto LABEL_238;
      }
      v66 = a3[1];
      if (v66)
      {
        v67 = *(_WORD *)(v66 + 20);
        if ((v67 & 0x24) != 0)
        {
          v68 = *(_QWORD *)v66;
          goto LABEL_164;
        }
        if ((v67 & 8) != 0)
        {
          v93 = *(double *)v66;
          if (*(double *)v66 >= -9.22337204e18)
          {
            if (v93 <= 9.22337204e18)
              v68 = (uint64_t)v93;
            else
              v68 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v68 = 0x8000000000000000;
          }
LABEL_164:
          v15 = sub_1ACC8B5B8(a1[5], v68, 0);
          v57 = 1;
          if ((_DWORD)v15)
            goto LABEL_88;
          goto LABEL_165;
        }
        if ((v67 & 0x12) != 0 && *(_QWORD *)(v66 + 8))
        {
          v68 = sub_1ACBF2FC0(v66);
          goto LABEL_164;
        }
      }
      else
      {
        sub_1ACBBE20C(89699);
      }
      v68 = 0;
      goto LABEL_164;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v16 = *((int *)v8 + 6) + 2;
  }
  v22 = a3[v16];
  if (!v22)
    goto LABEL_36;
  v23 = *(unsigned __int16 *)(v22 + 20);
  if ((~v23 & 0x202) == 0 && *(_BYTE *)(v22 + 22) == 1)
  {
    v24 = *(char **)(v22 + 8);
    if (!*((_DWORD *)v8 + 16))
      goto LABEL_45;
LABEL_37:
    if (v24)
    {
      v25 = "delete";
      for (j = v24; ; ++j)
      {
        v27 = *(unsigned __int8 *)v25;
        v28 = *j;
        if ((_DWORD)v27 == (_DWORD)v28)
        {
          if (!*v25)
          {
            if (!*((_DWORD *)v8 + 17))
            {
              v72 = sub_1ACC8B4E4((uint64_t)a1, (uint64_t)a3);
              goto LABEL_192;
            }
            sub_1ACC8B4A4((uint64_t)a1, "'delete' may not be used with a contentless_delete=1 table");
            goto LABEL_150;
          }
        }
        else if (byte_1ACCB6333[v27] != byte_1ACCB6333[v28])
        {
          goto LABEL_45;
        }
        ++v25;
      }
    }
    v29 = a3[*((int *)v8 + 6) + 3];
    v326 = 0;
LABEL_120:
    v69 = a1[4];
    v70 = sub_1ACC7ABF8(v69);
    sub_1ACC7A15C(v70);
    v15 = *(unsigned int *)(v69 + 60);
    *(_DWORD *)(v69 + 60) = 0;
    if ((_DWORD)v15)
      goto LABEL_238;
    v15 = sub_1ACC7BD5C(a1[3], v24, (sqlite3_value *)v29, &v326);
    if ((_DWORD)v15)
      goto LABEL_238;
    if (v326)
    {
      v15 = 1;
      goto LABEL_238;
    }
    v72 = sub_1ACC7A4F0((uint64_t *)a1[5], v24, (const sqlite3_value *)v29, 0);
    goto LABEL_192;
  }
  if ((v23 & 1) != 0)
  {
LABEL_36:
    v24 = 0;
    if (!*((_DWORD *)v8 + 16))
      goto LABEL_45;
    goto LABEL_37;
  }
  v24 = (char *)sub_1ACBF2B64((int *)v22, 1);
  if (*((_DWORD *)v8 + 16))
    goto LABEL_37;
LABEL_45:
  v29 = a3[*((int *)v8 + 6) + 3];
  v30 = a1[3];
  v326 = 0;
  if (!v24)
    goto LABEL_120;
  v31 = "delete-all";
  for (k = v24; ; ++k)
  {
    v33 = *(unsigned __int8 *)v31;
    v34 = *k;
    if ((_DWORD)v33 != (_DWORD)v34)
      break;
    if (!*v31)
    {
      if (*(_DWORD *)(v30 + 64))
      {
        v72 = sub_1ACC8C844(a1[5]);
        goto LABEL_192;
      }
      sub_1ACC8B4A4((uint64_t)a1, "'delete-all' may only be used with a contentless or external content fts5 table");
LABEL_150:
      v15 = 1;
      goto LABEL_238;
    }
LABEL_48:
    ++v31;
  }
  if (byte_1ACCB6333[v33] == byte_1ACCB6333[v34])
    goto LABEL_48;
  v35 = "rebuild";
  for (m = v24; ; ++m)
  {
    v37 = *(unsigned __int8 *)v35;
    v38 = *m;
    if ((_DWORD)v37 == (_DWORD)v38)
    {
      if (*v35)
        goto LABEL_53;
      if (*(_DWORD *)(v30 + 64) == 1)
      {
        sub_1ACC8B4A4((uint64_t)a1, "'rebuild' may not be used with a contentless fts5 table");
        goto LABEL_150;
      }
      v86 = a1[5];
      v328 = 0uLL;
      v87 = *(_QWORD *)v86;
      v335[0] = 0;
      v332 = v86;
      v333 = 0;
      v88 = sub_1ACC8C844(v86);
      if ((_DWORD)v88 || (v88 = sub_1ACC8A7FC(v86, 1), (_DWORD)v88))
      {
        v15 = v88;
        sqlite3_reset(0);
        goto LABEL_238;
      }
      v94 = sub_1ACC7A800((uint64_t *)v86, 10, v335, 0);
      if ((_DWORD)v94)
      {
        v15 = v94;
        sqlite3_reset(v335[0]);
        goto LABEL_238;
      }
      v103 = 0;
LABEL_241:
      v104 = v335[0];
      v105 = sqlite3_step(v335[0]);
      v106 = v105 == 100;
      if (v105 != 100)
      {
        v15 = 0;
        goto LABEL_318;
      }
      v107 = sqlite3_column_int64(v104, 0);
      v108 = sub_1ACC8C95C(*(uint64_t **)(v86 + 8), 0, v107);
      LODWORD(v333) = 0;
      if ((_DWORD)v108)
      {
        v15 = v108;
LABEL_317:
        ++*(_QWORD *)(v86 + 24);
        v106 = 1;
LABEL_318:
        v146 = v328;
        if ((_QWORD)v328)
        {
          v147 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_324;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v146);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v146);
          v146 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v147 = &xmmword_1ECD3B1D0;
LABEL_324:
            (*v147)(v146);
          }
        }
        v148 = sqlite3_reset(v335[0]);
        if (v106)
          goto LABEL_238;
        v15 = v148;
        if ((_DWORD)v148)
          goto LABEL_238;
        v72 = sub_1ACC8CE74((_QWORD *)v86);
LABEL_192:
        v15 = v72;
        goto LABEL_238;
      }
      v109 = 0;
      v110 = 0;
      while (1)
      {
        if (v109 >= *(_DWORD *)(v87 + 24))
        {
          *((_QWORD *)&v328 + 1) = __PAIR64__(v103, v110);
          ++*(_QWORD *)(v86 + 24);
          v122 = sub_1ACC8CC58((uint64_t *)v86, v107, (uint64_t)&v328);
          if ((_DWORD)v122)
          {
            v15 = v122;
            v106 = 1;
            goto LABEL_318;
          }
          goto LABEL_241;
        }
        v15 = 0;
        HIDWORD(v333) = 0;
        if (!*(_BYTE *)(*(_QWORD *)(v87 + 40) + v109))
        {
          v113 = v335[0];
          v15 = (uint64_t)sqlite3_column_text(v335[0], v109 + 1);
          v114 = sqlite3_column_bytes(v113, v333 + 1);
          if (v15)
            v15 = (*(uint64_t (**)(_QWORD, sqlite3_int64 *, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(_QWORD *)(v87 + 112) + 16))(*(_QWORD *)(v87 + 104), &v332, 4, v15, v114, sub_1ACC8CAEC);
        }
        v115 = SHIDWORD(v333);
        v116 = v110 + 9;
        if (v116 <= v103)
          break;
        if (v103)
          LODWORD(v117) = v103;
        else
          LODWORD(v117) = 64;
        v117 = (int)v117;
        do
        {
          v118 = v117;
          v117 *= 2;
        }
        while (v118 < v116);
        v119 = v328;
        if (!sqlite3_initialize())
        {
          v120 = sub_1ACB6BB48(v119, v118);
          if (v120)
          {
            *(_QWORD *)&v328 = v120;
            v103 = v118;
            goto LABEL_261;
          }
        }
        v15 = 7;
LABEL_247:
        v112 = v333;
        *(_QWORD *)(*(_QWORD *)(v86 + 32) + 8 * (int)v333) += SHIDWORD(v333);
        v109 = v112 + 1;
        LODWORD(v333) = v112 + 1;
        if ((_DWORD)v15)
          goto LABEL_317;
      }
      v120 = v328;
LABEL_261:
      v121 = (int8x8_t *)(v120 + (int)v110);
      if (v115 <= 0x7F)
      {
        v121->i8[0] = v115;
        v111 = 1;
      }
      else if (v115 >> 14)
      {
        v111 = sub_1ACBF8034(v121, v115);
      }
      else
      {
        v121->i8[0] = (v115 >> 7) | 0x80;
        v121->i8[1] = v115 & 0x7F;
        v111 = 2;
      }
      v110 += v111;
      goto LABEL_247;
    }
    if (byte_1ACCB6333[v37] != byte_1ACCB6333[v38])
      break;
LABEL_53:
    ++v35;
  }
  v39 = "optimize";
  for (n = v24; ; ++n)
  {
    v41 = *(unsigned __int8 *)v39;
    v42 = *n;
    if ((_DWORD)v41 != (_DWORD)v42)
      break;
    if (!*v39)
    {
      v78 = *(_QWORD *)(a1[5] + 8);
      sub_1ACC8D0C0((_DWORD *)v78);
      v79 = sub_1ACC7ABF8(v78);
      v80 = *(_DWORD **)(v78 + 144);
      if (v80)
      {
        sub_1ACC7A15C(v80);
        *(_QWORD *)(v78 + 144) = 0;
      }
      if (!v79)
        goto LABEL_237;
      v81 = sub_1ACC92A38(v78, v79);
      *(_QWORD *)&v328 = v81;
      sub_1ACC7A15C(v79);
      if (!v81)
        goto LABEL_237;
      v82 = 0;
      v83 = -1;
      do
      {
        v84 = *(_DWORD *)&v81[v82 + 36];
        v82 += 16;
        ++v83;
      }
      while (!v84);
      if (!*(_DWORD *)(v78 + 60))
      {
        do
        {
          v81 = (char *)v328;
          if (*(int *)(v328 + v82 + 20) < 1)
            goto LABEL_179;
          LODWORD(v332) = 1000;
          sub_1ACC90BE0(v78, (int **)&v328, v83, (int *)&v332);
        }
        while (!*(_DWORD *)(v78 + 60));
        v81 = (char *)v328;
      }
LABEL_179:
      sub_1ACC797DC((unsigned __int8 *)v78, (uint64_t)v81);
      v85 = v81;
      goto LABEL_236;
    }
LABEL_58:
    ++v39;
  }
  if (byte_1ACCB6333[v41] == byte_1ACCB6333[v42])
    goto LABEL_58;
  v43 = "merge";
  for (ii = v24; ; ++ii)
  {
    v45 = *(unsigned __int8 *)v43;
    v46 = *ii;
    if ((_DWORD)v45 == (_DWORD)v46)
    {
      if (*v43)
        goto LABEL_63;
      if (v29)
      {
        v91 = *(_WORD *)(v29 + 20);
        if ((v91 & 0x24) != 0)
        {
          v92 = *(_QWORD *)v29;
          goto LABEL_226;
        }
        if ((v91 & 8) != 0)
        {
          LODWORD(v95) = -1;
          if (*(double *)v29 <= 9.22337204e18)
            v95 = (uint64_t)*(double *)v29;
          if (*(double *)v29 >= -9.22337204e18)
            LODWORD(v92) = v95;
          else
            LODWORD(v92) = 0;
LABEL_226:
          v78 = *(_QWORD *)(a1[5] + 8);
          sub_1ACC8D0C0((_DWORD *)v78);
          v96 = (char *)sub_1ACC7ABF8(v78);
          *(_QWORD *)&v328 = v96;
          if (!v96)
          {
LABEL_237:
            v15 = *(unsigned int *)(v78 + 60);
            *(_DWORD *)(v78 + 60) = 0;
            goto LABEL_238;
          }
          v97 = v96;
          v98 = *(_DWORD *)(*(_QWORD *)v78 + 148);
          v99 = *(_DWORD **)(v78 + 144);
          if (v99)
          {
            sub_1ACC7A15C(v99);
            *(_QWORD *)(v78 + 144) = 0;
          }
          if ((v92 & 0x80000000) != 0)
          {
            v100 = sub_1ACC92A38(v78, v97);
            sub_1ACC7A15C(v97);
            *(_QWORD *)&v328 = v100;
            if (!v100)
            {
              v85 = 0;
LABEL_236:
              sub_1ACC7A15C(v85);
              goto LABEL_237;
            }
            LODWORD(v92) = -(int)v92;
            v98 = 1;
            v97 = v100;
          }
          if (*((_DWORD *)v97 + 7))
          {
            v101 = sub_1ACC90994((_DWORD *)v78, (int **)&v328, v92, v98);
            v97 = (char *)v328;
            if (v101)
              sub_1ACC797DC((unsigned __int8 *)v78, v328);
          }
          v85 = v97;
          goto LABEL_236;
        }
        if ((v91 & 0x12) != 0 && *(_QWORD *)(v29 + 8))
        {
          LODWORD(v92) = sub_1ACBF2FC0(v29);
          goto LABEL_226;
        }
      }
      else
      {
        sub_1ACBBE20C(89699);
      }
      LODWORD(v92) = 0;
      goto LABEL_226;
    }
    if (byte_1ACCB6333[v45] != byte_1ACCB6333[v46])
      break;
LABEL_63:
    ++v43;
  }
  v47 = "integrity-check";
  for (jj = v24; ; ++jj)
  {
    v61 = *(unsigned __int8 *)v47;
    v62 = *jj;
    if ((_DWORD)v61 == (_DWORD)v62)
      break;
    if (byte_1ACCB6333[v61] != byte_1ACCB6333[v62])
      goto LABEL_120;
LABEL_105:
    ++v47;
  }
  if (*v47)
    goto LABEL_105;
  if (!v29)
  {
    sub_1ACBBE20C(89699);
LABEL_215:
    v64 = 0;
    goto LABEL_275;
  }
  v63 = *(_WORD *)(v29 + 20);
  if ((v63 & 0x24) != 0)
  {
    v64 = *(_DWORD *)v29;
    goto LABEL_275;
  }
  if ((v63 & 8) == 0)
  {
    if ((v63 & 0x12) != 0 && *(_QWORD *)(v29 + 8))
    {
      v64 = sub_1ACBF2FC0(v29);
      goto LABEL_275;
    }
    goto LABEL_215;
  }
  LODWORD(v123) = -1;
  if (*(double *)v29 <= 9.22337204e18)
    v123 = (uint64_t)*(double *)v29;
  if (*(double *)v29 >= -9.22337204e18)
    v64 = v123;
  else
    v64 = 0;
LABEL_275:
  v124 = (uint64_t *)a1[5];
  v125 = *v124;
  v327 = 0;
  v328 = 0u;
  v329 = 0u;
  v330 = v125;
  v126 = *(int *)(v125 + 24);
  if (sqlite3_initialize() || (v127 = (_QWORD *)sub_1ACB5D828(12 * v126)) == 0)
  {
    v15 = 7;
    goto LABEL_238;
  }
  v128 = v127;
  v129 = *(int *)(v125 + 24);
  bzero(v127, v129 * 8);
  v130 = *(_DWORD *)(v125 + 64);
  if (v130)
  {
    v131 = 1;
    if (!v64 || v130 != 2)
    {
LABEL_333:
      v149 = (_DWORD *)v124[1];
      v150 = v329;
      v301 = *(_DWORD *)(*(_QWORD *)v149 + 92);
      v332 = 0;
      v333 = 0;
      v331 = 0;
      v151 = sub_1ACC7ABF8((uint64_t)v149);
      if (!v151)
      {
        v324 = v149 + 15;
        goto LABEL_594;
      }
      v298 = v150;
      v299 = v128;
      v300 = v131;
      v152 = v151[7];
      v302 = v151;
      if (v152 >= 1)
      {
        v153 = 0;
        while (1)
        {
          v310 = &v151[4 * v153 + 9];
          if (*v310 >= 1)
            break;
LABEL_337:
          if (++v153 >= v152)
            goto LABEL_579;
        }
        v303 = v153;
        v154 = 0;
        v309 = &v151[4 * v153 + 10];
        while (1)
        {
          v156 = (unsigned int *)(*v309 + 56 * v154);
          v157 = *(_QWORD *)v149;
          v158 = *(_DWORD *)(*(_QWORD *)v149 + 128);
          v334 = 0;
          v159 = v156[1];
          v318 = v156 + 1;
          if (v159)
            break;
LABEL_343:
          if (++v154 >= *v310)
          {
            v151 = v302;
            v153 = v303;
            v152 = v302[7];
            goto LABEL_337;
          }
        }
        v313 = v154;
        v306 = v156 + 2;
        v319 = v156[2];
        v160 = (unsigned __int8 *)sqlite3_mprintf("SELECT segid, term, (pgno>>1), (pgno&1) FROM %Q.'%q_idx' WHERE segid=%d ORDER BY 1, 2", *(_QWORD *)(v157 + 8), *(_QWORD *)(v157 + 16), *v156);
        v162 = v160;
        v317 = v156;
        if (v149[15])
        {
          v307 = v158;
          v304 = v157;
          if (!v160)
            goto LABEL_341;
        }
        else
        {
          if (!v160)
          {
            v149[15] = 7;
LABEL_341:
            v155 = sqlite3_finalize(v334);
            v154 = v313;
            if (!v149[15])
              v149[15] = v155;
            goto LABEL_343;
          }
          v307 = v158;
          v304 = v157;
          v149[15] = sub_1ACB5C66C(**(_QWORD **)v149, v160, 0xFFFFFFFFLL, 133, 0, &v334, 0, v161);
        }
        v163 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v162);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v162);
          v162 = (unsigned __int8 *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
          {
LABEL_356:
            if (v149[15])
              goto LABEL_341;
            v164 = v159 - 1;
            while (2)
            {
              if (sqlite3_step(v334) != 100)
                goto LABEL_341;
              v166 = sqlite3_column_blob(v334, 1);
              v167 = sqlite3_column_bytes(v334, 1);
              v165 = sqlite3_column_int(v334, 2);
              v168 = sqlite3_column_int(v334, 3);
              if ((int)v165 < *v318)
              {
                v165 = v164;
                goto LABEL_359;
              }
              v311 = v168;
              v169 = sub_1ACC7B8EC((uint64_t)v149, ((unint64_t)*v317 << 37) + (int)v165);
              if (!v169)
                goto LABEL_341;
              v170 = v169;
              v312 = v164;
              v171 = v169[2];
              v323 = v169;
              if (v171 >= 4)
              {
                v172 = v169[3];
                if (v172 <= v171)
                {
                  v314 = v165;
                  if (v171 <= v172)
                  {
                    if (v167
                      || (v171 == 4 ? (v177 = v172 == 4) : (v177 = 0),
                          v177 ? (v178 = *(_DWORD *)(v304 + 128) == 5) : (v178 = 0),
                          !v178))
                    {
                      v149[15] = 267;
                    }
                    goto LABEL_508;
                  }
                  v173 = *(unsigned __int16 **)v169;
                  v174 = (char *)(*(_QWORD *)v169 + v172);
                  v175 = *v174;
                  if (*v174 < 0)
                  {
                    v176 = v174[1];
                    if (v174[1] < 0)
                    {
                      v179 = v174[2];
                      if (v179 < 0)
                      {
                        v335[0] = 0;
                        sub_1ACC7BBC8(v174, (unint64_t *)v335);
                        v170 = v323;
                        v175 = (uint64_t)v335[0] & 0x7FFFFFFF;
                      }
                      else
                      {
                        v175 = v179 & 0x7F | (v175 << 14) & 0x1FC07F | ((v176 & 0x7F) << 7);
                      }
                    }
                    else
                    {
                      v175 = ((v175 & 0x7F) << 7) | v176;
                    }
                  }
                  v180 = __rev16(*v173);
                  if ((int)v175 >= v172 || v175 <= v180)
                    goto LABEL_400;
                  v182 = (char *)v173 + v175;
                  v183 = *v182;
                  if (*v182 < 0)
                  {
                    v185 = v182[1];
                    if (v182[1] < 0)
                    {
                      v186 = v182[2];
                      if (v186 < 0)
                      {
                        v335[0] = 0;
                        v184 = sub_1ACC7BBC8(v182, (unint64_t *)v335);
                        v183 = (uint64_t)v335[0] & 0x7FFFFFFF;
                      }
                      else
                      {
                        v183 = v186 & 0x7F | (v183 << 14) & 0x1FC07F | ((v185 & 0x7F) << 7);
                        v184 = 3;
                      }
                    }
                    else
                    {
                      v183 = ((v183 & 0x7F) << 7) | v185;
                      v184 = 2;
                    }
                  }
                  else
                  {
                    v184 = 1;
                  }
                  v187 = v183 - v167;
                  if (v183 >= v167)
                    v188 = v167;
                  else
                    v188 = v183;
                  if ((int)v188 < 1 || (v189 = memcmp((char *)v173 + v184 + v175, v166, v188)) == 0)
                    v189 = v187;
                  v170 = v323;
                  if (v189 < 0)
LABEL_400:
                    v149[15] = 267;
                  v320 = 0;
                  v190 = 0;
                  v308 = 0;
                  v191 = 0;
                  v192 = 0;
                  __dst = 0;
                  v322 = 0;
                  v193 = qword_1ECD3DBE0 + 1056;
LABEL_404:
                  if (v149[15])
                  {
LABEL_494:
                    if (__dst)
                    {
                      v240 = (void (**)(void *))&off_1ECD3B168;
                      if (!dword_1ECD3B140)
                        goto LABEL_500;
                      v241 = v193[294];
                      if (v241)
                        xmmword_1ECD3B1C0(v241);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(__dst);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(__dst);
                      v170 = v323;
                      __dst = (char *)v193[294];
                      if (__dst)
                      {
                        v240 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_500:
                        (*v240)(__dst);
                        v170 = v323;
                      }
                    }
                    v165 = v314;
                    if (v322)
                    {
                      v242 = (void (**)(void *))&off_1ECD3B168;
                      if (!dword_1ECD3B140)
                        goto LABEL_507;
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v322);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v322);
                      v170 = v323;
                      v322 = (void *)xmmword_1ECD3E930;
                      if ((_QWORD)xmmword_1ECD3E930)
                      {
                        v242 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_507:
                        (*v242)(v322);
                        v170 = v323;
                      }
                    }
LABEL_508:
                    v243 = &off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      v244 = v312;
                      if ((_QWORD)xmmword_1ECD3E930)
                      {
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                        v170 = v323;
                      }
                      v245 = v170;
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v170);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v245);
                      v170 = (_DWORD *)xmmword_1ECD3E930;
                      if ((_QWORD)xmmword_1ECD3E930)
                      {
                        v243 = &xmmword_1ECD3B1D0;
                        goto LABEL_514;
                      }
                    }
                    else
                    {
                      v244 = v312;
LABEL_514:
                      (*v243)(v170);
                    }
                    if (v149[15])
                      goto LABEL_341;
                    if (v244 >= (int)v165 - 1)
                      goto LABEL_533;
                    v246 = v244 + 1;
                    while (2)
                    {
                      v247 = sub_1ACC7B8EC((uint64_t)v149, v246 + ((unint64_t)*v317 << 37));
                      if (v247)
                      {
                        v248 = v247;
                        if (v247[3] < v247[2])
                          v149[15] = 267;
                        if (v246 >= (int)(v319 + 1) && __rev16(**(unsigned __int16 **)v247))
                          v149[15] = 267;
                        v249 = &off_1ECD3B168;
                        if (dword_1ECD3B140)
                        {
                          if ((_QWORD)xmmword_1ECD3E930)
                            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v248);
                          --qword_1ECD3E8D0;
                          off_1ECD3B168(v248);
                          v248 = (_DWORD *)xmmword_1ECD3E930;
                          if ((_QWORD)xmmword_1ECD3E930)
                          {
                            v249 = &xmmword_1ECD3B1D0;
                            goto LABEL_529;
                          }
                        }
                        else
                        {
LABEL_529:
                          (*v249)(v248);
                        }
                      }
                      v250 = v149[15];
                      if (v246 < (int)v165 - 1)
                      {
                        ++v246;
                        if (!v250)
                          continue;
                      }
                      break;
                    }
                    v165 = v314;
                    if (v250)
                      goto LABEL_341;
LABEL_533:
                    if (!v311)
                    {
                      v319 = *v306;
                      goto LABEL_359;
                    }
                    v251 = *v317;
                    v252 = sub_1ACC86FC0((uint64_t)v149, 0, v251, v165);
                    v253 = v252;
                    v319 = 0;
                    if (v149[15])
                      goto LABEL_572;
                    if (v252[5])
                    {
                      v319 = 0;
                      goto LABEL_572;
                    }
                    v254 = v251 << 37;
                    v255 = v314;
                    while (2)
                    {
                      v256 = v255 + 1;
                      v255 = v253[7];
                      if (v256 >= v255)
                      {
                        v319 = v256;
                        v260 = v255;
                        v258 = qword_1ECD3DBE0 + 1056;
                        goto LABEL_554;
                      }
                      v257 = v256;
                      v258 = &qword_1ECD3DBE0[132];
                      while (2)
                      {
                        v261 = sub_1ACC7B8EC((uint64_t)v149, v254 + v257);
                        if (v261)
                        {
                          v262 = v261;
                          if (__rev16(**(unsigned __int16 **)v261))
                            v149[15] = 267;
                          v259 = &off_1ECD3B168;
                          if (dword_1ECD3B140)
                          {
                            if ((_QWORD)xmmword_1ECD3E930)
                              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v262);
                            --qword_1ECD3E8D0;
                            off_1ECD3B168(v262);
                            v262 = (_DWORD *)xmmword_1ECD3E930;
                            if (!(_QWORD)xmmword_1ECD3E930)
                              goto LABEL_543;
                            v259 = &xmmword_1ECD3B1D0;
                          }
                          (*v259)(v262);
                        }
LABEL_543:
                        ++v257;
                        v260 = v253[7];
                        if (v257 < v260)
                          continue;
                        break;
                      }
                      v319 = v257;
                      v255 = v253[7];
LABEL_554:
                      v263 = sub_1ACC7B8EC((uint64_t)v149, v260 + v254);
                      if (v263)
                      {
                        v264 = v263;
                        v335[0] = 0;
                        v265 = __rev16(**(unsigned __int16 **)v263);
                        if (v263[3] <= (signed int)v265
                          || (v307 != 5 || v265)
                          && ((v266 = (sqlite3_stmt *)*((_QWORD *)v253 + 4),
                               sub_1ACC7BBC8((char *)(*(_QWORD *)v263 + v265), (unint64_t *)v335),
                               v335[0] != v266)
                            ? (v267 = v307 != 5)
                            : (v267 = 0),
                              (uint64_t)v335[0] < (uint64_t)v266 || v267))
                        {
                          v149[15] = 267;
                        }
                        v268 = &off_1ECD3B168;
                        if (dword_1ECD3B140)
                        {
                          v269 = v258[294];
                          if (v269)
                            xmmword_1ECD3B1C0(v269);
                          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v264);
                          --qword_1ECD3E8D0;
                          off_1ECD3B168(v264);
                          v264 = (_DWORD *)v258[294];
                          if (v264)
                          {
                            v268 = &xmmword_1ECD3B1D0;
                            goto LABEL_569;
                          }
                        }
                        else
                        {
LABEL_569:
                          (*v268)(v264);
                        }
                      }
                      sub_1ACC80A08((uint64_t)v149, v253, 0);
                      if (!v149[15] && !v253[5])
                        continue;
                      break;
                    }
LABEL_572:
                    sub_1ACC7D774(v253);
                    v165 = v314;
LABEL_359:
                    v164 = v165;
                    if (v149[15])
                      goto LABEL_341;
                    continue;
                  }
                  v194 = *(_QWORD *)v170;
                  v195 = (char *)(*(_QWORD *)v170 + v172);
                  v196 = *v195;
                  if (*v195 < 0)
                  {
                    v198 = v195[1];
                    if (v195[1] < 0)
                    {
                      v199 = v195[2];
                      if (v199 < 0)
                      {
                        v335[0] = 0;
                        v200 = v190;
                        v201 = sub_1ACC7BBC8(v195, (unint64_t *)v335);
                        v190 = v200;
                        v170 = v323;
                        v197 = v201;
                        v196 = (uint64_t)v335[0] & 0x7FFFFFFF;
                      }
                      else
                      {
                        v196 = v199 & 0x7F | (v196 << 14) & 0x1FC07F | ((v198 & 0x7F) << 7);
                        v197 = 3;
                      }
                    }
                    else
                    {
                      v196 = ((v196 & 0x7F) << 7) | v198;
                      v197 = 2;
                    }
                  }
                  else
                  {
                    v197 = 1;
                  }
                  v202 = v196 + v192;
                  v203 = v170[3];
                  if (v196 + v192 < v203)
                  {
                    v204 = (char *)(v194 + v202);
                    v205 = *v204;
                    if (v192)
                    {
                      if ((v205 & 0x80) != 0)
                      {
                        v208 = v204[1];
                        if (v204[1] < 0)
                        {
                          v210 = v204[2];
                          if (v210 < 0)
                          {
                            v335[0] = 0;
                            v212 = v197;
                            v213 = v190;
                            v206 = sub_1ACC7BBC8(v204, (unint64_t *)v335);
                            v190 = v213;
                            v197 = v212;
                            v170 = v323;
                            v205 = (uint64_t)v335[0] & 0x7FFFFFFF;
                          }
                          else
                          {
                            v205 = v210 & 0x7F | ((_DWORD)v205 << 14) & 0x1FC07F | ((v208 & 0x7F) << 7);
                            v206 = 3;
                          }
                        }
                        else
                        {
                          v205 = ((v205 & 0x7F) << 7) | v208;
                          v206 = 2;
                        }
                      }
                      else
                      {
                        v206 = 1;
                      }
                      v214 = v206 + (uint64_t)v202;
                      v215 = v194 + v214;
                      v216 = *(unsigned __int8 *)(v194 + v214);
                      if (*(char *)(v194 + v214) < 0)
                      {
                        v218 = *(unsigned __int8 *)(v215 + 1);
                        if (*(char *)(v215 + 1) < 0)
                        {
                          v219 = *(char *)(v215 + 2);
                          if (v219 < 0)
                          {
                            v335[0] = 0;
                            v315 = v197;
                            v220 = v190;
                            v217 = sub_1ACC7BBC8((char *)v215, (unint64_t *)v335);
                            v190 = v220;
                            v197 = v315;
                            v170 = v323;
                            v216 = (uint64_t)v335[0] & 0x7FFFFFFF;
                          }
                          else
                          {
                            v216 = v219 & 0x7F | (v216 << 14) & 0x1FC07F | ((v218 & 0x7F) << 7);
                            v217 = 3;
                          }
                        }
                        else
                        {
                          v216 = ((v216 & 0x7F) << 7) | v218;
                          v217 = 2;
                        }
                      }
                      else
                      {
                        v217 = 1;
                      }
                      v221 = v217 + v214;
                      if ((int)v205 > (int)v191 || (int)(v221 + v216) > v203)
                      {
                        v149[15] = 267;
                        v205 = v191;
                        if (!(_DWORD)v191)
                          goto LABEL_402;
LABEL_466:
                        v233 = v197;
                        if (v320 >= v205)
                        {
                          memcpy(v322, __dst, v205);
                          goto LABEL_475;
                        }
                        if (v320)
                          LODWORD(v234) = v320;
                        else
                          LODWORD(v234) = 64;
                        v234 = (int)v234;
                        do
                        {
                          v235 = v234;
                          v234 *= 2;
                        }
                        while (v235 < v205);
                        if (sqlite3_initialize() || (v236 = (void *)sub_1ACB6BB48((uint64_t)v322, v235)) == 0)
                        {
                          v190 = 0;
                          v149[15] = 7;
                        }
                        else
                        {
                          v320 = v235;
                          v322 = v236;
                          memcpy(v236, __dst, v205);
LABEL_475:
                          v190 = v205;
                        }
                        v170 = v323;
                        v197 = v233;
LABEL_403:
                        v172 += v197;
                        v191 = v205;
                        v192 = v202;
                        v193 = &qword_1ECD3DBE0[132];
                        if (v172 >= v170[2])
                          goto LABEL_494;
                        goto LABEL_404;
                      }
                      if (!v216)
                        goto LABEL_453;
                      v223 = v216 + v205;
                      v316 = v197;
                      v305 = v190;
                      if (v223 <= v308)
                        goto LABEL_452;
                      if (v308)
                        LODWORD(v224) = v308;
                      else
                        LODWORD(v224) = 64;
                      v224 = (int)v224;
                      do
                      {
                        v225 = v224;
                        v224 *= 2;
                      }
                      while (v225 < v223);
                      if (!sqlite3_initialize())
                      {
                        v226 = sub_1ACB6BB48((uint64_t)__dst, v225);
                        if (v226)
                        {
                          v308 = v225;
                          __dst = (char *)v226;
LABEL_452:
                          memcpy(&__dst[v205], (const void *)(v194 + v221), v216);
                          v205 = v216 + v205;
                          v170 = v323;
                          v197 = v316;
                          v190 = v305;
                          if (!v149[15])
                          {
LABEL_453:
                            v227 = v205 - v190;
                            if ((int)v205 >= v190)
                              v228 = v190;
                            else
                              v228 = v205;
                            if ((int)v228 < 1
                              || (v229 = v197, v230 = memcmp(__dst, v322, v228), v197 = v229, v170 = v323, !v230))
                            {
                              v230 = v227;
                            }
                            if (v230 <= 0)
                            {
                              v149[15] = 267;
                              if ((_DWORD)v205)
                                goto LABEL_466;
LABEL_402:
                              v190 = 0;
                              goto LABEL_403;
                            }
                          }
LABEL_465:
                          if (!(_DWORD)v205)
                            goto LABEL_402;
                          goto LABEL_466;
                        }
                      }
                      v149[15] = 7;
LABEL_490:
                      v170 = v323;
                      v197 = v316;
                      if ((_DWORD)v205)
                        goto LABEL_466;
                      goto LABEL_402;
                    }
                    if ((v205 & 0x80) != 0)
                    {
                      v209 = v204[1];
                      if (v204[1] < 0)
                      {
                        v211 = v204[2];
                        if (v211 < 0)
                        {
                          v335[0] = 0;
                          v231 = v197;
                          v207 = sub_1ACC7BBC8(v204, (unint64_t *)v335);
                          v197 = v231;
                          v170 = v323;
                          v205 = (uint64_t)v335[0] & 0x7FFFFFFF;
                        }
                        else
                        {
                          v205 = v211 & 0x7F | ((_DWORD)v205 << 14) & 0x1FC07F | ((v209 & 0x7F) << 7);
                          v207 = 3;
                        }
                      }
                      else
                      {
                        v205 = ((v205 & 0x7F) << 7) | v209;
                        v207 = 2;
                      }
                    }
                    else
                    {
                      v207 = 1;
                    }
                    v232 = v207 + (uint64_t)v202;
                    if ((int)v232 + (int)v205 <= v203)
                    {
                      if (!(_DWORD)v205)
                      {
                        v190 = 0;
                        goto LABEL_403;
                      }
                      v316 = v197;
                      if (v308 >= v205)
                      {
                        memcpy(__dst, (const void *)(v194 + v232), v205);
                      }
                      else
                      {
                        if (v308)
                          LODWORD(v237) = v308;
                        else
                          LODWORD(v237) = 64;
                        v237 = (int)v237;
                        do
                        {
                          v238 = v237;
                          v237 *= 2;
                        }
                        while (v238 < v205);
                        if (sqlite3_initialize() || (v239 = (char *)sub_1ACB6BB48((uint64_t)__dst, v238)) == 0)
                        {
                          v205 = 0;
                          v190 = 0;
                          v149[15] = 7;
                          v170 = v323;
                          v197 = v316;
                          goto LABEL_403;
                        }
                        v308 = v238;
                        __dst = v239;
                        memcpy(v239, (const void *)(v194 + v232), v205);
                      }
                      goto LABEL_490;
                    }
                  }
                  v149[15] = 267;
                  v205 = v191;
                  goto LABEL_465;
                }
              }
              break;
            }
            v149[15] = 267;
            v270 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
            {
LABEL_578:
              (*v270)(v170);
              goto LABEL_341;
            }
            if ((_QWORD)xmmword_1ECD3E930)
            {
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              v170 = v323;
            }
            v271 = v170;
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v170);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v271);
            v170 = (_DWORD *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v270 = &xmmword_1ECD3B1D0;
              goto LABEL_578;
            }
            goto LABEL_341;
          }
          v163 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
        }
        (*v163)(v162);
        goto LABEL_356;
      }
LABEL_579:
      sub_1ACCB2A54((uint64_t)v149, (uint64_t)v151, 0x20u, 0, 0xFFFFFFFF, 0, &v331);
      v272 = v331;
      v324 = v149 + 15;
      v273 = 0;
      if (v149[15])
      {
LABEL_580:
        sub_1ACC7D2A0(v272);
        v274 = v300;
        if (*v324)
          v274 = 1;
        if ((v274 & 1) == 0 && v273 != v298)
          *v324 = 267;
        sub_1ACC7A15C(v302);
        v275 = v332;
        if (!v332)
          goto LABEL_592;
        v276 = (void (**)(sqlite3_int64))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v275);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v275);
          v275 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_592;
          v276 = (void (**)(sqlite3_int64))&xmmword_1ECD3B1D0;
        }
        (*v276)(v275);
LABEL_592:
        v128 = v299;
LABEL_594:
        v15 = *v324;
        *v324 = 0;
        goto LABEL_627;
      }
      while (1)
      {
        if (*(_BYTE *)(v272 + 20))
          goto LABEL_580;
        v335[0] = 0;
        LODWORD(v334) = 0;
        v277 = *(unsigned __int16 *)(*(_QWORD *)(v272 + 88) + 4);
        v278 = v272 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v272 + 88) + 4);
        v279 = *(_QWORD *)(v278 + 216);
        v280 = *(unsigned int *)(v278 + 208);
        v281 = *(char **)(v278 + 200);
        if (v301 != 1)
          break;
        if (!*(_QWORD *)(v272 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v272 + 88) + 4) + 112)
          || *(_DWORD *)(v272 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v272 + 88) + 4) + 224))
        {
          v282 = 81 * v279;
          if ((int)v280 >= 1)
          {
            do
            {
              v283 = *v281++;
              v282 = 9 * v282 + v283;
              --v280;
            }
            while (v280);
          }
          v273 ^= v282;
        }
LABEL_597:
        sub_1ACC800BC((uint64_t)v149, v272, 0, 0);
        if (v149[15])
          goto LABEL_580;
      }
      LODWORD(v333) = 0;
      sub_1ACC88900(v149, v272 + 136 * v277 + 96, 0, (uint64_t)&v332);
      v284 = v333;
      v285 = (v333 + 4);
      if (v285 <= HIDWORD(v333))
      {
        v290 = v332;
      }
      else
      {
        if (HIDWORD(v333))
          LODWORD(v286) = HIDWORD(v333);
        else
          LODWORD(v286) = 64;
        v286 = (int)v286;
        do
        {
          v287 = v286;
          v286 *= 2;
        }
        while (v287 < v285);
        v288 = v332;
        if (sqlite3_initialize() || (v290 = sub_1ACB6BB48(v288, v287)) == 0)
        {
          *v324 = 7;
          v289 = v333;
          goto LABEL_615;
        }
        HIDWORD(v333) = v287;
        v332 = v290;
        v284 = v333;
      }
      *(_DWORD *)(v290 + v284) = 0;
      v289 = v333 + 4;
      LODWORD(v333) = v333 + 4;
LABEL_615:
      v291 = v332;
      if (!sub_1ACC827F8(v332, v289, (int *)&v334, (uint64_t *)v335))
      {
        v292 = 9 * v279;
        do
        {
          v293 = v292
               + ((uint64_t)v335[0] >> 32)
               + ((uint64_t)v335[0] & 0x7FFFFFFF)
               + 8 * (v292 + ((uint64_t)v335[0] >> 32));
          if ((int)v280 >= 1)
          {
            v294 = v281;
            v295 = v280;
            do
            {
              v296 = *v294++;
              v293 = 9 * v293 + v296;
              --v295;
            }
            while (v295);
          }
          v273 ^= v293;
        }
        while (!sub_1ACC827F8(v291, v289, (int *)&v334, (uint64_t *)v335));
      }
      goto LABEL_597;
    }
  }
  v15 = sub_1ACC7A800(v124, 10, &v327, 0);
  if ((_DWORD)v15)
    goto LABEL_627;
  v132 = v327;
  if (sqlite3_step(v327) != 100)
  {
LABEL_310:
    v15 = sqlite3_reset(v132);
    if ((_DWORD)v15)
      goto LABEL_627;
    v15 = sub_1ACC8A7FC((uint64_t)v124, 0);
    if ((_DWORD)v15)
      goto LABEL_627;
    v143 = 0;
    v15 = 267;
    while ((*(_DWORD *)(v125 + 24) & ~(*(int *)(v125 + 24) >> 31)) != v143)
    {
      v144 = *(_QWORD *)(v124[4] + v143 * 8);
      v145 = v128[v143++];
      if (v144 != v145)
        goto LABEL_627;
    }
    if (!*(_DWORD *)(v125 + 64))
    {
      v332 = 0;
      v15 = sub_1ACC930C8((uint64_t **)v124, (uint64_t)"content", &v332);
      if ((_DWORD)v15)
        goto LABEL_627;
      if (v332 != v124[3])
        goto LABEL_635;
    }
    if (*(_DWORD *)(v125 + 88))
    {
      v332 = 0;
      v15 = sub_1ACC930C8((uint64_t **)v124, (uint64_t)"docsize", &v332);
      if ((_DWORD)v15)
        goto LABEL_627;
      if (v332 != v124[3])
      {
LABEL_635:
        v15 = 267;
        goto LABEL_627;
      }
    }
    v131 = 0;
    goto LABEL_333;
  }
  v133 = (int *)&v128[v129];
  while (1)
  {
    v134 = sqlite3_column_int64(v132, 0);
    *(_QWORD *)&v328 = v134;
    HIDWORD(v328) = 0;
    if (*(_DWORD *)(v125 + 88))
    {
      v135 = sub_1ACC8B2C8(v124, v134, v133);
      if ((_DWORD)v135)
        break;
    }
    if (*(_DWORD *)(v125 + 92) == 1)
    {
      if (sqlite3_initialize() || (v136 = (void *)sub_1ACB5D828(4096)) == 0)
      {
        *((_QWORD *)&v329 + 1) = 0;
        v15 = 7;
        goto LABEL_626;
      }
      v137 = v136;
      bzero(v136, 0x1000uLL);
      *((_QWORD *)&v329 + 1) = v137;
    }
    v138 = 0;
    while (v138 < *(int *)(v125 + 24))
    {
      if (!*(_BYTE *)(*(_QWORD *)(v125 + 40) + v138))
      {
        *((_QWORD *)&v328 + 1) = v138;
        if (*(_DWORD *)(v125 + 92) != 2)
          goto LABEL_300;
        if (sqlite3_initialize() || (v139 = (void *)sub_1ACB5D828(4096)) == 0)
        {
          *((_QWORD *)&v329 + 1) = 0;
          v15 = 7;
        }
        else
        {
          v140 = v139;
          bzero(v139, 0x1000uLL);
          *((_QWORD *)&v329 + 1) = v140;
LABEL_300:
          v141 = sqlite3_column_text(v132, (int)v138 + 1);
          v142 = sqlite3_column_bytes(v132, v138 + 1);
          if (!v141
            || (v15 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, const unsigned __int8 *, uint64_t, uint64_t (*)(uint64_t, char, char *, int)))(*(_QWORD *)(v125 + 112) + 16))(*(_QWORD *)(v125 + 104), &v328, 4, v141, v142, sub_1ACC92D0C), !(_DWORD)v15))
          {
            if (*(_DWORD *)(v125 + 88))
            {
              if (HIDWORD(v328) == v133[v138])
                v15 = 0;
              else
                v15 = 267;
            }
            else
            {
              v15 = 0;
            }
          }
        }
        v128[v138] += SHIDWORD(v328);
        if (*(_DWORD *)(v125 + 92) == 2)
        {
          sub_1ACC92F5C(*((uint64_t *)&v329 + 1));
          *((_QWORD *)&v329 + 1) = 0;
        }
        goto LABEL_292;
      }
      v15 = 0;
LABEL_292:
      ++v138;
      if ((_DWORD)v15)
        goto LABEL_626;
    }
    sub_1ACC92F5C(*((uint64_t *)&v329 + 1));
    *((_QWORD *)&v329 + 1) = 0;
    if (sqlite3_step(v132) != 100)
      goto LABEL_310;
  }
  v15 = v135;
LABEL_626:
  sub_1ACC92F5C(*((uint64_t *)&v329 + 1));
  *((_QWORD *)&v329 + 1) = 0;
  sqlite3_reset(v132);
LABEL_627:
  v297 = (uint64_t (**)(void *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v128);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v128);
    v128 = (_QWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v297 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_632;
    }
  }
  else
  {
LABEL_632:
    (*v297)(v128);
  }
LABEL_238:
  *(_QWORD *)(a1[3] + 184) = 0;
  return v15;
}

uint64_t sub_1ACC75794(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 72);
  if (v1)
  {
    while (*v1 != a1)
    {
      v1 = (_QWORD *)v1[1];
      if (!v1)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (sub_1ACC7B778(v2) != *(_QWORD *)(v2 + 136))
    {
      v3 = *(_DWORD **)(v2 + 144);
      if (v3)
      {
        sub_1ACC7A15C(v3);
        *(_QWORD *)(v2 + 144) = 0;
      }
    }
    *(_DWORD *)(v2 + 60) = 0;
  }
  return 0;
}

uint64_t sub_1ACC75800(uint64_t a1)
{
  uint64_t i;
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 184) = a1 + 16;
  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(_QWORD *)i == a1)
      *(_DWORD *)(i + 80) |= 0x20u;
  }
  result = sub_1ACC93454(*(uint64_t ***)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 184) = 0;
  return result;
}

uint64_t sub_1ACC75874()
{
  return 0;
}

uint64_t sub_1ACC7587C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v1 + 16) = 0;
  sub_1ACC78230(*(_QWORD *)(v1 + 8));
  return 0;
}

uint64_t sub_1ACC758A0(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t (**a4)(uint64_t a1, int a2, uint64_t *a3), _QWORD *a5)
{
  uint64_t i;
  unsigned __int8 *v6;
  _BYTE *j;
  uint64_t v8;
  uint64_t v9;

  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48); i; i = *(_QWORD *)(i + 40))
  {
    v6 = *(unsigned __int8 **)(i + 8);
    if (a3)
    {
      if (v6)
      {
        for (j = a3; ; ++j)
        {
          v8 = *j;
          v9 = *v6;
          if ((_DWORD)v8 == (_DWORD)v9)
          {
            if (!*j)
              goto LABEL_12;
          }
          else if (byte_1ACCB6333[v8] != byte_1ACCB6333[v9])
          {
            break;
          }
          ++v6;
        }
      }
    }
    else if (!v6)
    {
LABEL_12:
      *a4 = sub_1ACC93630;
      *a5 = i;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1ACC75928(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t result;

  v3 = *(uint64_t ***)(a1 + 40);
  v4 = *v3;
  result = sub_1ACC93454(v3);
  if (!(_DWORD)result)
  {
    result = sub_1ACC79468((sqlite3 *)*v4, 0, "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
               v4[1],
               v4[2],
               "data",
               a2,
               "data");
    if (!(_DWORD)result)
    {
      result = sub_1ACC79468((sqlite3 *)*v4, 0, "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                 v4[1],
                 v4[2],
                 "idx",
                 a2,
                 "idx");
      if (!(_DWORD)result)
      {
        result = sub_1ACC79468((sqlite3 *)*v4, 0, "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                   v4[1],
                   v4[2],
                   "config",
                   a2,
                   "config");
        if (*((_DWORD *)v4 + 22) && !(_DWORD)result)
          result = sub_1ACC79468((sqlite3 *)*v4, 0, "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                     v4[1],
                     v4[2],
                     "docsize",
                     a2,
                     "docsize");
        if (!(*((_DWORD *)v4 + 16) | result))
          return sub_1ACC79468((sqlite3 *)*v4, 0, "ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';",
                   v4[1],
                   v4[2],
                   "content",
                   a2,
                   "content");
      }
    }
  }
  return result;
}

uint64_t sub_1ACC75A58(uint64_t a1)
{
  uint64_t i;

  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(_QWORD *)i == a1)
      *(_DWORD *)(i + 80) |= 0x20u;
  }
  return sub_1ACC93454(*(uint64_t ***)(a1 + 40));
}

uint64_t sub_1ACC75A9C(uint64_t a1)
{
  uint64_t i;

  for (i = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(_QWORD *)i == a1)
      *(_DWORD *)(i + 80) |= 0x20u;
  }
  return sub_1ACC93454(*(uint64_t ***)(a1 + 40));
}

uint64_t sub_1ACC75AE0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;

  for (i = *(_QWORD *)(a1[6] + 72); i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1 && *(_QWORD **)i == a1)
      *(_DWORD *)(i + 80) |= 0x20u;
  }
  *(_DWORD *)(a1[3] + 136) = 0;
  v2 = a1[5];
  *(_DWORD *)(v2 + 16) = 0;
  sub_1ACC78230(*(_QWORD *)(v2 + 8));
  return 0;
}

uint64_t sub_1ACC75B48(uint64_t result)
{
  const char *v1;
  _BYTE *i;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _BYTE *j;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE *k;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _BYTE *m;
  uint64_t v15;
  uint64_t v16;
  const char *n;
  uint64_t v18;
  uint64_t v19;

  if (result)
  {
    v1 = "config";
    for (i = (_BYTE *)result; ; ++i)
    {
      v3 = *i;
      v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i)
          return 1;
      }
      else if (byte_1ACCB6333[v3] != byte_1ACCB6333[v4])
      {
        v5 = "content";
        for (j = (_BYTE *)result; ; ++j)
        {
          v7 = *j;
          v8 = *(unsigned __int8 *)v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j)
              return 1;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            v9 = "data";
            for (k = (_BYTE *)result; ; ++k)
            {
              v11 = *k;
              v12 = *(unsigned __int8 *)v9;
              if ((_DWORD)v11 == (_DWORD)v12)
              {
                if (!*k)
                  return 1;
              }
              else if (byte_1ACCB6333[v11] != byte_1ACCB6333[v12])
              {
                v13 = "docsize";
                for (m = (_BYTE *)result; ; ++m)
                {
                  v15 = *m;
                  v16 = *(unsigned __int8 *)v13;
                  if ((_DWORD)v15 == (_DWORD)v16)
                  {
                    if (!*m)
                      return 1;
                  }
                  else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
                  {
                    for (n = "idx"; ; ++n)
                    {
                      v18 = *(unsigned __int8 *)result;
                      v19 = *(unsigned __int8 *)n;
                      if ((_DWORD)v18 == (_DWORD)v19)
                      {
                        if (!*(_BYTE *)result)
                          return 1;
                      }
                      else if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
                      {
                        return 0;
                      }
                      ++result;
                    }
                  }
                  ++v13;
                }
              }
              ++v9;
            }
          }
          ++v5;
        }
      }
      ++v1;
    }
  }
  return result;
}

uint64_t sub_1ACC75CA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  result = sqlite3_overload_function(*(sqlite3 **)(a1 + 32), a2, -1);
  if (!(_DWORD)result)
  {
    v11 = strlen(a2);
    if (sqlite3_initialize())
      return 7;
    v12 = (_QWORD *)sub_1ACB5D828(v11 + 49);
    if (!v12)
    {
      return 7;
    }
    else
    {
      v13 = v12;
      bzero(v12, v11 + 49);
      v13[1] = v13 + 6;
      memcpy(v13 + 6, a2, v11 + 1);
      result = 0;
      *v13 = a1;
      v13[2] = a3;
      v13[3] = a4;
      v14 = *(_QWORD *)(a1 + 48);
      v13[4] = a5;
      v13[5] = v14;
      *(_QWORD *)(a1 + 48) = v13;
    }
  }
  return result;
}

uint64_t sub_1ACC75D64(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v10 = strlen(__s);
  if (sqlite3_initialize())
    return 7;
  v12 = (_QWORD *)sub_1ACB5D828(v10 + 57);
  if (!v12)
    return 7;
  v13 = v12;
  bzero(v12, v10 + 57);
  *v13 = v13 + 7;
  memcpy(v13 + 7, __s, v10 + 1);
  v13[1] = a3;
  v14 = *(_QWORD *)(a4 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a4;
  v13[4] = v14;
  v13[5] = a5;
  v15 = *(_QWORD *)(a1 + 56);
  v13[6] = v15;
  *(_QWORD *)(a1 + 56) = v13;
  result = 0;
  if (!v15)
    *(_QWORD *)(a1 + 64) = v13;
  return result;
}

uint64_t sub_1ACC75E24(uint64_t a1, _BYTE *a2, _QWORD *a3, uint64_t a4)
{
  unsigned __int8 *i;
  unsigned __int8 *v5;
  _BYTE *j;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;

  if (a2)
  {
    for (i = *(unsigned __int8 **)(a1 + 56); i; i = (unsigned __int8 *)*((_QWORD *)i + 6))
    {
      v5 = *(unsigned __int8 **)i;
      if (*(_QWORD *)i)
      {
        for (j = a2; ; ++j)
        {
          v7 = *j;
          v8 = *v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j)
              goto LABEL_11;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            break;
          }
          ++v5;
        }
      }
    }
  }
  else
  {
    i = *(unsigned __int8 **)(a1 + 64);
    if (i)
    {
LABEL_11:
      result = 0;
      v10 = *((_OWORD *)i + 1);
      *(_QWORD *)(a4 + 16) = *((_QWORD *)i + 4);
      *(_OWORD *)a4 = v10;
      *a3 = *((_QWORD *)i + 1);
      return result;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  result = 1;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t sub_1ACC75EBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void (*v4)(_QWORD);
  _QWORD *v5;
  uint64_t (**v6)(_QWORD);
  uint64_t result;
  void (*v8)(_QWORD);
  _QWORD *v9;
  uint64_t (**v10)(_QWORD);
  uint64_t (**v11)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    do
    {
      v4 = (void (*)(_QWORD))v2[4];
      v5 = (_QWORD *)v2[5];
      if (v4)
        v4(v2[2]);
      v6 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v2);
        v2 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_5;
        v6 = &xmmword_1ECD3B1D0;
      }
      (*v6)(v2);
LABEL_5:
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(_QWORD **)(v1 + 56);
  if (!v3)
  {
LABEL_23:
    v11 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v1);
      v1 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return result;
      v11 = &xmmword_1ECD3B1D0;
    }
    return (*v11)(v1);
  }
  do
  {
    v8 = (void (*)(_QWORD))v3[5];
    v9 = (_QWORD *)v3[6];
    if (v8)
      v8(v3[1]);
    v10 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_13;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v3);
    v3 = (_QWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v10 = &xmmword_1ECD3B1D0;
LABEL_13:
      result = (*v10)(v3);
    }
    v3 = v9;
  }
  while (v9);
  if (v1)
    goto LABEL_23;
  return result;
}

uint64_t sub_1ACC7609C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result && (v4 = *(_QWORD *)(result + 8)) != 0)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *a3;
    if (!*a3)
      return sub_1ACBBE20C(97100);
  }
  else
  {
    result = sub_1ACBBE20C(97914);
    v5 = 0;
    v6 = *a3;
    if (!v6)
      return sub_1ACBBE20C(97100);
  }
  if ((*(_WORD *)(v6 + 20) & 0xFBF) == 0xA01 && *(_BYTE *)(v6 + 23) == 112)
  {
    result = strcmp(*(const char **)v6, "fts5_api_ptr");
    if (!(_DWORD)result)
    {
      v7 = *(_QWORD **)(v6 + 8);
      if (v7)
        *v7 = v5;
    }
  }
  return result;
}

void sub_1ACC76140(uint64_t a1)
{
  if (a1)
    sub_1ACBC69D0(a1, "fts5: 2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709a6b1", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  else
    sub_1ACBBE20C(97480);
}

uint64_t sub_1ACC76168(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, char **a7)
{
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  const char *v23;
  unsigned int v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  const char *v28;
  unsigned int v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  char *v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t);
  uint64_t j;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  const char *k;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char ii;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  int v83;
  unsigned __int8 *v84;
  void (**v85)(unsigned __int8 *);
  size_t v86;
  size_t v87;
  uint64_t v88;
  int v89;
  char *v90;
  int v91;
  const char **v92;
  const char **v93;
  void (**v94)(const char **);
  void (**v95)(void *);
  int v96;
  unsigned __int8 *v97;
  int v98;
  char *v99;
  uint64_t v100;
  int64_t v101;
  int v102;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  const char *v110;
  unsigned __int8 *m;
  unsigned __int8 *v112;
  const char *n;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t (**v117)(uint64_t, uint64_t, int, _QWORD *);
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  int v125;
  int v126;
  int v127;
  char *v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char *v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  _BYTE *v138;
  _BYTE *v139;
  char *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned __int8 *v151;
  int v152;
  char v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (**v172)(uint64_t, uint64_t, int, _QWORD *);
  uint64_t (*v173)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  const char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t (**v191)(char *);
  _DWORD *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _DWORD *v196;
  int v197;
  int v198;
  int v199;
  void (**v200)(char *);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  _QWORD *v205;
  int v206;
  uint64_t v207;
  char **v208;
  char *__s;
  char *__sa;
  int v211;
  char *v212;
  unsigned int v213;
  unsigned int v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;

  if (sqlite3_initialize())
  {
    v14 = 0;
    goto LABEL_3;
  }
  v17 = (_OWORD *)sub_1ACB5D828(64);
  v14 = v17;
  if (!v17)
    goto LABEL_3;
  v17[2] = 0u;
  v17[3] = 0u;
  *v17 = 0u;
  v17[1] = 0u;
  v213 = 0;
  if (sqlite3_initialize())
    goto LABEL_3;
  v18 = sub_1ACB5D828(192);
  if (!v18)
    goto LABEL_3;
  v19 = v18;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)v18 = a2;
  *(_DWORD *)(v18 + 132) = -1;
  __s = (char *)a4;
  if (sqlite3_initialize() || (v20 = (char *)sub_1ACB5D828(9 * a4)) == 0)
  {
    if (a4 > 0)
    {
      *(_QWORD *)(v19 + 32) = 0;
      *(_QWORD *)(v19 + 40) = 0;
LABEL_24:
      *(_QWORD *)(v19 + 8) = 0;
LABEL_25:
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 88) = 1;
      goto LABEL_26;
    }
    v208 = a7;
    v21 = 0;
  }
  else
  {
    v21 = v20;
    v208 = a7;
    bzero(v20, 9 * a4);
  }
  v22 = &v21[8 * a4];
  if (!v21)
    v22 = 0;
  *(_QWORD *)(v19 + 32) = v21;
  *(_QWORD *)(v19 + 40) = v22;
  v23 = *(const char **)(a5 + 8);
  v24 = strlen(v23);
  v25 = sqlite3_initialize();
  if ((v24 & 0x80000000) != 0)
    goto LABEL_24;
  if (v25)
    goto LABEL_24;
  v26 = (_BYTE *)sub_1ACB5D828(v24 + 1);
  if (!v26)
    goto LABEL_24;
  v27 = v26;
  memcpy(v26, v23, v24);
  v27[v24] = 0;
  *(_QWORD *)(v19 + 8) = v27;
  v28 = *(const char **)(a5 + 16);
  v29 = strlen(v28);
  v30 = sqlite3_initialize();
  if ((v29 & 0x80000000) != 0)
    goto LABEL_25;
  if (v30)
    goto LABEL_25;
  v31 = (_BYTE *)sub_1ACB5D828(v29 + 1);
  if (!v31)
    goto LABEL_25;
  v32 = v31;
  memcpy(v31, v28, v29);
  v33 = 0;
  v32[v29] = 0;
  *(_QWORD *)(v19 + 16) = v32;
  *(_QWORD *)(v19 + 88) = 1;
  v34 = v208;
  while (1)
  {
    v35 = v32[v33];
    v36 = aRank[v33];
    if ((_DWORD)v35 != (_DWORD)v36)
      break;
    if (!v32[v33])
    {
      v37 = sqlite3_mprintf("reserved fts5 table name: %s");
      goto LABEL_33;
    }
LABEL_29:
    ++v33;
  }
  if (byte_1ACCB6333[v35] == byte_1ACCB6333[v36])
    goto LABEL_29;
  v206 = a1;
  if (a4 < 4)
  {
    if (*(_DWORD *)(v19 + 68) && *(_DWORD *)(v19 + 64) != 1)
      goto LABEL_489;
LABEL_479:
    v167 = (_QWORD *)(v19 + 104);
    if (*(_QWORD *)(v19 + 104))
    {
      if (*(_QWORD *)(v19 + 72))
      {
LABEL_481:
        v168 = *(char **)(v19 + 80);
        if (v168)
        {
LABEL_482:
          LODWORD(v212) = 0;
          v215 = 0uLL;
          sub_1ACC78F50((char *)&v212, (uint64_t)&v215, "T.%Q", v168);
          if (*(_DWORD *)(v19 + 64) != 1 && *(int *)(v19 + 24) >= 1)
          {
            v169 = 0;
            do
            {
              if (*(_DWORD *)(v19 + 64) == 2)
                sub_1ACC78F50((char *)&v212, (uint64_t)&v215, ", T.%Q", *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v169));
              else
                sub_1ACC78F50((char *)&v212, (uint64_t)&v215, ", T.c%d");
              ++v169;
            }
            while (v169 < *(int *)(v19 + 24));
          }
          *(_QWORD *)(v19 + 96) = v215;
          v15 = v212;
          if ((_DWORD)v212)
            goto LABEL_27;
          v14[3] = v19;
          v14[6] = a3;
          LODWORD(v212) = 0;
          if (sqlite3_initialize() || (v176 = sub_1ACB5D828(152)) == 0)
          {
            v170 = 0;
            v14[4] = 0;
            v15 = 7;
LABEL_493:
            sub_1ACC791FC(v170);
            v14[4] = 0;
            goto LABEL_4;
          }
          v170 = v176;
          *(_QWORD *)(v176 + 144) = 0;
          *(_OWORD *)(v176 + 112) = 0u;
          *(_OWORD *)(v176 + 128) = 0u;
          *(_OWORD *)(v176 + 80) = 0u;
          *(_OWORD *)(v176 + 96) = 0u;
          *(_OWORD *)(v176 + 48) = 0u;
          *(_OWORD *)(v176 + 64) = 0u;
          *(_OWORD *)(v176 + 16) = 0u;
          *(_OWORD *)(v176 + 32) = 0u;
          *(_OWORD *)v176 = 0u;
          v14[4] = v176;
          *(_QWORD *)v176 = v19;
          *(_DWORD *)(v176 + 16) = 64;
          v177 = sub_1ACC78590(&v212, "%s_data", *(const char **)(v19 + 16));
          *(_QWORD *)(v170 + 8) = v177;
          if (a1 && v177)
          {
            v178 = sub_1ACC790D8(v19, (uint64_t)"data", (uint64_t)"id INTEGER PRIMARY KEY, block BLOB", 0, v34);
            if ((_DWORD)v178
              || (v178 = sub_1ACC790D8(v19, (uint64_t)"idx", (uint64_t)"segid, term, pgno, PRIMARY KEY(segid, term)", 1, v34), (_DWORD)v178))
            {
              v15 = v178;
              goto LABEL_493;
            }
            v192 = *(_DWORD **)(v170 + 144);
            if (v192)
            {
              sub_1ACC7A15C(v192);
              *(_QWORD *)(v170 + 144) = 0;
            }
            v193 = *(_QWORD *)(v170 + 24);
            if (v193)
            {
              sub_1ACC7A2E4(v193);
              *(_DWORD *)(v170 + 32) = 0;
              *(_DWORD *)(v170 + 56) = 0;
            }
            *(_DWORD *)(v170 + 52) = 0;
            v215 = 0u;
            v216 = 0u;
            v217 = 0u;
            if (*(_DWORD *)(*(_QWORD *)v170 + 68))
              *(_QWORD *)&v216 = 1;
            sub_1ACC7955C((unsigned __int8 *)v170, 1, &byte_1ACCBEAEE, 0);
            sub_1ACC797DC((unsigned __int8 *)v170, (uint64_t)&v215);
            v15 = *(unsigned int *)(v170 + 60);
            *(_DWORD *)(v170 + 60) = 0;
            if ((_DWORD)v15)
              goto LABEL_493;
          }
          else
          {
            v15 = v212;
            if ((_DWORD)v212)
              goto LABEL_493;
          }
          v180 = v14[4];
          v181 = *(int *)(v19 + 24);
          if (sqlite3_initialize())
          {
            v15 = 7;
            v14[5] = 0;
            goto LABEL_4;
          }
          v182 = 8 * v181 + 128;
          v183 = (uint64_t *)sub_1ACB5D828(v182);
          v14[5] = v183;
          if (!v183)
          {
LABEL_3:
            v15 = 7;
            goto LABEL_4;
          }
          v184 = v183;
          bzero(v183, v182);
          v184[4] = (uint64_t)(v184 + 16);
          *v184 = v19;
          v184[1] = v180;
          if (!v206)
          {
LABEL_532:
            LODWORD(v215) = 0;
            v186 = sub_1ACC78590(&v215, "CREATE TABLE x(");
            v187 = v186;
            if (v186)
            {
              if (*(int *)(v19 + 24) >= 1)
              {
                v187 = sub_1ACC78590(&v215, "%z%s%Q", v186, &byte_1ACCBEAEE, **(_QWORD **)(v19 + 32));
                if (v187)
                {
                  v188 = 1;
                  do
                  {
                    if (v188 >= *(int *)(v19 + 24))
                      break;
                    v187 = sub_1ACC78590(&v215, "%z%s%Q", v187, ", ", *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v188++));
                  }
                  while (v187);
                }
              }
            }
            v189 = sub_1ACC78590(&v215, "%z, %Q HIDDEN, %s HIDDEN)", v187, *(_QWORD *)(v19 + 16), "rank");
            if (!v189)
            {
              v15 = v215;
              goto LABEL_557;
            }
            v190 = v189;
            v15 = sqlite3_declare_vtab(*(sqlite3 **)v19, v189);
            v191 = (uint64_t (**)(char *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v190);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v190);
              v190 = (char *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
              {
LABEL_557:
                if ((_DWORD)v15)
                  goto LABEL_4;
                *(_QWORD *)(v19 + 184) = v34;
                v195 = v14[4];
                v196 = sub_1ACC7ABF8(v195);
                sub_1ACC7A15C(v196);
                v15 = *(unsigned int *)(v195 + 60);
                *(_DWORD *)(v195 + 60) = 0;
                sub_1ACC78230(v14[4]);
                *(_QWORD *)(v19 + 184) = 0;
                if ((_DWORD)v15)
                  goto LABEL_4;
                goto LABEL_5;
              }
              v191 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
            }
            (*v191)(v190);
            goto LABEL_557;
          }
          if (*(_DWORD *)(v19 + 64))
          {
LABEL_525:
            if (!*(_DWORD *)(v19 + 88)
              || (*(_DWORD *)(v19 + 68)
                ? (v185 = "id INTEGER PRIMARY KEY, sz BLOB, origin INTEGER")
                : (v185 = "id INTEGER PRIMARY KEY, sz BLOB"),
                  v15 = sub_1ACC790D8(v19, (uint64_t)"docsize", (uint64_t)v185, 0, v34),
                  !(_DWORD)v15))
            {
              v15 = sub_1ACC790D8(v19, (uint64_t)"config", (uint64_t)"k PRIMARY KEY, v", 1, v34);
              if (!(_DWORD)v15)
              {
                v15 = sub_1ACC7A4F0(v184, "version", 0, 4);
                if (!(_DWORD)v15)
                  goto LABEL_532;
              }
            }
LABEL_555:
            sub_1ACC7A6F4((uint64_t)v184);
            v14[5] = 0;
            goto LABEL_4;
          }
          v194 = *(_DWORD *)(v19 + 24);
          if (sqlite3_initialize() || (__sa = (char *)sub_1ACB5D828(10 * v194 + 32)) == 0)
          {
            v15 = 7;
            goto LABEL_555;
          }
          v197 = 10 * v194 + 32;
          sqlite3_snprintf(v197, __sa, "id INTEGER PRIMARY KEY");
          if (*(int *)(v19 + 24) >= 1)
          {
            v198 = strlen(__sa);
            v199 = 0;
            do
            {
              sqlite3_snprintf(v197 - v198, &__sa[v198], ", c%d", v199);
              v198 += strlen(&__sa[v198]);
              ++v199;
            }
            while (v199 < *(_DWORD *)(v19 + 24));
          }
          v15 = sub_1ACC790D8(v19, (uint64_t)"content", (uint64_t)__sa, 0, v34);
          v200 = (void (**)(char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(__sa);
            --qword_1ECD3E8D0;
            off_1ECD3B168(__sa);
            __sa = (char *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
            {
LABEL_570:
              if ((_DWORD)v15)
                goto LABEL_555;
              goto LABEL_525;
            }
            v200 = (void (**)(char *))&xmmword_1ECD3B1D0;
          }
          (*v200)(__sa);
          goto LABEL_570;
        }
        if (!sqlite3_initialize())
        {
          v168 = (char *)sub_1ACB5D828(6);
          if (v168)
          {
            strcpy(v168, "rowid");
            *(_QWORD *)(v19 + 80) = v168;
            goto LABEL_482;
          }
        }
        *(_QWORD *)(v19 + 80) = 0;
LABEL_26:
        v15 = 7;
        goto LABEL_27;
      }
    }
    else
    {
      v171 = *(_QWORD *)(a3 + 64);
      v173 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v171 + 16);
      v172 = (uint64_t (**)(uint64_t, uint64_t, int, _QWORD *))(v171 + 16);
      v174 = v173(*(v172 - 1), 0, 0, v19 + 104);
      *(_QWORD *)(v19 + 112) = v172;
      if ((_DWORD)v174)
      {
        v15 = v174;
        *v167 = 0;
        *(_QWORD *)(v19 + 112) = 0;
        goto LABEL_27;
      }
      if (*v172 == sub_1ACC78D1C)
      {
        if (*(_DWORD *)*v167)
          v175 = 65;
        else
          v175 = 66;
      }
      else
      {
        v175 = 0;
      }
      *(_DWORD *)(v19 + 124) = v175;
      v213 = 0;
      a1 = v206;
      if (*(_QWORD *)(v19 + 72))
        goto LABEL_481;
    }
    if (*(_DWORD *)(v19 + 64))
    {
      if (!*(_DWORD *)(v19 + 88))
        goto LABEL_481;
      v179 = "docsize";
    }
    else
    {
      v179 = "content";
    }
    *(_QWORD *)(v19 + 72) = sub_1ACC78590(&v213, "%Q.'%q_%s'", *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), v179);
    v15 = v213;
    if (v213)
      goto LABEL_27;
    goto LABEL_481;
  }
  v205 = (_QWORD *)(v19 + 104);
  v38 = 3;
  do
  {
    v39 = *(char **)(a5 + 8 * v38);
    *(_QWORD *)&v215 = 0;
    v212 = 0;
    v211 = 0;
    v40 = sub_1ACC78394(&v213, v39, (unsigned __int8 **)&v215, &v211);
    v207 = v38;
    if (!v40)
    {
LABEL_40:
      v15 = v213;
      if (v213)
        goto LABEL_78;
LABEL_75:
      v57 = sqlite3_mprintf("parse error in \"%s\"");
LABEL_76:
      *v208 = v57;
      v15 = 1;
      goto LABEL_77;
    }
    do
    {
      v42 = *v40++;
      v41 = v42;
    }
    while (v42 == 32);
    if (v41 == 61)
    {
      if (v211)
        goto LABEL_40;
    }
    else
    {
      --v40;
    }
    v43 = v40 - 1;
    do
    {
      v45 = *++v43;
      v44 = v45;
    }
    while (v45 == 32);
    if (v44)
    {
      v214 = 0;
      v46 = sub_1ACC78394(&v213, v43, (unsigned __int8 **)&v212, &v214);
      if (v46)
      {
        if (*v46)
          v43 = 0;
        else
          v43 = v46;
      }
      else
      {
        v43 = 0;
      }
    }
    v15 = v213;
    if (v213)
      goto LABEL_78;
    if (!v43)
      goto LABEL_75;
    v47 = v215;
    if (v41 != 61)
    {
      v34 = v208;
      if (!(_QWORD)v215)
      {
LABEL_98:
        if (!v212)
        {
          v15 = 0;
          goto LABEL_110;
        }
        for (i = 0; ; ++i)
        {
          v69 = v212[i];
          v70 = aUnindexed[i];
          if ((_DWORD)v69 == (_DWORD)v70)
          {
            if (!v212[i])
            {
              v15 = 0;
              *(_BYTE *)(*(_QWORD *)(v19 + 40) + *(int *)(v19 + 24)) = 1;
LABEL_110:
              v71 = *(_QWORD *)(v19 + 32);
              v72 = *(int *)(v19 + 24);
              *(_DWORD *)(v19 + 24) = v72 + 1;
              *(_QWORD *)(v71 + 8 * v72) = v47;
              v213 = v15;
              goto LABEL_160;
            }
          }
          else if (byte_1ACCB6333[v69] != byte_1ACCB6333[v70])
          {
            v67 = sqlite3_mprintf("unrecognized column option: %s");
            goto LABEL_109;
          }
        }
      }
      for (j = 0; ; ++j)
      {
        v61 = *(unsigned __int8 *)(v215 + j);
        v62 = aRank[j];
        if ((_DWORD)v61 == (_DWORD)v62)
        {
          if (!*(_BYTE *)(v215 + j))
          {
LABEL_97:
            v67 = sqlite3_mprintf("reserved fts5 column name: %s");
LABEL_109:
            *v208 = v67;
            v15 = 1;
            goto LABEL_110;
          }
        }
        else if (byte_1ACCB6333[v61] != byte_1ACCB6333[v62])
        {
          v63 = (_BYTE *)v215;
          for (k = "rowid"; ; ++k)
          {
            v65 = *v63;
            v66 = *(unsigned __int8 *)k;
            if ((_DWORD)v65 == (_DWORD)v66)
            {
              if (!*v63)
                goto LABEL_97;
            }
            else if (byte_1ACCB6333[v65] != byte_1ACCB6333[v66])
            {
              goto LABEL_98;
            }
            ++v63;
          }
        }
      }
    }
    if ((_QWORD)v215)
      v48 = (char *)v215;
    else
      v48 = &byte_1ACCBEAEE;
    if (v212)
      v49 = v212;
    else
      v49 = &byte_1ACCBEAEE;
    v214 = 0;
    v50 = strlen(v48);
    if (v50 < 0)
    {
      sub_1ACBBE20C(35843);
      goto LABEL_118;
    }
    if (!v50)
      goto LABEL_118;
    v51 = (v50 - 1);
    v52 = *v48;
    v53 = v52 & 0xFFFFFFDF;
    if ((v52 & 0xFFFFFFDF) != 0x50)
    {
      v56 = 112;
      v54 = *v48;
      goto LABEL_117;
    }
    if (v50 == 1)
      goto LABEL_118;
    v54 = v48[1];
    if ((v54 & 0xFFFFFFDF) != 0x52)
    {
      v56 = 114;
      goto LABEL_117;
    }
    v55 = &aPrefix[v51];
    if (&aPrefix[v51] == "refix")
      goto LABEL_118;
    v54 = v48[2];
    if ((v54 & 0xFFFFFFDF) != 0x45)
    {
      v56 = 101;
LABEL_116:
      a1 = v206;
      goto LABEL_117;
    }
    a1 = v206;
    if (v55 == "efix")
      goto LABEL_118;
    v54 = v48[3];
    if ((v54 & 0xFFFFFFDF) != 0x46)
    {
      v56 = 102;
      goto LABEL_116;
    }
    a1 = v206;
    if (v55 == "fix")
      goto LABEL_118;
    v54 = v48[4];
    if ((v54 & 0xFFFFFFDF) != 0x49)
    {
      v56 = 105;
      goto LABEL_116;
    }
    a1 = v206;
    if (v55 == "ix")
      goto LABEL_118;
    v54 = v48[5];
    if ((v54 & 0xFFFFFFDF) != 0x58)
    {
      v56 = 120;
      goto LABEL_116;
    }
    a1 = v206;
    if (v55 == "x")
      goto LABEL_118;
    v56 = 0;
    v54 = v48[6];
LABEL_117:
    if (v56 != byte_1ACCB6333[v54])
    {
      if (v53 != 84)
      {
        v83 = 116;
        v81 = *v48;
        goto LABEL_177;
      }
      if (v50 == 1)
        goto LABEL_178;
      v81 = v48[1];
      if ((v81 & 0xFFFFFFDF) != 0x4F)
      {
        v83 = 111;
        goto LABEL_177;
      }
      v82 = &aTokenize[v51];
      if (&aTokenize[v51] == "okenize")
        goto LABEL_178;
      v81 = v48[2];
      if ((v81 & 0xFFFFFFDF) != 0x4B)
      {
        v83 = 107;
        goto LABEL_177;
      }
      if (v82 == "kenize")
        goto LABEL_178;
      v81 = v48[3];
      if ((v81 & 0xFFFFFFDF) != 0x45)
        goto LABEL_173;
      if (v82 == "enize")
        goto LABEL_178;
      v81 = v48[4];
      if ((v81 & 0xFFFFFFDF) == 0x4E)
      {
        if (v82 == "nize")
          goto LABEL_178;
        v81 = v48[5];
        if ((v81 & 0xFFFFFFDF) == 0x49)
        {
          if (v82 == "ize")
            goto LABEL_178;
          v81 = v48[6];
          if ((v81 & 0xFFFFFFDF) == 0x5A)
          {
            if (v82 == "ze")
              goto LABEL_178;
            v81 = v48[7];
            if ((v81 & 0xFFFFFFDF) == 0x45)
            {
              if (v82 != "e")
              {
                v83 = 0;
                v81 = v48[8];
                goto LABEL_177;
              }
LABEL_178:
              v86 = strlen(v49);
              v87 = v86 + 1;
              v88 = 8 * (v86 + 1);
              if (sqlite3_initialize() || (v92 = (const char **)sub_1ACB5D828(v88)) == 0)
              {
                if (v88 > 0)
                {
                  v15 = 7;
                  goto LABEL_299;
                }
                v93 = 0;
              }
              else
              {
                v93 = v92;
                bzero(v92, v88);
              }
              if (sqlite3_initialize() || (v204 = (void *)sub_1ACB5D828(2 * v87)) == 0)
              {
                v204 = 0;
                if (v86 >= 0x7FFFFFFFFFFFFFFFLL)
                  v15 = 0;
                else
                  v15 = 7;
              }
              else
              {
                bzero(v204, 2 * v87);
                if (!v93)
                {
                  v15 = 0;
                  goto LABEL_211;
                }
                if (*v205)
                {
                  *v208 = sqlite3_mprintf("multiple tokenize=... directives");
                  v15 = 1;
                  goto LABEL_204;
                }
                v203 = 0;
                v96 = *v49;
                v97 = (unsigned __int8 *)v204;
                if (v96 == 32)
                {
                  do
                  {
                    v98 = *++v49;
                    v96 = v98;
                  }
                  while (v98 == 32);
                  goto LABEL_229;
                }
                while (v96)
                {
LABEL_229:
                  if (v96 == 39)
                  {
                    v99 = sub_1ACC78B54((unsigned __int8 *)v49);
                    if (!v99)
                      goto LABEL_256;
                  }
                  else
                  {
                    v100 = 0;
                    while ((v96 & 0x80) != 0 || byte_1ACCBB4E3[v96])
                      v96 = v49[++v100];
                    if (!v100)
                    {
LABEL_256:
                      *v208 = sqlite3_mprintf("parse error in tokenize directive");
                      v15 = 1;
                      goto LABEL_203;
                    }
                    v99 = &v49[v100];
                  }
                  v101 = v99 - v49;
                  memcpy(v97, v49, v99 - v49);
                  v93[v203] = (const char *)v97;
                  v102 = *v97;
                  if ((v102 - 34) <= 0x3E
                    && ((1 << (v102 - 34)) & 0x4200000000000021) != 0)
                  {
                    if (v102 == 91)
                      v102 = 93;
                    v104 = v97[1];
                    if (v97[1])
                    {
                      v105 = 0;
                      v106 = 1;
                      while (1)
                      {
                        v107 = v106 + 1;
                        if (v104 == v102)
                        {
                          if (v97[v107] != v102)
                          {
LABEL_250:
                            v108 = v105;
                            goto LABEL_252;
                          }
                          LODWORD(v107) = v106 + 2;
                          LOBYTE(v104) = v102;
                        }
                        v97[v105++] = v104;
                        v104 = v97[(int)v107];
                        v106 = v107;
                        if (!v97[(int)v107])
                          goto LABEL_250;
                      }
                    }
                    v108 = 0;
LABEL_252:
                    v97[v108] = 0;
                  }
                  v49 = v99 - 1;
                  do
                  {
                    v109 = *++v49;
                    v96 = v109;
                  }
                  while (v109 == 32);
                  v97 += v101 + 1;
                  ++v203;
                }
                if ((_DWORD)v203)
                {
                  v110 = *v93;
                  if (*v93)
                  {
                    for (m = *(unsigned __int8 **)(a3 + 56); m; m = (unsigned __int8 *)*((_QWORD *)m + 6))
                    {
                      v112 = *(unsigned __int8 **)m;
                      if (*(_QWORD *)m)
                      {
                        for (n = *v93; ; ++n)
                        {
                          v114 = *(unsigned __int8 *)n;
                          v115 = *v112;
                          if ((_DWORD)v114 == (_DWORD)v115)
                          {
                            if (!*n)
                              goto LABEL_270;
                          }
                          else if (byte_1ACCB6333[v114] != byte_1ACCB6333[v115])
                          {
                            break;
                          }
                          ++v112;
                        }
                      }
                    }
                    goto LABEL_278;
                  }
                }
                m = *(unsigned __int8 **)(a3 + 64);
LABEL_270:
                if (!m)
                {
                  v110 = *v93;
LABEL_278:
                  v121 = sqlite3_mprintf("no such tokenizer: %s", v110);
                  v15 = 1;
                  goto LABEL_279;
                }
                v118 = (unsigned __int8 *)*((_QWORD *)m + 2);
                v117 = (uint64_t (**)(uint64_t, uint64_t, int, _QWORD *))(m + 16);
                v116 = v118;
                if ((_DWORD)v203)
                  v119 = (v203 - 1);
                else
                  v119 = 0;
                v120 = ((uint64_t (*)(_QWORD, const char **, uint64_t, _QWORD *))v116)(*(v117 - 1), v93 + 1, v119, v205);
                *(_QWORD *)(v19 + 112) = v117;
                if ((_DWORD)v120)
                {
                  v15 = v120;
                  if (!v208)
                  {
LABEL_280:
                    *v205 = 0;
                    *(_QWORD *)(v19 + 112) = 0;
                    goto LABEL_203;
                  }
                  v121 = sqlite3_mprintf("error in tokenizer constructor");
LABEL_279:
                  *v208 = v121;
                  goto LABEL_280;
                }
                if (*v117 == sub_1ACC78D1C)
                {
                  if (*(_DWORD *)*v205)
                    v135 = 65;
                  else
                    v135 = 66;
                }
                else
                {
                  v135 = 0;
                }
                v15 = 0;
                *(_DWORD *)(v19 + 124) = v135;
              }
LABEL_203:
              if (!v93)
                goto LABEL_210;
LABEL_204:
              v94 = (void (**)(const char **))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v93);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v93);
                v93 = (const char **)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                {
LABEL_210:
                  a1 = v206;
                  if (v204)
                  {
LABEL_211:
                    v95 = (void (**)(void *))&off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v204);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v204);
                      v204 = (void *)xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                        goto LABEL_299;
                      v95 = (void (**)(void *))&xmmword_1ECD3B1D0;
                    }
                    (*v95)(v204);
LABEL_299:
                    a1 = v206;
                  }
LABEL_77:
                  v213 = v15;
LABEL_78:
                  v58 = v215;
                  if (!(_QWORD)v215)
                    goto LABEL_159;
LABEL_79:
                  v59 = &off_1ECD3B168;
                  v34 = v208;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v58);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v58);
                    v58 = xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                    {
                      v34 = v208;
                      goto LABEL_160;
                    }
                    v59 = &xmmword_1ECD3B1D0;
                    v34 = v208;
                  }
                  (*v59)(v58);
                  goto LABEL_160;
                }
                v94 = (void (**)(const char **))&xmmword_1ECD3B1D0;
              }
              (*v94)(v93);
              goto LABEL_210;
            }
LABEL_173:
            v83 = 101;
            goto LABEL_177;
          }
          v83 = 122;
        }
        else
        {
          v83 = 105;
        }
      }
      else
      {
        v83 = 110;
      }
LABEL_177:
      if (v83 == byte_1ACCB6333[v81])
        goto LABEL_178;
      if (v53 != 67)
      {
        v91 = 99;
        v89 = *v48;
        goto LABEL_282;
      }
      if (v50 == 1)
        goto LABEL_283;
      v89 = v48[1];
      if ((v89 & 0xFFFFFFDF) != 0x4F)
      {
        v91 = 111;
        goto LABEL_282;
      }
      v90 = &aContent[v51];
      if (&aContent[v51] == "ontent")
      {
LABEL_283:
        if (!*(_DWORD *)(v19 + 64))
        {
          if (*v49)
          {
            *(_DWORD *)(v19 + 64) = 2;
            *(_QWORD *)(v19 + 72) = sub_1ACC78590(&v214, "%Q.%Q", *(_QWORD *)(v19 + 8), v49);
            v15 = v214;
          }
          else
          {
            v15 = 0;
            *(_DWORD *)(v19 + 64) = 1;
          }
          goto LABEL_299;
        }
        v122 = sqlite3_mprintf("multiple content=... directives", v201, v202);
        goto LABEL_298;
      }
      v89 = v48[2];
      if ((v89 & 0xFFFFFFDF) == 0x4E)
      {
        if (v90 == "ntent")
          goto LABEL_283;
        v89 = v48[3];
        if ((v89 & 0xFFFFFFDF) != 0x54)
          goto LABEL_261;
        if (v90 == "tent")
          goto LABEL_283;
        v89 = v48[4];
        if ((v89 & 0xFFFFFFDF) != 0x45)
        {
          v91 = 101;
          goto LABEL_282;
        }
        if (v90 == "ent")
          goto LABEL_283;
        v89 = v48[5];
        if ((v89 & 0xFFFFFFDF) == 0x4E)
        {
          if (v90 == "nt")
            goto LABEL_283;
          v89 = v48[6];
          if ((v89 & 0xFFFFFFDF) == 0x54)
          {
            if (v90 != "t")
            {
              v91 = 0;
              v89 = v48[7];
LABEL_282:
              if (v91 == byte_1ACCB6333[v89])
                goto LABEL_283;
              v123 = 0;
              v124 = v48 + 18;
              while (1)
              {
                if (v123 == 18)
                {
                  v125 = 0;
                  goto LABEL_294;
                }
                v125 = byte_1ACCB6333[aContentlessDel_1[v123]];
                if (v125 != byte_1ACCB6333[v48[v123]])
                  break;
                if (v51 + 1 == ++v123)
                  goto LABEL_295;
              }
              v124 = &v48[v123];
LABEL_294:
              if (v125 == byte_1ACCB6333[*v124])
              {
LABEL_295:
                v126 = *v49;
                if ((v126 & 0xFE) == 0x30 && !v49[1])
                {
                  v15 = 0;
                  *(_DWORD *)(v19 + 68) = v126 == 49;
                  goto LABEL_299;
                }
                v122 = sqlite3_mprintf("malformed contentless_delete=... directive", v201, v202);
                goto LABEL_298;
              }
              if (v53 != 67)
              {
                v131 = 99;
                v127 = *v48;
                goto LABEL_331;
              }
              if (v50 == 1)
                goto LABEL_365;
              v127 = v48[1];
              if ((v127 & 0xFFFFFFDF) != 0x4F)
              {
                v131 = 111;
                goto LABEL_331;
              }
              v128 = &aContentRowid[v51];
              if (&aContentRowid[v51] == "ontent_rowid")
                goto LABEL_365;
              v127 = v48[2];
              if ((v127 & 0xFFFFFFDF) != 0x4E)
              {
                v130 = 110;
                v129 = v48[2];
                goto LABEL_364;
              }
              if (v128 == "ntent_rowid")
                goto LABEL_365;
              v129 = v48[3];
              if ((v129 & 0xFFFFFFDF) == 0x54)
              {
                if (v128 == "tent_rowid")
                  goto LABEL_365;
                v129 = v48[4];
                if ((v129 & 0xFFFFFFDF) != 0x45)
                {
                  v130 = 101;
                  goto LABEL_364;
                }
                if (v128 == "ent_rowid")
                  goto LABEL_365;
                v129 = v48[5];
                if ((v129 & 0xFFFFFFDF) != 0x4E)
                {
                  v130 = 110;
                  goto LABEL_364;
                }
                if (v128 == "nt_rowid")
                  goto LABEL_365;
                v129 = v48[6];
                if ((v129 & 0xFFFFFFDF) == 0x54)
                {
                  if (v128 == "t_rowid")
                    goto LABEL_365;
                  v129 = v48[7];
                  if (v129 == 95)
                  {
                    if (v128 == "_rowid")
                      goto LABEL_365;
                    v129 = v48[8];
                    if ((v129 & 0xFFFFFFDF) == 0x52)
                    {
                      if (v128 == "rowid")
                        goto LABEL_365;
                      v129 = v48[9];
                      if ((v129 & 0xFFFFFFDF) == 0x4F)
                      {
                        if (v128 == "owid")
                          goto LABEL_365;
                        v129 = v48[10];
                        if ((v129 & 0xFFFFFFDF) == 0x57)
                        {
                          if (v128 == "wid")
                            goto LABEL_365;
                          v129 = v48[11];
                          if ((v129 & 0xFFFFFFDF) == 0x49)
                          {
                            if (v128 == "id")
                              goto LABEL_365;
                            v129 = v48[12];
                            if ((v129 & 0xFFFFFFDF) == 0x44)
                            {
                              if (v128 != "d")
                              {
                                v130 = 0;
                                v129 = v48[13];
                                goto LABEL_364;
                              }
LABEL_365:
                              if (!*(_QWORD *)(v19 + 80))
                              {
                                v136 = strlen(v49);
                                v137 = sqlite3_initialize();
                                v138 = 0;
                                v15 = 7;
                                if ((v136 & 0x80000000) == 0 && !v137)
                                {
                                  v139 = (_BYTE *)sub_1ACB5D828(v136 + 1);
                                  v138 = v139;
                                  if (v139)
                                  {
                                    memcpy(v139, v49, v136);
                                    v15 = 0;
                                    v138[v136] = 0;
                                  }
                                }
                                *(_QWORD *)(v19 + 80) = v138;
                                goto LABEL_299;
                              }
                              v122 = sqlite3_mprintf("multiple content_rowid=... directives", v201, v202);
                              goto LABEL_298;
                            }
                            v130 = 100;
                          }
                          else
                          {
                            v130 = 105;
                          }
                        }
                        else
                        {
                          v130 = 119;
                        }
                      }
                      else
                      {
                        v130 = 111;
                      }
                    }
                    else
                    {
                      v130 = 114;
                    }
                  }
                  else
                  {
                    v130 = 95;
                  }
LABEL_364:
                  if (v130 == byte_1ACCB6333[v129])
                    goto LABEL_365;
                  if (v51 == 1)
                    goto LABEL_332;
                  if ((v127 & 0xFFFFFFDF) == 0x4C)
                  {
                    v140 = &aColumnsize[v51];
                    if (&aColumnsize[v51] == "lumnsize")
                      goto LABEL_332;
                    v127 = v48[3];
                    if ((v127 & 0xFFFFFFDF) == 0x55)
                    {
                      if (v140 == "umnsize")
                        goto LABEL_332;
                      v127 = v48[4];
                      if ((v127 & 0xFFFFFFDF) == 0x4D)
                      {
                        if (v140 == "mnsize")
                          goto LABEL_332;
                        v127 = v48[5];
                        if ((v127 & 0xFFFFFFDF) == 0x4E)
                        {
                          if (v140 == "nsize")
                            goto LABEL_332;
                          v127 = v48[6];
                          if ((v127 & 0xFFFFFFDF) == 0x53)
                          {
                            if (v140 == "size")
                              goto LABEL_332;
                            v127 = v48[7];
                            if ((v127 & 0xFFFFFFDF) == 0x49)
                            {
                              if (v140 == "ize")
                                goto LABEL_332;
                              v127 = v48[8];
                              if ((v127 & 0xFFFFFFDF) == 0x5A)
                              {
                                if (v140 == "ze")
                                  goto LABEL_332;
                                v127 = v48[9];
                                if ((v127 & 0xFFFFFFDF) == 0x45)
                                {
                                  if (v140 != "e")
                                  {
                                    v131 = 0;
                                    v127 = v48[10];
                                    goto LABEL_331;
                                  }
LABEL_332:
                                  v132 = *v49;
                                  if ((v132 & 0xFE) == 0x30 && !v49[1])
                                  {
                                    v15 = 0;
                                    *(_DWORD *)(v19 + 88) = v132 == 49;
                                    goto LABEL_299;
                                  }
                                  v122 = sqlite3_mprintf("malformed columnsize=... directive", v201, v202);
                                  goto LABEL_298;
                                }
                                v131 = 101;
                              }
                              else
                              {
                                v131 = 122;
                              }
                            }
                            else
                            {
                              v131 = 105;
                            }
                          }
                          else
                          {
                            v131 = 115;
                          }
                        }
                        else
                        {
                          v131 = 110;
                        }
                      }
                      else
                      {
                        v131 = 109;
                      }
                    }
                    else
                    {
                      v131 = 117;
                    }
                  }
                  else
                  {
                    v131 = 108;
                  }
LABEL_331:
                  if (v131 == byte_1ACCB6333[v127])
                    goto LABEL_332;
                  if (v53 == 68)
                  {
                    if (v50 == 1)
                      goto LABEL_395;
                    v52 = v48[1];
                    if ((v52 & 0xFFFFFFDF) == 0x45)
                    {
                      v133 = &aDetail[v51];
                      if (v133 == "etail")
                        goto LABEL_395;
                      v52 = v48[2];
                      if ((v52 & 0xFFFFFFDF) == 0x54)
                      {
                        if (v133 == "tail")
                          goto LABEL_395;
                        v52 = v48[3];
                        if ((v52 & 0xFFFFFFDF) == 0x41)
                        {
                          if (v133 == "ail")
                            goto LABEL_395;
                          v52 = v48[4];
                          if ((v52 & 0xFFFFFFDF) == 0x49)
                          {
                            if (v133 == "il")
                              goto LABEL_395;
                            v52 = v48[5];
                            if ((v52 & 0xFFFFFFDF) == 0x4C)
                            {
                              if (v133 == "l")
                                goto LABEL_395;
                              v134 = 0;
                              v52 = v48[6];
                            }
                            else
                            {
                              v134 = 108;
                            }
                          }
                          else
                          {
                            v134 = 105;
                          }
                        }
                        else
                        {
                          v134 = 97;
                        }
                      }
                      else
                      {
                        v134 = 116;
                      }
                    }
                    else
                    {
                      v134 = 101;
                    }
                  }
                  else
                  {
                    v134 = 100;
                  }
                  if (v134 != byte_1ACCB6333[v52])
                  {
                    v122 = sqlite3_mprintf("unrecognized option: \"%.*s\"");
LABEL_298:
                    *v208 = v122;
                    v15 = 1;
                    goto LABEL_299;
                  }
LABEL_395:
                  v141 = strlen(v49);
                  if (v141 < 0)
                  {
                    sub_1ACBBE20C(35843);
                    sub_1ACBBE20C(35843);
                    goto LABEL_466;
                  }
                  if (!v141)
                  {
LABEL_466:
                    v122 = sqlite3_mprintf("malformed detail=... directive", v201, v202);
                    goto LABEL_298;
                  }
                  v142 = (v141 - 1);
                  v143 = *v49;
                  v144 = &byte_1ACCB6333[v143];
                  v145 = v143 & 0xFFFFFFDF;
                  if (v145 == 78)
                  {
                    if (v141 == 1)
                      goto LABEL_413;
                    v146 = v49[1];
                    if ((v146 & 0xFFFFFFDF) == 0x4F)
                    {
                      v147 = &aNone[v142];
                      if (&aNone[v142] == "one")
                        goto LABEL_413;
                      v148 = v49[2];
                      if ((v148 & 0xFFFFFFDF) == 0x4E)
                      {
                        if (v147 == "ne")
                          goto LABEL_413;
                        v149 = v49[3];
                        if ((v149 & 0xFFFFFFDF) == 0x45)
                        {
                          if (v147 == "e")
                            goto LABEL_413;
                          v150 = 0;
                          v151 = &byte_1ACCB6333[v49[4]];
                        }
                        else
                        {
                          v151 = &byte_1ACCB6333[v149];
                          v150 = 101;
                        }
                      }
                      else
                      {
                        v151 = &byte_1ACCB6333[v148];
                        v150 = 110;
                      }
                    }
                    else
                    {
                      v151 = &byte_1ACCB6333[v146];
                      v150 = 111;
                    }
                  }
                  else
                  {
                    v150 = 110;
                    v151 = v144;
                  }
                  if (v150 != *v151)
                  {
                    v153 = 0;
                    v152 = -1;
LABEL_415:
                    if (v145 == 70)
                    {
                      if (v141 == 1)
                        goto LABEL_425;
                      v154 = v49[1];
                      if ((v154 & 0xFFFFFFDF) == 0x55)
                      {
                        v155 = &aFull[v142];
                        if (&aFull[v142] == "ull")
                          goto LABEL_425;
                        v156 = v49[2];
                        if ((v156 & 0xFFFFFFDF) == 0x4C)
                        {
                          if (v155 == "ll")
                            goto LABEL_425;
                          v156 = v49[3];
                          if ((v156 & 0xFFFFFFDF) == 0x4C)
                          {
                            if (v155 != "l")
                            {
                              v157 = 0;
                              v158 = &byte_1ACCB6333[v49[4]];
                              goto LABEL_429;
                            }
LABEL_425:
                            if ((v153 & 1) == 0)
                            {
                              v15 = 0;
                              *(_DWORD *)(v19 + 92) = 0;
                              goto LABEL_299;
                            }
                            goto LABEL_466;
                          }
                        }
                        v158 = &byte_1ACCB6333[v156];
                        v157 = 108;
                      }
                      else
                      {
                        v158 = &byte_1ACCB6333[v154];
                        v157 = 117;
                      }
                    }
                    else
                    {
                      v157 = 102;
                      v158 = v144;
                    }
LABEL_429:
                    if (v157 == *v158)
                      v152 = 0;
                    else
                      v153 = 0;
                    if ((v153 & 1) == 0)
                    {
                      if (v145 == 67)
                      {
                        if (v141 == 1)
                          goto LABEL_462;
                        v159 = v49[1];
                        if ((v159 & 0xFFFFFFDF) == 0x4F)
                        {
                          v160 = &aColumns[v142];
                          if (&aColumns[v142] == "olumns")
                            goto LABEL_462;
                          v161 = v49[2];
                          if ((v161 & 0xFFFFFFDF) == 0x4C)
                          {
                            if (v160 == "lumns")
                              goto LABEL_462;
                            v162 = v49[3];
                            if ((v162 & 0xFFFFFFDF) == 0x55)
                            {
                              if (v160 == "umns")
                                goto LABEL_462;
                              v163 = v49[4];
                              if ((v163 & 0xFFFFFFDF) == 0x4D)
                              {
                                if (v160 == "mns")
                                  goto LABEL_462;
                                v164 = v49[5];
                                if ((v164 & 0xFFFFFFDF) == 0x4E)
                                {
                                  if (v160 == "ns")
                                    goto LABEL_462;
                                  v165 = v49[6];
                                  if ((v165 & 0xFFFFFFDF) == 0x53)
                                  {
                                    if (v160 == "s")
                                      goto LABEL_462;
                                    v166 = 0;
                                    v144 = &byte_1ACCB6333[v49[7]];
                                  }
                                  else
                                  {
                                    v144 = &byte_1ACCB6333[v165];
                                    v166 = 115;
                                  }
                                }
                                else
                                {
                                  v144 = &byte_1ACCB6333[v164];
                                  v166 = 110;
                                }
                              }
                              else
                              {
                                v144 = &byte_1ACCB6333[v163];
                                v166 = 109;
                              }
                            }
                            else
                            {
                              v144 = &byte_1ACCB6333[v162];
                              v166 = 117;
                            }
                          }
                          else
                          {
                            v144 = &byte_1ACCB6333[v161];
                            v166 = 108;
                          }
                        }
                        else
                        {
                          v144 = &byte_1ACCB6333[v159];
                          v166 = 111;
                        }
                      }
                      else
                      {
                        v166 = 99;
                      }
                      if (v166 == *v144)
                      {
LABEL_462:
                        if (v152 < 0)
                        {
                          v15 = 0;
                          *(_DWORD *)(v19 + 92) = 2;
                          goto LABEL_299;
                        }
                        goto LABEL_466;
                      }
                      *(_DWORD *)(v19 + 92) = v152;
                      if ((v152 & 0x80000000) == 0)
                      {
                        v15 = 0;
                        goto LABEL_299;
                      }
                    }
                    goto LABEL_466;
                  }
LABEL_413:
                  v152 = 1;
                  v153 = 1;
                  goto LABEL_415;
                }
              }
              v130 = 116;
              goto LABEL_364;
            }
            goto LABEL_283;
          }
LABEL_261:
          v91 = 116;
          goto LABEL_282;
        }
      }
      v91 = 110;
      goto LABEL_282;
    }
LABEL_118:
    v73 = *(_OWORD **)(v19 + 56);
    if (!v73)
    {
      if (!sqlite3_initialize())
      {
        v73 = (_OWORD *)sub_1ACB5D828(124);
        if (v73)
        {
          *(_OWORD *)((char *)v73 + 108) = 0u;
          v73[5] = 0u;
          v73[6] = 0u;
          v73[3] = 0u;
          v73[4] = 0u;
          v73[1] = 0u;
          v73[2] = 0u;
          *v73 = 0u;
          *(_QWORD *)(v19 + 56) = v73;
          goto LABEL_119;
        }
      }
      *(_QWORD *)(v19 + 56) = 0;
      v15 = 7;
      goto LABEL_77;
    }
LABEL_119:
    for (ii = 0; ; ii = 1)
    {
      --v49;
      do
      {
        v76 = *++v49;
        v75 = v76;
      }
      while (v76 == 32);
      if (v75 != 44 || (ii & 1) == 0)
        break;
      do
      {
        v77 = *++v49;
        v75 = v77;
      }
      while (v77 == 32);
LABEL_126:
      if (v75 - 58 <= 0xFFFFFFF5)
      {
        v57 = sqlite3_mprintf("malformed prefix=... directive", v201);
        goto LABEL_76;
      }
      v78 = *(int *)(v19 + 48);
      if ((_DWORD)v78 == 31)
      {
        v57 = sqlite3_mprintf("too many prefix indexes (max %d)");
        goto LABEL_76;
      }
      v79 = 0;
      do
      {
        if (v75 > 0x39)
          break;
        if (v79 > 999)
          break;
        v79 = v75 + 10 * v79 - 48;
        v80 = *++v49;
        v75 = v80;
      }
      while (v80 > 47);
      if ((v79 - 1000) <= 0xFFFFFC18)
      {
        v57 = sqlite3_mprintf("prefix length out of range (max 999)");
        goto LABEL_76;
      }
      *((_DWORD *)v73 + v78) = v79;
      ++*(_DWORD *)(v19 + 48);
    }
    if (v75)
      goto LABEL_126;
    v15 = 0;
    v213 = 0;
    v58 = v215;
    if ((_QWORD)v215)
      goto LABEL_79;
LABEL_159:
    v34 = v208;
LABEL_160:
    v84 = (unsigned __int8 *)v212;
    if (v212)
    {
      v85 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_166;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v84);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v84);
      v84 = (unsigned __int8 *)xmmword_1ECD3E930;
      a1 = v206;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v85 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_166:
        (*v85)(v84);
      }
    }
    if ((_DWORD)v15)
      break;
    v38 = v207 + 1;
  }
  while (v207 + 1 < (uint64_t)__s);
  if ((_DWORD)v15)
    goto LABEL_27;
  if (!*(_DWORD *)(v19 + 68))
    goto LABEL_479;
  if (*(_DWORD *)(v19 + 64) != 1)
  {
LABEL_489:
    v37 = sqlite3_mprintf("contentless_delete=1 requires a contentless table", v201);
    goto LABEL_33;
  }
  if (*(_DWORD *)(v19 + 88))
    goto LABEL_479;
  v37 = sqlite3_mprintf("contentless_delete=1 is incompatible with columnsize=0");
LABEL_33:
  *v34 = v37;
  v15 = 1;
LABEL_27:
  sub_1ACC785E8(v19);
LABEL_4:
  sub_1ACC782C8((uint64_t)v14);
  v14 = 0;
LABEL_5:
  *a6 = v14;
  return v15;
}

_DWORD *sub_1ACC78230(uint64_t a1)
{
  _QWORD *v2;
  sqlite3_stmt *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *result;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = 0;
    v3 = (sqlite3_stmt *)v2[3];
    v4 = (_QWORD *)v2[4];
    v5 = v4[3];
    if (v5)
      xmmword_1ECD3B1C0(v5);
    sub_1ACBE0F9C(v4, v2);
    v6 = v4[3];
    if (v6)
      xmmword_1ECD3B1D0(v6);
    sqlite3_finalize(v3);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    sub_1ACC7A2E4(v7);
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 52) = 0;
  result = *(_DWORD **)(a1 + 144);
  if (result)
  {
    result = sub_1ACC7A15C(result);
    *(_QWORD *)(a1 + 144) = 0;
  }
  return result;
}

uint64_t sub_1ACC782C8(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    sub_1ACC791FC(*(_QWORD *)(result + 32));
    sub_1ACC7A6F4(*(_QWORD *)(v1 + 40));
    sub_1ACC785E8(*(_QWORD *)(v1 + 24));
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

char *sub_1ACC78394(_DWORD *a1, char *__s, unsigned __int8 **a3, _DWORD *a4)
{
  size_t v8;
  char *result;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  void (**v21)(unsigned __int8 *);

  v8 = strlen(__s);
  if (sqlite3_initialize())
  {
    *a4 = 0;
    *a3 = 0;
LABEL_3:
    result = 0;
    *a1 = 7;
    return result;
  }
  v10 = v8 + 1;
  v11 = (unsigned __int8 *)sub_1ACB5D828(v8 + 1);
  *a4 = 0;
  *a3 = 0;
  if (!v11)
    goto LABEL_3;
  v12 = v11;
  memcpy(v11, __s, v10);
  v13 = *v12;
  if ((v13 - 34) > 0x3E || ((1 << (v13 - 34)) & 0x4200000000000021) == 0)
  {
    for (i = 0; __s[i] < 0 || byte_1ACCBB4E3[__s[i]]; ++i)
      ;
    if (i)
    {
      result = &__s[i];
      v12[i] = 0;
      *a3 = v12;
      return result;
    }
  }
  else
  {
    if (v13 == 91)
      v15 = 93;
    else
      v15 = *v12;
    v16 = v12[1];
    if (v12[1])
    {
      v17 = 0;
      v18 = 1;
      do
      {
        v19 = v18 + 1;
        if (v16 == v15)
        {
          if (v12[v19] != v15)
            goto LABEL_21;
          v18 += 2;
          LOBYTE(v16) = v15;
        }
        else
        {
          ++v18;
        }
        v12[v17++] = v16;
        v16 = v12[v18];
      }
      while (v12[v18]);
      LODWORD(v19) = v18;
    }
    else
    {
      LODWORD(v17) = 0;
      LODWORD(v19) = 1;
    }
LABEL_21:
    v12[v17] = 0;
    *a4 = 1;
    if (__s)
    {
      result = &__s[(int)v19];
      *a3 = v12;
      return result;
    }
  }
  v21 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v12);
    v12 = (unsigned __int8 *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      return 0;
    v21 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
  }
  (*v21)(v12);
  return 0;
}

char *sub_1ACC78590(_DWORD *a1, char *a2, ...)
{
  char *result;
  va_list va;

  va_start(va, a2);
  if (*a1)
    return 0;
  result = sqlite3_vmprintf(a2, va);
  if (!result)
    *a1 = 7;
  return result;
}

uint64_t sub_1ACC785E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t i;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  uint64_t v11;
  uint64_t (**v12)(uint64_t);
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t v15;
  uint64_t (**v16)(uint64_t);
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;
  uint64_t (**v22)(uint64_t);
  uint64_t (**v23)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  if (*(_QWORD *)(result + 104))
    (*(void (**)(void))(*(_QWORD *)(result + 112) + 8))();
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_10:
      (*v3)(v2);
      goto LABEL_11;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_10;
    }
  }
LABEL_11:
  v4 = *(_QWORD *)(v1 + 16);
  if (!v4)
    goto LABEL_18;
  v5 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_17;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v4);
  v4 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = &xmmword_1ECD3B1D0;
LABEL_17:
    (*v5)(v4);
  }
LABEL_18:
  if (*(int *)(v1 + 24) >= 1)
  {
    for (i = 0; i < *(int *)(v1 + 24); ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * i);
      if (v7)
      {
        v8 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v7);
          v7 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            continue;
          v8 = &xmmword_1ECD3B1D0;
        }
        (*v8)(v7);
      }
    }
  }
  v9 = *(_QWORD *)(v1 + 32);
  if (v9)
  {
    v10 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_34:
      (*v10)(v9);
      goto LABEL_35;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v9);
    v9 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v10 = &xmmword_1ECD3B1D0;
      goto LABEL_34;
    }
  }
LABEL_35:
  v11 = *(_QWORD *)(v1 + 56);
  if (!v11)
    goto LABEL_42;
  v12 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_41;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v11);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v11);
  v11 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v12 = &xmmword_1ECD3B1D0;
LABEL_41:
    (*v12)(v11);
  }
LABEL_42:
  v13 = *(_QWORD *)(v1 + 160);
  if (!v13)
    goto LABEL_49;
  v14 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_48;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v13);
  v13 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v14 = &xmmword_1ECD3B1D0;
LABEL_48:
    (*v14)(v13);
  }
LABEL_49:
  v15 = *(_QWORD *)(v1 + 168);
  if (!v15)
    goto LABEL_56;
  v16 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_55;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v15);
  v15 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = &xmmword_1ECD3B1D0;
LABEL_55:
    (*v16)(v15);
  }
LABEL_56:
  v17 = *(_QWORD *)(v1 + 72);
  if (!v17)
    goto LABEL_63;
  v18 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_62;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v17);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v17);
  v17 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v18 = &xmmword_1ECD3B1D0;
LABEL_62:
    (*v18)(v17);
  }
LABEL_63:
  v19 = *(_QWORD *)(v1 + 80);
  if (!v19)
    goto LABEL_70;
  v20 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_69;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v19);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v19);
  v19 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v20 = &xmmword_1ECD3B1D0;
LABEL_69:
    (*v20)(v19);
  }
LABEL_70:
  v21 = *(_QWORD *)(v1 + 96);
  if (v21)
  {
    v22 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v21);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v21);
      v21 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_77;
      v22 = &xmmword_1ECD3B1D0;
    }
    (*v22)(v21);
  }
LABEL_77:
  v23 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v23)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v23 = &xmmword_1ECD3B1D0;
    return (*v23)(v1);
  }
  return result;
}

char *sub_1ACC78B54(unsigned __int8 *a1)
{
  int v1;
  int v2;
  _BYTE *v3;
  char *v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  uint64_t i;
  unsigned int v14;
  char v15;
  uint64_t v16;
  int v18;

  v1 = (char)*a1;
  v2 = *a1;
  if (v1 <= 87)
  {
    if (v1 == 39)
    {
      v3 = a1 + 1;
      while (1)
      {
        if (*v3 == 39)
        {
          v18 = *++v3;
          if (v18 != 39)
            break;
        }
        if (!*++v3)
          return 0;
      }
      return v3;
    }
    if (v1 == 78)
    {
LABEL_5:
      v3 = a1 + 4;
      if ((v2 & 0xFFFFFFDF) == 0x4E)
      {
        v4 = (char *)(a1 + 1);
        if ((a1[1] & 0xDF) == 0x55)
        {
          v4 = (char *)(a1 + 2);
          if ((a1[2] & 0xDF) == 0x4C)
          {
            v5 = a1[3];
            a1 += 3;
            if ((v5 & 0xFFFFFFDF) == 0x4C)
              return v3;
            v6 = 108;
            goto LABEL_42;
          }
          v6 = 108;
        }
        else
        {
          v6 = 117;
        }
        a1 = (unsigned __int8 *)v4;
      }
      else
      {
        v6 = 110;
      }
LABEL_42:
      if (v6 == byte_1ACCB6333[*a1])
        return v3;
      return 0;
    }
    goto LABEL_12;
  }
  if (v1 != 88 && v1 != 120)
  {
    if (v1 == 110)
      goto LABEL_5;
LABEL_12:
    if (v2 == 45 || (v7 = a1, v2 == 43))
      v7 = a1 + 1;
    do
    {
      v9 = *v7++;
      v8 = v9;
    }
    while ((v9 - 58) > 0xFFFFFFF5);
    v10 = (char *)(v7 - 1);
    if (v8 == 46 && *v7 - 58 >= 0xFFFFFFF6)
    {
      v10 = (char *)v7;
      do
        v11 = *++v10;
      while ((v11 - 58) > 0xFFFFFFF5);
    }
    if (v10 == (char *)a1)
      return 0;
    else
      return v10;
  }
  if (a1[1] != 39)
    return 0;
  for (i = 0; ; ++i)
  {
    if ((a1[i + 2] - 48) >= 0xAu)
    {
      v14 = a1[i + 2] - 39;
      if (v14 > 0x3F)
        return 0;
      if (((1 << v14) & 0xFC000000FC000000) == 0)
        break;
    }
  }
  if (a1[i + 2] != 39)
    return 0;
  v15 = i + 2;
  v16 = (uint64_t)&a1[i + 3];
  if ((v15 & 1) != 0)
    return 0;
  else
    return (char *)v16;
}

uint64_t sub_1ACC78D1C(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  _DWORD *v7;
  uint64_t result;
  _DWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  const char *i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (**v17)(_QWORD);

  if (!sqlite3_initialize())
  {
    v9 = (_DWORD *)sub_1ACB5D828(4);
    v7 = v9;
    if (!v9)
      goto LABEL_3;
    *v9 = 1;
    if (a3 < 1)
      goto LABEL_17;
    v10 = 0;
LABEL_8:
    v11 = *(_BYTE **)(a2 + 8 * v10);
    if (!v11)
    {
LABEL_18:
      v17 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_23;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (_DWORD *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v17 = &xmmword_1ECD3B1D0;
LABEL_23:
        (*v17)(v7);
        v7 = 0;
      }
      result = 1;
      goto LABEL_4;
    }
    v12 = *(unsigned __int8 **)(a2 + ((8 * v10) | 8));
    for (i = "case_sensitive"; ; ++i)
    {
      v14 = *v11;
      v15 = *(unsigned __int8 *)i;
      if ((_DWORD)v14 == (_DWORD)v15)
      {
        if (!*v11)
        {
          v16 = *v12;
          if ((v16 & 0xFE) != 0x30 || v12[1])
            goto LABEL_18;
          *v9 = v16 == 48;
          v10 += 2;
          if ((int)v10 >= a3)
          {
LABEL_17:
            result = 0;
            goto LABEL_4;
          }
          goto LABEL_8;
        }
      }
      else if (byte_1ACCB6333[v14] != byte_1ACCB6333[v15])
      {
        goto LABEL_18;
      }
      ++v11;
    }
  }
  v7 = 0;
LABEL_3:
  result = 7;
LABEL_4:
  *a4 = v7;
  return result;
}

uint64_t sub_1ACC78E9C(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

char *sub_1ACC78F50(char *result, uint64_t a2, char *a3, ...)
{
  char *v4;
  char *v5;
  int v6;
  size_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(const void *);
  va_list va;

  va_start(va, a3);
  if (*(_DWORD *)result)
    return result;
  v4 = result;
  result = sqlite3_vmprintf(a3, va);
  if (!result)
  {
    *(_DWORD *)v4 = 7;
    return result;
  }
  v5 = result;
  v6 = strlen(result);
  v7 = (v6 + 1);
  if (v6 != -1)
  {
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 12);
    v10 = (v8 + v7);
    if (v10 <= v9)
    {
      v14 = *(_QWORD *)a2;
LABEL_16:
      memcpy((void *)(v14 + v8), v5, v7);
      *(_DWORD *)(a2 + 8) += v7;
      goto LABEL_17;
    }
    if (v9)
      LODWORD(v11) = *(_DWORD *)(a2 + 12);
    else
      LODWORD(v11) = 64;
    v11 = (int)v11;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v10);
    v13 = *(_QWORD *)a2;
    if (!sqlite3_initialize())
    {
      v14 = sub_1ACB6BB48(v13, v12);
      if (v14)
      {
        *(_DWORD *)(a2 + 12) = v12;
        *(_QWORD *)a2 = v14;
        v8 = *(_DWORD *)(a2 + 8);
        goto LABEL_16;
      }
    }
    *(_DWORD *)v4 = 7;
  }
LABEL_17:
  --*(_DWORD *)(a2 + 8);
  v15 = (uint64_t (**)(const void *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (char *)(*v15)(v5);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  result = (char *)off_1ECD3B168(v5);
  v5 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v15 = (uint64_t (**)(const void *))&xmmword_1ECD3B1D0;
    return (char *)(*v15)(v5);
  }
  return result;
}

uint64_t sub_1ACC790D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  sqlite3 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (**v14)(char *);
  char *v16;

  v8 = *(sqlite3 **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = " WITHOUT ROWID";
  if (!a4)
    v11 = &byte_1ACCBEAEE;
  v16 = 0;
  v12 = sub_1ACC79468(v8, &v16, "CREATE TABLE %Q.'%q_%q'(%s)%s", v9, v10, a2, a3, v11);
  if (v16)
  {
    *a5 = sqlite3_mprintf("fts5: error creating shadow table %q_%s: %s", *(_QWORD *)(a1 + 16), a2, v16);
    v13 = v16;
    if (v16)
    {
      v14 = (void (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_10:
        (*v14)(v13);
        return v12;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v13);
      v13 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v14 = (void (**)(char *))&xmmword_1ECD3B1D0;
        goto LABEL_10;
      }
    }
  }
  return v12;
}

uint64_t sub_1ACC791FC(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t (**v9)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  v2 = *(_DWORD **)(result + 144);
  if (v2)
  {
    sub_1ACC7A15C(v2);
    *(_QWORD *)(v1 + 144) = 0;
  }
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 72));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 80));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 88));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 96));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 104));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 128));
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 120));
  v3 = *(_QWORD *)(v1 + 24);
  if (!v3)
    goto LABEL_18;
  sub_1ACC7A2E4(*(_QWORD *)(v1 + 24));
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    v5 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_12;
      v5 = &xmmword_1ECD3B1D0;
    }
    (*v5)(v4);
  }
LABEL_12:
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_17:
    (*v6)(v3);
    goto LABEL_18;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v3);
  v3 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    goto LABEL_17;
  }
LABEL_18:
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
  {
    v8 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_25;
      v8 = &xmmword_1ECD3B1D0;
    }
    (*v8)(v7);
  }
LABEL_25:
  v9 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v9)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = &xmmword_1ECD3B1D0;
    return (*v9)(v1);
  }
  return result;
}

uint64_t sub_1ACC79468(sqlite3 *a1, char **a2, char *a3, ...)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t (**v8)(char *);
  va_list va;

  va_start(va, a3);
  v5 = sqlite3_vmprintf(a3, va);
  if (!v5)
    return 7;
  v6 = v5;
  v7 = sqlite3_exec(a1, v5, 0, 0, a2);
  v8 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_7;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v6);
  v6 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_7:
    (*v8)(v6);
  }
  return v7;
}

unsigned __int8 *sub_1ACC7955C(unsigned __int8 *result, uint64_t a2, char *a3, unsigned int a4)
{
  unsigned __int8 *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t (**v13)(unsigned __int8 *);
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*((_DWORD *)result + 15))
    return result;
  v7 = result;
  v8 = (uint64_t **)(result + 72);
  v9 = (uint64_t *)*((_QWORD *)result + 9);
  if (!v9)
  {
    result = (unsigned __int8 *)sqlite3_mprintf("REPLACE INTO '%q'.'%q_data'(id, block) VALUES(?,?)", *(_QWORD *)(*(_QWORD *)result + 8), *(_QWORD *)(*(_QWORD *)result + 16));
    v12 = result;
    if (*((_DWORD *)v7 + 15))
    {
      if (!result)
        return result;
    }
    else
    {
      if (!result)
      {
        *((_DWORD *)v7 + 15) = 7;
        return result;
      }
      *((_DWORD *)v7 + 15) = sub_1ACB5C66C(**(_QWORD **)v7, result, 0xFFFFFFFFLL, 133, 0, v8, 0, v11);
    }
    v13 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
      --qword_1ECD3E8D0;
      result = (unsigned __int8 *)off_1ECD3B168(v12);
      v12 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_17;
      v13 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    result = (unsigned __int8 *)(*v13)(v12);
LABEL_17:
    if (*((_DWORD *)v7 + 15))
      return result;
    v9 = *v8;
  }
  if (!sub_1ACBA0E50((uint64_t)v9, 0))
  {
    v10 = v9[16];
    if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10, a2);
    }
    else
    {
      *(_QWORD *)v10 = a2;
      *(_WORD *)(v10 + 20) = 4;
    }
    v14 = *(_QWORD *)(*v9 + 24);
    if (v14)
      xmmword_1ECD3B1D0(v14);
  }
  if ((a4 & 0x80000000) != 0)
  {
    sub_1ACBBE20C(98722);
  }
  else
  {
    v15 = *v8;
    if (!sub_1ACBA0E50((uint64_t)v15, 1u))
    {
      if (a3)
      {
        v16 = sub_1ACB57870(v15[16] + 64, a3, a4, 0, 0);
        if (v16)
        {
          v17 = v16;
          v18 = *v15;
          *(_DWORD *)(v18 + 80) = v17;
          sub_1ACBE938C(v18, v17);
          sub_1ACBF2990(*v15, v17);
        }
      }
      v19 = *(_QWORD *)(*v15 + 24);
      if (v19)
        xmmword_1ECD3B1D0(v19);
    }
  }
  sqlite3_step(*((sqlite3_stmt **)v7 + 9));
  *((_DWORD *)v7 + 15) = sqlite3_reset(*((sqlite3_stmt **)v7 + 9));
  v20 = *((_QWORD *)v7 + 9);
  result = (unsigned __int8 *)sub_1ACBA0E50(v20, 1u);
  if (!(_DWORD)result)
  {
    result = *(unsigned __int8 **)(*(_QWORD *)v20 + 24);
    if (result)
      return (unsigned __int8 *)xmmword_1ECD3B1D0(result);
  }
  return result;
}

unsigned __int8 *sub_1ACC797DC(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  char *v5;
  signed int v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  int8x8_t *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int8x8_t *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int8x8_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int8x8_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int8x8_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int8x8_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int8x8_t *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int8x8_t *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int8x8_t *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int8x8_t *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int8x8_t *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int8x8_t *v88;
  uint64_t (**v89)(char *);
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int *v93;

  if (*((_DWORD *)result + 15))
    return result;
  v3 = result;
  v4 = *(_DWORD *)(*(_QWORD *)result + 132);
  if (sqlite3_initialize() || (v8 = (char *)sub_1ACB6BB48(0, 64)) == 0)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    *((_DWORD *)v3 + 15) = 7;
  }
  else
  {
    v5 = v8;
    *(_DWORD *)v8 = bswap32(v4 & ~(v4 >> 31));
    if (*(_QWORD *)(a2 + 16))
    {
      *((_DWORD *)v8 + 1) = 16777471;
      v9 = 8;
    }
    else
    {
      v9 = 4;
    }
    v10 = (int8x8_t *)&v8[v9];
    v11 = *(int *)(a2 + 28);
    if (v11 > 0x7F)
    {
      if (v11 >> 14)
      {
        v12 = sub_1ACBF8034(v10, v11);
      }
      else
      {
        v10->i8[0] = (v11 >> 7) | 0x80;
        v10->i8[1] = v11 & 0x7F;
        v12 = 2;
      }
    }
    else
    {
      v10->i8[0] = v11;
      v12 = 1;
    }
    v13 = v9 + v12;
    v14 = (int8x8_t *)&v5[v13];
    v15 = *(int *)(a2 + 24);
    if (v15 > 0x7F)
    {
      if (v15 >> 14)
      {
        v16 = sub_1ACBF8034(v14, v15);
      }
      else
      {
        v14->i8[0] = (v15 >> 7) | 0x80;
        v14->i8[1] = v15 & 0x7F;
        v16 = 2;
      }
    }
    else
    {
      v14->i8[0] = v15;
      v16 = 1;
    }
    v17 = v13 + v16;
    v18 = (int8x8_t *)&v5[v17];
    v19 = *(_QWORD *)(a2 + 8);
    if (v19 > 0x7F)
    {
      if (v19 >> 14)
      {
        v20 = sub_1ACBF8034(v18, v19);
      }
      else
      {
        v18->i8[0] = (v19 >> 7) | 0x80;
        v18->i8[1] = v19 & 0x7F;
        v20 = 2;
      }
    }
    else
    {
      v18->i8[0] = v19;
      v20 = 1;
    }
    v6 = v17 + v20;
    v7 = 64;
  }
  if (*(int *)(a2 + 28) >= 1)
  {
    v21 = 0;
    v92 = a2;
    do
    {
      v22 = *(int *)(a2 + 16 * v21 + 32);
      v23 = (v6 + 9);
      if (v23 > v7)
      {
        if (v7)
          LODWORD(v24) = v7;
        else
          LODWORD(v24) = 64;
        v24 = (int)v24;
        do
        {
          v25 = v24;
          v24 *= 2;
        }
        while (v25 < v23);
        if (sqlite3_initialize() || (v26 = sub_1ACB6BB48((uint64_t)v5, v25)) == 0)
        {
          *((_DWORD *)v3 + 15) = 7;
          goto LABEL_44;
        }
        v5 = (char *)v26;
        v7 = v25;
      }
      v27 = (int8x8_t *)&v5[v6];
      if (v22 > 0x7F)
      {
        if (v22 >> 14)
        {
          v28 = sub_1ACBF8034(v27, v22);
        }
        else
        {
          v27->i8[0] = (v22 >> 7) | 0x80;
          v27->i8[1] = v22 & 0x7F;
          v28 = 2;
        }
      }
      else
      {
        v27->i8[0] = v22;
        v28 = 1;
      }
      v6 += v28;
      LODWORD(v23) = v6 + 9;
LABEL_44:
      v29 = a2 + 16 * v21;
      v30 = *(int *)(v29 + 36);
      v93 = (int *)(v29 + 36);
      if (v23 > v7)
      {
        if (v7)
          LODWORD(v31) = v7;
        else
          LODWORD(v31) = 64;
        v31 = (int)v31;
        do
        {
          v32 = v31;
          v31 *= 2;
        }
        while (v32 < v23);
        if (sqlite3_initialize() || (v33 = sub_1ACB6BB48((uint64_t)v5, v32)) == 0)
        {
          *((_DWORD *)v3 + 15) = 7;
          goto LABEL_60;
        }
        v5 = (char *)v33;
        v7 = v32;
      }
      v34 = (int8x8_t *)&v5[v6];
      if (v30 > 0x7F)
      {
        if (v30 >> 14)
        {
          v35 = sub_1ACBF8034(v34, v30);
        }
        else
        {
          v34->i8[0] = (v30 >> 7) | 0x80;
          v34->i8[1] = v30 & 0x7F;
          v35 = 2;
        }
      }
      else
      {
        v34->i8[0] = v30;
        v35 = 1;
      }
      v6 += v35;
LABEL_60:
      v90 = v21;
      if (*v93 >= 1)
      {
        v36 = v21;
        v37 = 0;
        v91 = (uint64_t *)(a2 + 16 * v36 + 40);
        do
        {
          v39 = *v91;
          v40 = *(int *)(*v91 + 56 * v37);
          v41 = (v6 + 9);
          if (v41 > v7)
          {
            if (v7)
              LODWORD(v42) = v7;
            else
              LODWORD(v42) = 64;
            v42 = (int)v42;
            do
            {
              v43 = v42;
              v42 *= 2;
            }
            while (v43 < v41);
            if (sqlite3_initialize() || (v44 = sub_1ACB6BB48((uint64_t)v5, v43)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_81;
            }
            v5 = (char *)v44;
            v7 = v43;
          }
          v45 = (int8x8_t *)&v5[v6];
          if (v40 > 0x7F)
          {
            if (v40 >> 14)
            {
              v46 = sub_1ACBF8034(v45, v40);
            }
            else
            {
              v45->i8[0] = (v40 >> 7) | 0x80;
              v45->i8[1] = v40 & 0x7F;
              v46 = 2;
            }
          }
          else
          {
            v45->i8[0] = v40;
            v46 = 1;
          }
          v6 += v46;
          LODWORD(v41) = v6 + 9;
LABEL_81:
          v47 = *(int *)(v39 + 56 * v37 + 4);
          if (v41 > v7)
          {
            if (v7)
              LODWORD(v48) = v7;
            else
              LODWORD(v48) = 64;
            v48 = (int)v48;
            do
            {
              v49 = v48;
              v48 *= 2;
            }
            while (v49 < v41);
            if (sqlite3_initialize() || (v50 = sub_1ACB6BB48((uint64_t)v5, v49)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_97;
            }
            v5 = (char *)v50;
            v7 = v49;
          }
          v51 = (int8x8_t *)&v5[v6];
          if (v47 > 0x7F)
          {
            if (v47 >> 14)
            {
              v52 = sub_1ACBF8034(v51, v47);
            }
            else
            {
              v51->i8[0] = (v47 >> 7) | 0x80;
              v51->i8[1] = v47 & 0x7F;
              v52 = 2;
            }
          }
          else
          {
            v51->i8[0] = v47;
            v52 = 1;
          }
          v6 += v52;
          LODWORD(v41) = v6 + 9;
LABEL_97:
          v53 = *(int *)(v39 + 56 * v37 + 8);
          if (v41 > v7)
          {
            if (v7)
              LODWORD(v54) = v7;
            else
              LODWORD(v54) = 64;
            v54 = (int)v54;
            do
            {
              v55 = v54;
              v54 *= 2;
            }
            while (v55 < v41);
            if (sqlite3_initialize() || (v56 = sub_1ACB6BB48((uint64_t)v5, v55)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_113;
            }
            v5 = (char *)v56;
            v7 = v55;
          }
          v57 = (int8x8_t *)&v5[v6];
          if (v53 > 0x7F)
          {
            if (v53 >> 14)
            {
              v58 = sub_1ACBF8034(v57, v53);
            }
            else
            {
              v57->i8[0] = (v53 >> 7) | 0x80;
              v57->i8[1] = v53 & 0x7F;
              v58 = 2;
            }
          }
          else
          {
            v57->i8[0] = v53;
            v58 = 1;
          }
          v6 += v58;
LABEL_113:
          if (!*(_QWORD *)(v92 + 16))
            goto LABEL_64;
          v59 = *(_QWORD *)(v39 + 56 * v37 + 16);
          v60 = (v6 + 9);
          if (v60 > v7)
          {
            if (v7)
              LODWORD(v61) = v7;
            else
              LODWORD(v61) = 64;
            v61 = (int)v61;
            do
            {
              v62 = v61;
              v61 *= 2;
            }
            while (v62 < v60);
            if (sqlite3_initialize() || (v63 = sub_1ACB6BB48((uint64_t)v5, v62)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_130;
            }
            v5 = (char *)v63;
            v7 = v62;
          }
          v64 = (int8x8_t *)&v5[v6];
          if (v59 > 0x7F)
          {
            if (v59 >> 14)
            {
              v65 = sub_1ACBF8034(v64, v59);
            }
            else
            {
              v64->i8[0] = (v59 >> 7) | 0x80;
              v64->i8[1] = v59 & 0x7F;
              v65 = 2;
            }
          }
          else
          {
            v64->i8[0] = v59;
            v65 = 1;
          }
          v6 += v65;
          LODWORD(v60) = v6 + 9;
LABEL_130:
          v66 = *(_QWORD *)(v39 + 56 * v37 + 24);
          if (v60 > v7)
          {
            if (v7)
              LODWORD(v67) = v7;
            else
              LODWORD(v67) = 64;
            v67 = (int)v67;
            do
            {
              v68 = v67;
              v67 *= 2;
            }
            while (v68 < v60);
            if (sqlite3_initialize() || (v69 = sub_1ACB6BB48((uint64_t)v5, v68)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_146;
            }
            v5 = (char *)v69;
            v7 = v68;
          }
          v70 = (int8x8_t *)&v5[v6];
          if (v66 > 0x7F)
          {
            if (v66 >> 14)
            {
              v71 = sub_1ACBF8034(v70, v66);
            }
            else
            {
              v70->i8[0] = (v66 >> 7) | 0x80;
              v70->i8[1] = v66 & 0x7F;
              v71 = 2;
            }
          }
          else
          {
            v70->i8[0] = v66;
            v71 = 1;
          }
          v6 += v71;
          LODWORD(v60) = v6 + 9;
LABEL_146:
          v72 = *(int *)(v39 + 56 * v37 + 32);
          if (v60 > v7)
          {
            if (v7)
              LODWORD(v73) = v7;
            else
              LODWORD(v73) = 64;
            v73 = (int)v73;
            do
            {
              v74 = v73;
              v73 *= 2;
            }
            while (v74 < v60);
            if (sqlite3_initialize() || (v75 = sub_1ACB6BB48((uint64_t)v5, v74)) == 0)
            {
              *((_DWORD *)v3 + 15) = 7;
              goto LABEL_162;
            }
            v5 = (char *)v75;
            v7 = v74;
          }
          v76 = (int8x8_t *)&v5[v6];
          if (v72 > 0x7F)
          {
            if (v72 >> 14)
            {
              v77 = sub_1ACBF8034(v76, v72);
            }
            else
            {
              v76->i8[0] = (v72 >> 7) | 0x80;
              v76->i8[1] = v72 & 0x7F;
              v77 = 2;
            }
          }
          else
          {
            v76->i8[0] = v72;
            v77 = 1;
          }
          v6 += v77;
          LODWORD(v60) = v6 + 9;
LABEL_162:
          v78 = *(_QWORD *)(v39 + 56 * v37 + 40);
          if (v60 <= v7)
            goto LABEL_172;
          if (v7)
            LODWORD(v79) = v7;
          else
            LODWORD(v79) = 64;
          v79 = (int)v79;
          do
          {
            v80 = v79;
            v79 *= 2;
          }
          while (v80 < v60);
          if (!sqlite3_initialize())
          {
            v81 = sub_1ACB6BB48((uint64_t)v5, v80);
            if (v81)
            {
              v5 = (char *)v81;
              v7 = v80;
LABEL_172:
              v82 = (int8x8_t *)&v5[v6];
              if (v78 > 0x7F)
              {
                if (v78 >> 14)
                {
                  v83 = sub_1ACBF8034(v82, v78);
                }
                else
                {
                  v82->i8[0] = (v78 >> 7) | 0x80;
                  v82->i8[1] = v78 & 0x7F;
                  v83 = 2;
                }
              }
              else
              {
                v82->i8[0] = v78;
                v83 = 1;
              }
              v6 += v83;
              LODWORD(v60) = v6 + 9;
              goto LABEL_178;
            }
          }
          *((_DWORD *)v3 + 15) = 7;
LABEL_178:
          v84 = *(_QWORD *)(v39 + 56 * v37 + 48);
          if (v60 <= v7)
            goto LABEL_188;
          if (v7)
            LODWORD(v85) = v7;
          else
            LODWORD(v85) = 64;
          v85 = (int)v85;
          do
          {
            v86 = v85;
            v85 *= 2;
          }
          while (v86 < v60);
          if (!sqlite3_initialize())
          {
            v87 = sub_1ACB6BB48((uint64_t)v5, v86);
            if (v87)
            {
              v5 = (char *)v87;
              v7 = v86;
LABEL_188:
              v88 = (int8x8_t *)&v5[v6];
              if (v84 <= 0x7F)
              {
                v88->i8[0] = v84;
                v38 = 1;
              }
              else if (v84 >> 14)
              {
                v38 = sub_1ACBF8034(v88, v84);
              }
              else
              {
                v88->i8[0] = (v84 >> 7) | 0x80;
                v88->i8[1] = v84 & 0x7F;
                v38 = 2;
              }
              v6 += v38;
              goto LABEL_64;
            }
          }
          *((_DWORD *)v3 + 15) = 7;
LABEL_64:
          ++v37;
        }
        while (v37 < *v93);
      }
      v21 = v90 + 1;
      a2 = v92;
    }
    while (v90 + 1 < *(int *)(v92 + 28));
  }
  result = sub_1ACC7955C(v3, 10, v5, v6);
  if (!v5)
    return result;
  v89 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (unsigned __int8 *)(*v89)(v5);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  result = (unsigned __int8 *)off_1ECD3B168(v5);
  v5 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v89 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    return (unsigned __int8 *)(*v89)(v5);
  }
  return result;
}

_DWORD *sub_1ACC7A15C(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t (**v7)(_QWORD);

  if (!result)
    return result;
  v1 = result;
  if ((*result)-- > 1)
    return result;
  if ((int)result[7] >= 1)
  {
    v3 = 0;
    v4 = (uint64_t *)(result + 10);
    do
    {
      v5 = *v4;
      if (*v4)
      {
        v6 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v5);
          v5 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_7;
          v6 = &xmmword_1ECD3B1D0;
        }
        (*v6)(v5);
      }
LABEL_7:
      ++v3;
      v4 += 2;
    }
    while (v3 < (int)v1[7]);
  }
  v7 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (_DWORD *)(*v7)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = (_DWORD *)off_1ECD3B168(v1);
  v1 = (_DWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v7 = &xmmword_1ECD3B1D0;
    return (_DWORD *)(*v7)(v1);
  }
  return result;
}

void sub_1ACC7A2E4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (**v7)(_QWORD);

  v2 = *(_DWORD *)(a1 + 20);
  if (v2 > 0)
  {
    v3 = 0;
    while (1)
    {
      v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v3);
      if (v5)
        break;
LABEL_4:
      ++v3;
      v4 = v2;
      if (v3 >= v2)
        goto LABEL_15;
    }
    while (1)
    {
      v6 = (_QWORD *)*v5;
      v7 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v5);
        v5 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_8;
        v7 = &xmmword_1ECD3B1D0;
      }
      (*v7)(v5);
LABEL_8:
      v5 = v6;
      if (!v6)
      {
        v2 = *(_DWORD *)(a1 + 20);
        goto LABEL_4;
      }
    }
  }
  v4 = v2;
LABEL_15:
  bzero(*(void **)(a1 + 32), 8 * v4);
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t sub_1ACC7A400(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int8x8_t *v13;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  v7 = (v5 + 9);
  if (v7 <= v6)
  {
    result = *(_QWORD *)a2;
  }
  else
  {
    if (v6)
      LODWORD(v9) = *(_DWORD *)(a2 + 12);
    else
      LODWORD(v9) = 64;
    v9 = (int)v9;
    do
    {
      v10 = v9;
      v9 *= 2;
    }
    while (v10 < v7);
    v11 = *(_QWORD *)a2;
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(v11, v10)) == 0)
    {
      *a1 = 7;
      return result;
    }
    *(_DWORD *)(a2 + 12) = v10;
    *(_QWORD *)a2 = result;
    v5 = *(_DWORD *)(a2 + 8);
  }
  v13 = (int8x8_t *)(result + v5);
  if (a3 > 0x7F)
  {
    if (a3 >> 14)
    {
      result = sub_1ACBF8034(v13, a3);
    }
    else
    {
      v13->i8[0] = (a3 >> 7) | 0x80;
      v13->i8[1] = a3 & 0x7F;
      result = 2;
    }
  }
  else
  {
    v13->i8[0] = a3;
    result = 1;
  }
  *(_DWORD *)(a2 + 8) += result;
  return result;
}

uint64_t sub_1ACC7A4F0(uint64_t *a1, char *a2, const sqlite3_value *a3, int a4)
{
  uint64_t v8;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  sqlite3_blob *v19;
  sqlite3_stmt *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  sqlite3_blob *ppBlob;
  char v26[4];

  v24 = 0;
  v8 = sub_1ACC7A800(a1, 9, &v24, 0);
  if (!(_DWORD)v8)
  {
    v10 = v24;
    sub_1ACBA0CE0((uint64_t *)v24, 1, a2, -1, 0, 1u);
    if (a3)
    {
      sqlite3_bind_value(v10, 2, a3);
    }
    else if (!sub_1ACBA0E50((uint64_t)v10, 1u))
    {
      v11 = *((_QWORD *)v10 + 16);
      if ((*(_WORD *)(v11 + 84) & 0x9000) != 0)
      {
        sub_1ACBF327C(v11 + 64, a4);
      }
      else
      {
        *(_QWORD *)(v11 + 64) = a4;
        *(_WORD *)(v11 + 84) = 4;
      }
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 24);
      if (v12)
        xmmword_1ECD3B1D0(v12);
    }
    sqlite3_step(v10);
    v8 = sqlite3_reset(v10);
    if (!sub_1ACBA0E50((uint64_t)v10, 0))
    {
      v13 = *(_QWORD *)(*(_QWORD *)v10 + 24);
      if (v13)
        xmmword_1ECD3B1D0(v13);
    }
    if (a3 && !(_DWORD)v8)
    {
      v14 = (uint64_t *)a1[1];
      v15 = *(_DWORD *)(*a1 + 132) + 1;
      v17 = *v14;
      v16 = (const char *)v14[1];
      ppBlob = 0;
      v26[0] = HIBYTE(v15);
      v26[1] = BYTE2(v15);
      v26[2] = BYTE1(v15);
      v26[3] = v15;
      v18 = sqlite3_blob_open(*(sqlite3 **)v17, *(const char **)(v17 + 8), v16, "block", 10, 1, &ppBlob);
      if ((_DWORD)v18)
      {
        return v18;
      }
      else
      {
        sub_1ACBCB9F8((int *)ppBlob, v26, 4, 0, sub_1ACBCBC08);
        v19 = ppBlob;
        if (!ppBlob)
          goto LABEL_24;
        v20 = (sqlite3_stmt *)*((_QWORD *)ppBlob + 3);
        v21 = (_QWORD *)*((_QWORD *)ppBlob + 4);
        v22 = v21[3];
        if (v22)
          xmmword_1ECD3B1C0(v22);
        sub_1ACBE0F9C(v21, v19);
        v23 = v21[3];
        if (v23)
          xmmword_1ECD3B1D0(v23);
        v8 = sqlite3_finalize(v20);
        if (!(_DWORD)v8)
        {
LABEL_24:
          v8 = 0;
          *(_DWORD *)(*a1 + 132) = v15;
        }
      }
    }
  }
  return v8;
}

uint64_t sub_1ACC7A6F4(uint64_t result)
{
  sqlite3_stmt **v1;
  uint64_t (**v2)(sqlite3_stmt **);

  if (result)
  {
    v1 = (sqlite3_stmt **)result;
    sqlite3_finalize(*(sqlite3_stmt **)(result + 40));
    sqlite3_finalize(v1[6]);
    sqlite3_finalize(v1[7]);
    sqlite3_finalize(v1[8]);
    sqlite3_finalize(v1[9]);
    sqlite3_finalize(v1[10]);
    sqlite3_finalize(v1[11]);
    sqlite3_finalize(v1[12]);
    sqlite3_finalize(v1[13]);
    sqlite3_finalize(v1[14]);
    sqlite3_finalize(v1[15]);
    v2 = (uint64_t (**)(sqlite3_stmt **))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = (sqlite3_stmt **)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = (uint64_t (**)(sqlite3_stmt **))&xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACC7A800(uint64_t *a1, int a2, sqlite3_stmt **a3, char **a4)
{
  uint64_t *v5;
  sqlite3_stmt **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  void (**v25)(unsigned __int8 *);
  const char *v26;
  sqlite3_stmt *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)(uint64_t);

  v5 = &a1[a2];
  v7 = v5[5];
  v6 = (sqlite3_stmt **)(v5 + 5);
  if (v7)
  {
    v8 = 0;
    goto LABEL_36;
  }
  v12 = a2;
  v13 = *a1;
  switch(a2)
  {
    case 0:
    case 1:
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 72), *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 80));
      goto LABEL_21;
    case 2:
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 72), *(_QWORD *)(v13 + 80));
      goto LABEL_21;
    case 3:
    case 4:
      v16 = *(unsigned int *)(v13 + 24);
      if (sqlite3_initialize())
        goto LABEL_35;
      v17 = sub_1ACB5D828(2 * (int)v16 + 3);
      if (!v17)
        goto LABEL_35;
      v18 = v17;
      if ((v16 & 0x80000000) != 0)
      {
        v29 = -1;
        goto LABEL_50;
      }
      v19 = v16 + 1;
      if (v16 < 7)
      {
        v20 = 0;
        goto LABEL_47;
      }
      if (v16 >= 0x1F)
      {
        v20 = v19 & 0xFFFFFFE0;
        v30 = v17 + 32;
        v31 = v20;
        do
        {
          qmemcpy((void *)(v30 - 32), "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,", 64);
          v30 += 64;
          v31 -= 32;
        }
        while (v31);
        if (v20 == v19)
          goto LABEL_49;
        if ((v19 & 0x18) == 0)
        {
LABEL_47:
          v35 = v17 + 2 * v20 + 1;
          v36 = v19 - v20;
          do
          {
            *(_WORD *)(v35 - 1) = 11327;
            v35 += 2;
            --v36;
          }
          while (v36);
          goto LABEL_49;
        }
      }
      else
      {
        v20 = 0;
      }
      v32 = v20;
      v20 = v19 & 0xFFFFFFF8;
      v33 = (_OWORD *)(v17 + 2 * v32);
      v34 = v32 - v20;
      do
      {
        *v33++ = xmmword_1ACCBDE30;
        v34 += 8;
      }
      while (v34);
      if (v20 != v19)
        goto LABEL_47;
LABEL_49:
      v29 = 2 * (int)v19 - 1;
LABEL_50:
      *(_BYTE *)(v17 + v29) = 0;
      v23 = (unsigned __int8 *)sqlite3_mprintf(off_1E5C751B8[v12], *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), v17);
      v37 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_55;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v18);
      v18 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v37 = &xmmword_1ECD3B1D0;
LABEL_55:
        (*v37)(v18);
      }
LABEL_22:
      if (!v23)
      {
LABEL_35:
        v8 = 7;
        goto LABEL_36;
      }
      ++*(_DWORD *)(*a1 + 120);
      if (a2 <= 2)
        v24 = 129;
      else
        v24 = 133;
      v8 = sub_1ACB5C66C(*(_QWORD *)v13, v23, 0xFFFFFFFFLL, v24, 0, v6, 0, v15);
      --*(_DWORD *)(*a1 + 120);
      v25 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_31;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v23);
      v23 = (unsigned __int8 *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v25 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_31:
        (*v25)(v23);
      }
      if (a4 && (_DWORD)v8)
      {
        v26 = sqlite3_errmsg(*(sqlite3 **)v13);
        *a4 = sqlite3_mprintf("%s", v26);
      }
LABEL_36:
      v27 = *v6;
      *a3 = *v6;
      sqlite3_reset(v27);
      return v8;
    case 6:
      if (*(_DWORD *)(v13 + 68))
        v21 = ",?";
      else
        v21 = &byte_1ACCBEAEE;
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), v21);
      goto LABEL_21;
    case 8:
      if (*(_DWORD *)(v13 + 68))
        v22 = ",origin";
      else
        v22 = &byte_1ACCBEAEE;
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], v22, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
      goto LABEL_21;
    case 10:
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], *(_QWORD *)(v13 + 96), *(_QWORD *)(v13 + 72));
      goto LABEL_21;
    default:
      v14 = sqlite3_mprintf(off_1E5C751B8[a2], *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
LABEL_21:
      v23 = (unsigned __int8 *)v14;
      goto LABEL_22;
  }
}

_DWORD *sub_1ACC7ABF8(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unint64_t *v21;
  int v22;
  unint64_t *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int *v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t *v44;
  int v45;
  char *v46;
  void *v47;
  void *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  signed int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  signed int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t *v74;
  int v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v85;
  uint64_t (**v86)(_QWORD);
  unsigned int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t (**v91)(unsigned __int8 *);
  uint64_t v92;
  unsigned __int8 *v93;
  sqlite3_value *v94;
  unsigned __int8 *v95;
  const char *i;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  double v100;
  _DWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  _BOOL4 v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  sqlite3_stmt *v118;

  if (*(_QWORD *)(a1 + 144) || (*(_QWORD *)(a1 + 136) = sub_1ACC7B778(a1), *(_DWORD *)(a1 + 60)))
  {
    if (!*(_DWORD *)(a1 + 60))
      goto LABEL_126;
    return 0;
  }
  v3 = *(_QWORD *)a1;
  v4 = sub_1ACC7B8EC(a1, 10);
  if (*(_DWORD *)(a1 + 60))
    goto LABEL_124;
  v5 = v4;
  v6 = *(_QWORD *)v4 + (int)v4[2];
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  v7 = *(_QWORD *)v4;
  v115 = v4[2];
  v8 = **(_DWORD **)v4;
  LODWORD(v6) = *(_DWORD *)(*(_QWORD *)v4 + 4);
  v112 = v6 != 16777471;
  if ((_DWORD)v6 == 16777471)
    v9 = 8;
  else
    v9 = 4;
  v10 = v7 + v9;
  v11 = *(unsigned __int8 *)(v7 + v9);
  if (*(char *)(v7 + v9) < 0)
  {
    v13 = *(unsigned __int8 *)(v10 + 1);
    if (*(char *)(v10 + 1) < 0)
    {
      v14 = *(char *)(v10 + 2);
      if (v14 < 0)
      {
        v118 = 0;
        v12 = sub_1ACC7BBC8((char *)v10, (unint64_t *)&v118);
        v11 = v118 & 0x7FFFFFFF;
      }
      else
      {
        v11 = v14 & 0x7F | (v11 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
        v12 = 3;
      }
    }
    else
    {
      v11 = ((v11 & 0x7F) << 7) | v13;
      v12 = 2;
    }
  }
  else
  {
    v12 = 1;
  }
  v15 = v12 + (unint64_t)v9;
  v16 = v7 + v15;
  v17 = *(unsigned __int8 *)(v7 + v15);
  v110 = v8;
  if (*(char *)(v7 + v15) < 0)
  {
    v19 = *(unsigned __int8 *)(v16 + 1);
    if (*(char *)(v16 + 1) < 0)
    {
      v20 = *(char *)(v16 + 2);
      if (v20 < 0)
      {
        v118 = 0;
        v18 = sub_1ACC7BBC8((char *)v16, (unint64_t *)&v118);
        v17 = v118 & 0x7FFFFFFF;
      }
      else
      {
        v17 = v20 & 0x7F | (v17 << 14) & 0x1FC07F | ((v19 & 0x7F) << 7);
        v18 = 3;
      }
    }
    else
    {
      v17 = ((v17 & 0x7F) << 7) | v19;
      v18 = 2;
    }
  }
  else
  {
    v18 = 1;
  }
  v21 = 0;
  v22 = 267;
  if (v11 > 0x7D0 || v17 > 0x7D0)
  {
LABEL_116:
    *(_DWORD *)(a1 + 60) = v22;
    v86 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_121;
    goto LABEL_117;
  }
  v113 = v17;
  if (sqlite3_initialize())
  {
    v21 = 0;
    v22 = 7;
    goto LABEL_116;
  }
  v106 = v11 - 1;
  v23 = (unint64_t *)sub_1ACB5D828(16 * (int)v106 + 48);
  v21 = v23;
  if (!v23)
  {
    v22 = 7;
    goto LABEL_116;
  }
  v102 = v3;
  v24 = v18 + v15;
  bzero(v23, 16 * (int)v106 + 48);
  v25 = 1;
  *(_DWORD *)v21 = 1;
  *((_DWORD *)v21 + 6) = v113;
  *((_DWORD *)v21 + 7) = v11;
  v26 = sub_1ACC7BBC8((char *)(v7 + v24), v21 + 1);
  v101 = v5;
  if (!v11)
  {
    v45 = 0;
    v107 = 0;
    v29 = v113;
    goto LABEL_109;
  }
  v27 = 0;
  v107 = 0;
  v28 = v24 + v26;
  v105 = v11;
  v29 = v113;
  v103 = v21;
  while (1)
  {
    if (v28 >= v115)
    {
      v25 = 0;
      v45 = 267;
      goto LABEL_109;
    }
    v30 = (unsigned int *)&v21[2 * v27 + 4];
    v31 = (char *)(v7 + v28);
    v32 = *v31;
    if (*v31 < 0)
    {
      v34 = v31[1];
      if (v31[1] < 0)
      {
        v35 = v31[2];
        if (v35 < 0)
        {
          v118 = 0;
          v36 = v29;
          v33 = sub_1ACC7BBC8(v31, (unint64_t *)&v118);
          v29 = v36;
          v32 = v118 & 0x7FFFFFFF;
          *v30 = v118 & 0x7FFFFFFF;
        }
        else
        {
          v32 = v35 & 0x7F | (v32 << 14) & 0x1FC07F | ((v34 & 0x7F) << 7);
          *v30 = v32;
          v33 = 3;
        }
      }
      else
      {
        v32 = ((v32 & 0x7F) << 7) | v34;
        *v30 = v32;
        v33 = 2;
      }
    }
    else
    {
      *v30 = v32;
      v33 = 1;
    }
    v37 = v28 + (unint64_t)v33;
    v38 = v7 + v37;
    v39 = *(unsigned __int8 *)(v7 + v37);
    if (*(char *)(v7 + v37) < 0)
    {
      v41 = *(unsigned __int8 *)(v38 + 1);
      if (*(char *)(v38 + 1) < 0)
      {
        v42 = *(char *)(v38 + 2);
        if (v42 < 0)
        {
          v118 = 0;
          v43 = v29;
          v40 = sub_1ACC7BBC8((char *)v38, (unint64_t *)&v118);
          v29 = v43;
          v39 = v118 & 0x7FFFFFFF;
        }
        else
        {
          v39 = v42 & 0x7F | (v39 << 14) & 0x1FC07F | ((v41 & 0x7F) << 7);
          v40 = 3;
        }
      }
      else
      {
        v39 = ((v39 & 0x7F) << 7) | v41;
        v40 = 2;
      }
    }
    else
    {
      v40 = 1;
    }
    if (v39 < v32)
    {
      v45 = 267;
      goto LABEL_108;
    }
    v111 = (uint64_t)&v21[2 * v27 + 4];
    v114 = v29;
    v28 = v40 + v37;
    if (!sqlite3_initialize())
    {
      v47 = (void *)sub_1ACB5D828(56 * v39);
      if (v47)
      {
        v48 = v47;
        bzero(v47, 56 * v39);
        v49 = (char *)&v21[2 * v27];
        *((_QWORD *)v49 + 5) = v48;
        v50 = v49 + 40;
        *((_DWORD *)v50 - 1) = v39;
        if (v39)
        {
          v51 = 0;
          v108 = 56 * v39;
          v29 = v114;
          v104 = v50;
          v109 = v39;
          while (v28 < v115)
          {
            v52 = *v50;
            v53 = (char *)(v7 + v28);
            v54 = *v53;
            if (*v53 < 0)
            {
              v56 = v53[1];
              if (v53[1] < 0)
              {
                v57 = v53[2];
                if (v57 < 0)
                {
                  v118 = 0;
                  v55 = sub_1ACC7BBC8(v53, (unint64_t *)&v118);
                  v50 = v104;
                  v29 = v114;
                  *(_DWORD *)(v52 + v51) = v118 & 0x7FFFFFFF;
                }
                else
                {
                  *(_DWORD *)(v52 + v51) = v57 & 0x7F | (v54 << 14) & 0x1FC07F | ((v56 & 0x7F) << 7);
                  v55 = 3;
                }
              }
              else
              {
                *(_DWORD *)(v52 + v51) = ((v54 & 0x7F) << 7) | v56;
                v55 = 2;
              }
            }
            else
            {
              *(_DWORD *)(v52 + v51) = v54;
              v55 = 1;
            }
            v58 = v28 + (unint64_t)v55;
            v59 = v7 + v58;
            v60 = v52 + v51;
            v61 = *(unsigned __int8 *)(v7 + v58);
            if (*(char *)(v7 + v58) < 0)
            {
              v63 = *(unsigned __int8 *)(v59 + 1);
              if (*(char *)(v59 + 1) < 0)
              {
                v64 = *(char *)(v59 + 2);
                if (v64 < 0)
                {
                  v118 = 0;
                  v62 = sub_1ACC7BBC8((char *)v59, (unint64_t *)&v118);
                  v50 = v104;
                  v29 = v114;
                  v61 = v118 & 0x7FFFFFFF;
                  *(_DWORD *)(v60 + 4) = v118 & 0x7FFFFFFF;
                }
                else
                {
                  v61 = v64 & 0x7F | (v61 << 14) & 0x1FC07F | ((v63 & 0x7F) << 7);
                  *(_DWORD *)(v60 + 4) = v61;
                  v62 = 3;
                }
              }
              else
              {
                v61 = ((v61 & 0x7F) << 7) | v63;
                *(_DWORD *)(v60 + 4) = v61;
                v62 = 2;
              }
            }
            else
            {
              *(_DWORD *)(v60 + 4) = v61;
              v62 = 1;
            }
            v65 = v62 + v58;
            v66 = (char *)(v7 + v62 + (int)v58);
            v67 = v52 + v51;
            v68 = *v66;
            if (*v66 < 0)
            {
              v70 = v66[1];
              if (v66[1] < 0)
              {
                v71 = v66[2];
                if (v71 < 0)
                {
                  v118 = 0;
                  v69 = sub_1ACC7BBC8(v66, (unint64_t *)&v118);
                  v50 = v104;
                  v29 = v114;
                  v68 = v118 & 0x7FFFFFFF;
                  *(_DWORD *)(v67 + 8) = v118 & 0x7FFFFFFF;
                }
                else
                {
                  v68 = v71 & 0x7F | (v68 << 14) & 0x1FC07F | ((v70 & 0x7F) << 7);
                  *(_DWORD *)(v67 + 8) = v68;
                  v69 = 3;
                }
              }
              else
              {
                v68 = ((v68 & 0x7F) << 7) | v70;
                *(_DWORD *)(v67 + 8) = v68;
                v69 = 2;
              }
            }
            else
            {
              *(_DWORD *)(v67 + 8) = v68;
              v69 = 1;
            }
            v28 = v69 + v65;
            if (!v112)
            {
              v72 = v52 + v51;
              v73 = v28 + sub_1ACC7BBC8((char *)(v7 + v28), (unint64_t *)(v52 + v51 + 16));
              v74 = (unint64_t *)(v52 + v51 + 24);
              v75 = v73 + sub_1ACC7BBC8((char *)(v7 + v73), v74);
              v76 = (char *)(v7 + v75);
              v77 = *v76;
              if ((v77 & 0x80) != 0)
              {
                v79 = v76[1];
                if (v76[1] < 0)
                {
                  v80 = v76[2];
                  if (v80 < 0)
                  {
                    v118 = 0;
                    v78 = sub_1ACC7BBC8(v76, (unint64_t *)&v118);
                    *(_DWORD *)(v72 + 32) = v118 & 0x7FFFFFFF;
                  }
                  else
                  {
                    *(_DWORD *)(v72 + 32) = v80 & 0x7F | (v77 << 14) & 0x1FC07F | ((v79 & 0x7F) << 7);
                    v78 = 3;
                  }
                }
                else
                {
                  *(_DWORD *)(v72 + 32) = ((v77 & 0x7F) << 7) | v79;
                  v78 = 2;
                }
              }
              else
              {
                *(_DWORD *)(v72 + 32) = v77;
                v78 = 1;
              }
              v81 = v52 + v51;
              v82 = v78 + v75 + sub_1ACC7BBC8((char *)(v7 + v78 + v75), (unint64_t *)(v81 + 40));
              v28 = v82 + sub_1ACC7BBC8((char *)(v7 + v82), (unint64_t *)(v81 + 48));
              v83 = v107;
              if (v107 <= *v74)
                v83 = *v74;
              v107 = v83;
              v68 = *(_DWORD *)(v67 + 8);
              v61 = *(_DWORD *)(v60 + 4);
              v21 = v103;
              v50 = v104;
              v29 = v114;
            }
            v39 = v109;
            if (v68 < v61)
              break;
            v51 += 56;
            if (v108 == v51)
            {
              v45 = 0;
              goto LABEL_90;
            }
          }
          v45 = 267;
        }
        else
        {
          v45 = 0;
          v29 = v114;
        }
LABEL_90:
        v44 = (unint64_t *)v111;
        goto LABEL_91;
      }
    }
    v29 = v114;
    v44 = &v21[2 * v27 + 4];
    if (v39)
      break;
    v45 = 0;
    v46 = (char *)&v21[2 * v27];
    *((_QWORD *)v46 + 5) = 0;
    *((_DWORD *)v46 + 9) = 0;
LABEL_91:
    if (v27)
    {
      if (*((_DWORD *)v44 - 4) && v39 == 0)
        v45 = 267;
    }
    if (v27 == v106 && *(_DWORD *)v44)
      v45 = 267;
    v29 -= v39;
    v25 = v45 == 0;
    if (!v45 && ++v27 < v105)
      continue;
    goto LABEL_109;
  }
  v45 = 7;
LABEL_108:
  v25 = 0;
  v21[2 * v27 + 5] = 0;
  v29 -= v39;
LABEL_109:
  if (v29 != 0 && v25)
    v22 = 267;
  else
    v22 = v45;
  v5 = v101;
  if (!v112)
    v21[2] = v107 + 1;
  v85 = v102;
  if (v22)
  {
    sub_1ACC7A15C(v21);
    v21 = 0;
    goto LABEL_116;
  }
  v87 = bswap32(v110);
  *(_DWORD *)(a1 + 60) = 0;
  if (!*(_DWORD *)(v102 + 136) || *(_DWORD *)(v102 + 132) != v87)
  {
    v118 = 0;
    v117 = 0;
    *(_OWORD *)(v102 + 136) = xmmword_1ACCBDE40;
    *(_DWORD *)(v102 + 152) = 0x100000;
    *(_DWORD *)(v102 + 180) = 10;
    v88 = (unsigned __int8 *)sub_1ACC78590(&v117, "SELECT k, v FROM %Q.'%q_config'", *(_QWORD *)(v102 + 8), *(_QWORD *)(v102 + 16));
    if (v88)
    {
      v90 = v88;
      v22 = sub_1ACB5C66C(*(_QWORD *)v102, v88, 0xFFFFFFFFLL, 128, 0, &v118, 0, v89);
      v91 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_137:
        (*v91)(v90);
        goto LABEL_139;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v90);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v90);
      v90 = (unsigned __int8 *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v91 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
        goto LABEL_137;
      }
    }
    else
    {
      v22 = v117;
    }
LABEL_139:
    if (v22)
    {
      LODWORD(v92) = 0;
LABEL_167:
      if (v22 || (v92 & 0xFFFFFFFE) == 4)
      {
        *(_DWORD *)(v85 + 128) = v92;
        if (!v22)
          *(_DWORD *)(v85 + 132) = v87;
      }
      else
      {
        if (*(_QWORD *)(v85 + 184))
          **(_QWORD **)(v85 + 184) = sqlite3_mprintf("invalid fts5 file format (found %d, expected %d or %d) - run 'rebuild'", v92, 4, 5);
        v22 = 1;
      }
      goto LABEL_116;
    }
    if (sqlite3_step(v118) != 100)
    {
      LODWORD(v92) = 0;
LABEL_166:
      v22 = sqlite3_finalize(v118);
      v85 = v102;
      goto LABEL_167;
    }
    LODWORD(v92) = 0;
LABEL_145:
    v93 = (unsigned __int8 *)sqlite3_column_text(v118, 0);
    v94 = sqlite3_column_value(v118, 1);
    if (!v93)
    {
LABEL_143:
      sub_1ACC7BD5C(v102, v93, v94, &v116);
      goto LABEL_144;
    }
    v95 = v93;
    for (i = "version"; ; ++i)
    {
      v97 = *v95;
      v98 = *(unsigned __int8 *)i;
      if ((_DWORD)v97 == (_DWORD)v98)
      {
        if (!*v95)
        {
          if (v94)
          {
            v99 = *((_WORD *)v94 + 10);
            if ((v99 & 0x24) != 0)
            {
              v92 = *(_QWORD *)v94;
            }
            else if ((v99 & 8) != 0)
            {
              v100 = *(double *)v94;
              if (*(double *)v94 >= -9.22337204e18)
              {
                if (v100 <= 9.22337204e18)
                  v92 = (uint64_t)v100;
                else
                  LODWORD(v92) = -1;
              }
              else
              {
                LODWORD(v92) = 0;
              }
            }
            else if ((v99 & 0x12) != 0 && *((_QWORD *)v94 + 1))
            {
              LODWORD(v92) = sub_1ACBF2FC0((uint64_t)v94);
            }
            else
            {
              LODWORD(v92) = 0;
            }
          }
          else
          {
            sub_1ACBBE20C(89699);
            LODWORD(v92) = 0;
          }
LABEL_144:
          if (sqlite3_step(v118) != 100)
            goto LABEL_166;
          goto LABEL_145;
        }
      }
      else if (byte_1ACCB6333[v97] != byte_1ACCB6333[v98])
      {
        goto LABEL_143;
      }
      ++v95;
    }
  }
  v86 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_121:
    (*v86)(v5);
    goto LABEL_122;
  }
LABEL_117:
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v5);
  v5 = (_DWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v86 = &xmmword_1ECD3B1D0;
    goto LABEL_121;
  }
LABEL_122:
  if (*(_DWORD *)(a1 + 60))
  {
    sub_1ACC7A15C(v21);
LABEL_124:
    v21 = 0;
  }
  *(_QWORD *)(a1 + 144) = v21;
  if (*(_DWORD *)(a1 + 60))
    return 0;
LABEL_126:
  result = *(_DWORD **)(a1 + 144);
  ++*result;
  return result;
}

sqlite3_int64 sub_1ACC7B778(uint64_t a1)
{
  sqlite3_int64 v1;
  sqlite3_stmt *v3;
  sqlite3_stmt **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  void (**v9)(sqlite3_int64);

  if (*(_DWORD *)(a1 + 60))
    return 0;
  v4 = (sqlite3_stmt **)(a1 + 128);
  v3 = *(sqlite3_stmt **)(a1 + 128);
  if (v3)
    goto LABEL_4;
  v5 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.data_version", *(_QWORD *)(*(_QWORD *)a1 + 8));
  v1 = (sqlite3_int64)v5;
  if (*(_DWORD *)(a1 + 60))
  {
    if (!v5)
      return v1;
  }
  else
  {
    if (!v5)
    {
      v7 = 7;
LABEL_11:
      *(_DWORD *)(a1 + 60) = v7;
      return v1;
    }
    *(_DWORD *)(a1 + 60) = sub_1ACB5C66C(**(_QWORD **)a1, v5, 0xFFFFFFFFLL, 133, 0, v4, 0, v6);
  }
  v9 = (void (**)(sqlite3_int64))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_20;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = (void (**)(sqlite3_int64))&xmmword_1ECD3B1D0;
LABEL_20:
    (*v9)(v1);
  }
  if (!*(_DWORD *)(a1 + 60))
  {
    v3 = *v4;
LABEL_4:
    if (sqlite3_step(v3) == 100)
      v1 = sqlite3_column_int64(*v4, 0);
    else
      v1 = 0;
    v7 = sqlite3_reset(*v4);
    goto LABEL_11;
  }
  return 0;
}

_DWORD *sub_1ACC7B8EC(uint64_t a1, sqlite3_int64 a2)
{
  _DWORD *v2;
  int **v5;
  int *v6;
  int v7;
  sqlite3_stmt *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(_QWORD);

  if (!*(_DWORD *)(a1 + 60))
  {
    v5 = (int **)(a1 + 64);
    v6 = *(int **)(a1 + 64);
    if (v6)
    {
      *v5 = 0;
      v7 = sqlite3_blob_reopen((sqlite3_blob *)v6, a2);
      *v5 = v6;
      if (v7)
      {
        *v5 = 0;
        v8 = (sqlite3_stmt *)*((_QWORD *)v6 + 3);
        v9 = (_QWORD *)*((_QWORD *)v6 + 4);
        v10 = v9[3];
        if (v10)
          xmmword_1ECD3B1C0(v10);
        sub_1ACBE0F9C(v9, v6);
        v11 = v9[3];
        if (v11)
          xmmword_1ECD3B1D0(v11);
        sqlite3_finalize(v8);
        v6 = *v5;
      }
      if (v7 == 4)
        v12 = 0;
      else
        v12 = v7;
      if (v12)
      {
LABEL_18:
        if (v12 == 1)
          v13 = 267;
        else
          v13 = v12;
        if (v13)
        {
          v2 = 0;
          goto LABEL_37;
        }
        v14 = *v5;
        if (*v5 && *((_QWORD *)v14 + 3))
        {
          v15 = *v14;
          if (!sqlite3_initialize())
            goto LABEL_26;
        }
        else
        {
          v15 = 0;
          if (!sqlite3_initialize())
          {
LABEL_26:
            v16 = (int)v15;
            v17 = sub_1ACB5D828((int)v15 + 36);
            v2 = (_DWORD *)v17;
            if (v17)
            {
              *(_DWORD *)(v17 + 8) = v15;
              *(_QWORD *)v17 = v17 + 16;
              v13 = sub_1ACBCB9F8(*v5, (char *)(v17 + 16), v15, 0, sub_1ACBCBBE8);
              if (v13)
              {
                v18 = &off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v2);
                  v2 = (_DWORD *)xmmword_1ECD3E930;
                  if (!(_QWORD)xmmword_1ECD3E930)
                    goto LABEL_37;
                  v18 = &xmmword_1ECD3B1D0;
                }
                (*v18)(v2);
                v2 = 0;
              }
              else
              {
                *(_BYTE *)(*(_QWORD *)v2 + v16) = 0;
                *(_BYTE *)(v16 + *(_QWORD *)v2 + 1) = 0;
                v2[3] = __rev16(*(unsigned __int16 *)(*(_QWORD *)v2 + 2));
              }
LABEL_37:
              *(_DWORD *)(a1 + 60) = v13;
              ++*(_DWORD *)(a1 + 112);
              return v2;
            }
LABEL_36:
            v13 = 7;
            goto LABEL_37;
          }
        }
        v2 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      v12 = 0;
    }
    if (!v6)
      v12 = sqlite3_blob_open(**(sqlite3 ***)a1, *(const char **)(*(_QWORD *)a1 + 8), *(const char **)(a1 + 8), "block", a2, 0, (sqlite3_blob **)v5);
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1ACC7BB2C(char *a1, int *a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  unint64_t v7;

  v3 = *a1;
  if (*a1 < 0)
  {
    v5 = a1[1];
    if (a1[1] < 0)
    {
      v6 = a1[2];
      if (v6 < 0)
      {
        v7 = 0;
        result = sub_1ACC7BBC8(a1, &v7);
        *a2 = v7 & 0x7FFFFFFF;
      }
      else
      {
        *a2 = v6 & 0x7F | (v3 << 14) & 0x1FC07F | ((v5 & 0x7F) << 7);
        return 3;
      }
    }
    else
    {
      *a2 = ((v3 & 0x7F) << 7) | v5;
      return 2;
    }
  }
  else
  {
    *a2 = v3;
    return 1;
  }
  return result;
}

uint64_t sub_1ACC7BBC8(char *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    if (a1[1] < 0)
    {
      v5 = a1[2];
      v6 = v5 & 0x7F | ((_DWORD)v2 << 14) & 0x1FFFFF;
      if (v5 < 0)
      {
        v7 = (a1[3] | (v4 << 14)) & 0x1FC07F;
        if (a1[3] < 0)
        {
          v8 = a1[4];
          v9 = v8 | (v6 << 14);
          if (a1[4] < 0)
          {
            v10 = v7 | (v6 << 7);
            v11 = a1[5] | (v7 << 14);
            if (a1[5] < 0)
            {
              v12 = a1[6] | (v9 << 14);
              if (a1[6] < 0)
              {
                v13 = v12 & 0x1FC07F;
                v14 = a1[7] | (v11 << 14);
                if (a1[7] < 0)
                {
                  v15 = a1[8] | (v13 << 15) | (v14 << 8) & 0x1FC07F00u | ((unint64_t)((v8 >> 3) & 0xF | (16 * v10)) << 32);
                  result = 9;
                }
                else
                {
                  v15 = v14 & 0xF01FC07F | (v13 << 7) | ((unint64_t)(v10 >> 4) << 32);
                  result = 8;
                }
                *a2 = v15;
              }
              else
              {
                result = 7;
                *a2 = v12 & 0xF01FC07F | (v11 << 7) & 0xFE03F80 | ((unint64_t)(v10 >> 11) << 32);
              }
            }
            else
            {
              result = 6;
              *a2 = v11 | (v9 << 7) & 0xFE03F80u | ((unint64_t)(v10 >> 18) << 32);
            }
          }
          else
          {
            result = 5;
            *a2 = v9 | (v7 << 7) | ((unint64_t)(v6 >> 18) << 32);
          }
        }
        else
        {
          result = 4;
          *a2 = v7 | (v6 << 7);
        }
      }
      else
      {
        result = 3;
        *a2 = v6 | ((v4 & 0x7F) << 7);
      }
    }
    else
    {
      result = 2;
      *a2 = ((v2 & 0x7F) << 7) | v4;
    }
  }
  else
  {
    result = 1;
    *a2 = v2;
  }
  return result;
}

uint64_t sub_1ACC7BD5C(uint64_t a1, _BYTE *a2, sqlite3_value *a3, _DWORD *a4)
{
  const char *v7;
  _BYTE *i;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _BYTE *j;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _BYTE *k;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _BYTE *m;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _BYTE *n;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _BYTE *ii;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _BYTE *jj;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  const char *kk;
  uint64_t v38;
  uint64_t result;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  double v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  int v54;
  int v55;
  double v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;

  if (!a2)
    goto LABEL_85;
  v7 = "pgsz";
  for (i = a2; ; ++i)
  {
    v9 = *i;
    v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 != (_DWORD)v10)
      break;
    if (!*i)
    {
      if (a3)
      {
        v29 = *((_WORD *)a3 + 10);
        if (((0x4000000040004uLL >> v29) & 1) != 0)
        {
          sub_1ACBCA9CC((uint64_t)a3, 0);
          v29 = *((_WORD *)a3 + 10);
        }
        if (((0x50505050uLL >> (v29 & 0x3F)) & 1) != 0)
        {
          if ((v29 & 0x24) != 0)
          {
            v38 = *(_QWORD *)a3;
          }
          else if ((v29 & 8) != 0)
          {
            v50 = *(double *)a3;
            if (*(double *)a3 < -9.22337204e18 || v50 > 9.22337204e18)
              goto LABEL_85;
            v38 = (uint64_t)v50;
          }
          else
          {
            if ((v29 & 0x12) == 0 || !*((_QWORD *)a3 + 1))
              goto LABEL_85;
            LODWORD(v38) = sub_1ACBF2FC0((uint64_t)a3);
          }
          if ((v38 - 65537) > 0xFFFF001E)
          {
            result = 0;
            *(_DWORD *)(a1 + 136) = v38;
            return result;
          }
        }
LABEL_85:
        result = 0;
        *a4 = 1;
        return result;
      }
      goto LABEL_84;
    }
LABEL_4:
    ++v7;
  }
  if (byte_1ACCB6333[v9] == byte_1ACCB6333[v10])
    goto LABEL_4;
  v11 = "hashsize";
  for (j = a2; ; ++j)
  {
    v13 = *j;
    v14 = *(unsigned __int8 *)v11;
    if ((_DWORD)v13 != (_DWORD)v14)
      break;
    if (!*j)
    {
      if (a3)
      {
        v34 = *((_WORD *)a3 + 10);
        if (((0x4000000040004uLL >> v34) & 1) != 0)
        {
          sub_1ACBCA9CC((uint64_t)a3, 0);
          v34 = *((_WORD *)a3 + 10);
        }
        if (((0x50505050uLL >> (v34 & 0x3F)) & 1) == 0)
          goto LABEL_85;
        if ((v34 & 0x24) != 0)
        {
          v45 = *(_QWORD *)a3;
        }
        else if ((v34 & 8) != 0)
        {
          v56 = *(double *)a3;
          if (*(double *)a3 < -9.22337204e18 || v56 > 9.22337204e18)
            goto LABEL_85;
          v45 = (uint64_t)v56;
        }
        else
        {
          if ((v34 & 0x12) == 0 || !*((_QWORD *)a3 + 1))
            goto LABEL_85;
          LODWORD(v45) = sub_1ACBF2FC0((uint64_t)a3);
        }
        if ((int)v45 <= 0)
          goto LABEL_85;
        result = 0;
        *(_DWORD *)(a1 + 152) = v45;
        return result;
      }
      goto LABEL_84;
    }
LABEL_9:
    ++v11;
  }
  if (byte_1ACCB6333[v13] == byte_1ACCB6333[v14])
    goto LABEL_9;
  v15 = "automerge";
  for (k = a2; ; ++k)
  {
    v17 = *k;
    v18 = *(unsigned __int8 *)v15;
    if ((_DWORD)v17 == (_DWORD)v18)
    {
      if (*k)
        goto LABEL_14;
      if (!a3)
        goto LABEL_84;
      v40 = *((_WORD *)a3 + 10);
      if (((0x4000000040004uLL >> v40) & 1) != 0)
      {
        sub_1ACBCA9CC((uint64_t)a3, 0);
        v40 = *((_WORD *)a3 + 10);
      }
      if (((0x50505050uLL >> (v40 & 0x3F)) & 1) == 0)
        goto LABEL_85;
      if ((v40 & 0x24) != 0)
      {
        v47 = *(_QWORD *)a3;
LABEL_77:
        if (v47 >= 0x41)
          goto LABEL_85;
        if ((_DWORD)v47 == 1)
          LODWORD(v48) = 4;
        else
          LODWORD(v48) = v47;
        goto LABEL_137;
      }
      if ((v40 & 8) != 0)
      {
        v61 = *(double *)a3;
        if (*(double *)a3 >= -9.22337204e18)
        {
          if (v61 > 9.22337204e18)
            goto LABEL_85;
          v47 = (uint64_t)v61;
          goto LABEL_77;
        }
      }
      else if ((v40 & 0x12) != 0)
      {
        v48 = *((_QWORD *)a3 + 1);
        if (v48)
        {
          LODWORD(v47) = sub_1ACBF2FC0((uint64_t)a3);
          goto LABEL_77;
        }
LABEL_137:
        result = 0;
        *(_DWORD *)(a1 + 140) = v48;
        return result;
      }
      LODWORD(v48) = 0;
      goto LABEL_137;
    }
    if (byte_1ACCB6333[v17] != byte_1ACCB6333[v18])
      break;
LABEL_14:
    ++v15;
  }
  v19 = "usermerge";
  for (m = a2; ; ++m)
  {
    v21 = *m;
    v22 = *(unsigned __int8 *)v19;
    if ((_DWORD)v21 != (_DWORD)v22)
      break;
    if (!*m)
    {
      if (a3)
      {
        v46 = *((_WORD *)a3 + 10);
        if (((0x4000000040004uLL >> v46) & 1) != 0)
        {
          sub_1ACBCA9CC((uint64_t)a3, 0);
          v46 = *((_WORD *)a3 + 10);
        }
        if (((0x50505050uLL >> (v46 & 0x3F)) & 1) == 0)
          goto LABEL_85;
        if ((v46 & 0x24) != 0)
        {
          v51 = *(_QWORD *)a3;
        }
        else if ((v46 & 8) != 0)
        {
          v63 = *(double *)a3;
          if (*(double *)a3 < -9.22337204e18 || v63 > 9.22337204e18)
            goto LABEL_85;
          v51 = (uint64_t)v63;
        }
        else
        {
          if ((v46 & 0x12) == 0 || !*((_QWORD *)a3 + 1))
            goto LABEL_85;
          LODWORD(v51) = sub_1ACBF2FC0((uint64_t)a3);
        }
        if ((v51 - 17) <= 0xFFFFFFF0)
          goto LABEL_85;
        result = 0;
        *(_DWORD *)(a1 + 148) = v51;
        return result;
      }
      goto LABEL_84;
    }
LABEL_19:
    ++v19;
  }
  if (byte_1ACCB6333[v21] == byte_1ACCB6333[v22])
    goto LABEL_19;
  v23 = "crisismerge";
  for (n = a2; ; ++n)
  {
    v25 = *n;
    v26 = *(unsigned __int8 *)v23;
    if ((_DWORD)v25 == (_DWORD)v26)
    {
      if (*n)
        goto LABEL_24;
      if (a3)
      {
        v49 = *((_WORD *)a3 + 10);
        if (((0x4000000040004uLL >> v49) & 1) != 0)
        {
          sub_1ACBCA9CC((uint64_t)a3, 0);
          v49 = *((_WORD *)a3 + 10);
        }
        if (((0x50505050uLL >> (v49 & 0x3F)) & 1) == 0)
          goto LABEL_85;
        if ((v49 & 0x24) != 0)
        {
          v57 = *(_QWORD *)a3;
          goto LABEL_121;
        }
        if ((v49 & 8) != 0)
        {
          v64 = *(double *)a3;
          if (*(double *)a3 >= -9.22337204e18)
          {
            if (v64 > 9.22337204e18)
              goto LABEL_85;
            v57 = (uint64_t)v64;
LABEL_121:
            if ((v57 & 0x80000000) != 0)
              goto LABEL_85;
            if ((int)v57 >= 1999)
              v58 = 1999;
            else
              v58 = v57;
            if (v57 > 1)
              goto LABEL_158;
          }
        }
        else if ((v49 & 0x12) != 0 && *((_QWORD *)a3 + 1))
        {
          LODWORD(v57) = sub_1ACBF2FC0((uint64_t)a3);
          goto LABEL_121;
        }
        v58 = 16;
LABEL_158:
        result = 0;
        *(_DWORD *)(a1 + 144) = v58;
        return result;
      }
LABEL_84:
      sub_1ACBBE20C(97202);
      goto LABEL_85;
    }
    if (byte_1ACCB6333[v25] != byte_1ACCB6333[v26])
      break;
LABEL_24:
    ++v23;
  }
  v27 = "deletemerge";
  for (ii = a2; ; ++ii)
  {
    v30 = *ii;
    v31 = *(unsigned __int8 *)v27;
    if ((_DWORD)v30 == (_DWORD)v31)
    {
      if (*ii)
        goto LABEL_32;
      if (a3)
      {
        v52 = *((_WORD *)a3 + 10);
        if (((0x4000000040004uLL >> v52) & 1) != 0)
        {
          sub_1ACBCA9CC((uint64_t)a3, 0);
          v52 = *((_WORD *)a3 + 10);
        }
        if (((0x50505050uLL >> (v52 & 0x3F)) & 1) != 0)
        {
          v53 = sqlite3_value_int(a3);
          if (v53 <= 0x64)
            v54 = v53;
          else
            v54 = 0;
          if (v53 >= 0)
            v55 = v54;
          else
            v55 = 10;
          goto LABEL_140;
        }
      }
      else
      {
        sub_1ACBBE20C(97202);
      }
      *a4 = 1;
      v55 = 10;
LABEL_140:
      result = 0;
      *(_DWORD *)(a1 + 180) = v55;
      return result;
    }
    if (byte_1ACCB6333[v30] != byte_1ACCB6333[v31])
      break;
LABEL_32:
    ++v27;
  }
  v32 = "rank";
  for (jj = a2; ; ++jj)
  {
    v35 = *jj;
    v36 = *(unsigned __int8 *)v32;
    if ((_DWORD)v35 == (_DWORD)v36)
      break;
    if (byte_1ACCB6333[v35] != byte_1ACCB6333[v36])
    {
      for (kk = "secure-delete"; ; ++kk)
      {
        v41 = *a2;
        v42 = *(unsigned __int8 *)kk;
        if ((_DWORD)v41 == (_DWORD)v42)
        {
          if (!*a2)
          {
            if (sqlite3_value_numeric_type(a3) == 1)
            {
              v43 = sqlite3_value_int(a3);
              if ((v43 & 0x80000000) == 0)
              {
                v44 = v43;
                result = 0;
                *(_DWORD *)(a1 + 176) = v44 != 0;
                return result;
              }
            }
            goto LABEL_85;
          }
        }
        else if (byte_1ACCB6333[v41] != byte_1ACCB6333[v42])
        {
          goto LABEL_85;
        }
        ++a2;
      }
    }
LABEL_40:
    ++v32;
  }
  if (*jj)
    goto LABEL_40;
  if (!a3)
    goto LABEL_147;
  v59 = *((unsigned __int16 *)a3 + 10);
  if ((~v59 & 0x202) == 0 && *((_BYTE *)a3 + 22) == 1)
  {
    v60 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
    goto LABEL_148;
  }
  if ((v59 & 1) != 0)
LABEL_147:
    v60 = 0;
  else
    v60 = (unsigned __int8 *)sub_1ACBF2B64((int *)a3, 1);
LABEL_148:
  v65 = 0;
  v66 = 0;
  result = sub_1ACC7C4A0(v60, &v66, &v65);
  if ((_DWORD)result == 1)
    goto LABEL_85;
  if (!(_DWORD)result)
  {
    sqlite3_free(*(void **)(a1 + 160));
    sqlite3_free(*(void **)(a1 + 168));
    result = 0;
    v62 = v65;
    *(_QWORD *)(a1 + 160) = v66;
    *(_QWORD *)(a1 + 168) = v62;
  }
  return result;
}

uint64_t sub_1ACC7C4A0(unsigned __int8 *a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  int v8;
  size_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  size_t v25;
  int v26;
  int v27;
  void (**v28)(void *);
  void *v29;

  *a2 = 0;
  *a3 = 0;
  if (!a1)
    return 1;
  v5 = a1;
  v6 = a1 - 1;
  do
  {
    v8 = *v5++;
    v7 = v8;
    ++v6;
  }
  while (v8 == 32);
  v9 = 0;
  while ((v7 & 0x80) != 0 || byte_1ACCBB4E3[v7])
    v7 = v5[v9++];
  if (!v9)
    return 1;
  if (sqlite3_initialize() || (v12 = (void *)sub_1ACB5D828(v9 + 1)) == 0)
  {
    if ((uint64_t)(v9 + 1) > 0)
      return 7;
    v13 = 0;
  }
  else
  {
    v13 = v12;
    bzero(v12, v9 + 1);
    memcpy(v13, v5 - 1, v9);
  }
  v14 = (char *)&v5[v9 - 2];
  v15 = (uint64_t)&v6[v9];
  do
  {
    v17 = *++v14;
    v16 = v17;
    ++v15;
  }
  while (v17 == 32);
  if (v16 == 40)
  {
    do
    {
      v19 = *++v14;
      v18 = v19;
      ++v15;
    }
    while (v19 == 32);
    if (v18 == 41)
    {
LABEL_22:
      v20 = 0;
LABEL_23:
      v10 = 0;
      *a2 = v13;
      *a3 = v20;
      return v10;
    }
    v21 = -v15;
    v22 = v14;
    while (1)
    {
      do
      {
        v23 = (unsigned __int8 *)v22;
        v24 = *v22++;
      }
      while (v24 == 32);
      v22 = sub_1ACC78B54(v23);
      if (!v22)
        break;
      v25 = (size_t)&v22[v21];
      do
      {
        v27 = *v22++;
        v26 = v27;
        ++v25;
      }
      while (v27 == 32);
      if (v26 != 44)
      {
        if (v26 != 41)
          break;
        if (!sqlite3_initialize())
        {
          v29 = (void *)sub_1ACB5D828(v25 + 1);
          if (v29)
          {
            v20 = v29;
            bzero(v29, v25 + 1);
            memcpy(v20, v14, v25);
            goto LABEL_23;
          }
        }
        if ((uint64_t)(v25 + 1) <= 0)
          goto LABEL_22;
        v10 = 7;
        goto LABEL_35;
      }
    }
  }
  v10 = 1;
LABEL_35:
  if (v13)
  {
    v28 = (void (**)(void *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v13);
      v13 = (void *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return v10;
      v28 = (void (**)(void *))&xmmword_1ECD3B1D0;
    }
    (*v28)(v13);
  }
  return v10;
}

double sub_1ACC7C6EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  sqlite3_stmt **v12;
  void (**v13)(sqlite3_stmt **);
  uint64_t *v14;
  _QWORD *v15;
  void (*v16)(_QWORD);
  _QWORD *v17;
  uint64_t (**v18)(_QWORD);
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;
  uint64_t (**v22)(uint64_t);
  uint64_t v23;
  uint64_t (**v24)(uint64_t);
  uint64_t v25;
  _QWORD *v26;
  sqlite3_stmt *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double result;

  v2 = *a1;
  v3 = a1[20];
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v4)(v3);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v5 = a1[22];
  if (!v5)
    goto LABEL_15;
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_14;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v5);
  v5 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
LABEL_14:
    (*v6)(v5);
  }
LABEL_15:
  v7 = a1[7];
  if (v7)
  {
    if (*((_DWORD *)a1 + 8) == 5)
      v8 = *((_DWORD *)a1 + 9) != 0;
    else
      v8 = 2;
    v9 = *(_QWORD *)(v2 + 40) + 8 * v8;
    v11 = *(_QWORD *)(v9 + 40);
    v10 = (_QWORD *)(v9 + 40);
    if (!v11)
    {
      sqlite3_reset((sqlite3_stmt *)a1[7]);
      *v10 = v7;
      v12 = (sqlite3_stmt **)a1[9];
      if (!v12)
        goto LABEL_28;
      goto LABEL_22;
    }
    sqlite3_finalize((sqlite3_stmt *)a1[7]);
  }
  v12 = (sqlite3_stmt **)a1[9];
  if (!v12)
    goto LABEL_28;
LABEL_22:
  sqlite3_finalize(*v12);
  v13 = (void (**)(sqlite3_stmt **))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_27:
    (*v13)(v12);
    goto LABEL_28;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v12);
  v12 = (sqlite3_stmt **)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v13 = (void (**)(sqlite3_stmt **))&xmmword_1ECD3B1D0;
    goto LABEL_27;
  }
LABEL_28:
  v14 = a1 + 4;
  if (*((_DWORD *)a1 + 8) != 2)
    sub_1ACC7CB68(a1[8]);
  v15 = (_QWORD *)a1[19];
  if (v15)
  {
    do
    {
      v16 = (void (*)(_QWORD))v15[2];
      v17 = (_QWORD *)v15[3];
      if (v16)
        v16(v15[1]);
      v18 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v15);
        v15 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_33;
        v18 = &xmmword_1ECD3B1D0;
      }
      (*v18)(v15);
LABEL_33:
      v15 = v17;
    }
    while (v17);
  }
  sqlite3_finalize((sqlite3_stmt *)a1[17]);
  v19 = a1[16];
  if (v19)
  {
    v20 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_47:
      (*v20)(v19);
      goto LABEL_48;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v19);
    v19 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v20 = &xmmword_1ECD3B1D0;
      goto LABEL_47;
    }
  }
LABEL_48:
  if ((a1[10] & 0x10) == 0)
    goto LABEL_63;
  v21 = a1[12];
  if (v21)
  {
    v22 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_55:
      (*v22)(v21);
      goto LABEL_56;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v21);
    v21 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v22 = &xmmword_1ECD3B1D0;
      goto LABEL_55;
    }
  }
LABEL_56:
  v23 = a1[13];
  if (!v23)
    goto LABEL_63;
  v24 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_62;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v23);
  v23 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v24 = &xmmword_1ECD3B1D0;
LABEL_62:
    (*v24)(v23);
  }
LABEL_63:
  v25 = *(_QWORD *)(v2 + 32);
  v26 = *(_QWORD **)(v25 + 64);
  if (v26)
  {
    *(_QWORD *)(v25 + 64) = 0;
    v27 = (sqlite3_stmt *)v26[3];
    v28 = (_QWORD *)v26[4];
    v29 = v28[3];
    if (v29)
      xmmword_1ECD3B1C0(v29);
    sub_1ACBE0F9C(v28, v26);
    v30 = v28[3];
    if (v30)
      xmmword_1ECD3B1D0(v30);
    sqlite3_finalize(v27);
  }
  v14[18] = 0;
  result = 0.0;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *(_OWORD *)v14 = 0u;
  return result;
}

uint64_t sub_1ACC7CB68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  sub_1ACC7CCA0(*(_QWORD *)(result + 16));
  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_9;
      v3 = &xmmword_1ECD3B1D0;
    }
    (*v3)(v2);
  }
LABEL_9:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v4)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    return (*v4)(v1);
  }
  return result;
}

uint64_t sub_1ACC7CCA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);

  if (result)
  {
    v1 = result;
    if (*(int *)(result + 40) >= 1)
    {
      v2 = 0;
      do
        sub_1ACC7CCA0(*(_QWORD *)(v1 + 48 + 8 * v2++));
      while (v2 < *(int *)(v1 + 40));
    }
    sub_1ACC7CD88(*(_QWORD *)(v1 + 32));
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v3)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      return (*v3)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACC7CD88(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t (**v5)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    v2 = 0;
    do
      sub_1ACC7CEE4(*(_QWORD *)(v1 + 24 + 8 * v2++));
    while (v2 < *(int *)(v1 + 16));
  }
  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_12;
      v4 = &xmmword_1ECD3B1D0;
    }
    (*v4)(v3);
  }
LABEL_12:
  v5 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v5)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = &xmmword_1ECD3B1D0;
    return (*v5)(v1);
  }
  return result;
}

uint64_t sub_1ACC7CEE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  sqlite3_stmt *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  sqlite3_stmt *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  uint64_t (**v24)(_QWORD);
  uint64_t v25;
  uint64_t (**v26)(uint64_t);
  uint64_t (**v27)(uint64_t);
  uint64_t v28;

  if (!result)
    return result;
  v1 = result;
  if (*(int *)(result + 24) >= 1)
  {
    v2 = 0;
    v28 = result;
    while (1)
    {
      v3 = v1 + 32 * v2;
      v4 = *(_QWORD *)(v3 + 40);
      if (v4)
      {
        v5 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_11;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v4);
        v4 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
          break;
      }
LABEL_12:
      v6 = *(_QWORD *)(v3 + 48);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        sub_1ACC7D2A0(v6);
        v8 = *(_QWORD **)(v7 + 64);
        if (v8)
        {
          *(_QWORD *)(v7 + 64) = 0;
          v9 = (sqlite3_stmt *)v8[3];
          v10 = (_QWORD *)v8[4];
          v11 = v10[3];
          if (v11)
            xmmword_1ECD3B1C0(v11);
          sub_1ACBE0F9C(v10, v8);
          v12 = v10[3];
          if (v12)
            xmmword_1ECD3B1D0(v12);
          sqlite3_finalize(v9);
        }
      }
      v13 = *(_QWORD **)(v1 + 32 * v2 + 56);
      if (v13)
      {
        while (1)
        {
          v14 = v13[2];
          v15 = (_QWORD *)v13[3];
          if (v14)
          {
            v16 = *(_QWORD *)(v14 + 24);
            sub_1ACC7D2A0(v14);
            v17 = *(_QWORD **)(v16 + 64);
            if (v17)
            {
              *(_QWORD *)(v16 + 64) = 0;
              v18 = (sqlite3_stmt *)v17[3];
              v19 = (_QWORD *)v17[4];
              v20 = v19[3];
              if (v20)
                xmmword_1ECD3B1C0(v20);
              sub_1ACBE0F9C(v19, v17);
              v21 = v19[3];
              if (v21)
                xmmword_1ECD3B1D0(v21);
              sqlite3_finalize(v18);
            }
          }
          v22 = v13[4];
          if (v22)
          {
            v23 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_36;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v22);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v22);
            v22 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
              break;
          }
LABEL_37:
          v13[4] = 0;
          v13[5] = 0;
          v24 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v13);
            v13 = (_QWORD *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_22;
            v24 = &xmmword_1ECD3B1D0;
          }
          (*v24)(v13);
LABEL_22:
          v13 = v15;
          if (!v15)
            goto LABEL_4;
        }
        v23 = &xmmword_1ECD3B1D0;
LABEL_36:
        (*v23)(v22);
        goto LABEL_37;
      }
LABEL_4:
      ++v2;
      v1 = v28;
      if (v2 >= *(int *)(v28 + 24))
        goto LABEL_42;
    }
    v5 = &xmmword_1ECD3B1D0;
LABEL_11:
    (*v5)(v4);
    goto LABEL_12;
  }
LABEL_42:
  if (*(int *)(v1 + 20) >= 1)
  {
    v25 = *(_QWORD *)(v1 + 8);
    if (v25)
    {
      v26 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v25);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v25);
        v25 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_50;
        v26 = &xmmword_1ECD3B1D0;
      }
      (*v26)(v25);
    }
LABEL_50:
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  v27 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v27)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v27 = &xmmword_1ECD3B1D0;
    return (*v27)(v1);
  }
  return result;
}

uint64_t sub_1ACC7D2A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t (**v14)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  if (*(int *)(result + 64) >= 1)
  {
    v2 = 0;
    v3 = (_QWORD *)(result + 200);
    while (1)
    {
      v4 = *v3;
      if (!*v3)
        goto LABEL_13;
      v5 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_12;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
        break;
LABEL_13:
      *v3 = 0;
      v3[1] = 0;
      v6 = *(v3 - 11);
      if (!v6)
        goto LABEL_20;
      v7 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_19;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v7 = &xmmword_1ECD3B1D0;
LABEL_19:
        (*v7)(v6);
      }
LABEL_20:
      v8 = *(v3 - 10);
      if (!v8)
        goto LABEL_27;
      v9 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_26;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v8);
      v8 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v9 = &xmmword_1ECD3B1D0;
LABEL_26:
        (*v9)(v8);
      }
LABEL_27:
      sub_1ACC7D608(*(v3 - 8), *((_DWORD *)v3 - 14));
      sub_1ACC7D774((int *)*(v3 - 1));
      v10 = *(v3 - 2);
      if (v10)
      {
        v11 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v10);
          v10 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_5;
          v11 = &xmmword_1ECD3B1D0;
        }
        (*v11)(v10);
      }
LABEL_5:
      v3[3] = 0;
      *(_OWORD *)(v3 - 1) = 0u;
      *(_OWORD *)(v3 + 1) = 0u;
      *(_OWORD *)(v3 - 5) = 0u;
      *(_OWORD *)(v3 - 3) = 0u;
      *(_OWORD *)(v3 - 9) = 0u;
      *(_OWORD *)(v3 - 7) = 0u;
      *(_OWORD *)(v3 - 13) = 0u;
      *(_OWORD *)(v3 - 11) = 0u;
      ++v2;
      v3 += 17;
      if (v2 >= *(int *)(v1 + 64))
        goto LABEL_33;
    }
    v5 = &xmmword_1ECD3B1D0;
LABEL_12:
    (*v5)(v4);
    goto LABEL_13;
  }
LABEL_33:
  v12 = *(_QWORD *)(v1 + 32);
  if (v12)
  {
    v13 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v12);
      v12 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_40;
      v13 = &xmmword_1ECD3B1D0;
    }
    (*v13)(v12);
  }
LABEL_40:
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  v14 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v14)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v14 = &xmmword_1ECD3B1D0;
    return (*v14)(v1);
  }
  return result;
}

uint64_t sub_1ACC7D608(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t (**v7)(uint64_t);

  if (result)
  {
    v2 = result;
    if (a2 >= 1)
    {
      v3 = a2;
      v4 = (uint64_t *)result;
      do
      {
        v5 = *v4;
        if (*v4)
        {
          v6 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v5);
            v5 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_5;
            v6 = &xmmword_1ECD3B1D0;
          }
          (*v6)(v5);
        }
LABEL_5:
        ++v4;
        --v3;
      }
      while (v3);
    }
    v7 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v7)(v2);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = &xmmword_1ECD3B1D0;
      return (*v7)(v2);
    }
  }
  return result;
}

int *sub_1ACC7D774(int *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(int *);

  if (result)
  {
    v1 = result;
    if (*result >= 1)
    {
      v2 = 0;
      v3 = 2;
      do
      {
        v4 = *(_QWORD *)&v1[v3];
        if (v4)
        {
          v5 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v4);
            v4 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_5;
            v5 = &xmmword_1ECD3B1D0;
          }
          (*v5)(v4);
        }
LABEL_5:
        ++v2;
        v3 += 8;
      }
      while (v2 < *v1);
    }
    v6 = (uint64_t (**)(int *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (int *)(*v6)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = (int *)off_1ECD3B168(v1);
    v1 = (int *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = (uint64_t (**)(int *))&xmmword_1ECD3B1D0;
      return (int *)(*v6)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACC7D8EC(uint64_t a1, unsigned int a2, int a3, unsigned __int8 *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *i;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  char *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  const char *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  int v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t j;
  unsigned __int8 v67;
  char *v68;
  unsigned __int8 *v69;
  void (**v70)(unsigned __int8 **);
  _QWORD *v71;
  uint64_t v74;
  uint64_t (**v75)(uint64_t);
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  *a5 = 0;
  *a6 = 0;
  v89 = 0u;
  v90 = 0u;
  v91 = a2;
  if (sqlite3_initialize())
    return 7;
  v83 = a3;
  v12 = sub_1ACB5D828(2424);
  if (!v12)
    return 7;
  v13 = (unsigned __int8 **)v12;
  v81 = a6;
  *(_WORD *)(v12 + 16) = 0;
  v85 = v12 + 16;
  *(_QWORD *)v12 = v12 + 16;
  *(_QWORD *)(v12 + 2416) = v12 + 2392;
  v82 = a1;
  v88 = a1;
  while (2)
  {
    v14 = (uint64_t)a4;
    for (i = a4; ; ++i)
    {
      v16 = (char)*i;
      v17 = *i;
      if (v16 > 0x20 || ((1 << v17) & 0x100002600) == 0)
        break;
      ++v14;
    }
    v19 = 10;
    v20 = 1;
    LODWORD(v21) = 1;
    switch(*i)
    {
      case '"':
        v22 = i;
        do
        {
          v24 = v22 + 1;
          v23 = v22[1];
          if (v23 == 34)
          {
            v24 = v22 + 2;
            if (v22[2] != 34)
            {
              LODWORD(v21) = (_DWORD)v22 - v14 + 2;
              v20 = v21;
              v19 = 9;
              goto LABEL_43;
            }
          }
          v22 = v24;
        }
        while (v23);
        v87 = (char *)a4;
        sub_1ACC7EA04((char *)&v88, "unterminated string");
        goto LABEL_137;
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '|':
        goto LABEL_19;
      case '(':
        goto LABEL_43;
      case ')':
        v19 = 11;
        goto LABEL_42;
      case '*':
        v19 = 15;
        goto LABEL_42;
      case '+':
        v19 = 14;
        goto LABEL_42;
      case ',':
        v19 = 13;
        goto LABEL_42;
      case '-':
        v19 = 6;
        goto LABEL_42;
      case ':':
        v19 = 5;
        goto LABEL_42;
      case '^':
        v19 = 12;
        goto LABEL_42;
      case '{':
        v19 = 7;
        goto LABEL_42;
      case '}':
        v19 = 8;
        goto LABEL_42;
      default:
        if (!*i)
        {
          v19 = 0;
LABEL_42:
          v20 = 1;
          LODWORD(v21) = 1;
          goto LABEL_43;
        }
LABEL_19:
        if ((v16 & 0x80000000) != 0 || byte_1ACCBB4E3[v17])
        {
          v21 = 0;
          do
          {
            while (1)
            {
              v25 = (char)i[v21 + 1];
              if ((v25 & 0x80000000) == 0)
                break;
              ++v21;
            }
            ++v21;
          }
          while (byte_1ACCBB4E3[v25]);
          v20 = v21;
          if ((_DWORD)v21 == 2)
          {
            if (*(_WORD *)i == 21071)
              v19 = 1;
            else
              v19 = 9;
          }
          else if ((_DWORD)v21 == 3)
          {
            v26 = *(unsigned __int16 *)i;
            v27 = i[2];
            if (v26 ^ 0x4F4E | v27 ^ 0x54)
              v28 = 9;
            else
              v28 = 3;
            if (v26 ^ 0x4E41 | v27 ^ 0x44)
              v19 = v28;
            else
              v19 = 2;
          }
          else
          {
            v19 = 9;
          }
LABEL_43:
          v86 = v20;
          v87 = (char *)&i[(int)v21];
          goto LABEL_44;
        }
        v87 = (char *)a4;
        sub_1ACC7EA04((char *)&v88, "fts5: syntax error near \"%.1s\"");
LABEL_137:
        v19 = 0;
        v86 = 1;
LABEL_44:
        v92 = 0;
        v93 = 0;
        v13[1] = (unsigned __int8 *)&v88;
        v29 = *v13;
        v30 = **v13;
        v31 = v19;
        break;
    }
    while (1)
    {
      if (v30 <= 0x22)
      {
        v36 = byte_1ACCBB584[v30] + v31;
        v37 = byte_1ACCBB5A7[v36];
        v38 = (char *)&byte_1ACCBB643[v36];
        v39 = (unsigned __int8 *)&unk_1ACCBB620 + v30;
        if (v37 == (_DWORD)v31)
          v39 = (unsigned __int8 *)v38;
        v30 = *v39;
      }
      if (v30 < 0x53)
        break;
      if (v30 != 105 && v30 != 110)
      {
        v40 = (uint64_t)v13[1];
LABEL_59:
        switch(v30)
        {
          case 'S':
            *(_QWORD *)(v40 + 32) = *((_QWORD *)v29 + 1);
            goto LABEL_47;
          case 'T':
            v41 = (uint64_t)sub_1ACC7EB68((_DWORD *)v40, *((_DWORD **)v29 - 2));
            goto LABEL_93;
          case 'U':
          case '^':
            *((_QWORD *)v29 - 5) = *((_QWORD *)v29 - 2);
            goto LABEL_47;
          case 'V':
          case 'Y':
            v32 = (uint64_t)sub_1ACC7ECCC((uint64_t *)v40, 0, (uint64_t)(v29 + 8));
            goto LABEL_46;
          case 'W':
            v42 = sub_1ACC7ECCC((uint64_t *)v40, 0, (uint64_t)(v29 + 8));
            *((_QWORD *)v29 - 2) = v42;
            v43 = (uint64_t)sub_1ACC7EB68((_DWORD *)v40, v42);
            goto LABEL_95;
          case 'X':
            v43 = (uint64_t)sub_1ACC7ECCC((uint64_t *)v40, *((unsigned int **)v29 - 2), (uint64_t)(v29 + 8));
            goto LABEL_95;
          case 'Z':
            v44 = (_DWORD *)*((_QWORD *)v29 - 5);
            v45 = (_DWORD *)*((_QWORD *)v29 + 1);
            v46 = v40;
            v47 = 2;
            goto LABEL_69;
          case '[':
            v44 = (_DWORD *)*((_QWORD *)v29 - 5);
            v45 = (_DWORD *)*((_QWORD *)v29 + 1);
            v46 = v40;
            v47 = 1;
            goto LABEL_69;
          case '\\':
            v44 = (_DWORD *)*((_QWORD *)v29 - 5);
            v45 = (_DWORD *)*((_QWORD *)v29 + 1);
            v46 = v40;
            v47 = 3;
LABEL_69:
            *((_QWORD *)v29 - 5) = sub_1ACC7F070(v46, v47, v44, v45, 0);
            goto LABEL_47;
          case ']':
            sub_1ACC7E90C((char *)v40, *((_QWORD *)v29 - 2), *((int **)v29 - 11));
            *((_QWORD *)v29 - 11) = *((_QWORD *)v29 - 2);
            goto LABEL_47;
          case 'a':
            v48 = (_DWORD *)*((_QWORD *)v29 - 2);
            v49 = *((_QWORD *)v29 + 1);
            if (*(_DWORD *)(v40 + 16))
            {
              v50 = *((_QWORD *)v29 + 1);
              sub_1ACC7CCA0(*((_QWORD *)v29 - 2));
              sub_1ACC7CCA0(v50);
              *((_QWORD *)v29 - 2) = 0;
            }
            else
            {
              v60 = (_DWORD *)*((_QWORD *)v29 - 2);
              if (*v48 == 2)
                v60 = *(_DWORD **)&v48[2 * v48[10] + 10];
              if (*(_DWORD *)v49)
              {
                if (*v60)
                {
                  *((_QWORD *)v29 - 2) = sub_1ACC7F070(v40, 2, *((_DWORD **)v29 - 2), (_DWORD *)v49, 0);
                }
                else
                {
                  v61 = (_DWORD *)*((_QWORD *)v29 + 1);
                  v84 = (uint64_t)v60;
                  if (v60 != v48)
                  {
                    *(_QWORD *)&v48[2 * v48[10] + 10] = v49;
                    v61 = v48;
                  }
                  v62 = v61;
                  v63 = *(int *)(*(_QWORD *)(v49 + 32) + 16);
                  v64 = *(_QWORD *)(v40 + 24) + 8 * (*(_DWORD *)(v40 + 20) + ~(_DWORD)v63);
                  memmove((void *)v64, (const void *)(v64 + 8), 8 * v63);
                  --*(_DWORD *)(v40 + 20);
                  sub_1ACC7CCA0(v84);
                  *((_QWORD *)v29 - 2) = v62;
                }
              }
              else
              {
                sub_1ACC7CCA0(*((_QWORD *)v29 + 1));
                --*(_DWORD *)(v40 + 20);
                *((_QWORD *)v29 - 2) = v48;
              }
            }
            goto LABEL_47;
          case 'b':
            v32 = (uint64_t)sub_1ACC7F070(v40, 9, 0, 0, *((_QWORD *)v29 + 1));
            goto LABEL_46;
          case 'c':
            v51 = sub_1ACC7F070(v40, 9, 0, 0, *((_QWORD *)v29 + 1));
            sub_1ACC7E90C((char *)v40, (uint64_t)v51, *((int **)v29 - 5));
            *((_QWORD *)v29 - 5) = v51;
            goto LABEL_47;
          case 'd':
          case 'g':
            v32 = sub_1ACC7F364(v40, 0, *((_QWORD *)v29 + 1));
LABEL_46:
            *((_QWORD *)v29 + 1) = v32;
            goto LABEL_47;
          case 'e':
            v52 = *((_QWORD *)v29 + 1);
            if (v52 && *(_DWORD *)(v52 + 24))
            {
              *(_BYTE *)(v52 + 33) = 1;
              v52 = *((_QWORD *)v29 + 1);
            }
            *((_QWORD *)v29 - 2) = sub_1ACC7F364(v40, 0, v52);
            goto LABEL_47;
          case 'f':
            v53 = (const char *)*((_QWORD *)v29 - 11);
            if (*((_DWORD *)v29 - 20) != 4 || *(_DWORD *)v53 != 1380009294)
              sub_1ACC7EA04((char *)v40, "fts5: syntax error near \"%.*s\"", *((_DWORD *)v29 - 20), v53);
            v54 = (int *)*((_QWORD *)v29 - 5);
            if (!v54)
              goto LABEL_106;
            v55 = *((unsigned int *)v29 - 2);
            if (!(_DWORD)v55)
            {
              v57 = 10;
LABEL_105:
              *v54 = v57;
              goto LABEL_106;
            }
            if ((int)v55 < 1)
            {
              v57 = 0;
              goto LABEL_105;
            }
            v56 = 0;
            v57 = 0;
            v58 = (const char *)*((_QWORD *)v29 - 2);
            while (1)
            {
              v59 = v58[v56];
              if ((v59 - 48) >= 0xA)
                break;
              v57 = v59 + 10 * v57 - 48;
              if (v55 == ++v56)
                goto LABEL_105;
            }
            sub_1ACC7EA04((char *)v40, "expected integer, got \"%.*s\"", *((_DWORD *)v29 - 2), v58);
LABEL_106:
            *((_QWORD *)v29 - 11) = *((_QWORD *)v29 - 5);
            break;
          case 'h':
            v43 = sub_1ACC7F364(v40, *((_QWORD *)v29 - 2), *((_QWORD *)v29 + 1));
            goto LABEL_95;
          case 'i':
            *((_QWORD *)v29 + 4) = 0;
            *((_DWORD *)v29 + 10) = 0;
            goto LABEL_47;
          case 'j':
            *((_OWORD *)v29 - 1) = *(_OWORD *)(v29 + 8);
            goto LABEL_47;
          case 'k':
            v41 = sub_1ACC7F4B0((uint64_t *)v40, *((_QWORD *)v29 - 8), (uint64_t)(v29 - 16), *((_DWORD *)v29 + 2));
LABEL_93:
            *((_QWORD *)v29 - 8) = v41;
            goto LABEL_47;
          case 'l':
            v43 = sub_1ACC7F4B0((uint64_t *)v40, 0, (uint64_t)(v29 - 16), *((_DWORD *)v29 + 2));
LABEL_95:
            *((_QWORD *)v29 - 2) = v43;
            goto LABEL_47;
          case 'm':
            *((_DWORD *)v29 + 2) = 1;
            goto LABEL_47;
          case 'n':
            *((_DWORD *)v29 + 8) = 0;
            goto LABEL_47;
          default:
            goto LABEL_47;
        }
        goto LABEL_47;
      }
      v40 = (uint64_t)v13[1];
      if (v29 >= v13[302])
      {
        j = v85;
        if ((unint64_t)v29 > v85)
        {
          do
          {
            *v13 = v29 - 24;
            sub_1ACC7EA54(v29[1], (uint64_t *)v29 + 1);
            v29 = *v13;
          }
          while ((unint64_t)*v13 > v85);
        }
        sub_1ACC7EA04((char *)v40, "fts5: parser stack overflow");
        v13[1] = (unsigned __int8 *)v40;
        goto LABEL_120;
      }
      if (v30 - 83 <= 0x1B)
        goto LABEL_59;
LABEL_47:
      v33 = v30 - 83;
      v34 = byte_1ACCBB6AC[v33];
      v35 = &v29[24 * byte_1ACCBB568[v33]];
      v30 = byte_1ACCBB643[byte_1ACCBB6C8[*v35] + v34];
      v35[24] = v30;
      v29 = v35 + 24;
      *v13 = v29;
      v29[1] = v34;
    }
    if (v30 > 0x4F)
    {
      if (v30 == 81)
      {
        *v13 = v29 - 24;
      }
      else
      {
        v92 = v14;
        v93 = v86;
        v68 = (char *)v13[1];
        sub_1ACC7EA04(v68, "fts5: syntax error near \"%.*s\"", v86, (const char *)i);
        v13[1] = (unsigned __int8 *)v68;
        sub_1ACC7EA54(v31, &v92);
      }
LABEL_128:
      j = v85;
      a4 = (unsigned __int8 *)v87;
      if (!(_DWORD)v31)
        goto LABEL_139;
LABEL_129:
      if (DWORD2(v89))
        goto LABEL_139;
      continue;
    }
    break;
  }
  *v13 = v29 + 24;
  if (v29 + 24 <= v13[302])
  {
    v67 = v30 + 31;
    if (v30 <= 0x22)
      v67 = v30;
    v29[24] = v67;
    v29[25] = v31;
    *((_QWORD *)v29 + 4) = v14;
    *((_QWORD *)v29 + 5) = v86;
    goto LABEL_128;
  }
  *v13 = v29;
  v65 = (char *)v13[1];
  for (j = v85; (unint64_t)*v13 > v85; v29 = *v13)
  {
    *v13 = v29 - 24;
    sub_1ACC7EA54(v29[1], (uint64_t *)v29 + 1);
  }
  sub_1ACC7EA04(v65, "fts5: parser stack overflow");
  v13[1] = (unsigned __int8 *)v65;
LABEL_120:
  a4 = (unsigned __int8 *)v87;
  if ((_DWORD)v31)
    goto LABEL_129;
LABEL_139:
  while (1)
  {
    v69 = *v13;
    if ((unint64_t)*v13 <= j)
      break;
    *v13 = v69 - 24;
    sub_1ACC7EA54(v69[1], (uint64_t *)v69 + 1);
  }
  v70 = (void (**)(unsigned __int8 **))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v13);
    v13 = (unsigned __int8 **)xmmword_1ECD3E930;
    v71 = v81;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v70 = (void (**)(unsigned __int8 **))&xmmword_1ECD3B1D0;
      goto LABEL_146;
    }
  }
  else
  {
    v71 = v81;
LABEL_146:
    (*v70)(v13);
  }
  if (*(_DWORD *)(v82 + 24) > v83 && *((_QWORD *)&v90 + 1) != 0 && DWORD2(v89) == 0)
  {
    if (sqlite3_initialize())
      goto LABEL_158;
    v76 = (int *)sub_1ACB5D828(8);
    if (!v76)
      goto LABEL_158;
    *(_QWORD *)v76 = 0;
    *v76 = 1;
    v76[1] = v83;
    sub_1ACC7E90C((char *)&v88, *((uint64_t *)&v90 + 1), v76);
    if (DWORD2(v89))
      goto LABEL_159;
LABEL_155:
    if (sqlite3_initialize())
    {
      *a5 = 0;
LABEL_158:
      DWORD2(v89) = 7;
      goto LABEL_159;
    }
    v77 = sub_1ACB5D828(40);
    *a5 = v77;
    if (!v77)
      goto LABEL_158;
    v78 = v77;
    if (*((_QWORD *)&v90 + 1))
    {
      *(_QWORD *)(v77 + 16) = *((_QWORD *)&v90 + 1);
    }
    else
    {
      if (!DWORD2(v89))
      {
        if (!sqlite3_initialize())
        {
          v80 = sub_1ACB5D828(56);
          if (v80)
          {
            *(_QWORD *)(v80 + 48) = 0;
            *(_OWORD *)(v80 + 16) = 0u;
            *(_OWORD *)(v80 + 32) = 0u;
            *(_OWORD *)v80 = 0u;
            *(_QWORD *)(v78 + 16) = v80;
            *(_DWORD *)(v80 + 4) = 1;
            goto LABEL_177;
          }
        }
        DWORD2(v89) = 7;
      }
      *(_QWORD *)(v78 + 16) = 0;
    }
LABEL_177:
    *(_QWORD *)v78 = 0;
    *(_QWORD *)(v78 + 8) = v82;
    *(_QWORD *)(v78 + 32) = v90;
    v79 = HIDWORD(v89);
    *(_DWORD *)(v78 + 24) = 0;
    *(_DWORD *)(v78 + 28) = v79;
    *(_QWORD *)&v90 = 0;
    goto LABEL_166;
  }
  if (!DWORD2(v89))
    goto LABEL_155;
LABEL_159:
  sub_1ACC7CCA0(*((uint64_t *)&v90 + 1));
  v74 = v90;
  if ((_QWORD)v90)
  {
    v75 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_165;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v74);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v74);
    v74 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v75 = &xmmword_1ECD3B1D0;
LABEL_165:
      (*v75)(v74);
    }
  }
LABEL_166:
  *v71 = v89;
  return DWORD2(v89);
}

uint64_t sub_1ACC7E47C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t);
  uint64_t (**v16)(uint64_t);
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = a2;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  if (!a2 || (v3 = *a1) == 0)
  {
    v6 = 0;
    if (a2)
      *a1 = a2;
    return v6;
  }
  v4 = *(_DWORD *)(v3 + 28);
  v5 = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(v3 + 16) = sub_1ACC7F070((uint64_t)&v18, 2, *(_DWORD **)(v3 + 16), *(_DWORD **)(a2 + 16), 0);
  *(_QWORD *)(v2 + 16) = 0;
  v6 = v19;
  if (!(_DWORD)v19)
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (sqlite3_initialize()
      || (v8 = v5 + v4, (v9 = (char *)sub_1ACB6BB48(v7, (8 * v8) & ~((8 * v8) >> 31))) == 0))
    {
      v6 = 7;
    }
    else
    {
      v10 = v9;
      memmove(&v9[8 * *(int *)(v2 + 28)], v9, 8 * *(int *)(v3 + 28));
      v11 = *(unsigned int *)(v2 + 28);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = 8 * v11;
        do
        {
          *(_QWORD *)&v10[v12] = *(_QWORD *)(*(_QWORD *)(v2 + 32) + v12);
          v12 += 8;
        }
        while (v13 != v12);
      }
      v6 = 0;
      *(_DWORD *)(v3 + 28) = v8;
      *(_QWORD *)(v3 + 32) = v10;
    }
  }
  v14 = *(_QWORD *)(v2 + 32);
  if (v14)
  {
    v15 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v14);
      v14 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_20;
      v15 = &xmmword_1ECD3B1D0;
    }
    (*v15)(v14);
  }
LABEL_20:
  v16 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_25:
    (*v16)(v2);
    return v6;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v2);
  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = &xmmword_1ECD3B1D0;
    goto LABEL_25;
  }
  return v6;
}

uint64_t sub_1ACC7E684(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)v4 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 24) = a3;
  result = sub_1ACC831A8(v4, v6);
  if ((_DWORD)result)
    goto LABEL_14;
  if (*(_DWORD *)(v6 + 4))
    goto LABEL_3;
  v8 = *(_QWORD *)(v6 + 24);
  if (*(_DWORD *)(v4 + 24))
  {
    if (v8 > v5)
      goto LABEL_8;
LABEL_3:
    result = 0;
    goto LABEL_10;
  }
  if (v8 >= v5)
    goto LABEL_3;
LABEL_8:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v6, 1, v5);
LABEL_10:
  while (*(_DWORD *)(v6 + 8) && (_DWORD)result == 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 16))(v4, v6, 0, 0);
LABEL_14:
  *(_DWORD *)(a2 + 80) |= 0x4E | (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 4) != 0);
  return result;
}

uint64_t sub_1ACC7E764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3_stmt **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(void *);

  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
    v5 = *(_DWORD *)(v4 + 28);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  if (sqlite3_initialize())
    return 7;
  v8 = (sqlite3_stmt **)sub_1ACB5D828(4 * (v5 - 1) + 32);
  if (!v8)
    return 7;
  v9 = v8;
  bzero(v8, 4 * (v5 - 1) + 32);
  *((_DWORD *)v9 + 6) = v5;
  v7 = sub_1ACC89188(v9, v6, v10, v11, v12, v13, v14, v15, *(_QWORD *)(v6 + 8));
  *(_QWORD *)(a2 + 72) = v9;
  if ((_DWORD)v7 || (*(_QWORD *)(a1 + 56) = a2, v7 = sub_1ACC89340(a2), *(_QWORD *)(a1 + 56) = 0, (_DWORD)v7))
  {
    sqlite3_finalize(*v9);
    v16 = (uint64_t (**)(void *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v9);
      v9 = (sqlite3_stmt **)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_15;
      v16 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
    }
    (*v16)(v9);
LABEL_15:
    *(_QWORD *)(a2 + 72) = 0;
  }
  return v7;
}

uint64_t sub_1ACC7E90C(char *a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t result;
  uint64_t (**v5)(int *);
  int *v6;

  v3 = a3;
  v6 = a3;
  if (*(_DWORD *)(*(_QWORD *)a1 + 92) == 1)
  {
    result = (uint64_t)sub_1ACC7EA04(a1, "fts5: column queries are not supported (detail=none)");
    if (!v3)
      return result;
  }
  else
  {
    result = sub_1ACC83008((uint64_t)a1, a2, a3, &v6);
    v3 = v6;
    if (!v6)
      return result;
  }
  v5 = (uint64_t (**)(int *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v5)(v3);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v3);
  v3 = (int *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = (uint64_t (**)(int *))&xmmword_1ECD3B1D0;
    return (*v5)(v3);
  }
  return result;
}

char *sub_1ACC7EA04(char *result, char *a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (!*((_DWORD *)result + 4))
  {
    v2 = (uint64_t)result;
    result = sqlite3_vmprintf(a2, va);
    *(_QWORD *)(v2 + 8) = result;
    *(_DWORD *)(v2 + 16) = 1;
  }
  return result;
}

uint64_t sub_1ACC7EA54(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t);

  switch((int)result)
  {
    case 17:
    case 18:
    case 19:
      return sub_1ACC7CCA0(*a2);
    case 20:
    case 21:
      v2 = *a2;
      if (!*a2)
        return result;
      v3 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        return (*v3)(v2);
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v3 = &xmmword_1ECD3B1D0;
        return (*v3)(v2);
      }
      return result;
    case 22:
    case 23:
      return sub_1ACC7CD88(*a2);
    case 24:
      return sub_1ACC7CEE4(*a2);
    default:
      return result;
  }
}

int *sub_1ACC7EB68(_DWORD *a1, _DWORD *a2)
{
  int *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (a1[4])
    goto LABEL_2;
  v7 = *(int *)(*(_QWORD *)a1 + 24);
  if (sqlite3_initialize() || (v8 = (int *)sub_1ACB5D828(4 * v7 + 8)) == 0)
  {
    if ((int)v7 < -1)
    {
LABEL_2:
      v3 = 0;
      goto LABEL_3;
    }
    v3 = 0;
    a1[4] = 7;
LABEL_3:
    if (!a2)
      return v3;
    goto LABEL_4;
  }
  v3 = v8;
  bzero(v8, 4 * v7 + 8);
  if ((int)v7 < 1)
    goto LABEL_3;
  v9 = 0;
  v10 = 0;
  do
  {
    if (v9 < *a2 && v10 == a2[v9 + 1])
    {
      ++v9;
    }
    else
    {
      v11 = *v3;
      *v3 = v11 + 1;
      v3[v11 + 1] = v10;
    }
    ++v10;
  }
  while ((_DWORD)v7 != v10);
LABEL_4:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_9:
    (*v4)(a2);
    return v3;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(a2);
  --qword_1ECD3E8D0;
  off_1ECD3B168(a2);
  a2 = (_DWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_9;
  }
  return v3;
}

_DWORD *sub_1ACC7ECCC(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  const char *v5;
  unsigned int v6;
  int v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t (**v17)(unsigned int *);
  _DWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  const char *i;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  void (**v29)(unsigned __int8 *);
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;

  if (*((_DWORD *)a1 + 4))
    goto LABEL_18;
  v5 = *(const char **)a3;
  v6 = *(_DWORD *)(a3 + 8);
  if ((v6 & 0x80000000) != 0)
  {
    v6 = strlen(*(const char **)a3);
    v7 = sqlite3_initialize();
    if ((v6 & 0x80000000) != 0)
    {
LABEL_17:
      *((_DWORD *)a1 + 4) = 7;
      goto LABEL_18;
    }
  }
  else
  {
    v7 = sqlite3_initialize();
  }
  if (v7)
    goto LABEL_17;
  v8 = (char *)sub_1ACB5D828(v6 + 1);
  if (!v8)
    goto LABEL_17;
  v9 = v8;
  memcpy(v8, v5, v6);
  v9[v6] = 0;
  if (*((_DWORD *)a1 + 4))
    goto LABEL_18;
  v10 = *a1;
  v11 = *(unsigned __int8 *)v9;
  if ((v11 - 34) <= 0x3E && ((1 << (v11 - 34)) & 0x4200000000000021) != 0)
  {
    if (v11 == 91)
      v13 = 93;
    else
      v13 = *(unsigned __int8 *)v9;
    v14 = *((unsigned __int8 *)v9 + 1);
    if (v9[1])
    {
      v15 = 0;
      v16 = 1;
      while (1)
      {
        v20 = v16 + 1;
        if (v14 == v13)
        {
          if (v9[v20] != v13)
            goto LABEL_33;
          LODWORD(v20) = v16 + 2;
          LOBYTE(v14) = v13;
        }
        v9[v15++] = v14;
        v14 = v9[(int)v20];
        v16 = v20;
        if (!v9[(int)v20])
          goto LABEL_33;
      }
    }
    LODWORD(v15) = 0;
LABEL_33:
    v9[v15] = 0;
  }
  v21 = *(unsigned int *)(v10 + 24);
  if ((int)v21 >= 1)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v10 + 32);
    while (1)
    {
      v24 = *(_BYTE **)(v23 + 8 * v22);
      if (v24)
        break;
LABEL_36:
      if (++v22 == v21)
        goto LABEL_44;
    }
    for (i = v9; ; ++i)
    {
      v26 = *v24;
      v27 = *(unsigned __int8 *)i;
      if ((_DWORD)v26 == (_DWORD)v27)
      {
        if (!*v24)
        {
          if ((_DWORD)v22 == (_DWORD)v21)
            goto LABEL_44;
LABEL_46:
          if (a2)
            v28 = *a2;
          else
            v28 = 0;
          if (sqlite3_initialize()
            || (v30 = v28, v31 = (int)v28, (v32 = (_DWORD *)sub_1ACB6BB48((uint64_t)a2, 4 * (int)v28 + 8)) == 0))
          {
            v18 = 0;
            *((_DWORD *)a1 + 4) = 7;
          }
          else
          {
            v18 = v32;
            if ((int)v30 < 1)
            {
              LODWORD(v33) = 0;
LABEL_67:
              if ((int)v30 > (int)v33)
              {
                do
                {
                  v32[v31 + 1] = v32[v31];
                  --v31;
                }
                while (v31 > (int)v33);
              }
              v32[v33 + 1] = v22;
              *v32 = v30 + 1;
            }
            else
            {
              v33 = 0;
              while (1)
              {
                v34 = v32[v33 + 1];
                if (v34 == (_DWORD)v22)
                  break;
                if (v34 > (int)v22)
                  goto LABEL_67;
                if (v30 == ++v33)
                {
                  LODWORD(v33) = v30;
                  goto LABEL_67;
                }
              }
            }
          }
          goto LABEL_51;
        }
      }
      else if (byte_1ACCB6333[v26] != byte_1ACCB6333[v27])
      {
        goto LABEL_36;
      }
      ++v24;
    }
  }
  LODWORD(v22) = 0;
  if ((_DWORD)v21)
    goto LABEL_46;
LABEL_44:
  sub_1ACC7EA04((char *)a1, "no such column: %s", v9);
  v18 = 0;
LABEL_51:
  v29 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_56;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v9);
  v9 = (const char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v29 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_56:
    (*v29)((unsigned __int8 *)v9);
  }
  if (v18)
    return v18;
LABEL_18:
  if (a2)
  {
    v17 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(a2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(a2);
      a2 = (unsigned int *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return 0;
      v17 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
    }
    (*v17)(a2);
  }
  return 0;
}

_DWORD *sub_1ACC7F070(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int, uint64_t);
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (*(_DWORD *)(a1 + 16))
    goto LABEL_2;
  if (a2 == 9 && !a5)
    return 0;
  if (a2 != 9 && !a3)
    return a4;
  if (a2 != 9 && !a4)
    return a3;
  if (a2 == 9)
  {
    if (*(_DWORD *)(a1 + 40) && *(int *)(*(_QWORD *)(a5 + 24) + 24) >= 2)
    {
      v10 = sub_1ACC7F77C(a1, a5);
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  if (a2 == 3)
  {
    v12 = 2;
  }
  else
  {
    if ((a2 - 1) > 1)
    {
LABEL_24:
      v12 = 0;
      goto LABEL_25;
    }
    if (*a3 == a2)
      v12 = a3[10] + 1;
    else
      v12 = 2;
    if (*a4 == a2)
      v12 = v12 + a4[10] - 1;
  }
LABEL_25:
  if (sqlite3_initialize() || (v13 = (void *)sub_1ACB5D828(8 * (v12 - 1) + 56)) == 0)
  {
    if (v12 >= -5)
      *(_DWORD *)(a1 + 16) = 7;
    goto LABEL_2;
  }
  v10 = (uint64_t)v13;
  bzero(v13, 8 * (v12 - 1) + 56);
  *(_DWORD *)v10 = a2;
  *(_QWORD *)(v10 + 32) = a5;
  if (a2 == 1)
  {
    v16 = sub_1ACC7FED0;
LABEL_43:
    *(_QWORD *)(v10 + 16) = v16;
LABEL_44:
    sub_1ACC7F9C4((_DWORD *)v10, a3);
    sub_1ACC7F9C4((_DWORD *)v10, a4);
    if (*(int *)(v10 + 12) < 257)
      return (_DWORD *)v10;
    sub_1ACC7EA04((char *)a1, "fts5 expression tree is too large (maximum depth %d)");
    goto LABEL_58;
  }
  if (a2 == 2)
  {
    v16 = sub_1ACC80030;
    goto LABEL_43;
  }
  if (a2 != 9)
  {
    *(_QWORD *)(v10 + 16) = sub_1ACC80078;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a5 + 16) == 1
    && (v14 = *(_QWORD *)(a5 + 24), *(_DWORD *)(v14 + 24) == 1)
    && !*(_QWORD *)(v14 + 56)
    && !*(_BYTE *)(v14 + 33))
  {
    *(_DWORD *)v10 = 4;
    v15 = sub_1ACC7FB0C;
  }
  else
  {
    v15 = sub_1ACC7FC20;
  }
  *(_QWORD *)(v10 + 16) = v15;
  v17 = *(_DWORD *)(a5 + 16);
  if (v17 >= 1)
  {
    v18 = a5 + 24;
    v19 = *(unsigned int *)(a5 + 16);
    do
    {
      **(_QWORD **)v18 = v10;
      if (!*(_DWORD *)(*(_QWORD *)v18 + 24))
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)v10 = 0;
      }
      v18 += 8;
      --v19;
    }
    while (v19);
  }
  if (!*(_DWORD *)(*(_QWORD *)a1 + 92)
    || v17 == 1
    && (v20 = *(_QWORD *)(a5 + 24), v21 = *(_DWORD *)(v20 + 24), v21 <= 1)
    && (v21 != 1 || !*(_BYTE *)(v20 + 33)))
  {
LABEL_17:
    if (v10)
      return (_DWORD *)v10;
    goto LABEL_2;
  }
  sub_1ACC7EA04((char *)a1, "fts5: %s queries are not supported (detail!=full)");
LABEL_58:
  sqlite3_free((void *)v10);
LABEL_2:
  sub_1ACC7CCA0((uint64_t)a3);
  sub_1ACC7CCA0((uint64_t)a4);
  sub_1ACC7CD88(a5);
  return 0;
}

uint64_t sub_1ACC7F364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  _OWORD *v12;

  if (*(_DWORD *)(a1 + 16))
    goto LABEL_2;
  if (!a3)
    return a2;
  if (!a2)
  {
    if (sqlite3_initialize())
      goto LABEL_19;
    v12 = (_OWORD *)sub_1ACB5D828(96);
    if (!v12)
      goto LABEL_19;
    v5 = (uint64_t)v12;
    v12[4] = 0u;
    v12[5] = 0u;
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
LABEL_8:
    v9 = *(_DWORD *)(v5 + 16);
    if (v9 >= 1)
    {
      v10 = *(_QWORD *)(v5 + 8 * (v9 - 1) + 24);
      if (!*(_DWORD *)(a3 + 24))
      {
        sub_1ACC7CEE4(a3);
        v9 = *(_DWORD *)(v5 + 16) - 1;
        --*(_DWORD *)(a1 + 20);
        goto LABEL_21;
      }
      if (!*(_DWORD *)(v10 + 24))
      {
        sub_1ACC7CEE4(v10);
        v11 = *(_DWORD *)(a1 + 20);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v11 - 2)) = a3;
        *(_DWORD *)(a1 + 20) = v11 - 1;
        v9 = *(_DWORD *)(v5 + 16) - 1;
      }
    }
    v10 = a3;
LABEL_21:
    *(_DWORD *)(v5 + 16) = v9 + 1;
    *(_QWORD *)(v5 + 8 * v9 + 24) = v10;
    return v5;
  }
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 7) != 0)
  {
    v5 = a2;
    goto LABEL_8;
  }
  if (!sqlite3_initialize())
  {
    v5 = sub_1ACB6BB48(a2, 8 * (v8 + 8) + 32);
    if (v5)
      goto LABEL_8;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) = 7;
LABEL_2:
  sub_1ACC7CD88(a2);
  sub_1ACC7CEE4(a3);
  return 0;
}

uint64_t sub_1ACC7F4B0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  const char *v8;
  unsigned int v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  size_t v22;
  void (**v23)(unsigned __int8 *);
  int v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;

  v7 = *a1;
  v30 = (_OWORD *)a2;
  v31 = 0;
  v8 = *(const char **)a3;
  v9 = *(_DWORD *)(a3 + 8);
  if ((v9 & 0x80000000) != 0)
    v9 = strlen(*(const char **)a3);
  v10 = sqlite3_initialize();
  v11 = 7;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_33;
  if (v10)
    goto LABEL_33;
  v12 = (char *)sub_1ACB5D828(v9 + 1);
  if (!v12)
    goto LABEL_33;
  v13 = v12;
  memcpy(v12, v8, v9);
  v13[v9] = 0;
  if (a4)
    v14 = 3;
  else
    v14 = 1;
  v15 = *v13;
  if ((v15 - 34) <= 0x3E && ((1 << (v15 - 34)) & 0x4200000000000021) != 0)
  {
    if (v15 == 91)
      v17 = 93;
    else
      v17 = *v13;
    v18 = v13[1];
    if (v13[1])
    {
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v21 = v20 + 1;
        if (v18 == v17)
        {
          if (v13[v21] != v17)
            goto LABEL_24;
          LODWORD(v21) = v20 + 2;
          LOBYTE(v18) = v17;
        }
        v13[v19++] = v18;
        v18 = v13[(int)v21];
        v20 = v21;
        if (!v13[(int)v21])
          goto LABEL_24;
      }
    }
    LODWORD(v19) = 0;
LABEL_24:
    v13[v19] = 0;
  }
  v22 = strlen(v13);
  v11 = (*(uint64_t (**)(_QWORD, _OWORD **, uint64_t, char *, size_t, uint64_t (*)(uint64_t, char, char *, int)))(*(_QWORD *)(v7 + 112) + 16))(*(_QWORD *)(v7 + 104), &v30, v14, v13, v22, sub_1ACC82E78);
  v23 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_30;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v13);
  v13 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v23 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_30:
    (*v23)((unsigned __int8 *)v13);
  }
  if (v11 || (v11 = v31) != 0)
  {
LABEL_33:
    *((_DWORD *)a1 + 4) = v11;
LABEL_34:
    sub_1ACC7CEE4((uint64_t)v30);
    return 0;
  }
  if (!a2)
  {
    v25 = *((_DWORD *)a1 + 5);
    if ((v25 & 7) == 0)
    {
      v28 = a1[3];
      if (sqlite3_initialize() || (v29 = sub_1ACB6BB48(v28, 8 * (v25 + 8))) == 0)
      {
        *((_DWORD *)a1 + 4) = 7;
        goto LABEL_34;
      }
      a1[3] = v29;
      v25 = *((_DWORD *)a1 + 5);
    }
    *((_DWORD *)a1 + 5) = v25 + 1;
  }
  v26 = v30;
  if (v30)
  {
    v27 = *((int *)v30 + 6);
    if ((_DWORD)v27)
      LOBYTE(v30[2 * v27]) = a4;
  }
  else if (*((_DWORD *)a1 + 4))
  {
    v26 = 0;
    v30 = 0;
  }
  else if (sqlite3_initialize() || (v26 = (_OWORD *)sub_1ACB5D828(64)) == 0)
  {
    v26 = 0;
    *((_DWORD *)a1 + 4) = 7;
    v30 = 0;
  }
  else
  {
    v26[2] = 0u;
    v26[3] = 0u;
    *v26 = 0u;
    v26[1] = 0u;
    v30 = v26;
  }
  *(_QWORD *)(a1[3] + 8 * *((int *)a1 + 5) - 8) = v26;
  return (uint64_t)v30;
}

uint64_t sub_1ACC7F77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  const char *v17;
  unsigned int v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  v6 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24);
  v7 = 8 * (int)v6 + 56;
  if (sqlite3_initialize() || (v8 = (void *)sub_1ACB5D828(v7)) == 0)
  {
    if ((int)v7 >= 1)
    {
      v2 = 0;
      *(_DWORD *)(a1 + 16) = 7;
      return v2;
    }
    return 0;
  }
  v2 = (uint64_t)v8;
  bzero(v8, v7);
  *(_DWORD *)v2 = 2;
  *(_DWORD *)(v2 + 40) = v6;
  *(_DWORD *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 16) = sub_1ACC80030;
  --*(_DWORD *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    v9 = 0;
    v10 = (_QWORD *)(v2 + 48);
    v11 = 32 * v6;
    do
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        if (sqlite3_initialize() || (v12 = (_OWORD *)sub_1ACB5D828(64)) == 0)
        {
          *(_DWORD *)(a1 + 16) = 7;
        }
        else
        {
          v13 = (uint64_t)v12;
          v12[2] = 0u;
          v12[3] = 0u;
          *v12 = 0u;
          v12[1] = 0u;
          v14 = *(_DWORD *)(a1 + 20);
          v15 = *(_QWORD *)(a1 + 24);
          if ((v14 & 7) != 0)
            goto LABEL_16;
          if (!sqlite3_initialize())
          {
            v22 = sub_1ACB6BB48(v15, 8 * (v14 + 8));
            if (v22)
            {
              v15 = v22;
              *(_QWORD *)(a1 + 24) = v22;
              v14 = *(_DWORD *)(a1 + 20);
LABEL_16:
              *(_DWORD *)(a1 + 20) = v14 + 1;
              *(_QWORD *)(v15 + 8 * v14) = v13;
              *(_DWORD *)(v13 + 24) = 1;
              if (*(_DWORD *)(a1 + 16))
              {
                v16 = 0;
              }
              else
              {
                v17 = *(const char **)(*(_QWORD *)(a2 + 24) + v9 + 40);
                v18 = strlen(v17);
                v19 = sqlite3_initialize();
                if ((v18 & 0x80000000) != 0 || v19 || (v20 = (_BYTE *)sub_1ACB5D828(v18 + 1)) == 0)
                {
                  v16 = 0;
                  *(_DWORD *)(a1 + 16) = 7;
                }
                else
                {
                  v16 = v20;
                  memcpy(v20, v17, v18);
                  v16[v18] = 0;
                }
              }
              *(_QWORD *)(v13 + 40) = v16;
              v21 = sub_1ACC7F364(a1, 0, v13);
              *v10 = sub_1ACC7F070(a1, 9, 0, 0, v21);
              goto LABEL_11;
            }
          }
          *(_DWORD *)(a1 + 16) = 7;
          sub_1ACC7CEE4(v13);
        }
      }
LABEL_11:
      v9 += 32;
      ++v10;
    }
    while (v11 != v9);
  }
  if (*(_DWORD *)(a1 + 16))
  {
    sub_1ACC7CCA0(v2);
    return 0;
  }
  else
  {
    sub_1ACC7CD88(a2);
  }
  return v2;
}

_DWORD *sub_1ACC7F9C4(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t (**v5)(_QWORD);
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = a2;
  v3 = result;
  v4 = (int)result[10];
  if (*result == 3 || *a2 != *result)
  {
    result[10] = v4 + 1;
    *(_QWORD *)&result[2 * v4 + 12] = a2;
  }
  else
  {
    memcpy(&result[2 * v4 + 12], a2 + 12, 8 * a2[10]);
    v3[10] += v2[10];
    v5 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_8:
      result = (_DWORD *)(*v5)(v2);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    result = (_DWORD *)off_1ECD3B168(v2);
    v2 = (_DWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v5 = &xmmword_1ECD3B1D0;
      goto LABEL_8;
    }
  }
LABEL_10:
  v6 = (int)v3[10];
  if ((int)v4 < (int)v6)
  {
    v7 = v3[3];
    v8 = (uint64_t *)&v3[2 * v4 + 12];
    v9 = v6 - v4;
    do
    {
      v10 = *v8++;
      v11 = *(_DWORD *)(v10 + 12);
      if (v7 <= v11 + 1)
        v7 = v11 + 1;
      v3[3] = v7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1ACC7FB0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24);
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_QWORD *)(v7 + 24);
  if (a3)
  {
    do
    {
      sub_1ACC800BC(v8, v7, 1, a4);
      if (*(_DWORD *)(v8 + 60))
        break;
      if (*(_BYTE *)(v7 + 20))
        break;
      v10 = *(_QWORD *)(v7 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v7 + 88) + 4) + 216);
      v11 = *(_DWORD *)(v7 + 68);
      if (!v11 && v10 >= a4)
        break;
    }
    while (!v11 || v10 > a4);
  }
  else
  {
    sub_1ACC800BC(*(_QWORD *)(v7 + 24), *(_QWORD *)(v6 + 48), 0, 0);
  }
  v12 = *(_QWORD *)(v7 + 24);
  result = *(unsigned int *)(v12 + 60);
  *(_DWORD *)(v12 + 60) = 0;
  if ((_DWORD)result || *(_BYTE *)(v7 + 20))
  {
    v14 = 0;
    *(_DWORD *)(a2 + 4) = 1;
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24);
    v16 = *(_QWORD *)(v15 + 48);
    v17 = *(_DWORD *)(v16 + 16);
    *(_DWORD *)(v15 + 16) = v17;
    if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 92))
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)v16;
    v14 = v17 == 0;
  }
  *(_DWORD *)(a2 + 8) = v14;
  return result;
}

uint64_t sub_1ACC7FC20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;

  v6 = a2;
  v7 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_QWORD *)(v8 + 56))
  {
    v9 = 0;
    v10 = 0;
    v11 = v8 + 32;
    v12 = v8 + 32;
    do
    {
      v13 = *(uint64_t **)(v12 + 16);
      if (!*((_BYTE *)v13 + 20))
      {
        v14 = *v13;
        if (v9 && *(_DWORD *)(a1 + 24) == v14 < v10)
        {
          v9 = 1;
        }
        else
        {
          v9 = 1;
          v10 = v14;
        }
      }
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    v16 = 1;
    while (1)
    {
      v17 = v16;
      v18 = *(_QWORD *)(v11 + 16);
      if (!*(_BYTE *)(v18 + 20))
      {
        v19 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 == v10)
        {
          if (a3)
          {
LABEL_18:
            v20 = v18 + 24;
            v21 = *(_QWORD *)(v18 + 24);
            do
            {
              sub_1ACC800BC(v21, v18, 1, a4);
              if (*(_DWORD *)(v21 + 60))
                break;
              if (*(_BYTE *)(v18 + 20))
                break;
              v22 = *(_QWORD *)(v18 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v18 + 88) + 4) + 216);
              v23 = *(_DWORD *)(v18 + 68);
              if (!v23 && v22 >= a4)
                break;
            }
            while (!v23 || v22 > a4);
          }
          else
          {
            v20 = v18 + 24;
            sub_1ACC800BC(*(_QWORD *)(v18 + 24), *(_QWORD *)(v11 + 16), 0, 0);
          }
          result = *(unsigned int *)(*(_QWORD *)v20 + 60);
          *(_DWORD *)(*(_QWORD *)v20 + 60) = 0;
          if ((_DWORD)result)
            goto LABEL_31;
          if (*(_BYTE *)(*(_QWORD *)(v11 + 16) + 20))
            v16 = v17;
          else
            v16 = 0;
          goto LABEL_10;
        }
        v16 = 0;
        if (a3 && v19 != a4)
        {
          if (*(_DWORD *)(a1 + 24) == v19 > a4)
            goto LABEL_18;
          v16 = 0;
        }
      }
LABEL_10:
      v11 = *(_QWORD *)(v11 + 24);
      if (!v11)
      {
        result = 0;
        v17 = v16;
LABEL_31:
        v7 = a1;
        v6 = a2;
        *(_DWORD *)(a2 + 4) = (result | v17) != 0;
        if (!(result | v17))
          return sub_1ACC815D4(v7, v6);
        return result;
      }
    }
  }
  v25 = *(_QWORD *)(v8 + 48);
  v26 = *(_QWORD *)(v25 + 24);
  if (a3)
  {
    do
    {
      sub_1ACC800BC(v26, v25, 1, a4);
      if (*(_DWORD *)(v26 + 60))
        break;
      if (*(_BYTE *)(v25 + 20))
        break;
      v27 = *(_QWORD *)(v25 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v25 + 88) + 4) + 216);
      v28 = *(_DWORD *)(v25 + 68);
      if (!v28 && v27 >= a4)
        break;
    }
    while (!v28 || v27 > a4);
  }
  else
  {
    sub_1ACC800BC(*(_QWORD *)(v25 + 24), *(_QWORD *)(v8 + 48), 0, 0);
  }
  v29 = *(_QWORD *)(v25 + 24);
  result = *(unsigned int *)(v29 + 60);
  *(_DWORD *)(v29 + 60) = 0;
  if ((_DWORD)result)
  {
    *(_DWORD *)(v6 + 4) = 1;
  }
  else
  {
    v30 = *(_BYTE *)(v25 + 20) != 0;
    *(_DWORD *)(v6 + 4) = v30;
    if (!v30)
      return sub_1ACC815D4(v7, v6);
  }
  return result;
}

uint64_t sub_1ACC7FED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v5 = *(_DWORD *)(a2 + 40);
  if (v5 <= 0)
  {
    v14 = *(_QWORD *)(a2 + 48);
    goto LABEL_29;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a2 + 24);
  do
  {
    v11 = *(_QWORD *)(a2 + 48 + 8 * v9);
    if (*(_DWORD *)(v11 + 4))
      goto LABEL_3;
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 != v10)
    {
      if (!a3)
        goto LABEL_3;
      if (*(_DWORD *)(a1 + 24))
      {
        if (v12 <= a4)
          goto LABEL_3;
      }
      else if (v12 >= a4)
      {
        goto LABEL_3;
      }
    }
    result = (*(uint64_t (**)(uint64_t))(v11 + 16))(a1);
    if ((_DWORD)result)
    {
      v20 = 0;
      goto LABEL_30;
    }
    v5 = *(_DWORD *)(a2 + 40);
LABEL_3:
    ++v9;
  }
  while (v9 < v5);
  v14 = *(_QWORD *)(a2 + 48);
  if (v5 >= 2)
  {
    v15 = v5 - 1;
    v16 = (uint64_t *)(a2 + 56);
    while (2)
    {
      v17 = *v16;
      if (*(_DWORD *)(*v16 + 4))
        goto LABEL_17;
      if (!*(_DWORD *)(v14 + 4))
      {
        v18 = *(_QWORD *)(v14 + 24);
        v19 = *(_QWORD *)(v17 + 24);
        if (*(_DWORD *)(a1 + 24))
        {
          if (v18 > v19)
            goto LABEL_17;
          if (v18 >= v19)
          {
LABEL_26:
            if (*(_DWORD *)(v17 + 8))
              goto LABEL_17;
          }
        }
        else
        {
          if (v18 < v19)
            goto LABEL_17;
          if (v18 <= v19)
            goto LABEL_26;
        }
      }
      v14 = *v16;
LABEL_17:
      ++v16;
      if (!--v15)
        break;
      continue;
    }
  }
LABEL_29:
  result = 0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v14 + 24);
  v21 = *(_DWORD *)(v14 + 4);
  v20 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)(a2 + 4) = v21;
LABEL_30:
  *(_DWORD *)(a2 + 8) = v20;
  return result;
}

uint64_t sub_1ACC80030(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 48) + 16))();
  if (!(_DWORD)result)
    return sub_1ACC82B1C(a1, a2);
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1ACC80078(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 48) + 16))();
  if ((_DWORD)result || (result = sub_1ACC82D60(a1, a2), (_DWORD)result))
    *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1ACC800BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  BOOL i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t (**v14)(uint64_t, uint64_t, _QWORD);
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(uint64_t);
  unsigned __int16 ***v45;
  unsigned __int16 **v46;
  unsigned int v47;
  _QWORD *v48;
  int v49;
  int v51;

  if (!*(_DWORD *)(result + 60))
  {
    v5 = result;
    v6 = a2 + 96;
    for (i = a3 == 0; ; i = 1)
    {
      v8 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 88) + 4);
      v51 = 0;
      v9 = a2 + 136 * v8;
      v10 = v9 + 96;
      if (!i)
      {
        v11 = *(_QWORD *)(a2 + 136 * v8 + 192);
        if (v11)
          break;
      }
      v16 = a2 + 136 * v8;
      result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 152))(v5, v9 + 96, &v51);
      v17 = *(_QWORD *)(v16 + 112);
LABEL_16:
      if (v17)
        v18 = v51 == 0;
      else
        v18 = 0;
      if (!v18)
      {
LABEL_61:
        v24 = *(_DWORD *)(a2 + 64) + v8;
LABEL_62:
        if (v24 >= 2)
        {
          do
          {
            if (*(_DWORD *)(v5 + 60))
              break;
            v24 = v24 >> 1;
            result = sub_1ACC8145C(a2, v24);
            if ((_DWORD)result)
            {
              v39 = result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 136 * (int)result + 152))(v5, a2 + 136 * (int)result + 96, 0);
              v24 = *(_DWORD *)(a2 + 64) + v39;
            }
          }
          while (v24 > 1);
        }
        v37 = a2 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 88) + 4);
        v38 = *(_QWORD *)(v37 + 112);
        *(_BYTE *)(a2 + 20) = v38 == 0;
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v37 + 216);
        if (!v38)
          return result;
        v10 = v37 + 96;
        goto LABEL_65;
      }
      v19 = *(_QWORD *)(a2 + 136 * v8 + 216);
      v20 = *(_QWORD *)(a2 + 80);
      if (v19 == v20)
      {
        v21 = *(_DWORD *)(a2 + 68);
LABEL_24:
        v22 = v8 ^ 1;
        if (v21)
          v23 = 0x8000000000000000;
        else
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)(a2 + 80) = v23;
        v24 = *(_DWORD *)(a2 + 64) + v8;
        v25 = *(_QWORD *)(a2 + 88);
        v26 = v24;
        while (2)
        {
          if (v26 >= 0)
            v27 = v26;
          else
            v27 = v26 + 1;
          v28 = v25 + 4 * (v27 >> 1);
          if (*(_BYTE *)(v28 + 2))
          {
            v29 = *(_QWORD *)(v10 + 120);
            v30 = *(_QWORD *)(a2 + 136 * v22 + 216);
            if (v29 == v30)
              goto LABEL_62;
            if (v21 == v30 > v29)
            {
              v10 = a2 + 136 * v22 + 96;
              goto LABEL_36;
            }
            if (v21 == v30 > v23)
            {
LABEL_36:
              *(_QWORD *)(a2 + 80) = v30;
              v23 = v30;
            }
          }
          *(_WORD *)v28 = -3855 * ((v10 - v6) >> 3);
          if ((v26 & 0xFFFFFFFE) == 2)
            goto LABEL_65;
          v22 = *(unsigned __int16 *)(v25 + 4 * (((uint64_t)v27 >> 1) ^ 1));
          v26 = v27 >> 1;
          continue;
        }
      }
      v21 = v19 < v20;
      if (*(_DWORD *)(a2 + 68) == v21)
        goto LABEL_24;
LABEL_65:
      if (!*(_BYTE *)(a2 + 72) || *(_DWORD *)(v10 + 128))
      {
        result = sub_1ACC805D4(a2);
        if (!(_DWORD)result)
          return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a2, v10);
      }
      if (*(_DWORD *)(v5 + 60))
        return result;
    }
    v12 = a2 + 136 * v8;
    v13 = (int *)(v12 + 108);
    v49 = *(_DWORD *)(v12 + 104);
    if ((v49 & 2) != 0)
    {
      while (!*(_DWORD *)(v11 + 20) && *(_QWORD *)(v11 + 32) > a4)
      {
        result = sub_1ACC81070(v5, (_DWORD *)v11, 0);
        v15 = *(_DWORD *)(v5 + 60);
        if (v15)
          goto LABEL_40;
      }
      v15 = 0;
LABEL_40:
      v31 = *(_DWORD *)(v11 + 28);
      if (v31 < *v13)
      {
        *v13 = v31 + 1;
        result = (uint64_t)sub_1ACC807B4((unsigned __int16 **)v5, (unsigned int **)v10);
LABEL_42:
        v14 = (uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 136 * v8 + 152);
        goto LABEL_54;
      }
    }
    else
    {
      if (*(_DWORD *)(v11 + 20))
      {
        v14 = (uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 136 * v8 + 152);
LABEL_53:
        result = (*v14)(v5, v10, 0);
        goto LABEL_54;
      }
      if (*(_QWORD *)(v11 + 32) >= a4)
      {
        v15 = 0;
        v32 = *v13;
      }
      else
      {
        while (1)
        {
          v32 = *(_DWORD *)(v11 + 28);
          result = sub_1ACC80A08(v5, (_DWORD *)v11, 0);
          v15 = *(_DWORD *)(v5 + 60);
          if (v15)
            break;
          if (*(_DWORD *)(v11 + 20) || *(_QWORD *)(v11 + 32) >= a4)
          {
            v15 = 0;
            break;
          }
        }
      }
      if (v32 > *v13)
      {
        if (*(_DWORD *)(*(_QWORD *)v10 + 8) < v32)
        {
LABEL_51:
          *(_DWORD *)(v5 + 60) = 267;
          goto LABEL_42;
        }
        v40 = a2 + 136 * v8;
        v43 = *(_QWORD *)(v40 + 120);
        v41 = (_QWORD *)(v40 + 120);
        v42 = v43;
        if (v43)
        {
          v48 = v41;
          v44 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
          {
LABEL_78:
            result = (*v44)(v42);
            v41 = v48;
            goto LABEL_79;
          }
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
          --qword_1ECD3E8D0;
          result = off_1ECD3B168(v42);
          v42 = xmmword_1ECD3E930;
          v41 = v48;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v44 = &xmmword_1ECD3B1D0;
            goto LABEL_78;
          }
        }
LABEL_79:
        *v41 = 0;
        *v13 = v32 - 1;
        v45 = (unsigned __int16 ***)(a2 + 136 * v8 + 112);
        while (!*(_DWORD *)(v5 + 60))
        {
          result = sub_1ACC80CD4(v5, (unsigned int **)v10);
          v46 = *v45;
          if (!*v45)
            break;
          v47 = __rev16(**v46);
          if (v47)
          {
            if (v47 >= 4 && *((_DWORD *)v46 + 3) > (signed int)v47)
            {
              *(_QWORD *)(a2 + 136 * v8 + 128) = sub_1ACC7BBC8((char *)*v46 + v47, (unint64_t *)(a2 + 136 * v8 + 216))+ v47;
              result = sub_1ACC80F28(v5, v10);
              goto LABEL_42;
            }
            goto LABEL_51;
          }
        }
        goto LABEL_42;
      }
    }
    v14 = (uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 136 * v8 + 152);
    if (!v15)
      goto LABEL_53;
LABEL_54:
    v33 = a2 + 136 * v8;
    v35 = *(_QWORD *)(v33 + 112);
    v34 = (uint64_t *)(v33 + 112);
    v17 = v35;
    if (!v35)
      goto LABEL_61;
    while (1)
    {
      v36 = v34[13];
      if ((v49 & 2) != 0)
      {
        if (v36 <= a4)
          goto LABEL_16;
      }
      else if (v36 >= a4)
      {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v5 + 60))
        goto LABEL_16;
      result = (*v14)(v5, v10, 0);
      v17 = *v34;
      if (!*v34)
        goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_1ACC805D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v1 = a1 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4);
  if (!*(_QWORD *)(v1 + 112))
    return 0;
  v2 = a1 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4);
  v5 = *(int *)(v2 + 144);
  v4 = (int *)(v2 + 144);
  v3 = v5;
  if (!(_DWORD)v5)
    return 0;
  v6 = a1 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4);
  v8 = *(_QWORD *)(v6 + 136);
  v7 = (_QWORD *)(v6 + 136);
  v9 = v7[10];
  v10 = v9 % v3;
  v11 = *(unsigned __int8 ***)(v8 + ((uint64_t)((v9 % v3) << 32) >> 29));
  if (!v11)
  {
    v12 = (int)v10;
    *(_QWORD *)(*v7 + 8 * (int)v10) = sub_1ACC7B8EC(*(_QWORD *)(a1 + 24), (int)v10+ ((unint64_t)(**(_DWORD **)(v1 + 96) + 0x10000) << 37));
    v11 = *(unsigned __int8 ***)(*v7 + 8 * v12);
    if (!v11)
      return 0;
    v3 = *v4;
    v9 = v7[10];
  }
  v13 = (uint64_t)*v11;
  v14 = **v11;
  v15 = *((_DWORD *)v11 + 2);
  if (v14 == 4)
    v16 = 2;
  else
    v16 = 3;
  if (v15 <= 16)
    v17 = 1;
  else
    v17 = (v15 - 8) >> v16;
  if (!v9)
    return *(unsigned __int8 *)(v13 + 1);
  v18 = v9 / v3 % v17;
  v19 = v13 + 8;
  if (v14 == 4)
  {
    v20 = (int *)(v19 + 4 * v18);
    v21 = *v20;
    if (*v20)
    {
      v22 = v17 + 1;
      while (((v21 << 24) | ((unint64_t)*((unsigned __int8 *)v20 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v20 + 2) << 8) | *((unsigned __int8 *)v20 + 3)) != v9)
      {
        result = 0;
        if (--v22)
        {
          LODWORD(v18) = ((int)v18 + 1) % v17;
          v20 = (int *)(v19 + 4 * v18);
          v21 = *v20;
          if (*v20)
            continue;
        }
        return result;
      }
      return 1;
    }
  }
  else
  {
    v24 = (uint64_t *)(v19 + 8 * v18);
    v25 = *v24;
    if (*v24)
    {
      v26 = v17 + 1;
      while (((v25 << 56) | ((unint64_t)*((unsigned __int8 *)v24 + 1) << 48) | ((unint64_t)*((unsigned __int8 *)v24 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v24 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v24 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v24 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v24 + 6) << 8))
            + *((unsigned __int8 *)v24 + 7) != v9)
      {
        result = 0;
        if (--v26)
        {
          LODWORD(v18) = ((int)v18 + 1) % v17;
          v24 = (uint64_t *)(v19 + 8 * v18);
          v25 = *v24;
          if (*v24)
            continue;
        }
        return result;
      }
      return 1;
    }
  }
  return 0;
}

unsigned __int16 **sub_1ACC807B4(unsigned __int16 **result, unsigned int **a2)
{
  _DWORD *v3;
  unsigned int *v4;
  uint64_t (**v5)(unsigned int *);
  uint64_t (**v6)(unsigned int *);
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;

  v3 = result;
  v4 = a2[2];
  if (v4)
  {
    v5 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (unsigned __int16 **)(*v5)(v4);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
    --qword_1ECD3E8D0;
    result = (unsigned __int16 **)off_1ECD3B168(v4);
    v4 = (unsigned int *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v5 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  a2[2] = 0;
  if (v3[15])
    return result;
  do
  {
    v7 = *((int *)a2 + 3);
    if ((int)v7 <= *((_DWORD *)a2 + 16))
      break;
    v8 = v7 - 1;
    *((_DWORD *)a2 + 3) = v8;
    result = (unsigned __int16 **)sub_1ACC7B8EC((uint64_t)v3, v8 + ((unint64_t)**a2 << 37));
    if (result)
    {
      v9 = (unsigned int *)result;
      if (*((_DWORD *)a2 + 3) == *((_DWORD *)a2 + 16))
      {
        v10 = (unsigned int *)*((int *)a2 + 17);
        if ((int)v10 < *((_DWORD *)result + 3))
          goto LABEL_29;
      }
      else
      {
        v10 = (unsigned int *)__rev16(**result);
        if ((_DWORD)v10)
        {
          if (*((_DWORD *)result + 3) > (int)v10)
          {
LABEL_29:
            a2[2] = (unsigned int *)result;
            a2[4] = v10;
            goto LABEL_30;
          }
          v3[15] = 267;
        }
      }
      if (a2[2])
      {
        v10 = a2[4];
        v9 = a2[2];
LABEL_30:
        result = (unsigned __int16 **)sub_1ACC7BBC8((char *)v10 + *(_QWORD *)v9, (unint64_t *)a2 + 15);
        a2[4] = (unsigned int *)((char *)a2[4] + result);
        break;
      }
      v6 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
        --qword_1ECD3E8D0;
        result = (unsigned __int16 **)off_1ECD3B168(v9);
        v9 = (unsigned int *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          continue;
        v6 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
      }
      result = (unsigned __int16 **)(*v6)(v9);
    }
  }
  while (!v3[15]);
  v11 = a2[2];
  if (v11)
  {
    *((_DWORD *)a2 + 19) = v11[2] + 1;
    return (unsigned __int16 **)sub_1ACC81290(v3, (uint64_t)a2);
  }
  return result;
}

uint64_t sub_1ACC80A08(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t (**v10)(uint64_t);

  v6 = a3;
  v7 = (uint64_t)&a2[8 * a3 + 2];
  result = sub_1ACC80B58(v7);
  if ((_DWORD)result)
  {
    if (a3 + 1 < *a2)
    {
      result = sub_1ACC80A08(a1, a2);
      if (!*(_DWORD *)(v7 + 44))
      {
        v9 = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
        {
          v10 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v9);
            v9 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_12;
            v10 = &xmmword_1ECD3B1D0;
          }
          (*v10)(v9);
        }
LABEL_12:
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (uint64_t)sub_1ACC7B8EC(a1, (v6 << 31)+ ((unint64_t)a2[1] << 37)+ 0x1000000000+ *(int *)(v7 + 52));
        *(_QWORD *)v7 = result;
        if (result)
          return sub_1ACC80B58(v7);
      }
    }
  }
  return result;
}

uint64_t sub_1ACC80B58(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  unint64_t v21;

  v2 = *(int **)a1;
  v3 = *(int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = v2[2];
    if ((int)v3 >= v5)
    {
LABEL_6:
      *(_DWORD *)(a1 + 12) = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)v2;
      v8 = v3 << 32;
      v9 = v7 + v3;
      v10 = v3 - v5;
      while (!*(_BYTE *)(v9 + v6))
      {
        v8 += 0x100000000;
        if (!(v10 + (_DWORD)++v6))
          goto LABEL_6;
      }
      v21 = 0;
      *(_DWORD *)(a1 + 20) += v6 + 1;
      v15 = sub_1ACC7BBC8((char *)(v7 + (v8 >> 32)), &v21);
      *(_QWORD *)(a1 + 24) += v21;
      *(_DWORD *)(a1 + 8) = v15 + v4 + v6;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1;
    v11 = *(_QWORD *)v2;
    v12 = (char *)(*(_QWORD *)v2 + 1);
    v13 = *v12;
    if (*v12 < 0)
    {
      v16 = *(unsigned __int8 *)(v11 + 2);
      if (*(char *)(v11 + 2) < 0)
      {
        v17 = *(char *)(v11 + 3);
        if (v17 < 0)
        {
          v21 = 0;
          v18 = sub_1ACC7BBC8(v12, &v21);
          *(_DWORD *)(a1 + 20) = v21 & 0x7FFFFFFF;
          v14 = (v18 + 1);
        }
        else
        {
          *(_DWORD *)(a1 + 20) = v17 & 0x7F | (v13 << 14) & 0x1FC07F | ((v16 & 0x7F) << 7);
          v14 = 4;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 20) = ((v13 & 0x7F) << 7) | v16;
        v14 = 3;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 20) = v13;
      v14 = 2;
    }
    *(_DWORD *)(a1 + 8) = v14;
    v19 = *(_DWORD *)(a1 + 8) + sub_1ACC7BBC8((char *)(v11 + v14), (unint64_t *)(a1 + 24));
    *(_DWORD *)(a1 + 8) = v19;
    *(_DWORD *)(a1 + 16) = v19;
  }
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1ACC80CD4(uint64_t result, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t (**v6)(unsigned int *);
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  uint64_t (**v13)(uint64_t);
  int v14;
  int v15;
  unint64_t v16;

  v3 = result;
  v4 = *a2;
  v5 = a2[2];
  if (v5)
  {
    v6 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (*v6)(v5);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v5);
    v5 = (unsigned int *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v7 = *((int *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7 + 1;
  v8 = (uint64_t)a2[3];
  if (v8)
  {
    a2[2] = (unsigned int *)v8;
    a2[3] = 0;
    v9 = *(_DWORD *)(v8 + 8);
    v10 = *(_DWORD *)(v8 + 12);
    goto LABEL_10;
  }
  if ((int)v7 >= (int)v4[2])
    goto LABEL_23;
  result = (uint64_t)sub_1ACC7B8EC(v3, v7 + 1 + ((unint64_t)*v4 << 37));
  if (!result)
    goto LABEL_23;
  v8 = result;
  v9 = *(_DWORD *)(result + 8);
  if (v9 < 4 || (v10 = *(_DWORD *)(result + 12), v10 > v9))
  {
    *(_DWORD *)(v3 + 60) = 267;
    v13 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v8);
      v8 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_23;
      v13 = &xmmword_1ECD3B1D0;
    }
    result = (*v13)(v8);
LABEL_23:
    a2[2] = 0;
    return result;
  }
  a2[2] = (unsigned int *)result;
LABEL_10:
  *((_DWORD *)a2 + 18) = v10;
  if (v10 >= v9)
  {
    *((_DWORD *)a2 + 19) = v9 + 1;
  }
  else
  {
    v11 = (char *)(*(_QWORD *)v8 + v10);
    v12 = *v11;
    if (*v11 < 0)
    {
      v14 = v11[1];
      if (v11[1] < 0)
      {
        v15 = v11[2];
        if (v15 < 0)
        {
          v16 = 0;
          result = sub_1ACC7BBC8(v11, &v16);
          *((_DWORD *)a2 + 19) = v16 & 0x7FFFFFFF;
        }
        else
        {
          *((_DWORD *)a2 + 19) = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
          result = 3;
        }
      }
      else
      {
        *((_DWORD *)a2 + 19) = ((v12 & 0x7F) << 7) | v14;
        result = 2;
      }
    }
    else
    {
      *((_DWORD *)a2 + 19) = v12;
      result = 1;
    }
    *((_DWORD *)a2 + 18) = result + v10;
  }
  return result;
}

uint64_t sub_1ACC80F28(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;

  if (!*(_DWORD *)(result + 60))
  {
    v3 = *(_QWORD *)(a2 + 32);
    if (*(_DWORD *)(*(_QWORD *)result + 92) == 1)
    {
      v4 = *(_DWORD *)(a2 + 76);
      v5 = *(uint64_t **)(a2 + 16);
      if (v4 >= *((_DWORD *)v5 + 3))
        v4 = *((_DWORD *)v5 + 3);
      *(_BYTE *)(a2 + 132) = 0;
      *(_DWORD *)(a2 + 128) = 1;
      if (v4 <= (int)v3 || (v6 = *v5, *(_BYTE *)(*v5 + (int)v3)))
      {
        LODWORD(v7) = v3;
      }
      else
      {
        *(_BYTE *)(a2 + 132) = 1;
        v7 = (int)v3 + 1;
        if ((int)v7 >= v4 || *(_BYTE *)(v6 + v7))
        {
          *(_DWORD *)(a2 + 128) = 0;
        }
        else
        {
          *(_DWORD *)(a2 + 128) = 1;
          LODWORD(v7) = v3 + 2;
        }
      }
    }
    else
    {
      v8 = (char *)(**(_QWORD **)(a2 + 16) + (int)v3);
      v9 = *v8;
      if (*v8 < 0)
      {
        v10 = v8[1];
        if (v8[1] < 0)
        {
          v11 = v8[2];
          if (v11 < 0)
          {
            v12 = 0;
            result = sub_1ACC7BBC8(v8, &v12);
            v9 = v12 & 0x7FFFFFFF;
          }
          else
          {
            v9 = v11 & 0x7F | (v9 << 14) & 0x1FC07F | ((v10 & 0x7F) << 7);
            result = 3;
          }
        }
        else
        {
          v9 = ((v9 & 0x7F) << 7) | v10;
          result = 2;
        }
      }
      else
      {
        result = 1;
      }
      LODWORD(v7) = result + v3;
      *(_BYTE *)(a2 + 132) = v9 & 1;
      *(_DWORD *)(a2 + 128) = v9 >> 1;
    }
    *(_QWORD *)(a2 + 32) = (int)v7;
  }
  return result;
}

uint64_t sub_1ACC81070(uint64_t result, _DWORD *a2, int a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t (**v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v4 = a2;
  v5 = result;
  v6 = a3;
  v7 = &a2[8 * a3];
  v8 = v7 + 4;
  v9 = v7[4];
  v10 = (uint64_t *)(v7 + 2);
  if (v9 <= v7[6])
  {
    v7[5] = 1;
    goto LABEL_12;
  }
  v20 = result;
  v21 = a3;
  v11 = *(_QWORD *)*v10;
  *v8 = 0;
  sub_1ACC80B58((uint64_t)(v7 + 2));
  v12 = *v8;
  v13 = v7 + 7;
  v14 = v7 + 8;
  while (1)
  {
    v23 = 0;
    v15 = v12;
    if (*(_BYTE *)(v11 + v12))
    {
      LODWORD(v16) = 0;
    }
    else
    {
      v16 = 0;
      while (!*(unsigned __int8 *)(v11 + 1 + v12 + v16++))
        ;
      v12 += v16;
      v15 += v16;
    }
    result = sub_1ACC7BBC8((char *)(v11 + v15), &v23);
    v12 += result;
    if (v12 >= v9)
      break;
    *v13 += v16 + 1;
    *v14 += v23;
    *v8 = v12;
  }
  v6 = v21;
  v4 = a2;
  v5 = v20;
  if (a2[8 * v21 + 5])
  {
LABEL_12:
    if (a3 + 1 >= *v4)
      return result;
    result = sub_1ACC81070(v5, v4);
    if (v8[9])
      return result;
    v18 = (_QWORD *)*v10;
    if (!*v10)
      goto LABEL_21;
    v19 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v18);
      v18 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_21;
      v19 = &xmmword_1ECD3B1D0;
    }
    (*v19)(v18);
LABEL_21:
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v8 + 2) = 0u;
    result = (uint64_t)sub_1ACC7B8EC(v5, (v6 << 31) + ((unint64_t)v4[1] << 37) + 0x1000000000 + (int)v8[11]);
    *v10 = result;
    if (result)
    {
      do
        result = sub_1ACC80B58((uint64_t)(v8 - 2));
      while (!(_DWORD)result);
      v4[8 * v6 + 5] = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC81290(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22;
  unint64_t v23;

  v3 = 0;
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 92);
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *v5;
  if (*((_DWORD *)v5 + 3) >= *(_DWORD *)(a2 + 76))
    v8 = *(_DWORD *)(a2 + 76);
  else
    v8 = *((_DWORD *)v5 + 3);
  for (i = *(_QWORD *)(a2 + 32); ; *(_QWORD *)(a2 + 32) = (int)i)
  {
    v22 = 0;
    if (v4 == 1)
    {
      if ((int)i < v8 && !*(_BYTE *)(v7 + (int)i))
      {
        v10 = (int)i + 1;
        if ((int)v10 >= v8)
        {
          LODWORD(i) = i + 1;
        }
        else if (*(_BYTE *)(v7 + v10))
        {
          LODWORD(i) = i + 1;
        }
        else
        {
          LODWORD(i) = i + 2;
        }
      }
    }
    else
    {
      v11 = (char *)(v7 + (int)i);
      v12 = *v11;
      if (*v11 < 0)
      {
        v14 = v11[1];
        if (v11[1] < 0)
        {
          v15 = v11[2];
          if (v15 < 0)
          {
            v23 = 0;
            v13 = sub_1ACC7BBC8(v11, &v23);
            v12 = v23 & 0x7FFFFFFF;
          }
          else
          {
            v12 = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
            v13 = 3;
          }
        }
        else
        {
          v12 = ((v12 & 0x7F) << 7) | v14;
          v13 = 2;
        }
      }
      else
      {
        v13 = 1;
      }
      LODWORD(i) = v13 + i + (v12 >> 1);
    }
    if ((int)i >= v8)
      break;
    v16 = sub_1ACC7BBC8((char *)(v7 + (int)i), &v22);
    *(_QWORD *)(a2 + 120) += v22;
    v17 = *(int *)(a2 + 84);
    v18 = *(_QWORD *)(a2 + 88);
    if (v3 >= v17)
    {
      if (sqlite3_initialize() || (v19 = sub_1ACB6BB48(v18, 4 * (v17 + 8))) == 0)
      {
        a1[15] = 7;
        break;
      }
      v18 = v19;
      *(_QWORD *)(a2 + 88) = v19;
      *(_DWORD *)(a2 + 84) = v17 + 8;
      v6 = *(_QWORD *)(a2 + 32);
    }
    *(_DWORD *)(v18 + 4 * v3) = v6;
    LODWORD(i) = i + v16;
    ++v3;
    LODWORD(v6) = i;
  }
  *(_DWORD *)(a2 + 80) = v3;
  return sub_1ACC80F28((uint64_t)a1, a2);
}

uint64_t sub_1ACC8145C(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 64) / 2;
  v6 = __OFSUB__(a2, v5);
  v7 = a2 - v5;
  if (v7 < 0 != v6)
  {
    v8 = *(unsigned __int16 *)(v4 + 8 * a2);
    v9 = *(unsigned __int16 *)(v4 + 4 * ((2 * a2) | 1));
  }
  else
  {
    v8 = 2 * v7;
    v9 = (2 * v7) | 1u;
  }
  v10 = v4 + 4 * a2;
  *(_BYTE *)(v10 + 2) = 0;
  v11 = (_BYTE *)(v10 + 2);
  if (!*(_QWORD *)(a1 + 136 * v8 + 112))
    goto LABEL_20;
  if (!*(_QWORD *)(a1 + 136 * (int)v9 + 112))
  {
    LOWORD(v9) = v8;
LABEL_20:
    *(_WORD *)(v4 + 4 * a2) = v9;
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 96 + 136 * v8 + 112);
  v13 = *(_DWORD *)(a1 + 96 + 136 * (int)v9 + 112);
  if ((int)v12 >= (int)v13)
    v14 = v13;
  else
    v14 = v12;
  if ((int)v14 >= 1)
  {
    v15 = memcmp(*(const void **)(a1 + 96 + 136 * v8 + 104), *(const void **)(a1 + 96 + 136 * (int)v9 + 104), v14);
    if (v15)
      goto LABEL_18;
  }
  v15 = v12 - v13;
  if (v12 != v13)
    goto LABEL_18;
  *v11 = 1;
  v16 = *(_QWORD *)(a1 + 96 + 136 * v8 + 120);
  v17 = *(_QWORD *)(a1 + 96 + 136 * (int)v9 + 120);
  if (v16 != v17)
  {
    if (*(_DWORD *)(a1 + 68) == v16 > v17)
      v15 = -1;
    else
      v15 = 1;
LABEL_18:
    if (v15 < 0)
      LOWORD(v9) = v8;
    goto LABEL_20;
  }
  *(_BYTE *)(a1 + 96 + 136 * v8 + 132) = *(_BYTE *)(a1 + 96 + 136 * (int)v9 + 132);
  return v9;
}

uint64_t sub_1ACC815D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t (**v86)(uint64_t);
  uint64_t (**v87)(char *);
  void (**v88)(uint64_t);
  uint64_t v89;
  size_t v90;
  const void *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  int v137;
  uint64_t (**v138)(_QWORD);
  uint64_t *v139;
  int v140;
  int *v142;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  _QWORD v147[2];
  uint64_t v148;
  int v149;
  uint64_t v150;
  _OWORD v151[12];
  uint64_t v152;

  v2 = a2;
  v152 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_DWORD *)(a1 + 24);
  if (*(_QWORD *)(v4 + 56))
  {
    v6 = 0;
    v7 = 0;
    v8 = v4 + 32;
    do
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (!*(_BYTE *)(v9 + 20))
      {
        v10 = *(_QWORD *)v9;
        if (v6 && v5 == v10 < v7)
        {
          v6 = 1;
        }
        else
        {
          v6 = 1;
          v7 = v10;
        }
      }
      v8 = *(_QWORD *)(v8 + 24);
    }
    while (v8);
  }
  else
  {
    v7 = **(_QWORD **)(v4 + 48);
  }
  v11 = *(_DWORD *)(v3 + 16);
  v144 = *(_QWORD *)(a2 + 32);
LABEL_11:
  if (v11 < 1)
    goto LABEL_80;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    v14 = *(_QWORD *)(v3 + 8 * v12 + 24);
    if (*(int *)(v14 + 24) >= 1)
      break;
LABEL_14:
    if (++v12 >= v11)
    {
      v2 = a2;
      if (v13)
      {
LABEL_80:
        *(_QWORD *)(v2 + 24) = v7;
        v45 = *(int **)(v2 + 32);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 92))
        {
          v46 = 0;
          v47 = *((_QWORD *)v45 + 3);
          *(_DWORD *)(v47 + 16) = 0;
          v48 = v47 + 32;
          do
          {
            v50 = *(_QWORD *)(v48 + 16);
            if (!*(_BYTE *)(v50 + 20) && *(_QWORD *)v50 == v7 && *(int *)(v50 + 16) >= 1)
            {
              v46 = 1;
              *(_DWORD *)(v47 + 16) = 1;
            }
            v48 = *(_QWORD *)(v48 + 24);
          }
          while (v48);
          v16 = 0;
LABEL_266:
          *(_DWORD *)(v2 + 8) = (v46 | v16) == 0;
          return v16;
        }
        v51 = 0;
        v142 = *(int **)(v2 + 32);
        while (2)
        {
          if (v51 >= v45[4])
          {
            v16 = 0;
            goto LABEL_193;
          }
          v52 = *(_QWORD *)&v45[2 * v51 + 6];
          v53 = *(unsigned int *)(v52 + 24);
          v145 = v51;
          if ((int)v53 <= 1)
          {
            if (*(_QWORD *)(v52 + 56) || *((_QWORD *)v45 + 1) || *(_BYTE *)(v52 + 33))
            {
              v150 = 0;
              v140 = *(unsigned __int8 *)(v52 + 33);
              v55 = (char *)v151;
              *(_DWORD *)(v52 + 16) = 0;
              goto LABEL_103;
            }
            v89 = *(_QWORD *)(v52 + 48);
            v90 = *(unsigned int *)(v89 + 16);
            v91 = *(const void **)(v89 + 8);
            *(_DWORD *)(v52 + 16) = 0;
            if ((_DWORD)v90)
            {
              LODWORD(v92) = *(_DWORD *)(v52 + 20);
              v93 = v51;
              if (v92 >= v90)
              {
                v97 = 0;
                v96 = *(_QWORD *)(v52 + 8);
              }
              else
              {
                if (!(_DWORD)v92)
                  LODWORD(v92) = 64;
                v92 = (int)v92;
                do
                {
                  v94 = v92;
                  v92 *= 2;
                }
                while (v94 < v90);
                v95 = *(_QWORD *)(v52 + 8);
                if (sqlite3_initialize() || (v96 = sub_1ACB6BB48(v95, v94)) == 0)
                {
                  LODWORD(v51) = v93 + 1;
                  v16 = 7;
                  v45 = v142;
                  goto LABEL_193;
                }
                *(_DWORD *)(v52 + 20) = v94;
                *(_QWORD *)(v52 + 8) = v96;
                v97 = *(int *)(v52 + 16);
                v45 = v142;
              }
              memcpy((void *)(v96 + v97), v91, v90);
              v16 = 0;
              *(_DWORD *)(v52 + 16) += v90;
              v51 = v93;
            }
            else
            {
              v16 = 0;
            }
          }
          else
          {
            v150 = 0;
            v140 = *(unsigned __int8 *)(v52 + 33);
            *(_DWORD *)(v52 + 16) = 0;
            if (v53 >= 5)
            {
              if (!sqlite3_initialize())
              {
                v54 = sub_1ACB5D828(32 * v53);
                if (v54)
                {
                  v55 = (char *)v54;
                  LODWORD(v53) = *(_DWORD *)(v52 + 24);
                  goto LABEL_103;
                }
              }
              v16 = 7;
              LODWORD(v51) = v145;
LABEL_193:
              if (v45[4] != (_DWORD)v51)
                goto LABEL_265;
              if ((_DWORD)v51 == 1)
                goto LABEL_195;
              if ((int)v51 < 5)
              {
                memset(v151, 0, sizeof(v151));
                if ((_DWORD)v16)
                  goto LABEL_265;
                v146 = v151;
                if ((int)v51 < 1)
                {
                  while (1)
                  {
LABEL_211:
                    v106 = v146;
                    v107 = *((_QWORD *)v146 + 2);
                    v108 = v142[4];
                    do
                    {
                      if (v108 < 1)
                      {
                        v115 = v2;
LABEL_232:
                        v117 = 0;
                        v118 = (uint64_t *)v146 + 3;
                        goto LABEL_233;
                      }
                      v109 = 0;
                      v110 = 1;
                      do
                      {
                        v111 = &v106[3 * v109];
                        v112 = v107 - *v142 - *(int *)(*(_QWORD *)&v142[2 * v109 + 6] + 24);
                        v113 = *((_QWORD *)v111 + 2);
                        if (v113 > v107 || v113 < v112)
                        {
                          while (v113 < v112)
                          {
                            *((_QWORD *)v111 + 2) = *((_QWORD *)v111 + 3);
                            if (sub_1ACC827F8(*(_QWORD *)v111, *((_DWORD *)v111 + 2), (int *)v111 + 3, (uint64_t *)v111 + 3))*((_QWORD *)v111 + 3) = 0x4000000000000000;
                            v113 = *((_QWORD *)v111 + 2);
                            if (v113 == 0x4000000000000000)
                              goto LABEL_257;
                          }
                          v110 = 0;
                          if (v113 > v107)
                            v107 = v113;
                          v108 = v142[4];
                          v106 = v146;
                        }
                        ++v109;
                      }
                      while (v109 < v108);
                    }
                    while (!v110);
                    v115 = v2;
                    if (v108 < 1)
                      goto LABEL_232;
                    v116 = 0;
                    while (2)
                    {
                      v122 = (uint64_t *)&v146[3 * v116];
                      v123 = v122[2];
                      v124 = v122 + 4;
                      v125 = v122[5];
                      v126 = *(_DWORD *)(v125 + 8);
                      if (!v126 || v123 != *v124)
                      {
                        v127 = (v126 + 15);
                        LODWORD(v128) = *(_DWORD *)(v125 + 12);
                        if (v127 <= v128)
                          goto LABEL_238;
                        if (!(_DWORD)v128)
                          LODWORD(v128) = 64;
                        v128 = (int)v128;
                        do
                        {
                          v129 = v128;
                          v128 *= 2;
                        }
                        while (v129 < v127);
                        v130 = *(_QWORD *)v125;
                        if (!sqlite3_initialize())
                        {
                          v131 = sub_1ACB6BB48(v130, v129);
                          if (v131)
                          {
                            *(_DWORD *)(v125 + 12) = v129;
                            *(_QWORD *)v125 = v131;
LABEL_238:
                            sub_1ACC829F8(v125, v124, v123);
                          }
                        }
                      }
                      ++v116;
                      v121 = v142[4];
                      if (v116 < v121)
                        continue;
                      break;
                    }
                    v119 = *((_QWORD *)v146 + 3);
                    if ((int)v121 < 1)
                    {
                      v117 = 0;
                    }
                    else
                    {
                      v132 = 0;
                      v117 = 0;
                      v133 = (uint64_t *)v146 + 3;
                      do
                      {
                        v135 = *v133;
                        v133 += 6;
                        v134 = v135;
                        if (v135 < v119)
                        {
                          v117 = v132;
                          v119 = v134;
                        }
                        ++v132;
                      }
                      while (v142[4] != v132);
                      v118 = (uint64_t *)&v146[3 * v117 + 1] + 1;
LABEL_233:
                      v119 = *v118;
                    }
                    v120 = &v146[3 * v117];
                    *((_QWORD *)v120 + 2) = v119;
                    if (sub_1ACC827F8(*(_QWORD *)v120, *((_DWORD *)v120 + 2), (int *)v120 + 3, (uint64_t *)v120 + 3))*((_QWORD *)v120 + 3) = 0x4000000000000000;
                    v2 = v115;
                    if (*((_QWORD *)v120 + 2) == 0x4000000000000000)
                    {
LABEL_257:
                      v136 = v146;
                      v137 = *(_DWORD *)(*((_QWORD *)v146 + 5) + 8);
                      if (v146 != v151)
                      {
                        v138 = &off_1ECD3B168;
                        if (!dword_1ECD3B140)
                          goto LABEL_263;
                        if ((_QWORD)xmmword_1ECD3E930)
                          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v146);
                        --qword_1ECD3E8D0;
                        off_1ECD3B168(v146);
                        v136 = (_OWORD *)xmmword_1ECD3E930;
                        if ((_QWORD)xmmword_1ECD3E930)
                        {
                          v138 = &xmmword_1ECD3B1D0;
LABEL_263:
                          (*v138)(v136);
                        }
                      }
                      v16 = 0;
                      if (v137 <= 0)
                      {
LABEL_265:
                        v46 = 0;
                        goto LABEL_266;
                      }
LABEL_195:
                      v46 = 1;
                      goto LABEL_266;
                    }
                  }
                }
              }
              else
              {
                if ((_DWORD)v16)
                  goto LABEL_265;
                v98 = v51;
                if (sqlite3_initialize() || (v105 = (_OWORD *)sub_1ACB5D828(48 * v98)) == 0)
                {
                  v16 = 7;
                  goto LABEL_265;
                }
                v146 = v105;
                bzero(v105, 48 * v98);
                if (v45[4] < 1)
                  goto LABEL_211;
              }
              v99 = 0;
              v100 = (uint64_t *)v146 + 3;
              do
              {
                v101 = *(_QWORD *)&v142[2 * v99 + 6];
                v102 = *(_QWORD *)(v101 + 8);
                v103 = *(_DWORD *)(v101 + 16);
                *(_OWORD *)(v100 - 3) = 0u;
                *(_OWORD *)(v100 - 1) = 0u;
                *(v100 - 3) = v102;
                *((_DWORD *)v100 - 4) = v103;
                *(v100 - 1) = *v100;
                if (sub_1ACC827F8(v102, v103, (int *)v100 - 3, v100))
                {
                  v104 = 0x4000000000000000;
                  *v100 = 0x4000000000000000;
                }
                else
                {
                  v104 = *v100;
                }
                *(v100 - 1) = v104;
                if (sub_1ACC827F8(*(v100 - 3), *((_DWORD *)v100 - 4), (int *)v100 - 3, v100))
                  *v100 = 0x4000000000000000;
                *(_DWORD *)(v101 + 16) = 0;
                v100[2] = v101 + 8;
                ++v99;
                v100 += 6;
              }
              while (v99 < v142[4]);
              goto LABEL_211;
            }
            v55 = (char *)v151;
LABEL_103:
            bzero(v55, 32 * (int)v53);
            LODWORD(v56) = *(_DWORD *)(v52 + 24);
            if ((int)v56 < 1)
            {
LABEL_112:
              v139 = (uint64_t *)(v52 + 8);
              do
              {
LABEL_113:
                v67 = *((_QWORD *)v55 + 3);
                do
                {
                  if ((int)v56 < 1)
                    break;
                  v68 = 0;
                  v69 = 1;
                  do
                  {
                    v70 = &v55[32 * v68];
                    v71 = v67 + v68;
                    v72 = (uint64_t *)(v70 + 24);
                    if (*((_QWORD *)v70 + 3) != v67 + v68)
                    {
                      v73 = v70 + 17;
                      while (1)
                      {
                        v74 = *v72;
                        if (*v72 >= v71)
                          break;
                        if (sub_1ACC827F8(*(_QWORD *)v70, *((_DWORD *)v70 + 2), (int *)v70 + 3, v72))
                        {
                          v16 = 0;
                          *v73 = 1;
                          goto LABEL_145;
                        }
                        if (*v73)
                        {
                          v16 = 0;
LABEL_145:
                          v2 = a2;
                          goto LABEL_148;
                        }
                      }
                      v69 = 0;
                      if (v74 > v71)
                        v67 = v74 - v68;
                      LODWORD(v56) = *(_DWORD *)(v52 + 24);
                    }
                    ++v68;
                  }
                  while (v68 < (int)v56);
                  v2 = a2;
                }
                while (!v69);
                if (!v140 || (v67 & 0x7FFFFFFF) == 0)
                {
                  LODWORD(v75) = *(_DWORD *)(v52 + 20);
                  v76 = (*(_DWORD *)(v52 + 16) + 15);
                  if (v76 > v75)
                  {
                    if (!(_DWORD)v75)
                      LODWORD(v75) = 64;
                    v75 = (int)v75;
                    do
                    {
                      v77 = v75;
                      v75 *= 2;
                    }
                    while (v77 < v76);
                    v78 = *v139;
                    if (sqlite3_initialize() || (v79 = sub_1ACB6BB48(v78, v77)) == 0)
                    {
                      v16 = 7;
                      goto LABEL_148;
                    }
                    *(_DWORD *)(v52 + 20) = v77;
                    *(_QWORD *)(v52 + 8) = v79;
                  }
                  sub_1ACC829F8((uint64_t)v139, &v150, v67);
                  LODWORD(v56) = *(_DWORD *)(v52 + 24);
                }
              }
              while ((int)v56 < 1);
              v80 = 0;
              v81 = v55 + 12;
              while (1)
              {
                if (sub_1ACC827F8(*(_QWORD *)(v81 - 12), *((_DWORD *)v81 - 1), (int *)v81, (uint64_t *)(v81 + 12)))
                {
                  v16 = 0;
                  v81[5] = 1;
                  goto LABEL_148;
                }
                if (v81[5])
                  break;
                ++v80;
                v56 = *(int *)(v52 + 24);
                v81 += 32;
                if (v80 >= v56)
                  goto LABEL_113;
              }
              v16 = 0;
              goto LABEL_148;
            }
            v57 = 0;
            v58 = 0;
            while (2)
            {
              v149 = 0;
              v148 = 0;
              v59 = v52 + v57;
              if (!*(_QWORD *)(v52 + v57 + 56))
              {
                v62 = 0;
                v64 = *(_QWORD *)(v59 + 48);
                v61 = *(_QWORD *)(v64 + 8);
                v148 = v61;
                v63 = *(_DWORD *)(v64 + 16);
                v149 = v63;
LABEL_109:
                v65 = (uint64_t *)&v55[v57];
                *(_OWORD *)v65 = 0u;
                *((_OWORD *)v65 + 1) = 0u;
                *v65 = v61;
                *((_DWORD *)v65 + 2) = v63;
                if (sub_1ACC827F8(v61, v63, (int *)&v55[v57 + 12], (uint64_t *)&v55[v57 + 24]))
                {
                  v16 = 0;
                  *((_BYTE *)v65 + 17) = 1;
                  *((_BYTE *)v65 + 16) = v62;
                  goto LABEL_148;
                }
                v66 = *((unsigned __int8 *)v65 + 17);
                *((_BYTE *)v65 + 16) = v62;
                if (v66)
                {
                  v16 = 0;
                  goto LABEL_148;
                }
                ++v58;
                v56 = *(int *)(v52 + 24);
                v57 += 32;
                if (v58 >= v56)
                  goto LABEL_112;
                continue;
              }
              break;
            }
            v147[0] = 0;
            v147[1] = 0;
            v60 = sub_1ACC8240C(v59 + 32, *(_QWORD *)(v2 + 24), (uint64_t)v147, &v148, &v149);
            v61 = v148;
            if (!(_DWORD)v60)
            {
              v62 = v148 == v147[0];
              v63 = v149;
              goto LABEL_109;
            }
            v16 = v60;
            if (!v148)
              goto LABEL_148;
            v88 = (void (**)(uint64_t))&off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_175;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v61);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v61);
            v61 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v88 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_175:
              (*v88)(v61);
            }
LABEL_148:
            v82 = *(_DWORD *)(v52 + 16);
            if (*(int *)(v52 + 24) >= 1)
            {
              v83 = 0;
              v84 = v55 + 16;
              do
              {
                if (*v84)
                {
                  v85 = *((_QWORD *)v84 - 2);
                  if (v85)
                  {
                    v86 = &off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v85);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v85);
                      v85 = xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                        goto LABEL_151;
                      v86 = &xmmword_1ECD3B1D0;
                    }
                    (*v86)(v85);
                  }
                }
LABEL_151:
                ++v83;
                v84 += 32;
              }
              while (v83 < *(int *)(v52 + 24));
            }
            v45 = v142;
            if (v55 != (char *)v151)
            {
              v87 = (uint64_t (**)(char *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_165;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v55);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v55);
              v55 = (char *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v87 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_165:
                (*v87)(v55);
              }
            }
            v51 = v145;
            if (v82 < 1)
              goto LABEL_193;
          }
          ++v51;
          if ((_DWORD)v16)
            goto LABEL_193;
          continue;
        }
      }
      goto LABEL_11;
    }
  }
  v15 = 0;
  while (1)
  {
    v17 = v14 + 32 * v15;
    if (!*(_QWORD *)(v17 + 56))
    {
      v36 = *(_QWORD *)(v17 + 48);
      v37 = *(_QWORD *)v36;
      if (*(_QWORD *)v36 == v7 || *(_BYTE *)(v36 + 20))
        goto LABEL_18;
      v38 = v5 != 0;
      if (v7 >= v37)
        v38 = 0;
      if ((v7 <= v37 || v5 != 0) && !v38)
      {
        v13 = 0;
        v7 = *(_QWORD *)v36;
        goto LABEL_18;
      }
      v41 = *(_QWORD *)(v36 + 24);
      do
      {
        sub_1ACC800BC(v41, v36, 1, v7);
        if (*(_DWORD *)(v41 + 60))
          break;
        if (*(_BYTE *)(v36 + 20))
          break;
        v42 = *(_QWORD *)(v36 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v36 + 88) + 4) + 216);
        v43 = *(_DWORD *)(v36 + 68);
        if (!v43 && v42 >= v7)
          break;
      }
      while (!v43 || v42 > v7);
      v44 = *(_QWORD *)(v36 + 24);
      v16 = *(unsigned int *)(v44 + 60);
      *(_DWORD *)(v44 + 60) = 0;
      if (!(_DWORD)v16)
      {
        v13 = *(unsigned __int8 *)(v36 + 20);
        if (!*(_BYTE *)(v36 + 20))
        {
          v7 = *(_QWORD *)v36;
          goto LABEL_18;
        }
      }
      *(_DWORD *)(a2 + 4) = 1;
      return v16;
    }
    v18 = 0;
    v19 = 0;
    v20 = v17 + 32;
    v21 = v17 + 32;
    do
    {
      v22 = *(uint64_t **)(v21 + 16);
      if (!*((_BYTE *)v22 + 20))
      {
        v23 = *v22;
        if (v18 && v5 == v23 < v19)
        {
          v18 = 1;
        }
        else
        {
          v18 = 1;
          v19 = v23;
        }
      }
      v21 = *(_QWORD *)(v21 + 24);
    }
    while (v21);
    if (v19 != v7)
      break;
LABEL_18:
    if (++v15 >= *(int *)(v14 + 24))
    {
      v3 = v144;
      v11 = *(_DWORD *)(v144 + 16);
      goto LABEL_14;
    }
  }
  v24 = v20;
  while (1)
  {
    v25 = *(_QWORD *)(v24 + 16);
    if (!*(_BYTE *)(v25 + 20))
    {
      v26 = v5 != 0;
      if (v7 >= *(_QWORD *)v25)
        v26 = 0;
      v27 = v7 > *(_QWORD *)v25 && v5 == 0;
      if (v27 || v26)
        break;
    }
    v16 = 0;
LABEL_30:
    v24 = *(_QWORD *)(v24 + 24);
    if (!v24)
      goto LABEL_49;
  }
  v29 = *(_QWORD *)(v25 + 24);
  do
  {
    sub_1ACC800BC(v29, v25, 1, v7);
    if (*(_DWORD *)(v29 + 60))
      break;
    if (*(_BYTE *)(v25 + 20))
      break;
    v30 = *(_QWORD *)(v25 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v25 + 88) + 4) + 216);
    v31 = *(_DWORD *)(v25 + 68);
    if (!v31 && v30 >= v7)
      break;
  }
  while (!v31 || v30 > v7);
  v32 = *(_QWORD *)(v25 + 24);
  v16 = *(unsigned int *)(v32 + 60);
  *(_DWORD *)(v32 + 60) = 0;
  if (!(_DWORD)v16)
    goto LABEL_30;
LABEL_49:
  if (!(_DWORD)v16)
  {
    v33 = 0;
    v7 = 0;
    do
    {
      v34 = *(_QWORD *)(v20 + 16);
      if (!*(_BYTE *)(v34 + 20))
      {
        v35 = *(_QWORD *)v34;
        if (v33 && v5 == v35 < v7)
        {
          v33 = 1;
        }
        else
        {
          v33 = 1;
          v7 = v35;
        }
      }
      v20 = *(_QWORD *)(v20 + 24);
    }
    while (v20);
    v16 = 0;
    v13 = 0;
    if (v33)
      goto LABEL_18;
  }
  *(_QWORD *)(a2 + 4) = 1;
  return v16;
}

uint64_t sub_1ACC8240C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t (**v14)(uint64_t *);
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t *);
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = 0;
    v10 = (uint64_t *)v36;
    goto LABEL_26;
  }
  v7 = a1;
  v8 = 0;
  v9 = 4;
  v10 = (uint64_t *)v36;
  do
  {
    v11 = *(_QWORD *)(v7 + 16);
    if (*(_BYTE *)(v11 + 20) || *(_QWORD *)v11 != a2 || !*(_DWORD *)(v11 + 16))
      goto LABEL_4;
    if (v8 == v9)
    {
      if (sqlite3_initialize() || (v12 = (uint64_t *)sub_1ACB5D828((uint64_t)v9 << 6)) == 0)
      {
        v18 = 7;
        goto LABEL_54;
      }
      v13 = v12;
      memcpy(v12, v10, 32 * v9);
      v9 *= 2;
      if (v10 == (uint64_t *)v36 || !v10)
        goto LABEL_20;
      v14 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          ((void (*)(void))xmmword_1ECD3B1C0)();
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v10);
        v10 = (uint64_t *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_20;
        v14 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
      }
      (*v14)(v10);
    }
    else
    {
      v13 = v10;
    }
LABEL_20:
    v15 = *(_QWORD *)(v11 + 8);
    v16 = *(_DWORD *)(v11 + 16);
    v17 = &v13[4 * v8];
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    *v17 = v15;
    *((_DWORD *)v17 + 2) = v16;
    if (sub_1ACC827F8(v15, v16, (int *)v17 + 3, v17 + 3))
      *((_BYTE *)v17 + 17) = 1;
    ++v8;
    v10 = v13;
LABEL_4:
    v7 = *(_QWORD *)(v7 + 24);
  }
  while (v7);
  if (v8 == 1)
  {
    v18 = 0;
    *a4 = *v10;
    v19 = *((_DWORD *)v10 + 2);
    goto LABEL_53;
  }
LABEL_26:
  v35 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if (v8 < 1)
  {
    v18 = 0;
    goto LABEL_51;
  }
  v18 = 0;
  v20 = -1;
  v21 = v8;
  while (2)
  {
    v23 = v20;
    v20 = 0x7FFFFFFFFFFFFFFFLL;
    v24 = v21;
    v25 = v10 + 3;
    while (2)
    {
      if (!*((_BYTE *)v25 - 7))
      {
        v26 = *v25;
        if (*v25 == v23)
        {
          if (sub_1ACC827F8(*(v25 - 3), *((_DWORD *)v25 - 4), (int *)v25 - 3, v25))
          {
            *((_BYTE *)v25 - 7) = 1;
            goto LABEL_34;
          }
          if (!*((_BYTE *)v25 - 7))
          {
            v26 = *v25;
            goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
          if (v26 < v20)
            v20 = v26;
        }
      }
LABEL_34:
      v25 += 4;
      if (--v24)
        continue;
      break;
    }
    if (!(_DWORD)v18 && v20 != 0x7FFFFFFFFFFFFFFFLL)
    {
      LODWORD(v27) = *(_DWORD *)(a3 + 12);
      v28 = (*(_DWORD *)(a3 + 8) + 15);
      if (v28 > v27)
      {
        if (!(_DWORD)v27)
          LODWORD(v27) = 64;
        v27 = (int)v27;
        do
        {
          v29 = v27;
          v27 *= 2;
        }
        while (v29 < v28);
        v30 = *(_QWORD *)a3;
        if (sqlite3_initialize() || (v22 = sub_1ACB6BB48(v30, v29)) == 0)
        {
          v18 = 7;
          continue;
        }
        *(_DWORD *)(a3 + 12) = v29;
        *(_QWORD *)a3 = v22;
      }
      sub_1ACC829F8(a3, &v35, v20);
      v18 = 0;
      continue;
    }
    break;
  }
LABEL_51:
  if (!(_DWORD)v18)
  {
    *a4 = *(_QWORD *)a3;
    v19 = *(_DWORD *)(a3 + 8);
LABEL_53:
    *a5 = v19;
  }
LABEL_54:
  if (v10 != (uint64_t *)v36 && v10)
  {
    v31 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_61;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v31 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
LABEL_61:
      (*v31)(v10);
    }
  }
  return v18;
}

uint64_t sub_1ACC827F8(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  int v21;
  int v22;
  char *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;

  v5 = *a3;
  if ((int)v5 >= a2)
  {
LABEL_28:
    *a4 = -1;
    return 1;
  }
  v8 = *a4;
  v9 = (char *)(a1 + v5);
  v10 = *v9;
  if (*v9 < 0)
  {
    v12 = v9[1];
    if (v9[1] < 0)
    {
      v13 = v9[2];
      if (v13 < 0)
      {
        v28 = 0;
        v11 = sub_1ACC7BBC8(v9, &v28);
        v10 = v28 & 0x7FFFFFFF;
      }
      else
      {
        v10 = v13 & 0x7F | (v10 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
        v11 = 3;
      }
    }
    else
    {
      v10 = ((v10 & 0x7F) << 7) | v12;
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  v14 = v11 + v5;
  if (v10 > 1)
  {
    v18 = v8 & 0x7FFFFFFF00000000 | (v10 + (_DWORD)v8 + 2147483646) & 0x7FFFFFFF;
LABEL_30:
    result = 0;
    *a4 = v18;
    goto LABEL_31;
  }
  if (v10)
  {
    v15 = (char *)(a1 + v14);
    v16 = *v15;
    if (*v15 < 0)
    {
      v20 = v15[1];
      if (v15[1] < 0)
      {
        v21 = v15[2];
        if (v21 < 0)
        {
          v28 = 0;
          v17 = sub_1ACC7BBC8(v15, &v28);
          v16 = v28 & 0x7FFFFFFF;
        }
        else
        {
          v16 = v21 & 0x7F | ((_DWORD)v16 << 14) & 0x1FC07F | ((v20 & 0x7F) << 7);
          v17 = 3;
        }
      }
      else
      {
        v16 = ((v16 & 0x7F) << 7) | v20;
        v17 = 2;
      }
    }
    else
    {
      v17 = 1;
    }
    v22 = v17 + v14;
    v23 = (char *)(a1 + v22);
    v24 = *v23;
    if (*v23 < 0)
    {
      v26 = v23[1];
      if (v23[1] < 0)
      {
        v27 = v23[2];
        if (v27 < 0)
        {
          v28 = 0;
          v25 = sub_1ACC7BBC8(v23, &v28);
          v24 = v28 & 0x7FFFFFFF;
        }
        else
        {
          v24 = v27 & 0x7F | (v24 << 14) & 0x1FC07F | ((v26 & 0x7F) << 7);
          v25 = 3;
        }
      }
      else
      {
        v24 = ((v24 & 0x7F) << 7) | v26;
        v25 = 2;
      }
    }
    else
    {
      v25 = 1;
    }
    if (v24 <= 1)
      goto LABEL_28;
    v14 = v25 + v22;
    v18 = (v16 << 32) | (v24 + 2147483646) & 0x7FFFFFFF;
    goto LABEL_30;
  }
  result = 0;
LABEL_31:
  *a3 = v14;
  return result;
}

uint64_t sub_1ACC829F8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  int v11;
  int8x8_t *v12;
  unint64_t v13;

  if (*a2 <= a3)
  {
    v5 = result;
    v6 = a3 & 0x7FFFFFFF00000000;
    if ((a3 & 0x7FFFFFFF00000000) == (*a2 & 0x7FFFFFFF00000000))
    {
      v7 = *(_DWORD *)(result + 8);
      v6 = *a2;
    }
    else
    {
      v8 = *(_QWORD *)result;
      v9 = *(int *)(result + 8);
      *(_DWORD *)(result + 8) = v9 + 1;
      *(_BYTE *)(v8 + v9) = 1;
      v10 = (int8x8_t *)(*(_QWORD *)result + *(int *)(result + 8));
      if ((unint64_t)a3 >> 39)
      {
        if ((unint64_t)a3 >> 46)
        {
          v11 = sub_1ACBF8034(v10, a3 >> 32);
        }
        else
        {
          v10->i8[0] = (HIDWORD(a3) >> 7) | 0x80;
          v10->i8[1] = BYTE4(a3) & 0x7F;
          v11 = 2;
        }
      }
      else
      {
        v10->i8[0] = BYTE4(a3);
        v11 = 1;
      }
      v7 = *(_DWORD *)(v5 + 8) + v11;
      *(_DWORD *)(v5 + 8) = v7;
    }
    v12 = (int8x8_t *)(*(_QWORD *)v5 + v7);
    v13 = a3 - v6 + 2;
    if (v13 > 0x7F)
    {
      if (v13 >> 14)
      {
        result = sub_1ACBF8034(v12, v13);
      }
      else
      {
        v12->i8[0] = (v13 >> 7) | 0x80;
        v12->i8[1] = v13 & 0x7F;
        result = 2;
      }
    }
    else
    {
      v12->i8[0] = v13;
      result = 1;
    }
    *(_DWORD *)(v5 + 8) += result;
    *a2 = a3;
  }
  return result;
}

uint64_t sub_1ACC82B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 24);
  LODWORD(v5) = *(_DWORD *)(a2 + 40);
  while (2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    if ((int)v5 < 1)
      goto LABEL_21;
    v6 = 1;
    v7 = 6;
    v8 = v4;
    do
    {
      v10 = *(_QWORD *)(a2 + 8 * v7);
      v11 = *(_QWORD *)(v10 + 24);
      if (*(_DWORD *)(a1 + 24))
      {
        if (v8 >= v11)
          goto LABEL_10;
      }
      else if (v8 <= v11)
      {
        goto LABEL_10;
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 16))(a1, *(_QWORD *)(a2 + 8 * v7), 1, v8);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a2 + 8) = 0;
        return result;
      }
LABEL_10:
      if (*(_DWORD *)(v10 + 4))
      {
        sub_1ACC82C38(a2);
        v4 = v8;
        goto LABEL_18;
      }
      v4 = *(_QWORD *)(v10 + 24);
      if (v8 != v4)
        v6 = 0;
      if (*(_DWORD *)(v10 + 8))
        *(_DWORD *)(a2 + 8) = 1;
      v5 = *(int *)(a2 + 40);
      v9 = v7 - 5;
      ++v7;
      v8 = v4;
    }
    while (v9 < v5);
    if (!v6)
      continue;
    break;
  }
LABEL_18:
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_QWORD *)(a1 + 16) != a2)
      sub_1ACC82C94(a2);
  }
LABEL_21:
  result = 0;
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_1ACC82C38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(result + 4) = 1;
  if (*(int *)(result + 40) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = result + 48;
    do
      result = sub_1ACC82C38(*(_QWORD *)(v3 + 8 * v2++));
    while (v2 < *(int *)(v1 + 40));
  }
  return result;
}

uint64_t sub_1ACC82C94(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  if (*(_DWORD *)result == 4 || *(_DWORD *)result == 9)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = *(unsigned int *)(v3 + 16);
    if ((int)v4 < 1)
      return result;
    if ((_DWORD)v4 == 1)
    {
      v5 = 0;
    }
    else
    {
      v5 = v4 & 0xFFFFFFFE;
      v7 = (uint64_t *)(v3 + 32);
      v8 = v5;
      do
      {
        v9 = *v7;
        *(_DWORD *)(*(v7 - 1) + 16) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v7 += 2;
        v8 -= 2;
      }
      while (v8);
      if (v5 == v4)
        return result;
    }
    v10 = (uint64_t *)(v3 + 8 * v5 + 24);
    v11 = v4 - v5;
    do
    {
      v12 = *v10++;
      *(_DWORD *)(v12 + 16) = 0;
      --v11;
    }
    while (v11);
    return result;
  }
  if (*(int *)(result + 40) >= 1)
  {
    v6 = 0;
    do
      result = sub_1ACC82C94(*(_QWORD *)(v1 + 48 + 8 * v6++));
    while (v6 < *(int *)(v1 + 40));
  }
  return result;
}

uint64_t sub_1ACC82D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  while (1)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if (v6)
      goto LABEL_17;
    if (*(_DWORD *)(v4 + 4))
      goto LABEL_16;
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *(_QWORD *)(v4 + 24);
    if (!*(_DWORD *)(a1 + 24))
      break;
    if (v7 > v8)
      goto LABEL_16;
    if (v7 < v8)
      goto LABEL_7;
LABEL_13:
    v9 = 0;
    if (*(_DWORD *)(v4 + 8))
      goto LABEL_18;
LABEL_14:
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v5 + 16))(a1, v5, 0, 0);
    if ((_DWORD)v10)
    {
      v9 = v10;
      v6 = *(_DWORD *)(v5 + 4);
      goto LABEL_19;
    }
  }
  if (v7 < v8)
  {
LABEL_16:
    v6 = 0;
LABEL_17:
    v9 = 0;
    goto LABEL_19;
  }
  if (v7 <= v8)
    goto LABEL_13;
LABEL_7:
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v4, 1);
  v6 = *(_DWORD *)(v5 + 4);
  if (*(_DWORD *)(v4 + 4) | v6)
    goto LABEL_19;
  if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(v4 + 24) && !*(_DWORD *)(v4 + 8))
    goto LABEL_14;
LABEL_18:
  v6 = 0;
LABEL_19:
  *(_DWORD *)(a2 + 4) = v6;
  v11 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v5 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v5 + 24);
  if (v11)
    sub_1ACC82C94(v4);
  return v9;
}

uint64_t sub_1ACC82E78(uint64_t a1, char a2, char *__s, int a4)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;

  result = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)a1;
    if (a4 >= 0x8000)
      v8 = 0x8000;
    else
      v8 = a4;
    if (v7)
    {
      v9 = *(_DWORD *)(v7 + 24);
      if ((a2 & 1) != 0 && v9 >= 1)
      {
        if (!sqlite3_initialize())
        {
          v10 = v8;
          v11 = v8 + 49;
          v12 = (_QWORD *)sub_1ACB5D828(v11);
          if (v12)
          {
            v13 = v12;
            bzero(v12, v11);
            v13[1] = v13 + 6;
            memcpy(v13 + 6, __s, v10);
            result = 0;
            v14 = v7 + 32 * *(int *)(v7 + 24);
            v13[3] = *(_QWORD *)(v14 + 24);
            *(_QWORD *)(v14 + 24) = v13;
LABEL_28:
            *(_DWORD *)(a1 + 8) = result;
            return result;
          }
        }
LABEL_15:
        result = 7;
        goto LABEL_28;
      }
      if ((v9 & 7) != 0)
      {
        v15 = *(_QWORD *)a1;
        goto LABEL_20;
      }
    }
    else
    {
      v9 = 0;
    }
    if (sqlite3_initialize())
      goto LABEL_15;
    v16 = sub_1ACB6BB48(v7, 32 * (v9 + 8) + 64);
    if (!v16)
      goto LABEL_15;
    v15 = v16;
    if (!v7)
    {
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
    }
    *(_QWORD *)a1 = v16;
    *(_DWORD *)(v16 + 24) = v9;
LABEL_20:
    *(_DWORD *)(v15 + 24) = v9 + 1;
    v17 = v15 + 32 * v9;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    if (v8 < 0)
      v8 = strlen(__s);
    v18 = sqlite3_initialize();
    v19 = 0;
    result = 7;
    if ((v8 & 0x80000000) == 0 && !v18)
    {
      v20 = (_BYTE *)sub_1ACB5D828((v8 + 1));
      v19 = v20;
      if (v20)
      {
        memcpy(v20, __s, v8);
        result = 0;
        v19[v8] = 0;
      }
      else
      {
        result = 7;
      }
    }
    *(_QWORD *)(v15 + 32 * v9 + 40) = v19;
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1ACC83008(uint64_t result, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;

  if (*(_DWORD *)(result + 16))
    return result;
  v7 = result;
  if (*(_DWORD *)a2 != 4 && *(_DWORD *)a2 != 9)
  {
    if (*(int *)(a2 + 40) >= 1)
    {
      v18 = 0;
      do
        result = sub_1ACC83008(v7, *(_QWORD *)(a2 + 48 + 8 * v18++), a3, a4);
      while (v18 < *(int *)(a2 + 40));
    }
    return result;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(int **)(v9 + 8);
  if (v10)
  {
    v11 = *v10;
    if (*v10 < 1)
    {
      *v10 = 0;
LABEL_27:
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 16) = 0;
      return result;
    }
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (v13 < *a3)
    {
      v15 = v10[v14 + 1];
      v16 = a3[v13 + 1];
      if (v15 == v16)
      {
        v17 = &v10[v12++];
        v17[1] = v15;
        ++v13;
        ++v14;
        v11 = *v10;
        if (v14 >= *v10)
          break;
      }
      else
      {
        if (v15 > v16)
          ++v13;
        else
          ++v14;
        if (v14 >= v11)
          break;
      }
    }
    *v10 = v12;
    if (!v12)
      goto LABEL_27;
  }
  else if (*a4)
  {
    *(_QWORD *)(v9 + 8) = a3;
    *a4 = 0;
  }
  else
  {
    if (a3)
    {
      v19 = *a3;
      result = sqlite3_initialize();
      if ((_DWORD)result || (v21 = 4 * (v19 - 1) + 8, (result = sub_1ACB5D828(v21)) == 0))
      {
        v20 = 0;
        if ((v19 & 0x80000000) == 0)
          *(_DWORD *)(v7 + 16) = 7;
      }
      else
      {
        v20 = (void *)result;
        bzero((void *)result, v21);
        result = (uint64_t)memcpy(v20, a3, v21);
      }
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)(v9 + 8) = v20;
  }
  return result;
}

uint64_t sub_1ACC831A8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  sqlite3_stmt *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 9 || v4 == 4)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_DWORD *)(v6 + 16);
    if (v7 < 1)
      goto LABEL_28;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v6 + 8 * v8 + 24);
      v10 = *(_DWORD *)(v9 + 24);
      if (!v10)
        break;
      if (v10 < 1)
        goto LABEL_27;
      v45 = v8;
      v46 = *(_QWORD *)(v6 + 8 * v8 + 24);
      v11 = 0;
      do
      {
        v12 = 0;
        v47 = v11;
        v13 = (_BYTE *)(v9 + 32 * v11 + 32);
        v14 = v13;
        do
        {
          v15 = *((_QWORD *)v14 + 2);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 24);
            sub_1ACC7D2A0(v15);
            v17 = *(_QWORD **)(v16 + 64);
            if (v17)
            {
              *(_QWORD *)(v16 + 64) = 0;
              v18 = (sqlite3_stmt *)v17[3];
              v19 = (_QWORD *)v17[4];
              v20 = v19[3];
              if (v20)
                xmmword_1ECD3B1C0(v20);
              sub_1ACBE0F9C(v19, v17);
              v21 = v19[3];
              if (v21)
                xmmword_1ECD3B1D0(v21);
              sqlite3_finalize(v18);
            }
            *((_QWORD *)v14 + 2) = 0;
          }
          v22 = strlen(*((const char **)v14 + 1));
          v23 = sub_1ACC8359C(*(_DWORD **)a1, *((unsigned __int8 **)v14 + 1), v22, (*v13 != 0) | (2 * (*(_DWORD *)(a1 + 24) != 0)), *(_QWORD *)(v6 + 8), (uint64_t *)v14 + 2);
          if ((_DWORD)v23)
            return v23;
          v24 = *((_QWORD *)v14 + 2);
          v14 = (_BYTE *)*((_QWORD *)v14 + 3);
          if (!*(_BYTE *)(v24 + 20))
            v12 = 1;
        }
        while (v14);
        if (!v12)
          goto LABEL_52;
        v9 = v46;
        v11 = v47 + 1;
      }
      while (v47 + 1 < *(int *)(v46 + 24));
      v7 = *(_DWORD *)(v6 + 16);
      v8 = v45;
LABEL_27:
      if (++v8 >= v7)
      {
LABEL_28:
        *(_DWORD *)(a2 + 4) = 0;
LABEL_53:
        switch(*(_DWORD *)a2)
        {
          case 1:
            v35 = *(_QWORD *)(a2 + 48);
            v36 = *(unsigned int *)(a2 + 40);
            if ((int)v36 < 2)
              goto LABEL_74;
            v37 = v36 - 1;
            v38 = a2 + 56;
            break;
          case 2:
            return sub_1ACC82B1C(a1, a2);
          case 4:
            v42 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24);
            v43 = *(_QWORD *)(v42 + 48);
            v44 = *(_DWORD *)(v43 + 16);
            *(_DWORD *)(v42 + 16) = v44;
            if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 92))
              *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
            v25 = 0;
            *(_QWORD *)(a2 + 24) = *(_QWORD *)v43;
            *(_DWORD *)(a2 + 8) = v44 == 0;
            return v25;
          case 9:
            return sub_1ACC815D4(a1, a2);
          default:
            return sub_1ACC82D60(a1, a2);
        }
        while (2)
        {
          v39 = *(_QWORD *)v38;
          if (!*(_DWORD *)(*(_QWORD *)v38 + 4))
          {
            if (*(_DWORD *)(v35 + 4))
              goto LABEL_56;
            v40 = *(_QWORD *)(v35 + 24);
            v41 = *(_QWORD *)(v39 + 24);
            if (*(_DWORD *)(a1 + 24))
            {
              if (v40 <= v41)
              {
                if (v40 < v41)
                  goto LABEL_56;
LABEL_66:
                if (!*(_DWORD *)(v39 + 8))
LABEL_56:
                  v35 = *(_QWORD *)v38;
              }
            }
            else if (v40 >= v41)
            {
              if (v40 <= v41)
                goto LABEL_66;
              goto LABEL_56;
            }
          }
          v38 += 8;
          if (!--v37)
          {
LABEL_74:
            v25 = 0;
            *(_QWORD *)(a2 + 24) = *(_QWORD *)(v35 + 24);
            *(_QWORD *)(a2 + 4) = *(_QWORD *)(v35 + 4);
            return v25;
          }
          continue;
        }
      }
    }
LABEL_52:
    *(_DWORD *)(a2 + 4) = 1;
    return 0;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    v25 = 0;
    *(_DWORD *)(a2 + 4) = 1;
    return v25;
  }
  LODWORD(v26) = *(_DWORD *)(a2 + 40);
  if ((int)v26 < 1)
  {
    v27 = 0;
    v25 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 6;
    do
    {
      v29 = *(_QWORD *)(a2 + 8 * v28);
      v30 = sub_1ACC831A8(a1, v29);
      v27 += *(_DWORD *)(v29 + 4);
      v31 = v28 - 5;
      v26 = *(int *)(a2 + 40);
      ++v28;
    }
    while (v31 < v26 && (_DWORD)v30 == 0);
    v25 = v30;
    v4 = *(_DWORD *)a2;
  }
  v33 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v33 + 24);
  if (v4 == 1)
  {
    if ((_DWORD)v26 == v27)
LABEL_43:
      sub_1ACC82C38(a2);
  }
  else
  {
    if (v4 != 2)
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v33 + 4);
      if (!(_DWORD)v25)
        goto LABEL_49;
      return v25;
    }
    if (v27 >= 1)
      goto LABEL_43;
  }
  if (!(_DWORD)v25)
  {
LABEL_49:
    if (!*(_DWORD *)(a2 + 4))
      goto LABEL_53;
    return 0;
  }
  return v25;
}

uint64_t sub_1ACC8359C(_DWORD *a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  void *v27;
  uint64_t (*v28)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  BOOL v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  void *v50;
  void (**v51)(void *);
  uint64_t (**v52)(void *);
  unsigned __int8 *v53;
  uint64_t v54;
  _QWORD *v55;
  sqlite3_stmt *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  sqlite3_stmt *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void (**v65)(unsigned __int8 *);
  _QWORD *v66;
  int v67;
  const void *v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  size_t v92;
  uint64_t (**v93)(void *);
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char v97;
  unsigned __int8 *v98;
  _DWORD *v99;
  size_t __n;
  void (*v102)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v104)(uint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  void *__src[2];
  _QWORD *v113;
  __int128 v114;

  v9 = 0;
  v11 = a1 + 15;
  v10 = *(_QWORD *)a1;
  v110 = 0;
  v12 = (a3 + 1);
  if (a3 == -1)
    goto LABEL_2;
  v20 = 64;
  do
  {
    v21 = v20;
    v20 *= 2;
  }
  while (v21 < v12);
  if (sqlite3_initialize() || (v23 = sub_1ACB6BB48(0, v21)) == 0)
  {
    result = 7;
    goto LABEL_109;
  }
  v9 = (unsigned __int8 *)v23;
  if (a3 < 1)
  {
LABEL_2:
    v107 = a5;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if ((a4 & 1) == 0)
      goto LABEL_20;
LABEL_3:
    v16 = *(unsigned int *)(v10 + 48);
    if ((int)v16 < 1)
    {
      v15 = 0;
      v14 = 1;
    }
    else
    {
      v17 = 0;
      v15 = 0;
      v14 = v16 + 1;
      while (1)
      {
        v18 = *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v17);
        if (v18 == v13)
          break;
        ++v17;
        if (v18 == v13 + 1)
          v15 = v17;
        if (v16 == v17)
          goto LABEL_20;
      }
      v14 = v17 + 1;
    }
    goto LABEL_20;
  }
  memcpy((void *)(v23 + 1), a2, a3);
  v107 = a5;
  if ((a4 & 1) != 0)
  {
    v88 = 0;
    v13 = 0;
    do
    {
      LODWORD(v89) = v88 + 1;
      if (v88 + 1 < a3 && a2[v88] >= 0xC0u)
      {
        v89 = (int)v89;
        while ((a2[v89] & 0xC0) == 0x80)
        {
          if (a3 == ++v89)
          {
            ++v13;
            goto LABEL_3;
          }
        }
      }
      ++v13;
      v88 = v89;
    }
    while ((int)v89 < a3);
    goto LABEL_3;
  }
  v14 = 0;
  v15 = 0;
LABEL_20:
  if (v14 <= *(_DWORD *)(v10 + 48))
  {
    v32 = sub_1ACC7ABF8((uint64_t)a1);
    *v9 = v14 + 48;
    if (v32)
    {
      v33 = v32;
      sub_1ACC841A0((uint64_t)a1, (uint64_t)v32, a4 | 0x10, v107, v9, v12, 0xFFFFFFFF, 0, &v110);
      sub_1ACC7A15C(v33);
      v34 = v110;
    }
    else
    {
      v34 = 0;
    }
    v35 = a6;
    goto LABEL_86;
  }
  v24 = (uint64_t)a1;
  v25 = *(_DWORD *)(*(_QWORD *)a1 + 92);
  v26 = v25 == 1;
  if (v25 == 1)
    v27 = sub_1ACC87220;
  else
    v27 = sub_1ACC875B4;
  v102 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v27;
  if (v26)
    v28 = sub_1ACC875A4;
  else
    v28 = sub_1ACC8800C;
  if (v26)
    v29 = 1;
  else
    v29 = 15;
  v109 = v29;
  if (v26)
    v30 = 32;
  else
    v30 = 120;
  v104 = v28;
  v105 = v30;
  if (a1[15])
  {
    v31 = 0;
  }
  else if (sqlite3_initialize() || (v36 = (uint64_t *)sub_1ACB5D828((16 * v105))) == 0)
  {
    v31 = 0;
    *v11 = 7;
  }
  else
  {
    v31 = v36;
    bzero(v36, (16 * v105));
  }
  v37 = sub_1ACC7ABF8((uint64_t)a1);
  v38 = (uint64_t)v37;
  if (!v31 || !v37)
  {
    sub_1ACC7A15C(v37);
    v35 = a6;
    if (v31)
      goto LABEL_75;
    goto LABEL_81;
  }
  v97 = a4;
  v113 = 0;
  v111 = 1;
  __src[0] = 0;
  __src[1] = 0;
  v106 = v31;
  v99 = v37;
  if (v15)
  {
    *v9 = 48;
    sub_1ACC841A0((uint64_t)a1, (uint64_t)v37, 0x30u, v107, v9, v12, 0xFFFFFFFF, 0, (uint64_t *)&v113);
    v39 = v113;
    sub_1ACC858DC((uint64_t)v11, (uint64_t)v113);
    if (a1[15])
    {
      v40 = 0;
    }
    else
    {
      v40 = 0;
      do
      {
        if (*((_BYTE *)v39 + 20))
          break;
        ((void (*)(_QWORD *, _QWORD *))v39[7])(v39, &v39[17 * *(unsigned __int16 *)(v39[11] + 4) + 12]);
        if (*((_DWORD *)v39 + 4))
        {
          v104((uint64_t)a1, *v39 - v40, (uint64_t)v39, (uint64_t)__src);
          v40 = *v39;
        }
        sub_1ACC88194((uint64_t)a1, (uint64_t)v39, &v114);
      }
      while (!a1[15]);
    }
    sub_1ACC7D2A0((uint64_t)v39);
    v38 = (uint64_t)v99;
  }
  else
  {
    v40 = 0;
  }
  *v9 = v15 + 48;
  sub_1ACC841A0((uint64_t)a1, v38, 0x38u, v107, v9, v12, 0xFFFFFFFF, 0, (uint64_t *)&v113);
  v41 = v113;
  sub_1ACC858DC((uint64_t)v11, (uint64_t)v113);
  v108 = v11;
  v98 = v9;
  if (!a1[15])
  {
    __n = (int)v12;
    do
    {
      if (*((_BYTE *)v41 + 20))
        break;
      v66 = &v41[17 * *(unsigned __int16 *)(v41[11] + 4)];
      v67 = *((_DWORD *)v66 + 52);
      v68 = (const void *)v66[25];
      ((void (*)(_QWORD *, _QWORD *))v41[7])(v41, v66 + 12);
      if (v111)
      {
        if (v67 <= a3 || memcmp(v9, v68, __n))
          break;
      }
      if (*((_DWORD *)v41 + 4))
      {
        if (*v41 <= v40)
        {
          v69 = (int)__src[1];
          if (SLODWORD(__src[1]) >= 1)
          {
            v70 = *v11;
            v71 = v109;
            if (*v11)
            {
              v40 = 0;
            }
            else
            {
              v72 = 0;
              v73 = v109;
              do
              {
                v75 = v70;
                v76 = v73;
                if ((unint64_t)v70 + 1 > v73)
                  v76 = v70 + 1;
                v77 = v76 - v70;
                v78 = v77 & 0xFFFFFFFFFFFFFFFELL;
                v79 = 2 * v70;
                v80 = &v106[v79 + 3];
                v81 = &v106[v79];
                v82 = (v72 * v71 + v71);
                v83 = v75;
                while (*((_DWORD *)v81 + 2))
                {
                  ++v83;
                  v81 += 2;
                  if (v83 >= v82)
                  {
                    if ((_DWORD)v82 != (_DWORD)v76)
                      goto LABEL_126;
                    goto LABEL_138;
                  }
                }
                v69 = 0;
                v84 = *(_OWORD *)__src;
                v114 = *(_OWORD *)__src;
                *(_OWORD *)__src = *(_OWORD *)v81;
                *(_OWORD *)v81 = v84;
                LODWORD(__src[1]) = 0;
                if ((_DWORD)v82 != (_DWORD)v83)
                  goto LABEL_126;
LABEL_138:
                v102(a1, __src, v109, &v106[2 * (v72 * v71)]);
                v85 = v75;
                if (v77 < 2)
                  goto LABEL_142;
                v85 = (v77 & 0xFFFFFFFFFFFFFFFELL) + v75;
                do
                {
                  *((_DWORD *)v80 - 4) = 0;
                  *(_DWORD *)v80 = 0;
                  v80 += 4;
                  v78 -= 2;
                }
                while (v78);
                if (v77 != (v77 & 0xFFFFFFFFFFFFFFFELL))
                {
LABEL_142:
                  v86 = &v106[2 * v85 + 1];
                  do
                  {
                    *(_DWORD *)v86 = 0;
                    v86 += 2;
                    ++v85;
                  }
                  while (v85 < v82);
                }
                v69 = (int)__src[1];
LABEL_126:
                ++v72;
                v11 = v108;
                v71 = v109;
                v70 = v75 + v109;
                v73 += v109;
                if (*v108)
                  v74 = 1;
                else
                  v74 = v69 == 0;
              }
              while (!v74);
              v40 = 0;
              v9 = v98;
              v24 = (uint64_t)a1;
            }
          }
        }
        v41 = v113;
        v104(v24, *v113 - v40, (uint64_t)v113, (uint64_t)__src);
        v40 = *v41;
      }
      else
      {
        v41 = v113;
      }
      sub_1ACC88194(v24, (uint64_t)v41, &v111);
    }
    while (!*(_DWORD *)(v24 + 60));
  }
  v42 = 0;
  v43 = v109;
  v44 = v106;
  while (2)
  {
    if (!*v11)
      v102(a1, __src, v43, &v106[2 * v42]);
    v46 = v42 + v43;
    v47 = v44;
    do
    {
      v48 = *v47;
      if (*v47)
      {
        v49 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_58;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v48);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v48);
        v48 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v49 = &xmmword_1ECD3B1D0;
LABEL_58:
          (*v49)(v48);
        }
      }
      *v47 = 0;
      v47[1] = 0;
      v47 += 2;
      ++v42;
    }
    while (v42 < v46);
    v44 += 2 * v109;
    v42 = v46;
    v45 = v46 >= v105;
    v11 = v108;
    v43 = v109;
    if (!v45)
      continue;
    break;
  }
  sub_1ACC7D2A0((uint64_t)v113);
  v9 = v98;
  if (*v108)
    goto LABEL_67;
  v87 = SLODWORD(__src[1]);
  if (sqlite3_initialize() || (v90 = (_DWORD *)sub_1ACB5D828(v87 + 24)) == 0)
  {
    if ((int)v87 >= -23)
      *v108 = 7;
  }
  else
  {
    v91 = v90;
    bzero(v90, v87 + 24);
    *(_QWORD *)v91 = v91 + 4;
    v92 = SLODWORD(__src[1]);
    v91[2] = __src[1];
    v91[3] = v92;
    if ((_DWORD)v92)
      memcpy(v91 + 4, __src[0], v92);
    if (!*v108)
    {
      if (sqlite3_initialize() || (v94 = sub_1ACB5D828(376)) == 0)
      {
        *v108 = 7;
      }
      else
      {
        v95 = v94;
        *(_QWORD *)(v94 + 368) = 0;
        *(_OWORD *)(v94 + 336) = 0u;
        *(_OWORD *)(v94 + 352) = 0u;
        *(_OWORD *)(v94 + 304) = 0u;
        *(_OWORD *)(v94 + 320) = 0u;
        *(_OWORD *)(v94 + 272) = 0u;
        *(_OWORD *)(v94 + 288) = 0u;
        *(_OWORD *)(v94 + 240) = 0u;
        *(_OWORD *)(v94 + 256) = 0u;
        *(_OWORD *)(v94 + 208) = 0u;
        *(_OWORD *)(v94 + 224) = 0u;
        *(_OWORD *)(v94 + 176) = 0u;
        *(_OWORD *)(v94 + 192) = 0u;
        *(_OWORD *)(v94 + 144) = 0u;
        *(_OWORD *)(v94 + 160) = 0u;
        *(_OWORD *)(v94 + 112) = 0u;
        *(_OWORD *)(v94 + 128) = 0u;
        *(_OWORD *)(v94 + 80) = 0u;
        *(_OWORD *)(v94 + 96) = 0u;
        *(_OWORD *)(v94 + 48) = 0u;
        *(_OWORD *)(v94 + 64) = 0u;
        *(_OWORD *)(v94 + 16) = 0u;
        *(_OWORD *)(v94 + 32) = 0u;
        *(_OWORD *)v94 = 0u;
        *(_DWORD *)(v94 + 64) = 2;
        *(_QWORD *)(v94 + 88) = v94 + 368;
        *(_QWORD *)(v94 + 24) = a1;
        *(_QWORD *)(v94 + 56) = nullsub_14;
        *(_DWORD *)(v94 + 240) = 1;
        if ((int)v91[3] < 1)
        {
          *(_BYTE *)(v94 + 20) = 1;
        }
        else
        {
          *(_QWORD *)(v94 + 248) = v91;
          *(_QWORD *)(v94 + 264) = sub_1ACC7BBC8(*(char **)v91, (unint64_t *)(v94 + 352));
          *(_DWORD *)(v95 + 308) = v91[2];
          *(_WORD *)(*(_QWORD *)(v95 + 88) + 4) = 1;
          if ((v97 & 2) != 0)
          {
            *(_DWORD *)(v95 + 68) = 1;
            *(_DWORD *)(v95 + 240) |= 2u;
            sub_1ACC81290(a1, v95 + 232);
          }
          else
          {
            sub_1ACC80F28((uint64_t)a1, v95 + 232);
          }
          v91 = 0;
          v11 = v108;
        }
        if ((*(_BYTE *)(v95 + 240) & 2) != 0)
        {
          v96 = sub_1ACC8627C;
        }
        else if (*(_DWORD *)(*(_QWORD *)a1 + 92) == 1)
        {
          v96 = sub_1ACC86334;
        }
        else
        {
          v96 = sub_1ACC8674C;
        }
        *(_QWORD *)(v95 + 288) = v96;
        v110 = v95;
        if (!v91)
          goto LABEL_67;
      }
    }
    v93 = (uint64_t (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_173:
      (*v93)(v91);
      goto LABEL_67;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v91);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v91);
    v91 = (_DWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v93 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_173;
    }
  }
LABEL_67:
  v50 = __src[0];
  if (__src[0])
  {
    v51 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_73;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v50);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v50);
    v50 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v51 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_73:
      (*v51)(v50);
    }
  }
  sub_1ACC7A15C(v99);
  v35 = a6;
  v31 = v106;
LABEL_75:
  v52 = (uint64_t (**)(void *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v31);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v31);
    v31 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v52 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_80;
    }
  }
  else
  {
LABEL_80:
    (*v52)(v31);
  }
LABEL_81:
  v34 = v110;
  if (v110)
  {
    sub_1ACC858DC((uint64_t)v11, v110);
    if (*v11)
    {
      v53 = v9;
LABEL_88:
      v54 = *(_QWORD *)(v34 + 24);
      sub_1ACC7D2A0(v34);
      v55 = *(_QWORD **)(v54 + 64);
      if (v55)
      {
        *(_QWORD *)(v54 + 64) = 0;
        v56 = (sqlite3_stmt *)v55[3];
        v57 = (_QWORD *)v55[4];
        v58 = v57[3];
        if (v58)
          xmmword_1ECD3B1C0(v58);
        sub_1ACBE0F9C(v57, v55);
        v59 = v57[3];
        if (v59)
          xmmword_1ECD3B1D0(v59);
        sqlite3_finalize(v56);
      }
LABEL_94:
      v110 = 0;
      v60 = (_QWORD *)*((_QWORD *)a1 + 8);
      if (v60)
      {
        *((_QWORD *)a1 + 8) = 0;
        v61 = (sqlite3_stmt *)v60[3];
        v62 = (_QWORD *)v60[4];
        v63 = v62[3];
        if (v63)
          xmmword_1ECD3B1C0(v63);
        sub_1ACBE0F9C(v62, v60);
        v64 = v62[3];
        if (v64)
          xmmword_1ECD3B1D0(v64);
        sqlite3_finalize(v61);
      }
      v34 = 0;
      v9 = v53;
      goto LABEL_101;
    }
    if (*(_QWORD *)(v110 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 88) + 4) + 112))
      (*(void (**)(uint64_t, uint64_t))(v110 + 56))(v110, v110 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 88) + 4) + 96);
  }
LABEL_86:
  if (*v11)
  {
    v53 = v9;
    if (v34)
      goto LABEL_88;
    goto LABEL_94;
  }
LABEL_101:
  *v35 = v34;
  if (v9)
  {
    v65 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_107;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v9);
    v9 = (unsigned __int8 *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v65 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_107:
      (*v65)(v9);
    }
  }
  result = *v11;
LABEL_109:
  *v11 = 0;
  return result;
}

uint64_t sub_1ACC841A0(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, uint64_t *a9)
{
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int **v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t (**v40)(unsigned __int8 *);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  size_t v92;
  unint64_t v93;
  BOOL v94;
  int v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  int v99;
  void (**v100)(void);
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  _DWORD *v107;
  unsigned int v108;
  unint64_t v109;
  signed int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _DWORD *v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char *v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, _DWORD *);
  uint64_t v140;
  int *v141;
  int v142;
  int v143;
  char v144;
  uint64_t v145;
  int v146;
  int *v147;
  uint64_t v148;
  unsigned __int16 **v149;
  uint64_t v150;
  unsigned __int16 **v151;
  int v152;
  void (**v153)(unsigned __int16 **);
  unsigned __int16 **v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  int v167;
  _DWORD *v168;
  _DWORD *v169;
  _DWORD *v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t (**v174)(_QWORD);
  BOOL v175;
  int v176;
  unsigned __int16 **v177;
  _DWORD *v178;
  uint64_t (**v179)(_QWORD);
  uint64_t v180;
  uint64_t (**v181)(uint64_t);
  _DWORD *v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  BOOL v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  uint64_t *v210;
  uint64_t v211;
  unsigned int v212;
  signed int *v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  int v219;
  int v220;
  int v221;
  unsigned __int16 **v222;
  int *v223;
  int v224;
  unsigned int *v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int **v228;
  _QWORD *v229;
  uint64_t v230;
  int *v231;
  uint64_t **v232;
  unint64_t v234;
  _DWORD *v235;
  unint64_t v237[2];

  v12 = a9;
  v13 = result;
  v15 = (int *)(result + 60);
  v14 = *(_DWORD *)(result + 60);
  if (v14)
  {
    v16 = 0;
  }
  else if ((a7 & 0x80000000) != 0)
  {
    if ((a3 & 0x40) != 0 || *(_QWORD *)(result + 24) == 0)
      v16 = *(_DWORD *)(a2 + 24);
    else
      v16 = *(_DWORD *)(a2 + 24) + 1;
  }
  else if (*(_DWORD *)(a2 + 16 * a7 + 36) >= a8)
  {
    v16 = a8;
  }
  else
  {
    v16 = *(_DWORD *)(a2 + 16 * a7 + 36);
  }
  v18 = 2;
  do
  {
    v19 = v18;
    v18 *= 2;
  }
  while ((int)v19 < v16);
  if (v14)
    goto LABEL_304;
  v20 = 4 * v19 + 136 * (int)(v19 - 1) + 232;
  result = sqlite3_initialize();
  if ((_DWORD)result || (result = sub_1ACB5D828(v20)) == 0)
  {
    if (v20 >= 1)
      *v15 = 7;
    goto LABEL_304;
  }
  v21 = result;
  v231 = v15;
  bzero((void *)result, v20);
  *(_DWORD *)(v21 + 64) = v19;
  *(_QWORD *)(v21 + 88) = v21 + 136 * v19 + 96;
  *(_QWORD *)(v21 + 24) = v13;
  *(_QWORD *)(v21 + 56) = nullsub_14;
  *a9 = v21;
  *(_DWORD *)(v21 + 68) = (a3 >> 1) & 1;
  *(_BYTE *)(v21 + 72) = (a3 & 0x10) != 0;
  *(_QWORD *)(v21 + 48) = a4;
  v22 = v21;
  if ((a3 & 0x20) == 0)
    sub_1ACC858DC((uint64_t)v15, v21);
  if (*v15)
  {
LABEL_303:
    result = sub_1ACC7D2A0(v22);
LABEL_304:
    *v12 = 0;
    return result;
  }
  v235 = (_DWORD *)v13;
  if ((a7 & 0x80000000) == 0)
  {
    if (v16 >= 1)
    {
      v23 = v16 - 1;
      v24 = v21 + 96;
      do
      {
        sub_1ACC85D1C((_DWORD *)v13, *(_QWORD *)(a2 + 16 * a7 + 40) + 56 * v23--, v24);
        v24 += 136;
      }
      while (v23 != -1);
    }
    goto LABEL_302;
  }
  v25 = 0;
  v26 = a2 + 32;
  v214 = a2 + 32 + 16 * *(int *)(a2 + 28);
  if ((a3 & 0x40) == 0 && *(_QWORD *)(v13 + 24))
  {
    sub_1ACC859E8(v13, a5, a6, a3, v21 + 96);
    v25 = 1;
  }
  v27 = a5;
  if (v26 < v214)
  {
    v232 = (uint64_t **)(v13 + 104);
    v230 = v21;
    while (1)
    {
      v28 = *(unsigned int *)(v26 + 4);
      if ((int)v28 >= 1)
        break;
LABEL_34:
      v26 += 16;
      if (v26 >= v214)
        goto LABEL_302;
    }
    v29 = v25;
    v30 = v231;
    v234 = v26;
LABEL_39:
    v31 = v28 - 1;
    v32 = *(_QWORD *)(v26 + 8);
    v33 = v28 - 1;
    v34 = (unsigned int *)(v32 + 56 * (v28 - 1));
    v35 = v22 + 136 * v29;
    v36 = (unsigned int **)(v35 + 96);
    if (!v27)
    {
      sub_1ACC85D1C(v235, v32 + 56 * v33, v35 + 96);
      goto LABEL_45;
    }
    *(_QWORD *)(v35 + 224) = 0;
    *(_OWORD *)(v35 + 192) = 0u;
    *(_OWORD *)(v35 + 208) = 0u;
    *(_OWORD *)(v35 + 160) = 0u;
    *(_OWORD *)(v35 + 176) = 0u;
    *(_OWORD *)(v35 + 128) = 0u;
    *(_OWORD *)(v35 + 144) = 0u;
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v35 + 112) = 0u;
    *v36 = v34;
    if (*v232)
      goto LABEL_54;
    v228 = (unsigned int **)(v35 + 96);
    v37 = (unsigned __int8 *)sqlite3_mprintf("SELECT pgno FROM '%q'.'%q_idx' WHERE segid=? AND term<=? ORDER BY term DESC LIMIT 1", *(_QWORD *)(*(_QWORD *)v235 + 8), *(_QWORD *)(*(_QWORD *)v235 + 16));
    v39 = v37;
    if (v235[15])
    {
      v27 = a5;
      v31 = v28 - 1;
      v36 = v228;
      if (!v37)
        goto LABEL_38;
    }
    else
    {
      if (!v37)
      {
        *v30 = 7;
        v27 = a5;
        v31 = v28 - 1;
        goto LABEL_38;
      }
      v235[15] = sub_1ACB5C66C(**(_QWORD **)v235, v37, 0xFFFFFFFFLL, 133, 0, v232, 0, v38);
      v31 = v28 - 1;
      v36 = v228;
    }
    v40 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v39);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v39);
      v39 = (unsigned __int8 *)xmmword_1ECD3E930;
      v27 = a5;
      v22 = v230;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_54;
      v40 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v40)(v39);
    v27 = a5;
LABEL_54:
    if (*v30)
      goto LABEL_38;
    v41 = *v232;
    v42 = (int)*v34;
    if (!sub_1ACBA0E50((uint64_t)*v232, 0))
    {
      v43 = v41[16];
      if ((*(_WORD *)(v43 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v43, v42);
      }
      else
      {
        *(_QWORD *)v43 = v42;
        *(_WORD *)(v43 + 20) = 4;
      }
      v44 = *(_QWORD *)(*v41 + 24);
      if (v44)
        xmmword_1ECD3B1D0(v44);
    }
    if ((a6 & 0x80000000) != 0)
    {
      sub_1ACBBE20C(98722);
      v22 = v230;
    }
    else
    {
      v22 = v230;
      if (!sub_1ACBA0E50((uint64_t)v41, 1u))
      {
        v45 = sub_1ACB57870(v41[16] + 64, (char *)a5, a6, 0, 0);
        if (v45)
        {
          v46 = v45;
          v47 = *v41;
          *(_DWORD *)(v47 + 80) = v46;
          sub_1ACBE938C(v47, v46);
          sub_1ACBF2990(*v41, v46);
        }
        v48 = *(_QWORD *)(*v41 + 24);
        v22 = v230;
        if (v48)
          xmmword_1ECD3B1D0(v48);
      }
    }
    v49 = v31;
    if (sqlite3_step((sqlite3_stmt *)v41) == 100)
    {
      v50 = sqlite3_column_int((sqlite3_stmt *)v41, 0);
      v51 = v50 >> 1;
      v219 = v50 & 1;
    }
    else
    {
      v219 = 0;
      v51 = 1;
    }
    *v30 = sqlite3_reset((sqlite3_stmt *)v41);
    if (!sub_1ACBA0E50((uint64_t)v41, 1u))
    {
      v52 = *(_QWORD *)(*v41 + 24);
      if (v52)
        xmmword_1ECD3B1D0(v52);
    }
    v53 = *(_DWORD *)(v32 + 56 * v33 + 4);
    v221 = v53;
    if (v51 > v53)
      v53 = v51;
    v54 = v22 + 136 * v29;
    *(_DWORD *)(v54 + 108) = v53 - 1;
    v223 = (int *)(v54 + 108);
    v55 = v235;
    sub_1ACC80CD4((uint64_t)v235, v36);
    v58 = *(uint64_t **)(v54 + 112);
    v57 = (_QWORD *)(v54 + 112);
    v56 = v58;
    v229 = v57;
    if (!v58)
      goto LABEL_203;
    v59 = *v56;
    v60 = *((unsigned int *)v56 + 2);
    v61 = *((unsigned int *)v56 + 3);
    v62 = (char *)(*v56 + v61);
    v63 = *v62;
    if (*v62 < 0)
    {
      v65 = v62[1];
      if (v62[1] < 0)
      {
        v95 = v62[2];
        if (v95 < 0)
        {
          v237[0] = 0;
          v111 = v60;
          v217 = v56;
          v64 = sub_1ACC7BBC8(v62, v237);
          v56 = v217;
          v60 = v111;
          v63 = v237[0] & 0x7FFFFFFF;
          if ((v237[0] & 0x7FFFFFFF) > v60)
          {
LABEL_79:
            v30 = v231;
            *v231 = 267;
            v55 = v235;
            goto LABEL_203;
          }
        }
        else
        {
          v63 = v95 & 0x7F | (v63 << 14) & 0x1FC07F | ((v65 & 0x7F) << 7);
          v64 = 3;
          if (v63 > v60)
            goto LABEL_79;
        }
      }
      else
      {
        v63 = ((v63 & 0x7F) << 7) | v65;
        v64 = 2;
        if (v63 > v60)
          goto LABEL_79;
      }
    }
    else
    {
      v64 = 1;
      if (v63 > v60)
        goto LABEL_79;
    }
    v215 = v56;
    v224 = v51;
    v226 = v49;
    v66 = 0;
    v67 = 0;
    v68 = v64 + v61;
    v69 = v63;
    v70 = a5;
    while (1)
    {
      v72 = (char *)(v59 + v63);
      v73 = *v72;
      if (*v72 < 0)
      {
        v75 = v72[1];
        if (v72[1] < 0)
        {
          v77 = v72[2];
          if (v77 < 0)
          {
            v237[0] = 0;
            v79 = v60;
            v76 = sub_1ACC7BBC8(v72, v237);
            v60 = v79;
            v70 = a5;
            v73 = v237[0] & 0x7FFFFFFF;
          }
          else
          {
            v73 = v77 & 0x7F | (v73 << 14) & 0x1FC07F | ((v75 & 0x7F) << 7);
            v76 = 3;
          }
        }
        else
        {
          v73 = ((v73 & 0x7F) << 7) | v75;
          v76 = 2;
        }
        v74 = v76 + v63;
      }
      else
      {
        v74 = v63 + 1;
      }
      v30 = v231;
      if (v66 < v67)
      {
LABEL_121:
        if ((a3 & 8) == 0)
          goto LABEL_139;
        goto LABEL_122;
      }
      if (v66 == v67)
      {
        LODWORD(v80) = a6 - v66;
        if (v73 >= a6 - v66)
          v80 = v80;
        else
          v80 = v73;
        if ((_DWORD)v80)
        {
          v81 = 0;
          while (*(unsigned __int8 *)(v59 + v74 + v81) == v70[v66 + v81])
          {
            if (v80 == ++v81)
              goto LABEL_106;
          }
          LODWORD(v80) = v81;
        }
LABEL_106:
        v67 = v80 + v66;
        if ((_DWORD)v80 + v66 == a6)
        {
          if ((a3 & 8) == 0 && (_DWORD)v80 != v73)
          {
LABEL_139:
            v100 = (void (**)(void))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              v22 = v230;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v215);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v215);
              v55 = v235;
              v49 = v226;
              v57 = v229;
              v51 = v224;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v100 = (void (**)(void))&xmmword_1ECD3B1D0;
                goto LABEL_145;
              }
            }
            else
            {
              v55 = v235;
              v57 = v229;
              v22 = v230;
              v49 = v226;
              v51 = v224;
LABEL_145:
              (*v100)();
            }
            *v57 = 0;
            goto LABEL_203;
          }
LABEL_122:
          v91 = v74;
          v92 = v73;
          v93 = v74 + (unint64_t)v73;
          if (v73)
            v94 = v93 > v60;
          else
            v94 = 1;
          if (!v94)
          {
            v211 = v91;
            v101 = v91 + v73;
            v22 = v230;
            v102 = v230 + 136 * v29;
            *(_QWORD *)(v102 + 128) = v101;
            v103 = (_DWORD *)(v102 + 128);
            v103[8] = *v223;
            v103[9] = v101;
            v104 = (uint64_t *)(v103 + 18);
            v216 = (uint64_t *)v103;
            v103[20] = 0;
            v213 = v103 + 20;
            v212 = v60;
            if (v66)
            {
              v105 = v230 + 136 * v29;
              v108 = *(_DWORD *)(v105 + 212);
              v107 = (_DWORD *)(v105 + 212);
              LODWORD(v106) = v108;
              v210 = (uint64_t *)(v103 + 18);
              if (v108 >= v66)
              {
                v112 = 0;
                v113 = *v104;
                v114 = v66;
                goto LABEL_159;
              }
              if (!(_DWORD)v106)
                LODWORD(v106) = 64;
              v106 = (int)v106;
              do
              {
                v109 = v106;
                v106 *= 2;
              }
              while (v109 < v66);
              v208 = *v104;
              if (sqlite3_initialize() || (v113 = sub_1ACB6BB48(v208, v109)) == 0)
              {
                *v231 = 7;
                v110 = *v213;
                v22 = v230;
              }
              else
              {
                *v107 = v109;
                *v210 = v113;
                v112 = *v213;
                v22 = v230;
                v114 = v66;
LABEL_159:
                memcpy((void *)(v113 + v112), a5, v114);
                v110 = *v213 + v66;
                *v213 = v110;
              }
              v104 = v210;
            }
            else
            {
              v110 = 0;
            }
            v115 = (v110 + v92);
            v116 = v22 + 136 * v29;
            v119 = *(_DWORD *)(v116 + 212);
            v118 = (_DWORD *)(v116 + 212);
            v117 = v119;
            v57 = v229;
            if (v115 > v119)
            {
              v209 = v92;
              if (v117)
                LODWORD(v120) = v117;
              else
                LODWORD(v120) = 64;
              v120 = (int)v120;
              do
              {
                v121 = v120;
                v120 *= 2;
              }
              while (v121 < v115);
              v122 = v104;
              v123 = *v104;
              if (sqlite3_initialize() || (v124 = sub_1ACB6BB48(v123, v121)) == 0)
              {
                v30 = v231;
                *v231 = 7;
                v57 = v229;
                v22 = v230;
              }
              else
              {
                *v118 = v121;
                *v122 = v124;
                v110 = *v213;
                v57 = v229;
                v22 = v230;
                v92 = v209;
LABEL_170:
                memcpy((void *)(v124 + v110), (const void *)(v59 + v211), v92);
                *v213 += v92;
                v30 = v231;
              }
              if (v68 >= v212)
              {
                v128 = *v57;
                *(_DWORD *)(v22 + 136 * v29 + 172) = *(_DWORD *)(*v57 + 8) + 1;
              }
              else
              {
                v125 = (char *)(v59 + v68);
                v126 = *v125;
                if (*v125 < 0)
                {
                  v130 = v125[1];
                  if (v125[1] < 0)
                  {
                    v132 = v125[2];
                    if (v132 < 0)
                    {
                      v237[0] = 0;
                      v127 = sub_1ACC7BBC8(v125, v237);
                      v126 = v237[0] & 0x7FFFFFFF;
                    }
                    else
                    {
                      v126 = v132 & 0x7F | (v126 << 14) & 0x1FC07F | ((v130 & 0x7F) << 7);
                      v127 = 3;
                    }
                  }
                  else
                  {
                    v126 = ((v126 & 0x7F) << 7) | v130;
                    v127 = 2;
                  }
                }
                else
                {
                  v127 = 1;
                }
                v68 += v127;
                *(_DWORD *)(v22 + 136 * v29 + 172) = v126 + v69;
                v128 = *v57;
              }
              *(_DWORD *)(v22 + 136 * v29 + 168) = v68;
              v138 = *v216;
              v49 = v226;
              v51 = v224;
              if (*v216 < *(int *)(v128 + 12))
              {
LABEL_201:
                *v216 = v138
                      + sub_1ACC7BBC8((char *)(*(_QWORD *)v128 + v138), (unint64_t *)(v22 + 136 * v29 + 216));
                v55 = v235;
              }
              else
              {
                while (1)
                {
                  v55 = v235;
                  sub_1ACC80CD4((uint64_t)v235, v36);
                  v128 = *v57;
                  if (!*v57)
                    break;
                  if (*(int *)(v128 + 12) > 4)
                  {
                    v138 = 4;
                    goto LABEL_201;
                  }
                }
                if (!*v30)
                  *v30 = 267;
              }
              sub_1ACC80F28((uint64_t)v55, (uint64_t)v36);
              goto LABEL_203;
            }
            v124 = *v104;
            goto LABEL_170;
          }
LABEL_127:
          *v231 = 267;
          v55 = v235;
          v57 = v229;
          v22 = v230;
LABEL_128:
          v49 = v226;
          v51 = v224;
LABEL_203:
          v27 = a5;
          if (*v30 | a3 & 8)
            goto LABEL_204;
          v140 = v22 + 136 * v29;
          v143 = *(_DWORD *)(v140 + 104);
          v141 = (int *)(v140 + 104);
          v142 = v143;
          v144 = v143 | 1;
          *v141 = v143 | 1;
          v145 = *v57;
          if (!*v57)
            goto LABEL_204;
          if ((a3 & 2) != 0)
          {
            v144 = v142 | 3;
            *v141 = v142 | 3;
          }
          if (v51 >= v221)
          {
            if (v219)
            {
              v146 = *(_DWORD *)(v22 + 136 * v29 + 160);
              if (v146 != *v223 || *(_DWORD *)(v22 + 136 * v29 + 172) >= *(_DWORD *)(v145 + 12))
              {
                v147 = sub_1ACC86FC0((uint64_t)v55, v144 & 2, **v36, v146);
                v27 = a5;
                *(_QWORD *)(v22 + 136 * v29 + 192) = v147;
              }
            }
          }
          if ((a3 & 2) == 0)
            goto LABEL_204;
          v148 = *(_QWORD *)(v22 + 136 * v29 + 192);
          if (!v148 || *(_DWORD *)(*(_QWORD *)v55 + 128) != 4)
          {
            v159 = *v223;
            v150 = v49;
            if (*(_DWORD *)(v22 + 136 * v29 + 160) == (_DWORD)v159)
              v160 = *(unsigned int *)(v22 + 136 * v29 + 164);
            else
              v160 = 4;
            v161 = *v57;
            v162 = (int)v160;
            v163 = (int)v160 + 8;
            v164 = v160 << 32;
            do
            {
              v164 += 0x100000000;
              if ((*(char *)(*(_QWORD *)*v57 + v162) & 0x80000000) == 0)
                break;
              v94 = v162++ < v163;
            }
            while (v94);
            v165 = v22 + 136 * v29;
            *(_QWORD *)(v165 + 128) = v164 >> 32;
            if (*(_DWORD *)(v165 + 172) < *(_DWORD *)(v161 + 12) || *v30)
              goto LABEL_301;
            v222 = 0;
            v166 = *v36;
            v167 = v159 + 1;
            v225 = *v36;
            LODWORD(v227) = 0;
            while (2)
            {
              if (v159 >= (int)v166[2])
              {
LABEL_275:
                v30 = v231;
                v22 = v230;
                v151 = v222;
                if (v222)
                  goto LABEL_276;
LABEL_301:
                v49 = v150;
                sub_1ACC81290(v55, (uint64_t)v36);
                v27 = a5;
                goto LABEL_204;
              }
              v169 = sub_1ACC7B8EC((uint64_t)v55, v159 + ((unint64_t)*v166 << 37) + 1);
              if (!v169)
                goto LABEL_248;
              v170 = v169;
              v171 = v150;
              v172 = v169[2];
              if (v172 < 4 || (v173 = v169[3], v173 > v172))
              {
                *v231 = 267;
                v174 = &off_1ECD3B168;
                if (!dword_1ECD3B140)
                {
                  v168 = v235;
                  v150 = v171;
                  goto LABEL_246;
                }
                v168 = v235;
                v150 = v171;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v170);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v170);
                v170 = (_DWORD *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v174 = &xmmword_1ECD3B1D0;
LABEL_246:
                  (*v174)(v170);
                }
                v55 = v168;
                v166 = v225;
LABEL_248:
                ++v167;
                ++v159;
                if (*v231)
                  goto LABEL_275;
                continue;
              }
              break;
            }
            v175 = __rev16(**(unsigned __int16 **)v169) == 0;
            if (v175)
              v176 = v227;
            else
              v176 = v167;
            LODWORD(v227) = v176;
            v177 = v222;
            if (v175)
              v178 = v169;
            else
              v178 = v222;
            if (!v175)
              v177 = (unsigned __int16 **)v169;
            v222 = v177;
            if (v178)
            {
              v179 = &off_1ECD3B168;
              v220 = v169[3];
              if (!dword_1ECD3B140)
                goto LABEL_272;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v178);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v178);
              v178 = (_DWORD *)xmmword_1ECD3E930;
              v173 = v220;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v179 = &xmmword_1ECD3B1D0;
LABEL_272:
                (*v179)(v178);
                v173 = v220;
              }
            }
            v94 = v173 < v172;
            v150 = v171;
            v55 = v235;
            v57 = v229;
            if (v94)
              goto LABEL_275;
            goto LABEL_248;
          }
          v227 = *(int *)(v148 + 28);
          v149 = (unsigned __int16 **)sub_1ACC7B8EC((uint64_t)v55, v227 + ((unint64_t)**v36 << 37));
          v150 = v49;
          if (!v149)
            goto LABEL_301;
          v151 = v149;
          v152 = *((_DWORD *)v149 + 2);
          if (v152 < 4 || *((_DWORD *)v149 + 3) > v152)
          {
            *v30 = 267;
            v153 = (void (**)(unsigned __int16 **))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              v154 = v149;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v154);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v154);
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_301;
              v151 = (unsigned __int16 **)xmmword_1ECD3E930;
              v153 = (void (**)(unsigned __int16 **))&xmmword_1ECD3B1D0;
            }
            (*v153)(v151);
            goto LABEL_301;
          }
LABEL_276:
          v180 = *v57;
          if (v180)
          {
            v181 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_282;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v180);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v180);
            v180 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v181 = &xmmword_1ECD3B1D0;
LABEL_282:
              (*v181)(v180);
            }
          }
          v182 = v55;
          *v229 = v151;
          *v223 = v227;
          v183 = __rev16(**v151);
          if (*((_DWORD *)v151 + 3) >= (signed int)v183)
          {
            *(_QWORD *)(v22 + 136 * v29 + 128) = sub_1ACC7BBC8((char *)*v151 + v183, (unint64_t *)(v22 + 136 * v29 + 216))+ v183;
            v184 = *((_DWORD *)v151 + 2);
            v185 = *((int *)v151 + 3);
            if ((int)v185 >= v184)
            {
              v187 = v184 + 1;
              v189 = v22 + 136 * v29;
            }
            else
            {
              v186 = (char *)*v151 + v185;
              v187 = *v186;
              if (*v186 < 0)
              {
                v188 = v186[1];
                if (v186[1] < 0)
                {
                  v191 = v186[2];
                  if (v191 < 0)
                  {
                    v237[0] = 0;
                    sub_1ACC7BBC8(v186, v237);
                    v187 = v237[0] & 0x7FFFFFFF;
                  }
                  else
                  {
                    v187 = v191 & 0x7F | (v187 << 14) & 0x1FC07F | ((v188 & 0x7F) << 7);
                  }
                }
                else
                {
                  v187 = ((v187 & 0x7F) << 7) | v188;
                }
              }
              v189 = v22 + 136 * v29;
            }
            *(_DWORD *)(v189 + 172) = v187;
            v55 = v182;
            goto LABEL_301;
          }
          v49 = v150;
          *v30 = 267;
          v27 = a5;
          v55 = v182;
LABEL_204:
          if ((*(_BYTE *)(v22 + 136 * v29 + 104) & 2) != 0)
          {
            *(_QWORD *)(v22 + 136 * v29 + 152) = sub_1ACC8627C;
            v31 = v49;
          }
          else
          {
            v31 = v49;
            if (*(_DWORD *)(*(_QWORD *)v55 + 92) == 1)
              v139 = sub_1ACC86334;
            else
              v139 = sub_1ACC8674C;
            *(_QWORD *)(v22 + 136 * v29 + 152) = v139;
          }
          v155 = (*v36)[8];
          if ((int)v155 >= 1 && !*v30)
          {
            if (sqlite3_initialize() || (v156 = (void *)sub_1ACB5D828(16 * v155)) == 0)
            {
              *v30 = 7;
              v22 = v230;
              v27 = a5;
            }
            else
            {
              v157 = v156;
              bzero(v156, 16 * v155);
              v22 = v230;
              v158 = v230 + 136 * v29;
              *(_QWORD *)(v158 + 136) = v157;
              *(_DWORD *)(v158 + 144) = v155;
LABEL_45:
              v27 = a5;
            }
          }
LABEL_38:
          ++v29;
          v94 = v28 <= 1;
          v28 = v31;
          v26 = v234;
          if (v94)
          {
            v25 = v29;
            v12 = a9;
            goto LABEL_34;
          }
          goto LABEL_39;
        }
        if (v80 < v73 && *(unsigned __int8 *)(v59 + v80 + v74) > v70[v67])
          goto LABEL_121;
      }
      if (v68 >= v60)
      {
        if ((a3 & 8) == 0)
          goto LABEL_139;
        while (1)
        {
          v55 = v235;
          sub_1ACC80CD4((uint64_t)v235, v36);
          v57 = v229;
          v22 = v230;
          v96 = (uint64_t *)*v229;
          v49 = v226;
          v51 = v224;
          if (!*v229)
            goto LABEL_203;
          LODWORD(v60) = *((_DWORD *)v96 + 2);
          v97 = *((unsigned int *)v96 + 3);
          if ((int)v97 < (int)v60)
          {
            v59 = *v96;
            v98 = (char *)(*v96 + v97);
            v69 = *v98;
            if (*v98 < 0)
            {
              v129 = v98[1];
              if (v98[1] < 0)
              {
                v131 = v98[2];
                if (v131 < 0)
                {
                  v237[0] = 0;
                  v133 = v60;
                  v134 = sub_1ACC7BBC8(v98, v237);
                  LODWORD(v60) = v133;
                  v99 = v134;
                  v69 = v237[0] & 0x7FFFFFFF;
                }
                else
                {
                  v69 = v131 & 0x7F | (v69 << 14) & 0x1FC07F | ((v129 & 0x7F) << 7);
                  v99 = 3;
                }
              }
              else
              {
                v69 = ((v69 & 0x7F) << 7) | v129;
                v99 = 2;
              }
            }
            else
            {
              v99 = 1;
            }
            v57 = v229;
            if (v69 < 4 || v69 >= (uint64_t)(int)v97)
            {
              *v231 = 267;
              v55 = v235;
              v22 = v230;
              goto LABEL_128;
            }
            v135 = (char *)(v59 + v69);
            v73 = *v135;
            if (*v135 < 0)
            {
              v137 = v135[1];
              if (v135[1] < 0)
              {
                v190 = v135[2];
                if (v190 < 0)
                {
                  v237[0] = 0;
                  v192 = v60;
                  v136 = sub_1ACC7BBC8(v135, v237);
                  LODWORD(v60) = v192;
                  v73 = v237[0] & 0x7FFFFFFF;
                }
                else
                {
                  v73 = v190 & 0x7F | (v73 << 14) & 0x1FC07F | ((v137 & 0x7F) << 7);
                  v136 = 3;
                }
              }
              else
              {
                v73 = ((v73 & 0x7F) << 7) | v137;
                v136 = 2;
              }
            }
            else
            {
              v136 = 1;
            }
            v66 = 0;
            v68 = v99 + v97;
            v74 = v136 + v69;
            goto LABEL_122;
          }
        }
      }
      v82 = (char *)(v59 + v68);
      v83 = *v82;
      if (*v82 < 0)
      {
        v85 = v82[1];
        if (v82[1] < 0)
        {
          v86 = v82[2];
          if (v86 < 0)
          {
            v237[0] = 0;
            v87 = v60;
            v84 = sub_1ACC7BBC8(v82, v237);
            v60 = v87;
            v70 = a5;
            v83 = v237[0] & 0x7FFFFFFF;
          }
          else
          {
            v83 = v86 & 0x7F | (v83 << 14) & 0x1FC07F | ((v85 & 0x7F) << 7);
            v84 = 3;
          }
        }
        else
        {
          v83 = ((v83 & 0x7F) << 7) | v85;
          v84 = 2;
        }
      }
      else
      {
        v84 = 1;
      }
      v69 += v83;
      if (v69 >= v60)
        goto LABEL_127;
      v68 += v84;
      v63 = v69 + 1;
      v88 = (char *)(v59 + v69);
      v66 = *v88;
      if (*v88 < 0)
      {
        v71 = v88[1];
        if (v88[1] < 0)
        {
          v78 = v88[2];
          if (v78 < 0)
          {
            v237[0] = 0;
            v89 = v60;
            v90 = sub_1ACC7BBC8(v88, v237);
            v60 = v89;
            v70 = a5;
            v66 = v237[0] & 0x7FFFFFFF;
            v63 = v90 + v69;
          }
          else
          {
            v66 = v78 & 0x7F | (v66 << 14) & 0x1FC07F | ((v71 & 0x7F) << 7);
            v63 = v69 + 3;
          }
        }
        else
        {
          v66 = ((v66 & 0x7F) << 7) | v71;
          v63 = v69 + 2;
        }
      }
    }
  }
LABEL_302:
  if (*v231)
    goto LABEL_303;
  v193 = *(_DWORD *)(v22 + 64);
  if (v193 >= 2)
  {
    do
    {
      v194 = v193 - 1;
      v195 = sub_1ACC8145C(v22, v193 - 1);
      if (v195)
      {
        v196 = v195;
        if (!*v231)
          (*(void (**)(_DWORD *, uint64_t, _QWORD))(v22 + 136 * v195 + 152))(v235, v22 + 136 * v195 + 96, 0);
        v197 = *(_DWORD *)(v22 + 64);
        v198 = __OFADD__(v197, v196);
        v199 = v197 + v196;
        if (v199 < 0 != v198)
          ++v199;
        v200 = v199 >> 1;
        if (v199 >> 1 >= v194)
        {
          do
          {
            if (*v231)
              break;
            v202 = sub_1ACC8145C(v22, v200);
            v203 = v22;
            if (v202)
            {
              v204 = v202;
              (*(void (**)(_DWORD *, uint64_t, _QWORD))(v203 + 136 * v202 + 152))(v235, v203 + 136 * v202 + 96, 0);
              v200 = *(_DWORD *)(v203 + 64) + v204;
            }
            v201 = v200 >= 0 ? v200 : v200 + 1;
            v200 = v201 >> 1;
            v22 = v203;
          }
          while (v201 >> 1 >= v194);
        }
      }
      v94 = v193-- <= 2;
    }
    while (!v94);
  }
  v205 = *(unsigned __int16 *)(*(_QWORD *)(v22 + 88) + 4);
  v206 = v22 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v22 + 88) + 4);
  v207 = *(_QWORD *)(v206 + 112);
  *(_BYTE *)(v22 + 20) = v207 == 0;
  *(_QWORD *)(v22 + 80) = *(_QWORD *)(v206 + 216);
  if (*(_BYTE *)(v22 + 72) && !*v231 && v207 && !*(_DWORD *)(v22 + 136 * v205 + 224))
    return sub_1ACC800BC((uint64_t)v235, v22, 0, 0);
  result = sub_1ACC805D4(v22);
  if ((_DWORD)result)
    return sub_1ACC800BC((uint64_t)v235, v22, 0, 0);
  if (!*(_BYTE *)(v22 + 20))
    return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v22, v22 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v22 + 88) + 4) + 96);
  return result;
}

uint64_t sub_1ACC858DC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;

  if (!*(_DWORD *)result)
  {
    v3 = **(_QWORD **)(a2 + 24);
    v4 = *(_DWORD *)(v3 + 92);
    if (v4 == 1)
    {
      v5 = sub_1ACC884E8;
LABEL_19:
      *(_QWORD *)(a2 + 56) = v5;
      return result;
    }
    v6 = *(_DWORD **)(a2 + 48);
    if (!v6)
    {
      v5 = sub_1ACC884FC;
      goto LABEL_19;
    }
    if (!*v6)
    {
      v5 = sub_1ACC88568;
      goto LABEL_19;
    }
    if (!v4)
    {
      v5 = sub_1ACC88570;
      goto LABEL_19;
    }
    v7 = *(unsigned int *)(v3 + 24);
    if ((int)v7 > 100)
    {
      v5 = sub_1ACC888B8;
      goto LABEL_19;
    }
    *(_QWORD *)(a2 + 56) = sub_1ACC887C8;
    LODWORD(v8) = *(_DWORD *)(a2 + 44);
    if (v8 < v7)
    {
      v9 = (_DWORD *)result;
      if (!(_DWORD)v8)
        LODWORD(v8) = 64;
      v8 = (int)v8;
      do
      {
        v10 = v8;
        v8 *= 2;
      }
      while (v10 < v7);
      v11 = *(_QWORD *)(a2 + 32);
      result = sqlite3_initialize();
      if ((_DWORD)result || (result = sub_1ACB6BB48(v11, v10)) == 0)
      {
        *v9 = 7;
      }
      else
      {
        *(_DWORD *)(a2 + 44) = v10;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC859E8(uint64_t result, unsigned __int8 *__s2, int a3, char a4, uint64_t a5)
{
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = a3;
  v8 = __s2;
  v9 = result;
  v10 = *(_QWORD *)(result + 24);
  if (!__s2 || (a4 & 8) != 0)
  {
    result = sub_1ACC85E70(*(_QWORD *)(result + 24), __s2, a3);
    *(_DWORD *)(v9 + 60) = result;
    v13 = *(_QWORD *)(v9 + 24);
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      goto LABEL_21;
    v8 = (unsigned __int8 *)(v14 + 48);
    v15 = strlen((const char *)(v14 + 48));
    sub_1ACC86144((_DWORD *)v13, v14, 0);
    v16 = *(_DWORD *)(v14 + 24);
    result = strlen((const char *)(v14 + 48));
    if (*(_DWORD *)(v9 + 60))
      goto LABEL_21;
    v7 = result;
    result = sqlite3_initialize();
    if (!(_DWORD)result)
    {
      result = sub_1ACB5D828(16);
      if (result)
      {
        v21 = result;
        v22 = v16 - v15 - 49;
        *(_QWORD *)result = &v8[v15 + 1];
        *(_QWORD *)(result + 8) = 0;
        goto LABEL_31;
      }
    }
    *(_DWORD *)(v9 + 60) = 7;
  }
  else
  {
    if (a3 < 1)
    {
      v12 = 13;
    }
    else
    {
      v11 = a3 + 1;
      v12 = 13;
      do
        v12 ^= __s2[(v11-- - 2)] ^ (8 * v12);
      while (v11 > 1);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * (v12 % *(_DWORD *)(v10 + 20)));
    if (v17)
    {
      while (1)
      {
        if (*(_DWORD *)(v17 + 28) + 1 == v7)
        {
          result = memcmp((const void *)(v17 + 48), v8, (int)v7);
          if (!(_DWORD)result)
            break;
        }
        v17 = *(_QWORD *)v17;
        if (!v17)
          goto LABEL_19;
      }
      v18 = *(int *)(v17 + 24);
      result = sqlite3_initialize();
      if (!(_DWORD)result)
      {
        v23 = v18 - (int)(v7 + 49);
        result = sub_1ACB5D828(v23 + 26);
        if (result)
        {
          v21 = result;
          v31 = result + (int)(-33 - v7);
          v24 = result + 16;
          memcpy((void *)(result + 16), (const void *)(v17 + (int)(v7 + 49)), (int)v23);
          v22 = sub_1ACC86144((_DWORD *)v10, v17, v31) + v23;
          *(_DWORD *)(v9 + 60) = 0;
          *(_QWORD *)v21 = v24;
          *(_DWORD *)(a5 + 8) |= 1u;
LABEL_31:
          *(_DWORD *)(a5 + 112) = 0;
          if (!v7)
            goto LABEL_43;
          LODWORD(v25) = *(_DWORD *)(a5 + 116);
          if (v25 >= v7)
          {
            v29 = 0;
            v30 = *(_QWORD *)(a5 + 104);
            v26 = v7;
          }
          else
          {
            if (!(_DWORD)v25)
              LODWORD(v25) = 64;
            v25 = (int)v25;
            v26 = v7;
            do
            {
              v27 = v25;
              v25 *= 2;
            }
            while (v27 < v7);
            v28 = *(_QWORD *)(a5 + 104);
            if (sqlite3_initialize() || (v30 = sub_1ACB6BB48(v28, v27)) == 0)
            {
              *(_DWORD *)(v9 + 60) = 7;
              goto LABEL_43;
            }
            *(_DWORD *)(a5 + 116) = v27;
            *(_QWORD *)(a5 + 104) = v30;
            v29 = *(int *)(a5 + 112);
          }
          memcpy((void *)(v30 + v29), v8, v26);
          *(_DWORD *)(a5 + 112) += v7;
LABEL_43:
          *(_DWORD *)(v21 + 8) = v22;
          *(_DWORD *)(v21 + 12) = v22;
          *(_QWORD *)(a5 + 16) = v21;
          *(_QWORD *)(a5 + 32) = sub_1ACC7BBC8(*(char **)v21, (unint64_t *)(a5 + 120));
          *(_DWORD *)(a5 + 76) = *(_DWORD *)(v21 + 8);
          if ((a4 & 2) != 0)
          {
            *(_DWORD *)(a5 + 8) |= 2u;
            result = sub_1ACC81290((_DWORD *)v9, a5);
          }
          else
          {
            result = sub_1ACC80F28(v9, a5);
          }
          goto LABEL_21;
        }
      }
      v19 = 7;
    }
    else
    {
LABEL_19:
      v19 = 0;
    }
    *(_DWORD *)(v9 + 60) = v19;
    *(_DWORD *)(a5 + 8) |= 1u;
  }
LABEL_21:
  if ((*(_BYTE *)(a5 + 8) & 2) != 0)
  {
    v20 = sub_1ACC8627C;
  }
  else if (*(_DWORD *)(*(_QWORD *)v9 + 92) == 1)
  {
    v20 = sub_1ACC86334;
  }
  else
  {
    v20 = sub_1ACC8674C;
  }
  *(_QWORD *)(a5 + 56) = v20;
  return result;
}

void sub_1ACC85D1C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (*(_DWORD *)(a2 + 4) && !a1[15])
  {
    *(_QWORD *)(a3 + 128) = 0;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    if ((*(_BYTE *)(a3 + 8) & 2) != 0)
    {
      v5 = sub_1ACC8627C;
    }
    else if (*(_DWORD *)(*(_QWORD *)a1 + 92) == 1)
    {
      v5 = sub_1ACC86334;
    }
    else
    {
      v5 = sub_1ACC8674C;
    }
    *(_QWORD *)(a3 + 56) = v5;
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 4) - 1;
    while (1)
    {
      sub_1ACC80CD4((uint64_t)a1, (unsigned int **)a3);
      if (a1[15])
        break;
      v6 = *(_QWORD *)(a3 + 16);
      if (!v6)
        break;
      if (*(_DWORD *)(v6 + 8) != 4)
      {
        *(_QWORD *)(a3 + 32) = 4;
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(v6 + 12) + 1;
        sub_1ACC86D44((uint64_t)a1, a3, 0);
        sub_1ACC80F28((uint64_t)a1, a3);
        v7 = *(unsigned int *)(*(_QWORD *)a3 + 32);
        if ((int)v7 >= 1 && !a1[15])
        {
          if (sqlite3_initialize() || (v8 = (void *)sub_1ACB5D828(16 * v7)) == 0)
          {
            a1[15] = 7;
          }
          else
          {
            v9 = v8;
            bzero(v8, 16 * v7);
            *(_QWORD *)(a3 + 40) = v9;
            *(_DWORD *)(a3 + 48) = v7;
          }
        }
        return;
      }
    }
  }
}

uint64_t sub_1ACC85E70(uint64_t a1, const void *a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *j;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t (**v28)(uint64_t *);
  uint64_t v29;

  *(_QWORD *)(a1 + 24) = 0;
  if (sqlite3_initialize())
    return 7;
  v7 = (uint64_t *)sub_1ACB5D828(256);
  if (!v7)
    return 7;
  v8 = v7;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v9 = *(unsigned int *)(a1 + 20);
  if ((int)v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      for (j = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8 * i); j; j = (uint64_t *)*j)
      {
        if (!a2 || *((_DWORD *)j + 7) + 1 >= a3 && !memcmp(j + 6, a2, a3))
        {
          j[1] = 0;
          v12 = *v8;
          v13 = (uint64_t)j;
          v14 = v8;
          if (*v8)
          {
            v15 = 0;
            v13 = (uint64_t)j;
            do
            {
              v29 = 0;
              v16 = &v29;
              do
              {
                if (v13)
                {
                  if (v12)
                  {
                    v17 = 48;
                    do
                    {
                      v18 = *(unsigned __int8 *)(v13 + v17);
                      v19 = *(unsigned __int8 *)(v12 + v17++);
                    }
                    while (v18 == v19);
                    if (v18 > v19)
                    {
                      *v16 = v12;
                      v16 = (uint64_t *)(v12 + 8);
                      v12 = *(_QWORD *)(v12 + 8);
                    }
                    else
                    {
                      *v16 = v13;
                      v16 = (uint64_t *)(v13 + 8);
                      v13 = *(_QWORD *)(v13 + 8);
                    }
                    *v16 = 0;
                  }
                  else
                  {
                    *v16 = v13;
                    v13 = 0;
                  }
                }
                else
                {
                  *v16 = v12;
                  v12 = 0;
                }
              }
              while (v13 | v12);
              v13 = v29;
              v8[v15++] = 0;
              v14 = &v8[v15];
              v12 = *v14;
            }
            while (*v14);
          }
          *v14 = v13;
        }
      }
    }
  }
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = 0;
    v23 = v8[v20];
    v29 = 0;
    if (v21 | v23)
    {
      v24 = &v29;
      do
      {
        if (v21)
        {
          if (v23)
          {
            v25 = 48;
            do
            {
              v26 = *(unsigned __int8 *)(v21 + v25);
              v27 = *(unsigned __int8 *)(v23 + v25++);
            }
            while (v26 == v27);
            if (v26 > v27)
            {
              *v24 = v23;
              v24 = (uint64_t *)(v23 + 8);
              v23 = *(_QWORD *)(v23 + 8);
            }
            else
            {
              *v24 = v21;
              v24 = (uint64_t *)(v21 + 8);
              v21 = *(_QWORD *)(v21 + 8);
            }
            *v24 = 0;
          }
          else
          {
            *v24 = v21;
            v21 = 0;
          }
        }
        else
        {
          *v24 = v23;
          v23 = 0;
        }
      }
      while (v21 | v23);
      v22 = v29;
    }
    ++v20;
    v21 = v22;
  }
  while (v20 != 32);
  v28 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = (uint64_t *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_51;
    v28 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
  }
  (*v28)(v8);
LABEL_51:
  result = 0;
  *(_QWORD *)(a1 + 24) = v22;
  return result;
}

uint64_t sub_1ACC86144(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int8x8_t *v14;

  v3 = *(int *)(a2 + 20);
  if (!(_DWORD)v3)
    return 0;
  if (a3)
    v6 = a3;
  else
    v6 = a2;
  v7 = *(_DWORD *)(a2 + 24);
  if (*a1 == 1)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v8 = v7 + 1;
      *(_BYTE *)(v6 + v7) = 0;
      if (*(_BYTE *)(a2 + 33))
      {
        v7 += 2;
        *(_BYTE *)(v6 + v8) = 0;
      }
      else
      {
        ++v7;
      }
    }
  }
  else
  {
    v10 = v7 + ~(_DWORD)v3;
    v11 = *(unsigned __int8 *)(a2 + 32) + 2 * v10;
    if ((int)v11 > 127)
    {
      if (v11 >= 0x4000)
      {
        if (v11 >> 28)
          v13 = 5;
        else
          v13 = 4;
        if (v11 >= 0x200000)
          v12 = v13;
        else
          v12 = 3;
      }
      else
      {
        v12 = 2;
      }
      memmove((void *)(v6 + v12 + (int)v3), (const void *)(v3 + v6 + 1), v10);
      v14 = (int8x8_t *)(v6 + *(int *)(a2 + 20));
      if (v11 >> 14)
      {
        sub_1ACBF8034(v14, v11);
      }
      else
      {
        v14->i8[0] = (v11 >> 7) | 0x80;
        v14->i8[1] = v11 & 0x7F;
      }
      v7 = v7 + v12 - 1;
    }
    else
    {
      *(_BYTE *)(v6 + v3) = *(_BYTE *)(a2 + 32) + 2 * v10;
    }
  }
  result = (v7 - *(_DWORD *)(a2 + 24));
  if (!a3)
  {
    *(_WORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = v7;
  }
  return result;
}

unsigned __int16 **sub_1ACC8627C(unsigned __int16 **a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int16 **result;
  unint64_t v10;

  v4 = *(_DWORD *)(a2 + 80);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    return sub_1ACC807B4(a1, (unsigned int **)a2);
  v7 = **(_QWORD **)(a2 + 16);
  v10 = 0;
  *(_DWORD *)(a2 + 80) = v6;
  *(_QWORD *)(a2 + 32) = *(int *)(*(_QWORD *)(a2 + 88) + 4 * v6);
  sub_1ACC80F28((uint64_t)a1, a2);
  v8 = *(_DWORD *)(a2 + 32);
  if (*((_DWORD *)*a1 + 23) != 1)
    v8 += *(_DWORD *)(a2 + 128);
  result = (unsigned __int16 **)sub_1ACC7BBC8((char *)(v7 + v8), &v10);
  *(_QWORD *)(a2 + 120) -= v10;
  return result;
}

uint64_t sub_1ACC86334(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t);
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 32);
  if (!*(_QWORD *)a2)
  {
    v7 = 1;
    goto LABEL_5;
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 12) > v6)
  {
    v7 = 0;
LABEL_5:
    if (v6 < *(_DWORD *)(a2 + 76))
    {
      v38 = 0;
      *(_QWORD *)(a2 + 32) = (int)(v6 + sub_1ACC7BBC8((char *)(**(_QWORD **)(a2 + 16) + v6), &v38));
      *(_QWORD *)(a2 + 120) += v38;
      return sub_1ACC80F28(v5, a2);
    }
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    {
      if (!v7)
      {
        v25 = *(uint64_t **)(a2 + 16);
        v26 = *v25;
        v27 = (char *)(*v25 + *((int *)v25 + 3));
        v28 = *v27;
        if (*v27 < 0)
        {
          v29 = v27[1];
          if (v27[1] < 0)
          {
            v32 = v27[2];
            if (v32 < 0)
            {
              v38 = 0;
              sub_1ACC7BBC8(v27, &v38);
              v28 = v38 & 0x7FFFFFFF;
            }
            else
            {
              v28 = v32 & 0x7F | (v28 << 14) & 0x1FC07F | ((v29 & 0x7F) << 7);
            }
          }
          else
          {
            v28 = ((v28 & 0x7F) << 7) | v29;
          }
        }
        if (v6 == v28)
        {
          v33 = 0;
        }
        else
        {
          v34 = (char *)(v26 + v6);
          v33 = *v34;
          if (*v34 < 0)
          {
            v36 = v34[1];
            if (v34[1] < 0)
            {
              v37 = v34[2];
              if (v37 < 0)
              {
                v38 = 0;
                v35 = sub_1ACC7BBC8(v34, &v38);
                v33 = v38 & 0x7FFFFFFF;
              }
              else
              {
                v33 = v37 & 0x7F | (v33 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
                v35 = 3;
              }
            }
            else
            {
              v33 = ((v33 & 0x7F) << 7) | v36;
              v35 = 2;
            }
          }
          else
          {
            v35 = 1;
          }
          v6 += v35;
        }
        *(_QWORD *)(a2 + 32) = v6;
        sub_1ACC86D44(v5, a2, v33);
        if (!a3)
          return sub_1ACC80F28(v5, a2);
LABEL_60:
        *a3 = 1;
        return sub_1ACC80F28(v5, a2);
      }
      v8 = *(_QWORD *)(v5 + 24);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
      *(_QWORD *)(v8 + 24) = v9;
      if (v9)
      {
        v10 = (const void *)(v9 + 48);
        v11 = strlen((const char *)(v9 + 48));
        sub_1ACC86144((_DWORD *)v8, v9, 0);
        v12 = (char *)(v9 + 48 + v11 + 1);
        v13 = *(_QWORD *)(a2 + 16);
        v14 = *(_DWORD *)(v9 + 24) - v11 - 49;
        *(_QWORD *)v13 = v12;
        *(_DWORD *)(v13 + 8) = v14;
        *(_DWORD *)(v13 + 12) = v14;
        *(_DWORD *)(a2 + 76) = v14;
        v15 = strlen((const char *)(v9 + 48));
        v16 = v15;
        *(_DWORD *)(a2 + 112) = 0;
        if (!v15)
          goto LABEL_41;
        LODWORD(v17) = *(_DWORD *)(a2 + 116);
        if (v17 >= v15)
        {
          v30 = 0;
          v31 = *(_QWORD *)(a2 + 104);
          v18 = v16;
        }
        else
        {
          if (!(_DWORD)v17)
            LODWORD(v17) = 64;
          v17 = (int)v17;
          v18 = v15;
          do
          {
            v19 = v17;
            v17 *= 2;
          }
          while (v19 < v15);
          v20 = *(_QWORD *)(a2 + 104);
          if (sqlite3_initialize() || (v31 = sub_1ACB6BB48(v20, v19)) == 0)
          {
            *(_DWORD *)(v5 + 60) = 7;
            goto LABEL_41;
          }
          *(_DWORD *)(a2 + 116) = v19;
          *(_QWORD *)(a2 + 104) = v31;
          v30 = *(int *)(a2 + 112);
        }
        memcpy((void *)(v31 + v30), v10, v18);
        *(_DWORD *)(a2 + 112) += v16;
LABEL_41:
        *(_QWORD *)(a2 + 32) = sub_1ACC7BBC8(v12, (unint64_t *)(a2 + 120));
        if (!a3)
          return sub_1ACC80F28(v5, a2);
        goto LABEL_60;
      }
    }
    v23 = *(_QWORD *)(a2 + 16);
    if (!v23)
      goto LABEL_33;
    v24 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v23);
      v23 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_33;
      v24 = &xmmword_1ECD3B1D0;
    }
    result = (*v24)(v23);
LABEL_33:
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  result = sub_1ACC80CD4(result, (unsigned int **)a2);
  if (!*(_DWORD *)(v5 + 60))
  {
    v21 = *(_QWORD *)(a2 + 16);
    if (v21)
    {
      *(_QWORD *)(a2 + 120) = 0;
      if (*(_QWORD *)a2)
      {
        while (1)
        {
          v22 = *(_DWORD *)(v21 + 12);
          v7 = v22 < 5;
          if (v22 > 4)
            break;
          result = sub_1ACC80CD4(v5, (unsigned int **)a2);
          if (*(_DWORD *)(v5 + 60))
            return result;
          v21 = *(_QWORD *)(a2 + 16);
          if (!v21)
            return result;
          *(_QWORD *)(a2 + 120) = 0;
          v6 = 4;
          if (!*(_QWORD *)a2)
            goto LABEL_5;
        }
        v6 = 4;
      }
      else
      {
        v7 = 1;
        v6 = 4;
      }
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1ACC8674C(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int16 **v15;
  char *v16;
  int v17;
  BOOL v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int v32;
  char *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t (**v56)(uint64_t *);
  unint64_t v57;

  v5 = result;
  v6 = *(uint64_t **)(a2 + 16);
  v7 = *((int *)v6 + 3);
  v8 = *(_DWORD *)(a2 + 128) + *(_DWORD *)(a2 + 32);
  if (v8 >= (int)v7)
  {
    if (*(_QWORD *)a2)
    {
      LODWORD(v13) = 0;
      v14 = 0;
      while (!(_DWORD)v13)
      {
        result = sub_1ACC80CD4(v5, (unsigned int **)a2);
        v15 = *(unsigned __int16 ***)(a2 + 16);
        if (!v15)
          return result;
        v16 = (char *)*v15;
        LODWORD(v13) = __rev16(**v15);
        v17 = *((_DWORD *)v15 + 3);
        if ((_DWORD)v13)
          v18 = v17 <= (int)v13;
        else
          v18 = 1;
        if (v18)
        {
          if (*((_DWORD *)v15 + 2) > v17)
          {
            v19 = &v16[v17];
            LODWORD(v13) = *v19;
            if (*v19 < 0)
            {
              v22 = v19[1];
              if (v19[1] < 0)
              {
                v24 = v19[2];
                if (v24 < 0)
                {
                  v57 = 0;
                  result = sub_1ACC7BBC8(v19, &v57);
                  LODWORD(v13) = v57 & 0x7FFFFFFF;
                }
                else
                {
                  LODWORD(v13) = v24 & 0x7F | ((_DWORD)v13 << 14) & 0x1FC07F | ((v22 & 0x7F) << 7);
                  result = 3;
                }
              }
              else
              {
                LODWORD(v13) = ((v13 & 0x7F) << 7) | v22;
                result = 2;
              }
            }
            else
            {
              result = 1;
            }
            *(_QWORD *)(a2 + 32) = v13;
            *(_DWORD *)(a2 + 72) = result + v17;
            *(_DWORD *)(a2 + 76) = v13;
            v14 = 1;
          }
        }
        else
        {
          result = sub_1ACC7BBC8(&v16[v13], (unint64_t *)(a2 + 120));
          v13 = (result + v13);
          *(_QWORD *)(a2 + 32) = v13;
          v17 = *((_DWORD *)v15 + 3);
          if (*((_DWORD *)v15 + 2) > v17)
          {
            v20 = (char *)*v15 + v17;
            v21 = *v20;
            if (*v20 < 0)
            {
              v23 = v20[1];
              if (v20[1] < 0)
              {
                v25 = v20[2];
                if (v25 < 0)
                {
                  v57 = 0;
                  result = sub_1ACC7BBC8(v20, &v57);
                  *(_DWORD *)(a2 + 76) = v57 & 0x7FFFFFFF;
                }
                else
                {
                  *(_DWORD *)(a2 + 76) = v25 & 0x7F | (v21 << 14) & 0x1FC07F | ((v23 & 0x7F) << 7);
                  result = 3;
                }
              }
              else
              {
                *(_DWORD *)(a2 + 76) = ((v21 & 0x7F) << 7) | v23;
                result = 2;
              }
            }
            else
            {
              *(_DWORD *)(a2 + 76) = v21;
              result = 1;
            }
            *(_DWORD *)(a2 + 72) = result + v17;
            v17 = *((_DWORD *)v15 + 3);
          }
        }
        if ((int)v13 > v17)
        {
          *(_DWORD *)(v5 + 60) = 267;
          return result;
        }
      }
      v6 = *(uint64_t **)(a2 + 16);
      if (!v6)
        return result;
      v11 = 0;
      if (v14)
      {
LABEL_80:
        if ((*(_BYTE *)(a2 + 8) & 1) == 0)
        {
          sub_1ACC86D44(v5, a2, v11);
          result = sub_1ACC80F28(v5, a2);
          if (a3)
            *a3 = 1;
          return result;
        }
LABEL_83:
        v56 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
          --qword_1ECD3E8D0;
          result = off_1ECD3B168(v6);
          v6 = (uint64_t *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_89;
          v56 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
        }
        result = (*v56)(v6);
LABEL_89:
        *(_QWORD *)(a2 + 16) = 0;
        return result;
      }
      goto LABEL_47;
    }
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      goto LABEL_83;
    v29 = *(_QWORD *)(result + 24);
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8);
    *(_QWORD *)(v29 + 24) = v30;
    if (!v30)
      goto LABEL_83;
    v31 = (const void *)(v30 + 48);
    v32 = strlen((const char *)(v30 + 48));
    sub_1ACC86144((_DWORD *)v29, v30, 0);
    v33 = (char *)(v30 + 48 + v32 + 1);
    v34 = *(_QWORD *)(a2 + 16);
    v35 = *(_DWORD *)(v30 + 24) - v32;
    *(_QWORD *)v34 = v33;
    *(_DWORD *)(v34 + 8) = v35 - 49;
    *(_DWORD *)(v34 + 12) = v35 - 49;
    *(_DWORD *)(a2 + 76) = v35 - 48;
    v36 = strlen((const char *)(v30 + 48));
    v37 = v36;
    *(_DWORD *)(a2 + 112) = 0;
    if (v36)
    {
      LODWORD(v38) = *(_DWORD *)(a2 + 116);
      if (v38 >= v36)
      {
        v52 = 0;
        v53 = *(_QWORD *)(a2 + 104);
        v39 = v37;
      }
      else
      {
        if (!(_DWORD)v38)
          LODWORD(v38) = 64;
        v38 = (int)v38;
        v39 = v36;
        do
        {
          v40 = v38;
          v38 *= 2;
        }
        while (v40 < v36);
        v41 = *(_QWORD *)(a2 + 104);
        if (sqlite3_initialize() || (v53 = sub_1ACB6BB48(v41, v40)) == 0)
        {
          *(_DWORD *)(v5 + 60) = 7;
          goto LABEL_74;
        }
        *(_DWORD *)(a2 + 116) = v40;
        *(_QWORD *)(a2 + 104) = v53;
        v52 = *(int *)(a2 + 112);
      }
      memcpy((void *)(v53 + v52), v31, v39);
      *(_DWORD *)(a2 + 112) += v37;
    }
LABEL_74:
    result = sub_1ACC7BBC8(v33, (unint64_t *)(a2 + 120));
    v42 = result;
    *(_QWORD *)(a2 + 32) = result;
    *a3 = 1;
    v6 = *(uint64_t **)(a2 + 16);
    if (!v6)
      return result;
    goto LABEL_48;
  }
  v9 = *v6;
  if (v8 < *(_DWORD *)(a2 + 76))
  {
    v57 = 0;
    v10 = sub_1ACC7BBC8((char *)(v9 + v8), &v57);
    v11 = 0;
    v12 = 0;
    v8 += v10;
    *(_QWORD *)(a2 + 120) += v57;
    goto LABEL_79;
  }
  v26 = v9 + v7;
  v27 = *(char *)(v9 + v7);
  v28 = *(unsigned __int8 *)(v9 + v7);
  if (v27 < 0)
  {
    v45 = *(unsigned __int8 *)(v26 + 1);
    if (*(char *)(v26 + 1) < 0)
    {
      v50 = *(char *)(v26 + 2);
      if (v50 < 0)
      {
        v57 = 0;
        sub_1ACC7BBC8((char *)v26, &v57);
        if (v8 == (v57 & 0x7FFFFFFF))
          goto LABEL_34;
      }
      else if (v8 == (v50 & 0x7F | (v28 << 14) & 0x1FC07F | ((v45 & 0x7F) << 7)))
      {
        goto LABEL_34;
      }
    }
    else if (v8 == (((v28 & 0x7F) << 7) | v45))
    {
      goto LABEL_34;
    }
LABEL_53:
    v46 = (char *)(v9 + v8);
    v11 = *v46;
    if (*v46 < 0)
    {
      v49 = v46[1];
      if (v46[1] < 0)
      {
        v54 = v46[2];
        if (v54 < 0)
        {
          v57 = 0;
          v47 = sub_1ACC7BBC8(v46, &v57);
          v11 = v57 & 0x7FFFFFFF;
        }
        else
        {
          v11 = v54 & 0x7F | (v11 << 14) & 0x1FC07F | ((v49 & 0x7F) << 7);
          v47 = 3;
        }
      }
      else
      {
        v11 = ((v11 & 0x7F) << 7) | v49;
        v47 = 2;
      }
    }
    else
    {
      v47 = 1;
    }
    v8 += v47;
    goto LABEL_78;
  }
  if (v8 != v28)
    goto LABEL_53;
LABEL_34:
  v11 = 0;
LABEL_78:
  v12 = 1;
LABEL_79:
  *(_QWORD *)(a2 + 32) = v8;
  if (v12)
    goto LABEL_80;
LABEL_47:
  v42 = *(_QWORD *)(a2 + 32);
LABEL_48:
  v43 = *v6;
  *(_QWORD *)(a2 + 32) = v42 + 1;
  result = v43 + v42;
  v44 = *(char *)(v43 + v42);
  if ((v44 & 0x80000000) != 0)
  {
    *(_QWORD *)(a2 + 32) = v42;
    v44 = *(unsigned __int8 *)result;
    if (*(char *)result < 0)
    {
      v51 = *(unsigned __int8 *)(result + 1);
      if (*(char *)(result + 1) < 0)
      {
        v55 = *(char *)(result + 2);
        if (v55 < 0)
        {
          v57 = 0;
          result = sub_1ACC7BBC8((char *)result, &v57);
          v44 = v57 & 0x7FFFFFFF;
          v48 = result;
        }
        else
        {
          v44 = v55 & 0x7F | (v44 << 14) & 0x1FC07F | ((v51 & 0x7F) << 7);
          v48 = 3;
        }
      }
      else
      {
        v44 = ((v44 & 0x7F) << 7) | v51;
        v48 = 2;
      }
    }
    else
    {
      v48 = 1;
    }
    *(_QWORD *)(a2 + 32) = v48 + v42;
  }
  else
  {
    v44 = v44;
  }
  *(_BYTE *)(a2 + 132) = v44 & 1;
  *(_DWORD *)(a2 + 128) = v44 >> 1;
  return result;
}

char *sub_1ACC86D44(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;

  v6 = *(uint64_t **)(a2 + 16);
  v7 = *v6;
  v8 = *(_QWORD *)(a2 + 32);
  result = (char *)(*v6 + v8);
  v10 = *result;
  if (*result < 0)
  {
    v12 = result[1];
    if (result[1] < 0)
    {
      v13 = result[2];
      if (v13 < 0)
      {
        v32 = 0;
        result = (char *)sub_1ACC7BBC8(result, &v32);
        v10 = v32 & 0x7FFFFFFF;
        v11 = result;
      }
      else
      {
        v10 = v13 & 0x7F | (v10 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
        v11 = 3;
      }
    }
    else
    {
      v10 = ((v10 & 0x7F) << 7) | v12;
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  v14 = v11 + v8;
  v15 = v10;
  v16 = v14 + v10;
  if (v16 > *((int *)v6 + 3) || (v10 ? (v17 = *(_DWORD *)(a2 + 112) < a3) : (v17 = 1), v17))
  {
LABEL_14:
    *(_DWORD *)(a1 + 60) = 267;
    return result;
  }
  *(_DWORD *)(a2 + 112) = a3;
  v18 = v10 + a3;
  LODWORD(v19) = *(_DWORD *)(a2 + 116);
  if (v18 <= v19)
  {
    v22 = *(_QWORD *)(a2 + 104);
  }
  else
  {
    if (!(_DWORD)v19)
      LODWORD(v19) = 64;
    v19 = (int)v19;
    do
    {
      v20 = v19;
      v19 *= 2;
    }
    while (v20 < v18);
    v21 = *(_QWORD *)(a2 + 104);
    if (sqlite3_initialize() || (v22 = sub_1ACB6BB48(v21, v20)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      goto LABEL_25;
    }
    *(_DWORD *)(a2 + 116) = v20;
    *(_QWORD *)(a2 + 104) = v22;
    a3 = *(_DWORD *)(a2 + 112);
  }
  memcpy((void *)(v22 + a3), (const void *)(v7 + v14), v15);
  *(_DWORD *)(a2 + 112) += v15;
LABEL_25:
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 68) = v16;
  *(_QWORD *)(a2 + 32) = v16;
  v23 = *(int *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 16);
  v25 = *(_DWORD *)(v24 + 8);
  if ((int)v23 >= v25)
  {
    v29 = v25 + 1;
  }
  else
  {
    v26 = v7 + v23;
    v27 = *(unsigned __int8 *)(v7 + v23);
    if (*(char *)(v7 + v23) < 0)
    {
      v30 = *(unsigned __int8 *)(v26 + 1);
      if (*(char *)(v26 + 1) < 0)
      {
        v31 = *(char *)(v26 + 2);
        if (v31 < 0)
        {
          v32 = 0;
          v28 = sub_1ACC7BBC8((char *)v26, &v32);
          v27 = v32 & 0x7FFFFFFF;
        }
        else
        {
          v27 = v31 & 0x7F | (v27 << 14) & 0x1FC07F | ((v30 & 0x7F) << 7);
          v28 = 3;
        }
      }
      else
      {
        v27 = ((v27 & 0x7F) << 7) | v30;
        v28 = 2;
      }
    }
    else
    {
      v28 = 1;
    }
    v29 = *(_DWORD *)(a2 + 76) + v27;
    *(_DWORD *)(a2 + 72) = v28 + v23;
  }
  *(_DWORD *)(a2 + 76) = v29;
  if (v16 < *(int *)(v24 + 12))
  {
LABEL_41:
    result = (char *)sub_1ACC7BBC8((char *)(*(_QWORD *)v24 + v16), (unint64_t *)(a2 + 120));
    *(_QWORD *)(a2 + 32) = v16 + result;
    return result;
  }
  v16 = 4;
  while (1)
  {
    result = (char *)sub_1ACC80CD4(a1, (unsigned int **)a2);
    v24 = *(_QWORD *)(a2 + 16);
    if (!v24)
      break;
    if (*(int *)(v24 + 12) > 4)
      goto LABEL_41;
  }
  if (!*(_DWORD *)(a1 + 60))
    goto LABEL_14;
  return result;
}

int *sub_1ACC86FC0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int *v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _DWORD *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(a1 + 60))
  {
    v4 = 0;
LABEL_30:
    sub_1ACC7D774(v4);
    return 0;
  }
  v5 = a3;
  v8 = 0;
  v4 = 0;
  v9 = (a3 << 37) + a4 + 0x1000000000;
  while (!sqlite3_initialize())
  {
    v11 = sub_1ACB6BB48((uint64_t)v4, 32 * v8 + 40);
    if (!v11)
      break;
    v12 = (int *)v11;
    v13 = v11 + 32 * v8;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 8) = 0u;
    v14 = sub_1ACC7B8EC(a1, v9 + (v8 << 31));
    *(_QWORD *)(v13 + 8) = v14;
    if (v14)
      v15 = (**(_BYTE **)v14 & 1) == 0;
    else
      v15 = 0;
    *v12 = ++v8;
    v10 = *(_DWORD *)(a1 + 60);
    v4 = v12;
    if (v10 | v15)
      goto LABEL_11;
  }
  v10 = 7;
  *(_DWORD *)(a1 + 60) = 7;
LABEL_11:
  if (v10)
    goto LABEL_30;
  v4[1] = v5;
  v16 = *v4;
  if (a2)
  {
    if ((int)v16 >= 1)
    {
      while (1)
      {
        v17 = v16--;
        while (!sub_1ACC80B58((uint64_t)&v4[8 * v16 + 2]))
          ;
        v4[8 * v16 + 5] = 0;
        if (v17 < 2)
          break;
        v18 = &v4[8 * v16 - 6];
        v19 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          v20 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v19);
            v19 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_16;
            v20 = &xmmword_1ECD3B1D0;
          }
          (*v20)(v19);
        }
LABEL_16:
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)&v4[8 * v16 - 2] = 0u;
        *(_QWORD *)v18 = sub_1ACC7B8EC(a1, (((v17 << 31) + 0x7FFFFFFF00000000) & 0x7FFFFFFF80000000)+ ((unint64_t)v4[1] << 37)+ v4[8 * v16 + 7]+ 0x1000000000);
        if (*(_DWORD *)(a1 + 60))
          goto LABEL_30;
      }
    }
  }
  else if ((int)v16 >= 1)
  {
    v21 = 0;
    v22 = (uint64_t)(v4 + 2);
    do
    {
      sub_1ACC80B58(v22);
      ++v21;
      v22 += 32;
    }
    while (v21 < *v4);
  }
  if (*(_DWORD *)(a1 + 60))
    goto LABEL_30;
  return v4;
}

uint64_t sub_1ACC87220(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int v12;
  int64_t v13;
  BOOL v14;
  int v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v6 = result;
  v7 = (*(_DWORD *)(a4 + 8) + *((_DWORD *)a2 + 2));
  if ((_DWORD)v7)
  {
    v8 = 64;
    do
    {
      v9 = v8;
      v8 *= 2;
    }
    while (v9 < v7);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(0, v9), (v25 = result) == 0))
    {
      *(_DWORD *)(v6 + 60) = 7;
      return result;
    }
  }
  else
  {
    v25 = 0;
    LODWORD(v9) = 0;
  }
  if (!*(_DWORD *)(v6 + 60))
  {
    v24 = a2;
    if (*((int *)a2 + 2) < 1)
    {
      v11 = 0;
      v10 = 0xFFFFFFFFLL;
    }
    else
    {
      v26 = 0;
      result = sub_1ACC7BBC8((char *)*a2, (unint64_t *)&v26);
      v10 = result;
      v11 = v26;
    }
    if (*(int *)(a4 + 8) < 1)
    {
      if ((v10 & 0x80000000) != 0)
      {
        v15 = 0;
        goto LABEL_46;
      }
      v13 = 0;
      v14 = (int)v10 >= 0;
      v12 = -1;
    }
    else
    {
      v26 = 0;
      v12 = sub_1ACC7BBC8(*(char **)a4, (unint64_t *)&v26);
      v13 = v26;
      v14 = (int)v10 >= 0;
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v11;
      v18 = v13;
      if (v14 && (v12 < 0 || v11 < v13))
      {
        result = v25 + v15;
        v21 = v11 - v16;
        if ((unint64_t)(v11 - v16) > 0x7F)
        {
          if (v21 >> 14)
          {
            result = sub_1ACBF8034((int8x8_t *)result, v21);
            v20 = result;
          }
          else
          {
            *(_BYTE *)result = (v21 >> 7) | 0x80;
            *(_BYTE *)(result + 1) = v21 & 0x7F;
            v20 = 2;
          }
        }
        else
        {
          *(_BYTE *)result = v21;
          v20 = 1;
        }
        if ((int)v10 >= *((_DWORD *)v24 + 2))
        {
          v10 = 0xFFFFFFFFLL;
        }
        else
        {
          v26 = 0;
          result = sub_1ACC7BBC8((char *)(*v24 + v10), (unint64_t *)&v26);
          v10 += result;
          v11 += v26;
        }
        v13 = v18;
        v16 = v17;
      }
      else
      {
        result = v25 + v15;
        v19 = v13 - v16;
        if ((unint64_t)(v13 - v16) > 0x7F)
        {
          if (v19 >> 14)
          {
            result = sub_1ACBF8034((int8x8_t *)result, v19);
            v20 = result;
          }
          else
          {
            *(_BYTE *)result = (v19 >> 7) | 0x80;
            *(_BYTE *)(result + 1) = v19 & 0x7F;
            v20 = 2;
          }
        }
        else
        {
          *(_BYTE *)result = v19;
          v20 = 1;
        }
        if (v14 && v11 == v18)
        {
          if ((int)v10 >= *((_DWORD *)v24 + 2))
          {
            v10 = 0xFFFFFFFFLL;
            v11 = v18;
          }
          else
          {
            v26 = 0;
            result = sub_1ACC7BBC8((char *)(*v24 + v10), (unint64_t *)&v26);
            v10 += result;
            v11 = v26 + v18;
          }
        }
        if (v12 >= *(_DWORD *)(a4 + 8))
        {
          v12 = -1;
          v13 = v18;
        }
        else
        {
          v26 = 0;
          result = sub_1ACC7BBC8((char *)(*(_QWORD *)a4 + v12), (unint64_t *)&v26);
          v12 += result;
          v13 = v26 + v18;
        }
        v16 = v18;
      }
      v15 += v20;
      v14 = (int)v10 >= 0;
    }
    while ((v10 & 0x80000000) == 0 || (v12 & 0x80000000) == 0);
LABEL_46:
    v22 = *v24;
    *v24 = v25;
    *((_DWORD *)v24 + 2) = v15;
    *((_DWORD *)v24 + 3) = v9;
    if (!v22)
      return result;
    v23 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v22);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v22);
      v22 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return result;
      v23 = &xmmword_1ECD3B1D0;
    }
    return (*v23)(v22);
  }
  return result;
}

uint64_t sub_1ACC875A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1ACC7A400((_DWORD *)(a1 + 60), a4, a2);
}

uint64_t sub_1ACC875B4(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int8x8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  int8x8_t *v56;
  int v57;
  int v58;
  int v59;
  int8x8_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int8x8_t *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int8x8_t *v76;
  int v77;
  int8x8_t *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int8x8_t *v83;
  unint64_t v84;
  size_t v85;
  unsigned int v86;
  int8x8_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)(uint64_t);
  uint64_t (**v101)(void *);
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v109;
  _BYTE *__src;
  _QWORD v111[131];

  v111[129] = *MEMORY[0x1E0C80C00];
  v7 = (a3 + 1);
  __memset_chk();
  result = (uint64_t)&v111[8 * (uint64_t)a3 + 1];
  v111[0] = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v9 = *((unsigned int *)a2 + 2);
  if ((int)v9 >= 1)
  {
    v10 = *a2;
    *(_QWORD *)(result + 16) = *a2;
    *(_QWORD *)result = v10 + v9;
    result = sub_1ACC883EC(result);
  }
  if (a3 < 1)
    return result;
  v105 = v7;
  v11 = 0;
  v12 = 0;
  v109 = a3;
  v13 = a3;
  do
  {
    v15 = &v111[8 * v11 + 1];
    *(_OWORD *)v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    v16 = a4 + 16 * v11;
    v19 = *(_DWORD *)(v16 + 8);
    v18 = (_DWORD *)(v16 + 8);
    v17 = v19;
    if (v19 >= 1)
    {
      v20 = *(_QWORD *)(a4 + 16 * v11);
      v15[2] = v20;
      *v15 = v20 + v17;
      result = sub_1ACC883EC((uint64_t)&v111[8 * v11 + 1]);
    }
    if (v15[2])
    {
      v21 = v111[0];
      if (v111[0] && (v22 = v15[1], v22 > *(_QWORD *)(v111[0] + 8)))
      {
        do
        {
          v23 = v21;
          v21 = *(_QWORD *)(v21 + 56);
        }
        while (v21 && v22 > *(_QWORD *)(v21 + 8));
        v14 = (_QWORD *)(v23 + 56);
      }
      else
      {
        v14 = v111;
      }
      v111[8 * v11 + 8] = v21;
      *v14 = v15;
    }
    v12 += *v18;
    ++v11;
  }
  while (v11 != v13);
  if (!v12)
    return result;
  v24 = (v12 + 10 * v109 + *((_DWORD *)a2 + 2) + 9);
  if (v12 + 10 * v109 + *((_DWORD *)a2 + 2) == -9)
  {
    v103 = a2;
    v27 = 0;
    LODWORD(v26) = 0;
  }
  else
  {
    v25 = 64;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v24);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(0, v26)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      return result;
    }
    v27 = result;
    v103 = a2;
  }
  v102 = v26;
  v28 = v111[0];
  v104 = v27;
  if (!v111[0])
  {
    __src = 0;
    v31 = 0;
    goto LABEL_159;
  }
  __src = 0;
  LODWORD(v29) = 0;
  v30 = 0;
  v31 = 0;
  while (1)
  {
    v34 = (int8x8_t *)(v27 + v31);
    v35 = *(_QWORD *)(v28 + 8) - v30;
    if (v35 > 0x7F)
    {
      if (v35 >> 14)
      {
        result = sub_1ACBF8034(v34, v35);
        v28 = v111[0];
      }
      else
      {
        v34->i8[0] = (v35 >> 7) | 0x80;
        v34->i8[1] = v35 & 0x7F;
        result = 2;
      }
    }
    else
    {
      v34->i8[0] = v35;
      result = 1;
    }
    v36 = v31 + (uint64_t)(int)result;
    v30 = *(_QWORD *)(v28 + 8);
    v37 = *(_QWORD *)(v28 + 56);
    if (v37)
    {
      if (v30 == *(_QWORD *)(v37 + 8))
        break;
    }
    memcpy((void *)(v27 + (int)v36), *(const void **)(v28 + 16), *(int *)(v28 + 28) + (uint64_t)*(int *)(v28 + 24));
    v31 = *(_DWORD *)(v28 + 24) + v36 + *(_DWORD *)(v28 + 28);
    result = sub_1ACC883EC(v28);
    v33 = *(_QWORD *)(v28 + 56);
    v111[0] = v33;
    if (!*(_QWORD *)(v28 + 16))
      goto LABEL_30;
    if (v33 && (v48 = *(_QWORD *)(v28 + 8), v48 > *(_QWORD *)(v33 + 8)))
    {
      do
      {
        v49 = v33;
        v33 = *(_QWORD *)(v33 + 56);
      }
      while (v33 && v48 > *(_QWORD *)(v33 + 8));
      v32 = (uint64_t *)(v49 + 56);
    }
    else
    {
      v32 = v111;
    }
    *(_QWORD *)(v28 + 56) = v33;
    *v32 = v28;
LABEL_29:
    v33 = v111[0];
LABEL_30:
    v28 = v33;
    if (!v33)
      goto LABEL_159;
  }
  v38 = 0;
  v111[0] = 0;
  v39 = 8;
  do
  {
    if (*(_QWORD *)(v28 + 8) != v30)
      break;
    *(_DWORD *)(v28 + 40) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    v41 = *(_QWORD *)(v28 + 56);
    v42 = *(_DWORD *)(v28 + 24);
    v43 = *(_QWORD *)(v28 + 16) + *(int *)(v28 + 28);
    *(_QWORD *)(v28 + 48) = v43;
    result = sub_1ACC827F8(v43, v42, (int *)(v28 + 40), (uint64_t *)(v28 + 32));
    v44 = *(_DWORD *)(v28 + 24);
    v45 = *(_QWORD *)(v28 + 32);
    if ((v45 & 0x8000000000000000) == 0)
    {
      v46 = v111[0];
      if (v111[0] && v45 > *(_QWORD *)(v111[0] + 32))
      {
        do
        {
          v47 = v46;
          v46 = *(_QWORD *)(v46 + 56);
        }
        while (v46 && v45 > *(_QWORD *)(v46 + 32));
        v40 = (uint64_t *)(v47 + 56);
      }
      else
      {
        v40 = v111;
      }
      *(_QWORD *)(v28 + 56) = v46;
      *v40 = v28;
    }
    v39 += v44 + 10;
    ++v38;
    v28 = v41;
  }
  while (v41);
  v50 = v111[0];
  if (!v111[0] || (v51 = *(_QWORD *)(v111[0] + 56)) == 0)
  {
    v97 = 267;
    goto LABEL_156;
  }
  v52 = (v39 + 10 * v38);
  v106 = v30;
  v107 = v36;
  if (v29 >= v52)
  {
    v54 = __src;
  }
  else
  {
    if ((_DWORD)v29)
      LODWORD(v53) = v29;
    else
      LODWORD(v53) = 64;
    v53 = (int)v53;
    do
    {
      v29 = v53;
      v53 *= 2;
    }
    while (v29 < v52);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48((uint64_t)__src, v29)) == 0)
    {
      v97 = 7;
LABEL_156:
      v98 = a1;
LABEL_157:
      *(_DWORD *)(v98 + 60) = v97;
      goto LABEL_158;
    }
    v51 = *(_QWORD *)(v50 + 56);
    v54 = (_BYTE *)result;
  }
  v111[0] = v51;
  v55 = *(_QWORD *)(v50 + 32);
  if ((v55 & 0x8000000000000000) != 0)
  {
    v58 = 0;
    v55 = 0;
  }
  else
  {
    if ((v55 & 0x7FFFFFFF00000000) != 0)
    {
      *v54 = 1;
      v56 = (int8x8_t *)(v54 + 1);
      if (v55 >> 39)
      {
        if (v55 >> 46)
        {
          v57 = sub_1ACBF8034(v56, HIDWORD(v55));
        }
        else
        {
          v54[1] = (v55 >> 39) | 0x80;
          v54[2] = BYTE4(v55) & 0x7F;
          v57 = 2;
        }
      }
      else
      {
        v56->i8[0] = BYTE4(v55);
        v57 = 1;
      }
      v59 = v57 + 1;
    }
    else
    {
      v59 = 0;
    }
    v60 = (int8x8_t *)&v54[v59];
    if ((v55 & 0x80000000FFFFFFFFLL) > 0x7D)
    {
      if ((v55 & 0x80000000FFFFFFFFLL) > 0x3FFD)
      {
        v61 = sub_1ACBF8034(v60, (v55 & 0x80000000FFFFFFFFLL) + 2);
      }
      else
      {
        v60->i8[0] = ((v55 + 2) >> 7) | 0x80;
        v60->i8[1] = (v55 + 2) & 0x7F;
        v61 = 2;
      }
    }
    else
    {
      v60->i8[0] = v55 + 2;
      v61 = 1;
    }
    v58 = v59 + v61;
  }
  result = sub_1ACC827F8(*(_QWORD *)(v50 + 48), *(_DWORD *)(v50 + 24), (int *)(v50 + 40), (uint64_t *)(v50 + 32));
  v62 = *(_QWORD *)(v50 + 32);
  if ((v62 & 0x8000000000000000) == 0)
  {
    if (v51 && v62 > *(_QWORD *)(v51 + 32))
    {
      do
      {
        v63 = v51;
        v51 = *(_QWORD *)(v51 + 56);
      }
      while (v51 && v62 > *(_QWORD *)(v51 + 32));
      v64 = (_QWORD *)(v63 + 56);
    }
    else
    {
      v64 = v111;
    }
    *(_QWORD *)(v50 + 56) = v51;
    *v64 = v50;
  }
  v65 = v111[0];
  v66 = (uint64_t *)(v111[0] + 56);
  __src = v54;
  if (*(_QWORD *)(v111[0] + 56))
  {
    do
    {
      v74 = *(_QWORD *)(v65 + 32);
      if ((uint64_t)v55 < v74)
      {
        if ((v74 & 0x7FFFFFFF00000000) != (v55 & 0x7FFFFFFF00000000))
        {
          v75 = v58 + 1;
          v54[v58] = 1;
          v76 = (int8x8_t *)&v54[v75];
          if ((unint64_t)v74 >> 39)
          {
            if ((unint64_t)v74 >> 46)
            {
              v77 = sub_1ACBF8034(v76, v74 >> 32);
            }
            else
            {
              v76->i8[0] = (HIDWORD(v74) >> 7) | 0x80;
              v76->i8[1] = BYTE4(v74) & 0x7F;
              v77 = 2;
            }
          }
          else
          {
            v76->i8[0] = BYTE4(v74);
            v77 = 1;
          }
          v58 = v75 + v77;
          v55 = v74 & 0x7FFFFFFF00000000;
        }
        v78 = (int8x8_t *)&v54[v58];
        v79 = v74 - v55 + 2;
        if (v79 > 0x7F)
        {
          if (v79 >> 14)
          {
            v80 = sub_1ACBF8034(v78, v79);
          }
          else
          {
            v78->i8[0] = (v79 >> 7) | 0x80;
            v78->i8[1] = v79 & 0x7F;
            v80 = 2;
          }
        }
        else
        {
          v78->i8[0] = v79;
          v80 = 1;
        }
        v58 += v80;
        v55 = v74;
      }
      result = sub_1ACC827F8(*(_QWORD *)(v65 + 48), *(_DWORD *)(v65 + 24), (int *)(v65 + 40), (uint64_t *)(v65 + 32));
      v67 = *v66;
      v111[0] = *v66;
      v81 = *(_QWORD *)(v65 + 32);
      if ((v81 & 0x8000000000000000) == 0)
      {
        if (v67 && v81 > *(_QWORD *)(v67 + 32))
        {
          do
          {
            v82 = v67;
            v67 = *(_QWORD *)(v67 + 56);
          }
          while (v67 && v81 > *(_QWORD *)(v67 + 32));
          v73 = (_QWORD *)(v82 + 56);
        }
        else
        {
          v73 = v111;
        }
        *v66 = v67;
        *v73 = v65;
        v67 = v111[0];
      }
      v66 = (uint64_t *)(v67 + 56);
      v65 = v67;
    }
    while (*(_QWORD *)(v67 + 56));
  }
  else
  {
    v67 = v111[0];
  }
  v68 = *(_QWORD *)(v67 + 32);
  if ((uint64_t)v55 >= v68)
  {
    v69 = v109;
    v36 = v107;
  }
  else
  {
    v69 = v109;
    if ((v68 & 0x7FFFFFFF00000000) != (v55 & 0x7FFFFFFF00000000))
    {
      v70 = v58 + 1;
      v54[v58] = 1;
      v71 = (int8x8_t *)&v54[v70];
      if ((unint64_t)v68 >> 39)
      {
        if ((unint64_t)v68 >> 46)
        {
          v72 = sub_1ACBF8034(v71, v68 >> 32);
        }
        else
        {
          v71->i8[0] = (HIDWORD(v68) >> 7) | 0x80;
          v71->i8[1] = BYTE4(v68) & 0x7F;
          v72 = 2;
        }
      }
      else
      {
        v71->i8[0] = BYTE4(v68);
        v72 = 1;
      }
      v58 = v70 + v72;
      v55 = v68 & 0x7FFFFFFF00000000;
    }
    v83 = (int8x8_t *)&v54[v58];
    v84 = v68 - v55 + 2;
    if (v84 > 0x7F)
    {
      v36 = v107;
      if (v84 >> 14)
      {
        result = sub_1ACBF8034(v83, v84);
      }
      else
      {
        v83->i8[0] = (v84 >> 7) | 0x80;
        v83->i8[1] = v84 & 0x7F;
        result = 2;
      }
    }
    else
    {
      v83->i8[0] = v84;
      result = 1;
      v36 = v107;
    }
    v58 += result;
  }
  v85 = (*(_DWORD *)(v67 + 24) - *(_DWORD *)(v67 + 40));
  v86 = v58 + v85;
  if (v58 + (int)v85 <= v39 - 8)
  {
    v27 = v104;
    v87 = (int8x8_t *)(v104 + v36);
    v88 = (int)(2 * v86);
    if (2 * v86 > 0x7F)
    {
      if (v88 >> 14)
      {
        v89 = sub_1ACBF8034(v87, v88);
      }
      else
      {
        v87->i8[0] = (v86 >> 6) | 0x80;
        v87->i8[1] = (2 * v86) & 0x7E;
        v89 = 2;
      }
    }
    else
    {
      v87->i8[0] = 2 * v86;
      v89 = 1;
    }
    v90 = v89 + (uint64_t)(int)v36;
    result = (uint64_t)memcpy((void *)(v104 + v90), __src, v58);
    v31 = v58 + v90;
    if ((int)v85 >= 1)
    {
      result = (uint64_t)memcpy((void *)(v104 + v31), (const void *)(*(_QWORD *)(v111[0] + 48) + *(int *)(v111[0] + 40)), v85);
      v31 += v85;
    }
    v111[0] = v28;
    if (v69 < 0)
    {
      v33 = v28;
      v30 = v106;
      goto LABEL_30;
    }
    v91 = 0;
    v30 = v106;
    do
    {
      v93 = &v111[8 * v91 + 1];
      if (v93[2])
      {
        if (v93[1] == v106)
        {
          result = sub_1ACC883EC((uint64_t)&v111[8 * v91 + 1]);
          if (v93[2])
          {
            v94 = v111[0];
            if (v111[0] && (v95 = v93[1], v95 > *(_QWORD *)(v111[0] + 8)))
            {
              do
              {
                v96 = v94;
                v94 = *(_QWORD *)(v94 + 56);
              }
              while (v94 && v95 > *(_QWORD *)(v94 + 8));
              v92 = (_QWORD *)(v96 + 56);
            }
            else
            {
              v92 = v111;
            }
            v111[8 * v91 + 8] = v94;
            *v92 = v93;
          }
        }
      }
      ++v91;
    }
    while (v91 != v105);
    goto LABEL_29;
  }
  v98 = a1;
  if (!*(_DWORD *)(a1 + 60))
  {
    v97 = 267;
    goto LABEL_157;
  }
LABEL_158:
  v31 = v36;
LABEL_159:
  v99 = *v103;
  if (*v103)
  {
    v100 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_165;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v99);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v99);
    v99 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v100 = &xmmword_1ECD3B1D0;
LABEL_165:
      result = (*v100)(v99);
    }
  }
  *v103 = 0;
  v103[1] = 0;
  if (__src)
  {
    v101 = (uint64_t (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_172;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(__src);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(__src);
    __src = (_BYTE *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v101 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
LABEL_172:
      result = (*v101)(__src);
    }
  }
  *(_QWORD *)(v104 + v31) = 0;
  *v103 = v104;
  *((_DWORD *)v103 + 2) = v31;
  *((_DWORD *)v103 + 3) = v102;
  return result;
}

uint64_t sub_1ACC8800C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t *v15;
  int v16;
  uint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  size_t v22;

  if (!*(_DWORD *)(result + 60))
  {
    v7 = *(int *)(a3 + 16);
    v8 = *(_DWORD *)(a4 + 8);
    v9 = *(_DWORD *)(a4 + 12);
    v10 = (v7 + v8 + 26);
    if (v10 <= v9)
    {
      result = *(_QWORD *)a4;
    }
    else
    {
      v11 = result;
      if (v9)
        LODWORD(v12) = *(_DWORD *)(a4 + 12);
      else
        LODWORD(v12) = 64;
      v12 = (int)v12;
      do
      {
        v13 = v12;
        v12 *= 2;
      }
      while (v13 < v10);
      v14 = *(_QWORD *)a4;
      result = sqlite3_initialize();
      if ((_DWORD)result || (result = sub_1ACB6BB48(v14, v13)) == 0)
      {
        *(_DWORD *)(v11 + 60) = 7;
        return result;
      }
      *(_DWORD *)(a4 + 12) = v13;
      *(_QWORD *)a4 = result;
      v8 = *(_DWORD *)(a4 + 8);
    }
    v15 = (int8x8_t *)(result + v8);
    if (a2 > 0x7F)
    {
      if (a2 >> 14)
      {
        v16 = sub_1ACBF8034(v15, a2);
      }
      else
      {
        v15->i8[0] = (a2 >> 7) | 0x80;
        v15->i8[1] = a2 & 0x7F;
        v16 = 2;
      }
    }
    else
    {
      v15->i8[0] = a2;
      v16 = 1;
    }
    v17 = *(int *)(a4 + 8) + (uint64_t)v16;
    *(_DWORD *)(a4 + 8) = v17;
    v18 = (int8x8_t *)(*(_QWORD *)a4 + v17);
    v19 = 2 * v7;
    if ((2 * v7) > 0x7F)
    {
      if (v19 >> 14)
      {
        v20 = sub_1ACBF8034(v18, v19);
      }
      else
      {
        v18->i8[0] = (v7 >> 6) | 0x80;
        v18->i8[1] = v19 & 0x7E;
        v20 = 2;
      }
    }
    else
    {
      v18->i8[0] = v19;
      v20 = 1;
    }
    v21 = *(int *)(a4 + 8) + (uint64_t)v20;
    *(_DWORD *)(a4 + 8) = v21;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)a4 + v21), *(const void **)(a3 + 8), v7);
    v22 = *(int *)(a4 + 8) + v7;
    *(_DWORD *)(a4 + 8) = v22;
    *(_QWORD *)(*(_QWORD *)a4 + v22) = 0;
  }
  return result;
}

uint64_t sub_1ACC88194(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  int v27;

  if (!*(_DWORD *)(result + 60))
  {
    v5 = result;
    v6 = a2 + 96;
    *a3 = 0;
    do
    {
      v7 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 88) + 4);
      v8 = a2 + 136 * v7;
      v9 = v8 + 96;
      v27 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 152))(v5, v8 + 96, &v27);
      if (*(_QWORD *)(v8 + 112))
        v10 = v27 == 0;
      else
        v10 = 0;
      if (v10)
      {
        v16 = *(_QWORD *)(a2 + 136 * v7 + 216);
        v17 = *(_QWORD *)(a2 + 80);
        if (v16 == v17)
        {
          v18 = *(_DWORD *)(a2 + 68);
LABEL_26:
          v20 = v7 ^ 1;
          if (v18)
            v21 = 0x8000000000000000;
          else
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)(a2 + 80) = v21;
          v11 = *(_DWORD *)(a2 + 64) + v7;
          v12 = *(_QWORD *)(a2 + 88);
          v22 = v11;
          while (2)
          {
            if (v22 >= 0)
              v23 = v22;
            else
              v23 = v22 + 1;
            v24 = v12 + 4 * (v23 >> 1);
            if (*(_BYTE *)(v24 + 2))
            {
              v25 = *(_QWORD *)(v9 + 120);
              v26 = *(_QWORD *)(a2 + 136 * v20 + 216);
              if (v25 == v26)
                goto LABEL_9;
              if (v18 == v26 > v25)
              {
                v9 = a2 + 136 * v20 + 96;
                goto LABEL_38;
              }
              if (v18 == v26 > v21)
              {
LABEL_38:
                *(_QWORD *)(a2 + 80) = v26;
                v21 = v26;
              }
            }
            *(_WORD *)v24 = -3855 * ((v9 - v6) >> 3);
            if ((v22 & 0xFFFFFFFE) == 2)
              goto LABEL_11;
            v20 = *(unsigned __int16 *)(v12 + 4 * (((uint64_t)v23 >> 1) ^ 1));
            v22 = v23 >> 1;
            continue;
          }
        }
        v18 = v16 < v17;
        if (*(_DWORD *)(a2 + 68) == v18)
          goto LABEL_26;
        v12 = *(_QWORD *)(a2 + 88);
      }
      else
      {
        v11 = *(_DWORD *)(a2 + 64) + v7;
LABEL_9:
        if (v11 >= 2)
        {
          do
          {
            if (*(_DWORD *)(v5 + 60))
              break;
            v11 = v11 >> 1;
            result = sub_1ACC8145C(a2, v11);
            if ((_DWORD)result)
            {
              v15 = result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 136 * (int)result + 152))(v5, a2 + 136 * (int)result + 96, 0);
              v11 = *(_DWORD *)(a2 + 64) + v15;
            }
          }
          while (v11 > 1);
        }
        v12 = *(_QWORD *)(a2 + 88);
        v13 = a2 + 136 * *(unsigned __int16 *)(v12 + 4);
        *(_BYTE *)(a2 + 20) = *(_QWORD *)(v13 + 112) == 0;
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v13 + 216);
        *a3 = 1;
      }
LABEL_11:
      if (!*(_DWORD *)(v5 + 60))
      {
        v19 = *(unsigned __int16 *)(v12 + 4);
        if (*(_QWORD *)(a2 + 136 * v19 + 112))
        {
          v14 = *(_DWORD *)(a2 + 136 * v19 + 224);
          if (!v14)
            continue;
        }
      }
      result = sub_1ACC805D4(a2);
      if (!(_DWORD)result)
        return result;
      v14 = *(_DWORD *)(v5 + 60);
    }
    while (!v14);
  }
  return result;
}

uint64_t sub_1ACC883EC(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;

  v1 = result;
  v2 = (char *)(*(_QWORD *)(result + 16) + *(int *)(result + 28) + *(int *)(result + 24));
  v3 = *(_QWORD *)result;
  if ((unint64_t)v2 >= *(_QWORD *)result)
  {
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    v11 = 0;
    result = sub_1ACC7BBC8(v2, &v11);
    v4 = &v2[result];
    *(_QWORD *)(v1 + 8) += v11;
    v5 = *v4;
    if ((v5 & 0x80) != 0)
    {
      v7 = v4[1];
      if (v4[1] < 0)
      {
        v9 = v4[2];
        if (v9 < 0)
        {
          v12 = 0;
          result = sub_1ACC7BBC8(v4, &v12);
          v8 = v12 & 0x7FFFFFFF;
        }
        else
        {
          v8 = v9 & 0x7F | (v5 << 14) & 0x1FC07F | ((v7 & 0x7F) << 7);
          result = 3;
        }
      }
      else
      {
        v8 = ((v5 & 0x7F) << 7) | v7;
        result = 2;
      }
      v6 = v8 >> 1;
      *(_DWORD *)(v1 + 24) = v6;
      *(_DWORD *)(v1 + 28) = result;
    }
    else
    {
      v6 = v5 >> 1;
      *(_DWORD *)(v1 + 24) = v6;
      *(_DWORD *)(v1 + 28) = 1;
    }
    if ((unint64_t)&v4[v6] <= v3)
      v10 = v4;
    else
      v10 = 0;
    *(_QWORD *)(v1 + 16) = v10;
  }
  return result;
}

uint64_t sub_1ACC884E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 128);
  return result;
}

uint64_t sub_1ACC884FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  *(_QWORD *)result = *(_QWORD *)(a2 + 120);
  v3 = *(int *)(a2 + 128);
  *(_DWORD *)(result + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = v4 + v3;
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 <= *(int *)(v6 + 12))
  {
    v7 = *(_QWORD *)v6 + v4;
  }
  else
  {
    *(_DWORD *)(result + 40) = 0;
    result = sub_1ACC88900(*(_DWORD **)(result + 24), a2, 0, result + 32);
    v7 = *(_QWORD *)(v2 + 32);
  }
  *(_QWORD *)(v2 + 8) = v7;
  return result;
}

uint64_t sub_1ACC88568(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1ACC88570(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  char *v17;
  signed int v18;
  char *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;

  v2 = result;
  v3 = *(unsigned int **)(result + 48);
  *(_QWORD *)result = *(_QWORD *)(a2 + 120);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a2 + 128);
  v6 = *(uint64_t **)(a2 + 16);
  if (v4 + v5 <= *((int *)v6 + 3))
  {
    v8 = *v6;
    v9 = *(_QWORD *)(result + 24);
    *(_DWORD *)(result + 40) = 0;
    if (*(_DWORD *)(v9 + 60))
      return result;
    if ((int)*v3 > 1)
    {
      LODWORD(v10) = *(_DWORD *)(result + 44);
      if (v10 < v5)
      {
        if (!(_DWORD)v10)
          LODWORD(v10) = 64;
        v10 = (int)v10;
        do
        {
          v11 = v10;
          v10 *= 2;
        }
        while (v11 < v5);
        v12 = *(_QWORD *)(result + 32);
        result = sqlite3_initialize();
        if ((_DWORD)result || (result = sub_1ACB6BB48(v12, v11)) == 0)
        {
          *(_DWORD *)(v9 + 60) = 7;
          return result;
        }
        *(_DWORD *)(v2 + 44) = v11;
        *(_QWORD *)(v2 + 32) = result;
      }
    }
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = (unsigned __int8 *)(v8 + v4);
    v16 = v8 + v4 + v5;
    v17 = (char *)(v8 + v4);
    while (1)
    {
      v14 = (int)v14;
      while (1)
      {
        v18 = v3[v14 + 1];
        if (v18 >= v13)
          break;
        if ((_DWORD)++v14 == *v3)
          goto LABEL_3;
      }
      if ((unint64_t)v15 >= v16)
      {
        v21 = 0;
        v19 = (char *)v15;
      }
      else
      {
        v19 = (char *)v15;
        do
        {
          v20 = *v19;
          v21 = v20 == 1;
          if (v20 == 1)
            break;
          ++v19;
          if (v20 < 0)
          {
            do
              v22 = *v19++;
            while (v22 < 0);
          }
        }
        while ((unint64_t)v19 < v16);
      }
      if (v18 == v13)
      {
        if (*v3 == 1)
        {
          *(_QWORD *)(v2 + 8) = v17;
          v7 = (_DWORD)v19 - (_DWORD)v17;
          goto LABEL_4;
        }
        v23 = (_DWORD)v19 - (_DWORD)v17;
        result = (uint64_t)memcpy((void *)(*(_QWORD *)(v2 + 32) + *(int *)(v2 + 40)), v17, v19 - v17);
        *(_DWORD *)(v2 + 40) += v23;
      }
      if (!v21)
        goto LABEL_3;
      v15 = (unsigned __int8 *)(v19 + 2);
      v13 = v19[1];
      v17 = v19;
      if (v19[1] < 0)
      {
        v24 = (char)*v15;
        v25 = *v15;
        if (v24 < 0)
        {
          v27 = v19[3];
          if (v27 < 0)
          {
            v28 = 0;
            result = sub_1ACC7BBC8(v19 + 1, &v28);
            v13 = v28 & 0x7FFFFFFF;
            v26 = result;
          }
          else
          {
            v13 = v27 & 0x7F | (v13 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
            v26 = 3;
          }
        }
        else
        {
          v13 = ((v13 & 0x7F) << 7) | v25;
          v26 = 2;
        }
        v15 = (unsigned __int8 *)&v19[v26 + 1];
        v17 = v19;
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  result = sub_1ACC88900(*(_DWORD **)(result + 24), a2, v3, result + 32);
LABEL_3:
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 32);
  v7 = *(_DWORD *)(v2 + 40);
LABEL_4:
  *(_DWORD *)(v2 + 16) = v7;
  return result;
}

uint64_t sub_1ACC887C8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int *v19;
  int v20;
  uint64_t v21;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a2 + 128);
  v6 = *(uint64_t **)(a2 + 16);
  if (v4 + v5 <= *((int *)v6 + 3))
  {
    v9 = *v6;
    v10 = *(int **)(result + 48);
    v13 = *v10;
    v11 = v10 + 1;
    v12 = v13;
    v14 = *(_BYTE **)(result + 32);
    *(_QWORD *)result = *(_QWORD *)(a2 + 120);
    if ((int)v5 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17 = (unsigned __int8 *)(v9 + v4);
      v18 = &v17[v5];
      v19 = &v11[v12];
      do
      {
        v20 = *v17++;
        v16 = v16 + v20 - 2;
        while (*v11 < v16)
        {
          if (++v11 == v19)
            goto LABEL_12;
        }
        if (*v11 == v16)
        {
          *v14++ = v16 - v15 + 2;
          v15 = v16;
        }
      }
      while (v17 < v18);
    }
LABEL_12:
    v21 = *(_QWORD *)(result + 32);
    *(_QWORD *)(result + 8) = v21;
    v8 = (_DWORD)v14 - v21;
  }
  else
  {
    *(_DWORD *)(result + 40) = 0;
    result = sub_1ACC88900(*(_DWORD **)(result + 24), a2, *(unsigned int **)(result + 48), result + 32);
    v7 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)v3 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(v3 + 8) = v7;
    v8 = *(_DWORD *)(v3 + 40);
  }
  *(_DWORD *)(v3 + 16) = v8;
  return result;
}

uint64_t sub_1ACC888B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  *(_DWORD *)(a1 + 40) = 0;
  result = sub_1ACC88900(*(_DWORD **)(a1 + 24), a2, *(unsigned int **)(a1 + 48), a1 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
  return result;
}

uint64_t sub_1ACC88900(_DWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _DWORD *v18;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;

  v8 = *(_DWORD *)(a2 + 128);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a4 + 12);
  v11 = (v9 + v8 + 8);
  if (v11 <= v10)
  {
    result = *(_QWORD *)a4;
  }
  else
  {
    if (v10)
      LODWORD(v12) = *(_DWORD *)(a4 + 12);
    else
      LODWORD(v12) = 64;
    v12 = (int)v12;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v11);
    v14 = *(_QWORD *)a4;
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(v14, v13)) == 0)
    {
      a1[15] = 7;
      return result;
    }
    *(_DWORD *)(a4 + 12) = v13;
    *(_QWORD *)a4 = result;
    v9 = *(_DWORD *)(a4 + 8);
    v8 = *(_DWORD *)(a2 + 128);
  }
  *(_QWORD *)(result + v8 + v9) = 0;
  if (!a3)
    return (uint64_t)sub_1ACC88A64((uint64_t)a1, (unsigned int **)a2, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1ACC88CE0);
  if (*(_DWORD *)(*(_QWORD *)a1 + 92))
  {
    v21 = a3;
    v22 = 0;
    v20 = a4;
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1ACC8900C;
  }
  else
  {
    v21 = a3;
    v22 = 0;
    v20 = a4;
    v17 = *a3;
    if ((int)v17 < 1)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v18 = a3 + 1;
      while (*v18++)
      {
        if (!--v17)
          goto LABEL_23;
      }
      LODWORD(v17) = 1;
    }
LABEL_23:
    LODWORD(v22) = v17;
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1ACC88D30;
  }
  return (uint64_t)sub_1ACC88A64((uint64_t)a1, (unsigned int **)a2, (uint64_t)&v20, v16);
}

unsigned int *sub_1ACC88A64(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  unsigned int **v6;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t i;
  unsigned int *result;
  uint64_t (**v20)(unsigned int *);
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t (**v25)(unsigned int *);

  v6 = a2;
  v8 = 0;
  v9 = *((int *)a2 + 32);
  v10 = a2[2];
  v11 = a2[4];
  v12 = (uint64_t)v11 + *(_QWORD *)v10;
  v13 = (int)v10[3] - (_QWORD)v11;
  if (v13 <= v9)
    v14 = v13;
  else
    v14 = v9;
  v15 = *((int *)a2 + 3);
  if (((_BYTE)a2[1] & 2) != 0)
    v16 = 0;
  else
    v16 = v15 + 1;
  v17 = ~(_DWORD)v15 + v16;
  for (i = v15 + 1; ; ++i)
  {
    result = (unsigned int *)a4(a1, a3, v12, v14);
    if (!v8)
      goto LABEL_16;
    v20 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_15;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    result = (unsigned int *)off_1ECD3B168(v8);
    v8 = (unsigned int *)xmmword_1ECD3E930;
    v6 = a2;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v20 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
LABEL_15:
      result = (unsigned int *)(*v20)(v8);
    }
LABEL_16:
    LODWORD(v9) = v9 - v14;
    if ((int)v9 < 1)
      return result;
    if (!*v6)
    {
      *(_DWORD *)(a1 + 60) = 267;
      return result;
    }
    result = sub_1ACC7B8EC(a1, i + ((unint64_t)**v6 << 37));
    if (!result)
      return result;
    v8 = result;
    v21 = result[2];
    if (v21 < 4)
      break;
    v22 = result[3];
    if (v22 > v21)
      break;
    v23 = *(_QWORD *)result;
    v24 = v22 - 4;
    if ((int)v9 >= v24)
      v14 = v24;
    else
      v14 = v9;
    if (!v17)
    {
      v6[3] = result;
      v8 = 0;
    }
    v12 = v23 + 4;
    --v17;
  }
  *(_DWORD *)(a1 + 60) = 267;
  v25 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (unsigned int *)(*v25)(v8);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
  --qword_1ECD3E8D0;
  result = (unsigned int *)off_1ECD3B168(v8);
  v8 = (unsigned int *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v25 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
    return (unsigned int *)(*v25)(v8);
  }
  return result;
}

void *sub_1ACC88CE0(int a1, uint64_t a2, void *__src, size_t __n)
{
  int v4;
  void *result;

  if ((int)__n >= 1)
  {
    v4 = __n;
    result = memcpy((void *)(*(_QWORD *)a2 + *(int *)(a2 + 8)), __src, __n);
    *(_DWORD *)(a2 + 8) += v4;
  }
  return result;
}

void sub_1ACC88D30(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34[13];

  if (a4 >= 1)
  {
    v34[11] = v4;
    v34[12] = v5;
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      v9 = *a3;
      if (*a3 < 0)
      {
        v11 = a3[1];
        if (a3[1] < 0)
        {
          v12 = a3[2];
          if (v12 < 0)
          {
            v34[0] = 0;
            v10 = sub_1ACC7BBC8(a3, v34);
            v9 = v34[0] & 0x7FFFFFFF;
          }
          else
          {
            v9 = v12 & 0x7F | (v9 << 14) & 0x1FC07F | ((v11 & 0x7F) << 7);
            v10 = 3;
          }
        }
        else
        {
          v9 = ((v9 & 0x7F) << 7) | v11;
          v10 = 2;
        }
      }
      else
      {
        v10 = 1;
      }
      v13 = *(unsigned int **)(a2 + 8);
      v14 = *v13;
      if ((int)v14 < 1)
      {
LABEL_15:
        *(_DWORD *)(a2 + 16) = 0;
      }
      else
      {
        v15 = (int *)(v13 + 1);
        while (1)
        {
          v16 = *v15++;
          if (v16 == v9)
            break;
          if (!--v14)
            goto LABEL_15;
        }
        *(_DWORD *)(a2 + 16) = 1;
        *(_BYTE *)(**(_QWORD **)a2 + (int)(*(_DWORD *)(*(_QWORD *)a2 + 8))++) = 1;
      }
    }
    else
    {
      v10 = 0;
    }
    v17 = 0;
    do
    {
      if ((int)v10 >= a4)
      {
        v20 = 0;
LABEL_27:
        if (!*(_DWORD *)(a2 + 16))
          goto LABEL_29;
      }
      else
      {
        while (1)
        {
          v19 = a3[(int)v10];
          v20 = v19 == 1;
          if (v19 == 1)
            break;
          v21 = (unsigned __int8 *)&a3[(int)v10];
          do
          {
            v22 = (char)*v21++;
            v10 = (v10 + 1);
          }
          while (v22 < 0);
          if ((int)v10 >= a4)
            goto LABEL_27;
        }
        v20 = 1;
        if (!*(_DWORD *)(a2 + 16))
          goto LABEL_29;
      }
      memcpy((void *)(**(_QWORD **)a2 + *(int *)(*(_QWORD *)a2 + 8)), &a3[(int)v17], (int)v10 - (int)v17);
      *(_DWORD *)(*(_QWORD *)a2 + 8) += v10 - v17;
LABEL_29:
      if (v20)
      {
        v18 = (int)v10 + 1;
        if ((int)v18 >= a4)
        {
          *(_DWORD *)(a2 + 16) = 2;
        }
        else
        {
          v23 = (unsigned __int8 *)&a3[v18];
          v24 = a3[v18];
          if (a3[v18] < 0)
          {
            v25 = v23[1];
            if ((char)v23[1] < 0)
            {
              v27 = (char)v23[2];
              if (v27 < 0)
              {
                v34[0] = 0;
                v26 = sub_1ACC7BBC8((char *)v23, v34);
                v24 = v34[0] & 0x7FFFFFFF;
              }
              else
              {
                v24 = v27 & 0x7F | (v24 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
                v26 = 3;
              }
            }
            else
            {
              v24 = ((v24 & 0x7F) << 7) | v25;
              v26 = 2;
            }
            v18 = (v26 + v18);
          }
          else
          {
            v18 = (v10 + 2);
          }
          v28 = *(unsigned int **)(a2 + 8);
          v29 = *v28;
          if ((int)v29 < 1)
          {
LABEL_46:
            *(_DWORD *)(a2 + 16) = 0;
          }
          else
          {
            v30 = (int *)(v28 + 1);
            while (1)
            {
              v31 = *v30++;
              if (v31 == v24)
                break;
              if (!--v29)
                goto LABEL_46;
            }
            *(_DWORD *)(a2 + 16) = 1;
            v32 = (unsigned __int8 *)&a3[(int)v10];
            v33 = v18 - v10;
            memcpy((void *)(**(_QWORD **)a2 + *(int *)(*(_QWORD *)a2 + 8)), v32, v33);
            *(_DWORD *)(*(_QWORD *)a2 + 8) += v33;
            v10 = v18;
          }
        }
      }
      else
      {
        v18 = v10;
        v10 = v17;
      }
      v17 = v10;
      v10 = v18;
    }
    while ((int)v18 < a4);
  }
}

void sub_1ACC8900C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  int *v20;
  int v21;
  int8x8_t *v22;
  unsigned int v23;
  unint64_t v24[11];

  if (a4 >= 1)
  {
    v24[9] = v4;
    v24[10] = v5;
    v9 = 0;
    do
    {
      v11 = a3 + v9;
      v12 = *(unsigned __int8 *)(a3 + v9);
      if (*(char *)(a3 + v9) < 0)
      {
        v14 = *(unsigned __int8 *)(v11 + 1);
        if (*(char *)(v11 + 1) < 0)
        {
          v15 = *(char *)(v11 + 2);
          if (v15 < 0)
          {
            v24[0] = 0;
            v13 = sub_1ACC7BBC8((char *)v11, v24);
            v12 = v24[0] & 0x7FFFFFFF;
          }
          else
          {
            v12 = v15 & 0x7F | (v12 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
            v13 = 3;
          }
        }
        else
        {
          v12 = ((v12 & 0x7F) << 7) | v14;
          v13 = 2;
        }
      }
      else
      {
        v13 = 1;
      }
      v16 = *(_DWORD *)(a2 + 16) + v12;
      v17 = v16 - 2;
      *(_DWORD *)(a2 + 16) = v16 - 2;
      v18 = *(unsigned int **)(a2 + 8);
      v19 = *v18;
      if ((int)v19 >= 1)
      {
        v20 = (int *)(v18 + 1);
        while (1)
        {
          v21 = *v20++;
          if (v21 == v17)
            break;
          if (!--v19)
            goto LABEL_5;
        }
        v22 = (int8x8_t *)(**(_QWORD **)a2 + *(int *)(*(_QWORD *)a2 + 8));
        v23 = v16 - *(_DWORD *)(a2 + 20);
        if (v23 <= 0x7F)
        {
          v22->i8[0] = v23;
          v10 = 1;
        }
        else if (v23 >> 14)
        {
          v10 = sub_1ACBF8034(v22, (int)v23);
        }
        else
        {
          v22->i8[0] = (v23 >> 7) | 0x80;
          v22->i8[1] = v23 & 0x7F;
          v10 = 2;
        }
        *(_DWORD *)(*(_QWORD *)a2 + 8) += v10;
        *(_DWORD *)(a2 + 20) = v17;
      }
LABEL_5:
      v9 += v13;
    }
    while ((int)v9 < a4);
  }
}

uint64_t sub_1ACC89188(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  const char *v15;
  void (**v16)(unsigned __int8 *);
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (sqlite3_initialize())
    goto LABEL_2;
  v21 = 0;
  v18 = 0;
  v19 = (unsigned __int8 *)&v22;
  v20 = 0x7FFFFFFD00000200;
  sqlite3_str_vappendf((sqlite3_str *)&v18, "SELECT rowid, rank FROM %Q.%Q ORDER BY %s(\"%w\"%s%s) %s", &a9);
  if (v19 && (v19[v21] = 0, HIDWORD(v20)) && (v21 & 0x40000000000) == 0)
  {
    v14 = (unsigned __int8 *)sub_1ACBE13A0(&v18);
    if (!v14)
      goto LABEL_2;
  }
  else
  {
    v14 = v19;
    if (!v19)
    {
LABEL_2:
      v11 = 7;
      goto LABEL_3;
    }
  }
  v11 = sub_1ACB5C66C(*(_QWORD *)a2, v14, 0xFFFFFFFFLL, 129, 0, &v17, 0, v13);
  if ((_DWORD)v11)
  {
    v15 = sqlite3_errmsg(*(sqlite3 **)a2);
    **(_QWORD **)(a2 + 184) = sqlite3_mprintf("%s", v15);
  }
  v16 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_17:
    (*v16)(v14);
    goto LABEL_3;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v14);
  v14 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    goto LABEL_17;
  }
LABEL_3:
  *a1 = v17;
  return v11;
}

uint64_t sub_1ACC89340(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;

  v2 = *(_QWORD *)(a1 + 72);
  result = sqlite3_step(*(sqlite3_stmt **)v2);
  if ((_DWORD)result == 101)
  {
    v17 = 3;
  }
  else
  {
    if ((_DWORD)result != 100)
      return result;
    *(_QWORD *)(v2 + 8) = sqlite3_column_int64(*(sqlite3_stmt **)v2, 0);
    v4 = sqlite3_column_bytes(*(sqlite3_stmt **)v2, 1);
    v5 = (char *)sqlite3_column_blob(*(sqlite3_stmt **)v2, 1);
    if (v4 >= 1)
    {
      v6 = (int)v5;
      v7 = *(int *)(v2 + 24);
      if ((int)v7 < 2)
      {
        v8 = 0;
        v11 = v5;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = v7 - 1;
        v11 = v5;
        do
        {
          v13 = *v11;
          if (*v11 < 0)
          {
            v14 = v11[1];
            if (v11[1] < 0)
            {
              v15 = v11[2];
              if (v15 < 0)
              {
                v18 = 0;
                v16 = sub_1ACC7BBC8(v11, &v18);
                v13 = v18 & 0x7FFFFFFF;
                v12 = v16;
              }
              else
              {
                v13 = v15 & 0x7F | (v13 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
                v12 = 3;
              }
            }
            else
            {
              v13 = ((v13 & 0x7F) << 7) | v14;
              v12 = 2;
            }
          }
          else
          {
            v12 = 1;
          }
          v11 += v12;
          v9 += v13;
          *(_DWORD *)(v2 + 28 + 4 * v8++) = v9;
        }
        while (v8 < v10);
      }
      *(_DWORD *)(v2 + 4 * v8 + 28) = v6 + v4 - (_DWORD)v11;
      *(_QWORD *)(v2 + 16) = v11;
    }
    v17 = 78;
  }
  result = 0;
  *(_DWORD *)(a1 + 80) |= v17;
  return result;
}

uint64_t sub_1ACC894C0(uint64_t *a1, int a2)
{
  sqlite3_stmt **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  char **v8;
  char **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  v3 = (sqlite3_stmt **)(a1 + 7);
  if (a1[7])
  {
    if ((a1[10] & 2) == 0)
      return 0;
  }
  else
  {
    v5 = *a1;
    if (*((_DWORD *)a1 + 8) == 5)
      v6 = *((_DWORD *)a1 + 9) != 0;
    else
      v6 = 2;
    v7 = *(uint64_t **)(v5 + 40);
    v8 = (char **)(v5 + 16);
    if (a2)
      v9 = v8;
    else
      v9 = 0;
    v4 = sub_1ACC7A800(v7, v6, v3, v9);
    if ((_DWORD)v4)
      return v4;
    v7[v6 + 5] = 0;
    if ((a1[10] & 2) == 0)
      return 0;
  }
  v10 = *a1;
  sqlite3_reset((sqlite3_stmt *)a1[7]);
  v11 = (_QWORD *)a1[7];
  v12 = a1[9];
  if (v12)
    v13 = (uint64_t *)(v12 + 8);
  else
    v13 = (uint64_t *)(*(_QWORD *)(a1[8] + 16) + 24);
  v14 = *v13;
  if (!sub_1ACBA0E50(a1[7], 0))
  {
    v15 = v11[16];
    if ((*(_WORD *)(v15 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v15, v14);
    }
    else
    {
      *(_QWORD *)v15 = v14;
      *(_WORD *)(v15 + 20) = 4;
    }
    v16 = *(_QWORD *)(*v11 + 24);
    if (v16)
      xmmword_1ECD3B1D0(v16);
  }
  ++*(_DWORD *)(*(_QWORD *)(v10 + 24) + 120);
  v17 = sqlite3_step(*v3);
  --*(_DWORD *)(*(_QWORD *)(v10 + 24) + 120);
  if (v17 == 100)
  {
    v4 = 0;
    *((_DWORD *)a1 + 20) &= ~2u;
  }
  else
  {
    v18 = sqlite3_reset(*v3);
    if ((_DWORD)v18)
    {
      v4 = v18;
      v19 = *(_QWORD *)(v10 + 24);
      if (*(_QWORD *)(v19 + 184))
      {
        v20 = sqlite3_errmsg(*(sqlite3 **)v19);
        **(_QWORD **)(*(_QWORD *)(v10 + 24) + 184) = sqlite3_mprintf("%s", v20);
      }
    }
    else
    {
      return 267;
    }
  }
  return v4;
}

uint64_t sub_1ACC89680(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16);
}

uint64_t sub_1ACC8968C(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24);
}

uint64_t sub_1ACC8969C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  result = sub_1ACC8A7FC(v3, 0);
  if (!(_DWORD)result)
  {
    *a2 = *(_QWORD *)(v3 + 24);
    if (*(uint64_t *)(v3 + 24) >= 1)
      return 0;
    else
      return 267;
  }
  return result;
}

uint64_t sub_1ACC896E8(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v5 = *(_QWORD **)(*(_QWORD *)a1 + 40);
  result = sub_1ACC8A7FC((uint64_t)v5, 0);
  if (!(_DWORD)result)
  {
    *a3 = 0;
    v7 = *(unsigned int *)(*v5 + 24);
    if ((a2 & 0x80000000) == 0)
    {
      if ((int)v7 <= a2)
        return 25;
      result = 0;
      *a3 = *(_QWORD *)(v5[4] + 8 * a2);
      return result;
    }
    if ((int)v7 >= 1)
    {
      v8 = v5[4];
      if (v7 >= 8
        && (v8 + 8 * v7 > (unint64_t)a3 ? (v9 = v8 >= (unint64_t)(a3 + 1)) : (v9 = 1), v9))
      {
        v10 = v7 & 0x7FFFFFFC;
        v11 = (int64x2_t *)(v8 + 16);
        v12 = 0uLL;
        v13 = v7 & 0xFFFFFFFC;
        v14 = 0uLL;
        do
        {
          v12 = vaddq_s64(v11[-1], v12);
          v14 = vaddq_s64(*v11, v14);
          v11 += 2;
          v13 -= 4;
        }
        while (v13);
        v15 = vaddvq_s64(vaddq_s64(v14, v12));
        *a3 = v15;
        v16 = v15;
        if (v10 == v7)
          return 0;
      }
      else
      {
        v10 = 0;
        v16 = 0;
      }
      v17 = v7 - v10;
      v18 = (uint64_t *)(v8 + 8 * v10);
      do
      {
        v19 = *v18++;
        v16 += v19;
        *a3 = v16;
        --v17;
      }
      while (v17);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1ACC897F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 112)
                                                                                          + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 104), a4, 8, a2, a3, a5);
  else
    return 0;
}

uint64_t sub_1ACC89830(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    return *(unsigned int *)(v1 + 28);
  else
    return 0;
}

uint64_t sub_1ACC89848(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(v2 + 28) <= (signed int)a2)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * a2) + 24);
}

uint64_t sub_1ACC89874(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 80) & 8) == 0 || (result = sub_1ACC8A96C(a1), !(_DWORD)result))
  {
    result = 0;
    *a2 = *(_DWORD *)(a1 + 172);
  }
  return result;
}

uint64_t sub_1ACC898B4(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  _DWORD *v12;

  if ((*(_BYTE *)(a1 + 80) & 8) == 0 || (result = sub_1ACC8A96C(a1), !(_DWORD)result))
  {
    if (a2 < 0 || *(_DWORD *)(a1 + 172) <= a2)
    {
      return 25;
    }
    else
    {
      result = 0;
      v11 = *(_QWORD *)(a1 + 176);
      v12 = (_DWORD *)(v11 + 12 * a2);
      *a3 = *v12;
      *a4 = *(_DWORD *)(v11 + 12 * a2 + 4);
      *a5 = v12[2];
    }
  }
  return result;
}

uint64_t sub_1ACC8994C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 24);
}

uint64_t sub_1ACC8996C(_DWORD *a1, int a2, const unsigned __int8 **a3, int *a4)
{
  int v7;
  uint64_t result;
  int v10;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 64) == 1 || a1[8] == 3)
  {
    v7 = 0;
    *a3 = 0;
LABEL_4:
    result = 0;
    *a4 = v7;
    return result;
  }
  result = sub_1ACC894C0((uint64_t *)a1, 0);
  if (!(_DWORD)result)
  {
    v10 = a2 + 1;
    *a3 = sqlite3_column_text(*((sqlite3_stmt **)a1 + 7), v10);
    v7 = sqlite3_column_bytes(*((sqlite3_stmt **)a1 + 7), v10);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_1ACC89A04(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  const unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    if (*(_DWORD *)(v6 + 88))
    {
      v9 = *(_QWORD *)(a1 + 72);
      if (v9)
        v10 = (uint64_t *)(v9 + 8);
      else
        v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 24);
      result = sub_1ACC8B2C8(*(uint64_t **)(*(_QWORD *)a1 + 40), *v10, *(int **)(a1 + 16));
      goto LABEL_29;
    }
    if (!*(_QWORD *)(v6 + 72))
    {
      v16 = *(_DWORD *)(v6 + 24);
      if (v16 >= 1)
      {
        v17 = 0;
        v18 = *(_QWORD *)(v6 + 40);
        do
        {
          if (!*(_BYTE *)(v18 + v17))
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v17) = -1;
            v16 = *(_DWORD *)(v6 + 24);
          }
          ++v17;
        }
        while (v17 < v16);
      }
LABEL_28:
      result = 0;
LABEL_29:
      *(_DWORD *)(a1 + 80) &= ~4u;
      if ((a2 & 0x80000000) == 0)
        goto LABEL_3;
      goto LABEL_30;
    }
    v11 = 0;
    v12 = 0;
    while (1)
    {
      if (v12 >= *(int *)(v6 + 24))
        goto LABEL_28;
      if (!*(_BYTE *)(*(_QWORD *)(v6 + 40) + v12))
      {
        result = 0;
        v13 = (_DWORD *)(*(_QWORD *)(a1 + 16) + v11);
        *v13 = 0;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 64) == 1)
          goto LABEL_13;
        if (*(_DWORD *)(a1 + 32) != 3)
        {
          result = sub_1ACC894C0((uint64_t *)a1, 0);
          if ((_DWORD)result)
            goto LABEL_29;
          v14 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 56), (int)v12 + 1);
          v15 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 56), v12 + 1);
          if (v14)
          {
            result = (*(uint64_t (**)(_QWORD, _DWORD *, uint64_t, const unsigned __int8 *, uint64_t, uint64_t (*)(_DWORD *, char)))(*(_QWORD *)(v6 + 112) + 16))(*(_QWORD *)(v6 + 104), v13, 8, v14, v15, sub_1ACC8B48C);
            goto LABEL_13;
          }
        }
      }
      result = 0;
LABEL_13:
      ++v12;
      v11 += 4;
      if ((_DWORD)result)
        goto LABEL_29;
    }
  }
  result = 0;
  if ((a2 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(_DWORD *)(v6 + 24) <= (signed int)a2)
    {
      v8 = 0;
      result = 25;
    }
    else
    {
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a2);
    }
    *a3 = v8;
    return result;
  }
LABEL_30:
  *a3 = 0;
  if (*(int *)(v6 + 24) >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 16);
    do
    {
      v19 += *(_DWORD *)(v21 + 4 * v20);
      *a3 = v19;
      ++v20;
    }
    while (v20 < *(int *)(v6 + 24));
  }
  return result;
}

uint64_t sub_1ACC89C18(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (**v31)(uint64_t, __n128);
  _OWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t (*v38)(_QWORD, _QWORD, _QWORD);
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, int, uint64_t);
  int v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  _QWORD v51[2];

  v8 = *(_QWORD **)a1;
  v50 = 0;
  v9 = sub_1ACC7165C(v8, &v50);
  v10 = v50;
  if ((_DWORD)v9)
    goto LABEL_2;
  *(_DWORD *)(v50 + 32) = 1;
  *(_OWORD *)(v10 + 40) = xmmword_1ACCBDE50;
  *(_QWORD *)v10 = v8;
  v12 = *(_QWORD *)(a1 + 64);
  v51[0] = 0;
  v51[1] = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * a2);
  if (sqlite3_initialize())
  {
    v14 = 0;
LABEL_9:
    v11 = 7;
    goto LABEL_10;
  }
  v15 = sub_1ACB5D828(40);
  v14 = v15;
  if (!v15)
    goto LABEL_9;
  *(_QWORD *)(v15 + 32) = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  if (sqlite3_initialize() || (v34 = (_QWORD *)sub_1ACB5D828(8)) == 0)
  {
    *(_QWORD *)(v14 + 32) = 0;
    goto LABEL_9;
  }
  *v34 = 0;
  *(_QWORD *)(v14 + 32) = v34;
  if (sqlite3_initialize() || (v35 = sub_1ACB5D828(56)) == 0)
  {
    *(_QWORD *)(v14 + 16) = 0;
    goto LABEL_9;
  }
  *(_QWORD *)(v35 + 48) = 0;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)v35 = 0u;
  *(_QWORD *)(v14 + 16) = v35;
  if (sqlite3_initialize() || (v36 = sub_1ACB5D828(40)) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(v14 + 16) + 32) = 0;
    goto LABEL_9;
  }
  *(_QWORD *)(v36 + 32) = 0;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_QWORD *)(*(_QWORD *)(v14 + 16) + 32) = v36;
  v37 = *(int **)(*(_QWORD *)(*(_QWORD *)v13 + 32) + 8);
  if (!v37)
  {
    v16 = (int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 24))
    {
LABEL_12:
      v48 = v12;
      v49 = a4;
      v17 = 0;
      while (v17 < *v16)
      {
        v18 = v13 + 32 * v17;
        v19 = strlen(*(const char **)(v18 + 40));
        v20 = sub_1ACC82E78((uint64_t)v51, 0, *(char **)(v18 + 40), v19);
        for (i = *(_QWORD *)(v18 + 56); i && (_DWORD)v20 == 0; i = *(_QWORD *)(i + 24))
        {
          v23 = strlen(*(const char **)(i + 8));
          v20 = sub_1ACC82E78((uint64_t)v51, 1, *(char **)(i + 8), v23);
        }
        v11 = v20;
        if (!(_DWORD)v20)
        {
          v24 = v51[0] + 32 * v17;
          *(_BYTE *)(v24 + 32) = *(_BYTE *)(v18 + 32);
          *(_BYTE *)(v24 + 33) = *(_BYTE *)(v13 + 32 * v17 + 33);
        }
        ++v17;
        if ((_DWORD)v20)
        {
          v25 = v51[0];
          a4 = v49;
          goto LABEL_26;
        }
      }
      v33 = (_OWORD *)v51[0];
      a4 = v49;
      if (v51[0])
      {
        v12 = v48;
        goto LABEL_57;
      }
      v25 = 0;
      v11 = 0;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
  v38 = a4;
  v39 = *v37;
  if (sqlite3_initialize() || (v47 = 4 * (v39 - 1) + 8, (v46 = (void *)sub_1ACB5D828(v47)) == 0))
  {
    v40 = 0;
    if (v39 >= 0)
      v11 = 7;
    else
      v11 = 0;
  }
  else
  {
    v40 = v46;
    bzero(v46, v47);
    memcpy(v40, v37, v47);
    v11 = 0;
  }
  a4 = v38;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 32) + 8) = v40;
LABEL_10:
  v16 = (int *)(v13 + 24);
  if (*(_DWORD *)(v13 + 24))
  {
    if (!(_DWORD)v11)
      goto LABEL_12;
LABEL_25:
    v25 = 0;
    goto LABEL_26;
  }
  if ((_DWORD)v11)
    goto LABEL_25;
LABEL_53:
  if (!sqlite3_initialize())
  {
    v33 = (_OWORD *)sub_1ACB5D828(64);
    if (v33)
    {
      v33[2] = 0u;
      v33[3] = 0u;
      *v33 = 0u;
      v33[1] = 0u;
LABEL_57:
      *(_OWORD *)v14 = *(_OWORD *)v12;
      *(_DWORD *)(v14 + 28) = 1;
      **(_QWORD **)(v14 + 32) = v33;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 32) + 24) = v33;
      v41 = *(_QWORD *)(v14 + 16);
      *(_DWORD *)(*(_QWORD *)(v41 + 32) + 16) = 1;
      *(_QWORD *)v33 = v41;
      if (*v16 != 1 || *(_QWORD *)(v13 + 56) || *(_BYTE *)(v13 + 33))
      {
        v42 = sub_1ACC7FC20;
        v43 = 9;
      }
      else
      {
        v42 = sub_1ACC7FB0C;
        v43 = 4;
      }
      *(_DWORD *)v41 = v43;
      *(_QWORD *)(v41 + 16) = v42;
      *(_QWORD *)(v10 + 64) = v14;
      v10 = v50;
      goto LABEL_62;
    }
  }
  v25 = 0;
  v11 = 7;
LABEL_26:
  sub_1ACC7CB68(v14);
  sub_1ACC7CEE4(v25);
  *(_QWORD *)(v10 + 64) = 0;
  if ((_DWORD)v11)
    goto LABEL_27;
LABEL_62:
  v9 = sub_1ACC7E684((uint64_t)v8, v10, 0);
  if (!(_DWORD)v9)
  {
    while (1)
    {
      if ((*(_BYTE *)(v10 + 80) & 1) != 0)
      {
        v11 = 0;
        goto LABEL_27;
      }
      v44 = a4(&unk_1E5C75210, v10, a3);
      if (v44)
        break;
      v45 = sub_1ACC72670(v10);
      if ((_DWORD)v45)
      {
        v11 = v45;
        goto LABEL_27;
      }
    }
    if (v44 == 101)
      v11 = 0;
    else
      v11 = v44;
    goto LABEL_27;
  }
LABEL_2:
  v11 = v9;
  if (!v10)
    return v11;
LABEL_27:
  v26 = *(_QWORD *)v10;
  v27.n128_f64[0] = sub_1ACC7C6EC((uint64_t *)v10);
  v28 = (_QWORD *)(*(_QWORD *)(v26 + 48) + 72);
  do
  {
    v29 = v28;
    v30 = *v28;
    v28 = (_QWORD *)(*v28 + 8);
  }
  while (v30 != v10);
  *v29 = *(_QWORD *)(v10 + 8);
  v31 = (void (**)(uint64_t, __n128))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_34;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v10);
  v10 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v31 = (void (**)(uint64_t, __n128))&xmmword_1ECD3B1D0;
LABEL_34:
    (*v31)(v10, v27);
  }
  return v11;
}

uint64_t sub_1ACC8A0C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  _QWORD *v6;
  uint64_t result;
  void (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD **)(a1 + 152);
  if (v6)
  {
    while (*v6 != *(_QWORD *)(a1 + 144))
    {
      v6 = (_QWORD *)v6[3];
      if (!v6)
        goto LABEL_4;
    }
    v8 = (void (*)(_QWORD))v6[2];
    if (v8)
      v8(v6[1]);
    goto LABEL_12;
  }
LABEL_4:
  if (!sqlite3_initialize())
  {
    v9 = sub_1ACB5D828(32);
    if (v9)
    {
      v6 = (_QWORD *)v9;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      v10 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)v9 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(v9 + 24) = v10;
      *(_QWORD *)(a1 + 152) = v9;
LABEL_12:
      result = 0;
      v6[1] = a2;
      v6[2] = a3;
      return result;
    }
  }
  if (a3)
    a3(a2);
  return 7;
}

uint64_t sub_1ACC8A174(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 152);
  if (!v2)
    return 0;
  while (*v2 != *(_QWORD *)(a1 + 144))
  {
    v2 = (_QWORD *)v2[3];
    if (!v2)
      return 0;
  }
  v5 = v2[1];
  v4 = v2 + 1;
  result = v5;
  if (a2)
  {
    *v4 = 0;
    v4[1] = 0;
  }
  return result;
}

uint64_t sub_1ACC8A1AC(uint64_t a1, int a2, char **a3, _DWORD *a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v12;

  v12 = 0;
  v8 = sub_1ACC8AC14(a1, a2, a3, &v12);
  v9 = v8;
  if (!(_DWORD)v8)
  {
    if (*a3)
      v10 = &(*a3)[v12];
    else
      v10 = 0;
    a3[1] = v10;
    *a4 = 0;
    *a5 = 0;
    sub_1ACC8A228(v8, a3, a4, a5);
  }
  return v9;
}

void sub_1ACC8A228(uint64_t a1, char **a2, _DWORD *a3, int *a4)
{
  char *v6;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;

  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v10 = -1;
    *a3 = -1;
  }
  else
  {
    v8 = *v6;
    if (*v6 < 0)
    {
      v11 = v6[1];
      if (v6[1] < 0)
      {
        v12 = v6[2];
        if (v12 < 0)
        {
          v26 = 0;
          v13 = sub_1ACC7BBC8(v6, &v26);
          v8 = v26 & 0x7FFFFFFF;
          v9 = v13;
        }
        else
        {
          v8 = v12 & 0x7F | (v8 << 14) & 0x1FC07F | ((v11 & 0x7F) << 7);
          v9 = 3;
        }
      }
      else
      {
        v8 = ((v8 & 0x7F) << 7) | v11;
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
    v14 = &v6[v9];
    *a2 = v14;
    if (v8 == 1)
    {
      v15 = *v14;
      if (*v14 < 0)
      {
        v18 = v14[1];
        if (v14[1] < 0)
        {
          v19 = v14[2];
          if (v19 < 0)
          {
            v26 = 0;
            v20 = sub_1ACC7BBC8(v14, &v26);
            v15 = v26 & 0x7FFFFFFF;
            v16 = v20;
          }
          else
          {
            v15 = v19 & 0x7F | (v15 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
            v16 = 3;
          }
        }
        else
        {
          v15 = ((v15 & 0x7F) << 7) | v18;
          v16 = 2;
        }
      }
      else
      {
        v16 = 1;
      }
      v21 = &v14[v16];
      *a2 = v21;
      *a3 = v15;
      *a4 = 0;
      v8 = *v21;
      if (*v21 < 0)
      {
        v23 = v21[1];
        if (v21[1] < 0)
        {
          v24 = v21[2];
          if (v24 < 0)
          {
            v26 = 0;
            v25 = sub_1ACC7BBC8(v21, &v26);
            v8 = v26 & 0x7FFFFFFF;
            v22 = v25;
          }
          else
          {
            v8 = v24 & 0x7F | (v8 << 14) & 0x1FC07F | ((v23 & 0x7F) << 7);
            v22 = 3;
          }
        }
        else
        {
          v8 = ((v8 & 0x7F) << 7) | v23;
          v22 = 2;
        }
      }
      else
      {
        v22 = 1;
      }
      v17 = 0;
      *a2 = &v21[v22];
    }
    else
    {
      v17 = *a4;
    }
    v10 = v8 + v17 - 2;
  }
  *a4 = v10;
}

uint64_t sub_1ACC8A404(uint64_t a1, int a2, uint64_t *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  int v26;
  char v27;
  int v28;
  unint64_t v29;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 92) == 2)
  {
    v7 = *(_QWORD *)(a1 + 72);
    LODWORD(v29) = 0;
    if (v7)
    {
      v8 = v7 + 4 * a2;
      if (a2)
        v9 = *(_DWORD *)(v8 + 24);
      else
        v9 = 0;
      v21 = *(_DWORD *)(v8 + 28) - v9;
      v20 = *(_QWORD *)(v7 + 16) + v9;
      *a3 = v20;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * a2);
      if (*(_DWORD *)(*(_QWORD *)v17 + 4)
        || (v18 = *(_QWORD *)(*(_QWORD *)v17 + 24), v18 != *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24))
        || *(int *)(v17 + 16) < 1)
      {
        v21 = 0;
        v20 = 0;
        *a3 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v17 + 56);
        if (v19)
        {
          v10 = sub_1ACC8240C(v17 + 32, v18, v19 + 32, a3, &v29);
          if ((_DWORD)v10)
            return v10;
          v20 = *a3;
          v21 = v29;
        }
        else
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8);
          *a3 = v20;
          v21 = *(_DWORD *)(*(_QWORD *)(v17 + 48) + 16);
        }
      }
    }
    v22 = v20 + v21;
    if (v20)
      v23 = v22;
    else
      v23 = 0;
    a3[1] = v23;
    *a4 = 0;
    sub_1ACC8A628((char *)a1, (char **)a3, a4);
    return 0;
  }
  else
  {
    v28 = 0;
    v10 = sub_1ACC8AC14(a1, a2, a3, &v28);
    if (!(_DWORD)v10)
    {
      v11 = (_BYTE *)*a3;
      v12 = v28;
      v13 = *a3 + v28;
      if (!*a3)
        v13 = 0;
      a3[1] = v13;
      if (v12 <= 0)
      {
        *a4 = -1;
      }
      else if (*v11 == 1)
      {
        v14 = v11[1];
        if ((char)v11[1] < 0)
        {
          v25 = v11[2];
          if ((char)v11[2] < 0)
          {
            v26 = (char)v11[3];
            if (v26 < 0)
            {
              v29 = 0;
              v27 = sub_1ACC7BBC8(v11 + 1, &v29);
              *a4 = v29 & 0x7FFFFFFF;
              v15 = (v27 + 1);
            }
            else
            {
              *a4 = v26 & 0x7F | (v14 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
              v15 = 4;
            }
          }
          else
          {
            *a4 = ((v14 & 0x7F) << 7) | v25;
            v15 = 3;
          }
        }
        else
        {
          *a4 = v14;
          v15 = 2;
        }
        *a3 = (uint64_t)&v11[v15];
      }
      else
      {
        *a4 = 0;
      }
    }
  }
  return v10;
}

char *sub_1ACC8A628(char *result, char **a2, int *a3)
{
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 24) + 92) != 2)
  {
    v8 = *a2;
    v9 = (unint64_t)a2[1];
    while ((unint64_t)v8 < v9)
    {
      v11 = *v8;
      if (v11 == 1)
      {
        result = v8 + 1;
        v12 = v8[1];
        if (v8[1] < 0)
        {
          v15 = v8[2];
          if (v8[2] < 0)
          {
            v17 = v8[3];
            if (v17 < 0)
            {
              v18 = 0;
              result = (char *)sub_1ACC7BBC8(result, &v18);
              *a3 = v18 & 0x7FFFFFFF;
              v13 = ((_BYTE)result + 1);
            }
            else
            {
              *a3 = v17 & 0x7F | (v12 << 14) & 0x1FC07F | ((v15 & 0x7F) << 7);
              v13 = 4;
            }
          }
          else
          {
            *a3 = ((v12 & 0x7F) << 7) | v15;
            v13 = 3;
          }
        }
        else
        {
          *a3 = v12;
          v13 = 2;
        }
        *a2 = &v8[v13];
        return result;
      }
      if (v11 < 0)
      {
        if (v8[1] < 0)
        {
          if (v8[2] < 0)
          {
            result = (char *)sub_1ACC7BBC8(v8, &v18);
            v10 = result;
          }
          else
          {
            v10 = 3;
          }
        }
        else
        {
          v10 = 2;
        }
      }
      else
      {
        v10 = 1;
      }
      v8 += v10;
      *a2 = v8;
    }
    goto LABEL_16;
  }
  v5 = *a2;
  if (*a2 >= a2[1])
  {
LABEL_16:
    *a3 = -1;
    return result;
  }
  v6 = *v5;
  if (*v5 < 0)
  {
    v14 = v5[1];
    if (v5[1] < 0)
    {
      v16 = v5[2];
      if (v16 < 0)
      {
        v18 = 0;
        result = (char *)sub_1ACC7BBC8(v5, &v18);
        v6 = v18 & 0x7FFFFFFF;
        v7 = result;
      }
      else
      {
        v6 = v16 & 0x7F | (v6 << 14) & 0x1FC07F | ((v14 & 0x7F) << 7);
        v7 = 3;
      }
    }
    else
    {
      v6 = ((v6 & 0x7F) << 7) | v14;
      v7 = 2;
    }
  }
  else
  {
    v7 = 1;
  }
  *a2 = &v5[v7];
  *a3 = v6 + *a3 - 2;
  return result;
}

uint64_t sub_1ACC8A7FC(uint64_t a1, int a2)
{
  uint64_t result;
  unint64_t *v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  char **v9;
  char **v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t (**v16)(char **);

  if (*(_DWORD *)(a1 + 16))
    return 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (unint64_t *)(a1 + 24);
  v6 = *(_DWORD **)(a1 + 8);
  v7 = *(char **)(a1 + 32);
  v8 = *(int *)(*(_QWORD *)v6 + 24);
  bzero(v7, 8 * v8);
  v9 = (char **)sub_1ACC7B8EC((uint64_t)v6, 1);
  v10 = v9;
  if (v6[15])
  {
    if (!v9)
      goto LABEL_22;
  }
  else if (*((_DWORD *)v9 + 2))
  {
    v11 = sub_1ACC7BBC8(*v9, v5);
    if ((int)v8 >= 1 && *((_DWORD *)v10 + 2) > (int)v11)
    {
      v13 = v11;
      v14 = 1;
      do
      {
        v13 += sub_1ACC7BBC8(&(*v10)[v13], (unint64_t *)v7);
        v15 = (int)v13 < *((_DWORD *)v10 + 2) && v14++ < v8;
        v7 += 8;
      }
      while (v15);
    }
  }
  v16 = (uint64_t (**)(char **))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = (char **)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_22;
    v16 = (uint64_t (**)(char **))&xmmword_1ECD3B1D0;
  }
  (*v16)(v10);
LABEL_22:
  result = v6[15];
  v6[15] = 0;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

uint64_t sub_1ACC8A96C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
    v3 = *(unsigned int *)(v2 + 28);
  else
    v3 = 0;
  v4 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24);
  v5 = *(char **)(a1 + 160);
  if (!v5)
  {
    if (sqlite3_initialize() || (v33 = (char *)sub_1ACB5D828(32 * (int)v3)) == 0)
    {
      if ((int)v3 <= 0)
        result = 0;
      else
        result = 7;
      *(_QWORD *)(a1 + 160) = 0;
      return result;
    }
    v5 = v33;
    bzero(v33, 32 * (int)v3);
    *(_QWORD *)(a1 + 160) = v5;
  }
  v6 = v3;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = v5 + 12;
    do
    {
      v36 = 0;
      v35 = 0;
      result = sub_1ACC8AC14(a1, v7, &v36, &v35);
      if ((_DWORD)result)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
      v10 = v36;
      v11 = v35;
      *(_OWORD *)(v8 - 12) = 0u;
      *(_OWORD *)(v8 + 4) = 0u;
      *(_QWORD *)(v8 - 12) = v10;
      *((_DWORD *)v8 - 1) = v11;
      if (sub_1ACC827F8(v10, v11, (int *)v8, (uint64_t *)(v8 + 12)))
        v8[5] = 1;
      ++v7;
      v8 += 32;
    }
    while (v7 < v3);
  }
  if ((int)v3 < 1)
  {
    result = 0;
    LODWORD(v15) = 0;
    goto LABEL_44;
  }
  v12 = 0;
  v13 = (unsigned __int8 *)(v5 + 17);
  while (1)
  {
    v14 = 0;
    v15 = v12;
    v16 = v13;
    v17 = 0xFFFFFFFFLL;
    v18 = v13;
    do
    {
      v19 = *v18;
      v18 += 32;
      if (!v19 && ((v17 & 0x80000000) != 0 || *(_QWORD *)(v16 + 7) < *(_QWORD *)&v5[32 * v17 + 24]))
        v17 = v14;
      ++v14;
      v16 = v18;
    }
    while (v6 != v14);
    if ((v17 & 0x80000000) != 0)
    {
      result = 0;
      goto LABEL_44;
    }
    ++v12;
    v20 = *(int *)(a1 + 168);
    v21 = *(_QWORD *)(a1 + 176);
    if (v15 + 1 >= v20)
      break;
LABEL_28:
    v27 = (_DWORD *)(v21 + ((0x300000000 * v12 - 0x300000000) >> 30));
    v28 = &v5[32 * v17];
    v30 = *((_QWORD *)v28 + 3);
    v29 = (uint64_t *)(v28 + 24);
    v31 = HIDWORD(v30);
    *v27 = v17;
    v27[1] = HIDWORD(v30);
    v27[2] = v30 & 0x7FFFFFFF;
    result = 267;
    if ((v30 & 0x8000000000000000) != 0 || (int)v4 <= (int)v31)
    {
      LODWORD(v15) = v12;
      goto LABEL_44;
    }
    v32 = &v5[32 * v17];
    if (sub_1ACC827F8(*(_QWORD *)v32, *((_DWORD *)v32 + 2), (int *)v32 + 3, v29))
      v32[17] = 1;
  }
  v34 = v15;
  v22 = v3;
  v23 = v13;
  v24 = v4;
  if ((_DWORD)v20)
    v25 = 2 * v20;
  else
    v25 = 32;
  if (!sqlite3_initialize())
  {
    v26 = sub_1ACB6BB48(v21, 12 * v25);
    if (v26)
    {
      v21 = v26;
      *(_QWORD *)(a1 + 176) = v26;
      *(_DWORD *)(a1 + 168) = v25;
      v4 = v24;
      v13 = v23;
      v3 = v22;
      goto LABEL_28;
    }
  }
  result = 7;
  LODWORD(v15) = v34;
LABEL_44:
  *(_DWORD *)(a1 + 172) = v15;
  *(_DWORD *)(a1 + 80) &= ~8u;
  return result;
}

uint64_t sub_1ACC8AC14(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int *v36;
  int v37;
  uint64_t (**v38)(void *);
  _QWORD v39[3];

  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v9 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 80) & 0x40) == 0)
  {
    v10 = 0;
    if (!v9)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!*(_DWORD *)(v8 + 92))
  {
    v10 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int *)(v11 + 28);
  if (sqlite3_initialize() || (v14 = (_DWORD *)sub_1ACB5D828(16 * v12)) == 0)
  {
    v10 = 7;
    goto LABEL_7;
  }
  v15 = v14;
  bzero(v14, 16 * *(int *)(v11 + 28));
  v16 = *(unsigned int *)(v11 + 28);
  if ((int)v16 >= 1)
  {
    v17 = *(_DWORD ***)(v11 + 32);
    v18 = v15 + 3;
    do
    {
      v19 = *v17;
      if (v9
        || v19[4]
        && *(_QWORD *)(*(_QWORD *)v19 + 24) == *(_QWORD *)(*(_QWORD *)(v11 + 16) + 24)
        && !*(_DWORD *)(*(_QWORD *)v19 + 4))
      {
        v19[4] = 0;
      }
      else
      {
        *v18 = 1;
      }
      v18 += 4;
      ++v17;
      --v16;
    }
    while (v16);
  }
  if (*(int *)(v8 + 24) < 1)
  {
    v10 = 0;
    goto LABEL_60;
  }
  v26 = 0;
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 64) == 1 || *(_DWORD *)(a1 + 32) == 3)
    {
      v28 = 0;
      v10 = 0;
      goto LABEL_45;
    }
    v29 = sub_1ACC894C0((uint64_t *)a1, 0);
    if ((_DWORD)v29)
      break;
    v10 = (uint64_t)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 56), (int)v26 + 1);
    v28 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 56), v26 + 1);
LABEL_45:
    v30 = *(_QWORD *)(a1 + 64);
    v39[0] = v30;
    v39[1] = v15;
    v39[2] = (v26 << 32) - 1;
    v31 = *(unsigned int *)(v30 + 28);
    if ((int)v31 >= 1)
    {
      v32 = 0;
      v33 = *(_QWORD *)(v30 + 32);
      do
      {
        v35 = *(unsigned int **)(*(_QWORD *)(**(_QWORD **)(v33 + 8 * v32) + 32) + 8);
        if (v35)
        {
          v34 = *v35;
          if ((int)v34 < 1)
          {
            LODWORD(v34) = 0;
            goto LABEL_48;
          }
          v36 = (int *)(v35 + 1);
          while (1)
          {
            v37 = *v36++;
            if (v26 == v37)
              break;
            if (!--v34)
              goto LABEL_48;
          }
        }
        LODWORD(v34) = v15[4 * v32 + 3] == 0;
LABEL_48:
        v15[4 * v32++ + 2] = v34;
      }
      while (v32 != v31);
    }
    if (v10)
      v10 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t *, char, const void *, int)))(*(_QWORD *)(v8 + 112) + 16))(*(_QWORD *)(v8 + 104), v39, 4, v10, v28, sub_1ACC8AFC0);
    if (++v26 >= *(int *)(v8 + 24) || (_DWORD)v10 != 0)
      goto LABEL_60;
  }
  v10 = v29;
LABEL_60:
  v38 = (uint64_t (**)(void *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v15);
    v15 = (_DWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v38 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_65;
    }
  }
  else
  {
LABEL_65:
    (*v38)(v15);
  }
LABEL_7:
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    sub_1ACC8B130(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), *(_QWORD *)(v13 + 8));
    v9 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = 0;
  }
LABEL_21:
  *(_DWORD *)(a1 + 80) &= ~0x40u;
  if (!v9)
    goto LABEL_23;
LABEL_22:
  if (!*(_DWORD *)(v8 + 92))
  {
    v23 = v9 + 4 * a2;
    if (a2)
      v24 = *(_DWORD *)(v23 + 24);
    else
      v24 = 0;
    *a4 = *(_DWORD *)(v23 + 28) - v24;
    *a3 = *(_QWORD *)(v9 + 16) + v24;
    return v10;
  }
LABEL_23:
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 8 * a2);
  if (*(_DWORD *)(*(_QWORD *)v21 + 4)
    || *(_QWORD *)(*(_QWORD *)v21 + 24) != *(_QWORD *)(*(_QWORD *)(v20 + 16) + 24))
  {
    v22 = 0;
    *a3 = 0;
  }
  else
  {
    *a3 = *(_QWORD *)(v21 + 8);
    v22 = *(_DWORD *)(v21 + 16);
  }
  *a4 = v22;
  return v10;
}

uint64_t sub_1ACC8AFC0(uint64_t *a1, char a2, const void *a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *a1;
  if (a4 >= 0x8000)
    v7 = 0x8000;
  else
    v7 = a4;
  if ((a2 & 1) == 0)
    ++a1[2];
  v8 = *(_DWORD *)(v6 + 28);
  if (v8 < 1)
    return 0;
  v9 = 0;
  v21 = v6;
  while (1)
  {
    v10 = a1[1];
    if (!*(_DWORD *)(v10 + 16 * v9 + 8))
      goto LABEL_9;
    v11 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
    v12 = v11 + 32;
    while (1)
    {
      v13 = strlen(*(const char **)(v12 + 8));
      if ((v7 == v13 || v7 > v13 && *(_BYTE *)v12) && !memcmp(*(const void **)(v12 + 8), a3, v13))
        break;
      v12 = *(_QWORD *)(v12 + 24);
      if (!v12)
        goto LABEL_9;
    }
    v14 = a1[2];
    LODWORD(v15) = *(_DWORD *)(v11 + 20);
    v16 = (*(_DWORD *)(v11 + 16) + 15);
    if (v16 > v15)
      break;
LABEL_8:
    sub_1ACC829F8(v11 + 8, (uint64_t *)(v10 + 16 * v9), v14);
    v8 = *(_DWORD *)(v6 + 28);
LABEL_9:
    if (++v9 >= v8)
      return 0;
  }
  if (!(_DWORD)v15)
    LODWORD(v15) = 64;
  v15 = (int)v15;
  do
  {
    v17 = v15;
    v15 *= 2;
  }
  while (v17 < v16);
  v18 = *(_QWORD *)(v11 + 8);
  if (!sqlite3_initialize())
  {
    v19 = sub_1ACB6BB48(v18, v17);
    if (v19)
    {
      *(_DWORD *)(v11 + 20) = v17;
      *(_QWORD *)(v11 + 8) = v19;
      v6 = v21;
      goto LABEL_8;
    }
  }
  return 7;
}

uint64_t sub_1ACC8B130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  switch(*(_DWORD *)a1)
  {
    case 1:
      if (*(int *)(a1 + 40) < 1)
        goto LABEL_18;
      v5 = 0;
      LODWORD(v4) = 0;
      do
      {
        if (sub_1ACC8B130(*(_QWORD *)(a1 + 48 + 8 * v5), a2))
          v4 = 1;
        else
          v4 = v4;
        ++v5;
      }
      while (v5 < *(int *)(a1 + 40));
      break;
    case 2:
      if (*(int *)(a1 + 40) < 1)
        goto LABEL_19;
      v6 = 6;
      do
      {
        if (!sub_1ACC8B130(*(_QWORD *)(a1 + 8 * v6), a2))
          goto LABEL_17;
        v7 = v6 - 5;
        ++v6;
      }
      while (v7 < *(int *)(a1 + 40));
      goto LABEL_19;
    case 4:
    case 9:
      v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16) > 0;
      break;
    default:
      if (sub_1ACC8B130(*(_QWORD *)(a1 + 48), a2)
        && !sub_1ACC8B130(*(_QWORD *)(a1 + 56), a2))
      {
LABEL_19:
        v4 = 1;
      }
      else
      {
LABEL_17:
        sub_1ACC8B258(a1);
LABEL_18:
        v4 = 0;
      }
      break;
  }
  return v4;
}

uint64_t sub_1ACC8B258(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result;
  if (*(_DWORD *)result == 4 || *(_DWORD *)result == 9)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 24) + 16) = 0;
  }
  else if (*(int *)(result + 40) >= 1)
  {
    v3 = 0;
    do
      result = sub_1ACC8B258(*(_QWORD *)(v1 + 48 + 8 * v3++));
    while (v3 < *(int *)(v1 + 40));
  }
  return result;
}

uint64_t sub_1ACC8B2C8(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t result;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  sqlite3_stmt *v19;
  unint64_t v20;

  v5 = *(unsigned int *)(*a1 + 24);
  v19 = 0;
  result = sub_1ACC7A800(a1, 8, &v19, 0);
  v7 = v19;
  if (v19)
  {
    if (!sub_1ACBA0E50((uint64_t)v19, 0))
    {
      v8 = *((_QWORD *)v7 + 16);
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v8, a2);
      }
      else
      {
        *(_QWORD *)v8 = a2;
        *(_WORD *)(v8 + 20) = 4;
      }
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 24);
      if (v9)
        xmmword_1ECD3B1D0(v9);
    }
    if (sqlite3_step(v7) == 100)
    {
      v10 = (char *)sqlite3_column_blob(v7, 0);
      v11 = sqlite3_column_bytes(v7, 0);
      if ((int)v5 < 1)
      {
        v12 = 0;
LABEL_22:
        v18 = v12 != v11;
        goto LABEL_23;
      }
      v12 = 0;
      while (v12 < v11)
      {
        v14 = &v10[v12];
        v15 = *v14;
        if (*v14 < 0)
        {
          v16 = v14[1];
          if (v14[1] < 0)
          {
            v17 = v14[2];
            if (v17 < 0)
            {
              v20 = 0;
              v13 = sub_1ACC7BBC8(v14, &v20);
              *a3 = v20 & 0x7FFFFFFF;
            }
            else
            {
              *a3 = v17 & 0x7F | (v15 << 14) & 0x1FC07F | ((v16 & 0x7F) << 7);
              v13 = 3;
            }
          }
          else
          {
            *a3 = ((v15 & 0x7F) << 7) | v16;
            v13 = 2;
          }
        }
        else
        {
          *a3 = v15;
          v13 = 1;
        }
        v12 += v13;
        ++a3;
        if (!--v5)
          goto LABEL_22;
      }
    }
    v18 = 1;
LABEL_23:
    LODWORD(result) = sqlite3_reset(v7);
    if (v18 && (_DWORD)result == 0)
      return 267;
    else
      return result;
  }
  return result;
}

uint64_t sub_1ACC8B48C(_DWORD *a1, char a2)
{
  if ((a2 & 1) == 0)
    ++*a1;
  return 0;
}

char *sub_1ACC8B4A4(uint64_t a1, char *a2, ...)
{
  char *result;
  va_list va;

  va_start(va, a2);
  result = sqlite3_vmprintf(a2, va);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1ACC8B4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  unint64_t v6;
  double v8;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    sub_1ACBBE20C(97202);
    return 0;
  }
  v4 = *(_WORD *)(v3 + 20);
  if (((0x50505050uLL >> v4) & 1) == 0)
    return 0;
  if ((v4 & 0x24) != 0)
  {
    v6 = *(_QWORD *)v3;
  }
  else if ((v4 & 8) != 0)
  {
    v8 = *(double *)v3;
    if (*(double *)v3 >= -9.22337204e18)
    {
      if (v8 <= 9.22337204e18)
        v6 = (uint64_t)v8;
      else
        v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = 0x8000000000000000;
    }
  }
  else if ((v4 & 0x12) != 0 && *(_QWORD *)(v3 + 8))
  {
    v6 = sub_1ACBF2FC0(v3);
  }
  else
  {
    v6 = 0;
  }
  return sub_1ACC8B5B8(*(_QWORD *)(a1 + 40), v6, a2 + 16);
}

uint64_t sub_1ACC8B5B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  sqlite3_stmt *v23;
  uint64_t v24;
  sqlite3_stmt *v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 **v42;
  int v43;
  int v44;
  int *v45;
  int v46;
  int v47;
  unsigned int v48;
  signed int v49;
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t (**v72)(_QWORD);
  uint64_t i;
  uint64_t (**v74)(unsigned __int8 **);
  unsigned __int8 **v75;
  uint64_t (**v76)(unsigned __int8 **);
  sqlite3_stmt *v77;
  uint64_t v78;
  uint64_t v79;
  sqlite3_stmt *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  sqlite3_stmt *v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 **v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  sqlite3_stmt *v103;
  sqlite3_stmt *v104;
  uint64_t v105;
  sqlite3_stmt *v106;

  v89 = *(_QWORD *)a1;
  v103 = 0;
  result = sub_1ACC8A7FC(a1, 1);
  if ((_DWORD)result)
    return result;
  result = sub_1ACC8C95C(*(uint64_t **)(a1 + 8), 1, a2);
  if ((_DWORD)result)
    return result;
  v7 = *(_QWORD *)a1;
  v90 = (sqlite3_stmt *)a1;
  v91 = a2;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 68))
  {
    v105 = 0xFFFFFFFFLL;
    v106 = 0;
    if (!a3)
    {
      result = sub_1ACC7A800((uint64_t *)a1, 2, &v106, 0);
      if ((_DWORD)result)
        goto LABEL_53;
      v23 = v106;
      if (!sub_1ACBA0E50((uint64_t)v106, 0))
      {
        v24 = *((_QWORD *)v23 + 16);
        if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v24, a2);
        }
        else
        {
          *(_QWORD *)v24 = a2;
          *(_WORD *)(v24 + 20) = 4;
        }
        v82 = *(_QWORD *)(*(_QWORD *)v23 + 24);
        if (v82)
          xmmword_1ECD3B1D0(v82);
      }
      if (sqlite3_step(v23) != 100)
      {
        result = sqlite3_reset(v23);
        goto LABEL_53;
      }
    }
    v11 = 0;
    v104 = v90;
    while (1)
    {
      if (v11 + 1 > *(int *)(v7 + 24))
      {
        v25 = v90;
        v26 = *((_QWORD *)v90 + 3);
        v27 = v106;
        if (v26 > 0)
        {
          v22 = 0;
          goto LABEL_50;
        }
        sqlite3_reset(v106);
        result = 267;
LABEL_53:
        v8 = (uint64_t *)v90;
        goto LABEL_173;
      }
      if (*(_BYTE *)(*(_QWORD *)(v7 + 40) + v11))
        goto LABEL_10;
      v12 = v106;
      if (v106)
      {
        v13 = (uint64_t)sqlite3_column_text(v106, (int)v11 + 1);
        a2 = v91;
        v14 = sqlite3_column_bytes(v12, v11 + 1);
        goto LABEL_15;
      }
      if (!a3)
      {
LABEL_10:
        ++v11;
      }
      else
      {
        v18 = *(_QWORD *)(a3 + 8 * v11);
        if (!v18)
        {
          v13 = 0;
LABEL_33:
          sub_1ACBBE20C(91120);
          v15 = 0;
          goto LABEL_16;
        }
        v19 = *(unsigned __int16 *)(v18 + 20);
        if ((~v19 & 0x202) != 0 || *(_BYTE *)(v18 + 22) != 1)
        {
          if ((v19 & 1) != 0)
          {
            v13 = 0;
          }
          else
          {
            v13 = sub_1ACBF2B64((int *)v18, 1);
            v18 = *(_QWORD *)(a3 + 8 * v11);
            if (!v18)
              goto LABEL_33;
            LOWORD(v19) = *(_WORD *)(v18 + 20);
          }
        }
        else
        {
          v13 = *(_QWORD *)(v18 + 8);
        }
        if ((v19 & 2) != 0 && *(_BYTE *)(v18 + 22) == 1)
        {
          v15 = *(unsigned int *)(v18 + 16);
          goto LABEL_16;
        }
        if ((v19 & 0x10) != 0)
        {
          v15 = *(unsigned int *)(v18 + 16);
          if ((v19 & 0x400) != 0)
            v15 = (*(_DWORD *)v18 + v15);
          goto LABEL_16;
        }
        if ((v19 & 1) != 0)
        {
          v15 = 0;
          goto LABEL_16;
        }
        v14 = sub_1ACBF2B3C(v18, 1);
LABEL_15:
        v15 = v14;
LABEL_16:
        HIDWORD(v105) = 0;
        if (v13)
        {
          v16 = (*(uint64_t (**)(_QWORD, sqlite3_stmt **, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(_QWORD *)(v7 + 112) + 16))(*(_QWORD *)(v7 + 104), &v104, 4, v13, v15, sub_1ACC8CAEC);
          v17 = HIDWORD(v105);
        }
        else
        {
          v17 = 0;
          v16 = 0;
        }
        v20 = *((_QWORD *)v90 + 4);
        v21 = *(_QWORD *)(v20 + 8 * v11) - v17;
        *(_QWORD *)(v20 + 8 * v11) = v21;
        if (v21 >= 0)
          v22 = v16;
        else
          v22 = 267;
        ++v11;
        if (v22)
        {
          v25 = v90;
          v26 = *((_QWORD *)v90 + 3);
          v27 = v106;
LABEL_50:
          *((_QWORD *)v25 + 3) = v26 - 1;
          LODWORD(result) = sqlite3_reset(v27);
          if (v22)
            result = v22;
          else
            result = result;
          goto LABEL_53;
        }
      }
    }
  }
  v104 = 0;
  result = sub_1ACC7A800((uint64_t *)a1, 8, &v104, 0);
  v8 = (uint64_t *)a1;
  if ((_DWORD)result)
    goto LABEL_173;
  v9 = v104;
  if (!sub_1ACBA0E50((uint64_t)v104, 0))
  {
    v10 = *((_QWORD *)v9 + 16);
    if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10, a2);
    }
    else
    {
      *(_QWORD *)v10 = a2;
      *(_WORD *)(v10 + 20) = 4;
    }
    v28 = *(_QWORD *)(*(_QWORD *)v9 + 24);
    if (v28)
      xmmword_1ECD3B1D0(v28);
  }
  v29 = sqlite3_step(v9) == 100 ? sqlite3_column_int64(v9, 1) : 0;
  result = sqlite3_reset(v9);
  if ((_DWORD)result || !v29)
    goto LABEL_173;
  v30 = v8[1];
  v31 = sub_1ACC7ABF8(v30);
  if (!v31)
    goto LABEL_172;
  v84 = v31;
  v32 = v31[7];
  if ((int)v32 < 1)
    goto LABEL_171;
  v33 = 0;
  v85 = HIDWORD(a2);
  v86 = v29;
  v96 = v30;
  while (2)
  {
    v35 = v32 - 1;
    v36 = v84[4 * (v32 - 1) + 9];
    if ((int)v36 < 1)
      goto LABEL_66;
    v95 = (uint64_t *)&v84[4 * (v32 - 1) + 10];
    v87 = v32 - 1;
    v88 = v32;
    while (2)
    {
      v37 = *v95;
      v97 = v36 - 1;
      v98 = v36;
      v38 = v36 - 1;
      v101 = *v95 + 56 * (v36 - 1);
      if (*(_QWORD *)(v101 + 16) > v29 || *(_QWORD *)(v37 + 56 * v38 + 24) < v29)
        goto LABEL_71;
      if (!v33)
        ++*(_QWORD *)(v37 + 56 * v38 + 40);
      ++*(_DWORD *)(v30 + 52);
      v39 = v37 + 56 * v38;
      v40 = *(unsigned int *)(v39 + 32);
      v100 = (int *)(v39 + 32);
      v92 = *(_DWORD *)(v39 + 32);
      if (v92 < 1)
      {
        v99 = 0;
        v43 = 4;
        v44 = *(_DWORD *)(v39 + 32);
        v102 = 0xFFFFFFFFLL;
        v45 = v100;
        goto LABEL_84;
      }
      v102 = a2 % v40;
      v41 = (unsigned __int8 **)sub_1ACC7B8EC(v30, (a2 % v40) | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37));
      if (!v41)
        goto LABEL_70;
      v42 = v41;
      if (!sub_1ACC93338(v41, 0, *v100, a2))
      {
        v75 = v42;
        sub_1ACC7955C((unsigned __int8 *)v30, v102 | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37), (char *)*v42, *((_DWORD *)v42 + 2));
        v76 = (uint64_t (**)(unsigned __int8 **))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v42);
          v75 = (unsigned __int8 **)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_70;
          v76 = (uint64_t (**)(unsigned __int8 **))&xmmword_1ECD3B1D0;
        }
        (*v76)(v75);
LABEL_70:
        v33 = 1;
        goto LABEL_71;
      }
      v99 = v42;
      if (**v42 == 4)
        v43 = 4;
      else
        v43 = 8;
      v44 = *v100;
      v45 = v100;
LABEL_84:
      if (v85)
        v46 = 8;
      else
        v46 = v43;
      v47 = (*(_DWORD *)(*(_QWORD *)v30 + 136) - 8) / v46;
      v48 = 32;
      if (v47 <= 32)
        v47 = 32;
      v93 = v47;
      if (!v44
        || v44 == 1 && ((v49 = 4 * bswap32(*((_DWORD *)*v99 + 1)), v49 <= 32) ? (v48 = 32) : (v48 = v49), v48 <= v93))
      {
        v50 = 1;
      }
      else
      {
        v50 = (2 * v44) | 1;
        v48 = v93;
      }
      v94 = v46;
      if (*(_DWORD *)(v30 + 60))
      {
LABEL_98:
        v51 = 0;
        if (v50 < 1)
          goto LABEL_99;
      }
      else
      {
LABEL_102:
        if (sqlite3_initialize() || (v52 = (void *)sub_1ACB5D828(8 * v50)) == 0)
        {
          if (v50 < 1)
          {
            v51 = 0;
            if (*(_DWORD *)(v30 + 60))
              goto LABEL_153;
            goto LABEL_118;
          }
          v51 = 0;
          *(_DWORD *)(v30 + 60) = 7;
        }
        else
        {
          v51 = (uint64_t)v52;
          bzero(v52, 8 * v50);
          if (v50 < 1)
          {
LABEL_99:
            if (*(_DWORD *)(v30 + 60))
            {
LABEL_153:
              sub_1ACC7D608(v51, v50);
              v51 = 0;
              v50 = 0;
              goto LABEL_158;
            }
            goto LABEL_118;
          }
        }
      }
      v53 = 0;
      v54 = v48 * v46;
      do
      {
        if (!*(_DWORD *)(v30 + 60))
        {
          if (sqlite3_initialize() || (v55 = (_DWORD *)sub_1ACB5D828(v54 + 24)) == 0)
          {
            if (v54 >= -23)
              *(_DWORD *)(v30 + 60) = 7;
          }
          else
          {
            v56 = v55;
            bzero(v55, v54 + 24);
            v56[2] = v54 + 8;
            *(_QWORD *)v56 = v56 + 4;
            *(_QWORD *)(v51 + 8 * v53) = v56;
          }
        }
        ++v53;
      }
      while (v50 != v53);
      if (*(_DWORD *)(v30 + 60))
        goto LABEL_153;
      v57 = 0;
      do
      {
        ***(_BYTE ***)(v51 + 8 * v57) = v94;
        v58 = **(_QWORD **)(v51 + 8 * v57++);
        *(_DWORD *)(v58 + 4) = 0;
      }
      while (v50 != v57);
LABEL_118:
      v59 = 0;
      while (v59 < *v45)
      {
        if (v59 == v102)
        {
          v60 = 0;
          v61 = v99;
          if (!v99)
            goto LABEL_137;
        }
        else
        {
          v61 = sub_1ACC7B8EC(v30, v59 | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37));
          v60 = v61;
          if (!v61)
          {
LABEL_137:
            v71 = 0;
            goto LABEL_144;
          }
        }
        v62 = **(unsigned __int8 **)v61;
        if (v62 == 4)
          v63 = 4;
        else
          v63 = 8;
        v64 = ((v61[2] - 8) / v63);
        if ((int)v64 < 1)
        {
          v71 = 0;
          v45 = v100;
          if (!v59)
            goto LABEL_143;
          goto LABEL_144;
        }
        v65 = 0;
        while (1)
        {
          v67 = *(_QWORD *)v61;
          if (v62 == 4)
          {
            v68 = *(_DWORD *)(v67 + 4 * v65 + 8);
            if (!v68)
              goto LABEL_130;
            v69 = bswap32(v68);
          }
          else
          {
            v70 = *(_QWORD *)(v67 + 8 * v65 + 8);
            if (!v70)
              goto LABEL_130;
            v69 = bswap64(v70);
          }
          v66 = sub_1ACC93338(*(unsigned __int8 ***)(v51 + 8 * (v69 % v50)), 0, v50, v69);
          if (v66)
            break;
LABEL_130:
          if (v64 == ++v65)
          {
            v71 = 0;
            goto LABEL_142;
          }
        }
        v71 = v66;
LABEL_142:
        v30 = v96;
        v45 = v100;
        if (!v59)
LABEL_143:
          *(_BYTE *)(**(_QWORD **)v51 + 1) = *(_BYTE *)(*(_QWORD *)v61 + 1);
LABEL_144:
        if (v60)
        {
          v72 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_119;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v60);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v60);
          v60 = (_DWORD *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v72 = &xmmword_1ECD3B1D0;
LABEL_119:
            (*v72)(v60);
          }
        }
        ++v59;
        if (v71)
        {
          sub_1ACC7D608(v51, v50);
          v50 = (2 * v50) | 1;
          v48 = v93;
          v46 = v94;
          if (*(_DWORD *)(v30 + 60))
            goto LABEL_98;
          goto LABEL_102;
        }
      }
      if (*(_DWORD *)(v30 + 60))
        goto LABEL_153;
      sub_1ACC93338(*(unsigned __int8 ***)(v51 + 8 * (v91 % v50)), 1, v50, v91);
      if (v50 >= 1)
      {
        for (i = 0; i != v50; ++i)
          sub_1ACC7955C((unsigned __int8 *)v30, i | ((unint64_t)(*(_DWORD *)v101 + 0x10000) << 37), **(char ***)(v51 + 8 * i), *(_DWORD *)(*(_QWORD *)(v51 + 8 * i) + 8));
      }
      *v100 = v50;
      sub_1ACC797DC((unsigned __int8 *)v30, *(_QWORD *)(v30 + 144));
LABEL_158:
      v29 = v86;
      v32 = v88;
      v8 = (uint64_t *)v90;
      if (v92 >= 1)
      {
        v74 = (uint64_t (**)(unsigned __int8 **))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_164;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v99);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v99);
        v99 = (unsigned __int8 **)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v74 = (uint64_t (**)(unsigned __int8 **))&xmmword_1ECD3B1D0;
LABEL_164:
          (*v74)(v99);
        }
      }
      sub_1ACC7D608(v51, v50);
      v33 = 1;
      a2 = v91;
      v35 = v87;
LABEL_71:
      v36 = v97;
      if (v98 > 1)
        continue;
      break;
    }
LABEL_66:
    v34 = v32 < 2;
    v32 = v35;
    if (!v34)
      continue;
    break;
  }
LABEL_171:
  sub_1ACC7A15C(v84);
LABEL_172:
  result = *(unsigned int *)(v30 + 60);
  *(_DWORD *)(v30 + 60) = 0;
LABEL_173:
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(v89 + 88))
    {
      result = sub_1ACC7A800(v8, 7, &v103, 0);
      if ((_DWORD)result)
        return result;
      v77 = v103;
      if (!sub_1ACBA0E50((uint64_t)v103, 0))
      {
        v78 = *((_QWORD *)v77 + 16);
        if ((*(_WORD *)(v78 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v78, a2);
        }
        else
        {
          *(_QWORD *)v78 = a2;
          *(_WORD *)(v78 + 20) = 4;
        }
        v79 = *(_QWORD *)(*(_QWORD *)v77 + 24);
        if (v79)
          xmmword_1ECD3B1D0(v79);
      }
      sqlite3_step(v77);
      result = sqlite3_reset(v77);
      if (*(_DWORD *)(v89 + 64) | result)
        return result;
    }
    else if (*(_DWORD *)(v89 + 64))
    {
      return 0;
    }
    result = sub_1ACC7A800(v8, 5, &v103, 0);
    if (!(_DWORD)result)
    {
      v80 = v103;
      if (!sub_1ACBA0E50((uint64_t)v103, 0))
      {
        v81 = *((_QWORD *)v80 + 16);
        if ((*(_WORD *)(v81 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v81, a2);
        }
        else
        {
          *(_QWORD *)v81 = a2;
          *(_WORD *)(v81 + 20) = 4;
        }
        v83 = *(_QWORD *)(*(_QWORD *)v80 + 24);
        if (v83)
          xmmword_1ECD3B1D0(v83);
      }
      sqlite3_step(v80);
      return sqlite3_reset(v80);
    }
  }
  return result;
}

uint64_t sub_1ACC8C19C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = *a1;
  if (!(_DWORD)result)
  {
    result = sub_1ACC8C1FC(*(uint64_t **)(a2 + 40), a3, a4);
    if (!(_DWORD)result)
      result = sub_1ACC8C4F0(*(_QWORD *)(a2 + 40), a3, *a4);
  }
  *a1 = result;
  return result;
}

uint64_t sub_1ACC8C1FC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  sqlite3_stmt *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v25;
  sqlite3_stmt *v26;

  v6 = *a1;
  if (!*(_DWORD *)(*a1 + 64))
  {
    v26 = 0;
    v10 = sub_1ACC7A800(a1, 3, &v26, 0);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
LABEL_9:
        v12 = *(unsigned __int8 *)(v11 + 113);
        switch(v12)
        {
          case 186:
            goto LABEL_12;
          case 118:
            v23 = *(_QWORD *)(v11 + 56);
            goto LABEL_43;
          case 109:
LABEL_12:
            v13 = "unopened";
            break;
          default:
            v13 = "invalid";
            break;
        }
LABEL_42:
        sqlite3_log(21, "API call with %s database connection pointer", v13);
        sub_1ACBBE20C(186245);
        v23 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      v20 = v26;
      v21 = 1;
      while (v21 <= *(int *)(v6 + 24) + 1)
      {
        v22 = sqlite3_bind_value(v20, v21, *(const sqlite3_value **)(a2 + 8 * v21));
        ++v21;
        if ((_DWORD)v22)
          goto LABEL_38;
      }
      sqlite3_step(v20);
      v22 = sqlite3_reset(v20);
LABEL_38:
      v10 = v22;
      v11 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        goto LABEL_9;
    }
    v13 = "NULL";
    goto LABEL_42;
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(_WORD *)(v7 + 20);
    if (((0x50505050uLL >> v8) & 1) != 0)
    {
      if ((v8 & 0x24) != 0)
      {
        v9 = *(_QWORD *)v7;
      }
      else if ((v8 & 8) != 0)
      {
        v25 = *(double *)v7;
        if (*(double *)v7 >= -9.22337204e18)
        {
          if (v25 <= 9.22337204e18)
            v9 = (uint64_t)v25;
          else
            v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v9 = 0x8000000000000000;
        }
      }
      else if ((v8 & 0x12) != 0 && *(_QWORD *)(v7 + 8))
      {
        v9 = sub_1ACBF2FC0(v7);
      }
      else
      {
        v9 = 0;
      }
      v10 = 0;
      *a3 = v9;
      return v10;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v6 = *a1;
  }
  if (!*(_DWORD *)(v6 + 88))
    return 20;
  v26 = 0;
  v10 = sub_1ACC7A800(a1, 6, &v26, 0);
  if (!(_DWORD)v10)
  {
    v14 = v26;
    if (!sub_1ACBA0E50((uint64_t)v26, 0))
    {
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 24);
      if (v15)
        xmmword_1ECD3B1D0(v15);
    }
    if (!sub_1ACBA0E50((uint64_t)v14, 1u))
    {
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 24);
      if (v16)
        xmmword_1ECD3B1D0(v16);
    }
    sqlite3_step(v14);
    v10 = sqlite3_reset(v14);
    if (!(_DWORD)v10)
    {
      v17 = *(_QWORD *)*a1;
      if (!v17)
      {
        v19 = "NULL";
        goto LABEL_54;
      }
      v18 = *(unsigned __int8 *)(v17 + 113);
      if (v18 == 186)
      {
LABEL_27:
        v19 = "unopened";
LABEL_54:
        sqlite3_log(21, "API call with %s database connection pointer", v19);
        sub_1ACBBE20C(186245);
        v23 = 0;
        v10 = 0;
        goto LABEL_43;
      }
      if (v18 != 118)
      {
        if (v18 != 109)
        {
          v19 = "invalid";
          goto LABEL_54;
        }
        goto LABEL_27;
      }
      v23 = *(_QWORD *)(v17 + 56);
      v10 = 0;
LABEL_43:
      *a3 = v23;
    }
  }
  return v10;
}

uint64_t sub_1ACC8C4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)a1;
  v29 = 0;
  v30 = 0;
  v31 = a1;
  v32 = 0;
  v7 = sub_1ACC8A7FC(a1, 1);
  if ((_DWORD)v7)
  {
    v8 = v7;
    LODWORD(v32) = 0;
    goto LABEL_4;
  }
  v8 = sub_1ACC8C95C(*(uint64_t **)(a1 + 8), 0, a3);
  LODWORD(v32) = 0;
  if ((_DWORD)v8)
  {
LABEL_4:
    ++*(_QWORD *)(a1 + 24);
    v9 = v29;
    if (v29)
      goto LABEL_5;
    return v8;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  while (v14 < *(_DWORD *)(v6 + 24))
  {
    v8 = 0;
    HIDWORD(v32) = 0;
    if (*(_BYTE *)(*(_QWORD *)(v6 + 40) + v14))
      goto LABEL_40;
    v17 = v14 + 2;
    v18 = *(_QWORD *)(a2 + 8 * v17);
    if (!v18)
      goto LABEL_27;
    v19 = *(unsigned __int16 *)(v18 + 20);
    if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
    {
      v8 = *(_QWORD *)(v18 + 8);
      v20 = *(_QWORD *)(a2 + 8 * v17);
      if (!v20)
        goto LABEL_25;
      goto LABEL_28;
    }
    if ((v19 & 1) != 0)
    {
LABEL_27:
      v8 = 0;
      v20 = *(_QWORD *)(a2 + 8 * v17);
      if (!v20)
      {
LABEL_25:
        sub_1ACBBE20C(91120);
        v21 = 0;
        if (v8)
          goto LABEL_39;
        goto LABEL_40;
      }
    }
    else
    {
      v8 = sub_1ACBF2B64((int *)v18, 1);
      v20 = *(_QWORD *)(a2 + 8 * ((int)v32 + 2));
      if (!v20)
        goto LABEL_25;
    }
LABEL_28:
    v22 = *(_WORD *)(v20 + 20);
    if ((v22 & 2) != 0 && *(_BYTE *)(v20 + 22) == 1)
    {
      v21 = *(unsigned int *)(v20 + 16);
      if (v8)
        goto LABEL_39;
    }
    else if ((v22 & 0x10) != 0)
    {
      v21 = *(unsigned int *)(v20 + 16);
      if ((*(_WORD *)(v20 + 20) & 0x400) != 0)
        v21 = (*(_DWORD *)v20 + v21);
      if (v8)
LABEL_39:
        v8 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t (*)(_DWORD *, char, unsigned __int8 *, int)))(*(_QWORD *)(v6 + 112) + 16))(*(_QWORD *)(v6 + 104), &v31, 4, v8, v21, sub_1ACC8CAEC);
    }
    else if ((v22 & 1) != 0)
    {
      v21 = 0;
      if (v8)
        goto LABEL_39;
    }
    else
    {
      v21 = sub_1ACBF2B3C(v20, 1);
      if (v8)
        goto LABEL_39;
    }
LABEL_40:
    v23 = SHIDWORD(v32);
    v24 = v13 + 9;
    if (v24 <= v12)
    {
      v27 = v29;
LABEL_49:
      v28 = (int8x8_t *)(v27 + (int)v13);
      if (v23 <= 0x7F)
      {
        v28->i8[0] = v23;
        v15 = 1;
      }
      else if (v23 >> 14)
      {
        v15 = sub_1ACBF8034(v28, v23);
      }
      else
      {
        v28->i8[0] = (v23 >> 7) | 0x80;
        v28->i8[1] = v23 & 0x7F;
        v15 = 2;
      }
      v13 += v15;
      goto LABEL_15;
    }
    if (v12)
      LODWORD(v25) = v12;
    else
      LODWORD(v25) = 64;
    v25 = (int)v25;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v24);
    if (!sqlite3_initialize())
    {
      v27 = sub_1ACB6BB48(v29, v26);
      if (v27)
      {
        v29 = v27;
        v12 = v26;
        goto LABEL_49;
      }
    }
    v8 = 7;
LABEL_15:
    v16 = v32;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (int)v32) += SHIDWORD(v32);
    v14 = v16 + 1;
    LODWORD(v32) = v16 + 1;
    if ((_DWORD)v8)
      goto LABEL_4;
  }
  v30 = __PAIR64__(v12, v13);
  ++*(_QWORD *)(a1 + 24);
  v8 = sub_1ACC8CC58((uint64_t *)a1, a3, (uint64_t)&v29);
  v9 = v29;
  if (!v29)
    return v8;
LABEL_5:
  v10 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v9);
    v9 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v10 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    (*v10)(v9);
  }
  return v8;
}

uint64_t sub_1ACC8C844(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 16) = 0;
  result = sub_1ACC79468(*(sqlite3 **)v2, 0, "DELETE FROM %Q.'%q_data';DELETE FROM %Q.'%q_idx';",
             *(_QWORD *)(v2 + 8),
             *(_QWORD *)(v2 + 16),
             *(_QWORD *)(v2 + 8),
             *(_QWORD *)(v2 + 16));
  if (!(_DWORD)result)
  {
    if (!*(_DWORD *)(v2 + 88)
      || (result = sub_1ACC79468(*(sqlite3 **)v2, 0, "DELETE FROM %Q.'%q_docsize';",
                     *(_QWORD *)(v2 + 8),
                     *(_QWORD *)(v2 + 16)),
          !(_DWORD)result))
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_DWORD **)(v4 + 144);
      if (v5)
      {
        sub_1ACC7A15C(v5);
        *(_QWORD *)(v4 + 144) = 0;
      }
      v6 = *(_QWORD *)(v4 + 24);
      if (v6)
      {
        sub_1ACC7A2E4(v6);
        *(_DWORD *)(v4 + 32) = 0;
        *(_DWORD *)(v4 + 56) = 0;
      }
      *(_DWORD *)(v4 + 52) = 0;
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      if (*(_DWORD *)(*(_QWORD *)v4 + 68))
        *(_QWORD *)&v8 = 1;
      sub_1ACC7955C((unsigned __int8 *)v4, 1, &byte_1ACCBEAEE, 0);
      sub_1ACC797DC((unsigned __int8 *)v4, (uint64_t)&v7);
      result = *(unsigned int *)(v4 + 60);
      *(_DWORD *)(v4 + 60) = 0;
      if (!(_DWORD)result)
        return sub_1ACC7A4F0((uint64_t *)a1, "version", 0, 4);
    }
  }
  return result;
}

uint64_t sub_1ACC8C95C(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(uint64_t);
  void *v13;

  if (a1[3])
    goto LABEL_6;
  v6 = *a1;
  if (sqlite3_initialize())
    goto LABEL_3;
  v10 = sub_1ACB5D828(40);
  a1[3] = v10;
  if (!v10)
    goto LABEL_4;
  v11 = v10;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 8) = a1 + 4;
  *(_DWORD *)v10 = *(_DWORD *)(v6 + 92);
  *(_DWORD *)(v10 + 20) = 1024;
  if (sqlite3_initialize())
  {
    *(_QWORD *)(v11 + 32) = 0;
  }
  else
  {
    v13 = (void *)sub_1ACB5D828(0x2000);
    *(_QWORD *)(v11 + 32) = v13;
    if (v13)
    {
      bzero(v13, 0x2000uLL);
      v7 = 0;
      goto LABEL_5;
    }
  }
  v12 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v11);
    v11 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_3;
    v12 = &xmmword_1ECD3B1D0;
  }
  (*v12)(v11);
LABEL_3:
  a1[3] = 0;
LABEL_4:
  v7 = 7;
LABEL_5:
  *((_DWORD *)a1 + 15) = v7;
LABEL_6:
  v8 = a1[5];
  if (v8 > a3 || v8 == a3 && !*((_DWORD *)a1 + 12) || *((_DWORD *)a1 + 8) > *(_DWORD *)(*a1 + 152))
    sub_1ACC8D0C0(a1);
  a1[5] = a3;
  *((_DWORD *)a1 + 12) = a2;
  if (!a2)
    ++*((_DWORD *)a1 + 14);
  result = *((unsigned int *)a1 + 15);
  *((_DWORD *)a1 + 15) = 0;
  return result;
}

uint64_t sub_1ACC8CAEC(_DWORD *a1, char a2, unsigned __int8 *__s2, int a4)
{
  uint64_t *v5;
  int v6;
  int v7;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  char v20;

  v5 = *(uint64_t **)(*(_QWORD *)a1 + 8);
  v6 = a1[3];
  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_6;
    v6 = 1;
  }
  else
  {
    ++v6;
  }
  a1[3] = v6;
LABEL_6:
  if (a4 >= 0x8000)
    v7 = 0x8000;
  else
    v7 = a4;
  v8 = a1[2];
  v9 = v6 - 1;
  v10 = *v5;
  result = sub_1ACC923F8((int *)v5[3], v5[5], v8, v6 - 1, 0x30u, __s2, v7);
  v12 = *(_DWORD *)(v10 + 48);
  if (v12 >= 1 && (_DWORD)result == 0)
  {
    v14 = 0;
    do
    {
      v15 = *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v14);
      if (v15 >= 1)
      {
        v16 = 0;
        v17 = 0;
        while (v17 < v7)
        {
          v18 = v17 + 1;
          if (__s2[v17] >= 0xC0u)
          {
            if (v18 >= v7)
              break;
            v19 = &__s2[v17 + 1];
            while (1)
            {
              v20 = *v19++;
              if ((v20 & 0xC0) != 0x80)
                break;
              if (v7 == ++v18)
              {
                v17 = v7;
                if (v16 + 1 == v15)
                  goto LABEL_18;
                goto LABEL_29;
              }
            }
          }
          v17 = v18;
LABEL_18:
          if (++v16 == v15)
          {
            if (!v17)
              break;
            result = sub_1ACC923F8((int *)v5[3], v5[5], v8, v9, v14 + 49, __s2, v17);
            v12 = *(_DWORD *)(v10 + 48);
            goto LABEL_30;
          }
        }
      }
LABEL_29:
      result = 0;
LABEL_30:
      ++v14;
    }
    while (v14 < v12 && !(_DWORD)result);
  }
  return result;
}

uint64_t sub_1ACC8CC58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  sqlite3_stmt *v23;

  if (!*(_DWORD *)(*a1 + 88))
    return 0;
  v23 = 0;
  v6 = sub_1ACC7A800(a1, 6, &v23, 0);
  if (!(_DWORD)v6)
  {
    v7 = (uint64_t *)v23;
    if (!sub_1ACBA0E50((uint64_t)v23, 0))
    {
      v8 = v7[16];
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v8, a2);
      }
      else
      {
        *(_QWORD *)v8 = a2;
        *(_WORD *)(v8 + 20) = 4;
      }
      v10 = *(_QWORD *)(*v7 + 24);
      if (v10)
        xmmword_1ECD3B1D0(v10);
    }
    if (!*(_DWORD *)(*a1 + 68))
      goto LABEL_22;
    v11 = a1[1];
    v12 = sub_1ACC7ABF8(v11);
    if (v12)
    {
      v13 = *((_QWORD *)v12 + 2);
      sub_1ACC7A15C(v12);
    }
    else
    {
      v13 = 0;
    }
    v6 = *(unsigned int *)(v11 + 60);
    *(_DWORD *)(v11 + 60) = 0;
    if (!sub_1ACBA0E50((uint64_t)v7, 2u))
    {
      v14 = v7[16];
      if ((*(_WORD *)(v14 + 148) & 0x9000) != 0)
      {
        sub_1ACBF327C(v14 + 128, v13);
      }
      else
      {
        *(_QWORD *)(v14 + 128) = v13;
        *(_WORD *)(v14 + 148) = 4;
      }
      v15 = *(_QWORD *)(*v7 + 24);
      if (v15)
        xmmword_1ECD3B1D0(v15);
    }
    if (!(_DWORD)v6)
    {
LABEL_22:
      v16 = *(unsigned int *)(a3 + 8);
      if ((v16 & 0x80000000) != 0)
      {
        sub_1ACBBE20C(98722);
      }
      else
      {
        v17 = *(char **)a3;
        if (!sub_1ACBA0E50((uint64_t)v7, 1u))
        {
          if (v17)
          {
            v18 = sub_1ACB57870(v7[16] + 64, v17, v16, 0, 0);
            if (v18)
            {
              v19 = v18;
              v20 = *v7;
              *(_DWORD *)(v20 + 80) = v19;
              sub_1ACBE938C(v20, v19);
              sub_1ACBF2990(*v7, v19);
            }
          }
          v21 = *(_QWORD *)(*v7 + 24);
          if (v21)
            xmmword_1ECD3B1D0(v21);
        }
      }
      sqlite3_step((sqlite3_stmt *)v7);
      v6 = sqlite3_reset((sqlite3_stmt *)v7);
      if (!sub_1ACBA0E50((uint64_t)v7, 1u))
      {
        v22 = *(_QWORD *)(*v7 + 24);
        if (v22)
          xmmword_1ECD3B1D0(v22);
      }
    }
  }
  return v6;
}

uint64_t sub_1ACC8CE74(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  signed int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t *v15;
  int8x8_t *v16;
  uint64_t v17;
  void (**v18)(char *);

  v2 = *(unsigned int *)(*a1 + 24);
  v3 = a1[3];
  if (sqlite3_initialize())
  {
    v4 = 0;
LABEL_3:
    v5 = 0;
    v6 = 0;
    v7 = 7;
    goto LABEL_4;
  }
  v16 = (int8x8_t *)sub_1ACB6BB48(0, 64);
  v4 = (char *)v16;
  if (!v16)
    goto LABEL_3;
  if (v3 > 0x7F)
  {
    if (v3 >> 14)
    {
      v5 = sub_1ACBF8034(v16, v3);
      v7 = 0;
      v6 = 64;
    }
    else
    {
      v7 = 0;
      v16->i8[0] = (v3 >> 7) | 0x80;
      v16->i8[1] = v3 & 0x7F;
      v6 = 64;
      v5 = 2;
    }
  }
  else
  {
    v7 = 0;
    v16->i8[0] = v3;
    v6 = 64;
    v5 = 1;
  }
LABEL_4:
  if ((int)v2 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a1[4] + 8 * v8);
      v11 = (v5 + 9);
      if (v11 <= v6)
        goto LABEL_19;
      LODWORD(v12) = v6 ? v6 : 64;
      v12 = (int)v12;
      do
      {
        v13 = v12;
        v12 *= 2;
      }
      while (v13 < v11);
      if (!sqlite3_initialize())
      {
        v14 = sub_1ACB6BB48((uint64_t)v4, v13);
        if (v14)
          break;
      }
      v7 = 7;
LABEL_8:
      if (++v8 == v2)
        goto LABEL_23;
    }
    v4 = (char *)v14;
    v6 = v13;
LABEL_19:
    v15 = (int8x8_t *)&v4[v5];
    if (v10 <= 0x7F)
    {
      v15->i8[0] = v10;
      v9 = 1;
    }
    else if (v10 >> 14)
    {
      v9 = sub_1ACBF8034(v15, v10);
    }
    else
    {
      v15->i8[0] = (v10 >> 7) | 0x80;
      v15->i8[1] = v10 & 0x7F;
      v9 = 2;
    }
    v5 += v9;
    goto LABEL_8;
  }
LABEL_23:
  if ((_DWORD)v7)
  {
    if (!v4)
      return v7;
  }
  else
  {
    v17 = a1[1];
    sub_1ACC7955C((unsigned __int8 *)v17, 1, v4, v5);
    v7 = *(unsigned int *)(v17 + 60);
    *(_DWORD *)(v17 + 60) = 0;
    if (!v4)
      return v7;
  }
  v18 = (void (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_35:
    (*v18)(v4);
    return v7;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v4);
  v4 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v18 = (void (**)(char *))&xmmword_1ECD3B1D0;
    goto LABEL_35;
  }
  return v7;
}

_DWORD *sub_1ACC8D0C0(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _DWORD *v4;
  int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  char *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int8x8_t *v54;
  int v55;
  unint64_t v56;
  int8x8_t *v57;
  int v58;
  char *v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  size_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int *v78;
  unint64_t v79;
  int64x2_t *v80;
  _BOOL4 v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  char *__src;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  int *v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[28];
  uint64_t v113;

  v1 = (uint64_t)result;
  v113 = *MEMORY[0x1E0C80C00];
  if (result[8] || result[13])
  {
    v2 = *((_QWORD *)result + 3);
    v95 = 0;
    v3 = sub_1ACC7ABF8((uint64_t)result);
    v96 = v3;
    v4 = *(_DWORD **)(v1 + 144);
    if (v4)
    {
      sub_1ACC7A15C(v4);
      *(_QWORD *)(v1 + 144) = 0;
    }
    if (!*(_DWORD *)(v2 + 16) || (v5 = (int *)(v1 + 60), *(_DWORD *)(v1 + 60)))
    {
      v6 = 0;
      goto LABEL_8;
    }
    if (v3[6] >= 2000)
    {
      v6 = 0;
      *v5 = 13;
      goto LABEL_8;
    }
    v111 = 0u;
    memset(v112, 0, sizeof(v112));
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    v15 = v3[7];
    if ((int)v15 >= 1)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = &v3[4 * i];
        v18 = v17[9];
        if ((int)v18 >= 1)
        {
          v19 = (int *)*((_QWORD *)v17 + 5);
          do
          {
            v20 = *v19;
            v19 += 14;
            v21 = v20 - 1;
            if ((v20 - 1) <= 0x7CF)
              *((_DWORD *)&v98 + (v21 >> 5)) |= 1 << v21;
            --v18;
          }
          while (v18);
        }
      }
    }
    v22 = -32;
    v23 = (unsigned int *)&v98;
    do
    {
      v25 = *v23++;
      v24 = v25;
      v22 += 32;
    }
    while (v25 == -1);
    v26 = 0;
    do
    {
      v27 = v24 >> v26++;
      ++v22;
    }
    while ((v27 & 1) != 0);
    v93 = *(_DWORD *)(*(_QWORD *)v1 + 136);
    v28 = *(unsigned int *)(*(_QWORD *)v1 + 92);
    v29 = *(unsigned int *)(*(_QWORD *)v1 + 176);
    *(_QWORD *)&v105 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    sub_1ACC8DB1C((uint64_t *)v1, (int *)&v98, v22);
    if (*(_DWORD *)(v1 + 60)
      || (v30 = sub_1ACC85E70(v2, 0, 0), (*v5 = v30) != 0)
      || (v81 = v29 == 0, (v33 = *(_QWORD *)(v2 + 24)) == 0))
    {
LABEL_37:
      sub_1ACC7A2E4(v2);
      sub_1ACC8FBCC(v1, (uint64_t)&v98, &v95);
      v6 = v95;
      if (v95 >= 1)
      {
        if (!v3[7])
        {
          sub_1ACC8FF80((uint64_t)v5, &v96);
          v3 = v96;
        }
        if (!*v5)
        {
          v31 = v3[9];
          v32 = *((_QWORD *)v3 + 5);
          if (sqlite3_initialize() || (v75 = sub_1ACB6BB48(v32, 56 * v31 + 56)) == 0)
          {
            *v5 = 7;
          }
          else
          {
            v76 = v75 + 56 * v3[9];
            *(_QWORD *)(v76 + 48) = 0;
            *(_OWORD *)(v76 + 16) = 0u;
            *(_OWORD *)(v76 + 32) = 0u;
            *(_OWORD *)v76 = 0u;
            *((_QWORD *)v3 + 5) = v75;
            if (!*v5)
            {
              v77 = v3[9];
              v3[9] = v77 + 1;
              v78 = (int *)(v75 + 56 * v77);
              *v78 = v22;
              v78[1] = 1;
              v78[2] = v6;
              v79 = *((_QWORD *)v3 + 2);
              if (v79)
              {
                v80 = (int64x2_t *)(v75 + 56 * v77);
                v80[1] = vdupq_n_s64(v79);
                v80[3].i64[0] = *(int *)(v1 + 56);
                *((_QWORD *)v3 + 2) = v79 + 1;
              }
              ++v3[6];
            }
          }
        }
        sub_1ACC902BC(v1, 0, (uint64_t)v3);
      }
LABEL_8:
      v7 = *(_QWORD *)v1;
      if (!*(_DWORD *)(v1 + 60))
      {
        v11 = *(_DWORD *)(v7 + 140);
        if (v11 >= 1)
        {
          if (!v3)
          {
LABEL_16:
            sub_1ACC797DC((unsigned __int8 *)v1, (uint64_t)v3);
            result = sub_1ACC7A15C(v3);
            *(_DWORD *)(v1 + 32) = 0;
            *(_DWORD *)(v1 + 52) = 0;
            *(_DWORD *)(v1 + 56) = 0;
            return result;
          }
          v12 = *((_QWORD *)v3 + 1);
          v13 = v12 + *(int *)(v1 + 52) + (uint64_t)v6;
          v14 = *(int *)(v1 + 16);
          *((_QWORD *)v3 + 1) = v13;
          sub_1ACC90994((_DWORD *)v1, &v96, v14 * (v13 / v14 - v12 / v14) * v3[7], v11);
          v3 = v96;
          v7 = *(_QWORD *)v1;
        }
      }
      v8 = *(_DWORD *)(v7 + 144);
      *(_QWORD *)&v98 = v3;
      if (v3 && v3[7] >= 1)
      {
        if (!*(_DWORD *)(v1 + 60))
        {
          v9 = 1;
          v10 = 9;
          do
          {
            if (v3[v10] < v8)
              break;
            sub_1ACC90BE0(v1, (int **)&v98, v9 - 1, 0);
            v3 = (int *)v98;
            sub_1ACC902BC(v1, v9++, v98);
            v10 += 4;
          }
          while (!*(_DWORD *)(v1 + 60));
        }
        v96 = v3;
      }
      goto LABEL_16;
    }
    v83 = v2;
    v82 = v28;
    v86 = v29;
    while (1)
    {
      v34 = strlen((const char *)(v33 + 48));
      sub_1ACC86144((_DWORD *)v2, v33, 0);
      __src = (char *)(v33 + 48 + v34 + 1);
      v35 = *(_DWORD *)(v33 + 24) - v34;
      v36 = (unsigned __int8 *)(v33 + 48);
      v37 = (v35 - 49);
      v38 = strlen((const char *)(v33 + 48));
      if ((_DWORD)v29)
      {
        v39 = *v5;
      }
      else
      {
        sub_1ACC8DE1C((_DWORD *)v1, (uint64_t)&v98, v38, v36);
        if (*(_DWORD *)(v1 + 60))
          goto LABEL_37;
        if (v93 > DWORD2(v99) + DWORD2(v100) + (int)v37)
        {
          memcpy((void *)(v99 + SDWORD2(v99)), __src, (int)v37);
          DWORD2(v99) += v37;
          v39 = *v5;
          goto LABEL_137;
        }
        v39 = 0;
      }
      if (!v39 && (int)v37 >= 1)
      {
        v84 = v36;
        v85 = v38;
        v90 = v37;
        LODWORD(v37) = 0;
        v40 = 0;
        v91 = 0;
        v87 = v81;
        while (1)
        {
          v94 = 0;
          v46 = (int)v37 + (unint64_t)sub_1ACC7BBC8(&__src[(int)v37], &v94);
          v91 += v94;
          if (!(_DWORD)v29)
          {
            v53 = 0;
            v48 = v90;
            goto LABEL_72;
          }
          v48 = v90;
          if ((_DWORD)v28 == 1)
            break;
          if ((__src[v46] & 1) == 0)
            goto LABEL_71;
          v92 = v40;
          v41 = v28;
          v42 = v29;
          v43 = (char *)v36;
          v44 = v46;
          v45 = (unsigned __int8 *)v43;
          sub_1ACC8E278((unsigned __int8 *)v1, (uint64_t)v3, v43, v91);
          LODWORD(v46) = v44;
          if (!*(_DWORD *)(v1 + 60) && __src[v44] != 1)
          {
            v53 = 0;
            v36 = v45;
            v29 = v42;
            v28 = v41;
            v40 = v92;
            goto LABEL_72;
          }
          LODWORD(v37) = v44 + 1;
          v36 = v45;
          v29 = v42;
          v28 = v41;
          v40 = v92;
LABEL_57:
          v39 = *v5;
          if (*v5)
            v47 = 0;
          else
            v47 = (int)v37 < (int)v90;
          if (!v47)
            goto LABEL_137;
        }
        if ((int)v46 >= (int)v90 || __src[v46])
        {
LABEL_71:
          v53 = 0;
          goto LABEL_72;
        }
        v49 = (char *)v36;
        v50 = v46;
        v51 = (unsigned __int8 *)v49;
        sub_1ACC8E278((unsigned __int8 *)v1, (uint64_t)v3, v49, v91);
        v52 = v50;
        v37 = v50 + 1;
        if ((int)v37 >= (int)v90)
        {
          v36 = v51;
LABEL_135:
          v29 = v86;
          goto LABEL_57;
        }
        v36 = v51;
        if (__src[v37])
          goto LABEL_135;
        v48 = 0;
        LODWORD(v46) = v52 + 2;
        v53 = *v5;
        v29 = v86;
LABEL_72:
        v88 = v46;
        if (!(v53 | v87))
        {
          sub_1ACC8DE1C((_DWORD *)v1, (uint64_t)&v98, v85, v36);
          v87 = 1;
        }
        if (BYTE9(v102))
        {
          *(_WORD *)v99 = bswap32(WORD4(v99)) >> 16;
          v54 = (int8x8_t *)(v99 + SDWORD2(v99));
          v40 = v91;
          if (v91 > 0x7F)
          {
            if (v91 >> 14)
            {
              v55 = sub_1ACBF8034(v54, v91);
            }
            else
            {
              v54->i8[0] = (v91 >> 7) | 0x80;
              v54->i8[1] = v91 & 0x7F;
              v55 = 2;
            }
          }
          else
          {
            v54->i8[0] = v91;
            v55 = 1;
          }
          DWORD2(v99) += v55;
          BYTE9(v102) = 0;
          sub_1ACC8F69C(v1, (unsigned int *)&v98, v91);
        }
        else
        {
          v56 = v91 - v40;
          v40 = v91;
          v57 = (int8x8_t *)(v99 + SDWORD2(v99));
          if (v56 > 0x7F)
          {
            if (v56 >> 14)
            {
              v58 = sub_1ACBF8034(v57, v56);
            }
            else
            {
              v57->i8[0] = (v56 >> 7) | 0x80;
              v57->i8[1] = v56 & 0x7F;
              v58 = 2;
            }
          }
          else
          {
            v57->i8[0] = v56;
            v58 = 1;
          }
          DWORD2(v99) += v58;
        }
        if (*v5)
          goto LABEL_37;
        v90 = v48;
        if ((_DWORD)v28 == 1)
        {
          if (v88 >= (int)v48 || __src[v88])
          {
            LODWORD(v37) = v88;
          }
          else
          {
            v63 = SDWORD2(v99);
            ++DWORD2(v99);
            *(_BYTE *)(v99 + v63) = 0;
            v37 = v88 + 1;
            if ((int)v37 < (int)v90 && !__src[v37])
            {
              v64 = SDWORD2(v99);
              ++DWORD2(v99);
              *(_BYTE *)(v99 + v64) = 0;
              LODWORD(v37) = v88 + 2;
            }
          }
          if (DWORD2(v100) + DWORD2(v99) >= v93)
            sub_1ACC8F98C(v1, (unsigned int *)&v98);
          goto LABEL_57;
        }
        v59 = &__src[v88];
        v60 = *v59;
        if (*v59 < 0)
        {
          v62 = v59[1];
          if (v59[1] < 0)
          {
            v65 = v59[2];
            if (v65 < 0)
            {
              v97 = 0;
              v61 = sub_1ACC7BBC8(&__src[v88], &v97);
              v59 = &__src[v88];
              v60 = v97 & 0x7FFFFFFF;
            }
            else
            {
              v60 = v65 & 0x7F | (v60 << 14) & 0x1FC07F | ((v62 & 0x7F) << 7);
              v61 = 3;
            }
          }
          else
          {
            v60 = ((v60 & 0x7F) << 7) | v62;
            v61 = 2;
          }
        }
        else
        {
          v61 = 1;
        }
        v66 = v61 + (v60 >> 1);
        if ((int)v66 + DWORD2(v99) + DWORD2(v100) <= v93)
        {
          memcpy((void *)(v99 + SDWORD2(v99)), v59, v66);
          DWORD2(v99) += v66;
LABEL_134:
          LODWORD(v37) = v66 + v88;
          v40 = v91;
          v2 = v83;
          v36 = v84;
          v28 = v82;
          goto LABEL_135;
        }
        v67 = 0;
        while (2)
        {
          if (*v5)
            goto LABEL_134;
          v68 = SDWORD2(v99);
          v69 = v93 - (DWORD2(v99) + DWORD2(v100));
          v70 = v66 - v67;
          if ((int)v66 - v67 > v69)
          {
            v71 = (unsigned __int8 *)&v59[v67];
            if ((char)*v71 < 0)
            {
              if ((char)v71[1] < 0)
              {
                if ((char)v71[2] < 0)
                {
                  v72 = sub_1ACC7BBC8(&v59[v67], &v97);
                  v59 = &__src[v88];
                  if (v72 >= v69)
                    goto LABEL_122;
                  goto LABEL_127;
                }
                v72 = 3;
                if (v69 > 3)
                  goto LABEL_127;
              }
              else
              {
                v72 = 2;
                if (v69 > 2)
                  goto LABEL_127;
              }
LABEL_122:
              v70 = v72;
            }
            else
            {
              v72 = 1;
              if (v69 <= 1)
                goto LABEL_122;
              do
              {
LABEL_127:
                v70 = v72;
                v74 = (char *)&v71[v72];
                if (*v74 < 0)
                {
                  if (v74[1] < 0)
                  {
                    if (v74[2] < 0)
                    {
                      v73 = sub_1ACC7BBC8(v74, &v97);
                      v59 = &__src[v88];
                    }
                    else
                    {
                      v73 = 3;
                    }
                  }
                  else
                  {
                    v73 = 2;
                  }
                }
                else
                {
                  v73 = 1;
                }
                v72 = v73 + v70;
              }
              while (v72 <= v69);
            }
          }
          memcpy((void *)(v99 + v68), &v59[v67], v70);
          DWORD2(v99) += v70;
          if (DWORD2(v100) + DWORD2(v99) >= v93)
            sub_1ACC8F98C(v1, (unsigned int *)&v98);
          v67 += v70;
          v5 = (int *)(v1 + 60);
          v59 = &__src[v88];
          if (v67 >= (int)v66)
            goto LABEL_134;
          continue;
        }
      }
LABEL_137:
      if (!v39)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
        *(_QWORD *)(v2 + 24) = v33;
        if (v33)
          continue;
      }
      goto LABEL_37;
    }
  }
  return result;
}

void sub_1ACC8DB1C(uint64_t *a1, int *a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t (**v21)(unsigned __int8 *);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = (*(_DWORD *)(*a1 + 136) + 20);
  *((_QWORD *)a2 + 14) = 0;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  *a2 = a3;
  if (!*((_DWORD *)a1 + 15) && a2[21] <= 1)
  {
    v6 = *((_QWORD *)a2 + 11);
    if (sqlite3_initialize() || (v7 = sub_1ACB6BB48(v6, 32)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }
    else
    {
      v8 = v7;
      bzero((void *)(v7 + 32 * a2[21]), 32 * (1 - a2[21]));
      *((_QWORD *)a2 + 11) = v8;
      a2[21] = 1;
    }
  }
  a2[2] = 1;
  *((_BYTE *)a2 + 74) = 1;
  a2[28] = 1;
  LODWORD(v9) = a2[11];
  if (v9 < v5)
  {
    if (!(_DWORD)v9)
      LODWORD(v9) = 64;
    v9 = (int)v9;
    do
    {
      v10 = v9;
      v9 *= 2;
    }
    while (v10 < v5);
    v11 = *((_QWORD *)a2 + 4);
    if (sqlite3_initialize() || (v12 = sub_1ACB6BB48(v11, v10)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }
    else
    {
      a2[11] = v10;
      *((_QWORD *)a2 + 4) = v12;
    }
  }
  LODWORD(v13) = a2[7];
  if (v13 < v5)
  {
    if (!(_DWORD)v13)
      LODWORD(v13) = 64;
    v13 = (int)v13;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 < v5);
    v15 = *((_QWORD *)a2 + 2);
    if (sqlite3_initialize() || (v16 = sub_1ACB6BB48(v15, v14)) == 0)
    {
      *((_DWORD *)a1 + 15) = 7;
    }
    else
    {
      a2[7] = v14;
      *((_QWORD *)a2 + 2) = v16;
    }
  }
  v17 = a1 + 11;
  if (a1[11])
    goto LABEL_37;
  v18 = (unsigned __int8 *)sqlite3_mprintf("INSERT INTO '%q'.'%q_idx'(segid,term,pgno) VALUES(?,?,?)", *(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16));
  v20 = v18;
  if (*((_DWORD *)a1 + 15))
  {
    if (!v18)
      return;
  }
  else
  {
    if (!v18)
    {
      *((_DWORD *)a1 + 15) = 7;
      return;
    }
    *((_DWORD *)a1 + 15) = sub_1ACB5C66C(*(_QWORD *)*a1, v18, 0xFFFFFFFFLL, 133, 0, a1 + 11, 0, v19);
  }
  v21 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v20);
    v20 = (unsigned __int8 *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_37;
    v21 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
  }
  (*v21)(v20);
LABEL_37:
  if (!*((_DWORD *)a1 + 15))
  {
    **((_DWORD **)a2 + 2) = 0;
    a2[6] = 4;
    v22 = (_QWORD *)*v17;
    v23 = *a2;
    if (!sub_1ACBA0E50(*v17, 0))
    {
      v24 = v22[16];
      if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v24, v23);
      }
      else
      {
        *(_QWORD *)v24 = v23;
        *(_WORD *)(v24 + 20) = 4;
      }
      v25 = *(_QWORD *)(*v22 + 24);
      if (v25)
        xmmword_1ECD3B1D0(v25);
    }
  }
}

uint64_t sub_1ACC8DE1C(_DWORD *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  signed int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  size_t v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v8 = *(_DWORD *)(a2 + 56);
  if (v8 >= (int)a3)
    v9 = a3;
  else
    v9 = v8;
  v10 = (uint64_t *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  if ((signed int)(a3 + v11 + *(_DWORD *)(a2 + 40) + 2) >= *(_DWORD *)(*(_QWORD *)a1 + 136))
  {
    if (v11 >= 5)
    {
      result = sub_1ACC8F98C((uint64_t)a1, (unsigned int *)a2);
      if (a1[15])
        return result;
      v11 = *(_DWORD *)(a2 + 24);
    }
    v13 = a3 + v11 + 20;
    LODWORD(v14) = *(_DWORD *)(a2 + 28);
    if (v13 > v14)
    {
      if (!(_DWORD)v14)
        LODWORD(v14) = 64;
      v14 = (int)v14;
      do
      {
        v15 = v14;
        v14 *= 2;
      }
      while (v15 < v13);
      v16 = *v10;
      if (sqlite3_initialize() || (v17 = sub_1ACB6BB48(v16, v15)) == 0)
      {
        a1[15] = 7;
      }
      else
      {
        *(_DWORD *)(a2 + 28) = v15;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  v18 = (int8x8_t *)(*(_QWORD *)(a2 + 32) + *(int *)(a2 + 40));
  v19 = *(int *)(a2 + 24);
  v20 = *(int *)(a2 + 12);
  v21 = v19 - v20;
  if ((v19 - v20) > 0x7F)
  {
    if (v21 >> 14)
    {
      v22 = sub_1ACBF8034(v18, v21);
    }
    else
    {
      v18->i8[0] = (v21 >> 7) | 0x80;
      v18->i8[1] = v21 & 0x7F;
      v22 = 2;
    }
  }
  else
  {
    v18->i8[0] = v21;
    v22 = 1;
  }
  *(_DWORD *)(a2 + 40) += v22;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 74))
  {
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v24 = 0;
      while (*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v24) == a4[v24])
      {
        if (v9 == ++v24)
          goto LABEL_38;
      }
      LODWORD(v9) = v24;
    }
LABEL_38:
    sub_1ACC7A400(a1 + 15, (uint64_t)v10, (int)v9);
    v23 = v9;
LABEL_39:
    v27 = a1 + 15;
    v28 = v23;
    result = sub_1ACC7A400(v27, (uint64_t)v10, (int)a3 - (uint64_t)v23);
    v29 = a3 - v23;
    if (!(_DWORD)v29)
      goto LABEL_50;
    v30 = *(_DWORD *)(a2 + 24);
    v31 = *(_DWORD *)(a2 + 28);
    v32 = (v30 + v29);
    if (v32 <= v31)
    {
      result = *v10;
    }
    else
    {
      if (v31)
        LODWORD(v33) = *(_DWORD *)(a2 + 28);
      else
        LODWORD(v33) = 64;
      v33 = (int)v33;
      do
      {
        v34 = v33;
        v33 *= 2;
      }
      while (v34 < v32);
      v35 = *v10;
      result = sqlite3_initialize();
      if ((_DWORD)result || (result = sub_1ACB6BB48(v35, v34)) == 0)
      {
        *v27 = 7;
        goto LABEL_50;
      }
      *(_DWORD *)(a2 + 28) = v34;
      *(_QWORD *)(a2 + 16) = result;
      v30 = *(_DWORD *)(a2 + 24);
    }
    result = (uint64_t)memcpy((void *)(result + v30), &a4[v28], v29);
    *(_DWORD *)(a2 + 24) += v29;
LABEL_50:
    *(_DWORD *)(a2 + 56) = 0;
    if (a3)
    {
      LODWORD(v36) = *(_DWORD *)(a2 + 60);
      if (v36 >= a3)
      {
        v40 = 0;
        result = *(_QWORD *)(a2 + 48);
        v37 = a3;
LABEL_59:
        result = (uint64_t)memcpy((void *)(result + v40), a4, v37);
        *(_DWORD *)(a2 + 56) += a3;
        goto LABEL_60;
      }
      if (!(_DWORD)v36)
        LODWORD(v36) = 64;
      v36 = (int)v36;
      v37 = a3;
      do
      {
        v38 = v36;
        v36 *= 2;
      }
      while (v38 < a3);
      v39 = *(_QWORD *)(a2 + 48);
      result = sqlite3_initialize();
      if (!(_DWORD)result)
      {
        result = sub_1ACB6BB48(v39, v38);
        if (result)
        {
          *(_DWORD *)(a2 + 60) = v38;
          *(_QWORD *)(a2 + 48) = result;
          v40 = *(int *)(a2 + 56);
          goto LABEL_59;
        }
      }
      *v27 = 7;
    }
LABEL_60:
    *(_BYTE *)(a2 + 74) = 0;
    *(_WORD *)(a2 + 72) = 1;
    **(_DWORD **)(a2 + 88) = *(_DWORD *)(a2 + 8);
    return result;
  }
  if (*(_DWORD *)(a2 + 8) == 1)
  {
LABEL_24:
    v23 = 0;
    goto LABEL_39;
  }
  v25 = a3;
  if (*(_DWORD *)(a2 + 56))
  {
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v26 = 0;
      while (*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v26) == a4[v26])
      {
        if (v9 == ++v26)
          goto LABEL_67;
      }
      LODWORD(v9) = v26;
    }
LABEL_67:
    v25 = v9 + 1;
  }
  result = sub_1ACC90540((uint64_t)a1, (unsigned int *)a2);
  if (a1[15])
    return result;
  *(_DWORD *)(a2 + 104) = 0;
  if (!v25)
  {
    v23 = 0;
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
    goto LABEL_39;
  }
  LODWORD(v41) = *(_DWORD *)(a2 + 108);
  if (v41 >= v25)
  {
    v45 = 0;
    result = *(_QWORD *)(a2 + 96);
    v42 = v25;
  }
  else
  {
    if (!(_DWORD)v41)
      LODWORD(v41) = 64;
    v41 = (int)v41;
    v42 = v25;
    do
    {
      v43 = v41;
      v41 *= 2;
    }
    while (v43 < v25);
    v44 = *(_QWORD *)(a2 + 96);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(v44, v43)) == 0)
    {
      a1[15] = 7;
      *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
      return result;
    }
    *(_DWORD *)(a2 + 108) = v43;
    *(_QWORD *)(a2 + 96) = result;
    v45 = *(int *)(a2 + 104);
  }
  result = (uint64_t)memcpy((void *)(result + v45), a4, v42);
  *(_DWORD *)(a2 + 104) += v25;
  v46 = a1[15];
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
  if (!v46)
    goto LABEL_24;
  return result;
}

uint64_t sub_1ACC8E278(unsigned __int8 *a1, uint64_t a2, char *__s, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  char **v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  int64_t v28;
  uint64_t v29;
  uint64_t i;
  signed int v31;
  int v32;
  int v33;
  char *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  signed int v58;
  uint64_t v59;
  char *v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  signed int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (**v70)(_QWORD);
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  int v75;
  int8x8_t *v76;
  unint64_t v77;
  int v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  char *v92;
  uint64_t (**v93)(_QWORD);
  sqlite3_int64 v94;
  char **v95;
  char **v96;
  uint64_t v97;
  unsigned int v98;
  signed int v99;
  char *v100;
  char *v101;
  int v102;
  int v103;
  size_t v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  char *v109;
  int v110;
  unsigned int v111;
  uint64_t (**v112)(char **);
  int v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  int v117;
  char *v118;
  char *v119;
  signed int v120;
  void (**v121)(int8x8_t *);
  unint64_t v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  signed int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char *v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  signed int v149;
  int v150;
  uint64_t v151;
  signed int v152;
  int v153;
  char *v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  int v161;
  int8x8_t *v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  void (**v166)(void *);
  int v167;
  int v168;
  uint64_t (**v169)(_QWORD);
  int v170;
  unint64_t v171;
  int v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  unsigned int __n;
  int __na;
  char *__n_4;
  int __n_4a;
  uint64_t v182;
  int v183;
  _DWORD *__src;
  int __srca;
  void *__srcb;
  int __srcc;
  int8x8_t *__srcd;
  int __srce;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  unsigned int v193;
  char **v194;
  int *__len;
  int __lenb;
  int __lenc;
  unsigned int __lena;
  int v199;
  unsigned int v200;
  char *v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209[2];

  v8 = strlen(__s);
  v205 = 0;
  sub_1ACC841A0((uint64_t)a1, a2, 0x40u, 0, (unsigned __int8 *)__s, v8, 0xFFFFFFFF, 0, &v205);
  if (*((_DWORD *)a1 + 15))
    return sub_1ACC7D2A0(v205);
  v9 = v205;
  if (*(_BYTE *)(v205 + 20))
    return sub_1ACC7D2A0(v205);
  if (*(_QWORD *)(v205 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v205 + 88) + 4) + 216) < a4)
  {
    do
    {
      sub_1ACC800BC((uint64_t)a1, v9, 1, a4);
      if (*((_DWORD *)a1 + 15) || *(_BYTE *)(v9 + 20))
        return sub_1ACC7D2A0(v205);
      v11 = *(_QWORD *)(v9 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v9 + 88) + 4) + 216);
      v12 = *(_DWORD *)(v9 + 68);
    }
    while ((v12 || v11 < a4) && (!v12 || v11 > a4));
  }
  v13 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 88) + 4);
  if (*(_QWORD *)(v9 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v9 + 88) + 4) + 216) != a4)
    return sub_1ACC7D2A0(v205);
  v14 = v9 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v9 + 88) + 4);
  v16 = *(unsigned int **)(v14 + 96);
  v15 = (unsigned int **)(v14 + 96);
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 92);
  v18 = *v16;
  v19 = (char **)v15[2];
  v20 = *v19;
  v21 = *((_DWORD *)v19 + 2);
  LODWORD(v19) = *((_DWORD *)v19 + 3);
  v207 = 0;
  v208 = 0;
  v202 = (int)v19;
  v199 = v21;
  v22 = v21 - (_DWORD)v19;
  if (sqlite3_initialize() || (v24 = (char *)sub_1ACB5D828(v22 + 16)) == 0)
  {
    if (v22 >= -15)
    {
      *((_DWORD *)a1 + 15) = 7;
      return sub_1ACC7D2A0(v205);
    }
    v23 = 0;
  }
  else
  {
    v23 = v24;
    bzero(v24, v22 + 16);
  }
  if (*((_DWORD *)a1 + 15))
    return sub_1ACC7D2A0(v205);
  v190 = v18;
  v204 = v22;
  memcpy(v23, &v20[v202], v22);
  v25 = v9 + 136 * v13;
  __len = (int *)(v25 + 160);
  v26 = *(int *)(v25 + 108);
  v191 = (int *)(v25 + 108);
  if ((_DWORD)v26 == *(_DWORD *)(v25 + 160))
    v27 = *(_DWORD *)(v9 + 136 * v13 + 164);
  else
    v27 = __rev16(*(unsigned __int16 *)v20);
  v28 = v27 + (unint64_t)sub_1ACC7BBC8(&v20[v27], &v208);
  if (v17 == 1)
  {
    v29 = *(_QWORD *)(v9 + 136 * v13 + 128);
    for (i = (int)v28; v29 > (int)v28; i = (int)v28)
    {
      if (v20[i])
        v31 = v28;
      else
        v31 = v28 + 1;
      if (v20[v31])
        v27 = v31;
      else
        v27 = v31 + 1;
      LODWORD(v28) = v27 + sub_1ACC7BBC8(&v20[v27], &v208);
    }
    v32 = v204;
    v33 = *(_DWORD *)(v9 + 136 * v13 + 172);
    if ((int)v28 < v33 && !v20[i])
      LODWORD(v28) = v28 + 1;
    if ((int)v28 < v33 && !v20[(int)v28])
      LODWORD(v28) = v28 + 1;
  }
  else
  {
    v34 = &v20[v28];
    v35 = v20[v28];
    if (v20[v28] < 0)
    {
      v37 = v34[1];
      if (v34[1] < 0)
      {
        v38 = v34[2];
        if (v38 < 0)
        {
          v209[0] = 0;
          v36 = sub_1ACC7BBC8(v34, v209);
          v35 = v209[0] & 0x7FFFFFFF;
        }
        else
        {
          v35 = v38 & 0x7F | (v35 << 14) & 0x1FC07F | ((v37 & 0x7F) << 7);
          v36 = 3;
        }
      }
      else
      {
        v35 = ((v35 & 0x7F) << 7) | v37;
        v36 = 2;
      }
    }
    else
    {
      v36 = 1;
    }
    v39 = v36 + v28;
    v28 = *(_QWORD *)(v9 + 136 * v13 + 128);
    while (v28 > v39)
    {
      v27 = v39 + (v35 >> 1);
      v40 = v27 + sub_1ACC7BBC8(&v20[v27], &v208);
      v41 = &v20[v40];
      v35 = *v41;
      if ((v35 & 0x80) != 0)
      {
        v42 = v41[1];
        if (v41[1] < 0)
        {
          v43 = v41[2];
          if (v43 < 0)
          {
            v209[0] = 0;
            v44 = sub_1ACC7BBC8(v41, v209);
            v35 = v209[0] & 0x7FFFFFFF;
            v39 = v44 + v40;
          }
          else
          {
            v35 = v43 & 0x7F | (v35 << 14) & 0x1FC07F | ((v42 & 0x7F) << 7);
            v39 = v40 + 3;
          }
        }
        else
        {
          v35 = ((v35 & 0x7F) << 7) | v42;
          v39 = v40 + 2;
        }
      }
      else
      {
        v39 = v40 + 1;
      }
    }
    LODWORD(v28) = *(_DWORD *)(v9 + 136 * v13 + 224) + v28;
    v32 = v204;
  }
  v201 = v23;
  if ((int)v28 >= v202)
  {
    if (*((_DWORD *)a1 + 15))
    {
LABEL_70:
      v47 = 1;
      v53 = v202;
      LODWORD(v28) = v202;
      goto LABEL_73;
    }
    v79 = *v15;
    v80 = v26 + 1;
    __srca = *(_DWORD *)(*(_QWORD *)a1 + 92);
    v193 = v13;
    while (1)
    {
      if (v80 > (int)v79[2])
        goto LABEL_70;
      v81 = v79;
      v82 = *v79;
      v83 = sub_1ACC7B8EC((uint64_t)a1, v80 + (v82 << 37));
      if (!v83)
      {
        v47 = 1;
        v23 = v201;
        v53 = v202;
        LODWORD(v28) = v202;
        v32 = v204;
        v13 = v193;
        goto LABEL_73;
      }
      v84 = v83;
      v85 = *(char **)v83;
      v86 = __rev16(**(unsigned __int16 **)v83);
      if (v86)
      {
        v47 = 0;
        goto LABEL_173;
      }
      v87 = (int)v83[3];
      if ((_DWORD)v87 != v83[2])
      {
        v88 = &v85[v87];
        v89 = v85[v87];
        v86 = v89;
        if (v89 < 0)
        {
          v90 = v88[1];
          if (v88[1] < 0)
          {
            v91 = v88[2];
            if (v91 < 0)
            {
              v209[0] = 0;
              v92 = v85;
              sub_1ACC7BBC8(v88, v209);
              v85 = v92;
              v86 = v209[0] & 0x7FFFFFFF;
            }
            else
            {
              v86 = v91 & 0x7F | (v86 << 14) & 0x1FC07F | ((v90 & 0x7F) << 7);
            }
          }
          else
          {
            v86 = ((v86 & 0x7F) << 7) | v90;
          }
        }
        if (v86)
        {
          v47 = 1;
LABEL_173:
          v13 = v193;
          if (__srca == 1)
            goto LABEL_278;
          v114 = (int)v84[3];
          if ((int)v86 >= (int)v114 || ((v115 = v84[2], v86 >= 4) ? (v116 = v115 < (int)v114) : (v116 = 1), v116))
          {
            *((_DWORD *)a1 + 15) = 267;
            goto LABEL_278;
          }
          __n_4 = v85;
          v182 = v86 - 4;
          __srcc = v84[2];
          if (v115 <= (int)v114)
          {
            __na = 0;
            __srcd = 0;
          }
          else
          {
            v176 = v84[3];
            v118 = &v85[v114];
            __n = v85[v114];
            if (v85[v114] < 0)
            {
              v167 = v118[1];
              if (v118[1] < 0)
              {
                v168 = v118[2];
                if (v168 < 0)
                {
                  v209[0] = 0;
                  v175 = sub_1ACC7BBC8(v118, v209);
                  __n = v209[0] & 0x7FFFFFFF;
                }
                else
                {
                  __n = v168 & 0x7F | (__n << 14) & 0x1FC07F | ((v167 & 0x7F) << 7);
                  v175 = 3;
                }
              }
              else
              {
                __n = ((__n & 0x7F) << 7) | v167;
                v175 = 2;
              }
            }
            else
            {
              v175 = 1;
            }
            if (__n < v86)
            {
              *((_DWORD *)a1 + 15) = 267;
LABEL_277:
              v13 = v193;
LABEL_278:
              v169 = &off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                v23 = v201;
                v53 = v202;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v84);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v84);
                v84 = (_DWORD *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v169 = &xmmword_1ECD3B1D0;
                  goto LABEL_284;
                }
              }
              else
              {
                v23 = v201;
                v53 = v202;
LABEL_284:
                (*v169)(v84);
              }
              LODWORD(v28) = v53;
              v32 = v204;
              goto LABEL_73;
            }
            v13 = v193;
            if (*((_DWORD *)a1 + 15))
              goto LABEL_278;
            v170 = __srcc - v176;
            if (sqlite3_initialize() || (__srcd = (int8x8_t *)sub_1ACB5D828(v170 + 2)) == 0)
            {
              v116 = v170 < -1;
              v13 = v193;
              if (!v116)
                *((_DWORD *)a1 + 15) = 7;
              goto LABEL_278;
            }
            v177 = v175 + v176;
            bzero(__srcd, v170 + 2);
            v171 = (int)(__n - v182);
            if (__n - v182 > 0x7F)
            {
              if (v171 >> 14)
              {
                __na = sub_1ACBF8034(__srcd, v171);
              }
              else
              {
                __srcd->i8[0] = (v171 >> 7) | 0x80;
                __srcd->i8[1] = (__n - v182) & 0x7F;
                __na = 2;
              }
            }
            else
            {
              __srcd->i8[0] = __n - v182;
              __na = 1;
            }
            v172 = v84[2];
            v173 = __OFSUB__(v172, v177);
            v174 = v172 - v177;
            if (!((v174 < 0) ^ v173 | (v174 == 0)))
            {
              memcpy((char *)__srcd + __na, &__n_4[v177], v174);
              __na = __na - v177 + v84[2];
            }
          }
          v119 = &__n_4[v86];
          v120 = v84[3] - v182;
          memmove(__n_4 + 4, v119, (int)v84[3] - v182 - 4);
          *((_WORD *)__n_4 + 1) = bswap32(v120) >> 16;
          if (__rev16(*(unsigned __int16 *)__n_4))
            *(_WORD *)__n_4 = 1024;
          if (__na >= 1)
          {
            memcpy(&__n_4[v120], __srcd, __na);
            v120 += __na;
          }
          if (__srcd)
          {
            v121 = (void (**)(int8x8_t *))&off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_197;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(__srcd);
            --qword_1ECD3E8D0;
            off_1ECD3B168(__srcd);
            __srcd = (int8x8_t *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v121 = (void (**)(int8x8_t *))&xmmword_1ECD3B1D0;
LABEL_197:
              (*v121)(__srcd);
            }
          }
          sub_1ACC7955C(a1, v80 + (v82 << 37), __n_4, v120);
          goto LABEL_277;
        }
      }
      LODWORD(v209[0]) = 0x4000000;
      if (__srca != 1)
        sub_1ACC7955C(a1, v80 + (v82 << 37), (char *)v209, 4u);
      v93 = &off_1ECD3B168;
      v23 = v201;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v84);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v84);
        v84 = (_DWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_112;
        v93 = &xmmword_1ECD3B1D0;
      }
      (*v93)(v84);
LABEL_112:
      ++v80;
      v32 = v204;
      v79 = v81;
      v13 = v193;
      if (*((_DWORD *)a1 + 15))
        goto LABEL_70;
    }
  }
  if (v32 < 1)
  {
    v47 = 0;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      v49 = &v23[v46];
      v50 = v23[v46];
      if (v23[v46] < 0)
      {
        v51 = v49[1];
        if (v49[1] < 0)
        {
          v52 = v49[2];
          if (v52 < 0)
          {
            v209[0] = 0;
            v48 = sub_1ACC7BBC8(v49, v209);
            v50 = v209[0] & 0x7FFFFFFF;
          }
          else
          {
            v50 = v52 & 0x7F | (v50 << 14) & 0x1FC07F | ((v51 & 0x7F) << 7);
            v48 = 3;
          }
        }
        else
        {
          v50 = ((v50 & 0x7F) << 7) | v51;
          v48 = 2;
        }
        v32 = v204;
      }
      else
      {
        v48 = 1;
      }
      v46 += v48;
      v45 += v50;
      if (v45 == (_DWORD)v28)
        v47 = 1;
    }
    while ((int)v46 < v32);
  }
  v53 = v202;
LABEL_73:
  if (v27 == bswap32(*(unsigned __int16 *)v20) >> 16)
  {
    if (!v47 && (_DWORD)v28 != v53)
    {
LABEL_93:
      if ((_DWORD)v28 == v53)
      {
        LODWORD(v28) = 0;
        v66 = v53;
        if (!*((_DWORD *)a1 + 15))
          goto LABEL_234;
      }
      else
      {
        v66 = v28 + sub_1ACC7BBC8(&v20[(int)v28], &v207);
        v76 = (int8x8_t *)&v20[v27];
        v77 = v207 + v208;
        if (v207 + v208 > 0x7F)
        {
          if (v77 >> 14)
          {
            v78 = sub_1ACBF8034(v76, v77);
          }
          else
          {
            v76->i8[0] = (v77 >> 7) | 0x80;
            v76->i8[1] = v77 & 0x7F;
            v78 = 2;
          }
        }
        else
        {
          v76->i8[0] = v77;
          v78 = 1;
        }
        LODWORD(v28) = 0;
        v27 += v78;
        if (!*((_DWORD *)a1 + 15))
          goto LABEL_234;
      }
      goto LABEL_263;
    }
    *(_WORD *)v20 = 0;
  }
  if (!v47)
    goto LABEL_93;
  v54 = v9 + 136 * v13;
  v56 = *(_DWORD *)(v54 + 164);
  v55 = (_DWORD *)(v54 + 164);
  if (v27 == v56 && *v191 == *__len)
  {
    if (v32 < 1)
    {
      v65 = 0;
      v57 = 0;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      while (1)
      {
        v60 = &v201[v59];
        v61 = v201[v59];
        if (v201[v59] < 0)
        {
          v63 = v60[1];
          if (v60[1] < 0)
          {
            v64 = v60[2];
            if (v64 < 0)
            {
              v209[0] = 0;
              v62 = sub_1ACC7BBC8(v60, v209);
              v61 = v209[0] & 0x7FFFFFFF;
            }
            else
            {
              v61 = v64 & 0x7F | (v61 << 14) & 0x1FC07F | ((v63 & 0x7F) << 7);
              v62 = 3;
            }
          }
          else
          {
            v61 = ((v61 & 0x7F) << 7) | v63;
            v62 = 2;
          }
          v32 = v204;
        }
        else
        {
          v62 = 1;
        }
        v65 = v61 + v58;
        if (v61 + v58 > v27)
          break;
        v59 += v62;
        ++v57;
        v58 += v61;
        if ((int)v59 >= v32)
          goto LABEL_153;
      }
      v65 = v58;
    }
LABEL_153:
    if ((_DWORD)v28 == v202)
    {
      v66 = v202;
      v27 = v65;
      LODWORD(v28) = v65;
      v23 = v201;
      v53 = v202;
      if (!*((_DWORD *)a1 + 15))
        goto LABEL_234;
      goto LABEL_263;
    }
    v206 = 0;
    v109 = &v20[(int)v28];
    v110 = *v109;
    if ((v110 & 0x80) != 0)
    {
      v113 = v109[1];
      if (v109[1] < 0)
      {
        v117 = v109[2];
        if (v117 < 0)
        {
          v209[0] = 0;
          v111 = sub_1ACC7BBC8(v109, v209);
          v110 = v209[0] & 0x7FFFFFFF;
        }
        else
        {
          v110 = v117 & 0x7F | (v110 << 14) & 0x1FC07F | ((v113 & 0x7F) << 7);
          v111 = 3;
        }
      }
      else
      {
        v110 = ((v110 & 0x7F) << 7) | v113;
        v111 = 2;
      }
    }
    else
    {
      v111 = 1;
    }
    v122 = (int)v28 + (unint64_t)v111;
    v123 = &v20[v122];
    v124 = v20[v122];
    if (v20[v122] < 0)
    {
      v126 = v123[1];
      if (v123[1] < 0)
      {
        v127 = v123[2];
        if (v127 < 0)
        {
          v209[0] = 0;
          v128 = v110;
          v125 = sub_1ACC7BBC8(v123, v209);
          v110 = v128;
          v124 = v209[0] & 0x7FFFFFFF;
        }
        else
        {
          v124 = v127 & 0x7F | (v124 << 14) & 0x1FC07F | ((v126 & 0x7F) << 7);
          v125 = 3;
        }
      }
      else
      {
        v124 = ((v124 & 0x7F) << 7) | v126;
        v125 = 2;
      }
    }
    else
    {
      v125 = 1;
    }
    v129 = v65;
    if (v57 != 1)
    {
      __lenb = v125;
      v130 = v122;
      v131 = v124;
      v132 = v110;
      v133 = sub_1ACC7BB2C(&v20[v65], &v206);
      v124 = v131;
      LODWORD(v122) = v130;
      v110 = v132;
      v129 = v133 + v65;
      v125 = __lenb;
    }
    v134 = v125 + v122;
    v135 = &v20[v129];
    if (*v135 < 0)
    {
      if (v135[1] < 0)
      {
        if (v135[2] < 0)
        {
          __lenc = v124;
          v137 = v110;
          v138 = v134;
          v136 = sub_1ACC7BBC8(v135, v209);
          v134 = v138;
          v124 = __lenc;
          v110 = v137;
        }
        else
        {
          v136 = 3;
        }
      }
      else
      {
        v136 = 2;
      }
    }
    else
    {
      v136 = 1;
    }
    v139 = v136 + v129;
    v140 = v206;
    if (v206 >= v110)
      v141 = v110;
    else
      v141 = v206;
    v142 = v124 + v110 - v141;
    v66 = v134 + v124;
    if (v139 + v142 > v202 || v66 > v202)
    {
      *((_DWORD *)a1 + 15) = 267;
      v66 = v134;
      v27 = v65;
LABEL_224:
      v23 = v201;
      v53 = v202;
      if (!*((_DWORD *)a1 + 15))
        goto LABEL_234;
      goto LABEL_263;
    }
    v183 = v134;
    __lena = v124;
    __srce = v110;
    __n_4a = v141;
    if (v57 != 1)
      v65 += sub_1ACBF433C((int8x8_t *)&v20[v65], v141);
    v144 = v65 + (uint64_t)(int)sub_1ACBF433C((int8x8_t *)&v20[v65], v142);
    v145 = v9 + 136 * v13;
    if (__srce <= *(_DWORD *)(v145 + 208))
    {
      if (__srce > v140)
      {
        memcpy(&v20[v144], (const void *)(*(_QWORD *)(v145 + 200) + __n_4a), __srce - __n_4a);
        LODWORD(v144) = v144 + __srce - __n_4a;
      }
    }
    else
    {
      *((_DWORD *)a1 + 15) = 267;
    }
    v23 = v201;
    memmove(&v20[(int)v144], &v20[v183], __lena);
    v27 = v144 + __lena;
LABEL_233:
    v53 = v202;
    if (!*((_DWORD *)a1 + 15))
      goto LABEL_234;
    goto LABEL_263;
  }
  if (v27 != 4)
    goto LABEL_168;
  __src = v55;
  v67 = *v191;
  v68 = (v67 << 32) - 0x100000000;
  v192 = v190 << 37;
  v69 = v67 - 1;
  do
  {
    v71 = v68;
    v72 = v69;
    if (v69 <= *__len)
      break;
    v73 = sub_1ACC7B8EC((uint64_t)a1, v192 + v69);
    if (!v73)
      break;
    v74 = v73;
    v75 = v73[2];
    v70 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v74);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v74);
      v74 = (_DWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_100;
      v70 = &xmmword_1ECD3B1D0;
    }
    (*v70)(v74);
LABEL_100:
    v68 = v71 - 0x100000000;
    v69 = v72 - 1;
  }
  while (v75 == 4);
  if (*__len != (_DWORD)v72)
  {
    v27 = 4;
    v66 = v28;
    LODWORD(v28) = 0;
    goto LABEL_224;
  }
  v94 = v192 + (v71 >> 32);
  v95 = (char **)sub_1ACC7B8EC((uint64_t)a1, v94);
  v23 = v201;
  if (!v95)
  {
    v27 = 4;
    v66 = v28;
    LODWORD(v28) = 0;
    goto LABEL_233;
  }
  v96 = v95;
  v97 = *((int *)v95 + 3);
  if ((_DWORD)v97 == *__src)
  {
    __srcb = (void *)v94;
    v98 = 0;
    v99 = 0;
    v100 = *v95;
    v101 = &(*v95)[v97];
    v194 = v95;
    v102 = *((_DWORD *)v95 + 2) - v97;
    do
    {
      v104 = v98;
      v105 = &v101[v98];
      v106 = *v105;
      if (*v105 < 0)
      {
        v107 = v105[1];
        if (v105[1] < 0)
        {
          v108 = v105[2];
          if (v108 < 0)
          {
            v209[0] = 0;
            v103 = sub_1ACC7BBC8(v105, v209);
            v106 = v209[0] & 0x7FFFFFFF;
          }
          else
          {
            v106 = v108 & 0x7F | (v106 << 14) & 0x1FC07F | ((v107 & 0x7F) << 7);
            v103 = 3;
          }
        }
        else
        {
          v106 = ((v106 & 0x7F) << 7) | v107;
          v103 = 2;
        }
      }
      else
      {
        v103 = 1;
      }
      v99 += v106;
      v98 = v103 + v104;
    }
    while (v103 + (int)v104 < v102);
    memmove(&v100[v99], v101, v104);
    v96 = v194;
    *((_WORD *)*v194 + 1) = bswap32(v99) >> 16;
    sub_1ACC7955C(a1, (uint64_t)__srcb, *v194, v99 + v104);
    if (!(_DWORD)v104)
      sub_1ACC90780((char *)a1, v190, *__len);
  }
  v112 = (uint64_t (**)(char **))&off_1ECD3B168;
  v53 = v202;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v96);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v96);
    v96 = (char **)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v112 = (uint64_t (**)(char **))&xmmword_1ECD3B1D0;
      goto LABEL_166;
    }
  }
  else
  {
LABEL_166:
    (*v112)(v96);
  }
  v27 = 4;
LABEL_168:
  v66 = v28;
  LODWORD(v28) = 0;
  if (!*((_DWORD *)a1 + 15))
  {
LABEL_234:
    memmove(&v20[v27], &v20[v66], v199 - v66);
    v146 = v204;
    v147 = v53 - (v66 - v27);
    *((_WORD *)v20 + 1) = bswap32(v147) >> 16;
    if (v204 < 1)
      goto LABEL_260;
    v148 = v66 - v27;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v200 = v147;
    v152 = v147;
    v203 = v148;
    do
    {
      v154 = &v23[v151];
      v155 = v23[v151];
      if (v23[v151] < 0)
      {
        v157 = v154[1];
        if (v154[1] < 0)
        {
          v158 = v154[2];
          if (v158 < 0)
          {
            v209[0] = 0;
            v159 = sub_1ACC7BBC8(v154, v209);
            v148 = v203;
            v156 = v159;
            v155 = v209[0] & 0x7FFFFFFF;
          }
          else
          {
            v155 = v158 & 0x7F | (v155 << 14) & 0x1FC07F | ((v157 & 0x7F) << 7);
            v156 = 3;
          }
        }
        else
        {
          v155 = ((v155 & 0x7F) << 7) | v157;
          v156 = 2;
        }
        v146 = v204;
      }
      else
      {
        v156 = 1;
      }
      v149 += v155;
      if (v149 != (_DWORD)v28)
      {
        if (v149 <= v27)
          v160 = 0;
        else
          v160 = v148;
        v161 = v149 - v160;
        v162 = (int8x8_t *)&v20[v152];
        v163 = v149 - v160 - v150;
        if ((v149 - v160 - v150) <= 0x7F)
        {
          v162->i8[0] = v149 - v160 - v150;
          v153 = 1;
        }
        else if (v163 >> 14)
        {
          v153 = sub_1ACBF8034(v162, v163);
          v148 = v203;
          v146 = v204;
        }
        else
        {
          v162->i8[0] = (v163 >> 7) | 0x80;
          v162->i8[1] = (v149 - v160 - v150) & 0x7F;
          v153 = 2;
        }
        v152 += v153;
        v150 = v161;
        v23 = v201;
      }
      v151 += v156;
    }
    while ((int)v151 < v146);
    v164 = *v191;
    if (v200 == v152)
    {
      v165 = v190;
      if (v164 == 1)
      {
        v147 = v200;
        goto LABEL_262;
      }
      sub_1ACC90780((char *)a1, v190, v164);
      v147 = v200;
LABEL_260:
      v164 = *v191;
    }
    else
    {
      v147 = v152;
    }
    v165 = v190;
LABEL_262:
    sub_1ACC7955C(a1, (v165 << 37) + v164, v20, v147);
  }
LABEL_263:
  if (v23)
  {
    v166 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_269;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v23);
    v23 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v166 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_269:
      (*v166)(v23);
    }
  }
  return sub_1ACC7D2A0(v205);
}

uint64_t sub_1ACC8F69C(uint64_t result, unsigned int *a2, unint64_t a3)
{
  _DWORD *v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  unint64_t v32;

  v3 = (_DWORD *)(result + 60);
  if (!*(_DWORD *)(result + 60))
  {
    v6 = result;
    v7 = 0;
    v31 = a2 + 2;
    while (1)
    {
      v11 = (int *)(*((_QWORD *)a2 + 11) + 32 * v7);
      v12 = v11[6];
      v13 = *(_DWORD *)(*(_QWORD *)v6 + 136);
      if (v12 >= v13)
        break;
      v15 = 1;
      if (!v11[1])
      {
LABEL_4:
        v8 = v11 - 8;
        if (!v7)
          v8 = (int *)v31;
        v9 = *v8;
        sub_1ACC7A400(v3, (uint64_t)(v11 + 4), v12 >= v13);
        sub_1ACC7A400(v3, (uint64_t)(v11 + 4), v9);
        v10 = a3;
        goto LABEL_7;
      }
LABEL_14:
      v10 = a3 - *((_QWORD *)v11 + 1);
LABEL_7:
      result = sub_1ACC7A400(v3, (uint64_t)(v11 + 4), v10);
      v11[1] = 1;
      *((_QWORD *)v11 + 1) = a3;
      ++v7;
      if (*v3 | v15)
        return result;
    }
    **((_BYTE **)v11 + 2) = 1;
    sub_1ACC7955C((unsigned __int8 *)v6, (v7 << 31) + ((unint64_t)*a2 << 37) + 0x1000000000 + *v11, *((char **)v11 + 2), v11[6]);
    if (*(_DWORD *)(v6 + 60))
      goto LABEL_10;
    v17 = v7 + 2;
    v14 = *((_QWORD *)a2 + 11);
    if ((int)a2[21] <= (int)v7 + 2)
    {
      if (sqlite3_initialize() || (v26 = sub_1ACB6BB48(v14, 32 * v17)) == 0)
      {
        *v3 = 7;
LABEL_10:
        v14 = *((_QWORD *)a2 + 11);
        v11 = (int *)(v14 + 32 * v7);
        goto LABEL_11;
      }
      v14 = v26;
      bzero((void *)(v26 + 32 * (int)a2[21]), 32 * (int)(v17 - a2[21]));
      *((_QWORD *)a2 + 11) = v14;
      a2[21] = v17;
      v11 = (int *)(v14 + 32 * v7);
      if (*v3)
      {
LABEL_11:
        v15 = 0;
        v16 = v14 + 32 * v7;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 4) = 0;
        ++*v11;
        if (!v11[1])
          goto LABEL_4;
        goto LABEL_14;
      }
    }
    else
    {
      v11 = (int *)(v14 + 32 * v7);
    }
    if (v11[14])
      goto LABEL_11;
    v30 = (uint64_t *)(v11 + 12);
    v32 = 0;
    v18 = *(_QWORD *)(v14 + 32 * v7 + 16);
    v19 = sub_1ACC7BBC8((char *)(v18 + 1), &v32);
    sub_1ACC7BBC8((char *)(v18 + (v19 + 1)), &v32);
    v29 = v32;
    v11[8] = *v11;
    v20 = v11[14];
    v21 = v11[15];
    v22 = (v20 + 9);
    if (v22 <= v21)
    {
      v25 = (uint64_t)(v11 + 12);
      v27 = *v30;
    }
    else
    {
      if (v21)
        LODWORD(v23) = v11[15];
      else
        LODWORD(v23) = 64;
      v23 = (int)v23;
      do
      {
        v24 = v23;
        v23 *= 2;
      }
      while (v24 < v22);
      v28 = *v30;
      if (sqlite3_initialize() || (v27 = sub_1ACB6BB48(v28, v24)) == 0)
      {
        *v3 = 7;
        v25 = (uint64_t)(v11 + 12);
LABEL_35:
        sub_1ACC7A400(v3, v25, *v11);
        sub_1ACC7A400(v3, v25, v29);
        v11[9] = 1;
        *((_QWORD *)v11 + 5) = v29;
        goto LABEL_11;
      }
      v11[15] = v24;
      *((_QWORD *)v11 + 6) = v27;
      v20 = v11[14];
      v25 = (uint64_t)(v11 + 12);
    }
    *(_BYTE *)(v27 + v20) = 0;
    ++v11[14];
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_1ACC8F98C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  signed int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  *(_WORD *)(*((_QWORD *)a2 + 2) + 2) = bswap32(*((unsigned __int16 *)a2 + 12)) >> 16;
  if (*((_BYTE *)a2 + 74))
  {
    if (!*((_BYTE *)a2 + 73))
      goto LABEL_23;
    v4 = *((_QWORD *)a2 + 11);
    v5 = *(unsigned int *)(v4 + 24);
    if ((int)v5 < 1)
      goto LABEL_23;
    v6 = v5 + 9;
    v7 = *(_DWORD *)(v4 + 28);
    if ((int)v5 + 9 <= v7)
    {
      v19 = *(_QWORD *)(v4 + 16);
    }
    else
    {
      if (v7)
        LODWORD(v8) = *(_DWORD *)(v4 + 28);
      else
        LODWORD(v8) = 64;
      v8 = (int)v8;
      do
      {
        v9 = v8;
        v8 *= 2;
      }
      while (v9 < v6);
      v10 = *(_QWORD *)(v4 + 16);
      if (sqlite3_initialize() || (v19 = sub_1ACB6BB48(v10, v9)) == 0)
      {
        *(_DWORD *)(a1 + 60) = 7;
LABEL_23:
        ++a2[20];
        goto LABEL_24;
      }
      *(_DWORD *)(v4 + 28) = v9;
      *(_QWORD *)(v4 + 16) = v19;
      LODWORD(v5) = *(_DWORD *)(v4 + 24);
    }
    *(_BYTE *)(v19 + (int)v5) = 0;
    ++*(_DWORD *)(v4 + 24);
    goto LABEL_23;
  }
  v11 = a2[10];
  if (!(_DWORD)v11)
    goto LABEL_24;
  v12 = (const void *)*((_QWORD *)a2 + 4);
  v13 = a2[6];
  v14 = a2[7];
  v15 = (v13 + v11);
  if (v15 <= v14)
  {
    v25 = *((_QWORD *)a2 + 2);
  }
  else
  {
    if (v14)
      LODWORD(v16) = a2[7];
    else
      LODWORD(v16) = 64;
    v16 = (int)v16;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v15);
    v18 = *((_QWORD *)a2 + 2);
    if (sqlite3_initialize() || (v25 = sub_1ACB6BB48(v18, v17)) == 0)
    {
      *(_DWORD *)(a1 + 60) = 7;
      goto LABEL_24;
    }
    a2[7] = v17;
    *((_QWORD *)a2 + 2) = v25;
    v13 = a2[6];
  }
  memcpy((void *)(v25 + v13), v12, v11);
  a2[6] += v11;
LABEL_24:
  sub_1ACC7955C((unsigned __int8 *)a1, (int)a2[2] + ((unint64_t)*a2 << 37), *((char **)a2 + 2), a2[6]);
  a2[6] = 0;
  a2[10] = 0;
  LODWORD(v20) = a2[7];
  if (v20 >= 4)
  {
    v24 = 0;
    result = *((_QWORD *)a2 + 2);
LABEL_32:
    *(_DWORD *)(result + v24) = 0;
    a2[6] += 4;
    goto LABEL_33;
  }
  if ((_DWORD)v20)
    v20 = v20;
  else
    v20 = 64;
  do
  {
    v21 = v20;
    v20 *= 2;
  }
  while (v21 < 4);
  v22 = *((_QWORD *)a2 + 2);
  result = sqlite3_initialize();
  if (!(_DWORD)result)
  {
    result = sub_1ACB6BB48(v22, v21);
    if (result)
    {
      a2[7] = v21;
      *((_QWORD *)a2 + 2) = result;
      v24 = (int)a2[6];
      goto LABEL_32;
    }
  }
  *(_DWORD *)(a1 + 60) = 7;
LABEL_33:
  ++a2[2];
  a2[3] = 0;
  ++a2[19];
  *(_WORD *)((char *)a2 + 73) = 257;
  return result;
}

uint64_t sub_1ACC8FBCC(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  uint64_t v19;
  uint64_t (**v20)(uint64_t);

  if (!*(_DWORD *)(result + 60))
  {
    v5 = result;
    if (*(int *)(a2 + 24) >= 5)
      result = sub_1ACC8F98C(result, (unsigned int *)a2);
    *a3 = *(_DWORD *)(a2 + 8) - 1;
    if (*(int *)(a2 + 8) >= 2)
      result = sub_1ACC90540(v5, (unsigned int *)a2);
  }
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_12:
      result = (*v7)(v6);
      goto LABEL_13;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v6);
    v6 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = &xmmword_1ECD3B1D0;
      goto LABEL_12;
    }
  }
LABEL_13:
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    goto LABEL_20;
  v9 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_19;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v8);
  v8 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = &xmmword_1ECD3B1D0;
LABEL_19:
    result = (*v9)(v8);
  }
LABEL_20:
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10)
    goto LABEL_27;
  v11 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_26;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v10);
  v10 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = &xmmword_1ECD3B1D0;
LABEL_26:
    result = (*v11)(v10);
  }
LABEL_27:
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(a2 + 96);
  if (!v12)
    goto LABEL_34;
  v13 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_33;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v12);
  v12 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v13 = &xmmword_1ECD3B1D0;
LABEL_33:
    result = (*v13)(v12);
  }
LABEL_34:
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  if (*(int *)(a2 + 84) >= 1)
  {
    v14 = 0;
    v15 = 16;
    do
    {
      v16 = (uint64_t *)(*(_QWORD *)(a2 + 88) + v15);
      v17 = *v16;
      if (*v16)
      {
        v18 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
          --qword_1ECD3E8D0;
          result = off_1ECD3B168(v17);
          v17 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_37;
          v18 = &xmmword_1ECD3B1D0;
        }
        result = (*v18)(v17);
      }
LABEL_37:
      *v16 = 0;
      v16[1] = 0;
      ++v14;
      v15 += 32;
    }
    while (v14 < *(int *)(a2 + 84));
  }
  v19 = *(_QWORD *)(a2 + 88);
  if (v19)
  {
    v20 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v20)(v19);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v19);
    v19 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v20 = &xmmword_1ECD3B1D0;
      return (*v20)(v19);
    }
  }
  return result;
}

uint64_t sub_1ACC8FF80(uint64_t result, int **a2)
{
  _DWORD *v3;
  int *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t);
  uint64_t (**v26)(uint64_t *);

  if (*(_DWORD *)result)
    return result;
  v3 = (_DWORD *)result;
  v4 = *a2;
  if (**a2 >= 2)
  {
    v5 = v4[7];
    result = sqlite3_initialize();
    if ((_DWORD)result || (v7 = 16 * (v5 - 1) + 48, (result = sub_1ACB5D828(v7)) == 0))
    {
      v6 = 0;
      if (v5 >= -1)
        *v3 = 7;
    }
    else
    {
      v6 = (uint64_t *)result;
      bzero((void *)result, v7);
      result = (uint64_t)memcpy(v6, v4, v7);
      v8 = v4[7];
      if ((int)v8 >= 1)
      {
        if ((_DWORD)v8 == 1)
        {
          v9 = 0;
        }
        else
        {
          v9 = v8 & 0xFFFFFFFE;
          v10 = v6 + 7;
          v11 = v9;
          do
          {
            *(v10 - 2) = 0;
            *v10 = 0;
            v10 += 4;
            v11 -= 2;
          }
          while (v11);
          if (v9 == v8)
          {
LABEL_16:
            v14 = 0;
            v15 = 0;
            while (1)
            {
              v16 = &v6[v14 / 2];
              if (*v3)
                break;
              v17 = *((int *)v16 + 9);
              if (sqlite3_initialize() || (v18 = (void *)sub_1ACB5D828(56 * v17)) == 0)
              {
                if ((int)v17 >= 1)
                  *v3 = 7;
                break;
              }
              v19 = v18;
              bzero(v18, 56 * v17);
              v6[v14 / 2 + 5] = (uint64_t)v19;
              result = (uint64_t)memcpy(v19, *(const void **)&v4[v14 + 10], 56 * v17);
              ++v15;
              v14 += 4;
              if (v15 >= v4[7])
                goto LABEL_21;
            }
            v16[5] = 0;
            if (v4[7] >= 1)
            {
              v22 = 0;
              v23 = v6 + 5;
              do
              {
                v24 = *v23;
                if (*v23)
                {
                  v25 = &off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v24);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v24);
                    v24 = xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                      goto LABEL_35;
                    v25 = &xmmword_1ECD3B1D0;
                  }
                  (*v25)(v24);
                }
LABEL_35:
                ++v22;
                v23 += 2;
              }
              while (v22 < v4[7]);
            }
            v26 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
              --qword_1ECD3E8D0;
              result = off_1ECD3B168(v6);
              v6 = (uint64_t *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_23;
              v26 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
            }
            result = (*v26)(v6);
LABEL_23:
            if (*v3)
              return result;
            v4 = *a2;
            goto LABEL_25;
          }
        }
        v12 = v8 - v9;
        v13 = &v6[2 * v9 + 5];
        do
        {
          *v13 = 0;
          v13 += 2;
          --v12;
        }
        while (v12);
        goto LABEL_16;
      }
LABEL_21:
      --*v4;
      *(_DWORD *)v6 = 1;
    }
    *a2 = (int *)v6;
    goto LABEL_23;
  }
LABEL_25:
  v20 = v4[7];
  result = sqlite3_initialize();
  if ((_DWORD)result || (result = sub_1ACB6BB48((uint64_t)v4, 16 * v20 + 64)) == 0)
  {
    *v3 = 7;
  }
  else
  {
    v21 = result + 16 * v20;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    ++*(_DWORD *)(result + 28);
    *a2 = (int *)result;
  }
  return result;
}

uint64_t sub_1ACC902BC(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t i;
  uint64_t v37;
  _DWORD *v38;

  if (!*(_DWORD *)(result + 60))
  {
    v3 = *(_DWORD *)(a3 + 16 * a2 + 36);
    if (v3)
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a3 + 16 * a2 + 40) + 56 * (v3 - 1) + 8)
         - *(_DWORD *)(*(_QWORD *)(a3 + 16 * a2 + 40) + 56 * (v3 - 1) + 4)
         + 1;
      v5 = (_QWORD *)(a3 + 16 * a2 + 40);
      v6 = a2;
      do
      {
        v7 = __OFSUB__(v6--, 1);
        if (v6 < 0 != v7)
        {
          v12 = 0;
          v13 = -1;
          goto LABEL_21;
        }
        v8 = *((unsigned int *)v5 - 5);
        v5 -= 2;
      }
      while (!(_DWORD)v8);
      if ((int)v8 < 1)
      {
        v9 = 0;
      }
      else
      {
        v9 = 0;
        v10 = (_DWORD *)(*v5 + 8);
        do
        {
          v11 = *v10 - *(v10 - 1);
          if (v11 >= v9)
            v9 = v11 + 1;
          v10 += 14;
          --v8;
        }
        while (v8);
      }
      if (v9 < v4)
        v13 = -1;
      else
        v13 = v6;
      if (v9 >= v4)
        v12 = v9;
      else
        v12 = 0;
LABEL_21:
      v14 = v13 < 0;
      if (v13 < 0)
        v13 = a2;
      if (v14)
        v15 = v4;
      else
        v15 = v12;
      if (!*(_DWORD *)(a3 + 16 * v13 + 32))
      {
        v16 = v13 + 1;
        v17 = *(_DWORD *)(a3 + 28);
        if (v13 + 1 < v17)
        {
          v18 = a3 + 16 * v13;
          v19 = (_DWORD *)(v18 + 36);
          v20 = (uint64_t *)(v18 + 40);
          for (i = v16; i < v17; ++i)
          {
            v37 = a3 + 16 * i;
            if (*(_DWORD *)(v37 + 32))
              break;
            v21 = *(unsigned int *)(v37 + 36);
            v38 = (_DWORD *)(v37 + 36);
            if ((int)v21 >= 1)
            {
              v22 = (_QWORD *)(a3 + 16 * i + 40);
              v23 = v21 + 1;
              while (1)
              {
                v24 = v23 - 2;
                if (*(_DWORD *)(*v22 + 56 * v24 + 8) - *(_DWORD *)(*v22 + 56 * v24 + 4) + 1 > v15
                  || *(_DWORD *)(result + 60))
                {
                  return result;
                }
                v25 = result;
                v26 = a3;
                v27 = v19;
                v28 = *v19;
                v29 = v20;
                v30 = *v20;
                result = sqlite3_initialize();
                if ((_DWORD)result || (result = sub_1ACB6BB48(v30, 56 * v28 + 56)) == 0)
                {
                  *(_DWORD *)(v25 + 60) = 7;
                  return result;
                }
                v31 = result;
                v19 = v27;
                result = (uint64_t)memmove((void *)(result + 56), (const void *)result, 56 * *v27);
                *(_OWORD *)v31 = 0u;
                *(_OWORD *)(v31 + 16) = 0u;
                *(_OWORD *)(v31 + 32) = 0u;
                *(_QWORD *)(v31 + 48) = 0;
                *v29 = v31;
                if (*(_DWORD *)(v25 + 60))
                  return result;
                v20 = v29;
                result = v25;
                a3 = v26;
                v32 = *v22 + 56 * v24;
                v33 = *(_OWORD *)v32;
                v34 = *(_OWORD *)(v32 + 16);
                v35 = *(_OWORD *)(v32 + 32);
                *(_QWORD *)(v31 + 48) = *(_QWORD *)(v32 + 48);
                *(_OWORD *)(v31 + 16) = v34;
                *(_OWORD *)(v31 + 32) = v35;
                *(_OWORD *)v31 = v33;
                ++*v27;
                --*v38;
                if ((unint64_t)--v23 <= 1)
                {
                  v17 = *(_DWORD *)(v26 + 28);
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC90540(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2[28])
  {
    v3 = result;
    v4 = *(int *)(*((_QWORD *)a2 + 11) + 24) >= 1 && (int)a2[20] > 3;
    v5 = a2[21];
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0x1000000000;
      do
      {
        v9 = *((_QWORD *)a2 + 11);
        v10 = v9 + v6;
        v11 = *(_DWORD *)(v9 + v6 + 24);
        if (!v11)
          break;
        if (v4)
        {
          result = (uint64_t)sub_1ACC7955C((unsigned __int8 *)v3, v8 + *(int *)(v9 + v6) + ((unint64_t)*a2 << 37), *(char **)(v10 + 16), v11);
          v5 = a2[21];
        }
        *(_DWORD *)(v10 + 24) = 0;
        *(_DWORD *)(v9 + v6 + 4) = 0;
        ++v7;
        v8 += 0x80000000;
        v6 += 32;
      }
      while (v7 < v5);
    }
    a2[20] = 0;
    if (*(_DWORD *)(v3 + 60))
      goto LABEL_32;
    v12 = a2[26];
    if ((int)v12 < 1)
    {
      v14 = (uint64_t *)(v3 + 88);
      if ((v12 & 0x80000000) != 0)
      {
        sub_1ACBBE20C(98722);
LABEL_23:
        v20 = (_QWORD *)*v14;
        v21 = (int)a2[28];
        if (!sub_1ACBA0E50(*v14, 2u))
        {
          v22 = v4 | (unint64_t)(2 * v21);
          v23 = v20[16];
          if ((*(_WORD *)(v23 + 148) & 0x9000) != 0)
          {
            sub_1ACBF327C(v23 + 128, v22);
          }
          else
          {
            *(_QWORD *)(v23 + 128) = v22;
            *(_WORD *)(v23 + 148) = 4;
          }
          v24 = *(_QWORD *)(*v20 + 24);
          if (v24)
            xmmword_1ECD3B1D0(v24);
        }
        sqlite3_step(*(sqlite3_stmt **)(v3 + 88));
        *(_DWORD *)(v3 + 60) = sqlite3_reset(*(sqlite3_stmt **)(v3 + 88));
        v25 = *(_QWORD *)(v3 + 88);
        result = sub_1ACBA0E50(v25, 1u);
        if (!(_DWORD)result)
        {
          result = *(_QWORD *)(*(_QWORD *)v25 + 24);
          if (result)
            result = xmmword_1ECD3B1D0(result);
        }
LABEL_32:
        a2[28] = 0;
        return result;
      }
      v13 = &byte_1ACCBEAEE;
    }
    else
    {
      v13 = (char *)*((_QWORD *)a2 + 12);
      v14 = (uint64_t *)(v3 + 88);
    }
    v15 = (uint64_t *)*v14;
    if (!sub_1ACBA0E50(*v14, 1u))
    {
      if (v13)
      {
        v16 = sub_1ACB57870(v15[16] + 64, v13, v12, 0, 0);
        if (v16)
        {
          v17 = v16;
          v18 = *v15;
          *(_DWORD *)(v18 + 80) = v17;
          sub_1ACBE938C(v18, v17);
          sub_1ACBF2990(*v15, v17);
        }
      }
      v19 = *(_QWORD *)(*v15 + 24);
      if (v19)
        xmmword_1ECD3B1D0(v19);
    }
    goto LABEL_23;
  }
  return result;
}

char *sub_1ACC90780(char *result, int a2, int a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t (**v9)(char *);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 == 1)
    return result;
  v5 = result;
  v6 = (uint64_t *)(result + 120);
  if (*((_QWORD *)result + 15))
    goto LABEL_14;
  result = sqlite3_mprintf("DELETE FROM '%q'.'%q_idx' WHERE (segid, (pgno/2)) = (?1, ?2)", *(_QWORD *)(*(_QWORD *)result + 8), *(_QWORD *)(*(_QWORD *)result + 16));
  v8 = result;
  if (*((_DWORD *)v5 + 15))
  {
    if (!result)
      goto LABEL_14;
  }
  else
  {
    if (!result)
    {
      *((_DWORD *)v5 + 15) = 7;
      if (*((_DWORD *)v5 + 15))
        return result;
      goto LABEL_15;
    }
    *((_DWORD *)v5 + 15) = sub_1ACB5C66C(**(_QWORD **)v5, (unsigned __int8 *)result, 0xFFFFFFFFLL, 133, 0, v6, 0, v7);
  }
  v9 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    result = (char *)(*v9)(v8);
    goto LABEL_14;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
  --qword_1ECD3E8D0;
  result = (char *)off_1ECD3B168(v8);
  v8 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
LABEL_14:
  if (*((_DWORD *)v5 + 15))
    return result;
LABEL_15:
  v10 = (_QWORD *)*v6;
  if (!sub_1ACBA0E50(*v6, 0))
  {
    v11 = v10[16];
    if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v11, a2);
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *(_WORD *)(v11 + 20) = 4;
    }
    v12 = *(_QWORD *)(*v10 + 24);
    if (v12)
      xmmword_1ECD3B1D0(v12);
  }
  v13 = (_QWORD *)*v6;
  if (!sub_1ACBA0E50((uint64_t)v13, 1u))
  {
    v14 = v13[16];
    if ((*(_WORD *)(v14 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v14 + 64, a3);
    }
    else
    {
      *(_QWORD *)(v14 + 64) = a3;
      *(_WORD *)(v14 + 84) = 4;
    }
    v15 = *(_QWORD *)(*v13 + 24);
    if (v15)
      xmmword_1ECD3B1D0(v15);
  }
  sqlite3_step(*((sqlite3_stmt **)v5 + 15));
  result = (char *)sqlite3_reset(*((sqlite3_stmt **)v5 + 15));
  *((_DWORD *)v5 + 15) = (_DWORD)result;
  return result;
}

uint64_t sub_1ACC90994(_DWORD *a1, int **a2, int a3, int a4)
{
  int *v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  signed int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  int64x2_t *v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  uint64_t v32;
  unint64_t *v33;
  int64x2_t v34;
  int *v35;
  int v36;

  v36 = a3;
  v5 = *a2;
  v35 = *a2;
  if (a3 < 1 || (v5 = v35, a1[15]))
  {
    result = 0;
    goto LABEL_4;
  }
  result = 0;
  while (1)
  {
    v9 = v5[7];
    if ((int)v9 >= 1)
      break;
    v12 = 0;
    if (a4 > 0)
      goto LABEL_19;
LABEL_38:
    if (v12 < 0)
      goto LABEL_4;
    sub_1ACC90BE0((uint64_t)a1, &v35, v12, &v36);
    if (!a1[15] && !v35[4 * v12 + 8])
      sub_1ACC902BC((uint64_t)a1, v12 + 1, (uint64_t)v35);
    if (v36 <= 0)
    {
      result = 1;
      v5 = v35;
      goto LABEL_4;
    }
    if (a4 == 1)
      a4 = 2;
    result = 1;
    v5 = v35;
    if (a1[15])
      goto LABEL_4;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v5 + 9;
  do
  {
    v14 = *(v13 - 1);
    if (v14)
    {
      if (v14 > v11)
      {
        v12 = v10;
        v11 = a4;
      }
      if (v11 < a4)
        goto LABEL_19;
      goto LABEL_38;
    }
    v16 = *v13;
    v13 += 4;
    v15 = v16;
    if (v16 > v11)
    {
      v12 = v10;
      v11 = v15;
    }
    ++v10;
  }
  while (v9 != v10);
  if (v11 >= a4)
    goto LABEL_38;
LABEL_19:
  if (*(_DWORD *)(*(_QWORD *)a1 + 68))
  {
    v17 = *(_DWORD *)(*(_QWORD *)a1 + 180);
    if ((int)v9 >= 1 && v17 >= 1)
    {
      v19 = 0;
      v20 = 0;
      v12 = -1;
      while (1)
      {
        v21 = &v5[4 * v19];
        v22 = v21[9];
        if ((int)v22 >= 1)
          break;
LABEL_25:
        if (++v19 == v9)
          goto LABEL_38;
      }
      v23 = (int64x2_t *)*((_QWORD *)v21 + 5);
      if ((_DWORD)v22 == 1)
      {
        v24 = 0;
        v25 = 0uLL;
      }
      else
      {
        v24 = v22 & 0xFFFFFFFE;
        v26 = v23 + 6;
        v27 = 0uLL;
        v28 = v24;
        v29 = 0uLL;
        do
        {
          v30 = *(int64x2_t *)((char *)v26 - 56);
          v31 = *v26;
          v26 += 7;
          v29 = vaddq_s64(v30, v29);
          v27 = vaddq_s64(v31, v27);
          v28 -= 2;
        }
        while (v28);
        v25 = vaddq_s64(v27, v29);
        if (v24 == v22)
        {
LABEL_34:
          if (v25.i64[1] >= 1
            && v17 <= (int)(100 * v25.i64[0] / v25.i64[1])
            && v20 < (int)(100 * v25.i64[0] / v25.i64[1]))
          {
            v12 = v19;
            v20 = 100 * v25.i64[0] / v25.i64[1];
          }
          goto LABEL_25;
        }
      }
      v32 = v22 - v24;
      v33 = &v23[2].u64[7 * v24 + 1];
      do
      {
        v34 = *(int64x2_t *)v33;
        v33 += 7;
        v25 = vaddq_s64(v34, v25);
        --v32;
      }
      while (v32);
      goto LABEL_34;
    }
  }
LABEL_4:
  *a2 = v5;
  return result;
}

double sub_1ACC90BE0(uint64_t a1, int **a2, signed int a3, int *a4)
{
  int *v4;
  int *v8;
  __int128 v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t (**v31)(unsigned __int8 *);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  void (**v39)(void *);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  unint64_t v53;
  signed int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int8x8_t *v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int8x8_t *v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  unint64_t v103;
  int v104;
  uint64_t (**v105)(_QWORD);
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  signed int v121;
  uint64_t v122;
  int8x8_t *v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  size_t v127;
  void *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  size_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  signed int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  signed int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int *v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  signed int v157;
  uint64_t v158;
  unint64_t v159;
  int8x8_t *v160;
  int v161;
  signed int v162;
  int v163;
  uint64_t v164;
  size_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t i;
  int *v173;
  uint64_t v174;
  int *v175;
  int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  int *v187;
  int v188;
  void (**v189)(uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  unsigned int __src;
  void *__srca;
  BOOL v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  signed int v204;
  signed int v205;
  signed int v206;
  uint64_t v207;
  int v208;
  int v210;
  unsigned int v211;
  int *v212;
  uint64_t v213;
  void *__s2;
  int v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  int *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  _OWORD v229[16];
  uint64_t v230;

  v4 = a4;
  v230 = *MEMORY[0x1E0C80C00];
  v212 = *a2;
  v8 = &(*a2)[4 * a3 + 8];
  v228 = 0;
  if (a4)
    v202 = *a4;
  else
    v202 = 0;
  v227 = 0;
  v9 = 0uLL;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v220 = 0u;
  v210 = *(_DWORD *)(*(_QWORD *)a1 + 92);
  v10 = *v8;
  if (*v8)
  {
    v11 = &v212[4 * a3];
    v12 = (uint64_t)(v11 + 12);
    v13 = *((_QWORD *)v11 + 7) + 56 * v11[13];
    v15 = *(_DWORD *)(v13 - 56);
    v14 = v13 - 56;
    sub_1ACC8DB1C((uint64_t *)a1, (int *)&v220, v15);
    DWORD2(v220) = *(_DWORD *)(v14 + 8) + 1;
    LODWORD(v227) = 0;
  }
  else
  {
    v18 = (int *)(a1 + 60);
    v17 = *(_DWORD *)(a1 + 60);
    if (v17)
    {
      v19 = 0;
      v20 = v212;
    }
    else
    {
      v20 = v212;
      if (v212[6] < 2000)
      {
        memset(v229, 0, 252);
        v171 = v212[7];
        if ((int)v171 >= 1)
        {
          for (i = 0; i != v171; ++i)
          {
            v173 = &v212[4 * i];
            v174 = v173[9];
            if ((int)v174 >= 1)
            {
              v175 = (int *)*((_QWORD *)v173 + 5);
              do
              {
                v176 = *v175;
                v175 += 14;
                v177 = v176 - 1;
                if ((v176 - 1) <= 0x7CF)
                  *((_DWORD *)v229 + (v177 >> 5)) |= 1 << v177;
                --v174;
              }
              while (v174);
            }
          }
        }
        v19 = -32;
        v178 = (unsigned int *)v229;
        do
        {
          v180 = *v178++;
          v179 = v180;
          v19 += 32;
        }
        while (v180 == -1);
        v181 = 0;
        do
        {
          v182 = v179 >> v181++;
          ++v19;
        }
        while ((v182 & 1) != 0);
        v17 = 0;
      }
      else
      {
        v19 = 0;
        v17 = 13;
        *v18 = 13;
      }
    }
    if (v20[7] - 1 == a3)
    {
      sub_1ACC8FF80(a1 + 60, a2);
      v20 = *a2;
      v17 = *v18;
    }
    v212 = v20;
    if (v17)
      return *(double *)&v9;
    v183 = &v20[4 * a3 + 4];
    v186 = *((_QWORD *)v183 + 5);
    v185 = (uint64_t *)(v183 + 10);
    v184 = v186;
    v187 = (int *)v185 - 1;
    v188 = *((_DWORD *)v185 - 1);
    if (sqlite3_initialize() || (v190 = sub_1ACB6BB48(v184, 56 * v188 + 56)) == 0)
    {
      *v18 = 7;
      return *(double *)&v9;
    }
    v191 = v190 + 56 * *v187;
    *(_QWORD *)(v191 + 48) = 0;
    *(_QWORD *)&v9 = 0;
    *(_OWORD *)(v191 + 16) = 0u;
    *(_OWORD *)(v191 + 32) = 0u;
    *(_OWORD *)v191 = 0u;
    *v185 = v190;
    if (*v18)
      return *(double *)&v9;
    v12 = (uint64_t)&v212[4 * a3 + 12];
    sub_1ACC8DB1C((uint64_t *)a1, (int *)&v220, v19);
    v192 = *v185;
    v193 = *v187;
    v14 = *v185 + 56 * (*v187)++;
    v8 = &v212[4 * a3 + 8];
    *(_DWORD *)v14 = v19;
    *(_DWORD *)(v14 + 4) = 1;
    ++v212[6];
    v10 = v8[1];
    if (*((_QWORD *)v212 + 2))
    {
      v194 = *(_QWORD *)&v212[4 * a3 + 10];
      v195 = v192 + 56 * v193;
      *(_QWORD *)(v195 + 16) = *(_QWORD *)(v194 + 16);
      *(_QWORD *)(v195 + 24) = *(_QWORD *)(v194 + 56 * (v10 - 1) + 24);
    }
    v4 = a4;
  }
  v197 = v12;
  if (*(_DWORD *)(v12 + 4) == 1)
  {
    v16 = (uint64_t)v212;
    v200 = v212[7] == a3 + 2;
  }
  else
  {
    v200 = 0;
    v16 = (uint64_t)v212;
  }
  v208 = v10;
  sub_1ACCB2A54(a1, v16, 0x20u, 0, a3, v10, &v228);
  v219 = v8;
  if (!*(_DWORD *)(a1 + 60))
  {
    __s2 = 0;
    v40 = 0;
    __src = 0;
    v215 = 0;
    v41 = v228;
    while (1)
    {
      if (*(_BYTE *)(v41 + 20))
        goto LABEL_13;
      v42 = *(unsigned __int16 *)(*(_QWORD *)(v41 + 88) + 4);
      v43 = v41 + 136 * v42;
      v44 = *(unsigned int *)(v43 + 208);
      v45 = *(void **)(v43 + 200);
      if ((_DWORD)v44 == v40 && (v40 < 1 || !memcmp(*(const void **)(v43 + 200), __s2, v40)))
      {
        v218 = v40;
      }
      else
      {
        if (v4 && SHIDWORD(v224) > v202)
          goto LABEL_13;
        if ((_DWORD)v44)
        {
          LODWORD(v46) = __src;
          if (__src >= v44)
            goto LABEL_76;
          if (!__src)
            LODWORD(v46) = 64;
          v46 = (int)v46;
          do
          {
            v47 = v46;
            v46 *= 2;
          }
          while (v47 < v44);
          if (!sqlite3_initialize())
          {
            v48 = sub_1ACB6BB48((uint64_t)__s2, v47);
            if (v48)
            {
              __s2 = (void *)v48;
              __src = v47;
LABEL_76:
              memcpy(__s2, v45, v44);
              v215 = 0;
              v218 = v44;
              goto LABEL_77;
            }
          }
          v218 = 0;
          v215 = 0;
          *(_DWORD *)(a1 + 60) = 7;
        }
        else
        {
          v218 = 0;
          v215 = 0;
        }
      }
LABEL_77:
      v49 = v41 + 136 * v42;
      v51 = *(_DWORD *)(v49 + 224);
      v50 = (int *)(v49 + 224);
      if (!v51 && (v200 || !*(_BYTE *)(v41 + 136 * v42 + 228)))
        goto LABEL_56;
      v52 = *(_DWORD *)(a1 + 60);
      if (!(v52 | v215))
      {
        sub_1ACC8DE1C((_DWORD *)a1, (uint64_t)&v220, v44, (unsigned __int8 *)v45);
        v52 = *(_DWORD *)(a1 + 60);
        v215 = 1;
      }
      if (v52)
        goto LABEL_109;
      v53 = *(_QWORD *)(v41 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v41 + 88) + 4) + 216);
      v54 = DWORD2(v221);
      if (DWORD2(v222) + DWORD2(v221) >= *(_DWORD *)(*(_QWORD *)a1 + 136))
      {
        sub_1ACC8F98C(a1, (unsigned int *)&v220);
        v54 = DWORD2(v221);
      }
      v55 = BYTE9(v224);
      if (BYTE9(v224))
      {
        *(_WORD *)v221 = bswap32(v54) >> 16;
        sub_1ACC8F69C(a1, (unsigned int *)&v220, v53);
        v55 = BYTE9(v224);
        v54 = DWORD2(v221);
      }
      if (BYTE8(v224) | v55)
        v56 = 0;
      else
        v56 = v224;
      v57 = (v54 + 9);
      if (v57 <= HIDWORD(v221))
      {
        v61 = v221;
LABEL_100:
        v62 = v53 - v56;
        v63 = (int8x8_t *)(v61 + v54);
        if (v53 - v56 > 0x7F)
        {
          v4 = a4;
          if (v62 >> 14)
          {
            v64 = sub_1ACBF8034(v63, v62);
          }
          else
          {
            v63->i8[0] = (v62 >> 7) | 0x80;
            v63->i8[1] = v62 & 0x7F;
            v64 = 2;
          }
        }
        else
        {
          v63->i8[0] = v62;
          v64 = 1;
          v4 = a4;
        }
        DWORD2(v221) += v64;
        goto LABEL_108;
      }
      if (HIDWORD(v221))
        LODWORD(v58) = HIDWORD(v221);
      else
        LODWORD(v58) = 64;
      v58 = (int)v58;
      do
      {
        v59 = v58;
        v58 *= 2;
      }
      while (v59 < v57);
      v60 = v221;
      if (!sqlite3_initialize())
      {
        v61 = sub_1ACB6BB48(v60, v59);
        if (v61)
        {
          HIDWORD(v221) = v59;
          *(_QWORD *)&v221 = v61;
          v54 = DWORD2(v221);
          goto LABEL_100;
        }
      }
      *(_DWORD *)(a1 + 60) = 7;
      v4 = a4;
LABEL_108:
      *(_QWORD *)&v224 = v53;
      WORD4(v224) = 0;
LABEL_109:
      if (v210 != 1)
      {
        v70 = *v50;
        v71 = *(unsigned __int8 *)(v41 + 136 * v42 + 228);
        v72 = DWORD2(v221);
        v73 = (DWORD2(v221) + 9);
        if (v73 > HIDWORD(v221))
        {
          if (HIDWORD(v221))
            LODWORD(v74) = HIDWORD(v221);
          else
            LODWORD(v74) = 64;
          v74 = (int)v74;
          do
          {
            v75 = v74;
            v74 *= 2;
          }
          while (v75 < v73);
          v76 = v221;
          if (sqlite3_initialize() || (v77 = sub_1ACB6BB48(v76, v75)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            v40 = v218;
          }
          else
          {
            HIDWORD(v221) = v75;
            *(_QWORD *)&v221 = v77;
            v72 = DWORD2(v221);
LABEL_128:
            v78 = v71 + 2 * v70;
            v79 = (int8x8_t *)(v77 + v72);
            if (v78 > 0x7F)
            {
              v40 = v218;
              if (v78 >> 14)
              {
                v80 = sub_1ACBF8034(v79, v78);
              }
              else
              {
                v79->i8[0] = (v78 >> 7) | 0x80;
                v79->i8[1] = v78 & 0x7F;
                v80 = 2;
              }
            }
            else
            {
              v79->i8[0] = v78;
              v80 = 1;
              v40 = v218;
            }
            DWORD2(v221) += v80;
          }
          sub_1ACC88A64(a1, (unsigned int **)(v43 + 96), (uint64_t)&v220, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1ACC92008);
          goto LABEL_57;
        }
        v77 = v221;
        goto LABEL_128;
      }
      if (!*(_BYTE *)(v41 + 136 * v42 + 228))
      {
LABEL_56:
        v40 = v218;
        goto LABEL_57;
      }
      v65 = DWORD2(v221);
      v66 = (DWORD2(v221) + 9);
      if (v66 <= HIDWORD(v221))
      {
        v81 = v221;
      }
      else
      {
        if (HIDWORD(v221))
          LODWORD(v67) = HIDWORD(v221);
        else
          LODWORD(v67) = 64;
        v67 = (int)v67;
        do
        {
          v68 = v67;
          v67 *= 2;
        }
        while (v68 < v66);
        v69 = v221;
        if (sqlite3_initialize() || (v81 = sub_1ACB6BB48(v69, v68)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          goto LABEL_132;
        }
        HIDWORD(v221) = v68;
        *(_QWORD *)&v221 = v81;
        v65 = DWORD2(v221);
      }
      *(_BYTE *)(v81 + v65) = 0;
      ++DWORD2(v221);
LABEL_132:
      if (*v50 < 1)
        goto LABEL_56;
      v82 = DWORD2(v221);
      v83 = (DWORD2(v221) + 9);
      v40 = v218;
      if (v83 <= HIDWORD(v221))
      {
        v87 = v221;
LABEL_144:
        *(_BYTE *)(v87 + v82) = 0;
        ++DWORD2(v221);
        goto LABEL_57;
      }
      if (HIDWORD(v221))
        LODWORD(v84) = HIDWORD(v221);
      else
        LODWORD(v84) = 64;
      v84 = (int)v84;
      do
      {
        v85 = v84;
        v84 *= 2;
      }
      while (v85 < v83);
      v86 = v221;
      if (!sqlite3_initialize())
      {
        v87 = sub_1ACB6BB48(v86, v85);
        if (v87)
        {
          HIDWORD(v221) = v85;
          *(_QWORD *)&v221 = v87;
          v82 = DWORD2(v221);
          goto LABEL_144;
        }
      }
      *(_DWORD *)(a1 + 60) = 7;
LABEL_57:
      v41 = v228;
      sub_1ACC800BC(a1, v228, 0, 0);
      if (*(_DWORD *)(a1 + 60))
        goto LABEL_13;
    }
  }
  __s2 = 0;
LABEL_13:
  sub_1ACC8FBCC(a1, (uint64_t)&v220, (_DWORD *)(v14 + 8));
  v21 = v228;
  v217 = v228;
  if (*(_DWORD *)(a1 + 60) || *(_BYTE *)(v228 + 20))
  {
    if (v208 < 1)
    {
LABEL_42:
      v35 = v208;
      v36 = v219[1] - v208;
      if (v36)
      {
        memmove(*((void **)v219 + 1), (const void *)(*((_QWORD *)v219 + 1) + 56 * v208), 56 * v36);
        v35 = v219[1];
      }
      v37 = v212[6] - v208;
      v212[6] = v37;
      *v219 = 0;
      v219[1] = v35 - v208;
      v38 = v217;
      v4 = a4;
      if (!*(_DWORD *)(v14 + 8))
      {
        --*(_DWORD *)(v197 + 4);
        v212[6] = v37 - 1;
      }
      goto LABEL_46;
    }
    v22 = 0;
    v23 = (uint64_t *)(a1 + 96);
    while (1)
    {
      v25 = (int *)(*((_QWORD *)v219 + 1) + v22);
      *(_QWORD *)(v14 + 48) += *((_QWORD *)v25 + 6) - *((_QWORD *)v25 + 5);
      v26 = *v25;
      sub_1ACC921EC(a1, v26 << 37, ((unint64_t)(v26 + 1) << 37) - 1);
      v27 = v25[8];
      if ((_DWORD)v27)
        sub_1ACC921EC(a1, (unint64_t)(v26 + 0x10000) << 37, v27 + ((unint64_t)(v26 + 0x10000) << 37) - 1);
      if (*v23)
        goto LABEL_34;
      v28 = (unsigned __int8 *)sqlite3_mprintf("DELETE FROM '%q'.'%q_idx' WHERE segid=?", *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16));
      v30 = v28;
      if (*(_DWORD *)(a1 + 60))
      {
        if (!v28)
          goto LABEL_19;
      }
      else
      {
        if (!v28)
        {
          v24 = 7;
          goto LABEL_18;
        }
        *(_DWORD *)(a1 + 60) = sub_1ACB5C66C(**(_QWORD **)a1, v28, 0xFFFFFFFFLL, 133, 0, (_QWORD *)(a1 + 96), 0, v29);
      }
      v31 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v30);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v30);
        v30 = (unsigned __int8 *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_34;
        v31 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
      }
      (*v31)(v30);
LABEL_34:
      if (*(_DWORD *)(a1 + 60))
        goto LABEL_19;
      v32 = (_QWORD *)*v23;
      if (!sub_1ACBA0E50(*v23, 0))
      {
        v33 = v32[16];
        if ((*(_WORD *)(v33 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v33, v26);
        }
        else
        {
          *(_QWORD *)v33 = v26;
          *(_WORD *)(v33 + 20) = 4;
        }
        v34 = *(_QWORD *)(*v32 + 24);
        if (v34)
          xmmword_1ECD3B1D0(v34);
      }
      sqlite3_step((sqlite3_stmt *)*v23);
      v24 = sqlite3_reset((sqlite3_stmt *)*v23);
LABEL_18:
      *(_DWORD *)(a1 + 60) = v24;
LABEL_19:
      v22 += 56;
      if (56 * v208 == v22)
        goto LABEL_42;
    }
  }
  v88 = *(_DWORD *)(v228 + 64);
  v89 = v219;
  v90 = v208;
  if (v88 < 1)
    goto LABEL_319;
  v211 = 0;
  v91 = 0;
  v213 = 0;
  while (!*(_DWORD *)(a1 + 60))
  {
    v92 = v21 + 136 * v91;
    v95 = *(unsigned int **)(v92 + 96);
    v94 = v92 + 96;
    v93 = v95;
    if (v95)
    {
      if (*(_QWORD *)(v21 + 136 * v91 + 112))
      {
        v96 = v21 + 136 * v91;
        v98 = *(int *)(v96 + 160);
        v97 = (_DWORD *)(v96 + 160);
        v99 = (int)v97[1];
        v216 = (unint64_t)*v93 << 37;
        v100 = v216 + v98;
        v101 = sub_1ACC7B8EC(a1, v216 + v98);
        if (!v101)
        {
          v21 = v217;
          v89 = v219;
          goto LABEL_292;
        }
        v102 = v101;
        v103 = v101[2];
        if ((int)v103 < 4 || (v104 = v101[3], v104 > (int)v103))
        {
          *(_DWORD *)(a1 + 60) = 267;
          v105 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            v106 = xmmword_1ECD3E930;
            v21 = v217;
            v89 = v219;
            if ((_QWORD)xmmword_1ECD3E930)
              goto LABEL_168;
            goto LABEL_169;
          }
          v21 = v217;
          v89 = v219;
LABEL_291:
          (*v105)(v102);
          goto LABEL_292;
        }
        if ((int)v99 > v104)
        {
          *(_DWORD *)(a1 + 60) = 267;
          v21 = v217;
          v89 = v219;
LABEL_288:
          v105 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_291;
          v106 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
LABEL_168:
            xmmword_1ECD3B1C0(v106);
LABEL_169:
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v102);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v102);
          v102 = (_DWORD *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v105 = &xmmword_1ECD3B1D0;
            goto LABEL_291;
          }
LABEL_292:
          v88 = *(_DWORD *)(v21 + 64);
          v90 = v208;
          goto LABEL_159;
        }
        v201 = v100;
        if (v103 <= v211)
        {
          LODWORD(v109) = v211;
        }
        else
        {
          if (v211)
            LODWORD(v107) = v211;
          else
            LODWORD(v107) = 64;
          v107 = (int)v107;
          do
          {
            v108 = v107;
            v107 *= 2;
          }
          while (v108 < v103);
          if (sqlite3_initialize() || (v112 = sub_1ACB6BB48(v213, v108)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            LODWORD(v109) = v211;
          }
          else
          {
            LODWORD(v109) = v108;
            v213 = v112;
          }
        }
        v211 = v109;
        if (v109 > 3)
        {
LABEL_195:
          *(_DWORD *)v213 = 0;
          v111 = 4;
        }
        else
        {
          if ((_DWORD)v109)
            v109 = v109;
          else
            v109 = 64;
          do
          {
            v110 = v109;
            v109 *= 2;
          }
          while (v110 < 4);
          if (!sqlite3_initialize())
          {
            v113 = sub_1ACB6BB48(v213, v110);
            if (v113)
            {
              v211 = v110;
              v213 = v113;
              goto LABEL_195;
            }
          }
          v111 = 0;
          *(_DWORD *)(a1 + 60) = 7;
        }
        v114 = v217 + 136 * v91;
        v117 = *(int *)(v114 + 208);
        v115 = (unsigned int *)(v114 + 208);
        v116 = v117;
        v118 = v111 | 9;
        if (v118 <= v211)
        {
LABEL_206:
          v123 = (int8x8_t *)(v213 + v111);
          if (v116 > 0x7F)
          {
            if (v116 >> 14)
            {
              v125 = v116;
              v126 = v111;
              v124 = sub_1ACBF8034(v123, v125);
              v111 = v126;
            }
            else
            {
              v123->i8[0] = (v116 >> 7) | 0x80;
              v123->i8[1] = v116 & 0x7F;
              v124 = 2;
            }
          }
          else
          {
            v123->i8[0] = v116;
            v124 = 1;
          }
          v121 = v124 + v111;
        }
        else
        {
          v203 = v111;
          if (v211)
            LODWORD(v119) = v211;
          else
            LODWORD(v119) = 64;
          v119 = (int)v119;
          do
          {
            v120 = v119;
            v119 *= 2;
          }
          while (v120 < v118);
          if (!sqlite3_initialize())
          {
            v122 = sub_1ACB6BB48(v213, v120);
            if (v122)
            {
              v211 = v120;
              v213 = v122;
              v111 = v203;
              goto LABEL_206;
            }
          }
          *(_DWORD *)(a1 + 60) = 7;
          v121 = v203;
        }
        v127 = *v115;
        if ((_DWORD)v127)
        {
          v128 = (void *)*((_QWORD *)v115 - 1);
          v129 = (v127 + v121);
          if (v129 <= v211)
            goto LABEL_223;
          __srca = v128;
          v204 = v121;
          if (v211)
            LODWORD(v130) = v211;
          else
            LODWORD(v130) = 64;
          v130 = (int)v130;
          do
          {
            v131 = v130;
            v130 *= 2;
          }
          while (v131 < v129);
          if (sqlite3_initialize() || (v132 = sub_1ACB6BB48(v213, v131)) == 0)
          {
            *(_DWORD *)(a1 + 60) = 7;
            v121 = v204;
          }
          else
          {
            v211 = v131;
            v213 = v132;
            v121 = v204;
            v128 = __srca;
LABEL_223:
            memcpy((void *)(v213 + v121), v128, v127);
            v121 = v129;
          }
        }
        v133 = v102[3];
        v134 = (v133 - v99);
        if (v133 == (_DWORD)v99)
          goto LABEL_236;
        v135 = *(_QWORD *)v102;
        v136 = (v134 + v121);
        if (v136 <= v211)
          goto LABEL_235;
        v205 = v121;
        if (v211)
          LODWORD(v137) = v211;
        else
          LODWORD(v137) = 64;
        v137 = (int)v137;
        do
        {
          v138 = v137;
          v137 *= 2;
        }
        while (v138 < v136);
        if (sqlite3_initialize() || (v139 = sub_1ACB6BB48(v213, v138)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          v4 = a4;
          v21 = v217;
          v121 = v205;
        }
        else
        {
          v211 = v138;
          v213 = v139;
          v121 = v205;
LABEL_235:
          memcpy((void *)(v213 + v121), (const void *)(v135 + v99), v134);
          v121 = v136;
          v4 = a4;
LABEL_236:
          v21 = v217;
          if (!*(_DWORD *)(a1 + 60))
            *(_WORD *)(v213 + 2) = bswap32(v121) >> 16;
        }
        v140 = (v121 + 9);
        if (v140 <= v211)
        {
          v144 = v201;
          goto LABEL_247;
        }
        v141 = v121;
        if (v211)
          LODWORD(v142) = v211;
        else
          LODWORD(v142) = 64;
        v142 = (int)v142;
        do
        {
          v143 = v142;
          v142 *= 2;
        }
        while (v143 < v140);
        if (sqlite3_initialize() || (v153 = sub_1ACB6BB48(v213, v143)) == 0)
        {
          *(_DWORD *)(a1 + 60) = 7;
          v144 = v201;
          v145 = v141;
        }
        else
        {
          v211 = v143;
          v213 = v153;
          v144 = v201;
          v121 = v141;
LABEL_247:
          *(_BYTE *)(v213 + v121) = 4;
          v145 = v121 + 1;
        }
        if (*(_DWORD *)(v21 + 136 * v91 + 108) != *v97)
        {
          v152 = v145;
          goto LABEL_287;
        }
        v146 = *(_DWORD *)(v21 + 136 * v91 + 172);
        v147 = v21;
        v148 = v102[3];
        if (v146 >= v148)
        {
          v152 = v145;
          v4 = a4;
          v21 = v147;
          goto LABEL_287;
        }
        v149 = v147 + 136 * v91;
        v151 = *(_DWORD *)(v149 + 168);
        v150 = (int *)(v149 + 168);
        if (v151 > v102[2])
        {
          v152 = v145;
          v4 = a4;
          v21 = v217;
LABEL_287:
          *(_DWORD *)(*(_QWORD *)v94 + 4) = *v97;
          sub_1ACC921EC(a1, v216 | 1, v144);
          sub_1ACC7955C((unsigned __int8 *)a1, v144, (char *)v213, v152);
          v89 = v219;
          goto LABEL_288;
        }
        v154 = (v145 + 9);
        if (v154 <= v211)
        {
LABEL_266:
          v159 = v145 + (uint64_t)(v146 + ~v148) - 4;
          v160 = (int8x8_t *)(v213 + v145);
          if (v159 > 0x7F)
          {
            if (v159 >> 14)
            {
              v162 = v145;
              v161 = sub_1ACBF8034(v160, v159);
              v145 = v162;
            }
            else
            {
              v160->i8[0] = (v159 >> 7) | 0x80;
              v160->i8[1] = v159 & 0x7F;
              v161 = 2;
            }
          }
          else
          {
            v160->i8[0] = v159;
            v161 = 1;
          }
          v157 = v161 + v145;
        }
        else
        {
          v206 = v145;
          if (v211)
            LODWORD(v155) = v211;
          else
            LODWORD(v155) = 64;
          v155 = (int)v155;
          do
          {
            v156 = v155;
            v155 *= 2;
          }
          while (v156 < v154);
          if (!sqlite3_initialize())
          {
            v158 = sub_1ACB6BB48(v213, v156);
            if (v158)
            {
              v211 = v156;
              v213 = v158;
              v145 = v206;
              goto LABEL_266;
            }
          }
          *(_DWORD *)(a1 + 60) = 7;
          v157 = v206;
        }
        v163 = v102[2];
        v164 = *v150;
        v165 = (v163 - v164);
        if (v163 == (_DWORD)v164)
        {
          v152 = v157;
          goto LABEL_285;
        }
        v166 = *(_QWORD *)v102;
        v167 = (v165 + v157);
        if (v167 <= v211)
        {
LABEL_284:
          memcpy((void *)(v213 + v157), (const void *)(v166 + v164), v165);
          v152 = v167;
LABEL_285:
          v4 = a4;
        }
        else
        {
          v207 = *(_QWORD *)v102;
          v152 = v157;
          if (v211)
            LODWORD(v168) = v211;
          else
            LODWORD(v168) = 64;
          v168 = (int)v168;
          do
          {
            v169 = v168;
            v168 *= 2;
          }
          while (v169 < v167);
          if (!sqlite3_initialize())
          {
            v170 = sub_1ACB6BB48(v213, v169);
            if (v170)
            {
              v211 = v169;
              v213 = v170;
              v157 = v152;
              v166 = v207;
              goto LABEL_284;
            }
          }
          *(_DWORD *)(a1 + 60) = 7;
          v4 = a4;
        }
        v21 = v217;
        v144 = v201;
        goto LABEL_287;
      }
      v93[1] = 0;
      v93[2] = 0;
    }
LABEL_159:
    if (++v91 >= v88)
      break;
  }
  if (v213)
  {
    v189 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_318;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v213);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v213);
    v213 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v189 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_318:
      (*v189)(v213);
    }
  }
LABEL_319:
  *v89 = v90;
  v38 = v228;
LABEL_46:
  sub_1ACC7D2A0(v38);
  if (__s2)
  {
    v39 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_52;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(__s2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(__s2);
    __s2 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v39 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_52:
      (*v39)(__s2);
    }
  }
  if (v4)
    *a4 -= HIDWORD(v224);
  return *(double *)&v9;
}

uint64_t sub_1ACC92008(uint64_t result, uint64_t a2, char *__src, size_t __n)
{
  int v4;
  _DWORD *i;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = __n;
  for (i = (_DWORD *)result; !i[15]; result = sub_1ACC8F98C((uint64_t)i, (unsigned int *)a2))
  {
    v15 = *(_DWORD *)(a2 + 24);
    v16 = *(_DWORD *)(a2 + 40) + v15;
    v17 = *(_DWORD *)(*(_QWORD *)i + 136);
    if (v16 + v4 < v17)
      break;
    v18 = v17 - v16;
    if (v17 - v16 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      LODWORD(v14) = 0;
      do
      {
        v24 = 0;
        v14 = v14 + sub_1ACC7BBC8(&__src[v14], &v24);
      }
      while ((int)v14 < v18);
      v19 = (v14 + v15);
      LODWORD(v20) = *(_DWORD *)(a2 + 28);
      if (v19 <= v20)
      {
        v23 = *(_QWORD *)(a2 + 16);
LABEL_26:
        memcpy((void *)(v23 + v15), __src, v14);
        *(_DWORD *)(a2 + 24) += v14;
        goto LABEL_13;
      }
      if (!(_DWORD)v20)
        LODWORD(v20) = 64;
      v20 = (int)v20;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v19);
      v22 = *(_QWORD *)(a2 + 16);
      if (!sqlite3_initialize())
      {
        v23 = sub_1ACB6BB48(v22, v21);
        if (v23)
        {
          *(_DWORD *)(a2 + 28) = v21;
          *(_QWORD *)(a2 + 16) = v23;
          v15 = *(_DWORD *)(a2 + 24);
          goto LABEL_26;
        }
      }
      i[15] = 7;
    }
LABEL_13:
    __src += v14;
    v4 -= v14;
  }
  if (v4 < 1)
    return result;
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = (v8 + v4);
  if (v10 <= v9)
  {
    result = *(_QWORD *)(a2 + 16);
  }
  else
  {
    if (v9)
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
    else
      LODWORD(v11) = 64;
    v11 = (int)v11;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v10);
    v13 = *(_QWORD *)(a2 + 16);
    result = sqlite3_initialize();
    if ((_DWORD)result || (result = sub_1ACB6BB48(v13, v12)) == 0)
    {
      i[15] = 7;
      return result;
    }
    *(_DWORD *)(a2 + 28) = v12;
    *(_QWORD *)(a2 + 16) = result;
    v8 = *(_DWORD *)(a2 + 24);
  }
  result = (uint64_t)memcpy((void *)(result + v8), __src, v4);
  *(_DWORD *)(a2 + 24) += v4;
  return result;
}

uint64_t sub_1ACC921EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (!*(_DWORD *)(result + 60))
  {
    v5 = result;
    v6 = (uint64_t *)(result + 80);
    v7 = *(_QWORD **)(result + 80);
    if (v7)
    {
LABEL_3:
      if (!sub_1ACBA0E50((uint64_t)v7, 0))
      {
        v8 = v7[16];
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v8, a2);
        }
        else
        {
          *(_QWORD *)v8 = a2;
          *(_WORD *)(v8 + 20) = 4;
        }
        v12 = *(_QWORD *)(*v7 + 24);
        if (v12)
          xmmword_1ECD3B1D0(v12);
      }
      v13 = (_QWORD *)*v6;
      if (!sub_1ACBA0E50(*v6, 1u))
      {
        v14 = v13[16];
        if ((*(_WORD *)(v14 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v14 + 64, a3);
        }
        else
        {
          *(_QWORD *)(v14 + 64) = a3;
          *(_WORD *)(v14 + 84) = 4;
        }
        v15 = *(_QWORD *)(*v13 + 24);
        if (v15)
          xmmword_1ECD3B1D0(v15);
      }
      sqlite3_step((sqlite3_stmt *)*v6);
      result = sqlite3_reset((sqlite3_stmt *)*v6);
      goto LABEL_29;
    }
    result = (uint64_t)sqlite3_mprintf("DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?", *(_QWORD *)(*(_QWORD *)result + 8), *(_QWORD *)(*(_QWORD *)result + 16));
    v10 = result;
    if (*(_DWORD *)(v5 + 60))
    {
      if (!result)
        return result;
    }
    else
    {
      if (!result)
      {
        result = 7;
LABEL_29:
        *(_DWORD *)(v5 + 60) = result;
        return result;
      }
      *(_DWORD *)(v5 + 60) = sub_1ACB5C66C(**(_QWORD **)v5, (unsigned __int8 *)result, 0xFFFFFFFFLL, 133, 0, v6, 0, v9);
    }
    v11 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v10);
      v10 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_17;
      v11 = &xmmword_1ECD3B1D0;
    }
    result = (*v11)(v10);
LABEL_17:
    if (*(_DWORD *)(v5 + 60))
      return result;
    v7 = (_QWORD *)*v6;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1ACC923F8(int *a1, unint64_t a2, unsigned int a3, signed int a4, unsigned __int8 a5, unsigned __int8 *__s2, int a7)
{
  int *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t *v33;
  int v34;
  signed int v35;
  unsigned int v36;
  uint64_t result;
  char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t i;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int8x8_t *v51;
  int v52;
  uint64_t (**v53)(uint64_t);
  unint64_t v54;
  int v55;
  int v56;
  __int16 v57;
  int8x8_t *v58;
  int v59;
  int v60;
  __int16 v61;
  int8x8_t *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int *v67;
  uint64_t v68;
  _BOOL4 v69;

  v10 = a1;
  v11 = a5;
  v12 = a1[5];
  v69 = *a1 == 0;
  if (a7 < 1)
  {
    v14 = 13;
  }
  else
  {
    v13 = a7 + 1;
    v14 = 13;
    do
      v14 ^= __s2[(v13-- - 2)] ^ (8 * v14);
    while (v13 > 1);
  }
  v15 = (a5 ^ (8 * v14) ^ v14) % v12;
  v16 = *((_QWORD *)a1 + 4);
  v17 = *(_QWORD *)(v16 + 8 * v15);
  if (v17)
  {
    while (*(unsigned __int8 *)(v17 + 48) != v11
         || *(_DWORD *)(v17 + 28) != a7
         || memcmp((const void *)(v17 + 49), __s2, a7))
    {
      v17 = *(_QWORD *)v17;
      if (!v17)
        goto LABEL_18;
    }
    v18 = a4;
    v19 = *(int *)(v17 + 16);
    v20 = *(_DWORD *)(v17 + 24);
    if ((int)v19 - v20 > 21)
    {
      v22 = v17;
      goto LABEL_43;
    }
    if (!sqlite3_initialize())
    {
      v21 = sub_1ACB6BB48(v17, 2 * v19);
      if (v21)
      {
        v22 = v21;
        *(_DWORD *)(v21 + 16) = 2 * v19;
        v23 = (uint64_t *)(*((_QWORD *)v10 + 4) + 8 * v15);
        do
        {
          v24 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23 != (uint64_t *)v17);
        *v24 = v21;
        v20 = *(_DWORD *)(v21 + 24);
LABEL_43:
        v35 = v18;
        v48 = -v20;
        v49 = *(_QWORD *)(v22 + 40);
        v50 = a2 - v49;
        if (a2 == v49)
        {
          v36 = a3;
          if ((a3 & 0x80000000) != 0)
            goto LABEL_75;
        }
        else
        {
          sub_1ACC86144(v10, v22, 0);
          v51 = (int8x8_t *)(v22 + *(int *)(v22 + 24));
          if (v50 > 0x7F)
          {
            if (v50 >> 14)
            {
              v52 = sub_1ACBF8034(v51, v50);
            }
            else
            {
              v51->i8[0] = (v50 >> 7) | 0x80;
              v51->i8[1] = v50 & 0x7F;
              v52 = 2;
            }
          }
          else
          {
            v51->i8[0] = v50;
            v52 = 1;
          }
          v36 = a3;
          v20 = *(_DWORD *)(v22 + 24) + v52;
          *(_QWORD *)(v22 + 40) = a2;
          *(_DWORD *)(v22 + 20) = v20;
          *(_DWORD *)(v22 + 24) = v20;
          v60 = *v10;
          if (*v10 != 1)
          {
            *(_DWORD *)(v22 + 24) = ++v20;
            if (v60)
              v61 = -1;
            else
              v61 = 0;
            *(_WORD *)(v22 + 34) = v61;
            *(_DWORD *)(v22 + 36) = 0;
            v60 = 1;
          }
          v69 = v60;
          if ((a3 & 0x80000000) != 0)
            goto LABEL_75;
        }
        goto LABEL_66;
      }
    }
    return 7;
  }
LABEL_18:
  v25 = a7 + 1;
  if (v25 > 15)
    v26 = a7 + 1;
  else
    v26 = 15;
  if ((int)v12 <= 2 * v10[4])
  {
    if (sqlite3_initialize())
      return 7;
    v68 = v26;
    v38 = (char *)sub_1ACB5D828(16 * v12);
    if (!v38)
      return 7;
    v39 = v38;
    v40 = 2 * v12;
    bzero(v38, 16 * v12);
    v41 = v10[5];
    v66 = a4;
    v67 = v10;
    if ((int)v41 < 1)
    {
      if (!v16)
        goto LABEL_55;
    }
    else
    {
      for (i = 0; i != v41; ++i)
      {
        while (1)
        {
          v45 = *(_QWORD *)(v16 + 8 * i);
          if (!v45)
            break;
          *(_QWORD *)(v16 + 8 * i) = *(_QWORD *)v45;
          v46 = strlen((const char *)(v45 + 48));
          if (v46 < 1)
          {
            v43 = 13;
          }
          else
          {
            v47 = v46 + 1;
            v43 = 13;
            do
              v43 ^= *(unsigned __int8 *)(v45 + 48 + (v47-- - 2)) ^ (8 * v43);
            while (v47 > 1);
          }
          v44 = 8 * (v43 % v40);
          *(_QWORD *)v45 = *(_QWORD *)&v39[v44];
          *(_QWORD *)&v39[v44] = v45;
        }
      }
    }
    v53 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v16);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v16);
      v16 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_55:
        v10 = v67;
        v67[5] = v40;
        *((_QWORD *)v67 + 4) = v39;
        if (a7 < 1)
        {
          v55 = 13;
          a4 = v66;
          v26 = v68;
          v25 = a7 + 1;
        }
        else
        {
          v54 = a7 + 1;
          v55 = 13;
          a4 = v66;
          v26 = v68;
          v25 = a7 + 1;
          do
            v55 ^= __s2[(v54-- - 2)] ^ (8 * v55);
          while (v54 > 1);
        }
        LODWORD(v15) = (v11 ^ (8 * v55) ^ v55) % v40;
        if (sqlite3_initialize())
          return 7;
        goto LABEL_23;
      }
      v53 = &xmmword_1ECD3B1D0;
    }
    (*v53)(v16);
    goto LABEL_55;
  }
  if (sqlite3_initialize())
    return 7;
LABEL_23:
  v27 = v26 + 113;
  v28 = sub_1ACB5D828(v27);
  if (!v28)
    return 7;
  v22 = v28;
  v29 = a4;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)v28 = 0u;
  *(_DWORD *)(v28 + 16) = v27;
  *(_BYTE *)(v28 + 48) = v11;
  v30 = v28 + 48;
  memcpy((void *)(v28 + 49), __s2, a7);
  *(_DWORD *)(v22 + 28) = a7;
  *(_BYTE *)(v30 + v25) = 0;
  v31 = *((_QWORD *)v10 + 4);
  v32 = 8 * v15;
  *(_QWORD *)v22 = *(_QWORD *)(v31 + v32);
  *(_QWORD *)(v31 + v32) = v22;
  *(_DWORD *)(v22 + 24) = a7 + 50;
  ++v10[4];
  v33 = (int8x8_t *)(v22 + a7 + 50);
  if (a2 > 0x7F)
  {
    v36 = a3;
    if (a2 >> 14)
    {
      v34 = sub_1ACBF8034(v33, a2);
    }
    else
    {
      v33->i8[0] = (a2 >> 7) | 0x80;
      v33->i8[1] = a2 & 0x7F;
      v34 = 2;
    }
    v35 = v29;
  }
  else
  {
    v33->i8[0] = a2;
    v34 = 1;
    v35 = v29;
    v36 = a3;
  }
  v20 = *(_DWORD *)(v22 + 24) + v34;
  *(_QWORD *)(v22 + 40) = a2;
  *(_DWORD *)(v22 + 20) = v20;
  *(_DWORD *)(v22 + 24) = v20;
  v56 = *v10;
  if (*v10 == 1)
  {
    v48 = 0;
    if ((v36 & 0x80000000) != 0)
    {
LABEL_75:
      *(_BYTE *)(v22 + 32) = 1;
      goto LABEL_99;
    }
  }
  else
  {
    v48 = 0;
    *(_DWORD *)(v22 + 24) = ++v20;
    if (v56)
      v57 = -1;
    else
      v57 = 0;
    *(_WORD *)(v22 + 34) = v57;
    if ((v36 & 0x80000000) != 0)
      goto LABEL_75;
  }
LABEL_66:
  if (*v10 != 1)
  {
    if (*(__int16 *)(v22 + 34) != v36)
    {
      if (*v10)
      {
        *(_WORD *)(v22 + 34) = v36;
        v35 = v36;
        goto LABEL_93;
      }
      *(_DWORD *)(v22 + 24) = v20 + 1;
      *(_BYTE *)(v22 + v20) = 1;
      v58 = (int8x8_t *)(v22 + *(int *)(v22 + 24));
      if (v36 > 0x7F)
      {
        if (v36 >> 14)
        {
          v59 = sub_1ACBF8034(v58, v36);
        }
        else
        {
          v58->i8[0] = (v36 >> 7) | 0x80;
          v58->i8[1] = v36 & 0x7F;
          v59 = 2;
        }
      }
      else
      {
        v58->i8[0] = v36;
        v59 = 1;
      }
      v20 = *(_DWORD *)(v22 + 24) + v59;
      *(_DWORD *)(v22 + 24) = v20;
      *(_WORD *)(v22 + 34) = v36;
      *(_DWORD *)(v22 + 36) = 0;
    }
    if (!v69)
      goto LABEL_99;
LABEL_93:
    v62 = (int8x8_t *)(v22 + v20);
    v63 = v35 - (uint64_t)*(int *)(v22 + 36);
    v64 = v63 + 2;
    if ((v63 + 2) > 0x7F)
    {
      if (v64 >> 14)
      {
        v65 = sub_1ACBF8034(v62, v64);
      }
      else
      {
        v62->i8[0] = (v64 >> 7) | 0x80;
        v62->i8[1] = v64 & 0x7F;
        v65 = 2;
      }
    }
    else
    {
      v62->i8[0] = v64;
      v65 = 1;
    }
    v20 = *(_DWORD *)(v22 + 24) + v65;
    *(_DWORD *)(v22 + 24) = v20;
    *(_DWORD *)(v22 + 36) = v35;
    goto LABEL_99;
  }
  *(_BYTE *)(v22 + 33) = 1;
LABEL_99:
  result = 0;
  **((_DWORD **)v10 + 1) += v20 + v48;
  return result;
}

char *sub_1ACC92A38(uint64_t a1, _DWORD *a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char *v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t (**v16)(void *);
  void *v17;
  void *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v2 = a2[6];
  if (!v2)
    return 0;
  v3 = a2;
  v5 = a2[7];
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = v2 - 1;
    do
    {
      v8 = a2[v6 + 9];
      if (v8 >= 1)
      {
        if (v8 == v2)
        {
          v7 = a2[6];
          if (v2 != 1)
          {
LABEL_23:
            ++*a2;
            return (char *)v3;
          }
LABEL_21:
          if (v7 != 1 || *(_DWORD *)(*(_QWORD *)&a2[v6 + 10] + 32))
            goto LABEL_23;
          return 0;
        }
        if (v8 == v7 && a2[v6 + 8] == v8)
        {
          if (v2 != 1)
            goto LABEL_23;
          goto LABEL_21;
        }
      }
      v6 += 4;
    }
    while (4 * v5 != v6);
  }
  if (*(_DWORD *)(a1 + 60))
    return 0;
  if (!sqlite3_initialize())
  {
    v11 = (char *)sub_1ACB5D828(16 * ((int)v5 + 1) + 48);
    if (v11)
    {
      v12 = v11;
      bzero(v11, 16 * ((int)v5 + 1) + 48);
      v13 = v3[7];
      if (v13 < 63)
        v14 = v13 + 1;
      else
        v14 = 64;
      *((_DWORD *)v12 + 7) = v14;
      *(_DWORD *)v12 = 1;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v3 + 2);
      v15 = v14 - 1;
      if (!*(_DWORD *)(a1 + 60))
      {
        if (!sqlite3_initialize())
        {
          v17 = (void *)sub_1ACB5D828(56 * v2);
          if (v17)
          {
            v18 = v17;
            bzero(v17, 56 * v2);
            v19 = &v12[16 * v15];
            *((_QWORD *)v19 + 5) = v18;
            v20 = v19 + 40;
            v21 = v3[7];
            if ((int)v21 >= 1)
            {
              v22 = 0;
              do
              {
                v24 = &v3[4 * (v21 - 1)];
                v26 = v24[9];
                v25 = v24 + 9;
                if (v26 >= 1)
                {
                  v27 = 0;
                  v28 = 0;
                  do
                  {
                    v29 = *v20 + 56 * v22 + v27;
                    v30 = (__int128 *)(*(_QWORD *)&v3[4 * (v21 - 1) + 10] + v27);
                    v31 = *v30;
                    v32 = v30[1];
                    v33 = v30[2];
                    *(_QWORD *)(v29 + 48) = *((_QWORD *)v30 + 6);
                    *(_OWORD *)(v29 + 16) = v32;
                    *(_OWORD *)(v29 + 32) = v33;
                    *(_OWORD *)v29 = v31;
                    ++v28;
                    v27 += 56;
                  }
                  while (v28 < *v25);
                  v22 += v28;
                }
              }
              while (v21-- >= 2);
            }
            *(_DWORD *)&v12[16 * v15 + 36] = v2;
            *((_DWORD *)v12 + 6) = v2;
            return v12;
          }
        }
        if (v2 >= 1)
          *(_DWORD *)(a1 + 60) = 7;
      }
      *(_QWORD *)&v12[16 * v15 + 40] = 0;
      v16 = (uint64_t (**)(void *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v12);
        v12 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return 0;
        v16 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      }
      (*v16)(v12);
      return 0;
    }
  }
  if ((int)v5 < -3)
    return 0;
  v3 = 0;
  *(_DWORD *)(a1 + 60) = 7;
  return (char *)v3;
}

uint64_t sub_1ACC92D0C(uint64_t a1, char a2, char *__s2, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;

  v7 = *(_QWORD *)(a1 + 24);
  if (a4 >= 0x8000)
    v8 = 0x8000;
  else
    v8 = a4;
  v9 = *(_DWORD *)(a1 + 12);
  if ((a2 & 1) != 0)
  {
    if (v9)
      goto LABEL_9;
    v9 = 1;
  }
  else
  {
    ++v9;
  }
  *(_DWORD *)(a1 + 12) = v9;
LABEL_9:
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 92);
  if (v10 == 2)
  {
    v12 = 0;
    v11 = *(_DWORD *)(a1 + 8);
  }
  else if (v10)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = v9 - 1;
    v12 = *(int *)(a1 + 8);
  }
  v31 = 0;
  result = sub_1ACC931FC(v7, 0, __s2, v8, &v31);
  if (!(result | v31))
  {
    v14 = 9 * (9 * *(_QWORD *)a1 + v12 + v11 + 8 * (9 * *(_QWORD *)a1 + v12)) + 48;
    if (a4 >= 1)
    {
      v15 = __s2;
      v16 = v8;
      do
      {
        v17 = *v15++;
        v14 = 9 * v14 + v17;
        --v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) ^= v14;
  }
  if (!(_DWORD)result)
  {
    for (i = 0; ; ++i)
    {
      v19 = *(_QWORD *)(a1 + 32);
      if (i >= *(int *)(v19 + 48))
        break;
      v20 = *(_DWORD *)(*(_QWORD *)(v19 + 56) + 4 * i);
      if (v20 >= 1)
      {
        v21 = 0;
        v22 = 0;
        while (v22 < (int)v8)
        {
          v23 = v22 + 1;
          if (__s2[v22] >= 0xC0u)
          {
            if (v23 >= (int)v8)
              break;
            v24 = &__s2[v22 + 1];
            while (1)
            {
              v25 = *v24++;
              if ((v25 & 0xC0) != 0x80)
                break;
              if ((_DWORD)v8 == ++v23)
              {
                v22 = v8;
                if (v21 + 1 == v20)
                  goto LABEL_27;
                goto LABEL_21;
              }
            }
          }
          v22 = v23;
LABEL_27:
          if (++v21 == v20)
          {
            if (!v22)
              break;
            result = sub_1ACC931FC(v7, (int)i + 1, __s2, v22, &v31);
            if (!v31)
            {
              v26 = 9 * *(_QWORD *)a1 + v12 + v11 + 8 * (9 * *(_QWORD *)a1 + v12);
              v27 = i + v26 + 8 * v26 + 49;
              if (v22 >= 1)
              {
                v28 = v22;
                v29 = __s2;
                do
                {
                  v30 = *v29++;
                  v27 = 9 * v27 + v30;
                  --v28;
                }
                while (v28);
              }
              *(_QWORD *)(a1 + 16) ^= v27;
            }
            goto LABEL_22;
          }
        }
      }
LABEL_21:
      result = 0;
LABEL_22:
      if ((_DWORD)result)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1ACC92F5C(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  for (i = 0; i != 512; ++i)
  {
    v3 = *(_QWORD *)(v1 + 8 * i);
    if (v3)
    {
      do
      {
        v4 = *(_QWORD *)(v3 + 16);
        v5 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v3);
          v3 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_7;
          v5 = &xmmword_1ECD3B1D0;
        }
        (*v5)(v3);
LABEL_7:
        v3 = v4;
      }
      while (v4);
    }
  }
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v6)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    return (*v6)(v1);
  }
  return result;
}

uint64_t sub_1ACC930C8(uint64_t **a1, uint64_t a2, sqlite3_int64 *a3)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t (**v9)(unsigned __int8 *);
  sqlite3_stmt *pStmt;

  v4 = *a1;
  v5 = (unsigned __int8 *)sqlite3_mprintf("SELECT count(*) FROM %Q.'%q_%s'", (*a1)[1], (*a1)[2], a2);
  if (!v5)
    return 7;
  v7 = v5;
  pStmt = 0;
  v8 = sub_1ACB5C66C(*v4, v5, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v6);
  if (!(_DWORD)v8)
  {
    if (sqlite3_step(pStmt) == 100)
      *a3 = sqlite3_column_int64(pStmt, 0);
    v8 = sqlite3_finalize(pStmt);
  }
  v9 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_11;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_11:
    (*v9)(v7);
  }
  return v8;
}

uint64_t sub_1ACC931FC(uint64_t result, int a2, char *__s2, int a4, _DWORD *a5)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  *a5 = 0;
  if (result)
  {
    v9 = result;
    if (a4 < 1)
    {
      v11 = 13;
    }
    else
    {
      v10 = a4 + 1;
      v11 = 13;
      do
        v11 ^= __s2[(v10-- - 2)] ^ (8 * v11);
      while (v10 > 1);
    }
    v12 = (a2 ^ (8 * v11) ^ v11) & 0x1FF;
    v13 = *(_QWORD *)(result + 8 * v12);
    if (v13)
    {
      while (1)
      {
        if (*(_DWORD *)(v13 + 12) == a2 && *(_DWORD *)(v13 + 8) == a4)
        {
          result = memcmp(*(const void **)v13, __s2, a4);
          if (!(_DWORD)result)
            break;
        }
        v13 = *(_QWORD *)(v13 + 16);
        if (!v13)
          goto LABEL_8;
      }
      *a5 = 1;
    }
    else
    {
LABEL_8:
      if (sqlite3_initialize() || (v14 = (_DWORD *)sub_1ACB5D828(a4 + 24)) == 0)
      {
        if (a4 <= -24)
          return 0;
        else
          return 7;
      }
      else
      {
        v15 = v14;
        bzero(v14, a4 + 24);
        *(_QWORD *)v15 = v15 + 6;
        v15[2] = a4;
        v15[3] = a2;
        memcpy(v15 + 6, __s2, a4);
        result = 0;
        *((_QWORD *)v15 + 2) = *(_QWORD *)(v9 + 8 * v12);
        *(_QWORD *)(v9 + 8 * v12) = v15;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC93338(unsigned __int8 **a1, int a2, int a3, unint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  unint64_t v8;
  signed int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;

  v4 = (uint64_t)*a1;
  v5 = **a1;
  v6 = *((_DWORD *)a1 + 2);
  if (v5 == 4)
    v7 = 2;
  else
    v7 = 3;
  if (v6 <= 16)
    v8 = 1;
  else
    v8 = (v6 - 8) >> v7;
  if (HIDWORD(a4) && v5 == 4)
    return 2;
  if (a4)
  {
    v10 = bswap32(*(_DWORD *)(v4 + 4));
    if (a2 || v10 < (int)(v8 >> 1))
    {
      v11 = a4 / a3 % v8;
      *(_DWORD *)(v4 + 4) = bswap32(v10 + 1);
      v12 = (uint64_t)(*a1 + 8);
      if (v5 == 4)
      {
        v13 = v8 + 1;
        while (*(_DWORD *)(v12 + 4 * v11))
        {
          v11 = (v11 + 1) % v8;
          if (!--v13)
            return 0;
        }
        *(_DWORD *)(v12 + 4 * v11) = bswap32(a4);
        return 0;
      }
      else
      {
        v14 = v8 + 1;
        while (*(_QWORD *)(v12 + 8 * v11))
        {
          v11 = (v11 + 1) % v8;
          if (!--v14)
            return 0;
        }
        *(_QWORD *)(v12 + 8 * v11) = bswap64(a4);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    *(_BYTE *)(v4 + 1) = 1;
    return 0;
  }
}

uint64_t sub_1ACC93454(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  sqlite3_stmt *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = **a1;
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 113);
    switch(v3)
    {
      case 186:
        goto LABEL_5;
      case 118:
        v5 = *(_QWORD *)(v2 + 56);
        if (*((_DWORD *)a1 + 4))
          goto LABEL_11;
        goto LABEL_12;
      case 109:
LABEL_5:
        v4 = "unopened";
        break;
      default:
        v4 = "invalid";
        break;
    }
  }
  else
  {
    v4 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v4);
  sub_1ACBBE20C(186245);
  v5 = 0;
  if (*((_DWORD *)a1 + 4))
  {
LABEL_11:
    v6 = sub_1ACC8CE74(a1);
    *((_DWORD *)a1 + 4) = 0;
    if ((_DWORD)v6)
      goto LABEL_19;
  }
LABEL_12:
  v7 = a1[1];
  sub_1ACC8D0C0(v7);
  v8 = (_QWORD *)v7[8];
  if (v8)
  {
    v7[8] = 0;
    v9 = (sqlite3_stmt *)v8[3];
    v10 = (_QWORD *)v8[4];
    v11 = v10[3];
    if (v11)
      xmmword_1ECD3B1C0(v11);
    sub_1ACBE0F9C(v10, v8);
    v12 = v10[3];
    if (v12)
      xmmword_1ECD3B1D0(v12);
    sqlite3_finalize(v9);
  }
  v6 = *((unsigned int *)v7 + 15);
  *((_DWORD *)v7 + 15) = 0;
LABEL_19:
  v13 = **a1;
  if (!v13)
  {
    v15 = "NULL";
    goto LABEL_29;
  }
  v14 = *(unsigned __int8 *)(v13 + 113);
  if (v14 == 186)
  {
LABEL_23:
    v15 = "unopened";
LABEL_29:
    sqlite3_log(21, "API call with %s database connection pointer", v15);
    sub_1ACBBE20C(186258);
    return v6;
  }
  if (v14 != 118)
  {
    if (v14 != 109)
    {
      v15 = "invalid";
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(v13 + 24);
  if (v16)
  {
    xmmword_1ECD3B1C0(v16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 56) = v5;
    if (v17)
      xmmword_1ECD3B1D0(v17);
  }
  else
  {
    *(_QWORD *)(v13 + 56) = v5;
  }
  return v6;
}

uint64_t sub_1ACC93630(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  double v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  uint64_t (**v15)(char *);

  if (a1 && (v6 = *(_QWORD *)(a1 + 8)) != 0)
  {
    v7 = *(_QWORD ***)(v6 + 8);
    v8 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1ACBBE20C(89699);
      goto LABEL_5;
    }
  }
  else
  {
    sub_1ACBBE20C(97914);
    v7 = 0;
    v8 = *a3;
    if (!*a3)
      goto LABEL_4;
  }
  v10 = *(_WORD *)(v8 + 20);
  if ((v10 & 0x24) != 0)
  {
    v9 = *(double *)v8;
    goto LABEL_18;
  }
  if ((v10 & 8) != 0)
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (*(double *)v8 <= 9.22337204e18)
      v11 = (uint64_t)*(double *)v8;
    if (*(double *)v8 >= -9.22337204e18)
      v9 = *(double *)&v11;
    else
      v9 = -0.0;
    goto LABEL_18;
  }
  if ((v10 & 0x12) != 0 && *(_QWORD *)(v8 + 8))
  {
    v9 = COERCE_DOUBLE(sub_1ACBF2FC0(v8));
    goto LABEL_18;
  }
LABEL_5:
  v9 = 0.0;
LABEL_18:
  v12 = (*v7)[9];
  if (v12)
  {
    while (*(_QWORD *)(v12 + 24) != *(_QWORD *)&v9)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_24;
    }
    if (*(_DWORD *)(v12 + 32))
    {
      *(_QWORD *)(v12 + 144) = v7;
      result = ((uint64_t (*)(void *, uint64_t, uint64_t, _QWORD, uint64_t *))v7[3])(&unk_1E5C75210, v12, a1, (a2 - 1), a3 + 1);
      *(_QWORD *)(v12 + 144) = 0;
      return result;
    }
  }
LABEL_24:
  v14 = sqlite3_mprintf("no such cursor: %lld", *(_QWORD *)&v9);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    result = sub_1ACB57870(*(_QWORD *)a1, v14, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v14)
      return result;
  }
  else
  {
    result = sub_1ACBBE20C(97389);
    if (!v14)
      return result;
  }
  v15 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v15)(v14);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v14);
  v14 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v15 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    return (*v15)(v14);
  }
  return result;
}

void sub_1ACC93858(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  _BYTE *v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v44;
  int v45;
  BOOL v46;
  BOOL v47;
  int v49;
  int v50;
  int v51;
  _DWORD *v52;
  char v53;
  int v54;
  int v55;
  int v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t (**v68)(uint64_t);
  void (**v69)(void *);
  uint64_t v70;
  uint64_t (**v71)(uint64_t);
  char *__s;
  char v73;
  _DWORD *v74;
  int v75;
  int v76;
  double v77;
  int v78;
  unsigned int v79;
  _BYTE *v80;
  size_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD v90[3];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[3];

  v89 = 0;
  if (a4 != 5)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a3, "wrong number of arguments to function snippet()", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
    return;
  }
  v87 = 0u;
  v88 = 0u;
  v9 = (*(uint64_t (**)(uint64_t))(a1 + 16))(a2);
  memset(v90, 0, sizeof(v90));
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v10 = *a5;
  if (!*a5)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_8;
  }
  v11 = *(_WORD *)(v10 + 20);
  if ((v11 & 0x24) != 0)
  {
    v12 = *(double *)v10;
    goto LABEL_9;
  }
  if ((v11 & 8) == 0)
  {
    if ((v11 & 0x12) != 0 && *(_QWORD *)(v10 + 8))
    {
      LODWORD(v12) = sub_1ACBF2FC0(v10);
      goto LABEL_9;
    }
LABEL_8:
    LODWORD(v12) = 0;
    goto LABEL_9;
  }
  v65 = *(double *)v10;
  if (*(double *)v10 >= -9.22337204e18)
  {
    if (v65 <= 9.22337204e18)
      *(_QWORD *)&v12 = (uint64_t)v65;
    else
      LODWORD(v12) = -1;
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_9:
  v13 = a5[1];
  v75 = v9;
  if (v13)
  {
    v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
    {
      if ((v14 & 1) != 0)
        v13 = 0;
      else
        v13 = sub_1ACBF2B64((int *)v13, 1);
    }
    else
    {
      v13 = *(_QWORD *)(v13 + 8);
    }
  }
  if (v13)
    v15 = (char *)v13;
  else
    v15 = &byte_1ACCBEAEE;
  *((_QWORD *)&v91 + 1) = v15;
  v16 = a5[2];
  if (v16)
  {
    v17 = *(unsigned __int16 *)(v16 + 20);
    if ((~v17 & 0x202) != 0 || *(_BYTE *)(v16 + 22) != 1)
    {
      if ((v17 & 1) != 0)
        v16 = 0;
      else
        v16 = sub_1ACBF2B64((int *)v16, 1);
    }
    else
    {
      v16 = *(_QWORD *)(v16 + 8);
    }
  }
  if (v16)
    v18 = (char *)v16;
  else
    v18 = &byte_1ACCBEAEE;
  *(_QWORD *)&v92 = v18;
  LODWORD(v91) = -1;
  v19 = a5[3];
  if (v19)
  {
    v20 = *(unsigned __int16 *)(v19 + 20);
    if ((~v20 & 0x202) != 0 || *(_BYTE *)(v19 + 22) != 1)
    {
      if ((v20 & 1) != 0)
        v19 = 0;
      else
        v19 = sub_1ACBF2B64((int *)v19, 1);
    }
    else
    {
      v19 = *(_QWORD *)(v19 + 8);
    }
  }
  if (v19)
    v21 = (char *)v19;
  else
    v21 = &byte_1ACCBEAEE;
  __s = v21;
  v22 = a5[4];
  if (v22)
  {
    v23 = *(_WORD *)(v22 + 20);
    if ((v23 & 0x24) != 0)
    {
      v77 = *(double *)v22;
    }
    else if ((v23 & 8) != 0)
    {
      v66 = *(double *)v22;
      if (*(double *)v22 >= -9.22337204e18)
      {
        if (v66 <= 9.22337204e18)
          *(_QWORD *)&v77 = (uint64_t)v66;
        else
          LODWORD(v77) = -1;
      }
      else
      {
        LODWORD(v77) = 0;
      }
    }
    else if ((v23 & 0x12) != 0 && *(_QWORD *)(v22 + 8))
    {
      LODWORD(v77) = sub_1ACBF2FC0(v22);
    }
    else
    {
      LODWORD(v77) = 0;
    }
  }
  else
  {
    sub_1ACBBE20C(89699);
    LODWORD(v77) = 0;
  }
  v24 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  v25 = sqlite3_initialize();
  v26 = 0;
  v27 = 7;
  v28 = 1;
  if (v24 >= 1 && !v25)
  {
    v26 = (_BYTE *)sub_1ACB5D828(v24);
    if (v26)
    {
      v27 = (*(uint64_t (**)(uint64_t, char *))(a1 + 64))(a2, (char *)&v89 + 4);
      v28 = 0;
    }
    else
    {
      v28 = 1;
    }
  }
  v87 = 0u;
  v88 = 0u;
  v74 = (_DWORD *)a3;
  v73 = v28;
  v79 = LODWORD(v12) & ~(SLODWORD(v12) >> 31);
  if (v9 >= 1)
  {
    v82 = 0;
    v78 = 0;
    v29 = 0;
    v76 = LODWORD(v12);
    v80 = v26;
    v81 = v24;
    v30 = LODWORD(v77);
    while ((LODWORD(v12) & 0x80000000) == 0 && (_DWORD)v29 != LODWORD(v12))
    {
LABEL_60:
      v29 = (v29 + 1);
      if ((_DWORD)v29 == v9)
        goto LABEL_124;
    }
    v86 = 0;
    LODWORD(v87) = 0;
    DWORD2(v87) = 0;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(a1 + 88))(a2, v29, (char *)&v88 + 8, (char *)&v86 + 4);
    if (!v31)
    {
      v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __int128 *, _QWORD))(a1 + 40))(a2, *((_QWORD *)&v88 + 1), HIDWORD(v86), &v87, sub_1ACC94D90);
      if (!v31)
      {
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 96))(a2, v29, &v86);
        if (!v31)
        {
          if (SHIDWORD(v89) < 1)
          {
            v27 = 0;
            goto LABEL_60;
          }
          v32 = 0;
          while (1)
          {
            v84 = 0;
            v85 = 0;
            v83 = 0;
            v34 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t *, char *))(a1 + 72))(a2, v32, (char *)&v85 + 4, &v85, (char *)&v84 + 4);
            v27 = v34;
            if ((_DWORD)v85 == (_DWORD)v29)
            {
              if (SHIDWORD(v84) > (int)v86)
              {
                v27 = 267;
                goto LABEL_60;
              }
              if (v34)
                goto LABEL_60;
              bzero(v26, v81);
              v35 = sub_1ACC94F04(a1, a2, v86, (uint64_t)v26, v29, SHIDWORD(v84), v30, &v83, &v84);
              if (v35)
              {
                v27 = v35;
                goto LABEL_60;
              }
              if (v83 > v82)
              {
                v78 = v84;
                v79 = v29;
                LODWORD(v89) = v86;
                v82 = v83;
              }
              v27 = 0;
              v36 = DWORD2(v87);
              if (DWORD2(v87) && (int)v86 > v30)
              {
                v37 = 0;
                if (SDWORD2(v87) <= 1)
                  v36 = 1;
                v38 = (v36 - 1);
                while (v38 != v37)
                {
                  v39 = v37 + 1;
                  v40 = *(_DWORD *)(v88 + 4 + 4 * v37++);
                  if (v40 > SHIDWORD(v84))
                  {
                    v38 = v39 - 1;
                    break;
                  }
                }
                if (*(_DWORD *)(v88 + 4 * v38) >= SHIDWORD(v84))
                {
                  v27 = 0;
                }
                else
                {
                  bzero(v26, v81);
                  v41 = *(int *)(v88 + 4 * v38);
                  v94 = 0;
                  v95[0] = 0;
                  v42 = (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 64))(a2, &v94);
                  if ((int)v94 >= 1 && v42 == 0)
                  {
                    v44 = 0;
                    v45 = 1;
                    do
                    {
                      v27 = (*(uint64_t (**)(uint64_t, _QWORD, char *, _QWORD *, char *))(a1 + 72))(a2, (v45 - 1), (char *)v95 + 4, v95, (char *)&v94 + 4);
                      if (v27)
                        v47 = 0;
                      else
                        v47 = LODWORD(v95[0]) == (_DWORD)v29;
                      if (v47 && SHIDWORD(v94) >= (int)v41 && SLODWORD(v77) + v41 > SHIDWORD(v94))
                      {
                        if (v80[SHIDWORD(v95[0])])
                          ++v44;
                        else
                          v44 += 1000;
                        v80[SHIDWORD(v95[0])] = 1;
                        (*(void (**)(uint64_t))(a1 + 56))(a2);
                      }
                      if (v27)
                        v46 = 0;
                      else
                        v46 = v45 < (int)v94;
                      ++v45;
                    }
                    while (v46);
                    v26 = v80;
                    v9 = v75;
                  }
                  else
                  {
                    v27 = v42;
                    v44 = 0;
                  }
                  v30 = LODWORD(v77);
                  v49 = *(_DWORD *)(v88 + 4 * v38);
                  if (v49)
                    v50 = 100;
                  else
                    v50 = 120;
                  if (v27)
                  {
                    LODWORD(v12) = v76;
                  }
                  else
                  {
                    v51 = v50 + v44;
                    LODWORD(v12) = v76;
                    if (v51 > v82)
                    {
                      v27 = 0;
                      LODWORD(v89) = v86;
                      v78 = v49;
                      v79 = v29;
                      v82 = v51;
                    }
                  }
                }
              }
            }
            v32 = (v32 + 1);
            if (v27)
              v33 = 0;
            else
              v33 = (int)v32 < SHIDWORD(v89);
            if (!v33)
              goto LABEL_60;
          }
        }
      }
    }
    v27 = v31;
    goto LABEL_125;
  }
  v78 = 0;
  v30 = LODWORD(v77);
LABEL_124:
  if (v27)
  {
LABEL_125:
    v52 = v74;
    v53 = v73;
    v54 = v78;
    v55 = v79;
    if (!*((_QWORD *)&v92 + 1))
      goto LABEL_162;
    goto LABEL_130;
  }
  v55 = v79;
  v56 = (*(uint64_t (**)(uint64_t, _QWORD, char *, __int128 *))(a1 + 88))(a2, v79, (char *)&v92 + 8, &v93);
  v52 = v74;
  v53 = v73;
  v54 = v78;
  if (!(v56 | v89))
    v56 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(a1 + 96))(a2, v79, &v89);
  v27 = v56;
  if (!*((_QWORD *)&v92 + 1))
    goto LABEL_162;
LABEL_130:
  if (!v27)
    v27 = sub_1ACC950B8(a1, a2, v55, (uint64_t)v90);
  HIDWORD(v90[2]) = v54;
  LODWORD(v91) = v30 + v54 - 1;
  if (v54 >= 1 && !v27)
  {
    v57 = strlen(__s);
    *((_QWORD *)&v93 + 1) = sqlite3_mprintf("%z%.*s", *((_QWORD *)&v93 + 1), v57, __s);
    if (*((_QWORD *)&v93 + 1))
      v27 = 0;
    else
      v27 = 7;
  }
LABEL_137:
  if ((HIDWORD(v90[1]) & 0x80000000) == 0 && SHIDWORD(v90[1]) < v54 && !v27)
  {
    *(_QWORD *)((char *)&v90[1] + 12) = -1;
    if (SDWORD1(v90[1]) >= SDWORD2(v90[1]))
      goto LABEL_152;
    while (1)
    {
      v95[0] = 0;
      HIDWORD(v94) = 0;
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)&v90[0] + 72))(*((_QWORD *)&v90[0] + 1));
      if (v27)
        goto LABEL_137;
      if (LODWORD(v95[0]) == LODWORD(v90[1]))
      {
        v58 = HIDWORD(v94);
        v59 = v58
            + (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)&v90[0] + 56))(*((_QWORD *)&v90[0] + 1), HIDWORD(v95[0]))- 1;
        if ((HIDWORD(v90[1]) & 0x80000000) != 0)
        {
          HIDWORD(v90[1]) = HIDWORD(v94);
LABEL_143:
          LODWORD(v90[2]) = v59;
          goto LABEL_144;
        }
        if (SHIDWORD(v94) > SLODWORD(v90[2]))
          goto LABEL_137;
        if (v59 > SLODWORD(v90[2]))
          goto LABEL_143;
      }
LABEL_144:
      ++DWORD1(v90[1]);
      if (SDWORD1(v90[1]) >= SDWORD2(v90[1]))
        goto LABEL_137;
    }
  }
  if (!v27)
LABEL_152:
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _OWORD *, uint64_t (*)(uint64_t, char, uint64_t, uint64_t, int, int)))(a1 + 40))(a2, *((_QWORD *)&v92 + 1), v93, v90, sub_1ACC951B0);
  if ((int)v91 < (int)v89 - 1)
  {
    if (v27)
      goto LABEL_163;
    v60 = __s;
    v61 = strlen(__s);
LABEL_160:
    *((_QWORD *)&v93 + 1) = sqlite3_mprintf("%z%.*s", *((_QWORD *)&v93 + 1), v61, v60);
    if (*((_QWORD *)&v93 + 1))
      goto LABEL_169;
    v27 = 7;
LABEL_163:
    if (!v52)
    {
      sub_1ACBBE20C(97602);
      goto LABEL_190;
    }
    v52[9] = v27;
    if ((*(_WORD *)(*(_QWORD *)v52 + 20) & 1) == 0)
      goto LABEL_190;
    switch(v27)
    {
      case 516:
        v62 = "abort due to ROLLBACK";
        break;
      case 101:
        v62 = "no more rows available";
        break;
      case 100:
        v62 = "another row available";
        break;
      default:
        if (v27 > 0x1Cu || ((0x1410004uLL >> v27) & 1) != 0)
          v62 = "unknown error";
        else
          v62 = off_1E5C74AE8[v27];
        break;
    }
    v63 = (uint64_t)v52;
    v64 = 0;
    goto LABEL_189;
  }
  if (!v27 && *((_QWORD *)&v92 + 1))
  {
    v60 = (char *)(*((_QWORD *)&v92 + 1) + SDWORD1(v93));
    v61 = (v93 - DWORD1(v93));
    if ((int)v93 - DWORD1(v93) < 0)
      v61 = strlen((const char *)(*((_QWORD *)&v92 + 1) + SDWORD1(v93)));
    goto LABEL_160;
  }
LABEL_162:
  if (v27)
    goto LABEL_163;
LABEL_169:
  if (!v52)
  {
    sub_1ACBBE20C(97480);
    goto LABEL_190;
  }
  v62 = (char *)*((_QWORD *)&v93 + 1);
  v63 = (uint64_t)v52;
  v64 = -1;
LABEL_189:
  sub_1ACBC69D0(v63, v62, -1, 1u, (uint64_t (*)(uint64_t))v64);
LABEL_190:
  v67 = *((_QWORD *)&v93 + 1);
  if (!*((_QWORD *)&v93 + 1))
    goto LABEL_197;
  v68 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_196;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v67);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v67);
  v67 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v68 = &xmmword_1ECD3B1D0;
LABEL_196:
    (*v68)(v67);
  }
LABEL_197:
  if ((v53 & 1) == 0)
  {
    v69 = (void (**)(void *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v26);
      v26 = (_BYTE *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_204;
      v69 = (void (**)(void *))&xmmword_1ECD3B1D0;
    }
    (*v69)(v26);
  }
LABEL_204:
  v70 = v88;
  if (!(_QWORD)v88)
    return;
  v71 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_210;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v70);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v70);
  v70 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v71 = &xmmword_1ECD3B1D0;
LABEL_210:
    (*v71)(v70);
  }
}

void sub_1ACC943F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  size_t v19;
  double v20;
  uint64_t v21;
  uint64_t (**v22)(uint64_t);
  char *v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (a4 != 3)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a3, "wrong number of arguments to function highlight()", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
    return;
  }
  v9 = *a5;
  if (!*a5)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_8;
  }
  v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 0x24) != 0)
  {
    v11 = *(_QWORD *)v9;
    goto LABEL_9;
  }
  if ((v10 & 8) == 0)
  {
    if ((v10 & 0x12) != 0 && *(_QWORD *)(v9 + 8))
    {
      v11 = sub_1ACBF2FC0(v9);
      goto LABEL_9;
    }
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v20 = *(double *)v9;
  if (*(double *)v9 >= -9.22337204e18)
  {
    if (v20 <= 9.22337204e18)
      v11 = (uint64_t)v20;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = 0x8000000000000000;
  }
LABEL_9:
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  v12 = a5[1];
  if (v12)
  {
    v13 = *(unsigned __int16 *)(v12 + 20);
    if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
    {
      if ((v13 & 1) != 0)
        v12 = 0;
      else
        v12 = sub_1ACBF2B64((int *)v12, 1);
    }
    else
    {
      v12 = *(_QWORD *)(v12 + 8);
    }
  }
  *((_QWORD *)&v25 + 1) = v12;
  v14 = a5[2];
  if (v14)
  {
    v15 = *(unsigned __int16 *)(v14 + 20);
    if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
    {
      if ((v15 & 1) != 0)
        v14 = 0;
      else
        v14 = sub_1ACBF2B64((int *)v14, 1);
    }
    else
    {
      v14 = *(_QWORD *)(v14 + 8);
    }
  }
  *(_QWORD *)&v26 = v14;
  LODWORD(v25) = -1;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, char *, __int128 *))(a1 + 88))(a2, v11, (char *)&v26 + 8, &v27);
  v17 = v16;
  if (!*((_QWORD *)&v26 + 1))
    goto LABEL_54;
  if (!v16)
  {
    v17 = sub_1ACC950B8(a1, a2, v11, (uint64_t)v24);
    if (!v17)
    {
      v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _OWORD *, uint64_t (*)(uint64_t, char, uint64_t, uint64_t, int, int)))(a1 + 40))(a2, *((_QWORD *)&v26 + 1), v27, v24, sub_1ACC951B0);
      v17 = v18;
      if (v18 || !*((_QWORD *)&v26 + 1))
      {
        if (v18)
          goto LABEL_47;
      }
      else
      {
        v19 = (v27 - DWORD1(v27));
        if ((int)v27 - DWORD1(v27) < 0)
          v19 = strlen((const char *)(*((_QWORD *)&v26 + 1) + SDWORD1(v27)));
        *((_QWORD *)&v27 + 1) = sqlite3_mprintf("%z%.*s", *((_QWORD *)&v27 + 1), v19, *((_QWORD *)&v26 + 1) + SDWORD1(v27));
        if (!*((_QWORD *)&v27 + 1))
        {
          v17 = 7;
          goto LABEL_47;
        }
      }
      if (a3)
        sub_1ACBC69D0(a3, *((char **)&v27 + 1), -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      else
        sub_1ACBBE20C(97480);
      v17 = 0;
    }
  }
LABEL_47:
  v21 = *((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v21);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v21);
      v21 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_54;
      v22 = &xmmword_1ECD3B1D0;
    }
    (*v22)(v21);
  }
LABEL_54:
  if (v17)
  {
    if (a3)
    {
      *(_DWORD *)(a3 + 36) = v17;
      if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 1) != 0)
      {
        switch(v17)
        {
          case 516:
            v23 = "abort due to ROLLBACK";
            break;
          case 101:
            v23 = "no more rows available";
            break;
          case 100:
            v23 = "another row available";
            break;
          default:
            if (v17 > 0x1Cu || ((0x1410004uLL >> v17) & 1) != 0)
              v23 = "unknown error";
            else
              v23 = off_1E5C74AE8[v17];
            break;
        }
        sub_1ACBC69D0(a3, v23, -1, 1u, 0);
      }
    }
    else
    {
      sub_1ACBBE20C(97602);
    }
  }
}

void sub_1ACC947F8(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5)
{
  int *v10;
  float64x2_t *v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  float64x2_t *v16;
  double v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  double v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  int *v26;
  void (**v27)(void);
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v47 = 0;
  v10 = (int *)(*(uint64_t (**)(uint64_t, _QWORD))(a1 + 120))(a2, 0);
  if (v10)
    goto LABEL_2;
  v49 = 0;
  v50 = 0;
  v20 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  if (sqlite3_initialize() || (v26 = (int *)sub_1ACB5D828(16 * v20 + 32)) == 0)
  {
    v14 = 7;
    goto LABEL_46;
  }
  v10 = v26;
  bzero(v26, 16 * v20 + 32);
  *v10 = v20;
  *((_QWORD *)v10 + 2) = v10 + 8;
  *((_QWORD *)v10 + 3) = &v10[2 * v20 + 8];
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 24))(a2, &v50);
  if (v14 || (v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 32))(a2, 0xFFFFFFFFLL, &v49)) != 0)
  {
LABEL_30:
    v27 = (void (**)(void))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v10);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v10);
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_46;
      v27 = (void (**)(void))&xmmword_1ECD3B1D0;
    }
    (*v27)();
    goto LABEL_46;
  }
  *((double *)v10 + 1) = (double)v49 / (double)v50;
  if (v20 >= 1)
  {
    v44 = 0;
    while (1)
    {
      v48 = 0;
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t (*)(uint64_t, uint64_t, _QWORD *)))(a1 + 104))(a2, v44, &v48, sub_1ACC95524);
      if (v45)
        break;
      v46 = log(((double)(v50 - v48) + 0.5) / ((double)v48 + 0.5));
      if (v46 <= 0.0)
        v46 = 0.000001;
      *(double *)(*((_QWORD *)v10 + 2) + 8 * v44++) = v46;
      if (v20 == v44)
        goto LABEL_69;
    }
    v14 = v45;
    goto LABEL_30;
  }
LABEL_69:
  v14 = (*(uint64_t (**)(uint64_t, int *, void (__cdecl *)(void *)))(a1 + 112))(a2, v10, sqlite3_free);
  if (v14)
    goto LABEL_46;
LABEL_2:
  v11 = (float64x2_t *)*((_QWORD *)v10 + 3);
  bzero(v11, 8 * *v10);
  v12 = (*(uint64_t (**)(uint64_t, int *))(a1 + 64))(a2, &v47);
  if (v12)
    v13 = 1;
  else
    v13 = v47 < 1;
  if (!v13)
  {
    v21 = 0;
    while (1)
    {
      LODWORD(v50) = 0;
      LODWORD(v49) = 0;
      LODWORD(v48) = 0;
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(a1 + 72))(a2, v21, &v50, &v49, &v48);
      if (v23)
      {
        v14 = v23;
        goto LABEL_46;
      }
      v22 = 1.0;
      if ((int)v49 < a4)
      {
        v24 = *(_QWORD *)(a5 + 8 * (int)v49);
        if (!v24)
        {
          sub_1ACBBE20C(89734);
LABEL_23:
          v22 = 0.0;
          goto LABEL_15;
        }
        v25 = *(_WORD *)(v24 + 20);
        if ((v25 & 8) != 0)
        {
          v22 = *(double *)v24;
        }
        else
        {
          if ((v25 & 0x24) == 0)
          {
            if ((v25 & 0x12) != 0)
            {
              v22 = sub_1ACBF2F88(v24);
              goto LABEL_15;
            }
            goto LABEL_23;
          }
          v22 = (double)*(uint64_t *)v24;
        }
      }
LABEL_15:
      v11->f64[(int)v50] = v22 + v11->f64[(int)v50];
      v21 = (v21 + 1);
      if ((int)v21 >= v47)
        goto LABEL_8;
    }
  }
  v14 = v12;
  if (!v12)
  {
LABEL_8:
    LODWORD(v50) = 0;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 96))(a2, 0xFFFFFFFFLL, &v50);
    if (!v14)
    {
      v15 = *v10;
      if ((int)v15 < 1)
      {
        v19 = 0.0;
        goto LABEL_41;
      }
      v16 = (float64x2_t *)*((_QWORD *)v10 + 2);
      v17 = (double)(int)v50 * 0.75 / *((double *)v10 + 1) + 0.25;
      if (v15 >= 4)
      {
        v18 = v15 & 0x7FFFFFFC;
        v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v17, 0);
        v29 = v16 + 1;
        v30 = v11 + 1;
        v19 = 0.0;
        v31 = (float64x2_t)vdupq_n_s64(0x400199999999999AuLL);
        v32 = (float64x2_t)vdupq_n_s64(0x3FF3333333333333uLL);
        v33 = v15 & 0xFFFFFFFC;
        do
        {
          v34 = vmulq_f64(v29[-1], vdivq_f64(vmulq_f64(v30[-1], v31), vmlaq_f64(v30[-1], v32, v28)));
          v35 = vmulq_f64(*v29, vdivq_f64(vmulq_f64(*v30, v31), vmlaq_f64(*v30, v32, v28)));
          v19 = v19 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
          v29 += 2;
          v30 += 2;
          v33 -= 4;
        }
        while (v33);
        if (v18 == v15)
        {
LABEL_41:
          if (a3)
          {
            v42 = *(_QWORD *)a3;
            if ((*(_WORD *)(v42 + 20) & 0x9000) != 0)
              sub_1ACBF2A54((int *)v42);
            else
              *(_WORD *)(v42 + 20) = 1;
            *(double *)v42 = -v19;
            *(_WORD *)(v42 + 20) = 8;
          }
          else
          {
            sub_1ACBBE20C(97379);
          }
          return;
        }
      }
      else
      {
        v18 = 0;
        v19 = 0.0;
      }
      v36 = &v11->f64[v18];
      v37 = &v16->f64[v18];
      v38 = v15 - v18;
      do
      {
        v39 = *v37++;
        v40 = v39;
        v41 = *v36++;
        v19 = v19 + v40 * (v41 * 2.2 / (v41 + v17 * 1.2));
        --v38;
      }
      while (v38);
      goto LABEL_41;
    }
  }
LABEL_46:
  if (a3)
  {
    a3[9] = v14;
    if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 1) != 0)
    {
      switch(v14)
      {
        case 516:
          v43 = "abort due to ROLLBACK";
          break;
        case 101:
          v43 = "no more rows available";
          break;
        case 100:
          v43 = "another row available";
          break;
        default:
          if (v14 > 0x1Cu || ((0x1410004uLL >> v14) & 1) != 0)
            v43 = "unknown error";
          else
            v43 = off_1E5C74AE8[v14];
          break;
      }
      sub_1ACBC69D0((uint64_t)a3, v43, -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97602);
  }
}

uint64_t sub_1ACC94D90(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if ((a2 & 1) != 0)
    return 0;
  v6 = *(_DWORD *)a1;
  if (*(int *)a1 < 1)
  {
    v12 = (_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a1 + 4);
    if (v19 == v11)
    {
      if (v19)
        v14 = 2 * v19;
      else
        v14 = 64;
      v20 = *(_QWORD *)(a1 + 16);
      if (sqlite3_initialize())
        goto LABEL_29;
      v16 = sub_1ACB6BB48(v20, 4 * v14);
      if (!v16)
        goto LABEL_29;
      v6 = 0;
LABEL_36:
      *(_QWORD *)(a1 + 16) = v16;
      *(_DWORD *)(a1 + 4) = v14;
      v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_32;
    }
    v6 = 0;
LABEL_31:
    v16 = *(_QWORD *)(a1 + 16);
LABEL_32:
    v18 = 0;
    *v12 = v11 + 1;
    *(_DWORD *)(v16 + 4 * v11) = v6;
    goto LABEL_33;
  }
  if (a5 >= 1)
  {
    v7 = (a5 - 1);
    while (1)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v7);
      if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
        break;
      if (v7-- <= 0)
      {
        LODWORD(v7) = -1;
        break;
      }
    }
    if ((_DWORD)v7 != a5 - 1 && (v8 == 58 || v8 == 46))
    {
      v12 = (_DWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
      v13 = *(_DWORD *)(a1 + 4);
      if (v13 == v11)
      {
        if (v13)
          v14 = 2 * v13;
        else
          v14 = 64;
        v15 = *(_QWORD *)(a1 + 16);
        if (sqlite3_initialize() || (v16 = sub_1ACB6BB48(v15, 4 * v14)) == 0)
        {
LABEL_29:
          v18 = 7;
          goto LABEL_33;
        }
        goto LABEL_36;
      }
      goto LABEL_31;
    }
  }
  v18 = 0;
LABEL_33:
  ++*(_DWORD *)a1;
  return v18;
}

uint64_t sub_1ACC94F04(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, _DWORD *a8, _DWORD *a9)
{
  int v9;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v32;
  int v33;
  uint64_t v34;
  int v36;
  uint64_t v38;
  uint64_t v39;

  v9 = a7;
  v15 = a9;
  v38 = 0;
  v39 = 0;
  v16 = a7;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 64))(a2, &v38);
  v18 = (int)v38 >= 1 && (_DWORD)v17 == 0;
  v34 = v16;
  if (v18)
  {
    v32 = a3;
    v33 = v9;
    v36 = 0;
    v21 = 0;
    v23 = -1;
    v24 = 1;
    v25 = v16 + a6;
    do
    {
      v19 = (*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t *, char *))(a1 + 72))(a2, (v24 - 1), (char *)&v39 + 4, &v39, (char *)&v38 + 4);
      if ((_DWORD)v19)
        v27 = 0;
      else
        v27 = (_DWORD)v39 == a5;
      if (v27)
      {
        v28 = HIDWORD(v38);
        v29 = SHIDWORD(v38) < a6 || v25 <= SHIDWORD(v38);
        if (!v29)
        {
          if (*(_BYTE *)(a4 + SHIDWORD(v39)))
            ++v21;
          else
            v21 += 1000;
          *(_BYTE *)(a4 + SHIDWORD(v39)) = 1;
          if (v23 < 0)
            v23 = v28;
          v36 = (*(uint64_t (**)(uint64_t))(a1 + 56))(a2) + v28;
        }
      }
      v29 = v24++ < (int)v38;
    }
    while (v29 && (_DWORD)v19 == 0);
    v9 = v33;
    v15 = a9;
    v20 = v32;
    v22 = v36;
  }
  else
  {
    v19 = v17;
    v20 = a3;
    v21 = 0;
    v22 = 0;
    v23 = -1;
  }
  *a8 = v21;
  if (v15)
  {
    v30 = v23 - (v23 + v9 - v22) / 2;
    if (v30 + v34 > v20)
      v30 = v20 - v9;
    *v15 = v30 & ~(v30 >> 63);
  }
  return v19;
}

uint64_t sub_1ACC950B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(a2, a4 + 24);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a4 + 28) = -1;
    if (*(_DWORD *)(a4 + 20) >= *(_DWORD *)(a4 + 24))
      return 0;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a4 + 72))(*(_QWORD *)(a4 + 8));
      if ((_DWORD)result)
        return result;
      if (!*(_DWORD *)(a4 + 16))
      {
        v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a4 + 56))(*(_QWORD *)(a4 + 8), 0) - 1;
        if ((*(_DWORD *)(a4 + 28) & 0x80000000) != 0)
        {
          *(_DWORD *)(a4 + 28) = 0;
LABEL_6:
          *(_DWORD *)(a4 + 32) = v8;
          goto LABEL_7;
        }
        v9 = *(_DWORD *)(a4 + 32);
        if (v9 < 0)
          return 0;
        if (v8 > v9)
          goto LABEL_6;
      }
LABEL_7:
      v6 = *(_DWORD *)(a4 + 24);
      v7 = *(_DWORD *)(a4 + 20) + 1;
      *(_DWORD *)(a4 + 20) = v7;
      if (v7 >= v6)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1ACC951B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  char *v47;

  if ((a2 & 1) != 0)
    return 0;
  v9 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v9 + 1;
  v10 = *(_DWORD *)(a1 + 48);
  if (v10 < 0)
    goto LABEL_13;
  v11 = *(_DWORD *)(a1 + 44);
  if (v9 > v10 || v9 < v11)
    return 0;
  if (v11 && v9 == v11)
    *(_DWORD *)(a1 + 84) = a5;
LABEL_13:
  if (v9 == *(_DWORD *)(a1 + 28))
  {
    v15 = *(_QWORD *)(a1 + 72);
    if (!v15)
      goto LABEL_18;
    v16 = *(int *)(a1 + 84);
    v17 = v15 + v16;
    v18 = (a5 - v16);
    if (a5 - (int)v16 < 0)
      v18 = strlen((const char *)(v15 + v16));
    v19 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v18, v17);
    *(_QWORD *)(a1 + 88) = v19;
    if (!v19)
    {
      v13 = 7;
    }
    else
    {
LABEL_18:
      v13 = *(_QWORD *)(a1 + 56);
      if (v13)
      {
        v20 = strlen(*(const char **)(a1 + 56));
        v21 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v20, v13);
        *(_QWORD *)(a1 + 88) = v21;
        if (v21)
          v13 = 0;
        else
          v13 = 7;
      }
    }
    *(_DWORD *)(a1 + 84) = a5;
  }
  else
  {
    v13 = 0;
  }
  if (v9 != *(_DWORD *)(a1 + 32))
    goto LABEL_56;
  if ((*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
    goto LABEL_32;
  if (*(_DWORD *)(a1 + 28) >= *(_DWORD *)(a1 + 44))
    goto LABEL_32;
  if ((_DWORD)v13)
    goto LABEL_32;
  v22 = *(_QWORD *)(a1 + 56);
  if (!v22)
    goto LABEL_32;
  v23 = strlen(*(const char **)(a1 + 56));
  v24 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v23, v22);
  *(_QWORD *)(a1 + 88) = v24;
  if (v24)
  {
    v13 = 0;
LABEL_32:
    v26 = (_DWORD *)(a1 + 84);
    v25 = *(int *)(a1 + 84);
    if ((_DWORD)v13)
      goto LABEL_74;
    v27 = *(_QWORD *)(a1 + 72);
    if (!v27)
      goto LABEL_74;
    v28 = v27 + v25;
    v29 = (a6 - v25);
    if (a6 - (int)v25 < 0)
      v29 = strlen((const char *)(v27 + v25));
    v30 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v29, v28);
    *(_QWORD *)(a1 + 88) = v30;
    if (v30)
    {
LABEL_74:
      if ((_DWORD)v13 || (v31 = *(_QWORD *)(a1 + 64)) == 0)
      {
        *v26 = a6;
        if ((_DWORD)v13)
          goto LABEL_56;
LABEL_42:
        *(_QWORD *)(a1 + 28) = -1;
        if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 24))
        {
LABEL_43:
          v13 = 0;
          goto LABEL_56;
        }
        while (1)
        {
          v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)(a1 + 8));
          if ((_DWORD)v36)
          {
            v13 = v36;
            goto LABEL_56;
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            v37 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1 + 56))(*(_QWORD *)(a1 + 8), 0) - 1;
            if ((*(_DWORD *)(a1 + 28) & 0x80000000) != 0)
            {
              *(_DWORD *)(a1 + 28) = 0;
LABEL_45:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_46;
            }
            v38 = *(_DWORD *)(a1 + 32);
            if (v38 < 0)
              goto LABEL_43;
            if (v37 > v38)
              goto LABEL_45;
          }
LABEL_46:
          v34 = *(_DWORD *)(a1 + 24);
          v35 = *(_DWORD *)(a1 + 20) + 1;
          *(_DWORD *)(a1 + 20) = v35;
          if (v35 >= v34)
            goto LABEL_43;
        }
      }
      v32 = strlen(*(const char **)(a1 + 64));
      v33 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v32, v31);
      *(_QWORD *)(a1 + 88) = v33;
      if (v33)
      {
        *v26 = a6;
        goto LABEL_42;
      }
    }
    goto LABEL_55;
  }
  v26 = (_DWORD *)(a1 + 84);
LABEL_55:
  *v26 = a6;
  v13 = 7;
LABEL_56:
  v39 = *(_DWORD *)(a1 + 48);
  if ((v39 & 0x80000000) == 0 && v9 == v39)
  {
    if (!(_DWORD)v13)
    {
      v40 = *(_QWORD *)(a1 + 72);
      if (v40)
      {
        v41 = *(int *)(a1 + 84);
        v42 = v40 + v41;
        v43 = (a6 - v41);
        if (a6 - (int)v41 < 0)
          v43 = strlen((const char *)(v40 + v41));
        v44 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v43, v42);
        *(_QWORD *)(a1 + 88) = v44;
        if (v44)
          v13 = 0;
        else
          v13 = 7;
      }
    }
    *(_DWORD *)(a1 + 84) = a6;
    if (v9 >= *(_DWORD *)(a1 + 28) && v9 < *(_DWORD *)(a1 + 32) && !(_DWORD)v13)
    {
      v45 = *(_QWORD *)(a1 + 64);
      if (v45)
      {
        v46 = strlen(*(const char **)(a1 + 64));
        v47 = sqlite3_mprintf("%z%.*s", *(_QWORD *)(a1 + 88), v46, v45);
        *(_QWORD *)(a1 + 88) = v47;
        if (v47)
          return 0;
        else
          return 7;
      }
    }
  }
  return v13;
}

uint64_t sub_1ACC95524(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  ++*a3;
  return 0;
}

uint64_t sub_1ACC95538(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _BYTE *v14;
  const char *i;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 *v26;
  char v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  _BYTE *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  const char *j;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  const char *k;
  uint64_t v44;
  uint64_t v45;
  const char *m;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;

  if ((a3 & 1) != 0)
    return 1;
  if (sqlite3_initialize())
  {
    v7 = 0;
LABEL_4:
    v8 = 7;
    goto LABEL_5;
  }
  v10 = sub_1ACB5D828(192);
  v7 = v10;
  if (!v10)
    goto LABEL_4;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 136) = 0x100000040;
  if (sqlite3_initialize())
  {
    *(_QWORD *)(v7 + 128) = 0;
    goto LABEL_4;
  }
  v11 = sub_1ACB5D828(64);
  *(_QWORD *)(v7 + 128) = v11;
  v12 = "L* N* Co";
  if (!v11 || a3 < 1)
    goto LABEL_23;
  v13 = 0;
  while (2)
  {
    v14 = *(_BYTE **)(a2 + 8 * v13);
    if (!v14)
      goto LABEL_15;
    for (i = "categories"; ; ++i)
    {
      v16 = *v14;
      v17 = *(unsigned __int8 *)i;
      if ((_DWORD)v16 == (_DWORD)v17)
        break;
      if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
        goto LABEL_15;
LABEL_19:
      ++v14;
    }
    if (*v14)
      goto LABEL_19;
    v12 = *(const char **)(a2 + ((8 * v13) | 8));
LABEL_15:
    v13 += 2;
    if ((int)v13 < a3)
      continue;
    break;
  }
LABEL_23:
  if (!v11)
    goto LABEL_4;
  v18 = *(unsigned __int8 *)v12;
  if (*v12)
  {
    v19 = (_DWORD *)(v7 + 176);
    v20 = (_BYTE *)(v7 + 165);
    while (1)
    {
LABEL_27:
      if (!v18)
        goto LABEL_93;
      if (v18 != 32 && v18 != 9)
        break;
      v21 = *(unsigned __int8 *)++v12;
      v18 = v21;
    }
    *(_BYTE *)(v7 + 160) = 1;
    switch(*v12)
    {
      case 'C':
        v8 = 1;
        switch(v12[1])
        {
          case 'c':
            *(_BYTE *)(v7 + 161) = 1;
            goto LABEL_93;
          case 'd':
          case 'e':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'p':
          case 'q':
          case 'r':
            goto LABEL_5;
          case 'f':
            *(_BYTE *)(v7 + 162) = 1;
            goto LABEL_93;
          case 'n':
            *(_BYTE *)(v7 + 163) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 191) = 1;
            goto LABEL_93;
          case 's':
            *(_BYTE *)(v7 + 164) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42)
              goto LABEL_5;
            *(_BYTE *)(v7 + 191) = 1;
            *(_DWORD *)(v7 + 161) = 16843009;
            break;
        }
        goto LABEL_93;
      case 'L':
        v8 = 1;
        switch(v12[1])
        {
          case 'C':
            *(_BYTE *)(v7 + 190) = 1;
            goto LABEL_93;
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'n':
          case 'p':
          case 'q':
          case 'r':
          case 's':
            goto LABEL_5;
          case 'l':
            *v20 = 1;
            goto LABEL_93;
          case 'm':
            *(_BYTE *)(v7 + 166) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 167) = 1;
            goto LABEL_93;
          case 't':
            *(_BYTE *)(v7 + 168) = 1;
            goto LABEL_93;
          case 'u':
            *(_BYTE *)(v7 + 169) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42)
              goto LABEL_5;
            *(_BYTE *)(v7 + 190) = 1;
            *(_DWORD *)v20 = 16843009;
            *(_BYTE *)(v7 + 169) = 1;
            break;
        }
        goto LABEL_93;
      case 'M':
        v22 = v12[1];
        v8 = 1;
        if (v22 > 100)
        {
          if (v22 == 101)
          {
            *(_BYTE *)(v7 + 171) = 1;
            goto LABEL_93;
          }
          if (v22 == 110)
          {
            *(_BYTE *)(v7 + 172) = 1;
            goto LABEL_93;
          }
        }
        else
        {
          if (v22 == 42)
          {
            *(_WORD *)(v7 + 170) = 257;
            *(_BYTE *)(v7 + 172) = 1;
            goto LABEL_93;
          }
          if (v22 == 99)
          {
            *(_BYTE *)(v7 + 170) = 1;
            goto LABEL_93;
          }
        }
        goto LABEL_5;
      case 'N':
        v23 = v12[1];
        v8 = 1;
        if (v23 > 107)
        {
          if (v23 == 108)
          {
            *(_BYTE *)(v7 + 174) = 1;
            goto LABEL_93;
          }
          if (v23 == 111)
          {
            *(_BYTE *)(v7 + 175) = 1;
            goto LABEL_93;
          }
        }
        else
        {
          if (v23 == 42)
          {
            *(_WORD *)(v7 + 173) = 257;
            *(_BYTE *)(v7 + 175) = 1;
            goto LABEL_93;
          }
          if (v23 == 100)
          {
            *(_BYTE *)(v7 + 173) = 1;
            goto LABEL_93;
          }
        }
        goto LABEL_5;
      case 'P':
        v8 = 1;
        switch(v12[1])
        {
          case '*':
            *(_DWORD *)(v7 + 179) = 16843009;
            *v19 = 16843009;
            goto LABEL_93;
          case 'c':
            *(_BYTE *)v19 = 1;
            goto LABEL_93;
          case 'd':
            *(_BYTE *)(v7 + 177) = 1;
            goto LABEL_93;
          case 'e':
            *(_BYTE *)(v7 + 178) = 1;
            goto LABEL_93;
          case 'f':
            *(_BYTE *)(v7 + 179) = 1;
            goto LABEL_93;
          case 'i':
            *(_BYTE *)(v7 + 180) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 181) = 1;
            goto LABEL_93;
          case 's':
            *(_BYTE *)(v7 + 182) = 1;
            goto LABEL_93;
          default:
            goto LABEL_5;
        }
      case 'S':
        v8 = 1;
        switch(v12[1])
        {
          case 'c':
            *(_BYTE *)(v7 + 183) = 1;
            goto LABEL_93;
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'l':
          case 'n':
            goto LABEL_5;
          case 'k':
            *(_BYTE *)(v7 + 184) = 1;
            goto LABEL_93;
          case 'm':
            *(_BYTE *)(v7 + 185) = 1;
            goto LABEL_93;
          case 'o':
            *(_BYTE *)(v7 + 186) = 1;
            goto LABEL_93;
          default:
            if (v12[1] != 42)
              goto LABEL_5;
            *(_DWORD *)(v7 + 183) = 16843009;
            break;
        }
        goto LABEL_93;
      case 'Z':
        v24 = v12[1];
        v8 = 1;
        if (v24 <= 111)
        {
          if (v24 != 42)
          {
            if (v24 == 108)
            {
              *(_BYTE *)(v7 + 187) = 1;
              goto LABEL_93;
            }
LABEL_5:
            sub_1ACC95B9C(v7);
            v7 = 0;
            goto LABEL_6;
          }
          *(_WORD *)(v7 + 187) = 257;
LABEL_63:
          *(_BYTE *)(v7 + 189) = 1;
          goto LABEL_93;
        }
        if (v24 != 112)
        {
          if (v24 != 115)
            goto LABEL_5;
          goto LABEL_63;
        }
        *(_BYTE *)(v7 + 188) = 1;
LABEL_93:
        while (1)
        {
          v18 = *(unsigned __int8 *)v12;
          if (!*v12)
            break;
          if (v18 == 9 || v18 == 32)
            goto LABEL_27;
          ++v12;
        }
        break;
      default:
        goto LABEL_93;
    }
  }
  v25 = 0;
  v26 = word_1ACCBB6DA;
  do
  {
    v28 = (unsigned __int16)*v26++;
    v27 = v28;
    v29 = v25 + (v28 >> 5);
    if (v29 >= 128)
      v30 = 128;
    else
      v30 = v29;
    if (v25 < v30)
    {
      memset((void *)(v7 + v25), *(unsigned __int8 *)(v7 + 160 + (v27 & 0x1F)), (v30 + ~v25) + 1);
      v25 = v30;
    }
  }
  while (v25 < 128);
  *(_BYTE *)v7 = 0;
  if (a3 < 1)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v31 = 0;
  while (2)
  {
    v32 = *(_BYTE **)(a2 + 8 * v31);
    if (!v32)
      goto LABEL_138;
    v33 = *(char **)(a2 + ((8 * v31) | 8));
    v34 = *(_BYTE **)(a2 + 8 * v31);
    v35 = "remove_diacritics";
    while (2)
    {
      v36 = *v34;
      v37 = *(unsigned __int8 *)v35;
      if ((_DWORD)v36 == (_DWORD)v37)
      {
        if (!*v34)
        {
          v49 = *v33 - 48;
          if (v49 <= 2 && !v33[1])
          {
            v8 = 0;
            *(_DWORD *)(v7 + 140) = v49;
            goto LABEL_134;
          }
LABEL_138:
          v8 = 1;
          goto LABEL_5;
        }
        goto LABEL_109;
      }
      if (byte_1ACCB6333[v36] == byte_1ACCB6333[v37])
      {
LABEL_109:
        ++v34;
        ++v35;
        continue;
      }
      break;
    }
    v38 = *(_BYTE **)(a2 + 8 * v31);
    for (j = "tokenchars"; ; ++j)
    {
      v40 = *v38;
      v41 = *(unsigned __int8 *)j;
      if ((_DWORD)v40 != (_DWORD)v41)
        break;
      if (!*v38)
      {
        v50 = v7;
        v51 = 1;
        goto LABEL_133;
      }
LABEL_114:
      ++v38;
    }
    if (byte_1ACCB6333[v40] == byte_1ACCB6333[v41])
      goto LABEL_114;
    v42 = *(_BYTE **)(a2 + 8 * v31);
    for (k = "separators"; ; ++k)
    {
      v44 = *v42;
      v45 = *(unsigned __int8 *)k;
      if ((_DWORD)v44 == (_DWORD)v45)
      {
        if (*v42)
          goto LABEL_119;
        v50 = v7;
        v51 = 0;
LABEL_133:
        v8 = sub_1ACC97354(v50, v33, v51);
        goto LABEL_134;
      }
      if (byte_1ACCB6333[v44] != byte_1ACCB6333[v45])
        break;
LABEL_119:
      ++v42;
    }
    for (m = "categories"; ; ++m)
    {
      v47 = *v32;
      v48 = *(unsigned __int8 *)m;
      if ((_DWORD)v47 == (_DWORD)v48)
        break;
      if (byte_1ACCB6333[v47] != byte_1ACCB6333[v48])
        goto LABEL_138;
LABEL_124:
      ++v32;
    }
    if (*v32)
      goto LABEL_124;
    v8 = 0;
LABEL_134:
    if (!(_DWORD)v8)
    {
      v31 += 2;
      if ((int)v31 < a3)
        continue;
    }
    break;
  }
  if ((_DWORD)v8)
    goto LABEL_5;
LABEL_6:
  *a4 = v7;
  return v8;
}

uint64_t sub_1ACC95B9C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  v2 = *(_QWORD *)(result + 152);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_8:
      (*v3)(v2);
      goto LABEL_9;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_8;
    }
  }
LABEL_9:
  v4 = *(_QWORD *)(v1 + 128);
  if (v4)
  {
    v5 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_16;
      v5 = &xmmword_1ECD3B1D0;
    }
    (*v5)(v4);
  }
LABEL_16:
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v6)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    return (*v6)(v1);
  }
  return result;
}

uint64_t sub_1ACC95D3C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, uint64_t (*a6)(uint64_t, _QWORD, char *, _QWORD, uint64_t, _QWORD))
{
  int v6;
  unsigned __int8 *v8;
  char *v9;
  unsigned __int16 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t);
  char v26;
  uint64_t result;
  unsigned int v28;
  char v29;
  uint64_t v30;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  int v54;
  unint64_t v55;

  v6 = (int)a4;
  v8 = &a4[a5];
  v9 = *(char **)(a1 + 128);
  v10 = word_1ACCBD5B6;
  v54 = *(_DWORD *)(a1 + 136);
  v55 = (unint64_t)&v9[v54 - 6];
  v11 = a4;
  do
  {
    if (v11 >= v8)
      return 0;
    while (1)
    {
      v15 = *v11;
      if (((char)*v11 & 0x80000000) == 0)
      {
        if (*(_BYTE *)(a1 + *v11))
        {
          v18 = ((_DWORD)v11 - v6);
          v19 = v9;
LABEL_50:
          if (v15 - 65 >= 0x1A)
            v26 = v15;
          else
            v26 = v15 + 32;
          *v19++ = v26;
          v12 = v11 + 1;
          goto LABEL_54;
        }
        v12 = v11 + 1;
        goto LABEL_15;
      }
      v12 = v11 + 1;
      if (v15 >= 0xC0)
      {
        v16 = byte_1ACCB6CF6[v15 - 192];
        if (v12 == v8)
        {
LABEL_4:
          v12 = v8;
        }
        else
        {
          while (1)
          {
            v17 = *v12;
            if ((*v12 & 0xC0) != 0x80)
              break;
            ++v12;
            v16 = v17 & 0x3F | (v16 << 6);
            if (v12 == v8)
              goto LABEL_4;
          }
        }
        if (v16 >> 11 == 27 || v16 < 0x80 || v16 >> 1 == 0x7FFF)
          v15 = 65533;
        else
          v15 = v16;
      }
      if (sub_1ACC97608(a1, v15))
        break;
LABEL_15:
      v11 = v12;
      if (v12 >= v8)
        return 0;
    }
    v18 = ((_DWORD)v11 - v6);
    v19 = v9;
    if ((int)v15 <= 127)
      goto LABEL_26;
LABEL_75:
    if (HIWORD(v15))
    {
      if (v15 - 66560 < 0x28)
        v15 += 40;
      goto LABEL_104;
    }
    while (1)
    {
      v33 = 0;
      v34 = *(_DWORD *)(a1 + 140);
      v35 = 162;
      v36 = -1;
      do
      {
        v37 = v35 + v33;
        if (v35 + v33 < 0 != __OFADD__(v35, v33))
          ++v37;
        v38 = v37 >> 1;
        v39 = *((unsigned __int16 *)&unk_1ACCBD290 + 2 * v38);
        if ((int)v15 >= v39)
          v33 = v38 + 1;
        else
          v35 = v38 - 1;
        if ((int)v15 >= v39)
          v36 = v38;
      }
      while (v35 >= v33);
      v40 = (unsigned __int16 *)((char *)&unk_1ACCBD290 + 4 * v36);
      v41 = *v40;
      if (*((unsigned __int8 *)v40 + 3) + v41 > (int)v15)
      {
        v42 = *((unsigned __int8 *)&unk_1ACCBD290 + 4 * v36 + 2);
        if (((v15 ^ v41) & v42 & 1) == 0)
          v15 = (unsigned __int16)(*(_WORD *)((char *)&unk_1ACCBD51C + (v42 & 0xFE)) + v15);
      }
      if (v34)
      {
        v43 = 0;
        v44 = 0;
        v45 = 125;
        v46 = (8 * v15) | 7;
        do
        {
          v47 = v45 + v43;
          if (v45 + v43 < 0 != __OFADD__(v45, v43))
            ++v47;
          v48 = v47 >> 1;
          v49 = v10[v48];
          if (v46 < v49)
            v45 = v48 - 1;
          else
            v44 = v48;
          if (v46 >= v49)
            v43 = v48 + 1;
        }
        while (v45 >= v43);
        if ((v34 == 2 || (byte_1ACCBD6B2[v44] & 0x80000000) == 0) && (v10[v44] & 7) + (v10[v44] >> 3) >= (int)v15)
          v15 = byte_1ACCBD6B2[v44] & 0x7F;
      }
LABEL_28:
      if (!v15)
      {
LABEL_54:
        if (v12 >= v8)
          goto LABEL_55;
        goto LABEL_37;
      }
      if (v15 <= 0x7F)
      {
        *v19++ = v15;
        if (v12 >= v8)
          goto LABEL_55;
        goto LABEL_37;
      }
      if (v15 <= 0x7FF)
      {
        *v19 = (v15 >> 6) | 0xC0;
        v19[1] = v15 & 0x3F | 0x80;
        v19 += 2;
        if (v12 >= v8)
          goto LABEL_55;
        goto LABEL_37;
      }
      if (!HIWORD(v15))
      {
        *v19 = (v15 >> 12) | 0xE0;
        v19[1] = (v15 >> 6) & 0x3F | 0x80;
        v19[2] = v15 & 0x3F | 0x80;
        v19 += 3;
        if (v12 >= v8)
          goto LABEL_55;
        goto LABEL_37;
      }
LABEL_104:
      *v19 = (v15 >> 18) & 7 | 0xF0;
      v19[1] = (v15 >> 12) & 0x3F | 0x80;
      v19[2] = (v15 >> 6) & 0x3F | 0x80;
      v19[3] = v15 & 0x3F | 0x80;
      v19 += 4;
      if (v12 >= v8)
        goto LABEL_55;
LABEL_37:
      if ((unint64_t)v19 > v55)
      {
        v20 = v10;
        v21 = v18;
        if (sqlite3_initialize())
          return 7;
        v22 = (char *)sub_1ACB5D828(2 * v54);
        if (!v22)
          return 7;
        v9 = v22;
        v23 = *(_BYTE **)(a1 + 128);
        v19 = &v22[v19 - v23];
        memcpy(v22, v23, v54);
        v24 = *(_QWORD *)(a1 + 128);
        if (v24)
        {
          v25 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_45;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v24);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v24);
          v24 = xmmword_1ECD3E930;
          v25 = &xmmword_1ECD3B1D0;
          if ((_QWORD)xmmword_1ECD3E930)
LABEL_45:
            (*v25)(v24);
        }
        *(_QWORD *)(a1 + 128) = v9;
        *(_DWORD *)(a1 + 136) = 2 * v54;
        v54 *= 2;
        v55 = (unint64_t)&v9[v54 - 6];
        v18 = v21;
        v10 = v20;
      }
      v15 = *v12;
      if (((char)*v12 & 0x80000000) == 0)
        break;
      v11 = v12 + 1;
      if (v15 < 0xC0)
      {
        v30 = v18;
      }
      else
      {
        v28 = byte_1ACCB6CF6[v15 - 192];
        if (v11 == v8)
        {
LABEL_62:
          v11 = v8;
        }
        else
        {
          while (1)
          {
            v29 = *v11;
            if ((*v11 & 0xC0) != 0x80)
              break;
            ++v11;
            v28 = v29 & 0x3F | (v28 << 6);
            if (v11 == v8)
              goto LABEL_62;
          }
        }
        v30 = v18;
        if (v28 >> 11 == 27 || v28 < 0x80 || v28 >> 1 == 0x7FFF)
          v15 = 65533;
        else
          v15 = v28;
      }
      if (sub_1ACC97608(a1, v15))
      {
        v12 = v11;
        v18 = v30;
        v10 = word_1ACCBD5B6;
        if ((int)v15 <= 127)
        {
LABEL_26:
          if (v15 - 65 < 0x1A)
            v15 += 32;
          goto LABEL_28;
        }
        goto LABEL_75;
      }
      v18 = v30;
      if (v15 - 818 < 0xFFFFFFCE)
      {
        v10 = word_1ACCBD5B6;
        goto LABEL_56;
      }
      if (v15 >= 0x320)
        v50 = -32;
      else
        v50 = 0;
      if (v15 >= 0x320)
        v51 = 221688;
      else
        v51 = 134389727;
      v10 = word_1ACCBD5B6;
      if (((v51 >> (v15 + v50)) & 1) == 0)
        goto LABEL_56;
      v12 = v11;
    }
    if (*(_BYTE *)(a1 + *v12))
    {
      v11 = v12;
      goto LABEL_50;
    }
LABEL_55:
    v11 = v12;
LABEL_56:
    LODWORD(result) = a6(a2, 0, v9, ((_DWORD)v19 - (_DWORD)v9), v18, ((_DWORD)v12 - v6));
  }
  while (!(_DWORD)result);
  if ((_DWORD)result == 101)
    return 0;
  else
    return result;
}

uint64_t sub_1ACC9630C(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t result;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  const char *i;
  uint64_t v21;
  uint64_t v22;
  const char *j;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t (**v32)(_QWORD);

  if ((a3 & 1) != 0)
    goto LABEL_36;
  if (sqlite3_initialize())
  {
    v7 = 0;
    result = 7;
  }
  else
  {
    v9 = (_OWORD *)sub_1ACB5D828(128);
    v7 = v9;
    if (v9)
    {
      v9[6] = 0u;
      v9[7] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      *v9 = 0u;
      v9[1] = 0u;
      v10 = xmmword_1EECACC08;
      v11 = unk_1EECACC18;
      v12 = unk_1EECACC38;
      v9[2] = xmmword_1EECACC28;
      v9[3] = v12;
      *v9 = v10;
      v9[1] = v11;
      v13 = xmmword_1EECACC48;
      v14 = unk_1EECACC58;
      v15 = unk_1EECACC78;
      v9[6] = xmmword_1EECACC68;
      v9[7] = v15;
      v9[4] = v13;
      v9[5] = v14;
      if (a3 < 1)
      {
LABEL_39:
        result = 0;
        goto LABEL_38;
      }
      v16 = 0;
LABEL_8:
      v17 = *(_BYTE **)(a2 + 8 * v16);
      if (v17)
      {
        v18 = *(_BYTE **)(a2 + ((8 * v16) | 8));
        v19 = *(_BYTE **)(a2 + 8 * v16);
        for (i = "tokenchars"; ; ++i)
        {
          v21 = *v19;
          v22 = *(unsigned __int8 *)i;
          if ((_DWORD)v21 == (_DWORD)v22)
          {
            if (!*v19)
            {
              v29 = *v18;
              if (*v18)
              {
                v30 = v18 + 1;
                do
                {
                  if ((v29 & 0x80) == 0)
                    *((_BYTE *)v7 + v29) = 1;
                  v31 = *v30++;
                  v29 = v31;
                }
                while (v31);
              }
LABEL_7:
              v16 += 2;
              if ((int)v16 >= a3)
                goto LABEL_39;
              goto LABEL_8;
            }
          }
          else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
          {
            for (j = "separators"; ; ++j)
            {
              v24 = *v17;
              v25 = *(unsigned __int8 *)j;
              if ((_DWORD)v24 == (_DWORD)v25)
              {
                if (!*v17)
                {
                  v26 = *v18;
                  if (*v18)
                  {
                    v27 = v18 + 1;
                    do
                    {
                      if ((v26 & 0x80) == 0)
                        *((_BYTE *)v7 + v26) = 0;
                      v28 = *v27++;
                      v26 = v28;
                    }
                    while (v28);
                  }
                  goto LABEL_7;
                }
              }
              else if (byte_1ACCB6333[v24] != byte_1ACCB6333[v25])
              {
                goto LABEL_30;
              }
              ++v17;
            }
          }
          ++v19;
        }
      }
LABEL_30:
      v32 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_35;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (_OWORD *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v32 = &xmmword_1ECD3B1D0;
LABEL_35:
        (*v32)(v7);
LABEL_36:
        v7 = 0;
      }
      result = 1;
    }
    else
    {
      result = 7;
    }
  }
LABEL_38:
  *a4 = v7;
  return result;
}

uint64_t sub_1ACC96538(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACC965EC(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, int a11, uint64_t (*a12)(uint64_t, _QWORD, int8x16_t *, _QWORD, uint64_t, uint64_t))
{
  int v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  int8x16_t v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (**v29)(int8x16_t *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int8 *v33;
  unsigned __int8 *v34;
  char v35;
  int v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  int8x16_t v43;
  uint64_t v44;
  int8x8_t *v45;
  int8x8_t *v46;
  uint64_t v47;
  int8x8_t v48;
  uint64_t (**v50)(int8x16_t *);
  uint64_t v51;
  int v52;
  _BYTE v55[64];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v52 = a11 - 1;
  if (a11 < 1)
    return 0;
  v15 = 0;
  v51 = a10 + 16;
  v16 = 64;
  v17 = a11;
  v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
  v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
  v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
  v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
  v20.i64[0] = 0x2020202020202020;
  v20.i64[1] = 0x2020202020202020;
  v21 = (int8x16_t *)v55;
  while (1)
  {
    v22 = v15;
    v23 = a11 <= v15 + 1 ? (v15 + 1) : a11;
    while ((*(char *)(a10 + v22) & 0x80000000) == 0 && !*(_BYTE *)(a1 + *(unsigned __int8 *)(a10 + v22)))
    {
      if (++v22 >= v17)
      {
        v22 = v23;
        break;
      }
    }
    if ((_DWORD)v22 == a11)
      break;
    v24 = (v22 + 1);
    v25 = v22;
    v26 = v24;
    if ((int)v24 < a11)
    {
      v26 = (int)v24;
      v25 = v22;
      do
      {
        if (*(char *)(a10 + v26) < 0)
        {
          v27 = v26;
        }
        else
        {
          v27 = v26;
          if (!*(_BYTE *)(a1 + *(unsigned __int8 *)(a10 + v26)))
            goto LABEL_19;
        }
        ++v26;
        v25 = v27;
      }
      while (v17 != v26);
      v25 = v52;
      v26 = v17;
    }
LABEL_19:
    v28 = (v26 - v22);
    if ((int)v28 <= v16)
      goto LABEL_31;
    if (v21 != (int8x16_t *)v55 && v21)
    {
      v29 = (void (**)(int8x16_t *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v21);
        v21 = (int8x16_t *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_28;
        v29 = (void (**)(int8x16_t *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))&xmmword_1ECD3B1D0;
      }
      (*v29)(v21, a3, a4, a5, a6, a7, a8, v18, v19);
    }
LABEL_28:
    if (sqlite3_initialize())
      return 7;
    v30 = sub_1ACB5D828(2 * (int)v28);
    if (!v30)
      return 7;
    v21 = (int8x16_t *)v30;
    v16 = 2 * v28;
    v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
    v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
    v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
    v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
    v20.i64[0] = 0x2020202020202020;
    v20.i64[1] = 0x2020202020202020;
LABEL_31:
    if ((int)v28 >= 1)
    {
      if (v28 < 8 || (unint64_t)v21 - a10 - (int)v22 < 0x20)
      {
        v31 = 0;
LABEL_35:
        v32 = v28 - v31;
        v33 = &v21->i8[v31];
        v34 = (unsigned __int8 *)(a10 + v31 + (int)v22);
        do
        {
          v36 = *v34++;
          v35 = v36;
          v37 = v36 + 32;
          if ((v36 - 65) < 0x1A)
            v35 = v37;
          *v33++ = v35;
          --v32;
        }
        while (v32);
        goto LABEL_39;
      }
      if (v28 >= 0x20)
      {
        v31 = v28 & 0x7FFFFFE0;
        v40 = (int8x16_t *)(v51 + (int)v22);
        v41 = v21 + 1;
        v42 = v28 & 0xFFFFFFE0;
        do
        {
          v43 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v19, (uint8x16_t)vaddq_s8(*v40, (int8x16_t)v18)), vaddq_s8(*v40, v20), *v40);
          v41[-1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v19, (uint8x16_t)vaddq_s8(v40[-1], (int8x16_t)v18)), vaddq_s8(v40[-1], v20), v40[-1]);
          *v41 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v31 == v28)
          goto LABEL_39;
        if ((((_BYTE)v26 - (_BYTE)v22) & 0x18) == 0)
          goto LABEL_35;
      }
      else
      {
        v31 = 0;
      }
      v44 = v31;
      v31 = v28 & 0xFFFFFFF8;
      v45 = (int8x8_t *)(a10 + v44 + (int)v22);
      v46 = (int8x8_t *)&v21->i8[v44];
      v47 = v44 - v31;
      do
      {
        v48 = *v45++;
        *v46++ = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v48, (int8x8_t)0xBFBFBFBFBFBFBFBFLL)), vadd_s8(v48, (int8x8_t)0x2020202020202020), v48);
        v47 += 8;
      }
      while (v47);
      if (v31 != v28)
        goto LABEL_35;
    }
LABEL_39:
    v38 = a12(a2, 0, v21, (v26 - v22), v22, v26);
    v39 = v38;
    v15 = v25 + 2;
    if (v25 + 2 < a11)
    {
      v18.n128_u64[0] = 0xBFBFBFBFBFBFBFBFLL;
      v18.n128_u64[1] = 0xBFBFBFBFBFBFBFBFLL;
      v19.n128_u64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v19.n128_u64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v20.i64[0] = 0x2020202020202020;
      v20.i64[1] = 0x2020202020202020;
      if (!v38)
        continue;
    }
    goto LABEL_54;
  }
  v39 = 0;
LABEL_54:
  if (v21 != (int8x16_t *)v55 && v21)
  {
    v50 = (uint64_t (**)(int8x16_t *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_61;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v21);
    v21 = (int8x16_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v50 = (uint64_t (**)(int8x16_t *))&xmmword_1ECD3B1D0;
LABEL_61:
      (*v50)(v21);
    }
  }
  if (v39 == 101)
    return 0;
  else
    return v39;
}

uint64_t sub_1ACC96A1C(uint64_t a1, const char **a2, int a3, void (***a4)(void))
{
  int v8;
  const char *v9;
  void (**v10)(void);
  uint64_t v11;
  void (**v13)(void);
  int v14;
  const char **v15;
  uint64_t (**v16)(void (**)(void));
  uint64_t v17;

  v17 = 0;
  v8 = a3 - 1;
  if (a3 < 1)
  {
    v9 = "unicode61";
    if (sqlite3_initialize())
      goto LABEL_3;
  }
  else
  {
    v9 = *a2;
    if (sqlite3_initialize())
    {
LABEL_3:
      v10 = 0;
LABEL_4:
      v11 = 7;
      goto LABEL_5;
    }
  }
  v13 = (void (**)(void))sub_1ACB5D828(160);
  v10 = v13;
  if (!v13)
    goto LABEL_4;
  *((_OWORD *)v13 + 8) = 0u;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v11 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *, void (**)(void)))(a1 + 16))(a1, v9, &v17, v13);
  if ((_DWORD)v11
    || (a3 <= 0 ? (v14 = 0) : (v14 = v8),
        v14 ? (v15 = a2 + 1) : (v15 = 0),
        v11 = ((uint64_t (*)(uint64_t, const char **))*v10)(v17, v15),
        (_DWORD)v11))
  {
    if (v10[3])
      v10[1]();
    v16 = (uint64_t (**)(void (**)(void)))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_23;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = (void (**)(void))xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v16 = (uint64_t (**)(void (**)(void)))&xmmword_1ECD3B1D0;
LABEL_23:
      (*v16)(v10);
      v10 = 0;
    }
  }
LABEL_5:
  *a4 = v10;
  return v11;
}

uint64_t sub_1ACC96BA8(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 24))
      (*(void (**)(void))(result + 8))();
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACC96C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[3];

  v7[0] = a2;
  v7[1] = a6;
  v7[2] = a1 + 32;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 16))(*(_QWORD *)(a1 + 24), v7, a3, a4, a5, sub_1ACC97714);
}

uint64_t sub_1ACC96CA4(int *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, uint64_t (*a6)(uint64_t, _QWORD, char *, _QWORD))
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 v17;
  int v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  BOOL v37;
  _BYTE *v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  signed int v45;
  unsigned __int16 *v46;
  int v47;
  int v48;
  char v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  char v63;
  char v64;
  char v65;
  char v66;
  _BYTE v67[36];

  *(_QWORD *)&v67[28] = *MEMORY[0x1E0C80C00];
  v9 = &a4[a5];
  v10 = a4;
  while (1)
  {
    v14 = *v10++;
    v13 = v14;
    v15 = v14 - 192;
    if (v14 >= 0xC0)
    {
      v16 = byte_1ACCB6CF6[v15];
      if (v10 == v9)
      {
LABEL_8:
        v10 = v9;
      }
      else
      {
        while (1)
        {
          v17 = *v10;
          if ((*v10 & 0xC0) != 0x80)
            break;
          ++v10;
          v16 = v17 & 0x3F | (v16 << 6);
          if (v10 == v9)
            goto LABEL_8;
        }
      }
      if (v16 >> 11 == 27 || v16 < 0x80 || v16 >> 1 == 0x7FFF)
        v13 = 65533;
      else
        v13 = v16;
    }
    if (!v13 || v10 >= v9)
      return 0;
    v21 = *a1;
    if (*a1)
    {
      if ((int)v13 > 127)
      {
        if (HIWORD(v13))
        {
          if (v13 - 66560 < 0x28)
            v13 += 40;
          goto LABEL_47;
        }
        v23 = 0;
        v24 = 162;
        v25 = -1;
        do
        {
          v26 = v24 + v23;
          if (v24 + v23 < 0 != __OFADD__(v24, v23))
            ++v26;
          v27 = v26 >> 1;
          v28 = *((unsigned __int16 *)&unk_1ACCBD290 + 2 * v27);
          if ((int)v13 >= v28)
            v23 = v27 + 1;
          else
            v24 = v27 - 1;
          if ((int)v13 >= v28)
            v25 = v27;
        }
        while (v24 >= v23);
        v29 = (unsigned __int16 *)((char *)&unk_1ACCBD290 + 4 * v25);
        v30 = *v29;
        if (*((unsigned __int8 *)v29 + 3) + v30 > (int)v13)
        {
          v31 = *((unsigned __int8 *)&unk_1ACCBD290 + 4 * v25 + 2);
          if (((v13 ^ v30) & v31 & 1) == 0)
            v13 = (unsigned __int16)(*(_WORD *)((char *)&unk_1ACCBD51C + (v31 & 0xFE)) + v13);
        }
      }
      else if (v13 - 65 < 0x1A)
      {
        v13 += 32;
      }
    }
    if (v13 <= 0x7F)
    {
      v63 = v13;
      v22 = &v64;
      goto LABEL_48;
    }
    if (v13 <= 0x7FF)
    {
      v63 = (v13 >> 6) | 0xC0;
      v64 = v13 & 0x3F | 0x80;
      v22 = &v65;
      goto LABEL_48;
    }
    if (!HIWORD(v13))
    {
      v63 = (v13 >> 12) | 0xE0;
      v64 = (v13 >> 6) & 0x3F | 0x80;
      v65 = v13 & 0x3F | 0x80;
      v22 = &v66;
      goto LABEL_48;
    }
LABEL_47:
    v63 = (v13 >> 18) & 7 | 0xF0;
    v64 = (v13 >> 12) & 0x3F | 0x80;
    v65 = (v13 >> 6) & 0x3F | 0x80;
    v66 = v13 & 0x3F | 0x80;
    v22 = v67;
LABEL_48:
    v33 = v10 + 1;
    v32 = *v10;
    if (v32 >= 0xC0)
    {
      v32 = byte_1ACCB6CF6[v32 - 192];
      if (v33 == v9)
      {
LABEL_52:
        v33 = v9;
      }
      else
      {
        while (1)
        {
          v34 = *v33;
          if ((*v33 & 0xC0) != 0x80)
            break;
          ++v33;
          v32 = v34 & 0x3F | (v32 << 6);
          if (v33 == v9)
            goto LABEL_52;
        }
      }
      if (v32 >> 11 == 27 || v32 < 0x80 || v32 >> 1 == 0x7FFF)
        v32 = 65533;
    }
    if (v32)
      v37 = v33 >= v9;
    else
      v37 = 1;
    if (v37)
      return 0;
    if (v21)
    {
      if ((int)v32 > 127)
      {
        if (HIWORD(v32))
        {
          if (v32 - 66560 < 0x28)
            v32 += 40;
          goto LABEL_90;
        }
        v40 = 0;
        v41 = 162;
        v42 = -1;
        do
        {
          v43 = v41 + v40;
          if (v41 + v40 < 0 != __OFADD__(v41, v40))
            ++v43;
          v44 = v43 >> 1;
          v45 = *((unsigned __int16 *)&unk_1ACCBD290 + 2 * v44);
          if ((int)v32 >= v45)
            v40 = v44 + 1;
          else
            v41 = v44 - 1;
          if ((int)v32 >= v45)
            v42 = v44;
        }
        while (v41 >= v40);
        v46 = (unsigned __int16 *)((char *)&unk_1ACCBD290 + 4 * v42);
        v47 = *v46;
        if (*((unsigned __int8 *)v46 + 3) + v47 > (int)v32)
        {
          v48 = *((unsigned __int8 *)&unk_1ACCBD290 + 4 * v42 + 2);
          if (((v32 ^ v47) & v48 & 1) == 0)
            v32 = (unsigned __int16)(*(_WORD *)((char *)&unk_1ACCBD51C + (v48 & 0xFE)) + v32);
        }
      }
      else if (v32 - 65 < 0x1A)
      {
        v32 += 32;
      }
    }
    if (v32 <= 0x7F)
    {
      *v22 = v32;
      v38 = v22 + 1;
      goto LABEL_91;
    }
    if (v32 <= 0x7FF)
    {
      *v22 = (v32 >> 6) | 0xC0;
      v39 = v32 & 0x3F | 0x80;
      v38 = v22 + 2;
      v22[1] = v39;
      goto LABEL_91;
    }
    if (!HIWORD(v32))
    {
      *v22 = (v32 >> 12) | 0xE0;
      v22[1] = (v32 >> 6) & 0x3F | 0x80;
      v49 = v32 & 0x3F | 0x80;
      v38 = v22 + 3;
      v22[2] = v49;
      goto LABEL_91;
    }
LABEL_90:
    *v22 = (v32 >> 18) & 7 | 0xF0;
    v22[1] = (v32 >> 12) & 0x3F | 0x80;
    v22[2] = (v32 >> 6) & 0x3F | 0x80;
    v50 = v32 & 0x3F | 0x80;
    v38 = v22 + 4;
    v22[3] = v50;
LABEL_91:
    v51 = *v33;
    if (v51 < 0xC0)
    {
      if (!*v33)
        return 0;
    }
    else
    {
      v52 = byte_1ACCB6CF6[v51 - 192];
      v53 = v33 + 1;
      if (v53 == v9)
      {
        v51 = byte_1ACCB6CF6[v51 - 192];
        if (v52 >> 1 == 0x7FFF)
          goto LABEL_110;
      }
      else
      {
        while ((*v53 & 0xC0) == 0x80)
        {
          v51 = *v53++ & 0x3F | (v52 << 6);
          v52 = v51;
          if (v53 == v9)
          {
            if (v51 >> 1 != 0x7FFF)
              goto LABEL_102;
            goto LABEL_110;
          }
        }
        v51 = v52;
        if (v52 >> 1 == 0x7FFF)
          goto LABEL_110;
      }
LABEL_102:
      if (v51 < 0x80 || (v51 & 0xFFFFF800) == 0xD800)
      {
LABEL_110:
        v51 = 65533;
        if (!v21)
          goto LABEL_128;
        goto LABEL_113;
      }
    }
    if (!v21)
      goto LABEL_124;
    if ((int)v51 <= 127)
    {
      if (v51 - 65 < 0x1A)
        v51 += 32;
      if (v51 <= 0x7F)
      {
LABEL_2:
        *v38 = v51;
        v11 = (_DWORD)v38 + 1;
        goto LABEL_3;
      }
      goto LABEL_125;
    }
    if (HIWORD(v51))
    {
      if (v51 - 66560 < 0x28)
        v51 += 40;
LABEL_131:
      *v38 = (v51 >> 18) & 7 | 0xF0;
      v38[1] = (v51 >> 12) & 0x3F | 0x80;
      v38[2] = (v51 >> 6) & 0x3F | 0x80;
      v11 = (_DWORD)v38 + 4;
      v38[3] = v51 & 0x3F | 0x80;
      goto LABEL_3;
    }
LABEL_113:
    v54 = 0;
    v55 = 162;
    v56 = -1;
    do
    {
      v57 = v55 + v54;
      if (v55 + v54 < 0 != __OFADD__(v55, v54))
        ++v57;
      v58 = v57 >> 1;
      v59 = *((unsigned __int16 *)&unk_1ACCBD290 + 2 * v58);
      if (v51 >= v59)
        v54 = v58 + 1;
      else
        v55 = v58 - 1;
      if (v51 >= v59)
        v56 = v58;
    }
    while (v55 >= v54);
    v60 = (unsigned __int16 *)((char *)&unk_1ACCBD290 + 4 * v56);
    v61 = *v60;
    if (*((unsigned __int8 *)v60 + 3) + v61 <= v51
      || (v62 = *((unsigned __int8 *)&unk_1ACCBD290 + 4 * v56 + 2), ((v51 ^ v61) & v62 & 1) != 0))
    {
LABEL_124:
      if (v51 <= 0x7F)
        goto LABEL_2;
      goto LABEL_125;
    }
    v51 = (unsigned __int16)(*(_WORD *)((char *)&unk_1ACCBD51C + (v62 & 0xFE)) + v51);
    if (v51 <= 0x7F)
      goto LABEL_2;
LABEL_125:
    if (v51 > 0x7FF)
    {
      if (HIWORD(v51))
        goto LABEL_131;
LABEL_128:
      *v38 = (v51 >> 12) | 0xE0;
      v38[1] = (v51 >> 6) & 0x3F | 0x80;
      v11 = (_DWORD)v38 + 3;
      v38[2] = v51 & 0x3F | 0x80;
      goto LABEL_3;
    }
    *v38 = (v51 >> 6) | 0xC0;
    v11 = (_DWORD)v38 + 2;
    v38[1] = v51 & 0x3F | 0x80;
LABEL_3:
    result = a6(a2, 0, &v63, v11 - &v63);
    if ((_DWORD)result)
      return result;
  }
}

uint64_t sub_1ACC97354(uint64_t a1, char *__s, int a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;

  v4 = __s;
  v6 = strlen(__s);
  if (v6 < 1)
    return 0;
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(_DWORD *)(a1 + 144);
  if (sqlite3_initialize())
    return 7;
  v10 = sub_1ACB6BB48(v7, 4 * (v8 + v6));
  if (!v10)
    return 7;
  v11 = v10;
  v12 = *(_DWORD *)(a1 + 144);
  v13 = &v4[v6];
  do
  {
    v15 = *v4++;
    v14 = v15;
    v16 = v15 - 192;
    if (v15 < 0xC0)
    {
      if ((v14 & 0x80) == 0)
      {
        *(_BYTE *)(a1 + v14) = a3;
        continue;
      }
    }
    else
    {
      v14 = byte_1ACCB6CF6[v16];
      if (v4 == v13)
      {
        v4 = v13;
        if (v14 >> 1 == 0x7FFF)
          goto LABEL_23;
      }
      else
      {
        while (1)
        {
          v17 = *v4;
          if ((*v4 & 0xC0) != 0x80)
            break;
          ++v4;
          v14 = v17 & 0x3F | (v14 << 6);
          if (v4 == v13)
          {
            v4 = v13;
            break;
          }
        }
        if (v14 >> 1 == 0x7FFF)
        {
LABEL_23:
          v14 = 65533;
          goto LABEL_24;
        }
      }
      if (v14 < 0x80 || (v14 & 0xFFFFF800) == 0xD800)
        goto LABEL_23;
      if (v14 >> 20)
        goto LABEL_38;
    }
LABEL_24:
    v18 = word_1ACCBC4A4[HIWORD(v14)];
    v19 = word_1ACCBC4A4[HIWORD(v14) + 1];
    if (v19 <= v18)
      goto LABEL_38;
    v20 = -1;
    do
    {
      v21 = (v19 + v18) >> 1;
      v22 = word_1ACCBC4C6[v21];
      if ((unsigned __int16)v14 < v22)
        v19 = (v19 + v18) >> 1;
      else
        v20 = (v19 + v18) >> 1;
      if ((unsigned __int16)v14 >= v22)
        v18 = v21 + 1;
    }
    while ((int)v19 > (int)v18);
    if ((v20 & 0x80000000) != 0
      || (v23 = v20,
          v24 = word_1ACCBC4C6[v23],
          v25 = (unsigned __int16)word_1ACCBB6DA[v23],
          (unsigned __int16)v14 >= v24 + (v25 >> 5)))
    {
LABEL_38:
      v26 = 0;
      goto LABEL_39;
    }
    v26 = v25 & 0x1F;
    if (v26 == 30)
    {
      if ((((_BYTE)v14 - (_BYTE)v24) & 1) != 0)
        v26 = 5;
      else
        v26 = 9;
    }
LABEL_39:
    if (*(unsigned __int8 *)(a1 + v26 + 160) != a3)
    {
      if (v14 - 818 < 0xFFFFFFCE
        || (v14 >= 0x320 ? (v27 = -32) : (v27 = 0),
            v14 >= 0x320 ? (v28 = 221688) : (v28 = 134389727),
            ((v28 >> (v14 + v27)) & 1) == 0))
      {
        if (v12 < 1)
        {
          LODWORD(v29) = 0;
        }
        else
        {
          v29 = 0;
          while (*(_DWORD *)(v11 + 4 * v29) <= v14)
          {
            if (v12 == ++v29)
            {
              LODWORD(v29) = v12;
              break;
            }
          }
        }
        v30 = (unsigned int *)(v11 + 4 * v29);
        memmove((void *)(v11 + 4 * (v29 + 1)), v30, 4 * (v12 - (int)v29));
        *v30 = v14;
        ++v12;
      }
    }
  }
  while (v4 < v13);
  result = 0;
  *(_QWORD *)(a1 + 152) = v11;
  *(_DWORD *)(a1 + 144) = v12;
  return result;
}

uint64_t sub_1ACC97608(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (a2 >> 20)
    goto LABEL_16;
  v2 = word_1ACCBC4A4[HIWORD(a2)];
  v3 = word_1ACCBC4A4[HIWORD(a2) + 1];
  if (v3 <= v2)
    goto LABEL_16;
  v4 = -1;
  do
  {
    v5 = (v3 + v2) >> 1;
    v6 = word_1ACCBC4C6[v5];
    if ((unsigned __int16)a2 < v6)
      v3 = (v3 + v2) >> 1;
    else
      v4 = (v3 + v2) >> 1;
    if ((unsigned __int16)a2 >= v6)
      v2 = v5 + 1;
  }
  while ((int)v3 > (int)v2);
  if ((v4 & 0x80000000) != 0
    || (v7 = v4,
        v8 = word_1ACCBC4C6[v7],
        v9 = (unsigned __int16)word_1ACCBB6DA[v7],
        (unsigned __int16)a2 >= v8 + (v9 >> 5)))
  {
LABEL_16:
    v10 = 0;
  }
  else
  {
    v10 = v9 & 0x1F;
    if (v10 == 30)
    {
      if ((((_BYTE)a2 - (_BYTE)v8) & 1) != 0)
        v10 = 5;
      else
        v10 = 9;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v10 + 160);
  v12 = *(_DWORD *)(a1 + 144);
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v14 < 0 != v13)
    return v11;
  v15 = 0;
  while (1)
  {
    v16 = v15 + v14;
    if (v15 + v14 < 0 != __OFADD__(v15, v14))
      ++v16;
    v17 = v16 >> 1;
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v17);
    if (v18 == a2)
      break;
    if (v18 >= (int)a2)
      v14 = v17 - 1;
    else
      v15 = v17 + 1;
    if (v14 < v15)
      return v11;
  }
  return v11 ^ 1;
}

uint64_t sub_1ACC97714(uint64_t *a1, uint64_t a2, void *__src, uint64_t __n, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t);
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v29;
  char v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v36;
  char *v37;
  char v38;
  unsigned int v39;
  int v40;
  uint64_t v42;
  unsigned int v44;
  char v45;
  int v46;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v53;
  char *v54;
  char v55;
  unsigned int v56;
  int v57;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  BOOL v69;
  _BYTE *v70;
  int v71;
  _BYTE *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned int v78;
  char v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v85;
  char *v86;
  char v87;
  unsigned int v88;
  int v89;
  uint64_t v91;
  unsigned int v92;
  char v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  uint64_t v99;
  char *v100;
  char v101;
  unsigned int v102;
  int v103;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v109;
  _BYTE *v110;
  BOOL v113;
  __int16 v114;
  uint64_t v115;
  unsigned int v117;
  char v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  uint64_t v124;
  char *v125;
  char v126;
  unsigned int v127;
  int v128;
  uint64_t v130;
  uint64_t v132;
  _BYTE *v133;
  BOOL v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v142;
  __int16 v143;
  uint64_t v144;
  _DWORD *v145;
  BOOL v146;
  uint64_t v147;
  _BYTE *v148;
  int v150;
  unsigned int v151;
  int v152;
  BOOL v153;
  int v154;
  char v155;
  unsigned __int8 *v156;
  uint64_t v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  unsigned __int8 v162;
  uint64_t v163;
  _BYTE *v164;
  unsigned int v166;
  char v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  uint64_t v173;
  char *v174;
  char v175;
  unsigned int v176;
  int v177;
  unsigned int v179;
  char v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  uint64_t v186;
  char *v187;
  char v188;
  unsigned int v189;
  int v190;
  unsigned int v192;
  char v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  uint64_t v199;
  char *v200;
  char v201;
  unsigned int v202;
  int v203;
  unsigned int v205;
  char v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  int v210;
  uint64_t v212;
  char *v213;
  char v214;
  unsigned int v215;
  int v216;
  uint64_t v218;
  int v219;
  unsigned int v220;
  int v221;
  BOOL v222;
  __int16 v223;
  __int16 v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  char v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  int v232;
  uint64_t v234;
  char *v235;
  char v236;
  unsigned int v237;
  int v238;
  unsigned int v240;
  char v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  int v245;
  uint64_t v247;
  char *v248;
  char v249;
  unsigned int v250;
  int v251;
  uint64_t v253;
  _BYTE *v254;
  BOOL v256;
  unsigned int v258;
  char v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  int v263;
  uint64_t v265;
  char *v266;
  char v267;
  unsigned int v268;
  int v269;
  unsigned int v272;
  char v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  uint64_t v279;
  char *v280;
  char v281;
  unsigned int v282;
  int v283;
  uint64_t v285;
  unsigned int v287;
  char v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  uint64_t v294;
  char *v295;
  char v296;
  unsigned int v297;
  int v298;
  unsigned int v300;
  char v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  int v305;
  uint64_t v307;
  char *v308;
  char v309;
  unsigned int v310;
  int v311;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int16 *v318;
  uint64_t v320;
  uint64_t v322;
  int v324;
  BOOL v325;
  int v326;
  unsigned __int16 *v327;
  int v329;
  int v330;
  BOOL v331;
  int v332;
  int v333;
  int v334;
  BOOL v335;
  uint64_t v336;
  int v338;
  char v339;
  unsigned __int8 *v340;
  uint64_t v341;
  BOOL v342;
  int v343;
  int v344;
  int v345;
  unsigned __int8 v346;
  int v347;
  uint64_t v349;
  int v350;
  unsigned int v351;
  int v352;
  BOOL v353;
  uint64_t v354;
  int v355;
  unsigned int v356;
  int v357;
  BOOL v358;
  uint64_t v359;
  int v360;
  unsigned int v361;
  int v362;
  BOOL v363;
  uint64_t v364;
  int v365;
  unsigned int v366;
  int v367;
  BOOL v368;
  uint64_t v369;
  int v370;
  unsigned int v371;
  int v372;
  BOOL v373;
  uint64_t v374;
  int v375;
  unsigned int v376;
  int v377;
  BOOL v378;
  uint64_t v379;
  int v380;
  unsigned int v381;
  int v382;
  BOOL v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  int v387;
  BOOL v388;
  uint64_t v389;
  int v390;
  unsigned int v391;
  int v392;
  BOOL v393;
  uint64_t v394;
  int v395;
  unsigned int v396;
  int v397;
  BOOL v398;
  uint64_t v399;
  int v400;
  unsigned int v401;
  int v402;
  BOOL v403;
  uint64_t v404;
  int v405;
  unsigned int v406;
  int v407;
  BOOL v408;
  uint64_t v409;
  int v410;
  unsigned int v411;
  int v412;
  BOOL v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  int v417;
  BOOL v418;

  v8 = __n;
  v9 = a2;
  if ((__n - 65) < 0xFFFFFFC2)
  {
    v11 = *a1;
    v12 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))a1[1];
    return v12(v11, a2, __src, v8, a5, a6);
  }
  v13 = (_BYTE *)a1[2];
  memcpy(v13, __src, __n);
  if (v13[(v8 - 1)] == 115)
  {
    v14 = (v8 - 2);
    v15 = v13[v14];
    if (v15 != 115)
    {
      if (v15 == 101)
      {
        if (v8 < 5)
        {
          if ((_DWORD)v8 != 4)
            goto LABEL_12;
        }
        else if (v13[(v8 - 4)] == 115 && v13[(v8 - 3)] == 115)
        {
          goto LABEL_13;
        }
        if (v13[(v8 - 3)] == 105)
        {
LABEL_13:
          v8 = v14;
          goto LABEL_14;
        }
      }
LABEL_12:
      v14 = (v8 - 1);
      goto LABEL_13;
    }
  }
LABEL_14:
  v16 = (v8 - 2);
  v17 = (char)v13[v16];
  if (v17 == 101)
  {
    if (v8 < 4)
    {
      if ((_DWORD)v8 != 3)
      {
        v8 = 2;
        goto LABEL_19;
      }
    }
    else
    {
      v42 = (v8 - 3);
      if (*(_WORD *)&v13[v42] == 25957 && v13[v42 + 2] == 100)
      {
        v44 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
        v45 = 1;
        v23 = v44 > 0xA;
        v46 = (1 << v44) & 0x495;
        if (v23 || v46 == 0)
        {
          v48 = 1;
          if ((_DWORD)v8 == 4)
          {
            v45 = 0;
          }
          else
          {
            v218 = 1;
            while (1)
            {
              v219 = v13[v218];
              v220 = (((v219 - 97) >> 1) | (((_BYTE)v219 - 97) << 7));
              v23 = v220 > 0xA;
              v221 = (1 << v220) & 0x495;
              v222 = v23 || v221 == 0;
              if (!v222 || v219 == 121)
                break;
              if (v42 == ++v218)
              {
                v45 = 0;
                v48 = v8 - 3;
                goto LABEL_65;
              }
            }
            v45 = 1;
            v48 = v218;
          }
        }
        else
        {
          v48 = 0;
        }
LABEL_65:
        if ((int)(v48 + 1) >= (int)v42)
          goto LABEL_19;
        v49 = v13[v48 + 1];
        v50 = (((v49 - 97) >> 1) | (((_BYTE)v49 - 97) << 7));
        v23 = v50 > 0xA;
        v51 = (1 << v50) & 0x495;
        if (!v23 && v51 != 0)
          goto LABEL_70;
        if (v49 != 121)
          v45 = 1;
        if ((v45 & 1) == 0)
        {
LABEL_70:
          v53 = v48 + 2;
          if ((int)v42 <= (int)v53)
            goto LABEL_19;
          v54 = &v13[v53];
          while (1)
          {
            v55 = *v54++;
            v56 = (((v55 - 97) >> 1) | ((v55 - 97) << 7));
            v23 = v56 > 0xA;
            v57 = (1 << v56) & 0x495;
            if (v23 || v57 == 0)
              break;
            LODWORD(v53) = v53 + 1;
            if ((int)v42 <= (int)v53)
              goto LABEL_19;
          }
        }
        *(_WORD *)&v13[v42] = 25957;
        v8 = (v8 - 1);
        goto LABEL_19;
      }
    }
    if (*(_WORD *)&v13[v16] != 25701)
      goto LABEL_19;
    v65 = 0;
    while (1)
    {
      v66 = v13[v65];
      v67 = (((v66 - 97) >> 1) | (((_BYTE)v66 - 97) << 7));
      v23 = v67 > 0xA;
      v68 = (1 << v67) & 0x495;
      v69 = v23 || v68 == 0;
      if (!v69 || v65 && v66 == 121)
        break;
      if (v16 == ++v65)
        goto LABEL_19;
    }
  }
  else
  {
    if (v17 != 110 || v8 < 4)
      goto LABEL_19;
    v16 = (v8 - 3);
    if (*(_WORD *)&v13[v16] != 28265 || v13[v16 + 2] != 103)
      goto LABEL_19;
    v60 = 0;
    while (1)
    {
      v61 = v13[v60];
      v62 = (((v61 - 97) >> 1) | (((_BYTE)v61 - 97) << 7));
      v23 = v62 > 0xA;
      v63 = (1 << v62) & 0x495;
      v64 = v23 || v63 == 0;
      if (!v64 || v60 && v61 == 121)
        break;
      if (v16 == ++v60)
        goto LABEL_19;
    }
  }
  v70 = &v13[(int)v16];
  v73 = (char)*(v70 - 2);
  v72 = v70 - 2;
  v71 = v73;
  if (v73 == 105)
  {
    if ((int)v16 >= 3 && *(_WORD *)v72 == 31337)
    {
      v74 = "ize";
      goto LABEL_367;
    }
  }
  else if (v71 == 98)
  {
    if ((int)v16 >= 3 && *(_WORD *)v72 == 27746)
    {
      v74 = "ble";
      goto LABEL_367;
    }
  }
  else if (v71 == 97 && (int)v16 >= 3 && *(_WORD *)v72 == 29793)
  {
    v74 = "ate";
LABEL_367:
    *(_WORD *)v72 = *(_WORD *)v74;
    v72[2] = v74[2];
    v8 = (v16 + 1);
    goto LABEL_19;
  }
  v8 = (int)v16 - 1;
  v150 = v13[v8];
  v151 = (((v150 - 97) >> 1) | (((_BYTE)v150 - 97) << 7));
  v23 = v151 > 0xA;
  v152 = (1 << v151) & 0x495;
  v153 = v23 || v152 == 0;
  if (!v153 || (v150 - 108) <= 0xE && ((1 << (v150 - 108)) & 0x4081) != 0 || v150 != v71)
  {
    if (!sub_1ACC999E0(v13, v16) || (int)v16 < 1 || (v150 - 122) > 0xFCu)
      goto LABEL_276;
    v154 = 0;
    v155 = 0;
    v156 = v13;
    v157 = v16;
    do
    {
      v161 = *v156++;
      v160 = v161;
      v162 = ((v161 - 97) >> 1) | (((_BYTE)v161 - 97) << 7);
      if (v162 < 0xBu && ((0x495u >> v162) & 1) != 0)
      {
        v159 = 1;
      }
      else
      {
        if (v154)
          v158 = v160 == 121;
        else
          v158 = 0;
        v159 = v158;
      }
      v154 = v159 ^ 1;
      v155 = v154 | (2 * v155);
      --v157;
    }
    while (v157);
    if ((v155 & 7) == 5)
    {
      v8 = (v16 + 1);
      v13[(int)v16] = 101;
    }
    else
    {
LABEL_276:
      v8 = v16;
    }
  }
LABEL_19:
  v19 = (int)v8 - 1;
  if ((int)v8 > 1 && v13[v19] == 121)
  {
    v20 = 0;
    while (1)
    {
      v21 = v13[v20];
      v22 = (((v21 - 97) >> 1) | (((_BYTE)v21 - 97) << 7));
      v23 = v22 > 0xA;
      v24 = (1 << v22) & 0x495;
      v25 = v23 || v24 == 0;
      if (!v25 || v20 && v21 == 121)
        break;
      if (v19 == ++v20)
        goto LABEL_31;
    }
    v13[v19] = 105;
  }
LABEL_31:
  switch(v13[(int)v8 - 2])
  {
    case 'a':
      if ((int)v8 < 8)
      {
        if ((_DWORD)v8 != 7)
          goto LABEL_439;
        goto LABEL_236;
      }
      v26 = (v8 - 7);
      v27 = &v13[v26];
      if (*(_DWORD *)&v13[v26] != 1869182049 || *(_DWORD *)&v13[v26 + 3] != 1818324591)
      {
LABEL_236:
        v144 = (v8 - 6);
        v145 = &v13[v144];
        v146 = *(_DWORD *)&v13[v144] == 1852795252 && *(_WORD *)&v13[v144 + 4] == 27745;
        if (v146 && sub_1ACC99FDC(v13, v144))
        {
          *v145 = 1852795252;
          v8 = (int)v8 - 2;
        }
        goto LABEL_439;
      }
      v29 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v29 <= 0xA && (v30 = 1, ((1 << v29) & 0x495) != 0))
      {
        v31 = 0;
      }
      else
      {
        v31 = 1;
        if ((_DWORD)v8 == 8)
        {
          v30 = 0;
        }
        else
        {
          v379 = 1;
          while (1)
          {
            v380 = v13[v379];
            v381 = (((v380 - 97) >> 1) | (((_BYTE)v380 - 97) << 7));
            v23 = v381 > 0xA;
            v382 = (1 << v381) & 0x495;
            v383 = v23 || v382 == 0;
            if (!v383 || v380 == 121)
              break;
            if (v26 == ++v379)
            {
              v30 = 0;
              v31 = v8 - 7;
              goto LABEL_41;
            }
          }
          v30 = 1;
          v31 = v379;
        }
      }
LABEL_41:
      if ((int)(v31 + 1) < (int)v26)
      {
        v32 = v13[v31 + 1];
        v33 = (((v32 - 97) >> 1) | (((_BYTE)v32 - 97) << 7));
        v23 = v33 > 0xA;
        v34 = (1 << v33) & 0x495;
        if (!v23 && v34 != 0)
          goto LABEL_46;
        if (v32 != 121)
          v30 = 1;
        if ((v30 & 1) == 0)
        {
LABEL_46:
          v36 = v31 + 2;
          if ((int)v26 <= (int)v36)
            goto LABEL_439;
          v37 = &v13[v36];
          while (1)
          {
            v38 = *v37++;
            v39 = (((v38 - 97) >> 1) | ((v38 - 97) << 7));
            v23 = v39 > 0xA;
            v40 = (1 << v39) & 0x495;
            if (v23 || v40 == 0)
              break;
            LODWORD(v36) = v36 + 1;
            if ((int)v26 <= (int)v36)
              goto LABEL_439;
          }
        }
        v27[2] = 101;
        v223 = 29793;
        goto LABEL_420;
      }
      goto LABEL_439;
    case 'c':
      if ((int)v8 < 5)
        goto LABEL_439;
      v75 = (v8 - 4);
      if (*(_DWORD *)&v13[v75] != 1768124005)
      {
        if (*(_DWORD *)&v13[v75] == 1768124001 && sub_1ACC99FDC(v13, (int)v8 - 4))
          *(_DWORD *)&v13[v75] = 1701015137;
        goto LABEL_439;
      }
      v166 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v166 <= 0xA)
      {
        v167 = 1;
        if (((1 << v166) & 0x495) != 0)
        {
          v168 = 0;
          goto LABEL_291;
        }
      }
      v168 = 1;
      if ((_DWORD)v8 == 5)
      {
        v167 = 0;
        goto LABEL_291;
      }
      v399 = 1;
      while (1)
      {
        v400 = v13[v399];
        v401 = (((v400 - 97) >> 1) | (((_BYTE)v400 - 97) << 7));
        v23 = v401 > 0xA;
        v402 = (1 << v401) & 0x495;
        v403 = v23 || v402 == 0;
        if (!v403 || v400 == 121)
          break;
        if (v75 == ++v399)
        {
          v167 = 0;
          v168 = v8 - 4;
          goto LABEL_291;
        }
      }
      v167 = 1;
      v168 = v399;
LABEL_291:
      if ((int)(v168 + 1) >= (int)v75)
        goto LABEL_439;
      v169 = v13[v168 + 1];
      v170 = (((v169 - 97) >> 1) | (((_BYTE)v169 - 97) << 7));
      v23 = v170 > 0xA;
      v171 = (1 << v170) & 0x495;
      if (!v23 && v171 != 0)
        goto LABEL_296;
      if (v169 != 121)
        v167 = 1;
      if ((v167 & 1) == 0)
      {
LABEL_296:
        v173 = v168 + 2;
        if ((int)v75 <= (int)v173)
          goto LABEL_439;
        v174 = &v13[v173];
        while (1)
        {
          v175 = *v174++;
          v176 = (((v175 - 97) >> 1) | ((v175 - 97) << 7));
          v23 = v176 > 0xA;
          v177 = (1 << v176) & 0x495;
          if (v23 || v177 == 0)
            break;
          LODWORD(v173) = v173 + 1;
          if ((int)v75 <= (int)v173)
            goto LABEL_439;
        }
      }
      *(_DWORD *)&v13[v75] = 1701015141;
      goto LABEL_439;
    case 'e':
      if ((int)v8 < 5)
        goto LABEL_439;
      v76 = (v8 - 4);
      v77 = &v13[v76];
      if (*(_DWORD *)&v13[v76] != 1919253097)
        goto LABEL_439;
      v78 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v78 <= 0xA)
      {
        v79 = 1;
        if (((1 << v78) & 0x495) != 0)
        {
          v80 = 0;
          goto LABEL_120;
        }
      }
      v80 = 1;
      if ((_DWORD)v8 == 5)
      {
        v79 = 0;
        goto LABEL_120;
      }
      v384 = 1;
      while (1)
      {
        v385 = v13[v384];
        v386 = (((v385 - 97) >> 1) | (((_BYTE)v385 - 97) << 7));
        v23 = v386 > 0xA;
        v387 = (1 << v386) & 0x495;
        v388 = v23 || v387 == 0;
        if (!v388 || v385 == 121)
          break;
        if (v76 == ++v384)
        {
          v79 = 0;
          v80 = v8 - 4;
          goto LABEL_120;
        }
      }
      v79 = 1;
      v80 = v384;
LABEL_120:
      if ((int)(v80 + 1) >= (int)v76)
        goto LABEL_439;
      v81 = v13[v80 + 1];
      v82 = (((v81 - 97) >> 1) | (((_BYTE)v81 - 97) << 7));
      v23 = v82 > 0xA;
      v83 = (1 << v82) & 0x495;
      if (v23 || v83 == 0)
      {
        if (v81 != 121)
          v79 = 1;
        if ((v79 & 1) != 0)
          goto LABEL_410;
      }
      v85 = v80 + 2;
      if ((int)v76 <= (int)v85)
        goto LABEL_439;
      v86 = &v13[v85];
      while (1)
      {
        v87 = *v86++;
        v88 = (((v87 - 97) >> 1) | ((v87 - 97) << 7));
        v23 = v88 > 0xA;
        v89 = (1 << v88) & 0x495;
        if (v23 || v89 == 0)
          break;
        LODWORD(v85) = v85 + 1;
        if ((int)v76 <= (int)v85)
          goto LABEL_439;
      }
LABEL_410:
      v77[2] = 101;
      v224 = 31337;
      goto LABEL_415;
    case 'g':
      if ((int)v8 < 5)
        goto LABEL_439;
      v91 = (v8 - 4);
      v77 = &v13[v91];
      if (*(_DWORD *)&v13[v91] != 1768386412)
        goto LABEL_439;
      v92 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v92 <= 0xA)
      {
        v93 = 1;
        if (((1 << v92) & 0x495) != 0)
        {
          v94 = 0;
          goto LABEL_138;
        }
      }
      v94 = 1;
      if ((_DWORD)v8 == 5)
      {
        v93 = 0;
        goto LABEL_138;
      }
      v389 = 1;
      while (1)
      {
        v390 = v13[v389];
        v391 = (((v390 - 97) >> 1) | (((_BYTE)v390 - 97) << 7));
        v23 = v391 > 0xA;
        v392 = (1 << v391) & 0x495;
        v393 = v23 || v392 == 0;
        if (!v393 || v390 == 121)
          break;
        if (v91 == ++v389)
        {
          v93 = 0;
          v94 = v8 - 4;
          goto LABEL_138;
        }
      }
      v93 = 1;
      v94 = v389;
LABEL_138:
      if ((int)(v94 + 1) >= (int)v91)
        goto LABEL_439;
      v95 = v13[v94 + 1];
      v96 = (((v95 - 97) >> 1) | (((_BYTE)v95 - 97) << 7));
      v23 = v96 > 0xA;
      v97 = (1 << v96) & 0x495;
      if (v23 || v97 == 0)
      {
        if (v95 != 121)
          v93 = 1;
        if ((v93 & 1) != 0)
          goto LABEL_414;
      }
      v99 = v94 + 2;
      if ((int)v91 > (int)v99)
      {
        v100 = &v13[v99];
        while (1)
        {
          v101 = *v100++;
          v102 = (((v101 - 97) >> 1) | ((v101 - 97) << 7));
          v23 = v102 > 0xA;
          v103 = (1 << v102) & 0x495;
          if (v23 || v103 == 0)
            break;
          LODWORD(v99) = v99 + 1;
          if ((int)v91 <= (int)v99)
            goto LABEL_439;
        }
LABEL_414:
        v77[2] = 103;
        v224 = 28524;
LABEL_415:
        *(_WORD *)v77 = v224;
        v8 = (int)v8 - 1;
      }
      goto LABEL_439;
    case 'l':
      v105 = (v8 - 4);
      if ((int)v8 < 4)
        goto LABEL_439;
      v106 = (v8 - 3);
      v107 = &v13[v106];
      if (*(_WORD *)&v13[v106] != 27746 || v13[v106 + 2] != 105)
      {
        v109 = (v8 - 5);
        if (v8 < 5)
          goto LABEL_281;
        if (*(_DWORD *)&v13[v105] == 1768713313)
        {
          if (sub_1ACC99FDC(v13, (int)v8 - 4))
          {
            *(_WORD *)&v13[v105] = 27745;
            v8 = (int)v8 - 2;
          }
          goto LABEL_439;
        }
        if (v8 < 6)
        {
LABEL_281:
          if (*(_WORD *)v107 != 27749 || v107[2] != 105)
            goto LABEL_439;
          goto LABEL_286;
        }
        v110 = &v13[v109];
        if (*(_DWORD *)&v13[v109] != 1819569765 || v13[v109 + 4] != 105)
        {
          if (*(_WORD *)v107 != 27749 || v107[2] != 105)
          {
            v113 = *(_DWORD *)v110 == 1819506031 && v110[4] == 105;
            if (v113 && sub_1ACC99FDC(v13, (int)v8 - 5))
            {
              v110[2] = 115;
              v114 = 30063;
              goto LABEL_358;
            }
            goto LABEL_439;
          }
LABEL_286:
          if (sub_1ACC99FDC(v13, v106))
          {
            *v107 = 101;
            v8 = (int)v8 - 2;
          }
          goto LABEL_439;
        }
        if (!sub_1ACC99FDC(v13, (int)v8 - 5))
          goto LABEL_439;
        v110[2] = 116;
        v114 = 28261;
LABEL_358:
        *(_WORD *)v110 = v114;
        v8 = (int)v8 - 2;
        goto LABEL_439;
      }
      v179 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v179 <= 0xA && (v180 = 1, ((1 << v179) & 0x495) != 0))
      {
        v181 = 0;
      }
      else
      {
        v181 = 1;
        if ((_DWORD)v8 == 4)
        {
          v180 = 0;
        }
        else
        {
          v404 = 1;
          while (1)
          {
            v405 = v13[v404];
            v406 = (((v405 - 97) >> 1) | (((_BYTE)v405 - 97) << 7));
            v23 = v406 > 0xA;
            v407 = (1 << v406) & 0x495;
            v408 = v23 || v407 == 0;
            if (!v408 || v405 == 121)
              break;
            if (v106 == ++v404)
            {
              v180 = 0;
              v181 = v8 - 3;
              goto LABEL_307;
            }
          }
          v180 = 1;
          v181 = v404;
        }
      }
LABEL_307:
      if ((int)(v181 + 1) >= (int)v106)
        goto LABEL_439;
      v182 = v13[v181 + 1];
      v183 = (((v182 - 97) >> 1) | (((_BYTE)v182 - 97) << 7));
      v23 = v183 > 0xA;
      v184 = (1 << v183) & 0x495;
      if (!v23 && v184 != 0)
        goto LABEL_312;
      if (v182 != 121)
        v180 = 1;
      if ((v180 & 1) == 0)
      {
LABEL_312:
        v186 = v181 + 2;
        if ((int)v106 <= (int)v186)
          goto LABEL_439;
        v187 = &v13[v186];
        while (1)
        {
          v188 = *v187++;
          v189 = (((v188 - 97) >> 1) | ((v188 - 97) << 7));
          v23 = v189 > 0xA;
          v190 = (1 << v189) & 0x495;
          if (v23 || v190 == 0)
            break;
          LODWORD(v186) = v186 + 1;
          if ((int)v106 <= (int)v186)
            goto LABEL_439;
        }
      }
      v107[2] = 101;
      *(_WORD *)v107 = 27746;
      goto LABEL_439;
    case 'o':
      if ((int)v8 < 8)
      {
        if ((int)v8 < 6)
        {
          if ((_DWORD)v8 != 5)
            goto LABEL_439;
          goto LABEL_278;
        }
LABEL_244:
        v147 = (v8 - 5);
        v148 = &v13[v147];
        if (*(_DWORD *)&v13[v147] == 1869182049 && v13[v147 + 4] == 110)
        {
          if (sub_1ACC99FDC(v13, v147))
          {
            v148[2] = 101;
            *(_WORD *)v148 = 29793;
            v8 = (int)v8 - 2;
          }
          goto LABEL_439;
        }
LABEL_278:
        v163 = (v8 - 4);
        v164 = &v13[v163];
        if (*(_DWORD *)&v13[v163] == 1919906913 && sub_1ACC99FDC(v13, v163))
        {
          v164[2] = 101;
          *(_WORD *)v164 = 29793;
          v8 = (int)v8 - 1;
        }
        goto LABEL_439;
      }
      v115 = (v8 - 7);
      v27 = &v13[v115];
      if (*(_DWORD *)&v13[v115] != 1952545385 || *(_DWORD *)&v13[v115 + 3] != 1852795252)
        goto LABEL_244;
      v117 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v117 <= 0xA && (v118 = 1, ((1 << v117) & 0x495) != 0))
      {
        v119 = 0;
      }
      else
      {
        v119 = 1;
        if ((_DWORD)v8 == 8)
        {
          v118 = 0;
        }
        else
        {
          v394 = 1;
          while (1)
          {
            v395 = v13[v394];
            v396 = (((v395 - 97) >> 1) | (((_BYTE)v395 - 97) << 7));
            v23 = v396 > 0xA;
            v397 = (1 << v396) & 0x495;
            v398 = v23 || v397 == 0;
            if (!v398 || v395 == 121)
              break;
            if (v115 == ++v394)
            {
              v118 = 0;
              v119 = v8 - 7;
              goto LABEL_183;
            }
          }
          v118 = 1;
          v119 = v394;
        }
      }
LABEL_183:
      if ((int)(v119 + 1) >= (int)v115)
        goto LABEL_439;
      v120 = v13[v119 + 1];
      v121 = (((v120 - 97) >> 1) | (((_BYTE)v120 - 97) << 7));
      v23 = v121 > 0xA;
      v122 = (1 << v121) & 0x495;
      if (!v23 && v122 != 0)
        goto LABEL_188;
      if (v120 != 121)
        v118 = 1;
      if ((v118 & 1) == 0)
      {
LABEL_188:
        v124 = v119 + 2;
        if ((int)v115 <= (int)v124)
          goto LABEL_439;
        v125 = &v13[v124];
        while (1)
        {
          v126 = *v125++;
          v127 = (((v126 - 97) >> 1) | ((v126 - 97) << 7));
          v23 = v127 > 0xA;
          v128 = (1 << v127) & 0x495;
          if (v23 || v128 == 0)
            break;
          LODWORD(v124) = v124 + 1;
          if ((int)v115 <= (int)v124)
            goto LABEL_439;
        }
      }
      v27[2] = 101;
      v223 = 31337;
LABEL_420:
      *(_WORD *)v27 = v223;
      v8 = (v8 - 4);
      goto LABEL_439;
    case 's':
      if ((int)v8 < 6)
        goto LABEL_439;
      v130 = (v8 - 5);
      if (*(_DWORD *)&v13[v130] != 1936288865 || v13[v130 + 4] != 109)
      {
        if (v8 < 8)
          goto LABEL_439;
        v132 = (v8 - 7);
        v133 = &v13[v132];
        if (*(_DWORD *)&v13[v132] == 1852143209 && *(_DWORD *)&v13[v132 + 3] == 1936942446)
        {
          if (!sub_1ACC99FDC(v13, v132))
            goto LABEL_439;
          v133[2] = 101;
          v137 = 30313;
        }
        else if (*(_DWORD *)v133 == 1852601702 && *(_DWORD *)(v133 + 3) == 1936942446)
        {
          if (!sub_1ACC99FDC(v13, v132))
            goto LABEL_439;
          v133[2] = 108;
          v137 = 30054;
        }
        else
        {
          v136 = *(_DWORD *)v133 == 1853060463 && *(_DWORD *)(v133 + 3) == 1936942446;
          if (!v136 || !sub_1ACC99FDC(v13, v132))
            goto LABEL_439;
          v133[2] = 115;
          v137 = 30063;
        }
        *(_WORD *)v133 = v137;
        v8 = (v8 - 4);
        goto LABEL_439;
      }
      v192 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
      if (v192 <= 0xA && (v193 = 1, ((1 << v192) & 0x495) != 0))
      {
        v194 = 0;
      }
      else
      {
        v194 = 1;
        if ((_DWORD)v8 == 6)
        {
          v193 = 0;
        }
        else
        {
          v409 = 1;
          while (1)
          {
            v410 = v13[v409];
            v411 = (((v410 - 97) >> 1) | (((_BYTE)v410 - 97) << 7));
            v23 = v411 > 0xA;
            v412 = (1 << v411) & 0x495;
            v413 = v23 || v412 == 0;
            if (!v413 || v410 == 121)
              break;
            if (v130 == ++v409)
            {
              v193 = 0;
              v194 = v8 - 5;
              goto LABEL_323;
            }
          }
          v193 = 1;
          v194 = v409;
        }
      }
LABEL_323:
      if ((int)(v194 + 1) >= (int)v130)
        goto LABEL_439;
      v195 = v13[v194 + 1];
      v196 = (((v195 - 97) >> 1) | (((_BYTE)v195 - 97) << 7));
      v23 = v196 > 0xA;
      v197 = (1 << v196) & 0x495;
      if (!v23 && v197 != 0)
        goto LABEL_328;
      if (v195 != 121)
        v193 = 1;
      if ((v193 & 1) == 0)
      {
LABEL_328:
        v199 = v194 + 2;
        if ((int)v130 <= (int)v199)
          goto LABEL_439;
        v200 = &v13[v199];
        while (1)
        {
          v201 = *v200++;
          v202 = (((v201 - 97) >> 1) | ((v201 - 97) << 7));
          v23 = v202 > 0xA;
          v203 = (1 << v202) & 0x495;
          if (v23 || v203 == 0)
            break;
          LODWORD(v199) = v199 + 1;
          if ((int)v130 <= (int)v199)
            goto LABEL_439;
        }
      }
      *(_WORD *)&v13[v130] = 27745;
LABEL_438:
      v8 = (v8 - 3);
      goto LABEL_439;
    case 't':
      v138 = (v8 - 6);
      if ((int)v8 < 6)
        goto LABEL_439;
      v139 = (v8 - 5);
      v110 = &v13[v139];
      if (*(_DWORD *)&v13[v139] == 1953066081 && v13[v139 + 4] == 105)
      {
        v205 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
        if (v205 <= 0xA)
        {
          v206 = 1;
          if (((1 << v205) & 0x495) != 0)
          {
            v207 = 0;
            goto LABEL_339;
          }
        }
        v207 = 1;
        if ((_DWORD)v8 == 6)
        {
          v206 = 0;
          goto LABEL_339;
        }
        v414 = 1;
        while (1)
        {
          v415 = v13[v414];
          v416 = (((v415 - 97) >> 1) | (((_BYTE)v415 - 97) << 7));
          v23 = v416 > 0xA;
          v417 = (1 << v416) & 0x495;
          v418 = v23 || v417 == 0;
          if (!v418 || v415 == 121)
            break;
          if (v139 == ++v414)
          {
            v206 = 0;
            v207 = v8 - 5;
            goto LABEL_339;
          }
        }
        v206 = 1;
        v207 = v414;
LABEL_339:
        if ((int)(v207 + 1) >= (int)v139)
          goto LABEL_439;
        v208 = v13[v207 + 1];
        v209 = (((v208 - 97) >> 1) | (((_BYTE)v208 - 97) << 7));
        v23 = v209 > 0xA;
        v210 = (1 << v209) & 0x495;
        if (!v23 && v210 != 0)
          goto LABEL_344;
        if (v208 != 121)
          v206 = 1;
        if ((v206 & 1) == 0)
        {
LABEL_344:
          v212 = v207 + 2;
          if ((int)v139 <= (int)v212)
            goto LABEL_439;
          v213 = &v13[v212];
          while (1)
          {
            v214 = *v213++;
            v215 = (((v214 - 97) >> 1) | ((v214 - 97) << 7));
            v23 = v215 > 0xA;
            v216 = (1 << v215) & 0x495;
            if (v23 || v216 == 0)
              break;
            LODWORD(v212) = v212 + 1;
            if ((int)v139 <= (int)v212)
              goto LABEL_439;
          }
        }
        v143 = 27745;
LABEL_437:
        *(_WORD *)v110 = v143;
        goto LABEL_438;
      }
      if (*(_DWORD *)v110 == 1953068649 && v110[4] == 105)
      {
        if (!sub_1ACC99FDC(v13, v139))
          goto LABEL_439;
        v110[2] = 101;
        v114 = 30313;
        goto LABEL_358;
      }
      if (v8 < 7)
      {
        v8 = 6;
        goto LABEL_439;
      }
      v110 = &v13[v138];
      v142 = *(_DWORD *)&v13[v138] == 1768712546 && *(_WORD *)&v13[v138 + 4] == 26996;
      if (v142 && sub_1ACC99FDC(v13, (int)v8 - 6))
      {
        v110[2] = 101;
        v143 = 27746;
        goto LABEL_437;
      }
LABEL_439:
      v225 = (int)v8 - 2;
      switch(v13[v225])
      {
        case 'a':
          if ((int)v8 < 5)
            break;
          v226 = (v8 - 4);
          if (*(_DWORD *)&v13[v226] != 1818321769)
            break;
          v227 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v227 <= 0xA)
          {
            v228 = 1;
            if (((1 << v227) & 0x495) != 0)
            {
              v229 = 0;
              goto LABEL_445;
            }
          }
          v229 = 1;
          if ((_DWORD)v8 == 5)
          {
            v228 = 0;
            goto LABEL_445;
          }
          v349 = 1;
          while (1)
          {
            v350 = v13[v349];
            v351 = (((v350 - 97) >> 1) | (((_BYTE)v350 - 97) << 7));
            v23 = v351 > 0xA;
            v352 = (1 << v351) & 0x495;
            v353 = v23 || v352 == 0;
            if (!v353 || v350 == 121)
              break;
            if (v226 == ++v349)
            {
              v228 = 0;
              v229 = v8 - 4;
              goto LABEL_445;
            }
          }
          v228 = 1;
          v229 = v349;
LABEL_445:
          if ((int)(v229 + 1) >= (int)v226)
            break;
          v230 = v13[v229 + 1];
          v231 = (((v230 - 97) >> 1) | (((_BYTE)v230 - 97) << 7));
          v23 = v231 > 0xA;
          v232 = (1 << v231) & 0x495;
          if (v23 || v232 == 0)
          {
            if (v230 != 121)
              v228 = 1;
            if ((v228 & 1) != 0)
              goto LABEL_586;
          }
          v234 = v229 + 2;
          if ((int)v226 > (int)v234)
          {
            v235 = &v13[v234];
            while (1)
            {
              v236 = *v235++;
              v237 = (((v236 - 97) >> 1) | ((v236 - 97) << 7));
              v23 = v237 > 0xA;
              v238 = (1 << v237) & 0x495;
              if (v23 || v238 == 0)
                break;
              LODWORD(v234) = v234 + 1;
              if ((int)v226 <= (int)v234)
                goto LABEL_599;
            }
LABEL_586:
            *(_WORD *)&v13[v226] = 25449;
            goto LABEL_598;
          }
          break;
        case 's':
          if ((int)v8 < 5)
            break;
          v225 = (v8 - 4);
          if (*(_DWORD *)&v13[v225] != 1936942446)
            break;
          v240 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v240 <= 0xA)
          {
            v241 = 1;
            if (((1 << v240) & 0x495) != 0)
            {
              v242 = 0;
              goto LABEL_463;
            }
          }
          v242 = 1;
          if ((_DWORD)v8 == 5)
          {
            v241 = 0;
            goto LABEL_463;
          }
          v354 = 1;
          while (1)
          {
            v355 = v13[v354];
            v356 = (((v355 - 97) >> 1) | (((_BYTE)v355 - 97) << 7));
            v23 = v356 > 0xA;
            v357 = (1 << v356) & 0x495;
            v358 = v23 || v357 == 0;
            if (!v358 || v355 == 121)
              break;
            if (v225 == ++v354)
            {
              v241 = 0;
              v242 = v8 - 4;
              goto LABEL_463;
            }
          }
          v241 = 1;
          v242 = v354;
LABEL_463:
          if ((int)(v242 + 1) >= (int)v225)
            break;
          v243 = v13[v242 + 1];
          v244 = (((v243 - 97) >> 1) | (((_BYTE)v243 - 97) << 7));
          v23 = v244 > 0xA;
          v245 = (1 << v244) & 0x495;
          if (v23 || v245 == 0)
          {
            if (v243 != 121)
              v241 = 1;
            if ((v241 & 1) != 0)
              goto LABEL_598;
          }
          v247 = v242 + 2;
          if ((int)v225 <= (int)v247)
            break;
          v248 = &v13[v247];
          while (1)
          {
            v249 = *v248++;
            v250 = (((v249 - 97) >> 1) | ((v249 - 97) << 7));
            v23 = v250 > 0xA;
            v251 = (1 << v250) & 0x495;
            if (v23 || v251 == 0)
              goto LABEL_598;
            LODWORD(v247) = v247 + 1;
            if ((int)v225 <= (int)v247)
              goto LABEL_599;
          }
        case 't':
          if ((int)v8 < 6)
            break;
          v253 = (v8 - 5);
          v254 = &v13[v253];
          if (*(_DWORD *)&v13[v253] == 1952539497 && v13[v253 + 4] == 101)
          {
            v300 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
            if (v300 <= 0xA && (v301 = 1, ((1 << v300) & 0x495) != 0))
            {
              v302 = 0;
            }
            else
            {
              v302 = 1;
              if ((_DWORD)v8 == 6)
              {
                v301 = 0;
              }
              else
              {
                v374 = 1;
                while (1)
                {
                  v375 = v13[v374];
                  v376 = (((v375 - 97) >> 1) | (((_BYTE)v375 - 97) << 7));
                  v23 = v376 > 0xA;
                  v377 = (1 << v376) & 0x495;
                  v378 = v23 || v377 == 0;
                  if (!v378 || v375 == 121)
                    break;
                  if (v253 == ++v374)
                  {
                    v301 = 0;
                    v302 = v8 - 5;
                    goto LABEL_558;
                  }
                }
                v301 = 1;
                v302 = v374;
              }
            }
LABEL_558:
            if ((int)(v302 + 1) < (int)v253)
            {
              v303 = v13[v302 + 1];
              v304 = (((v303 - 97) >> 1) | (((_BYTE)v303 - 97) << 7));
              v23 = v304 > 0xA;
              v305 = (1 << v304) & 0x495;
              if (v23 || v305 == 0)
              {
                if (v303 != 121)
                  v301 = 1;
                if ((v301 & 1) != 0)
                  goto LABEL_487;
              }
              v307 = v302 + 2;
              if ((int)v253 > (int)v307)
              {
                v308 = &v13[v307];
                while (1)
                {
                  v309 = *v308++;
                  v310 = (((v309 - 97) >> 1) | ((v309 - 97) << 7));
                  v23 = v310 > 0xA;
                  v311 = (1 << v310) & 0x495;
                  if (v23 || v311 == 0)
                    break;
                  LODWORD(v307) = v307 + 1;
                  if ((int)v253 <= (int)v307)
                    goto LABEL_599;
                }
LABEL_487:
                *(_WORD *)v254 = 25449;
                goto LABEL_488;
              }
            }
          }
          else
          {
            v256 = *(_DWORD *)v254 == 1953063785 && v254[4] == 105;
            if (v256 && sub_1ACC99FDC(v13, v253))
              goto LABEL_487;
          }
          break;
        case 'u':
          if ((int)v8 < 4)
            break;
          v225 = (v8 - 3);
          if (*(_WORD *)&v13[v225] != 30054 || v13[v225 + 2] != 108)
            break;
          v258 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v258 <= 0xA)
          {
            v259 = 1;
            if (((1 << v258) & 0x495) != 0)
            {
              v260 = 0;
              goto LABEL_498;
            }
          }
          v260 = 1;
          if ((_DWORD)v8 == 4)
          {
            v259 = 0;
            goto LABEL_498;
          }
          v359 = 1;
          while (1)
          {
            v360 = v13[v359];
            v361 = (((v360 - 97) >> 1) | (((_BYTE)v360 - 97) << 7));
            v23 = v361 > 0xA;
            v362 = (1 << v361) & 0x495;
            v363 = v23 || v362 == 0;
            if (!v363 || v360 == 121)
              break;
            if (v225 == ++v359)
            {
              v259 = 0;
              v260 = v8 - 3;
              goto LABEL_498;
            }
          }
          v259 = 1;
          v260 = v359;
LABEL_498:
          if ((int)(v260 + 1) >= (int)v225)
            break;
          v261 = v13[v260 + 1];
          v262 = (((v261 - 97) >> 1) | (((_BYTE)v261 - 97) << 7));
          v23 = v262 > 0xA;
          v263 = (1 << v262) & 0x495;
          if (v23 || v263 == 0)
          {
            if (v261 != 121)
              v259 = 1;
            if ((v259 & 1) != 0)
              goto LABEL_598;
          }
          v265 = v260 + 2;
          if ((int)v225 <= (int)v265)
            break;
          v266 = &v13[v265];
          while (1)
          {
            v267 = *v266++;
            v268 = (((v267 - 97) >> 1) | ((v267 - 97) << 7));
            v23 = v268 > 0xA;
            v269 = (1 << v268) & 0x495;
            if (v23 || v269 == 0)
              goto LABEL_598;
            LODWORD(v265) = v265 + 1;
            if ((int)v225 <= (int)v265)
              goto LABEL_599;
          }
        case 'v':
          if ((int)v8 < 6)
            break;
          v225 = (v8 - 5);
          if (*(_DWORD *)&v13[v225] != 1986622561 || v13[v225 + 4] != 101)
            break;
          v272 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v272 <= 0xA)
          {
            v273 = 1;
            if (((1 << v272) & 0x495) != 0)
            {
              v274 = 0;
              goto LABEL_520;
            }
          }
          v274 = 1;
          if ((_DWORD)v8 == 6)
          {
            v273 = 0;
            goto LABEL_520;
          }
          v364 = 1;
          while (1)
          {
            v365 = v13[v364];
            v366 = (((v365 - 97) >> 1) | (((_BYTE)v365 - 97) << 7));
            v23 = v366 > 0xA;
            v367 = (1 << v366) & 0x495;
            v368 = v23 || v367 == 0;
            if (!v368 || v365 == 121)
              break;
            if (v225 == ++v364)
            {
              v273 = 0;
              v274 = v8 - 5;
              goto LABEL_520;
            }
          }
          v273 = 1;
          v274 = v364;
LABEL_520:
          if ((int)(v274 + 1) >= (int)v225)
            break;
          v275 = v13[v274 + 1];
          v276 = (((v275 - 97) >> 1) | (((_BYTE)v275 - 97) << 7));
          v23 = v276 > 0xA;
          v277 = (1 << v276) & 0x495;
          if (v23 || v277 == 0)
          {
            if (v275 != 121)
              v273 = 1;
            if ((v273 & 1) != 0)
              goto LABEL_598;
          }
          v279 = v274 + 2;
          if ((int)v225 > (int)v279)
          {
            v280 = &v13[v279];
            while (1)
            {
              v281 = *v280++;
              v282 = (((v281 - 97) >> 1) | ((v281 - 97) << 7));
              v23 = v282 > 0xA;
              v283 = (1 << v282) & 0x495;
              if (v23 || v283 == 0)
                break;
              LODWORD(v279) = v279 + 1;
              if ((int)v225 <= (int)v279)
                goto LABEL_599;
            }
LABEL_598:
            v8 = v225;
          }
          break;
        case 'z':
          if ((int)v8 < 6)
            break;
          v285 = (v8 - 5);
          if (*(_DWORD *)&v13[v285] != 2053729377 || v13[v285 + 4] != 101)
            break;
          v287 = (((*v13 - 97) >> 1) | ((*v13 - 97) << 7));
          if (v287 <= 0xA)
          {
            v288 = 1;
            if (((1 << v287) & 0x495) != 0)
            {
              v289 = 0;
              goto LABEL_542;
            }
          }
          v289 = 1;
          if ((_DWORD)v8 == 6)
          {
            v288 = 0;
            goto LABEL_542;
          }
          v369 = 1;
          while (1)
          {
            v370 = v13[v369];
            v371 = (((v370 - 97) >> 1) | (((_BYTE)v370 - 97) << 7));
            v23 = v371 > 0xA;
            v372 = (1 << v371) & 0x495;
            v373 = v23 || v372 == 0;
            if (!v373 || v370 == 121)
              break;
            if (v285 == ++v369)
            {
              v288 = 0;
              v289 = v8 - 5;
              goto LABEL_542;
            }
          }
          v288 = 1;
          v289 = v369;
LABEL_542:
          if ((int)(v289 + 1) >= (int)v285)
            break;
          v290 = v13[v289 + 1];
          v291 = (((v290 - 97) >> 1) | (((_BYTE)v290 - 97) << 7));
          v23 = v291 > 0xA;
          v292 = (1 << v291) & 0x495;
          if (v23 || v292 == 0)
          {
            if (v290 != 121)
              v288 = 1;
            if ((v288 & 1) != 0)
              goto LABEL_702;
          }
          v294 = v289 + 2;
          if ((int)v285 > (int)v294)
          {
            v295 = &v13[v294];
            while (1)
            {
              v296 = *v295++;
              v297 = (((v296 - 97) >> 1) | ((v296 - 97) << 7));
              v23 = v297 > 0xA;
              v298 = (1 << v297) & 0x495;
              if (v23 || v298 == 0)
                break;
              LODWORD(v294) = v294 + 1;
              if ((int)v285 <= (int)v294)
                goto LABEL_599;
            }
LABEL_702:
            *(_WORD *)&v13[v285] = 27745;
LABEL_488:
            v8 = (v8 - 3);
          }
          break;
        default:
          break;
      }
LABEL_599:
      v313 = (int)v8 - 2;
      switch(v13[v313])
      {
        case 'a':
          if ((int)v8 >= 3)
          {
            v314 = *(unsigned __int16 *)&v13[v313];
            v315 = 27745;
            goto LABEL_658;
          }
          goto LABEL_661;
        case 'c':
          if ((int)v8 >= 5)
          {
            v316 = (v8 - 4);
            v313 = v316;
            if (*(_DWORD *)&v13[v316] == 1701015137)
              goto LABEL_659;
            v315 = *(_DWORD *)&v13[v316];
            v314 = 1701015141;
            goto LABEL_658;
          }
          goto LABEL_661;
        case 'e':
          if ((int)v8 >= 3)
          {
            v314 = *(unsigned __int16 *)&v13[v313];
            v315 = 29285;
            goto LABEL_658;
          }
          goto LABEL_661;
        case 'i':
          if ((int)v8 >= 3)
          {
            v314 = *(unsigned __int16 *)&v13[v313];
            v315 = 25449;
            goto LABEL_658;
          }
          goto LABEL_661;
        case 'l':
          if ((int)v8 >= 5)
          {
            v317 = (v8 - 4);
            v313 = v317;
            if (*(_DWORD *)&v13[v317] == 1701601889)
              goto LABEL_659;
            v315 = *(_DWORD *)&v13[v317];
            v314 = 1701601897;
            goto LABEL_658;
          }
          goto LABEL_661;
        case 'n':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v318 = (unsigned __int16 *)&v13[v313];
          if (*(_WORD *)&v13[v313] == 28257 && v13[v313 + 2] == 116)
            goto LABEL_659;
          if (v8 < 6)
          {
            if ((_DWORD)v8 != 5)
            {
LABEL_690:
              v347 = *v318;
              v330 = *((unsigned __int8 *)v318 + 2);
              v331 = v347 == 28261;
              v332 = 116;
              goto LABEL_691;
            }
          }
          else
          {
            v320 = (v8 - 5);
            if (*(_DWORD *)&v13[v320] == 1852140901 && v13[v320 + 4] == 116)
            {
              v313 = (v8 - 5);
              if (sub_1ACC99CE0(v13, (int)v8 - 5))
                goto LABEL_660;
              goto LABEL_661;
            }
          }
          if (*(_DWORD *)&v13[(v8 - 4)] != 1953391981)
            goto LABEL_690;
          v313 = (v8 - 4);
          if (sub_1ACC99CE0(v13, (int)v8 - 4))
LABEL_660:
            v8 = v313;
LABEL_661:
          v336 = (int)v8 - 1;
          if (v13[v336] == 101)
          {
            if (sub_1ACC99CE0(v13, (int)v8 - 1))
              goto LABEL_663;
            if (sub_1ACC999E0(v13, (int)v8 - 1))
            {
              if ((int)v8 < 2 || v13[(int)v8 - 2] - 122 > 0xFFFFFFFC)
                goto LABEL_663;
              v338 = 0;
              v339 = 0;
              v340 = v13;
              v341 = v336;
              do
              {
                v345 = *v340++;
                v344 = v345;
                v346 = ((v345 - 97) >> 1) | (((_BYTE)v345 - 97) << 7);
                if (v346 < 0xBu && ((0x495u >> v346) & 1) != 0)
                {
                  v343 = 1;
                }
                else
                {
                  if (v338)
                    v342 = v344 == 121;
                  else
                    v342 = 0;
                  v343 = v342;
                }
                v338 = v343 ^ 1;
                v339 = v338 | (2 * v339);
                --v341;
              }
              while (v341);
              if ((v339 & 7) != 5)
LABEL_663:
                v8 = (int)v8 - 1;
            }
          }
          if ((int)v8 >= 2 && v13[(v8 - 1)] == 108 && v13[(v8 - 2)] == 108)
          {
            if (sub_1ACC99CE0(v13, (int)v8 - 1))
              v8 = (v8 - 1);
            else
              v8 = v8;
          }
          v11 = *a1;
          v12 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))a1[1];
          a2 = v9;
          __src = v13;
          return v12(v11, a2, __src, v8, a5, a6);
        case 'o':
          if ((int)v8 < 4)
          {
            if ((_DWORD)v8 != 3)
              goto LABEL_661;
          }
          else
          {
            v322 = (v8 - 3);
            if (*(_WORD *)&v13[v322] == 28521 && v13[v322 + 2] == 110)
            {
              if (v13[(v8 - 4)] - 115 <= 1)
              {
                v313 = (v8 - 3);
                if (sub_1ACC99CE0(v13, (int)v8 - 3))
                  goto LABEL_660;
              }
              goto LABEL_661;
            }
          }
          v314 = *(unsigned __int16 *)&v13[v313];
          v315 = 30063;
LABEL_658:
          if (v314 != v315)
            goto LABEL_661;
LABEL_659:
          if (!sub_1ACC99CE0(v13, v313))
            goto LABEL_661;
          goto LABEL_660;
        case 's':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v324 = v13[v313 + 2];
          v325 = *(unsigned __int16 *)&v13[v313] == 29545;
          v326 = 109;
          goto LABEL_649;
        case 't':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v327 = (unsigned __int16 *)&v13[v313];
          if (*(_WORD *)&v13[v313] != 29793 || v13[v313 + 2] != 101)
          {
            v329 = *v327;
            v330 = *((unsigned __int8 *)v327 + 2);
            v331 = v329 == 29801;
            v332 = 105;
LABEL_691:
            if (!v331 || v330 != v332)
              goto LABEL_661;
          }
          goto LABEL_659;
        case 'u':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v324 = v13[v313 + 2];
          v325 = *(unsigned __int16 *)&v13[v313] == 30063;
          v326 = 115;
          goto LABEL_649;
        case 'v':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v333 = *(unsigned __int16 *)&v13[v313];
          v324 = v13[v313 + 2];
          v334 = 30313;
          goto LABEL_648;
        case 'z':
          if ((int)v8 < 4)
            goto LABEL_661;
          v313 = (v8 - 3);
          v333 = *(unsigned __int16 *)&v13[v313];
          v324 = v13[v313 + 2];
          v334 = 31337;
LABEL_648:
          v325 = v333 == v334;
          v326 = 101;
LABEL_649:
          v335 = v325 && v324 == v326;
          if (!v335 || !sub_1ACC99CE0(v13, v313))
            goto LABEL_661;
          goto LABEL_660;
        default:
          goto LABEL_661;
      }
    default:
      goto LABEL_439;
  }
}

uint64_t sub_1ACC999E0(_BYTE *a1, int a2)
{
  unsigned int v2;
  char v3;
  BOOL v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  char *v13;
  char v14;
  unsigned int v15;
  int v16;
  int v18;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v37;
  char *v38;
  char v39;
  unsigned int v40;
  int v41;
  char v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;

  if (a2 < 1)
  {
    v7 = 0;
    v3 = 1;
  }
  else
  {
    v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    v3 = 1;
    v4 = v2 > 0xA;
    v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      v7 = 1;
      if (a2 == 1)
      {
        v3 = 0;
      }
      else
      {
        v28 = 1;
        while (1)
        {
          v29 = a1[v28];
          v30 = (((v29 - 97) >> 1) | (((_BYTE)v29 - 97) << 7));
          v4 = v30 > 0xA;
          v31 = (1 << v30) & 0x495;
          v32 = v4 || v31 == 0;
          if (!v32 || v29 == 121)
            break;
          if (a2 == ++v28)
          {
            v3 = 0;
            v7 = a2;
            goto LABEL_8;
          }
        }
        v3 = 1;
        v7 = v28;
      }
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_8:
  if (v7 + 1 >= a2)
    return 0;
  v8 = v7;
  v9 = a1[v7 + 1];
  v10 = (((v9 - 97) >> 1) | (((_BYTE)v9 - 97) << 7));
  v4 = v10 > 0xA;
  v11 = (1 << v10) & 0x495;
  if (!v4 && v11 != 0)
    goto LABEL_13;
  if (v9 != 121)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
LABEL_13:
    if (v7 + 2 >= a2)
      return 0;
    ++v7;
    v13 = &a1[v8 + 2];
    while (1)
    {
      v14 = *v13++;
      v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
      v4 = v15 > 0xA;
      v16 = (1 << v15) & 0x495;
      if (v4 || v16 == 0)
        break;
      v18 = v7 + 2;
      ++v7;
      if (v18 >= a2)
        return 0;
    }
  }
  v20 = &a1[v7 + 2];
  v21 = (a2 - (v7 + 2));
  if ((int)v21 < 1)
  {
    v27 = 0;
    goto LABEL_43;
  }
  v22 = *v20;
  v23 = (((v22 - 97) >> 1) | (((_BYTE)v22 - 97) << 7));
  v24 = 1;
  v4 = v23 > 0xA;
  v25 = (1 << v23) & 0x495;
  if (!v4 && v25 != 0)
  {
    v27 = 0;
    goto LABEL_44;
  }
  if (v22 != 121)
  {
    v27 = 1;
    if ((_DWORD)v21 != 1)
    {
      v44 = 0;
      while (1)
      {
        v45 = a1[v7 + 3 + v44];
        v46 = (((v45 - 97) >> 1) | (((_BYTE)v45 - 97) << 7));
        v4 = v46 > 0xA;
        v47 = (1 << v46) & 0x495;
        if (!v4 && v47 != 0)
        {
          v27 = v44 + 1;
          goto LABEL_74;
        }
        if (v45 == 121)
          break;
        if (v21 - 1 == ++v44)
        {
          v24 = 0;
          v27 = a2 - (v7 + 2);
          goto LABEL_44;
        }
      }
      v27 = v44 + 1;
      goto LABEL_74;
    }
LABEL_43:
    v24 = 0;
    goto LABEL_44;
  }
  v27 = 0;
LABEL_74:
  v24 = 1;
LABEL_44:
  if ((int)(v27 + 1) >= (int)v21)
    return 1;
  v33 = v27;
  v34 = v20[v27 + 1];
  v35 = (((v34 - 97) >> 1) | (((_BYTE)v34 - 97) << 7));
  if (v35 > 0xA || ((1 << v35) & 0x495) == 0)
  {
    v43 = v34 == 121 ? v24 : 1;
    if ((v43 & 1) != 0)
      return 0;
  }
  v37 = v33 + 2;
  if ((int)v21 > (int)v33 + 2)
  {
    v38 = &a1[v33 + 4 + v7];
    while (1)
    {
      v39 = *v38++;
      v40 = (((v39 - 97) >> 1) | ((v39 - 97) << 7));
      v4 = v40 > 0xA;
      v41 = (1 << v40) & 0x495;
      if (v4 || v41 == 0)
        break;
      if ((int)v21 <= ++v37)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1ACC99CE0(_BYTE *a1, int a2)
{
  unsigned int v2;
  char v3;
  BOOL v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  char *v13;
  char v14;
  unsigned int v15;
  int v16;
  int v18;
  uint64_t result;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  char *v38;
  char v39;
  unsigned int v40;
  int v41;
  char v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;

  if (a2 < 1)
  {
    v7 = 0;
    v3 = 1;
  }
  else
  {
    v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    v3 = 1;
    v4 = v2 > 0xA;
    v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      v7 = 1;
      if (a2 == 1)
      {
        v3 = 0;
      }
      else
      {
        v28 = 1;
        while (1)
        {
          v29 = a1[v28];
          v30 = (((v29 - 97) >> 1) | (((_BYTE)v29 - 97) << 7));
          v4 = v30 > 0xA;
          v31 = (1 << v30) & 0x495;
          v32 = v4 || v31 == 0;
          if (!v32 || v29 == 121)
            break;
          if (a2 == ++v28)
          {
            v3 = 0;
            v7 = a2;
            goto LABEL_8;
          }
        }
        v3 = 1;
        v7 = v28;
      }
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_8:
  if (v7 + 1 >= a2)
    return 0;
  v8 = v7;
  v9 = a1[v7 + 1];
  v10 = (((v9 - 97) >> 1) | (((_BYTE)v9 - 97) << 7));
  v4 = v10 > 0xA;
  v11 = (1 << v10) & 0x495;
  if (!v4 && v11 != 0)
    goto LABEL_13;
  if (v9 != 121)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
LABEL_13:
    if (v7 + 2 >= a2)
      return 0;
    ++v7;
    v13 = &a1[v8 + 2];
    while (1)
    {
      v14 = *v13++;
      v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
      v4 = v15 > 0xA;
      v16 = (1 << v15) & 0x495;
      if (v4 || v16 == 0)
        break;
      v18 = v7 + 2;
      ++v7;
      if (v18 >= a2)
        return 0;
    }
  }
  v20 = &a1[v7 + 2];
  v21 = (a2 - (v7 + 2));
  if ((int)v21 < 1)
  {
    v27 = 0;
    goto LABEL_43;
  }
  v22 = *v20;
  v23 = (((v22 - 97) >> 1) | (((_BYTE)v22 - 97) << 7));
  v24 = 1;
  v4 = v23 > 0xA;
  v25 = (1 << v23) & 0x495;
  if (!v4 && v25 != 0)
  {
    v27 = 0;
    goto LABEL_44;
  }
  if (v22 != 121)
  {
    v27 = 1;
    if ((_DWORD)v21 != 1)
    {
      v44 = 0;
      while (1)
      {
        v45 = a1[v7 + 3 + v44];
        v46 = (((v45 - 97) >> 1) | (((_BYTE)v45 - 97) << 7));
        v4 = v46 > 0xA;
        v47 = (1 << v46) & 0x495;
        if (!v4 && v47 != 0)
        {
          v27 = v44 + 1;
          goto LABEL_74;
        }
        if (v45 == 121)
          break;
        if (v21 - 1 == ++v44)
        {
          v24 = 0;
          v27 = a2 - (v7 + 2);
          goto LABEL_44;
        }
      }
      v27 = v44 + 1;
      goto LABEL_74;
    }
LABEL_43:
    v24 = 0;
    goto LABEL_44;
  }
  v27 = 0;
LABEL_74:
  v24 = 1;
LABEL_44:
  if ((int)(v27 + 1) >= (int)v21)
    return 0;
  v33 = v20[v27 + 1];
  v34 = (((v33 - 97) >> 1) | (((_BYTE)v33 - 97) << 7));
  v4 = v34 > 0xA;
  v35 = (1 << v34) & 0x495;
  v36 = v4 || v35 == 0;
  if (!v36 || (v33 != 121 ? (v43 = 1) : (v43 = v24), (v43 & 1) == 0))
  {
    v37 = v27 + 2;
    if ((int)v21 > (int)(v27 + 2))
    {
      v38 = &a1[v27 + 4 + (uint64_t)v7];
      while (1)
      {
        v39 = *v38++;
        v40 = (((v39 - 97) >> 1) | ((v39 - 97) << 7));
        v4 = v40 > 0xA;
        v41 = (1 << v40) & 0x495;
        if (v4 || v41 == 0)
          break;
        result = 0;
        if ((int)v21 <= (int)++v37)
          return result;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1ACC99FDC(_BYTE *a1, int a2)
{
  unsigned int v2;
  char v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v12;
  char *v13;
  char v14;
  unsigned int v15;
  int v16;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;

  if (a2 < 1)
  {
    v7 = 0;
    v3 = 1;
  }
  else
  {
    v2 = (((*a1 - 97) >> 1) | ((*a1 - 97) << 7));
    v3 = 1;
    v4 = v2 > 0xA;
    v5 = (1 << v2) & 0x495;
    if (v4 || v5 == 0)
    {
      v7 = 1;
      if (a2 == 1)
      {
        v3 = 0;
      }
      else
      {
        v19 = 1;
        while (1)
        {
          v20 = a1[v19];
          v21 = (((v20 - 97) >> 1) | (((_BYTE)v20 - 97) << 7));
          v4 = v21 > 0xA;
          v22 = (1 << v21) & 0x495;
          v23 = v4 || v22 == 0;
          if (!v23 || v20 == 121)
            break;
          if (a2 == ++v19)
          {
            v3 = 0;
            v7 = a2;
            goto LABEL_8;
          }
        }
        v3 = 1;
        v7 = v19;
      }
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_8:
  if ((int)(v7 + 1) >= a2)
    return 0;
  v8 = a1[v7 + 1];
  v9 = (((v8 - 97) >> 1) | (((_BYTE)v8 - 97) << 7));
  v4 = v9 > 0xA;
  v10 = (1 << v9) & 0x495;
  if (!v4 && v10 != 0)
    goto LABEL_13;
  if (v8 != 121)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
LABEL_13:
    v12 = v7 + 2;
    if ((int)v12 < a2)
    {
      v13 = &a1[v12];
      while (1)
      {
        v14 = *v13++;
        v15 = (((v14 - 97) >> 1) | ((v14 - 97) << 7));
        v4 = v15 > 0xA;
        v16 = (1 << v15) & 0x495;
        if (v4 || v16 == 0)
          break;
        LODWORD(v12) = v12 + 1;
        if ((int)v12 >= a2)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1ACC9A14C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a2;
  if ((int)v2 <= 0)
  {
    v11 = 0;
    *((_QWORD *)a2 + 8) = 0x412E848000000000;
  }
  else
  {
    v3 = 0;
    v4 = (_BYTE *)(*((_QWORD *)a2 + 1) + 5);
    v5 = -1;
    v6 = -1;
    v7 = -1;
    do
    {
      if (*v4 && !*(_DWORD *)(v4 - 5))
      {
        v8 = *(v4 - 1);
        if (v8 == 2)
          v7 = v3;
        if (v8 == 8 || v8 == 16)
          v5 = v3;
        if (v8 == 32 || v8 == 4)
          v6 = v3;
      }
      ++v3;
      v4 += 12;
    }
    while (v2 != v3);
    if ((v7 & 0x80000000) != 0)
    {
      *((_QWORD *)a2 + 8) = 0x412E848000000000;
      v12 = 1;
      if ((v6 & 0x80000000) != 0)
      {
        v11 = 0;
        v13 = 0x411E848000000000;
        if ((v5 & 0x80000000) != 0)
          goto LABEL_25;
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v6) = 1;
        *((_QWORD *)a2 + 8) = 0x411E848000000000;
        v11 = 2;
        v13 = 0x410E848000000000;
        v12 = 2;
        if ((v5 & 0x80000000) != 0)
          goto LABEL_25;
      }
      v11 |= 4u;
      *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v5) = v12;
      *((_QWORD *)a2 + 8) = v13;
      goto LABEL_25;
    }
    v11 = 1;
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v7) = 1;
    *((_QWORD *)a2 + 8) = 0x4059000000000000;
  }
LABEL_25:
  if (a2[4] == 1)
  {
    v14 = *((_QWORD *)a2 + 3);
    if (!*(_DWORD *)v14 && !*(_BYTE *)(v14 + 4))
      a2[15] = 1;
  }
  a2[10] = v11;
  return 0;
}

uint64_t sub_1ACC9A28C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC9A338(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC9A3E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t (**v8)(unsigned __int8 *);
  sqlite3_int64 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  sqlite3_stmt *pStmt;
  unsigned int v19;

  v19 = 0;
  pStmt = 0;
  if (!*(_DWORD *)(a1 + 60))
  {
    v5 = (unsigned __int8 *)sub_1ACC78590(&v19, "SELECT t.%Q FROM %Q.%Q AS t WHERE t.%Q MATCH '*id'", *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
    if (!v5)
    {
      v3 = v19;
      goto LABEL_11;
    }
    v7 = v5;
    v3 = sub_1ACB5C66C(*(_QWORD *)(a1 + 40), v5, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v6);
    v8 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_11:
        *(_DWORD *)(a1 + 60) = 1;
        if (pStmt
          && sqlite3_step(pStmt) == 100
          && (v9 = sqlite3_column_int64(pStmt, 0), (v10 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 72)) != 0))
        {
          while (v10[3] != v9)
          {
            v10 = (uint64_t *)v10[1];
            if (!v10)
              goto LABEL_16;
          }
          v11 = *v10;
        }
        else
        {
LABEL_16:
          v11 = 0;
        }
        *(_DWORD *)(a1 + 60) = 0;
        if (v3 <= 1)
        {
          if (v11)
          {
            for (i = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 72); i; i = *(_QWORD *)(i + 8))
            {
              if (*(_DWORD *)(i + 32) == 1 && *(_QWORD *)i == v11)
                *(_DWORD *)(i + 80) |= 0x20u;
            }
            v3 = sub_1ACC93454(*(uint64_t ***)(v11 + 40));
            if (!(_DWORD)v3)
            {
              v13 = *(int *)(*(_QWORD *)(v11 + 24) + 24);
              if (!sqlite3_initialize())
              {
                v16 = (_QWORD *)sub_1ACB5D828(16 * v13 + 128);
                if (v16)
                {
                  v14 = v16;
                  bzero(v16, 16 * v13 + 128);
                  v3 = 0;
                  v14[1] = pStmt;
                  v14[2] = v11;
                  v17 = (uint64_t)&v14[*(int *)(*(_QWORD *)(v11 + 24) + 24) + 16];
                  v14[9] = v14 + 16;
                  v14[10] = v17;
                  goto LABEL_32;
                }
              }
              if ((int)v13 <= -8)
                v3 = 0;
              else
                v3 = 7;
            }
          }
          else
          {
            v3 = sqlite3_finalize(pStmt);
            pStmt = 0;
            if (!(_DWORD)v3)
            {
              *(_QWORD *)(a1 + 16) = sqlite3_mprintf("no such fts5 table: %s.%s", *(const char **)(a1 + 32), *(const char **)(a1 + 24));
              v3 = 1;
            }
          }
        }
        sqlite3_finalize(pStmt);
        v14 = 0;
LABEL_32:
        *a2 = v14;
        return v3;
      }
      v8 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v8)(v7);
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 16) = sqlite3_mprintf("recursive definition for %s.%s", *(const char **)(a1 + 32), *(const char **)(a1 + 24));
  return 1;
}

uint64_t sub_1ACC9A674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  v1 = a1;
  sub_1ACC9B6BC(a1);
  v2 = *(_QWORD *)(v1 + 96);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 8));
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1ACC9A7B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  _DWORD *v26;

  v8 = *(_DWORD *)(*(_QWORD *)a1 + 56);
  sub_1ACC9B6BC(a1);
  if ((a2 & 1) != 0)
  {
    v10 = *a5;
    v9 = 1;
    if ((a2 & 2) != 0)
    {
LABEL_3:
      v11 = a5[v9++];
      if ((a2 & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if ((a2 & 2) != 0)
      goto LABEL_3;
  }
  v11 = 0;
  if ((a2 & 4) != 0)
  {
LABEL_4:
    v12 = a5[v9];
    if (v10)
      goto LABEL_5;
LABEL_12:
    if (v11)
    {
      v15 = *(unsigned __int16 *)(v11 + 20);
      if ((~v15 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 1)
      {
        if ((v15 & 1) != 0)
        {
          v14 = 0;
          if ((v15 & 2) == 0)
            goto LABEL_38;
        }
        else
        {
          v14 = (unsigned __int8 *)sub_1ACBF2B64((int *)v11, 1);
          LOWORD(v15) = *(_WORD *)(v11 + 20);
          if ((v15 & 2) == 0)
            goto LABEL_38;
        }
      }
      else
      {
        v14 = *(unsigned __int8 **)(v11 + 8);
        if ((v15 & 2) == 0)
        {
LABEL_38:
          if ((v15 & 0x10) != 0)
          {
            v17 = *(_DWORD *)(v11 + 16);
            if ((v15 & 0x400) != 0)
              v17 += *(_DWORD *)v11;
            if (!v12)
              goto LABEL_70;
          }
          else if ((v15 & 1) != 0)
          {
            v17 = 0;
            if (!v12)
              goto LABEL_70;
          }
          else
          {
            v17 = sub_1ACBF2B3C(v11, 1);
            if (!v12)
              goto LABEL_70;
          }
LABEL_45:
          v18 = *(unsigned __int16 *)(v12 + 20);
          if ((~v18 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
          {
            if ((v18 & 1) != 0)
            {
              v19 = 0;
              if ((v18 & 2) == 0)
                goto LABEL_55;
            }
            else
            {
              v19 = sub_1ACBF2B64((int *)v12, 1);
              LOWORD(v18) = *(_WORD *)(v12 + 20);
              if ((v18 & 2) == 0)
                goto LABEL_55;
            }
          }
          else
          {
            v19 = *(_QWORD *)(v12 + 8);
            if ((v18 & 2) == 0)
              goto LABEL_55;
          }
          if (*(_BYTE *)(v12 + 22) == 1)
          {
            v20 = *(_DWORD *)(v12 + 16);
            goto LABEL_63;
          }
LABEL_55:
          if ((v18 & 0x10) != 0)
          {
            v20 = *(_DWORD *)(v12 + 16);
            if ((v18 & 0x400) != 0)
              v20 += *(_DWORD *)v12;
          }
          else if ((v18 & 1) != 0)
          {
            v20 = 0;
          }
          else
          {
            v20 = sub_1ACBF2B3C(v12, 1);
          }
LABEL_63:
          *(_DWORD *)(a1 + 48) = v20;
          v21 = sqlite3_initialize();
          if (v20 < 0 || v21)
          {
            *(_QWORD *)(a1 + 56) = 0;
          }
          else
          {
            v22 = (void *)sub_1ACB5D828((v20 + 1));
            *(_QWORD *)(a1 + 56) = v22;
            if (v22)
            {
              if (v19)
                v23 = (char *)v19;
              else
                v23 = &byte_1ACCBEAEE;
              memcpy(v22, v23, *(int *)(a1 + 48) + 1);
              goto LABEL_70;
            }
          }
          return 7;
        }
      }
      if (*(_BYTE *)(v11 + 22) != 1)
        goto LABEL_38;
      v17 = *(_DWORD *)(v11 + 16);
      if (v12)
        goto LABEL_45;
    }
    else
    {
      v14 = 0;
      v17 = 0;
      if (v12)
        goto LABEL_45;
    }
LABEL_70:
    v16 = 8;
    goto LABEL_71;
  }
LABEL_11:
  v12 = 0;
  if (!v10)
    goto LABEL_12;
LABEL_5:
  v13 = *(unsigned __int16 *)(v10 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      v14 = 0;
      if ((v13 & 2) == 0)
        goto LABEL_23;
    }
    else
    {
      v14 = (unsigned __int8 *)sub_1ACBF2B64((int *)v10, 1);
      LOWORD(v13) = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0)
        goto LABEL_23;
    }
  }
  else
  {
    v14 = *(unsigned __int8 **)(v10 + 8);
    if ((v13 & 2) == 0)
    {
LABEL_23:
      if ((v13 & 0x10) != 0)
      {
        v17 = *(_DWORD *)(v10 + 16);
        v16 = 0;
        if ((v13 & 0x400) != 0)
          v17 += *(_DWORD *)v10;
      }
      else if ((v13 & 1) != 0)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v17 = sub_1ACBF2B3C(v10, 1);
        v16 = 0;
      }
      goto LABEL_71;
    }
  }
  if (*(_BYTE *)(v10 + 22) != 1)
    goto LABEL_23;
  v16 = 0;
  v17 = *(_DWORD *)(v10 + 16);
LABEL_71:
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  result = sub_1ACC8359C((_DWORD *)v24, v14, v17, v16, 0, (uint64_t *)(a1 + 32));
  if ((_DWORD)result)
    return result;
  v26 = *(_DWORD **)(v24 + 144);
  ++*v26;
  *(_QWORD *)(a1 + 40) = v26;
  if (v8 == 2)
  {
    result = sub_1ACC9B7F4(a1);
    if ((_DWORD)result)
      return result;
    if (!*(_DWORD *)(a1 + 24) && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 92) != 1)
      return sub_1ACC9AB14(a1);
  }
  else if (!*(_DWORD *)(a1 + 24))
  {
    return sub_1ACC9AB14(a1);
  }
  return 0;
}

uint64_t sub_1ACC9AB14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  size_t v25;
  const void *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  size_t v50;
  const void *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 144);
  v4 = v3 == v2;
  v5 = v3 != v2;
  if (!v4)
    return 4;
  v9 = *(_QWORD *)(v1 + 24);
  v10 = *(_DWORD *)(v9 + 24);
  v6 = (4 * v5);
  v11 = *(_QWORD *)a1;
  ++*(_QWORD *)(a1 + 88);
  v12 = *(_DWORD *)(v11 + 56);
  if (v12)
  {
    if (v12 == 2)
    {
      v13 = *(_DWORD *)(v9 + 92);
      v14 = *(_QWORD *)(a1 + 32);
      while (v13 == 1
           || sub_1ACC827F8(*(_QWORD *)(v14 + 8), *(_DWORD *)(v14 + 16), (int *)(a1 + 120), (uint64_t *)(a1 + 112)))
      {
        *(_QWORD *)(a1 + 112) = 0;
        *(_DWORD *)(a1 + 120) = 0;
        v15 = sub_1ACC9B930(*(_QWORD *)(a1 + 32));
        if ((_DWORD)v15)
        {
          v6 = v15;
          goto LABEL_50;
        }
        v16 = sub_1ACC9B7F4(a1);
        v6 = v16;
        if (v13 == 1 || *(_DWORD *)(a1 + 24))
          return v6;
        if ((_DWORD)v16)
          goto LABEL_50;
      }
      return 0;
    }
  }
  else
  {
    v17 = *(int *)(a1 + 64);
    if (v10 <= (int)v17 + 1)
      v18 = v17 + 1;
    else
      v18 = v10;
    v19 = v17 + 1;
    do
    {
      if (v19 >= v10)
      {
        *(_DWORD *)(a1 + 64) = v18;
        goto LABEL_23;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
      LODWORD(v17) = v17 + 1;
      ++v19;
    }
    while (!v20);
    *(_DWORD *)(a1 + 64) = v17;
    if (v10 > (int)v17)
    {
      v12 = 0;
      goto LABEL_25;
    }
  }
LABEL_23:
  v21 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v21 + 20))
  {
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_25;
  }
  v22 = v21 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v21 + 88) + 4);
  v23 = *(_DWORD *)(v22 + 208);
  v24 = *(_QWORD *)(v22 + 200);
  v25 = (v23 - 1);
  if (v24)
    v26 = (const void *)(v24 + 1);
  else
    v26 = 0;
  v27 = *(_DWORD *)(a1 + 48);
  if ((v27 & 0x80000000) == 0)
  {
    v28 = (int)v25 >= v27 ? *(_DWORD *)(a1 + 48) : v23 - 1;
    v29 = memcmp(*(const void **)(a1 + 56), v26, v28);
    if (v29 < 0 || (!v29 ? (v30 = v27 < (int)v25) : (v30 = 0), v30))
    {
      v6 = 0;
LABEL_50:
      *(_DWORD *)(a1 + 24) = 1;
      return v6;
    }
  }
  *(_DWORD *)(a1 + 104) = 0;
  if (!(_DWORD)v25)
    goto LABEL_61;
  LODWORD(v31) = *(_DWORD *)(a1 + 108);
  if (v31 >= v25)
  {
    v38 = 0;
    v39 = *(_QWORD *)(a1 + 96);
LABEL_60:
    memcpy((void *)(v39 + v38), v26, v25);
    *(_DWORD *)(a1 + 104) += v25;
    goto LABEL_61;
  }
  if (!(_DWORD)v31)
    LODWORD(v31) = 64;
  v31 = (int)v31;
  do
  {
    v32 = v31;
    v31 *= 2;
  }
  while (v32 < v25);
  v33 = *(_QWORD *)(a1 + 96);
  if (!sqlite3_initialize())
  {
    v39 = sub_1ACB6BB48(v33, v32);
    if (v39)
    {
      *(_DWORD *)(a1 + 108) = v32;
      *(_QWORD *)(a1 + 96) = v39;
      v38 = *(int *)(a1 + 104);
      goto LABEL_60;
    }
  }
  v6 = 7;
LABEL_61:
  bzero(*(void **)(a1 + 72), 8 * v10);
  bzero(*(void **)(a1 + 80), 8 * v10);
  *(_DWORD *)(a1 + 64) = 0;
  if ((_DWORD)v6)
    return v6;
  v40 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 56);
  do
  {
    v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 92);
    v56 = 0;
    v55 = 0;
    v42 = *(_QWORD *)(v40 + 8);
    v43 = *(_DWORD *)(v40 + 16);
    if (v12)
    {
      if (v12 != 1)
        goto LABEL_77;
      if (!v41 && !sub_1ACC827F8(*(_QWORD *)(v40 + 8), *(_DWORD *)(v40 + 16), &v55, &v56))
      {
        v44 = *(_QWORD **)(a1 + 72);
        v45 = *v44 + 1;
        do
          *v44 = v45++;
        while (!sub_1ACC827F8(v42, v43, &v55, &v56));
      }
LABEL_76:
      ++**(_QWORD **)(a1 + 80);
      goto LABEL_77;
    }
    if (v41)
    {
      if (v41 != 2)
        goto LABEL_76;
      while (!sub_1ACC827F8(v42, v43, &v55, &v56))
      {
        if (v56 >= v10)
          return 267;
        ++*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v56);
      }
    }
    else if (!sub_1ACC827F8(*(_QWORD *)(v40 + 8), *(_DWORD *)(v40 + 16), &v55, &v56))
    {
      v52 = -1;
      do
      {
        v54 = HIDWORD(v56);
        if (v52 == HIDWORD(v56))
        {
          v53 = v56 >> 32;
        }
        else
        {
          if (v10 <= SHIDWORD(v56))
            return 267;
          v53 = v56 >> 32;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (v56 >> 32));
          v52 = v54;
        }
        ++*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v53);
      }
      while (!sub_1ACC827F8(v42, v43, &v55, &v56));
    }
LABEL_77:
    v46 = sub_1ACC9B930(v40);
    v6 = v46;
    v12 = *(_DWORD *)(v11 + 56);
    if (v12 == 2)
      goto LABEL_25;
    if ((_DWORD)v46)
      return v6;
    v40 = *(_QWORD *)(a1 + 32);
    v47 = v40 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v40 + 88) + 4);
    v48 = *(_DWORD *)(v47 + 208);
    v49 = *(_QWORD *)(v47 + 200);
    v50 = (v48 - 1);
    if (v49)
      v51 = (const void *)(v49 + 1);
    else
      v51 = 0;
  }
  while ((_DWORD)v50 == *(_DWORD *)(a1 + 104)
       && (v48 < 2 || !memcmp(v51, *(const void **)(a1 + 96), v50))
       && !*(_BYTE *)(v40 + 20));
  v6 = 0;
LABEL_25:
  if (!(_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 24) | v12)
      return 0;
    v34 = *(_DWORD *)(a1 + 64);
    if (v34 < v10)
    {
      v35 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v34);
      v36 = v10 - (uint64_t)v34;
      while (!*v35++)
      {
        *(_DWORD *)(a1 + 64) = ++v34;
        if (!--v36)
        {
          v34 = v10;
          break;
        }
      }
    }
    if (v34 == v10)
      return 267;
    else
      return 0;
  }
  return v6;
}

uint64_t sub_1ACC9AFCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1ACC9AFD4(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a3)
  {
    v3 = *(_DWORD *)(*(_QWORD *)a1 + 56);
    if (v3 == 1)
    {
      if (a3 == 1)
        v8 = *(uint64_t **)(a1 + 80);
      else
        v8 = *(uint64_t **)(a1 + 72);
      goto LABEL_21;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    v5 = *(_DWORD *)(v4 + 92);
    if (!v3)
    {
      if (a3 == 2)
      {
        v10 = *(_QWORD *)(a1 + 80);
      }
      else
      {
        if (a3 == 1)
        {
          if (v5 != 1)
          {
            if (a2)
            {
              v6 = *(_QWORD *)(v4 + 32);
              v7 = *(int *)(a1 + 64);
LABEL_38:
              sub_1ACBC69D0(a2, *(char **)(v6 + 8 * v7), -1, 1u, 0);
              return 0;
            }
            goto LABEL_39;
          }
          return 0;
        }
        v10 = *(_QWORD *)(a1 + 72);
      }
      v8 = (uint64_t *)(v10 + 8 * *(int *)(a1 + 64));
LABEL_21:
      v9 = *v8;
      if (v9 < 1)
        return 0;
      if (a2)
        goto LABEL_23;
LABEL_25:
      v12 = 97423;
LABEL_40:
      sub_1ACBBE20C(v12);
      return 0;
    }
    if (a3 != 2)
    {
      if (a3 == 1)
      {
        if (!a2)
          goto LABEL_25;
        v9 = **(_QWORD **)(a1 + 32);
      }
      else
      {
        if (v5)
          return 0;
        if (!a2)
        {
          v12 = 97413;
          goto LABEL_40;
        }
        v9 = *(_QWORD *)(a1 + 112) & 0x7FFFFFFFLL;
      }
LABEL_23:
      v11 = *(_QWORD *)a2;
      if ((*(_WORD *)(*(_QWORD *)a2 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v11, v9);
      }
      else
      {
        *(_QWORD *)v11 = v9;
        *(_WORD *)(v11 + 20) = 4;
      }
      return 0;
    }
    if (v5 == 2)
    {
      v7 = *(unsigned int *)(a1 + 112);
    }
    else
    {
      if (v5)
        return 0;
      v7 = *(unsigned int *)(a1 + 116);
    }
    if ((v7 & 0x80000000) == 0 && *(_DWORD *)(v4 + 24) > (int)v7)
    {
      if (a2)
      {
        v6 = *(_QWORD *)(v4 + 32);
        goto LABEL_38;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (!a2)
    {
LABEL_39:
      v12 = 97480;
      goto LABEL_40;
    }
    sub_1ACBC69D0(a2, *(char **)(a1 + 96), *(_DWORD *)(a1 + 104), 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  return 0;
}

uint64_t sub_1ACC9B170(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 88);
  return 0;
}

uint64_t sub_1ACC9B180(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, char **a6)
{
  const char *v12;
  _BOOL4 v13;
  _DWORD *v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(unsigned __int8 *);
  size_t v48;
  size_t v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned __int8 *v52;
  int v53;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;

  if (a3 == 6)
  {
    v12 = *(const char **)(a4 + 8);
    if (strlen(v12) == 4)
    {
      v13 = *(_DWORD *)v12 == 1886217588;
      goto LABEL_5;
    }
  }
  v13 = 0;
  if (a3 != 5)
  {
LABEL_5:
    if (!v13)
    {
      v14 = 0;
      *a6 = sqlite3_mprintf("wrong number of vtable arguments");
      result = 1;
      goto LABEL_67;
    }
  }
  v68 = a2;
  v16 = !v13;
  v17 = 8;
  v18 = 24;
  if (!v16)
    v17 = 24;
  v19 = *(const char **)(a4 + v17);
  v20 = 32;
  if (!v16)
    v18 = 32;
  v21 = *(const char **)(a4 + v18);
  if (!v16)
    v20 = 40;
  v22 = *(const char **)(a4 + v20);
  v23 = strlen(v19);
  v24 = strlen(v21);
  v25 = strlen(v22);
  v26 = sqlite3_initialize();
  v27 = 0;
  result = 7;
  if ((v25 & 0x80000000) != 0 || v26)
    goto LABEL_61;
  v67 = v23;
  v28 = (unsigned __int8 *)sub_1ACB5D828(v25 + 1);
  if (!v28)
  {
    v27 = 0;
    result = 7;
    goto LABEL_60;
  }
  v29 = v28;
  memcpy(v28, v22, v25);
  v29[v25] = 0;
  v30 = *v29;
  if ((v30 - 34) <= 0x3E && ((1 << (v30 - 34)) & 0x4200000000000021) != 0)
  {
    if (v30 == 91)
      v32 = 93;
    else
      v32 = *v29;
    v33 = v29[1];
    if (v29[1])
    {
      v34 = 0;
      v35 = 1;
      while (1)
      {
        v36 = v35 + 1;
        if (v33 == v32)
        {
          if (v29[v36] != v32)
            goto LABEL_31;
          LODWORD(v36) = v35 + 2;
          LOBYTE(v33) = v32;
        }
        v29[v34++] = v33;
        v33 = v29[(int)v36];
        v35 = v36;
        if (!v29[(int)v36])
          goto LABEL_31;
      }
    }
    LODWORD(v34) = 0;
LABEL_31:
    v29[v34] = 0;
  }
  for (i = 0; ; ++i)
  {
    v38 = v29[i];
    v39 = aCol[i];
    if ((_DWORD)v38 != (_DWORD)v39)
      break;
    if (!v29[i])
    {
      v27 = 0;
      v40 = 1;
      goto LABEL_51;
    }
LABEL_34:
    ;
  }
  if (byte_1ACCB6333[v38] == byte_1ACCB6333[v39])
    goto LABEL_34;
  for (j = 0; ; ++j)
  {
    v42 = v29[j];
    v43 = aRow_0[j];
    if ((_DWORD)v42 != (_DWORD)v43)
      break;
    if (!v29[j])
    {
      v27 = 1;
      v40 = 1;
      goto LABEL_51;
    }
LABEL_40:
    ;
  }
  if (byte_1ACCB6333[v42] == byte_1ACCB6333[v43])
    goto LABEL_40;
  for (k = 0; ; ++k)
  {
    v45 = v29[k];
    v46 = aInstance[k];
    if ((_DWORD)v45 != (_DWORD)v46)
      break;
    if (!v29[k])
    {
      v40 = 1;
      v27 = 2;
      goto LABEL_51;
    }
LABEL_46:
    ;
  }
  if (byte_1ACCB6333[v45] == byte_1ACCB6333[v46])
    goto LABEL_46;
  v27 = 0;
  v40 = 0;
  *a6 = sqlite3_mprintf("fts5vocab: unknown table type: %Q", v29);
LABEL_51:
  v47 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v29);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v29);
    v29 = (unsigned __int8 *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v47 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
      goto LABEL_56;
    }
  }
  else
  {
LABEL_56:
    (*v47)(v29);
  }
  if (v40)
    result = sqlite3_declare_vtab(a1, off_1E5C753F0[v27]);
  else
    result = 1;
LABEL_60:
  v23 = v67;
LABEL_61:
  if ((_DWORD)result)
  {
    v14 = 0;
  }
  else
  {
    v48 = v23 + 1;
    v49 = v24 + 1;
    v50 = v48 + v49 + 64;
    if (sqlite3_initialize() || (v51 = (_DWORD *)sub_1ACB5D828((int)v50)) == 0)
    {
      v14 = 0;
      if (v50 << 32 <= 0)
        result = 0;
      else
        result = 7;
    }
    else
    {
      v14 = v51;
      bzero(v51, (int)v50);
      v14[14] = v27;
      *((_QWORD *)v14 + 5) = a1;
      *((_QWORD *)v14 + 6) = v68;
      *((_QWORD *)v14 + 3) = v14 + 16;
      *((_QWORD *)v14 + 4) = (char *)v14 + v49 + 64;
      memcpy(v14 + 16, v21, v49);
      memcpy((char *)v14 + v49 + 64, v19, v48);
      v52 = (unsigned __int8 *)*((_QWORD *)v14 + 3);
      v53 = *v52;
      if ((v53 - 34) <= 0x3E && ((1 << (v53 - 34)) & 0x4200000000000021) != 0)
      {
        if (v53 == 91)
          v55 = 93;
        else
          v55 = *v52;
        v56 = v52[1];
        if (v52[1])
        {
          v57 = 0;
          v58 = 1;
          while (1)
          {
            v59 = v58 + 1;
            if (v56 == v55)
            {
              if (v52[v59] != v55)
                goto LABEL_83;
              LODWORD(v59) = v58 + 2;
              LOBYTE(v56) = v55;
            }
            v52[v57++] = v56;
            v56 = v52[(int)v59];
            v58 = v59;
            if (!v52[(int)v59])
              goto LABEL_83;
          }
        }
        LODWORD(v57) = 0;
LABEL_83:
        v52[v57] = 0;
      }
      v60 = (unsigned __int8 *)*((_QWORD *)v14 + 4);
      v61 = *v60;
      if ((v61 - 34) > 0x3E || ((1 << (v61 - 34)) & 0x4200000000000021) == 0)
      {
        result = 0;
      }
      else
      {
        if (v61 == 91)
          v61 = 93;
        v63 = v60[1];
        if (v60[1])
        {
          v64 = 0;
          v65 = 1;
          while (1)
          {
            v66 = v65 + 1;
            if (v63 == v61)
            {
              if (v60[v66] != v61)
                goto LABEL_97;
              LODWORD(v66) = v65 + 2;
              LOBYTE(v63) = v61;
            }
            v60[v64++] = v63;
            v63 = v60[(int)v66];
            v65 = v66;
            if (!v60[(int)v66])
              goto LABEL_97;
          }
        }
        LODWORD(v64) = 0;
LABEL_97:
        result = 0;
        v60[v64] = 0;
      }
    }
  }
LABEL_67:
  *a5 = v14;
  return result;
}

_DWORD *sub_1ACC9B6BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  sqlite3_stmt *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;
  uint64_t v11;
  uint64_t (**v12)(uint64_t);

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  v3[7] = 0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    sub_1ACC7D2A0(v2);
    v5 = *(_QWORD **)(v4 + 64);
    if (v5)
    {
      *(_QWORD *)(v4 + 64) = 0;
      v6 = (sqlite3_stmt *)v5[3];
      v7 = (_QWORD *)v5[4];
      v8 = v7[3];
      if (v8)
        xmmword_1ECD3B1C0(v8);
      sub_1ACBE0F9C(v7, v5);
      v9 = v7[3];
      if (v9)
        xmmword_1ECD3B1D0(v9);
      sqlite3_finalize(v6);
    }
  }
  result = *(_DWORD **)(a1 + 40);
  if (result)
    result = sub_1ACC7A15C(result);
  *v3 = 0;
  v3[1] = 0;
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
  {
    v12 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_16:
      result = (_DWORD *)(*v12)(v11);
      goto LABEL_17;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
    --qword_1ECD3E8D0;
    result = (_DWORD *)off_1ECD3B168(v11);
    v11 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v12 = &xmmword_1ECD3B1D0;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1ACC9B7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 20))
  {
    result = 0;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  v4 = v2 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v2 + 88) + 4);
  v5 = *(_DWORD *)(v4 + 208);
  v6 = *(_QWORD *)(v4 + 200);
  v7 = (v5 - 1);
  if (v6)
    v8 = (const void *)(v6 + 1);
  else
    v8 = 0;
  v9 = *(_DWORD *)(a1 + 48);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = (int)v7 >= v9 ? *(_DWORD *)(a1 + 48) : v5 - 1;
    v11 = memcmp(*(const void **)(a1 + 56), v8, v10);
    if (v11 < 0 || (!v11 ? (v12 = v9 < (int)v7) : (v12 = 0), v12))
      *(_DWORD *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 104) = 0;
  if (!(_DWORD)v7)
    return 0;
  LODWORD(v13) = *(_DWORD *)(a1 + 108);
  if (v13 >= v7)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    if (!(_DWORD)v13)
      LODWORD(v13) = 64;
    v13 = (int)v13;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 < v7);
    v15 = *(_QWORD *)(a1 + 96);
    if (sqlite3_initialize())
      return 7;
    v17 = sub_1ACB6BB48(v15, v14);
    if (!v17)
      return 7;
    *(_DWORD *)(a1 + 108) = v14;
    *(_QWORD *)(a1 + 96) = v17;
    v16 = *(int *)(a1 + 104);
  }
  memcpy((void *)(v17 + v16), v8, v7);
  result = 0;
  *(_DWORD *)(a1 + 104) += v7;
  return result;
}

uint64_t sub_1ACC9B930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  sub_1ACC800BC(v2, a1, 0, 0);
  if (!*(_DWORD *)(v2 + 60))
  {
    v5 = a1 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4);
    v8 = *(_QWORD *)(v5 + 112);
    v7 = (_QWORD *)(v5 + 112);
    v6 = v8;
    if (v8)
    {
      if (**(_BYTE **)(a1 + 136 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 4) + 200) != 48)
      {
        v9 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v6);
          v6 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_11;
          v9 = &xmmword_1ECD3B1D0;
        }
        (*v9)(v6);
LABEL_11:
        *v7 = 0;
        *(_BYTE *)(a1 + 20) = 1;
      }
    }
  }
  v3 = *(_QWORD *)(a1 + 24);
  result = *(unsigned int *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  return result;
}

void sub_1ACC9BA48(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v6;
  double v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  signed int v12;
  double v13;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned int *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _BYTE v38[32];
  uint64_t v39;

  v4 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    sub_1ACBBE20C(89699);
    return;
  }
  v6 = *(_WORD *)(v4 + 20);
  if ((v6 & 0x24) != 0)
  {
    v7 = *(double *)v4;
  }
  else if ((v6 & 8) != 0)
  {
    v13 = *(double *)v4;
    if (*(double *)v4 < -9.22337204e18 || v13 > 9.22337204e18)
      return;
    *(_QWORD *)&v7 = (uint64_t)v13;
  }
  else
  {
    if ((v6 & 0x12) == 0 || !*(_QWORD *)(v4 + 8))
      return;
    LOBYTE(v7) = sub_1ACBF2FC0(v4);
  }
  if (LOBYTE(v7) - 6 >= 0xFFFFFFFB)
  {
    v8 = (char *)sqlite3_value_blob(*(sqlite3_value **)(a3 + 8));
    if (v8)
    {
      v9 = *(_QWORD *)(a3 + 8);
      if (!v9)
      {
        sub_1ACBBE20C(91120);
        return;
      }
      v10 = v8;
      v11 = *(_WORD *)(v9 + 20);
      if ((v11 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
      {
        v12 = *(_DWORD *)(v9 + 16);
      }
      else if ((v11 & 0x10) != 0)
      {
        v12 = *(_DWORD *)(v9 + 16);
        if ((*(_WORD *)(v9 + 20) & 0x400) != 0)
          v12 += *(_DWORD *)v9;
      }
      else
      {
        if ((v11 & 1) != 0)
          return;
        v12 = sub_1ACBF2B3C(*(_QWORD *)(a3 + 8), 1);
      }
      if (v12 >= 4 && v12 >= __rev16(*((unsigned __int16 *)v10 + 1)) * (8 * LOBYTE(v7) + 8))
      {
        if (sqlite3_initialize() || (v16 = sub_1ACB5D828(32)) == 0)
        {
          v15 = &unk_1EECAC608;
        }
        else
        {
          v15 = (_DWORD *)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 20) = 2147483645;
          *(_WORD *)(v16 + 28) = 0;
        }
        if (__rev16(*((unsigned __int16 *)v10 + 1)))
        {
          v17 = 0;
          v36 = 2 * LOBYTE(v7);
          v18 = (2 * LOBYTE(v7));
          v35 = (8 * LOBYTE(v7) + 8);
          do
          {
            v19 = 0;
            v20 = (unsigned __int8 *)&v10[(v17 * v35) | 4];
            v21 = ((unint64_t)*v20 << 56) | ((unint64_t)v20[1] << 48) | ((unint64_t)v20[2] << 40) | ((unint64_t)v20[3] << 32) | ((unint64_t)v20[4] << 24) | ((unint64_t)v20[5] << 16) | ((unint64_t)v20[6] << 8);
            v39 = 0;
            memset(v38, 0, sizeof(v38));
            v37 = v21 + v20[7];
            v22 = (unsigned int *)&v10[v17 * v35 + 12];
            do
            {
              v23 = &v38[4 * v19 - 8];
              v24 = *v22;
              v25 = v22[1];
              v22 += 2;
              *((_DWORD *)v23 + 2) = bswap32(v24);
              *((_DWORD *)v23 + 3) = bswap32(v25);
              v19 += 2;
            }
            while (v19 < v18);
            if (v17)
            {
              v26 = v15[6];
              if ((v26 + 1) >= v15[4])
              {
                sub_1ACBC290C((uint64_t)v15, " ", 1u);
              }
              else
              {
                v15[6] = v26 + 1;
                *(_BYTE *)(*((_QWORD *)v15 + 1) + v26) = 32;
              }
            }
            sqlite3_str_appendf((sqlite3_str *)v15, "{%lld", v37);
            if (v36)
            {
              v27 = v18;
              v28 = (float *)v38;
              do
              {
                v29 = *v28++;
                sqlite3_str_appendf((sqlite3_str *)v15, " %g", v29);
                --v27;
              }
              while (v27);
            }
            v30 = v15[6];
            if ((v30 + 1) < v15[4])
            {
              v15[6] = v30 + 1;
              *(_BYTE *)(*((_QWORD *)v15 + 1) + v30) = 125;
            }
            else
            {
              sub_1ACBC290C((uint64_t)v15, "}", 1u);
            }
            ++v17;
          }
          while (v17 < __rev16(*((unsigned __int16 *)v10 + 1)));
        }
        v31 = *((unsigned __int8 *)v15 + 28);
        v32 = sqlite3_str_finish((sqlite3_str *)v15);
        if (a1)
        {
          sub_1ACBC69D0((uint64_t)a1, v32, -1, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
          if ((_DWORD)v31)
            v33 = v31;
          else
            v33 = -1;
          a1[9] = v33;
          if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
          {
            if ((_DWORD)v31 == 100)
            {
              v34 = "another row available";
            }
            else if ((_DWORD)v31 == 101)
            {
              v34 = "no more rows available";
            }
            else if (v31 > 0x1C || ((0x1410004uLL >> v31) & 1) != 0)
            {
              v34 = "unknown error";
            }
            else
            {
              v34 = off_1E5C74AE8[v31];
            }
            sub_1ACBC69D0((uint64_t)a1, v34, -1, 1u, 0);
          }
        }
        else
        {
          sub_1ACBBE20C(97480);
          sub_1ACBBE20C(97602);
        }
      }
    }
  }
}

void sub_1ACC9BE88(uint64_t a1, uint64_t a2, sqlite3_value **a3)
{
  sqlite3_value *v4;
  __int16 v5;
  int v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(97202);
    goto LABEL_13;
  }
  v5 = *((_WORD *)v4 + 10);
  if (((0x1000000010001uLL >> v5) & 1) == 0)
  {
LABEL_13:
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, "Invalid argument to rtreedepth()", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
    v8 = 97389;
    goto LABEL_16;
  }
  if ((v5 & 2) != 0 && *((_BYTE *)v4 + 22) == 1)
  {
    v7 = *((_DWORD *)v4 + 4);
    goto LABEL_12;
  }
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 1) == 0)
    {
      v7 = sub_1ACBF2B3C((uint64_t)v4, 1);
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v7 = *((_DWORD *)v4 + 4);
  if ((*((_WORD *)v4 + 10) & 0x400) != 0)
    v7 += *(_DWORD *)v4;
LABEL_12:
  if (v7 <= 1)
    goto LABEL_13;
  v9 = (unsigned __int16 *)sqlite3_value_blob(*a3);
  if (v9)
  {
    if (!a1)
    {
      v8 = 97413;
LABEL_16:
      sub_1ACBBE20C(v8);
      return;
    }
    v10 = __rev16(*v9);
    v11 = *(_QWORD *)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v11, v10);
    }
    else
    {
      *(_QWORD *)v11 = v10;
      *(_WORD *)(v11 + 20) = 4;
    }
  }
  else
  {
    sqlite3_result_error_nomem((sqlite3_context *)a1);
  }
}

void sub_1ACC9BFC8(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  sqlite3 *v12;
  int v13;
  const char *v14;
  int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)(char *);
  sqlite3 *v48;
  const char *v49;
  uint64_t v50;
  sqlite3_stmt *pStmt[2];
  sqlite3_stmt *v52[2];
  __int128 v53;
  __int128 v54;

  if ((a2 - 3) <= 0xFFFFFFFD)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, "wrong number of arguments to function rtreecheck()", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
    return;
  }
  v6 = *a3;
  if (!*a3)
    goto LABEL_15;
  v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) == 0)
    {
      v8 = sub_1ACBF2B64((int *)v6, 1);
      if (a2 != 1)
        goto LABEL_11;
      goto LABEL_16;
    }
LABEL_15:
    v8 = 0;
    if (a2 != 1)
      goto LABEL_11;
LABEL_16:
    v11 = "main";
    goto LABEL_21;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (a2 == 1)
    goto LABEL_16;
LABEL_11:
  v9 = a3[1];
  if (!v9)
    goto LABEL_20;
  v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) != 0 || *(_BYTE *)(v9 + 22) != 1)
  {
    if ((v10 & 1) == 0)
    {
      v11 = (const char *)v8;
      v8 = sub_1ACBF2B64((int *)v9, 1);
      goto LABEL_21;
    }
LABEL_20:
    v11 = (const char *)v8;
    v8 = 0;
    goto LABEL_21;
  }
  v11 = (const char *)v8;
  v8 = *(_QWORD *)(v9 + 8);
LABEL_21:
  if (!a1 || !*(_QWORD *)a1)
  {
    sub_1ACBBE20C(97935);
    v12 = 0;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)pStmt = 0u;
    *(_OWORD *)v52 = 0u;
    v48 = 0;
    v49 = v11;
    v14 = "NULL";
    v50 = v8;
    goto LABEL_29;
  }
  v12 = *(sqlite3 **)(*(_QWORD *)a1 + 24);
  v53 = 0u;
  v54 = 0u;
  *(_OWORD *)pStmt = 0u;
  *(_OWORD *)v52 = 0u;
  v48 = v12;
  v49 = v11;
  v50 = v8;
  if (!v12)
  {
    v14 = "NULL";
    goto LABEL_29;
  }
  v13 = *((unsigned __int8 *)v12 + 113);
  if (v13 == 186)
  {
LABEL_27:
    v14 = "unopened";
LABEL_29:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1ACBBE20C(189259);
LABEL_30:
    v15 = 1;
    goto LABEL_31;
  }
  if (v13 != 118)
  {
    if (v13 != 109)
    {
      v14 = "invalid";
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (!*((_BYTE *)v12 + 101))
    goto LABEL_30;
  v15 = 0;
  DWORD2(v53) = sqlite3_exec(v12, "BEGIN", 0, 0, 0);
  if (DWORD2(v53))
  {
LABEL_39:
    v22 = -1;
    goto LABEL_42;
  }
LABEL_31:
  v16 = sub_1ACC9C704((uint64_t)&v48, "SELECT * FROM %Q.'%q_rowid'", v11, v8);
  if (!v16)
  {
    if (DWORD2(v53) == 7)
      v21 = 7;
    else
      v21 = 0;
    DWORD2(v53) = v21;
    goto LABEL_39;
  }
  v17 = (unsigned __int16 *)v16;
  v18 = *(_QWORD *)(*(_QWORD *)v16 + 24);
  if (v18)
  {
    xmmword_1ECD3B1C0(v18);
    v19 = *(_QWORD *)(*(_QWORD *)v17 + 24);
    v20 = v17[130];
    if (v19)
      xmmword_1ECD3B1D0(v19);
  }
  else
  {
    v20 = v17[130];
  }
  sqlite3_finalize((sqlite3_stmt *)v17);
  v22 = 1 - v20;
LABEL_42:
  v23 = sub_1ACC9C704((uint64_t)&v48, "SELECT * FROM %Q.%Q", v11, v8);
  if (v23)
  {
    v24 = (sqlite3_stmt *)v23;
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 24);
    if (v25)
    {
      xmmword_1ECD3B1C0(v25);
      v26 = *(_QWORD *)(*(_QWORD *)v24 + 24);
      v27 = *((unsigned __int16 *)v24 + 130);
      if (v26)
        xmmword_1ECD3B1D0(v26);
    }
    else
    {
      v27 = *((unsigned __int16 *)v24 + 130);
    }
    v28 = v22 + v27;
    if (v22 + v27 < 0 != __OFADD__(v22, v27))
      v29 = v28 + 1;
    else
      v29 = v22 + v27;
    HIDWORD(pStmt[0]) = v29 >> 1;
    if (v28 > 1)
    {
      if (sqlite3_step(v24) == 100)
      {
        v30 = *(_QWORD *)(*(_QWORD *)v24 + 24);
        if (v30)
          xmmword_1ECD3B1C0(v30);
        v31 = *((_QWORD *)v24 + 20);
        if (v31 && *((unsigned __int16 *)v24 + 130) >= 2u)
        {
          v32 = (uint64_t *)(v31 + 64);
        }
        else
        {
          v33 = *(_QWORD *)v24;
          *(_DWORD *)(v33 + 80) = 25;
          sub_1ACBE938C(v33, 25);
          v32 = &qword_1ACCB6E80;
        }
        v34 = *((_WORD *)v32 + 10);
        v35 = *(_QWORD *)v24;
        v36 = *((_DWORD *)v24 + 13);
        if (v36 || (v37 = *(unsigned __int8 *)(v35 + 103), *(_BYTE *)(v35 + 103)))
        {
          v37 = sub_1ACBF2990(v35, v36);
          v35 = *(_QWORD *)v24;
        }
        v38 = v34 & 0x3F;
        *((_DWORD *)v24 + 13) = v37;
        v39 = *(_QWORD *)(v35 + 24);
        if (v39)
          xmmword_1ECD3B1D0(v39);
        LODWORD(pStmt[0]) = (0x50505050uLL >> v38) & 1;
      }
    }
    else
    {
      sub_1ACC9C818((char *)&v48, "Schema corrupt or not an rtree");
    }
    v40 = sqlite3_finalize(v24);
    if (v40 != 11)
      DWORD2(v53) = v40;
  }
  if (SHIDWORD(pStmt[0]) >= 1)
  {
    if (!DWORD2(v53))
      sub_1ACC9C8B8((uint64_t)&v48, 0, 0, 1);
    sub_1ACC9CD7C((uint64_t)&v48, "_rowid", (int)v53);
    sub_1ACC9CD7C((uint64_t)&v48, "_parent", SDWORD1(v53));
  }
  sqlite3_finalize(pStmt[1]);
  sqlite3_finalize(v52[0]);
  sqlite3_finalize(v52[1]);
  if (v15)
  {
    v41 = DWORD2(v53);
    v42 = (char *)v54;
    if (DWORD2(v53))
    {
LABEL_74:
      if (!a1)
      {
        sub_1ACBBE20C(97602);
        goto LABEL_102;
      }
      *(_DWORD *)(a1 + 36) = v41;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) == 0)
        goto LABEL_102;
      switch(v41)
      {
        case 516:
          v43 = "abort due to ROLLBACK";
          break;
        case 101:
          v43 = "no more rows available";
          break;
        case 100:
          v43 = "another row available";
          break;
        default:
          if (v41 > 0x1Cu || ((0x1410004uLL >> v41) & 1) != 0)
            v43 = "unknown error";
          else
            v43 = off_1E5C74AE8[v41];
          break;
      }
      v45 = a1;
      v46 = 0;
      goto LABEL_101;
    }
  }
  else
  {
    v44 = sqlite3_exec(v12, "END", 0, 0, 0);
    v41 = DWORD2(v53);
    if (!DWORD2(v53))
      v41 = v44;
    DWORD2(v53) = v41;
    v42 = (char *)v54;
    if (v41)
      goto LABEL_74;
  }
  if (!a1)
  {
    sub_1ACBBE20C(97480);
    goto LABEL_102;
  }
  if (v42)
    v43 = v42;
  else
    v43 = "ok";
  v45 = a1;
  v46 = -1;
LABEL_101:
  sub_1ACBC69D0(v45, v43, -1, 1u, (uint64_t (*)(uint64_t))v46);
LABEL_102:
  if (!v42)
    return;
  v47 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_108;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v42);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v42);
  v42 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v47 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_108:
    (*v47)(v42);
  }
}

uint64_t sub_1ACC9C620(uint64_t result, uint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;

  v4 = 0;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(result + 39) * (uint64_t)a3;
  *a4 = (((unint64_t)*(unsigned __int8 *)(v5 + v6 + 4) << 56) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v5 + v6 + 10) << 8))
      + *(unsigned __int8 *)(v5 + v6 + 11);
  v7 = (unsigned int *)(v5 + (int)v6 + 12);
  do
  {
    v8 = &a4[v4 / 2];
    *((_DWORD *)v8 + 2) = bswap32(*v7);
    *((_DWORD *)v8 + 3) = bswap32(v7[1]);
    v7 += 2;
    v4 += 2;
  }
  while (v4 < *(unsigned __int8 *)(result + 37));
  return result;
}

unint64_t sub_1ACC9C6B4(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(a2 + 24) + *(unsigned __int8 *)(a1 + 39) * (uint64_t)a3);
  return (((unint64_t)v3[4] << 56) | ((unint64_t)v3[5] << 48) | ((unint64_t)v3[6] << 40) | ((unint64_t)v3[7] << 32) | ((unint64_t)v3[8] << 24) | ((unint64_t)v3[9] << 16) | ((unint64_t)v3[10] << 8))
       + v3[11];
}

uint64_t sub_1ACC9C704(uint64_t a1, char *a2, ...)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t (**v6)(unsigned __int8 *);
  _QWORD v8[2];
  va_list va;

  va_start(va, a2);
  v8[0] = 0;
  va_copy((va_list)&v8[1], va);
  v3 = (unsigned __int8 *)sqlite3_vmprintf(a2, va);
  v5 = v3;
  if (*(_DWORD *)(a1 + 64))
  {
    if (!v3)
      return v8[0];
  }
  else
  {
    if (!v3)
    {
      *(_DWORD *)(a1 + 64) = 7;
      return v8[0];
    }
    *(_DWORD *)(a1 + 64) = sub_1ACB5C66C(*(_QWORD *)a1, v3, 0xFFFFFFFFLL, 128, 0, v8, 0, v4);
  }
  v6 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_11;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v5);
  v5 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_11:
    (*v6)(v5);
  }
  return v8[0];
}

char *sub_1ACC9C818(char *result, char *a2, ...)
{
  char *v2;
  uint64_t v3;
  char *v4;
  va_list va;

  va_start(va, a2);
  if (!*((_DWORD *)result + 16))
  {
    v2 = result;
    if (*((int *)result + 20) <= 99)
    {
      result = sqlite3_vmprintf(a2, va);
      if (!result)
        goto LABEL_7;
      v3 = *((_QWORD *)v2 + 9);
      v4 = "\n";
      if (!v3)
        v4 = &byte_1ACCBEAEE;
      result = sqlite3_mprintf("%z%s%z", v3, v4, result);
      *((_QWORD *)v2 + 9) = result;
      if (!result)
LABEL_7:
        *((_DWORD *)v2 + 16) = 7;
      ++*((_DWORD *)v2 + 20);
    }
  }
  return result;
}

uint64_t sub_1ACC9C8B8(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  const void *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t (**v17)(unsigned __int16 *);
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (*(_DWORD *)(result + 64))
    return result;
  v7 = result;
  v8 = *(_QWORD **)(result + 32);
  if (!v8)
  {
    result = sub_1ACC9C704(result, "SELECT data FROM %Q.'%q_node' WHERE nodeno=?", *(_QWORD *)(result + 8), *(_QWORD *)(result + 16));
    *(_QWORD *)(v7 + 32) = result;
    if (*(_DWORD *)(v7 + 64))
      return result;
    v8 = (_QWORD *)result;
  }
  if (!sub_1ACBA0E50((uint64_t)v8, 0))
  {
    v9 = v8[16];
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v9, a4);
    }
    else
    {
      *(_QWORD *)v9 = a4;
      *(_WORD *)(v9 + 20) = 4;
    }
    v10 = *(_QWORD *)(*v8 + 24);
    if (v10)
      xmmword_1ECD3B1D0(v10);
  }
  if (sqlite3_step(*(sqlite3_stmt **)(v7 + 32)) == 100)
  {
    v11 = a2;
    v12 = sqlite3_column_bytes(*(sqlite3_stmt **)(v7 + 32), 0);
    v13 = sqlite3_column_blob(*(sqlite3_stmt **)(v7 + 32), 0);
    if (sqlite3_initialize() || (v15 = (unsigned __int16 *)sub_1ACB5D828(v12)) == 0)
    {
      v12 = 0;
      v14 = 0;
      *(_DWORD *)(v7 + 64) = 7;
    }
    else
    {
      v14 = v15;
      memcpy(v15, v13, v12);
    }
    a2 = v11;
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  result = sqlite3_reset(*(sqlite3_stmt **)(v7 + 32));
  if (!*(_DWORD *)(v7 + 64))
  {
    *(_DWORD *)(v7 + 64) = result;
    if (!v14 && !(_DWORD)result)
      return (uint64_t)sub_1ACC9C818((char *)v7, "Node %lld missing from database", a4);
  }
  if (!v14)
    return result;
  if (v12 > 3)
  {
    if (!a3)
    {
      a2 = __rev16(*v14);
      if (a2 >= 0x29)
      {
        sub_1ACC9C818((char *)v7, "Rtree depth out of range (%d)");
        goto LABEL_31;
      }
    }
    v16 = __rev16(v14[1]);
    if ((int)(((8 * *(_DWORD *)(v7 + 28) + 8) * v16) | 4) > v12)
    {
      sub_1ACC9C818((char *)v7, "Node %lld is too small for cell count of %d (%d bytes)");
      goto LABEL_31;
    }
    if (!v16)
      goto LABEL_31;
    v18 = 0;
    v35 = a2 - 1;
    v34 = (char *)v14 + 19;
    v37 = v14;
    v38 = a2;
    v36 = v16;
    while (1)
    {
      v19 = *(int *)(v7 + 28);
      v20 = 8 * v19 + 8;
      v21 = v18;
      v22 = (unsigned __int8 *)v14 + (int)v20 * (uint64_t)v18;
      v39 = v22[4];
      v40 = v22[5];
      v41 = v22[6];
      v42 = v22[7];
      v43 = v22[8];
      v44 = v22[9];
      v45 = v22[10];
      v46 = v22[11];
      if ((int)v19 >= 1)
        break;
LABEL_64:
      v32 = (v39 << 56) | (v40 << 48) | (v41 << 40) | (v42 << 32) | (v43 << 24) | (v44 << 16) | (v45 << 8);
      v33 = v32 + v46;
      if (v38 < 1)
      {
        sub_1ACC9CE1C(v7, 1u, v32 + v46, a4);
        ++*(_DWORD *)(v7 + 56);
      }
      else
      {
        sub_1ACC9CE1C(v7, 0, v32 + v46, a4);
        sub_1ACC9C8B8(v7, v35, v22 + 12, v33);
        ++*(_DWORD *)(v7 + 60);
      }
      v14 = v37;
      v18 = v21 + 1;
      if (v21 + 1 == v36)
        goto LABEL_31;
    }
    v23 = 0;
    v24 = a3 + 3;
    v25 = &v34[v18 * v20];
    while (1)
    {
      v26 = COERCE_FLOAT(bswap32(*(_DWORD *)(v25 - 7)));
      v27 = COERCE_FLOAT(bswap32(*(_DWORD *)(v25 - 3)));
      if (*(_DWORD *)(v7 + 24))
        break;
      if (v26 > v27)
        goto LABEL_47;
LABEL_48:
      if (a3)
      {
        v28 = COERCE_FLOAT(bswap32(*(_DWORD *)(v24 - 3)));
        v29 = COERCE_FLOAT(bswap32(*(_DWORD *)(v24 + 1)));
        if (*(_DWORD *)(v7 + 24))
        {
          if (SLODWORD(v26) >= SLODWORD(v28) && SLODWORD(v27) <= SLODWORD(v29))
            goto LABEL_44;
        }
        else if (v26 >= v28 && v27 <= v29)
        {
          goto LABEL_44;
        }
        sub_1ACC9C818((char *)v7, "Dimension %d of cell %d on node %lld is corrupt relative to parent", v23, v21, a4);
      }
LABEL_44:
      v25 += 8;
      ++v23;
      v24 += 8;
      if (v23 >= *(int *)(v7 + 28))
        goto LABEL_64;
    }
    if (SLODWORD(v26) <= SLODWORD(v27))
      goto LABEL_48;
LABEL_47:
    sub_1ACC9C818((char *)v7, "Dimension %d of cell %d on node %lld is corrupt", v23, v21, a4);
    goto LABEL_48;
  }
  sub_1ACC9C818((char *)v7, "Node %lld is too small (%d bytes)");
LABEL_31:
  v17 = (uint64_t (**)(unsigned __int16 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v17)(v14);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v14);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v14);
  v14 = (unsigned __int16 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v17 = (uint64_t (**)(unsigned __int16 *))&xmmword_1ECD3B1D0;
    return (*v17)(v14);
  }
  return result;
}

uint64_t sub_1ACC9CD7C(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v5;
  sqlite3_stmt *v6;
  sqlite3_int64 v7;

  if (!*(_DWORD *)(result + 64))
  {
    v5 = result;
    result = sub_1ACC9C704(result, "SELECT count(*) FROM %Q.'%q%s'", *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), a2);
    if (result)
    {
      v6 = (sqlite3_stmt *)result;
      if (sqlite3_step((sqlite3_stmt *)result) == 100)
      {
        v7 = sqlite3_column_int64(v6, 0);
        if (v7 != a3)
          sub_1ACC9C818((char *)v5, "Wrong number of entries in %%%s table - expected %lld, actual %lld", a2, a3, v7);
      }
      result = sqlite3_finalize(v6);
      *(_DWORD *)(v5 + 64) = result;
    }
  }
  return result;
}

uint64_t sub_1ACC9CE1C(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  _QWORD *v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v6 = result;
  v7 = result + 8 * a2;
  v10 = *(sqlite3_stmt **)(v7 + 40);
  v9 = (_QWORD *)(v7 + 40);
  v8 = v10;
  if (v10)
  {
    if (*(_DWORD *)(result + 64))
      return result;
  }
  else
  {
    result = sub_1ACC9C704(result, off_1E5C75408[a2], *(_QWORD *)(result + 8), *(_QWORD *)(result + 16));
    v8 = (sqlite3_stmt *)result;
    *v9 = result;
    if (*(_DWORD *)(v6 + 64))
      return result;
  }
  if (!sub_1ACBA0E50((uint64_t)v8, 0))
  {
    v11 = *((_QWORD *)v8 + 16);
    if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v11, a3);
    }
    else
    {
      *(_QWORD *)v11 = a3;
      *(_WORD *)(v11 + 20) = 4;
    }
    v12 = *(_QWORD *)(*(_QWORD *)v8 + 24);
    if (v12)
      xmmword_1ECD3B1D0(v12);
  }
  v13 = sqlite3_step(v8);
  if (v13 == 100)
  {
    if (sqlite3_column_int64(v8, 0) != a4)
      sub_1ACC9C818((char *)v6, "Found (%lld -> %lld) in %s table, expected (%lld -> %lld)");
  }
  else if (v13 == 101)
  {
    sub_1ACC9C818((char *)v6, "Mapping (%lld -> %lld) missing from %s table");
  }
  result = sqlite3_reset(v8);
  if (!*(_DWORD *)(v6 + 64))
    *(_DWORD *)(v6 + 64) = result;
  return result;
}

uint64_t sub_1ACC9CF98(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  return sub_1ACC9EDD4(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t sub_1ACC9CFA0(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  return sub_1ACC9EDD4(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1ACC9CFA8(uint64_t a1, unsigned int *a2)
{
  int8x16_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int8x16_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x4_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  char v26;
  char *v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _OWORD v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = 0uLL;
  memset(v41, 0, 41);
  v5 = *a2;
  if ((int)v5 >= 1)
  {
    v6 = *((_QWORD *)a2 + 1);
    if (v5 >= 8)
    {
      v7 = v5 & 0x7FFFFFF8;
      v10 = (unsigned __int8 *)(v6 + 52);
      v11 = v5 & 0xFFFFFFF8;
      v12 = 0uLL;
      do
      {
        v13.i16[0] = *(v10 - 48);
        v13.i16[1] = *(v10 - 36);
        v13.i16[2] = *(v10 - 24);
        v13.i16[3] = *(v10 - 12);
        v14.i16[0] = *v10;
        v14.i16[1] = v10[12];
        v14.i16[2] = v10[24];
        v14.i16[3] = v10[36];
        v15 = vceq_s16(v13, (int16x4_t)0x40004000400040);
        v16 = vceq_s16(v14, (int16x4_t)0x40004000400040);
        v4 = (int8x16_t)vsubw_s16((int32x4_t)vbicq_s8(v4, (int8x16_t)vmovl_s16(v15)), v15);
        v12 = (int8x16_t)vsubw_s16((int32x4_t)vbicq_s8(v12, (int8x16_t)vmovl_s16(v16)), v16);
        v10 += 96;
        v11 -= 8;
      }
      while (v11);
      v17 = (int32x4_t)vorrq_s8(v4, v12);
      v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v17, v17))) & 1;
      if (v7 == v5)
      {
LABEL_12:
        v21 = 0;
        v22 = 0;
        v9 = 0;
        v23 = (unsigned __int8 *)(*((_QWORD *)a2 + 1) + 4);
        while (1)
        {
          if (v8)
          {
            if (v23[1])
              goto LABEL_15;
          }
          else if (v23[1])
          {
            v24 = *((_DWORD *)v23 - 1);
            if (v24 > 0)
              goto LABEL_19;
            if (*v23 == 2)
            {
              v36 = *((_QWORD *)a2 + 4);
              if (v22)
              {
                if (v22 < 2)
                {
                  v37 = 0;
                  goto LABEL_50;
                }
                v37 = v22 & 0x7FFFFFFE;
                v38 = v36 + 8;
                v39 = v37;
                do
                {
                  *(_DWORD *)(v38 - 8) = 0;
                  *(_DWORD *)v38 = 0;
                  *(_BYTE *)(v38 - 4) = 0;
                  *(_BYTE *)(v38 + 4) = 0;
                  v38 += 16;
                  v39 -= 2;
                }
                while (v39);
                if (v22 != v37)
                {
LABEL_50:
                  v40 = (_BYTE *)(v36 + 8 * v37 + 4);
                  do
                  {
                    *((_DWORD *)v40 - 1) = 0;
                    *v40 = 0;
                    v40 += 8;
                    ++v37;
                  }
                  while (v22 != v37);
                }
              }
              result = 0;
              a2[10] = 1;
              *(_DWORD *)(v36 + v21) = 1;
              *(_BYTE *)(v36 + 8 * v22 + 4) = 1;
              *((_QWORD *)a2 + 8) = 0x403E000000000000;
              *((_QWORD *)a2 + 9) = 1;
              a2[20] = 1;
              return result;
            }
LABEL_15:
            v24 = *((_DWORD *)v23 - 1);
            if (v24 >= 1)
            {
LABEL_19:
              if (v24 <= *(unsigned __int8 *)(a1 + 37))
              {
                v25 = 0;
                v26 = 65;
                switch(*v23)
                {
                  case 2u:
                    goto LABEL_23;
                  case 3u:
                  case 5u:
                  case 6u:
                  case 7u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                    goto LABEL_27;
                  case 4u:
                    LOBYTE(v25) = 0;
                    v26 = 69;
                    goto LABEL_23;
                  case 8u:
                    LOBYTE(v25) = 1;
                    v26 = 66;
                    goto LABEL_23;
                  case 0x10u:
                    LOBYTE(v25) = 0;
                    v26 = 67;
                    goto LABEL_23;
                  case 0x20u:
                    LOBYTE(v25) = 1;
                    v26 = 68;
                    goto LABEL_23;
                  default:
                    goto LABEL_21;
                }
                goto LABEL_27;
              }
            }
            v25 = *v23;
LABEL_21:
            if (v25 == 64)
            {
              LOBYTE(v25) = 1;
              v26 = 70;
LABEL_23:
              v27 = (char *)v41 + v9;
              *v27 = v26;
              v28 = v9 + 3;
              v29 = __OFADD__(v9, 2);
              v9 += 2;
              v27[1] = v24 + 47;
              if (v9 < 0 != v29)
                v30 = v28;
              else
                v30 = v9;
              v31 = *((_QWORD *)a2 + 4) + v21;
              *(_DWORD *)v31 = v30 >> 1;
              *(_BYTE *)(v31 + 4) = v25;
            }
          }
LABEL_27:
          if (++v22 < v5)
          {
            v21 += 8;
            v23 += 12;
            if (v9 < 40)
              continue;
          }
          a2[10] = 2;
          a2[14] = 1;
          if (v9 >= 1)
          {
            v32 = sqlite3_mprintf("%s", (const char *)v41);
            *((_QWORD *)a2 + 6) = v32;
            if (!v32)
              return 7;
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v18 = (unsigned __int8 *)(v6 + 12 * v7 + 4);
    v19 = v5 - v7;
    do
    {
      v20 = *v18;
      v18 += 12;
      if (v20 == 64)
        v8 = 1;
      --v19;
    }
    while (v19);
    goto LABEL_12;
  }
  v9 = 0;
  a2[10] = 2;
  a2[14] = 1;
LABEL_39:
  result = 0;
  if (v9 >= 0)
    v34 = v9;
  else
    v34 = v9 + 1;
  v35 = *(uint64_t *)(a1 + 72) >> (v34 >> 1);
  *((double *)a2 + 8) = (double)v35 * 6.0;
  *((_QWORD *)a2 + 9) = v35;
  return result;
}

uint64_t sub_1ACC9D32C(uint64_t a1)
{
  sub_1ACC9FA7C(a1);
  return 0;
}

uint64_t sub_1ACC9D344(uint64_t a1)
{
  char *v2;
  const char *v3;
  _QWORD *v4;
  sqlite3_stmt *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(const char *);

  v2 = sqlite3_mprintf("DROP TABLE '%q'.'%q_node';DROP TABLE '%q'.'%q_rowid';DROP TABLE '%q'.'%q_parent';",
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56),
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56),
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56));
  if (!v2)
    return 7;
  v3 = v2;
  v4 = *(_QWORD **)(a1 + 112);
  if (v4 && !*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 112) = 0;
    v5 = (sqlite3_stmt *)v4[3];
    v6 = (_QWORD *)v4[4];
    v7 = v6[3];
    if (v7)
      xmmword_1ECD3B1C0(v7);
    sub_1ACBE0F9C(v6, v4);
    v8 = v6[3];
    if (v8)
      xmmword_1ECD3B1D0(v8);
    sqlite3_finalize(v5);
  }
  v9 = sqlite3_exec(*(sqlite3 **)(a1 + 24), v3, 0, 0, 0);
  v10 = (void (**)(const char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v3);
    v3 = (const char *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_16;
    v10 = (void (**)(const char *))&xmmword_1ECD3B1D0;
  }
  (*v10)(v3);
LABEL_16:
  if (!(_DWORD)v9)
    sub_1ACC9FA7C(a1);
  return v9;
}

uint64_t sub_1ACC9D4AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (sqlite3_initialize())
  {
    v4 = 0;
  }
  else
  {
    v4 = sub_1ACB5D828(296);
    if (v4)
    {
      v5 = 0;
      *(_QWORD *)(v4 + 288) = 0;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      ++*(_DWORD *)(a1 + 80);
      *(_QWORD *)v4 = a1;
      goto LABEL_6;
    }
  }
  v5 = 7;
LABEL_6:
  *a2 = v4;
  return v5;
}

uint64_t sub_1ACC9D534(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (**v3)(_QWORD);
  int v4;
  _QWORD *v5;
  sqlite3_stmt *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  v2 = *a1;
  sub_1ACC9FC58((uint64_t)a1);
  sqlite3_finalize((sqlite3_stmt *)v1[7]);
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_6;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
LABEL_6:
    (*v3)(v1);
  }
  v4 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v4;
  v5 = *(_QWORD **)(v2 + 112);
  if (v5)
  {
    if (!*(_BYTE *)(v2 + 40) && v4 == 0)
    {
      *(_QWORD *)(v2 + 112) = 0;
      v7 = (sqlite3_stmt *)v5[3];
      v8 = (_QWORD *)v5[4];
      v9 = v8[3];
      if (v9)
        xmmword_1ECD3B1C0(v9);
      sub_1ACBE0F9C(v8, v5);
      v10 = v8[3];
      if (v10)
        xmmword_1ECD3B1D0(v10);
      sqlite3_finalize(v7);
    }
  }
  return 0;
}

uint64_t sub_1ACC9D654(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  int v45;
  double v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  sqlite3_int64 v56;
  uint64_t v57;
  uint64_t v58;

  v10 = *(_QWORD *)a1;
  v58 = 0;
  ++*(_DWORD *)(v10 + 64);
  sub_1ACC9FC58(a1);
  *(_DWORD *)(a1 + 12) = a2;
  if (a2 == 1)
  {
    v57 = 0;
    v11 = *a5;
    if (*a5)
    {
      v12 = *(_WORD *)(v11 + 20);
      if ((v12 & 0x24) != 0)
      {
        v13 = *(_QWORD *)v11;
        goto LABEL_14;
      }
      if ((v12 & 8) != 0)
      {
        v48 = *(double *)v11;
        if (*(double *)v11 >= -9.22337204e18)
        {
          if (v48 <= 9.22337204e18)
            v13 = (uint64_t)v48;
          else
            v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v13 = 0x8000000000000000;
        }
LABEL_14:
        v56 = 0;
        v15 = *a5;
        if (*a5)
        {
          v17 = *(_WORD *)(v15 + 20);
          if (((0x4000000040004uLL >> v17) & 1) != 0)
          {
            sub_1ACBCA9CC(*a5, 0);
            v17 = *(_WORD *)(v15 + 20);
          }
          v18 = byte_1ACCB6445[v17 & 0x3F];
          if (v18 == 1
            || v18 == 2
            && ((v19 = *a5) == 0
              ? (sub_1ACBBE20C(89734), v21 = 0.0)
              : (v20 = *(_WORD *)(v19 + 20), (v20 & 8) != 0)
              ? (v21 = *(double *)v19)
              : (v20 & 0x24) == 0
              ? ((v20 & 0x12) == 0
               ? (v21 = 0.0)
               : (v21 = sub_1ACBF2F88(v19)))
              : (v21 = (double)*(uint64_t *)v19),
                v21 == (double)v13))
          {
            v15 = sub_1ACCA0264(v10, v13, &v57, &v56);
            if (!(_DWORD)v15)
            {
              v49 = v57;
              if (v57)
              {
                v50 = sub_1ACCA0358(a1, 0, 0.0);
                *(_QWORD *)(a1 + 88) = v49;
                *(_QWORD *)(v50 + 8) = v56;
                *(_BYTE *)(v50 + 17) = 1;
                v51 = *(_QWORD *)(v49 + 24);
                v52 = __rev16(*(unsigned __int16 *)(v51 + 2));
                if ((_DWORD)v52)
                {
                  v53 = 0;
                  v54 = (unsigned __int8 *)(v51 + 5);
                  while ((((unint64_t)*(v54 - 1) << 56) | ((unint64_t)*v54 << 48) | ((unint64_t)v54[1] << 40) | ((unint64_t)v54[2] << 32) | ((unint64_t)v54[3] << 24) | ((unint64_t)v54[4] << 16) | ((unint64_t)v54[5] << 8))
                        + v54[6] != v13)
                  {
                    v54 += *(unsigned __int8 *)(v10 + 39);
                    if (v52 == ++v53)
                      goto LABEL_98;
                  }
                  v15 = 0;
                  *(_BYTE *)(v50 + 18) = v53;
                }
                else
                {
LABEL_98:
                  v15 = 267;
                  *(_BYTE *)(v50 + 18) = 0;
                }
                goto LABEL_101;
              }
            }
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          sub_1ACBBE20C(97202);
        }
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_101;
      }
      if ((v12 & 0x12) != 0 && *(_QWORD *)(v11 + 8))
      {
        v13 = sub_1ACBF2FC0(v11);
        goto LABEL_14;
      }
    }
    else
    {
      sub_1ACBBE20C(89699);
    }
    v13 = 0;
    goto LABEL_14;
  }
  v14 = sub_1ACCA04B0(v10, 1, 0, &v58);
  v15 = v14;
  if ((int)a4 < 1 || (_DWORD)v14)
  {
    if ((_DWORD)v14)
      goto LABEL_101;
LABEL_10:
    v16 = sub_1ACCA0358(a1, (*(_BYTE *)(v10 + 44) + 1), 0.0);
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 1;
      *(_WORD *)(v16 + 17) = 1;
      *(_QWORD *)(a1 + 88) = v58;
      v58 = 0;
      v15 = sub_1ACCA0928(a1);
      goto LABEL_101;
    }
    return 7;
  }
  if (sqlite3_initialize())
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = a4;
    v15 = 7;
    goto LABEL_101;
  }
  v22 = (void *)sub_1ACB5D828(24 * a4);
  *(_QWORD *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 16) = a4;
  if (!v22)
  {
LABEL_87:
    v15 = 7;
    goto LABEL_101;
  }
  bzero(v22, 24 * a4);
  bzero((void *)(a1 + 128), 4 * *(int *)(v10 + 44) + 4);
  v23 = 0;
  v24 = 24 * a4;
  v25 = (char *)(a3 + 1);
  while (1)
  {
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *a5;
    if (*a5)
    {
      v29 = *(_WORD *)(v28 + 20);
      if (((0x4000000040004uLL >> v29) & 1) != 0)
      {
        sub_1ACBCA9CC(*a5, 0);
        v29 = *(_WORD *)(v28 + 20);
      }
      v30 = byte_1ACCB6445[v29 & 0x3F];
    }
    else
    {
      sub_1ACBBE20C(97202);
      v30 = 0;
    }
    v31 = *(v25 - 1);
    v32 = (_DWORD *)(v27 + v23);
    v32[1] = v31;
    *v32 = *v25 - 48;
    if (v31 >= 70)
      break;
    if (v30 == 2)
    {
      v42 = *a5;
      if (*a5)
      {
        v43 = *(_WORD *)(v42 + 20);
        if ((v43 & 8) != 0)
        {
          v44 = *(double *)v42;
        }
        else if ((v43 & 0x24) != 0)
        {
          v44 = (double)*(uint64_t *)v42;
        }
        else if ((v43 & 0x12) != 0)
        {
          v44 = sub_1ACBF2F88(v42);
        }
        else
        {
          v44 = 0.0;
        }
      }
      else
      {
        sub_1ACBBE20C(89734);
        v44 = 0.0;
      }
      *(double *)(v27 + v23 + 8) = v44;
      goto LABEL_31;
    }
    if (v30 != 1)
    {
      *(_QWORD *)(v27 + v23 + 8) = 0;
      if (v30 == 5 || (v31 & 0xFFFFFFFE) != 0x42)
        v45 = 64;
      else
        v45 = 63;
LABEL_62:
      v32[1] = v45;
      goto LABEL_31;
    }
    v39 = *a5;
    if (!*a5)
    {
      sub_1ACBBE20C(89699);
LABEL_64:
      *(_QWORD *)(v27 + v23 + 8) = 0;
      goto LABEL_31;
    }
    v40 = *(_WORD *)(v39 + 20);
    if ((v40 & 0x24) != 0)
    {
      v41 = *(_QWORD *)v39;
    }
    else if ((v40 & 8) != 0)
    {
      v46 = *(double *)v39;
      if (*(double *)v39 < -9.22337204e18)
      {
        v47 = 0xC3E0000000000000;
        goto LABEL_78;
      }
      if (v46 > 9.22337204e18)
      {
        v47 = 0x43E0000000000000;
LABEL_78:
        *(_QWORD *)(v27 + v23 + 8) = v47;
LABEL_79:
        if (v31 == 69)
        {
          v45 = 68;
        }
        else
        {
          if (v31 != 67)
            goto LABEL_31;
          v45 = 66;
        }
        goto LABEL_62;
      }
      v41 = (uint64_t)v46;
    }
    else
    {
      if ((v40 & 0x12) == 0 || !*(_QWORD *)(v39 + 8))
        goto LABEL_64;
      v41 = sub_1ACBF2FC0(v39);
    }
    *(double *)(v27 + v23 + 8) = (double)v41;
    if ((unint64_t)(v41 - 0x1000000000000) <= 0xFFFE000000000000)
    {
      v31 = v32[1];
      goto LABEL_79;
    }
LABEL_31:
    ++a5;
    v23 += 24;
    v25 += 2;
    if (v24 == v23)
      goto LABEL_10;
  }
  v33 = *a5;
  if (*a5)
  {
    if ((*(_WORD *)(v33 + 20) & 0xFBF) != 0xA01)
      goto LABEL_110;
    if (*(_BYTE *)(v33 + 23) != 112)
      goto LABEL_110;
    if (strcmp(*(const char **)v33, "RtreeMatchArg"))
      goto LABEL_110;
    v34 = *(unsigned int **)(v33 + 8);
    if (!v34)
      goto LABEL_110;
    v35 = *v34;
    if (sqlite3_initialize())
      goto LABEL_87;
    v36 = (_OWORD *)sub_1ACB5D828(v35 + 112);
    if (!v36)
      goto LABEL_87;
    v37 = v36;
    v36[5] = 0u;
    v36[6] = 0u;
    v36[3] = 0u;
    v36[4] = 0u;
    v36[1] = 0u;
    v36[2] = 0u;
    *v36 = 0u;
    memcpy(v36 + 7, v34, *v34);
    *(_QWORD *)v37 = *((_QWORD *)v37 + 18);
    *((_DWORD *)v37 + 2) = *((_DWORD *)v37 + 38);
    *((_QWORD *)v37 + 2) = (char *)v37 + 168;
    *((_QWORD *)v37 + 13) = *((_QWORD *)v37 + 20);
    v38 = *((_QWORD *)v37 + 15);
    if (!v38)
    {
      v32[1] = 71;
      v38 = *((_QWORD *)v37 + 16);
    }
    v26 = v27 + v23;
    *(_QWORD *)(v26 + 8) = v38;
    *(_QWORD *)(v26 + 16) = v37;
    *((_DWORD *)v37 + 14) = *(unsigned __int8 *)(v10 + 37);
    *((_QWORD *)v37 + 6) = a1 + 128;
    *((_DWORD *)v37 + 16) = *(_DWORD *)(v10 + 44) + 1;
    goto LABEL_31;
  }
  sub_1ACBBE20C(97100);
LABEL_110:
  v15 = 1;
LABEL_101:
  sub_1ACC9FEC4(v10, v58);
  sub_1ACC9FA7C(v10);
  return v15;
}

uint64_t sub_1ACC9DD1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    *(_BYTE *)(a1 + 10) = 0;
    sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
  }
  sub_1ACCA11B4(a1);
  return sub_1ACCA0928(a1);
}

uint64_t sub_1ACC9DD58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1ACC9DD60(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  sqlite3_value *v19;
  sqlite3_int64 *v20;
  uint64_t result;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  sqlite3_stmt **v27;
  sqlite3_stmt *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = *(_QWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    v13 = a1 + 64;
  }
  else if (*(_DWORD *)(a1 + 36))
  {
    v13 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v13 = 0;
  }
  v14 = a1 + 8 * (1 - v12);
  v17 = *(_QWORD *)(v14 + 88);
  v15 = (uint64_t *)(v14 + 88);
  v16 = v17;
  if (v17)
  {
    if (!v13)
      return 0;
  }
  else
  {
    if ((_DWORD)v12 == 1)
      v20 = (sqlite3_int64 *)(a1 + 72);
    else
      v20 = (sqlite3_int64 *)(*(_QWORD *)(a1 + 48) + 8);
    result = sub_1ACCA04B0(*(_QWORD *)a1, *v20, 0, v15);
    if ((_DWORD)result)
      return result;
    v16 = *v15;
    if (!v13)
      return 0;
  }
  if (!a3)
  {
    if (a2)
    {
      v22 = (unsigned __int8 *)(*(_QWORD *)(v16 + 24)
                              + *(unsigned __int8 *)(v11 + 39) * (unint64_t)*(unsigned __int8 *)(v13 + 18));
      v23 = (((unint64_t)v22[4] << 56) | ((unint64_t)v22[5] << 48) | ((unint64_t)v22[6] << 40) | ((unint64_t)v22[7] << 32) | ((unint64_t)v22[8] << 24) | ((unint64_t)v22[9] << 16) | ((unint64_t)v22[10] << 8))
          + v22[11];
LABEL_22:
      v25 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) == 0)
      {
        result = 0;
        *(_QWORD *)v25 = v23;
        *(_WORD *)(v25 + 20) = 4;
        return result;
      }
      sub_1ACBF327C(*a2, v23);
      return 0;
    }
    v26 = 97423;
LABEL_37:
    sub_1ACBBE20C(v26);
    return 0;
  }
  v18 = *(unsigned __int8 *)(v11 + 37);
  if (v18 >= a3)
  {
    v24 = (unsigned __int8 *)(*(_QWORD *)(v16 + 24)
                            + *(unsigned __int8 *)(v11 + 39) * *(unsigned __int8 *)(v13 + 18)
                            + 4 * a3
                            + 8);
    v23 = (*v24 << 24) | ((unint64_t)v24[1] << 16) | ((unint64_t)v24[2] << 8) | v24[3];
    if (*(_BYTE *)(v11 + 38))
    {
      if (a2)
        goto LABEL_22;
      v26 = 97413;
    }
    else
    {
      if (a2)
      {
        v36 = COERCE_FLOAT(_byteswap_ulong(*(_DWORD *)v24));
        v37 = *a2;
        if ((*(_WORD *)(v37 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v37);
        else
          *(_WORD *)(v37 + 20) = 1;
        result = 0;
        *(double *)v37 = v36;
        *(_WORD *)(v37 + 20) = 8;
        return result;
      }
      v26 = 97379;
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(a1 + 10))
  {
LABEL_11:
    v19 = sqlite3_column_value(*(sqlite3_stmt **)(a1 + 56), a3 - v18 + 1);
    sqlite3_result_value((sqlite3_context *)a2, v19);
    return 0;
  }
  v27 = (sqlite3_stmt **)(a1 + 56);
  v28 = *(sqlite3_stmt **)(a1 + 56);
  if (!v28)
  {
    result = sub_1ACB5C66C(*(_QWORD *)(v11 + 24), *(unsigned __int8 **)(v11 + 88), 0xFFFFFFFFLL, 128, 0, (_QWORD *)(a1 + 56), 0, a8);
    if ((_DWORD)result)
      return result;
    v28 = *v27;
  }
  v29 = (unsigned __int8 *)(*(_QWORD *)(v16 + 24)
                          + *(unsigned __int8 *)(v11 + 39) * (unint64_t)*(unsigned __int8 *)(v13 + 18));
  v30 = v29[4];
  v31 = v29[5];
  v32 = v29[6];
  v33 = v29[7];
  v41 = v29[8];
  v42 = v29[9];
  v43 = v29[10];
  v44 = v29[11];
  if (!sub_1ACBA0E50((uint64_t)v28, 0))
  {
    v34 = ((v30 << 56) | (v31 << 48) | (v32 << 40) | (v33 << 32) | (v41 << 24) | (v42 << 16) | (v43 << 8)) + v44;
    v35 = *((_QWORD *)v28 + 16);
    if ((*(_WORD *)(v35 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v35, v34);
    }
    else
    {
      *(_QWORD *)v35 = v34;
      *(_WORD *)(v35 + 20) = 4;
    }
    v38 = *(_QWORD *)(*(_QWORD *)v28 + 24);
    if (v38)
      xmmword_1ECD3B1D0(v38);
  }
  v39 = sqlite3_step(*v27);
  if (v39 == 100)
  {
    *(_BYTE *)(a1 + 10) = 1;
    v18 = *(unsigned __int8 *)(v11 + 37);
    goto LABEL_11;
  }
  v40 = v39;
  sqlite3_reset(*v27);
  if (v40 == 101)
    return 0;
  else
    return v40;
}

uint64_t sub_1ACC9E0EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  sqlite3_int64 *v11;
  unsigned __int8 *v12;

  v4 = *((unsigned __int8 *)a1 + 9);
  if (*((_BYTE *)a1 + 9))
  {
    v5 = a1 + 8;
  }
  else if (*((_DWORD *)a1 + 9))
  {
    v5 = (uint64_t *)a1[6];
  }
  else
  {
    v5 = 0;
  }
  v6 = &a1[1 - v4];
  v9 = v6[11];
  v8 = v6 + 11;
  v7 = v9;
  if (v9)
  {
    result = 0;
LABEL_12:
    if (v5)
    {
      v12 = (unsigned __int8 *)(*(_QWORD *)(v7 + 24)
                              + *(unsigned __int8 *)(*a1 + 39) * (unint64_t)*((unsigned __int8 *)v5 + 18));
      *a2 = (((unint64_t)v12[4] << 56) | ((unint64_t)v12[5] << 48) | ((unint64_t)v12[6] << 40) | ((unint64_t)v12[7] << 32) | ((unint64_t)v12[8] << 24) | ((unint64_t)v12[9] << 16) | ((unint64_t)v12[10] << 8))
          + v12[11];
    }
    return result;
  }
  if ((_DWORD)v4 == 1)
    v11 = a1 + 9;
  else
    v11 = (sqlite3_int64 *)(a1[6] + 8);
  result = sub_1ACCA04B0(*a1, *v11, 0, v8);
  v7 = *v8;
  if (!(_DWORD)result)
    goto LABEL_12;
  return result;
}

uint64_t sub_1ACC9E1E8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  float v27;
  double v28;
  float v29;
  float v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  float v34;
  double v35;
  float v36;
  float v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  unsigned int v45;
  double v46;
  _QWORD *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  sqlite3_stmt *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  double v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  _OWORD v78[3];

  if (!*(_DWORD *)(a1 + 84))
  {
    v5 = a4;
    ++*(_DWORD *)(a1 + 64);
    memset(v78, 0, sizeof(v78));
    if (a2 < 2)
    {
LABEL_76:
      v4 = 0;
      v39 = 1;
      goto LABEL_77;
    }
    if (a2 - 4 >= *(unsigned __int8 *)(a1 + 37))
      v9 = *(unsigned __int8 *)(a1 + 37);
    else
      v9 = (a2 - 4);
    if (*(_BYTE *)(a1 + 38))
    {
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = a3 + 4;
        v12 = (_DWORD *)((unint64_t)v78 | 0xC);
        while (1)
        {
          v13 = *(v11 - 1);
          if (!v13)
            break;
          v14 = *(_WORD *)(v13 + 20);
          if ((v14 & 0x24) != 0)
          {
            v15 = *(double *)v13;
            goto LABEL_15;
          }
          if ((v14 & 8) != 0)
          {
            v19 = *(double *)v13;
            if (*(double *)v13 >= -9.22337204e18)
            {
              if (v19 <= 9.22337204e18)
                *(_QWORD *)&v15 = (uint64_t)v19;
              else
                LODWORD(v15) = -1;
            }
            else
            {
              LODWORD(v15) = 0;
            }
          }
          else
          {
            if ((v14 & 0x12) == 0 || !*(_QWORD *)(v13 + 8))
              goto LABEL_14;
            LODWORD(v15) = sub_1ACBF2FC0(v13);
          }
LABEL_15:
          *(v12 - 1) = LODWORD(v15);
          v16 = *v11;
          if (!*v11)
          {
            sub_1ACBBE20C(89699);
LABEL_19:
            LODWORD(v18) = 0;
            goto LABEL_20;
          }
          v17 = *(_WORD *)(v16 + 20);
          if ((v17 & 0x24) != 0)
          {
            v18 = *(double *)v16;
            goto LABEL_20;
          }
          if ((v17 & 8) != 0)
          {
            v20 = *(double *)v16;
            if (*(double *)v16 >= -9.22337204e18)
            {
              if (v20 <= 9.22337204e18)
                *(_QWORD *)&v18 = (uint64_t)v20;
              else
                LODWORD(v18) = -1;
            }
            else
            {
              LODWORD(v18) = 0;
            }
          }
          else
          {
            if ((v17 & 0x12) == 0 || !*(_QWORD *)(v16 + 8))
              goto LABEL_19;
            LODWORD(v18) = sub_1ACBF2FC0(v16);
          }
LABEL_20:
          *v12 = LODWORD(v18);
          if (SLODWORD(v15) > SLODWORD(v18))
          {
            v45 = v10 + 1;
            goto LABEL_101;
          }
          v10 += 2;
          v11 += 2;
          v12 += 2;
          if (v10 >= v9)
            goto LABEL_74;
        }
        sub_1ACBBE20C(89699);
LABEL_14:
        LODWORD(v15) = 0;
        goto LABEL_15;
      }
    }
    else if ((int)v9 >= 1)
    {
      v21 = 0;
      v22 = a3 + 4;
      v23 = (float *)((unint64_t)v78 | 0xC);
      while (1)
      {
        v24 = *(v22 - 1);
        if (v24)
        {
          v25 = *(_WORD *)(v24 + 20);
          if ((v25 & 8) != 0)
          {
            v26 = *(double *)v24;
          }
          else if ((v25 & 0x24) != 0)
          {
            v26 = (double)*(uint64_t *)v24;
          }
          else if ((v25 & 0x12) != 0)
          {
            v26 = sub_1ACBF2F88(v24);
          }
          else
          {
            v26 = 0.0;
          }
        }
        else
        {
          sub_1ACBBE20C(89734);
          v26 = 0.0;
        }
        v28 = 0.999999881;
        if (v26 < 0.0)
          v28 = 1.00000012;
        v29 = v26 * v28;
        v27 = v26;
        if (v26 >= v27)
          v30 = v26;
        else
          v30 = v29;
        *(v23 - 1) = v30;
        v31 = *v22;
        if (*v22)
        {
          v32 = *(_WORD *)(v31 + 20);
          if ((v32 & 8) != 0)
          {
            v33 = *(double *)v31;
          }
          else if ((v32 & 0x24) != 0)
          {
            v33 = (double)*(uint64_t *)v31;
          }
          else if ((v32 & 0x12) != 0)
          {
            v33 = sub_1ACBF2F88(v31);
          }
          else
          {
            v33 = 0.0;
          }
        }
        else
        {
          sub_1ACBBE20C(89734);
          v33 = 0.0;
        }
        v35 = 1.00000012;
        if (v33 < 0.0)
          v35 = 0.999999881;
        v36 = v33 * v35;
        v34 = v33;
        v37 = v33 <= v34 ? v33 : v36;
        *v23 = v37;
        if (v30 > v37)
          break;
        v21 += 2;
        v22 += 2;
        v23 += 2;
        if (v21 >= v9)
          goto LABEL_74;
      }
      v45 = v21 + 1;
LABEL_101:
      v47 = (_QWORD *)a1;
      goto LABEL_102;
    }
LABEL_74:
    v38 = a3[2];
    if (v38)
    {
      v5 = a4;
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v38 + 20)) & 1) != 0)
        goto LABEL_76;
    }
    else
    {
      sub_1ACBBE20C(97202);
      v38 = a3[2];
      v5 = a4;
      if (!v38)
      {
        sub_1ACBBE20C(89699);
        goto LABEL_105;
      }
    }
    v43 = *(_WORD *)(v38 + 20);
    if ((v43 & 0x24) != 0)
    {
      v44 = *(_QWORD *)v38;
      goto LABEL_146;
    }
    if ((v43 & 8) != 0)
    {
      v49 = *(double *)v38;
      if (*(double *)v38 >= -9.22337204e18)
      {
        if (v49 <= 9.22337204e18)
          v44 = (uint64_t)v49;
        else
          v44 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v44 = 0x8000000000000000;
      }
LABEL_146:
      *(_QWORD *)&v78[0] = v44;
      v65 = *a3;
      if (*a3)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v65 + 20)) & 1) != 0)
        {
LABEL_165:
          v69 = *(_QWORD **)(a1 + 136);
          if (!sub_1ACBA0E50((uint64_t)v69, 0))
          {
            v70 = v69[16];
            if ((*(_WORD *)(v70 + 20) & 0x9000) != 0)
            {
              sub_1ACBF327C(v70, v44);
            }
            else
            {
              *(_QWORD *)v70 = v44;
              *(_WORD *)(v70 + 20) = 4;
            }
            v71 = *(_QWORD *)(*v69 + 24);
            if (v71)
              xmmword_1ECD3B1D0(v71);
          }
          v72 = sqlite3_step(*(sqlite3_stmt **)(a1 + 136));
          v73 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 136));
          if (v72 != 100)
            goto LABEL_174;
          if (sqlite3_vtab_on_conflict(*(sqlite3 **)(a1 + 24)) == 5)
          {
            v73 = sub_1ACCA15F8(a1, v44);
LABEL_174:
            v4 = v73;
            v39 = 0;
LABEL_77:
            v40 = *a3;
            if (*a3)
            {
              if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v40 + 20)) & 1) != 0)
              {
                if (a2 < 2)
                  goto LABEL_136;
                goto LABEL_112;
              }
            }
            else
            {
              sub_1ACBBE20C(97202);
              v40 = *a3;
              if (!*a3)
              {
                sub_1ACBBE20C(89699);
                goto LABEL_92;
              }
            }
            v41 = *(_WORD *)(v40 + 20);
            if ((v41 & 0x24) != 0)
            {
              v42 = *(_QWORD *)v40;
              goto LABEL_111;
            }
            if ((v41 & 8) != 0)
            {
              v46 = *(double *)v40;
              if (*(double *)v40 >= -9.22337204e18)
              {
                if (v46 <= 9.22337204e18)
                  v42 = (uint64_t)v46;
                else
                  v42 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                v42 = 0x8000000000000000;
              }
LABEL_111:
              v4 = sub_1ACCA15F8(a1, v42);
              if (a2 < 2)
                goto LABEL_136;
LABEL_112:
              if ((_DWORD)v4)
                goto LABEL_136;
              v77 = 0;
              if ((v39 & 1) == 0)
              {
                *v5 = *(_QWORD *)&v78[0];
LABEL_131:
                v4 = sub_1ACCA19F4(a1, (uint64_t)v78, 0, &v77);
                if ((_DWORD)v4)
                  goto LABEL_136;
                *(_DWORD *)(a1 + 104) = -1;
                v58 = v77;
                v59 = sub_1ACCA1F90(a1, v77, v78, 0);
                v60 = sub_1ACC9FEC4(a1, v58);
                v4 = v59 ? v59 : v60;
                if ((_DWORD)v4)
                  goto LABEL_136;
                if (!*(_BYTE *)(a1 + 41))
                {
                  v4 = 0;
                  goto LABEL_136;
                }
                v62 = *(sqlite3_stmt **)(a1 + 184);
                v63 = *v5;
                if (!sub_1ACBA0E50((uint64_t)v62, 0))
                {
                  v64 = *((_QWORD *)v62 + 16);
                  if ((*(_WORD *)(v64 + 20) & 0x9000) != 0)
                  {
                    sub_1ACBF327C(v64, v63);
                  }
                  else
                  {
                    *(_QWORD *)v64 = v63;
                    *(_WORD *)(v64 + 20) = 4;
                  }
                  v74 = *(_QWORD *)(*(_QWORD *)v62 + 24);
                  if (v74)
                    xmmword_1ECD3B1D0(v74);
                }
                if (*(_BYTE *)(a1 + 41))
                {
                  v75 = 0;
                  do
                  {
                    sqlite3_bind_value(v62, v75 + 2, (const sqlite3_value *)a3[v75 + 3 + *(unsigned __int8 *)(a1 + 37)]);
                    ++v75;
                  }
                  while (v75 < *(unsigned __int8 *)(a1 + 41));
                }
                sqlite3_step(v62);
                v48 = sqlite3_reset(v62);
                goto LABEL_103;
              }
              v50 = *(_QWORD *)(a1 + 144);
              if (!sub_1ACBA0E50(v50, 0))
              {
                v51 = *(_QWORD *)(*(_QWORD *)v50 + 24);
                if (v51)
                  xmmword_1ECD3B1D0(v51);
              }
              v52 = *(_QWORD *)(a1 + 144);
              if (!sub_1ACBA0E50(v52, 1u))
              {
                v53 = *(_QWORD *)(*(_QWORD *)v52 + 24);
                if (v53)
                  xmmword_1ECD3B1D0(v53);
              }
              sqlite3_step(*(sqlite3_stmt **)(a1 + 144));
              v4 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 144));
              v54 = *(_QWORD *)(a1 + 24);
              if (v54)
              {
                v55 = *(unsigned __int8 *)(v54 + 113);
                switch(v55)
                {
                  case 186:
                    goto LABEL_124;
                  case 118:
                    v57 = *(_QWORD *)(v54 + 56);
                    goto LABEL_130;
                  case 109:
LABEL_124:
                    v56 = "unopened";
                    break;
                  default:
                    v56 = "invalid";
                    break;
                }
              }
              else
              {
                v56 = "NULL";
              }
              sqlite3_log(21, "API call with %s database connection pointer", v56);
              sub_1ACBBE20C(186245);
              v57 = 0;
LABEL_130:
              *(_QWORD *)&v78[0] = v57;
              *v5 = v57;
              if ((_DWORD)v4)
                goto LABEL_136;
              goto LABEL_131;
            }
            if ((v41 & 0x12) != 0 && *(_QWORD *)(v40 + 8))
            {
              v42 = sub_1ACBF2FC0(v40);
              goto LABEL_111;
            }
LABEL_92:
            v42 = 0;
            goto LABEL_111;
          }
          v47 = (_QWORD *)a1;
          v45 = 0;
LABEL_102:
          v48 = sub_1ACCA1470(v47, v45);
LABEL_103:
          v4 = v48;
LABEL_136:
          sub_1ACC9FA7C(a1);
          return v4;
        }
      }
      else
      {
        sub_1ACBBE20C(97202);
        v65 = *a3;
        if (!*a3)
        {
          sub_1ACBBE20C(89699);
          goto LABEL_157;
        }
      }
      v66 = *(_WORD *)(v65 + 20);
      if ((v66 & 0x24) != 0)
      {
        v67 = *(_QWORD *)v65;
        goto LABEL_163;
      }
      if ((v66 & 8) != 0)
      {
        v68 = *(double *)v65;
        if (*(double *)v65 >= -9.22337204e18)
        {
          if (v68 <= 9.22337204e18)
            v67 = (uint64_t)v68;
          else
            v67 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v67 = 0x8000000000000000;
        }
LABEL_163:
        if (v67 == v44)
        {
          v4 = 0;
          v39 = 0;
          goto LABEL_77;
        }
        goto LABEL_165;
      }
      if ((v66 & 0x12) != 0 && *(_QWORD *)(v65 + 8))
      {
        v67 = sub_1ACBF2FC0(v65);
        goto LABEL_163;
      }
LABEL_157:
      v67 = 0;
      goto LABEL_163;
    }
    if ((v43 & 0x12) != 0 && *(_QWORD *)(v38 + 8))
    {
      v44 = sub_1ACBF2FC0(v38);
      goto LABEL_146;
    }
LABEL_105:
    v44 = 0;
    goto LABEL_146;
  }
  return 518;
}

uint64_t sub_1ACC9EA78(uint64_t a1)
{
  ++*(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t sub_1ACC9EA8C(uint64_t a1)
{
  _QWORD *v1;
  sqlite3_stmt *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + 40) = 0;
  v1 = *(_QWORD **)(a1 + 112);
  if (v1 && !*(_DWORD *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 112) = 0;
    v2 = (sqlite3_stmt *)v1[3];
    v3 = (_QWORD *)v1[4];
    v4 = v3[3];
    if (v4)
      xmmword_1ECD3B1C0(v4);
    sub_1ACBE0F9C(v3, v1);
    v5 = v3[3];
    if (v5)
      xmmword_1ECD3B1D0(v5);
    sqlite3_finalize(v2);
  }
  return 0;
}

uint64_t sub_1ACC9EB08(uint64_t a1, uint64_t a2)
{
  char *v3;
  const char *v4;
  _QWORD *v5;
  sqlite3_stmt *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(const char *);

  v3 = sqlite3_mprintf("ALTER TABLE %Q.'%q_node'   RENAME TO \"%w_node\";ALTER TABLE %Q.'%q_parent' RENAME TO \"%w_parent\";ALTER TABLE"
         " %Q.'%q_rowid'  RENAME TO \"%w_rowid\";",
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56),
         a2,
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56),
         a2,
         *(_QWORD *)(a1 + 48),
         *(_QWORD *)(a1 + 56),
         a2);
  if (!v3)
    return 7;
  v4 = v3;
  v5 = *(_QWORD **)(a1 + 112);
  if (v5 && !*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 112) = 0;
    v6 = (sqlite3_stmt *)v5[3];
    v7 = (_QWORD *)v5[4];
    v8 = v7[3];
    if (v8)
      xmmword_1ECD3B1C0(v8);
    sub_1ACBE0F9C(v7, v5);
    v9 = v7[3];
    if (v9)
      xmmword_1ECD3B1D0(v9);
    sqlite3_finalize(v6);
  }
  v10 = sqlite3_exec(*(sqlite3 **)(a1 + 24), v4, 0, 0, 0);
  v11 = (void (**)(const char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_15;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v4);
  v4 = (const char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = (void (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_15:
    (*v11)(v4);
  }
  return v10;
}

uint64_t sub_1ACC9EC6C(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  sqlite3_stmt *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = 0;
  v3 = *(_QWORD **)(a1 + 112);
  if (v3 && !*(_DWORD *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 112) = 0;
    v4 = (sqlite3_stmt *)v3[3];
    v5 = (_QWORD *)v3[4];
    v6 = v5[3];
    if (v6)
      xmmword_1ECD3B1C0(v6);
    sub_1ACBE0F9C(v5, v3);
    v7 = v5[3];
    if (v7)
      xmmword_1ECD3B1D0(v7);
    sqlite3_finalize(v4);
  }
  *(_BYTE *)(a1 + 40) = v2;
  return 0;
}

uint64_t sub_1ACC9ECFC(uint64_t result)
{
  const char *v1;
  _BYTE *i;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _BYTE *j;
  uint64_t v7;
  uint64_t v8;
  const char *k;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v1 = "node";
    for (i = (_BYTE *)result; ; ++i)
    {
      v3 = *i;
      v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i)
          return 1;
      }
      else if (byte_1ACCB6333[v3] != byte_1ACCB6333[v4])
      {
        v5 = "parent";
        for (j = (_BYTE *)result; ; ++j)
        {
          v7 = *j;
          v8 = *(unsigned __int8 *)v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j)
              return 1;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            for (k = "rowid"; ; ++k)
            {
              v10 = *(unsigned __int8 *)result;
              v11 = *(unsigned __int8 *)k;
              if ((_DWORD)v10 == (_DWORD)v11)
              {
                if (!*(_BYTE *)result)
                  return 1;
              }
              else if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
              {
                return 0;
              }
              ++result;
            }
          }
          ++v5;
        }
      }
      ++v1;
    }
  }
  return result;
}

uint64_t sub_1ACC9EDD4(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6, int a7)
{
  char **v7;
  uint64_t v9;
  uint64_t v10;
  size_t v16;
  int v17;
  size_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  sqlite3_str *v22;
  uint64_t v23;
  int v24;
  _BOOL8 v25;
  unsigned __int8 *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  const char *v31;
  char *v32;
  sqlite3 *v33;
  char *v34;
  char *v35;
  unsigned int v36;
  const char *v37;
  uint64_t (**v38)(char *);
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  char *v45;
  uint64_t v47;
  const char *v48;
  void (**v49)(unsigned __int8 *);
  uint64_t v50;
  sqlite3_str *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t (**v59)(char *);
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int v64;
  sqlite3_int64 v65;
  uint64_t (**v66)(unsigned __int8 *);
  uint64_t v67;
  unint64_t v68;
  const char *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t (**v73)(unsigned __int8 *);
  char *v74;
  sqlite3_str *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t (**v83)(unsigned __int8 *);
  const char *v84;
  int *pAutoinc;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  char **v89;
  sqlite3 *v90;
  sqlite3_stmt *v91;
  sqlite3_stmt *pStmt[9];

  v7 = a6;
  pStmt[8] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  if ((a3 - 104) <= 0xFFFFFF9D)
  {
    v9 = 16;
    if (a3 > 5)
      v9 = 24;
    *a6 = sqlite3_mprintf("%s", *(const char **)((char *)&unk_1E5C75418 + v9));
    return 1;
  }
  sqlite3_vtab_config(a1, 1, 1);
  v16 = strlen(*(const char **)(a4 + 8));
  v17 = strlen(*(const char **)(a4 + 16));
  if (sqlite3_initialize())
    return 7;
  v88 = a7;
  v90 = a1;
  v18 = v17;
  v19 = (int)v16 + (uint64_t)v17 + 970;
  v20 = (void *)sub_1ACB5D828(v19);
  if (!v20)
    return 7;
  v21 = (uint64_t)v20;
  v87 = a5;
  bzero(v20, v19);
  *(_DWORD *)(v21 + 64) = 1;
  *(_QWORD *)v21 = &unk_1EECACC88;
  *(_QWORD *)(v21 + 48) = v21 + 968;
  *(_QWORD *)(v21 + 56) = v21 + 968 + ((uint64_t)((v16 << 32) + 0x100000000) >> 32);
  *(_BYTE *)(v21 + 38) = a2 != 0;
  memcpy((void *)(v21 + 968), *(const void **)(a4 + 8), (int)v16);
  memcpy((void *)(v21 + 968 + ((uint64_t)((v16 << 32) + 0x100000000) >> 32)), *(const void **)(a4 + 16), v18);
  v89 = v7;
  if (sqlite3_initialize() || (v23 = sub_1ACB5D828(32)) == 0)
  {
    v22 = (sqlite3_str *)&unk_1EECAC608;
  }
  else
  {
    v22 = (sqlite3_str *)v23;
    if (v90)
      v24 = *((_DWORD *)v90 + 34);
    else
      v24 = 2147483645;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 0;
    *(_DWORD *)(v23 + 20) = v24;
    *(_DWORD *)(v23 + 24) = 0;
    *(_WORD *)(v23 + 28) = 0;
  }
  v25 = a2 != 0;
  v26 = *(unsigned __int8 **)(a4 + 24);
  v27 = sub_1ACB5D9FC(v26, (int *)pStmt);
  sqlite3_str_appendf(v22, "CREATE TABLE x(%.*s INT", v27, (const char *)v26);
  v28 = 1;
  v29 = 4;
  while (1)
  {
    v30 = *(unsigned __int8 **)(a4 + 8 * v29);
    if (*v30 != 43)
      break;
    ++*(_BYTE *)(v21 + 41);
    sub_1ACB5D9FC(v30 + 1, (int *)pStmt);
    sqlite3_str_appendf(v22, ",%.*s");
LABEL_17:
    v28 = ++v29 < (unint64_t)a3;
    if (a3 == v29)
      goto LABEL_21;
  }
  if (!*(_BYTE *)(v21 + 41))
  {
    ++*(_BYTE *)(v21 + 37);
    v31 = off_1E5C75440[v25];
    pAutoinc = (int *)sub_1ACB5D9FC(v30, (int *)pStmt);
    sqlite3_str_appendf(v22, v31, pAutoinc, v30);
    goto LABEL_17;
  }
LABEL_21:
  sqlite3_str_appendf(v22, ");");
  v32 = sqlite3_str_finish(v22);
  v33 = v90;
  if (!v32)
  {
    v36 = 7;
    goto LABEL_48;
  }
  v34 = v32;
  if (v28)
  {
    v35 = sqlite3_mprintf("%s", "Auxiliary rtree columns must be last");
    v36 = 1;
    goto LABEL_27;
  }
  v36 = sqlite3_declare_vtab(v90, v32);
  if (v36)
  {
    v37 = sqlite3_errmsg(v90);
    v35 = sqlite3_mprintf("%s", v37);
LABEL_27:
    *v7 = v35;
  }
  v38 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v34);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v34);
    v34 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v38 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_33;
    }
  }
  else
  {
LABEL_33:
    (*v38)(v34);
  }
  if (!v36)
  {
    v39 = *(unsigned __int8 *)(v21 + 37);
    *(_BYTE *)(v21 + 36) = *(_BYTE *)(v21 + 37) >> 1;
    if (v39 < 2)
    {
      v40 = 2;
      goto LABEL_46;
    }
    if (v39 > 0xA)
    {
      v40 = 3;
      goto LABEL_46;
    }
    if ((v39 & 1) != 0)
    {
      v40 = 1;
LABEL_46:
      v45 = sqlite3_mprintf("%s", *((const char **)&unk_1E5C75418 + v40));
      v36 = 0;
      goto LABEL_47;
    }
    *(_BYTE *)(v21 + 39) = 4 * v39 + 8;
    if (v88)
    {
      v42 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.page_size", *(_QWORD *)(v21 + 48));
      if (v42)
      {
        pStmt[0] = 0;
        v43 = sub_1ACB5C66C((uint64_t)v90, v42, 0xFFFFFFFFLL, 128, 0, pStmt, 0, v41);
        if (!v43)
        {
          if (sqlite3_step(pStmt[0]) == 100)
            v44 = sqlite3_column_int(pStmt[0], 0) - 64;
          else
            v44 = -64;
          v36 = sqlite3_finalize(pStmt[0]);
          if (!v36)
          {
            v52 = 51 * *(unsigned __int8 *)(v21 + 39) + 4;
            if (v52 >= v44)
              v52 = v44;
            *(_DWORD *)(v21 + 32) = v52;
LABEL_61:
            v49 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v42);
              v42 = (unsigned __int8 *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v49 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                goto LABEL_66;
              }
            }
            else
            {
LABEL_66:
              (*v49)(v42);
            }
            if (!v36)
            {
              v50 = *(_QWORD *)(a4 + 8);
              v86 = *(_QWORD *)(a4 + 16);
              *(_QWORD *)(v21 + 24) = v90;
              if (!v88)
                goto LABEL_95;
              if (sqlite3_initialize() || (v53 = sub_1ACB5D828(32)) == 0)
              {
                v51 = (sqlite3_str *)&unk_1EECAC608;
              }
              else
              {
                v51 = (sqlite3_str *)v53;
                if (v90)
                  v54 = *((_DWORD *)v90 + 34);
                else
                  v54 = 2147483645;
                *(_QWORD *)v53 = 0;
                *(_QWORD *)(v53 + 8) = 0;
                *(_DWORD *)(v53 + 16) = 0;
                *(_DWORD *)(v53 + 20) = v54;
                *(_DWORD *)(v53 + 24) = 0;
                *(_WORD *)(v53 + 28) = 0;
              }
              v55 = v50;
              sqlite3_str_appendf(v51, "CREATE TABLE \"%w\".\"%w_rowid\"(rowid INTEGER PRIMARY KEY,nodeno", v50, v86);
              if (*(_BYTE *)(v21 + 41))
              {
                v56 = 0;
                do
                  sqlite3_str_appendf(v51, ",a%d", v56++);
                while (v56 < *(unsigned __int8 *)(v21 + 41));
              }
              v50 = v55;
              sqlite3_str_appendf(v51, ");CREATE TABLE \"%w\".\"%w_node\"(nodeno INTEGER PRIMARY KEY,data);", v55, v86);
              sqlite3_str_appendf(v51, "CREATE TABLE \"%w\".\"%w_parent\"(nodeno INTEGER PRIMARY KEY,parentnode);",
                v55,
                v86);
              sqlite3_str_appendf(v51, "INSERT INTO \"%w\".\"%w_node\"VALUES(1,zeroblob(%d))", v55, v86, *(unsigned int *)(v21 + 32));
              v57 = sqlite3_str_finish(v51);
              if (!v57)
                goto LABEL_157;
              v58 = v57;
              v36 = sqlite3_exec(v90, v57, 0, 0, 0);
              v59 = (uint64_t (**)(char *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_93;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v58);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v58);
              v58 = (char *)xmmword_1ECD3E930;
              v50 = v55;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v59 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_93:
                (*v59)(v58);
              }
              v7 = v89;
              if (v36)
                goto LABEL_158;
LABEL_95:
              pStmt[0] = (sqlite3_stmt *)(v21 + 120);
              pStmt[1] = (sqlite3_stmt *)(v21 + 128);
              pStmt[2] = (sqlite3_stmt *)(v21 + 136);
              pStmt[3] = (sqlite3_stmt *)(v21 + 144);
              pStmt[4] = (sqlite3_stmt *)(v21 + 152);
              pStmt[5] = (sqlite3_stmt *)(v21 + 160);
              pStmt[6] = (sqlite3_stmt *)(v21 + 168);
              pStmt[7] = (sqlite3_stmt *)(v21 + 176);
              v60 = sqlite3_table_column_metadata(v90, *(const char **)(v21 + 48), "sqlite_stat1", 0, 0, 0, 0, 0, 0);
              if (v60)
              {
                v36 = v60;
                *(_QWORD *)(v21 + 72) = 0x100000;
                if (v60 != 1)
                  goto LABEL_130;
LABEL_117:
                v68 = 0;
                while (2)
                {
                  if (v68 != 3
                    || (v69 = "INSERT INTO\"%w\".\"%w_rowid\"(rowid,nodeno)VALUES(?1,?2)ON CONFLICT(rowid)DO UPDATE SET n"
                              "odeno=excluded.nodeno",
                        !*(_BYTE *)(v21 + 41)))
                  {
                    v69 = off_1E5C75450[v68];
                  }
                  v70 = (unsigned __int8 *)sqlite3_mprintf(v69, v50, v86);
                  if (!v70)
                    goto LABEL_102;
                  v72 = v70;
                  v36 = sub_1ACB5C66C((uint64_t)v90, v70, 0xFFFFFFFFLL, 133, 0, pStmt[v68], 0, v71);
                  v73 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v72);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v72);
                    v72 = (unsigned __int8 *)xmmword_1ECD3E930;
                    if ((_QWORD)xmmword_1ECD3E930)
                    {
                      v73 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                      goto LABEL_127;
                    }
                  }
                  else
                  {
LABEL_127:
                    (*v73)(v72);
                  }
                  if (v68 > 6)
                    goto LABEL_103;
                  ++v68;
                  v7 = v89;
                  if (v36)
                    goto LABEL_130;
                  continue;
                }
              }
              v61 = (unsigned __int8 *)sqlite3_mprintf("SELECT stat FROM %Q.sqlite_stat1 WHERE tbl = '%q_rowid'", *(_QWORD *)(v21 + 48), *(_QWORD *)(v21 + 56));
              if (v61)
              {
                v63 = v61;
                v91 = 0;
                v64 = sub_1ACB5C66C((uint64_t)v90, v61, 0xFFFFFFFFLL, 128, 0, &v91, 0, v62);
                if (v64)
                {
                  v36 = v64;
                  v65 = 100;
                }
                else
                {
                  if (sqlite3_step(v91) == 100)
                    v65 = sqlite3_column_int64(v91, 0);
                  else
                    v65 = 100;
                  v36 = sqlite3_finalize(v91);
                }
                v66 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v63);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v63);
                  v63 = (unsigned __int8 *)xmmword_1ECD3E930;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v66 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                    goto LABEL_113;
                  }
                }
                else
                {
LABEL_113:
                  (*v66)(v63);
                }
                v67 = 100;
                if (v65 > 100)
                  v67 = v65;
                *(_QWORD *)(v21 + 72) = v67;
                v7 = v89;
                if (!v36)
                  goto LABEL_117;
              }
              else
              {
                *(_QWORD *)(v21 + 72) = 100;
LABEL_102:
                v36 = 7;
LABEL_103:
                v7 = v89;
              }
LABEL_130:
              if (!*(_BYTE *)(v21 + 41))
                goto LABEL_155;
              v74 = sqlite3_mprintf("SELECT * FROM \"%w\".\"%w_rowid\" WHERE rowid=?1", v50, v86);
              *(_QWORD *)(v21 + 88) = v74;
              if (!v74)
              {
                v36 = 7;
                v33 = v90;
                goto LABEL_158;
              }
              if (sqlite3_initialize() || (v76 = sub_1ACB5D828(32)) == 0)
              {
                v75 = (sqlite3_str *)&unk_1EECAC608;
              }
              else
              {
                v75 = (sqlite3_str *)v76;
                if (v90)
                  v77 = *((_DWORD *)v90 + 34);
                else
                  v77 = 2147483645;
                *(_QWORD *)v76 = 0;
                *(_QWORD *)(v76 + 8) = 0;
                *(_DWORD *)(v76 + 16) = 0;
                *(_DWORD *)(v76 + 20) = v77;
                *(_DWORD *)(v76 + 24) = 0;
                *(_WORD *)(v76 + 28) = 0;
              }
              v33 = v90;
              sqlite3_str_appendf(v75, "UPDATE \"%w\".\"%w_rowid\"SET ", v50, v86);
              if (*(_BYTE *)(v21 + 41))
              {
                sqlite3_str_appendf(v75, "a%d=?%d", 0, 2);
                if (*(unsigned __int8 *)(v21 + 41) >= 2u)
                {
                  v78 = 1;
                  do
                  {
                    v79 = *((unsigned int *)v75 + 6);
                    if ((v79 + 1) < *((_DWORD *)v75 + 4))
                    {
                      *((_DWORD *)v75 + 6) = v79 + 1;
                      *(_BYTE *)(*((_QWORD *)v75 + 1) + v79) = 44;
                    }
                    else
                    {
                      sub_1ACBC290C((uint64_t)v75, ",", 1u);
                    }
                    sqlite3_str_appendf(v75, "a%d=?%d", v78, v78 + 2);
                    ++v78;
                  }
                  while (v78 < *(unsigned __int8 *)(v21 + 41));
                }
              }
              sqlite3_str_appendf(v75, " WHERE rowid=?1");
              v80 = (unsigned __int8 *)sqlite3_str_finish(v75);
              if (!v80)
              {
LABEL_157:
                v36 = 7;
                v7 = v89;
                goto LABEL_158;
              }
              v82 = v80;
              v36 = sub_1ACB5C66C((uint64_t)v90, v80, 0xFFFFFFFFLL, 133, 0, (_QWORD *)(v21 + 184), 0, v81);
              v83 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_153;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v82);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v82);
              v82 = (unsigned __int8 *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v83 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_153:
                (*v83)(v82);
              }
              v7 = v89;
LABEL_155:
              v33 = v90;
              if (!v36)
              {
                v10 = 0;
                *v87 = v21;
                return v10;
              }
LABEL_158:
              v84 = sqlite3_errmsg(v33);
              v45 = sqlite3_mprintf("%s", v84);
LABEL_47:
              *v7 = v45;
            }
            goto LABEL_48;
          }
LABEL_60:
          v48 = sqlite3_errmsg(v90);
          *v7 = sqlite3_mprintf("%s", v48);
          if (v42)
            goto LABEL_61;
          goto LABEL_48;
        }
LABEL_58:
        v36 = v43;
        goto LABEL_60;
      }
    }
    else
    {
      v42 = (unsigned __int8 *)sqlite3_mprintf("SELECT length(data) FROM '%q'.'%q_node' WHERE nodeno = 1", *(_QWORD *)(v21 + 48), *(_QWORD *)(v21 + 56));
      if (v42)
      {
        pStmt[0] = 0;
        v43 = sub_1ACB5C66C((uint64_t)v90, v42, 0xFFFFFFFFLL, 128, 0, pStmt, 0, v47);
        if (!v43)
        {
          if (sqlite3_step(pStmt[0]) == 100)
            *(_DWORD *)(v21 + 32) = sqlite3_column_int(pStmt[0], 0);
          v43 = sqlite3_finalize(pStmt[0]);
          if (!v43)
          {
            if (*(int *)(v21 + 32) > 447)
            {
              v36 = 0;
            }
            else
            {
              *v7 = sqlite3_mprintf("undersize RTree blobs in \"%q_node\"", *(_QWORD *)(v21 + 56));
              v36 = 267;
            }
            goto LABEL_61;
          }
        }
        goto LABEL_58;
      }
    }
    v36 = 7;
    goto LABEL_60;
  }
LABEL_48:
  if (v36 <= 1)
    v10 = 1;
  else
    v10 = v36;
  sub_1ACC9FA7C(v21);
  return v10;
}

uint64_t sub_1ACC9FA7C(uint64_t result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  sqlite3_stmt *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t (**v10)(uint64_t);

  v1 = *(_DWORD *)(result + 64) - 1;
  *(_DWORD *)(result + 64) = v1;
  if (v1)
    return result;
  v2 = result;
  *(_BYTE *)(result + 40) = 0;
  v3 = *(_QWORD **)(result + 112);
  if (v3 && !*(_DWORD *)(result + 80))
  {
    *(_QWORD *)(result + 112) = 0;
    v4 = (sqlite3_stmt *)v3[3];
    v5 = (_QWORD *)v3[4];
    v6 = v5[3];
    if (v6)
      xmmword_1ECD3B1C0(v6);
    sub_1ACBE0F9C(v5, v3);
    v7 = v5[3];
    if (v7)
      xmmword_1ECD3B1D0(v7);
    sqlite3_finalize(v4);
  }
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 120));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 128));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 136));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 144));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 152));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 160));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 168));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 176));
  sqlite3_finalize(*(sqlite3_stmt **)(v2 + 184));
  v8 = *(_QWORD *)(v2 + 88);
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_16:
      (*v9)(v8);
      goto LABEL_17;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
      goto LABEL_16;
    }
  }
LABEL_17:
  v10 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v10)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v2);
  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v10 = &xmmword_1ECD3B1D0;
    return (*v10)(v2);
  }
  return result;
}

double sub_1ACC9FC58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  uint64_t (**v8)(uint64_t);
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  double result;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    goto LABEL_22;
  if (*(int *)(a1 + 16) < 1)
    goto LABEL_15;
  v4 = 0;
  v5 = 16;
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v5);
    if (v6)
    {
      v7 = *(void (**)(_QWORD))(v6 + 32);
      if (v7)
        v7(*(_QWORD *)(v6 + 24));
      v8 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_4;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v8 = &xmmword_1ECD3B1D0;
LABEL_4:
        (*v8)(v6);
      }
    }
    ++v4;
    v5 += 24;
  }
  while (v4 < *(int *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
LABEL_15:
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_20;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
LABEL_20:
      (*v9)(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
LABEL_22:
  sub_1ACC9FEC4(v2, *(_QWORD *)(a1 + 88));
  sub_1ACC9FEC4(v2, *(_QWORD *)(a1 + 96));
  sub_1ACC9FEC4(v2, *(_QWORD *)(a1 + 104));
  sub_1ACC9FEC4(v2, *(_QWORD *)(a1 + 112));
  sub_1ACC9FEC4(v2, *(_QWORD *)(a1 + 120));
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_28;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v11 = &xmmword_1ECD3B1D0;
LABEL_28:
      (*v11)(v10);
    }
  }
  v12 = *(_QWORD *)(a1 + 56);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 56) = v12;
  return result;
}

uint64_t sub_1ACC9FEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void (**v11)(uint64_t);

  if (!a2)
    return 0;
  v2 = a2;
  v3 = *(_DWORD *)(a2 + 16) - 1;
  *(_DWORD *)(a2 + 16) = v3;
  if (v3)
    return 0;
  --*(_DWORD *)(a1 + 84);
  if (*(_QWORD *)(a2 + 8) == 1)
    *(_DWORD *)(a1 + 44) = -1;
  if (!*(_QWORD *)a2 || (v4 = sub_1ACC9FEC4(a1), !(_DWORD)v4))
    v4 = sub_1ACCA002C(a1, v2);
  v7 = *(_QWORD *)(v2 + 8);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 8 * (v7 % 0x61) + 192);
    do
    {
      v9 = v8;
      v10 = *v8;
      v8 = (_QWORD *)(*v8 + 32);
    }
    while (v10 != v2);
    *v9 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
  }
  v11 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_19:
    (*v11)(v2);
    return v4;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v2);
  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_19;
  }
  return v4;
}

uint64_t sub_1ACCA002C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_DWORD *)(a2 + 20))
    return 0;
  v4 = *(uint64_t **)(a1 + 120);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = sub_1ACBA0E50((uint64_t)v4, 0);
  if (v5)
  {
    if (v6)
      goto LABEL_12;
    v7 = v4[16];
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v7, v5);
    }
    else
    {
      *(_QWORD *)v7 = v5;
      *(_WORD *)(v7 + 20) = 4;
    }
  }
  else if (v6)
  {
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9)
    xmmword_1ECD3B1D0(v9);
LABEL_12:
  v10 = *(unsigned int *)(a1 + 32);
  if ((v10 & 0x80000000) != 0)
  {
    sub_1ACBBE20C(98722);
  }
  else
  {
    v11 = *(char **)(a2 + 24);
    if (!sub_1ACBA0E50((uint64_t)v4, 1u))
    {
      if (v11)
      {
        v12 = sub_1ACB57870(v4[16] + 64, v11, v10, 0, 0);
        if (v12)
        {
          v13 = v12;
          v14 = *v4;
          *(_DWORD *)(v14 + 80) = v13;
          sub_1ACBE938C(v14, v13);
          sub_1ACBF2990(*v4, v13);
        }
      }
      v15 = *(_QWORD *)(*v4 + 24);
      if (v15)
        xmmword_1ECD3B1D0(v15);
    }
  }
  sqlite3_step((sqlite3_stmt *)v4);
  *(_DWORD *)(a2 + 20) = 0;
  v8 = sqlite3_reset((sqlite3_stmt *)v4);
  if (!sub_1ACBA0E50((uint64_t)v4, 1u))
  {
    v16 = *(_QWORD *)(*v4 + 24);
    if (v16)
      xmmword_1ECD3B1D0(v16);
  }
  if (!*(_QWORD *)(a2 + 8) && !(_DWORD)v8)
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (v17)
    {
      v18 = *(unsigned __int8 *)(v17 + 113);
      switch(v18)
      {
        case 186:
          goto LABEL_29;
        case 118:
          v20 = *(_QWORD *)(v17 + 56);
LABEL_34:
          v8 = 0;
          *(_QWORD *)(a2 + 8) = v20;
          v21 = a1 + 8 * (v20 % 0x61);
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(v21 + 192);
          *(_QWORD *)(v21 + 192) = a2;
          return v8;
        case 109:
LABEL_29:
          v19 = "unopened";
          break;
        default:
          v19 = "invalid";
          break;
      }
    }
    else
    {
      v19 = "NULL";
    }
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    sub_1ACBBE20C(186245);
    v20 = 0;
    goto LABEL_34;
  }
  return v8;
}

uint64_t sub_1ACCA0264(uint64_t a1, uint64_t a2, uint64_t *a3, sqlite3_int64 *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  sqlite3_stmt *v12;
  sqlite3_int64 v13;
  uint64_t v14;

  *a3 = 0;
  v8 = *(_QWORD **)(a1 + 136);
  if (!sub_1ACBA0E50((uint64_t)v8, 0))
  {
    v9 = v8[16];
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v9, a2);
    }
    else
    {
      *(_QWORD *)v9 = a2;
      *(_WORD *)(v9 + 20) = 4;
    }
    v10 = *(_QWORD *)(*v8 + 24);
    if (v10)
      xmmword_1ECD3B1D0(v10);
  }
  v11 = sqlite3_step(*(sqlite3_stmt **)(a1 + 136));
  v12 = *(sqlite3_stmt **)(a1 + 136);
  if (v11 != 100)
    return sqlite3_reset(v12);
  v13 = sqlite3_column_int64(v12, 0);
  if (a4)
    *a4 = v13;
  v14 = sub_1ACCA04B0(a1, v13, 0, a3);
  sqlite3_reset(*(sqlite3_stmt **)(a1 + 136));
  return v14;
}

uint64_t sub_1ACCA0358(uint64_t a1, unsigned int a2, double a3)
{
  char v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;

  v3 = a2;
  v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(_BYTE *)(a1 + 9))
  {
    if (*(_DWORD *)(a1 + 36))
    {
      v7 = *(_QWORD *)(a1 + 48);
      ++*(_DWORD *)(a1 + 4 * a2 + 128);
      if (v7)
        goto LABEL_3;
    }
    else
    {
      ++*(_DWORD *)(a1 + 4 * a2 + 128);
    }
LABEL_18:
    *(double *)(a1 + 64) = a3;
    v11 = a1 + 64;
    *(_BYTE *)(v11 + 16) = v3;
    *(_BYTE *)(v11 - 55) = 1;
    return v11;
  }
  v7 = a1 + 64;
  ++*(_DWORD *)(a1 + 4 * a2 + 128);
LABEL_3:
  if (*(double *)v7 <= a3 && (*(double *)v7 != a3 || *(unsigned __int8 *)(v7 + 16) <= a2))
    return sub_1ACCA1030(a1, a2, a3);
  if (!v6)
    goto LABEL_18;
  v8 = sub_1ACCA1030(a1, a2, a3);
  if (v8)
  {
    v9 = v8;
    if ((int)(-1431655765 * ((v8 - *(_QWORD *)(a1 + 48)) >> 3)) > 3)
      sub_1ACC9FEC4(*(_QWORD *)a1, *(_QWORD *)(a1 + 88));
    else
      *(_QWORD *)(a1 + 88 + ((uint64_t)(0xAAAAAAAB00000000 * ((v8 - *(_QWORD *)(a1 + 48)) >> 3) + 0x100000000) >> 29)) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    v12 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 80);
    *(_OWORD *)v9 = v12;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1ACCA04B0(uint64_t a1, sqlite3_int64 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  sqlite3_blob **v9;
  sqlite3_blob *v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t (**v19)(char *);
  sqlite3_stmt *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t (**v30)(uint64_t);
  uint64_t v31;

  v8 = *(_QWORD *)(a1 + 8 * (a2 % 0x61) + 192);
  if (v8)
  {
    while (*(_QWORD *)(v8 + 8) != a2)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        goto LABEL_4;
    }
    if (a3 && *(_QWORD *)v8 != a3)
      return 267;
    v12 = 0;
    ++*(_DWORD *)(v8 + 16);
    goto LABEL_53;
  }
LABEL_4:
  v9 = (sqlite3_blob **)(a1 + 112);
  v10 = *(sqlite3_blob **)(a1 + 112);
  if (!v10)
    goto LABEL_15;
  *v9 = 0;
  v11 = sqlite3_blob_reopen(v10, a2);
  *v9 = v10;
  if (!(_DWORD)v11)
  {
    v24 = *(_DWORD *)(a1 + 32);
    goto LABEL_41;
  }
  v12 = v11;
  if (!*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
  {
    *v9 = 0;
    v13 = (sqlite3_stmt *)*((_QWORD *)v10 + 3);
    v14 = (_QWORD *)*((_QWORD *)v10 + 4);
    v15 = v14[3];
    if (v15)
      xmmword_1ECD3B1C0(v15);
    sub_1ACBE0F9C(v14, v10);
    v16 = v14[3];
    if (v16)
      xmmword_1ECD3B1D0(v16);
    sqlite3_finalize(v13);
  }
  if ((_DWORD)v12 != 7)
  {
    v10 = *v9;
    if (*v9)
      goto LABEL_24;
LABEL_15:
    v17 = sqlite3_mprintf("%s_node", *(const char **)(a1 + 56));
    if (!v17)
      return 7;
    v18 = v17;
    LODWORD(v12) = sqlite3_blob_open(*(sqlite3 **)(a1 + 24), *(const char **)(a1 + 48), v17, "data", a2, 0, (sqlite3_blob **)(a1 + 112));
    v19 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v18);
      v18 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_22:
        v10 = *v9;
        if ((_DWORD)v12)
        {
          if (!v10)
          {
LABEL_31:
            v8 = 0;
            if ((_DWORD)v12 == 1)
              v12 = 267;
            else
              v12 = v12;
            goto LABEL_53;
          }
LABEL_24:
          if (!*(_BYTE *)(a1 + 40) && !*(_DWORD *)(a1 + 80))
          {
            *v9 = 0;
            v20 = (sqlite3_stmt *)*((_QWORD *)v10 + 3);
            v21 = (_QWORD *)*((_QWORD *)v10 + 4);
            v22 = v21[3];
            if (v22)
              xmmword_1ECD3B1C0(v22);
            sub_1ACBE0F9C(v21, v10);
            v23 = v21[3];
            if (v23)
              xmmword_1ECD3B1D0(v23);
            sqlite3_finalize(v20);
          }
          goto LABEL_31;
        }
        v24 = *(_DWORD *)(a1 + 32);
        if (!v10)
        {
          if (!v24)
            goto LABEL_44;
          goto LABEL_52;
        }
LABEL_41:
        v25 = *((_QWORD *)v10 + 3);
        if (v25)
          LODWORD(v25) = *(_DWORD *)v10;
        if (v24 == (_DWORD)v25)
        {
LABEL_44:
          if (sqlite3_initialize())
          {
            v8 = 0;
            v12 = 7;
            goto LABEL_53;
          }
          v26 = sub_1ACB5D828(v24 + 40);
          v8 = v26;
          if (!v26)
          {
            v12 = 7;
            goto LABEL_53;
          }
          ++*(_DWORD *)(a1 + 84);
          *(_QWORD *)v26 = a3;
          *(_QWORD *)(v26 + 8) = a2;
          *(_QWORD *)(v26 + 16) = 1;
          *(_QWORD *)(v26 + 24) = v26 + 40;
          *(_QWORD *)(v26 + 32) = 0;
          v27 = sub_1ACBCB9F8(*(int **)(a1 + 112), (char *)(v26 + 40), *(unsigned int *)(a1 + 32), 0, sub_1ACBCBBE8);
          v12 = v27;
          if (a2 != 1 || (_DWORD)v27)
          {
            if ((_DWORD)v27)
            {
LABEL_59:
              --*(_DWORD *)(a1 + 84);
              v30 = &off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v8);
                v8 = xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_53;
                v30 = &xmmword_1ECD3B1D0;
              }
              (*v30)(v8);
              v8 = 0;
LABEL_53:
              *a4 = v8;
              return v12;
            }
          }
          else
          {
            v28 = __rev16(**(unsigned __int16 **)(v8 + 24));
            *(_DWORD *)(a1 + 44) = v28;
            if (v28 > 0x28)
            {
LABEL_58:
              v12 = 267;
              goto LABEL_59;
            }
          }
          if ((*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39) >= (int)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(v8 + 24) + 2)) >> 16))
          {
            if (a3)
              ++*(_DWORD *)(a3 + 16);
            v12 = 0;
            v31 = a1 + 8 * (*(_DWORD *)(v8 + 8) % 0x61u);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v31 + 192);
            *(_QWORD *)(v31 + 192) = v8;
            goto LABEL_53;
          }
          goto LABEL_58;
        }
LABEL_52:
        v8 = 0;
        v12 = 267;
        goto LABEL_53;
      }
      v19 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v19)(v18);
    goto LABEL_22;
  }
  return v12;
}

uint64_t sub_1ACCA0928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  sqlite3_int64 *v11;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  int v25;
  float v26;
  double v27;
  double v28;
  uint64_t v29;
  int v30;
  unsigned int *v32;
  float v33;
  double v34;
  float v35;
  double v36;
  float v37;
  double v38;
  float v39;
  unsigned __int8 v40;
  char v41;
  unsigned __int8 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  sqlite3_int64 *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = a1 + 64;
  v51 = (sqlite3_int64 *)(a1 + 72);
  v52 = *(_QWORD *)a1;
  v53 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 38);
  v50 = a1 + 64;
  while (1)
  {
    v5 = *(unsigned __int8 *)(a1 + 9);
    v6 = v3;
    if (!*(_BYTE *)(a1 + 9) && (!*(_DWORD *)(a1 + 36) || (v6 = *(_QWORD *)(a1 + 48)) == 0))
    {
      v49 = 1;
      goto LABEL_98;
    }
    if (!*(_BYTE *)(v6 + 16))
    {
      v49 = 0;
LABEL_98:
      result = 0;
      *(_BYTE *)(a1 + 8) = v49;
      return result;
    }
    v7 = a1 + 8 * (1 - v5);
    v10 = *(_QWORD *)(v7 + 88);
    v9 = (uint64_t *)(v7 + 88);
    v8 = v10;
    if (!v10)
    {
      v11 = v51;
      if ((_DWORD)v5 != 1)
        v11 = (sqlite3_int64 *)(*(_QWORD *)(a1 + 48) + 8);
      result = sub_1ACCA04B0(*(_QWORD *)a1, *v11, 0, v9);
      if ((_DWORD)result)
        return result;
      v8 = *v9;
    }
    v13 = *(_QWORD *)(v8 + 24);
    v14 = __rev16(*(unsigned __int16 *)(v13 + 2));
    v15 = *(unsigned __int8 *)(v6 + 18);
    if (v14 > v15)
      break;
LABEL_90:
    if (v14 <= v15)
      sub_1ACCA11B4(a1);
  }
  v16 = (unsigned __int8 *)(v13 + *(unsigned __int8 *)(v6 + 18) * (unint64_t)*(unsigned __int8 *)(v2 + 39) + 4);
  v17 = v16;
  while (2)
  {
    if ((int)v53 >= 1)
    {
      v18 = 0;
      v19 = 2;
      v20 = -1.0;
      while (1)
      {
        v21 = *(_QWORD *)(a1 + 24);
        v22 = *(_DWORD *)(v21 + v18 + 4);
        if (v22 < 70)
        {
          v25 = 4 * *(_DWORD *)(v21 + v18);
          if (*(_BYTE *)(v6 + 16) == 1)
          {
            v26 = COERCE_FLOAT(bswap32(*(_DWORD *)&v17[v25 + 8]));
            v27 = (double)SLODWORD(v26);
            if (v4 != 1)
              v27 = v26;
            switch(v22)
            {
              case '?':
                goto LABEL_17;
              case '@':
                goto LABEL_73;
              case 'B':
                v28 = *(double *)(v21 + v18 + 8);
                goto LABEL_64;
              case 'C':
                if (v27 >= *(double *)(v21 + v18 + 8))
                  goto LABEL_73;
                goto LABEL_17;
              case 'D':
                if (v27 < *(double *)(v21 + v18 + 8))
                  goto LABEL_73;
                goto LABEL_17;
              case 'E':
                if (v27 <= *(double *)(v21 + v18 + 8))
                  goto LABEL_73;
                goto LABEL_17;
              default:
                if (v27 != *(double *)(v21 + v18 + 8))
                  goto LABEL_73;
                goto LABEL_17;
            }
          }
          v32 = (unsigned int *)&v17[(v25 & 0x3F8) + 8];
          switch(v22)
          {
            case '?':
              goto LABEL_17;
            case '@':
              goto LABEL_73;
            case 'A':
              v37 = COERCE_FLOAT(bswap32(*v32));
              v38 = v37;
              if (v4 == 1)
                v38 = (double)SLODWORD(v37);
              v27 = *(double *)(v21 + v18 + 8);
              if (v27 < v38)
                goto LABEL_73;
              v39 = COERCE_FLOAT(bswap32(v32[1]));
              v28 = (double)SLODWORD(v39);
              if (v4 != 1)
                v28 = v39;
LABEL_64:
              if (v27 > v28)
                goto LABEL_73;
              goto LABEL_17;
            case 'B':
            case 'C':
              v33 = COERCE_FLOAT(bswap32(*v32));
              v34 = (double)SLODWORD(v33);
              if (v4 != 1)
                v34 = v33;
              if (*(double *)(v21 + v18 + 8) < v34)
                goto LABEL_73;
              goto LABEL_17;
            default:
              v35 = COERCE_FLOAT(bswap32(v32[1]));
              v36 = (double)SLODWORD(v35);
              if (v4 != 1)
                v36 = v35;
              if (*(double *)(v21 + v18 + 8) > v36)
                goto LABEL_73;
              goto LABEL_17;
          }
        }
        v23 = *(_QWORD *)(v21 + v18 + 16);
        if (v22 == 71 && *(_BYTE *)(v6 + 16) == 1)
          *(_QWORD *)(v23 + 72) = (((unint64_t)*v17 << 56) | ((unint64_t)v17[1] << 48) | ((unint64_t)v17[2] << 40) | ((unint64_t)v17[3] << 32) | ((unint64_t)v17[4] << 24) | ((unint64_t)v17[5] << 16) | ((unint64_t)v17[6] << 8))
                                + v17[7];
        if (v4 == 1)
        {
          switch(*(_DWORD *)(v23 + 56))
          {
            case 4:
              goto LABEL_27;
            case 6:
              goto LABEL_26;
            case 8:
              goto LABEL_25;
            case 0xA:
              v63 = (double)(int)bswap32(*((_DWORD *)v17 + 11));
              v62 = (double)(int)bswap32(*((_DWORD *)v17 + 10));
LABEL_25:
              v61 = (double)(int)bswap32(*((_DWORD *)v17 + 9));
              v60 = (double)(int)bswap32(*((_DWORD *)v17 + 8));
LABEL_26:
              v59 = (double)(int)bswap32(*((_DWORD *)v17 + 7));
              v58 = (double)(int)bswap32(*((_DWORD *)v17 + 6));
LABEL_27:
              v57 = (double)(int)bswap32(*((_DWORD *)v17 + 5));
              v56 = (double)(int)bswap32(*((_DWORD *)v17 + 4));
              break;
            default:
              break;
          }
          v55 = (double)(int)bswap32(*((_DWORD *)v17 + 3));
          v24 = (double)(int)bswap32(*((_DWORD *)v17 + 2));
        }
        else
        {
          switch(*(_DWORD *)(v23 + 56))
          {
            case 4:
              goto LABEL_38;
            case 6:
              goto LABEL_37;
            case 8:
              goto LABEL_36;
            case 0xA:
              v63 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 11)));
              v62 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 10)));
LABEL_36:
              v61 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 9)));
              v60 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 8)));
LABEL_37:
              v59 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 7)));
              v58 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 6)));
LABEL_38:
              v57 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 5)));
              v56 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 4)));
              break;
            default:
              break;
          }
          v55 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 3)));
          v24 = COERCE_FLOAT(bswap32(*((_DWORD *)v17 + 2)));
        }
        v54 = v24;
        if (v22 == 70)
        {
          result = (*(uint64_t (**)(uint64_t))(v21 + v18 + 8))(v23);
          v19 = 0;
          v20 = 0.0;
          if ((_DWORD)result)
            return result;
        }
        else
        {
          *(_QWORD *)(v23 + 40) = &v54;
          *(_DWORD *)(v23 + 60) = *(unsigned __int8 *)(v6 + 16) - 1;
          v29 = *(_QWORD *)v6;
          *(_QWORD *)(v23 + 80) = *(_QWORD *)v6;
          *(_QWORD *)(v23 + 96) = v29;
          v30 = *(unsigned __int8 *)(v6 + 17);
          *(_DWORD *)(v23 + 88) = v30;
          *(_DWORD *)(v23 + 92) = v30;
          result = (*(uint64_t (**)(uint64_t))(v21 + v18 + 8))(v23);
          if (*(_DWORD *)(v23 + 92) < v19)
            v19 = *(_DWORD *)(v23 + 92);
          if (*(double *)(v23 + 96) < v20 || v20 < 0.0)
            v20 = *(double *)(v23 + 96);
          if ((_DWORD)result)
            return result;
        }
        if (!v19)
          break;
LABEL_17:
        v18 += 24;
        if (24 * v53 == v18)
        {
          LOBYTE(v15) = *(_BYTE *)(v6 + 18);
          v16 = v17;
          v2 = v52;
          goto LABEL_77;
        }
      }
LABEL_73:
      LOBYTE(v15) = *(_BYTE *)(v6 + 18) + 1;
      *(_BYTE *)(v6 + 18) = v15;
      if (v14 > v15)
      {
        v2 = v52;
        v17 += *(unsigned __int8 *)(v52 + 39);
        continue;
      }
      v15 = v15;
      v2 = v52;
LABEL_89:
      v3 = v50;
      goto LABEL_90;
    }
    break;
  }
  v20 = -1.0;
  LOBYTE(v19) = 2;
LABEL_77:
  v40 = v15 + 1;
  *(_BYTE *)(v6 + 18) = v15 + 1;
  v41 = *(_BYTE *)(v6 + 16);
  v42 = v41 - 1;
  if (v41 == 1)
  {
    v43 = *(_QWORD *)(v6 + 8);
    if (v14 > v40)
      goto LABEL_84;
    goto LABEL_83;
  }
  v43 = (((unint64_t)*v16 << 56) | ((unint64_t)v16[1] << 48) | ((unint64_t)v16[2] << 40) | ((unint64_t)v16[3] << 32) | ((unint64_t)v16[4] << 24) | ((unint64_t)v16[5] << 16) | ((unint64_t)v16[6] << 8))
      + v16[7];
  v44 = *(unsigned int *)(a1 + 36);
  if ((int)v44 < 1)
  {
LABEL_82:
    LOBYTE(v15) = 0;
    if (v14 > v40)
    {
LABEL_84:
      if (v20 >= 0.0)
        v47 = v20;
      else
        v47 = 0.0;
      v48 = sub_1ACCA0358(a1, v42, v47);
      if (!v48)
        return 7;
      *(_BYTE *)(v48 + 17) = v19;
      *(_BYTE *)(v48 + 18) = v15;
      v15 = v15;
      *(_QWORD *)(v48 + 8) = v43;
      goto LABEL_89;
    }
LABEL_83:
    sub_1ACCA11B4(a1);
    goto LABEL_84;
  }
  v45 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8);
  while (1)
  {
    v46 = *v45;
    v45 += 3;
    if (v46 == v43)
      return 267;
    if (!--v44)
      goto LABEL_82;
  }
}

uint64_t sub_1ACCA1030(uint64_t a1, char a2, double a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_DWORD *)(a1 + 36);
  v7 = *(int *)(a1 + 32);
  if (v6 >= (int)v7)
  {
    v23 = *(_QWORD *)(a1 + 48);
    if (sqlite3_initialize())
      return 0;
    v25 = 2 * v7 + 8;
    v8 = sub_1ACB6BB48(v23, 24 * v25);
    if (!v8)
      return 0;
    *(_QWORD *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 32) = v25;
    v6 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 36) = v6 + 1;
  v9 = v8 + 24 * v6;
  *(double *)v9 = a3;
  *(_BYTE *)(v9 + 16) = a2;
  if (v6 >= 1)
  {
    do
    {
      v14 = v6 - 1;
      v15 = (v6 - 1) >> 1;
      v16 = *(_QWORD *)(a1 + 48);
      v17 = (__int128 *)(v16 + 24 * v15);
      if (*(double *)v9 >= *(double *)v17
        && (*(double *)v9 > *(double *)v17
         || *(unsigned __int8 *)(v9 + 16) >= *(unsigned __int8 *)(v16 + 24 * v15 + 16)))
      {
        break;
      }
      v9 = v16 + 24 * v15;
      v18 = *v17;
      v26 = *((_QWORD *)v17 + 2);
      v19 = v16 + 24 * v6;
      v20 = *(_QWORD *)(v19 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v19;
      *(_QWORD *)(v9 + 16) = v20;
      v21 = *(_QWORD *)(a1 + 48) + 24 * v6;
      *(_OWORD *)v21 = v18;
      *(_QWORD *)(v21 + 16) = v26;
      if (v6 <= 8)
      {
        if (v6 < 4)
        {
          v10 = 8 * (v15 + 1);
          v11 = a1 + 88;
          v12 = *(_QWORD *)(a1 + 88 + v10);
          v13 = 8 * (v6 + 1);
          *(_QWORD *)(v11 + v10) = *(_QWORD *)(a1 + 88 + v13);
          *(_QWORD *)(v11 + v13) = v12;
        }
        else
        {
          v22 = a1 + 8 * (v15 + 1);
          sub_1ACC9FEC4(*(_QWORD *)a1, *(_QWORD *)(v22 + 88));
          *(_QWORD *)(v22 + 88) = 0;
        }
      }
      v6 = v14 >> 1;
    }
    while (v14 > 1);
  }
  return v9;
}

uint64_t sub_1ACCA11B4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  double v27;
  double v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 9);
  v3 = result + 8 * (1 - v2);
  v6 = *(_QWORD *)(v3 + 88);
  v5 = (_QWORD *)(v3 + 88);
  v4 = v6;
  if (v6)
  {
    result = sub_1ACC9FEC4(*(_QWORD *)result, v4);
    *v5 = 0;
    LODWORD(v2) = *(unsigned __int8 *)(v1 + 9);
  }
  if ((_DWORD)v2)
  {
    v7 = v1 + 4 * *(unsigned __int8 *)(v1 + 80);
    --*(_DWORD *)(v7 + 128);
    *(_BYTE *)(v1 + 9) = 0;
    return result;
  }
  v8 = *(int *)(v1 + 36);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(v1 + 48);
    v10 = v1 + 4 * *(unsigned __int8 *)(v9 + 16);
    --*(_DWORD *)(v10 + 128);
    v11 = v8 - 1;
    *(_DWORD *)(v1 + 36) = v8 - 1;
    v12 = v9 + 24 * ((int)v8 - 1);
    v13 = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v12;
    *(_QWORD *)(v9 + 16) = v13;
    if ((int)v8 > 4
      || (v14 = v1 + 8 * v8, *(_QWORD *)(v1 + 96) = *(_QWORD *)(v14 + 88), *(_QWORD *)(v14 + 88) = 0, (int)v8 >= 3))
    {
      v15 = 0;
      v16 = 0;
      v17 = 1;
      do
      {
        v23 = v15 + 2;
        v24 = *(_QWORD *)(v1 + 48);
        v25 = (__int128 *)(v24 + 24 * v16);
        if (v15 + 2 >= v11)
        {
          v29 = v17;
          v28 = *(double *)(v24 + 24 * v17);
        }
        else
        {
          v26 = (__int128 *)(v24 + 24 * v23);
          v27 = *(double *)v26;
          v28 = *(double *)(v24 + 24 * v17);
          if (*(double *)v26 < v28
            || (v29 = v17, *(double *)v26 <= v28)
            && *(unsigned __int8 *)(v24 + 24 * v23 + 16) < *(unsigned __int8 *)(v24 + 24 * v17 + 16))
          {
            if (v27 >= *(double *)v25
              && (v27 > *(double *)v25
               || *(unsigned __int8 *)(v24 + 24 * v23 + 16) >= *(unsigned __int8 *)(v24 + 24 * v16 + 16)))
            {
              return result;
            }
            v30 = *v25;
            v31 = *((_QWORD *)v25 + 2);
            v32 = *((_QWORD *)v26 + 2);
            *v25 = *v26;
            *((_QWORD *)v25 + 2) = v32;
            v33 = *(_QWORD *)(v1 + 48) + 24 * v23;
            *(_OWORD *)v33 = v30;
            *(_QWORD *)(v33 + 16) = v31;
            if (v16 <= 3)
            {
              v34 = v16 + 1;
              if (v23 < 4)
              {
                v18 = v15 + 3;
                v19 = 8 * (int)v34;
                v20 = v1 + 88;
                v21 = *(_QWORD *)(v1 + 88 + v19);
                v22 = 8 * v18;
                *(_QWORD *)(v20 + v19) = *(_QWORD *)(v1 + 88 + v22);
                *(_QWORD *)(v20 + v22) = v21;
              }
              else
              {
                v35 = v1 + 8 * v34;
                result = sub_1ACC9FEC4(*(_QWORD *)v1, *(_QWORD *)(v35 + 88));
                *(_QWORD *)(v35 + 88) = 0;
              }
            }
            v17 = v23;
            goto LABEL_12;
          }
        }
        if (v28 >= *(double *)v25
          && (v28 > *(double *)v25
           || *(unsigned __int8 *)(v24 + 24 * v29 + 16) >= *(unsigned __int8 *)(v24 + 24 * v16 + 16)))
        {
          return result;
        }
        v36 = (__int128 *)(v24 + 24 * v29);
        v37 = *v25;
        v38 = *((_QWORD *)v25 + 2);
        v39 = *((_QWORD *)v36 + 2);
        *v25 = *v36;
        *((_QWORD *)v25 + 2) = v39;
        v40 = *(_QWORD *)(v1 + 48) + 24 * v29;
        *(_OWORD *)v40 = v37;
        *(_QWORD *)(v40 + 16) = v38;
        if (v16 <= 3)
        {
          v41 = v16 + 1;
          if (v17 < 4)
          {
            v43 = 8 * (int)v41;
            v44 = v1 + 88;
            v45 = *(_QWORD *)(v1 + 88 + v43);
            v46 = 8 * v23;
            *(_QWORD *)(v44 + v43) = *(_QWORD *)(v1 + 88 + v46);
            *(_QWORD *)(v44 + v46) = v45;
          }
          else
          {
            v42 = v1 + 8 * v41;
            result = sub_1ACC9FEC4(*(_QWORD *)v1, *(_QWORD *)(v42 + 88));
            *(_QWORD *)(v42 + 88) = 0;
          }
        }
LABEL_12:
        v16 = v17;
        v15 = 2 * v17;
        v17 = (2 * v17) | 1;
      }
      while (v17 < v11);
    }
  }
  return result;
}

uint64_t sub_1ACCA1470(_QWORD *a1, unsigned int a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t (**v8)(unsigned __int8 *);
  char *v9;
  sqlite3_stmt *pStmt;

  pStmt = 0;
  v4 = (unsigned __int8 *)sqlite3_mprintf("SELECT * FROM %Q.%Q", a1[6], a1[7]);
  if (!v4)
  {
    v7 = 7;
    goto LABEL_14;
  }
  v6 = v4;
  v7 = sub_1ACB5C66C(a1[3], v4, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v5);
  v8 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v6);
    v6 = (unsigned __int8 *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_8;
    v8 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
  }
  (*v8)(v6);
LABEL_8:
  if (!(_DWORD)v7)
  {
    if (a2)
    {
      sub_1ACBC7DC0((uint64_t *)pStmt, a2, 0, 0);
      sub_1ACBC7DC0((uint64_t *)pStmt, a2 + 1, 0, 0);
      v9 = sqlite3_mprintf("rtree constraint failed: %s.(%s<=%s)");
    }
    else
    {
      sub_1ACBC7DC0((uint64_t *)pStmt, 0, 0, 0);
      v9 = sqlite3_mprintf("UNIQUE constraint failed: %s.%s");
    }
    a1[2] = v9;
    v7 = 19;
  }
LABEL_14:
  sqlite3_finalize(pStmt);
  return v7;
}

uint64_t sub_1ACCA15F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t i;
  void (**v6)(uint64_t);
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;

  v30 = 0;
  v31 = 0;
  v4 = sub_1ACCA04B0(a1, 1, 0, &v30);
  if (!v4)
  {
    v4 = sub_1ACCA0264(a1, a2, &v31, 0);
    if (!v4)
    {
      v15 = v31;
      if (v31)
      {
        v16 = *(_QWORD *)(v31 + 24);
        v17 = __rev16(*(unsigned __int16 *)(v16 + 2));
        if (!(_DWORD)v17)
        {
LABEL_36:
          sub_1ACC9FEC4(a1, v31);
          v4 = 267;
          goto LABEL_2;
        }
        v18 = 0;
        v19 = (unsigned __int8 *)(v16 + 5);
        while ((((unint64_t)*(v19 - 1) << 56) | ((unint64_t)*v19 << 48) | ((unint64_t)v19[1] << 40) | ((unint64_t)v19[2] << 32) | ((unint64_t)v19[3] << 24) | ((unint64_t)v19[4] << 16) | ((unint64_t)v19[5] << 8))
              + v19[6] != a2)
        {
          v19 += *(unsigned __int8 *)(a1 + 39);
          if (v17 == ++v18)
            goto LABEL_36;
        }
        v4 = sub_1ACCA3880(a1, v31, v18, 0);
        v20 = sub_1ACC9FEC4(a1, v15);
        if (!v4)
          v4 = v20;
      }
    }
    if (!v4)
    {
      v21 = *(_QWORD **)(a1 + 152);
      if (!sub_1ACBA0E50((uint64_t)v21, 0))
      {
        v22 = v21[16];
        if ((*(_WORD *)(v22 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v22, a2);
        }
        else
        {
          *(_QWORD *)v22 = a2;
          *(_WORD *)(v22 + 20) = 4;
        }
        v23 = *(_QWORD *)(*v21 + 24);
        if (v23)
          xmmword_1ECD3B1D0(v23);
      }
      sqlite3_step(*(sqlite3_stmt **)(a1 + 152));
      v4 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 152));
      if (!v4)
      {
        if (*(int *)(a1 + 44) >= 1
          && (v24 = v30, v25 = *(_QWORD *)(v30 + 24), __rev16(*(unsigned __int16 *)(v25 + 2)) == 1))
        {
          *(_QWORD *)&v32[0] = 0;
          v26 = sub_1ACCA04B0(a1, (((unint64_t)*(unsigned __int8 *)(v25 + 4) << 56) | ((unint64_t)*(unsigned __int8 *)(v25 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v25 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v25 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v25 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v25 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v25 + 10) << 8))+ *(unsigned __int8 *)(v25 + 11), v30, (uint64_t *)v32);
          v27 = *(_QWORD *)&v32[0];
          if (!v26)
            v26 = sub_1ACCA3A94(a1, *(uint64_t *)&v32[0], *(_DWORD *)(a1 + 44) - 1);
          v28 = sub_1ACC9FEC4(a1, v27);
          if (v26)
            v4 = v26;
          else
            v4 = v28;
          if (!v4)
          {
            v29 = *(_DWORD *)(a1 + 44) - 1;
            *(_DWORD *)(a1 + 44) = v29;
            **(_WORD **)(v24 + 24) = bswap32(v29) >> 16;
            *(_DWORD *)(v24 + 20) = 1;
          }
        }
        else
        {
          v4 = 0;
        }
      }
    }
  }
LABEL_2:
  for (i = *(_QWORD *)(a1 + 96); i; i = *(_QWORD *)(a1 + 96))
  {
    if (!v4)
    {
      v7 = __rev16(*(unsigned __int16 *)(*(_QWORD *)(i + 24) + 2));
      if (v7)
      {
        v8 = 1;
        while (1)
        {
          v33 = 0;
          memset(v32, 0, sizeof(v32));
          sub_1ACC9C620(a1, i, v8 - 1, v32);
          v9 = sub_1ACCA19F4(a1, (uint64_t)v32, *(_DWORD *)(i + 8), &v33);
          if (v9)
            break;
          v10 = v33;
          v11 = sub_1ACCA1F90(a1, v33, v32, *(_DWORD *)(i + 8));
          v12 = sub_1ACC9FEC4(a1, v10);
          if (v11)
            v4 = v11;
          else
            v4 = v12;
          if (v4)
            v13 = 1;
          else
            v13 = v8 >= v7;
          ++v8;
          if (v13)
            goto LABEL_7;
        }
        v4 = v9;
      }
      else
      {
        v4 = 0;
      }
    }
LABEL_7:
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(i + 32);
    --*(_DWORD *)(a1 + 84);
    v6 = (void (**)(uint64_t))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(i);
      --qword_1ECD3E8D0;
      off_1ECD3B168(i);
      i = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        continue;
      v6 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    }
    (*v6)(i);
  }
  LODWORD(result) = sub_1ACC9FEC4(a1, v30);
  if (v4)
    return v4;
  else
    return result;
}

uint64_t sub_1ACCA19F4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const float *v12;
  uint64_t v13;
  unsigned int v14;
  sqlite3_int64 v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int32x4_t *v33;
  int32x4_t *v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int *v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  double v44;
  unint64_t v45;
  uint64_t v46;
  const float *v47;
  float *v48;
  float *v49;
  float *v50;
  int v51;
  float v52;
  float v53;
  float v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  BOOL v67;
  int v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  float v74[6];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  float v78[8];
  float32x4x2_t v79;
  float32x4x2_t v80;
  float32x4x2_t v81;
  float32x4x2_t v82;

  v75 = 0;
  v8 = sub_1ACCA04B0(a1, 1, 0, &v75);
  v9 = v75;
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v12 = (const float *)(a2 + 8);
    v13 = a2 + 12;
    v69 = a3;
    while (1)
    {
      if (v11 >= *(_DWORD *)(a1 + 44) - a3)
      {
        v10 = 0;
        goto LABEL_84;
      }
      v14 = __rev16(*(unsigned __int16 *)(*(_QWORD *)(v9 + 24) + 2));
      v73 = 0u;
      *(_OWORD *)v74 = 0u;
      v72 = 0u;
      v71 = 0;
      v70 = v11;
      v15 = 0;
      if (v14)
        break;
LABEL_4:
      v10 = sub_1ACCA04B0(a1, v15, v9, &v71);
      sub_1ACC9FEC4(a1, v9);
      v9 = v71;
      a3 = v69;
      v11 = v70 + 1;
      if ((_DWORD)v10)
        goto LABEL_84;
    }
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    while (1)
    {
      sub_1ACC9C620(a1, v9, v16, &v72);
      v76 = v72;
      v77 = v73;
      *(_OWORD *)v78 = *(_OWORD *)v74;
      v19 = *(unsigned __int8 *)(a1 + 38);
      v20 = *(unsigned __int8 *)(a1 + 36);
      v21 = 1.0;
      if (!*(_BYTE *)(a1 + 38))
      {
        switch(*(_BYTE *)(a1 + 36))
        {
          case 2:
            goto LABEL_25;
          case 3:
            goto LABEL_24;
          case 4:
            goto LABEL_23;
          case 5:
            v21 = (float)(v78[3] - v78[2]);
LABEL_23:
            v21 = v21 * (float)(v78[1] - v78[0]);
LABEL_24:
            v21 = v21 * (float)(*((float *)&v77 + 3) - *((float *)&v77 + 2));
LABEL_25:
            v21 = v21 * (float)(*((float *)&v77 + 1) - *(float *)&v77);
            break;
          default:
            break;
        }
        v27 = *((_QWORD *)&v76 + 1);
        v28 = *(unsigned __int8 *)(a1 + 37);
        if (v28 <= 2)
          v29 = 2;
        else
          v29 = *(unsigned __int8 *)(a1 + 37);
        if (v29 >= 7)
        {
          v45 = ((v29 - 1) >> 1) + 1;
          v30 = 2 * (v45 & 0x7FFFFFFFFFFFFFFCLL);
          v46 = v45 & 0x7FFFFFFFFFFFFFFCLL;
          v47 = v12;
          v48 = (float *)&v76 + 2;
          do
          {
            v79 = vld2q_f32(v48);
            v81 = vld2q_f32(v47);
            v47 += 8;
            v82.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v81.val[0], v79.val[0]), (int8x16_t)v79.val[0], (int8x16_t)v81.val[0]);
            v82.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v79.val[1], v81.val[1]), (int8x16_t)v79.val[1], (int8x16_t)v81.val[1]);
            vst2q_f32(v48, v82);
            v48 += 8;
            v46 -= 4;
          }
          while (v46);
          if (v45 != (v45 & 0x7FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
        }
        else
        {
          v30 = 0;
LABEL_45:
          v49 = (float *)(v13 + 4 * v30);
          v50 = (float *)&v76 + v30 + 3;
          do
          {
            if (*(v50 - 1) >= *(v49 - 1))
              v51 = *((_DWORD *)v49 - 1);
            else
              v51 = *((_DWORD *)v50 - 1);
            v52 = *v50;
            v53 = *v49;
            v49 += 2;
            v54 = v53;
            if (*v50 <= v53)
              v52 = v54;
            *((_DWORD *)v50 - 1) = v51;
            *v50 = v52;
            v30 += 2;
            v50 += 2;
          }
          while (v30 < v28);
        }
        v44 = (float)(*((float *)&v27 + 1) - *(float *)&v27);
        goto LABEL_53;
      }
      switch(*(_BYTE *)(a1 + 36))
      {
        case 2:
          goto LABEL_15;
        case 3:
          goto LABEL_14;
        case 4:
          goto LABEL_13;
        case 5:
          v21 = (double)(SLODWORD(v78[3]) - (uint64_t)SLODWORD(v78[2]));
LABEL_13:
          v21 = v21 * (double)(SLODWORD(v78[1]) - (uint64_t)SLODWORD(v78[0]));
LABEL_14:
          v21 = v21 * (double)(SHIDWORD(v77) - (uint64_t)SDWORD2(v77));
LABEL_15:
          v21 = v21 * (double)(SDWORD1(v77) - (uint64_t)(int)v77);
          break;
        default:
          break;
      }
      v23 = SDWORD2(v76);
      v22 = SHIDWORD(v76);
      v24 = *(unsigned __int8 *)(a1 + 37);
      v25 = v24 <= 2 ? 2 : *(unsigned __int8 *)(a1 + 37);
      if (v25 < 7)
        break;
      v31 = ((v25 - 1) >> 1) + 1;
      v26 = 2 * (v31 & 0x7FFFFFFFFFFFFFFCLL);
      v32 = v31 & 0x7FFFFFFFFFFFFFFCLL;
      v33 = (int32x4_t *)v12;
      v34 = (int32x4_t *)((char *)&v76 + 8);
      do
      {
        v35 = v34[1];
        v36 = *v33;
        v37 = v33[1];
        v33 += 2;
        v80.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v34, v36), vminq_s32(v35, v37));
        v80.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v34, v36), vmaxq_s32(v35, v37));
        vst2q_f32((float *)v34->i32, v80);
        v34 += 2;
        v32 -= 4;
      }
      while (v32);
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
LABEL_41:
      v44 = (double)(v22 - v23);
LABEL_53:
      v55 = v21 * v44;
      v56 = 1.0;
      v57 = v20 - 2;
      v58 = 1.0;
      if (v19)
      {
        v59 = 1.0;
        v60 = 1.0;
        switch(v57)
        {
          case 0:
            goto LABEL_58;
          case 1:
            goto LABEL_57;
          case 2:
            goto LABEL_56;
          case 3:
            v58 = (double)(SLODWORD(v78[3]) - (uint64_t)SLODWORD(v78[2]));
LABEL_56:
            v59 = v58 * (double)(SLODWORD(v78[1]) - (uint64_t)SLODWORD(v78[0]));
LABEL_57:
            v60 = v59 * (double)(SHIDWORD(v77) - (uint64_t)SDWORD2(v77));
LABEL_58:
            v58 = v60 * (double)(SDWORD1(v77) - (uint64_t)(int)v77);
            break;
          default:
            break;
        }
        switch(v57)
        {
          case 0:
            goto LABEL_63;
          case 1:
            goto LABEL_62;
          case 2:
            goto LABEL_61;
          case 3:
            v56 = (double)(SLODWORD(v74[3]) - (uint64_t)SLODWORD(v74[2]));
LABEL_61:
            v56 = v56 * (double)(SLODWORD(v74[1]) - (uint64_t)SLODWORD(v74[0]));
LABEL_62:
            v56 = v56 * (double)(SHIDWORD(v73) - (uint64_t)SDWORD2(v73));
LABEL_63:
            v56 = v56 * (double)(SDWORD1(v73) - (uint64_t)(int)v73);
            break;
          default:
            break;
        }
        v61 = v58 * (double)(SHIDWORD(v76) - (uint64_t)SDWORD2(v76));
        v62 = (double)(SHIDWORD(v72) - (uint64_t)SDWORD2(v72));
      }
      else
      {
        v63 = 1.0;
        v64 = 1.0;
        switch(v57)
        {
          case 0:
            goto LABEL_69;
          case 1:
            goto LABEL_68;
          case 2:
            goto LABEL_67;
          case 3:
            v58 = (float)(v78[3] - v78[2]);
LABEL_67:
            v63 = v58 * (float)(v78[1] - v78[0]);
LABEL_68:
            v64 = v63 * (float)(*((float *)&v77 + 3) - *((float *)&v77 + 2));
LABEL_69:
            v58 = v64 * (float)(*((float *)&v77 + 1) - *(float *)&v77);
            break;
          default:
            break;
        }
        switch(v57)
        {
          case 0:
            goto LABEL_74;
          case 1:
            goto LABEL_73;
          case 2:
            goto LABEL_72;
          case 3:
            v56 = (float)(v74[3] - v74[2]);
LABEL_72:
            v56 = v56 * (float)(v74[1] - v74[0]);
LABEL_73:
            v56 = v56 * (float)(*((float *)&v73 + 3) - *((float *)&v73 + 2));
LABEL_74:
            v56 = v56 * (float)(*((float *)&v73 + 1) - *(float *)&v73);
            break;
          default:
            break;
        }
        v61 = v58 * (float)(*((float *)&v76 + 3) - *((float *)&v76 + 2));
        v62 = (float)(*((float *)&v72 + 3) - *((float *)&v72 + 2));
      }
      v65 = v56 * v62;
      v66 = v61 - v55;
      if (!v16 || v66 < v18 || (v66 == v18 ? (v67 = v65 < v17) : (v67 = 0), v67))
      {
        v15 = v72;
        v18 = v66;
        v17 = v65;
      }
      if (++v16 == v14)
        goto LABEL_4;
    }
    v26 = 0;
LABEL_34:
    v38 = (int *)(v13 + 4 * v26);
    v39 = (int *)&v76 + v26 + 3;
    do
    {
      if (*(v39 - 1) >= *(v38 - 1))
        v40 = *(v38 - 1);
      else
        v40 = *(v39 - 1);
      v41 = *v39;
      v43 = *v38;
      v38 += 2;
      v42 = v43;
      if (*v39 <= v43)
        v41 = v42;
      *(v39 - 1) = v40;
      *v39 = v41;
      v26 += 2;
      v39 += 2;
    }
    while (v26 < v24);
    goto LABEL_41;
  }
  v10 = v8;
LABEL_84:
  *a4 = v9;
  return v10;
}

uint64_t sub_1ACCA1F90(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t (**v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  float *v46;
  double *v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  void *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  char *v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int32x4_t v86;
  int32x4_t *v87;
  float64x2_t v88;
  float64x2_t *v89;
  uint64_t v90;
  float64x2_t v91;
  double *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float *v96;
  int v97;
  double v98;
  double *v99;
  uint64_t v100;
  float *v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  unint64_t *v109;
  uint64_t v110;
  signed int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  BOOL v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  BOOL v135;
  int *v136;
  __int128 *v137;
  __int128 *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  double v144;
  int v145;
  uint64_t v146;
  double v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  int32x4_t *v158;
  uint64_t v159;
  int32x4_t *v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int *v164;
  int *v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int32x4_t *v170;
  uint64_t v171;
  int32x4_t *v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int *v176;
  int *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  const float *v182;
  uint64_t v183;
  float *v184;
  float *v185;
  float *v186;
  float v187;
  float v188;
  float v189;
  float v190;
  const float *v191;
  uint64_t v192;
  float *v193;
  float *v194;
  float *v195;
  float v196;
  float v197;
  float v198;
  float v199;
  double v200;
  float *v201;
  unint64_t v202;
  double v203;
  double v204;
  double v205;
  float *v206;
  unint64_t v207;
  double v208;
  double v209;
  unint64_t v210;
  double v211;
  float *v212;
  float *v213;
  int v214;
  double v215;
  double v216;
  double v217;
  BOOL v218;
  float v219;
  float v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  uint64_t v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  __int128 *v237;
  __int128 v238;
  __int128 v239;
  __int128 *v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 *v246;
  int v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _DWORD *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  int32x4_t *v260;
  int32x4_t *v261;
  uint64_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int *v266;
  int *v267;
  int v268;
  int v269;
  int v270;
  int v271;
  float *v272;
  const float *v273;
  uint64_t v274;
  float *v275;
  float *v276;
  float v277;
  float v278;
  float v279;
  float v280;
  uint64_t (**v281)(void *);
  uint64_t *v282;
  uint64_t v283;
  uint64_t **v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  int v290;
  uint64_t (*v291)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v292;
  unint64_t v293;
  uint64_t *j;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  __int128 *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  unint64_t v314;
  unsigned int v315;
  char *v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  float32x4x2_t v330;
  float32x4x2_t v331;
  float32x4x2_t v332;
  float32x4x2_t v333;
  float32x4x2_t v334;
  float32x4x2_t v335;
  float32x4x2_t v336;
  float32x4x2_t v337;
  float32x4x2_t v338;
  float32x4x2_t v339;
  float32x4x2_t v340;
  float32x4x2_t v341;

  v5 = (uint64_t)a3;
  v329 = *MEMORY[0x1E0C80C00];
  if (a4 >= 1)
  {
    v8 = (1372618415 * (unint64_t)*a3) >> 32;
    v9 = *(uint64_t **)(a1
                     + 8
                     * (*a3
                      - 97 * ((v8 + ((*a3 - v8) >> 1)) >> 6))
                     + 192);
    if (v9)
    {
      while (v9[1] != *a3)
      {
        v9 = (uint64_t *)v9[4];
        if (!v9)
          goto LABEL_9;
      }
      sub_1ACC9FEC4(a1, *v9);
      if (a2)
        ++*(_DWORD *)(a2 + 16);
      *v9 = a2;
    }
  }
LABEL_9:
  v10 = *(unsigned __int8 *)(a1 + 39);
  v11 = (*(_DWORD *)(a1 + 32) - 4) / v10;
  v12 = *(_QWORD *)(a2 + 24);
  v13 = __rev16(*(unsigned __int16 *)(v12 + 2));
  if (v13 < v11)
  {
    v14 = (v13 * v10) + v12;
    *(_QWORD *)(v14 + 4) = bswap64(*(_QWORD *)v5);
    v15 = v14 + 4;
    if (*(_BYTE *)(a1 + 37))
    {
      v16 = 0;
      v17 = (_DWORD *)(v15 + 8);
      do
        *v17++ = bswap32(*(_DWORD *)(v5 + 8 + 4 * v16++));
      while (v16 < *(unsigned __int8 *)(a1 + 37));
    }
    *(_WORD *)(*(_QWORD *)(a2 + 24) + 2) = bswap32(v13 + 1) >> 16;
    *(_DWORD *)(a2 + 20) = 1;
  }
  if (v13 == v11)
  {
    if (*(_DWORD *)(a1 + 104) >= a4)
    {
      v18 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)(a2 + 8) != 1)
      {
        *(_DWORD *)(a1 + 104) = a4;
        *(_QWORD *)&v328 = 0;
        v326 = 0u;
        v327 = 0u;
        v19 = *(unsigned __int16 *)(v18 + 2);
        if (sqlite3_initialize())
          return 7;
        v34 = __rev16(v19);
        v35 = ((_DWORD)v34 + 2) & 0x1FFFE;
        v36 = sub_1ACB5D828(v35 << 6);
        if (!v36)
          return 7;
        v25 = v36;
        v310 = (__int128 *)v5;
        v37 = 0;
        v38 = (v34 + 1);
        v39 = (char *)(v36 + 48 * v35);
        v316 = &v39[4 * v35];
        v40 = (_OWORD *)(v36 + 48 * v34);
        v41 = v36 + 12;
        do
        {
          while (1)
          {
            if (v37 == v34)
            {
              v42 = *v310;
              v43 = v310[2];
              v40[1] = v310[1];
              v40[2] = v43;
              *v40 = v42;
            }
            else
            {
              sub_1ACC9C620(a1, a2, v37, (_QWORD *)(v25 + 48 * v37));
            }
            *(_DWORD *)&v39[4 * v37] = v37;
            v44 = *(unsigned __int8 *)(a1 + 36);
            if (*(_BYTE *)(a1 + 36))
              break;
            if (++v37 == v38)
              goto LABEL_95;
          }
          v45 = *(unsigned __int8 *)(a1 + 38);
          v46 = (float *)(v41 + 48 * v37);
          v47 = (double *)&v326;
          v48 = *(unsigned __int8 *)(a1 + 36);
          do
          {
            v51 = *v47;
            if (v45)
            {
              v49 = v51 + (double)*((int *)v46 - 1);
              *v47 = v49;
              v50 = (double)*(int *)v46;
            }
            else
            {
              v49 = v51 + *(v46 - 1);
              *v47 = v49;
              v50 = *v46;
            }
            *v47++ = v49 + v50;
            v46 += 2;
            --v48;
          }
          while (v48);
          ++v37;
        }
        while (v37 != v38);
        v60 = (double)(int)v38 + (double)(int)v38;
        if (v44 >= 4)
        {
          v61 = v44 & 0xFC;
          v88 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
          v89 = (float64x2_t *)&v327;
          v90 = v61;
          do
          {
            v91 = vdivq_f64(*v89, v88);
            v89[-1] = vdivq_f64(v89[-1], v88);
            *v89 = v91;
            v89 += 2;
            v90 -= 4;
          }
          while (v90);
          if (v61 == v44)
            goto LABEL_95;
        }
        else
        {
          v61 = 0;
        }
        v92 = (double *)&v326 + v61;
        v93 = v44 - v61;
        do
        {
          *v92 = *v92 / v60;
          ++v92;
          --v93;
        }
        while (v93);
LABEL_95:
        v94 = 0;
        v95 = (uint64_t)&v316[4 * (((_DWORD)v34 + 2) & 0x1FFFE)];
        v96 = (float *)(v25 + 12);
        do
        {
          *(_QWORD *)(v95 + 8 * v94) = 0;
          if ((_DWORD)v44)
          {
            v97 = *(unsigned __int8 *)(a1 + 38);
            v98 = 0.0;
            v99 = (double *)&v326;
            v100 = v44;
            v101 = v96;
            do
            {
              if (v97)
              {
                v102 = (double)*(int *)v101;
                v103 = (double)*((int *)v101 - 1);
              }
              else
              {
                v102 = *v101;
                v103 = *(v101 - 1);
              }
              v104 = *v99++;
              v98 = v98 + (v102 - v103 - v104) * (v102 - v103 - v104);
              *(double *)(v95 + 8 * v94) = v98;
              v101 += 2;
              --v100;
            }
            while (v100);
          }
          ++v94;
          v96 += 12;
        }
        while (v94 != v38);
        sub_1ACCA4968(v39, v34 + 1, v95, v316);
        bzero((void *)(*(_QWORD *)(a2 + 24) + 2), *(int *)(a1 + 32) - 2);
        v105 = 0;
        *(_DWORD *)(a2 + 20) = 1;
        while (1)
        {
          v106 = *(unsigned __int8 *)(a1 + 39);
          v107 = (*(_DWORD *)(a1 + 32) - 4) / v106;
          if (v105 >= (int)(((int)(((unint64_t)(1431655765 * v107) >> 32) - v107) >> 1)
                           + ((((unint64_t)(1431655765 * v107) >> 32) - v107) >> 31)
                           + v34))
            break;
          v108 = *(_DWORD *)&v39[4 * v105];
          v109 = (unint64_t *)(v25 + 48 * v108);
          v110 = *(_QWORD *)(a2 + 24);
          v111 = __rev16(*(unsigned __int16 *)(v110 + 2));
          if (v111 < v107)
          {
            v112 = (v111 * v106) + v110;
            *(_QWORD *)(v112 + 4) = bswap64(*v109);
            v113 = v112 + 4;
            if (*(_BYTE *)(a1 + 37))
            {
              v114 = 0;
              v115 = (_DWORD *)(v113 + 8);
              v116 = v25 + 8 + 48 * v108;
              do
                *v115++ = bswap32(*(_DWORD *)(v116 + 4 * v114++));
              while (v114 < *(unsigned __int8 *)(a1 + 37));
            }
            *(_WORD *)(*(_QWORD *)(a2 + 24) + 2) = bswap32(v111 + 1) >> 16;
            *(_DWORD *)(a2 + 20) = 1;
          }
          v117 = *v109;
          if (*v109 == *(_QWORD *)v310)
          {
            v118 = *(_QWORD *)(a2 + 8);
            if (a4)
              v119 = sub_1ACCA45C4(a1, v117, v118);
            else
              v119 = sub_1ACCA44D8(a1, v117, v118);
            v20 = v119;
            ++v105;
            if ((_DWORD)v119)
              goto LABEL_27;
          }
          else
          {
            ++v105;
          }
        }
        v20 = sub_1ACCA3CE8((unsigned __int8 *)a1, (uint64_t *)a2);
        if (!(_DWORD)v20 && v34 >= v105)
        {
          v120 = v105;
          while (1)
          {
            *(_QWORD *)&v323 = 0;
            v121 = v25 + 48 * *(int *)&v39[4 * v120];
            v122 = sub_1ACCA19F4(a1, v121, a4, (uint64_t *)&v323);
            if ((_DWORD)v122)
              break;
            v123 = v323;
            v124 = sub_1ACCA1F90(a1, v323, v121, a4);
            v125 = sub_1ACC9FEC4(a1, v123);
            if (v124)
              v20 = v124;
            else
              v20 = v125;
            if ((_DWORD)v20)
              v126 = 1;
            else
              v126 = v120 >= v34;
            ++v120;
            if (v126)
              goto LABEL_27;
          }
          v20 = v122;
        }
        goto LABEL_27;
      }
    }
    v24 = *(unsigned __int16 *)(v18 + 2);
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    v318 = 0u;
    if (sqlite3_initialize())
    {
      v25 = 0;
      v26 = 0;
LABEL_25:
      v27 = 0;
      v20 = 7;
      v28 = 1;
      goto LABEL_26;
    }
    v30 = __rev16(v24);
    v31 = (v30 + 1);
    v32 = sub_1ACB5D828(52 * v31);
    v26 = v32;
    if (!v32)
    {
      v25 = 0;
      goto LABEL_25;
    }
    v313 = 4 * v31;
    bzero((void *)(v32 + 48 * v31), 4 * v31);
    v309 = v26;
    v315 = v30;
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        sub_1ACC9C620(a1, a2, i, (_QWORD *)v26);
        v26 += 48;
      }
    }
    else
    {
      v30 = 0;
    }
    bzero((void *)(*(_QWORD *)(a2 + 24) + 2), *(int *)(a1 + 32) - 2);
    *(_DWORD *)(a2 + 20) = 1;
    v52 = (_OWORD *)(v309 + 48 * v30);
    v53 = *(_OWORD *)v5;
    v54 = *(_OWORD *)(v5 + 32);
    v52[1] = *(_OWORD *)(v5 + 16);
    v52[2] = v54;
    *v52 = v53;
    if (*(_QWORD *)(a2 + 8) == 1)
    {
      v55 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (v62 = (uint64_t *)sub_1ACB5D828(v55 + 40)) == 0)
      {
        v56 = 0;
      }
      else
      {
        v63 = v62;
        bzero(v62, *(int *)(a1 + 32) + 40);
        v63[3] = (uint64_t)(v63 + 5);
        ++*(_DWORD *)(a1 + 84);
        *v63 = a2;
        v56 = v63;
        v63[2] = 0x100000001;
        ++*(_DWORD *)(a2 + 16);
      }
      v64 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (v67 = (void *)sub_1ACB5D828(v64 + 40)) == 0)
      {
        v26 = 0;
      }
      else
      {
        v26 = (uint64_t)v67;
        bzero(v67, *(int *)(a1 + 32) + 40);
        *(_QWORD *)(v26 + 24) = v26 + 40;
        ++*(_DWORD *)(a1 + 84);
        *(_QWORD *)v26 = a2;
        *(_QWORD *)(v26 + 16) = 0x100000001;
        ++*(_DWORD *)(a2 + 16);
      }
      v68 = *(_DWORD *)(a1 + 44) + 1;
      *(_DWORD *)(a1 + 44) = v68;
      *(_DWORD *)(a2 + 20) = 1;
      **(_WORD **)(a2 + 24) = bswap32(v68) >> 16;
      v27 = (uint64_t)v56;
    }
    else
    {
      v57 = v5;
      v58 = *(_QWORD *)a2;
      v59 = *(int *)(a1 + 32);
      if (sqlite3_initialize() || (v65 = (uint64_t *)sub_1ACB5D828(v59 + 40)) == 0)
      {
        v27 = 0;
        v5 = v57;
      }
      else
      {
        v66 = v65;
        bzero(v65, *(int *)(a1 + 32) + 40);
        v27 = (uint64_t)v66;
        v66[3] = (uint64_t)(v66 + 5);
        ++*(_DWORD *)(a1 + 84);
        *v66 = v58;
        v66[2] = 0x100000001;
        v5 = v57;
        if (v58)
          ++*(_DWORD *)(v58 + 16);
      }
      ++*(_DWORD *)(a2 + 16);
      v26 = a2;
    }
    v28 = 0;
    v20 = 7;
    if (!v26 || !v27)
    {
      v25 = v309;
      goto LABEL_26;
    }
    v302 = v26;
    v69 = v27;
    bzero(*(void **)(v26 + 24), *(int *)(a1 + 32));
    v307 = v69;
    bzero(*(void **)(v69 + 24), *(int *)(a1 + 32));
    v70 = *(unsigned __int8 *)(a1 + 36);
    if (sqlite3_initialize()
      || (v71 = v313 + 8 + (v313 + 8) * (unint64_t)v70, (v72 = (_QWORD *)sub_1ACB5D828(v71)) == 0))
    {
      v28 = 0;
      v25 = v309;
      goto LABEL_316;
    }
    v73 = v72;
    v74 = *(unsigned __int8 *)(a1 + 36);
    bzero(v72, v71);
    LODWORD(v75) = *(unsigned __int8 *)(a1 + 36);
    if (!*(_BYTE *)(a1 + 36))
    {
      v233 = 0;
      v234 = 0;
LABEL_263:
      v81 = v307;
      goto LABEL_266;
    }
    v311 = v5;
    v76 = v73;
    v77 = 0;
    v78 = (char *)&v76[v74] + 4 * (v31 * v74);
    v79.i64[0] = 0x400000004;
    v79.i64[1] = 0x400000004;
    v80.i64[0] = 0x800000008;
    v80.i64[1] = 0x800000008;
    v308 = v76;
    v81 = v307;
    while (1)
    {
      v82 = (char *)&v308[v75] + 4 * v77 * v31;
      v308[v77] = v82;
      if (v315 >= 7)
      {
        v84 = v75;
        v85 = v31 & 0x1FFF8;
        v86 = (int32x4_t)xmmword_1ACCBDDF0;
        do
        {
          v87 = (int32x4_t *)&v76[v84];
          *v87 = v86;
          v87[1] = vaddq_s32(v86, v79);
          v86 = vaddq_s32(v86, v80);
          v84 += 4;
          v85 -= 8;
        }
        while (v85);
        v83 = v31 & 0x1FFF8;
        if ((v31 & 0x1FFF8) == v31)
          goto LABEL_82;
      }
      else
      {
        v83 = 0;
      }
      do
      {
        *((_DWORD *)&v76[v75] + v83) = v83;
        ++v83;
      }
      while (v31 != v83);
LABEL_82:
      sub_1ACCA47D0((float *)a1, v82, v31, v77++, v309, v78);
      v75 = *(unsigned __int8 *)(a1 + 36);
      v76 = (_QWORD *)((char *)v76 + v313);
      v79.i64[0] = 0x400000004;
      v79.i64[1] = 0x400000004;
      v80.i64[0] = 0x800000008;
      v80.i64[1] = 0x800000008;
      if (v77 >= v75)
      {
        if (*(_BYTE *)(a1 + 36))
        {
          v127 = 0;
          v128 = 0;
          v129 = 0;
          v130 = (*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39);
          v303 = ((int)(((unint64_t)(1431655765 * v130) >> 32) - v130) >> 1)
               + ((((unint64_t)(1431655765 * v130) >> 32) - v130) >> 31)
               + v31;
          v73 = v308;
          v131 = v309 + 8;
          v132 = v309 + 12;
          v133 = 0.0;
          while (1)
          {
            v305 = v129;
            v306 = v128;
            v314 = v75;
            v304 = v127;
            if (v130 / 3 <= v303)
              break;
            v312 = 0;
            v134 = 0.0;
LABEL_133:
            v135 = v134 < v133 || v304 == 0;
            if (v135)
              v129 = v304;
            else
              v129 = v305;
            if (v135)
              v128 = v312;
            else
              v128 = v306;
            if (v135)
              v133 = v134;
            v127 = v304 + 1;
            v75 = v314;
            v73 = v308;
            if (v304 + 1 == v314)
            {
              v233 = v129;
              v234 = v128;
              v5 = v311;
              goto LABEL_263;
            }
          }
          v312 = 0;
          v136 = (int *)v73[v127];
          v137 = (__int128 *)(v309 + 48 * *v136);
          v138 = (__int128 *)(v309 + 48 * v136[v30]);
          v139 = *(unsigned __int8 *)(a1 + 37);
          if (v139 <= 2)
            v140 = 2;
          else
            v140 = *(unsigned __int8 *)(a1 + 37);
          v141 = ((v140 - 1) >> 1) + 1;
          v142 = *(unsigned __int8 *)(a1 + 38);
          v143 = v141 & 0x7FFFFFFFFFFFFFFCLL;
          v144 = 0.0;
          v145 = v142;
          v146 = v130 / 3;
          v147 = 0.0;
          v134 = 0.0;
          while (1)
          {
            v148 = *v137;
            v149 = v137[2];
            v327 = v137[1];
            v328 = v149;
            v326 = v148;
            v150 = *v138;
            v151 = v138[2];
            v324 = v138[1];
            v325 = v151;
            v323 = v150;
            if (v315 >= 2)
              break;
LABEL_207:
            v200 = 0.0;
            v201 = (float *)&v326 + v139 + 1;
            v202 = v139 + 2;
            do
            {
              if (v142)
              {
                v203 = (double)*(int *)v201;
                v204 = (double)*((int *)v201 - 1);
              }
              else
              {
                v203 = *v201;
                v204 = *(v201 - 1);
              }
              v200 = v200 + v203 - v204;
              v202 -= 2;
              v201 -= 2;
            }
            while (v202 > 3);
            v205 = 0.0;
            v206 = (float *)&v323 + v139 + 1;
            v207 = v139 + 2;
            do
            {
              if (v142)
              {
                v208 = (double)*(int *)v206;
                v209 = (double)*((int *)v206 - 1);
              }
              else
              {
                v208 = *v206;
                v209 = *(v206 - 1);
              }
              v205 = v205 + v208 - v209;
              v207 -= 2;
              v206 -= 2;
            }
            while (v207 > 3);
            if (!(_DWORD)v139)
            {
              v211 = 1.0;
              v221 = 1.0;
              if (!v142)
                goto LABEL_243;
LABEL_231:
              v222 = 1.0;
              v223 = 1.0;
              v224 = 1.0;
              switch((int)v314)
              {
                case 2:
                  goto LABEL_235;
                case 3:
                  goto LABEL_234;
                case 4:
                  goto LABEL_233;
                case 5:
                  v222 = (double)(SHIDWORD(v328) - (uint64_t)SDWORD2(v328));
LABEL_233:
                  v223 = v222 * (double)(SDWORD1(v328) - (uint64_t)(int)v328);
LABEL_234:
                  v224 = v223 * (double)(SHIDWORD(v327) - (uint64_t)SDWORD2(v327));
LABEL_235:
                  v222 = v224 * (double)(SDWORD1(v327) - (uint64_t)(int)v327);
                  break;
                default:
                  break;
              }
              switch((int)v314)
              {
                case 2:
                  goto LABEL_240;
                case 3:
                  goto LABEL_239;
                case 4:
                  goto LABEL_238;
                case 5:
                  v221 = (double)(SHIDWORD(v325) - (uint64_t)SDWORD2(v325));
LABEL_238:
                  v221 = v221 * (double)(SDWORD1(v325) - (uint64_t)(int)v325);
LABEL_239:
                  v221 = v221 * (double)(SHIDWORD(v324) - (uint64_t)SDWORD2(v324));
LABEL_240:
                  v221 = v221 * (double)(SDWORD1(v324) - (uint64_t)(int)v324);
                  break;
                default:
                  break;
              }
              v225 = v222 * (double)(SHIDWORD(v326) - (uint64_t)SDWORD2(v326));
              v226 = v221 * (double)(SHIDWORD(v323) - (uint64_t)SDWORD2(v323));
              v227 = v130 / 3;
              goto LABEL_254;
            }
            v210 = 0;
            v211 = 1.0;
            v212 = (float *)&v326 + 3;
            v213 = (float *)&v323 + 3;
            do
            {
              if (v142)
              {
                v214 = *((_DWORD *)v212 - 1);
                if (v214 <= *((_DWORD *)v213 - 1))
                  v214 = *((_DWORD *)v213 - 1);
                v215 = (double)v214;
                v216 = (double)*(int *)v212;
                v217 = (double)*(int *)v213;
                v218 = v216 < v217;
              }
              else
              {
                v219 = *(v212 - 1);
                v220 = *v213;
                if (v219 <= *(v213 - 1))
                  v219 = *(v213 - 1);
                v215 = v219;
                v218 = *v212 < v220;
                v216 = *v212;
                v217 = v220;
              }
              if (!v218)
                v216 = v217;
              if (v216 < v215)
              {
                v211 = 0.0;
                v221 = 1.0;
                if (!v142)
                  goto LABEL_243;
                goto LABEL_231;
              }
              v211 = v211 * (v216 - v215);
              v210 += 2;
              v213 += 2;
              v212 += 2;
            }
            while (v210 < v139);
            v221 = 1.0;
            if (v142)
              goto LABEL_231;
LABEL_243:
            v228 = 1.0;
            v229 = 1.0;
            v230 = 1.0;
            switch((int)v314)
            {
              case 2:
                goto LABEL_247;
              case 3:
                goto LABEL_246;
              case 4:
                goto LABEL_245;
              case 5:
                v228 = (float)(*((float *)&v328 + 3) - *((float *)&v328 + 2));
LABEL_245:
                v229 = v228 * (float)(*((float *)&v328 + 1) - *(float *)&v328);
LABEL_246:
                v230 = v229 * (float)(*((float *)&v327 + 3) - *((float *)&v327 + 2));
LABEL_247:
                v228 = v230 * (float)(*((float *)&v327 + 1) - *(float *)&v327);
                break;
              default:
                break;
            }
            switch((int)v314)
            {
              case 2:
                goto LABEL_252;
              case 3:
                goto LABEL_251;
              case 4:
                goto LABEL_250;
              case 5:
                v221 = (float)(*((float *)&v325 + 3) - *((float *)&v325 + 2));
LABEL_250:
                v221 = v221 * (float)(*((float *)&v325 + 1) - *(float *)&v325);
LABEL_251:
                v221 = v221 * (float)(*((float *)&v324 + 3) - *((float *)&v324 + 2));
LABEL_252:
                v221 = v221 * (float)(*((float *)&v324 + 1) - *(float *)&v324);
                break;
              default:
                break;
            }
            v227 = v130 / 3;
            v225 = v228 * (float)(*((float *)&v326 + 3) - *((float *)&v326 + 2));
            v226 = v221 * (float)(*((float *)&v323 + 3) - *((float *)&v323 + 2));
LABEL_254:
            v231 = v211 + 0.0;
            v232 = v225 + v226;
            if (v146 == v227 || v231 < v147 || v231 == v147 && v232 < v144)
            {
              v147 = v231;
              v144 = v232;
              v312 = v146;
            }
            v134 = v134 + v200 + v205;
            if (v303 + 1 == (_DWORD)++v146)
              goto LABEL_133;
          }
          v152 = 1;
          while (2)
          {
            v153 = v136[v152];
            if (v152 < v146)
            {
              if (v142)
              {
                if (v140 >= 7)
                {
                  v158 = (int32x4_t *)(v131 + 48 * v153);
                  v159 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                  v160 = (int32x4_t *)((char *)&v326 + 8);
                  do
                  {
                    v161 = v160[1];
                    v162 = *v158;
                    v163 = v158[1];
                    v158 += 2;
                    v338.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v160, v162), vminq_s32(v161, v163));
                    v338.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v160, v162), vmaxq_s32(v161, v163));
                    vst2q_f32((float *)v160->i32, v338);
                    v160 += 2;
                    v159 -= 4;
                  }
                  while (v159);
                  v154 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                  v145 = v142;
                  if (v141 != v143)
                    goto LABEL_170;
                }
                else
                {
                  v154 = 0;
LABEL_170:
                  v164 = (int *)(v132 + 4 * v154 + 48 * v153);
                  v165 = (int *)&v326 + v154 + 3;
                  do
                  {
                    v166 = *(v165 - 1);
                    if (v166 >= *(v164 - 1))
                      v166 = *(v164 - 1);
                    *(v165 - 1) = v166;
                    v167 = *v165;
                    v169 = *v164;
                    v164 += 2;
                    v168 = v169;
                    if (*v165 <= v169)
                      v167 = v168;
                    *v165 = v167;
                    v165 += 2;
                    v154 += 2;
                  }
                  while (v154 < v139);
                  v145 = v142;
                }
                goto LABEL_155;
              }
              if (v140 >= 7)
              {
                v182 = (const float *)(v131 + 48 * v153);
                v183 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                v184 = (float *)&v326 + 2;
                do
                {
                  v334 = vld2q_f32(v184);
                  v336 = vld2q_f32(v182);
                  v182 += 8;
                  v340.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v336.val[0], v334.val[0]), (int8x16_t)v334.val[0], (int8x16_t)v336.val[0]);
                  v340.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v334.val[1], v336.val[1]), (int8x16_t)v334.val[1], (int8x16_t)v336.val[1]);
                  vst2q_f32(v184, v340);
                  v184 += 8;
                  v183 -= 4;
                }
                while (v183);
                v156 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                if (v141 != v143)
                  goto LABEL_190;
              }
              else
              {
                v156 = 0;
LABEL_190:
                v185 = (float *)(v132 + 4 * v156 + 48 * v153);
                v186 = (float *)&v326 + v156 + 3;
                do
                {
                  v187 = *(v186 - 1);
                  if (v187 >= *(v185 - 1))
                    v187 = *(v185 - 1);
                  *(v186 - 1) = v187;
                  v188 = *v186;
                  v189 = *v185;
                  v185 += 2;
                  v190 = v189;
                  if (*v186 <= v189)
                    v188 = v190;
                  *v186 = v188;
                  v186 += 2;
                  v156 += 2;
                }
                while (v156 < v139);
              }
LABEL_154:
              v145 = 0;
              goto LABEL_155;
            }
            if (v145)
            {
              if (v140 >= 7)
              {
                v170 = (int32x4_t *)(v131 + 48 * v153);
                v171 = v141 & 0x7FFFFFFFFFFFFFFCLL;
                v172 = (int32x4_t *)((char *)&v323 + 8);
                do
                {
                  v173 = v172[1];
                  v174 = *v170;
                  v175 = v170[1];
                  v170 += 2;
                  v339.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v172, v174), vminq_s32(v173, v175));
                  v339.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v172, v174), vmaxq_s32(v173, v175));
                  vst2q_f32((float *)v172->i32, v339);
                  v172 += 2;
                  v171 -= 4;
                }
                while (v171);
                v155 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
                if (v141 == v143)
                  goto LABEL_155;
              }
              else
              {
                v155 = 0;
              }
              v176 = (int *)(v132 + 4 * v155 + 48 * v153);
              v177 = (int *)&v323 + v155 + 3;
              do
              {
                v178 = *(v176 - 1);
                if (*(v177 - 1) < v178)
                  v178 = *(v177 - 1);
                *(v177 - 1) = v178;
                v179 = *v177;
                v181 = *v176;
                v176 += 2;
                v180 = v181;
                if (*v177 <= v181)
                  v179 = v180;
                *v177 = v179;
                v177 += 2;
                v155 += 2;
              }
              while (v155 < v139);
LABEL_155:
              if (++v152 == v30)
                goto LABEL_207;
              continue;
            }
            break;
          }
          if (v140 >= 7)
          {
            v191 = (const float *)(v131 + 48 * v153);
            v192 = v141 & 0x7FFFFFFFFFFFFFFCLL;
            v193 = (float *)&v323 + 2;
            do
            {
              v335 = vld2q_f32(v193);
              v337 = vld2q_f32(v191);
              v191 += 8;
              v341.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v337.val[0], v335.val[0]), (int8x16_t)v335.val[0], (int8x16_t)v337.val[0]);
              v341.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v335.val[1], v337.val[1]), (int8x16_t)v335.val[1], (int8x16_t)v337.val[1]);
              vst2q_f32(v193, v341);
              v193 += 8;
              v192 -= 4;
            }
            while (v192);
            v157 = 2 * (v141 & 0x7FFFFFFFFFFFFFFCLL);
            if (v141 == v143)
              goto LABEL_154;
          }
          else
          {
            v157 = 0;
          }
          v194 = (float *)(v132 + 4 * v157 + 48 * v153);
          v195 = (float *)&v323 + v157 + 3;
          do
          {
            v196 = *(v195 - 1);
            if (v196 >= *(v194 - 1))
              v196 = *(v194 - 1);
            *(v195 - 1) = v196;
            v197 = *v195;
            v198 = *v194;
            v194 += 2;
            v199 = v198;
            if (*v195 <= v198)
              v197 = v199;
            *v195 = v197;
            v195 += 2;
            v157 += 2;
          }
          while (v157 < v139);
          goto LABEL_154;
        }
        v233 = 0;
        v234 = 0;
        v5 = v311;
        v73 = v308;
LABEL_266:
        v235 = 0;
        v236 = (int *)v73[v233];
        v25 = v309;
        v237 = (__int128 *)(v309 + 48 * *v236);
        v238 = *v237;
        v239 = v237[2];
        v321 = v237[1];
        v322 = v239;
        v320 = v238;
        v240 = (__int128 *)(v309 + 48 * v236[v234]);
        v241 = *v240;
        v242 = v240[2];
        v318 = v240[1];
        v319 = v242;
        v243 = v309 + 8;
        v244 = v309 + 12;
        v317 = v241;
        while (2)
        {
          if (v235 >= v234)
            v245 = v81;
          else
            v245 = v302;
          if (v235 >= v234)
            v246 = &v317;
          else
            v246 = &v320;
          v247 = *(_DWORD *)(v73[v233] + 4 * v235);
          v248 = *(unsigned __int8 *)(a1 + 39);
          v249 = *(_QWORD *)(v245 + 24);
          v250 = __rev16(*(unsigned __int16 *)(v249 + 2));
          if (v250 < (*(_DWORD *)(a1 + 32) - 4) / v248)
          {
            v251 = (v250 * v248) + v249;
            *(_QWORD *)(v251 + 4) = bswap64(*(_QWORD *)(v309 + 48 * v247));
            v252 = v251 + 4;
            if (*(_BYTE *)(a1 + 37))
            {
              v253 = 0;
              v254 = (_DWORD *)(v252 + 8);
              do
                *v254++ = bswap32(*(_DWORD *)(v243 + 48 * v247 + 4 * v253++));
              while (v253 < *(unsigned __int8 *)(a1 + 37));
            }
            *(_WORD *)(*(_QWORD *)(v245 + 24) + 2) = bswap32(v250 + 1) >> 16;
            *(_DWORD *)(v245 + 20) = 1;
          }
          v255 = *(unsigned __int8 *)(a1 + 37);
          if (v255 <= 2)
            v256 = 2;
          else
            v256 = *(unsigned __int8 *)(a1 + 37);
          v257 = ((v256 - 1) >> 1) + 1;
          if (*(_BYTE *)(a1 + 38))
          {
            if (v256 >= 7)
            {
              v258 = 2 * (v257 & 0x7FFFFFFFFFFFFFFCLL);
              v260 = (int32x4_t *)((char *)v246 + 8);
              v261 = (int32x4_t *)(v243 + 48 * v247);
              v262 = v257 & 0x7FFFFFFFFFFFFFFCLL;
              do
              {
                v263 = v260[1];
                v264 = *v261;
                v265 = v261[1];
                v261 += 2;
                v332.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v260, v264), vminq_s32(v263, v265));
                v332.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v260, v264), vmaxq_s32(v263, v265));
                vst2q_f32((float *)v260->i32, v332);
                v260 += 2;
                v262 -= 4;
              }
              while (v262);
              if (v257 != (v257 & 0x7FFFFFFFFFFFFFFCLL))
                goto LABEL_290;
            }
            else
            {
              v258 = 0;
LABEL_290:
              v266 = (int *)(v244 + 4 * v258 + 48 * v247);
              v267 = (int *)v246 + v258 + 3;
              do
              {
                v268 = *(v267 - 1);
                if (v268 >= *(v266 - 1))
                  v268 = *(v266 - 1);
                *(v267 - 1) = v268;
                v269 = *v267;
                v271 = *v266;
                v266 += 2;
                v270 = v271;
                if (*v267 <= v271)
                  v269 = v270;
                *v267 = v269;
                v267 += 2;
                v258 += 2;
              }
              while (v258 < v255);
            }
          }
          else
          {
            if (v256 >= 7)
            {
              v259 = 2 * (v257 & 0x7FFFFFFFFFFFFFFCLL);
              v272 = (float *)v246 + 2;
              v273 = (const float *)(v243 + 48 * v247);
              v274 = v257 & 0x7FFFFFFFFFFFFFFCLL;
              do
              {
                v330 = vld2q_f32(v272);
                v331 = vld2q_f32(v273);
                v273 += 8;
                v333.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v331.val[0], v330.val[0]), (int8x16_t)v330.val[0], (int8x16_t)v331.val[0]);
                v333.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v330.val[1], v331.val[1]), (int8x16_t)v330.val[1], (int8x16_t)v331.val[1]);
                vst2q_f32(v272, v333);
                v272 += 8;
                v274 -= 4;
              }
              while (v274);
              if (v257 == (v257 & 0x7FFFFFFFFFFFFFFCLL))
                goto LABEL_267;
            }
            else
            {
              v259 = 0;
            }
            v275 = (float *)(v244 + 4 * v259 + 48 * v247);
            v276 = (float *)v246 + v259 + 3;
            do
            {
              v277 = *(v276 - 1);
              if (v277 >= *(v275 - 1))
                v277 = *(v275 - 1);
              *(v276 - 1) = v277;
              v278 = *v276;
              v279 = *v275;
              v275 += 2;
              v280 = v279;
              if (*v276 <= v279)
                v278 = v280;
              *v276 = v278;
              v276 += 2;
              v259 += 2;
            }
            while (v259 < v255);
          }
LABEL_267:
          if (++v235 == v31)
          {
            v281 = (uint64_t (**)(void *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              v282 = (uint64_t *)v5;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v73);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v73);
              v73 = (_QWORD *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v281 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
                goto LABEL_313;
              }
            }
            else
            {
              v282 = (uint64_t *)v5;
LABEL_313:
              (*v281)(v73);
            }
            v283 = sub_1ACCA002C(a1, v307);
            if ((_DWORD)v283)
            {
LABEL_315:
              v20 = v283;
              v28 = 0;
LABEL_316:
              v27 = v307;
              v26 = v302;
LABEL_26:
              sub_1ACC9FEC4(a1, v27);
              sub_1ACC9FEC4(a1, v26);
              if ((v28 & 1) == 0)
              {
LABEL_27:
                v29 = &off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_32;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v25);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v25);
                v25 = xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v29 = &xmmword_1ECD3B1D0;
LABEL_32:
                  (*v29)(v25);
                }
              }
              return v20;
            }
            v284 = (uint64_t **)v302;
            v285 = *(_QWORD *)(v302 + 8);
            if (v285)
            {
LABEL_318:
              *(_QWORD *)&v317 = *(_QWORD *)(v307 + 8);
              *(_QWORD *)&v320 = v285;
              v286 = *v284;
              if (*(_QWORD *)(a2 + 8) == 1)
              {
                v287 = (a4 + 1);
                v283 = sub_1ACCA1F90(a1, *v284, &v320, v287);
                if ((_DWORD)v283)
                  goto LABEL_315;
              }
              else
              {
                LODWORD(v326) = 0;
                v283 = sub_1ACCA406C(a1, v284, &v326);
                if ((_DWORD)v283)
                  goto LABEL_315;
                sub_1ACCA4104(a1, (uint64_t)v286, (unint64_t *)&v320, v326);
                v283 = sub_1ACCA4158((unsigned __int8 *)a1, v286, (uint64_t)&v320);
                if ((_DWORD)v283)
                  goto LABEL_315;
                v287 = (a4 + 1);
              }
              v283 = sub_1ACCA1F90(a1, *(_QWORD *)v307, &v317, v287);
              if ((_DWORD)v283)
                goto LABEL_315;
              v27 = v307;
              v288 = *(_QWORD *)(v307 + 24);
              if (__rev16(*(unsigned __int16 *)(v288 + 2)))
              {
                v289 = 0;
                v290 = 0;
                if (a4)
                  v291 = sub_1ACCA45C4;
                else
                  v291 = sub_1ACCA44D8;
                do
                {
                  v292 = (unsigned __int8 *)(v289 * *(unsigned __int8 *)(a1 + 39) + v288);
                  v293 = (((unint64_t)v292[4] << 56) | ((unint64_t)v292[5] << 48) | ((unint64_t)v292[6] << 40) | ((unint64_t)v292[7] << 32) | ((unint64_t)v292[8] << 24) | ((unint64_t)v292[9] << 16) | ((unint64_t)v292[10] << 8))
                       + v292[11];
                  if (a4 >= 1)
                  {
                    for (j = *(uint64_t **)(a1
                                          + 8
                                          * ((((v292[8] << 24) | (v292[9] << 16) | (v292[10] << 8))
                                            + v292[11])
                                           % 0x61)
                                          + 192); j; j = (uint64_t *)j[4])
                    {
                      if (j[1] == v293)
                        break;
                    }
                    v295 = (uint64_t *)v27;
                    do
                    {
                      if (v295 == j)
                      {
                        v28 = 0;
                        v20 = 267;
                        v25 = v309;
                        v26 = v302;
                        goto LABEL_26;
                      }
                      v295 = (uint64_t *)*v295;
                    }
                    while (v295);
                    if (j)
                    {
                      sub_1ACC9FEC4(a1, *j);
                      v27 = v307;
                      ++*(_DWORD *)(v307 + 16);
                      *j = v307;
                    }
                  }
                  v296 = v27;
                  v297 = v291(a1, v293, *(_QWORD *)(v27 + 8));
                  if ((_DWORD)v297)
                  {
                    v20 = v297;
                    v28 = 0;
                    v25 = v309;
                    v27 = v296;
                    v26 = v302;
                    goto LABEL_26;
                  }
                  if (v293 == *v282)
                    v290 = 1;
                  ++v289;
                  v288 = *(_QWORD *)(v296 + 24);
                  v27 = v296;
                }
                while (v289 < bswap32(*(unsigned __int16 *)(v288 + 2)) >> 16);
                v25 = v309;
                v26 = v302;
                if (*(_QWORD *)(a2 + 8) == 1)
                  goto LABEL_350;
                if (v290)
                  goto LABEL_356;
LABEL_355:
                v298 = sub_1ACCA46B0(a1, *v282, v26, a4);
                v26 = v302;
                if (!(_DWORD)v298)
                {
LABEL_356:
                  v301 = sub_1ACC9FEC4(a1, v307);
                  if ((_DWORD)v301)
                  {
                    v20 = v301;
                    v28 = 0;
                    v27 = 0;
                    v26 = v302;
                  }
                  else
                  {
                    v20 = sub_1ACC9FEC4(a1, v302);
                    v28 = 0;
                    v26 = 0;
                    v27 = 0;
                  }
                  goto LABEL_26;
                }
              }
              else
              {
                v26 = v302;
                if (*(_QWORD *)(a2 + 8) != 1)
                  goto LABEL_355;
LABEL_350:
                if (!__rev16(*(unsigned __int16 *)(*(_QWORD *)(v26 + 24) + 2)))
                  goto LABEL_356;
                v299 = 0;
                while (1)
                {
                  v300 = sub_1ACC9C6B4(a1, v26, v299);
                  v298 = sub_1ACCA46B0(a1, v300, v26, a4);
                  if ((_DWORD)v298)
                    break;
                  if (++v299 >= bswap32(*(unsigned __int16 *)(*(_QWORD *)(v26 + 24) + 2)) >> 16)
                    goto LABEL_356;
                }
              }
            }
            else
            {
              v26 = v302;
              v298 = sub_1ACCA002C(a1, v302);
              if (!(_DWORD)v298)
              {
                v285 = *(_QWORD *)(v302 + 8);
                v284 = (uint64_t **)v302;
                goto LABEL_318;
              }
            }
            v20 = v298;
            v28 = 0;
            v27 = v307;
            goto LABEL_26;
          }
          continue;
        }
      }
    }
  }
  v20 = sub_1ACCA4158((unsigned __int8 *)a1, (uint64_t *)a2, v5);
  if ((_DWORD)v20)
    return v20;
  v21 = *(_QWORD *)v5;
  v22 = *(_QWORD *)(a2 + 8);
  if (a4)
    return sub_1ACCA45C4(a1, v21, v22);
  else
    return sub_1ACCA44D8(a1, v21, v22);
}

uint64_t sub_1ACCA3880(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3_int64 v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  unint64_t v19;

  v8 = (uint64_t *)a2;
  while (1)
  {
    v9 = v8[1];
    if (v9 == 1 || *v8)
      break;
    v10 = *(_QWORD **)(a1 + 160);
    if (!sub_1ACBA0E50((uint64_t)v10, 0))
    {
      v11 = v10[16];
      if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v11, v9);
      }
      else
      {
        *(_QWORD *)v11 = v9;
        *(_WORD *)(v11 + 20) = 4;
      }
      v12 = *(_QWORD *)(*v10 + 24);
      if (v12)
        xmmword_1ECD3B1D0(v12);
    }
    if (sqlite3_step(*(sqlite3_stmt **)(a1 + 160)) != 100)
      goto LABEL_16;
    v13 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 160), 0);
    if (a2)
    {
      v14 = (_QWORD *)a2;
      while (v14[1] != v13)
      {
        v14 = (_QWORD *)*v14;
        if (!v14)
          goto LABEL_15;
      }
LABEL_16:
      v15 = 0;
      goto LABEL_17;
    }
LABEL_15:
    v15 = sub_1ACCA04B0(a1, v13, 0, v8);
LABEL_17:
    LODWORD(result) = sqlite3_reset(*(sqlite3_stmt **)(a1 + 160));
    if ((_DWORD)result)
      result = result;
    else
      result = v15;
    if ((_DWORD)result)
      return result;
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 267;
  }
  v17 = *(_QWORD *)(a2 + 24);
  v18 = (char *)(v17 + *(unsigned __int8 *)(a1 + 39) * (uint64_t)a3 + 4);
  memmove(v18, &v18[*(unsigned __int8 *)(a1 + 39)], *(unsigned __int8 *)(a1 + 39) * (uint64_t)(int)(~a3 + (bswap32(*(unsigned __int16 *)(v17 + 2)) >> 16)));
  *(_WORD *)(*(_QWORD *)(a2 + 24) + 2) = bswap32((*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 3) | (*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 2) << 8))- 1) >> 16;
  *(_DWORD *)(a2 + 20) = 1;
  if (!*(_QWORD *)a2)
    return 0;
  v19 = 1431655766 * ((*(_DWORD *)(a1 + 32) - 4) / *(unsigned __int8 *)(a1 + 39));
  if ((int)(HIDWORD(v19) + (v19 >> 63)) <= (int)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 2)) >> 16))
    return sub_1ACCA3CE8((unsigned __int8 *)a1, (uint64_t *)a2);
  else
    return sub_1ACCA3A94(a1, a2, a4);
}

uint64_t sub_1ACCA3A94(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = __rev16(*(unsigned __int16 *)(v7 + 2));
    if (!(_DWORD)v8)
    {
LABEL_6:
      sub_1ACC9FEC4(a1, 0);
      return 267;
    }
    v9 = 0;
    v10 = (unsigned __int8 *)(v7 + 5);
    while ((((unint64_t)*(v10 - 1) << 56) | ((unint64_t)*v10 << 48) | ((unint64_t)v10[1] << 40) | ((unint64_t)v10[2] << 32) | ((unint64_t)v10[3] << 24) | ((unint64_t)v10[4] << 16) | ((unint64_t)v10[5] << 8))
          + v10[6] != *(_QWORD *)(a2 + 8))
    {
      v10 += *(unsigned __int8 *)(a1 + 39);
      if (v8 == ++v9)
        goto LABEL_6;
    }
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)a2 = 0;
  v12 = sub_1ACCA3880(a1, v6, v9, (a3 + 1));
  LODWORD(result) = sub_1ACC9FEC4(a1, v6);
  if (v12)
    result = v12;
  else
    result = result;
  if (!(_DWORD)result)
  {
    v13 = *(_QWORD **)(a1 + 128);
    v14 = *(_QWORD *)(a2 + 8);
    if (!sub_1ACBA0E50((uint64_t)v13, 0))
    {
      v15 = v13[16];
      if ((*(_WORD *)(v15 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v15, v14);
      }
      else
      {
        *(_QWORD *)v15 = v14;
        *(_WORD *)(v15 + 20) = 4;
      }
      v16 = *(_QWORD *)(*v13 + 24);
      if (v16)
        xmmword_1ECD3B1D0(v16);
    }
    sqlite3_step(*(sqlite3_stmt **)(a1 + 128));
    result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 128));
    if (!(_DWORD)result)
    {
      v17 = *(_QWORD **)(a1 + 176);
      v18 = *(_QWORD *)(a2 + 8);
      if (!sub_1ACBA0E50((uint64_t)v17, 0))
      {
        v19 = v17[16];
        if ((*(_WORD *)(v19 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v19, v18);
        }
        else
        {
          *(_QWORD *)v19 = v18;
          *(_WORD *)(v19 + 20) = 4;
        }
        v20 = *(_QWORD *)(*v17 + 24);
        if (v20)
          xmmword_1ECD3B1D0(v20);
      }
      sqlite3_step(*(sqlite3_stmt **)(a1 + 176));
      result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 176));
      if (!(_DWORD)result)
      {
        v21 = *(_QWORD *)(a2 + 8);
        if (v21)
        {
          v22 = (_QWORD *)(a1 + 8 * (v21 % 0x61) + 192);
          do
          {
            v23 = v22;
            v24 = *v22;
            v22 = (_QWORD *)(*v22 + 32);
          }
          while (v24 != a2);
          *v23 = *(_QWORD *)(a2 + 32);
        }
        result = 0;
        *(_QWORD *)(a2 + 8) = a3;
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 96);
        ++*(_DWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 96) = a2;
      }
    }
  }
  return result;
}

uint64_t sub_1ACCA3CE8(unsigned __int8 *a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned int *v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  const float *v31;
  float *v32;
  float *v33;
  float *v34;
  int v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _QWORD *v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];
  unint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  float32x4x2_t v54;
  float32x4x2_t v55;
  float32x4x2_t v56;
  float32x4x2_t v57;

  if (!*a2)
    return 0;
  v49 = *a2;
  v4 = 0;
  v5 = (unsigned __int8 *)a2[3];
  v6 = v5[2];
  v7 = v5[3];
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  v48 = a1[39];
  v51 = (((unint64_t)v5[4] << 56) | ((unint64_t)v5[5] << 48) | ((unint64_t)v5[6] << 40) | ((unint64_t)v5[7] << 32) | ((unint64_t)v5[8] << 24) | ((unint64_t)v5[9] << 16) | ((unint64_t)v5[10] << 8))
      + v5[11];
  v8 = (unsigned int *)(v5 + 12);
  v9 = a1[37];
  do
  {
    v10 = (char *)&v51 + 4 * v4;
    *((_DWORD *)v10 + 2) = bswap32(*v8);
    *((_DWORD *)v10 + 3) = bswap32(v8[1]);
    v8 += 2;
    v4 += 2;
  }
  while (v4 < v9);
  v11 = v7 | (v6 << 8);
  if (v11 >= 2)
  {
    if (v9 <= 2)
      v12 = 2;
    else
      v12 = v9;
    v13 = ((v12 - 1) >> 1) + 1;
    v14 = v13 & 0x7FFFFFFFFFFFFFFCLL;
    for (i = 1; i != v11; ++i)
    {
      memset(v50, 0, sizeof(v50));
      sub_1ACC9C620((uint64_t)a1, (uint64_t)a2, i, v50);
      if (a1[38])
      {
        if (v12 < 7)
        {
          v16 = 0;
LABEL_18:
          v24 = (int *)v50 + v16 + 3;
          v25 = (int *)v52 + v16 + 1;
          do
          {
            v26 = *(v25 - 1);
            if (v26 >= *(v24 - 1))
              v26 = *(v24 - 1);
            *(v25 - 1) = v26;
            v27 = *v25;
            v29 = *v24;
            v24 += 2;
            v28 = v29;
            if (*v25 <= v29)
              v27 = v28;
            *v25 = v27;
            v25 += 2;
            v16 += 2;
          }
          while (v16 < v9);
          continue;
        }
        v18 = v13 & 0x7FFFFFFFFFFFFFFCLL;
        v19 = (int32x4_t *)((char *)v50 + 8);
        v20 = (int32x4_t *)v52;
        do
        {
          v21 = v20[1];
          v22 = *v19;
          v23 = v19[1];
          v19 += 2;
          v56.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v20, v22), vminq_s32(v21, v23));
          v56.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v20, v22), vmaxq_s32(v21, v23));
          vst2q_f32((float *)v20->i32, v56);
          v20 += 2;
          v18 -= 4;
        }
        while (v18);
        v16 = 2 * (v13 & 0x7FFFFFFFFFFFFFFCLL);
        if (v13 != v14)
          goto LABEL_18;
      }
      else
      {
        if (v12 < 7)
        {
          v17 = 0;
LABEL_28:
          v33 = (float *)v50 + v17 + 3;
          v34 = (float *)v52 + v17 + 1;
          do
          {
            if (*(v34 - 1) >= *(v33 - 1))
              v35 = *((_DWORD *)v33 - 1);
            else
              v35 = *((_DWORD *)v34 - 1);
            v36 = *v34;
            v37 = *v33;
            v33 += 2;
            v38 = v37;
            if (*v34 <= v37)
              v36 = v38;
            *((_DWORD *)v34 - 1) = v35;
            *v34 = v36;
            v17 += 2;
            v34 += 2;
          }
          while (v17 < v9);
          continue;
        }
        v30 = v13 & 0x7FFFFFFFFFFFFFFCLL;
        v31 = (const float *)v50 + 2;
        v32 = (float *)v52;
        do
        {
          v54 = vld2q_f32(v32);
          v55 = vld2q_f32(v31);
          v31 += 8;
          v57.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55.val[0], v54.val[0]), (int8x16_t)v54.val[0], (int8x16_t)v55.val[0]);
          v57.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v54.val[1], v55.val[1]), (int8x16_t)v54.val[1], (int8x16_t)v55.val[1]);
          vst2q_f32(v32, v57);
          v32 += 8;
          v30 -= 4;
        }
        while (v30);
        v17 = 2 * (v13 & 0x7FFFFFFFFFFFFFFCLL);
        if (v13 != v14)
          goto LABEL_28;
      }
    }
  }
  v39 = *(_QWORD *)(v49 + 24);
  v40 = __rev16(*(unsigned __int16 *)(v39 + 2));
  if (!(_DWORD)v40)
    return 267;
  v41 = a2[1];
  v42 = (unsigned __int8 *)(v39 + 5);
  v43 = 0x400000000;
  while ((((unint64_t)*(v42 - 1) << 56) | ((unint64_t)*v42 << 48) | ((unint64_t)v42[1] << 40) | ((unint64_t)v42[2] << 32) | ((unint64_t)v42[3] << 24) | ((unint64_t)v42[4] << 16) | ((unint64_t)v42[5] << 8))
        + v42[6] != v41)
  {
    v42 += v48;
    v43 += v48 << 32;
    if (!--v40)
      return 267;
  }
  v45 = (_QWORD *)(v39 + (v43 >> 32));
  *v45 = bswap64(v41);
  if (a1[37])
  {
    v46 = 0;
    v47 = v45 + 1;
    do
      *v47++ = bswap32(*((_DWORD *)v52 + v46++));
    while (v46 < a1[37]);
  }
  *(_DWORD *)(v49 + 20) = 1;
  return sub_1ACCA3CE8(a1);
}

uint64_t sub_1ACCA406C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t result;

  if (*a2)
  {
    v3 = *(_QWORD *)(*a2 + 24);
    v4 = __rev16(*(unsigned __int16 *)(v3 + 2));
    if (!(_DWORD)v4)
      return 267;
    v5 = 0;
    v6 = (unsigned __int8 *)(v3 + 5);
    while ((((unint64_t)*(v6 - 1) << 56) | ((unint64_t)*v6 << 48) | ((unint64_t)v6[1] << 40) | ((unint64_t)v6[2] << 32) | ((unint64_t)v6[3] << 24) | ((unint64_t)v6[4] << 16) | ((unint64_t)v6[5] << 8))
          + v6[6] != a2[1])
    {
      v6 += *(unsigned __int8 *)(a1 + 39);
      if (v4 == ++v5)
        return 267;
    }
  }
  else
  {
    LODWORD(v5) = -1;
  }
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t sub_1ACCA4104(uint64_t result, uint64_t a2, unint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;

  v4 = *(_QWORD *)(a2 + 24) + *(unsigned __int8 *)(result + 39) * (uint64_t)a4;
  *(_QWORD *)(v4 + 4) = bswap64(*a3);
  v5 = v4 + 4;
  if (*(_BYTE *)(result + 37))
  {
    v6 = 0;
    v7 = (_DWORD *)(v5 + 8);
    do
    {
      *v7++ = bswap32(*((_DWORD *)a3 + v6 + 2));
      ++v6;
    }
    while (v6 < *(unsigned __int8 *)(result + 37));
  }
  *(_DWORD *)(a2 + 20) = 1;
  return result;
}

uint64_t sub_1ACCA4158(unsigned __int8 *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v7;
  int32x4_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int32x4_t *v26;
  int32x4_t *v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const float *v45;
  float *v46;
  float *v47;
  float *v48;
  int v49;
  float v50;
  float v51;
  float v52;
  _OWORD v54[3];
  float32x4x2_t v55;
  float32x4x2_t v56;
  float32x4x2_t v57;
  float32x4x2_t v58;

  v3 = *a2;
  if (!*a2)
    return 0;
  v5 = (uint64_t)a2;
  v7 = 0;
  v8 = (int32x4_t *)(a3 + 8);
  v9 = a3 + 12;
  v10 = 0uLL;
  do
  {
    v54[1] = v10;
    v54[2] = v10;
    v54[0] = v10;
    if (v7 == 100)
      return 267;
    v11 = (_QWORD *)v5;
    v5 = v3;
    if (*v11)
    {
      v12 = *(_QWORD *)(*v11 + 24);
      v13 = __rev16(*(unsigned __int16 *)(v12 + 2));
      if (!(_DWORD)v13)
        return 267;
      v14 = 0;
      v15 = v11[1];
      v16 = (unsigned __int8 *)(v12 + 5);
      while ((((unint64_t)*(v16 - 1) << 56) | ((unint64_t)*v16 << 48) | ((unint64_t)v16[1] << 40) | ((unint64_t)v16[2] << 32) | ((unint64_t)v16[3] << 24) | ((unint64_t)v16[4] << 16) | ((unint64_t)v16[5] << 8))
            + v16[6] != v15)
      {
        v16 += a1[39];
        if (v13 == ++v14)
          return 267;
      }
    }
    else
    {
      LODWORD(v14) = -1;
    }
    sub_1ACC9C620((uint64_t)a1, v5, v14, v54);
    v17 = a1[37];
    v10 = 0uLL;
    if (!a1[37])
      goto LABEL_39;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = (char *)v54 + v18;
      v21 = a3 + v18;
      if (a1[38] != 1)
        break;
      if (*(_DWORD *)(v21 + 8) < *((_DWORD *)v20 + 2)
        || *(_DWORD *)(a3 + v18 + 12) > *(_DWORD *)((char *)v54 + v18 + 12))
      {
        goto LABEL_21;
      }
LABEL_13:
      v19 += 2;
      v18 += 8;
      if (v19 >= v17)
        goto LABEL_39;
    }
    if (*(float *)(v21 + 8) >= *((float *)v20 + 2) && *(float *)(a3 + v18 + 12) <= *(float *)((char *)v54 + v18 + 12))
      goto LABEL_13;
    if (a1[38])
    {
LABEL_21:
      v22 = 2;
      if (v17 > 2)
        v22 = a1[37];
      if (v22 >= 7)
      {
        v24 = ((v22 - 1) >> 1) + 1;
        v23 = 2 * (v24 & 0x7FFFFFFFFFFFFFFCLL);
        v25 = v24 & 0x7FFFFFFFFFFFFFFCLL;
        v26 = v8;
        v27 = (int32x4_t *)((char *)v54 + 8);
        do
        {
          v28 = v27[1];
          v29 = *v26;
          v30 = v26[1];
          v26 += 2;
          v57.val[0] = (float32x4_t)vuzp1q_s32(vminq_s32(*v27, v29), vminq_s32(v28, v30));
          v57.val[1] = (float32x4_t)vuzp2q_s32(vmaxq_s32(*v27, v29), vmaxq_s32(v28, v30));
          vst2q_f32((float *)v27->i32, v57);
          v27 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFFCLL))
          goto LABEL_35;
      }
      else
      {
        v23 = 0;
      }
      v31 = (int *)(v9 + 4 * v23);
      v32 = (int *)v54 + v23 + 3;
      do
      {
        if (*(v32 - 1) >= *(v31 - 1))
          v33 = *(v31 - 1);
        else
          v33 = *(v32 - 1);
        v34 = *v32;
        v36 = *v31;
        v31 += 2;
        v35 = v36;
        if (*v32 <= v36)
          v34 = v35;
        *(v32 - 1) = v33;
        *v32 = v34;
        v23 += 2;
        v32 += 2;
      }
      while (v23 < v17);
      goto LABEL_35;
    }
    v41 = 2;
    if (v17 > 2)
      v41 = a1[37];
    if (v41 >= 7)
    {
      v43 = ((v41 - 1) >> 1) + 1;
      v42 = 2 * (v43 & 0x7FFFFFFFFFFFFFFCLL);
      v44 = v43 & 0x7FFFFFFFFFFFFFFCLL;
      v45 = (const float *)v8;
      v46 = (float *)v54 + 2;
      do
      {
        v55 = vld2q_f32(v46);
        v56 = vld2q_f32(v45);
        v45 += 8;
        v58.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v56.val[0], v55.val[0]), (int8x16_t)v55.val[0], (int8x16_t)v56.val[0]);
        v58.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55.val[1], v56.val[1]), (int8x16_t)v55.val[1], (int8x16_t)v56.val[1]);
        vst2q_f32(v46, v58);
        v46 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v43 == (v43 & 0x7FFFFFFFFFFFFFFCLL))
        goto LABEL_35;
    }
    else
    {
      v42 = 0;
    }
    v47 = (float *)(v9 + 4 * v42);
    v48 = (float *)v54 + v42 + 3;
    do
    {
      if (*(v48 - 1) >= *(v47 - 1))
        v49 = *((_DWORD *)v47 - 1);
      else
        v49 = *((_DWORD *)v48 - 1);
      v50 = *v48;
      v51 = *v47;
      v47 += 2;
      v52 = v51;
      if (*v48 <= v51)
        v50 = v52;
      *((_DWORD *)v48 - 1) = v49;
      *v48 = v50;
      v42 += 2;
      v48 += 2;
    }
    while (v42 < v17);
LABEL_35:
    v37 = *(_QWORD *)(v5 + 24) + a1[39] * (uint64_t)(int)v14;
    *(_QWORD *)(v37 + 4) = bswap64(*(unint64_t *)&v54[0]);
    v38 = v37 + 4;
    if (a1[37])
    {
      v39 = 0;
      v40 = (_DWORD *)(v38 + 8);
      do
      {
        *v40++ = bswap32(*((_DWORD *)v54 + v39 + 2));
        ++v39;
      }
      while (v39 < a1[37]);
    }
    *(_DWORD *)(v5 + 20) = 1;
LABEL_39:
    ++v7;
    v3 = *(_QWORD *)v5;
  }
  while (*(_QWORD *)v5);
  return 0;
}

uint64_t sub_1ACCA44D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD **)(a1 + 144);
  if (!sub_1ACBA0E50((uint64_t)v6, 0))
  {
    v7 = v6[16];
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v7, a2);
    }
    else
    {
      *(_QWORD *)v7 = a2;
      *(_WORD *)(v7 + 20) = 4;
    }
    v8 = *(_QWORD *)(*v6 + 24);
    if (v8)
      xmmword_1ECD3B1D0(v8);
  }
  v9 = *(_QWORD **)(a1 + 144);
  if (!sub_1ACBA0E50((uint64_t)v9, 1u))
  {
    v10 = v9[16];
    if ((*(_WORD *)(v10 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10 + 64, a3);
    }
    else
    {
      *(_QWORD *)(v10 + 64) = a3;
      *(_WORD *)(v10 + 84) = 4;
    }
    v11 = *(_QWORD *)(*v9 + 24);
    if (v11)
      xmmword_1ECD3B1D0(v11);
  }
  sqlite3_step(*(sqlite3_stmt **)(a1 + 144));
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 144));
}

uint64_t sub_1ACCA45C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD **)(a1 + 168);
  if (!sub_1ACBA0E50((uint64_t)v6, 0))
  {
    v7 = v6[16];
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v7, a2);
    }
    else
    {
      *(_QWORD *)v7 = a2;
      *(_WORD *)(v7 + 20) = 4;
    }
    v8 = *(_QWORD *)(*v6 + 24);
    if (v8)
      xmmword_1ECD3B1D0(v8);
  }
  v9 = *(_QWORD **)(a1 + 168);
  if (!sub_1ACBA0E50((uint64_t)v9, 1u))
  {
    v10 = v9[16];
    if ((*(_WORD *)(v10 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10 + 64, a3);
    }
    else
    {
      *(_QWORD *)(v10 + 64) = a3;
      *(_WORD *)(v10 + 84) = 4;
    }
    v11 = *(_QWORD *)(*v9 + 24);
    if (v11)
      xmmword_1ECD3B1D0(v11);
  }
  sqlite3_step(*(sqlite3_stmt **)(a1 + 168));
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 168));
}

uint64_t sub_1ACCA46B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t *i;
  uint64_t *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  if (a4)
    v7 = sub_1ACCA45C4;
  else
    v7 = sub_1ACCA44D8;
  if (a4 < 1)
    return v7(a1, a2, *(_QWORD *)(a3 + 8));
  for (i = *(uint64_t **)(a1 + 8 * (a2 % 0x61) + 192); i; i = (uint64_t *)i[4])
  {
    if (i[1] == a2)
      break;
  }
  if (a3)
  {
    v9 = (uint64_t *)a3;
    do
    {
      if (v9 == i)
        return 267;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
    if (!i)
      return v7(a1, a2, *(_QWORD *)(a3 + 8));
    v11 = v7;
    sub_1ACC9FEC4(a1, *i);
    v7 = v11;
    if (a3)
      ++*(_DWORD *)(a3 + 16);
    goto LABEL_17;
  }
  if (i)
  {
    v12 = v7;
    sub_1ACC9FEC4(a1, *i);
    v7 = v12;
LABEL_17:
    *i = a3;
  }
  return v7(a1, a2, *(_QWORD *)(a3 + 8));
}

float *sub_1ACCA47D0(float *result, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, void *a6)
{
  float *v10;
  signed int v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  int v15;
  signed int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  int v23;
  uint64_t v24;
  float *v25;
  float *v26;
  double v27;
  double v28;
  double v29;
  double v30;

  if ((int)a3 >= 2)
  {
    v10 = result;
    v11 = a3 >> 1;
    v12 = a3 - (a3 >> 1);
    v13 = 4 * (a3 >> 1);
    v14 = &a2[v13];
    ((void (*)(void))sub_1ACCA47D0)();
    sub_1ACCA47D0(v10, v14, v12, a4, a5, a6);
    memcpy(a6, a2, v13);
    v15 = 0;
    v16 = 0;
    v17 = *((unsigned __int8 *)v10 + 38);
    v18 = 8 * (int)a4;
    v19 = 4 * ((2 * (int)a4) | 1);
    while (1)
    {
      v20 = *((_DWORD *)a6 + v16);
      v21 = a5 + 48 * v20 + 8;
      v22 = (float *)(v21 + v18);
      result = (float *)(v21 + v19);
      v23 = *(_DWORD *)&v14[4 * v15];
      v24 = a5 + 48 * v23 + 8;
      v25 = (float *)(v24 + v18);
      v26 = (float *)(v24 + v19);
      if (v17)
      {
        v27 = (double)*(int *)v22;
        v28 = (double)*(int *)result;
        v29 = (double)*(int *)v25;
        v30 = (double)*(int *)v26;
        if (v16 == v11)
          goto LABEL_13;
LABEL_7:
        if (v15 != (_DWORD)v12 && v27 >= v29 && (v27 != v29 || v28 >= v30))
          goto LABEL_13;
        *(_DWORD *)&a2[4 * v15 + 4 * v16++] = v20;
        if (v16 >= v11)
          goto LABEL_16;
      }
      else
      {
        v27 = *v22;
        v28 = *result;
        v29 = *v25;
        v30 = *v26;
        if (v16 != v11)
          goto LABEL_7;
LABEL_13:
        *(_DWORD *)&a2[4 * v15++ + 4 * v16] = v23;
        if (v16 >= v11)
        {
LABEL_16:
          if (v15 >= (int)v12)
            return result;
        }
      }
    }
  }
  return result;
}

char *sub_1ACCA4968(char *result, unsigned int a2, uint64_t a3, void *a4)
{
  const void *v6;
  signed int v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  signed int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if ((int)a2 >= 2)
  {
    v6 = result;
    v7 = a2 >> 1;
    v8 = a2 - (a2 >> 1);
    v9 = 4 * (a2 >> 1);
    v10 = &result[v9];
    ((void (*)(void))sub_1ACCA4968)();
    sub_1ACCA4968(v10, v8, a3, a4);
    result = (char *)memcpy(a4, v6, v9);
    v11 = 0;
    v12 = 0;
    while (1)
    {
      if (v11 == v7)
      {
        *((_DWORD *)v6 + v7 + v12) = *(_DWORD *)&v10[4 * v12];
        ++v12;
        v11 = v7;
LABEL_12:
        if (v12 >= (int)v8)
          return result;
      }
      else
      {
        v13 = *((_DWORD *)a4 + v11);
        if (v12 == (_DWORD)v8)
        {
          *((_DWORD *)v6 + v11 + (int)v8) = v13;
          ++v11;
          v12 = v8;
          if (v11 >= v7)
            goto LABEL_12;
        }
        else
        {
          v14 = *(int *)&v10[4 * v12];
          v15 = v11 + v12;
          if (*(double *)(a3 + 8 * v13) >= *(double *)(a3 + 8 * v14))
          {
            *((_DWORD *)v6 + v15) = v14;
            ++v12;
            if (v11 >= v7)
              goto LABEL_12;
          }
          else
          {
            *((_DWORD *)v6 + v15) = v13;
            if (++v11 >= v7)
              goto LABEL_12;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACCA4A8C(sqlite3 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, char **a6)
{
  const char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  if (a3 < 4)
  {
    v12 = 0;
  }
  else
  {
    v10 = *(const char **)(a4 + 24);
    v16 = v10;
    v17 = 0;
    if (v10)
      v11 = strlen(v10) & 0x3FFFFFFF;
    else
      v11 = 0;
    LODWORD(v17) = v11;
    v13 = sub_1ACC0DF84((uint64_t)a1, (uint64_t)&v16);
    if (v13 < 0)
    {
      *a6 = sqlite3_mprintf("no such database: %s", *(const char **)(a4 + 24));
      return 1;
    }
    v12 = v13;
  }
  sqlite3_vtab_config(a1, 3);
  result = sqlite3_declare_vtab(a1, "CREATE TABLE x( name       TEXT, path       TEXT, pageno     INTEGER, pagetype   TEXT, ncell      INTEGER, payload    INTEGER, unused     INTEGER, mx_payload INTEGER, pgoffset   INTEGER, pgsize     INTEGER, schema     TEXT HIDDEN, aggregate  BOOLEAN HIDDEN)");
  if ((_DWORD)result)
  {
    v15 = 0;
  }
  else
  {
    if (sqlite3_initialize())
    {
      v15 = 0;
    }
    else
    {
      v15 = sub_1ACB5D828(40);
      if (v15)
      {
        result = 0;
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_QWORD *)(v15 + 24) = a1;
        *(_QWORD *)(v15 + 32) = 0;
        *(_DWORD *)(v15 + 32) = v12;
        goto LABEL_16;
      }
    }
    result = 7;
  }
LABEL_16:
  *a5 = v15;
  return result;
}

uint64_t sub_1ACCA4B94(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = *a2;
  if ((int)v2 < 1)
    goto LABEL_22;
  v3 = 0;
  v4 = (_BYTE *)(*((_QWORD *)a2 + 1) + 5);
  v5 = -1;
  v6 = -1;
  v7 = -1;
  do
  {
    if (*(v4 - 1) == 2)
    {
      if (!*v4)
        return 19;
      v8 = *(_DWORD *)(v4 - 5);
      if (v8)
        v9 = v6;
      else
        v9 = v3;
      if (v8 == 10)
        v10 = v3;
      else
        v10 = v7;
      if (v8 == 10)
        v9 = v6;
      if (v8 == 11)
      {
        v5 = v3;
      }
      else
      {
        v7 = v10;
        v6 = v9;
      }
    }
    ++v3;
    v4 += 12;
  }
  while (v2 != v3);
  if ((v7 & 0x80000000) == 0)
  {
    v11 = *((_QWORD *)a2 + 4) + 8 * v7;
    v12 = 1;
    *(_DWORD *)v11 = 1;
    *(_BYTE *)(v11 + 4) = 1;
    a2[10] |= 1u;
    if ((v6 & 0x80000000) != 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v12 = 0;
  if ((v6 & 0x80000000) == 0)
  {
LABEL_19:
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v6) = ++v12;
    a2[10] |= 2u;
  }
LABEL_20:
  if ((v5 & 0x80000000) == 0)
  {
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v5) = v12 + 1;
    a2[10] |= 4u;
  }
LABEL_22:
  *((_QWORD *)a2 + 8) = 0x3FF0000000000000;
  v13 = a2[4];
  if (v13 == 2)
  {
    v16 = *((_QWORD *)a2 + 3);
    if (!*(_DWORD *)v16 && !*(_BYTE *)(v16 + 4) && *(_DWORD *)(v16 + 8) == 1 && !*(_BYTE *)(v16 + 12))
      goto LABEL_36;
    return 0;
  }
  if (v13 != 1)
    return 0;
  v14 = *((_QWORD *)a2 + 3);
  if (*(_DWORD *)v14)
    return 0;
  if (*(_BYTE *)(v14 + 4))
    return 0;
LABEL_36:
  result = 0;
  a2[15] = 1;
  a2[10] |= 8u;
  return result;
}

uint64_t sub_1ACCA4D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACCA4DBC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;

  if (sqlite3_initialize())
    return 7;
  v5 = (_DWORD *)sub_1ACB5D828(2152);
  if (!v5)
    return 7;
  v6 = v5;
  bzero(v5, 0x868uLL);
  result = 0;
  *(_QWORD *)v6 = a1;
  v6[5] = *(_DWORD *)(a1 + 32);
  *a2 = v6;
  return result;
}

uint64_t sub_1ACCA4E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  v1 = a1;
  sub_1ACCA61B4(a1);
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 8));
  v2 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_6;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v2 = &xmmword_1ECD3B1D0;
LABEL_6:
    (*v2)(v1);
  }
  return 0;
}

uint64_t sub_1ACCA4ED4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _BYTE **v21;
  _BYTE *v22;
  unsigned __int8 *i;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  const char *v27;
  unsigned __int8 *j;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  sqlite3_str *v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t (**v43)(unsigned __int8 *);

  v8 = *(_QWORD *)a1;
  sub_1ACCA61B4(a1);
  sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  if ((a2 & 1) == 0)
  {
    v9 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 32);
    if ((a2 & 2) == 0)
      goto LABEL_3;
    goto LABEL_40;
  }
  v14 = *a5;
  if (!*a5)
    goto LABEL_44;
  v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) != 0)
      goto LABEL_44;
    v16 = sub_1ACBF2B64((int *)v14, 1);
    if (!v16)
      goto LABEL_44;
  }
  else
  {
    v16 = *(_QWORD *)(v14 + 8);
    if (!v16)
      goto LABEL_44;
  }
  v17 = *(_QWORD *)(v8 + 24);
  v18 = *(_DWORD *)(v17 + 40);
  v19 = __OFSUB__(v18, 1);
  v20 = (v18 - 1);
  if ((int)v20 < 0 != v19)
  {
LABEL_44:
    v35 = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return v35;
  }
  v21 = (_BYTE **)(*(_QWORD *)(v17 + 32) + 32 * v20);
  while (1)
  {
    v22 = *v21;
    if (*v21)
    {
      for (i = (unsigned __int8 *)v16; ; ++i)
      {
        v24 = *v22;
        v25 = *i;
        if ((_DWORD)v24 == (_DWORD)v25)
        {
          if (!*v22)
          {
            *(_DWORD *)(a1 + 20) = v20;
            if ((v20 & 0x80000000) == 0)
            {
              v9 = 1;
              if ((a2 & 2) == 0)
                goto LABEL_3;
LABEL_40:
              v32 = v9 + 1;
              v33 = a5[v9];
              if (v33)
              {
                v34 = *(unsigned __int16 *)(v33 + 20);
                if ((~v34 & 0x202) == 0 && *(_BYTE *)(v33 + 22) == 1)
                {
                  v10 = *(_QWORD *)(v33 + 8);
LABEL_48:
                  v9 = v32;
                  if ((a2 & 4) == 0)
                    goto LABEL_49;
LABEL_4:
                  v11 = a5[v9];
                  if (v11)
                  {
                    v12 = *(_WORD *)(v11 + 20);
                    if ((v12 & 8) != 0)
                    {
                      v13 = *(double *)v11;
                    }
                    else if ((v12 & 0x24) != 0)
                    {
                      v13 = (double)*(uint64_t *)v11;
                    }
                    else if ((v12 & 0x12) != 0)
                    {
                      v13 = sub_1ACBF2F88(v11);
                    }
                    else
                    {
                      v13 = 0.0;
                    }
                  }
                  else
                  {
                    sub_1ACBBE20C(89734);
                    v13 = 0.0;
                  }
                  v31 = v13 != 0.0;
                  goto LABEL_50;
                }
                if ((v34 & 1) == 0)
                {
                  v10 = sub_1ACBF2B64((int *)v33, 1);
                  goto LABEL_48;
                }
              }
              v10 = 0;
              goto LABEL_48;
            }
            goto LABEL_44;
          }
        }
        else if (byte_1ACCB6333[v24] != byte_1ACCB6333[v25])
        {
          break;
        }
        ++v22;
      }
    }
    if (!(_DWORD)v20)
      break;
LABEL_25:
    v21 -= 4;
    v26 = (int)v20 <= 0;
    LODWORD(v20) = v20 - 1;
    if (v26)
      goto LABEL_44;
  }
  v27 = "main";
  for (j = (unsigned __int8 *)v16; ; ++j)
  {
    v29 = *(unsigned __int8 *)v27;
    v30 = *j;
    if ((_DWORD)v29 == (_DWORD)v30)
      break;
    if (byte_1ACCB6333[v29] != byte_1ACCB6333[v30])
      goto LABEL_25;
LABEL_30:
    ++v27;
  }
  if (*v27)
    goto LABEL_30;
  v9 = 1;
  *(_DWORD *)(a1 + 20) = 0;
  if ((a2 & 2) != 0)
    goto LABEL_40;
LABEL_3:
  v10 = 0;
  if ((a2 & 4) != 0)
    goto LABEL_4;
LABEL_49:
  v31 = 0;
LABEL_50:
  *(_BYTE *)(a1 + 17) = v31;
  v36 = *(_QWORD *)(v8 + 24);
  if (sqlite3_initialize() || (v38 = sub_1ACB5D828(32)) == 0)
  {
    v37 = (sqlite3_str *)&unk_1EECAC608;
  }
  else
  {
    v37 = (sqlite3_str *)v38;
    if (v36)
      v39 = *(_DWORD *)(v36 + 136);
    else
      v39 = 2147483645;
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_DWORD *)(v38 + 16) = 0;
    *(_DWORD *)(v38 + 20) = v39;
    *(_DWORD *)(v38 + 24) = 0;
    *(_WORD *)(v38 + 28) = 0;
  }
  sqlite3_str_appendf(v37, "SELECT * FROM (SELECT 'sqlite_schema' AS name,1 AS rootpage,'table' AS type UNION ALL SELECT name,rootpage,type FROM \"%w\".sqlite_schema WHERE rootpage!=0)", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 32) + 32 * *(int *)(a1 + 20)));
  if (v10)
    sqlite3_str_appendf(v37, "WHERE name=%Q", v10);
  if ((a2 & 8) != 0)
    sqlite3_str_appendf(v37, " ORDER BY name");
  v40 = (unsigned __int8 *)sqlite3_str_finish(v37);
  if (!v40)
    return 7;
  v42 = v40;
  v35 = sub_1ACB5C66C(*(_QWORD *)(v8 + 24), v40, 0xFFFFFFFFLL, 128, 0, (_QWORD *)(a1 + 8), 0, v41);
  v43 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_67;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v42);
  v42 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v43 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_67:
    (*v43)(v42);
  }
  if (!(_DWORD)v35)
  {
    *(_DWORD *)(a1 + 2072) = -1;
    return sub_1ACCA52C8(a1);
  }
  return v35;
}

uint64_t sub_1ACCA52C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  sqlite3_int64 v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)(uint64_t);
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  const unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  _BYTE *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  int v75;
  int *v76;
  int v77;
  int v78;
  int32x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  signed __int32 v82;
  char *v83;
  uint64_t v84;
  int32x2_t v85;
  int32x2_t *v86;
  uint64_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int32x2_t v91;
  int32x2_t v92;
  int32x2_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  int v105;
  char *v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  int v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32) + 32 * *(int *)(a1 + 20) + 8);
  v138 = **(_QWORD **)(v2 + 8);
  v3 = *(_QWORD *)(a1 + 2088);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_8;
      v4 = &xmmword_1ECD3B1D0;
    }
    (*v4)(v3);
  }
LABEL_8:
  v145 = (_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2088) = 0;
  while (1)
  {
LABEL_9:
    v5 = *(unsigned int *)(a1 + 2072);
    if ((v5 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 2112) = 0;
      *(_QWORD *)(a1 + 2144) = 0;
      *(_QWORD *)(a1 + 2104) = 0;
      *v145 = 0;
      *(_QWORD *)(a1 + 2128) = 0;
      if (sqlite3_step(*(sqlite3_stmt **)(a1 + 8)) == 100
        && (v31 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), 1), *(_DWORD *)(v138 + 32)))
      {
        v32 = v31;
        v33 = sub_1ACCA6520(v2, v31, a1 + 24);
        *(_DWORD *)(a1 + 24) = v32;
        *(_DWORD *)(a1 + 40) = 0;
        if (!*(_BYTE *)(a1 + 17))
        {
          v34 = sqlite3_mprintf("/");
          *(_QWORD *)(a1 + 48) = v34;
          if (v34)
            v33 = v33;
          else
            v33 = 7;
        }
        *(_DWORD *)(a1 + 2072) = 0;
        *(_DWORD *)(a1 + 2104) = 1;
        if (!(_DWORD)v33)
          goto LABEL_63;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 1;
        return sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
      }
      return v33;
    }
    if (!*(_BYTE *)(a1 + 17))
    {
      *(_DWORD *)(a1 + 2112) = 0;
      *(_QWORD *)(a1 + 2144) = 0;
      *(_QWORD *)(a1 + 2104) = 0;
      *v145 = 0;
      *(_QWORD *)(a1 + 2128) = 0;
    }
    v6 = a1 + (v5 << 6);
    v7 = v6 + 24;
    v9 = *(_DWORD *)(v6 + 60);
    v8 = (int *)(v6 + 60);
    v11 = v8 - 5;
    v10 = *(v8 - 5);
    if (v10 >= v9)
      break;
    v12 = a1 + (v5 << 6);
    v13 = (uint64_t *)(v12 + 72);
    v134 = (uint64_t *)(v12 + 72);
    v136 = (unsigned int *)(v12 + 80);
    v139 = v7;
    do
    {
      v141 = v10;
      v143 = *v13;
      v14 = *v13 + 32 * v10;
      v17 = *(_DWORD *)(v14 + 28);
      v16 = (int *)(v14 + 28);
      v15 = v17;
      v18 = *(v16 - 5);
      while (v15 < v18)
      {
        if (!*(_BYTE *)(v2 + 17))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 56);
          goto LABEL_25;
        }
        ++*(_DWORD *)(v2 + 20);
        if (*(_BYTE *)(v2 + 18))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 56);
        }
        else
        {
          sub_1ACBECF6C(v2);
          v20 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 56);
          if (!*(_BYTE *)(v2 + 17))
            goto LABEL_25;
        }
        v21 = *(_DWORD *)(v2 + 20) - 1;
        *(_DWORD *)(v2 + 20) = v21;
        if (!v21)
          sub_1ACBED048(v2);
LABEL_25:
        ++*(_DWORD *)(a1 + 2104);
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32)
                        + 32 * *(int *)(*(_QWORD *)a1 + 32)
                        + 8);
        v23 = *(int **)(v22 + 8);
        v24 = *(_QWORD *)(*(_QWORD *)v23 + 72);
        v25 = *(_DWORD *)(a1 + 2076);
        v146 = v25;
        if (*(_QWORD *)v24)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v24 + 80))(v24, 230440, &v146))
          {
            v27 = v147;
            *(_QWORD *)(a1 + 2136) = v146;
            *(_QWORD *)(a1 + 2144) += v27;
            goto LABEL_30;
          }
          v23 = *(int **)(v22 + 8);
          v25 = *(_DWORD *)(a1 + 2076);
        }
        v26 = *(_QWORD *)(a1 + 2144) + v23[13];
        *(_QWORD *)(a1 + 2144) = v26;
        *(_QWORD *)(a1 + 2136) = v26 * (v25 - 1);
LABEL_30:
        v28 = *v16;
        v18 = *(v16 - 5);
        v29 = *(_QWORD *)(a1 + 2128);
        if ((int)v28 >= v18 - 1)
        {
          v19 = *(v16 - 1);
          *(_QWORD *)(a1 + 2128) = v29 + v19;
          *(_QWORD *)(a1 + 2120) += v20 - (int)v19 - 4;
        }
        else
        {
          *(_QWORD *)(a1 + 2128) = v29 + v20 - 4;
        }
        v15 = v28 + 1;
        *v16 = v28 + 1;
        if (!*(_BYTE *)(a1 + 17))
        {
          *(_QWORD *)(a1 + 2080) = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
          *(_DWORD *)(a1 + 2076) = *(_DWORD *)(*(_QWORD *)(v143 + 32 * v141 + 16) + 4 * v28);
          *(_QWORD *)(a1 + 2096) = "overflow";
          v128 = sqlite3_mprintf("%s%.3x+%.6x", *(const char **)(a1 + (v5 << 6) + 48), *v11, v28);
          *(_QWORD *)(a1 + 2088) = v128;
          if (v128)
            return 0;
          else
            return 7;
        }
      }
      v30 = *v136;
      if ((_DWORD)v30)
      {
        v7 = v139;
        goto LABEL_44;
      }
      v10 = *v11 + 1;
      *v11 = v10;
      v7 = v139;
      v13 = v134;
    }
    while (v10 < *v8);
LABEL_45:
    v37 = a1 + (v5 << 6);
    v40 = *(_QWORD *)(v37 + 32);
    v38 = (_QWORD *)(v37 + 32);
    v39 = v40;
    sub_1ACCA63A8(v7);
    v41 = v38[2];
    if (v41)
    {
      v42 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_51;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v41);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v41);
      v41 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v42 = &xmmword_1ECD3B1D0;
LABEL_51:
        (*v42)(v41);
      }
    }
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *v38 = v39;
    v43 = *(_DWORD *)(a1 + 2072);
    *(_DWORD *)(a1 + 2072) = v43 - 1;
    if (*(_BYTE *)(a1 + 17) && v43 < 1)
      return 0;
  }
  v30 = *(unsigned int *)(a1 + (v5 << 6) + 80);
  if (!(_DWORD)v30)
    goto LABEL_45;
LABEL_44:
  v35 = *v11;
  v36 = *v8;
  if ((int)v35 > *v8)
    goto LABEL_45;
  v44 = *(_DWORD *)(a1 + 2072);
  *(_DWORD *)(a1 + 2072) = v44 + 1;
  if (v44 >= 31)
  {
    sub_1ACCA61B4(a1);
    return sub_1ACBEB08C(229248);
  }
  if ((_DWORD)v35 != v36)
    v30 = *(unsigned int *)(*(_QWORD *)(a1 + (v5 << 6) + 72) + 32 * v35 + 4);
  *(_DWORD *)(v7 + 64) = v30;
  v33 = sub_1ACCA6520(v2, v30, v7 + 64);
  ++*(_DWORD *)(a1 + 2104);
  *(_DWORD *)(v7 + 80) = 0;
  if (!*(_BYTE *)(a1 + 17))
  {
    v45 = sqlite3_mprintf("%s%.3x/", *(const char **)(a1 + (v5 << 6) + 48), *v11);
    *(_QWORD *)(v7 + 88) = v45;
    if (v45)
      v33 = v33;
    else
      v33 = 7;
  }
  ++*v11;
  if ((_DWORD)v33)
    return v33;
LABEL_63:
  v46 = *(int *)(a1 + 2072);
  v47 = a1 + (v46 << 6);
  v48 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  v49 = *(_DWORD *)(v47 + 24);
  v142 = v47 + 24;
  *(_QWORD *)(a1 + 2080) = v48;
  *(_DWORD *)(a1 + 2076) = v49;
  v50 = *(_QWORD *)(v47 + 32);
  v51 = 100;
  if (v49 != 1)
    v51 = 0;
  v52 = (unsigned __int8 *)(v50 + v51);
  v53 = *v52;
  *(_BYTE *)(v47 + 56) = v53;
  v54 = (_BYTE *)(v47 + 56);
  v55 = v53 - 2;
  v144 = 0;
  v56 = 8;
  switch(v55)
  {
    case 0:
    case 3:
      v144 = 1;
      v56 = 12;
      goto LABEL_67;
    case 8:
    case 11:
LABEL_67:
      if (v49 == 1)
        v57 = v56 + 100;
      else
        v57 = v56;
      v58 = __rev16(*(unsigned __int16 *)(v52 + 3));
      v59 = a1 + (v46 << 6);
      *(_DWORD *)(v59 + 84) = 0;
      v135 = (unsigned int *)(v59 + 84);
      v137 = v57;
      *(_DWORD *)(v59 + 60) = v58;
      v140 = (int *)(v59 + 60);
      v60 = *(_QWORD *)(v2 + 8);
      v61 = *(_DWORD *)(v60 + 52);
      v62 = v52[7] - (v57 + 2 * v58) + (bswap32(*(unsigned __int16 *)(v52 + 5)) >> 16);
      v63 = __rev16(*(unsigned __int16 *)(v52 + 1));
      break;
    default:
      goto LABEL_77;
  }
  while (v63)
  {
    if ((int)v63 < v61)
    {
      v62 += bswap32(*(unsigned __int16 *)(v50 + v63 + 2)) >> 16;
      v64 = __rev16(*(unsigned __int16 *)(v50 + v63));
      v65 = v64 >= v63 + 4 || v64 == 0;
      v63 = v64;
      if (v65)
        continue;
    }
    goto LABEL_77;
  }
  v71 = a1 + (v46 << 6);
  *(_DWORD *)(v71 + 64) = v62;
  if (v144)
  {
    *(_DWORD *)(v71 + 80) = bswap32(*((_DWORD *)v52 + 2));
    if (!v58)
      goto LABEL_78;
  }
  else
  {
    *(_DWORD *)(v71 + 80) = 0;
    if (!v58)
      goto LABEL_78;
  }
  if (*(_BYTE *)(v2 + 17))
  {
    v96 = *(_DWORD *)(v2 + 20) + 1;
    *(_DWORD *)(v2 + 20) = v96;
    if (*(_BYTE *)(v2 + 18))
    {
      v130 = *(_DWORD *)(v60 + 56);
LABEL_116:
      v97 = v96 - 1;
      *(_DWORD *)(v2 + 20) = v97;
      if (!v97)
        sub_1ACBED048(v2);
    }
    else
    {
      sub_1ACBECF6C(v2);
      v130 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 56) - *(_DWORD *)(*(_QWORD *)(v2 + 8) + 52) + v61;
      if (*(_BYTE *)(v2 + 17))
      {
        v96 = *(_DWORD *)(v2 + 20);
        goto LABEL_116;
      }
    }
  }
  else
  {
    v130 = *(_DWORD *)(v60 + 56);
  }
  v98 = *v140;
  if (sqlite3_initialize())
  {
    *(_QWORD *)(a1 + (v46 << 6) + 72) = 0;
    return 7;
  }
  v99 = (void *)sub_1ACB5D828(32 * v98 + 32);
  v100 = a1 + (v46 << 6);
  *(_QWORD *)(v100 + 72) = v99;
  v132 = (uint64_t *)(v100 + 72);
  if (!v99)
    return 7;
  bzero(v99, 32 * *v140 + 32);
  if (*v140 >= 1)
  {
    v101 = 0;
    v131 = v130 - 4;
    v133 = v46;
    while (1)
    {
      v102 = __rev16(*(unsigned __int16 *)(v50 + v137 + 2 * v101));
      if (v102 < v137 || (int)v102 >= v61)
        break;
      v104 = *v132;
      if (v144)
      {
        *(_DWORD *)(v104 + 32 * v101 + 4) = bswap32(*(_DWORD *)(v50 + v102));
        LODWORD(v102) = v102 + 4;
      }
      v105 = *v54;
      if (v105 != 5)
      {
        v106 = (char *)(v50 + v102);
        v107 = *v106;
        if ((v107 & 0x80) != 0)
        {
          v109 = v106[1];
          if (v106[1] < 0)
          {
            v110 = v106[2];
            if (v110 < 0)
            {
              v146 = 0;
              v108 = sub_1ACB8A6CC(v106, &v146);
              if (HIDWORD(v146))
                v107 = -1;
              else
                v107 = v146;
            }
            else
            {
              v107 = v110 & 0x7F | (v107 << 14) & 0x1FC07F | ((v109 & 0x7F) << 7);
              v108 = 3;
            }
          }
          else
          {
            v107 = ((v107 & 0x7F) << 7) | v109;
            v108 = 2;
          }
        }
        else
        {
          v108 = 1;
        }
        v111 = v102 + v108;
        if (v105 == 13)
          v111 += sub_1ACB8A6CC((char *)(v50 + v111), &v146);
        if (v107 > *v135)
          *v135 = v107;
        v112 = 32 * (v130 - 12);
        if (v105 == 13)
          v112 = 32 * v130 - 384;
        v113 = ((v130 - 12) << 6) / 255 - 23;
        if (v105 == 13)
          v113 = v130 - 35;
        v114 = v112 / 255 - 23;
        v115 = (int)(v107 - v114) % v131 + v114;
        if (v115 <= v113)
          v116 = v115;
        else
          v116 = v114;
        v46 = v133;
        if ((v116 & 0x80000000) != 0)
          break;
        *(_DWORD *)(v104 + 32 * v101) = v116;
        v117 = v107 - v116;
        if (v107 > v116)
        {
          v46 = v133;
          if ((v107 & 0x80000000) != 0)
            break;
          v118 = v116 + v111;
          if ((int)v118 + 4 > v130)
            break;
          v119 = (v130 - 5 + v117) / v131;
          v120 = v104 + 32 * v101;
          *(_DWORD *)(v120 + 24) = v117 - (v119 - 1) * v131;
          *(_DWORD *)(v120 + 8) = v119;
          if (sqlite3_initialize())
          {
            *(_QWORD *)(v120 + 16) = 0;
            return 7;
          }
          v121 = (_DWORD *)sub_1ACB5D828(4 * (int)v119);
          *(_QWORD *)(v120 + 16) = v121;
          v122 = (_QWORD *)(v120 + 16);
          if (!v121)
            return 7;
          *v121 = bswap32(*(_DWORD *)(v50 + v118));
          if ((int)v119 >= 2)
          {
            v123 = 0;
            v124 = v119 - 1;
            do
            {
              v146 = 0;
              v125 = (*(uint64_t (**)(void))(**(_QWORD **)(v2 + 8) + 288))();
              if ((_DWORD)v125)
                return v125;
              v126 = v146;
              *(_DWORD *)(*v122 + 4 * v123 + 4) = bswap32(**(_DWORD **)(v146 + 8));
              if ((*(_BYTE *)(v126 + 52) & 0x20) != 0)
              {
                v127 = *(_QWORD *)(v126 + 40);
                --*(_DWORD *)(v127 + 152);
                *(_QWORD *)(v126 + 32) = *(_QWORD *)(v127 + 168);
                *(_QWORD *)(v127 + 168) = v126;
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v127 + 72) + 144))(*(_QWORD *)(v127 + 72), *(_QWORD *)(v127 + 200) * (*(_DWORD *)(v126 + 48) - 1));
              }
              else
              {
                sub_1ACBE906C(v126);
              }
            }
            while (v124 != ++v123);
          }
        }
      }
      ++v101;
      v46 = v133;
      if (v101 >= *v140)
        goto LABEL_78;
    }
LABEL_77:
    *v54 = 0;
    sub_1ACCA63A8(v142);
  }
LABEL_78:
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32) + 32 * *(int *)(*(_QWORD *)a1 + 32) + 8);
  v67 = *(int **)(v66 + 8);
  v68 = *(_QWORD *)(*(_QWORD *)v67 + 72);
  v69 = *(_DWORD *)(a1 + 2076);
  v146 = v69;
  if (*(_QWORD *)v68)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v68 + 80))(v68, 230440, &v146))
    {
      v67 = *(int **)(v66 + 8);
      v69 = *(_DWORD *)(a1 + 2076);
      goto LABEL_81;
    }
    v72 = v147;
    *(_QWORD *)(a1 + 2136) = v146;
    *(_QWORD *)(a1 + 2144) += v72;
  }
  else
  {
LABEL_81:
    v70 = *(_QWORD *)(a1 + 2144) + v67[13];
    *(_QWORD *)(a1 + 2144) = v70;
    *(_QWORD *)(a1 + 2136) = v70 * (v69 - 1);
  }
  v73 = "internal";
  switch(*v54)
  {
    case 2:
    case 5:
      break;
    case 0xA:
    case 0xD:
      v73 = "leaf";
      break;
    default:
      v73 = "corrupted";
      break;
  }
  *(_QWORD *)(a1 + 2096) = v73;
  v74 = a1 + (v46 << 6);
  v77 = *(_DWORD *)(v74 + 60);
  v76 = (int *)(v74 + 60);
  v75 = v77;
  *(_DWORD *)(a1 + 2108) += v77;
  *(_QWORD *)(a1 + 2120) += v76[1];
  v78 = v76[6];
  if (v78 > *(_DWORD *)(a1 + 2112))
    *(_DWORD *)(a1 + 2112) = v78;
  if (*(_BYTE *)(a1 + 17))
  {
    v33 = 0;
    if (v75 >= 1)
      goto LABEL_93;
LABEL_99:
    v82 = 0;
  }
  else
  {
    v83 = sqlite3_mprintf("%s", *(const char **)(a1 + (v46 << 6) + 48));
    *(_QWORD *)(a1 + 2088) = v83;
    if (v83)
      v33 = 0;
    else
      v33 = 7;
    v75 = *v76;
    if (*v76 < 1)
      goto LABEL_99;
LABEL_93:
    v79 = *(int32x2_t **)(a1 + (v46 << 6) + 72);
    v80 = v75;
    if (v75 >= 5)
    {
      v84 = v75 & 3;
      if ((v80 & 3) == 0)
        v84 = 4;
      v81 = v80 - v84;
      v85 = 0;
      v86 = v79 + 8;
      v87 = v81;
      v88 = 0;
      do
      {
        v89 = vzip1_s32(v86[-8], v86[-4]);
        v90 = v86[4];
        v91 = *v86;
        v86 += 16;
        v85 = vadd_s32(v89, v85);
        v88 = vadd_s32(vzip1_s32(v91, v90), v88);
        v87 -= 4;
      }
      while (v87);
      v92 = vadd_s32(v88, v85);
      v82 = vpadd_s32(v92, v92).u32[0];
    }
    else
    {
      v81 = 0;
      v82 = 0;
    }
    v93 = &v79[4 * v81];
    v94 = v80 - v81;
    do
    {
      v95 = v93->i32[0];
      v93 += 4;
      v82 += v95;
      --v94;
    }
    while (v94);
  }
  *(_QWORD *)(a1 + 2128) += v82;
  if (*(_BYTE *)(a1 + 17))
    goto LABEL_9;
  return v33;
}

uint64_t sub_1ACCA5FC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1ACCA5FD0(uint64_t a1, uint64_t *a2, int a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a3)
  {
    case 0:
      if (!a2)
        goto LABEL_32;
      v5 = *(char **)(a1 + 2080);
      goto LABEL_9;
    case 1:
      if (*(_BYTE *)(a1 + 17))
        return 0;
      if (!a2)
        goto LABEL_32;
      v5 = *(char **)(a1 + 2088);
LABEL_9:
      v7 = (uint64_t)a2;
      v8 = -1;
      goto LABEL_44;
    case 2:
      if (*(_BYTE *)(a1 + 17))
      {
        if (a2)
        {
          v6 = *(int *)(a1 + 2104);
          goto LABEL_36;
        }
      }
      else if (a2)
      {
        v6 = *(unsigned int *)(a1 + 2076);
        goto LABEL_36;
      }
LABEL_38:
      sub_1ACBBE20C(97423);
      return 0;
    case 3:
      if (*(_BYTE *)(a1 + 17))
        return 0;
      if (a2)
      {
        v5 = *(char **)(a1 + 2096);
        goto LABEL_43;
      }
LABEL_32:
      sub_1ACBBE20C(97480);
      break;
    case 4:
      if (!a2)
        goto LABEL_38;
      v6 = *(int *)(a1 + 2108);
      goto LABEL_36;
    case 5:
      if (!a2)
        goto LABEL_38;
      v6 = *(_QWORD *)(a1 + 2128);
      goto LABEL_36;
    case 6:
      if (!a2)
        goto LABEL_38;
      v6 = *(_QWORD *)(a1 + 2120);
      goto LABEL_36;
    case 7:
      if (!a2)
        goto LABEL_38;
      v6 = *(int *)(a1 + 2112);
      goto LABEL_36;
    case 8:
      if (*(_BYTE *)(a1 + 17))
        return 0;
      if (!a2)
        goto LABEL_38;
      v6 = *(_QWORD *)(a1 + 2136);
      goto LABEL_36;
    case 9:
      if (!a2)
        goto LABEL_38;
      v6 = *(_QWORD *)(a1 + 2144);
      goto LABEL_36;
    case 10:
      if (a2)
      {
        if (*a2)
        {
          v9 = *(_QWORD *)(*a2 + 24) + 32;
        }
        else
        {
          sub_1ACBBE20C(97935);
          v9 = 32;
        }
        v5 = *(char **)(*(_QWORD *)v9 + 32 * *(int *)(a1 + 20));
LABEL_43:
        v7 = (uint64_t)a2;
        v8 = 0;
LABEL_44:
        sub_1ACBC69D0(v7, v5, -1, 1u, (uint64_t (*)(uint64_t))v8);
      }
      else
      {
        sub_1ACBBE20C(97935);
        sub_1ACBBE20C(97480);
      }
      break;
    default:
      if (a2)
      {
        v6 = *(unsigned __int8 *)(a1 + 17);
LABEL_36:
        v10 = *a2;
        if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v10, v6);
        }
        else
        {
          *(_QWORD *)v10 = v6;
          *(_WORD *)(v10 + 20) = 4;
        }
      }
      else
      {
        sub_1ACBBE20C(97413);
      }
      return 0;
  }
  return 0;
}

uint64_t sub_1ACCA61A4(uint64_t a1, _QWORD *a2)
{
  *a2 = *(unsigned int *)(a1 + 2076);
  return 0;
}

uint64_t sub_1ACCA61B4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t (**v7)(uint64_t);
  uint64_t result;
  uint64_t v9;
  uint64_t (**v10)(uint64_t);

  for (i = 0; i != 2048; i += 64)
  {
    v3 = a1 + i;
    v4 = *(_QWORD *)(a1 + i + 32);
    sub_1ACCA63A8(a1 + i + 24);
    v5 = *(_QWORD *)(a1 + i + 48);
    if (v5)
    {
      v6 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v5);
        v5 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_11;
        v6 = &xmmword_1ECD3B1D0;
      }
      (*v6)(v5);
    }
LABEL_11:
    *(_OWORD *)(a1 + i + 56) = 0u;
    *(_OWORD *)(a1 + i + 72) = 0u;
    *(_OWORD *)(a1 + i + 24) = 0u;
    *(_OWORD *)(a1 + i + 40) = 0u;
    *(_QWORD *)(v3 + 32) = v4;
    if (v4)
    {
      v7 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_2;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v7 = &xmmword_1ECD3B1D0;
LABEL_2:
        (*v7)(v4);
      }
    }
    *(_QWORD *)(v3 + 32) = 0;
  }
  result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
  *(_DWORD *)(a1 + 2072) = 0;
  v9 = *(_QWORD *)(a1 + 2088);
  if (v9)
  {
    v10 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_23;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v9);
    v9 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v10 = &xmmword_1ECD3B1D0;
LABEL_23:
      result = (*v10)(v9);
    }
  }
  *(_QWORD *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1ACCA63A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t (**v7)(uint64_t);

  v1 = result;
  v2 = *(_QWORD *)(result + 48);
  if (!v2)
    goto LABEL_19;
  if (*(int *)(result + 36) < 1)
    goto LABEL_13;
  v3 = 0;
  v4 = 16;
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + v4);
    if (v5)
    {
      v6 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_4;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v5);
      v5 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v6 = &xmmword_1ECD3B1D0;
LABEL_4:
        result = (*v6)(v5);
      }
    }
    ++v3;
    v4 += 32;
  }
  while (v3 < *(int *)(v1 + 36));
  v2 = *(_QWORD *)(v1 + 48);
  if (v2)
  {
LABEL_13:
    v7 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_18;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = &xmmword_1ECD3B1D0;
LABEL_18:
      result = (*v7)(v2);
    }
  }
LABEL_19:
  *(_DWORD *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t sub_1ACCA6520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  size_t v5;
  uint64_t result;
  int v8;
  uint64_t v10;
  _OWORD *v11;

  v4 = *(int **)(a1 + 8);
  v5 = v4[13];
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_2;
  v8 = sqlite3_initialize();
  if ((int)v5 < -255 || v8 != 0)
  {
    *(_QWORD *)(a3 + 8) = 0;
    return 7;
  }
  v10 = sub_1ACB5D828((v5 + 256));
  *(_QWORD *)(a3 + 8) = v10;
  if (!v10)
    return 7;
  v11 = (_OWORD *)(v10 + v5);
  v11[14] = 0u;
  v11[15] = 0u;
  v11[12] = 0u;
  v11[13] = 0u;
  v11[10] = 0u;
  v11[11] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  *v11 = 0u;
  v11[1] = 0u;
  v4 = *(int **)(a1 + 8);
LABEL_2:
  result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 288))();
  if (!(_DWORD)result)
  {
    memcpy(*(void **)(a3 + 8), MEMORY[8], v5);
    return 0;
  }
  return result;
}

uint64_t sub_1ACCA6658(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  _QWORD *v8;

  result = sqlite3_declare_vtab(a1, "CREATE TABLE x(key,value,type,atom,id,parent,fullkey,path,json HIDDEN,root HIDDEN)");
  if (!(_DWORD)result)
  {
    if (sqlite3_initialize())
    {
      *a5 = 0;
      return 7;
    }
    v8 = (_QWORD *)sub_1ACB5D828(24);
    *a5 = v8;
    if (!v8)
      return 7;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    sqlite3_vtab_config(a1, 2);
    return 0;
  }
  return result;
}

uint64_t sub_1ACCA66C4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v18[0] = -1;
  v2 = *(_DWORD *)a2;
  if (*(int *)a2 < 1)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = (_BYTE *)(*(_QWORD *)(a2 + 8) + 5);
    do
    {
      v7 = *(_DWORD *)(v6 - 5);
      v8 = __OFSUB__(v7, 8);
      v9 = v7 - 8;
      if (v9 < 0 == v8)
      {
        v10 = 1 << v9;
        if (*v6)
        {
          if (*(v6 - 1) == 2)
          {
            *((_DWORD *)v18 + v9) = v5;
            v3 |= v10;
          }
        }
        else
        {
          v4 |= v10;
        }
      }
      ++v5;
      v6 += 12;
    }
    while (v2 != v5);
  }
  if (*(int *)(a2 + 16) >= 1
    && (v11 = *(_QWORD *)(a2 + 24), (*(_DWORD *)v11 & 0x80000000) != 0)
    && !*(_BYTE *)(v11 + 4))
  {
    *(_DWORD *)(a2 + 60) = 1;
    if ((v4 & ~v3) != 0)
      return 19;
  }
  else if ((v4 & ~v3) != 0)
  {
    return 19;
  }
  v13 = LODWORD(v18[0]);
  if ((v18[0] & 0x80000000) != 0)
  {
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
    v14 = *(_QWORD *)(a2 + 32);
    v15 = v14 + 8 * v13;
    v16 = 1;
    *(_DWORD *)v15 = 1;
    *(_BYTE *)(v15 + 4) = 1;
    if ((v18[0] & 0x8000000000000000) == 0)
    {
      v17 = v14 + 8 * HIDWORD(v18[0]);
      *(_DWORD *)v17 = 2;
      *(_BYTE *)(v17 + 4) = 1;
      v16 = 3;
    }
  }
  result = 0;
  *(_DWORD *)(a2 + 40) = v16;
  return result;
}

uint64_t sub_1ACCA6818(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

double sub_1ACCA68C4(uint64_t a1, _QWORD *a2)
{
  double result;
  _OWORD *v4;

  if (!sqlite3_initialize())
  {
    v4 = (_OWORD *)sub_1ACB5D828(128);
    if (v4)
    {
      result = 0.0;
      v4[6] = 0u;
      v4[7] = 0u;
      v4[4] = 0u;
      v4[5] = 0u;
      v4[2] = 0u;
      v4[3] = 0u;
      *v4 = 0u;
      v4[1] = 0u;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t sub_1ACCA691C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  sub_1ACC49638(v1 + 48);
  *(_DWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1ACCA6A54(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)(uint64_t);
  uint64_t v29;
  uint64_t (**v30)(uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t (**v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  void *v49;
  char *v51;

  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v9)(v8);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v10 = (unsigned int *)(a1 + 48);
  sub_1ACC49638(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = (_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!a2)
    return 0;
  v12 = *a5;
  if (!*a5)
    return 0;
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
      return 0;
    v14 = (const void *)sub_1ACBF2B64((int *)v12, 1);
    if (!v14)
      return 0;
  }
  else
  {
    v14 = *(const void **)(v12 + 8);
    if (!v14)
      return 0;
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_DWORD *)(a1 + 104) = 1;
  v15 = *a5;
  if (!*a5)
  {
    sub_1ACBBE20C(91120);
    goto LABEL_27;
  }
  v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 0x12) == 0
    || (*(_WORD *)(v15 + 20) & 0x1000) == 0
    || *(uint64_t (**)(uint64_t))(v15 + 48) != sub_1ACBF1160)
  {
    if ((v16 & 2) != 0 && *(_BYTE *)(v15 + 22) == 1)
    {
      v17 = *(_DWORD *)(v15 + 16);
      goto LABEL_28;
    }
    if ((v16 & 0x10) != 0)
    {
      v17 = *(_DWORD *)(v15 + 16);
      if ((*(_WORD *)(v15 + 20) & 0x400) != 0)
        v17 += *(_DWORD *)v15;
      goto LABEL_28;
    }
    if ((v16 & 1) == 0)
    {
      v17 = sub_1ACBF2B3C(v15, 1);
      goto LABEL_28;
    }
LABEL_27:
    v17 = 0;
LABEL_28:
    if (sqlite3_initialize() || (v19 = (_QWORD *)sub_1ACB5D828(v17 + 10)) == 0)
    {
      *(_QWORD *)(a1 + 64) = 0;
      return 7;
    }
    *v19 = 1;
    v20 = v19 + 1;
    *(_QWORD *)(a1 + 64) = v20;
    memcpy(v20, v14, v17 + 1);
    v14 = *(const void **)(a1 + 64);
    goto LABEL_35;
  }
  ++*((_QWORD *)v14 - 1);
  *(_QWORD *)(a1 + 64) = v14;
LABEL_35:
  *(_BYTE *)(a1 + 100) = 1;
  *(_QWORD *)(a1 + 32) = v14;
  v21 = sub_1ACC48750((unsigned int *)(a1 + 48), 0);
  if (*(_BYTE *)(a1 + 99))
    goto LABEL_54;
  v22 = v21 - 1;
  if (v21 < 1)
    goto LABEL_54;
  v23 = (uint64_t)v14 + v21 - 1;
  do
  {
    v25 = *(unsigned __int8 *)++v23;
    v24 = v25;
    ++v22;
  }
  while (byte_1ACCBA924[v25]);
  if (v24)
  {
    v22 += sub_1ACC49414(v23);
    if (*((_BYTE *)v14 + v22))
      goto LABEL_54;
    *(_BYTE *)(a1 + 101) = 1;
  }
  if (v22 <= 0)
  {
LABEL_54:
    sub_1ACC49638(a1 + 48);
    if (*(_BYTE *)(a1 + 99))
    {
      v18 = 7;
      goto LABEL_66;
    }
    v29 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v29)
    {
      v30 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v29);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v29);
        v29 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_63;
        v30 = &xmmword_1ECD3B1D0;
      }
      (*v30)(v29);
    }
LABEL_63:
    v31 = sqlite3_mprintf("malformed JSON");
    *(_QWORD *)(*(_QWORD *)a1 + 16) = v31;
    if (v31)
      v18 = 1;
    else
      v18 = 7;
LABEL_66:
    v32 = *(_QWORD *)(a1 + 40);
    if (v32)
    {
      v33 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v32);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v32);
        v32 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_73;
        v33 = &xmmword_1ECD3B1D0;
      }
      (*v33)(v32);
    }
LABEL_73:
    sub_1ACC49638(a1 + 48);
    *(_DWORD *)(a1 + 8) = 0;
    *v11 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_74;
  }
  if (*(_BYTE *)(a1 + 25))
  {
    v26 = *v10;
    if (sqlite3_initialize())
    {
      *(_QWORD *)(a1 + 80) = 0;
      goto LABEL_46;
    }
    v34 = sub_1ACB5D828(4 * v26);
    *(_QWORD *)(a1 + 80) = v34;
    if (!v34)
    {
LABEL_46:
      *(_BYTE *)(a1 + 99) = 1;
      v27 = *(_QWORD *)(a1 + 40);
      if (v27)
      {
        v28 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v27);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v27);
          v27 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_53;
          v28 = &xmmword_1ECD3B1D0;
        }
        (*v28)(v27);
      }
LABEL_53:
      sub_1ACC49638(a1 + 48);
      *(_DWORD *)(a1 + 8) = 0;
      *v11 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      v18 = 7;
LABEL_74:
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      return v18;
    }
    sub_1ACCA76B4(a1 + 48, 0, 0);
  }
  if (a2 != 3)
  {
    v38 = *(unsigned __int8 **)(a1 + 56);
    v39 = v38;
    goto LABEL_83;
  }
  v51 = 0;
  v35 = a5[1];
  if (!v35)
    return 0;
  v36 = *(unsigned __int16 *)(v35 + 20);
  if ((~v36 & 0x202) != 0 || *(_BYTE *)(v35 + 22) != 1)
  {
    if ((v36 & 1) != 0)
      return 0;
    v37 = (char *)sub_1ACBF2B64((int *)v35, 1);
  }
  else
  {
    v37 = *(char **)(v35 + 8);
  }
  if (!v37)
    return 0;
  v45 = a5[1];
  if (!v45)
  {
    sub_1ACBBE20C(91120);
LABEL_101:
    v47 = 0;
    goto LABEL_102;
  }
  v46 = *(_WORD *)(v45 + 20);
  if ((v46 & 2) != 0 && *(_BYTE *)(v45 + 22) == 1)
  {
    v47 = *(_DWORD *)(v45 + 16);
    goto LABEL_102;
  }
  if ((v46 & 0x10) == 0)
  {
    if ((v46 & 1) == 0)
    {
      v47 = sub_1ACBF2B3C(v45, 1);
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  v47 = *(_DWORD *)(v45 + 16);
  if ((*(_WORD *)(v45 + 20) & 0x400) != 0)
    v47 += *(_DWORD *)v45;
LABEL_102:
  if (sqlite3_initialize())
  {
    *(_QWORD *)(a1 + 40) = 0;
    return 7;
  }
  v48 = v47 + 1;
  v49 = (void *)sub_1ACB5D828(v48);
  *(_QWORD *)(a1 + 40) = v49;
  if (!v49)
    return 7;
  memcpy(v49, v37, v48);
  if (*v37 != 36
    || (v39 = (unsigned __int8 *)sub_1ACC49A80(a1 + 48, 0, (char *)(*(_QWORD *)(a1 + 40) + 1), 0, &v51),
        (v37 = v51) != 0))
  {
    sqlite3_free(*(void **)(*(_QWORD *)a1 + 16));
    *(_QWORD *)(*(_QWORD *)a1 + 16) = sqlite3_mprintf("JSON path error near '%q'", v37);
    sub_1ACCA75F0(a1);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16))
      return 1;
    else
      return 7;
  }
  if (!v39)
    return 0;
  v38 = *(unsigned __int8 **)(a1 + 56);
LABEL_83:
  v40 = (unint64_t)(v39 - v38) >> 4;
  *(_DWORD *)(a1 + 12) = v40;
  *(_DWORD *)(a1 + 16) = v40;
  v41 = *v39;
  *(_BYTE *)(a1 + 24) = v41;
  if (v41 < 7)
  {
    v18 = 0;
    *(_DWORD *)(a1 + 20) = v40 + 1;
  }
  else
  {
    *((_DWORD *)v39 + 2) = 0;
    v42 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v42 + 1 + *((_DWORD *)v39 + 1);
    if (*(_BYTE *)(a1 + 25))
    {
      v43 = *(_QWORD *)(a1 + 56);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(v43 + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * v42));
      if (!(_DWORD)v42)
        return 0;
      v44 = v42 - 1;
      if ((*(_BYTE *)(v43 + 16 * v44 + 1) & 0x20) == 0)
        return 0;
      v18 = 0;
      *(_DWORD *)v11 = v44;
    }
    else
    {
      v18 = 0;
      *(_DWORD *)v11 = v42 + 1;
    }
  }
  return v18;
}

uint64_t sub_1ACCA7144(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  if (!*(_BYTE *)(a1 + 25))
  {
    v8 = *(unsigned __int8 *)(a1 + 24);
    if (v8 == 8)
    {
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_DWORD *)(a1 + 16);
      if (*(unsigned __int8 *)(v12 + 16 * (v13 + 1)) < 7u)
        v14 = 2;
      else
        v14 = *(_DWORD *)(v12 + 16 * (v13 + 1) + 4) + 2;
      v15 = v14 + v13;
    }
    else
    {
      if (v8 != 7)
      {
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
        return 0;
      }
      v9 = *(_QWORD *)(a1 + 56);
      v10 = *(unsigned int *)(a1 + 16);
      if (*(unsigned __int8 *)(v9 + 16 * v10) < 7u)
        v11 = 1;
      else
        v11 = *(_DWORD *)(v9 + 16 * v10 + 4) + 1;
      v15 = v11 + v10;
    }
    *(_DWORD *)(a1 + 16) = v15;
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 16) + ((*(unsigned __int8 *)(v1 + 16 * *(unsigned int *)(a1 + 16) + 1) >> 5) & 1);
  *(_DWORD *)(a1 + 16) = v3 + 1;
  ++*(_DWORD *)(a1 + 8);
  if (v3 + 1 >= v2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * (v3 + 1));
  v5 = *(unsigned __int8 *)(v1 + 16 * v4);
  *(_BYTE *)(a1 + 24) = v5;
  if (v5 != 7)
    return 0;
  v6 = (_DWORD *)(v1 + 16 * v4 + 8);
  if ((_DWORD)v4 == v3)
    *v6 = 0;
  else
    ++*v6;
  return 0;
}

BOOL sub_1ACCA7270(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) >= *(_DWORD *)(a1 + 20);
}

uint64_t sub_1ACCA7280(uint64_t a1, sqlite3_context *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  int v21;
  sqlite3_context *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 48;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 16);
  v9 = v7 + 16 * v8;
  switch(a3)
  {
    case 0:
      if (!(_DWORD)v8)
        return 0;
      v10 = *(unsigned __int8 *)(a1 + 24);
      if (v10 == 7)
      {
        v19 = (_DWORD *)(a1 + 8);
        if (*(_BYTE *)(a1 + 25))
        {
          if (!*v19)
            return 0;
          v19 = (_DWORD *)(v7 + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * v8) + 8);
        }
        sqlite3_result_int64(a2, *v19);
      }
      else if (v10 == 8)
      {
        v11 = (unsigned __int8 *)(v7 + 16 * v8);
        goto LABEL_10;
      }
      return 0;
    case 1:
      v11 = (unsigned __int8 *)(v9 + 16 * (((unint64_t)*(unsigned __int8 *)(v7 + 16 * v8 + 1) >> 5) & 1));
      goto LABEL_10;
    case 2:
      if (!a2)
        goto LABEL_32;
      v12 = off_1E5C74990[*(unsigned __int8 *)(v9
                                             + 16
                                             * (((unint64_t)*(unsigned __int8 *)(v7 + 16 * v8 + 1) >> 5) & 1))];
      goto LABEL_31;
    case 3:
      v11 = (unsigned __int8 *)(v9 + 16 * (((unint64_t)*(unsigned __int8 *)(v7 + 16 * v8 + 1) >> 5) & 1));
      if (*v11 <= 6u)
LABEL_10:
        sub_1ACC4B8B0(v6, (uint64_t)v11, a2);
      return 0;
    case 4:
      if (!a2)
        goto LABEL_33;
      v13 = (((unint64_t)*(unsigned __int8 *)(v7 + 16 * v8 + 1) >> 5) & 1) + v8;
      goto LABEL_17;
    case 5:
      if (v8 <= *(_DWORD *)(a1 + 12) || !*(_BYTE *)(a1 + 25))
        return 0;
      if (a2)
      {
        v13 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * v8);
LABEL_17:
        v14 = *(_QWORD *)a2;
        if ((*(_WORD *)(*(_QWORD *)a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v14, v13);
        }
        else
        {
          *(_QWORD *)v14 = v13;
          *(_WORD *)(v14 + 20) = 4;
        }
      }
      else
      {
LABEL_33:
        sub_1ACBBE20C(97423);
      }
      return 0;
    case 6:
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v22 = a2;
      v23 = (char *)&v25 + 2;
      v24 = xmmword_1ACCBDE10;
      LOBYTE(v25) = 1;
      if (*(_BYTE *)(a1 + 25))
      {
        v15 = a1;
LABEL_23:
        sub_1ACCA77CC(v15, &v22, v8);
      }
      else
      {
        v16 = *(const void **)(a1 + 40);
        if (v16)
        {
          v17 = strlen(*(const char **)(a1 + 40));
          if (v17)
          {
            v18 = v17;
            if (v17 >= 0x64uLL)
            {
              sub_1ACC4B11C((uint64_t)&v22, v16, v17);
            }
            else
            {
              __memcpy_chk();
              *((_QWORD *)&v24 + 1) = v18;
            }
          }
        }
        else
        {
          *((_QWORD *)&v24 + 1) = 1;
          BYTE2(v25) = 36;
        }
        v21 = *(unsigned __int8 *)(a1 + 24);
        if (v21 == 8)
        {
          sub_1ACCA7924(&v22, v9);
        }
        else if (v21 == 7)
        {
          sub_1ACC4B3FC(30, &v22, "[%d]", *(_DWORD *)(a1 + 8));
        }
      }
      sub_1ACC4AC7C((uint64_t)&v22);
      return 0;
    case 7:
      if (!*(_BYTE *)(a1 + 25))
        goto LABEL_25;
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v22 = a2;
      v23 = (char *)&v25 + 2;
      v24 = xmmword_1ACCBDE10;
      LOBYTE(v25) = 1;
      LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v8);
      v15 = a1;
      goto LABEL_23;
    case 8:
      if (!a2)
        goto LABEL_32;
      v12 = *(char **)(a1 + 64);
      goto LABEL_31;
    default:
LABEL_25:
      if (a2)
      {
        if (*(_QWORD *)(a1 + 40))
          v12 = *(char **)(a1 + 40);
        else
          v12 = "$";
LABEL_31:
        sub_1ACBC69D0((uint64_t)a2, v12, -1, 1u, 0);
      }
      else
      {
LABEL_32:
        sub_1ACBBE20C(97480);
      }
      return 0;
  }
}

uint64_t sub_1ACCA75E0(uint64_t a1, _QWORD *a2)
{
  *a2 = *(unsigned int *)(a1 + 8);
  return 0;
}

uint64_t sub_1ACCA75F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  result = sub_1ACC49638(a1 + 48);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1ACCA76B4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  v6 = (unsigned __int8 *)(v5 + 16 * a2);
  *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * a2) = a3;
  v7 = *v6;
  if (v7 == 7)
  {
    v14 = v5 + 16 * a2;
    v16 = *(_DWORD *)(v14 + 4);
    v15 = (_DWORD *)(v14 + 4);
    if (v16)
    {
      v17 = 1;
      do
      {
        result = sub_1ACCA76B4(v4, v17 + a2, a2);
        v19 = v17;
        if (v6[16 * v17] >= 7u)
          v18 = *(_DWORD *)&v6[16 * v17 + 4] + 1;
        else
          v18 = 1;
        v17 += v18;
      }
      while (v18 + v19 <= *v15);
    }
  }
  else if (v7 == 8)
  {
    v8 = v5 + 16 * a2;
    v10 = *(_DWORD *)(v8 + 4);
    v9 = (unsigned int *)(v8 + 4);
    if (v10)
    {
      v11 = 1;
      do
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 32) + 4 * (v11 + a2)) = a2;
        result = sub_1ACCA76B4(v4, v11 + a2 + 1, a2);
        v13 = &v6[16 * v11];
        if (v13[16] >= 7u)
          v12 = *((_DWORD *)v13 + 5) + 1;
        else
          v12 = 1;
        v11 += v12 + 1;
      }
      while (v11 <= *v9);
    }
  }
  return result;
}

uint64_t sub_1ACCA77CC(uint64_t result, _QWORD *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    v5 = result;
    v6 = *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * a3);
    sub_1ACCA77CC();
    v7 = *(_QWORD *)(v5 + 56);
    if (*(_BYTE *)(v7 + 16 * v6) == 7)
    {
      return sub_1ACC4B3FC(30, a2, "[%d]");
    }
    else
    {
      v10 = v7 + 16 * a3 + 16 * (((unint64_t)*(unsigned __int8 *)(v7 + 16 * a3 + 1) >> 5) & 1);
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(_DWORD *)(v10 - 12);
      if ((*(_BYTE *)(v10 - 15) & 1) == 0 && v12 >= 3 && (byte_1ACCB6548[*(unsigned __int8 *)(v11 + 1)] & 2) != 0)
      {
        v13 = (v12 - 1);
        v14 = 2;
        if (v12 >= 4)
        {
          while ((byte_1ACCB6548[*(unsigned __int8 *)(v11 + v14)] & 6) != 0)
          {
            if (v13 == ++v14)
            {
              LODWORD(v14) = v12 - 1;
              break;
            }
          }
        }
        if ((_DWORD)v14 == (_DWORD)v13)
          v12 -= 2;
      }
      return sub_1ACC4B3FC(v12 + 2, a2, ".%.*s");
    }
  }
  else
  {
    v8 = a2[3];
    if (v8 >= a2[2])
    {
      return sub_1ACC4B3BC((uint64_t)a2, 36);
    }
    else
    {
      v9 = a2[1];
      a2[3] = v8 + 1;
      *(_BYTE *)(v9 + v8) = 36;
    }
  }
  return result;
}

uint64_t sub_1ACCA7924(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 1) & 1) == 0 && v3 >= 3 && (byte_1ACCB6548[*(unsigned __int8 *)(v2 + 1)] & 2) != 0)
  {
    v4 = (v3 - 1);
    v5 = 2;
    if (v3 >= 4)
    {
      while ((byte_1ACCB6548[*(unsigned __int8 *)(v2 + v5)] & 6) != 0)
      {
        if (v4 == ++v5)
        {
          LODWORD(v5) = v3 - 1;
          break;
        }
      }
    }
    if ((_DWORD)v5 == (_DWORD)v4)
    {
      v3 -= 2;
      ++v2;
    }
  }
  return sub_1ACC4B3FC(v3 + 2, a1, ".%.*s", v3, (const char *)v2);
}

double sub_1ACCA79C8(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v4;

  if (!sqlite3_initialize())
  {
    v4 = sub_1ACB5D828(128);
    if (v4)
    {
      result = 0.0;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *a2 = v4;
      *(_BYTE *)(v4 + 25) = 1;
    }
  }
  return result;
}

double sub_1ACCA7A28(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  double result;
  uint64_t v9;

  if (!sqlite3_declare_vtab(a1, off_1E5C75490[a2 != 0]))
  {
    if (sqlite3_initialize())
    {
      *a5 = 0;
    }
    else
    {
      v9 = sub_1ACB5D828(40);
      *a5 = v9;
      if (v9)
      {
        result = 0.0;
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_QWORD *)(v9 + 24) = a1;
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 32) = 2 * (a2 != 0);
      }
    }
  }
  return result;
}

uint64_t sub_1ACCA7AB8(uint64_t a1, unsigned int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 32))
    v2 = 4;
  else
    v2 = 10;
  *((_QWORD *)a2 + 8) = 0x4059000000000000;
  *((_QWORD *)a2 + 9) = 100;
  a2[10] = 0;
  v3 = *a2;
  if ((int)v3 < 1)
    return 19;
  v4 = 0;
  v5 = *((_QWORD *)a2 + 1);
  v6 = 8 * v3;
  result = 19;
  do
  {
    if (*(_BYTE *)(v5 + 5))
    {
      v8 = *(unsigned __int8 *)(v5 + 4);
      if (v8 == 71)
      {
        if (*(_DWORD *)v5 == v2)
        {
          *(_BYTE *)(*((_QWORD *)a2 + 4) + v4 + 4) = 1;
          a2[10] = 1;
        }
      }
      else if (v8 == 2 && *(_DWORD *)v5 == (v2 | 1))
      {
        result = 0;
        v9 = *((_QWORD *)a2 + 4) + v4;
        *(_BYTE *)(v9 + 4) = 1;
        *(_DWORD *)v9 = 1;
      }
    }
    v5 += 12;
    v4 += 8;
  }
  while (v6 != v4);
  return result;
}

uint64_t sub_1ACCA7B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

double sub_1ACCA7C2C(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v5;

  if (!sqlite3_initialize())
  {
    v5 = sub_1ACB5D828(136);
    if (v5)
    {
      result = 0.0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_WORD *)(v5 + 92) = 1;
      *(_QWORD *)(v5 + 128) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v5 + 104) = 0;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t sub_1ACCA7CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  v1 = a1;
  sub_1ACCA8314(a1);
  if (v1)
  {
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACCA7D54(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int **a5)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  v8 = *(_QWORD *)a1;
  sub_1ACCA8314(a1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = a2 == 0;
  v10 = *a5;
  if (!*a5)
  {
    sub_1ACBBE20C(97202);
    v10 = *a5;
    if (!*a5)
    {
      sub_1ACBBE20C(97100);
      v13 = 0;
      goto LABEL_23;
    }
LABEL_8:
    if ((v10[5] & 0xFBF) == 0xA01 && *((_BYTE *)v10 + 23) == 112 && !strcmp(*(const char **)v10, "stmt-pointer"))
      v13 = *((_QWORD *)v10 + 1);
    else
      v13 = 0;
LABEL_23:
    v14 = 0;
    *(_QWORD *)(a1 + 8) = v13;
    if (!*(_QWORD *)(a1 + 8))
      goto LABEL_17;
LABEL_24:
    sub_1ACCA7EF8((uint64_t *)a1);
    return v14;
  }
  v11 = *((unsigned __int16 *)v10 + 10);
  if (((0x4000000040004uLL >> v11) & 1) == 0)
    goto LABEL_8;
  if ((~v11 & 0x202) == 0 && *((_BYTE *)v10 + 22) == 1)
  {
    v12 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (!v12)
      goto LABEL_16;
    goto LABEL_14;
  }
  if ((v11 & 1) == 0)
  {
    v12 = (unsigned __int8 *)sub_1ACBF2B64(*a5, 1);
    if (v12)
    {
LABEL_14:
      v14 = sub_1ACB5C66C(*(_QWORD *)(v8 + 24), v12, 0xFFFFFFFFLL, 128, 0, (_QWORD *)(a1 + 8), 0, v9);
      *(_DWORD *)(a1 + 24) = 1;
      if (!*(_QWORD *)(a1 + 8))
        goto LABEL_17;
      goto LABEL_24;
    }
  }
LABEL_16:
  v14 = 7;
  if (*(_QWORD *)(a1 + 8))
    goto LABEL_24;
LABEL_17:
  if (*(_DWORD *)(v8 + 32))
    v15 = "tables_used";
  else
    v15 = "bytecode";
  *(_QWORD *)(v8 + 16) = sqlite3_mprintf("argument to %s() is not a valid SQL statement", v15);
  return 1;
}

uint64_t sub_1ACCA7EF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;

  v2 = *a1;
  v3 = a1[5];
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_8;
      v4 = &xmmword_1ECD3B1D0;
    }
    (*v4)(v3);
LABEL_8:
    a1[5] = 0;
  }
  if (a1[8])
  {
    a1[6] = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  if (*((_DWORD *)a1 + 7))
    v5 = (uint64_t)(a1 + 9);
  else
    v5 = 0;
  if (sub_1ACBF32C4(a1[1], v5, *(unsigned int *)(v2 + 32), (int *)a1 + 4, (int *)a1 + 5, a1 + 4))
  {
    if ((*((_WORD *)a1 + 46) & 0x9000) != 0)
      sub_1ACBF2A54((int *)a1 + 18);
    else
      *((_WORD *)a1 + 46) = 1;
    a1[4] = 0;
  }
  return 0;
}

BOOL sub_1ACCA8020(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) == 0;
}

uint64_t sub_1ACCA8030(uint64_t *a1, sqlite3_context *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *i;
  uint64_t v25;

  v8 = a3;
  v11 = *a1;
  v12 = a1[4];
  v13 = *((int *)a1 + 5);
  if (*(_DWORD *)(*a1 + 32))
  {
    if ((_DWORD)a3 == 4)
    {
LABEL_3:
      if (*((_DWORD *)a1 + 4) != (_DWORD)v13 + 1)
      {
        v14 = *(_QWORD *)(v12 + 16);
        if (v14)
        {
          if (a2)
          {
            v15 = (char *)(v14 + 3);
LABEL_46:
            sub_1ACBC69D0((uint64_t)a2, v15, -1, 1u, 0);
          }
          else
          {
LABEL_47:
            sub_1ACBBE20C(97480);
          }
        }
        else
        {
          sqlite3_result_text(a2, "(FK)", 4, 0);
        }
      }
      return 0;
    }
    if ((int)a3 <= 2 && !a1[6])
    {
      v16 = *(_DWORD *)(v12 + 40 * (int)v13 + 8);
      v17 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 32) + 32 * *(int *)(v12 + 40 * (int)v13 + 12));
      v18 = v17[3];
      a1[7] = *v17;
      v19 = *(_QWORD **)(v18 + 16);
      if (v19)
      {
        while (1)
        {
          v20 = v19[2];
          if (*(_BYTE *)(v20 + 63) != 1 && *(_DWORD *)(v20 + 40) == v16)
            break;
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_15;
        }
        a1[8] = *(_QWORD *)v20;
        a1[6] = (uint64_t)"table";
      }
LABEL_15:
      if (!a1[8])
      {
        for (i = *(_QWORD **)(v18 + 40); i; i = (_QWORD *)*i)
        {
          v25 = i[2];
          if (*(_DWORD *)(v25 + 88) == v16)
          {
            a1[8] = *(_QWORD *)v25;
            a1[6] = (uint64_t)"index";
          }
        }
      }
    }
    v8 = a3 + 20;
  }
  v21 = (unsigned __int8 *)(v12 + 40 * (int)v13);
  switch(v8)
  {
    case 0:
      if (!a2)
        goto LABEL_52;
      goto LABEL_50;
    case 1:
      if (!a2)
        goto LABEL_47;
      v15 = off_1E5C73418[*v21];
      goto LABEL_46;
    case 2:
      if (!a2)
        goto LABEL_52;
      v13 = *(int *)(v12 + 40 * (int)v13 + 4);
      goto LABEL_50;
    case 3:
      if (!a2)
        goto LABEL_52;
      v13 = *(int *)(v12 + 40 * (int)v13 + 8);
      goto LABEL_50;
    case 4:
      if (!a2)
        goto LABEL_52;
      v13 = *(int *)(v12 + 40 * (int)v13 + 12);
      goto LABEL_50;
    case 5:
    case 7:
      v15 = (char *)a1[5];
      if (!v15)
      {
        v15 = (char *)sub_1ACBF359C(*(_QWORD *)(v11 + 24), (uint64_t)v21, a3, a4, a5, a6, a7, a8);
        a1[5] = (uint64_t)v15;
      }
      if (v8 != 5)
        return 0;
      if (!a2)
        goto LABEL_47;
      goto LABEL_46;
    case 6:
      if (!a2)
        goto LABEL_52;
      v13 = *(unsigned __int16 *)(v12 + 40 * (int)v13 + 2);
      goto LABEL_50;
    case 8:
      goto LABEL_3;
    case 9:
      if (!a2)
        goto LABEL_52;
      v13 = *(int *)(v12 + 40 * (int)v13 + 24);
      goto LABEL_50;
    case 10:
      if (!a2)
        goto LABEL_52;
      v13 = *(int *)(v12 + 40 * (int)v13 + 32);
      goto LABEL_50;
    case 20:
      if (!a2)
        goto LABEL_47;
      v15 = (char *)a1[6];
      goto LABEL_46;
    case 21:
      if (!a2)
        goto LABEL_47;
      v15 = (char *)a1[7];
      goto LABEL_46;
    case 22:
      if (!a2)
        goto LABEL_47;
      v15 = (char *)a1[8];
      goto LABEL_46;
    case 23:
      if (a2)
      {
        v13 = *v21 == 113;
LABEL_50:
        v22 = *(_QWORD *)a2;
        if ((*(_WORD *)(*(_QWORD *)a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v22, v13);
        }
        else
        {
          *(_QWORD *)v22 = v13;
          *(_WORD *)(v22 + 20) = 4;
        }
      }
      else
      {
LABEL_52:
        sub_1ACBBE20C(97413);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t sub_1ACCA8304(uint64_t a1, _QWORD *a2)
{
  *a2 = *(int *)(a1 + 16);
  return 0;
}

void sub_1ACCA8314(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_WORD *)(a1 + 92);
  if ((v4 & 0x9000) != 0 || *(_DWORD *)(a1 + 104))
  {
    sub_1ACBF2A04(a1 + 72);
    v4 = *(_WORD *)(a1 + 92);
  }
  if ((v4 & 0x9000) == 0)
  {
    *(_WORD *)(a1 + 92) = 1;
    if (!*(_DWORD *)(a1 + 24))
      goto LABEL_14;
    goto LABEL_13;
  }
  sub_1ACBF2A54((int *)(a1 + 72));
  if (*(_DWORD *)(a1 + 24))
LABEL_13:
    sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
LABEL_14:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_1ACCA8434()
{
  char *v0;
  const char *v1;
  _BOOL4 v2;
  int v3;
  char *v4;
  _BOOL4 v5;

  v0 = getenv("SQLITE_AUTO_PROFILE");
  if (v0)
  {
    v1 = v0;
    v2 = 1;
    if (!strncasecmp("1", v0, 1uLL))
    {
      if (isatty(2))
        v3 = 1;
      else
        v3 = 2;
    }
    else if (!strncasecmp("stderr", v1, 6uLL))
    {
      v2 = 1;
      v3 = 1;
    }
    else
    {
      v2 = strncasecmp("syslog", v1, 6uLL) == 0;
      v3 = 2 * v2;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = getenv("SQLITE_AUTO_TRACE");
  if (v4)
  {
    if (!strncasecmp("1", v4, 1uLL))
    {
      if (isatty(2))
        LODWORD(v4) = 1;
      else
        LODWORD(v4) = 2;
LABEL_20:
      if (!dyld_process_is_restricted())
        goto LABEL_24;
LABEL_23:
      if ((os_variant_allows_internal_security_policies() & 1) == 0)
      {
        sqlite3_log(28, "Auto logging environment variable set, but process is restricted. Ignoring.");
        return;
      }
LABEL_24:
      dword_1EECAD2B4 = v3;
      dword_1EECAD2B8 = (int)v4;
      return;
    }
    if (!strncasecmp("stderr", v4, 6uLL))
    {
      LODWORD(v4) = 1;
      if (!dyld_process_is_restricted())
        goto LABEL_24;
      goto LABEL_23;
    }
    v5 = strncasecmp("syslog", v4, 6uLL) == 0;
    LODWORD(v4) = 2 * v5;
  }
  else
  {
    v5 = 0;
  }
  if (v2 || v5)
    goto LABEL_20;
}

void sub_1ACCA85CC(uint64_t a1, char *a2, unint64_t a3)
{
  NSObject *v5;
  char *v6;
  int v7;
  char *v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD3EA78 != -1)
    dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
  v5 = qword_1ECD3EA48;
  if (os_log_type_enabled((os_log_t)qword_1ECD3EA48, OS_LOG_TYPE_DEFAULT))
  {
    v6 = &byte_1ACCBEAEE;
    if (a2)
      v6 = a2;
    v7 = 136315394;
    v8 = v6;
    v9 = 2048;
    v10 = a3 / 0xF4240;
    _os_log_impl(&dword_1ACB54000, v5, OS_LOG_TYPE_DEFAULT, "Query: %s\n Execution Time: %llu ms\n", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1ACCA86D0(uint64_t a1, char *a2)
{
  NSObject *v4;
  char *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD3EA78 != -1)
    dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
  v4 = qword_1ECD3EA48;
  if (os_log_type_enabled((os_log_t)qword_1ECD3EA48, OS_LOG_TYPE_DEFAULT))
  {
    v5 = &byte_1ACCBEAEE;
    if (a2)
      v5 = a2;
    v6 = 134218242;
    v7 = a1;
    v8 = 2080;
    v9 = v5;
    _os_log_impl(&dword_1ACB54000, v4, OS_LOG_TYPE_DEFAULT, "TraceSQL(%p): %s\n", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t sub_1ACCA87BC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t result;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(v1 + 48);
      v5 = *(_QWORD *)(v4 + 8 * i);
      if (v5)
      {
        if ((*(_WORD *)(v5 + 20) & 0x9000) != 0 || *(_DWORD *)(v5 + 32))
          sub_1ACBF2A04(*(_QWORD *)(v4 + 8 * i));
        sub_1ACBE0F9C(*(_QWORD **)(v5 + 24), (_QWORD *)v5);
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
  }
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v6)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    return (*v6)(v1);
  }
  return result;
}

uint64_t sub_1ACCA88CC(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (sqlite3_initialize())
  {
    v8 = 0;
  }
  else
  {
    v10 = sub_1ACB5D828(32);
    v8 = v10;
    if (v10)
    {
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_QWORD *)(v10 + 24) = a2;
      result = sqlite3_declare_vtab(a1, "CREATE TABLE x(value INTEGER PRIMARY KEY)");
      goto LABEL_6;
    }
  }
  result = 7;
LABEL_6:
  *a5 = v8;
  return result;
}

uint64_t sub_1ACCA893C()
{
  return 0;
}

uint64_t sub_1ACCA8944(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACCA89F0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  if (sqlite3_initialize())
    return 7;
  v4 = sub_1ACB5D828(16);
  if (!v4)
    return 7;
  v5 = (_QWORD *)v4;
  result = 0;
  *v5 = 0;
  v5[1] = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_1ACCA8A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACCA8AE4(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  return 0;
}

uint64_t sub_1ACCA8AF0(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 8);
  return 0;
}

BOOL sub_1ACCA8B04(_DWORD *a1)
{
  return a1[2] >= **(_DWORD **)(*(_QWORD *)a1 + 24);
}

uint64_t sub_1ACCA8B20(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if ((int)v2 < *(_DWORD *)v3)
    {
      if (a2)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v2);
        v5 = *a2;
        if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v5, v4);
        }
        else
        {
          *(_QWORD *)v5 = v4;
          *(_WORD *)(v5 + 20) = 4;
        }
      }
      else
      {
        sub_1ACBBE20C(97423);
      }
    }
  }
  return 0;
}

uint64_t sub_1ACCA8B98(uint64_t a1, _QWORD *a2)
{
  *a2 = *(int *)(a1 + 8);
  return 0;
}

uint64_t sub_1ACCA8BA8(uint64_t a1, int a2, sqlite3_value **a3)
{
  *a3 = sqlite3_column_value(*(sqlite3_stmt **)a1, *(_DWORD *)(a1 + 12) + a2 + *(_DWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_1ACCA8BE4(uint64_t a1, int a2, sqlite3_value **a3)
{
  *a3 = sqlite3_column_value(*(sqlite3_stmt **)a1, *(_DWORD *)(a1 + 8) + a2);
  return 0;
}

uint64_t sub_1ACCA8C1C(uint64_t a1)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;

  LODWORD(v2) = *(_DWORD *)(a1 + 12);
  if (!(_DWORD)v2)
  {
    v2 = *(unsigned __int16 **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 24);
      if (v4)
      {
        xmmword_1ECD3B1C0(v4);
        v5 = *(_QWORD *)(*(_QWORD *)v2 + 24);
        LODWORD(v2) = v2[130];
        if (v5)
          xmmword_1ECD3B1D0(v5);
      }
      else
      {
        LODWORD(v2) = v2[130];
      }
    }
  }
  return ((_DWORD)v2 - *(_DWORD *)(a1 + 8));
}

uint64_t sub_1ACCA8C90()
{
  return 0;
}

double sub_1ACCA8C98(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  int v40;
  const void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  char v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (**v63)(_QWORD, uint64_t, sqlite3_value **);
  uint64_t v64;
  int v65;
  uint64_t v66;
  void (**v67)(_QWORD, uint64_t, sqlite3_value **);
  uint64_t v68;
  __int128 v69;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  sqlite3_value *v77;
  sqlite3_value *v78;

  *(_QWORD *)&v4 = 0;
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  if (*(_DWORD *)(a3 + 36) || sub_1ACBD7988(a3, a4))
    return *(double *)&v4;
  v9 = *(_DWORD *)(a4 + 16) - *(_DWORD *)(a4 + 24);
  v10 = a3 + 96;
  if (v9 != (*(unsigned int (**)(_QWORD))(a3 + 120))(*(_QWORD *)(a3 + 96)))
  {
    v11 = 17;
    goto LABEL_7;
  }
  if (sub_1ACCA9730(a3, 0, a4))
  {
    v11 = 7;
LABEL_7:
    *(_DWORD *)(a3 + 36) = v11;
    return *(double *)&v4;
  }
  if (*(_DWORD *)(a4 + 20))
  {
    v4 = *(_OWORD *)v10;
    v12 = *(_OWORD *)(a3 + 112);
    v74 = *(_OWORD *)v10;
    v75 = v12;
    *(_QWORD *)&v76 = *(_QWORD *)(a3 + 128);
    *((_QWORD *)&v76 + 1) = a3;
    *(_QWORD *)(a3 + 96) = &v74;
    *(_QWORD *)(a3 + 104) = sub_1ACCA99D8;
    *(_QWORD *)(a3 + 112) = sub_1ACCA9944;
    *(_QWORD *)(a3 + 120) = sub_1ACCA9A68;
    *(_QWORD *)(a3 + 128) = sub_1ACCA9A74;
    if (!*(_QWORD *)(a3 + 72))
    {
      v13 = sub_1ACBCDA10(0);
      if (!v13)
        goto LABEL_203;
      v14 = v13;
      sub_1ACB57870(v13, &byte_1ACCBEAEE, 0, 0, 0);
      *(_QWORD *)(a3 + 72) = v14;
    }
  }
  v72 = (_QWORD *)(a3 + 96);
  if (*(_DWORD *)(a4 + 24))
  {
    v15 = HIDWORD(a2) ^ a2 ^ (8 * a2);
LABEL_15:
    v71 = v15 % *(_DWORD *)(a4 + 52);
    v16 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v71);
    if (v16)
    {
      v17 = 104;
      if (a1 == 18)
        v17 = 112;
      v73 = v17;
      while (1)
      {
        v18 = *(unsigned __int8 **)(v16 + 16);
        if (!*(_DWORD *)(a4 + 24))
          break;
        if (*v18 == 1 && bswap64(*(_QWORD *)(v18 + 1)) == a2)
          goto LABEL_116;
LABEL_19:
        v16 = *(_QWORD *)(v16 + 24);
        if (!v16)
          goto LABEL_183;
      }
      v19 = *(_DWORD *)(a4 + 16);
      if (v19 >= 1)
      {
        v20 = 0;
        while (1)
        {
          if (!*(_BYTE *)(*(_QWORD *)(a4 + 40) + v20))
          {
            v24 = *v18;
            v21 = 1;
            if (*v18)
              v25 = v24 == 5;
            else
              v25 = 1;
            if (!v25 && v24 != 255)
            {
              if ((v24 - 1) < 2)
              {
                v21 = 9;
              }
              else
              {
                v26 = v18[1];
                if ((v26 & 0x80) != 0)
                {
                  v36 = v18[2];
                  if ((char)v18[2] < 0)
                  {
                    v44 = (char)v18[3];
                    if (v44 < 0)
                    {
                      v78 = 0;
                      v45 = sub_1ACB8A6CC((char *)v18 + 1, (unint64_t *)&v78);
                      if ((unint64_t)v78 >> 32)
                        v26 = -1;
                      else
                        v26 = (int)v78;
                      v27 = (v45 + 1);
                    }
                    else
                    {
                      v26 = v44 & 0x7F | (v26 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
                      v27 = 4;
                    }
                  }
                  else
                  {
                    v26 = ((v26 & 0x7F) << 7) | v36;
                    v27 = 3;
                  }
                }
                else
                {
                  v27 = 2;
                }
                v21 = v27 + v26;
              }
            }
            v18 += v21;
            goto LABEL_28;
          }
          v77 = 0;
          v22 = v18 + 1;
          v23 = *v18;
          (*(void (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + v73))(*(_QWORD *)(a3 + 96), v20, &v77);
          if (v77)
          {
            if (byte_1ACCB6445[*((_WORD *)v77 + 10) & 0x3F] != v23)
              goto LABEL_19;
          }
          else
          {
            sub_1ACBBE20C(97202);
            if (v23)
              goto LABEL_19;
          }
          if ((v23 - 1) > 1)
          {
            v31 = *v22;
            if ((v31 & 0x80) != 0)
            {
              v34 = v18[2];
              if ((char)v18[2] < 0)
              {
                v35 = (char)v18[3];
                if (v35 < 0)
                {
                  v78 = 0;
                  v37 = sub_1ACB8A6CC((char *)v18 + 1, (unint64_t *)&v78);
                  if ((unint64_t)v78 >> 32)
                    v31 = -1;
                  else
                    v31 = (int)v78;
                  v32 = v37;
                }
                else
                {
                  v31 = v35 & 0x7F | (v31 << 14) & 0x1FC07F | ((v34 & 0x7F) << 7);
                  v32 = 3;
                }
              }
              else
              {
                v31 = ((v31 & 0x7F) << 7) | v34;
                v32 = 2;
              }
            }
            else
            {
              v32 = 1;
            }
            if (!v77)
            {
              sub_1ACBBE20C(91120);
              goto LABEL_87;
            }
            v38 = *((_WORD *)v77 + 10);
            if ((v38 & 2) != 0 && *((_BYTE *)v77 + 22) == 1)
            {
              v39 = *((_DWORD *)v77 + 4);
              goto LABEL_88;
            }
            if ((v38 & 0x10) != 0)
            {
              v39 = *((_DWORD *)v77 + 4);
              if ((*((_WORD *)v77 + 10) & 0x400) != 0)
                v39 += *(_DWORD *)v77;
            }
            else
            {
              if ((v38 & 1) == 0)
              {
                v39 = sub_1ACBF2B3C((uint64_t)v77, 1);
                goto LABEL_88;
              }
LABEL_87:
              v39 = 0;
            }
LABEL_88:
            if (v39 != v31)
              goto LABEL_19;
            if (v23 == 3)
            {
              if (!v77)
                goto LABEL_100;
              v40 = *((unsigned __int16 *)v77 + 10);
              if ((~v40 & 0x202) == 0 && *((_BYTE *)v77 + 22) == 1)
              {
                v41 = (const void *)*((_QWORD *)v77 + 1);
                goto LABEL_101;
              }
              if ((v40 & 1) != 0)
              {
LABEL_100:
                v41 = 0;
              }
              else
              {
                v42 = sub_1ACBF2B64((int *)v77, 1);
LABEL_95:
                v41 = (const void *)v42;
              }
LABEL_101:
              v43 = &v22[v32];
              if (v31 >= 1 && memcmp(v43, v41, v31))
                goto LABEL_19;
              v18 = &v43[v31];
              goto LABEL_104;
            }
            v42 = (uint64_t)sqlite3_value_blob(v77);
            goto LABEL_95;
          }
          v28 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v18 + 1)));
          v18 += 9;
          if (v23 != 1)
          {
            if (v77)
            {
              v33 = *((_WORD *)v77 + 10);
              if ((v33 & 8) != 0)
              {
                *(_QWORD *)&v4 = *(_QWORD *)v77;
              }
              else if ((v33 & 0x24) != 0)
              {
                *(double *)&v4 = (double)*(uint64_t *)v77;
              }
              else if ((v33 & 0x12) != 0)
              {
                *(double *)&v4 = sub_1ACBF2F88((uint64_t)v77);
              }
              else
              {
                *(_QWORD *)&v4 = 0;
              }
            }
            else
            {
              sub_1ACBBE20C(89734);
              *(_QWORD *)&v4 = 0;
            }
            if (*(double *)&v4 != v28)
              goto LABEL_19;
            goto LABEL_104;
          }
          if (!v77)
            break;
          v29 = *((_WORD *)v77 + 10);
          if ((v29 & 0x24) != 0)
          {
            v30 = *(_QWORD *)v77;
            goto LABEL_57;
          }
          if ((v29 & 8) != 0)
          {
            *(_QWORD *)&v4 = *(_QWORD *)v77;
            if (*(double *)v77 >= -9.22337204e18)
            {
              if (*(double *)&v4 <= 9.22337204e18)
                v30 = (uint64_t)*(double *)&v4;
              else
                v30 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v30 = 0x8000000000000000;
            }
          }
          else
          {
            if ((v29 & 0x12) == 0 || !*((_QWORD *)v77 + 1))
              goto LABEL_56;
            v30 = sub_1ACBF2FC0((uint64_t)v77);
          }
LABEL_57:
          if (v30 != *(_QWORD *)&v28)
            goto LABEL_19;
LABEL_104:
          v19 = *(_DWORD *)(a4 + 16);
LABEL_28:
          if (++v20 >= v19)
            goto LABEL_116;
        }
        sub_1ACBBE20C(89699);
LABEL_56:
        v30 = 0;
        goto LABEL_57;
      }
LABEL_116:
      if (*(_BYTE *)(v16 + 1))
      {
        v10 = a3 + 96;
        if (!(*(unsigned int (**)(_QWORD))(a3 + 128))(*(_QWORD *)(a3 + 96)) && !*(_DWORD *)(a3 + 24))
          *(_BYTE *)(v16 + 1) = 0;
      }
      else
      {
        v10 = a3 + 96;
      }
LABEL_209:
      if (*(_DWORD *)(a3 + 16))
        v11 = sub_1ACCA9D84(a1, a3, a4, v16);
      else
        v11 = 0;
      goto LABEL_216;
    }
LABEL_183:
    ++*(_DWORD *)(a4 + 48);
    v60 = 32;
    v78 = (sqlite3_value *)32;
    LODWORD(v61) = *(_DWORD *)(a4 + 24);
    v10 = a3 + 96;
    if (*(_DWORD *)(a4 + 16) > (int)v61)
    {
      v62 = 0;
      while (1)
      {
        v77 = 0;
        v63 = (void (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + 104);
        if (a1 != 18
          || (v63 = (void (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + 112),
              *(_BYTE *)(*(_QWORD *)(a4 + 40) + v62)))
        {
          (*v63)(*v72, v62, &v77);
        }
        v11 = sub_1ACCA9A80(0, v77, &v78);
        if (v11)
          goto LABEL_216;
        ++v62;
        v61 = *(int *)(a4 + 24);
        if (v62 >= *(int *)(a4 + 16) - v61)
        {
          v60 = (uint64_t)v78;
          break;
        }
      }
    }
    if ((_DWORD)v61)
    {
      v60 += 9;
      v78 = (sqlite3_value *)v60;
    }
    v64 = sub_1ACBD8D50(a3, v60);
    if (v64)
    {
      v16 = v64;
      *(_QWORD *)&v4 = 0;
      *(_OWORD *)v64 = 0u;
      *(_OWORD *)(v64 + 16) = 0u;
      *(_QWORD *)(v64 + 16) = v64 + 32;
      v78 = 0;
      v65 = *(_DWORD *)(a4 + 24);
      if (v65)
      {
        *(_BYTE *)(v64 + 32) = 1;
        *(_BYTE *)(v64 + 33) = HIBYTE(a2);
        *(_BYTE *)(v64 + 34) = BYTE6(a2);
        *(_BYTE *)(v64 + 35) = BYTE5(a2);
        *(_BYTE *)(v64 + 36) = BYTE4(a2);
        *(_BYTE *)(v64 + 37) = BYTE3(a2);
        *(_BYTE *)(v64 + 38) = BYTE2(a2);
        *(_BYTE *)(v64 + 39) = BYTE1(a2);
        *(_BYTE *)(v64 + 40) = a2;
        v78 = (sqlite3_value *)9;
        v65 = *(_DWORD *)(a4 + 24);
      }
      if (*(_DWORD *)(a4 + 16) > v65)
      {
        v66 = 0;
        do
        {
          v77 = 0;
          v67 = (void (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + 104);
          if (a1 != 18
            || (v67 = (void (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + 112),
                *(_BYTE *)(*(_QWORD *)(a4 + 40) + v66)))
          {
            (*v67)(*v72, v66, &v77);
          }
          sub_1ACCA9A80((uint64_t)v78 + *(_QWORD *)(v16 + 16), v77, &v78);
          ++v66;
        }
        while (v66 < *(int *)(a4 + 16) - (uint64_t)*(int *)(a4 + 24));
      }
      if (*(_DWORD *)(a3 + 24) || (*(unsigned int (**)(_QWORD))(a3 + 128))(*(_QWORD *)(a3 + 96)))
        *(_BYTE *)(v16 + 1) = 1;
      *(_DWORD *)(v16 + 8) = (_DWORD)v78;
      *(_BYTE *)v16 = a1;
      v68 = *(_QWORD *)(a4 + 56);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v68 + 8 * v71);
      *(_QWORD *)(v68 + 8 * v71) = v16;
      goto LABEL_209;
    }
LABEL_203:
    v11 = 7;
    goto LABEL_216;
  }
  v46 = *(_DWORD *)(a4 + 16);
  if (v46 < 1)
  {
    v15 = 0;
    goto LABEL_15;
  }
  v47 = 0;
  v48 = 0;
  v15 = 0;
  if (a1 == 18)
    v49 = 112;
  else
    v49 = 104;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v48))
    {
      v78 = 0;
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, sqlite3_value **))(a3 + v49))(*(_QWORD *)(a3 + 96), v48, &v78);
      if (v11)
        goto LABEL_215;
      if (v78)
      {
        v50 = *((unsigned __int16 *)v78 + 10);
        v51 = v50 & 0x3F;
        v52 = byte_1ACCB6445[v50 & 0x3F];
        v15 ^= (8 * v15) ^ v52;
        if ((v52 - 1) <= 1)
        {
          if (((0x50505050uLL >> v51) & 1) != 0)
          {
            if ((v50 & 0x24) != 0)
            {
              v54 = *(_QWORD *)v78;
            }
            else if ((v50 & 8) != 0)
            {
              *(_QWORD *)&v4 = *(_QWORD *)v78;
              v56 = (uint64_t)*(double *)v78;
              if (*(double *)v78 > 9.22337204e18)
                v56 = 0x7FFFFFFFFFFFFFFFLL;
              if (*(double *)&v4 >= -9.22337204e18)
                v54 = v56;
              else
                v54 = 0x8000000000000000;
            }
            else if ((v50 & 0x12) != 0 && *((_QWORD *)v78 + 1))
            {
              v54 = sub_1ACBF2FC0((uint64_t)v78);
            }
            else
            {
              v54 = 0;
            }
          }
          else
          {
            if ((v50 & 8) != 0)
            {
              *(_QWORD *)&v4 = *(_QWORD *)v78;
            }
            else if ((v50 & 0x24) != 0)
            {
              *(double *)&v4 = (double)*(uint64_t *)v78;
            }
            else if ((v50 & 0x12) != 0)
            {
              *(double *)&v4 = sub_1ACBF2F88((uint64_t)v78);
            }
            else
            {
              *(_QWORD *)&v4 = 0;
            }
            v54 = v4;
          }
          v15 ^= HIDWORD(v54) ^ (8 * (v54 ^ (8 * v15) ^ v15)) ^ v54 ^ (8 * v15);
          goto LABEL_126;
        }
        if ((v52 - 3) <= 1)
        {
          if (((0x4000000040004uLL >> v51) & 1) != 0)
          {
            if ((~v50 & 0x202) == 0 && *((_BYTE *)v78 + 22) == 1)
            {
              v55 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
              goto LABEL_162;
            }
            if ((v50 & 1) != 0)
            {
              v55 = 0;
LABEL_162:
              if (v78)
              {
                v57 = *((_WORD *)v78 + 10);
                if ((v57 & 2) != 0 && *((_BYTE *)v78 + 22) == 1)
                {
                  LODWORD(v58) = *((_DWORD *)v78 + 4);
                  goto LABEL_171;
                }
                if ((v57 & 0x10) != 0)
                {
                  LODWORD(v58) = *((_DWORD *)v78 + 4);
                  if ((*((_WORD *)v78 + 10) & 0x400) != 0)
                    LODWORD(v58) = *(_DWORD *)v78 + v58;
LABEL_171:
                  if (v55)
                  {
                    if ((int)v58 >= 1)
                    {
                      v58 = v58;
                      do
                      {
                        v59 = *v55++;
                        v15 ^= v59 ^ (8 * v15);
                        --v58;
                      }
                      while (v58);
                    }
                  }
                  else
                  {
                    v11 = 7;
                    if (((0xFFFEFFFFFFFEFFFELL >> v51) & 1) != 0 || (int)v58 > 0)
                      goto LABEL_215;
                  }
                  goto LABEL_126;
                }
                if ((v57 & 1) == 0)
                {
                  LODWORD(v58) = sub_1ACBF2B3C((uint64_t)v78, 1);
                  goto LABEL_171;
                }
              }
              else
              {
                sub_1ACBBE20C(91120);
              }
              LODWORD(v58) = 0;
              goto LABEL_171;
            }
            v53 = sub_1ACBF2B64((int *)v78, 1);
          }
          else
          {
            v53 = (uint64_t)sqlite3_value_blob(v78);
          }
          v55 = (unsigned __int8 *)v53;
          goto LABEL_162;
        }
      }
      else
      {
        sub_1ACBBE20C(97202);
        v15 ^= 8 * v15;
      }
      v47 = 1;
LABEL_126:
      v46 = *(_DWORD *)(a4 + 16);
    }
    ++v48;
  }
  while (v48 < v46);
  if (!v47)
    goto LABEL_15;
  v11 = 0;
LABEL_215:
  v10 = a3 + 96;
LABEL_216:
  if (*(_DWORD *)(a4 + 20))
  {
    *(_QWORD *)&v4 = v74;
    v69 = v75;
    *(_OWORD *)v10 = v74;
    *(_OWORD *)(v10 + 16) = v69;
    *(_QWORD *)(v10 + 32) = v76;
  }
  if (v11)
    goto LABEL_7;
  return *(double *)&v4;
}

BOOL sub_1ACCA9730(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t);

  v6 = *(int *)(a3 + 52);
  if ((_DWORD)v6)
  {
    v7 = (int)v6 >= 0 ? *(_DWORD *)(a3 + 52) : v6 + 1;
    if (*(_DWORD *)(a3 + 48) < v7 >> 1)
      return 0;
  }
  if ((_DWORD)v6)
    v9 = 2 * v6;
  else
    v9 = 256;
  if (sqlite3_initialize())
  {
    if (!a1)
      return *(_DWORD *)(a3 + 52) == 0;
    v10 = 0;
  }
  else
  {
    v12 = sub_1ACB5D828(8 * v9);
    v10 = (char *)v12;
    if (!a1)
      goto LABEL_18;
    if (v12)
    {
      v11 = (int)off_1ECD3B178(v12);
      goto LABEL_17;
    }
  }
  v11 = 0;
LABEL_17:
  *(_QWORD *)(a1 + 56) += v11;
LABEL_18:
  if (!v10)
    return *(_DWORD *)(a3 + 52) == 0;
  bzero(v10, 8 * v9);
  v13 = *(_DWORD *)(a3 + 52);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
      if (v15)
      {
        do
        {
          if (a2)
            v16 = *(_BYTE *)v15 == 9;
          else
            v16 = 0;
          v17 = v16;
          v18 = sub_1ACCAA1E0(a3, v17, *(unsigned __int8 **)(v15 + 16), v9);
          v19 = *(_QWORD *)(v15 + 24);
          v20 = 8 * v18;
          *(_QWORD *)(v15 + 24) = *(_QWORD *)&v10[v20];
          *(_QWORD *)&v10[v20] = v15;
          v15 = v19;
        }
        while (v19);
        v13 = *(_DWORD *)(a3 + 52);
      }
    }
  }
  v21 = *(_QWORD *)(a3 + 56);
  if (a1)
  {
    if (v21)
      v22 = (int)off_1ECD3B178(*(_QWORD *)(a3 + 56));
    else
      v22 = 0;
    *(_QWORD *)(a1 + 56) -= v22;
  }
  if (!v21)
    goto LABEL_44;
  v23 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v21);
    v21 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_44;
    v23 = &xmmword_1ECD3B1D0;
  }
  (*v23)(v21);
LABEL_44:
  result = 0;
  *(_DWORD *)(a3 + 52) = v9;
  *(_QWORD *)(a3 + 56) = v10;
  return result;
}

uint64_t sub_1ACCA9944(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = a2;
  v10 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(a1 + 16))(*(_QWORD *)a1, a2, &v10);
  v7 = v6;
  v8 = v10;
  if (v4 == 1 && !(_DWORD)v6)
  {
    if (v10)
    {
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v10 + 20)) & 1) != 0)
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
    }
    else
    {
      sub_1ACBBE20C(97202);
      v8 = v10;
    }
  }
  *a3 = v8;
  return v7;
}

uint64_t sub_1ACCA99D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = a2;
  v10 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(a1 + 8))(*(_QWORD *)a1, a2, &v10);
  v7 = v6;
  v8 = v10;
  if (v4 == 1 && !(_DWORD)v6)
  {
    if (v10)
    {
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v10 + 20)) & 1) != 0)
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
    }
    else
    {
      sub_1ACBBE20C(97202);
      v8 = v10;
    }
  }
  *a3 = v8;
  return v7;
}

uint64_t sub_1ACCA9A68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 24))(*(_QWORD *)a1);
}

uint64_t sub_1ACCA9A74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)a1);
}

uint64_t sub_1ACCA9A80(uint64_t a1, sqlite3_value *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  __int16 v8;
  double v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  int v14;
  const void *v15;
  __int16 v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  double v21;

  if (!a2)
  {
    if (a1)
      *(_BYTE *)a1 = 0;
LABEL_13:
    v10 = 1;
    result = 0;
    if (!a3)
      return result;
    goto LABEL_64;
  }
  v6 = *((_WORD *)a2 + 10) & 0x3F;
  v7 = byte_1ACCB6445[v6];
  if (a1)
    *(_BYTE *)a1 = v7;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      goto LABEL_13;
    if (((0x4000000040004uLL >> v6) & 1) != 0)
    {
      v14 = *((unsigned __int16 *)a2 + 10);
      if ((~v14 & 0x202) == 0 && *((_BYTE *)a2 + 22) == 1)
      {
        v15 = (const void *)*((_QWORD *)a2 + 1);
        v16 = *((_WORD *)a2 + 10);
        if ((v16 & 2) == 0)
          goto LABEL_40;
        goto LABEL_37;
      }
      if ((v14 & 1) != 0)
      {
        v15 = 0;
        v16 = *((_WORD *)a2 + 10);
        if ((v16 & 2) == 0)
          goto LABEL_40;
        goto LABEL_37;
      }
      v12 = sub_1ACBF2B64((int *)a2, 1);
    }
    else
    {
      v12 = (uint64_t)sqlite3_value_blob(a2);
    }
    v15 = (const void *)v12;
    v16 = *((_WORD *)a2 + 10);
    if ((v16 & 2) == 0)
      goto LABEL_40;
LABEL_37:
    if (*((_BYTE *)a2 + 22) == 1)
    {
      v17 = *((_DWORD *)a2 + 4);
      if (v15)
        goto LABEL_51;
      goto LABEL_47;
    }
LABEL_40:
    if ((v16 & 0x10) != 0)
    {
      v17 = *((_DWORD *)a2 + 4);
      if ((v16 & 0x400) != 0)
        v17 += *(_DWORD *)a2;
      if (v15)
        goto LABEL_51;
    }
    else if ((v16 & 1) != 0)
    {
      v17 = 0;
      if (v15)
        goto LABEL_51;
    }
    else
    {
      v17 = sub_1ACBF2B3C((uint64_t)a2, 1);
      if (v15)
        goto LABEL_51;
    }
LABEL_47:
    result = 7;
    if (((0xFFFEFFFFFFFEFFFELL >> v6) & 1) != 0 || v17 > 0)
      return result;
LABEL_51:
    if (v17 >= 0x80)
    {
      v18 = 1;
      v19 = v17;
      do
      {
        v20 = v19 >> 14;
        v19 >>= 7;
        ++v18;
      }
      while (v20);
      if (!a1)
        goto LABEL_63;
      if (v17 >> 14)
      {
        sub_1ACBF8034((int8x8_t *)(a1 + 1), v17);
        if (v17 < 1)
          goto LABEL_63;
      }
      else
      {
        *(_BYTE *)(a1 + 1) = (v17 >> 7) | 0x80;
        *(_BYTE *)(a1 + 2) = v17 & 0x7F;
      }
    }
    else
    {
      if (!a1)
      {
        v18 = 1;
        goto LABEL_63;
      }
      *(_BYTE *)(a1 + 1) = v17;
      v18 = 1;
      if (v17 < 1)
      {
LABEL_63:
        v10 = v17 + v18 + 1;
        result = 0;
        if (!a3)
          return result;
        goto LABEL_64;
      }
    }
    memcpy((void *)(a1 + v18 + 1), v15, v17);
    goto LABEL_63;
  }
  if (a1)
  {
    v8 = *((_WORD *)a2 + 10);
    if (((0x50505050uLL >> v6) & 1) != 0)
    {
      if ((v8 & 0x24) != 0)
      {
        v13 = *(_QWORD *)a2;
      }
      else if ((v8 & 8) != 0)
      {
        v21 = *(double *)a2;
        if (*(double *)a2 >= -9.22337204e18)
        {
          if (v21 <= 9.22337204e18)
            v13 = (uint64_t)v21;
          else
            v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v13 = 0x8000000000000000;
        }
      }
      else if ((v8 & 0x12) != 0 && *((_QWORD *)a2 + 1))
      {
        v13 = sub_1ACBF2FC0((uint64_t)a2);
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      if ((v8 & 8) != 0)
      {
        v9 = *(double *)a2;
      }
      else if ((v8 & 0x24) != 0)
      {
        v9 = (double)*(uint64_t *)a2;
      }
      else if ((v8 & 0x12) != 0)
      {
        v9 = sub_1ACBF2F88((uint64_t)a2);
      }
      else
      {
        v9 = 0.0;
      }
      v13 = *(_QWORD *)&v9;
    }
    *(_QWORD *)(a1 + 1) = bswap64(v13);
  }
  v10 = 9;
  result = 0;
  if (a3)
LABEL_64:
    *a3 += v10;
  return result;
}

uint64_t sub_1ACCA9D84(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_value *v14;
  unsigned __int8 *v15;
  int v16;
  __int16 v17;
  double v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  double v24;
  int v25;
  int v26;
  double v27;
  unsigned __int8 *v28;
  __int16 v29;
  int v30;
  const void *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int v35;
  sqlite3_value *v36;
  uint64_t v37;
  sqlite3_value *v38;

  v37 = 2;
  if (*(_BYTE *)a4 == 18)
  {
    if (*(_DWORD *)(a3 + 24))
      v37 = 11;
    if (a1 != 9 && *(int *)(a3 + 16) >= 1)
    {
      v7 = 0;
      do
      {
        v38 = 0;
        (*(void (**)(_QWORD, uint64_t, sqlite3_value **))(a2 + 112))(*(_QWORD *)(a2 + 96), v7, &v38);
        sub_1ACCA9A80(0, v38, &v37);
        v7 = (v7 + 1);
      }
      while ((int)v7 < *(_DWORD *)(a3 + 16));
    }
    goto LABEL_87;
  }
  if (a1 == 9)
  {
    v8 = *(int *)(a4 + 8);
    v37 = v8 + 2;
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 368);
    if (v9 && (*(_DWORD *)(v9 + 92) & 0x80000000) == 0)
    {
      v10 = v8 + 2 + v8;
      goto LABEL_86;
    }
    goto LABEL_87;
  }
  v11 = *(unsigned __int8 **)(a4 + 16);
  v12 = *(int *)(a3 + 24);
  if ((_DWORD)v12)
  {
    v37 = 12;
    v11 += 9;
  }
  if ((int)v12 >= *(_DWORD *)(a3 + 16))
    goto LABEL_87;
  while (1)
  {
    v36 = 0;
    (*(void (**)(_QWORD, _QWORD, sqlite3_value **))(a2 + 112))(*(_QWORD *)(a2 + 96), (v12 - *(_DWORD *)(a3 + 24)), &v36);
    v14 = v36;
    if (!v36)
      return 7;
    v15 = v11 + 1;
    v16 = *v11;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v20 = 0;
        v21 = (0x5555555555555555uLL >> *((_WORD *)v36 + 10)) & 1;
        ++v11;
        goto LABEL_74;
      }
      v22 = *v15;
      if ((v22 & 0x80) != 0)
      {
        v25 = v11[2];
        if ((char)v11[2] < 0)
        {
          v26 = (char)v11[3];
          if (v26 < 0)
          {
            v38 = 0;
            v23 = sub_1ACB8A6CC((char *)v11 + 1, (unint64_t *)&v38);
            if ((unint64_t)v38 >> 32)
              v22 = -1;
            else
              v22 = (int)v38;
          }
          else
          {
            v22 = v26 & 0x7F | (v22 << 14) & 0x1FC07F | ((v25 & 0x7F) << 7);
            v23 = 3;
          }
        }
        else
        {
          v22 = ((v22 & 0x7F) << 7) | v25;
          v23 = 2;
        }
      }
      else
      {
        v23 = 1;
      }
      v28 = &v15[v23];
      v29 = *((_WORD *)v14 + 10);
      if (byte_1ACCB6445[v29 & 0x3F] != v16)
        goto LABEL_72;
      if ((v29 & 2) != 0 && *((_BYTE *)v14 + 22) == 1)
      {
        if (v22 != *((_DWORD *)v14 + 4))
          goto LABEL_72;
      }
      else if ((v29 & 0x10) != 0)
      {
        v30 = *((_DWORD *)v14 + 4);
        if ((*((_WORD *)v14 + 10) & 0x400) != 0)
          v30 += *(_DWORD *)v14;
        if (v22 != v30)
          goto LABEL_72;
      }
      else if ((v29 & 1) != 0)
      {
        if (v22)
          goto LABEL_72;
      }
      else if (v22 != sub_1ACBF2B3C((uint64_t)v14, 1))
      {
        goto LABEL_72;
      }
      if (!v22 || (v31 = sqlite3_value_blob(v36), !memcmp(v28, v31, v22)))
      {
        LODWORD(v21) = 0;
LABEL_73:
        v20 = v23 + v22;
        v11 = &v28[v22];
        goto LABEL_74;
      }
LABEL_72:
      LODWORD(v21) = 1;
      goto LABEL_73;
    }
    v17 = *((_WORD *)v36 + 10);
    if (byte_1ACCB6445[v17 & 0x3F] == v16)
    {
      v18 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v11 + 1)));
      if (v16 == 1)
      {
        if ((v17 & 0x24) != 0)
        {
          v19 = *(_QWORD *)&v18 == *(_QWORD *)v36;
        }
        else if ((v17 & 8) != 0)
        {
          v27 = *(double *)v36;
          if (*(double *)v36 >= -9.22337204e18)
          {
            v32 = v27 <= 9.22337204e18 ? (uint64_t)v27 : 0x7FFFFFFFFFFFFFFFLL;
            v19 = *(_QWORD *)&v18 == v32;
          }
          else
          {
            v19 = *(_QWORD *)&v18 == 0x8000000000000000;
          }
        }
        else
        {
          v19 = (v17 & 0x12) != 0 && *((_QWORD *)v36 + 1)
              ? *(_QWORD *)&v18 == sub_1ACBF2FC0((uint64_t)v36)
              : *(_QWORD *)&v18 == 0;
        }
      }
      else
      {
        if ((v17 & 8) != 0)
        {
          v24 = *(double *)v36;
        }
        else if ((v17 & 0x24) != 0)
        {
          v24 = (double)*(uint64_t *)v36;
        }
        else
        {
          v24 = (v17 & 0x12) != 0 ? sub_1ACBF2F88((uint64_t)v36) : 0.0;
        }
        v19 = v24 == v18;
      }
      LODWORD(v21) = !v19;
    }
    else
    {
      LODWORD(v21) = 1;
    }
    v11 += 9;
    v20 = 8;
LABEL_74:
    if (!(_DWORD)v21)
    {
      if (*(_BYTE *)(*(_QWORD *)(a3 + 40) + v12))
        v13 = v37 + v20 + 2;
      else
        v13 = v37 + 2;
      v37 = v13;
      goto LABEL_19;
    }
    if (*(_BYTE *)(*(_QWORD *)(a3 + 40) + v12))
      break;
    v37 += v20 + 1;
    sub_1ACCA9A80(0, v36, &v37);
LABEL_19:
    if (++v12 >= *(int *)(a3 + 16))
      goto LABEL_87;
  }
  v10 = *(int *)(a4 + 8) + 2;
LABEL_86:
  v37 = v10;
LABEL_87:
  v34 = *(int *)(a4 + 4);
  result = 0;
  if (v37 > v34)
  {
    v35 = v37 - v34;
    *(_DWORD *)(a4 + 4) = v37;
    *(_QWORD *)(a2 + 64) += v35;
  }
  return result;
}

uint64_t sub_1ACCAA1E0(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  char v26;
  unint64_t v28;

  v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    while (1)
    {
      v12 = *a3;
      if (a2 && !*(_BYTE *)(v10 + v8))
        goto LABEL_5;
      if (!*(_BYTE *)(v10 + v8))
      {
        v11 = 1;
        if (*a3)
          v15 = v12 == 5;
        else
          v15 = 1;
        if (!v15 && v12 != 255)
        {
          if ((v12 - 1) < 2)
          {
            v11 = 9;
          }
          else
          {
            v16 = a3[1];
            if ((v16 & 0x80) != 0)
            {
              v21 = a3[2];
              if ((char)a3[2] < 0)
              {
                v25 = (char)a3[3];
                if (v25 < 0)
                {
                  v28 = 0;
                  v26 = sub_1ACB8A6CC((char *)a3 + 1, &v28);
                  if (HIDWORD(v28))
                    v16 = -1;
                  else
                    v16 = v28;
                  v17 = (v26 + 1);
                }
                else
                {
                  v16 = v25 & 0x7F | (v16 << 14) & 0x1FC07F | ((v21 & 0x7F) << 7);
                  v17 = 4;
                }
              }
              else
              {
                v16 = ((v16 & 0x7F) << 7) | v21;
                v17 = 3;
              }
            }
            else
            {
              v17 = 2;
            }
            v11 = v17 + v16;
          }
        }
        a3 += v11;
        goto LABEL_5;
      }
      v13 = a3[1];
      v9 ^= v12 ^ (8 * v9);
      if ((v12 - 1) > 1)
        break;
      v14 = bswap32(*(_DWORD *)(a3 + 5)) ^ (8 * v9) ^ v9;
      v9 = _byteswap_ulong(*(_DWORD *)(a3 + 1)) ^ (8 * v14) ^ v14;
      a3 += 9;
LABEL_5:
      if (++v8 == v5)
        return v9 % a4;
    }
    if ((v13 & 0x80) != 0)
    {
      v19 = a3[2];
      if ((char)a3[2] < 0)
      {
        v20 = (char)a3[3];
        if (v20 < 0)
        {
          v28 = 0;
          v22 = sub_1ACB8A6CC((char *)a3 + 1, &v28);
          v13 = v28;
          v18 = v22;
          if (HIDWORD(v28))
          {
            v13 = -1;
LABEL_31:
            a3 += v18 + v13 + 1;
            goto LABEL_5;
          }
        }
        else
        {
          v13 = v20 & 0x7F | (v13 << 14) & 0x1FC07F | ((v19 & 0x7F) << 7);
          v18 = 3;
        }
      }
      else
      {
        v13 = ((v13 & 0x7F) << 7) | v19;
        v18 = 2;
      }
    }
    else
    {
      v18 = 1;
    }
    if (v13 >= 1)
    {
      v23 = v13;
      v24 = a3 + 1;
      do
      {
        v9 ^= v24[v18] ^ (8 * v9);
        ++v24;
        --v23;
      }
      while (v23);
    }
    goto LABEL_31;
  }
  v9 = 0;
  return v9 % a4;
}

uint64_t sub_1ACCAA428(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1)
    return *(unsigned __int16 *)(v1 + 38);
  else
    return 0;
}

uint64_t sub_1ACCAA440(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)v1 + 368);
  else
    return 0;
}

uint64_t sub_1ACCAA45C(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;

  if (a2)
    v7 = 80;
  else
    v7 = 84;
  if (!*a4)
  {
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 12);
    v10 = v8;
    if (v8 >= v9)
    {
      if (!v9)
        v9 = 128;
      v12 = v9;
      do
      {
        v13 = v12;
        v12 *= 2;
      }
      while (v12 <= v8);
      if (v13 >= 1073741696 && (v12 = 2147483391, v8 >= 2147483391)
        || (v14 = *(_QWORD *)a1, sqlite3_initialize())
        || (v11 = sub_1ACB6BB48(v14, v12)) == 0)
      {
        *a4 = 7;
        goto LABEL_16;
      }
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
      if (*a4)
        goto LABEL_16;
      v8 = *(_DWORD *)(a1 + 8);
      v10 = v8;
    }
    else
    {
      v11 = *(_QWORD *)a1;
    }
    *(_DWORD *)(a1 + 8) = v8 + 1;
    *(_BYTE *)(v11 + v10) = v7;
  }
LABEL_16:
  sub_1ACCAB778(a1, *(_DWORD *)(a3 + 16), a4);
  sub_1ACCAB89C(a1, *(void **)(a3 + 40), *(unsigned int *)(a3 + 16), a4);
  v15 = *(char **)(a3 + 8);
  v16 = strlen(v15) + 1;
  return sub_1ACCAB89C(a1, v15, v16, a4);
}

uint64_t sub_1ACCAA588(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  const char *v16;
  const char *v17;
  unsigned __int8 *i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t (**v29)(unsigned __int8 *);
  uint64_t (**v30)(uint64_t);
  uint64_t v31;
  uint64_t (**v32)(uint64_t);
  uint64_t v33;
  uint64_t (**v34)(uint64_t);
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  unsigned int v40;

  v40 = 0;
  v39[0] = 0;
  v39[1] = 0;
  v38[0] = 0;
  v38[1] = 0;
  if (a5)
    v16 = "_rowid_, *";
  else
    v16 = "*";
  v37[0] = 0;
  v37[1] = 0;
  sub_1ACCAB998((uint64_t)v39, ", 1", &v40);
  if (a4)
  {
    v17 = "sqlite_stat1";
    for (i = a4; ; ++i)
    {
      v19 = *(unsigned __int8 *)v17;
      v20 = *i;
      if ((_DWORD)v19 == (_DWORD)v20)
      {
        if (!*v17)
        {
          sub_1ACCAB998((uint64_t)v39, " AND (?6 OR ?3 IS stat)", &v40);
          sub_1ACCAB998((uint64_t)v38, "tbl, idx", &v40);
          sub_1ACCAB998((uint64_t)v37, "?1, (CASE WHEN ?2=X'' THEN NULL ELSE ?2 END)", &v40);
          v16 = "tbl, ?2, stat";
          goto LABEL_17;
        }
      }
      else if (byte_1ACCB6333[v19] != byte_1ACCB6333[v20])
      {
        break;
      }
      ++v17;
    }
  }
  if (a6 >= 1)
  {
    v36 = a1;
    v21 = 0;
    v22 = &byte_1ACCBEAEE;
    do
    {
      while (!*(_BYTE *)(a8 + v21))
      {
        sub_1ACCABBF0((char *)v39, &v40, " AND (?%d OR ?%d IS %w.%w)", (v21 + 1 + a6), v21 + 1, a4, *(_QWORD *)(a7 + 8 * v21));
        if (++v21 == a6)
          goto LABEL_16;
      }
      sub_1ACCAB998((uint64_t)v38, v22, &v40);
      sub_1ACCAB998((uint64_t)v37, v22, &v40);
      sub_1ACCABAAC((uint64_t)v38, *(char **)(a7 + 8 * v21++), &v40);
      sub_1ACCABBF0((char *)v37, &v40, "?%d", v21);
      v22 = ", ";
    }
    while (v21 != a6);
LABEL_16:
    a1 = v36;
  }
LABEL_17:
  v23 = v40;
  v24 = v39[0];
  if (!v40)
  {
    v25 = &byte_1ACCBEAEE;
    if (a2)
      v25 = (char *)v39[0];
    v26 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s%s FROM %Q.%Q WHERE (%s) IS (%s)", v16, v25, a3, a4, v38[0], v37[0]);
    if (!v26)
    {
      v23 = 7;
      if (!v24)
        goto LABEL_34;
      goto LABEL_28;
    }
    v28 = v26;
    v23 = sub_1ACB5C66C(a1, v26, 0xFFFFFFFFLL, 128, 0, a9, 0, v27);
    v29 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_26;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v28);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v28);
    v28 = (unsigned __int8 *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v29 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_26:
      (*v29)(v28);
    }
  }
  if (!v24)
    goto LABEL_34;
LABEL_28:
  v30 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_33:
    (*v30)(v24);
    goto LABEL_34;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v24);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v24);
  v24 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v30 = &xmmword_1ECD3B1D0;
    goto LABEL_33;
  }
LABEL_34:
  v31 = v38[0];
  if (!v38[0])
    goto LABEL_41;
  v32 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_40;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v31);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v31);
  v31 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v32 = &xmmword_1ECD3B1D0;
LABEL_40:
    (*v32)(v31);
  }
LABEL_41:
  v33 = v37[0];
  if (v37[0])
  {
    v34 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_47:
      (*v34)(v33);
      return v23;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v33);
    v33 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v34 = &xmmword_1ECD3B1D0;
      goto LABEL_47;
    }
  }
  return v23;
}

uint64_t sub_1ACCAAA04(sqlite3_stmt *a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  unint64_t v27[13];

  if (a2 < 1)
    return 0;
  v27[11] = v4;
  v27[12] = v5;
  v8 = 0;
  v9 = *(char **)(a4 + 16);
  v10 = a2;
  v11 = v9;
  do
  {
    v12 = *v11++;
    result = 0;
    switch(v12)
    {
      case 0:
      case 5:
        break;
      case 1:
        if (!*(_BYTE *)(a3 + v8))
          goto LABEL_12;
        result = sqlite3_bind_int64(a1, v8 + 1, bswap64(*(_QWORD *)(v9 + 1)));
        v11 = v9 + 9;
        break;
      case 2:
        if (*(_BYTE *)(a3 + v8))
        {
          result = sqlite3_bind_double(a1, v8 + 1, COERCE_DOUBLE(bswap64(*(_QWORD *)(v9 + 1))));
          v11 = v9 + 9;
        }
        else
        {
LABEL_12:
          result = 0;
          v11 = v9 + 9;
        }
        break;
      case 3:
        v14 = *v11;
        if ((v14 & 0x80) != 0)
        {
          v18 = v9[2];
          if (v9[2] < 0)
          {
            v20 = v9[3];
            if (v20 < 0)
            {
              v27[0] = 0;
              v22 = sub_1ACB8A6CC(v11, v27);
              if (HIDWORD(v27[0]))
                v14 = -1;
              else
                v14 = v27[0];
              v15 = v22;
            }
            else
            {
              v14 = v20 & 0x7F | (v14 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
              v15 = 3;
            }
          }
          else
          {
            v14 = ((v14 & 0x7F) << 7) | v18;
            v15 = 2;
          }
        }
        else
        {
          v15 = 1;
        }
        v23 = &v11[v15];
        v24 = v14;
        if (*(_BYTE *)(a3 + v8))
        {
          result = sub_1ACBA0CE0((uint64_t *)a1, (int)v8 + 1, v23, v14, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL, 1u);
          v11 = &v23[v24];
        }
        else
        {
          result = 0;
          v11 = &v23[v14];
        }
        break;
      default:
        v16 = *v11;
        if ((v16 & 0x80) != 0)
        {
          v19 = v9[2];
          if (v9[2] < 0)
          {
            v21 = v9[3];
            if (v21 < 0)
            {
              v27[0] = 0;
              v25 = sub_1ACB8A6CC(v11, v27);
              if (HIDWORD(v27[0]))
                v16 = -1;
              else
                v16 = v27[0];
              v17 = v25;
            }
            else
            {
              v16 = v21 & 0x7F | (v16 << 14) & 0x1FC07F | ((v19 & 0x7F) << 7);
              v17 = 3;
            }
          }
          else
          {
            v16 = ((v16 & 0x7F) << 7) | v19;
            v17 = 2;
          }
        }
        else
        {
          v17 = 1;
        }
        v26 = &v11[v17];
        if (*(_BYTE *)(a3 + v8))
        {
          if (v16 < 0)
            result = sub_1ACBBE20C(98722);
          else
            result = sub_1ACBA0CE0((uint64_t *)a1, (int)v8 + 1, v26, v16, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL, 0);
        }
        else
        {
          result = 0;
        }
        v11 = &v26[v16];
        break;
    }
    if (++v8 >= v10)
      break;
    v9 = v11;
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t sub_1ACCAAC70(uint64_t result, sqlite3_stmt *a2, int iCol, _DWORD *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void *v16;
  void *v17;
  size_t v18;
  _BOOL4 v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if (*a4)
    return result;
  v7 = result;
  result = sqlite3_column_type(a2, iCol);
  v8 = result;
  if (!*a4)
  {
    v9 = *(_DWORD *)(v7 + 8);
    v10 = *(_DWORD *)(v7 + 12);
    v11 = v9;
    if (v9 < v10)
    {
      result = *(_QWORD *)v7;
LABEL_5:
      *(_DWORD *)(v7 + 8) = v9 + 1;
      *(_BYTE *)(result + v11) = v8;
      goto LABEL_14;
    }
    if (!v10)
      v10 = 128;
    v12 = v10;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v12 <= v9);
    if (v13 >= 1073741696 && (v12 = 2147483391, v9 >= 2147483391)
      || (v14 = *(_QWORD *)v7, result = sqlite3_initialize(), (_DWORD)result)
      || (result = sub_1ACB6BB48(v14, v12)) == 0)
    {
      *a4 = 7;
    }
    else
    {
      *(_QWORD *)v7 = result;
      *(_DWORD *)(v7 + 12) = v12;
      if (!*a4)
      {
        v9 = *(_DWORD *)(v7 + 8);
        v11 = v9;
        goto LABEL_5;
      }
    }
  }
LABEL_14:
  if ((v8 - 1) > 1)
  {
    if ((v8 - 3) <= 1)
    {
      if (v8 == 4)
        v16 = (void *)sqlite3_column_blob(a2, iCol);
      else
        v16 = (void *)sqlite3_column_text(a2, iCol);
      v17 = v16;
      result = sqlite3_column_bytes(a2, iCol);
      v18 = result;
      v20 = v8 == 4 && (_DWORD)result == 0;
      if (v17 || v20)
      {
        sub_1ACCAB778(v7, result, a4);
        return sub_1ACCAB89C(v7, v17, v18, a4);
      }
      else
      {
        *a4 = 7;
      }
    }
  }
  else
  {
    if (v8 == 1)
      v15 = COERCE_DOUBLE(sqlite3_column_int64(a2, iCol));
    else
      v15 = sqlite3_column_double(a2, iCol);
    v21[0] = bswap64(*(unint64_t *)&v15);
    return sub_1ACCAB89C(v7, v21, 8uLL, a4);
  }
  return result;
}

uint64_t sub_1ACCAAE9C(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  double v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void (**v56)(void *);
  int v58;
  void *__src;
  size_t __n;
  unsigned int v62;
  unint64_t v63;

  __src = 0;
  v62 = 0;
  __n = 0;
  v9 = *(unsigned __int8 **)(a4 + 16);
  v11 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  v12 = v11;
  v58 = v11;
  if (v11 >= v10)
  {
    if (!v10)
      v10 = 128;
    v20 = v10;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v20 <= v11);
    if (v21 > 1073741695)
    {
      if (v11 > 2147483390)
        goto LABEL_24;
      v20 = 2147483391;
    }
    v22 = *(_QWORD *)a1;
    if (sqlite3_initialize())
      goto LABEL_24;
    v13 = sub_1ACB6BB48(v22, v20);
    if (!v13)
      goto LABEL_24;
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a1 + 12) = v20;
    v14 = *(_DWORD *)(a1 + 8);
    v12 = v14;
  }
  else
  {
    v13 = *(_QWORD *)a1;
    v14 = v11;
  }
  *(_DWORD *)(a1 + 8) = v14 + 1;
  *(_BYTE *)(v13 + v12) = 23;
  v15 = *(_BYTE *)(a4 + 1);
  v16 = *(_DWORD *)(a1 + 8);
  v17 = *(_DWORD *)(a1 + 12);
  v18 = v16;
  if (v16 >= v17)
  {
    if (!v17)
      v17 = 128;
    v23 = v17;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v23 <= v16);
    if (v24 > 1073741695)
    {
      if (v16 > 2147483390)
        goto LABEL_24;
      v23 = 2147483391;
    }
    v25 = *(_QWORD *)a1;
    if (!sqlite3_initialize())
    {
      v19 = sub_1ACB6BB48(v25, v23);
      if (v19)
      {
        *(_QWORD *)a1 = v19;
        *(_DWORD *)(a1 + 12) = v23;
        v16 = *(_DWORD *)(a1 + 8);
        v18 = v16;
        goto LABEL_5;
      }
    }
LABEL_24:
    v62 = 7;
    goto LABEL_25;
  }
  v19 = *(_QWORD *)a1;
LABEL_5:
  *(_DWORD *)(a1 + 8) = v16 + 1;
  *(_BYTE *)(v19 + v18) = v15;
LABEL_25:
  v26 = 0;
  v27 = 1;
  while (1)
  {
    if (!a3)
    {
      v30 = 0;
      goto LABEL_35;
    }
    v28 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    if (!v28)
      break;
    xmmword_1ECD3B1C0(v28);
    v29 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    v30 = a3[130];
    if (v29)
    {
      xmmword_1ECD3B1D0(v29);
      if (v26 >= v30)
        goto LABEL_105;
      goto LABEL_36;
    }
LABEL_35:
    if (v26 >= v30)
      goto LABEL_105;
LABEL_36:
    v31 = *v9;
    if ((v31 - 1) < 2)
    {
      if (sqlite3_column_type((sqlite3_stmt *)a3, v26) != v31)
      {
        v33 = 9;
LABEL_88:
        v27 = 0;
        if (!a2)
LABEL_26:
          sub_1ACCAB89C(a1, v9, v33, &v62);
LABEL_27:
        sub_1ACCAAC70((uint64_t)&__src, (sqlite3_stmt *)a3, v26, &v62);
        goto LABEL_28;
      }
      v32 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v9 + 1)));
      if (v31 == 1)
      {
        v33 = 9;
        if (*(_QWORD *)&v32 != sqlite3_column_int64((sqlite3_stmt *)a3, v26))
          goto LABEL_88;
      }
      else
      {
        v33 = 9;
        if (sqlite3_column_double((sqlite3_stmt *)a3, v26) != v32)
          goto LABEL_88;
      }
LABEL_90:
      v35 = 1;
      if (!a2)
        goto LABEL_56;
      goto LABEL_44;
    }
    if (v31 == 5)
    {
      v34 = sqlite3_column_type((sqlite3_stmt *)a3, v26);
      v33 = 1;
      v35 = v34 == 5;
      if (v34 == 5)
      {
        if (!a2)
          goto LABEL_56;
      }
      else
      {
        v27 = 0;
        if (!a2)
          goto LABEL_56;
      }
      goto LABEL_44;
    }
    v36 = v9[1];
    if ((v36 & 0x80) != 0)
    {
      v41 = v9[2];
      if ((char)v9[2] < 0)
      {
        v42 = (char)v9[3];
        if (v42 < 0)
        {
          v63 = 0;
          v37 = sub_1ACB8A6CC((char *)v9 + 1, &v63);
          if (HIDWORD(v63))
            v36 = -1;
          else
            v36 = v63;
        }
        else
        {
          v36 = v42 & 0x7F | (v36 << 14) & 0x1FC07F | ((v41 & 0x7F) << 7);
          v37 = 3;
        }
      }
      else
      {
        v36 = ((v36 & 0x7F) << 7) | v41;
        v37 = 2;
      }
    }
    else
    {
      v37 = 1;
    }
    v50 = v37 + 1;
    v33 = (v37 + 1 + v36);
    if (sqlite3_column_type((sqlite3_stmt *)a3, v26) != v31 || v36 != sqlite3_column_bytes((sqlite3_stmt *)a3, v26))
      goto LABEL_88;
    if (v36)
    {
      v51 = sqlite3_column_blob((sqlite3_stmt *)a3, v26);
      if (memcmp(&v9[v50], v51, v36))
        goto LABEL_88;
      goto LABEL_90;
    }
    v35 = 1;
    if (!a2)
    {
LABEL_56:
      if (!v35)
        goto LABEL_26;
      if (*(_BYTE *)(a5 + v26))
      {
        sub_1ACCAB89C(a1, v9, v33, &v62);
        if (v62)
          goto LABEL_28;
        goto LABEL_59;
      }
      if (v62)
        goto LABEL_28;
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      v45 = v43;
      if (v43 < v44)
      {
        v46 = *(_QWORD *)a1;
        goto LABEL_69;
      }
      if (!v44)
        v44 = 128;
      v52 = v44;
      do
      {
        v53 = v52;
        v52 *= 2;
      }
      while (v52 <= v43);
      if (v53 > 1073741695)
      {
        if (v43 <= 2147483390)
        {
          v52 = 2147483391;
          goto LABEL_101;
        }
LABEL_102:
        v62 = 7;
        goto LABEL_28;
      }
LABEL_101:
      v54 = *(_QWORD *)a1;
      if (sqlite3_initialize())
        goto LABEL_102;
      v46 = sub_1ACB6BB48(v54, v52);
      if (!v46)
        goto LABEL_102;
      *(_QWORD *)a1 = v46;
      *(_DWORD *)(a1 + 12) = v52;
      v43 = *(_DWORD *)(a1 + 8);
      v45 = v43;
LABEL_69:
      *(_DWORD *)(a1 + 8) = v43 + 1;
      *(_BYTE *)(v46 + v45) = 0;
      if (v62)
        goto LABEL_28;
LABEL_59:
      v38 = HIDWORD(__n);
      v39 = (int)__n;
      if ((int)__n < SHIDWORD(__n))
      {
        v40 = __src;
LABEL_61:
        LODWORD(__n) = v39 + 1;
        v40[v39] = 0;
        goto LABEL_28;
      }
      if (!HIDWORD(__n))
        v38 = 128;
      v47 = v38;
      do
      {
        v48 = v47;
        v47 *= 2;
      }
      while (v47 <= (int)__n);
      if (v48 > 1073741695)
      {
        if ((int)__n > 2147483390)
          goto LABEL_102;
        v47 = 2147483391;
      }
      v49 = __src;
      if (!sqlite3_initialize())
      {
        v40 = (_BYTE *)sub_1ACB6BB48((uint64_t)v49, v47);
        if (v40)
        {
          __src = v40;
          HIDWORD(__n) = v47;
          goto LABEL_61;
        }
      }
      goto LABEL_102;
    }
LABEL_44:
    if (!v35 || *(_BYTE *)(a5 + v26))
      goto LABEL_27;
    if (!v62)
      goto LABEL_59;
LABEL_28:
    v9 += (int)v33;
    ++v26;
  }
  if (v26 < a3[130])
    goto LABEL_36;
LABEL_105:
  if (v27)
  {
    *(_DWORD *)(a1 + 8) = v58;
    v55 = __src;
    if (!__src)
      return v62;
LABEL_109:
    v56 = (void (**)(void *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v55);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v55);
      v55 = (void *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v56 = (void (**)(void *))&xmmword_1ECD3B1D0;
        goto LABEL_114;
      }
    }
    else
    {
LABEL_114:
      (*v56)(v55);
    }
  }
  else
  {
    v55 = __src;
    sub_1ACCAB89C(a1, __src, __n, &v62);
    if (v55)
      goto LABEL_109;
  }
  return v62;
}

uint64_t sub_1ACCAB4D0(uint64_t a1, int a2, uint64_t a3, int a4, _BYTE *a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v37;
  unint64_t v38;

  v37 = 0;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  v12 = v10;
  if (v10 >= v11)
  {
    if (!v11)
      v11 = 128;
    v19 = v11;
    do
    {
      v20 = v19;
      v19 *= 2;
    }
    while (v19 <= v10);
    if (v20 > 1073741695)
    {
      if (v10 > 2147483390)
        goto LABEL_25;
      v19 = 2147483391;
    }
    v21 = *(_QWORD *)a1;
    if (sqlite3_initialize())
      goto LABEL_25;
    v13 = sub_1ACB6BB48(v21, v19);
    if (!v13)
      goto LABEL_25;
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a1 + 12) = v19;
    v10 = *(_DWORD *)(a1 + 8);
    v12 = v10;
  }
  else
  {
    v13 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v10 + 1;
  *(_BYTE *)(v13 + v12) = 9;
  v14 = *(_BYTE *)(a3 + 1);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 12);
  v17 = v15;
  if (v15 < v16)
  {
    v18 = *(_QWORD *)a1;
    goto LABEL_5;
  }
  if (!v16)
    v16 = 128;
  v22 = v16;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v22 <= v15);
  if (v23 > 1073741695)
  {
    if (v15 > 2147483390)
      goto LABEL_25;
    v22 = 2147483391;
  }
  v24 = *(_QWORD *)a1;
  if (sqlite3_initialize() || (v18 = sub_1ACB6BB48(v24, v22)) == 0)
  {
LABEL_25:
    v37 = 7;
    if (!a2)
      goto LABEL_6;
    goto LABEL_26;
  }
  *(_QWORD *)a1 = v18;
  *(_DWORD *)(a1 + 12) = v22;
  v15 = *(_DWORD *)(a1 + 8);
  v17 = v15;
LABEL_5:
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_BYTE *)(v18 + v17) = v14;
  if (a2)
  {
LABEL_26:
    if (a4 < 1)
      return v37;
    v25 = *(char **)(a3 + 16);
    v26 = a4;
    v27 = v25;
    while (1)
    {
      v29 = *v27++;
      v28 = v29;
      if ((v29 - 1) < 2)
      {
        v27 = v25 + 9;
      }
      else
      {
        if (v28)
          v30 = v28 == 5;
        else
          v30 = 1;
        if (!v30)
        {
          v31 = *v27;
          if ((v31 & 0x80) != 0)
          {
            v33 = v25[2];
            if (v25[2] < 0)
            {
              v34 = v25[3];
              if (v34 < 0)
              {
                v38 = 0;
                v35 = sub_1ACB8A6CC(v27, &v38);
                if (HIDWORD(v38))
                  v31 = -1;
                else
                  v31 = v38;
                v32 = v35;
              }
              else
              {
                v31 = v34 & 0x7F | (v31 << 14) & 0x1FC07F | ((v33 & 0x7F) << 7);
                v32 = 3;
              }
            }
            else
            {
              v31 = ((v31 & 0x7F) << 7) | v33;
              v32 = 2;
            }
          }
          else
          {
            v32 = 1;
          }
          v27 += v32 + v31;
          if (!*a5)
            goto LABEL_28;
LABEL_38:
          sub_1ACCAB89C(a1, v25, ((_DWORD)v27 - (_DWORD)v25), &v37);
          goto LABEL_28;
        }
      }
      if (*a5)
        goto LABEL_38;
LABEL_28:
      ++a5;
      v25 = v27;
      if (!--v26)
        return v37;
    }
  }
LABEL_6:
  sub_1ACCAB89C(a1, *(void **)(a3 + 16), *(unsigned int *)(a3 + 8), &v37);
  return v37;
}

uint64_t sub_1ACCAB778(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (*a3)
    return result;
  v4 = result;
  v5 = *(int *)(result + 8);
  v6 = *(int *)(result + 12);
  if (v5 + 9 > v6)
  {
    if ((_DWORD)v6)
      v8 = *(int *)(result + 12);
    else
      v8 = 128;
    do
    {
      v9 = v8;
      v8 *= 2;
    }
    while (v8 < v5 + 9);
    if (v9 >= 1073741696)
    {
      if ((int)v5 >= 2147483383)
        goto LABEL_11;
      v8 = 2147483391;
    }
    v10 = *(_QWORD *)result;
    result = sqlite3_initialize();
    if (!(_DWORD)result)
    {
      result = sub_1ACB6BB48(v10, v8);
      if (result)
      {
        *(_QWORD *)v4 = result;
        *(_DWORD *)(v4 + 12) = v8;
        if (*a3)
          return result;
        v5 = *(int *)(v4 + 8);
        goto LABEL_13;
      }
    }
LABEL_11:
    *a3 = 7;
    return result;
  }
  result = *(_QWORD *)result;
LABEL_13:
  result += v5;
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      result = sub_1ACBF8034((int8x8_t *)result, (int)a2);
      v11 = result;
    }
    else
    {
      *(_BYTE *)result = (a2 >> 7) | 0x80;
      *(_BYTE *)(result + 1) = a2 & 0x7F;
      v11 = 2;
    }
  }
  else
  {
    *(_BYTE *)result = a2;
    v11 = 1;
  }
  *(_DWORD *)(v4 + 8) += v11;
  return result;
}

uint64_t sub_1ACCAB89C(uint64_t result, void *__src, size_t __n, _DWORD *a4)
{
  int v5;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((int)__n >= 1 && !*a4)
  {
    v5 = __n;
    v7 = result;
    v8 = __n;
    v9 = *(int *)(result + 8);
    v10 = *(int *)(result + 12);
    v11 = v9 + __n;
    if (v11 <= v10)
    {
      result = *(_QWORD *)result;
LABEL_13:
      result = (uint64_t)memcpy((void *)(result + v9), __src, v8);
      *(_DWORD *)(v7 + 8) += v5;
      return result;
    }
    if ((_DWORD)v10)
      v12 = *(int *)(result + 12);
    else
      v12 = 128;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v12 < v11);
    if (v13 >= 1073741696 && (v12 = 2147483391, v11 > 2147483391)
      || (v14 = *(_QWORD *)result, result = sqlite3_initialize(), (_DWORD)result)
      || (result = sub_1ACB6BB48(v14, v12)) == 0)
    {
      *a4 = 7;
      return result;
    }
    *(_QWORD *)v7 = result;
    *(_DWORD *)(v7 + 12) = v12;
    if (!*a4)
    {
      v9 = *(int *)(v7 + 8);
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_1ACCAB998(uint64_t result, char *__s, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = result;
  if (__s)
  {
    result = strlen(__s);
    v6 = result & 0x3FFFFFFF;
    if (*a3)
      return result;
  }
  else
  {
    v6 = 0;
    if (*a3)
      return result;
  }
  v7 = *(int *)(v5 + 8);
  v8 = *(int *)(v5 + 12);
  v9 = v7 + v6 + 1;
  if (v9 <= v8)
  {
    result = *(_QWORD *)v5;
LABEL_15:
    result = (uint64_t)memcpy((void *)(result + v7), __s, v6);
    v13 = *(int *)(v5 + 8) + (unint64_t)v6;
    *(_DWORD *)(v5 + 8) = v13;
    *(_BYTE *)(*(_QWORD *)v5 + v13) = 0;
    return result;
  }
  if ((_DWORD)v8)
    v10 = *(int *)(v5 + 12);
  else
    v10 = 128;
  do
  {
    v11 = v10;
    v10 *= 2;
  }
  while (v10 < v9);
  if (v11 >= 1073741696 && (v10 = 2147483391, v9 > 2147483391)
    || (v12 = *(_QWORD *)v5, result = sqlite3_initialize(), (_DWORD)result)
    || (result = sub_1ACB6BB48(v12, v10)) == 0)
  {
    *a3 = 7;
    return result;
  }
  *(_QWORD *)v5 = result;
  *(_DWORD *)(v5 + 12) = v10;
  if (!*a3)
  {
    v7 = *(int *)(v5 + 8);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1ACCABAAC(uint64_t result, char *__s, _DWORD *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = __s;
  v5 = result;
  if (__s)
  {
    result = strlen(__s);
    v6 = 2 * (result & 0x3FFFFFFF) + 4;
    if (*a3)
      return result;
  }
  else
  {
    v6 = 4;
    if (*a3)
      return result;
  }
  v7 = *(int *)(v5 + 8);
  v8 = *(int *)(v5 + 12);
  v9 = v6 + v7;
  if (v9 <= v8)
  {
    result = *(_QWORD *)v5;
LABEL_15:
    v13 = (_BYTE *)(result + v7);
    *(_BYTE *)(result + v7) = 34;
    while (1)
    {
      v14 = *v4;
      if (v14 == 34)
      {
        v13[1] = 34;
        v13 += 2;
        LOBYTE(v14) = *v4;
      }
      else
      {
        if (!*v4)
        {
          v13[1] = 34;
          v15 = *(_QWORD *)v5;
          v16 = (uint64_t)&v13[-*(_QWORD *)v5 + 2];
          *(_DWORD *)(v5 + 8) = v16;
          *(_BYTE *)(v15 + (int)v16) = 0;
          return result;
        }
        ++v13;
      }
      ++v4;
      *v13 = v14;
    }
  }
  if ((_DWORD)v8)
    v10 = *(int *)(v5 + 12);
  else
    v10 = 128;
  do
  {
    v11 = v10;
    v10 *= 2;
  }
  while (v10 < v9);
  if (v11 >= 1073741696 && (v10 = 2147483391, v9 > 2147483391)
    || (v12 = *(_QWORD *)v5, result = sqlite3_initialize(), (_DWORD)result)
    || (result = sub_1ACB6BB48(v12, v10)) == 0)
  {
    *a3 = 7;
    return result;
  }
  *(_QWORD *)v5 = result;
  *(_DWORD *)(v5 + 12) = v10;
  if (!*a3)
  {
    v7 = *(int *)(v5 + 8);
    goto LABEL_15;
  }
  return result;
}

char *sub_1ACCABBF0(char *result, _DWORD *a2, char *a3, ...)
{
  uint64_t v4;
  char *v5;
  uint64_t (**v6)(char *);
  va_list va;

  va_start(va, a3);
  if (!*a2)
  {
    v4 = (uint64_t)result;
    result = sqlite3_vmprintf(a3, va);
    if (result)
    {
      v5 = result;
      sub_1ACCAB998(v4, result, a2);
      v6 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        return (char *)(*v6)(v5);
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      result = (char *)off_1ECD3B168(v5);
      v5 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v6 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
        return (char *)(*v6)(v5);
      }
    }
    else
    {
      *a2 = 7;
    }
  }
  return result;
}

uint64_t sub_1ACCABCE0(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v10;
  size_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (*(_QWORD *)(a1 + 48) && !*(_DWORD *)(a1 + 64))
  {
    result = 0;
    v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      v8 = *(unsigned int *)(a1 + 8);
      if ((int)v8 + a2 < v5 || (_DWORD)result != 0)
        return result;
      v10 = dword_1EECAC718;
      v19 = dword_1EECAC718;
      if (*(_DWORD *)a1)
      {
        LODWORD(v11) = *(_DWORD *)(a1 + 40);
      }
      else
      {
        LODWORD(v11) = *(_DWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 48))
          v12 = (int)v8 < dword_1EECAC718;
        else
          v12 = 1;
        if (!v12)
        {
          v11 = (v11 - v8);
          if ((int)v11 >= 1)
          {
            memmove(*(void **)(a1 + 32), (const void *)(*(_QWORD *)(a1 + 32) + v8), v11);
            LODWORD(v11) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8);
            v10 = v19;
          }
          *(_DWORD *)(a1 + 40) = v11;
          *(_DWORD *)(a1 + 8) = 0;
          *(_DWORD *)(a1 + 24) = v11;
        }
      }
      v14 = (int)v11;
      v15 = (int)v11 + (uint64_t)v10;
      v16 = *(int *)(a1 + 44);
      if (v15 <= v16)
      {
        v13 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        if ((_DWORD)v16)
          v17 = *(int *)(a1 + 44);
        else
          v17 = 128;
        do
        {
          v18 = v17;
          v17 *= 2;
        }
        while (v17 < v15);
        if (v18 >= 1073741696 && (v17 = 2147483391, v15 > 2147483391)
          || (v6 = *(_QWORD *)(a1 + 32), sqlite3_initialize())
          || (v13 = sub_1ACB6BB48(v6, v17)) == 0)
        {
          result = 7;
          goto LABEL_8;
        }
        *(_QWORD *)(a1 + 32) = v13;
        *(_DWORD *)(a1 + 44) = v17;
        v14 = *(int *)(a1 + 40);
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(a1 + 48))(*(_QWORD *)(a1 + 56), v13 + v14, &v19);
      if (!v19)
      {
        *(_DWORD *)(a1 + 64) = 1;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
        return result;
      }
      *(_DWORD *)(a1 + 40) += v19;
LABEL_8:
      v7 = *(_DWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 32);
      v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 24) = v5;
      if (v7)
        return result;
    }
  }
  return 0;
}

uint64_t sub_1ACCABEA8(uint64_t a1, int a2, int *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v19;

  if (a2 < 1)
  {
    result = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = sub_1ACCABCE0(a1, v6 + 10);
      if ((_DWORD)result)
        break;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(int *)(a1 + 8);
      v11 = v6 + 1;
      v12 = *(unsigned __int8 *)(v9 + v10 + v6);
      if ((v12 - 3) > 1)
      {
        result = 0;
        if ((v12 - 1) >= 2)
          ++v6;
        else
          v6 += 9;
      }
      else
      {
        v13 = (char *)(v9 + v10 + v11);
        v14 = *v13;
        if ((v14 & 0x80) != 0)
        {
          v16 = v13[1];
          if (v13[1] < 0)
          {
            v17 = v13[2];
            if (v17 < 0)
            {
              v19 = 0;
              v15 = sub_1ACB8A6CC(v13, &v19);
              if (HIDWORD(v19))
                v14 = -1;
              else
                v14 = v19;
            }
            else
            {
              v14 = v17 & 0x7F | (v14 << 14) & 0x1FC07F | ((v16 & 0x7F) << 7);
              v15 = 3;
            }
          }
          else
          {
            v14 = ((v14 & 0x7F) << 7) | v16;
            v15 = 2;
          }
        }
        else
        {
          v15 = 1;
        }
        v6 = v14 + v11 + v15;
        result = sub_1ACCABCE0(a1, v6);
        if ((_DWORD)result)
          break;
      }
    }
    while (v7++ < a2);
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1ACCABFFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *__s;
  char *__sa;
  uint64_t v32;
  unint64_t v33;

  if (a5)
    *a5 = 1;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = a2;
    while (1)
    {
      if (a3 && !*(_BYTE *)(a3 + v9))
        goto LABEL_16;
      v11 = sub_1ACCABCE0(a1, 9);
      if ((_DWORD)v11)
        return v11;
      v12 = *(int *)(a1 + 8);
      if ((int)v12 >= *(_DWORD *)(a1 + 24))
        return sub_1ACBEB08C(233680);
      v13 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v12 + 1;
      v14 = *(unsigned __int8 *)(v13 + v12);
      if (!*(_BYTE *)(v13 + v12))
      {
LABEL_16:
        v20 = 0;
        goto LABEL_42;
      }
      if (a5)
        *a5 = 0;
      v15 = sub_1ACB5D828(64);
      if (!v15)
      {
        *(_QWORD *)(a4 + 8 * v9) = 0;
        return 7;
      }
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(a4 + 8 * v9) = v15;
      *(_WORD *)(v15 + 20) = 1;
      v16 = *(int *)(a1 + 8);
      v17 = (char *)(*(_QWORD *)(a1 + 16) + v16);
      if (v14 - 3 > 1)
      {
        v20 = 0;
        if (v14 > 2)
          goto LABEL_42;
      }
      else
      {
        v18 = *v17;
        if ((v18 & 0x80) != 0)
        {
          v21 = v17[1];
          if (v17[1] < 0)
          {
            v22 = v17[2];
            if (v22 < 0)
            {
              v33 = 0;
              v19 = sub_1ACB8A6CC(v17, &v33);
              if (HIDWORD(v33))
                v18 = -1;
              else
                v18 = v33;
            }
            else
            {
              v18 = v22 & 0x7F | (v18 << 14) & 0x1FC07F | ((v21 & 0x7F) << 7);
              v19 = 3;
            }
          }
          else
          {
            v18 = ((v18 & 0x7F) << 7) | v21;
            v19 = 2;
          }
        }
        else
        {
          v19 = 1;
        }
        *(_DWORD *)(a1 + 8) = v19 + v16;
        v20 = sub_1ACCABCE0(a1, v18);
        if ((_DWORD)v20)
        {
          if (v14 > 2)
            goto LABEL_42;
        }
        else if ((v18 & 0x80000000) != 0 || (v26 = *(int *)(a1 + 8), (int)v18 > *(_DWORD *)(a1 + 24) - (int)v26))
        {
          v20 = sub_1ACBEB08C(233700);
          if (v14 > 2)
            goto LABEL_42;
        }
        else
        {
          __s = *(char **)(a1 + 16);
          v32 = *(_QWORD *)(a4 + 8 * v9);
          if (sqlite3_initialize() || (v27 = (char *)sub_1ACB5D828(v18 + 1)) == 0)
          {
            v20 = 7;
          }
          else
          {
            v28 = &__s[v26];
            __sa = v27;
            memcpy(v27, v28, v18);
            if (v32)
              sub_1ACB57870(v32, __sa, v18, v14 == 3, (uint64_t (*)(uint64_t))sqlite3_free);
            v20 = 0;
          }
          *(_DWORD *)(a1 + 8) += v18;
          if (v14 > 2)
            goto LABEL_42;
        }
      }
      if (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 8) <= 7)
        return sub_1ACBEB08C(233710);
      v23 = bswap64(*(_QWORD *)v17);
      if (v14 == 1)
      {
        v24 = *(_QWORD *)(a4 + 8 * v9);
        if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v24, v23);
        }
        else
        {
          *(_QWORD *)v24 = v23;
          *(_WORD *)(v24 + 20) = 4;
        }
      }
      else
      {
        v25 = *(_QWORD *)(a4 + 8 * v9);
        if ((*(_WORD *)(v25 + 20) & 0x9000) != 0)
          sub_1ACBF2A54(*(int **)(a4 + 8 * v9));
        else
          *(_WORD *)(v25 + 20) = 1;
        *(_QWORD *)v25 = v23;
        *(_WORD *)(v25 + 20) = 8;
      }
      *(_DWORD *)(a1 + 8) += 8;
LABEL_42:
      if (++v9 >= v10 || (_DWORD)v20)
        return v20;
    }
  }
  return 0;
}

uint64_t sub_1ACCAC378(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  result = sub_1ACCABCE0(a1, 9);
  if ((_DWORD)result)
  {
    v5 = 0;
    goto LABEL_3;
  }
  v6 = (char *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8));
  v7 = *v6;
  if ((v7 & 0x80) == 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  v8 = v6[1];
  if ((v6[1] & 0x80000000) == 0)
  {
    v7 = ((v7 & 0x7F) << 7) | v8;
    v5 = 2;
    goto LABEL_8;
  }
  v12 = v6[2];
  if (v12 < 0)
  {
    v13 = 0;
    v5 = sub_1ACB8A6CC(v6, &v13);
    v7 = v13;
    if (HIDWORD(v13))
    {
LABEL_20:
      result = sub_1ACBEB08C(233758);
      goto LABEL_3;
    }
  }
  else
  {
    v7 = v12 & 0x7F | (v7 << 14) & 0x1FC07F | ((v8 & 0x7F) << 7);
    v5 = 3;
  }
  if (v7 > 0x10000)
    goto LABEL_20;
LABEL_8:
  v5 += v7;
LABEL_9:
  while (1)
  {
    result = sub_1ACCABCE0(a1, v5 + 100);
    if ((_DWORD)result)
      break;
    v9 = *(int *)(a1 + 8);
    v10 = *(int *)(a1 + 24);
    if ((int)v9 + v5 < (int)v10)
    {
      v11 = v9 + v5;
      while (*(_BYTE *)(*(_QWORD *)(a1 + 16) + (int)v9 + v5))
      {
        ++v5;
        if (++v11 >= v10)
          goto LABEL_9;
      }
      result = 0;
      break;
    }
  }
LABEL_3:
  *a2 = v5 + 1;
  return result;
}

uint64_t sub_1ACCAC4A4(uint64_t result, sqlite3_value *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*a3)
  {
    v5 = result;
    v13 = 0;
    result = sub_1ACCA9A80(0, a2, &v13);
    if ((_DWORD)result)
    {
LABEL_3:
      *a3 = result;
      return result;
    }
    v6 = *(int *)(v5 + 8);
    v7 = *(int *)(v5 + 12);
    v8 = v13 + v6;
    if (v13 + v6 <= v7)
    {
      v12 = *(_QWORD *)v5;
    }
    else
    {
      if ((_DWORD)v7)
        v9 = *(int *)(v5 + 12);
      else
        v9 = 128;
      do
      {
        v10 = v9;
        v9 *= 2;
      }
      while (v9 < v8);
      if (v10 >= 1073741696 && (v9 = 2147483391, v8 > 2147483391)
        || (v11 = *(_QWORD *)v5, sqlite3_initialize())
        || (v12 = sub_1ACB6BB48(v11, v9)) == 0)
      {
        result = 7;
        goto LABEL_3;
      }
      *(_QWORD *)v5 = v12;
      *(_DWORD *)(v5 + 12) = v9;
      v6 = *(int *)(v5 + 8);
    }
    result = sub_1ACCA9A80(v12 + v6, a2, 0);
    *(_DWORD *)(v5 + 8) += v13;
  }
  return result;
}

uint64_t sub_1ACCAC5A8(sqlite3 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  int v6;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v30;

  v6 = *(_DWORD *)(a4 + 96);
  if (v6)
  {
    v11 = (_QWORD *)(a4 + 88);
    v12 = qword_1ECD3DBE0 + 1056;
    while (1)
    {
      v13 = *(_QWORD *)(a4 + 88);
      *v11 = 0;
      v11[1] = 0;
      v14 = *(_DWORD *)(a4 + 80);
      if (!sqlite3_initialize())
        break;
      v15 = 7;
      if (!v13)
        goto LABEL_32;
LABEL_26:
      v26 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        v27 = v12[294];
        if (v27)
          xmmword_1ECD3B1C0(v27);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v13);
        v13 = v12[294];
        if (!v13)
          goto LABEL_32;
        v26 = &xmmword_1ECD3B1D0;
      }
      (*v26)(v13);
LABEL_32:
      if ((_DWORD)v15)
        return v15;
      v28 = *(_DWORD *)(a4 + 96);
      if (v28 >= v6)
        *(_DWORD *)(a4 + 76) = 0;
      v6 = v28;
      if (!v28)
        return 0;
    }
    v16 = sub_1ACB5D828(152);
    if (!v16)
    {
      v15 = 7;
      goto LABEL_25;
    }
    v17 = v16;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_QWORD *)(v16 + 144) = 0;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_QWORD *)(v16 + 16) = v13;
    *(_DWORD *)(v16 + 24) = v6;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 64) = 1;
    *(_DWORD *)(v16 + 96) = 1;
    v18 = *(int *)(a4 + 32);
    v19 = 16 * v18;
    *(_DWORD *)(v16 + 88) = a2;
    *(_DWORD *)(v16 + 92) = v14;
    *(_DWORD *)(v16 + 120) = v18;
    *(_QWORD *)(v16 + 136) = *(_QWORD *)(a4 + 48);
    v20 = *(int *)(v16 + 84);
    v21 = 16 * v18 + *(int *)(v16 + 80);
    *(_QWORD *)(v16 + 112) = a3;
    if (v21 <= v20)
    {
      v24 = *(void **)(v16 + 72);
    }
    else
    {
      if ((_DWORD)v20)
        v22 = v20;
      else
        v22 = 128;
      do
      {
        v23 = v22;
        v22 *= 2;
      }
      while (v22 < v21);
      if (v23 >= 1073741696 && (v22 = 2147483391, v21 > 2147483391)
        || (v30 = *(_QWORD *)(v16 + 72), sqlite3_initialize())
        || (v24 = (void *)sub_1ACB6BB48(v30, v22)) == 0)
      {
        *(_QWORD *)(v17 + 144) = *(_QWORD *)(v17 + 72);
        v15 = 7;
LABEL_23:
        sqlite3changeset_finalize(v17);
LABEL_25:
        v12 = &qword_1ECD3DBE0[132];
        if (!v13)
          goto LABEL_32;
        goto LABEL_26;
      }
      *(_QWORD *)(v17 + 72) = v24;
      *(_DWORD *)(v17 + 84) = v22;
    }
    *(_QWORD *)(v17 + 144) = v24;
    bzero(v24, v19);
    while (sub_1ACBD9C4C(v17, 0, 0, 0) == 100)
    {
      v25 = sub_1ACCACFA4(a1, v17, a4, a5, a6);
      if ((_DWORD)v25)
      {
        v15 = v25;
        goto LABEL_23;
      }
    }
    v15 = sqlite3changeset_finalize(v17);
    goto LABEL_25;
  }
  return 0;
}

uint64_t sub_1ACCAC848(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  v1 = result;
  v2 = *(_QWORD *)(result + 64);
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 16);
      sqlite3_finalize(*(sqlite3_stmt **)v2);
      v4 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v2);
        v2 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v4 = &xmmword_1ECD3B1D0;
      }
      result = (*v4)(v2);
LABEL_4:
      v2 = v3;
    }
    while (v3);
  }
  *(_QWORD *)(v1 + 64) = 0;
  v5 = *(_QWORD *)(v1 + 56);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_16:
      result = (*v6)(v5);
      goto LABEL_17;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_16;
    }
  }
LABEL_17:
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t sub_1ACCAC998(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1ACCAA588(a1, *(unsigned __int8 *)(a2 + 122), (uint64_t)"main", "sqlite_stat1", *(_DWORD *)(a2 + 124), *(_DWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), (_QWORD *)(a2 + 24));
  if (!(_DWORD)result)
  {
    result = sub_1ACB5C66C(a1, "INSERT INTO main.sqlite_stat1 VALUES(?1, CASE WHEN length(?2)=0 AND typeof(?2)='blob' THEN NULL ELSE ?2 END, ?3)", 0xFFFFFFFFLL, 128, 0, (_QWORD *)(a2 + 16), 0, v5);
    if (!(_DWORD)result)
      return sub_1ACB5C66C(a1, "DELETE FROM main.sqlite_stat1 WHERE tbl=?1 AND idx IS CASE WHEN length(?2)=0 AND typeof(?2)='blob' THEN NULL ELSE ?2 END AND (?4 OR stat IS ?3)", 0xFFFFFFFFLL, 128, 0, (_QWORD *)(a2 + 8), 0, v6);
  }
  return result;
}

uint64_t sub_1ACCACA48(uint64_t a1, char *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void (**v16)(unsigned __int8 *, char *);
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  char __s[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v18 = 0;
  v19 = 0;
  sub_1ACCAB998((uint64_t)&v18, "DELETE FROM main.", &v20);
  sub_1ACCABAAC((uint64_t)&v18, a2, &v20);
  sub_1ACCAB998((uint64_t)&v18, " WHERE ", &v20);
  v8 = *(_DWORD *)(a3 + 32);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v6 = &byte_1ACCBEAEE;
    do
    {
      while (*(_BYTE *)(*(_QWORD *)(a3 + 48) + v9))
      {
        ++v10;
        sub_1ACCAB998((uint64_t)&v18, v6, &v20);
        sub_1ACCABAAC((uint64_t)&v18, *(char **)(*(_QWORD *)(a3 + 40) + 8 * v9), &v20);
        sub_1ACCAB998((uint64_t)&v18, " = ?", &v20);
        sqlite3_snprintf(23, __s, "%d", ++v9);
        sub_1ACCAB998((uint64_t)&v18, __s, &v20);
        v8 = *(_DWORD *)(a3 + 32);
        v6 = " AND ";
        if (v9 >= v8)
          goto LABEL_6;
      }
      ++v9;
    }
    while (v9 < v8);
LABEL_6:
    if (v10 < v8)
    {
      sub_1ACCAB998((uint64_t)&v18, " AND (?", &v20);
      sqlite3_snprintf(23, __s, "%d", *(_DWORD *)(a3 + 32) + 1);
      sub_1ACCAB998((uint64_t)&v18, __s, &v20);
      sub_1ACCAB998((uint64_t)&v18, " OR ", &v20);
      v11 = *(_DWORD *)(a3 + 32);
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = &byte_1ACCBEAEE;
        do
        {
          while (!*(_BYTE *)(*(_QWORD *)(a3 + 48) + v12))
          {
            sub_1ACCAB998((uint64_t)&v18, v13, &v20);
            sub_1ACCABAAC((uint64_t)&v18, *(char **)(*(_QWORD *)(a3 + 40) + 8 * v12), &v20);
            sub_1ACCAB998((uint64_t)&v18, " IS ?", &v20);
            sqlite3_snprintf(23, __s, "%d", ++v12);
            sub_1ACCAB998((uint64_t)&v18, __s, &v20);
            v11 = *(_DWORD *)(a3 + 32);
            v13 = "AND ";
            if (v12 >= v11)
              goto LABEL_14;
          }
          ++v12;
        }
        while (v12 < v11);
      }
LABEL_14:
      sub_1ACCAB998((uint64_t)&v18, ")", &v20);
    }
  }
  v14 = v20;
  v15 = v18;
  if (!v20)
    v14 = sub_1ACB5C66C(a1, v18, v19, 128, 0, (_QWORD *)(a3 + 8), 0, v7);
  if (v15)
  {
    v16 = (void (**)(unsigned __int8 *, char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_23:
      (*v16)(v15, v6);
      return v14;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v15);
    v15 = (unsigned __int8 *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v16 = (void (**)(unsigned __int8 *, char *))&xmmword_1ECD3B1D0;
      goto LABEL_23;
    }
  }
  return v14;
}

uint64_t sub_1ACCACDA4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void (**v11)(unsigned __int8 *);
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;

  v15 = 0;
  v13 = 0;
  v14 = 0;
  sub_1ACCAB998((uint64_t)&v13, "INSERT INTO main.", &v15);
  sub_1ACCABAAC((uint64_t)&v13, a2, &v15);
  sub_1ACCAB998((uint64_t)&v13, "(", &v15);
  if (*(int *)(a3 + 32) >= 1)
  {
    sub_1ACCABAAC((uint64_t)&v13, **(char ***)(a3 + 40), &v15);
    if (*(int *)(a3 + 32) >= 2)
    {
      v6 = 1;
      do
      {
        sub_1ACCAB998((uint64_t)&v13, ", ", &v15);
        sub_1ACCABAAC((uint64_t)&v13, *(char **)(*(_QWORD *)(a3 + 40) + 8 * v6++), &v15);
      }
      while (v6 < *(int *)(a3 + 32));
    }
  }
  sub_1ACCAB998((uint64_t)&v13, ") VALUES(?", &v15);
  if (*(int *)(a3 + 32) > 1)
  {
    v7 = 1;
    do
    {
      sub_1ACCAB998((uint64_t)&v13, ", ?", &v15);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a3 + 32));
  }
  sub_1ACCAB998((uint64_t)&v13, ")", &v15);
  v9 = v15;
  v10 = v13;
  if (v15)
  {
    if (!v13)
      return v9;
  }
  else
  {
    v9 = sub_1ACB5C66C(a1, v13, v14, 128, 0, (_QWORD *)(a3 + 16), 0, v8);
    if (!v10)
      return v9;
  }
  v11 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_17:
    (*v11)(v10);
    return v9;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v10);
  v10 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    goto LABEL_17;
  }
  return v9;
}

uint64_t sub_1ACCACFA4(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  v10 = sub_1ACCAD1C0(a2, a3, a4, a5, (_DWORD *)&v21 + 1, &v21);
  if (!(_DWORD)v10)
  {
    if ((_DWORD)v21)
      return sub_1ACCAD1C0(a2, a3, a4, a5, 0, 0);
    if (!HIDWORD(v21))
      return 0;
    v10 = sqlite3_exec(a1, "SAVEPOINT replace_op", 0, 0, 0);
    if (!(_DWORD)v10)
    {
      v13 = *(unsigned int *)(a3 + 32);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        v15 = *(_QWORD *)(a3 + 48);
        v16 = *(sqlite3_stmt **)(a3 + 8);
        while (1)
        {
          if (v15 && !*(_BYTE *)(v15 + v14))
          {
            v10 = 0;
          }
          else
          {
            v17 = *(_DWORD *)(a2 + 124);
            v18 = v17 == 23 || v17 == 18;
            if (!v18
              || (v14 & 0x80000000) != 0
              || (v19 = *(_DWORD *)(a2 + 120), v19 <= (int)v14)
              || (v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 8 * ((int)v14 + v19))) == 0)
            {
              v10 = sub_1ACBEB08C(234829);
              goto LABEL_30;
            }
            if (byte_1ACCB6445[*(_WORD *)(v20 + 20) & 0x3F] - 3 <= 1 && !*(_QWORD *)(v20 + 8))
            {
              v10 = 7;
              goto LABEL_30;
            }
            v10 = sqlite3_bind_value(v16, v14 + 1, (const sqlite3_value *)v20);
            if ((_DWORD)v10)
              goto LABEL_30;
          }
          if (++v14 >= v13)
            goto LABEL_30;
        }
      }
      v10 = 0;
LABEL_30:
      sqlite3_bind_int64(*(sqlite3_stmt **)(a3 + 8), *(_DWORD *)(a3 + 32) + 1, 1);
      if (!(_DWORD)v10)
      {
        sqlite3_step(*(sqlite3_stmt **)(a3 + 8));
        v10 = sqlite3_reset(*(sqlite3_stmt **)(a3 + 8));
        if (!(_DWORD)v10)
        {
          v10 = sub_1ACCAD1C0(a2, a3, a4, a5, 0, 0);
          if (!(_DWORD)v10)
            return sqlite3_exec(a1, "RELEASE replace_op", 0, 0, 0);
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1ACCAD1C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  _DWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  sqlite3_stmt *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v26;
  uint64_t v27;
  sqlite3_stmt *v28;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  int v39;
  void *v40;
  size_t v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  const void *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  sqlite3_stmt *v53;
  uint64_t v54;
  uint64_t (**v55)(uint64_t);
  uint64_t v56;
  _BYTE *v57;
  const char *v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  sqlite3_stmt *v65;
  _DWORD *v66;
  BOOL v67;
  sqlite3_int64 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  const char *v73;
  int v74;
  uint64_t v75;
  void *v76;
  int v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  char *v85;
  void (**v86)(sqlite3_stmt *);
  unsigned __int8 *v87;
  void (**v88)(unsigned __int8 *);
  _BOOL4 v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  int v104;
  _DWORD *v105;
  const char *v106;
  sqlite3_stmt **v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned int v116;
  char __s[24];
  uint64_t v118;

  v6 = a6;
  v8 = a3;
  v118 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned int *)(a1 + 120);
  v11 = *(_DWORD *)(a1 + 124);
  if (v11 == 23)
  {
    if (a6)
      v14 = *(_DWORD *)(a1 + 88) != 0;
    else
      v14 = 1;
    v113 = v14;
    v38 = v12 + 33;
    if ((int)v12 < -33)
      v38 = v12 + 64;
    v39 = v38 >> 5;
    v40 = *(void **)(a2 + 56);
    if (v40)
      goto LABEL_59;
    v64 = sqlite3_initialize();
    if ((int)v12 < -1 || v64)
    {
      *(_QWORD *)(a2 + 56) = 0;
    }
    else
    {
      v40 = (void *)sub_1ACB5D828((4 * v39));
      *(_QWORD *)(a2 + 56) = v40;
      if (v40)
      {
LABEL_59:
        v112 = a4;
        v41 = 4 * v39;
        bzero(v40, v41);
        v42 = *(_DWORD *)(a1 + 120);
        if (v42 < 1)
          return 11;
        v110 = v6;
        LODWORD(v43) = 0;
        v44 = 0;
        v45 = *(_QWORD *)(a1 + 144);
        v17 = 11;
        while (1)
        {
          v43 = (int)v43;
          v46 = v42;
          v47 = v45 + 8 * v42;
          while (!*(_QWORD *)(v47 + 8 * v43))
          {
            if (++v43 >= v46)
            {
              v116 = v17;
              if ((v44 & 1) == 0)
              {
                v53 = 0;
                goto LABEL_163;
              }
LABEL_68:
              if (v113)
                *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * ((int)v12 / 32)) |= 1 << v12;
              v48 = *(const void ***)(a2 + 64);
              v107 = (sqlite3_stmt **)(a2 + 64);
              if (v48)
              {
                v49 = *(const void **)(a2 + 56);
                v50 = -1;
                v51 = (uint64_t *)(a2 + 64);
                do
                {
                  v52 = v51;
                  v53 = (sqlite3_stmt *)v48;
                  if (!memcmp(v49, v48[1], 4 * v39))
                  {
                    v17 = 0;
                    *v52 = *((_QWORD *)v53 + 2);
                    *((_QWORD *)v53 + 2) = *v107;
                    *v107 = v53;
                    goto LABEL_162;
                  }
                  v51 = (uint64_t *)((char *)v53 + 16);
                  v48 = (const void **)*((_QWORD *)v53 + 2);
                  ++v50;
                }
                while (v48);
                if (v50 >= 0xB)
                {
                  sqlite3_finalize(*(sqlite3_stmt **)v53);
                  v54 = *v52;
                  if (*v52)
                  {
                    v55 = &off_1ECD3B168;
                    if (!dword_1ECD3B140)
                      goto LABEL_81;
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v54);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v54);
                    v54 = xmmword_1ECD3E930;
                    if ((_QWORD)xmmword_1ECD3E930)
                    {
                      v55 = &xmmword_1ECD3B1D0;
LABEL_81:
                      (*v55)(v54);
                    }
                  }
                  *v52 = 0;
                }
              }
              v56 = (96 * v39);
              v57 = *(_BYTE **)(a1 + 112);
              if (!v57)
              {
                v61 = -1;
                goto LABEL_125;
              }
              v58 = "sqlite_stat1";
              while (2)
              {
                v62 = *v57;
                v63 = *(unsigned __int8 *)v58;
                if ((_DWORD)v62 == (_DWORD)v63)
                {
                  if (!*v57)
                  {
                    v61 = 0;
LABEL_125:
                    v74 = sqlite3_initialize();
                    v17 = 7;
                    if ((int)v56 < 1)
                      return v17;
                    if (v74)
                      return v17;
                    v75 = sub_1ACB5D828(v56);
                    if (!v75)
                      return v17;
                    v53 = (sqlite3_stmt *)v75;
                    v76 = (void *)(v75 + 24);
                    v114 = 0;
                    v115 = 0;
                    *((_QWORD *)v53 + 1) = v76;
                    memcpy(v76, *(const void **)(a2 + 56), v41);
                    sub_1ACCAB998((uint64_t)&v114, "UPDATE main.", &v116);
                    sub_1ACCABAAC((uint64_t)&v114, *(char **)(a1 + 112), &v116);
                    sub_1ACCAB998((uint64_t)&v114, " SET ", &v116);
                    v77 = *(_DWORD *)(a1 + 120);
                    if (v77 >= 1)
                    {
                      v78 = 0;
                      v79 = &byte_1ACCBEAEE;
                      v80 = 1;
                      do
                      {
                        if (!*(_BYTE *)(*(_QWORD *)(a2 + 48) + v78)
                          && *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * ((int)v78 + v77)))
                        {
                          sub_1ACCAB998((uint64_t)&v114, v79, &v116);
                          sub_1ACCABAAC((uint64_t)&v114, *(char **)(*(_QWORD *)(a2 + 40) + 8 * v78), &v116);
                          sub_1ACCAB998((uint64_t)&v114, " = ?", &v116);
                          sqlite3_snprintf(23, __s, "%d", v80);
                          sub_1ACCAB998((uint64_t)&v114, __s, &v116);
                          v77 = *(_DWORD *)(a1 + 120);
                          v79 = ", ";
                        }
                        ++v78;
                        v80 += 2;
                      }
                      while (v78 < v77);
                    }
                    sub_1ACCAB998((uint64_t)&v114, " WHERE ", &v116);
                    if (*(int *)(a1 + 120) >= 1)
                    {
                      v82 = 0;
                      v83 = &byte_1ACCBEAEE;
                      v84 = 2;
                      do
                      {
                        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v82)
                          || !v113 && *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v82))
                        {
                          sub_1ACCAB998((uint64_t)&v114, v83, &v116);
                          if (v61 || v82 != 1)
                          {
                            sub_1ACCABAAC((uint64_t)&v114, *(char **)(*(_QWORD *)(a2 + 40) + 8 * v82), &v116);
                            sub_1ACCAB998((uint64_t)&v114, " IS ?", &v116);
                            sqlite3_snprintf(23, __s, "%d", v84);
                            v85 = __s;
                          }
                          else
                          {
                            v85 = "idx IS CASE WHEN length(?4)=0 AND typeof(?4)='blob' THEN NULL ELSE ?4 END ";
                          }
                          sub_1ACCAB998((uint64_t)&v114, v85, &v116);
                          v83 = " AND ";
                        }
                        ++v82;
                        v84 += 2;
                      }
                      while (v82 < *(int *)(a1 + 120));
                    }
                    v17 = v116;
                    if (v116
                      || (v17 = sub_1ACB5C66C(*(_QWORD *)a2, v114, v115, 128, 0, v53, 0, v81),
                          (_DWORD)v17))
                    {
                      v86 = (void (**)(sqlite3_stmt *))&off_1ECD3B168;
                      if (!dword_1ECD3B140)
                        goto LABEL_153;
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v53);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v53);
                      v53 = (sqlite3_stmt *)xmmword_1ECD3E930;
                      if ((_QWORD)xmmword_1ECD3E930)
                      {
                        v86 = (void (**)(sqlite3_stmt *))&xmmword_1ECD3B1D0;
LABEL_153:
                        (*v86)(v53);
                        v53 = 0;
                      }
                      v87 = v114;
                      if (v114)
                      {
LABEL_155:
                        v88 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
                        if (!dword_1ECD3B140)
                          goto LABEL_160;
                        if ((_QWORD)xmmword_1ECD3E930)
                          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v87);
                        --qword_1ECD3E8D0;
                        off_1ECD3B168(v87);
                        v87 = (unsigned __int8 *)xmmword_1ECD3E930;
                        if ((_QWORD)xmmword_1ECD3E930)
                        {
                          v88 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_160:
                          (*v88)(v87);
                        }
                      }
                    }
                    else
                    {
                      *((_QWORD *)v53 + 2) = *v107;
                      *v107 = v53;
                      v87 = v114;
                      if (v114)
                        goto LABEL_155;
                    }
                    if (v53)
LABEL_162:
                      v53 = *(sqlite3_stmt **)v53;
LABEL_163:
                    v108 = v8;
                    v89 = v17 == 0;
                    if (!(_DWORD)v17 && (int)v12 >= 1)
                    {
                      v90 = 0;
                      v91 = 2;
                      while (1)
                      {
                        v92 = *(_QWORD *)(a1 + 144);
                        v93 = *(_QWORD *)(v92 + 8 * v90);
                        v94 = *(_QWORD *)(v92 + 8 * ((int)v90 + *(_DWORD *)(a1 + 120)));
                        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v90))
                          break;
                        v17 = 0;
                        if (!v113 && v93)
                        {
                          v95 = 2 * v90 + 2;
LABEL_172:
                          if (byte_1ACCB6445[*(_WORD *)(v93 + 20) & 0x3F] - 3 <= 1
                            && !*(_QWORD *)(v93 + 8))
                          {
                            return 7;
                          }
LABEL_174:
                          v17 = sqlite3_bind_value(v53, v95, (const sqlite3_value *)v93);
                        }
                        if (!(_DWORD)v17 && v94)
                        {
                          if (byte_1ACCB6445[*(_WORD *)(v94 + 20) & 0x3F] - 3 <= 1
                            && !*(_QWORD *)(v94 + 8))
                          {
                            return 7;
                          }
                          v17 = sqlite3_bind_value(v53, v91 - 1, (const sqlite3_value *)v94);
                        }
                        v89 = v17 == 0;
                        if (!(_DWORD)v17)
                        {
                          ++v90;
                          v91 += 2;
                          if (v90 < v12)
                            continue;
                        }
                        goto LABEL_182;
                      }
                      v95 = v91;
                      if (v93)
                        goto LABEL_172;
                      sub_1ACBBE20C(97202);
                      v95 = v91;
                      goto LABEL_174;
                    }
LABEL_182:
                    if (!v89)
                      return v17;
                    sqlite3_step(v53);
                    v96 = sqlite3_reset(v53);
                    if ((_DWORD)v96)
                    {
                      v17 = v96;
                      if (v96 != 19)
                        return v17;
                      v97 = 3;
                      v98 = a2;
                      v99 = a1;
                      v100 = v8;
                      v101 = v112;
                      v102 = 0;
                      return sub_1ACCADE70(v97, v98, v99, v100, v101, v102);
                    }
                    v103 = *(_QWORD *)a2;
                    if (*(_QWORD *)a2)
                    {
                      v104 = *(unsigned __int8 *)(v103 + 113);
                      v105 = v110;
                      if (v104 == 186)
                        goto LABEL_190;
                      if (v104 == 118)
                      {
                        if (*(_DWORD *)(v103 + 120))
                          return 0;
                      }
                      else
                      {
                        if (v104 == 109)
LABEL_190:
                          v106 = "unopened";
                        else
                          v106 = "invalid";
LABEL_203:
                        sqlite3_log(21, "API call with %s database connection pointer", v106);
                        sub_1ACBBE20C(186273);
                      }
                      v97 = 1;
                      v98 = a2;
                      v99 = a1;
                      v100 = v108;
                      v101 = v112;
                      v102 = v105;
                      return sub_1ACCADE70(v97, v98, v99, v100, v101, v102);
                    }
                    v106 = "NULL";
                    v105 = v110;
                    goto LABEL_203;
                  }
                }
                else
                {
                  v59 = byte_1ACCB6333[v62];
                  v60 = byte_1ACCB6333[v63];
                  v61 = v59 - v60;
                  if (v59 != v60)
                    goto LABEL_125;
                }
                ++v57;
                ++v58;
                continue;
              }
            }
          }
          v17 = 0;
          v44 = 1;
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * (v43 >> 5)) |= 1 << v43;
          v42 = *(_DWORD *)(a1 + 120);
          LODWORD(v43) = v43 + 1;
          if ((int)v43 >= v42)
          {
            v116 = 0;
            goto LABEL_68;
          }
        }
      }
    }
    return 7;
  }
  if (v11 != 9)
  {
    if (*(_DWORD *)(a2 + 72) && (v16 = sub_1ACCAE360(a1, a2), (_DWORD)v16))
    {
      v17 = v16;
      if ((_DWORD)v16 == 100)
      {
        sqlite3_reset(*(sqlite3_stmt **)(a2 + 24));
        return sub_1ACCADE70(3, a2, a1, v8, a4, a5);
      }
    }
    else
    {
      v18 = v8;
      v19 = *(sqlite3_stmt **)(a2 + 16);
      if ((int)v12 >= 1)
      {
        v111 = a4;
        v20 = 0;
        do
        {
          v23 = *(_DWORD *)(a1 + 124);
          if (v23 != 23 && v23 != 18 || v20 == 0x80000000)
            return sub_1ACBEB08C(234829);
          v26 = *(_DWORD *)(a1 + 120);
          if (v26 <= (int)v20)
            return sub_1ACBEB08C(234829);
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * ((int)v20 + v26));
          if (!v27)
            return sub_1ACBEB08C(234829);
          if (byte_1ACCB6445[*(_WORD *)(v27 + 20) & 0x3F] - 3 <= 1 && !*(_QWORD *)(v27 + 8))
            return 7;
          v21 = sqlite3_bind_value(v19, ++v20, (const sqlite3_value *)v27);
          if ((_DWORD)v21)
            v22 = 1;
          else
            v22 = v20 >= v12;
        }
        while (!v22);
        v17 = v21;
        a4 = v111;
        if ((_DWORD)v21)
          return v17;
        v19 = *(sqlite3_stmt **)(a2 + 16);
      }
      sqlite3_step(v19);
      v17 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 16));
      v8 = v18;
    }
    if (v17 != 19)
      return v17;
    return sub_1ACCADE70(3, a2, a1, v8, a4, a5);
  }
  if (*(_DWORD *)(a1 + 88))
    v13 = *(_QWORD *)(a2 + 48);
  else
    v13 = 0;
  v28 = *(sqlite3_stmt **)(a2 + 8);
  if ((int)v12 < 1)
  {
LABEL_50:
    if (v28)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v28 + 24);
      if (v34)
      {
        xmmword_1ECD3B1C0(v34);
        v35 = *(_QWORD *)(*(_QWORD *)v28 + 24);
        v36 = *((_DWORD *)v28 + 8);
        if (v35)
          xmmword_1ECD3B1D0(v35);
      }
      else
      {
        v36 = *((_DWORD *)v28 + 8);
      }
    }
    else
    {
      v36 = 0;
    }
    v65 = *(sqlite3_stmt **)(a2 + 8);
    if (v36 <= (int)v12)
    {
      v66 = v6;
    }
    else
    {
      v66 = v6;
      if (v6)
        v67 = v13 == 0;
      else
        v67 = 0;
      v68 = !v67;
      v17 = sqlite3_bind_int64(v65, v12 + 1, v68);
      if ((_DWORD)v17)
        return v17;
      v65 = *(sqlite3_stmt **)(a2 + 8);
    }
    sqlite3_step(v65);
    v69 = sqlite3_reset(*(sqlite3_stmt **)(a2 + 8));
    if ((_DWORD)v69)
    {
      v17 = v69;
      if (v69 != 19)
        return v17;
      return sub_1ACCADE70(3, a2, a1, v8, a4, 0);
    }
    v70 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v71 = *(unsigned __int8 *)(v70 + 113);
      v72 = v66;
      switch(v71)
      {
        case 186:
          goto LABEL_117;
        case 118:
          if (*(_DWORD *)(v70 + 120))
            return 0;
          goto LABEL_197;
        case 109:
LABEL_117:
          v73 = "unopened";
          break;
        default:
          v73 = "invalid";
          break;
      }
    }
    else
    {
      v73 = "NULL";
      v72 = v66;
    }
    sqlite3_log(21, "API call with %s database connection pointer", v73);
    sub_1ACBBE20C(186273);
LABEL_197:
    if (!*(_BYTE *)(a2 + 122))
      return sub_1ACCADE70(1, a2, a1, v8, a4, v72);
    return 0;
  }
  v30 = 0;
  while (v13 && !*(_BYTE *)(v13 + v30))
  {
    v17 = 0;
LABEL_33:
    if (++v30 >= v12)
      goto LABEL_48;
  }
  v31 = *(_DWORD *)(a1 + 124);
  if (v31 != 23 && v31 != 9)
    return sub_1ACBEB08C(234829);
  if ((v30 & 0x80000000) != 0)
    return sub_1ACBEB08C(234829);
  if (*(_DWORD *)(a1 + 120) <= (int)v30)
    return sub_1ACBEB08C(234829);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v30);
  if (!v33)
    return sub_1ACBEB08C(234829);
  if (byte_1ACCB6445[*(_WORD *)(v33 + 20) & 0x3F] - 3 <= 1 && !*(_QWORD *)(v33 + 8))
    return 7;
  v17 = sqlite3_bind_value(v28, v30 + 1, (const sqlite3_value *)v33);
  if (!(_DWORD)v17)
    goto LABEL_33;
LABEL_48:
  if (!(_DWORD)v17)
  {
    v8 = a3;
    v28 = *(sqlite3_stmt **)(a2 + 8);
    v6 = a6;
    goto LABEL_50;
  }
  return v17;
}

uint64_t sub_1ACCADE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, _DWORD *a6)
{
  uint64_t result;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  BOOL v22;
  char v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  sqlite3_value *v46;
  int v47;
  BOOL v48;
  sqlite3_value **v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;

  if (!a6)
  {
    v54 = 0;
    goto LABEL_10;
  }
  result = sub_1ACCAE360(a3, a2);
  v54 = result;
  if (!(_DWORD)result)
  {
LABEL_10:
    if ((_DWORD)a1 == 3 && *(_DWORD *)(a2 + 76))
    {
      sub_1ACCAB89C(a2 + 88, (void *)(*(_QWORD *)(a3 + 16) + *(int *)(a3 + 4)), (*(_DWORD *)(a3 + 8) - *(_DWORD *)(a3 + 4)), &v54);
      return 0;
    }
    v17 = a4(a5, (a1 + 1), a3);
    if (v17 == 1)
      return 21;
    goto LABEL_21;
  }
  if ((_DWORD)result == 100)
  {
    if (!*(_BYTE *)(a2 + 122))
      goto LABEL_19;
    v13 = *(unsigned __int16 **)(a2 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v13 + 24);
      if (v14)
      {
        xmmword_1ECD3B1C0(v14);
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 24);
        v16 = v13[130];
        if (v15)
          xmmword_1ECD3B1D0(v15);
      }
      else
      {
        v16 = v13[130];
      }
    }
    else
    {
      v16 = 0;
    }
    if (sqlite3_column_int((sqlite3_stmt *)v13, v16 - 1))
    {
      v17 = 0;
    }
    else
    {
LABEL_19:
      *(_QWORD *)(a3 + 104) = *(_QWORD *)(a2 + 24);
      v17 = a4(a5, a1, a3);
      *(_QWORD *)(a3 + 104) = 0;
    }
    result = sqlite3_reset(*(sqlite3_stmt **)(a2 + 24));
    v54 = result;
    if (!(_DWORD)result)
    {
LABEL_21:
      switch(v17)
      {
        case 0:
          goto LABEL_25;
        case 2:
          return 4;
        case 1:
          *a6 = 1;
LABEL_25:
          v55 = 0;
          if (!*(_BYTE *)(a2 + 121))
            return 0;
          v18 = *(_DWORD *)(a3 + 124);
          v19 = *(_DWORD *)(a2 + 112);
          v20 = v19;
          if (*(_BYTE *)(a2 + 120))
          {
            v21 = (uint64_t *)(a2 + 104);
            v22 = v18 == 9;
            if (v18 == 9)
              v23 = 9;
            else
              v23 = 18;
            goto LABEL_30;
          }
          v34 = *(char **)(a3 + 112);
          v21 = (uint64_t *)(a2 + 104);
          v35 = *(_DWORD *)(a2 + 116);
          if (v19 < v35)
          {
            v36 = *v21;
LABEL_50:
            *(_DWORD *)(a2 + 112) = v19 + 1;
            *(_BYTE *)(v36 + v20) = 84;
LABEL_69:
            sub_1ACCAB778(a2 + 104, *(_DWORD *)(a2 + 32), &v55);
            sub_1ACCAB89C(a2 + 104, *(void **)(a2 + 48), *(unsigned int *)(a2 + 32), &v55);
            v43 = strlen(v34);
            sub_1ACCAB89C(a2 + 104, v34, (v43 + 1), &v55);
            *(_BYTE *)(a2 + 120) = 1;
            result = v55;
            v22 = v18 == 9;
            if (v18 == 9)
              v23 = 9;
            else
              v23 = 18;
            if (v55)
              goto LABEL_73;
            v19 = *(_DWORD *)(a2 + 112);
            v20 = v19;
LABEL_30:
            v24 = *(_DWORD *)(a2 + 116);
            if (v19 >= v24)
            {
              if (!v24)
                v24 = 128;
              v31 = v24;
              do
              {
                v32 = v31;
                v31 *= 2;
              }
              while (v31 <= v20);
              if (v32 > 1073741695)
              {
                if (v19 > 2147483390)
                  goto LABEL_59;
                v31 = 2147483391;
              }
              v33 = *v21;
              if (sqlite3_initialize())
                goto LABEL_59;
              v25 = sub_1ACB6BB48(v33, v31);
              if (!v25)
                goto LABEL_59;
              *(_QWORD *)(a2 + 104) = v25;
              *(_DWORD *)(a2 + 116) = v31;
              v19 = *(_DWORD *)(a2 + 112);
              v20 = v19;
            }
            else
            {
              v25 = *v21;
            }
            *(_DWORD *)(a2 + 112) = v19 + 1;
            *(_BYTE *)(v25 + v20) = v23;
            v26 = v17 == 1;
            v28 = *(_DWORD *)(a2 + 112);
            v27 = *(_DWORD *)(a2 + 116);
            v29 = v28;
            if (v28 < v27)
            {
              v30 = *v21;
LABEL_34:
              result = 0;
              *(_DWORD *)(a2 + 112) = v28 + 1;
              *(_BYTE *)(v30 + v29) = v26;
LABEL_73:
              if (*(int *)(a2 + 32) < 1)
                return result;
              v44 = 0;
              v45 = 0;
              while (1)
              {
                if (v22 || v18 == 23 && *(_BYTE *)(*(_QWORD *)(a2 + 48) + v45))
                {
                  v47 = *(_DWORD *)(a3 + 124);
                  v48 = v47 == 23 || v47 == 9;
                  if (v48 && v45 < *(int *)(a3 + 120))
                  {
                    v49 = (sqlite3_value **)(*(_QWORD *)(a3 + 144) + v44);
LABEL_94:
                    v46 = *v49;
                    goto LABEL_76;
                  }
                }
                else
                {
                  v50 = *(_DWORD *)(a3 + 124);
                  if (v50 == 23 || v50 == 18)
                  {
                    v52 = *(int *)(a3 + 120);
                    if (v45 < v52)
                    {
                      v49 = (sqlite3_value **)(*(_QWORD *)(a3 + 144) + 8 * ((int)v45 + (int)v52));
                      goto LABEL_94;
                    }
                  }
                }
                v46 = 0;
LABEL_76:
                sub_1ACCAC4A4((uint64_t)v21, v46, &v55);
                ++v45;
                v44 += 8;
                if (v45 >= *(int *)(a2 + 32))
                  return v55;
              }
            }
            if (!v27)
              v27 = 128;
            v37 = v27;
            do
            {
              v38 = v37;
              v37 *= 2;
            }
            while (v37 <= v28);
            if (v38 > 1073741695)
            {
              if (v28 > 2147483390)
                goto LABEL_59;
              v37 = 2147483391;
            }
            v39 = *v21;
            if (!sqlite3_initialize())
            {
              v53 = sub_1ACB6BB48(v39, v37);
              if (v53)
              {
                v30 = v53;
                *(_QWORD *)(a2 + 104) = v53;
                *(_DWORD *)(a2 + 116) = v37;
                v28 = *(_DWORD *)(a2 + 112);
                v29 = v28;
                goto LABEL_34;
              }
            }
LABEL_59:
            result = 7;
            v55 = 7;
            goto LABEL_73;
          }
          if (!v35)
            v35 = 128;
          v40 = v35;
          do
          {
            v41 = v40;
            v40 *= 2;
          }
          while (v40 <= v19);
          if (v41 > 1073741695)
          {
            if (v19 > 2147483390)
              goto LABEL_68;
            v40 = 2147483391;
          }
          v42 = *v21;
          if (!sqlite3_initialize())
          {
            v36 = sub_1ACB6BB48(v42, v40);
            if (v36)
            {
              *(_QWORD *)(a2 + 104) = v36;
              *(_DWORD *)(a2 + 116) = v40;
              v19 = *(_DWORD *)(a2 + 112);
              v20 = v19;
              goto LABEL_50;
            }
          }
LABEL_68:
          v55 = 7;
          goto LABEL_69;
      }
      return 21;
    }
  }
  return result;
}

uint64_t sub_1ACCAE360(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, sqlite3_value **);
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_value *v22;

  v4 = *(sqlite3_stmt **)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 24);
    if (v5)
      xmmword_1ECD3B1C0(*(_QWORD *)(*(_QWORD *)v4 + 24));
    v6 = *((_DWORD *)v4 + 8);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = *((_QWORD *)v4 + 16);
      do
      {
        v10 = v9 + v7;
        if ((*(_WORD *)(v9 + v7 + 20) & 0x9000) != 0 || *(_DWORD *)(v10 + 32))
        {
          sub_1ACBF2A04(v10);
          v9 = *((_QWORD *)v4 + 16);
          v6 = *((_DWORD *)v4 + 8);
        }
        *(_WORD *)(v9 + v7 + 20) = 1;
        ++v8;
        v7 += 64;
      }
      while (v8 < v6);
    }
    if (*((_DWORD *)v4 + 93))
      *((_WORD *)v4 + 134) = *((_WORD *)v4 + 134) & 0xFFFC | 1;
    if (v5)
      xmmword_1ECD3B1D0(v5);
  }
  v12 = *(unsigned int *)(a1 + 120);
  v11 = *(_DWORD *)(a1 + 124);
  if (v11 == 18)
    v13 = (void (*)(uint64_t, uint64_t, sqlite3_value **))sqlite3changeset_new;
  else
    v13 = (void (*)(uint64_t, uint64_t, sqlite3_value **))sqlite3changeset_old;
  if ((int)v12 < 1)
  {
    result = 0;
    if (v11 == 9)
      goto LABEL_55;
    goto LABEL_34;
  }
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 48);
  while (1)
  {
    if (v15 && !*(_BYTE *)(v15 + v14))
    {
      result = 0;
      goto LABEL_21;
    }
    v22 = 0;
    v13(a1, v14, &v22);
    if (v22)
      break;
    result = sub_1ACBEB08C(234829);
    if ((_DWORD)result)
      goto LABEL_31;
LABEL_21:
    if (++v14 >= v12)
      goto LABEL_31;
  }
  if (byte_1ACCB6445[*((_WORD *)v22 + 10) & 0x3F] - 3 > 1 || *((_QWORD *)v22 + 1))
  {
    result = sqlite3_bind_value(v4, v14 + 1, v22);
    if ((_DWORD)result)
      goto LABEL_31;
    goto LABEL_21;
  }
  result = 7;
LABEL_31:
  if (v11 != 9)
  {
LABEL_34:
    if (!(_DWORD)result && *(_BYTE *)(a2 + 122) && (int)v12 >= 1)
    {
      v17 = 0;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v17))
        {
          result = 0;
          ++v17;
        }
        else
        {
          v18 = *(_DWORD *)(a1 + 124);
          v19 = v18 == 23 || v18 == 18;
          if (v19 && (v20 = *(int *)(a1 + 120), v17 < v20))
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * ((int)v20 + (int)v17));
          else
            v21 = 0;
          sqlite3_bind_int64(v4, v12 + ++v17, v21 == 0);
          if (v21)
          {
            if (byte_1ACCB6445[*(_WORD *)(v21 + 20) & 0x3F] - 3 <= 1 && !*(_QWORD *)(v21 + 8))
              return 7;
            result = sqlite3_bind_value(v4, v17, (const sqlite3_value *)v21);
            if ((_DWORD)result)
              break;
          }
          else
          {
            result = 0;
          }
        }
      }
      while (v17 < (uint64_t)v12);
    }
  }
LABEL_55:
  if (!(_DWORD)result)
  {
    result = sqlite3_step(v4);
    if ((_DWORD)result != 100)
      return sqlite3_reset(v4);
  }
  return result;
}

uint64_t sub_1ACCAE62C(uint64_t a1, int a2, char *__s1, int a4, char *__s2)
{
  uint64_t v5;
  unsigned __int8 *v10;
  int v11;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  int v39;
  int v40;
  char v41;
  char v42;
  unint64_t v44;

  v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 < 1)
    return 1;
  v10 = *(unsigned __int8 **)(a1 + 40);
  while (!*v10++)
  {
    if (a2)
    {
      if (!a4)
        goto LABEL_25;
      goto LABEL_5;
    }
    v16 = *__s1;
    v17 = 1;
    if (*__s1)
      v18 = v16 == 5;
    else
      v18 = 1;
    if (v18 || v16 == 255)
      goto LABEL_24;
    if ((v16 - 1) < 2)
    {
      v17 = 9;
LABEL_24:
      __s1 += v17;
      if (!a4)
        goto LABEL_25;
      goto LABEL_5;
    }
    v25 = __s1[1];
    if ((v25 & 0x80) != 0)
    {
      v29 = __s1[2];
      if (__s1[2] < 0)
      {
        v40 = __s1[3];
        if (v40 < 0)
        {
          v44 = 0;
          v42 = sub_1ACB8A6CC(__s1 + 1, &v44);
          if (HIDWORD(v44))
            v25 = -1;
          else
            v25 = v44;
          v26 = (v42 + 1);
        }
        else
        {
          v25 = v40 & 0x7F | (v25 << 14) & 0x1FC07F | ((v29 & 0x7F) << 7);
          v26 = 4;
        }
      }
      else
      {
        v25 = ((v25 & 0x7F) << 7) | v29;
        v26 = 3;
      }
    }
    else
    {
      v26 = 2;
    }
    __s1 += v26 + v25;
    if (!a4)
    {
LABEL_25:
      v19 = *__s2;
      v11 = 1;
      if (*__s2 && v19 != 5 && v19 != 255)
      {
        if ((v19 - 1) < 2)
        {
          v11 = 9;
        }
        else
        {
          v20 = __s2[1];
          if ((v20 & 0x80) != 0)
          {
            v28 = __s2[2];
            if (__s2[2] < 0)
            {
              v39 = __s2[3];
              if (v39 < 0)
              {
                v44 = 0;
                v41 = sub_1ACB8A6CC(__s2 + 1, &v44);
                if (HIDWORD(v44))
                  v20 = -1;
                else
                  v20 = v44;
                v21 = (v41 + 1);
              }
              else
              {
                v20 = v39 & 0x7F | (v20 << 14) & 0x1FC07F | ((v28 & 0x7F) << 7);
                v21 = 4;
              }
            }
            else
            {
              v20 = ((v20 & 0x7F) << 7) | v28;
              v21 = 3;
            }
          }
          else
          {
            v21 = 2;
          }
          v11 = v21 + v20;
        }
      }
      __s2 += v11;
    }
LABEL_5:
    if (!--v5)
      return 1;
  }
  v13 = *__s1;
  v14 = 1;
  if (*__s1)
    v15 = v13 == 5;
  else
    v15 = 1;
  if (!v15 && v13 != 255)
  {
    if ((v13 - 1) >= 2)
    {
      v22 = __s1[1];
      if ((v22 & 0x80) != 0)
      {
        v24 = __s1[2];
        if (__s1[2] < 0)
        {
          v27 = __s1[3];
          if (v27 < 0)
          {
            v44 = 0;
            v30 = sub_1ACB8A6CC(__s1 + 1, &v44);
            if (HIDWORD(v44))
              v22 = -1;
            else
              v22 = v44;
            v23 = (v30 + 1);
          }
          else
          {
            v22 = v27 & 0x7F | (v22 << 14) & 0x1FC07F | ((v24 & 0x7F) << 7);
            v23 = 4;
          }
        }
        else
        {
          v22 = ((v22 & 0x7F) << 7) | v24;
          v23 = 3;
        }
      }
      else
      {
        v23 = 2;
      }
      v14 = v23 + v22;
    }
    else
    {
      v14 = 9;
    }
  }
  v31 = *__s2;
  v32 = 1;
  if (*__s2)
    v33 = v31 == 5;
  else
    v33 = 1;
  if (v33 || v31 == 255)
    goto LABEL_55;
  if ((v31 - 1) < 2)
  {
    v32 = 9;
LABEL_55:
    if (v14 != v32)
      return 0;
LABEL_56:
    if (memcmp(__s1, __s2, v14))
      return 0;
    __s1 += v14;
    __s2 += v14;
    goto LABEL_5;
  }
  v34 = __s2[1];
  if ((v34 & 0x80) != 0)
  {
    v36 = __s2[2];
    if (__s2[2] < 0)
    {
      v37 = __s2[3];
      if (v37 < 0)
      {
        v44 = 0;
        v38 = sub_1ACB8A6CC(__s2 + 1, &v44);
        if (HIDWORD(v44))
          v34 = -1;
        else
          v34 = v44;
        v35 = (v38 + 1);
      }
      else
      {
        v34 = v37 & 0x7F | (v34 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
        v35 = 4;
      }
    }
    else
    {
      v34 = ((v34 & 0x7F) << 7) | v36;
      v35 = 3;
    }
  }
  else
  {
    v35 = 2;
  }
  if (v14 == v35 + v34)
    goto LABEL_56;
  return 0;
}

void **sub_1ACCAE9A0(void **result, int a2, char *__src, char *a4)
{
  void **v4;
  char *v5;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;

  v4 = result;
  v5 = (char *)*result;
  if (a2 >= 1)
  {
    v8 = a2;
    while (1)
    {
      v12 = *__src;
      LODWORD(v11) = 1;
      if (*__src)
        v13 = v12 == 5;
      else
        v13 = 1;
      if (v13 || v12 == 255)
        goto LABEL_13;
      if ((v12 - 1) < 2)
        break;
      v17 = __src[1];
      if ((v17 & 0x80) != 0)
      {
        v20 = __src[2];
        if (__src[2] < 0)
        {
          v22 = __src[3];
          if (v22 < 0)
          {
            v25 = 0;
            v24 = sub_1ACB8A6CC(__src + 1, &v25);
            if (HIDWORD(v25))
              v17 = -1;
            else
              v17 = v25;
            v18 = (v24 + 1);
          }
          else
          {
            v17 = v22 & 0x7F | (v17 << 14) & 0x1FC07F | ((v20 & 0x7F) << 7);
            v18 = 4;
          }
        }
        else
        {
          v17 = ((v17 & 0x7F) << 7) | v20;
          v18 = 3;
        }
      }
      else
      {
        v18 = 2;
      }
      LODWORD(v11) = v18 + v17;
      v14 = *a4;
      if (*a4)
      {
LABEL_14:
        v9 = 1;
        if (v14 != 5 && v14 != 255)
        {
          if ((v14 - 1) < 2)
          {
            v9 = 9;
          }
          else
          {
            v15 = a4[1];
            if ((v15 & 0x80) != 0)
            {
              v19 = a4[2];
              if (a4[2] < 0)
              {
                v21 = a4[3];
                if (v21 < 0)
                {
                  v25 = 0;
                  v23 = sub_1ACB8A6CC(a4 + 1, &v25);
                  if (HIDWORD(v25))
                    v15 = -1;
                  else
                    v15 = v25;
                  v16 = (v23 + 1);
                }
                else
                {
                  v15 = v21 & 0x7F | (v15 << 14) & 0x1FC07F | ((v19 & 0x7F) << 7);
                  v16 = 4;
                }
              }
              else
              {
                v15 = ((v15 & 0x7F) << 7) | v19;
                v16 = 3;
              }
            }
            else
            {
              v16 = 2;
            }
            v9 = v16 + v15;
          }
        }
        v10 = v9;
        result = (void **)memcpy(v5, a4, v9);
        v11 = (int)v11;
        goto LABEL_5;
      }
LABEL_39:
      v11 = (int)v11;
      result = (void **)memcpy(v5, __src, (int)v11);
      v9 = 1;
      v10 = (int)v11;
LABEL_5:
      v5 += v10;
      __src += v11;
      a4 += v9;
      if (!--v8)
        goto LABEL_40;
    }
    LODWORD(v11) = 9;
LABEL_13:
    v14 = *a4;
    if (*a4)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_40:
  *v4 = v5;
  return result;
}

uint64_t sub_1ACCAEBAC(_BYTE **a1, uint64_t a2, int a3, char *a4, char *a5, char *a6, char *a7)
{
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v28;
  size_t __n;
  char *v31;
  char *v32;
  char *v33;
  char *v34;

  v33 = a5;
  v34 = a4;
  v31 = a7;
  v32 = a6;
  v12 = *a1;
  LODWORD(v13) = *(_DWORD *)(a2 + 16);
  if (a3)
    goto LABEL_2;
  if ((int)v13 < 1)
    return 0;
  v28 = a7;
  v22 = 0;
  v23 = 0;
  do
  {
    __n = 0;
    v24 = sub_1ACCAED88(&v34, &v33, (int *)&__n + 1);
    v25 = sub_1ACCAED88(&v32, &v31, (int *)&__n);
    v26 = SHIDWORD(__n);
    if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + v22))
      goto LABEL_19;
    if (HIDWORD(__n) != (_DWORD)__n || memcmp(v24, v25, SHIDWORD(__n)))
    {
      v23 = 1;
LABEL_19:
      memcpy(v12, v24, v26);
      v12 += v26;
      goto LABEL_20;
    }
    *v12++ = 0;
LABEL_20:
    ++v22;
    v13 = *(int *)(a2 + 16);
  }
  while (v22 < v13);
  a7 = v28;
  if (!v23)
    return 0;
LABEL_2:
  v33 = a5;
  v34 = a4;
  v31 = a7;
  v32 = a6;
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = a1;
    while (1)
    {
      __n = 0;
      v16 = sub_1ACCAED88(&v34, &v33, (int *)&__n + 1);
      v17 = sub_1ACCAED88(&v32, &v31, (int *)&__n);
      if (a3)
        break;
      if (!*(_BYTE *)(*(_QWORD *)(a2 + 40) + v14))
      {
        v18 = __n;
        v20 = HIDWORD(__n);
        if (HIDWORD(__n) != (_DWORD)__n)
          goto LABEL_9;
        v21 = memcmp(v16, v17, SHIDWORD(__n));
        v18 = v20;
        if (v21)
          goto LABEL_9;
      }
      *v12++ = 0;
LABEL_6:
      if (++v14 >= *(int *)(a2 + 16))
        goto LABEL_24;
    }
    v18 = __n;
LABEL_9:
    v19 = v18;
    memcpy(v12, v17, v18);
    v12 += v19;
    goto LABEL_6;
  }
  v15 = a1;
LABEL_24:
  *v15 = v12;
  return 1;
}

char *sub_1ACCAED88(char **a1, char **a2, int *a3)
{
  char *v5;
  char *v6;
  int v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  BOOL v18;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  unint64_t v25;

  v5 = *a1;
  v6 = *a2;
  if (*a2)
  {
    v8 = *v6;
    v9 = 1;
    if (*v6)
    {
      v10 = *a2;
      if (v8 != 5 && v8 != 255)
      {
        if ((v8 - 1) >= 2)
        {
          v11 = v6[1];
          if ((v11 & 0x80) != 0)
          {
            v13 = v6[2];
            if (v6[2] < 0)
            {
              v14 = v6[3];
              if (v14 < 0)
              {
                v25 = 0;
                v15 = sub_1ACB8A6CC(v6 + 1, &v25);
                if (HIDWORD(v25))
                  v11 = -1;
                else
                  v11 = v25;
                v12 = (v15 + 1);
              }
              else
              {
                v11 = v14 & 0x7F | (v11 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
                v12 = 4;
              }
            }
            else
            {
              v11 = ((v11 & 0x7F) << 7) | v13;
              v12 = 3;
            }
          }
          else
          {
            v12 = 2;
          }
          v9 = v12 + v11;
        }
        else
        {
          v9 = 9;
        }
      }
      *a3 = v9;
    }
    else
    {
      v10 = 0;
    }
    *a2 = &v6[v9];
  }
  else
  {
    v10 = 0;
  }
  v16 = *v5;
  v17 = 1;
  if (*v5)
    v18 = v16 == 5;
  else
    v18 = 1;
  if (!v18 && v16 != 255)
  {
    if ((v16 - 1) >= 2)
    {
      v20 = v5[1];
      if ((v20 & 0x80) != 0)
      {
        v22 = v5[2];
        if (v5[2] < 0)
        {
          v23 = v5[3];
          if (v23 < 0)
          {
            v25 = 0;
            v24 = sub_1ACB8A6CC(v5 + 1, &v25);
            if (HIDWORD(v25))
              v20 = -1;
            else
              v20 = v25;
            v21 = (v24 + 1);
          }
          else
          {
            v20 = v23 & 0x7F | (v20 << 14) & 0x1FC07F | ((v22 & 0x7F) << 7);
            v21 = 4;
          }
        }
        else
        {
          v20 = ((v20 & 0x7F) << 7) | v22;
          v21 = 3;
        }
      }
      else
      {
        v21 = 2;
      }
      v17 = v21 + v20;
      if (!v10)
        goto LABEL_30;
      goto LABEL_31;
    }
    v17 = 9;
  }
  if (!v10)
  {
LABEL_30:
    *a3 = v17;
    v10 = v5;
  }
LABEL_31:
  *a1 = &v5[v17];
  return v10;
}

uint64_t sub_1ACCAEF64(uint64_t result, int a2, char *__src, int a4, char *a5, int a6, _DWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  unint64_t v38;

  if (!*a7)
  {
    v10 = result;
    v11 = *(int *)(result + 12);
    v12 = *(int *)(result + 8) + (uint64_t)(a6 + a4);
    if (v12 <= v11)
      goto LABEL_13;
    if ((_DWORD)v11)
      v14 = *(int *)(result + 12);
    else
      v14 = 128;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v14 < v12);
    if (v15 >= 1073741696 && (v14 = 2147483391, v12 > 2147483391)
      || (v16 = *(_QWORD *)result, result = sqlite3_initialize(), (_DWORD)result)
      || (result = sub_1ACB6BB48(v16, v14)) == 0)
    {
      *a7 = 7;
      return result;
    }
    *(_QWORD *)v10 = result;
    *(_DWORD *)(v10 + 12) = v14;
    if (!*a7)
    {
LABEL_13:
      v17 = *(_QWORD *)v10;
      v18 = (char *)(*(_QWORD *)v10 + *(int *)(v10 + 8));
      if (a2 >= 1)
      {
        do
        {
          v21 = *__src;
          LODWORD(v23) = 1;
          if (*__src)
            v22 = v21 == 5;
          else
            v22 = 1;
          if (!v22 && v21 != 255)
          {
            if ((v21 - 1) >= 2)
            {
              v26 = __src[1];
              if ((v26 & 0x80) != 0)
              {
                v28 = __src[2];
                if (__src[2] < 0)
                {
                  v29 = __src[3];
                  if (v29 < 0)
                  {
                    v38 = 0;
                    v30 = sub_1ACB8A6CC(__src + 1, &v38);
                    if (HIDWORD(v38))
                      v26 = -1;
                    else
                      v26 = v38;
                    v27 = (v30 + 1);
                  }
                  else
                  {
                    v26 = v29 & 0x7F | (v26 << 14) & 0x1FC07F | ((v28 & 0x7F) << 7);
                    v27 = 4;
                  }
                }
                else
                {
                  v26 = ((v26 & 0x7F) << 7) | v28;
                  v27 = 3;
                }
              }
              else
              {
                v27 = 2;
              }
              LODWORD(v23) = v27 + v26;
            }
            else
            {
              LODWORD(v23) = 9;
            }
          }
          v31 = *a5;
          v19 = 1;
          if (*a5)
            v32 = v31 == 5;
          else
            v32 = 1;
          if (!v32 && v31 != 255)
          {
            if ((v31 - 1) < 2)
            {
              v19 = 9;
            }
            else
            {
              v33 = a5[1];
              if ((v33 & 0x80) != 0)
              {
                v35 = a5[2];
                if (a5[2] < 0)
                {
                  v36 = a5[3];
                  if (v36 < 0)
                  {
                    v38 = 0;
                    v37 = sub_1ACB8A6CC(a5 + 1, &v38);
                    if (HIDWORD(v38))
                      v33 = -1;
                    else
                      v33 = v38;
                    v34 = (v37 + 1);
                  }
                  else
                  {
                    v33 = v36 & 0x7F | (v33 << 14) & 0x1FC07F | ((v35 & 0x7F) << 7);
                    v34 = 4;
                  }
                }
                else
                {
                  v33 = ((v33 & 0x7F) << 7) | v35;
                  v34 = 3;
                }
              }
              else
              {
                v34 = 2;
              }
              v19 = v34 + v33;
            }
          }
          if (v21 == 255 || v21 == 0)
          {
            v24 = v19;
            result = (uint64_t)memcpy(v18, a5, v19);
            v23 = (int)v23;
            v25 = v19;
          }
          else
          {
            v23 = (int)v23;
            result = (uint64_t)memcpy(v18, __src, (int)v23);
            v24 = v19;
            v25 = (int)v23;
          }
          v18 += v25;
          __src += v23;
          a5 += v24;
          --a2;
        }
        while (a2);
        v17 = *(_QWORD *)v10;
      }
      *(_DWORD *)(v10 + 8) = (_DWORD)v18 - v17;
    }
  }
  return result;
}

uint64_t sub_1ACCAF21C(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;

  result = sqlite3_declare_vtab(a1, "CREATE TABLE x(value,pointer hidden,count hidden,ctype hidden)");
  if (!(_DWORD)result)
  {
    if (sqlite3_initialize())
    {
      *a5 = 0;
      return 7;
    }
    v7 = sub_1ACB5D828(24);
    *a5 = v7;
    if (!v7)
      return 7;
    v8 = (_QWORD *)v7;
    result = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  return result;
}

uint64_t sub_1ACCAF27C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(int *)a2 < 1)
    goto LABEL_19;
  v2 = 0;
  v3 = *(_QWORD *)(a2 + 8) + 5;
  v4 = -1;
  v5 = -1;
  v6 = -1;
  v7 = (unsigned __int8 *)v3;
  do
  {
    v8 = *v7;
    v7 += 12;
    if (v8 && *(_BYTE *)(v3 - 1) == 2)
    {
      v9 = *(_DWORD *)(v3 - 5);
      if (v9 == 1)
        v10 = v2;
      else
        v10 = v6;
      if (v9 == 2)
      {
        v10 = v6;
        v11 = v2;
      }
      else
      {
        v11 = v5;
      }
      if (v9 == 3)
      {
        v4 = v2;
      }
      else
      {
        v6 = v10;
        v5 = v11;
      }
    }
    ++v2;
    v3 = (uint64_t)v7;
  }
  while (*(_DWORD *)a2 != v2);
  if ((v6 & 0x80000000) != 0)
  {
LABEL_19:
    *(_QWORD *)(a2 + 64) = 0x41DFFFFFFFC00000;
    *(_QWORD *)(a2 + 72) = 0x7FFFFFFFLL;
    *(_DWORD *)(a2 + 40) = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 32);
    v13 = v12 + 8 * v6;
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 72) = 100;
    *(_DWORD *)(a2 + 40) = 1;
    if ((v5 & 0x80000000) == 0)
    {
      v14 = v12 + 8 * v5;
      *(_DWORD *)v14 = 2;
      *(_BYTE *)(v14 + 4) = 1;
      *(_DWORD *)(a2 + 40) = 2;
      if ((v4 & 0x80000000) == 0)
      {
        v15 = v12 + 8 * v4;
        *(_DWORD *)v15 = 3;
        *(_BYTE *)(v15 + 4) = 1;
        *(_DWORD *)(a2 + 40) = 3;
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1ACCAF378(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

double sub_1ACCAF424(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v4;

  if (!sqlite3_initialize())
  {
    v4 = sub_1ACB5D828(40);
    if (v4)
    {
      *(_QWORD *)(v4 + 32) = 0;
      result = 0.0;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t sub_1ACCAF474(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACCAF520(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t k;
  uint64_t v28;
  uint64_t v29;
  uint64_t m;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t n;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (_QWORD *)(a1 + 16);
  if (a2 - 2 >= 2)
  {
    if (a2 == 1)
    {
      v14 = *a5;
      if (*a5)
      {
        if ((*(_WORD *)(v14 + 20) & 0xFBF) == 0xA01
          && *(_BYTE *)(v14 + 23) == 112
          && !strcmp(*(const char **)v14, "carray-bind"))
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(int *)(v15 + 8);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
            *(_QWORD *)(a1 + 24) = v16;
            v17 = *(_BYTE *)(v15 + 12) & 7;
            goto LABEL_71;
          }
        }
      }
      else
      {
        sub_1ACBBE20C(97100);
      }
    }
    goto LABEL_72;
  }
  v9 = *a5;
  if (!*a5)
  {
    sub_1ACBBE20C(97100);
LABEL_18:
    v13 = 0;
    *v8 = 0;
    goto LABEL_19;
  }
  if ((*(_WORD *)(v9 + 20) & 0xFBF) != 0xA01 || *(_BYTE *)(v9 + 23) != 112 || strcmp(*(const char **)v9, "carray"))
    goto LABEL_18;
  v10 = *(_QWORD *)(v9 + 8);
  *v8 = v10;
  if (!v10)
  {
LABEL_54:
    v13 = 0;
    goto LABEL_19;
  }
  v11 = a5[1];
  if (!v11)
  {
    sub_1ACBBE20C(89699);
    v13 = 0;
    goto LABEL_19;
  }
  v12 = *(_WORD *)(v11 + 20);
  if ((v12 & 0x24) != 0)
  {
    v13 = *(_QWORD *)v11;
    goto LABEL_19;
  }
  if ((v12 & 8) == 0)
  {
    if ((v12 & 0x12) != 0 && *(_QWORD *)(v11 + 8))
    {
      v13 = sub_1ACBF2FC0(v11);
      goto LABEL_19;
    }
    goto LABEL_54;
  }
  v33 = *(double *)v11;
  if (*(double *)v11 >= -9.22337204e18)
  {
    if (v33 <= 9.22337204e18)
      v13 = (uint64_t)v33;
    else
      v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v13 = 0x8000000000000000;
  }
LABEL_19:
  *(_QWORD *)(a1 + 24) = v13;
  if (a2 <= 2)
  {
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_72;
  }
  v18 = a5[2];
  if (!v18)
    goto LABEL_36;
  v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
  {
    v18 = *(_QWORD *)(v18 + 8);
    if (!v18)
      goto LABEL_36;
    goto LABEL_28;
  }
  if ((v19 & 1) != 0)
  {
    v18 = 0;
    goto LABEL_36;
  }
  v18 = sub_1ACBF2B64((int *)v18, 1);
  if (!v18)
  {
LABEL_36:
    *(_QWORD *)(*(_QWORD *)a1 + 16) = sqlite3_mprintf("unknown datatype: %Q", v18);
    return 1;
  }
LABEL_28:
  for (i = 0; ; ++i)
  {
    v21 = *(unsigned __int8 *)(v18 + i);
    v22 = aInt32[i];
    if ((_DWORD)v21 != (_DWORD)v22)
      break;
    if (!*(_BYTE *)(v18 + i))
    {
      v17 = 0;
      goto LABEL_71;
    }
LABEL_30:
    ;
  }
  if (byte_1ACCB6333[v21] == byte_1ACCB6333[v22])
    goto LABEL_30;
  for (j = 0; ; ++j)
  {
    v25 = *(unsigned __int8 *)(v18 + j);
    v26 = aInt64_0[j];
    if ((_DWORD)v25 != (_DWORD)v26)
      break;
    if (!*(_BYTE *)(v18 + j))
    {
      v17 = 1;
      goto LABEL_71;
    }
LABEL_39:
    ;
  }
  if (byte_1ACCB6333[v25] == byte_1ACCB6333[v26])
    goto LABEL_39;
  for (k = 0; ; ++k)
  {
    v28 = *(unsigned __int8 *)(v18 + k);
    v29 = aDouble[k];
    if ((_DWORD)v28 != (_DWORD)v29)
      break;
    if (!*(_BYTE *)(v18 + k))
    {
      v17 = 2;
      goto LABEL_71;
    }
LABEL_45:
    ;
  }
  if (byte_1ACCB6333[v28] == byte_1ACCB6333[v29])
    goto LABEL_45;
  for (m = 0; ; ++m)
  {
    v31 = *(unsigned __int8 *)(v18 + m);
    v32 = aChar_0[m];
    if ((_DWORD)v31 != (_DWORD)v32)
      break;
    if (!*(_BYTE *)(v18 + m))
    {
      v17 = 3;
      goto LABEL_71;
    }
LABEL_57:
    ;
  }
  if (byte_1ACCB6333[v31] == byte_1ACCB6333[v32])
    goto LABEL_57;
  for (n = 0; ; ++n)
  {
    v35 = *(unsigned __int8 *)(v18 + n);
    v36 = aStructIovec[n];
    if ((_DWORD)v35 == (_DWORD)v36)
      break;
    if (byte_1ACCB6333[v35] != byte_1ACCB6333[v36])
      goto LABEL_36;
LABEL_67:
    ;
  }
  if (*(_BYTE *)(v18 + n))
    goto LABEL_67;
  v17 = 4;
LABEL_71:
  *(_BYTE *)(a1 + 32) = v17;
LABEL_72:
  result = 0;
  *(_QWORD *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1ACCAF8B4(uint64_t a1)
{
  ++*(_QWORD *)(a1 + 8);
  return 0;
}

BOOL sub_1ACCAF8C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 24);
}

uint64_t sub_1ACCAF8DC(uint64_t a1, int **a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  if (a3 != 1)
  {
    if (a3 != 3)
    {
      if (a3 == 2)
      {
        v3 = *(_QWORD *)(a1 + 24);
        if (a2)
        {
LABEL_5:
          v4 = (uint64_t)*a2;
          if (((*a2)[5] & 0x9000) != 0)
          {
            sub_1ACBF327C(v4, v3);
          }
          else
          {
            *(_QWORD *)v4 = v3;
            *(_WORD *)(v4 + 20) = 4;
          }
          return 0;
        }
LABEL_18:
        v11 = 97423;
      }
      else
      {
        switch(*(_BYTE *)(a1 + 32))
        {
          case 0:
            if (a2)
            {
              v3 = *(int *)(*(_QWORD *)(a1 + 16) + 4 * *(_QWORD *)(a1 + 8) - 4);
              goto LABEL_5;
            }
            v11 = 97413;
            break;
          case 1:
            if (!a2)
              goto LABEL_18;
            v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) - 8);
            goto LABEL_5;
          case 2:
            if (!a2)
            {
              v11 = 97379;
              break;
            }
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) - 8);
            v13 = *a2;
            if (((*a2)[5] & 0x9000) != 0)
              sub_1ACBF2A54(*a2);
            else
              *((_WORD *)v13 + 10) = 1;
            *(_QWORD *)v13 = v12;
            *((_WORD *)v13 + 10) = 8;
            return 0;
          case 3:
            if (!a2)
              goto LABEL_24;
            v14 = *(char **)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 8) - 8);
            v6 = (uint64_t)a2;
            v7 = v14;
            v8 = -1;
            v9 = 1;
            v10 = -1;
            goto LABEL_9;
          case 4:
            if (a2)
            {
              v16 = *(_QWORD *)(a1 + 16);
              v17 = *(_QWORD *)(a1 + 8) - 1;
              v8 = *(_DWORD *)(v16 + 16 * v17 + 8);
              if ((v8 & 0x80000000) == 0)
              {
                v6 = (uint64_t)a2;
                v7 = *(char **)(v16 + 16 * v17);
                v9 = 0;
                v10 = -1;
                goto LABEL_9;
              }
            }
            v11 = 97348;
            break;
          default:
            v3 = 0;
            if (!a2)
              goto LABEL_18;
            goto LABEL_5;
        }
      }
LABEL_25:
      sub_1ACBBE20C(v11);
      return 0;
    }
    if (!a2)
    {
LABEL_24:
      v11 = 97480;
      goto LABEL_25;
    }
    v5 = off_1E5C75720[*(unsigned __int8 *)(a1 + 32)];
    v6 = (uint64_t)a2;
    v7 = v5;
    v8 = -1;
    v9 = 1;
    v10 = 0;
LABEL_9:
    sub_1ACBC69D0(v6, v7, v8, v9, (uint64_t (*)(uint64_t))v10);
  }
  return 0;
}

uint64_t sub_1ACCAFAD0(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1ACCAFAE4(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  const char *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  size_t j;
  uint64_t v29;
  int v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t k;
  unsigned int v35;
  int v36;
  const char *v37;
  const char *v38;
  int v39;
  const char *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unsigned __int8 *m;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  unsigned __int8 *n;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unsigned __int8 *ii;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  const char *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  const char *v72;
  int v73;
  uint64_t v74;
  int v75;
  const char *v76;
  int v77;
  uint64_t v78;
  FILE *v79;
  const char *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  int v93;
  sqlite3_str *v94;
  const char *v95;
  void (**v96)(const char *);
  FILE *v97;
  void (**v98)(FILE *);
  char *v99;
  uint64_t (**v100)(char *);
  uint64_t v101;
  uint64_t (**v102)(uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  _BOOL4 v115;
  const char *v116;
  int v118;
  int v119;
  int jj;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (**v137)(const char *);
  char v138;
  int v142;
  const char *v143;
  FILE *v144;
  char *v145;
  _OWORD v146[2];
  __int128 v147;
  __int128 v148;
  _OWORD v149[12];
  uint64_t v150;
  uint64_t v151;

  v8 = (uint64_t *)a6;
  v151 = *MEMORY[0x1E0C80C00];
  memset(v146, 0, sizeof(v146));
  v147 = 0u;
  v148 = 0u;
  memset(v149, 0, sizeof(v149));
  v150 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  if ((int)a3 < 4)
  {
LABEL_101:
    sub_1ACCB0EE8((uint64_t)v146, "must specify either filename= or data= but not both", a3, a4, (uint64_t)a5, a6, a7, a8, v138);
    v81 = 0;
    goto LABEL_121;
  }
  v10 = a3;
  v11 = 0xFFFFFFFFLL;
  v142 = -99;
  v12 = MEMORY[0x1E0C80978];
  for (i = 3; i != v10; ++i)
  {
    v14 = v11;
    v15 = *(const char **)(a4 + 8 * i);
    v16 = sub_1ACCB0F54("filename", 8, v15);
    if (v16)
    {
      v23 = 0;
      v24 = "filename";
      goto LABEL_9;
    }
    v16 = sub_1ACCB0F54("data", 4, v15);
    if (v16)
    {
      v23 = 1;
      v24 = "data";
      goto LABEL_9;
    }
    v16 = sub_1ACCB0F54("schema", 6, v15);
    if (v16)
    {
      v24 = "schema";
      v23 = 2;
LABEL_9:
      LOBYTE(v149[0]) = 0;
      if ((&v143)[v23])
      {
        v138 = (char)v24;
        v25 = "more than one '%s' parameter";
      }
      else
      {
        v26 = sqlite3_mprintf("%s", (const char *)v16);
        (&v143)[v23] = v26;
        if (v26)
        {
          v27 = v26;
          for (j = strlen(v26); j; --j)
          {
            v29 = v27[j];
            if (v27[j] < 0)
            {
              if (!__maskrune(v29, 0x4000uLL))
                break;
            }
            else if ((*(_DWORD *)(v12 + 4 * v29 + 60) & 0x4000) == 0)
            {
              break;
            }
          }
          v27[j] = 0;
          v30 = *(unsigned __int8 *)v27;
          if (v30 == 39 || v30 == 34)
          {
            v31 = strlen(v27);
            if (v31 >= 2)
            {
              v32 = v31 - 1;
              if (v27[v31 - 1] == v30)
              {
                if (v32 < 2)
                {
                  v51 = 0;
                }
                else
                {
                  v33 = 0;
                  for (k = 1; k < v32; ++k)
                  {
                    v36 = v27[k];
                    if (v36 == v30)
                    {
                      if (v27[k + 1] == v30)
                        ++k;
                      LOBYTE(v36) = v27[k];
                    }
                    v35 = v33 + 1;
                    v27[v33++] = v36;
                  }
                  v51 = v35;
                }
                v27[v51] = 0;
              }
            }
          }
LABEL_12:
          v11 = v14;
          if (!LOBYTE(v149[0]))
            continue;
LABEL_120:
          v81 = 0;
          v8 = (uint64_t *)a6;
          goto LABEL_121;
        }
        v25 = "out of memory";
      }
      sub_1ACCB0EE8((uint64_t)v146, v25, v17, v18, v19, v20, v21, v22, v138);
      goto LABEL_12;
    }
    v37 = v15 - 1;
    v38 = v15 + 8;
    do
    {
      v40 = v38;
      v41 = *((unsigned __int8 *)v37 + 1);
      if (v37[1] < 0)
        v39 = __maskrune(v41, 0x4000uLL);
      else
        v39 = *(_DWORD *)(v12 + 4 * v41 + 60) & 0x4000;
      ++v37;
      v38 = v40 + 1;
    }
    while (v39);
    if (strncmp("header", v37, 6uLL))
    {
LABEL_40:
      v42 = sub_1ACCB0F54("columns", 7, v15);
      if (v42)
      {
        if (v142 < 1)
        {
          v11 = v14;
          v142 = atoi((const char *)v42);
          if (v142 <= 0)
          {
            v92 = "column= value must be positive";
            goto LABEL_119;
          }
          continue;
        }
        v92 = "more than one 'columns' parameter";
LABEL_119:
        sub_1ACCB0EE8((uint64_t)v146, v92, a3, a4, (uint64_t)a5, a6, a7, a8, v138);
      }
      else
      {
        sub_1ACCB0EE8((uint64_t)v146, "bad parameter: '%s'", a3, a4, (uint64_t)a5, a6, a7, a8, (char)v15);
      }
      goto LABEL_120;
    }
    v43 = (char *)(v37 + 6);
    do
    {
      v45 = (unsigned __int8 *)v43;
      v46 = (unsigned __int8 *)v40;
      v47 = *v43;
      if (v47 < 0)
        v44 = __maskrune(v47, 0x4000uLL);
      else
        v44 = *(_DWORD *)(v12 + 4 * v47 + 60) & 0x4000;
      v43 = (char *)(v45 + 1);
      ++v40;
    }
    while (v44);
    if (!*v45)
    {
LABEL_76:
      v11 = 1;
      goto LABEL_77;
    }
    if (*v45 != 61)
      goto LABEL_40;
    do
    {
      v49 = v46;
      v50 = v45[1];
      if ((char)v45[1] < 0)
        v48 = __maskrune(v50, 0x4000uLL);
      else
        v48 = *(_DWORD *)(v12 + 4 * v50 + 60) & 0x4000;
      ++v45;
      ++v46;
    }
    while (v48);
    v52 = "yes";
    for (m = v45; ; ++m)
    {
      v54 = *(unsigned __int8 *)v52;
      v55 = *m;
      if ((_DWORD)v54 != (_DWORD)v55)
        break;
      if (!*v52)
        goto LABEL_76;
LABEL_61:
      ++v52;
    }
    if (byte_1ACCB6333[v54] == byte_1ACCB6333[v55])
      goto LABEL_61;
    v56 = "on";
    for (n = v45; ; ++n)
    {
      v58 = *(unsigned __int8 *)v56;
      v59 = *n;
      if ((_DWORD)v58 != (_DWORD)v59)
        break;
      if (!*v56)
        goto LABEL_76;
LABEL_67:
      ++v56;
    }
    if (byte_1ACCB6333[v58] == byte_1ACCB6333[v59])
      goto LABEL_67;
    v60 = "true";
    for (ii = v45; ; ++ii)
    {
      v62 = *(unsigned __int8 *)v60;
      v63 = *ii;
      if ((_DWORD)v62 != (_DWORD)v63)
        break;
      if (!*v60)
        goto LABEL_76;
LABEL_73:
      ++v60;
    }
    if (byte_1ACCB6333[v62] == byte_1ACCB6333[v63])
      goto LABEL_73;
    v64 = *v45;
    if (v64 == 49 && !v45[1])
      goto LABEL_76;
    v65 = v49;
    v66 = *v45;
    v67 = "no";
    while (2)
    {
      v69 = *(unsigned __int8 *)v67;
      if ((_DWORD)v69 == v66)
      {
        if (!v66)
          goto LABEL_96;
LABEL_83:
        ++v67;
        v68 = *v65++;
        v66 = v68;
        continue;
      }
      break;
    }
    if (byte_1ACCB6333[v69] == byte_1ACCB6333[v66])
      goto LABEL_83;
    v70 = v49;
    v71 = *v45;
    v72 = "off";
    while (2)
    {
      v74 = *(unsigned __int8 *)v72;
      if ((_DWORD)v74 == v71)
      {
        if (!v71)
          goto LABEL_96;
LABEL_88:
        ++v72;
        v73 = *v70++;
        v71 = v73;
        continue;
      }
      break;
    }
    if (byte_1ACCB6333[v74] == byte_1ACCB6333[v71])
      goto LABEL_88;
    v75 = *v45;
    v76 = "false";
    while (2)
    {
      v78 = *(unsigned __int8 *)v76;
      if ((_DWORD)v78 == v75)
      {
        if (!v75)
          goto LABEL_96;
        goto LABEL_93;
      }
      if (byte_1ACCB6333[v78] == byte_1ACCB6333[v75])
      {
LABEL_93:
        ++v76;
        v77 = *v49++;
        v75 = v77;
        continue;
      }
      break;
    }
    if (v64 != 48 || v45[1])
      goto LABEL_40;
LABEL_96:
    v11 = 0;
LABEL_77:
    if ((v14 & 0x80000000) == 0)
    {
      v92 = "more than one 'header' parameter";
      goto LABEL_119;
    }
  }
  v80 = v143;
  v79 = v144;
  v8 = (uint64_t *)a6;
  if ((v143 != 0) != (v144 == 0))
    goto LABEL_101;
  if ((v142 < 1 || (_DWORD)v11 == 1) && sub_1ACCB1058((FILE **)v146, v143, v144))
  {
    v81 = 0;
    goto LABEL_121;
  }
  if (sqlite3_initialize())
  {
    *a5 = 0;
    goto LABEL_108;
  }
  v88 = sub_1ACB5D828(56);
  *a5 = v88;
  if (!v88)
  {
LABEL_108:
    sub_1ACCB0EE8((uint64_t)v146, "out of memory", v82, v83, v84, v85, v86, v87, v138);
    v81 = 7;
    goto LABEL_121;
  }
  v90 = v88;
  *(_QWORD *)(v88 + 48) = 0;
  *(_OWORD *)(v88 + 16) = 0u;
  *(_OWORD *)(v88 + 32) = 0u;
  *(_OWORD *)v88 = 0u;
  v91 = v145;
  if (!v145)
  {
    v93 = v142;
    if (sqlite3_initialize() || (v104 = sub_1ACB5D828(32)) == 0)
    {
      v94 = (sqlite3_str *)&unk_1EECAC608;
    }
    else
    {
      v94 = (sqlite3_str *)v104;
      *(_QWORD *)v104 = 0;
      *(_QWORD *)(v104 + 8) = 0;
      *(_DWORD *)(v104 + 16) = 0;
      *(_QWORD *)(v104 + 20) = 2147483645;
      *(_WORD *)(v104 + 28) = 0;
    }
    sqlite3_str_appendf(v94, "CREATE TABLE x(");
    if (v142 < 0 && (int)v11 <= 0)
    {
      v93 = 0;
      do
      {
        sub_1ACCB11A0((uint64_t)v146, v105, v106, v107, v108, v109, v110, v111);
        ++v93;
      }
      while ((_DWORD)v147 == 44);
    }
    if (v93 < 1 || (int)v11 > 0)
    {
      v112 = 0;
      v113 = v93;
      v115 = v93 < 0 && (_DWORD)v11 != 0;
      v116 = &byte_1ACCBEAEE;
      do
      {
        sub_1ACCB11A0((uint64_t)v146, v105, v106, v107, v108, v109, v110, v111);
        v118 = v113 > 0 && v112 < v113 || v115;
        if (v118 == 1)
        {
          v138 = (char)v116;
          sqlite3_str_appendf(v94, "%s\"%w\" TEXT");
          ++v112;
          v116 = ",";
        }
      }
      while ((_DWORD)v147 == 44);
      if ((v113 & 0x80000000) == 0)
      {
        if (v112 < v113)
        {
          v119 = v112 + 1;
          sqlite3_str_appendf(v94, "%sc%d TEXT", v116, v119);
          while (v113 != v119)
            sqlite3_str_appendf(v94, "%sc%d TEXT", ",", ++v119);
        }
        v112 = v113;
      }
    }
    else
    {
      sqlite3_str_appendf(v94, "%sc%d TEXT", &byte_1ACCBEAEE, 0);
      if (v93 == 1)
      {
        v112 = 1;
      }
      else
      {
        for (jj = 1; jj != v93; ++jj)
          sqlite3_str_appendf(v94, "%sc%d TEXT", ",", jj);
        v112 = v93;
      }
    }
    *(_DWORD *)(v90 + 48) = v112;
    sqlite3_str_appendf(v94, ")");
    v121 = sqlite3_str_finish(v94);
    v145 = v121;
    if (v121)
    {
      v91 = v121;
      v80 = v143;
      v79 = v144;
      goto LABEL_190;
    }
    sub_1ACCB0EE8((uint64_t)v146, "out of memory", v122, v123, v124, v125, v126, v127, v138);
    v81 = 7;
LABEL_204:
    sub_1ACCB070C(v90);
LABEL_121:
    v95 = v143;
    if (!v143)
      goto LABEL_128;
    v96 = (void (**)(const char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v95);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v95);
      v95 = (const char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_128:
        v97 = v144;
        if (!v144)
          goto LABEL_135;
        v98 = (void (**)(FILE *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v97);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v97);
          v97 = (FILE *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
          {
LABEL_135:
            v99 = v145;
            if (!v145)
              goto LABEL_142;
            v100 = (uint64_t (**)(char *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v99);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v99);
              v99 = (char *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
              {
LABEL_142:
                if (!LOBYTE(v149[0]))
                  goto LABEL_151;
                v101 = *v8;
                if (*v8)
                {
                  v102 = &off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v101);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v101);
                    v101 = xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                      goto LABEL_150;
                    v102 = &xmmword_1ECD3B1D0;
                  }
                  (*v102)(v101);
                }
LABEL_150:
                *v8 = (uint64_t)sqlite3_mprintf("%s", (const char *)v149);
LABEL_151:
                sub_1ACCB1640((uint64_t)v146);
                if (v81 <= 1)
                  return 1;
                else
                  return v81;
              }
              v100 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
            }
            (*v100)(v99);
            goto LABEL_142;
          }
          v98 = (void (**)(FILE *))&xmmword_1ECD3B1D0;
        }
        (*v98)(v97);
        goto LABEL_135;
      }
      v96 = (void (**)(const char *))&xmmword_1ECD3B1D0;
    }
    (*v96)(v95);
    goto LABEL_128;
  }
  if (v142 < 0)
  {
    do
    {
      sub_1ACCB11A0((uint64_t)v146, v89, v82, v83, v84, v85, v86, v87);
      ++*(_DWORD *)(v90 + 48);
    }
    while ((_DWORD)v147 == 44);
  }
  else
  {
    *(_DWORD *)(v88 + 48) = v142;
  }
LABEL_190:
  v128 = 0;
  *(_QWORD *)(v90 + 24) = v80;
  *(_QWORD *)(v90 + 32) = v79;
  v143 = 0;
  v144 = 0;
  if ((_DWORD)v11 == 1)
  {
    if (v79)
    {
      v128 = SDWORD2(v147);
    }
    else
    {
      v129 = MEMORY[0x1AF446B7C](*(_QWORD *)&v146[0]);
      v128 = v129 - (int)v148 + DWORD2(v147);
    }
  }
  *(_QWORD *)(v90 + 40) = v128;
  sub_1ACCB1640((uint64_t)v146);
  v130 = sqlite3_declare_vtab(a1, v91);
  if (v130)
  {
    v81 = v130;
    sqlite3_errmsg(a1);
    sub_1ACCB0EE8((uint64_t)v146, "bad schema: '%s' - %s", v131, v132, v133, v134, v135, v136, (char)v91);
    goto LABEL_204;
  }
  v137 = (void (**)(const char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v91);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v91);
    v91 = (const char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v137 = (void (**)(const char *))&xmmword_1ECD3B1D0;
      goto LABEL_201;
    }
  }
  else
  {
LABEL_201:
    (*v137)(v91);
  }
  sqlite3_vtab_config(a1, 3);
  return 0;
}

uint64_t sub_1ACCB06F8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 64) = 0x412E848000000000;
  return 0;
}

uint64_t sub_1ACCB070C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v4 = *(_QWORD *)(v1 + 32);
  if (!v4)
    goto LABEL_15;
  v5 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_14;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v4);
  v4 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = &xmmword_1ECD3B1D0;
LABEL_14:
    (*v5)(v4);
  }
LABEL_15:
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_20:
    (*v6)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    goto LABEL_20;
  }
  return 0;
}

uint64_t sub_1ACCB089C(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);

  v4 = *(_DWORD *)(a1 + 48);
  if (sqlite3_initialize())
    return 7;
  v6 = 12 * v4 + 296;
  v7 = (char *)sub_1ACB5D828(v6);
  if (!v7)
    return 7;
  v8 = v7;
  bzero(v7, v6);
  v9 = (uint64_t)&v8[8 * *(int *)(a1 + 48) + 296];
  *((_QWORD *)v8 + 34) = v8 + 296;
  *((_QWORD *)v8 + 35) = v9;
  *a2 = v8;
  result = sub_1ACCB1058((FILE **)v8 + 1, *(const char **)(a1 + 24), *(FILE **)(a1 + 32));
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v10);
        v10 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_13;
        v11 = &xmmword_1ECD3B1D0;
      }
      (*v11)(v10);
    }
LABEL_13:
    *(_QWORD *)(a1 + 16) = sqlite3_mprintf("%s", v8 + 72);
    return 1;
  }
  return result;
}

uint64_t sub_1ACCB09D4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  __n128 v6;
  void (**v7)(uint64_t *, __n128);

  v1 = a1;
  v2 = *a1;
  if (*(int *)(*a1 + 48) >= 1)
  {
    for (i = 0; i < *(int *)(v2 + 48); ++i)
    {
      v4 = *(_QWORD *)(v1[34] + 8 * i);
      if (v4)
      {
        v5 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v4);
          v4 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_4;
          v5 = &xmmword_1ECD3B1D0;
        }
        (*v5)(v4);
      }
LABEL_4:
      *(_QWORD *)(v1[34] + 8 * i) = 0;
      *(_DWORD *)(v1[35] + 4 * i) = 0;
    }
  }
  v6.n128_f64[0] = sub_1ACCB1640((uint64_t)(v1 + 1));
  v7 = (void (**)(uint64_t *, __n128))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_16;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v7 = (void (**)(uint64_t *, __n128))&xmmword_1ECD3B1D0;
LABEL_16:
    (*v7)(v1, v6);
  }
  return 0;
}

uint64_t sub_1ACCB0B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  FILE **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v9 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 288) = 0;
  v10 = (FILE **)(a1 + 8);
  v11 = *(int *)(a1 + 24);
  if ((int)v11 >= *(_DWORD *)(a1 + 28) - 1)
  {
    if (sub_1ACCB17E0(a1 + 8, 0))
      return 7;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v11 + 1;
    *(_BYTE *)(v12 + v11) = 0;
  }
  v14 = *(_QWORD *)(v9 + 40);
  if (*v10)
  {
    fseek(*v10, v14, 0);
    v14 = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_QWORD *)(a1 + 48) = v14;
  sub_1ACCB0BE4((uint64_t *)a1, v14, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_1ACCB0BE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t);
  uint64_t i;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  char v29;

  v9 = 0;
  v10 = (uint64_t)(a1 + 1);
  v11 = *a1;
  while (1)
  {
    v13 = sub_1ACCB11A0(v10, a2, a3, a4, a5, a6, a7, a8);
    if (!v13)
    {
      if (v9)
        goto LABEL_19;
      a1[36] = -1;
      return 0;
    }
    if (v9 < *(_DWORD *)(v11 + 48))
      break;
LABEL_4:
    if (*((_DWORD *)a1 + 10) != 44)
      goto LABEL_19;
  }
  v14 = (const void *)v13;
  v12 = *((_DWORD *)a1 + 6);
  if (*(_DWORD *)(a1[35] + 4 * v9) > v12)
  {
LABEL_3:
    memcpy(*(void **)(a1[34] + 8 * v9++), v14, v12 + 1);
    goto LABEL_4;
  }
  v15 = *(_QWORD *)(a1[34] + 8 * v9);
  if (!sqlite3_initialize())
  {
    v22 = sub_1ACB6BB48(v15, v12 + 1);
    if (v22)
    {
      *(_QWORD *)(a1[34] + 8 * v9) = v22;
      *(_DWORD *)(a1[35] + 4 * v9) = *((_DWORD *)a1 + 6) + 1;
      v12 = *((_DWORD *)a1 + 6);
      goto LABEL_3;
    }
  }
  sub_1ACCB0EE8(v10, "out of memory", v16, v17, v18, v19, v20, v21, v29);
  v23 = *(_QWORD *)(v11 + 16);
  if (v23)
  {
    v24 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_16;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v23);
    v23 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v24 = &xmmword_1ECD3B1D0;
LABEL_16:
      (*v24)(v23);
    }
  }
  *(_QWORD *)(v11 + 16) = sqlite3_mprintf("%s", (const char *)a1 + 72);
LABEL_19:
  ++a1[36];
  if (v9 < *(_DWORD *)(v11 + 48))
  {
    for (i = v9; i < *(int *)(v11 + 48); ++i)
    {
      v26 = *(_QWORD *)(a1[34] + 8 * i);
      if (v26)
      {
        v27 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v26);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v26);
          v26 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_22;
          v27 = &xmmword_1ECD3B1D0;
        }
        (*v27)(v26);
      }
LABEL_22:
      *(_QWORD *)(a1[34] + 8 * i) = 0;
      *(_DWORD *)(a1[35] + 4 * i) = 0;
    }
  }
  return 0;
}

uint64_t sub_1ACCB0E6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 288) >> 63;
}

uint64_t sub_1ACCB0E78(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char *v3;

  if ((a3 & 0x80000000) == 0 && *(_DWORD *)(*a1 + 48) > (signed int)a3)
  {
    v3 = *(char **)(a1[34] + 8 * a3);
    if (v3)
    {
      if (a2)
        sub_1ACBC69D0(a2, v3, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      else
        sub_1ACBBE20C(97480);
    }
  }
  return 0;
}

uint64_t sub_1ACCB0ED8(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 288);
  return 0;
}

void sub_1ACCB0EE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v9;
  _QWORD v10[2];
  int v11;
  uint64_t v12;
  int v13;

  v9 = (_BYTE *)(a1 + 64);
  if (a2)
  {
    v10[0] = 0;
    v10[1] = a1 + 64;
    v11 = 200;
    v12 = 0;
    v13 = 0;
    sqlite3_str_vappendf((sqlite3_str *)v10, a2, &a9);
    v9 += HIDWORD(v12);
  }
  else
  {
    sub_1ACBBE20C(32991);
  }
  *v9 = 0;
}

unsigned __int8 *sub_1ACCB0F54(const char *a1, int a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = MEMORY[0x1E0C80978];
  do
  {
    while (1)
    {
      v7 = *(unsigned __int8 *)a3;
      if ((*a3 & 0x80000000) == 0)
        break;
      ++a3;
      if (!__maskrune(v7, 0x4000uLL))
        goto LABEL_5;
    }
    ++a3;
  }
  while ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) != 0);
  if (strncmp(a1, a3 - 1, a2))
    return 0;
LABEL_5:
  v8 = (unsigned __int8 *)&a3[a2 - 2];
  do
  {
    while (1)
    {
      v9 = v8[1];
      if (((char)v8[1] & 0x80000000) == 0)
        break;
      ++v8;
      if (!__maskrune(v9, 0x4000uLL))
        goto LABEL_10;
    }
    ++v8;
  }
  while ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000) != 0);
LABEL_10:
  if (*v8 != 61)
    return 0;
  do
  {
    while (1)
    {
      v11 = v8[1];
      if (((char)v8[1] & 0x80000000) == 0)
        break;
      ++v8;
      if (!__maskrune(v11, 0x4000uLL))
        return v8;
    }
    ++v8;
  }
  while ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x4000) != 0);
  return v8;
}

uint64_t sub_1ACCB1058(FILE **a1, const char *a2, FILE *__s)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  size_t v12;
  uint64_t v13;
  FILE *v14;
  FILE *v15;
  uint64_t (**v16)(FILE *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (!a2)
  {
    a1[7] = __s;
    v12 = strlen((const char *)__s);
    result = 0;
    a1[6] = (FILE *)v12;
    return result;
  }
  if (sqlite3_initialize())
  {
    a1[7] = 0;
LABEL_4:
    sub_1ACCB0EE8((uint64_t)a1, "out of memory", v5, v6, v7, v8, v9, v10, v23);
    return 1;
  }
  v13 = sub_1ACB5D828(1024);
  a1[7] = (FILE *)v13;
  if (!v13)
    goto LABEL_4;
  v14 = fopen(a2, "rb");
  *a1 = v14;
  if (!v14)
  {
    v15 = a1[7];
    if (v15)
    {
      v16 = (uint64_t (**)(FILE *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v15);
        v15 = (FILE *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_17;
        v16 = (uint64_t (**)(FILE *))&xmmword_1ECD3B1D0;
      }
      (*v16)(v15);
    }
LABEL_17:
    sub_1ACCB1640((uint64_t)a1);
    sub_1ACCB0EE8((uint64_t)a1, "cannot open '%s' for reading", v17, v18, v19, v20, v21, v22, (char)a2);
    return 1;
  }
  return 0;
}

uint64_t sub_1ACCB11A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;

  while (1)
  {
    *(_DWORD *)(a1 + 16) = 0;
    v9 = *(_QWORD *)(a1 + 40);
    if (v9 >= *(_QWORD *)(a1 + 48))
      break;
    v10 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = v9 + 1;
    v11 = *(unsigned __int8 *)(v10 + v9);
    if (v11 == 34)
      goto LABEL_27;
LABEL_6:
    if (v11 == -1)
    {
LABEL_26:
      result = 0;
      *(_DWORD *)(a1 + 32) = -1;
      return result;
    }
    if (v11 != 239 || *(_DWORD *)(a1 + 28))
    {
      while (1)
      {
LABEL_75:
        if (v11 <= 44)
        {
          switch(v11)
          {
            case -1:
              goto LABEL_88;
            case 10:
              ++*(_DWORD *)(a1 + 24);
              v41 = *(_DWORD *)(a1 + 16);
              v42 = __OFSUB__(v41, 1);
              v43 = v41 - 1;
              if (v43 < 0 == v42 && *(_BYTE *)(*(_QWORD *)(a1 + 8) + v43) == 13)
                *(_DWORD *)(a1 + 16) = v43;
LABEL_88:
              *(_DWORD *)(a1 + 32) = v11;
              goto LABEL_89;
            case 44:
              goto LABEL_88;
          }
        }
        v38 = *(int *)(a1 + 16);
        if ((int)v38 >= *(_DWORD *)(a1 + 20) - 1)
        {
          if (sub_1ACCB17E0(a1, v11))
            return 0;
        }
        else
        {
          v39 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v38 + 1;
          *(_BYTE *)(v39 + v38) = v11;
        }
        v40 = *(_QWORD *)(a1 + 40);
        if (v40 < *(_QWORD *)(a1 + 48))
        {
          v37 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = v40 + 1;
          v11 = *(unsigned __int8 *)(v37 + v40);
        }
        else
        {
          v11 = -1;
          if (*(_QWORD *)a1)
            v11 = sub_1ACCB1794(a1);
        }
      }
    }
    v12 = *(int *)(a1 + 16);
    if ((int)v12 >= *(_DWORD *)(a1 + 20) - 1)
    {
      sub_1ACCB17E0(a1, v11);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(v13 + v12) = v11;
    }
    v14 = *(_QWORD *)(a1 + 40);
    if (v14 >= *(_QWORD *)(a1 + 48))
    {
      if (!*(_QWORD *)a1)
        goto LABEL_73;
      v11 = sub_1ACCB1794(a1);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v14 + 1;
      v11 = *(unsigned __int8 *)(v15 + v14);
    }
    if (v11 != 187)
      goto LABEL_75;
    v16 = *(int *)(a1 + 16);
    if ((int)v16 >= *(_DWORD *)(a1 + 20) - 1)
    {
      sub_1ACCB17E0(a1, v11);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(v17 + v16) = v11;
    }
    v18 = *(_QWORD *)(a1 + 40);
    if (v18 >= *(_QWORD *)(a1 + 48))
    {
      if (!*(_QWORD *)a1)
      {
LABEL_73:
        v11 = -1;
        goto LABEL_75;
      }
      v11 = sub_1ACCB1794(a1);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v18 + 1;
      v11 = *(unsigned __int8 *)(v19 + v18);
    }
    if (v11 != 191)
      goto LABEL_75;
    *(_DWORD *)(a1 + 28) = 1;
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v11 = sub_1ACCB1794(a1);
  if (v11 != 34)
    goto LABEL_6;
LABEL_27:
  v21 = 0;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 24);
  while (1)
  {
    v25 = *(_QWORD *)(a1 + 40);
    if (v25 >= *(_QWORD *)(a1 + 48))
    {
      if (!*(_QWORD *)a1)
        goto LABEL_50;
      v27 = sub_1ACCB1794(a1);
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      v27 = *(unsigned __int8 *)(v26 + v25);
    }
    v28 = v21 == 34;
    if (v21 != 34 && v27 > 34)
    {
      v22 = v21;
      v21 = v27;
      goto LABEL_70;
    }
    if (v27 == 10)
      goto LABEL_37;
    v29 = 0;
    if (v21 == 34 && v27 == 34)
    {
      v30 = *(_QWORD *)(a1 + 40);
      if (v30 >= *(_QWORD *)(a1 + 48))
      {
        if (!*(_QWORD *)a1)
        {
          v21 = 0;
LABEL_50:
          v29 = 0;
          v28 = v21 == 34;
          v27 = -1;
          goto LABEL_51;
        }
        v21 = sub_1ACCB1794(a1);
        if (v21 > 34)
        {
LABEL_47:
          v22 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = v30 + 1;
        v21 = *(unsigned __int8 *)(v31 + v30);
        if (v21 > 0x22)
          goto LABEL_47;
      }
      v28 = 0;
      if (v21 != 10)
      {
        v22 = 0;
        if (v21 == -1)
          goto LABEL_98;
        goto LABEL_70;
      }
      v21 = 0;
LABEL_37:
      ++*(_DWORD *)(a1 + 24);
      v29 = 1;
      v27 = 10;
    }
LABEL_51:
    if (v27 == 44)
      v32 = 1;
    else
      v32 = v29;
    if (v28 && (v32 & 1) != 0)
      goto LABEL_94;
    if (v21 != 13 || v22 != 34)
      v29 = 0;
    if ((v29 & 1) != 0)
      goto LABEL_94;
    v34 = !v28;
    v35 = v27 == -1 ? v34 : 1;
    if ((v35 & 1) == 0)
      break;
    if (v27 == 13)
      v34 = 1;
    if ((v34 & 1) == 0)
    {
      sub_1ACCB0EE8(a1, "line %d: unescaped %c character", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 24));
      goto LABEL_89;
    }
    v22 = v21;
    v21 = v27;
    if (v27 == -1)
    {
LABEL_98:
      sub_1ACCB0EE8(a1, "line %d: unterminated %c-quoted field\n", a3, a4, a5, a6, a7, a8, v23);
      *(_DWORD *)(a1 + 32) = -1;
      goto LABEL_89;
    }
LABEL_70:
    v36 = *(int *)(a1 + 16);
    if ((int)v36 < *(_DWORD *)(a1 + 20) - 1)
    {
      v24 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(v24 + v36) = v21;
    }
    else if (sub_1ACCB17E0(a1, v21))
    {
      return 0;
    }
  }
  LOBYTE(v27) = -1;
LABEL_94:
  v45 = *(int *)(a1 + 16);
  v46 = (unsigned __int8 *)(v45 + *(_QWORD *)(a1 + 8) - 1);
  v47 = v45 - 1;
  do
  {
    *(_DWORD *)(a1 + 16) = v47;
    v48 = *v46--;
    --v47;
  }
  while (v48 != 34);
  *(_DWORD *)(a1 + 32) = (char)v27;
LABEL_89:
  v44 = *(_QWORD *)(a1 + 8);
  if (v44)
  {
    *(_BYTE *)(v44 + *(int *)(a1 + 16)) = 0;
    result = *(_QWORD *)(a1 + 8);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 28) = 1;
  return result;
}

double sub_1ACCB1640(uint64_t a1)
{
  FILE *v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  double result;

  v2 = *(FILE **)a1;
  if (v2)
  {
    fclose(v2);
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_8:
        (*v4)(v3);
        goto LABEL_9;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v4 = &xmmword_1ECD3B1D0;
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_15:
      (*v6)(v5);
      goto LABEL_16;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_15;
    }
  }
LABEL_16:
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1ACCB1794(uint64_t a1)
{
  size_t v2;

  v2 = fread(*(void **)(a1 + 56), 1uLL, 0x400uLL, *(FILE **)a1);
  if (!v2)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v2;
  return **(char **)(a1 + 56);
}

uint64_t sub_1ACCB17E0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = *(int *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 8);
  if (sqlite3_initialize() || (v13 = 2 * v4 + 100, (v14 = sub_1ACB6BB48(v5, v13)) == 0))
  {
    sub_1ACCB0EE8(a1, "out of memory", v6, v7, v8, v9, v10, v11, v17);
    return 1;
  }
  else
  {
    v15 = v14;
    result = 0;
    *(_QWORD *)(a1 + 8) = v15;
    v16 = *(int *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_DWORD *)(a1 + 20) = v13;
    *(_BYTE *)(v15 + v16) = a2;
  }
  return result;
}

int8x16_t *sub_1ACCB1864(uint64_t a1, int8x16_t *a2, int a3, int a4)
{
  char v4;
  size_t v8;
  uint64_t v9;
  int8x16_t *dataOut;
  unsigned __int8 *v11;
  const void *v12;
  int v13;
  size_t v14;
  int8x16_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  uint64_t v27;
  int8x16_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  int8x16_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned int v55;
  char v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v61;
  int v62;
  uint64_t v64;
  size_t v65;
  void *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  uint64_t v70;
  int8x16_t v71;
  int8x8_t *v72;
  int8x8_t *v73;
  int8x8_t *v74;
  uint64_t v75;
  int8x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  int iv;
  _BYTE v80[20];

  v4 = a4;
  *(_QWORD *)&v80[12] = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    if (*(_BYTE *)(a1 + 68))
      return a2;
    if (*(_QWORD *)(a1 + 96))
      goto LABEL_8;
LABEL_11:
    if (*(_BYTE *)(a1 + 70))
      return 0;
    v61 = (3 * *(_DWORD *)(a1 + 76));
    v62 = sqlite3_initialize();
    if ((int)v61 >= 1 && v62 == 0)
    {
      v64 = sub_1ACB5D828(v61);
      *(_QWORD *)(a1 + 96) = v64;
      if (v64)
      {
        v65 = *(unsigned int *)(a1 + 76);
        *(_QWORD *)(a1 + 104) = v64 + v65;
        v66 = (void *)(v64 + v65 + v65);
        *(_QWORD *)(a1 + 88) = v66;
        bzero(v66, v65);
        goto LABEL_8;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 96) = 0;
    }
    a2 = 0;
    *(_BYTE *)(a1 + 70) = 1;
    return a2;
  }
  if (*(_BYTE *)(a1 + 34 * (a4 & 1) + 1))
  {
    *(_BYTE *)(a1 + 68) = 1;
    return a2;
  }
  *(_BYTE *)(a1 + 68) = 0;
  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_11;
LABEL_8:
  iv = a3;
  v8 = *(unsigned __int8 *)(a1 + 69);
  if (*(_BYTE *)(a1 + 69))
  {
    if ((v4 & 4) != 0)
    {
      sqlite3_initialize();
      arc4random_buf(v80, v8);
      memcpy(&a2->i8[*(unsigned int *)(a1 + 80)], v80, *(unsigned __int8 *)(a1 + 69));
    }
    else
    {
      __memcpy_chk();
    }
  }
  v9 = *(int *)(a1 + 72);
  if ((int)v9 >= 1)
    bzero(&v80[-v9 + 12], *(unsigned int *)(a1 + 72));
  dataOut = *(int8x16_t **)(a1 + 96);
  if ((v4 & 2) != 0)
  {
    v11 = (unsigned __int8 *)(a1 + 34 * (v4 & 1));
    v13 = *v11;
    v12 = v11 + 2;
    if (v13 == 32)
      v14 = 32;
    else
      v14 = 16;
    CCCrypt(0, 0, 0, v12, v14, &iv, *(const void **)(a1 + 88), *(unsigned int *)(a1 + 76), dataOut, *(unsigned int *)(a1 + 76), 0);
    dataOut = *(int8x16_t **)(a1 + 96);
  }
  v15 = a2;
  if ((v4 & 4) != 0)
    v15 = *(int8x16_t **)(a1 + 104);
  v16 = *(_DWORD *)(a1 + 80);
  if ((int)v16 < 9)
  {
    v17 = (uint64_t *)dataOut;
    v18 = (uint64_t *)a2;
    v19 = (uint64_t *)v15;
    v20 = *(_DWORD *)(a1 + 80);
    if ((a2 & 3) != 0)
      goto LABEL_55;
  }
  else
  {
    v17 = (uint64_t *)dataOut;
    v18 = (uint64_t *)a2;
    v19 = (uint64_t *)v15;
    v20 = *(_DWORD *)(a1 + 80);
    if ((((a2 | v15) | dataOut) & 7) == 0)
    {
      v21 = v16 >= 0x10 ? v16 - 16 : 0;
      v17 = (uint64_t *)dataOut;
      v18 = (uint64_t *)a2;
      v19 = (uint64_t *)v15;
      v20 = *(_DWORD *)(a1 + 80);
      if (v21 < 0x41)
        goto LABEL_35;
      v17 = (uint64_t *)dataOut;
      v18 = (uint64_t *)a2;
      v19 = (uint64_t *)v15;
      v20 = *(_DWORD *)(a1 + 80);
      if ((unint64_t)((char *)v15 - (char *)dataOut) < 0x20)
        goto LABEL_35;
      v17 = (uint64_t *)dataOut;
      v18 = (uint64_t *)a2;
      v19 = (uint64_t *)v15;
      v20 = *(_DWORD *)(a1 + 80);
      if ((unint64_t)((char *)v15 - (char *)a2) < 0x20)
        goto LABEL_35;
      v17 = (uint64_t *)dataOut;
      v18 = (uint64_t *)a2;
      v19 = (uint64_t *)v15;
      v20 = *(_DWORD *)(a1 + 80);
      if ((unint64_t)((char *)v15 - (char *)dataOut) < 0x20)
        goto LABEL_35;
      v22 = ((v21 + 7) >> 3) + 1;
      v23 = v22 & 0x3FFFFFFC;
      v17 = &dataOut->i64[v23];
      v18 = &a2->i64[v23];
      v19 = &v15->i64[v23];
      v20 = v16 - 8 * (v22 & 0x3FFFFFFC);
      v24 = v15 + 1;
      v25 = a2 + 1;
      v26 = dataOut + 1;
      v27 = v22 & 0x3FFFFFFC;
      do
      {
        v28 = veorq_s8(*v26, *v25);
        v24[-1] = veorq_s8(v26[-1], v25[-1]);
        *v24 = v28;
        v24 += 2;
        v25 += 2;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      if ((v22 & 0x3FFFFFFC) != v22)
      {
LABEL_35:
        v29 = v20;
        do
        {
          v31 = *v18++;
          v30 = v31;
          v32 = *v17++;
          *v19++ = v32 ^ v30;
          v20 = v29 - 8;
          v33 = v29 > 0x10;
          v29 -= 8;
        }
        while (v33);
      }
    }
    if ((v18 & 3) != 0)
      goto LABEL_55;
  }
  if ((v17 & 3) == 0 && v20 >= 5)
  {
    v34 = v20 - 8;
    if (v20 < 8)
      v34 = 0;
    if (v34 < 0x29
      || (unint64_t)((char *)v19 - (char *)v17) < 0x20
      || (unint64_t)((char *)v19 - (char *)v18) < 0x20
      || (unint64_t)((char *)v19 - (char *)v17) < 0x20)
    {
      v37 = v17;
      v38 = v18;
      v39 = v19;
    }
    else
    {
      v35 = ((v34 + 3) >> 2) + 1;
      v36 = 4 * (v35 & 0x7FFFFFF8);
      v37 = (uint64_t *)((char *)v17 + v36);
      v38 = (uint64_t *)((char *)v18 + v36);
      v39 = (uint64_t *)((char *)v19 + v36);
      v20 -= 4 * (v35 & 0x7FFFFFF8);
      v40 = (int8x16_t *)(v19 + 2);
      v41 = (int8x16_t *)(v18 + 2);
      v42 = (int8x16_t *)(v17 + 2);
      v43 = v35 & 0x7FFFFFF8;
      do
      {
        v44 = veorq_s8(*v42, *v41);
        v40[-1] = veorq_s8(v42[-1], v41[-1]);
        *v40 = v44;
        v40 += 2;
        v41 += 2;
        v42 += 2;
        v43 -= 8;
      }
      while (v43);
      v17 = v37;
      v18 = v38;
      v19 = v39;
      if ((v35 & 0x7FFFFFF8) == v35)
      {
LABEL_56:
        v49 = v20 - (v20 != 0);
        if (v49 < 7
          || (unint64_t)((char *)v19 - (char *)v17) < 0x20
          || (unint64_t)((char *)v19 - (char *)v18) < 0x20
          || (unint64_t)((char *)v19 - (char *)v17) < 0x20)
        {
          v52 = v17;
          v53 = v18;
          v54 = v19;
        }
        else
        {
          v50 = v49 + 1;
          if (v49 < 0x1F)
          {
            v51 = 0;
            goto LABEL_84;
          }
          v51 = v50 & 0x1FFFFFFE0;
          v67 = (int8x16_t *)(v19 + 2);
          v68 = (int8x16_t *)(v18 + 2);
          v69 = (int8x16_t *)(v17 + 2);
          v70 = v50 & 0x1FFFFFFE0;
          do
          {
            v71 = veorq_s8(*v69, *v68);
            v67[-1] = veorq_s8(v69[-1], v68[-1]);
            *v67 = v71;
            v67 += 2;
            v68 += 2;
            v69 += 2;
            v70 -= 32;
          }
          while (v70);
          if (v50 == v51)
            goto LABEL_65;
          if ((v50 & 0x18) != 0)
          {
LABEL_84:
            v20 -= v50 & 0xFFFFFFF8;
            v52 = (uint64_t *)((char *)v17 + (v50 & 0x1FFFFFFF8));
            v53 = (uint64_t *)((char *)v18 + (v50 & 0x1FFFFFFF8));
            v54 = (uint64_t *)((char *)v19 + (v50 & 0x1FFFFFFF8));
            v72 = (int8x8_t *)((char *)v19 + v51);
            v73 = (int8x8_t *)((char *)v18 + v51);
            v74 = (int8x8_t *)((char *)v17 + v51);
            v75 = v51 - (v50 & 0x1FFFFFFF8);
            do
            {
              v76 = *v73++;
              v77 = v76;
              v78 = *v74++;
              *v72++ = veor_s8(v78, v77);
              v75 += 8;
            }
            while (v75);
            if (v50 == (v50 & 0x1FFFFFFF8))
              goto LABEL_65;
            goto LABEL_63;
          }
          v54 = (uint64_t *)((char *)v19 + v51);
          v53 = (uint64_t *)((char *)v18 + v51);
          v52 = (uint64_t *)((char *)v17 + v51);
          v20 -= v51;
        }
LABEL_63:
        v55 = v20 + 1;
        do
        {
          v57 = *(_BYTE *)v53;
          v53 = (uint64_t *)((char *)v53 + 1);
          v56 = v57;
          v58 = *(_BYTE *)v52;
          v52 = (uint64_t *)((char *)v52 + 1);
          *(_BYTE *)v54 = v58 ^ v56;
          v54 = (uint64_t *)((char *)v54 + 1);
          --v55;
        }
        while (v55 > 1);
LABEL_65:
        v16 = *(_DWORD *)(a1 + 80);
        goto LABEL_66;
      }
    }
    v17 = v37;
    v18 = v38;
    v19 = v39;
    v45 = v20;
    do
    {
      v47 = *(_DWORD *)v18;
      v18 = (uint64_t *)((char *)v18 + 4);
      v46 = v47;
      v48 = *(_DWORD *)v17;
      v17 = (uint64_t *)((char *)v17 + 4);
      *(_DWORD *)v19 = v48 ^ v46;
      v19 = (uint64_t *)((char *)v19 + 4);
      v20 = v45 - 4;
      v33 = v45 > 8;
      v45 -= 4;
    }
    while (v33);
    goto LABEL_56;
  }
LABEL_55:
  if (v20 >= 1)
    goto LABEL_56;
LABEL_66:
  v59 = *(_DWORD *)(a1 + 76);
  if (v59 > v16)
    memmove(&v15->i8[v16], &a2->i8[v16], v59 - v16);
  if (a3 == 1)
  {
    v15[1].i8[0] ^= dataOut[1].u8[0];
    v15[1].i8[1] ^= dataOut[1].u8[1];
    v15[1].i8[2] ^= dataOut[1].u8[2];
    v15[1].i8[3] ^= dataOut[1].u8[3];
    v15[1].i8[4] ^= dataOut[1].u8[4];
    v15[1].i8[5] ^= dataOut[1].u8[5];
    v15[1].i8[6] ^= dataOut[1].u8[6];
    v15[1].i8[7] ^= dataOut[1].u8[7];
  }
  return v15;
}

uint64_t sub_1ACCB1E60(uint64_t result, int a2, int a3)
{
  unsigned __int8 v3;

  if (a3 >= 12)
    v3 = 12;
  else
    v3 = a3;
  *(_BYTE *)(result + 69) = v3;
  *(_DWORD *)(result + 76) = a2;
  *(_DWORD *)(result + 80) = a2 - a3;
  *(_DWORD *)(result + 72) = 12 - v3;
  return result;
}

uint64_t sub_1ACCB1E84(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(_QWORD);
  uint64_t result;

  v1 = (_OWORD *)a1;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v1[5] = 0u;
  v1[6] = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = 0u;
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v4)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = (_OWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    return (*v4)(v1);
  }
  return result;
}

uint64_t sub_1ACCB1FC4(_BYTE *a1)
{
  uint64_t result;

  if (a1[16])
    return 0;
  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 56))();
  if (!(_DWORD)result)
  {
    if (a1[9] != 5)
      return 0;
    result = 0;
    a1[9] = 0;
  }
  return result;
}

uint64_t sub_1ACCB2128(uint64_t a1, int8x8_t *a2, unsigned int a3)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x8_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  int16x8_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v38 = 0;
  a2->i8[0] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v38);
  if ((_DWORD)result)
    v7 = 1;
  else
    v7 = v38 < 16;
  if (!v7)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v39, 4, v38 - 16);
    if (!(_DWORD)result)
    {
      v8 = bswap32(v39[0]);
      if (v8 >= a3)
        return 0;
      result = 0;
      if ((_DWORD)v8)
      {
        if (v38 - 16 >= v8)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v39, 4, v38 - 12);
          if (!(_DWORD)result)
          {
            v9 = v39[0];
            result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v39, 8, v38 - 8);
            if (!(_DWORD)result)
            {
              if (v39[0] != 0xD763A120F905D5D9)
                return 0;
              result = (*(uint64_t (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, v8, v38 - v8 - 16);
              if (!(_DWORD)result)
              {
                v10 = bswap32(v9);
                if (v8 < 8)
                {
                  v11 = 0;
                  goto LABEL_26;
                }
                if (v8 >= 0x20)
                {
                  v11 = v8 & 0xFFFFFFE0;
                  v12 = 0uLL;
                  v13 = (int32x4_t)v10;
                  v14 = a2 + 2;
                  v15 = v11;
                  v16 = 0uLL;
                  v17 = 0uLL;
                  v18 = 0uLL;
                  v19 = 0uLL;
                  v20 = 0uLL;
                  v21 = 0uLL;
                  do
                  {
                    v22 = *(int8x16_t *)v14[-2].i8;
                    v23 = vmovl_s8(*(int8x8_t *)v22.i8);
                    v24 = vmovl_high_s8(v22);
                    v25 = vmovl_s8(*v14);
                    v26 = vmovl_high_s8(*(int8x16_t *)v14->i8);
                    v17 = vsubw_high_s16(v17, v24);
                    v16 = vsubw_s16(v16, *(int16x4_t *)v24.i8);
                    v12 = vsubw_high_s16(v12, v23);
                    v13 = vsubw_s16(v13, *(int16x4_t *)v23.i8);
                    v21 = vsubw_high_s16(v21, v26);
                    v20 = vsubw_s16(v20, *(int16x4_t *)v26.i8);
                    v19 = vsubw_high_s16(v19, v25);
                    v18 = vsubw_s16(v18, *(int16x4_t *)v25.i8);
                    v14 += 4;
                    v15 -= 32;
                  }
                  while (v15);
                  v10 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v18, v13), vaddq_s32(v20, v16)), vaddq_s32(vaddq_s32(v19, v12), vaddq_s32(v21, v17))));
                  if (v11 == v8)
                    goto LABEL_28;
                  if ((v8 & 0x18) == 0)
                  {
LABEL_26:
                    v34 = (char *)a2 + v11;
                    v35 = v8 - v11;
                    do
                    {
                      v36 = *v34++;
                      v10 -= v36;
                      --v35;
                    }
                    while (v35);
                    goto LABEL_28;
                  }
                }
                else
                {
                  v11 = 0;
                }
                v27 = v11;
                v11 = v8 & 0xFFFFFFF8;
                v28 = 0uLL;
                v29 = (int32x4_t)v10;
                v30 = (int8x8_t *)((char *)a2 + v27);
                v31 = v27 - v11;
                do
                {
                  v32 = *v30++;
                  v33 = vmovl_s8(v32);
                  v28 = vsubw_high_s16(v28, v33);
                  v29 = vsubw_s16(v29, *(int16x4_t *)v33.i8);
                  v31 += 8;
                }
                while (v31);
                v10 = vaddvq_s32(vaddq_s32(v29, v28));
                if (v11 != v8)
                  goto LABEL_26;
LABEL_28:
                result = 0;
                if (v10)
                  v37 = 0;
                else
                  v37 = v8;
                a2->i8[v37] = 0;
                a2->i8[v37 + 1] = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACCB23CC(uint64_t a1, int a2, _DWORD *a3, uint64_t *a4)
{
  sqlite3 *v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  char *v16;
  _BOOL4 *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  void (**v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int i;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (**v52)(uint64_t);
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  _DWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  sqlite3 *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  sqlite3_stmt *pStmt;
  uint64_t v67;
  void *__s1;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(sqlite3 **)a1;
  v71 = 0;
  v72 = 0;
  *a3 = 0;
  *a4 = 0;
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5)
    return v5;
  v9 = a1;
  v5 = sqlite3_exec(*(sqlite3 **)a1, "SAVEPOINT changeset", 0, 0, 0);
  if ((_DWORD)v5)
    return v5;
  v58 = a3;
  v59 = a4;
  if (!v4)
  {
    v11 = "NULL";
    goto LABEL_12;
  }
  v10 = *((unsigned __int8 *)v4 + 113);
  if (v10 == 186)
  {
LABEL_7:
    v11 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v11);
    sub_1ACBBE20C(186006);
    goto LABEL_13;
  }
  if (v10 != 118)
  {
    if (v10 != 109)
    {
      v11 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  v12 = *((_QWORD *)v4 + 3);
  if (v12)
    xmmword_1ECD3B1C0(v12);
LABEL_13:
  v13 = *(_QWORD *)(v9 + 88);
  if (!v13)
  {
    v5 = 0;
    v14 = 0;
    v49 = a3;
    v50 = v59;
    goto LABEL_102;
  }
  v14 = 0;
  v15 = &qword_1ECD3DBE0[132];
  v64 = a2;
  v60 = v9;
  v61 = v4;
  do
  {
    if (!*(_DWORD *)(v13 + 48))
    {
      v5 = 0;
      goto LABEL_36;
    }
    v16 = *(char **)(v13 + 8);
    v69 = 0;
    v67 = 0;
    __s1 = 0;
    pStmt = 0;
    v65 = 0;
    v17 = (_BOOL4 *)&v65;
    if (!*(_DWORD *)(v9 + 32))
      v17 = 0;
    v70 = sub_1ACBD7AF0(0, v4, *(const char **)(v9 + 8), v16, &v69, 0, &v67, &__s1, v17);
    if (!v70)
    {
      v18 = *(int *)(v13 + 16);
      if ((_DWORD)v18 != v69 || *(_DWORD *)(v13 + 24) != v65 || memcmp(__s1, *(const void **)(v13 + 40), v18))
        v70 = 17;
    }
    sub_1ACCAA45C((uint64_t)&v71, a2, v13, &v70);
    v5 = v70;
    v63 = v14;
    if (v70)
    {
      v19 = v72;
LABEL_25:
      v14 = v19;
      goto LABEL_26;
    }
    v23 = sub_1ACCAA588((uint64_t)v4, 0, *(_QWORD *)(v9 + 8), (unsigned __int8 *)v16, v65, v69, v67, (uint64_t)__s1, &pStmt);
    v5 = v23;
    v70 = v23;
    v19 = v72;
    v24 = *(_DWORD *)(v13 + 52);
    if (v24 < 1 || (_DWORD)v23)
      goto LABEL_25;
    v62 = v72;
    v25 = 0;
    v26 = v69;
    v27 = __s1;
    do
    {
      v28 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 56) + 8 * v25);
      if (!v28)
      {
        v29 = 0;
        goto LABEL_90;
      }
      do
      {
        v30 = sub_1ACCAAA04(pStmt, v26, (uint64_t)v27, (uint64_t)v28);
        v70 = v30;
        if ((_DWORD)v30)
          break;
        v32 = sqlite3_step(pStmt);
        v33 = *v28;
        if (v32 == 100)
        {
          if (v33 != 18)
          {
            v39 = sub_1ACCAAE9C((uint64_t)&v71, a2, (unsigned __int16 *)pStmt, (uint64_t)v28, (uint64_t)v27);
LABEL_59:
            v5 = v39;
            v70 = v39;
            if ((_DWORD)v39)
              goto LABEL_89;
            goto LABEL_45;
          }
          LODWORD(v34) = HIDWORD(v72);
          v35 = (int)v72;
          if ((int)v72 < SHIDWORD(v72))
          {
            v36 = v71;
            goto LABEL_54;
          }
          if (HIDWORD(v72))
            v40 = HIDWORD(v72);
          else
            v40 = 128;
          v34 = v40;
          do
          {
            v41 = v34;
            v34 *= 2;
          }
          while (v34 <= (int)v72);
          if (v41 > 1073741695 && (v34 = 2147483391, (int)v72 > 2147483390)
            || (v42 = v71, sqlite3_initialize())
            || (v47 = sub_1ACB6BB48(v42, v34)) == 0)
          {
            v70 = 7;
            if (v26 < 1)
              goto LABEL_44;
          }
          else
          {
            v36 = v47;
            v71 = v47;
            HIDWORD(v72) = v34;
LABEL_54:
            v37 = v35 + 1;
            LODWORD(v72) = v35 + 1;
            *(_BYTE *)(v36 + v35) = 18;
            v38 = v28[1];
            if ((int)v35 + 1 >= (int)v34)
            {
              if ((_DWORD)v34)
                v43 = v34;
              else
                v43 = 128;
              v44 = v43;
              do
              {
                v45 = v44;
                v44 *= 2;
              }
              while (v44 <= v37);
              if (v45 <= 1073741695 || (v44 = 2147483391, (int)v35 <= 2147483389))
              {
                if (!sqlite3_initialize())
                {
                  v48 = sub_1ACB6BB48(v36, v44);
                  if (v48)
                  {
                    v36 = v48;
                    v71 = v48;
                    HIDWORD(v72) = v44;
                    goto LABEL_55;
                  }
                }
              }
              v70 = 7;
            }
            else
            {
LABEL_55:
              LODWORD(v72) = v35 + 2;
              *(_BYTE *)(v36 + v37) = v38;
            }
            a2 = v64;
            if (v26 < 1)
              goto LABEL_44;
          }
          for (i = 0; i != v26; ++i)
            sub_1ACCAAC70((uint64_t)&v71, pStmt, i, &v70);
          goto LABEL_44;
        }
        if (v33 != 18)
        {
          v39 = sub_1ACCAB4D0((uint64_t)&v71, a2, (uint64_t)v28, v26, v27);
          goto LABEL_59;
        }
LABEL_44:
        v5 = v70;
        if (v70)
          goto LABEL_89;
LABEL_45:
        v30 = sqlite3_reset(pStmt);
        v70 = v30;
        v28 = (unsigned __int8 *)*((_QWORD *)v28 + 3);
        if ((_DWORD)v30)
          v31 = 1;
        else
          v31 = v28 == 0;
      }
      while (!v31);
      v5 = v30;
LABEL_89:
      v24 = *(_DWORD *)(v13 + 52);
      v29 = v5;
LABEL_90:
      ++v25;
    }
    while (v25 < v24 && !v29);
    v14 = v72;
    v9 = v60;
    v4 = v61;
    v15 = qword_1ECD3DBE0 + 1056;
    v19 = v62;
LABEL_26:
    sqlite3_finalize(pStmt);
    if (v14 == v19)
      v14 = v63;
    LODWORD(v72) = v14;
    v20 = v67;
    if (v67)
    {
      v21 = (void (**)(uint64_t))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_34;
      v22 = v15[294];
      if (v22)
        xmmword_1ECD3B1C0(v22);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v20);
      v20 = v15[294];
      if (v20)
      {
        v21 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_34:
        (*v21)(v20);
      }
    }
LABEL_36:
    if ((_DWORD)v5)
      break;
    v13 = *(_QWORD *)v13;
  }
  while (v13);
  v49 = v58;
  v50 = v59;
  if (!(_DWORD)v5)
  {
LABEL_102:
    *v49 = v14;
    *v50 = v71;
    goto LABEL_103;
  }
  v51 = v71;
  if (v71)
  {
    v52 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_100;
    v53 = v15[294];
    if (v53)
      xmmword_1ECD3B1C0(v53);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v51);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v51);
    v51 = v15[294];
    if (v51)
    {
      v52 = &xmmword_1ECD3B1D0;
LABEL_100:
      (*v52)(v51);
    }
  }
LABEL_103:
  sqlite3_exec(v4, "RELEASE changeset", 0, 0, 0);
  if (!v4)
  {
    v55 = "NULL";
    goto LABEL_112;
  }
  v54 = *((unsigned __int8 *)v4 + 113);
  if (v54 == 186)
    goto LABEL_107;
  if (v54 == 118)
  {
    v56 = *((_QWORD *)v4 + 3);
    if (v56)
      xmmword_1ECD3B1D0(v56);
  }
  else
  {
    if (v54 == 109)
LABEL_107:
      v55 = "unopened";
    else
      v55 = "invalid";
LABEL_112:
    sqlite3_log(21, "API call with %s database connection pointer", v55);
    sub_1ACBBE20C(186006);
  }
  return v5;
}

uint64_t sub_1ACCB2A54(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned int a5, int a6, uint64_t *a7)
{
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v11 = result;
  v13 = (_DWORD *)(result + 60);
  v12 = *(_DWORD *)(result + 60);
  if (v12)
  {
    v14 = 0;
  }
  else if ((a5 & 0x80000000) != 0)
  {
    if ((a3 & 0x40) != 0 || *(_QWORD *)(result + 24) == 0)
      v14 = *(_DWORD *)(a2 + 24);
    else
      v14 = *(_DWORD *)(a2 + 24) + 1;
  }
  else if (*(_DWORD *)(a2 + 16 * a5 + 36) >= a6)
  {
    v14 = a6;
  }
  else
  {
    v14 = *(_DWORD *)(a2 + 16 * a5 + 36);
  }
  v16 = 2;
  do
  {
    v17 = v16;
    v16 *= 2;
  }
  while ((int)v17 < v14);
  if (v12)
    goto LABEL_40;
  v18 = 4 * v17 + 136 * (int)(v17 - 1) + 232;
  result = sqlite3_initialize();
  if ((_DWORD)result || (result = sub_1ACB5D828(v18)) == 0)
  {
    if (v18 >= 1)
      *v13 = 7;
    goto LABEL_40;
  }
  v19 = result;
  bzero((void *)result, v18);
  *(_QWORD *)(v19 + 88) = v19 + 136 * v17 + 96;
  *(_QWORD *)(v19 + 24) = v11;
  *(_QWORD *)(v19 + 56) = nullsub_14;
  *a7 = v19;
  *(_DWORD *)(v19 + 64) = v17;
  *(_DWORD *)(v19 + 68) = (a3 >> 1) & 1;
  *(_BYTE *)(v19 + 72) = (a3 & 0x10) != 0;
  *(_QWORD *)(v19 + 48) = 0;
  if ((a3 & 0x20) == 0)
    sub_1ACC858DC((uint64_t)v13, v19);
  if (*v13)
    goto LABEL_39;
  if ((a5 & 0x80000000) != 0)
  {
    v23 = 0;
    v24 = a2 + 32;
    v25 = a2 + 32 + 16 * *(int *)(a2 + 28);
    if ((a3 & 0x40) == 0 && *(_QWORD *)(v11 + 24))
    {
      sub_1ACC859E8(v11, 0, a4, a3, v19 + 96);
      v23 = 1;
    }
    for (; v24 < v25; v24 += 16)
    {
      v26 = *(unsigned int *)(v24 + 4);
      if ((int)v26 >= 1)
      {
        v27 = v26 + 1;
        v28 = v19 + 96 + 136 * v23;
        v23 += v26;
        do
        {
          sub_1ACC85D1C((_DWORD *)v11, *(_QWORD *)(v24 + 8) + 56 * (v27-- - 2), v28);
          v28 += 136;
        }
        while (v27 > 1);
      }
    }
  }
  else if (v14 >= 1)
  {
    v20 = (_QWORD *)(a2 + 16 * a5 + 40);
    v21 = v14 - 1;
    v22 = v19 + 96;
    do
    {
      sub_1ACC85D1C((_DWORD *)v11, *v20 + 56 * v21--, v22);
      v22 += 136;
    }
    while (v21 != -1);
  }
  if (*v13)
  {
LABEL_39:
    result = sub_1ACC7D2A0(v19);
LABEL_40:
    *a7 = 0;
    return result;
  }
  v29 = *(_DWORD *)(v19 + 64);
  if (v29 >= 2)
  {
    do
    {
      v31 = sub_1ACC8145C(v19, v29 - 1);
      if (v31)
      {
        v32 = v31;
        if (!*v13)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v19 + 136 * v31 + 152))(v11, v19 + 136 * v31 + 96, 0);
        v33 = *(_DWORD *)(v19 + 64);
        v34 = __OFADD__(v33, v32);
        v35 = v33 + v32;
        if (v35 < 0 != v34)
          ++v35;
        while (1)
        {
          v36 = v35 >> 1;
          if (v35 >> 1 < v29 - 1 || *v13)
            break;
          v37 = sub_1ACC8145C(v19, v36);
          if (v37)
          {
            v38 = v37;
            (*(void (**)(uint64_t, uint64_t, _QWORD))(v19 + 136 * v37 + 152))(v11, v19 + 136 * v37 + 96, 0);
            v36 = *(_DWORD *)(v19 + 64) + v38;
          }
          if (v36 >= 0)
            v35 = v36;
          else
            v35 = v36 + 1;
        }
      }
    }
    while (v29-- > 2);
  }
  v39 = *(unsigned __int16 *)(*(_QWORD *)(v19 + 88) + 4);
  v40 = v19 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v19 + 88) + 4);
  v41 = *(_QWORD *)(v40 + 112);
  *(_BYTE *)(v19 + 20) = v41 == 0;
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(v40 + 216);
  if (*(_BYTE *)(v19 + 72) && !*v13 && v41 && !*(_DWORD *)(v19 + 136 * v39 + 224))
    return sub_1ACC800BC(v11, v19, 0, 0);
  result = sub_1ACC805D4(v19);
  if ((_DWORD)result)
    return sub_1ACC800BC(v11, v19, 0, 0);
  if (!*(_BYTE *)(v19 + 20))
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v19, v19 + 136 * *(unsigned __int16 *)(*(_QWORD *)(v19 + 88) + 4) + 96);
  return result;
}

void sub_1ACCB2E3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1ACCB2E54(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x1Cu);
}

uint64_t sub_1ACCB2E6C(sqlite3 *a1)
{
  uint64_t result;

  result = sqlite3_create_function(a1, "uuid", 0, 2097153, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACCB2F28, 0, 0);
  if (!(_DWORD)result)
  {
    result = sqlite3_create_function(a1, "uuid_str", 1, 2099201, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACCB3018, 0, 0);
    if (!(_DWORD)result)
      return sqlite3_create_function(a1, "uuid_blob", 1, 2099201, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACCB30E8, 0, 0);
  }
  return result;
}

void sub_1ACCB2F28(sqlite3_context *a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  unint64_t v5;
  char v6;
  char v7[37];
  _BYTE P[6];
  char v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sqlite3_randomness(16, P);
  v2 = 0;
  v9 = v9 & 0xF | 0x40;
  v10 = v10 & 0x3F | 0x80;
  v3 = v7;
  v4 = 1360;
  do
  {
    if ((v4 & 1) != 0)
      *v3++ = 45;
    v5 = P[v2];
    v6 = a0123456789abcd_1[v5 >> 4];
    LOBYTE(v5) = a0123456789abcd_1[v5 & 0xF];
    *v3 = v6;
    v3[1] = v5;
    v3 += 2;
    ++v2;
    v4 >>= 1;
  }
  while (v2 != 16);
  *v3 = 0;
  sqlite3_result_text(a1, v7, 36, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void sub_1ACCB3018(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  char v10[37];
  _BYTE v11[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)sub_1ACCB315C(*a3, (uint64_t)v11);
  if (v4)
  {
    v5 = 0;
    v6 = v10;
    v7 = 1360;
    do
    {
      if ((v7 & 1) != 0)
        *v6++ = 45;
      v8 = v4[v5];
      v9 = a0123456789abcd_1[v8 >> 4];
      LOBYTE(v8) = a0123456789abcd_1[v8 & 0xF];
      *v6 = v9;
      v6[1] = v8;
      v6 += 2;
      ++v5;
      v7 >>= 1;
    }
    while (v5 != 16);
    *v6 = 0;
    sqlite3_result_text(a1, v10, 36, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1ACCB30E8(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const void *v4;
  _BYTE v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = sub_1ACCB315C(*a3, (uint64_t)v5);
  if (v4)
    sqlite3_result_blob(a1, v4, 16, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

const void *sub_1ACCB315C(sqlite3_value *a1, uint64_t a2)
{
  int v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const unsigned __int8 *v11;

  v4 = sqlite3_value_type(a1);
  if (v4 == 4)
  {
    if (sqlite3_value_bytes(a1) == 16)
      return sqlite3_value_blob(a1);
  }
  else if (v4 == 3)
  {
    v5 = sqlite3_value_text(a1);
    v6 = 0;
    if (*v5 == 123)
      v7 = v5 + 1;
    else
      v7 = v5;
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (*v7 == 45)
        ++v7;
      v9 = *v7;
      if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x10000) == 0)
        break;
      v10 = v7[1];
      if ((*(_DWORD *)(v8 + 4 * v10 + 60) & 0x10000) == 0)
        break;
      *(_BYTE *)(a2 + v6) = ((((char)(2 * v10) >> 7) & 0xF9) + v10) & 0xF | (16
                                                                                         * ((((char)(2 * v9) >> 7) & 0xF9)
                                                                                          + v9));
      v7 += 2;
      if (++v6 == 16)
      {
        v11 = v7 + 1;
        if (*v7 != 125)
          v11 = v7;
        if (*v11)
          return 0;
        else
          return (const void *)a2;
      }
    }
  }
  return 0;
}

void sub_1ACCB3268()
{
  if (getenv("SQLITE_SQLLOG_DIR"))
  {
    if ((os_variant_allows_internal_security_policies() & 1) != 0)
    {
      if (!sqlite3_config(21, sub_1ACCB335C, 0))
      {
        bzero(qword_1EECAD350, 0x2428uLL);
        dword_1EECAD360 = 1;
        if (getenv("SQLITE_SQLLOG_CONDITIONAL"))
          dword_1EECAD35C = 1;
      }
    }
    else if (qword_1EECAD348 != -1)
    {
      dispatch_once(&qword_1EECAD348, &unk_1E5C757A0);
    }
  }
}

void sub_1ACCB3328()
{
  sqlite3_log(1, "%s is not supported for this process", "SQLITE_SQLLOG_DIR");
}

void sub_1ACCB335C(uint64_t a1, sqlite3 *a2, const char *a3, int a4)
{
  sqlite3_mutex *v7;
  sqlite3_mutex *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  int v15;
  FILE *v16;
  unint64_t v17;
  sqlite3_mutex *v18;
  const char *i;
  int v20;
  uint64_t v21;
  unsigned int v22;
  FILE *v23;
  int v24;
  int v25;
  char *v26;
  const char *v27;
  pid_t v28;
  char *v29;
  FILE *v30;
  char __s[512];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = sqlite3_mutex_alloc(2);
  v8 = v7;
  if (!a4)
  {
    sqlite3_mutex_enter(v7);
    if (!qword_1EECAD350[0])
      qword_1EECAD350[0] = (uint64_t)sqlite3_mutex_alloc(1);
    sqlite3_mutex_leave(v8);
    sqlite3_mutex_enter((sqlite3_mutex *)qword_1EECAD350[0]);
    if (dword_1EECAD76C)
      goto LABEL_18;
    if (dword_1EECAD35C && !sub_1ACCB3BA0(a2, "main", 0, __s))
    {
      v25 = strlen(__s);
      if (v25 >= 505)
      {
        sqlite3_log(10, "sqllogTraceDb(): database name too long (%d bytes)", v25);
        goto LABEL_18;
      }
      *(_QWORD *)&__s[v25] = 0x676F6C6C71732DLL;
      if (access(__s, 0))
        goto LABEL_18;
    }
    sqlite3_mutex_enter(v8);
    v12 = dword_1EECAD358++;
    v13 = &qword_1EECAD350[4 * v12];
    v13[136] = 0;
    v13[134] = (uint64_t)a2;
    LODWORD(v12) = dword_1EECAD764++;
    *((_DWORD *)v13 + 270) = v12;
    sqlite3_mutex_leave(v8);
    if (v13[136])
      goto LABEL_17;
    if (!byte_1EECAD364)
    {
      v26 = getenv("SQLITE_SQLLOG_DIR");
      if (!v26)
        goto LABEL_18;
      v27 = v26;
      if (strlen(v26) - 502 < 0xFFFFFFFFFFFFFE00)
        goto LABEL_18;
      v28 = getpid();
      sqlite3_snprintf(512, &byte_1EECAD364, "%s/sqllog_%05d", v27, v28);
      sqlite3_snprintf(512, byte_1EECAD564, "%s.idx", &byte_1EECAD364);
      v29 = getenv("SQLITE_SQLLOG_REUSE_FILES");
      if (v29)
        dword_1EECAD360 = atoi(v29);
      v30 = fopen(byte_1EECAD564, "w");
      if (v30)
        fclose(v30);
    }
    v14 = sqlite3_mprintf("%s_%05d.sql", &byte_1EECAD364, *((_DWORD *)v13 + 270));
    v13[136] = (uint64_t)fopen(v14, "w");
    sqlite3_free(v14);
    if (v13[136] || (sqlite3_log(10, "sqllogOpenlog(): Failed to open log file"), v13[136]))
LABEL_17:
      sub_1ACCB380C((uint64_t)(v13 + 133), "main", 0);
LABEL_18:
    sqlite3_mutex_leave((sqlite3_mutex *)qword_1EECAD350[0]);
    return;
  }
  v9 = dword_1EECAD358;
  if (dword_1EECAD358 < 1)
  {
    v11 = 0;
    v9 = 0;
    if (a4 == 2)
    {
LABEL_23:
      sqlite3_mutex_enter(v7);
      v15 = dword_1EECAD358;
      if (v9 < dword_1EECAD358)
      {
        v16 = (FILE *)v11[3];
        if (v16)
        {
          fclose(v16);
          v15 = dword_1EECAD358;
        }
        v11[1] = 0;
        v11[3] = 0;
        dword_1EECAD358 = --v15;
      }
      if (v15)
      {
        if (v9 < v15)
        {
          v17 = (char *)&qword_1EECAD350[4 * v15] - (char *)v11 + 1064;
          if ((int)(v17 >> 5) >= 1)
            memmove(v11, v11 + 4, v17 & 0x1FFFFFFFE0);
        }
      }
      else
      {
        sqlite3_mutex_free((sqlite3_mutex *)qword_1EECAD350[0]);
        qword_1EECAD350[0] = 0;
      }
      v18 = v8;
LABEL_33:
      sqlite3_mutex_leave(v18);
    }
  }
  else
  {
    v10 = 0;
    v11 = (uint64_t *)&unk_1EECAD778;
    while ((sqlite3 *)v11[1] != a2)
    {
      ++v10;
      v11 += 4;
      if (dword_1EECAD358 == v10)
      {
        v11 = &qword_1EECAD350[4 * (dword_1EECAD358 - 1) + 133];
        if (a4 == 2)
          goto LABEL_23;
        return;
      }
    }
    if (a4 == 2)
    {
      v9 = v10;
      goto LABEL_23;
    }
    if (v11[3])
    {
      sqlite3_mutex_enter((sqlite3_mutex *)qword_1EECAD350[0]);
      if (!dword_1EECAD76C)
      {
        for (i = a3; ; ++i)
        {
          v20 = *(unsigned __int8 *)i;
          if ((v20 - 9) >= 5 && v20 != 32)
            break;
        }
        v21 = 0;
        do
          v22 = (i[v21++] & 0xDF) - 65;
        while (v22 < 0x1A);
        if ((_DWORD)v21 == 7 && !sqlite3_strnicmp("ATTACH", i, 6))
        {
          sub_1ACCB380C((uint64_t)v11, 0, 1);
        }
        else
        {
          v23 = (FILE *)v11[3];
          v24 = dword_1EECAD770++;
          fprintf(v23, "%s; -- clock=%d\n", a3, v24);
        }
      }
      v18 = (sqlite3_mutex *)qword_1EECAD350[0];
      goto LABEL_33;
    }
  }
}

void sub_1ACCB380C(uint64_t a1, const char *a2, int a3)
{
  FILE *v5;
  FILE *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  sqlite3_backup *v11;
  sqlite3_backup *v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  char v22;
  unsigned __int8 *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  FILE *v29;
  FILE *v30;
  uint64_t v31;
  char __s[512];
  char zSourceName[512];
  uint64_t v34;
  uint64_t v35;
  sqlite3 *ppDb[128];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (sub_1ACCB3BA0(*(sqlite3 **)(a1 + 8), a2, zSourceName, __s))
    return;
  if (__s[0])
  {
    if (dword_1EECAD360)
    {
      v5 = fopen(byte_1EECAD564, "r");
      if (v5)
      {
        v6 = v5;
        if (feof(v5))
        {
LABEL_6:
          v7 = 0;
        }
        else
        {
          while (1)
          {
            if (fgets((char *)ppDb, 1029, v6))
            {
              v37 = 0;
              v14 = (char *)&v35 + 7;
              do
              {
                v16 = *(unsigned __int8 *)++v14;
                v15 = v16;
              }
              while ((v16 - 48) < 0xA);
              while (v15 == 32)
              {
                v17 = *(unsigned __int8 *)++v14;
                v15 = v17;
              }
              LODWORD(v18) = strlen(v14);
              if ((int)v18 >= 1)
              {
                v18 = v18;
                while (1)
                {
                  v19 = v18 - 1;
                  v20 = v14[(v18 - 1)];
                  if ((v20 - 9) >= 5 && v20 != 32)
                    break;
                  --v18;
                  if ((unint64_t)(v19 + 1) <= 1)
                  {
                    LODWORD(v18) = 0;
                    break;
                  }
                }
              }
              v21 = (int)v18;
              if (strlen(__s) == (int)v18 && !memcmp(__s, v14, v21))
                break;
            }
            if (feof(v6))
              goto LABEL_6;
          }
          v35 = 0;
          v34 = 0;
          v22 = (char)ppDb[0];
          if (LOBYTE(ppDb[0]) - 48 <= 9)
          {
            v23 = (unsigned __int8 *)ppDb + 1;
            v24 = &v34;
            do
            {
              *(_BYTE *)v24 = v22;
              v24 = (uint64_t *)((char *)v24 + 1);
              v25 = *v23++;
              v22 = v25;
            }
            while ((v25 - 48) < 0xA);
          }
          v7 = sqlite3_mprintf("%s_%s.db", &byte_1EECAD364, (const char *)&v34);
        }
        if (ferror(v6))
          sqlite3_log(10, "sqllogFindFile(): error reading index file");
        fclose(v6);
        if (v7)
          goto LABEL_41;
      }
      else
      {
        sqlite3_log(10, "sqllogFindFile(): error in fopen()");
      }
    }
    ppDb[0] = 0;
    v8 = dword_1EECAD768++;
    v7 = sqlite3_mprintf("%s_%02d.db", &byte_1EECAD364, v8);
    dword_1EECAD76C = 1;
    v9 = sqlite3_open(v7, ppDb);
    if (v9)
    {
      v10 = v9;
      dword_1EECAD76C = 0;
    }
    else
    {
      sqlite3_exec(ppDb[0], "PRAGMA synchronous = 0", 0, 0, 0);
      v11 = sqlite3_backup_init(ppDb[0], "main", *(sqlite3 **)(a1 + 8), zSourceName);
      if (v11)
      {
        v12 = v11;
        sqlite3_backup_step(v11, -1);
        v13 = sqlite3_backup_finish(v12);
      }
      else
      {
        v13 = sqlite3_errcode(ppDb[0]);
      }
      v10 = v13;
      sqlite3_close(ppDb[0]);
      dword_1EECAD76C = 0;
      if (!v10)
      {
        v29 = fopen(byte_1EECAD564, "a");
        if (v29)
        {
          v30 = v29;
          fprintf(v29, "%d %s\n", v8, __s);
          fclose(v30);
        }
        goto LABEL_41;
      }
    }
    sqlite3_log(v10, "sqllogCopydb(): error backing up database");
  }
  else
  {
    v7 = sqlite3_mprintf(&byte_1ACCBEAEE);
  }
LABEL_41:
  if (a3)
  {
    v26 = dword_1EECAD770++;
    v27 = sqlite3_mprintf("ATTACH '%q' AS '%q'; -- clock=%d\n", v7, zSourceName, v26);
  }
  else
  {
    v27 = sqlite3_mprintf("-- Main database is '%q'\n", v7, v31);
  }
  v28 = v27;
  fputs(v27, *(FILE **)(a1 + 24));
  sqlite3_free(v28);
  sqlite3_free(v7);
}

uint64_t sub_1ACCB3BA0(sqlite3 *a1, const char *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  const unsigned __int8 *v9;
  int v10;
  int v11;
  const unsigned __int8 *v12;
  int v13;
  sqlite3_stmt *ppStmt;

  ppStmt = 0;
  dword_1EECAD76C = 1;
  v7 = sqlite3_prepare_v2(a1, "PRAGMA database_list", -1, &ppStmt, 0);
  if ((_DWORD)v7)
  {
    v8 = v7;
    dword_1EECAD76C = 0;
LABEL_10:
    sqlite3_log(v8, "sqllogFindAttached(): error in \"PRAGMA database_list\"");
    return v8;
  }
  while (sqlite3_step(ppStmt) == 100)
  {
    v9 = sqlite3_column_text(ppStmt, 1);
    v10 = sqlite3_column_bytes(ppStmt, 1);
    v11 = v10;
    if (a3)
      memcpy(a3, v9, v10 + 1);
    v12 = sqlite3_column_text(ppStmt, 2);
    v13 = sqlite3_column_bytes(ppStmt, 2);
    memcpy(a4, v12, v13 + 1);
    if (a2)
    {
      if (strlen(a2) == v11 && !sqlite3_strnicmp(a2, (const char *)v9, v11))
        break;
    }
  }
  v8 = sqlite3_finalize(ppStmt);
  dword_1EECAD76C = 0;
  if ((_DWORD)v8)
    goto LABEL_10;
  return v8;
}

void sub_1ACCB3CE4(uint64_t a1)
{
  int *v2;
  char *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = __error();
  v3 = strerror(*v2);
  v4 = 136315394;
  v5 = a1;
  v6 = 2080;
  v7 = v3;
  _os_log_fault_impl(&dword_1ACB54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Failed to open temporary file at path %s: %s", (uint8_t *)&v4, 0x16u);
  sub_1ACCB2E64();
}

void sub_1ACCB3D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E3C(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "unable to close due to unfinalized statements or unfinished backups", a5, a6, a7, a8, 0);
  sub_1ACCB2E4C();
}

void sub_1ACCB3DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E3C(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "user 'setup'(248) opening database with SQLITE_OPEN_READWRITE", a5, a6, a7, a8, 0);
  sub_1ACCB2E4C();
}

void sub_1ACCB3DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E54(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "seekAndWrite(%lld, %d): improbable offset+len for file with size hint %lld", a5, a6, a7, a8, 0);
  sub_1ACCB2E64();
}

void sub_1ACCB3E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E54(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "seekAndWrite(%lld, %d): improbable offset+len for file with observed size %lld", a5, a6, a7, a8, 0);
  sub_1ACCB2E64();
}

void sub_1ACCB3EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E3C(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "No temporary directory is accessible.  This is not a legitimate configuration.  Either the process environment or its sandbox is misconfigured.  Various library routines will error out abruptly.", a5, a6, a7, a8, 0);
  sub_1ACCB2E4C();
}

void sub_1ACCB3F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E3C(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "_CS_DARWIN_USER_TEMP_DIR was deleted out from underneath this process. This is illegal and likely to cause crashes and data corruption.", a5, a6, a7, a8, 0);
  sub_1ACCB2E4C();
}

void sub_1ACCB3F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACCB2E3C(&dword_1ACB54000, MEMORY[0x1E0C81028], a3, "libsqlite: Error: Failed WAL locking protocol.", a5, a6, a7, a8, 0);
  sub_1ACCB2E4C();
}

void sub_1ACCB3F90(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 70);
  v4 = *(unsigned __int8 *)(a1 + 66);
  v5[0] = 67109632;
  v5[1] = a2;
  v6 = 1024;
  v7 = v3;
  v8 = 1024;
  v9 = v4;
  _os_log_error_impl(&dword_1ACB54000, log, OS_LOG_TYPE_ERROR, "locking protocol: lockstate:%d, bShmUnreliable:%d, readOnly:%d", (uint8_t *)v5, 0x14u);
}

void sub_1ACCB4024()
{
  sub_1ACBBE20C(97935);
  __break(1u);
}

void sub_1ACCB403C()
{
  sub_1ACBBE20C(97914);
  __break(1u);
}

void sub_1ACCB4054()
{
  sub_1ACBBE20C(98105);
  __break(1u);
}

void sub_1ACCB406C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 33);
  if (v3 <= 3 && ((v5 = *(_QWORD *)(a1 + 40), v4 = a1 + 40, v5) || *(_QWORD *)(a2 + 16 * v3 + 64) == v4))
    v6 = "unpinned";
  else
    v6 = "pinned";
  v7 = 136446466;
  v8 = v6;
  v9 = 1024;
  v10 = a3;
  _os_log_fault_impl(&dword_1ACB54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "xRekey overwriting %{public}s page at index %d", (uint8_t *)&v7, 0x12u);
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80088](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __mac_syscall()
{
  return MEMORY[0x1E0C80B48]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1E0C80B78]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1E0C80C40]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return MEMORY[0x1E0C80D28]();
}

uint64_t _dispatch_is_multithreaded()
{
  return MEMORY[0x1E0C80D30]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x1E0C81688](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C82B18](from, to, state, *(_QWORD *)&flags);
}

char *__cdecl dirname_r(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C82BB0](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

uint64_t dispatch_source_cancel_and_wait()
{
  return MEMORY[0x1E0C82F18]();
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F30](source);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t dyld_process_is_restricted()
{
  return MEMORY[0x1E0C83128]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C83308](*(_QWORD *)&from_fd, *(_QWORD *)&to_fd, a3, *(_QWORD *)&flags);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83380](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1E0C83400](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83528](a1, a2, a3, *(_QWORD *)&a4);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1E0C83570](*(_QWORD *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1E0C83578](*(_QWORD *)&a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

int futimes(int a1, const timeval *a2)
{
  return MEMORY[0x1E0C835D8](*(_QWORD *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1E0C83868]();
}

uint64_t guarded_open_dprotected_np()
{
  return MEMORY[0x1E0C83870]();
}

uint64_t guarded_open_np()
{
  return MEMORY[0x1E0C83878]();
}

uint64_t guarded_pwrite_np()
{
  return MEMORY[0x1E0C83880]();
}

uint64_t guarded_write_np()
{
  return MEMORY[0x1E0C83888]();
}

int isatty(int a1)
{
  return MEMORY[0x1E0C839A8](*(_QWORD *)&a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F18](size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

int mincore(const void *a1, size_t a2, char *a3)
{
  return MEMORY[0x1E0C84130](a1, a2, a3);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1E0C841A0](a1);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1E0C84238](__rqtp, __rmtp);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1E0C849A0]();
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_trylock()
{
  return MEMORY[0x1E0C849C0]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

void perror(const char *a1)
{
  MEMORY[0x1E0C84AF0](a1);
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B10](a1);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84F68](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

void srandomdev(void)
{
  MEMORY[0x1E0C85490]();
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85538](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1E0C85550](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B8](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85608](__s, __charset);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1E0C85790](*(_QWORD *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int truncate(const char *a1, off_t a2)
{
  return MEMORY[0x1E0C85980](a1, a2);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int utime(const char *a1, const utimbuf *a2)
{
  return MEMORY[0x1E0C859E8](a1, a2);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1E0C85AE8](*(_QWORD *)&target_task, address, *(_QWORD *)&control, state);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1E0C86118]();
}

