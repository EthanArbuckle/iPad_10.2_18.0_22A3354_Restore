uint64_t sub_1ACB55484(char *a1, uint64_t *a2, unsigned int a3, const char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  void (**v18)(uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_signpost_id_t v45;
  os_signpost_id_t v46;
  const char *v47;
  char *i;
  void (**v49)(char *);
  int v50;
  char *v51;
  const char *v52;
  void (**v53)(char *);
  unsigned int v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  int v74;
  int v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  int v81;
  int v82;
  _BOOL4 v83;
  void *v84;
  char *v85;
  char *__s;
  unsigned int v87;
  uint8_t buf[4];
  _BYTE v89[24];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  __s = 0;
  v8 = mach_continuous_time();
  if (!a2)
    return sub_1ACBBE20C(188633);
  v9 = v8;
  *a2 = 0;
  v10 = sqlite3_initialize();
  if ((_DWORD)v10)
    return v10;
  if ((a3 & 0x8000) != 0 || !(_BYTE)word_1ECD3B144)
  {
LABEL_7:
    if ((a3 & 0x40000) == 0)
      goto LABEL_8;
LABEL_13:
    v11 = a3 & 0xFFFDFFFF;
    goto LABEL_14;
  }
  if ((a3 & 0x10000) == 0)
  {
    LODWORD(v10) = HIBYTE(word_1ECD3B144);
    goto LABEL_7;
  }
  LODWORD(v10) = 1;
  if ((a3 & 0x40000) != 0)
    goto LABEL_13;
LABEL_8:
  if (dword_1ECD3B28C)
    v11 = a3 | 0x20000;
  else
    v11 = a3;
LABEL_14:
  v13 = v11 & 0xFFF600E7;
  v87 = v11 & 0xFFF600E7;
  if ((a3 & 0xFFFE7FFF) != (v11 & 0xFFF600E7))
    sqlite3_log(21, "open flag(s) 0x%08x are reserved for VFS use and do not affect behaviour when passed to sqlite3_open_v2", v13 ^ a3 & 0xFFFE7FFF);
  v14 = (void *)sub_1ACB5D828(824);
  v15 = (uint64_t)v14;
  if (!v14)
    goto LABEL_56;
  bzero(v14, 0x338uLL);
  if (!(_DWORD)v10)
  {
    if ((dword_1ECD3B304 & 8) == 0 || !(_BYTE)word_1ECD3B144)
    {
      v17 = (_QWORD *)(v15 + 24);
      v16 = *(_DWORD **)(v15 + 24);
      if (!v16)
        goto LABEL_34;
      goto LABEL_33;
    }
LABEL_22:
    v16 = (_DWORD *)qword_1ECD3B1B0(1);
    *(_QWORD *)(v15 + 24) = v16;
    v17 = (_QWORD *)(v15 + 24);
    if (!v16)
      goto LABEL_26;
    if (!(_DWORD)v10 && (char *)qword_1ECD3B1B0 == (char *)sub_1ACBE0A40)
      *v16 = -1;
LABEL_33:
    xmmword_1ECD3B1C0(v16);
LABEL_34:
    *(_OWORD *)(v15 + 168) = xmmword_1ACCB6BF4;
    *(_OWORD *)(v15 + 152) = unk_1ACCB6BE4;
    if ((v11 & 0x2000000) != 0)
      v19 = -1;
    else
      v19 = 255;
    *(_DWORD *)(v15 + 88) = v19;
    *(_DWORD *)(v15 + 40) = 2;
    *(_BYTE *)(v15 + 113) = 109;
    *(_QWORD *)(v15 + 32) = v15 + 696;
    *(_DWORD *)(v15 + 432) = 1;
    *(_WORD *)(v15 + 436) = 0;
    *(_OWORD *)(v15 + 136) = xmmword_1ACCB6BD4;
    *(_DWORD *)(v15 + 180) = 0;
    *(_BYTE *)(v15 + 101) = 1;
    *(_BYTE *)(v15 + 106) = -1;
    *(_QWORD *)(v15 + 64) = qword_1ECD3B268;
    *(_DWORD *)(v15 + 116) = 0;
    *(_QWORD *)(v15 + 200) = off_1EECACBA0;
    v20 = *(_QWORD *)(v15 + 48) | 0xE44484F0;
    *(_QWORD *)(v15 + 48) = v20;
    if ((dword_1ECD3B304 & 0x180) != 0)
    {
      if ((dword_1ECD3B304 & 0x80) != 0)
        v20 &= ~0x400000uLL;
      *(_QWORD *)(v15 + 48) = v20 | (dword_1ECD3B304 << 20) & 0x10000000;
    }
    v23 = getprogname();
    if (a1
      && (strstr(a1, "/Library/AddressBook/AddressBook.sqlitedb")
       || strstr(a1, "/Library/AddressBook/AddressBookImages.sqlitedb"))
      || v23
      && (!strncmp(v23, "ContactsCoreSpotlightExtension", 0x1EuLL)
       || !strncmp(v23, "routined", 8uLL)
       || !strncmp(v23, "FavoritesTodayWidget", 0x14uLL)))
    {
      *(_QWORD *)(v15 + 48) |= 0x800uLL;
    }
    *(_QWORD *)(v15 + 656) = 0;
    *(_OWORD *)(v15 + 640) = 0u;
    *(_QWORD *)(v15 + 568) = 0;
    *(_OWORD *)(v15 + 576) = 0u;
    sub_1ACB56FB4(v15, "BINARY", 1u, 0, (uint64_t)sub_1ACB934B4, 0, v21, v22);
    sub_1ACB56FB4(v15, "BINARY", 3u, 0, (uint64_t)sub_1ACB934B4, 0, v24, v25);
    sub_1ACB56FB4(v15, "BINARY", 2u, 0, (uint64_t)sub_1ACB934B4, 0, v26, v27);
    sub_1ACB56FB4(v15, "NOCASE", 1u, 0, (uint64_t)sub_1ACBA6A74, 0, v28, v29);
    sub_1ACB56FB4(v15, "RTRIM", 1u, 0, (uint64_t)sub_1ACC4EC84, 0, v30, v31);
    if (*(_BYTE *)(v15 + 103))
      goto LABEL_50;
    *(_DWORD *)(v15 + 76) = v13;
    if (((1 << (v11 & 7)) & 0x46) != 0)
    {
      v36 = sub_1ACC36664(a4, a1, &v87, (uint64_t *)v15, (const char **)&__s, &v85);
    }
    else
    {
      v85 = sqlite3_mprintf("flags must include SQLITE_OPEN_READONLY or SQLITE_OPEN_READWRITE");
      v36 = sub_1ACBBE20C(188893);
    }
    v50 = v36;
    if (v36)
    {
      if (v36 == 7)
        sub_1ACBC741C(v15, v37, v38, v39, v40, v41, v42, v43);
      v51 = v85;
      if (v85)
        v52 = "%s";
      else
        v52 = 0;
      sub_1ACBC3FCC(v15, v50, v52, v39, v40, v41, v42, v43, (char)v85);
      if (v51)
      {
        v53 = (void (**)(char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v51);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v51);
          v51 = (char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_50;
          v53 = (void (**)(char *))&xmmword_1ECD3B1D0;
        }
        (*v53)(v51);
      }
LABEL_50:
      if (*v17)
        xmmword_1ECD3B1D0(*v17);
      v32 = *(unsigned __int8 *)(v15 + 113);
      if (v32 == 109 || v32 == 118 || v32 == 186)
      {
        if (*(_BYTE *)(v15 + 103))
          goto LABEL_56;
        v10 = (*(_DWORD *)(v15 + 88) & *(_DWORD *)(v15 + 80));
      }
      else
      {
        sqlite3_log(21, "API call with %s database connection pointer", "invalid");
        v10 = sub_1ACBBE20C(187990);
      }
      v33 = v10;
      if (v10 == 7)
        goto LABEL_57;
      if ((_DWORD)v10)
      {
        *(_BYTE *)(v15 + 113) = -70;
        goto LABEL_58;
      }
      if (qword_1ECD3EAC8 != -1)
        dispatch_once(&qword_1ECD3EAC8, &unk_1E5C754C0);
      if (dword_1EECAD2B4 == 2)
      {
        v72 = *(unsigned __int8 *)(v15 + 113);
        if (v72 == 186)
          goto LABEL_151;
        if (v72 != 118)
        {
          if (v72 != 109)
          {
LABEL_152:
            v73 = "invalid";
            goto LABEL_153;
          }
LABEL_151:
          v73 = "unopened";
LABEL_153:
          sqlite3_log(21, "API call with %s database connection pointer", v73);
          sub_1ACBBE20C(187525);
          goto LABEL_154;
        }
        v77 = *v17;
        if (*v17)
        {
          xmmword_1ECD3B1C0(v77);
          v77 = *v17;
        }
        v78 = sub_1ACCA85CC;
      }
      else
      {
        if (dword_1EECAD2B4 != 1)
          goto LABEL_154;
        v65 = *(unsigned __int8 *)(v15 + 113);
        if (v65 == 186)
          goto LABEL_151;
        if (v65 != 118)
        {
          if (v65 != 109)
            goto LABEL_152;
          goto LABEL_151;
        }
        v77 = *v17;
        if (*v17)
        {
          xmmword_1ECD3B1C0(v77);
          v77 = *v17;
        }
        v78 = _sqlite_auto_profile;
      }
      *(_QWORD *)(v15 + 256) = v78;
      *(_QWORD *)(v15 + 264) = v15;
      *(_BYTE *)(v15 + 110) = *(_BYTE *)(v15 + 110) & 0xF | 0x80;
      if (v77)
        xmmword_1ECD3B1D0(v77);
LABEL_154:
      if (dword_1EECAD2B8 == 2)
      {
        v75 = *(unsigned __int8 *)(v15 + 113);
        if (v75 == 186)
          goto LABEL_163;
        if (v75 != 118)
        {
          if (v75 != 109)
          {
LABEL_164:
            v76 = "invalid";
            goto LABEL_165;
          }
LABEL_163:
          v76 = "unopened";
LABEL_165:
          sqlite3_log(21, "API call with %s database connection pointer", v76);
          sub_1ACBBE20C(187470);
          goto LABEL_166;
        }
        if (*v17)
        {
          xmmword_1ECD3B1C0(*v17);
          v79 = *(_QWORD *)(v15 + 24);
          *(_BYTE *)(v15 + 110) = 64;
          v80 = sub_1ACCA86D0;
LABEL_179:
          *(_QWORD *)(v15 + 240) = v80;
          *(_QWORD *)(v15 + 248) = v15;
          if (v79)
            xmmword_1ECD3B1D0(v79);
          goto LABEL_166;
        }
        v34 = 0;
        v10 = 0;
        v33 = 0;
        *(_BYTE *)(v15 + 110) = 64;
        v84 = sub_1ACCA86D0;
      }
      else
      {
        if (dword_1EECAD2B8 != 1)
        {
LABEL_166:
          v34 = 0;
          v10 = 0;
          v33 = 0;
          goto LABEL_59;
        }
        v74 = *(unsigned __int8 *)(v15 + 113);
        if (v74 == 186)
          goto LABEL_163;
        if (v74 != 118)
        {
          if (v74 != 109)
            goto LABEL_164;
          goto LABEL_163;
        }
        if (*v17)
        {
          xmmword_1ECD3B1C0(*v17);
          v79 = *(_QWORD *)(v15 + 24);
          *(_BYTE *)(v15 + 110) = 64;
          v80 = _sqlite_auto_trace;
          goto LABEL_179;
        }
        v34 = 0;
        v10 = 0;
        v33 = 0;
        *(_BYTE *)(v15 + 110) = 64;
        v84 = _sqlite_auto_trace;
      }
      *(_QWORD *)(v15 + 240) = v84;
      *(_QWORD *)(v15 + 248) = v15;
      goto LABEL_59;
    }
    v54 = v87;
    if ((v87 & 2) != 0 && geteuid() == 248)
    {
      sqlite3_log(1, "user 'setup'(248) opening database '%s' with SQLITE_OPEN_READWRITE", a1);
      v55 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
      if (v55)
        sub_1ACCB3DB4(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    v63 = sub_1ACB57BF0(*(_QWORD *)v15, __s, v15, (uint64_t *)(*(_QWORD *)(v15 + 32) + 8), 0, v54 | 0x100);
    if (v63)
    {
      if (v63 == 3082)
        v64 = 7;
      else
        v64 = v63;
      *(_DWORD *)(v15 + 80) = v64;
      sub_1ACBE938C(v15, v64);
      goto LABEL_50;
    }
    sub_1ACB5AFF0(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8));
    v66 = sub_1ACB5B014(v15, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8));
    v67 = *(_QWORD *)(v15 + 32);
    *(_QWORD *)(v67 + 24) = v66;
    if (!*(_BYTE *)(v15 + 103))
    {
      sub_1ACBFC560(v15, *(unsigned __int8 *)(v66 + 113));
      v67 = *(_QWORD *)(v15 + 32);
    }
    v68 = *(_QWORD *)(v67 + 8);
    if (*(_BYTE *)(v68 + 17))
    {
      v69 = *(_DWORD *)(v68 + 20) - 1;
      *(_DWORD *)(v68 + 20) = v69;
      if (!v69)
        sub_1ACBED048(v68);
    }
    v70 = sub_1ACB5B014(v15, 0);
    v71 = *(_QWORD *)(v15 + 32);
    *(_QWORD *)(v71 + 56) = v70;
    *(_QWORD *)v71 = "main";
    *(_BYTE *)(v71 + 16) = 3;
    *(_QWORD *)(v71 + 32) = "temp";
    *(_BYTE *)(v71 + 48) = 1;
    *(_BYTE *)(v15 + 113) = 118;
    if (*(_BYTE *)(v15 + 103))
      goto LABEL_50;
    *(_DWORD *)(v15 + 80) = 0;
    if (*(_QWORD *)(v15 + 416))
      sub_1ACBE938C(v15, 0);
    else
      *(_DWORD *)(v15 + 84) = -1;
    sub_1ACC4ED14(v15);
    v81 = sqlite3_errcode((sqlite3 *)v15);
    if (v81)
      goto LABEL_193;
    v82 = sub_1ACC4EDB8((unsigned __int8 *)v15);
    v83 = v82 == 0;
    if (v82)
      goto LABEL_189;
    v82 = sub_1ACC4F144(v15);
    v83 = v82 == 0;
    if (v82)
      goto LABEL_189;
    v82 = sub_1ACC4F4EC(v15);
    v83 = v82 == 0;
    if (v82
      || (v82 = sub_1ACC4F68C(v15), v83 = v82 == 0, v82)
      || (v82 = sub_1ACC4F724(), v83 = v82 == 0, v82)
      || (v82 = sub_1ACC4F740(v15), v83 = v82 == 0, v82))
    {
LABEL_189:
      v81 = v82;
      if (!v83)
        goto LABEL_192;
    }
    else
    {
      v81 = sub_1ACC4F844(v15);
      if (v81)
        goto LABEL_192;
    }
    if (!*(_BYTE *)(v15 + 103))
    {
      sub_1ACBBDA6C((sqlite3 *)v15);
      v81 = sub_1ACCB2E6C((sqlite3 *)v15);
    }
LABEL_192:
    if (!v81)
    {
LABEL_194:
      sub_1ACBCEB00(v15, 0, dword_1ECD3B154, dword_1ECD3B158);
      sqlite3_wal_autocheckpoint((sqlite3 *)v15, 1000);
      goto LABEL_50;
    }
LABEL_193:
    *(_DWORD *)(v15 + 80) = v81;
    sub_1ACBE938C(v15, v81);
    goto LABEL_194;
  }
  if ((_BYTE)word_1ECD3B144)
    goto LABEL_22;
  *(_QWORD *)(v15 + 24) = 0;
LABEL_26:
  v18 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v15);
    v15 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_56;
    v18 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
  }
  (*v18)(v15);
  v15 = 0;
LABEL_56:
  v10 = 7;
LABEL_57:
  sub_1ACBCF268(v15, 0);
  v15 = 0;
  v33 = 7;
LABEL_58:
  v34 = v15 == 0;
LABEL_59:
  *a2 = v15;
  if (off_1ECD3B2C8)
    off_1ECD3B2C8(qword_1ECD3B2D0, v15, a1, 0);
  if (!(_DWORD)v10)
    sub_1ACC36F18(v15, 0, __s);
  if (v9)
  {
    if (v34)
    {
      switch((_DWORD)v10)
      {
        case 0x204:
          v35 = "abort due to ROLLBACK";
          break;
        case 0x65:
          v35 = "no more rows available";
          break;
        case 0x64:
          v35 = "another row available";
          break;
        default:
          if (v33 > 0x1C || ((0x1410004uLL >> v33) & 1) != 0)
            v35 = "unknown error";
          else
            v35 = off_1E5C74AE8[v33];
          break;
      }
    }
    else
    {
      v35 = sqlite3_errmsg((sqlite3 *)v15);
    }
    if (qword_1ECD3EA78 != -1)
      dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
    v44 = qword_1ECD3EA70;
    if (v34)
      v45 = os_signpost_id_generate((os_log_t)qword_1ECD3EA70);
    else
      v45 = os_signpost_id_make_with_pointer((os_log_t)qword_1ECD3EA70, (const void *)v15);
    v46 = v45;
    if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (os_signpost_enabled(v44))
      {
        v47 = "(null)";
        if (a1)
          v47 = a1;
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)v89 = v9;
        *(_WORD *)&v89[8] = 2080;
        *(_QWORD *)&v89[10] = v47;
        _os_signpost_emit_with_name_impl(&dword_1ACB54000, v44, OS_SIGNPOST_INTERVAL_BEGIN, v46, "open", "startTime=%{signpost.description:begin_time}llu path=%s", buf, 0x16u);
      }
      if (os_signpost_enabled(v44))
      {
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v89 = v10;
        *(_WORD *)&v89[4] = 2050;
        *(_QWORD *)&v89[6] = v15;
        *(_WORD *)&v89[14] = 2082;
        *(_QWORD *)&v89[16] = v35;
        _os_signpost_emit_with_name_impl(&dword_1ACB54000, v44, OS_SIGNPOST_INTERVAL_END, v46, "open", "rc=%{public}d db=%{public}p errMsg=%{public}s", buf, 0x1Cu);
      }
    }
  }
  if (!__s)
    return v10;
  for (i = __s - 4; i[3] || i[2] || i[1] || *i; --i)
    ;
  v49 = (void (**)(char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(i);
    --qword_1ECD3E8D0;
    off_1ECD3B168(i);
    i = (char *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      return v10;
    v49 = (void (**)(char *))&xmmword_1ECD3B1D0;
  }
  (*v49)(i);
  return v10;
}

int sqlite3_initialize(void)
{
  int v0;
  uint64_t v1;
  BOOL v2;
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)(void);
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(_QWORD);
  void (*v8)(uint64_t);
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;

  if (!(_DWORD)qword_1ECD3B294)
  {
    v1 = os_unfair_recursive_lock_lock_with_options();
    v0 = 0;
    if (qword_1ECD3B294)
      goto LABEL_75;
    if (!qword_1ECD3B1B0)
    {
      v2 = word_1ECD3B144 == 0;
      if ((_BYTE)word_1ECD3B144)
        v3 = sub_1ACBE0A30;
      else
        v3 = sub_1ACBE0F70;
      xmmword_1ECD3B1A0 = (uint64_t (*)(_QWORD))v3;
      if ((_BYTE)word_1ECD3B144)
        v4 = sub_1ACBE0A38;
      else
        v4 = sub_1ACBE0F78;
      *(&xmmword_1ECD3B1A0 + 1) = (uint64_t (*)(_QWORD))v4;
      if ((_BYTE)word_1ECD3B144)
        v5 = (uint64_t (*)(void))sub_1ACBE0B68;
      else
        v5 = nullsub_4;
      off_1ECD3B1B8 = v5;
      if ((_BYTE)word_1ECD3B144)
        v6 = sub_1ACBE0CE8;
      else
        v6 = (uint64_t (*)(uint64_t))nullsub_5;
      xmmword_1ECD3B1C0 = v6;
      if ((_BYTE)word_1ECD3B144)
        v7 = sub_1ACBE0D64;
      else
        v7 = (uint64_t (*)(_QWORD))sub_1ACBE0F90;
      *(&xmmword_1ECD3B1C0 + 1) = v7;
      if ((_BYTE)word_1ECD3B144)
        v8 = sub_1ACBE0D9C;
      else
        v8 = (void (*)(uint64_t))nullsub_6;
      qword_1ECD3B1E0 = 0;
      *(_OWORD *)&xmmword_1ECD3B1D0 = (unint64_t)v8;
      __dmb(0xBu);
      v9 = (uint64_t (*)(_QWORD))sub_1ACBE0A40;
      if (v2)
        v9 = (uint64_t (*)(_QWORD))sub_1ACBE0F80;
      qword_1ECD3B1B0 = v9;
    }
    v0 = xmmword_1ECD3B1A0(v1);
    __dmb(0xBu);
    if (v0)
      goto LABEL_75;
    if ((_BYTE)word_1ECD3B144)
    {
      v10 = qword_1ECD3B1B0(2);
      v11 = v10;
      if (v10)
      {
        xmmword_1ECD3B1C0(v10);
        v12 = 0;
LABEL_32:
        dword_1ECD3B29C = 1;
        if (!dword_1ECD3B2A0)
        {
          if (!qword_1ECD3B160)
            sqlite3_config(4, &off_1E5C749D8);
          if ((_BYTE)word_1ECD3B144)
            v14 = qword_1ECD3B1B0(3);
          else
            v14 = 0;
          *(_QWORD *)&xmmword_1ECD3E930 = v14;
          if (!qword_1ECD3B278 || dword_1ECD3B280 < 512 || dword_1ECD3B284 <= 0)
          {
            qword_1ECD3B278 = 0;
            dword_1ECD3B280 = 0;
          }
          v16 = off_1ECD3B188(qword_1ECD3B198);
          if (v16)
          {
            v0 = v16;
            v13 = 0;
            xmmword_1ECD3E930 = 0u;
            *(_OWORD *)&qword_1ECD3E940 = 0u;
            goto LABEL_50;
          }
        }
        dword_1ECD3B2A0 = 1;
        if (!qword_1ECD3B2B0)
        {
          if ((_BYTE)word_1ECD3B144)
          {
            v15 = qword_1ECD3B1B0(1);
            qword_1ECD3B2B0 = v15;
            if ((_BYTE)word_1ECD3B144 && !v15)
            {
              v13 = 0;
              v0 = 7;
              goto LABEL_50;
            }
          }
          else
          {
            qword_1ECD3B2B0 = 0;
          }
        }
        v0 = 0;
        ++dword_1ECD3B2A8;
        v13 = 1;
LABEL_50:
        if ((v12 & 1) == 0)
          xmmword_1ECD3B1D0(v11);
        if (v13)
        {
          if (qword_1ECD3B2B0)
            xmmword_1ECD3B1C0(qword_1ECD3B2B0);
          if (qword_1ECD3B294)
          {
            v0 = 0;
          }
          else
          {
            HIDWORD(qword_1ECD3B294) = 1;
            sub_1ACC397F4();
            sub_1ACCB3268();
            qword_1ECD3EA40 = 0;
            xmmword_1ECD3EA20 = 0u;
            unk_1ECD3EA30 = 0u;
            xmmword_1ECD3EA00 = 0u;
            unk_1ECD3EA10 = 0u;
            xmmword_1ECD3E9E0 = 0u;
            unk_1ECD3E9F0 = 0u;
            xmmword_1ECD3E9C0 = 0u;
            unk_1ECD3E9D0 = 0u;
            xmmword_1ECD3E9A0 = 0u;
            unk_1ECD3E9B0 = 0u;
            xmmword_1ECD3E990 = 0u;
            sub_1ACBCDA88();
            if (dword_1ECD3B2A4 || (v0 = sub_1ACBCDF6C()) == 0)
            {
              dword_1ECD3B2A4 = 1;
              v0 = sub_1ACBCDFE0();
              if (!v0)
              {
                v0 = sub_1ACBCE0A8();
                if (!v0)
                {
                  sub_1ACBCE22C((_QWORD *)qword_1ECD3B278, dword_1ECD3B280, dword_1ECD3B284);
                  __dmb(0xBu);
                  LODWORD(qword_1ECD3B294) = 1;
                }
              }
            }
            HIDWORD(qword_1ECD3B294) = 0;
          }
          if (qword_1ECD3B2B0)
            xmmword_1ECD3B1D0(qword_1ECD3B2B0);
          if ((v12 & 1) == 0)
            xmmword_1ECD3B1C0(v11);
          v17 = __OFSUB__(dword_1ECD3B2A8--, 1);
          if ((dword_1ECD3B2A8 < 0) ^ v17 | (dword_1ECD3B2A8 == 0))
          {
            if (qword_1ECD3B2B0)
              off_1ECD3B1B8();
            qword_1ECD3B2B0 = 0;
          }
          if ((v12 & 1) == 0)
            xmmword_1ECD3B1D0(v11);
        }
LABEL_75:
        os_unfair_recursive_lock_unlock();
        return v0;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 1;
    goto LABEL_32;
  }
  return 0;
}

int sqlite3_config(int a1, ...)
{
  int v1;
  int result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  va_list va;

  va_start(va, a1);
  v26 = va_arg(va, _QWORD);
  v27 = va_arg(va, _QWORD);
  v28 = va_arg(va, _QWORD);
  if ((_DWORD)qword_1ECD3B294 && (a1 > 0x3F || ((1 << a1) & 0x1010000) == 0))
    return sub_1ACBBE20C(185577);
  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      sub_1ACBBE20C(185592);
      goto LABEL_6;
    case 1:
      result = 0;
      word_1ECD3B144 = 1;
      return result;
    case 2:
      result = 0;
      word_1ECD3B144 = 257;
      return result;
    case 3:
      result = 0;
      v3 = *(_OWORD *)v26;
      v4 = *(_OWORD *)(v26 + 16);
      v5 = *(_OWORD *)(v26 + 32);
      v6 = *(_OWORD *)(v26 + 48);
      v7 = &qword_1ECD3B160;
      goto LABEL_14;
    case 4:
      if (!qword_1ECD3B160)
        sqlite3_config(4, &off_1E5C749D8);
      result = 0;
      v7 = (_OWORD *)v26;
      v3 = *(_OWORD *)&qword_1ECD3B160;
      v4 = *(_OWORD *)&off_1ECD3B170;
      v5 = *(_OWORD *)&unk_1ECD3B180;
      v6 = *(_OWORD *)&off_1ECD3B190;
LABEL_14:
      v7[2] = v5;
      v7[3] = v6;
      *v7 = v3;
      v7[1] = v4;
      break;
    case 6:
      result = 0;
      qword_1ECD3B278 = v26;
      dword_1ECD3B280 = v27;
      dword_1ECD3B284 = v28;
      break;
    case 8:
      result = 0;
      dword_1ECD3B140 = v26;
      break;
    case 9:
      result = 0;
      xmmword_1ECD3B1A0 = *(_OWORD *)v26;
      v8 = *(_OWORD *)(v26 + 16);
      v9 = *(_OWORD *)(v26 + 32);
      v10 = *(_OWORD *)(v26 + 48);
      qword_1ECD3B1E0 = *(_QWORD *)(v26 + 64);
      *(_OWORD *)&xmmword_1ECD3B1C0 = v9;
      *(_OWORD *)&xmmword_1ECD3B1D0 = v10;
      *(_OWORD *)&qword_1ECD3B1B0 = v8;
      break;
    case 10:
      result = 0;
      *(_OWORD *)v26 = xmmword_1ECD3B1A0;
      v11 = *(_OWORD *)&qword_1ECD3B1B0;
      v12 = *(_OWORD *)&xmmword_1ECD3B1C0;
      v13 = *(_OWORD *)&xmmword_1ECD3B1D0;
      *(_QWORD *)(v26 + 64) = qword_1ECD3B1E0;
      *(_OWORD *)(v26 + 32) = v12;
      *(_OWORD *)(v26 + 48) = v13;
      *(_OWORD *)(v26 + 16) = v11;
      break;
    case 12:
      result = 0;
      dword_1ECD3B154 = v26;
      dword_1ECD3B158 = v27;
      break;
    case 13:
      return result;
    case 15:
      result = 0;
      off_1ECD3B2B8 = (_UNKNOWN *)v26;
      qword_1ECD3B2C0 = v27;
      break;
    case 16:
      result = 0;
      byte_1ECD3B146 = v26;
      break;
    case 17:
      result = 0;
      v14 = *(_OWORD *)v26;
      v15 = *(_OWORD *)(v26 + 32);
      xmmword_1ECD3B1F8 = *(_OWORD *)(v26 + 16);
      xmmword_1ECD3B208 = v15;
      xmmword_1ECD3B1E8 = v14;
      v16 = *(_OWORD *)(v26 + 48);
      v17 = *(_OWORD *)(v26 + 64);
      v18 = *(_OWORD *)(v26 + 80);
      off_1ECD3B248 = *(_UNKNOWN **)(v26 + 96);
      *(_OWORD *)&xmmword_1ECD3B228 = v17;
      xmmword_1ECD3B238 = v18;
      xmmword_1ECD3B218 = v16;
      break;
    case 18:
      if (!(_QWORD)xmmword_1ECD3B1F8)
        sub_1ACBCE450();
      result = 0;
      v19 = xmmword_1ECD3B1E8;
      v20 = xmmword_1ECD3B208;
      *(_OWORD *)(v26 + 16) = xmmword_1ECD3B1F8;
      *(_OWORD *)(v26 + 32) = v20;
      *(_OWORD *)v26 = v19;
      v21 = xmmword_1ECD3B218;
      v22 = *(_OWORD *)&xmmword_1ECD3B228;
      v23 = xmmword_1ECD3B238;
      *(_QWORD *)(v26 + 96) = off_1ECD3B248;
      *(_OWORD *)(v26 + 64) = v22;
      *(_OWORD *)(v26 + 80) = v23;
      *(_OWORD *)(v26 + 48) = v21;
      break;
    case 19:
      result = 0;
      byte_1ECD3B147 = v26;
      break;
    case 20:
      result = 0;
      off_1ECD3B2C8 = (_UNKNOWN *)v26;
      qword_1ECD3B2D0 = v27;
      break;
    case 21:
      result = 0;
      v24 = v27;
      if (v27 >= 0x1400000)
        v24 = 20971520;
      v25 = v26 & ~(v26 >> 63);
      if (v25 >= v24)
        v25 = v24;
      qword_1ECD3B268 = v25;
      qword_1ECD3B270 = v24;
      break;
    case 23:
      result = 0;
      *(_DWORD *)v26 = 272;
      break;
    case 24:
      result = 0;
      dword_1ECD3B290 = v26;
      break;
    case 25:
      result = 0;
      dword_1ECD3B15C = v26;
      break;
    case 26:
      result = 0;
      byte_1ECD3B148 = v26;
      break;
    case 28:
      result = 0;
      qword_1ECD3B2D8 = v26;
      break;
    default:
LABEL_6:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_1ACB56B0C()
{
  char *v0;
  const char *v1;
  const char *v2;
  malloc_zone_t *zone;
  const char *v4;
  size_t v6;
  int v7;

  if ((byte_1ECD3EAC0 & 1) == 0)
  {
    v0 = getenv("SQLITE_MALLOC_ZONE");
    if (!v0)
      goto LABEL_7;
    v1 = v0;
    if (!strcmp(v0, "none"))
      goto LABEL_14;
    if (!strcmp(v1, "default"))
    {
      qword_1EECAD2A8 = (uint64_t)malloc_default_zone();
      goto LABEL_14;
    }
    if (!strcmp(v1, "custom"))
      goto LABEL_10;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid parameter to environment variable SQLITE_MALLOC_ZONE: \"%s\". Supported values are \"default\" and \"custom\"\n", v1);
    if ((byte_1ECD3EAC0 & 1) == 0)
    {
LABEL_7:
      v2 = getprogname();
      if (v2 && !strncmp("homed", v2, 5uLL))
      {
        zone = malloc_create_zone(0x1000uLL, 0);
        qword_1EECAD2A8 = (uint64_t)zone;
        v4 = "Sqlite_Heap_homed";
        goto LABEL_13;
      }
      v7 = 0;
      v6 = 4;
      sysctlbyname("hw.ncpu", &v7, &v6, 0, 0);
      if (v7 <= 1)
      {
LABEL_10:
        zone = malloc_create_zone(0x1000uLL, 0);
        qword_1EECAD2A8 = (uint64_t)zone;
        v4 = "Sqlite_Heap";
LABEL_13:
        malloc_set_zone_name(zone, v4);
      }
LABEL_14:
      byte_1ECD3EAC0 = 1;
    }
  }
  return 0;
}

void *sub_1ACB56C58(int a1)
{
  malloc_zone_t *v2;
  void *v3;

  v2 = (malloc_zone_t *)qword_1EECAD2A8;
  if (!qword_1EECAD2A8)
    v2 = malloc_default_zone();
  v3 = malloc_type_zone_malloc(v2, a1, 0x31CE2C96uLL);
  if (!v3)
    sqlite3_log(7, "failed to allocate %u bytes of memory", a1);
  return v3;
}

uint64_t sub_1ACB56CBC()
{
  return 0;
}

void *__cdecl sqlite3_malloc(int a1)
{
  int v2;

  v2 = sqlite3_initialize();
  if (a1 < 1 || v2)
    return 0;
  else
    return (void *)sub_1ACB5D828(a1);
}

void sqlite3_free(void *a1)
{
  void *v1;
  __int128 *v2;

  if (a1)
  {
    v1 = a1;
    v2 = (__int128 *)&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*(void (**)(void *))v2)(v1);
      return;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0();
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
}

void sub_1ACB56DB8(void *ptr)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)qword_1EECAD2A8;
  if (!qword_1EECAD2A8)
    v2 = malloc_default_zone();
  malloc_zone_free(v2, ptr);
}

int sqlite3_vfs_register(sqlite3_vfs *a1, int makeDflt)
{
  int result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *p_pNext;
  sqlite3_vfs *v9;
  sqlite3_vfs *v10;
  sqlite3_vfs *v11;
  BOOL v12;

  result = sqlite3_initialize();
  if (result)
    return result;
  if (!a1)
    return sub_1ACBBE20C(26693);
  if ((_BYTE)word_1ECD3B144)
  {
    v5 = qword_1ECD3B1B0(2);
    v6 = v5;
    if (v5)
    {
      xmmword_1ECD3B1C0(v5);
      v7 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
LABEL_9:
  p_pNext = &qword_1ECD3E928;
  v9 = (sqlite3_vfs *)qword_1ECD3E928;
  if ((sqlite3_vfs *)qword_1ECD3E928 == a1)
    goto LABEL_19;
  if (qword_1ECD3E928)
  {
    v10 = (sqlite3_vfs *)qword_1ECD3E928;
    do
    {
      v11 = v10;
      v10 = v10->pNext;
      if (v10)
        v12 = v10 == a1;
      else
        v12 = 1;
    }
    while (!v12);
    if (v10 != a1)
      goto LABEL_20;
    p_pNext = (uint64_t *)&v11->pNext;
LABEL_19:
    *p_pNext = (uint64_t)a1->pNext;
    v9 = (sqlite3_vfs *)qword_1ECD3E928;
LABEL_20:
    p_pNext = &qword_1ECD3E928;
    if (!makeDflt && v9)
    {
      p_pNext = (uint64_t *)&v9->pNext;
      v9 = v9->pNext;
    }
  }
  a1->pNext = v9;
  *p_pNext = (uint64_t)a1;
  if ((v7 & 1) == 0)
    xmmword_1ECD3B1D0(v6);
  return 0;
}

sqlite3_vfs *__cdecl sqlite3_vfs_find(const char *zVfsName)
{
  sqlite3_vfs *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (sqlite3_initialize())
    return 0;
  if ((_BYTE)word_1ECD3B144)
  {
    v3 = qword_1ECD3B1B0(2);
    v4 = v3;
    if (v3)
    {
      xmmword_1ECD3B1C0(v3);
      v5 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_8:
  v2 = (sqlite3_vfs *)qword_1ECD3E928;
  if (zVfsName && qword_1ECD3E928)
  {
    do
    {
      if (!strcmp(zVfsName, v2->zName))
        break;
      v2 = v2->pNext;
    }
    while (v2);
  }
  if ((v5 & 1) == 0)
    xmmword_1ECD3B1D0(v4);
  return v2;
}

uint64_t sub_1ACB56FB4(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  char v14;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _BYTE *v29;
  char *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t *v40;
  _DWORD *v41;
  int v42;
  _BYTE *v43;
  char *k;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  void (*v49)(_QWORD);
  void (*v50)(_QWORD);
  _QWORD *v51;
  char v52;

  if (a3 == 8 || a3 == 4)
    v9 = 2;
  else
    v9 = a3;
  if (v9 - 4 <= 0xFFFFFFFC)
    return sub_1ACBBE20C(188047);
  v14 = a3;
  if (a2)
  {
    v17 = *(_QWORD *)(a1 + 656);
    if (v17)
    {
      v18 = *a2;
      if (*a2)
      {
        v19 = 0;
        v20 = (unsigned __int8 *)(a2 + 1);
        do
        {
          v19 = -1640531535 * (v19 + byte_1ACCB6333[v18]);
          v21 = *v20++;
          v18 = v21;
        }
        while (v21);
      }
      else
      {
        v19 = 0;
      }
      v28 = (_DWORD *)(v17 + 16 * (v19 % *(_DWORD *)(a1 + 640)));
      v23 = (uint64_t *)(v28 + 2);
      v24 = *v28;
      if (v24)
      {
        while (1)
        {
LABEL_26:
          v23 = (uint64_t *)*v23;
          v29 = (_BYTE *)v23[3];
          for (i = a2; ; ++i)
          {
            v31 = *v29;
            v32 = *i;
            if ((_DWORD)v31 != (_DWORD)v32)
              break;
            if (!*v29)
              goto LABEL_19;
LABEL_28:
            ++v29;
          }
          if (byte_1ACCB6333[v31] == byte_1ACCB6333[v32])
            goto LABEL_28;
          if (!--v24)
          {
            v23 = &qword_1EECAD260;
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      v23 = (uint64_t *)(a1 + 648);
      v24 = *(_DWORD *)(a1 + 644);
      if (v24)
        goto LABEL_26;
    }
    v23 = &qword_1EECAD260;
LABEL_19:
    v25 = v23[2];
    if (!v25)
      goto LABEL_67;
    v26 = v25 + 40 * v9;
    v22 = v26 - 40;
    if (v26 == 40)
      goto LABEL_67;
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    if (!v22)
      goto LABEL_67;
  }
  if (!*(_QWORD *)(v22 + 24))
    goto LABEL_67;
  if (!*(_DWORD *)(a1 + 208))
  {
    for (j = *(_QWORD *)(a1 + 8); j; j = *(_QWORD *)(j + 16))
      *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 1;
    v34 = *(unsigned __int8 *)(v22 + 8);
    if (v9 == (v34 & 0xFFFFFFF7))
    {
      v35 = *(_QWORD *)(a1 + 656);
      if (v35)
      {
        v36 = *a2;
        if (*a2)
        {
          v37 = 0;
          v38 = (unsigned __int8 *)(a2 + 1);
          do
          {
            v37 = -1640531535 * (v37 + byte_1ACCB6333[v36]);
            v39 = *v38++;
            v36 = v39;
          }
          while (v39);
        }
        else
        {
          v37 = 0;
        }
        v41 = (_DWORD *)(v35 + 16 * (v37 % *(_DWORD *)(a1 + 640)));
        v40 = (uint64_t *)(v41 + 2);
      }
      else
      {
        v40 = (uint64_t *)(a1 + 648);
        v41 = (_DWORD *)(a1 + 644);
      }
      v42 = *v41;
      if (v42)
      {
        while (1)
        {
          v40 = (uint64_t *)*v40;
          v43 = (_BYTE *)v40[3];
          for (k = a2; ; ++k)
          {
            v45 = *v43;
            v46 = *k;
            if ((_DWORD)v45 != (_DWORD)v46)
              break;
            if (!*v43)
              goto LABEL_55;
LABEL_48:
            ++v43;
          }
          if (byte_1ACCB6333[v45] == byte_1ACCB6333[v46])
            goto LABEL_48;
          if (!--v42)
          {
            v40 = &qword_1EECAD260;
            goto LABEL_55;
          }
        }
      }
      v40 = &qword_1EECAD260;
LABEL_55:
      v47 = v40[2];
      if (*(unsigned __int8 *)(v47 + 8) == v34)
      {
        v48 = *(void (**)(_QWORD))(v47 + 32);
        if (v48)
        {
          v48(*(_QWORD *)(v47 + 16));
          v34 = *(unsigned __int8 *)(v22 + 8);
        }
        *(_QWORD *)(v47 + 24) = 0;
      }
      if (*(unsigned __int8 *)(v47 + 48) == v34)
      {
        v49 = *(void (**)(_QWORD))(v47 + 72);
        if (v49)
        {
          v49(*(_QWORD *)(v47 + 56));
          v34 = *(unsigned __int8 *)(v22 + 8);
        }
        *(_QWORD *)(v47 + 64) = 0;
      }
      if (*(unsigned __int8 *)(v47 + 88) == v34)
      {
        v50 = *(void (**)(_QWORD))(v47 + 112);
        if (v50)
          v50(*(_QWORD *)(v47 + 96));
        *(_QWORD *)(v47 + 104) = 0;
      }
    }
LABEL_67:
    v51 = sub_1ACBFC650(a1, v9, a2, 1);
    if (!v51)
      return 7;
    v51[2] = a4;
    v51[3] = a5;
    v51[4] = a6;
    *((_BYTE *)v51 + 8) = v9 | v14 & 8;
    *(_DWORD *)(a1 + 80) = 0;
    if (*(_QWORD *)(a1 + 416))
    {
      sub_1ACBE938C(a1, 0);
      return 0;
    }
    else
    {
      v27 = 0;
      *(_DWORD *)(a1 + 84) = -1;
    }
    return v27;
  }
  v27 = 5;
  sub_1ACBC3FCC(a1, 5, "unable to delete/modify collation sequence due to active statements", a4, a5, a6, a7, a8, v52);
  return v27;
}

void *sub_1ACB5733C(uint64_t a1, unint64_t a2)
{
  void *v3;

  if (!a1)
  {
    v3 = (void *)sub_1ACB5D828(a2);
    if (!v3)
      return v3;
    goto LABEL_3;
  }
  v3 = (void *)sub_1ACBE1124(a1, a2);
  if (v3)
LABEL_3:
    bzero(v3, a2);
  return v3;
}

uint64_t sub_1ACB57390(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  _DWORD *v27;
  _BYTE *v28;
  unsigned __int8 *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (**v35)(uint64_t *);
  int v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t **v39;
  _BYTE *v40;
  int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD **v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v11 = 0;
    v12 = (uint64_t *)(a1 + 8);
    v13 = *(_DWORD *)(a1 + 4);
    if (v13)
      goto LABEL_35;
LABEL_7:
    v12 = &qword_1EECAD260;
    goto LABEL_8;
  }
  v7 = *a2;
  if (*a2)
  {
    v8 = 0;
    v9 = a2 + 1;
    do
    {
      v8 = -1640531535 * (v8 + byte_1ACCB6333[v7]);
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
  }
  else
  {
    v8 = 0;
  }
  v11 = v8 % *(_DWORD *)a1;
  v27 = (_DWORD *)(v6 + 16 * v11);
  v12 = (uint64_t *)(v27 + 2);
  v13 = *v27;
  if (!v13)
    goto LABEL_7;
  do
  {
LABEL_35:
    v12 = (uint64_t *)*v12;
    v28 = (_BYTE *)v12[3];
    for (i = a2; ; ++i)
    {
      v30 = *v28;
      v31 = *i;
      if ((_DWORD)v30 != (_DWORD)v31)
        break;
      if (!*v28)
        goto LABEL_8;
LABEL_37:
      ++v28;
    }
    if (byte_1ACCB6333[v30] == byte_1ACCB6333[v31])
      goto LABEL_37;
    --v13;
  }
  while (v13);
  v12 = &qword_1EECAD260;
LABEL_8:
  v14 = v12[2];
  if (!v14)
  {
    if (!a3)
      return 0;
    v15 = sub_1ACB5D828(32);
    if (!v15)
      return a3;
    v16 = (_QWORD *)v15;
    *(_QWORD *)(v15 + 16) = a3;
    *(_QWORD *)(v15 + 24) = a2;
    v17 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v17;
    if (v17 < 0xA || v17 <= 2 * *(_DWORD *)a1)
      goto LABEL_84;
    v18 = 2 * v17;
    v19 = v18 >= 0x40 ? 64 : v18;
    if (v19 == *(_DWORD *)a1)
      goto LABEL_84;
    if (off_1EECAD248)
      off_1EECAD248(v15);
    v20 = sub_1ACB5D828((16 * v19));
    v21 = (char *)v20;
    if (off_1EECAD250)
      off_1EECAD250(v20);
    if (!v21)
      goto LABEL_84;
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
    {
      v23 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v22);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v22);
        v22 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_31;
        v23 = &xmmword_1ECD3B1D0;
      }
      (*v23)(v22);
    }
LABEL_31:
    *(_QWORD *)(a1 + 16) = v21;
    v24 = (int)off_1ECD3B178(v21) >> 4;
    *(_DWORD *)a1 = v24;
    bzero(v21, 16 * v24);
    v25 = (uint64_t *)(a1 + 8);
    v26 = *(uint64_t **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v26)
    {
      do
      {
        v40 = (_BYTE *)v26[3];
        v41 = *v40;
        if (*v40)
        {
          v42 = 0;
          v43 = v40 + 1;
          do
          {
            v42 = -1640531535 * (v42 + byte_1ACCB6333[v41]);
            v44 = *v43++;
            v41 = v44;
          }
          while (v44);
        }
        else
        {
          v42 = 0;
        }
        v45 = v42 % v24;
        v46 = (uint64_t *)*v26;
        v47 = &v21[16 * v45];
        if (*(_DWORD *)v47)
        {
          v48 = &v21[16 * v45];
          v49 = *((_QWORD *)v48 + 1);
          ++*(_DWORD *)v47;
          *((_QWORD *)v48 + 1) = v26;
          if (v49)
          {
            *v26 = v49;
            v38 = *(_QWORD *)(v49 + 8);
            v37 = (uint64_t **)(v49 + 8);
            v26[1] = v38;
            v39 = (uint64_t **)*v37;
            if (!*v37)
              v39 = (uint64_t **)(a1 + 8);
            *v39 = v26;
            goto LABEL_62;
          }
        }
        else
        {
          *(_DWORD *)v47 = 1;
          *(_QWORD *)&v21[16 * v45 + 8] = v26;
        }
        v50 = *v25;
        *v26 = *v25;
        if (v50)
          *(_QWORD *)(v50 + 8) = v26;
        v26[1] = 0;
        v37 = (uint64_t **)(a1 + 8);
LABEL_62:
        *v37 = v26;
        v26 = v46;
      }
      while (v46);
    }
    v51 = *a2;
    if (*a2)
    {
      v52 = 0;
      v53 = a2 + 1;
      do
      {
        v52 = -1640531535 * (v52 + byte_1ACCB6333[v51]);
        v54 = *v53++;
        v51 = v54;
      }
      while (v54);
    }
    else
    {
      v52 = 0;
    }
    v11 = v52 % *(_DWORD *)a1;
LABEL_84:
    v55 = *(_QWORD *)(a1 + 16);
    if (v55)
    {
      v56 = (_DWORD *)(v55 + 16 * v11);
      if (*v56)
      {
        v57 = v55 + 16 * v11;
        v58 = *(_QWORD *)(v57 + 8);
        ++*v56;
        *(_QWORD *)(v57 + 8) = v16;
        if (v58)
        {
          *v16 = v58;
          v60 = *(_QWORD *)(v58 + 8);
          v59 = (_QWORD **)(v58 + 8);
          v16[1] = v60;
          v61 = *v59;
          if (!*v59)
            v61 = (_QWORD *)(a1 + 8);
          *v61 = v16;
          v62 = v59;
LABEL_94:
          v14 = 0;
          *v62 = v16;
          return v14;
        }
      }
      else
      {
        *v56 = 1;
        *(_QWORD *)(v55 + 16 * v11 + 8) = v16;
      }
    }
    v64 = *(_QWORD *)(a1 + 8);
    v62 = (_QWORD *)(a1 + 8);
    v63 = v64;
    *v16 = v64;
    if (v64)
      *(_QWORD *)(v63 + 8) = v16;
    v16[1] = 0;
    goto LABEL_94;
  }
  if (a3)
  {
    v12[2] = a3;
    v12[3] = (uint64_t)a2;
    return v14;
  }
  v32 = *v12;
  v33 = (uint64_t *)v12[1];
  if (v33)
  {
    *v33 = v32;
    v32 = *v12;
    if (*v12)
      goto LABEL_45;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v32;
    if (v32)
LABEL_45:
      *(_QWORD *)(v32 + 8) = v33;
  }
  if (v6)
  {
    v34 = v6 + 16 * v11;
    if (*(uint64_t **)(v34 + 8) == v12)
      *(_QWORD *)(v34 + 8) = v32;
    --*(_DWORD *)v34;
  }
  v35 = (void (**)(uint64_t *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v12);
    v12 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v35 = (void (**)(uint64_t *))&xmmword_1ECD3B1D0;
      goto LABEL_55;
    }
  }
  else
  {
LABEL_55:
    (*v35)(v12);
  }
  v36 = *(_DWORD *)(a1 + 4) - 1;
  *(_DWORD *)(a1 + 4) = v36;
  if (!v36)
    sub_1ACBFC410(a1);
  return v14;
}

uint64_t sub_1ACB57870(uint64_t a1, char *__s, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t result))
{
  unsigned int v7;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  __int16 v15;
  int64_t v16;
  uint64_t result;
  __int16 v18;
  uint64_t v19;
  size_t v20;
  signed int v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!__s)
  {
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF2A54((int *)a1);
      return 0;
    }
    else
    {
      result = 0;
      *(_WORD *)(a1 + 20) = 1;
    }
    return result;
  }
  v7 = a4;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = *(int *)(v10 + 136);
    v12 = a4 == 1;
    v13 = a4 > 1;
    if ((a3 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
  else
  {
    v11 = 2147483645;
    v12 = a4 == 1;
    v13 = a4 > 1;
    if ((a3 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (v13)
        v14 = a4;
      else
        v14 = 1;
      if (a4)
        v15 = 2;
      else
        v15 = 16;
      v7 = v14;
      v16 = a3;
      if (a3 > v11)
        goto LABEL_11;
      goto LABEL_25;
    }
  }
  if (v12)
  {
    v16 = strlen(__s);
  }
  else
  {
    v16 = 0;
    if ((v11 & 0x8000000000000000) == 0)
    {
      do
      {
        if (!(__s[v16 + 1] | __s[v16]))
          break;
        v16 += 2;
      }
      while (v16 <= v11);
    }
  }
  v15 = 514;
  if (v16 > v11)
  {
LABEL_11:
    if ((unint64_t)a5 + 1 >= 2)
    {
      if (a5 == sub_1ACBD0E78)
        sub_1ACBE0F9C((_QWORD *)v10, __s);
      else
        a5((uint64_t)__s);
    }
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF2A54((int *)a1);
      v28 = *(_QWORD *)(a1 + 24);
      if (v28)
        goto LABEL_64;
    }
    else
    {
      *(_WORD *)(a1 + 20) = 1;
      v28 = *(_QWORD *)(a1 + 24);
      if (v28)
      {
LABEL_64:
        v29 = *(_QWORD *)(v28 + 344);
        result = 18;
        if (v29)
        {
          *(_DWORD *)(v29 + 24) = 18;
          ++*(_DWORD *)(v29 + 48);
        }
        return result;
      }
    }
    return 18;
  }
LABEL_25:
  if (a5 == (uint64_t (*)(uint64_t))-1)
  {
    v19 = 1;
    if (v7 != 1)
      v19 = 2;
    if (a3 >= 0)
      v19 = 0;
    v20 = v19 + v16;
    if (v19 + v16 <= 32)
      v21 = 32;
    else
      v21 = v19 + v16;
    if (*(_DWORD *)(a1 + 32) >= v21)
    {
      v22 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 8) = v22;
      *(_WORD *)(a1 + 20) &= 0x2Du;
    }
    else
    {
      if (sub_1ACB7E454(a1, v21, 0))
        return 7;
      v22 = *(void **)(a1 + 8);
    }
    memcpy(v22, __s, v20);
  }
  else
  {
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32))
      sub_1ACBF2A04(a1);
    *(_QWORD *)(a1 + 8) = __s;
    if (a5 == sub_1ACBD0E78)
    {
      *(_QWORD *)(a1 + 40) = __s;
      v23 = *(_QWORD *)(a1 + 24);
      if (v23 && *(_QWORD *)(v23 + 520) > (unint64_t)__s)
      {
        if (*(_QWORD *)(v23 + 496) <= (unint64_t)__s)
        {
          *(_DWORD *)(a1 + 32) = 128;
          goto LABEL_51;
        }
        if (*(_QWORD *)(v23 + 504) <= (unint64_t)__s)
        {
          *(_DWORD *)(a1 + 32) = *(unsigned __int16 *)(v23 + 438);
          goto LABEL_51;
        }
      }
      *(_DWORD *)(a1 + 32) = off_1ECD3B178(__s);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = a5;
      *(_BYTE *)(a1 + 56) = 0;
      if (a5)
        v18 = 4096;
      else
        v18 = 0x2000;
      v15 |= v18;
    }
  }
LABEL_51:
  result = 0;
  *(_DWORD *)(a1 + 16) = v16 & 0x7FFFFFFF;
  *(_WORD *)(a1 + 20) = v15;
  *(_BYTE *)(a1 + 22) = v7;
  if (v7 >= 2 && (v16 & 0x7FFFFFFF) >= 2)
  {
    v24 = *(unsigned __int8 **)(a1 + 8);
    v25 = *v24;
    v26 = v24[1];
    if (v25 == 255 && v26 == 254)
    {
      v27 = 2;
      goto LABEL_59;
    }
    result = 0;
    if (v25 == 254 && v26 == 255)
    {
      v27 = 3;
LABEL_59:
      if (!sub_1ACBC6854((int *)a1))
      {
        v30 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v30 - 2;
        memmove(*(void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 8) + 2), v30 - 2);
        result = 0;
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 16)) = 0;
        *(_BYTE *)(*(int *)(a1 + 16) + *(_QWORD *)(a1 + 8) + 1) = 0;
        *(_WORD *)(a1 + 20) |= 0x200u;
        *(_BYTE *)(a1 + 22) = v27;
        return result;
      }
      return 7;
    }
  }
  return result;
}

uint64_t sub_1ACB57BF0(uint64_t a1, char *__s1, uint64_t a3, uint64_t *a4, char a5, unsigned int a6)
{
  int v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  const char *v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  char *v33;
  const char *v34;
  int v35;
  const char *v36;
  const char *v37;
  void (**v38)(const char *);
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  size_t v52;
  size_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  void (**v61)(const char *);
  uint64_t v62;
  char v63;
  char *v64;
  void (**v65)(const char *);
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  char v70;
  int v71;
  uint64_t v72;
  void (**v73)(uint64_t);
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  __int16 v87;
  uint64_t (*v88)(void);
  int v89;
  int v90;
  char v91;
  int v92;
  void *v93;
  void (**v94)(void *);
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t (*v107)(void);
  int v108;
  unsigned int v109;
  int v110;
  const char *v111;
  char *v112;
  BOOL v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  _DWORD *v135;
  __int16 v136;
  int v137;
  char v138;
  BOOL v139;
  uint64_t (**v140)(_QWORD);
  void (**v141)(uint64_t);
  uint64_t v143;
  uint64_t v144;
  char v145;
  _BOOL4 v146;
  char *v147;
  const char *__src;
  char v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  char v154;
  int v155;
  uint64_t v156;
  BOOL v157;
  char v158;
  char v159;
  char v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  int v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  if (!__s1)
    goto LABEL_5;
  v12 = *__s1;
  v13 = *__s1 == 0;
  if (!strcmp(__s1, ":memory:"))
    goto LABEL_8;
  if (v12)
  {
    v13 = 0;
  }
  else
  {
LABEL_5:
    v13 = 1;
    if (*(_BYTE *)(a3 + 102) == 2)
      goto LABEL_8;
  }
  if ((a6 & 0x80) == 0)
  {
    v14 = 0;
    goto LABEL_9;
  }
LABEL_8:
  a5 |= 2u;
  v14 = 1;
LABEL_9:
  if (((v14 | v13) & (a6 >> 8)) != 0)
    v15 = a6 & 0xFFFFFCFF | 0x200;
  else
    v15 = a6;
  v16 = sub_1ACB5D828(72);
  if (!v16)
    return 7;
  v17 = v16;
  v161 = v15;
  v18 = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 64) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)v16 = a3;
  *(_QWORD *)(v16 + 48) = v16;
  *(_DWORD *)(v16 + 56) = 1;
  if (v13)
    goto LABEL_14;
  v18 = 0;
  v27 = (v15 & 0x40) != 0 ? 0 : v14;
  if ((v27 & 1) != 0 || (v15 & 0x20000) == 0)
    goto LABEL_14;
  v155 = v14;
  v158 = a5;
  if (__s1)
    v28 = strlen(__s1) & 0x3FFFFFFF;
  else
    v28 = 0;
  v39 = (v28 + 1);
  v40 = (*(_DWORD *)(a1 + 8) + 1);
  if ((int)v40 <= (int)v39)
    v41 = (v28 + 1);
  else
    v41 = v40;
  v42 = (_BYTE *)sub_1ACB5D828(v41);
  *(_BYTE *)(v17 + 17) = 1;
  if (!v42)
  {
    v44 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_60:
      (*v44)(v17);
      return 7;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v17);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v17);
    v17 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v44 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_60;
    }
    return 7;
  }
  v43 = v42;
  if (v155)
  {
    memcpy(v42, __s1, v39);
  }
  else
  {
    *v42 = 0;
    v45 = (*(uint64_t (**)(uint64_t, char *, uint64_t, _BYTE *))(a1 + 64))(a1, __s1, v40, v42);
    if ((v45 | 0x200) != 0x200)
    {
      v29 = v45;
      sqlite3_free(v43);
      sqlite3_free((void *)v17);
      return v29;
    }
  }
  v152 = a3;
  if ((_BYTE)word_1ECD3B144)
  {
    v46 = qword_1ECD3B1B0(4);
    v18 = v46;
    v157 = v46 == 0;
    if (v46)
      xmmword_1ECD3B1C0(v46);
    if ((_BYTE)word_1ECD3B144)
    {
      v47 = qword_1ECD3B1B0(2);
      v48 = v47;
      if (v47)
      {
        v49 = a4;
        xmmword_1ECD3B1C0(v47);
        v50 = 0;
        goto LABEL_149;
      }
      v49 = a4;
    }
    else
    {
      v49 = a4;
      v48 = 0;
    }
    v50 = 1;
  }
  else
  {
    v49 = a4;
    v48 = 0;
    v18 = 0;
    v50 = 1;
    v157 = 1;
  }
LABEL_149:
  v20 = (_QWORD *)qword_1EECAD240;
  if (!qword_1EECAD240)
  {
LABEL_150:
    a4 = v49;
    if ((v50 & 1) != 0)
      goto LABEL_152;
    goto LABEL_151;
  }
  while (1)
  {
    v95 = (_QWORD *)*v20;
    if (!strcmp((const char *)v43, *(const char **)(*v20 + 216)) && *v95 == a1)
      break;
    v20 = (_QWORD *)v20[14];
    if (!v20)
      goto LABEL_150;
  }
  v96 = *(unsigned int *)(v152 + 40);
  a4 = v49;
  if ((int)v96 < 1)
  {
LABEL_189:
    *(_QWORD *)(v17 + 8) = v20;
    ++*((_DWORD *)v20 + 26);
    if ((v50 & 1) != 0)
    {
LABEL_152:
      v94 = (void (**)(void *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        a3 = v152;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v43);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v43);
        v43 = (void *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
        {
LABEL_172:
          LOBYTE(v14) = v155;
          a5 = v158;
          if (v20)
            goto LABEL_173;
LABEL_14:
          *(_QWORD *)&v166 = 0;
          v19 = sub_1ACB5D828(152);
          if (!v19)
          {
            v29 = 7;
            goto LABEL_269;
          }
          v20 = (_QWORD *)v19;
          v151 = a3;
          *(_QWORD *)(v19 + 144) = 0;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)v19 = 0u;
          LODWORD(v164) = 4096;
          if (*(int *)(a1 + 4) <= 80)
            v21 = 80;
          else
            v21 = *(_DWORD *)(a1 + 4);
          *(_QWORD *)v19 = 0;
          v156 = v18;
          if ((a5 & 2) != 0)
          {
            if (__s1)
            {
              v22 = *__s1;
              if (*__s1)
              {
                v23 = strlen(__s1) + 1;
                v24 = (char *)sub_1ACB5D828(v23);
                if (!v24)
                  goto LABEL_84;
                v25 = v24;
                v154 = v14;
                v153 = a4;
                memcpy(v24, __s1, v23);
                v147 = 0;
                __src = 0;
                v22 = strlen(v25) & 0x3FFFFFFF;
                v26 = 1;
                v149 = 1;
                v145 = 1;
              }
              else
              {
                v154 = v14;
                v153 = a4;
                __src = 0;
                v149 = 0;
                v25 = 0;
                v145 = 1;
                v147 = __s1;
                v26 = 1;
              }
            }
            else
            {
              v154 = v14;
              v153 = a4;
              v147 = 0;
              __src = 0;
              v25 = 0;
              v22 = 0;
              v149 = 1;
              v145 = 1;
              v26 = 1;
            }
          }
          else if (__s1)
          {
            v22 = *__s1;
            if (*__s1)
            {
              v30 = *(int *)(a1 + 8) + 1;
              v31 = (char *)sub_1ACB5D828(2 * v30);
              if (!v31)
                goto LABEL_84;
              v25 = v31;
              v159 = a5;
              v154 = v14;
              v153 = a4;
              *v31 = 0;
              v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t, char *))(a1 + 64))(a1, __s1, v30, v31);
              if (v32 == 512)
                v29 = ((int)(v161 << 7) >> 31) & 0x60E;
              else
                v29 = v32;
              v150 = strlen(v25);
              v33 = &__s1[strlen(__s1) & 0x3FFFFFFF];
              v35 = v33[1];
              v34 = v33 + 1;
              LODWORD(v36) = (_DWORD)v34;
              if (v35)
              {
                v36 = v34;
                do
                {
                  v37 = &v36[strlen(v36) + 1];
                  v36 = &v37[strlen(v37) + 1];
                }
                while (*v36);
              }
              if (!(_DWORD)v29)
              {
                v22 = v150 & 0x3FFFFFFF;
                if ((v150 & 0x3FFFFFFF) + 8 <= *(_DWORD *)(a1 + 8))
                {
                  __src = v34;
                  v149 = 0;
                  v145 = 0;
                  v26 = (_DWORD)v36 - (_DWORD)v34 + 1;
                  v147 = __s1;
                  a5 = v159;
                  goto LABEL_73;
                }
                v29 = sub_1ACBE1D1C(68693);
              }
              v38 = (void (**)(const char *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                a4 = v153;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888 -= (int)off_1ECD3B178(v25);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v25);
                v25 = (const char *)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                {
LABEL_85:
                  v18 = v156;
                  v62 = *v20;
                  if (!*v20)
                    goto LABEL_263;
                  goto LABEL_262;
                }
                v38 = (void (**)(const char *))&xmmword_1ECD3B1D0;
              }
              else
              {
                a4 = v153;
              }
              (*v38)(v25);
              v18 = v156;
              v62 = *v20;
              if (*v20)
                goto LABEL_262;
              goto LABEL_263;
            }
            v154 = v14;
            v153 = a4;
            __src = 0;
            v149 = 0;
            v145 = 0;
            v25 = 0;
            v26 = 1;
            v147 = __s1;
          }
          else
          {
            v154 = v14;
            v153 = a4;
            v145 = 0;
            v147 = 0;
            __src = 0;
            v25 = 0;
            v22 = 0;
            v26 = 1;
            v149 = 1;
          }
LABEL_73:
          v51 = (v21 + 7) & 0x7FFFFFF8;
          v160 = a5;
          v146 = (a5 & 2) == 0;
          v52 = v22;
          v53 = v26;
          v54 = 3 * v22 + (2 * v51 + 470) + ((*(int *)(a1 + 4) + 7) & 0xFFFFFFFFFFFFFFF8) + v26;
          v55 = (void *)sub_1ACB5D828(v54);
          if (v55)
          {
            v56 = (uint64_t)v55;
            bzero(v55, v54);
            *(_QWORD *)(v56 + 336) = v56 + 360;
            *(_QWORD *)(v56 + 72) = v56 + 440;
            v57 = v56 + 440 + ((*(int *)(a1 + 4) + 7) & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v56 + 80) = v57 + v51;
            *(_QWORD *)(v56 + 88) = v57;
            v58 = (uint64_t *)(v57 + v51 + v51);
            *v58 = v56;
            v59 = (char *)v58 + 12;
            *(_QWORD *)(v56 + 216) = v59;
            if ((_DWORD)v52)
            {
              memcpy(v59, v25, v52);
              v60 = &v59[(v52 + 1)];
              if (__src)
                memcpy(v60, __src, v53);
              else
                v53 = 1;
              *(_QWORD *)(v56 + 224) = &v60[v53];
              memcpy(&v60[v53], v25, v52);
              v64 = &v60[v53 + v52];
              *(_QWORD *)v64 = 0x6C616E72756F6A2DLL;
              v64 += 9;
              *(_QWORD *)(v56 + 352) = v64;
              memcpy(v64, v25, v52);
              *(_DWORD *)&v64[v52] = 1818326829;
              v63 = v149;
              if (v25)
              {
                v65 = (void (**)(const char *))&off_1ECD3B168;
                if (!dword_1ECD3B140)
                {
LABEL_95:
                  (*v65)(v25);
                  goto LABEL_96;
                }
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888 -= (int)off_1ECD3B178(v25);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v25);
                v25 = (const char *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v65 = (void (**)(const char *))&xmmword_1ECD3B1D0;
                  goto LABEL_95;
                }
              }
            }
            else
            {
              *(_QWORD *)(v56 + 224) = 0;
              *(_QWORD *)(v56 + 352) = 0;
              v63 = v149;
            }
LABEL_96:
            *(_QWORD *)v56 = a1;
            *(_DWORD *)(v56 + 180) = v161;
            if ((v63 & 1) != 0 || !*v147)
            {
              v68 = 0;
              goto LABEL_101;
            }
            v163 = 0;
            v66 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, unsigned int *))(a1 + 40))(a1, *(_QWORD *)(v56 + 216), *(_QWORD *)(v56 + 72), v161 & 0x1787F7F, &v163);
            v67 = v163;
            *(_DWORD *)(v56 + 180) |= v163 & 0x700000;
            v68 = (v67 >> 7) & 1;
            *(_BYTE *)(v56 + 20) = (v67 & 0x80) != 0;
            if ((_DWORD)v66)
            {
              v29 = v66;
LABEL_103:
              v72 = *(_QWORD *)(v56 + 72);
              if (*(_QWORD *)v72)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)v72 + 8))(*(_QWORD *)(v56 + 72));
                *(_QWORD *)v72 = 0;
              }
              sub_1ACBEBAB0(*(_QWORD *)(v56 + 328));
              v73 = (void (**)(uint64_t))&off_1ECD3B168;
              v18 = v156;
              a4 = v153;
              if (!dword_1ECD3B140)
              {
LABEL_110:
                (*v73)(v56);
                v62 = *v20;
                if (!*v20)
                  goto LABEL_263;
LABEL_262:
                sub_1ACBA4510(v62, 0);
                goto LABEL_263;
              }
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888 -= (int)off_1ECD3B178(v56);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v56);
              v56 = xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v73 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
                goto LABEL_110;
              }
LABEL_261:
              v62 = *v20;
              if (!*v20)
                goto LABEL_263;
              goto LABEL_262;
            }
            v71 = v67 & 1;
            v86 = **(_QWORD **)(v56 + 72);
            if (v86)
              v87 = (*(uint64_t (**)(void))(v86 + 96))();
            else
              v87 = 0;
            if (v71)
            {
LABEL_206:
              v111 = *(const char **)(v56 + 216);
              v112 = (char *)sqlite3_uri_parameter(v111, "nolock");
              if (v112)
                v113 = sub_1ACC34DB4(v112, 1, 0) != 0;
              else
                v113 = 0;
              *(_BYTE *)(v56 + 17) = v113;
              if ((v87 & 0x2000) == 0)
              {
                v114 = (char *)sqlite3_uri_parameter(v111, "immutable");
                if (!v114 || !sub_1ACC34DB4(v114, 1, 0))
                {
                  v70 = 0;
                  v69 = 1;
LABEL_102:
                  v29 = sub_1ACB5AAC0(v56, &v164, -1);
                  if ((_DWORD)v29)
                    goto LABEL_103;
                  v162 = v68;
                  v74 = v164;
                  v75 = sub_1ACBE9EDC;
                  if ((v160 & 2) != 0)
                    v75 = 0;
                  v76 = *(_QWORD *)(v56 + 336);
                  *(_OWORD *)(v76 + 48) = 0u;
                  *(_OWORD *)(v76 + 64) = 0u;
                  *(_OWORD *)(v76 + 16) = 0u;
                  *(_OWORD *)(v76 + 32) = 0u;
                  *(_OWORD *)v76 = 0u;
                  *(_BYTE *)(v76 + 48) = v146;
                  *(_BYTE *)(v76 + 49) = 2;
                  *(_QWORD *)(v76 + 56) = v75;
                  *(_QWORD *)(v76 + 64) = v56;
                  *(_OWORD *)(v76 + 32) = xmmword_1ACCBDCA0;
                  v77 = xmmword_1ECD3B208(v74, 216, v146);
                  if (!v77)
                  {
                    v29 = 7;
                    goto LABEL_103;
                  }
                  v78 = v77;
                  v79 = *(unsigned int *)(v76 + 32);
                  if ((v79 & 0x80000000) != 0)
                  {
                    v80 = *(int *)(v76 + 44);
                    if (-1024 * (int)v79 / (v80 + *(int *)(v76 + 40)) >= 1000000000)
                      v79 = 1000000000;
                    else
                      v79 = -1024 * (int)v79 / (v80 + *(int *)(v76 + 40));
                  }
                  ((void (*)(uint64_t, uint64_t))*(&xmmword_1ECD3B208 + 1))(v77, v79);
                  v81 = *(_QWORD *)(v76 + 72);
                  if (v81)
                    ((void (*)(uint64_t))*(&xmmword_1ECD3B238 + 1))(v81);
                  *(_QWORD *)(v76 + 72) = v78;
                  *(_DWORD *)(v76 + 40) = v74;
                  *(_BYTE *)(v56 + 10) = (v160 & 1) == 0;
                  *(_DWORD *)(v56 + 188) = 0x3FFFFFFF;
                  *(_BYTE *)(v56 + 16) = v70;
                  *(_BYTE *)(v56 + 8) = v70;
                  *(_BYTE *)(v56 + 23) = v70;
                  *(_BYTE *)(v56 + 19) = v145;
                  *(_BYTE *)(v56 + 18) = v71;
                  if ((v69 & 1) != 0)
                  {
                    v82 = 0;
                    v83 = 10;
                    v84 = 2;
                    v85 = 1;
                  }
                  else
                  {
                    v85 = 0;
                    v84 = 0;
                    v83 = 0;
                    v82 = 1;
                  }
                  v18 = v156;
                  a3 = v151;
                  a4 = v153;
                  *(_BYTE *)(v56 + 11) = v82;
                  *(_BYTE *)(v56 + 12) = v85;
                  *(_BYTE *)(v56 + 13) = 0;
                  *(_BYTE *)(v56 + 14) = v84;
                  *(_BYTE *)(v56 + 15) = v83;
                  *(_BYTE *)(v56 + 25) &= ~1u;
                  *(_WORD *)(v56 + 176) = 136;
                  *(_QWORD *)(v56 + 208) = 0x8000;
                  if (!v69
                    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 72) + 96))(*(_QWORD *)(v56 + 72)) & 0x1000) != 0)
                  {
                    v90 = 512;
                  }
                  else
                  {
                    v88 = *(uint64_t (**)(void))(**(_QWORD **)(v56 + 72) + 88);
                    if (v88)
                    {
                      v89 = v88();
                      if (v89 >= 0x10000)
                        v90 = 0x10000;
                      else
                        v90 = v89;
                      if (v89 < 32)
                        v90 = 512;
                    }
                    else
                    {
                      v90 = 4096;
                    }
                  }
                  *(_DWORD *)(v56 + 184) = v90;
                  if ((v160 & 1) != 0)
                  {
                    v91 = 2;
                  }
                  else
                  {
                    if (!(v160 & 2 | v162))
                      goto LABEL_145;
                    v91 = 4;
                  }
                  *(_BYTE *)(v56 + 9) = v91;
LABEL_145:
                  *(_QWORD *)(v56 + 280) = sub_1ACBB80CC;
                  v92 = *(_DWORD *)(v56 + 48);
                  if (v92)
                  {
                    v93 = sub_1ACBEBC4C;
                  }
                  else if (*(_BYTE *)(v56 + 27) && !*(_QWORD *)(v56 + 296))
                  {
                    v93 = sub_1ACBEBC58;
                  }
                  else
                  {
                    v93 = sub_1ACBEBEA8;
                  }
                  *(_QWORD *)(v56 + 288) = v93;
                  *v20 = v56;
                  v115 = *(_QWORD *)(v151 + 64);
                  *(_QWORD *)(v56 + 160) = v115;
                  v116 = **(_QWORD **)(v56 + 72);
                  if (v116 && *(int *)v116 >= 3)
                  {
                    v164 = v115;
                    *(_BYTE *)(v56 + 27) = v115 > 0;
                    if (v92)
                    {
                      v117 = sub_1ACBEBC4C;
                    }
                    else if (v115 < 1 || *(_QWORD *)(v56 + 296))
                    {
                      v117 = sub_1ACBEBEA8;
                    }
                    else
                    {
                      v117 = sub_1ACBEBC58;
                    }
                    *(_QWORD *)(v56 + 288) = v117;
                    (*(void (**)(void))(v116 + 80))();
                    v56 = *v20;
                  }
                  v171 = 0;
                  v169 = 0u;
                  v170 = 0u;
                  v167 = 0u;
                  v168 = 0u;
                  v165 = 0u;
                  v166 = 0u;
                  v127 = *(_QWORD *)(v56 + 72);
                  if (*(_QWORD *)v127)
                  {
                    v128 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v127 + 16))(v127, &v165, 100, 0);
                    if ((_DWORD)v128 != 522)
                    {
                      v29 = v128;
                      if ((_DWORD)v128)
                        goto LABEL_261;
                    }
                  }
                  *((_BYTE *)v20 + 32) = v160;
                  v20[1] = v151;
                  v129 = *v20;
                  v130 = *v20;
                  *(_QWORD *)(v130 + 232) = sub_1ACBE9538;
                  v131 = v130 + 232;
                  *(_QWORD *)(v129 + 240) = v20;
                  v132 = *(_QWORD *)(v129 + 72);
                  if (*(_QWORD *)v132)
                  {
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v132 + 80))(*(_QWORD *)(v129 + 72), 15, v131);
                    v129 = *v20;
                  }
                  *(_QWORD *)(v17 + 8) = v20;
                  v20[2] = 0;
                  v20[3] = 0;
                  v133 = *(_BYTE *)(v129 + 18) != 0;
                  v134 = (v166 << 8) | (BYTE1(v166) << 16);
                  *((_DWORD *)v20 + 13) = v134;
                  v135 = (_DWORD *)v20 + 13;
                  v136 = *((_WORD *)v20 + 20) | v133;
                  *((_WORD *)v20 + 20) = v136 | 8;
                  if ((v134 - 65537) < 0xFFFF01FF || ((v134 - 1) & v134) != 0)
                  {
                    v137 = 0;
                    *v135 = 0;
                    if (__s1)
                      v138 = v154;
                    else
                      v138 = 1;
                    if ((v138 & 1) != 0)
                      goto LABEL_260;
                    v139 = 0;
                    v137 = 0;
                    *((_BYTE *)v20 + 33) = 0;
                  }
                  else
                  {
                    v137 = BYTE4(v166);
                    *((_WORD *)v20 + 20) = v136 | 0xA;
                    *((_BYTE *)v20 + 33) = bswap32(DWORD1(v168)) != 0;
                    v139 = bswap32(v169) != 0;
                  }
                  *((_BYTE *)v20 + 34) = v139;
LABEL_260:
                  v29 = sub_1ACB5AAC0(v129, v135, v137);
                  if ((_DWORD)v29)
                    goto LABEL_261;
                  *((_DWORD *)v20 + 14) = *((_DWORD *)v20 + 13) - v137;
                  *((_DWORD *)v20 + 26) = 1;
                  if (!*(_BYTE *)(v17 + 17))
                  {
LABEL_173:
                    if (*(_BYTE *)(v17 + 17))
                    {
                      v99 = *(unsigned int *)(a3 + 40);
                      if ((int)v99 >= 1)
                      {
                        v100 = (uint64_t *)(*(_QWORD *)(a3 + 32) + 8);
                        while (1)
                        {
                          v101 = *v100;
                          if (*v100)
                          {
                            if (*(_BYTE *)(v101 + 17))
                              break;
                          }
                          v100 += 4;
                          if (!--v99)
                            goto LABEL_226;
                        }
                        do
                        {
                          v102 = (_QWORD *)v101;
                          v101 = *(_QWORD *)(v101 + 40);
                        }
                        while (v101);
                        v103 = *(_QWORD *)(v17 + 8);
                        if (v103 >= v102[1])
                        {
                          while (1)
                          {
                            v104 = v102;
                            v102 = (_QWORD *)v102[4];
                            if (!v102)
                              break;
                            if (v102[1] >= v103)
                            {
                              v105 = v104 + 4;
                              *(_QWORD *)(v17 + 32) = v102;
                              *(_QWORD *)(v17 + 40) = v104;
                              v104 = (_QWORD *)v17;
                              goto LABEL_225;
                            }
                          }
                          v105 = v104 + 4;
                          *(_QWORD *)(v17 + 32) = 0;
                        }
                        else
                        {
                          v104 = 0;
                          v105 = v102 + 5;
                          *(_QWORD *)(v17 + 32) = v102;
                        }
                        v102 = (_QWORD *)v17;
LABEL_225:
                        v102[5] = v104;
                        *v105 = v17;
                      }
LABEL_226:
                      *a4 = v17;
                      v118 = *(_QWORD *)(v17 + 8);
                      ++*(_DWORD *)(v17 + 20);
                      if (*(_BYTE *)(v17 + 18))
                      {
                        v120 = *(_QWORD *)(v118 + 72);
                        v106 = (uint64_t *)(v118 + 72);
                        v119 = v120;
                      }
                      else
                      {
                        sub_1ACBECF6C(v17);
                        v121 = *(_QWORD *)(v118 + 72);
                        v106 = (uint64_t *)(v118 + 72);
                        v119 = v121;
                        if (!*(_BYTE *)(v17 + 17))
                          goto LABEL_232;
                      }
                      v122 = *(_DWORD *)(v17 + 20) - 1;
                      *(_DWORD *)(v17 + 20) = v122;
                      if (v122)
                      {
LABEL_232:
                        if (v119)
                          goto LABEL_233;
                        LODWORD(v164) = 128;
                        sub_1ACBE9680(v17, &v164);
                        v124 = *(_QWORD *)(v17 + 8);
                        if (!*(_BYTE *)(v17 + 17))
                        {
                          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v124 + 336) + 36) = 2500;
                          goto LABEL_233;
                        }
                        ++*(_DWORD *)(v17 + 20);
                        if (*(_BYTE *)(v17 + 18))
                        {
                          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v124 + 336) + 36) = 2500;
                        }
                        else
                        {
                          sub_1ACBECF6C(v17);
                          v125 = *(unsigned __int8 *)(v17 + 17);
                          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v124 + 336) + 36) = 2500;
                          if (!v125)
                            goto LABEL_233;
                        }
                        v126 = *(_DWORD *)(v17 + 20) - 1;
                        *(_DWORD *)(v17 + 20) = v126;
                        if (!v126)
                          sub_1ACBED048(v17);
LABEL_233:
                        v123 = *(_QWORD *)(*v20 + 72);
                        if (*(_QWORD *)v123)
                          (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v123 + 80))(v123, 30, v20 + 1);
                        v29 = 0;
                        if (!v18)
                          return v29;
LABEL_276:
                        xmmword_1ECD3B1D0(v18);
                        return v29;
                      }
                      sub_1ACBED048(v17);
                    }
                    else
                    {
                      *a4 = v17;
                      v106 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 72);
                    }
                    v119 = *v106;
                    goto LABEL_232;
                  }
                  if (!(_BYTE)word_1ECD3B144)
                  {
LABEL_284:
                    v20[14] = qword_1EECAD240;
                    qword_1EECAD240 = (uint64_t)v20;
                    goto LABEL_173;
                  }
                  v143 = qword_1ECD3B1B0(2);
                  if (!(_BYTE)word_1ECD3B144 || (v144 = qword_1ECD3B1B0(0), (v20[11] = v144) != 0))
                  {
                    if (v143)
                    {
                      xmmword_1ECD3B1C0(v143);
                      v20[14] = qword_1EECAD240;
                      qword_1EECAD240 = (uint64_t)v20;
                      xmmword_1ECD3B1D0(v143);
                      goto LABEL_173;
                    }
                    goto LABEL_284;
                  }
                  v29 = 7;
                  v62 = *v20;
                  if (*v20)
                    goto LABEL_262;
LABEL_263:
                  v140 = &off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v20);
                    v20 = (_QWORD *)xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                    {
LABEL_269:
                      v141 = (void (**)(uint64_t))&off_1ECD3B168;
                      if (dword_1ECD3B140)
                      {
                        if ((_QWORD)xmmword_1ECD3E930)
                          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                        qword_1ECD3E888 -= (int)off_1ECD3B178(v17);
                        --qword_1ECD3E8D0;
                        off_1ECD3B168(v17);
                        v17 = xmmword_1ECD3E930;
                        if (!(_QWORD)xmmword_1ECD3E930)
                        {
LABEL_275:
                          *a4 = 0;
                          if (!v18)
                            return v29;
                          goto LABEL_276;
                        }
                        v141 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
                      }
                      (*v141)(v17);
                      goto LABEL_275;
                    }
                    v140 = &xmmword_1ECD3B1D0;
                  }
                  (*v140)(v20);
                  goto LABEL_269;
                }
              }
              LOBYTE(v161) = 1;
LABEL_101:
              v69 = 0;
              *(_WORD *)(v56 + 21) = 1025;
              v70 = 1;
              *(_BYTE *)(v56 + 17) = 1;
              LOBYTE(v71) = v161 & 1;
              goto LABEL_102;
            }
            if (!*(_BYTE *)(v56 + 16)
              && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 72) + 96))(*(_QWORD *)(v56 + 72)) & 0x1000) == 0)
            {
              v107 = *(uint64_t (**)(void))(**(_QWORD **)(v56 + 72) + 88);
              if (!v107)
              {
                v110 = 4096;
                goto LABEL_205;
              }
              v108 = v107();
              if (v108 >= 0x10000)
                v109 = 0x10000;
              else
                v109 = v108;
              if (v108 > 31)
              {
                *(_DWORD *)(v56 + 184) = v109;
                if (v109 > 0x1000)
                {
                  if (v109 > 0x2000)
                    v109 = 0x2000;
                  LODWORD(v164) = v109;
                }
                goto LABEL_206;
              }
            }
            v110 = 512;
LABEL_205:
            *(_DWORD *)(v56 + 184) = v110;
            goto LABEL_206;
          }
          a4 = v153;
          if (!v25)
            goto LABEL_84;
          v61 = (void (**)(const char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v25);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v25);
            v25 = (const char *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_84;
            v61 = (void (**)(const char *))&xmmword_1ECD3B1D0;
          }
          (*v61)(v25);
LABEL_84:
          v29 = 7;
          goto LABEL_85;
        }
        v94 = (void (**)(void *))&xmmword_1ECD3B1D0;
      }
      else
      {
        a3 = v152;
      }
      (*v94)(v43);
      goto LABEL_172;
    }
LABEL_151:
    xmmword_1ECD3B1D0(v48);
    goto LABEL_152;
  }
  v97 = v96 + 1;
  while (1)
  {
    v98 = *(_QWORD *)(*(_QWORD *)(v152 + 32) + 32 * (v97 - 2) + 8);
    if (v98)
    {
      if (*(_QWORD **)(v98 + 8) == v20)
        break;
    }
    if ((unint64_t)--v97 <= 1)
      goto LABEL_189;
  }
  if ((v50 & 1) == 0)
    xmmword_1ECD3B1D0(v48);
  if (!v157)
    xmmword_1ECD3B1D0(v18);
  sqlite3_free(v43);
  sqlite3_free((void *)v17);
  return 19;
}

uint64_t sub_1ACB58FF8(uint64_t a1, const char *a2, unsigned int a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  uint64_t v13;
  char v14[1026];
  char __strerrbuf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12[1] = a4;
  v13 = a3;
  v12[0] = 0;
  if (*a2 != 47)
  {
    if (!off_1EECAC910(v14, 1024))
    {
      v9 = sub_1ACBE1D1C(49932);
      v10 = *__error();
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v10, __strerrbuf, 0x4FuLL);
      sqlite3_log(v9, "os_unix.c:%d: (%d) %s(%s) - %s", 49932, v10, "getcwd", a2, __strerrbuf);
      return v9;
    }
    sub_1ACBE80A0((uint64_t)v12, (uint64_t)v14);
  }
  sub_1ACBE80A0((uint64_t)v12, (uint64_t)a2);
  v6 = HIDWORD(v13);
  v7 = v12[0];
  *(_BYTE *)(a4 + SHIDWORD(v13)) = 0;
  if (v6 >= 2 && v7 == 0)
    return (HIDWORD(v12[0]) != 0) << 9;
  else
    return sub_1ACBE1D1C(49938);
}

char *sqlite3_snprintf(int a1, char *a2, const char *a3, ...)
{
  char *v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  int v9;
  va_list va;

  va_start(va, a3);
  if (a1 >= 1)
  {
    if (a2 && a3)
    {
      v6[0] = 0;
      v6[1] = a2;
      v7 = a1;
      v8 = 0;
      v9 = 0;
      sqlite3_str_vappendf((sqlite3_str *)v6, a3, va);
      v4 = &a2[HIDWORD(v8)];
LABEL_6:
      *v4 = 0;
      return a2;
    }
    sub_1ACBBE20C(33007);
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  return a2;
}

void *sub_1ACB591CC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && (*(_BYTE *)(v1 + *(unsigned int *)(a1 + 24)) = 0, *(_DWORD *)(a1 + 20)) && (*(_BYTE *)(a1 + 29) & 4) == 0)
    return sub_1ACBE13A0((uint64_t *)a1);
  else
    return *(void **)(a1 + 8);
}

uint64_t sub_1ACB591F8()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t (**v22)(char *);
  char f_flags;
  int v24;
  unint64_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const char *v35;
  uint64_t v36;
  int v37;
  const char *v38;
  uint64_t (**v39)(char *);
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  _DWORD *v50;
  _DWORD *v51;
  int v54;
  int v55;
  int v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  int v63;
  const char *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t i;
  const char *v69;
  size_t v70;
  size_t v71;
  __int16 v72;
  int v73;
  int *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(uint64_t);
  int v80;
  const char *v81;
  int v82;
  uint64_t v83;
  int v84;
  char v85;
  int *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  char v95;
  char v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  _DWORD *v103;
  int v104;
  _QWORD v105[3];
  _OWORD v106[6];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char v119[1026];
  statfs v120;
  char __strerrbuf[16];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v130 = *MEMORY[0x1E0C80C00];
  v10 = v3 & 0xFE0FFF00;
  if ((v3 & 4) == 0 || (v11 = 1, v10 != 2048) && v10 != 0x4000 && v10 != 0x80000)
    v11 = 0;
  v12 = dword_1ECD3EA90;
  if (v12 != getpid())
  {
    dword_1ECD3EA90 = getpid();
    sqlite3_initialize();
  }
  memset(&v120, 0, 512);
  v108 = 0u;
  v109 = 0u;
  v107 = 0u;
  memset(v106, 0, sizeof(v106));
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_QWORD *)(v6 + 176) = 0;
  if (v10 == 256)
  {
    v13 = (_DWORD *)sub_1ACBE5114((uint64_t)v8, v4);
    if (v13)
    {
      v103 = v2;
      LODWORD(v14) = *v13;
    }
    else
    {
      if (sqlite3_initialize())
        return 7;
      v13 = (_DWORD *)sub_1ACB5D828(16);
      if (!v13)
        return 7;
      v103 = v2;
      LODWORD(v14) = -1;
    }
    v104 = v11;
    *(_QWORD *)(v6 + 48) = v13;
    goto LABEL_15;
  }
  v103 = v2;
  v104 = v11;
  if (v8)
  {
    LODWORD(v14) = -1;
LABEL_15:
    v15 = (char *)v8;
    goto LABEL_16;
  }
  v15 = v119;
  v18 = sub_1ACBE2D68(*(_DWORD *)(v9 + 8), v119);
  if ((_DWORD)v18)
    return v18;
  LODWORD(v14) = -1;
LABEL_16:
  v16 = strlen(v15);
  v17 = sqlite3_initialize();
  v18 = 7;
  if (v16 < 1)
    goto LABEL_171;
  if (v17)
    goto LABEL_171;
  v19 = (char *)sub_1ACB5D828(v16);
  if (!v19)
    goto LABEL_171;
  v20 = v19;
  v21 = dirname_r(v15, v19);
  if (statfs(v21, &v120) != -1)
  {
    v100 = v4 & 4;
    v102 = v4 & 1;
    v22 = (uint64_t (**)(char *))&off_1ECD3B168;
    v99 = v9;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v20);
      v20 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_26:
        f_flags = v120.f_flags;
        v24 = v4 & 2;
        v25 = v4;
        if ((v4 & 2) != 0 && (v120.f_flags & 1) != 0)
        {
          v24 = 0;
          v25 = v4 & 0xFFFFFFF9;
          v100 = 0;
          v102 = 1;
        }
        if ((v120.f_flags & 0x80) == 0 && (v25 & 0x700000) != 0)
        {
          v26 = v120.f_flags;
          v27 = v24;
          sqlite3_log(1, "volume does not support data protection, stripping SQLITE_OPEN_FILEPROTECTION_* flags");
          v24 = v27;
          f_flags = v26;
          v25 = v25 & 0xFF8FFFFF;
        }
        v28 = v4 & 8;
        if (v100)
          v29 = (2 * (v24 != 0)) | 0x200;
        else
          v29 = 2 * (v24 != 0);
        v30 = v29 & 0xFFFFF7FF | (((v4 >> 4) & 1) << 11);
        if ((v25 & 0x1000000) != 0)
          v31 = 0x20000000;
        else
          v31 = 256;
        v101 = v30 | v31;
        if ((v14 & 0x80000000) == 0)
        {
          if ((f_flags & 0x80) == 0)
            goto LABEL_73;
          goto LABEL_40;
        }
        v36 = ((v25 >> 20) & 7) - 1;
        if (v36 > 6)
          v37 = 0;
        else
          v37 = dword_1ACCBD870[v36];
        if (((v28 != 0) & ((f_flags & 0x80) >> 7)) != 0)
          v37 = 2;
        v97 = v37;
        if ((v25 & 0x80800) != 0)
        {
          if (v15)
          {
            v40 = f_flags;
            v41 = v24;
            v42 = strlen(v15);
            v24 = v41;
            v43 = v42 & 0x3FFFFFFF;
            f_flags = v40;
          }
          else
          {
            v43 = 0;
          }
          do
          {
            if (v43 >= 2)
            {
              v65 = --v43;
              v66 = v15[v43];
              if (v66 != 46)
                continue;
            }
            v61 = 0;
            v60 = 0;
            v59 = 0;
            v18 = 0;
            goto LABEL_191;
          }
          while (v66 != 45);
          v92 = v24;
          v95 = f_flags;
          __memcpy_chk();
          __strerrbuf[v65] = 0;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v110 = 0u;
          if (off_1EECAC928(__strerrbuf, &v110))
          {
            v61 = 0;
            v60 = 0;
            v59 = 0;
            v18 = 1802;
          }
          else
          {
            v18 = 0;
            v61 = WORD2(v110) & 0x1FF;
            v60 = v111;
            v59 = DWORD1(v111);
          }
          v24 = v92;
        }
        else
        {
          if ((v25 & 8) != 0)
          {
            v59 = 0;
            v60 = 0;
            v61 = 384;
            goto LABEL_192;
          }
          if ((v25 & 0x40) == 0)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            goto LABEL_192;
          }
          v80 = v24;
          v95 = f_flags;
          v81 = sqlite3_uri_parameter(v15, "modeof");
          if (!v81)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            f_flags = v95;
            v24 = v80;
            goto LABEL_192;
          }
          v129 = 0u;
          v128 = 0u;
          v127 = 0u;
          v126 = 0u;
          v125 = 0u;
          v124 = 0u;
          v123 = 0u;
          v122 = 0u;
          *(_OWORD *)__strerrbuf = 0u;
          if (off_1EECAC928(v81, __strerrbuf))
          {
            v61 = 0;
            v60 = 0;
            v59 = 0;
            v18 = 1802;
          }
          else
          {
            v18 = 0;
            v61 = *(_WORD *)&__strerrbuf[4] & 0x1FF;
            v60 = v122;
            v59 = DWORD1(v122);
          }
          v24 = v80;
        }
        f_flags = v95;
LABEL_191:
        if ((_DWORD)v18)
          return v18;
LABEL_192:
        v89 = v59;
        v90 = v60;
        v82 = v24;
        v96 = f_flags;
        v93 = v61;
        v83 = sub_1ACBE1D30(v15, v101, v61, v97);
        v14 = v83;
        if (v8 || (v83 & 0x80000000) == 0)
        {
          if ((v83 & 0x80000000) == 0)
            goto LABEL_205;
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          sub_1ACCB3CE4((uint64_t)v15);
        }
        v84 = *__error();
        if (v104 && *__error() == 13 && off_1EECAC8F8(v15, 0))
        {
          v85 = 0;
          v76 = 1544;
          goto LABEL_221;
        }
        v86 = __error();
        v76 = 0;
        if (v82 && *v86 != 21)
        {
          v101 &= 0x20000900u;
          v87 = sub_1ACBE1D30(v15, v101, v93, v97);
          if ((v87 & 0x80000000) == 0)
          {
            v14 = v87;
            LODWORD(v25) = v25 & 0xFFFFFFF8 | 1;
            v102 = 1;
LABEL_205:
            v28 = v4 & 8;
            if (!off_1EECAC940(v14, v106))
            {
              v88 = WORD2(v106[0]) & 0xF000;
              if (v88 != 0x2000 && v88 != 24576 && v88 != 0x8000)
              {
                v18 = sub_1ACBE1D1C(49451);
                sub_1ACBE2298(v18, "open", v15, 49451);
                off_1EECAC8E0(v14);
                goto LABEL_171;
              }
              *(_QWORD *)(v6 + 144) = v107;
            }
            if (v93 && (v25 & 0x80800) != 0)
              sub_1ACBE665C(v14, v90, v89);
            if ((v96 & 0x80) == 0)
            {
LABEL_73:
              v44 = v28;
              v98 = v102 | v28;
              if (!(v102 | v28))
              {
                v45 = v25 & 0x700000;
                if (*(_DWORD *)(v6 + 124) != (v25 & 0x700000))
                {
                  if (v45)
                  {
                    v46 = 0;
                    v47 = 0;
                    switch(v45 >> 20)
                    {
                      case 1u:
                      case 2u:
                      case 3u:
                      case 6u:
                      case 7u:
                        v46 = 0;
                        goto LABEL_78;
                      case 4u:
                        v46 = 1;
LABEL_78:
                        v47 = v45 >> 20;
                        break;
                      case 5u:
                        break;
                      default:
                        v47 = 0;
                        break;
                    }
                    v91 = v46;
                    v94 = v47;
                    v48 = fcntl(v14, 63);
                    v49 = v48 < 1 ? v91 : 0;
                    if ((_DWORD)v94 != v48 && (v49 & 1) == 0 && fcntl(v14, 64, v94) && *__error() != 1)
                    {
                      *(_DWORD *)(v6 + 124) = v45;
                      sub_1ACBE1D1C(49491);
                      v50 = v103;
                      if (!v103)
                      {
LABEL_89:
                        v51 = *(_DWORD **)(v6 + 48);
                        if (v51)
                        {
                          *v51 = v14;
                          v51[1] = v25 & 3;
                        }
                        if (v44)
                          off_1EECACA48(v15);
                        else
                          *(_DWORD *)(v6 + 120) = v101;
                        if (*(_DWORD *)v120.f_fstypename == 1936091500)
                        {
                          *(_DWORD *)(v6 + 128) |= 2u;
                          LODWORD(v112) = 0;
                          v110 = 0u;
                          v111 = 0u;
                          v105[2] = 0;
                          v105[0] = 5;
                          v105[1] = 0x20000;
                          if (fgetattrlist(v14, v105, &v110, 0x24uLL, 0) == -1)
                          {
                            *(_DWORD *)(v6 + 32) = *__error();
                            if (off_1EECAC8E0(v14))
                            {
                              v62 = *(const char **)(v6 + 56);
                              v63 = *__error();
                              v125 = 0u;
                              v124 = 0u;
                              v123 = 0u;
                              v122 = 0u;
                              *(_OWORD *)__strerrbuf = 0u;
                              strerror_r(v63, __strerrbuf, 0x4FuLL);
                              v64 = &byte_1ACCBEAEE;
                              if (v62)
                                v64 = v62;
                              sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 49543, v63, "close", v64, __strerrbuf);
                            }
                            return 3338;
                          }
                          if ((BYTE4(v111) & 1) == 0 || (BYTE4(v110) & 1) != 0)
                          {
LABEL_109:
                            if ((v120.f_flags_ext & 2) != 0)
                              *(_DWORD *)(v6 + 128) |= 2u;
                            v54 = 4 * v44;
                            if (v102)
                              v54 = (4 * (v44 & 0xF)) | 2;
                            if (v10 != 256)
                              v54 |= 0x80u;
                            if (v104)
                              v54 |= 8u;
                            v55 = v25 & 0x40 | v54;
                            if (v10 == 256)
                              v56 = v55 | 4;
                            else
                              v56 = v55;
                            if (v8 && (v4 & 0xFE0FFF20) == 0x120 && *(_QWORD *)(v99 + 40))
                            {
                              v57 = getenv("SQLITE_FORCE_PROXY_LOCKING");
                              if (v57)
                              {
                                if (atoi(v57) > 0)
                                  goto LABEL_125;
                              }
                              else if ((v120.f_flags & 0x1001) == 0)
                              {
LABEL_125:
                                v18 = sub_1ACB5A108(v99, v14, v6, v8, v56);
                                if (!(_DWORD)v18)
                                {
                                  v58 = *(_QWORD *)v6;
                                  v18 = sub_1ACBE3AB0(v6, ":auto:");
                                  if ((_DWORD)v18)
                                  {
                                    if (v58)
                                      (*(void (**)(uint64_t))(v58 + 8))(v6);
                                    else
                                      sub_1ACBAE7CC(v6);
                                  }
                                  return v18;
                                }
                                goto LABEL_171;
                              }
                            }
                            if (v15 && !v98 && (~dword_1ECD3B304 & 0x60) == 0)
                              v56 |= 0x100u;
                            if (qword_1ECD3EA88 == -1)
                            {
                              if ((v56 & 0x100) != 0)
                                goto LABEL_153;
                            }
                            else
                            {
                              dispatch_once(&qword_1ECD3EA88, &unk_1E5C73190);
                              if ((v56 & 0x100) != 0)
                              {
LABEL_153:
                                v67 = v14;
                                for (i = 0; i != 26; ++i)
                                {
                                  v69 = (const char *)qword_1EECAD0D0[i];
                                  if (!v69)
                                    break;
                                  v70 = strlen((const char *)qword_1EECAD0D0[i]);
                                  if (v70)
                                  {
                                    v71 = v70;
                                    if (strlen(v8) > v70 && !strncmp(v69, v8, v71))
                                    {
                                      sqlite3_log(28, "Skipping vnode guard based on exemption path %s for file: %s", v69, v8);
                                      v56 &= ~0x100u;
                                      LODWORD(v14) = v67;
                                      goto LABEL_162;
                                    }
                                  }
                                }
                                LODWORD(v14) = v67;
                                if (!fcntl(v67, 96))
                                  v56 &= ~0x100u;
                              }
                            }
LABEL_162:
                            v72 = v56 & 0xFEFF;
                            if ((~v56 & 0x102) == 0)
                              LOWORD(v56) = v56 & 0xFEFF;
                            if ((v56 & 0x100) != 0)
                            {
                              *(_DWORD *)__strerrbuf = v14;
                              *(_DWORD *)&__strerrbuf[4] = 103;
                              *(_QWORD *)&__strerrbuf[8] = qword_1EECACB78;
                              if (__mac_syscall() == -1)
                              {
                                if (*__error() != 103)
                                {
                                  v73 = *__error();
                                  v74 = __error();
                                  v75 = strerror(*v74);
                                  sqlite3_log(1, "Failed to set vnode guard on %s (%d): %s", v8, v73, v75);
                                }
                                LOWORD(v56) = v72;
                              }
                            }
                            v76 = sub_1ACB5A108(v99, v14, v6, v8, v56);
LABEL_170:
                            v18 = v76;
                            if (!(_DWORD)v76)
                              return v18;
                            goto LABEL_171;
                          }
                        }
                        else if ((*(_DWORD *)v120.f_fstypename != 1868854125 || v120.f_fstypename[4] != 115)
                               && (*(_DWORD *)v120.f_fstypename != 1634105445 || v120.f_fstypename[4] != 116))
                        {
                          goto LABEL_109;
                        }
                        *(_DWORD *)(v6 + 128) |= 1u;
                        goto LABEL_109;
                      }
LABEL_88:
                      *v50 = v25;
                      goto LABEL_89;
                    }
                  }
                  *(_DWORD *)(v6 + 124) = v45;
                }
              }
              v50 = v103;
              if (!v103)
                goto LABEL_89;
              goto LABEL_88;
            }
LABEL_40:
            v32 = fcntl(v14, 63) - 1;
            if (v32 > 6)
              v33 = 0;
            else
              v33 = dword_1ACCBD854[v32];
            *(_DWORD *)(v6 + 124) = v33;
            if ((v25 & 0x700000) != 0)
              v33 = 0;
            LODWORD(v25) = v33 | v25;
            goto LABEL_73;
          }
          if (*__error() && *__error() != 2)
          {
            v76 = 0;
            v84 = *__error();
          }
          else
          {
            v76 = 0;
          }
        }
        v85 = 1;
LABEL_221:
        if (*__error() == 1)
        {
          v18 = 23;
          sub_1ACBE2298(23, "open", v15, 49434);
        }
        else
        {
          v18 = sub_1ACBE1D1C(49437);
          sub_1ACBE1C58(v18, "open", v15, v84, 49437);
          if ((v85 & 1) == 0)
            goto LABEL_170;
        }
        goto LABEL_171;
      }
      v22 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v22)(v20);
    goto LABEL_26;
  }
  v34 = *__error();
  v35 = "statfs";
  if (v34 == 2)
  {
    v18 = sub_1ACBE1D1C(49344);
    if ((_DWORD)v18 == 14)
      v35 = "open";
  }
  else
  {
    v18 = 3338;
  }
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v34, __strerrbuf, 0x4FuLL);
  v38 = &byte_1ACCBEAEE;
  if (v15)
    v38 = v15;
  sqlite3_log(v18, "os_unix.c:%d: (%d) %s(%s) - %s", 49345, v34, v35, v38, __strerrbuf);
  v39 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v20);
    v20 = (char *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_171;
    v39 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
  }
  (*v39)(v20);
LABEL_171:
  v77 = *(_QWORD *)(v6 + 48);
  if (!v77)
    return v18;
  v78 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_177:
    (*v78)(v77);
    return v18;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v77);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v77);
  v77 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v78 = &xmmword_1ECD3B1D0;
    goto LABEL_177;
  }
  return v18;
}

uint64_t sub_1ACB5A108(uint64_t a1, unsigned int a2, uint64_t a3, const char *a4, __int16 a5)
{
  unsigned int v8;
  const char *v10;
  char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  const char *v21;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  const char *v28;
  int v29;
  const char *v30;
  int v31;
  char __strerrbuf[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v8 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 56) = a4;
  *(_WORD *)(a3 + 30) = a5;
  *(_QWORD *)(a3 + 96) = qword_1ECD3B268;
  if ((a5 & 0x40) != 0)
    v10 = a4;
  else
    v10 = 0;
  v11 = (char *)sqlite3_uri_parameter(v10, "psow");
  if (v11 && !sub_1ACC34DB4(v11, 1, 1u))
  {
    v12 = a5;
  }
  else
  {
    v12 = a5 | 0x10;
    *(_WORD *)(a3 + 30) = a5 | 0x10;
  }
  if (!strcmp(*(const char **)(a1 + 24), "unix-excl"))
    *(_WORD *)(a3 + 30) = v12 | 1;
  v13 = &unk_1E5C72FA8;
  if ((a5 & 0x80) == 0)
  {
    v13 = (void *)(**(uint64_t (***)(const char *, uint64_t))(a1 + 32))(a4, a3);
    *(_QWORD *)(a3 + 40) = a4;
  }
  if (v13 == &unk_1E5C72DE0 || v13 == &unk_1E5C72F10 || a4 && v13 == &unk_1E5C72FA8)
  {
    if (qword_1ECD3E950)
      xmmword_1ECD3B1C0(qword_1ECD3E950);
    v14 = sub_1ACB5A80C(a3, (uint64_t *)(a3 + 16));
    if ((_DWORD)v14)
    {
      if ((v8 & 0x80000000) == 0 && off_1EECAC8E0(v8))
      {
        v15 = *(const char **)(a3 + 56);
        v16 = *__error();
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v16, __strerrbuf, 0x4FuLL);
        v17 = &byte_1ACCBEAEE;
        if (v15)
          v17 = v15;
        sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48762, v16, "close", v17, __strerrbuf);
      }
      v8 = -1;
    }
    v18 = qword_1ECD3E950;
    if (qword_1ECD3E950)
      goto LABEL_26;
    goto LABEL_27;
  }
  if (v13 != &unk_1E5C72E78)
  {
    if (v13 != &unk_1E5C73040)
    {
      v14 = 0;
      goto LABEL_27;
    }
    v23 = strlen(a4);
    if (sqlite3_initialize())
    {
      v24 = 0;
    }
    else
    {
      v31 = v23 + 6;
      v24 = (char *)sub_1ACB5D828(v31);
      if (v24)
      {
        sqlite3_snprintf(v31, v24, "%s.lock", a4);
        v14 = 0;
        goto LABEL_66;
      }
    }
    v14 = 7;
LABEL_66:
    *(_QWORD *)(a3 + 40) = v24;
    goto LABEL_27;
  }
  if (sqlite3_initialize())
  {
    *(_QWORD *)(a3 + 40) = 0;
    v14 = 7;
    goto LABEL_27;
  }
  v25 = sub_1ACB5D828(16);
  *(_QWORD *)(a3 + 40) = v25;
  if (!v25)
  {
    v14 = 7;
    goto LABEL_27;
  }
  *(_QWORD *)(v25 + 8) = a4;
  *(_DWORD *)v25 = 0;
  srandomdev();
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v14 = sub_1ACB5A80C(a3, (uint64_t *)(a3 + 16));
  if ((_DWORD)v14)
  {
    v26 = *(_QWORD *)(a3 + 40);
    if (v26)
    {
      v27 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v26);
        v26 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_56;
        v27 = &xmmword_1ECD3B1D0;
      }
      (*v27)(v26);
    }
LABEL_56:
    if ((v8 & 0x80000000) == 0 && off_1EECAC8E0(v8))
    {
      v28 = *(const char **)(a3 + 56);
      v29 = *__error();
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v29, __strerrbuf, 0x4FuLL);
      v30 = &byte_1ACCBEAEE;
      if (v28)
        v30 = v28;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48788, v29, "close", v30, __strerrbuf);
    }
    v8 = -1;
  }
  v18 = qword_1ECD3E950;
  if (qword_1ECD3E950)
LABEL_26:
    xmmword_1ECD3B1D0(v18);
LABEL_27:
  *(_DWORD *)(a3 + 32) = 0;
  if (a4)
    sub_1ACBE526C(v8, (NSObject **)(a3 + 152), 0);
  if ((_DWORD)v14)
  {
    if ((v8 & 0x80000000) == 0 && off_1EECAC8E0(v8))
    {
      v19 = *(const char **)(a3 + 56);
      v20 = *__error();
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v20, __strerrbuf, 0x4FuLL);
      v21 = &byte_1ACCBEAEE;
      if (v19)
        v21 = v19;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 48855, v20, "close", v21, __strerrbuf);
    }
  }
  else
  {
    *(_QWORD *)a3 = v13;
    sub_1ACBE1928(a3);
  }
  return v14;
}

char *sub_1ACB5A5C0(const char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v8;
  statfs v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (char *)&unk_1E5C72FA8;
  memset(&v9, 0, 512);
  if (statfs(a1, &v9) == -1)
    goto LABEL_27;
  if ((v9.f_flags & 1) != 0)
    return (char *)&unk_1E5C72FA8;
  if (!(*(_DWORD *)v9.f_fstypename ^ 0x73667061 | v9.f_fstypename[4]))
  {
    v3 = 0;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 7562856)
  {
    v3 = 1;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 7562869)
  {
    v3 = 2;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 1718642273 && *(unsigned __int16 *)&v9.f_fstypename[4] == 115)
  {
    v3 = 3;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 1717726579 && *(unsigned __int16 *)&v9.f_fstypename[4] == 115)
  {
    v3 = 4;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 7562862)
  {
    v3 = 5;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
  if (*(_DWORD *)v9.f_fstypename == 1684170103 && *(_DWORD *)&v9.f_fstypename[3] == 7758180)
  {
    v3 = 6;
    return (&off_1E5C72D60)[2 * v3 + 1];
  }
LABEL_27:
  v8 = *(unsigned int *)(a2 + 24);
  if (off_1EECAC970(v8, 92) == -1
    && (*__error() != 45 && *__error() != 25 || off_1EECAC970(v8, 7) == -1))
  {
    return (char *)&unk_1E5C73040;
  }
  else
  {
    return (char *)&unk_1E5C72DE0;
  }
}

uint64_t sub_1ACB5A80C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _OWORD *v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  v4 = *(unsigned int *)(a1 + 24);
  if (off_1EECAC940(v4, v14))
    goto LABEL_2;
  if (!(_QWORD)v15 && (*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    while (1)
    {
      v11 = off_1EECAC9D0(v4, "S", 1uLL);
      if ((v11 & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_31;
    }
    if (v11 != 1)
    {
LABEL_31:
      *(_DWORD *)(a1 + 32) = *__error();
      return 778;
    }
    if ((*(_BYTE *)(a1 + 128) & 2) != 0 && fsync(v4))
    {
      *(_DWORD *)(a1 + 32) = *__error();
      return 1034;
    }
    if (off_1EECAC940(v4, v14))
    {
LABEL_2:
      *(_DWORD *)(a1 + 32) = *__error();
      return 10;
    }
  }
  *((_QWORD *)&v18 + 1) = *((_QWORD *)&v14[0] + 1);
  *(_QWORD *)&v18 = LODWORD(v14[0]);
  v6 = qword_1ECD3EA80;
  if (qword_1ECD3EA80)
  {
    while ((_QWORD)v18 != *(_QWORD *)v6 || *((_QWORD *)&v18 + 1) != *(_QWORD *)(v6 + 8))
    {
      v6 = *(_QWORD *)(v6 + 64);
      if (!v6)
        goto LABEL_11;
    }
    ++*(_DWORD *)(v6 + 48);
    goto LABEL_38;
  }
LABEL_11:
  if (sqlite3_initialize())
    return 7;
  v8 = (_OWORD *)sub_1ACB5D828(96);
  if (!v8)
    return 7;
  v6 = (uint64_t)v8;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = v18;
  v8[1] = 0u;
  if ((_BYTE)word_1ECD3B144)
  {
    v9 = sqlite3_initialize();
    if ((_DWORD)v9)
    {
      *(_QWORD *)(v6 + 16) = 0;
LABEL_18:
      v10 = (void (**)(uint64_t))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_23:
        (*v10)(v6);
        return 7;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v10 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
        goto LABEL_23;
      }
      return 7;
    }
    v12 = qword_1ECD3B1B0(v9);
    *(_QWORD *)(v6 + 16) = v12;
    if (!v12)
      goto LABEL_18;
  }
  *(_DWORD *)(v6 + 88) = -1;
  *(_DWORD *)(v6 + 48) = 1;
  v13 = qword_1ECD3EA80;
  *(_QWORD *)(v6 + 64) = qword_1ECD3EA80;
  *(_QWORD *)(v6 + 72) = 0;
  if (v13)
    *(_QWORD *)(v13 + 72) = v6;
  qword_1ECD3EA80 = v6;
LABEL_38:
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t sub_1ACB5AA8C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112))
    return *(unsigned int *)(a1 + 112);
  if ((*(_WORD *)(a1 + 30) & 0x10) != 0)
    *(_DWORD *)(a1 + 116) |= 0x1000u;
  *(_DWORD *)(a1 + 112) = 4096;
  return 4096;
}

uint64_t sub_1ACB5AAC0(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v6 = *a2;
  if (*(_BYTE *)(a1 + 19) && *(_DWORD *)(a1 + 32))
    goto LABEL_25;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 24) || (_DWORD)v6 == 0;
  if (v7 || (_DWORD)v6 == *(_DWORD *)(a1 + 200))
    goto LABEL_25;
  if (*(_BYTE *)(a1 + 21))
  {
    v8 = **(_QWORD **)(a1 + 72);
    if (v8)
    {
      v9 = (*(uint64_t (**)(void))(v8 + 48))();
      if ((_DWORD)v9)
      {
        v10 = v9;
        v11 = 0;
LABEL_37:
        sub_1ACBEBAB0(v11);
        *a2 = *(_QWORD *)(a1 + 200);
        return v10;
      }
    }
  }
  v12 = sub_1ACBECD04((int)v6 + 8);
  v11 = v12;
  if (!v12)
    goto LABEL_36;
  *(_QWORD *)(v12 + v6) = 0;
  ++*(_DWORD *)(a1 + 132);
  for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  sub_1ACB5AD68(*(_QWORD **)(a1 + 336), 0);
  v14 = *(_QWORD *)(a1 + 336);
  if (!*(_DWORD *)(v14 + 40))
    goto LABEL_24;
  v15 = xmmword_1ECD3B208(v6, (*(_DWORD *)(v14 + 44) + 80), *(unsigned __int8 *)(v14 + 48));
  if (!v15)
  {
LABEL_36:
    v10 = 7;
    goto LABEL_37;
  }
  v16 = v15;
  v17 = *(unsigned int *)(v14 + 32);
  if ((v17 & 0x80000000) != 0)
  {
    v18 = *(int *)(v14 + 44);
    if (-1024 * (int)v17 / (v18 + *(int *)(v14 + 40)) >= 1000000000)
      v17 = 1000000000;
    else
      v17 = -1024 * (int)v17 / (v18 + *(int *)(v14 + 40));
  }
  ((void (*)(uint64_t, uint64_t))*(&xmmword_1ECD3B208 + 1))(v15, v17);
  if (*(_QWORD *)(v14 + 72))
    ((void (*)(void))*(&xmmword_1ECD3B238 + 1))();
  *(_QWORD *)(v14 + 72) = v16;
  *(_DWORD *)(v14 + 40) = v6;
LABEL_24:
  sub_1ACBEBAB0(*(_QWORD *)(a1 + 328));
  *(_QWORD *)(a1 + 328) = v11;
  *(_DWORD *)(a1 + 32) = (v6 - 1) / v6;
  *(_QWORD *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 192) = dword_1EECAC650 / v6 + 1;
LABEL_25:
  *a2 = *(_DWORD *)(a1 + 200);
  if (a3 < 0)
    LOWORD(a3) = *(_WORD *)(a1 + 178);
  *(_WORD *)(a1 + 178) = a3;
  v19 = *(void (**)(_QWORD))(a1 + 304);
  if (v19)
    v19(*(_QWORD *)(a1 + 320));
  v20 = **(_QWORD **)(a1 + 72);
  if (v20 && *(int *)v20 >= 3)
  {
    v21 = *(_QWORD *)(a1 + 160);
    *(_BYTE *)(a1 + 27) = v21 > 0;
    if (*(_DWORD *)(a1 + 48))
    {
      v22 = sub_1ACBEBC4C;
    }
    else if (v21 < 1 || *(_QWORD *)(a1 + 296))
    {
      v22 = sub_1ACBEBEA8;
    }
    else
    {
      v22 = sub_1ACBEBC58;
    }
    *(_QWORD *)(a1 + 288) = v22;
    (*(void (**)(void))(v20 + 80))();
  }
  return 0;
}

const void *sub_1ACB5AD30(const void *ptr)
{
  if (ptr)
  {
    if (qword_1EECAD2A8)
      return (const void *)(*(uint64_t (**)(void))(qword_1EECAD2A8 + 16))();
    else
      return (const void *)malloc_size(ptr);
  }
  return ptr;
}

_QWORD *sub_1ACB5AD68(_QWORD *result, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  if (result[9])
  {
    v3 = result;
    v4 = *result;
    if (*result)
    {
      while (1)
      {
        v5 = v4;
        v4 = *(_QWORD *)(v4 + 64);
        if (*(_DWORD *)(v5 + 48) > a2)
          break;
LABEL_4:
        if (!v4)
          goto LABEL_17;
      }
      v6 = *(_QWORD *)(v5 + 24);
      v7 = *(_QWORD *)(v5 + 72);
      if (*(_QWORD *)(v6 + 16) == v5)
      {
        *(_QWORD *)(v6 + 16) = v7;
        if (v4)
        {
LABEL_8:
          *(_QWORD *)(v4 + 72) = v7;
          v7 = *(_QWORD *)(v5 + 72);
          if (!v7)
          {
            *(_QWORD *)v6 = v4;
LABEL_13:
            *(_WORD *)(v5 + 52) = *(_WORD *)(v5 + 52) & 0xFFF0 | 1;
            if (!*(_QWORD *)(v5 + 56) && *(_BYTE *)(v6 + 48))
              xmmword_1ECD3B228(*(_QWORD *)(v6 + 72), *(_QWORD *)v5, 0);
            goto LABEL_4;
          }
LABEL_12:
          *(_QWORD *)(v7 + 64) = v4;
          goto LABEL_13;
        }
      }
      else if (v4)
      {
        goto LABEL_8;
      }
      *(_QWORD *)(v6 + 8) = v7;
      if (!v7)
      {
        *(_QWORD *)v6 = 0;
        *(_BYTE *)(v6 + 49) = 2;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
LABEL_17:
    if (!a2)
    {
      if (v3[3]
        && (v8 = (void **)(*((uint64_t (**)(_QWORD, uint64_t, _QWORD))&xmmword_1ECD3B218 + 1))(v3[9], 1, 0)) != 0)
      {
        bzero(*v8, *((int *)v3 + 10));
        a2 = 1;
      }
      else
      {
        a2 = 0;
      }
    }
    return (_QWORD *)xmmword_1ECD3B238(v3[9], a2 + 1);
  }
  return result;
}

uint64_t sub_1ACB5AEB4(uint64_t a1, char *__dst, signed int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (*(_DWORD *)(a1 + 160)
    || (v6 = a4, v7 = a3, v8 = __dst, (v9 = *(_QWORD *)(a1 + 64)) != 0) && *(_DWORD *)(*(_QWORD *)v9 + 168))
  {
    sqlite3_log(27, "denying read from invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 80);
    v11 = v10 - a4;
    if (v10 > a4)
    {
      if (a3 + a4 <= v10)
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 104) + a4), a3);
        return 0;
      }
      memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 104) + a4), v11);
      v8 += v11;
      v7 -= v11;
      v6 += v11;
    }
    v12 = sub_1ACBE2360(a1, v6, (uint64_t)v8, v7);
    if (v7 == v12)
    {
      return 0;
    }
    else if (v12 < 0)
    {
      v13 = *(_DWORD *)(a1 + 32);
      result = 8458;
      if ((v13 - 5) >= 2 && v13 != 34 && v13 != 83)
        return 266;
    }
    else
    {
      *(_DWORD *)(a1 + 32) = 0;
      bzero(&v8[v12], (int)(v7 - v12));
      return 522;
    }
  }
  return result;
}

uint64_t sub_1ACB5AFF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      return sub_1ACBECF6C(a1);
  }
  return a1;
}

uint64_t sub_1ACB5B014(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a2)
  {
    result = (uint64_t)sub_1ACBE95CC(a2, 0x78u, (uint64_t)sub_1ACBF62B4);
    if (result)
    {
      if (!*(_BYTE *)(result + 112))
        goto LABEL_7;
      return result;
    }
LABEL_8:
    if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      if (*(int *)(a1 + 220) >= 1)
        *(_DWORD *)(a1 + 424) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      result = *(_QWORD *)(a1 + 344);
      if (!result)
        return result;
      sub_1ACBCB308(result, "out of memory", v4, v5, v6, v7, v8, v9, v12);
      v10 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)(v10 + 24) = 7;
      v11 = *(_QWORD *)(v10 + 256);
      if (v11)
      {
        result = 0;
        do
        {
          ++*(_DWORD *)(v11 + 48);
          *(_DWORD *)(v11 + 24) = 7;
          v11 = *(_QWORD *)(v11 + 256);
        }
        while (v11);
        return result;
      }
    }
    return 0;
  }
  result = sub_1ACB5D828(120);
  if (!result)
    goto LABEL_8;
  *(_QWORD *)(result + 112) = 0;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  if (!*(_BYTE *)(result + 112))
  {
LABEL_7:
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 113) = 1;
  }
  return result;
}

int sqlite3_overload_function(sqlite3 *a1, const char *zFuncName, int nArg)
{
  int v4;
  const char *v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v12;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_16;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(187442);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  if (!zFuncName)
    return sub_1ACBBE20C(187442);
  v7 = *(_QWORD *)&nArg;
  if (nArg <= -3)
    return sub_1ACBBE20C(187442);
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  v9 = sub_1ACB5B284((uint64_t)a1, (char *)zFuncName, v7, 1u, 0);
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    xmmword_1ECD3B1D0(v10);
  if (v9)
    return 0;
  v12 = sqlite3_mprintf("%s", zFuncName);
  if (v12)
    return sub_1ACBCF994((uint64_t)a1, (char *)zFuncName, v7, 1, (uint64_t)v12, (uint64_t)sub_1ACBCFEC4, 0, 0, 0, 0, (void (*)(uint64_t))sqlite3_free);
  else
    return 7;
}

_BYTE *sub_1ACB5B284(uint64_t a1, char *__s, int a3, unsigned int a4, int a5)
{
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  char *v14;
  int v15;
  uint64_t *v16;
  int v17;
  char *v18;
  unsigned int v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  _DWORD *v26;
  _BYTE *v27;
  char *i;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  char *j;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  if (__s)
    v10 = strlen(__s) & 0x3FFFFFFF;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 632);
  if (!v11)
  {
    v16 = (uint64_t *)(a1 + 624);
    v17 = *(_DWORD *)(a1 + 620);
    if (v17)
      goto LABEL_40;
LABEL_10:
    v16 = &qword_1EECAD260;
    goto LABEL_11;
  }
  v12 = *__s;
  if (*__s)
  {
    v13 = 0;
    v14 = __s + 1;
    do
    {
      v13 = -1640531535 * (v13 + byte_1ACCB6333[v12]);
      v15 = *v14++;
      v12 = v15;
    }
    while (v15);
  }
  else
  {
    v13 = 0;
  }
  v26 = (_DWORD *)(v11 + 16 * (v13 % *(_DWORD *)(a1 + 616)));
  v16 = (uint64_t *)(v26 + 2);
  v17 = *v26;
  if (!v17)
    goto LABEL_10;
  do
  {
LABEL_40:
    v16 = (uint64_t *)*v16;
    v27 = (_BYTE *)v16[3];
    for (i = __s; ; ++i)
    {
      v29 = *v27;
      v30 = *i;
      if ((_DWORD)v29 != (_DWORD)v30)
        break;
      if (!*v27)
        goto LABEL_11;
LABEL_42:
      ++v27;
    }
    if (byte_1ACCB6333[v29] == byte_1ACCB6333[v30])
      goto LABEL_42;
    --v17;
  }
  while (v17);
  v16 = &qword_1EECAD260;
LABEL_11:
  v18 = (char *)v16[2];
  if (!v18)
  {
    if (a5)
      goto LABEL_35;
    v20 = 0;
    goto LABEL_59;
  }
  v19 = 0;
  v20 = 0;
  do
  {
    v22 = *v18;
    if (v22 == a3)
    {
      v23 = 4;
    }
    else
    {
      if (a3 == -2)
      {
        if (*((_QWORD *)v18 + 3))
          v21 = 6;
        else
          v21 = 0;
        goto LABEL_16;
      }
      if ((v22 & 0x80000000) == 0)
      {
        v21 = 0;
        goto LABEL_16;
      }
      v23 = 1;
    }
    v24 = (((*((_DWORD *)v18 + 1) & a4) >> 1) & 1) + v23;
    v21 = v23 | 2;
    if ((*((_DWORD *)v18 + 1) & 3) != a4)
      v21 = v24;
LABEL_16:
    if (v21 > v19)
      v20 = v18;
    if (v21 > (int)v19)
      v19 = v21;
    v18 = (char *)*((_QWORD *)v18 + 2);
  }
  while (v18);
  if (!a5)
  {
    if (v20 && (*(_BYTE *)(a1 + 44) & 2) == 0)
    {
      LOBYTE(v25) = 0;
LABEL_69:
      if ((v25 & 1) == 0 && !*((_QWORD *)v20 + 3))
        return 0;
      return v20;
    }
LABEL_59:
    v25 = (char *)*((_QWORD *)&xmmword_1ECD3E990 + (v10 + byte_1ACCB6333[*__s]) % 0x17);
    if (!v25)
      goto LABEL_68;
LABEL_60:
    v36 = (_BYTE *)*((_QWORD *)v25 + 7);
    for (j = __s; ; ++j)
    {
      v38 = *v36;
      v39 = *j;
      if ((_DWORD)v38 == (_DWORD)v39)
      {
        if (!*v36)
        {
          v19 = 0;
          while (1)
          {
            v41 = *v25;
            if (v41 == a3)
              break;
            if (a3 == -2)
            {
              if (*((_QWORD *)v25 + 3))
                v40 = 6;
              else
                v40 = 0;
            }
            else
            {
              if (v41 < 0)
              {
                v42 = 1;
LABEL_82:
                v43 = (((*((_DWORD *)v25 + 1) & a4) >> 1) & 1) + v42;
                v40 = v42 | 2;
                if ((*((_DWORD *)v25 + 1) & 3) != a4)
                  v40 = v43;
                goto LABEL_75;
              }
              v40 = 0;
            }
LABEL_75:
            if (v40 > v19)
              v20 = v25;
            if (v40 > (int)v19)
              v19 = v40;
            v25 = (char *)*((_QWORD *)v25 + 2);
            if (!v25)
              goto LABEL_31;
          }
          v42 = 4;
          goto LABEL_82;
        }
      }
      else if (byte_1ACCB6333[v38] != byte_1ACCB6333[v39])
      {
        v25 = (char *)*((_QWORD *)v25 + 8);
        if (!v25)
        {
          v19 = 0;
          break;
        }
        goto LABEL_60;
      }
      ++v36;
    }
  }
LABEL_31:
  LOBYTE(v25) = a5 != 0;
  if (!a5 || v19 > 5)
  {
LABEL_68:
    if (v20)
      goto LABEL_69;
    return 0;
  }
LABEL_35:
  if (a1)
  {
    v20 = (_BYTE *)sub_1ACBE1124(a1, (v10 + 73));
    if (!v20)
      return 0;
  }
  else
  {
    v20 = (_BYTE *)sub_1ACB5D828((v10 + 73));
    if (!v20)
      return 0;
  }
  bzero(v20, (v10 + 73));
  v31 = v20 + 72;
  *((_QWORD *)v20 + 7) = v20 + 72;
  *v20 = a3;
  *((_DWORD *)v20 + 1) = a4;
  memcpy(v20 + 72, __s, (v10 + 1));
  v32 = v20[72];
  if (v20[72])
  {
    v33 = v20 + 73;
    do
    {
      *(v33 - 1) = byte_1ACCB6333[v32];
      v34 = *v33++;
      v32 = v34;
    }
    while (v34);
    v31 = (unsigned __int8 *)*((_QWORD *)v20 + 7);
  }
  v35 = sub_1ACB57390(a1 + 616, v31, (uint64_t)v20);
  if ((_BYTE *)v35 == v20)
  {
    sub_1ACBE0F9C((_QWORD *)a1, v20);
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
      return 0;
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v51 = *(_QWORD *)(a1 + 344);
    if (!v51)
      return 0;
    sub_1ACBCB308(v51, "out of memory", v44, v45, v46, v47, v48, v49, v54);
    v52 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)(v52 + 24) = 7;
    v53 = *(_QWORD *)(v52 + 256);
    if (!v53)
      return 0;
    v20 = 0;
    do
    {
      ++*(_DWORD *)(v53 + 48);
      *(_DWORD *)(v53 + 24) = 7;
      v53 = *(_QWORD *)(v53 + 256);
    }
    while (v53);
  }
  else
  {
    *((_QWORD *)v20 + 2) = v35;
  }
  return v20;
}

uint64_t sub_1ACB5B6C0(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char v33;
  int v34;

  if (!a2
    || a6 && a8
    || (a7 != 0) == (a8 == 0)
    || (a3 - 128) < 0xFFFFFF7F
    || (a9 == 0) != (a10 == 0)
    || (strlen(a2) & 0x3FFFFF00) != 0)
  {
    return sub_1ACBBE20C(187166);
  }
  v20 = a4 & 0x380800;
  v21 = a4 & 7;
  v34 = v20;
  if (v21 - 1 >= 3)
  {
    if (v21 == 5)
    {
      v22 = sub_1ACB5B6C0(a1, a2, a3, v20 | 1u, a5, a6, a7, a8, a9, a10, a11);
      if ((_DWORD)v22)
        return v22;
      v22 = sub_1ACB5B6C0(a1, a2, a3, v34 | 2u, a5, a6, a7, a8, a9, a10, a11);
      if ((_DWORD)v22)
        return v22;
      v21 = 3;
    }
    else if (v21 == 4)
    {
      v21 = 2;
    }
    else
    {
      v21 = 1;
    }
  }
  v23 = sub_1ACB5B284(a1, a2, a3, v21, 0);
  if (!v23 || (*((_DWORD *)v23 + 1) & 3) != v21 || (char)*v23 != (_DWORD)a3)
  {
    if (!(a6 | a8))
      return 0;
LABEL_26:
    v30 = sub_1ACB5B284(a1, a2, a3, v21, 1);
    if (!v30)
      return 7;
    v31 = v30;
    sub_1ACC4EAF8((_QWORD *)a1, (uint64_t)v30);
    if (a11)
      ++*a11;
    v22 = 0;
    *((_QWORD *)v31 + 8) = a11;
    *((_DWORD *)v31 + 1) = (*((_DWORD *)v31 + 1) & 3 | v34) ^ 0x200000;
    if (a6)
      v32 = a6;
    else
      v32 = a7;
    *((_QWORD *)v31 + 3) = v32;
    *((_QWORD *)v31 + 4) = a8;
    *((_QWORD *)v31 + 5) = a9;
    *((_QWORD *)v31 + 6) = a10;
    *((_QWORD *)v31 + 1) = a5;
    *v31 = a3;
    return v22;
  }
  if (!*(_DWORD *)(a1 + 208))
  {
    for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    goto LABEL_26;
  }
  v22 = 5;
  sub_1ACBC3FCC(a1, 5, "unable to delete/modify user-function due to active statements", v24, v25, v26, v27, v28, v33);
  return v22;
}

uint64_t sub_1ACB5B970(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  uint64_t (**v28)(_QWORD);
  int v29;
  BOOL v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  if (*(_BYTE *)a1 == 1)
    v8 = sub_1ACB5BD38(a2, a3);
  else
    v8 = sub_1ACC52EC8(a2, a3);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = (*(_DWORD *)(a1 + 16) - 1) & v8;
    v12 = (int *)(v10 + 16 * v11);
    v15 = *v12;
    v13 = v12 + 2;
    v14 = v15;
    if (*(_BYTE *)a1 == 1)
      v16 = sub_1ACB5BD9C;
    else
      v16 = sub_1ACC52F00;
    do
    {
      if (!v14)
        goto LABEL_13;
      v13 = *(_DWORD **)v13;
      if (!v13)
        goto LABEL_13;
      --v14;
    }
    while (((unsigned int (*)(_QWORD, _QWORD, char *, uint64_t))v16)(*((_QWORD *)v13 + 3), v13[8], a2, a3));
    v17 = *((_QWORD *)v13 + 2);
    if (a4)
    {
      *((_QWORD *)v13 + 2) = a4;
      return v17;
    }
    v21 = *(_QWORD *)v13;
    v22 = (_QWORD *)*((_QWORD *)v13 + 1);
    if (v22)
    {
      *v22 = v21;
      v21 = *(_QWORD *)v13;
      if (!*(_QWORD *)v13)
        goto LABEL_28;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v21;
      if (!v21)
      {
LABEL_28:
        v23 = *(_QWORD *)(a1 + 24) + 16 * v11;
        v24 = (_QWORD *)(v23 + 8);
        if (*(_DWORD **)(v23 + 8) == v13)
          *v24 = v21;
        if ((*(_DWORD *)v23)-- <= 1)
          *v24 = 0;
        if (*(_BYTE *)(a1 + 1))
        {
          v26 = *((_QWORD *)v13 + 3);
          if (v26)
          {
            v27 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
            {
LABEL_40:
              (*v27)(v26);
              goto LABEL_41;
            }
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v26);
            v26 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v27 = &xmmword_1ECD3B1D0;
              goto LABEL_40;
            }
          }
        }
LABEL_41:
        v28 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v13);
          v13 = (_DWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_47;
          v28 = &xmmword_1ECD3B1D0;
        }
        (*v28)(v13);
LABEL_47:
        v29 = *(_DWORD *)(a1 + 4);
        v30 = __OFSUB__(v29--, 1);
        *(_DWORD *)(a1 + 4) = v29;
        if ((v29 < 0) ^ v30 | (v29 == 0))
          sub_1ACC4F9D0(a1);
        return v17;
      }
    }
    *(_QWORD *)(v21 + 8) = v22;
    goto LABEL_28;
  }
LABEL_13:
  if (!a4)
    return a4;
  v18 = *(_DWORD *)(a1 + 16);
  if (!v18)
  {
    if (sub_1ACC57488(a1, 8))
    {
LABEL_24:
      *(_DWORD *)(a1 + 4) = 0;
      return a4;
    }
    v18 = *(_DWORD *)(a1 + 16);
  }
  if (*(_DWORD *)(a1 + 4) >= v18 && sub_1ACC57488(a1, 2 * v18))
    goto LABEL_24;
  if (!sqlite3_initialize())
  {
    v19 = sub_1ACB5D828(40);
    if (v19)
    {
      v20 = v19;
      *(_QWORD *)(v19 + 32) = 0;
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      if (a2 && *(_BYTE *)(a1 + 1))
      {
        if (sqlite3_initialize() || (v31 = (void *)sub_1ACB5D828((int)a3)) == 0)
        {
          *(_QWORD *)(v20 + 24) = 0;
          sub_1ACC57620(v20);
          return a4;
        }
        v32 = v31;
        bzero(v31, (int)a3);
        *(_QWORD *)(v20 + 24) = v32;
        memcpy(v32, a2, (int)a3);
      }
      else
      {
        *(_QWORD *)(v19 + 24) = a2;
      }
      *(_DWORD *)(v20 + 32) = a3;
      ++*(_DWORD *)(a1 + 4);
      v33 = *(_QWORD *)(a1 + 24) + 16 * ((*(_DWORD *)(a1 + 16) - 1) & v9);
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        *(_QWORD *)v20 = v34;
        v36 = *(_QWORD *)(v34 + 8);
        v35 = (uint64_t **)(v34 + 8);
        *(_QWORD *)(v20 + 8) = v36;
        v37 = *v35;
        if (!*v35)
          v37 = (uint64_t *)(a1 + 8);
        *v37 = v20;
        v38 = (uint64_t *)v35;
      }
      else
      {
        v40 = *(_QWORD *)(a1 + 8);
        v38 = (uint64_t *)(a1 + 8);
        v39 = v40;
        *(_QWORD *)v20 = v40;
        if (v40)
          *(_QWORD *)(v39 + 8) = v20;
        *(_QWORD *)(v20 + 8) = 0;
      }
      *v38 = v20;
      ++*(_DWORD *)v33;
      *(_QWORD *)(v33 + 8) = v20;
      *(_QWORD *)(v20 + 16) = a4;
      return 0;
    }
  }
  return a4;
}

uint64_t sub_1ACB5BD38(char *__s, int a2)
{
  char *v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = __s;
  if (a2 <= 0)
  {
    a2 = strlen(__s);
    if (a2 < 1)
      return 0;
  }
  v3 = 0;
  v4 = a2 + 1;
  do
  {
    v5 = *v2++;
    v3 ^= v5 ^ (8 * v3);
    --v4;
  }
  while (v4 > 1);
  return v3 & 0x7FFFFFFF;
}

uint64_t sub_1ACB5BD9C(const char *a1, int a2, char *__s2, int a4)
{
  if (a2 == a4)
    return strncmp(a1, __s2, a2);
  else
    return 1;
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return sub_1ACBCF994((uint64_t)db, (char *)zFunctionName, *(uint64_t *)&nArg, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, (void (*)(uint64_t))xDestroy);
}

uint64_t sub_1ACB5BDE4(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v22;
  _BYTE *v23;
  char *i;
  uint64_t v25;
  uint64_t v26;

  v10 = *(_QWORD *)(a1 + 584);
  if (v10)
  {
    v11 = *__s2;
    if (*__s2)
    {
      v12 = 0;
      v13 = __s2 + 1;
      do
      {
        v12 = -1640531535 * (v12 + byte_1ACCB6333[v11]);
        v14 = *v13++;
        v11 = v14;
      }
      while (v14);
    }
    else
    {
      v12 = 0;
    }
    v22 = (_DWORD *)(v10 + 16 * (v12 % *(_DWORD *)(a1 + 568)));
    v15 = (uint64_t *)(v22 + 2);
    v16 = *v22;
    if (v16)
    {
      while (1)
      {
LABEL_24:
        v15 = (uint64_t *)*v15;
        v23 = (_BYTE *)v15[3];
        for (i = __s2; ; ++i)
        {
          v25 = *v23;
          v26 = *i;
          if ((_DWORD)v25 != (_DWORD)v26)
            break;
          if (!*v23)
            goto LABEL_8;
LABEL_26:
          ++v23;
        }
        if (byte_1ACCB6333[v25] == byte_1ACCB6333[v26])
          goto LABEL_26;
        if (!--v16)
        {
          v15 = &qword_1EECAD260;
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    v15 = (uint64_t *)(a1 + 576);
    v16 = *(_DWORD *)(a1 + 572);
    if (v16)
      goto LABEL_24;
  }
  v15 = &qword_1EECAD260;
LABEL_8:
  if (v15[2] && !strncmp("fts", __s2, 3uLL))
    a5 = 0;
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
    xmmword_1ECD3B1C0(v17);
  sub_1ACBFFCB0(a1, __s2, a3, a4, (uint64_t)a5);
  if (!*(_BYTE *)(a1 + 103))
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 24);
    if (!v20)
      return v19;
    goto LABEL_18;
  }
  v18 = sub_1ACBF2990(a1, 0);
  v19 = v18;
  if (a5 && (_DWORD)v18)
    a5(a4);
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
LABEL_18:
    xmmword_1ECD3B1D0(v20);
  return v19;
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(187027);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 83) = a2;
    *((_QWORD *)a1 + 84) = a3;
    *((_QWORD *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    *((_QWORD *)a1 + 83) = a2;
    *((_QWORD *)a1 + 84) = a3;
    *((_QWORD *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
  }
  return 0;
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return sub_1ACBCF994((uint64_t)db, (char *)zFunctionName, *(uint64_t *)&nArg, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, 0);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (sqlite3_initialize())
    {
      return 0;
    }
    else
    {
      v8 = 0;
      v5 = 0;
      v6 = &v9;
      v7 = 0x7FFFFFFD00000200;
      sqlite3_str_vappendf((sqlite3_str *)&v5, a1, a2);
      if (v6 && (v6[v8] = 0, HIDWORD(v7)) && (v8 & 0x40000000000) == 0)
        return (char *)sub_1ACBE13A0(&v5);
      else
        return v6;
    }
  }
  else
  {
    sub_1ACBBE20C(32944);
    return 0;
  }
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  uint64_t v5;
  int v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  sqlite3_stmt *v36;
  int v37;
  sqlite3_stmt *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  sqlite3_stmt *v42;
  int v43;
  int v44;
  const char *v45;
  const char *v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  sqlite3_stmt *v52;
  char *v53;

  v52 = 0;
  if (errmsg)
    *errmsg = 0;
  if (!a1)
  {
    v11 = "NULL";
    goto LABEL_17;
  }
  v10 = *((unsigned __int8 *)a1 + 113);
  if (v10 == 186)
  {
LABEL_7:
    v11 = "unopened";
LABEL_17:
    sqlite3_log(21, "API call with %s database connection pointer", v11);
    return sub_1ACBBE20C(142281);
  }
  if (v10 != 118)
  {
    if (v10 != 109)
    {
      v11 = "invalid";
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (sql)
    v12 = (char *)sql;
  else
    v12 = &byte_1ACCBEAEE;
  v13 = *((_QWORD *)a1 + 3);
  if (v13)
    xmmword_1ECD3B1C0(v13);
  *((_DWORD *)a1 + 20) = 0;
  if (*((_QWORD *)a1 + 52))
    sub_1ACBE938C((uint64_t)a1, 0);
  else
    *((_DWORD *)a1 + 21) = -1;
  v53 = 0;
  while (1)
  {
    if (!*v12)
    {
      v21 = 0;
LABEL_81:
      v16 = 0;
      goto LABEL_82;
    }
    v52 = 0;
    v15 = sub_1ACB5C66C((uint64_t)a1, (unsigned __int8 *)v12, 0xFFFFFFFFLL, 128, 0, &v52, &v53, v5);
    if (v15)
    {
      v21 = v15;
      goto LABEL_81;
    }
    if (v52)
      break;
    v21 = 0;
    v12 = v53;
LABEL_65:
    if (v21)
      goto LABEL_81;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  while (2)
  {
    v20 = sqlite3_step(v52);
    v21 = v20;
    if (!callback)
      goto LABEL_24;
    if (v20 == 100)
    {
      if (!v17)
        goto LABEL_35;
      break;
    }
    v22 = v20 == 101 && v17 == 0;
    if (!v22 || (*((_BYTE *)a1 + 49) & 1) == 0)
    {
LABEL_58:
      v36 = v52;
      if (*((_BYTE *)v52 + 267))
        v21 = sub_1ACB68B58((_QWORD **)v52);
      else
        v21 = 0;
      sub_1ACBBE904((uint64_t)v36);
      v52 = 0;
      v12 = v53 - 1;
      do
        v37 = *++v12;
      while ((byte_1ACCB6548[v37] & 1) != 0);
      if (v16)
        sub_1ACBE0F9C(a1, v16);
      goto LABEL_65;
    }
LABEL_35:
    v23 = (unsigned __int16 *)v52;
    if (v52)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v52 + 24);
      if (v24)
      {
        xmmword_1ECD3B1C0(v24);
        v25 = *(_QWORD *)(*(_QWORD *)v23 + 24);
        v18 = v23[130];
        if (v25)
          xmmword_1ECD3B1D0(v25);
      }
      else
      {
        v18 = *((unsigned __int16 *)v52 + 130);
      }
    }
    else
    {
      v18 = 0;
    }
    v16 = (_QWORD *)sub_1ACBE1124((uint64_t)a1, (16 * (_DWORD)v18) | 8u);
    if (!v16)
      goto LABEL_82;
    if ((_DWORD)v18)
    {
      v26 = 0;
      do
      {
        v16[v26] = sub_1ACBC7DC0((uint64_t *)v52, v26, 0, 0);
        ++v26;
      }
      while (v18 != v26);
    }
    if (v21 != 100)
    {
LABEL_55:
      if (((unsigned int (*)(void *, uint64_t, _QWORD *, _QWORD *))callback)(a4, v18, v19, v16))
      {
        v38 = v52;
        if (*((_BYTE *)v52 + 267))
          sub_1ACB68B58((_QWORD **)v52);
        sub_1ACBBE904((uint64_t)v38);
        v52 = 0;
        v21 = 4;
        *((_DWORD *)a1 + 20) = 4;
        sub_1ACBE938C((uint64_t)a1, 4);
        goto LABEL_82;
      }
      v17 = 1;
LABEL_24:
      if (v21 != 100)
        goto LABEL_58;
      continue;
    }
    break;
  }
  v19 = &v16[v18];
  if ((int)v18 < 1)
  {
    v35 = 0;
LABEL_54:
    v19[v35] = 0;
    goto LABEL_55;
  }
  v27 = 0;
  while (1)
  {
    v28 = sqlite3_column_text(v52, v27);
    v19[v27] = v28;
    if (!v28 && sqlite3_column_type(v52, v27) != 5)
      break;
    if (v18 == ++v27)
    {
      v35 = v18;
      goto LABEL_54;
    }
  }
  if (!*((_BYTE *)a1 + 103) && !*((_BYTE *)a1 + 104))
  {
    *((_BYTE *)a1 + 103) = 1;
    if (*((int *)a1 + 55) >= 1)
      *((_DWORD *)a1 + 106) = 1;
    ++*((_DWORD *)a1 + 108);
    *((_WORD *)a1 + 218) = 0;
    v39 = *((_QWORD *)a1 + 43);
    if (v39)
    {
      sub_1ACBCB308(v39, "out of memory", v29, v30, v31, v32, v33, v34, v51);
      v40 = *((_QWORD *)a1 + 43);
      *(_DWORD *)(v40 + 24) = 7;
      for (i = *(_QWORD *)(v40 + 256); i; i = *(_QWORD *)(i + 256))
      {
        ++*(_DWORD *)(i + 48);
        *(_DWORD *)(i + 24) = 7;
      }
    }
  }
  v21 = 100;
LABEL_82:
  v42 = v52;
  if (v52)
  {
    if (*((_BYTE *)v52 + 267))
      sub_1ACB68B58((_QWORD **)v52);
    sub_1ACBBE904((uint64_t)v42);
  }
  if (v16)
    sub_1ACBE0F9C(a1, v16);
  if (v21 || *((_BYTE *)a1 + 103))
  {
    v44 = sub_1ACBF2990((uint64_t)a1, v21);
    v43 = v44;
    if (!errmsg || !v44)
      goto LABEL_97;
    v45 = sqlite3_errmsg(a1);
    if (v45 && (v46 = v45, v47 = strlen(v45) + 1, (v48 = (char *)sub_1ACB5D828(v47)) != 0))
    {
      v49 = v48;
      memcpy(v48, v46, v47);
      *errmsg = v49;
      v50 = *((_QWORD *)a1 + 3);
      if (v50)
        goto LABEL_100;
    }
    else
    {
      *errmsg = 0;
      v43 = 7;
      *((_DWORD *)a1 + 20) = 7;
      sub_1ACBE938C((uint64_t)a1, 7);
      v50 = *((_QWORD *)a1 + 3);
      if (v50)
        goto LABEL_100;
    }
  }
  else
  {
    v43 = 0;
LABEL_97:
    if (errmsg)
      *errmsg = 0;
    v50 = *((_QWORD *)a1 + 3);
    if (v50)
LABEL_100:
      xmmword_1ECD3B1D0(v50);
  }
  return v43;
}

uint64_t sub_1ACB5C66C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  if (!a6)
  {
    v17 = 148650;
    return sub_1ACBBE20C(v17);
  }
  if (!a1)
  {
    v16 = "NULL";
    goto LABEL_35;
  }
  v15 = *(unsigned __int8 *)(a1 + 113);
  if (v15 == 186)
  {
LABEL_10:
    v16 = "unopened";
LABEL_35:
    sqlite3_log(21, "API call with %s database connection pointer", v16);
    goto LABEL_36;
  }
  if (v15 != 118)
  {
    if (v15 != 109)
    {
      v16 = "invalid";
      goto LABEL_35;
    }
    goto LABEL_10;
  }
  if (!a2)
  {
LABEL_36:
    v17 = 148655;
    return sub_1ACBBE20C(v17);
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (v18)
    xmmword_1ECD3B1C0(v18);
  if (!*(_BYTE *)(a1 + 111))
    sub_1ACBE9148(a1);
  v20 = sub_1ACB5C8C8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v20)
  {
    v21 = 0;
    while (!*(_BYTE *)(a1 + 103))
    {
      if (v20 == 17)
      {
        if (!*(_DWORD *)(a1 + 72))
        {
          v22 = *(_DWORD *)(a1 + 40);
          if (v22 >= 1)
          {
            v23 = 0;
            v24 = 24;
            do
            {
              v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v24);
              if ((*(_WORD *)(v25 + 114) & 8) != 0)
              {
                sub_1ACBF62B4(v25);
                v22 = *(_DWORD *)(a1 + 40);
              }
              ++v23;
              v24 += 32;
            }
            while (v23 < v22);
          }
        }
        if (v21)
        {
          v20 = 17;
          break;
        }
        v21 = 1;
      }
      else
      {
        if (v20 != 513)
          break;
        if (v21 >= 25)
        {
          v20 = 513;
          break;
        }
        ++v21;
      }
      v20 = sub_1ACB5C8C8(a1, a2, a3, a4, a5, a6, a7, v19);
      if (!v20)
        break;
    }
  }
  if (!*(_BYTE *)(a1 + 111))
    sub_1ACBE91DC(a1);
  if (v20 || *(_BYTE *)(a1 + 103))
    v27 = sub_1ACBF2990(a1, v20);
  else
    v27 = 0;
  *(_DWORD *)(a1 + 688) = 0;
  v28 = *(_QWORD *)(a1 + 24);
  if (v28)
    xmmword_1ECD3B1D0(v28);
  return v27;
}

uint64_t sub_1ACB5C8C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  char v10;
  unsigned int v11;
  double v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  size_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  size_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v10 = a4;
  v11 = a3;
  v14 = 0.0;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v15 = *(_QWORD *)(a1 + 344);
  v89 = 0;
  *((_QWORD *)&v79 + 1) = v15;
  *(_QWORD *)(a1 + 344) = &v63;
  v63 = a1;
  if (a5)
  {
    *(_QWORD *)&v84 = a5;
    v17 = *(_QWORD *)(*(_QWORD *)a5 + 24);
    if (v17)
    {
      xmmword_1ECD3B1C0(v17);
      v18 = *(_QWORD *)(*(_QWORD *)a5 + 24);
      v19 = a5[134];
      if (v18)
        xmmword_1ECD3B1D0(v18);
    }
    else
    {
      v19 = *((unsigned __int8 *)a5 + 268);
    }
    BYTE5(v82) = (v19 >> 2) & 3;
  }
  if (*(_BYTE *)(a1 + 103))
  {
    sub_1ACBCB308((uint64_t)&v63, "out of memory", a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62);
    v20 = 7;
    *(_DWORD *)(a1 + 80) = 7;
    goto LABEL_125;
  }
  if ((v10 & 1) != 0)
  {
    ++BYTE12(v65);
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
  }
  BYTE13(v65) = v10;
  if (!*(_BYTE *)(a1 + 111) && *(int *)(a1 + 40) >= 1)
  {
    for (i = 0; i < *(int *)(a1 + 40); ++i)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * i + 8);
      if (!v22)
        continue;
      if (!*(_BYTE *)(v22 + 17))
        continue;
      ++*(_DWORD *)(v22 + 20);
      if (!*(_BYTE *)(v22 + 18))
      {
        sub_1ACBECF6C(v22);
        if (!*(_BYTE *)(v22 + 17))
          continue;
      }
      v23 = *(_QWORD *)(v22 + 8);
      if (*(_QWORD *)(v23 + 128) == v22 || (*(_WORD *)(v23 + 40) & 0x40) == 0)
      {
        v24 = *(_QWORD *)(v23 + 120);
        if (!v24)
        {
LABEL_31:
          v20 = 0;
          v25 = 1;
          goto LABEL_37;
        }
        while (*(_QWORD *)v24 == v22 || *(_DWORD *)(v24 + 8) != 1 || *(_BYTE *)(v24 + 12) == 1)
        {
          v24 = *(_QWORD *)(v24 + 16);
          if (!v24)
            goto LABEL_31;
        }
      }
      v25 = 0;
      v20 = 262;
LABEL_37:
      v26 = *(_DWORD *)(v22 + 20) - 1;
      *(_DWORD *)(v22 + 20) = v26;
      if (!v26)
        sub_1ACBED048(v22);
      if ((v25 & 1) == 0)
      {
        sub_1ACBC3FCC(a1, v20, "database schema is locked: %s", a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * i));
        goto LABEL_125;
      }
    }
  }
  if (*(_QWORD *)(a1 + 608))
    sub_1ACBFCC3C((_QWORD *)a1);
  if ((v11 & 0x80000000) != 0 || v11 && !a2[v11 - 1])
  {
    sub_1ACB5CFD8((uint64_t)&v63, a2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 140) < (signed int)v11)
    {
      sub_1ACBC3FCC(a1, 18, "statement too long", a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62);
      v20 = sub_1ACBF2990(a1, 0x12u);
      goto LABEL_125;
    }
    v27 = v11;
    if (a2 && (v28 = (unsigned __int8 *)sub_1ACBE1124(a1, v11 + 1)) != 0)
    {
      v29 = v28;
      memcpy(v28, a2, v27);
      v29[v27] = 0;
      sub_1ACB5CFD8((uint64_t)&v63, v29);
      *((_QWORD *)&v84 + 1) = &a2[*((_QWORD *)&v84 + 1) - (_QWORD)v29];
      sub_1ACBE0F9C((_QWORD *)a1, v29);
    }
    else
    {
      *((_QWORD *)&v84 + 1) = &a2[v11];
    }
  }
  if (a7)
    *a7 = *((_QWORD *)&v84 + 1);
  if (!*(_BYTE *)(a1 + 197))
  {
    v30 = *((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v31 = DWORD2(v84);
      *(_BYTE *)(*((_QWORD *)&v64 + 1) + 266) = v10;
      if ((v10 & 0x80) == 0)
        *(_DWORD *)(v30 + 372) = 0;
      if (a2)
      {
        v32 = v31 - (int)a2;
        v33 = (_BYTE *)sub_1ACBE1124(*(_QWORD *)v30, v32 + 1);
        v34 = v33;
        if (v33)
        {
          memcpy(v33, a2, v32);
          v34[v32] = 0;
        }
      }
      else
      {
        v34 = 0;
      }
      *(_QWORD *)(v30 + 320) = v34;
    }
  }
  if (*(_BYTE *)(a1 + 103))
  {
    LODWORD(v65) = 7;
    BYTE5(v65) = 0;
LABEL_56:
    if (BYTE5(v65))
    {
      if (!*(_BYTE *)(a1 + 197))
      {
        v38 = v63;
        if (*(int *)(v63 + 40) >= 1)
        {
          for (j = 0; j < *(int *)(v38 + 40); ++j)
          {
            v40 = *(_QWORD *)(v38 + 32) + 32 * j;
            v41 = *(_QWORD *)(v40 + 8);
            if (v41)
            {
              v42 = *(unsigned __int8 *)(v41 + 16);
              if (!*(_BYTE *)(v41 + 16))
              {
                v43 = sub_1ACBED080(*(_QWORD *)(v40 + 8), 0, 0);
                if (v43)
                {
                  if (v43 == 3082 || v43 == 7)
                  {
                    if (*(_BYTE *)(v38 + 103) || *(_BYTE *)(v38 + 104))
                      goto LABEL_121;
                    *(_BYTE *)(v38 + 103) = 1;
                    if (*(int *)(v38 + 220) >= 1)
                      *(_DWORD *)(v38 + 424) = 1;
                    ++*(_DWORD *)(v38 + 432);
                    *(_WORD *)(v38 + 436) = 0;
                    v46 = *(_QWORD *)(v38 + 344);
                    if (!v46
                      || (sub_1ACBCB308(v46, "out of memory", v44, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v62),
                          v47 = *(_QWORD *)(v38 + 344),
                          *(_DWORD *)(v47 + 24) = 7,
                          (v48 = *(_QWORD *)(v47 + 256)) == 0))
                    {
LABEL_121:
                      LODWORD(v65) = 7;
                    }
                    else
                    {
                      do
                      {
                        ++*(_DWORD *)(v48 + 48);
                        *(_DWORD *)(v48 + 24) = 7;
                        v48 = *(_QWORD *)(v48 + 256);
                      }
                      while (v48);
                      LODWORD(v65) = 7;
                    }
                  }
                  break;
                }
              }
              v49 = *(_QWORD *)(v41 + 8);
              v50 = *(unsigned __int8 *)(v41 + 17);
              if (*(_BYTE *)(v41 + 17))
              {
                ++*(_DWORD *)(v41 + 20);
                if (*(_BYTE *)(v41 + 18))
                {
                  v50 = 1;
                }
                else
                {
                  sub_1ACBECF6C(v41);
                  v50 = *(unsigned __int8 *)(v41 + 17);
                }
              }
              v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 24) + 80) + 40);
              if (v50)
              {
                v53 = *(_DWORD *)(v41 + 20) - 1;
                *(_DWORD *)(v41 + 20) = v53;
                if (!v53)
                  sub_1ACBED048(v41);
              }
              v54 = *(_QWORD *)(v38 + 32);
              v55 = *(_QWORD *)(v54 + 32 * j + 24);
              if (bswap32(v52) != *(_DWORD *)v55)
              {
                v56 = *(_WORD *)(v55 + 114);
                if ((v56 & 1) != 0)
                  LODWORD(v65) = 17;
                *(_WORD *)(v55 + 114) = v56 | 8;
                *(_WORD *)(*(_QWORD *)(v54 + 56) + 114) |= 8u;
                *(_DWORD *)(v38 + 44) &= ~0x10u;
                if (!*(_DWORD *)(v38 + 72))
                {
                  v57 = *(_DWORD *)(v38 + 40);
                  if (v57 >= 1)
                  {
                    v58 = 0;
                    v59 = 24;
                    do
                    {
                      v60 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + v59);
                      if ((*(_WORD *)(v60 + 114) & 8) != 0)
                      {
                        sub_1ACBF62B4(v60);
                        v57 = *(_DWORD *)(v38 + 40);
                      }
                      ++v58;
                      v59 += 32;
                    }
                    while (v58 < v57);
                  }
                }
              }
              if (!v42)
              {
                if (*(_BYTE *)(v41 + 17))
                {
                  ++*(_DWORD *)(v41 + 20);
                  if (!*(_BYTE *)(v41 + 18))
                    sub_1ACBECF6C(v41);
                }
                if (!sub_1ACB8F578(v41, 0, v14))
                  sub_1ACB8F9C8(v41, 0);
                if (*(_BYTE *)(v41 + 17))
                {
                  v51 = *(_DWORD *)(v41 + 20) - 1;
                  *(_DWORD *)(v41 + 20) = v51;
                  if (!v51)
                    sub_1ACBED048(v41);
                }
              }
            }
          }
        }
      }
    }
    v35 = *((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      if (*(_BYTE *)(*((_QWORD *)&v64 + 1) + 267))
        sub_1ACB68B58(*((_QWORD ***)&v64 + 1));
      sub_1ACBBE904(v35);
    }
    v20 = v65;
    if ((_QWORD)v64)
    {
      sub_1ACBC3FCC(a1, v65, "%s", a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v64);
      v36 = (_QWORD *)v64;
      if ((_QWORD)v64)
        goto LABEL_123;
    }
    else
    {
      *(_DWORD *)(a1 + 80) = v65;
      if ((_DWORD)v20 || *(_QWORD *)(a1 + 416))
      {
        sub_1ACBE938C(a1, v20);
      }
      else
      {
        v20 = 0;
        *(_DWORD *)(a1 + 84) = -1;
      }
    }
    goto LABEL_124;
  }
  if ((_DWORD)v65 && (_DWORD)v65 != 101)
    goto LABEL_56;
  *a6 = *((_QWORD *)&v64 + 1);
  *(_QWORD *)(a1 + 80) = 0xFFFFFFFF00000000;
  v37 = *(_QWORD *)(a1 + 416);
  if (v37)
  {
    if ((*(_WORD *)(v37 + 20) & 0x9000) != 0)
    {
      sub_1ACBF2A54((int *)v37);
      v20 = 0;
    }
    else
    {
      v20 = 0;
      *(_WORD *)(v37 + 20) = 1;
    }
  }
  else
  {
    v20 = 0;
  }
LABEL_124:
  while (1)
  {
    v36 = (_QWORD *)v75;
    if (!(_QWORD)v75)
      break;
    *(_QWORD *)&v75 = *(_QWORD *)(v75 + 8);
LABEL_123:
    sub_1ACBE0F9C((_QWORD *)a1, v36);
  }
LABEL_125:
  sub_1ACBCB8D0(&v63);
  return v20;
}

uint64_t sub_1ACB5CFD8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  BOOL v17;
  BOOL v18;
  unsigned __int8 *v19;
  BOOL v20;
  unsigned __int8 *v21;
  BOOL v22;
  uint64_t v23;
  _QWORD **v24;
  unsigned int i;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t k;
  __int16 v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  int v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t (**v48)(uint64_t);
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  _QWORD **v58;
  _DWORD v59[594];
  uint64_t v60;
  unsigned __int16 *v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;

  v2 = a2;
  v3 = a1;
  v62 = 0;
  v4 = *(_QWORD *)a1;
  memset(v59, 0, 496);
  v5 = *(_DWORD *)(v4 + 140);
  if (!*(_DWORD *)(v4 + 208))
    *(_DWORD *)(v4 + 424) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v6 = -1;
  *(_QWORD *)(a1 + 336) = a2;
  v57 = (unsigned __int16 *)v59;
  v58 = (_QWORD **)a1;
  v59[0] = 0;
  v61 = (unsigned __int16 *)&v60;
  v7 = *(_QWORD *)(v4 + 344);
  *(_QWORD *)(v4 + 344) = a1;
  v56 = v7;
  while (1)
  {
    v8 = sub_1ACB5D9FC(v2, &v62);
    v5 -= v8;
    if (v5 < 0)
      break;
    v15 = v8;
    while (1)
    {
      if (v62 < 164)
      {
        v6 = v62;
        goto LABEL_67;
      }
      if (*(_DWORD *)(v4 + 424))
      {
        v41 = 9;
        goto LABEL_109;
      }
      if (v62 != 183)
        break;
      v2 += (int)v15;
      v15 = sub_1ACB5D9FC(v2, &v62);
      v5 -= v15;
      if (v5 < 0)
        goto LABEL_107;
    }
    if (*v2)
    {
      switch(v62)
      {
        case 166:
          if (v6 == 23)
          {
            v19 = v2 + 6;
            LODWORD(v65) = 0;
            do
              v19 += (int)sub_1ACB5D9FC(v19, (int *)&v65);
            while ((_DWORD)v65 == 183);
            v20 = ((_DWORD)v65 - 117) > 0x30
               || ((1 << (v65 - 117)) & 0x1800000000003) == 0;
            if (v20 && (_DWORD)v65 != 59 && word_1ACCB716A[(int)v65] != 59 && (_DWORD)v65 == 22)
            {
              v6 = 166;
              break;
            }
          }
LABEL_63:
          v6 = 59;
          break;
        case 165:
          if (v6 != 23)
            goto LABEL_63;
          v21 = v2 + 4;
          LODWORD(v65) = 0;
          do
            v21 += (int)sub_1ACB5D9FC(v21, (int *)&v65);
          while ((_DWORD)v65 == 183);
          v22 = ((_DWORD)v65 - 117) > 0x30
             || ((1 << (v65 - 117)) & 0x1800000000003) == 0;
          if (!v22 || (_DWORD)v65 == 59 || word_1ACCB716A[(int)v65] == 59)
          {
            v6 = 165;
          }
          else if ((_DWORD)v65 == 22 || (_DWORD)v65 == 59)
          {
            v6 = 165;
          }
          else
          {
            v6 = 59;
          }
          break;
        case 164:
          v16 = v2 + 6;
          LODWORD(v65) = 0;
          do
            v16 += (int)sub_1ACB5D9FC(v16, (int *)&v65);
          while ((_DWORD)v65 == 183);
          v17 = ((_DWORD)v65 - 117) > 0x30
             || ((1 << (v65 - 117)) & 0x1800000000003) == 0;
          if (v17 && (_DWORD)v65 != 59 && word_1ACCB716A[(int)v65] != 59)
            goto LABEL_63;
          LODWORD(v65) = 0;
          do
            v16 += (int)sub_1ACB5D9FC(v16, (int *)&v65);
          while ((_DWORD)v65 == 183);
          v18 = ((_DWORD)v65 - 117) > 0x30
             || ((1 << (v65 - 117)) & 0x1800000000003) == 0;
          if (!v18 || (_DWORD)v65 == 59 || word_1ACCB716A[(int)v65] == 59)
            goto LABEL_63;
          if ((_DWORD)v65 == 24)
            v6 = 164;
          else
            v6 = 59;
          break;
        default:
          v65 = v2;
          v66 = v15;
          sub_1ACBCB308(v3, "unrecognized token: \"%T\"", v9, v10, v11, v12, v13, v14, (char)&v65);
          goto LABEL_112;
      }
    }
    else
    {
      if (v6 == 1)
      {
        v6 = 0;
      }
      else
      {
        if (!v6)
          goto LABEL_112;
        v6 = 1;
      }
      v15 = 0;
    }
    v62 = v6;
LABEL_67:
    *(_QWORD *)(v3 + 280) = v2;
    *(_DWORD *)(v3 + 288) = v15;
    v55 = v3;
    v23 = *(_QWORD *)(v3 + 288);
    v63 = 0;
    v64 = 0;
    v24 = v58;
    for (i = *v57; ; i = sub_1ACB5E0F4((uint64_t *)&v57, v33, (uint64_t)v2, v23, v24, v12, v13, v14))
    {
      if (i <= 0x242)
      {
        v26 = word_1ACCB7470[i];
        v27 = v6;
        do
        {
          v28 = v27;
          v29 = v27;
          v30 = v27 + v26;
          if (word_1ACCB78F6[v30] == v29)
          {
            v32 = &word_1ACCB8AC8[v30];
            goto LABEL_78;
          }
          v27 = word_1ACCB716A[v28];
        }
        while (v27);
        if (v28 && (v31 = v26 + 101, word_1ACCB78F6[v31] == 101))
          v32 = &word_1ACCB8AC8[v31];
        else
          v32 = (unsigned __int16 *)((char *)&unk_1ACCB9B28 + 2 * i);
LABEL_78:
        i = *v32;
      }
      v33 = i - 1243;
      if (i < 0x4DB)
        break;
      if (!byte_1ACCB72DC[v33])
      {
        v34 = (uint64_t)v57;
        if (v57 >= v61)
        {
          for (j = (uint64_t)v58; v57 > (unsigned __int16 *)v59; v34 = (uint64_t)v57)
          {
            v57 = (unsigned __int16 *)(v34 - 24);
            sub_1ACB687B4(&v57, *(unsigned __int16 *)(v34 + 2), (uint64_t *)(v34 + 8));
          }
          sub_1ACBCB308(j, "parser stack overflow", v9, v10, v11, v12, v13, v14, v54);
          v58 = (_QWORD **)j;
          v3 = v55;
          goto LABEL_99;
        }
      }
    }
    v3 = v55;
    if (i > 0x4D7)
    {
      if (i == 1241)
      {
        v57 -= 12;
      }
      else
      {
        v63 = v2;
        v64 = v23;
        v65 = v2;
        v66 = v23;
        v39 = (uint64_t)v58;
        if (*v2)
          sub_1ACBCB308((uint64_t)v58, "near \"%T\": syntax error", v9, v10, v11, v12, v13, v14, (char)&v65);
        else
          sub_1ACBCB308((uint64_t)v58, "incomplete input", v9, v10, v11, v12, v13, v14, v54);
        v58 = (_QWORD **)v39;
        sub_1ACB687B4(&v57, (unsigned __int16)v6, (uint64_t *)&v63);
      }
    }
    else
    {
      v36 = (uint64_t)v57;
      v57 += 12;
      if (v57 <= v61)
      {
        v38 = i + 406;
        if (i <= 0x242)
          v38 = i;
        *(_WORD *)(v36 + 24) = v38;
        *(_WORD *)(v36 + 26) = v6;
        *(_QWORD *)(v36 + 32) = v2;
        *(_QWORD *)(v36 + 40) = v23;
      }
      else
      {
        v57 = (unsigned __int16 *)v36;
        for (k = (uint64_t)v58; v57 > (unsigned __int16 *)v59; v36 = (uint64_t)v57)
        {
          v57 = (unsigned __int16 *)(v36 - 24);
          sub_1ACB687B4(&v57, *(unsigned __int16 *)(v36 + 2), (uint64_t *)(v36 + 8));
        }
        sub_1ACBCB308(k, "parser stack overflow", v9, v10, v11, v12, v13, v14, v54);
        v58 = (_QWORD **)k;
      }
    }
LABEL_99:
    v7 = v56;
    v2 += (int)v15;
    if (*(_DWORD *)(v3 + 24))
      goto LABEL_112;
  }
LABEL_107:
  v41 = 18;
LABEL_109:
  *(_DWORD *)(v3 + 24) = v41;
  ++*(_DWORD *)(v3 + 48);
LABEL_112:
  while (1)
  {
    v42 = (uint64_t)v57;
    if (v57 <= (unsigned __int16 *)v59)
      break;
    v57 -= 12;
    sub_1ACB687B4(&v57, *(unsigned __int16 *)(v42 + 2), (uint64_t *)(v42 + 8));
  }
  if (!*(_BYTE *)(v4 + 103))
  {
    v43 = *(_DWORD *)(v3 + 24);
    v44 = *(const char **)(v3 + 8);
    if (!v44)
      goto LABEL_117;
    goto LABEL_129;
  }
  v43 = 7;
  *(_DWORD *)(v3 + 24) = 7;
  v44 = *(const char **)(v3 + 8);
  if (v44)
  {
LABEL_129:
    sqlite3_log(v43, "%s in \"%s\"", v44, *(const char **)(v3 + 336));
    v45 = 1;
    goto LABEL_130;
  }
LABEL_117:
  v45 = 0;
  if (v43 > 100)
  {
    if (v43 == 101)
      goto LABEL_130;
    if (v43 != 516)
      goto LABEL_124;
    v46 = "abort due to ROLLBACK";
LABEL_128:
    v44 = (const char *)sub_1ACB6DDD0(v4, "%s", v9, v10, v11, v12, v13, v14, (char)v46);
    *(_QWORD *)(v3 + 8) = v44;
    v43 = *(_DWORD *)(v3 + 24);
    goto LABEL_129;
  }
  if (v43)
  {
    if (v43 == 100)
    {
      v46 = "another row available";
      goto LABEL_128;
    }
LABEL_124:
    if (v43 > 0x1Cu || ((0x1410004uLL >> v43) & 1) != 0)
      v46 = "unknown error";
    else
      v46 = off_1E5C74AE8[v43];
    goto LABEL_128;
  }
LABEL_130:
  *(_QWORD *)(v3 + 336) = v2;
  v47 = *(_QWORD *)(v3 + 392);
  if (v47)
  {
    v48 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_136;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v47);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v47);
    v47 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v48 = &xmmword_1ECD3B1D0;
LABEL_136:
      (*v48)(v47);
    }
  }
  v49 = *(_QWORD *)(v3 + 344);
  if (v49)
  {
    if (!*(_BYTE *)(v3 + 302))
    {
      if (*(_QWORD *)(v4 + 816) || (v50 = *(_DWORD *)(v49 + 44) - 1, (*(_DWORD *)(v49 + 44) = v50) == 0))
        sub_1ACC00BE8((_QWORD *)v4, (_QWORD *)v49);
    }
  }
  v51 = *(_QWORD *)(v3 + 360);
  if (v51 && *(unsigned __int8 *)(v3 + 302) <= 1u)
    sub_1ACB689B8((_QWORD *)v4, v51);
  v52 = *(_QWORD **)(v3 + 320);
  if (v52)
    sub_1ACBF0674((_QWORD *)v4, v52);
  *(_QWORD *)(v4 + 344) = v7;
  return v45;
}

uint64_t sub_1ACB5D828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)(a1 - 2147483392) >= 0xFFFFFFFF80000101)
  {
    if (!dword_1ECD3B140)
      return qword_1ECD3B160(a1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0();
    v3 = unk_1ECD3B180(a1);
    v4 = v3;
    if (qword_1ECD3E900 < a1)
      qword_1ECD3E900 = a1;
    if (*((uint64_t *)&xmmword_1ECD3E930 + 1) >= 1)
    {
      if (qword_1ECD3E888 >= *((_QWORD *)&xmmword_1ECD3E930 + 1) - (int)v3)
      {
        dword_1ECD3E948 = 1;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          xmmword_1ECD3B1D0();
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0();
        }
        if (qword_1ECD3E940 && qword_1ECD3E888 >= qword_1ECD3E940 - (int)v4)
        {
          v1 = 0;
          if (!(_QWORD)xmmword_1ECD3E930)
            return v1;
          goto LABEL_23;
        }
      }
      else
      {
        dword_1ECD3E948 = 0;
      }
    }
    v6 = qword_1ECD3B160(v4);
    v1 = v6;
    if (v6)
    {
      v7 = qword_1ECD3E888 + (int)off_1ECD3B178(v6);
      qword_1ECD3E888 = v7;
      if (v7 > qword_1ECD3E8D8)
        qword_1ECD3E8D8 = v7;
      v8 = qword_1ECD3E8D0;
      v9 = ++qword_1ECD3E8D0;
      if (v8 >= qword_1ECD3E920)
        qword_1ECD3E920 = v9;
    }
    if (!(_QWORD)xmmword_1ECD3E930)
      return v1;
LABEL_23:
    xmmword_1ECD3B1D0();
    return v1;
  }
  return 0;
}

uint64_t sub_1ACB5D9FC(unsigned __int8 *a1, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v46;
  char v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v53;
  int v54;

  v2 = *a1;
  v3 = 1;
  switch(*a1)
  {
    case 0u:
      i = 0;
      v22 = 184;
      goto LABEL_107;
    case 9u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
    case 0x20u:
      i = 0;
      do
        v18 = byte_1ACCB6548[a1[++i]];
      while ((v18 & 1) != 0);
      goto LABEL_36;
    case 0x21u:
      if (a1[1] == 61)
        goto LABEL_67;
      goto LABEL_68;
    case 0x22u:
    case 0x27u:
    case 0x60u:
      v20 = a1[1];
      if (!a1[1])
      {
        v21 = 1;
LABEL_126:
        *a2 = 184;
        return v21;
      }
      LODWORD(i) = 1;
      while (1)
      {
        if (v20 == v2)
        {
          i = (int)i + 1;
          if (a1[i] != v2)
            break;
        }
        v21 = (int)i + 1;
        v20 = a1[v21];
        LODWORD(i) = i + 1;
        if (!a1[v21])
          goto LABEL_126;
      }
      if (v2 != 39)
        goto LABEL_106;
      v22 = 117;
      goto LABEL_107;
    case 0x23u:
    case 0x24u:
    case 0x3Au:
    case 0x40u:
      *a2 = 156;
      v4 = a1[1];
      if (!a1[1])
      {
        v6 = 1;
LABEL_109:
        *a2 = 184;
        return v6;
      }
      v5 = 0;
      v6 = 1;
      while (2)
      {
        if ((byte_1ACCB6548[v4] & 0x46) != 0)
        {
          ++v5;
          LODWORD(v7) = v6;
LABEL_5:
          v6 = (int)v7 + 1;
          v4 = a1[v6];
          if (!a1[v6])
            goto LABEL_11;
          continue;
        }
        break;
      }
      if (v4 != 40 || v5 < 1)
      {
        if (v4 != 58 || (v7 = (int)v6 + 1, a1[v7] != 58))
        {
LABEL_11:
          i = v6;
          if (v5)
            return i;
          goto LABEL_109;
        }
        goto LABEL_5;
      }
      i = (v6 + 1);
      v48 = &a1[(int)v6 + 1];
      while (1)
      {
        v49 = i;
        v51 = *v48++;
        v50 = v51;
        if (!v51)
          break;
        i = (i + 1);
        if ((_DWORD)v50 == 41 || (byte_1ACCB6548[v50] & 1) != 0)
        {
          if ((_DWORD)v50 == 41)
            return i;
          break;
        }
      }
      *a2 = 184;
      return v49;
    case 0x25u:
      v28 = 110;
      goto LABEL_136;
    case 0x26u:
      v28 = 102;
      goto LABEL_136;
    case 0x28u:
      v28 = 22;
      goto LABEL_136;
    case 0x29u:
      v28 = 23;
      goto LABEL_136;
    case 0x2Au:
      v28 = 108;
      goto LABEL_136;
    case 0x2Bu:
      v28 = 106;
      goto LABEL_136;
    case 0x2Cu:
      v28 = 25;
      goto LABEL_136;
    case 0x2Du:
      v24 = a1[1];
      if (v24 == 62)
      {
        *a2 = 112;
        if (a1[2] == 62)
          return 3;
        else
          return 2;
      }
      if (v24 != 45)
      {
        v28 = 107;
        goto LABEL_136;
      }
      for (i = 2; a1[i] && a1[i] != 10; ++i)
        ;
LABEL_36:
      v19 = 183;
      goto LABEL_142;
    case 0x2Eu:
      if ((unint64_t)a1[1] - 58 > 0xFFFFFFFFFFFFFFF5)
        goto LABEL_85;
      v28 = 141;
      goto LABEL_136;
    case 0x2Fu:
      if (a1[1] != 42 || !a1[2])
      {
        v28 = 109;
        goto LABEL_136;
      }
      v29 = a1[3];
      if (a1[2] == 42 && v29 == 47)
      {
        i = 4;
        v22 = 183;
        goto LABEL_107;
      }
      v53 = 0;
      while (v29)
      {
        v54 = a1[v53++ + 4];
        v12 = v29 == 42;
        v29 = v54;
        if (v12)
        {
          v29 = v54;
          if (v54 == 47)
          {
            i = (v53 + 4);
            v22 = 183;
LABEL_107:
            *a2 = v22;
            return i;
          }
        }
      }
      i = (v53 + 3);
      v22 = 183;
      goto LABEL_107;
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
LABEL_85:
      *a2 = 155;
      if (*a1 == 48 && (a1[1] | 0x20) == 0x78 && (byte_1ACCB6548[a1[2]] & 8) != 0)
      {
        v46 = 3;
        do
          v47 = byte_1ACCB6548[a1[v46++]];
        while ((v47 & 8) != 0);
        return (v46 - 1);
      }
      v30 = 0;
      do
        v31 = a1[v30++];
      while ((unint64_t)(v31 - 58) > 0xFFFFFFFFFFFFFFF5);
      if ((_DWORD)v31 == 46)
      {
        do
          v32 = a1[v30++] - 58;
        while (v32 > 0xFFFFFFFFFFFFFFF5);
        *a2 = 153;
      }
      v33 = v30 - 1;
      i = (int)v33;
      v34 = a1[(int)v33];
      if ((v34 | 0x20) != 0x65)
        goto LABEL_120;
      v35 = v33 << 32;
      v36 = a1[((v33 << 32) + 0x100000000) >> 32];
      if ((unint64_t)(v36 - 58) >= 0xFFFFFFFFFFFFFFF6)
      {
        v37 = (v35 + 0x200000000) >> 32;
      }
      else
      {
        if ((_DWORD)v36 != 45 && (_DWORD)v36 != 43)
          goto LABEL_120;
        v37 = (v35 + 0x200000000) >> 32;
        if ((unint64_t)a1[v37] - 58 < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_120;
      }
      v41 = (v37 << 32) - 0x100000000;
      do
      {
        v42 = a1[v37++] - 58;
        v41 += 0x100000000;
      }
      while (v42 > 0xFFFFFFFFFFFFFFF5);
      *a2 = 153;
      i = v41 >> 32;
      v34 = a1[v41 >> 32];
      v33 = v37 - 1;
LABEL_120:
      if ((byte_1ACCB6548[v34] & 0x46) == 0)
        return v33;
      v43 = &a1[i + 1];
      do
      {
        *a2 = 184;
        v44 = *v43++;
        i = (i + 1);
      }
      while ((byte_1ACCB6548[v44] & 0x46) != 0);
      return i;
    case 0x3Bu:
      i = 1;
      *a2 = 1;
      return i;
    case 0x3Cu:
      v26 = a1[1];
      switch(v26)
      {
        case '<':
          v23 = 104;
          goto LABEL_134;
        case '>':
LABEL_67:
          v23 = 52;
          goto LABEL_134;
        case '=':
          v23 = 55;
          goto LABEL_134;
      }
      v28 = 56;
      goto LABEL_136;
    case 0x3Du:
      *a2 = 53;
      if (a1[1] == 61)
        return 2;
      else
        return 1;
    case 0x3Eu:
      v27 = a1[1];
      if (v27 == 62)
      {
        v23 = 105;
        goto LABEL_134;
      }
      if (v27 == 61)
      {
        v23 = 57;
        goto LABEL_134;
      }
      v28 = 54;
      goto LABEL_136;
    case 0x3Fu:
      i = 0;
      *a2 = 156;
      do
        v17 = a1[++i] - 58;
      while (v17 >= 0xFFFFFFFFFFFFFFF6);
      return i;
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
    case 0x52u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
      if (byte_1ACCB6EC0[a1[1]] > 2u)
        goto LABEL_103;
      v14 = 0x200000000;
      v15 = 2;
      do
      {
        v16 = a1[v15++];
        v14 += 0x100000000;
      }
      while (byte_1ACCB6EC0[v16] < 3u);
      if ((byte_1ACCB6548[v16] & 0x46) != 0)
      {
        v3 = v14 >> 32;
        goto LABEL_104;
      }
      i = (v15 - 1);
      *a2 = 59;
      sub_1ACBFF438(a1, i, a2);
      return i;
    case 0x58u:
    case 0x78u:
      if (a1[1] != 39)
        goto LABEL_103;
      *a2 = 154;
      v9 = 2;
      do
        v10 = a1[v9++];
      while ((byte_1ACCB6548[v10] & 8) != 0);
      v11 = v9 - 1;
      v12 = (_DWORD)v10 == 39 && (v11 & 1) == 0;
      if (!v12)
      {
        *a2 = 184;
        for (j = a1[v11]; a1[v11]; j = a1[v11])
        {
          if (j == 39)
            break;
          ++v11;
        }
      }
      if (a1[(int)v11])
        return (v11 + 1);
      else
        return v11;
    case 0x59u:
    case 0x5Au:
    case 0x5Fu:
    case 0x79u:
    case 0x7Au:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xF0u:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
    case 0xFEu:
    case 0xFFu:
      goto LABEL_104;
    case 0x5Bu:
      if (v2 == 93)
      {
        v19 = 59;
        i = 1;
        goto LABEL_142;
      }
      i = 1;
      while (1)
      {
        v40 = a1[i];
        if (!a1[i])
          break;
        ++i;
        if (v40 == 93)
        {
          v19 = 59;
LABEL_142:
          *a2 = v19;
          return i;
        }
      }
      v19 = 184;
      goto LABEL_142;
    case 0x7Cu:
      if (a1[1] == 124)
      {
        v23 = 111;
LABEL_134:
        *a2 = v23;
        return 2;
      }
      else
      {
        v28 = 103;
LABEL_136:
        *a2 = v28;
        return 1;
      }
    case 0x7Eu:
      v28 = 114;
      goto LABEL_136;
    case 0xEFu:
      if (a1[1] == 187 && a1[2] == 191)
      {
        *a2 = 183;
        return 3;
      }
LABEL_103:
      v3 = 1;
LABEL_104:
      LODWORD(i) = v3 - 1;
      v38 = &a1[v3];
      do
      {
        v39 = *v38++;
        i = (i + 1);
      }
      while ((byte_1ACCB6548[v39] & 0x46) != 0);
LABEL_106:
      v22 = 59;
      goto LABEL_107;
    default:
LABEL_68:
      v28 = 184;
      goto LABEL_136;
  }
}

uint64_t sub_1ACB5E0F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  __int16 v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int *v61;
  int *v62;
  int *v63;
  int *v64;
  int *v65;
  uint64_t v66;
  _OWORD *v67;
  int *v68;
  unsigned int *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  _OWORD *v97;
  uint64_t v98;
  unsigned int *v99;
  int *v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  int *v135;
  int *v136;
  uint64_t v137;
  int v138;
  int *v139;
  int *v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  int *v146;
  int *v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  int *v169;
  _OWORD *v170;
  _OWORD *v171;
  _QWORD *v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  int *v181;
  int *v182;
  int *v183;
  _QWORD *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  _BYTE *v212;
  void *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  uint64_t v222;
  uint64_t *v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unsigned __int16 *v255;
  uint64_t result;
  char v257;
  _OWORD v258[2];
  uint64_t v259;

  v8 = a2;
  v10 = *a1;
  switch((int)a2)
  {
    case 0:
      if (!a5[41])
        *((_BYTE *)a5 + 301) = 1;
      goto LABEL_445;
    case 1:
      if (!a5[41])
        *((_BYTE *)a5 + 301) = 2;
      goto LABEL_445;
    case 2:
      sub_1ACB67C30((uint64_t)a5, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 3:
      sub_1ACB93BE4((uint64_t *)a5, *(unsigned int *)(v10 - 16), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 4:
      *(_DWORD *)(v10 + 32) = 7;
      goto LABEL_445;
    case 5:
    case 6:
    case 7:
    case 89:
    case 91:
    case 319:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      goto LABEL_445;
    case 8:
    case 9:
      sub_1ACC02110((uint64_t *)a5, *(unsigned __int16 *)(v10 - 22), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 10:
      sub_1ACC0224C((uint64_t *)a5, 0, v10 + 8);
      goto LABEL_445;
    case 11:
      sub_1ACC0224C((uint64_t *)a5, 1, v10 + 8);
      goto LABEL_445;
    case 12:
      sub_1ACC0224C((uint64_t *)a5, 2, v10 + 8);
      goto LABEL_445;
    case 13:
      sub_1ACB66080((uint64_t)a5, (_OWORD *)(v10 - 16), v10 + 8, *(unsigned int *)(v10 - 88), 0, 0, *(unsigned int *)(v10 - 40), a8, v257);
      goto LABEL_445;
    case 14:
      v24 = (uint64_t)*a5;
      ++*((_BYTE *)a5 + 36);
      ++*(_DWORD *)(v24 + 432);
      *(_WORD *)(v24 + 436) = 0;
      goto LABEL_445;
    case 15:
    case 18:
    case 21:
    case 47:
    case 49:
    case 62:
    case 72:
    case 81:
    case 98:
    case 242:
      *(_DWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 16:
      *(_DWORD *)(v10 - 40) = 1;
      goto LABEL_445;
    case 17:
      *(_DWORD *)(v10 + 8) = *((_BYTE *)*a5 + 197) == 0;
      goto LABEL_445;
    case 19:
      sub_1ACB67074((uint64_t)a5, (_QWORD *)(v10 - 40), v10 - 16, *(unsigned int *)(v10 + 8), 0, a6, a7, a8, v257);
      goto LABEL_445;
    case 20:
      sub_1ACB67074((uint64_t)a5, 0, 0, 0, *(_QWORD *)(v10 + 8), a6, a7, a8, v257);
      v25 = *(_QWORD *)(v10 + 8);
      if (v25)
        goto LABEL_111;
      goto LABEL_445;
    case 22:
      *(_DWORD *)(v10 - 40) |= *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 23:
      v26 = *(_DWORD *)(v10 + 16);
      if (v26 != 5)
        goto LABEL_54;
      if (sqlite3_strnicmp(*(const char **)(v10 + 8), "rowid", 5))
      {
        v26 = *(_DWORD *)(v10 + 16);
LABEL_54:
        *(_DWORD *)(v10 - 16) = 0;
        sub_1ACBCB308((uint64_t)a5, "unknown table option: %.*s", a3, a4, (uint64_t)a5, a6, a7, a8, v26);
      }
      else
      {
        *(_DWORD *)(v10 - 16) = 640;
      }
      goto LABEL_445;
    case 24:
      v27 = *(_DWORD *)(v10 + 16);
      if (v27 != 6)
        goto LABEL_58;
      if (sqlite3_strnicmp(*(const char **)(v10 + 8), "strict", 6))
      {
        v27 = *(_DWORD *)(v10 + 16);
LABEL_58:
        sub_1ACBCB308((uint64_t)a5, "unknown table option: %.*s", a3, a4, (uint64_t)a5, a6, a7, a8, v27);
        *(_DWORD *)(v10 + 8) = 0;
      }
      else
      {
        *(_DWORD *)(v10 + 8) = 0x10000;
      }
      goto LABEL_445;
    case 25:
      sub_1ACB66794((uint64_t)a5, *(unsigned __int8 **)(v10 - 16), *(_QWORD *)(v10 - 8), *(unsigned __int8 **)(v10 + 8), *(_QWORD *)(v10 + 16), a6, a7, a8);
      goto LABEL_445;
    case 26:
    case 65:
    case 104:
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 27:
      *(_DWORD *)(v10 - 56) = *(_DWORD *)(v10 + 8) + *(_DWORD *)(v10 + 16) - *(_DWORD *)(v10 - 64);
      goto LABEL_445;
    case 28:
      *(_DWORD *)(v10 - 104) = *(_DWORD *)(v10 + 8) + *(_DWORD *)(v10 + 16) - *(_DWORD *)(v10 - 112);
      goto LABEL_445;
    case 29:
      *(_DWORD *)(v10 - 8) = *(_DWORD *)(v10 + 16) + *(_DWORD *)(v10 + 8) - *(_DWORD *)(v10 - 16);
      goto LABEL_445;
    case 30:
      *(_QWORD *)(v10 + 32) = a3;
      goto LABEL_445;
    case 31:
      *(_QWORD *)(v10 + 32) = a3;
      *(_QWORD *)(v10 + 40) = a4;
      goto LABEL_445;
    case 32:
    case 67:
      *(_OWORD *)(a5 + 13) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 33:
      v28 = *(unsigned __int8 **)(v10 + 8);
      v29 = *(_QWORD *)(v10 - 16);
      v30 = v29 + *(unsigned int *)(v10 - 8);
      goto LABEL_70;
    case 34:
      v28 = *(unsigned __int8 **)(v10 - 16);
      v29 = *(_QWORD *)(v10 - 40) + 1;
      v30 = *(_QWORD *)(v10 + 8);
      goto LABEL_70;
    case 35:
      v28 = *(unsigned __int8 **)(v10 + 8);
      goto LABEL_69;
    case 36:
      v28 = (unsigned __int8 *)sub_1ACC0241C((uint64_t *)a5, 173, *(_QWORD *)(v10 + 8), 0);
LABEL_69:
      v29 = *(_QWORD *)(v10 - 40);
      v30 = *(_QWORD *)(v10 - 16) + *(unsigned int *)(v10 - 8);
LABEL_70:
      sub_1ACB8AED0((uint64_t)a5, v28, v29, v30, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 37:
      v31 = sub_1ACC02548((uint64_t)a5, 117, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16));
      v36 = (unsigned __int8 *)v31;
      if (v31)
        sub_1ACC026B8(v31);
      sub_1ACB8AED0((uint64_t)a5, v36, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 8) + *(unsigned int *)(v10 + 16), v32, v33, v34, v35);
      goto LABEL_445;
    case 38:
      sub_1ACC02770((uint64_t)a5, *(_DWORD *)(v10 + 8));
      goto LABEL_445;
    case 39:
      sub_1ACB8AAC8(a5, 0, *(unsigned int *)(v10 - 16), *(unsigned int *)(v10 + 8), *(unsigned int *)(v10 - 40), a6, a7, a8);
      goto LABEL_445;
    case 40:
      sub_1ACB8BA04(a5, 0, 0, 0, 0, *(unsigned int *)(v10 + 8), 0, 0, 0, 0, 1u);
      goto LABEL_445;
    case 41:
      v37 = *(unsigned __int8 **)(v10 - 16);
      v38 = *(_QWORD *)(v10 - 40);
      v39 = *(_QWORD *)(v10 + 8);
      goto LABEL_100;
    case 42:
      sub_1ACBA0238(a5, 0, v10 - 40, *(_QWORD **)(v10 - 16), *(unsigned int *)(v10 + 8), a6, a7, a8);
      goto LABEL_445;
    case 43:
      v40 = a5[43];
      if (!v40)
        goto LABEL_445;
      goto LABEL_102;
    case 44:
      sub_1ACC0293C((uint64_t *)a5, v10 + 8);
      goto LABEL_445;
    case 45:
      sub_1ACC02B08((uint64_t *)a5, *(unsigned __int8 **)(v10 - 16), 0, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 46:
      sub_1ACC02B08((uint64_t *)a5, *(unsigned __int8 **)(v10 - 40), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 48:
    case 96:
    case 122:
    case 137:
      *(_DWORD *)(v10 + 8) = 1;
      goto LABEL_445;
    case 50:
      *(_DWORD *)(v10 - 16) = *(_DWORD *)(v10 - 16) & ~*(_DWORD *)(v10 + 12) | *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 51:
      *(_QWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 52:
      *(_QWORD *)(v10 - 40) = 0;
      goto LABEL_445;
    case 53:
      v41 = *(_DWORD *)(v10 + 8);
      v42 = 255;
      goto LABEL_89;
    case 54:
      v41 = *(_DWORD *)(v10 + 8) << 8;
      v42 = 65280;
LABEL_89:
      *(_DWORD *)(v10 - 40) = v41;
      *(_DWORD *)(v10 - 36) = v42;
      goto LABEL_445;
    case 55:
      *(_DWORD *)(v10 - 16) = 8;
      goto LABEL_445;
    case 56:
      *(_DWORD *)(v10 - 16) = 9;
      goto LABEL_445;
    case 57:
      *(_DWORD *)(v10 + 8) = 10;
      goto LABEL_445;
    case 58:
      *(_DWORD *)(v10 + 8) = 7;
      goto LABEL_445;
    case 59:
    case 64:
      *(_DWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 60:
      *(_DWORD *)(v10 - 40) = 0;
      goto LABEL_445;
    case 61:
    case 76:
    case 171:
      *(_DWORD *)(v10 - 16) = *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 63:
    case 80:
    case 140:
    case 215:
    case 218:
    case 243:
      *(_DWORD *)(v10 - 16) = 1;
      goto LABEL_445;
    case 66:
      *((_DWORD *)a5 + 28) = 0;
      goto LABEL_445;
    case 68:
      sub_1ACB8AAC8(a5, *(unsigned int **)(v10 - 64), *(unsigned int *)(v10 + 8), *(unsigned int *)(v10 - 40), 0, a6, a7, a8);
      goto LABEL_445;
    case 69:
      sub_1ACB8BA04(a5, 0, 0, 0, *(_QWORD *)(v10 - 40), *(unsigned int *)(v10 + 8), 0, 0, 0, 0, 1u);
      goto LABEL_445;
    case 70:
      v37 = *(unsigned __int8 **)(v10 - 40);
      v38 = *(_QWORD *)(v10 - 64);
      v39 = *(_QWORD *)(v10 - 16);
LABEL_100:
      sub_1ACC027F0((uint64_t)a5, v37, v38, v39);
      goto LABEL_445;
    case 71:
      sub_1ACBA0238(a5, *(_QWORD **)(v10 - 136), v10 - 64, *(_QWORD **)(v10 - 40), *(unsigned int *)(v10 - 16), a6, a7, a8);
      v40 = a5[43];
      if (v40)
      {
LABEL_102:
        if (!*((_BYTE *)v40 + 63))
        {
          v43 = v40[9];
          if (v43)
            *(_BYTE *)(v43 + 44) = *(_DWORD *)(v10 + 8);
        }
      }
      goto LABEL_445;
    case 73:
    case 75:
      *(_DWORD *)(v10 + 32) = 11;
      goto LABEL_445;
    case 74:
      *(_DWORD *)(v10 - 40) = *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 77:
      *(_DWORD *)(v10 + 8) = 4;
      goto LABEL_445;
    case 78:
    case 172:
      *(_DWORD *)(v10 + 8) = 5;
      goto LABEL_445;
    case 79:
      sub_1ACBB80F4(a5, *(_QWORD *)(v10 + 8), 0, *(_DWORD *)(v10 - 16), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 82:
      sub_1ACC02E2C((uint64_t)a5, (_QWORD *)(v10 - 184), (_OWORD *)(v10 - 88), v10 - 64, *(_QWORD **)(v10 - 40), *(_QWORD *)(v10 + 8), *(unsigned int *)(v10 - 160), *(unsigned int *)(v10 - 112));
      goto LABEL_445;
    case 83:
      sub_1ACBB80F4(a5, *(_QWORD *)(v10 + 8), 1, *(_DWORD *)(v10 - 16), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 84:
      v259 = 0;
      memset(v258, 0, sizeof(v258));
      LOBYTE(v258[0]) = 9;
      sub_1ACB6EA04(a5, *(_QWORD *)(v10 + 8), (uint64_t)v258, a4, (uint64_t)a5, a6, a7, a8);
      v25 = *(_QWORD *)(v10 + 8);
      if (v25)
LABEL_111:
        sub_1ACB7E704(*a5, v25, 1);
      goto LABEL_445;
    case 85:
      v44 = *(_QWORD *)(v10 + 8);
      sub_1ACC0319C(a5, v44, *(_QWORD **)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 40) = v44;
      goto LABEL_445;
    case 86:
      v45 = *(_QWORD *)(v10 + 8);
      sub_1ACC0319C(a5, v45, *(_QWORD **)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 64) = v45;
      goto LABEL_445;
    case 87:
      v46 = *(_QWORD *)(v10 + 8);
      if (v46)
        sub_1ACC031DC((uint64_t)a5, v46, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 88:
      v47 = *(_OWORD **)(v10 + 8);
      v48 = *(_QWORD *)(v10 - 40);
      if (v47
        && (!*((_QWORD *)v47 + 10)
         || (v258[0] = 0uLL,
             sub_1ACC031DC((uint64_t)a5, (uint64_t)v47, a3, a4, (uint64_t)a5, a6, a7, a8, v257),
             v50 = sub_1ACB6E09C((uint64_t)a5, 0, 0, 0, (uint64_t)v258, (uint64_t)v47, 0, v49),
             (v47 = sub_1ACB6E848(a5, 0, v50, 0, 0, 0, 0, 0, 0)) != 0)))
      {
        *(_BYTE *)v47 = *(_DWORD *)(v10 - 16);
        *((_QWORD *)v47 + 10) = v48;
        if (v48)
          *(_DWORD *)(v48 + 4) &= ~0x400u;
        *((_DWORD *)v47 + 1) &= ~0x400u;
        if (*(_DWORD *)(v10 - 16) != 135)
        {
          *((_BYTE *)a5 + 34) = 1;
          *(_QWORD *)(v10 - 40) = v47;
          goto LABEL_445;
        }
      }
      else
      {
        if (v48)
          sub_1ACB7E704(*a5, v48, 1);
        v47 = 0;
      }
      *(_QWORD *)(v10 - 40) = v47;
      goto LABEL_445;
    case 90:
      *(_DWORD *)(v10 - 16) = 135;
      goto LABEL_445;
    case 92:
      *(_QWORD *)(v10 - 184) = sub_1ACB6E848(a5, *(_QWORD **)(v10 - 136), *(_OWORD **)(v10 - 112), *(_QWORD *)(v10 - 88), *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 - 40), *(_QWORD *)(v10 - 16), *(_DWORD *)(v10 - 160), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 93:
      v51 = sub_1ACB6E848(a5, *(_QWORD **)(v10 - 160), *(_OWORD **)(v10 - 136), *(_QWORD *)(v10 - 112), *(_QWORD *)(v10 - 88), *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 - 16), *(_DWORD *)(v10 - 184), *(_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 208) = v51;
      if (v51)
      {
        *((_QWORD *)v51 + 15) = *(_QWORD *)(v10 - 40);
      }
      else
      {
        v214 = *(_QWORD **)(v10 - 40);
        if (v214)
        {
          v215 = *a5;
          do
          {
            v216 = (_QWORD *)v214[8];
            sub_1ACBF8400(v215, v214);
            v214 = v216;
          }
          while (v216);
        }
      }
      goto LABEL_445;
    case 94:
      *(_QWORD *)(v10 - 64) = sub_1ACB6E848(a5, *(_QWORD **)(v10 - 16), 0, 0, 0, 0, 0, 512, 0);
      goto LABEL_445;
    case 95:
      v52 = *(_QWORD *)(v10 - 88);
      v53 = (uint64_t)sub_1ACB6E848(a5, *(_QWORD **)(v10 - 16), 0, 0, 0, 0, 0, 1536, 0);
      if (v52)
        *(_DWORD *)(v52 + 4) &= ~0x400u;
      if (v53)
      {
        *(_BYTE *)v53 = -121;
        *(_QWORD *)(v53 + 80) = v52;
        goto LABEL_444;
      }
      *(_QWORD *)(v10 - 88) = v52;
      goto LABEL_445;
    case 97:
      *(_DWORD *)(v10 + 8) = 2;
      goto LABEL_445;
    case 99:
    case 105:
    case 108:
    case 132:
    case 142:
    case 230:
    case 233:
    case 238:
      *(_QWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 100:
      v54 = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(_QWORD *)(v10 - 88) = v54;
      if (*(_DWORD *)(v10 + 16))
      {
        sub_1ACC032F0((uint64_t)a5, v54, v10 + 8, 1);
        v54 = *(int **)(v10 - 88);
      }
      sub_1ACC03448((uint64_t *)a5, v54, *(unsigned __int8 **)(v10 - 64), *(_QWORD *)(v10 - 16));
      goto LABEL_445;
    case 101:
      v55 = (uint64_t)*a5;
      v258[0] = 0uLL;
      v56 = sub_1ACB6DDF8(v55, 180, (uint64_t)v258, 0);
      if (v56 && (*(_BYTE *)(v56 + 4) & 3) == 0)
        *(_DWORD *)(v56 + 56) = *(_DWORD *)(v10 + 8) - *((_DWORD *)a5 + 84);
      *(_QWORD *)(v10 - 40) = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 40), (unsigned __int8 *)v56);
      goto LABEL_445;
    case 102:
      v57 = sub_1ACC0241C((uint64_t *)a5, 180, 0, 0);
      v58 = v57;
      if (v57 && (*(_BYTE *)(v57 + 4) & 3) == 0)
        *(_DWORD *)(v57 + 56) = *(_DWORD *)(v10 + 8) - *((_DWORD *)a5 + 84);
      v59 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 - 40), *(_QWORD *)(v10 - 32));
      v60 = (unsigned __int8 *)sub_1ACC0241C((uint64_t *)a5, 141, v59, v58);
      v53 = (uint64_t)sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 88), v60);
      goto LABEL_444;
    case 103:
    case 115:
    case 254:
    case 255:
      *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 106:
      v61 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 - 16) = v61;
      sub_1ACC03584(v61);
      goto LABEL_445;
    case 107:
      v62 = *(int **)(v10 - 16);
      if (v62 && *v62 >= 1)
        LOBYTE(v62[26 * (*v62 - 1) + 17]) = *(_DWORD *)(v10 + 8);
      goto LABEL_445;
    case 109:
      v53 = (uint64_t)sub_1ACB6E09C((uint64_t)a5, *(int **)(v10 - 88), v10 - 64, v10 - 40, v10 - 16, 0, v10 + 8, a8);
      goto LABEL_444;
    case 110:
      v63 = sub_1ACB6E09C((uint64_t)a5, *(int **)(v10 - 112), v10 - 88, v10 - 64, v10 - 40, 0, v10 + 8, a8);
      *(_QWORD *)(v10 - 112) = v63;
      sub_1ACC03690((uint64_t *)a5, v63, v10 - 16);
      goto LABEL_445;
    case 111:
      v64 = sub_1ACB6E09C((uint64_t)a5, *(int **)(v10 - 160), v10 - 136, v10 - 112, v10 - 16, 0, v10 + 8, a8);
      *(_QWORD *)(v10 - 160) = v64;
      sub_1ACC037A0(a5, v64, *(_QWORD **)(v10 - 64));
      goto LABEL_445;
    case 112:
      v65 = *(int **)(v10 - 112);
      v66 = v10 - 16;
      v67 = *(_OWORD **)(v10 - 64);
      goto LABEL_390;
    case 113:
      v68 = *(int **)(v10 - 112);
      if (v68 || *(_DWORD *)(v10 - 8) || *(_QWORD *)(v10 + 8) || *(_QWORD *)(v10 + 16))
      {
        v69 = *(unsigned int **)(v10 - 64);
        if (v69 && *v69 == 1)
        {
          v70 = sub_1ACB6E09C((uint64_t)a5, v68, 0, 0, v10 - 16, 0, v10 + 8, a8);
          *(_QWORD *)(v10 - 112) = v70;
          if (v70)
          {
            v71 = *(_QWORD *)(v10 - 64);
            v72 = *v70 - 1;
            v73 = &v70[26 * v72];
            *((_OWORD *)v73 + 1) = *(_OWORD *)(v71 + 16);
            v74 = *(_QWORD *)(v71 + 48);
            *((_QWORD *)v73 + 6) = v74;
            if (v74 && (*(_BYTE *)(v74 + 5) & 8) != 0)
              *(_WORD *)((char *)&v70[26 * v72 + 17] + 1) |= 0x2000u;
            if ((*(_WORD *)(v71 + 69) & 4) != 0)
            {
              v75 = &v70[26 * v72];
              *((_QWORD *)v75 + 12) = *(_QWORD *)(v71 + 96);
              *(_QWORD *)(v71 + 96) = 0;
              *(_WORD *)(v71 + 69) &= ~4u;
              *(_WORD *)((char *)v75 + 69) |= 4u;
            }
            *(_QWORD *)(v71 + 48) = 0;
            *(_QWORD *)(v71 + 16) = 0;
            *(_QWORD *)(v71 + 24) = 0;
          }
          sub_1ACB7E8B0(*a5, *(_QWORD **)(v10 - 64));
        }
        else
        {
          sub_1ACC03584(v69);
          v67 = sub_1ACB6E848(a5, 0, *(_OWORD **)(v10 - 64), 0, 0, 0, 0, 2048, 0);
          v65 = *(int **)(v10 - 112);
          v66 = v10 - 16;
LABEL_390:
          *(_QWORD *)(v10 - 112) = sub_1ACB6E09C((uint64_t)a5, v65, 0, 0, v66, (uint64_t)v67, v10 + 8, a8);
        }
      }
      else
      {
        *(_QWORD *)(v10 - 112) = *(_QWORD *)(v10 - 64);
      }
      goto LABEL_445;
    case 114:
    case 129:
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 0;
      goto LABEL_445;
    case 116:
      v76 = sub_1ACB6E384((uint64_t *)a5, 0, v10 + 8, 0, (uint64_t)a5, a6, a7, a8);
      v77 = v76;
      if (*((unsigned __int8 *)a5 + 302) >= 2u && v76 != 0)
        sub_1ACC037D8((uint64_t)a5, *(_QWORD *)(v76 + 24), (_OWORD *)(v10 + 8));
      *(_QWORD *)(v10 + 8) = v77;
      goto LABEL_445;
    case 117:
      v79 = sub_1ACB6E384((uint64_t *)a5, 0, v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      v80 = v79;
      if (*((unsigned __int8 *)a5 + 302) >= 2u && v79 != 0)
        sub_1ACC037D8((uint64_t)a5, *(_QWORD *)(v79 + 24), (_OWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 40) = v80;
      goto LABEL_445;
    case 118:
      *(_QWORD *)(v10 + 8) = sub_1ACB6E384((uint64_t *)a5, 0, v10 + 8, 0, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 119:
      *(_QWORD *)(v10 - 40) = sub_1ACB6E384((uint64_t *)a5, 0, v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 120:
      v82 = sub_1ACB6E384((uint64_t *)a5, 0, v10 - 88, v10 - 40, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 88) = v82;
      if (v82)
        *(_QWORD *)(*(_QWORD *)(v10 - 88) + 32) = sub_1ACC03858((uint64_t)*a5, v10 + 8);
      goto LABEL_445;
    case 121:
      v83 = sub_1ACB6E384((uint64_t *)a5, 0, v10 - 40, 0, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 40) = v83;
      if (v83)
        *(_QWORD *)(*(_QWORD *)(v10 - 40) + 32) = sub_1ACC03858((uint64_t)*a5, v10 + 8);
      goto LABEL_445;
    case 123:
      *(_DWORD *)(v10 - 16) = sub_1ACC03918((uint64_t)a5, v10 - 16, 0, 0, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 124:
      *(_DWORD *)(v10 - 40) = sub_1ACC03918((uint64_t)a5, v10 - 40, v10 - 16, 0, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 125:
      *(_DWORD *)(v10 - 64) = sub_1ACC03918((uint64_t)a5, v10 - 64, v10 - 40, v10 - 16, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 126:
      *(_QWORD *)(v10 - 16) = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 - 8) = 0;
      goto LABEL_445;
    case 127:
      v84 = *(_QWORD *)(v10 - 16);
      *(_QWORD *)(v10 - 64) = 0;
      *(_QWORD *)(v10 - 56) = v84;
      goto LABEL_445;
    case 128:
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      goto LABEL_445;
    case 130:
      *(_OWORD *)(v10 - 40) = *(_OWORD *)(v10 + 8);
      goto LABEL_445;
    case 131:
      *(_QWORD *)(v10 - 16) = 0;
      *(_DWORD *)(v10 - 8) = 1;
      goto LABEL_445;
    case 133:
    case 143:
      goto LABEL_363;
    case 134:
      v85 = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(_QWORD *)(v10 - 88) = v85;
      goto LABEL_194;
    case 135:
      v85 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 - 40));
      *(_QWORD *)(v10 - 40) = v85;
LABEL_194:
      sub_1ACC03AF0(v85, *(_DWORD *)(v10 - 16), *(_DWORD *)(v10 + 8));
      goto LABEL_445;
    case 136:
    case 214:
    case 217:
      *(_DWORD *)(v10 + 8) = 0;
      goto LABEL_445;
    case 138:
    case 141:
      *(_DWORD *)(v10 + 32) = -1;
      goto LABEL_445;
    case 139:
      *(_DWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 144:
    case 146:
    case 151:
    case 153:
    case 164:
    case 173:
    case 228:
    case 229:
    case 248:
    case 264:
    case 283:
      *(_QWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 145:
    case 152:
    case 154:
    case 227:
    case 247:
    case 265:
    case 284:
    case 331:
      goto LABEL_419;
    case 147:
      *(_QWORD *)(v10 - 16) = sub_1ACC0241C((uint64_t *)a5, 148, *(_QWORD *)(v10 + 8), 0);
      goto LABEL_445;
    case 148:
      v86 = *(_QWORD *)(v10 - 40);
      v87 = *(_QWORD *)(v10 + 8);
      goto LABEL_199;
    case 149:
      v86 = *(_QWORD *)(v10 + 8);
      v87 = *(_QWORD *)(v10 - 40);
LABEL_199:
      *(_QWORD *)(v10 - 64) = sub_1ACC0241C((uint64_t *)a5, 148, v86, v87);
      goto LABEL_445;
    case 150:
      sub_1ACC03690((uint64_t *)a5, *(int **)(v10 - 88), v10 - 64);
      sub_1ACBAA7B4(a5, *(_QWORD *)(v10 - 88), *(unsigned __int8 **)(v10 - 40), *(_QWORD **)(v10 - 16), *(_QWORD *)(v10 + 8), v88, v89, v90);
      goto LABEL_445;
    case 155:
      sub_1ACC03B40((uint64_t)a5, *(_QWORD **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 16) = 0;
      goto LABEL_445;
    case 156:
      sub_1ACC03B40((uint64_t)a5, *(_QWORD **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(v10 - 64) = *(_QWORD *)(v10 - 40);
      goto LABEL_445;
    case 157:
      sub_1ACC03690((uint64_t *)a5, *(int **)(v10 - 160), v10 - 136);
      v96 = *(int **)(v10 - 64);
      if (v96)
      {
        if (*v96 >= 2)
        {
          v97 = sub_1ACB6E848(a5, 0, v96, 0, 0, 0, 0, 2048, 0);
          v258[0] = 0uLL;
          v96 = sub_1ACB6E09C((uint64_t)a5, 0, 0, 0, (uint64_t)v258, (uint64_t)v97, 0, v98);
        }
        *(_QWORD *)(v10 - 160) = sub_1ACC03DB8((uint64_t *)a5, *(int **)(v10 - 160), v96, v91, v92, v93, v94, v95);
      }
      v99 = *(unsigned int **)(v10 - 88);
      if (v99 && (signed int)*v99 > *((_DWORD *)*a5 + 36))
      {
        sub_1ACBCB308((uint64_t)a5, "too many columns in %s", (uint64_t)v99, v91, v92, v93, v94, v95, (char)"set list");
        v99 = *(unsigned int **)(v10 - 88);
      }
      sub_1ACBA880C((uint64_t)a5, *(_QWORD *)(v10 - 160), v99, *(_QWORD *)(v10 - 40), *(unsigned int *)(v10 - 184), *(_QWORD *)(v10 - 16), *(_QWORD *)(v10 + 8), 0);
      goto LABEL_445;
    case 158:
      v100 = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 + 8));
      *(_QWORD *)(v10 - 88) = v100;
      sub_1ACC032F0((uint64_t)a5, v100, v10 - 40, 1);
      goto LABEL_445;
    case 159:
      *(_QWORD *)(v10 - 136) = sub_1ACC03E50((uint64_t *)a5, *(int **)(v10 - 136), *(_QWORD **)(v10 - 64), *(unsigned __int8 **)(v10 + 8), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 160:
      v101 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 + 8));
      sub_1ACC032F0((uint64_t)a5, v101, v10 - 40, 1);
      *(_QWORD *)(v10 - 40) = v101;
      goto LABEL_445;
    case 161:
      *(_QWORD *)(v10 - 88) = sub_1ACC03E50((uint64_t *)a5, 0, *(_QWORD **)(v10 - 64), *(unsigned __int8 **)(v10 + 8), (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 162:
      sub_1ACB93F7C((uint64_t)a5, *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 - 16), *(unsigned int **)(v10 - 40), *(unsigned int *)(v10 - 112), *(_QWORD *)(v10 + 8), a7, a8);
      goto LABEL_445;
    case 163:
      sub_1ACB93F7C((uint64_t)a5, *(_QWORD *)(v10 - 88), 0, *(unsigned int **)(v10 - 64), *(unsigned int *)(v10 - 136), 0, a7, a8);
      goto LABEL_445;
    case 165:
      *(_QWORD *)(v10 - 16) = 0;
      goto LABEL_218;
    case 166:
      *(_QWORD *)(v10 - 256) = sub_1ACC040B8(*a5, *(_QWORD **)(v10 - 184), *(unsigned __int8 **)(v10 - 136), *(_QWORD **)(v10 - 40), *(unsigned __int8 **)(v10 - 16), *(_QWORD **)(v10 + 8));
      goto LABEL_445;
    case 167:
      *(_QWORD *)(v10 - 184) = sub_1ACC040B8(*a5, *(_QWORD **)(v10 - 112), *(unsigned __int8 **)(v10 - 64), 0, 0, *(_QWORD **)(v10 + 8));
      goto LABEL_445;
    case 168:
      *(_QWORD *)(v10 - 88) = sub_1ACC040B8(*a5, 0, 0, 0, 0, 0);
      goto LABEL_445;
    case 169:
      *(_QWORD *)(v10 - 160) = sub_1ACC040B8(*a5, 0, 0, *(_QWORD **)(v10 - 40), *(unsigned __int8 **)(v10 - 16), 0);
      goto LABEL_445;
    case 170:
LABEL_218:
      sub_1ACC03B40((uint64_t)a5, *(_QWORD **)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 174:
    case 177:
    case 234:
    case 239:
      *(_QWORD *)(v10 - 40) = *(_QWORD *)(v10 - 16);
      goto LABEL_445;
    case 175:
      *(_QWORD *)(v10 - 40) = sub_1ACC041AC((uint64_t)a5, *(_QWORD **)(v10 - 40), v10 + 8);
      goto LABEL_445;
    case 176:
      *(_QWORD *)(v10 + 8) = sub_1ACC041AC((uint64_t)a5, 0, v10 + 8);
      goto LABEL_445;
    case 178:
      v20 = *(const void **)(v10 + 8);
      v21 = *(_QWORD *)(v10 + 16);
      v22 = (uint64_t)a5;
      LOBYTE(v19) = 59;
      goto LABEL_226;
    case 179:
      v102 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 - 40), *(_QWORD *)(v10 - 32));
      v14 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16));
      v15 = (uint64_t *)a5;
      LOBYTE(v12) = -115;
      v13 = v102;
      goto LABEL_6;
    case 180:
      v103 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 - 88), *(_QWORD *)(v10 - 80));
      v104 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 - 40), *(_QWORD *)(v10 - 32));
      v105 = sub_1ACC02548((uint64_t)a5, 59, *(const void **)(v10 + 8), *(_QWORD *)(v10 + 16));
      v106 = sub_1ACC0241C((uint64_t *)a5, 141, v104, v105);
      if (*((unsigned __int8 *)a5 + 302) < 2u)
        goto LABEL_429;
      v107 = a5[51];
      if (!v107)
        goto LABEL_429;
      while (*v107 != v103)
      {
        v107 = (_QWORD *)v107[3];
        if (!v107)
          goto LABEL_429;
      }
      *v107 = 0;
LABEL_429:
      v223 = (uint64_t *)a5;
      v224 = -115;
      v225 = v103;
      goto LABEL_443;
    case 181:
    case 182:
      v19 = *(_WORD *)(v10 + 2);
      v20 = *(const void **)(v10 + 8);
      v21 = *(_QWORD *)(v10 + 16);
      v22 = (uint64_t)a5;
LABEL_226:
      *(_QWORD *)(v10 + 8) = sub_1ACC02548(v22, v19, v20, v21);
      goto LABEL_445;
    case 183:
      v108 = (_DWORD *)(v10 + 8);
      v109 = sub_1ACB6DDF8((uint64_t)*a5, 155, v10 + 8, 1);
      if (v109)
        *(_DWORD *)(v109 + 56) = *v108 - *((_DWORD *)a5 + 84);
      *(_QWORD *)v108 = v109;
      goto LABEL_445;
    case 184:
      v111 = (_OWORD *)(v10 + 8);
      v110 = *(unsigned __int8 **)(v10 + 8);
      if (*v110 == 35 && (unint64_t)v110[1] - 58 > 0xFFFFFFFFFFFFFFF5)
      {
        v258[0] = *v111;
        if (*((_BYTE *)a5 + 30))
        {
          v222 = sub_1ACC0241C((uint64_t *)a5, 176, 0, 0);
          *(_QWORD *)v111 = v222;
          if (v222)
            sub_1ACBFD07C((unsigned __int8 *)(*(_QWORD *)&v258[0] + 1), (_DWORD *)(v222 + 44));
        }
        else
        {
          sub_1ACBCB308((uint64_t)a5, "near \"%T\": syntax error", (uint64_t)v110, a4, (uint64_t)a5, a6, a7, a8, (char)v258);
          *(_QWORD *)v111 = 0;
        }
      }
      else
      {
        v112 = *(unsigned int *)(v10 + 16);
        v113 = sub_1ACC02548((uint64_t)a5, 156, v110, *(_QWORD *)(v10 + 16));
        *(_QWORD *)(v10 + 8) = v113;
        sub_1ACBA09CC((uint64_t)a5, v113, v112, v114, v115, v116, v117, v118);
      }
      goto LABEL_445;
    case 185:
      *(_QWORD *)(v10 - 40) = sub_1ACC043E0((uint64_t *)a5, *(_QWORD *)(v10 - 40), v10 + 8, 1);
      goto LABEL_445;
    case 186:
      v119 = sub_1ACB6DDF8((uint64_t)*a5, 36, v10 - 16, 1);
      *(_QWORD *)(v10 - 112) = v119;
      sub_1ACB6DF98(*a5, v119, *(_QWORD *)(v10 - 64), 0);
      goto LABEL_445;
    case 187:
      *(_QWORD *)(v10 - 88) = sub_1ACB8DD70((uint64_t)a5, *(_QWORD **)(v10 - 16), (_DWORD *)(v10 - 88), *(_DWORD *)(v10 - 40));
      goto LABEL_445;
    case 188:
      *(_QWORD *)(v10 - 64) = sub_1ACB8DD70((uint64_t)a5, 0, (_DWORD *)(v10 - 64), 0);
      goto LABEL_445;
    case 189:
      v120 = sub_1ACB8DD70((uint64_t)a5, *(_QWORD **)(v10 - 40), (_DWORD *)(v10 - 112), *(_DWORD *)(v10 - 64));
      sub_1ACC04430(a5, v120, *(_QWORD *)(v10 + 8), v121, v122, v123, v124, v125, v257);
      *(_QWORD *)(v10 - 112) = v120;
      goto LABEL_445;
    case 190:
      v126 = sub_1ACB8DD70((uint64_t)a5, 0, (_DWORD *)(v10 - 88), 0);
      sub_1ACC04430(a5, v126, *(_QWORD *)(v10 + 8), v127, v128, v129, v130, v131, v257);
      *(_QWORD *)(v10 - 88) = v126;
      goto LABEL_445;
    case 191:
      *(_QWORD *)(v10 + 8) = sub_1ACB8DD70((uint64_t)a5, 0, (_DWORD *)(v10 + 8), 0);
      goto LABEL_445;
    case 192:
      v132 = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 64), *(unsigned __int8 **)(v10 - 16));
      v133 = sub_1ACC0241C((uint64_t *)a5, 177, 0, 0);
      *(_QWORD *)(v10 - 88) = v133;
      if (v133)
      {
        *(_QWORD *)(v133 + 32) = v132;
        if (*v132)
          *(_DWORD *)(*(_QWORD *)(v10 - 88) + 4) |= *(_DWORD *)(*((_QWORD *)v132 + 1) + 4) & 0x400208;
      }
      else if (v132)
      {
        sub_1ACC010B0(*a5, v132);
      }
      goto LABEL_445;
    case 193:
      *(_QWORD *)(v10 - 40) = sub_1ACC04474((uint64_t *)a5, *(_QWORD *)(v10 - 40), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
      v12 = *(_WORD *)(v10 - 22);
      v13 = *(_QWORD *)(v10 - 40);
      v14 = *(_QWORD *)(v10 + 8);
      v15 = (uint64_t *)a5;
      goto LABEL_6;
    case 201:
      *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
      *(_DWORD *)(v10 - 8) |= 0x80000000;
      goto LABEL_445;
    case 202:
      v134 = *(_DWORD *)(v10 - 8);
      *(_DWORD *)(v10 - 8) = v134 & 0x7FFFFFFF;
      v135 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 + 8));
      v136 = sub_1ACB6E054((uint64_t *)a5, v135, *(unsigned __int8 **)(v10 - 40));
      v137 = sub_1ACB8DD70((uint64_t)a5, v136, (_DWORD *)(v10 - 16), 0);
      *(_QWORD *)(v10 - 40) = v137;
      if (v134 < 0)
      {
        v137 = sub_1ACC0241C((uint64_t *)a5, 19, v137, 0);
        *(_QWORD *)(v10 - 40) = v137;
      }
      goto LABEL_255;
    case 203:
      v138 = *(_DWORD *)(v10 - 56);
      *(_DWORD *)(v10 - 56) = v138 & 0x7FFFFFFF;
      v139 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 - 40));
      v140 = sub_1ACB6E054((uint64_t *)a5, v139, *(unsigned __int8 **)(v10 - 88));
      v141 = sub_1ACB6E054((uint64_t *)a5, v140, *(unsigned __int8 **)(v10 + 8));
      v137 = sub_1ACB8DD70((uint64_t)a5, v141, (_DWORD *)(v10 - 64), 0);
      *(_QWORD *)(v10 - 88) = v137;
      if (v138 < 0)
      {
        v137 = sub_1ACC0241C((uint64_t *)a5, 19, v137, 0);
        *(_QWORD *)(v10 - 88) = v137;
      }
LABEL_255:
      if (v137)
        *(_DWORD *)(v137 + 4) |= 0x100u;
      goto LABEL_445;
    case 204:
      v23 = *(_WORD *)(v10 + 2);
      v142 = *(_QWORD *)(v10 - 16);
      goto LABEL_269;
    case 205:
      v13 = *(_QWORD *)(v10 - 40);
      v15 = (uint64_t *)a5;
      LOBYTE(v12) = 51;
      v14 = 0;
LABEL_6:
      *(_QWORD *)(v10 - 40) = sub_1ACC0241C(v15, v12, v13, v14);
      goto LABEL_445;
    case 206:
      v143 = sub_1ACC0241C((uint64_t *)a5, 45, *(_QWORD *)(v10 - 40), *(_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 40) = v143;
      goto LABEL_262;
    case 207:
      v144 = sub_1ACC0241C((uint64_t *)a5, 171, *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 64) = v144;
      goto LABEL_264;
    case 208:
      v143 = sub_1ACC0241C((uint64_t *)a5, 45, *(_QWORD *)(v10 - 112), *(_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 112) = v143;
LABEL_262:
      sub_1ACC045D0(a5, *(_BYTE **)(v10 + 8), v143, 50);
      goto LABEL_445;
    case 209:
      v144 = sub_1ACC0241C((uint64_t *)a5, 171, *(_QWORD *)(v10 - 88), *(_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 - 88) = v144;
LABEL_264:
      sub_1ACC045D0(a5, *(_BYTE **)(v10 + 8), v144, 51);
      goto LABEL_445;
    case 210:
    case 211:
      v23 = *(_WORD *)(v10 - 22);
      goto LABEL_268;
    case 212:
      if (*(_WORD *)(v10 - 22) == 106)
        LOBYTE(v23) = -82;
      else
        LOBYTE(v23) = -83;
LABEL_268:
      v142 = *(_QWORD *)(v10 + 8);
LABEL_269:
      *(_QWORD *)(v10 - 16) = sub_1ACC0241C((uint64_t *)a5, v23, v142, 0);
      goto LABEL_445;
    case 213:
      v145 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 - 40));
      v146 = sub_1ACB6E054((uint64_t *)a5, v145, *(unsigned __int8 **)(v10 + 8));
      *(_QWORD *)(v10 - 40) = sub_1ACB8DD70((uint64_t)a5, v146, (_DWORD *)(v10 - 16), 0);
      goto LABEL_445;
    case 216:
      v147 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 - 40));
      v148 = sub_1ACB6E054((uint64_t *)a5, v147, *(unsigned __int8 **)(v10 + 8));
      v149 = sub_1ACC0241C((uint64_t *)a5, 48, *(_QWORD *)(v10 - 88), 0);
      *(_QWORD *)(v10 - 88) = v149;
      if (v149)
      {
        *(_QWORD *)(v149 + 32) = v148;
      }
      else if (v148)
      {
        sub_1ACC010B0(*a5, v148);
      }
      goto LABEL_441;
    case 219:
      v150 = *(_QWORD *)(v10 - 16);
      if (!v150)
      {
        sub_1ACC04624(a5, *(unsigned __int8 **)(v10 - 88));
        if (*(_DWORD *)(v10 - 64))
          v217 = "true";
        else
          v217 = "false";
        v218 = sub_1ACC03524((uint64_t)*a5, 117, v217);
        *(_QWORD *)(v10 - 88) = v218;
        if (v218)
          sub_1ACC026B8(v218);
        goto LABEL_445;
      }
      if (*(_DWORD *)v150 != 1)
        goto LABEL_434;
      v151 = *(unsigned __int8 **)(v150 + 8);
      if (sub_1ACC046A4((uint64_t)v151))
      {
        v152 = *(_QWORD *)(v10 - 16);
        if (**(unsigned __int8 **)(v10 - 88) != 177)
        {
          *(_QWORD *)(v152 + 8) = 0;
          v153 = *(_QWORD **)(v10 - 16);
          if (v153)
            sub_1ACC010B0(*a5, v153);
          v154 = sub_1ACC0241C((uint64_t *)a5, 174, (uint64_t)v151, 0);
          *(_QWORD *)(v10 - 88) = sub_1ACC0241C((uint64_t *)a5, 53, *(_QWORD *)(v10 - 88), v154);
          goto LABEL_441;
        }
      }
      else
      {
        v152 = *(_QWORD *)(v10 - 16);
      }
      if (*(_DWORD *)v152 == 1 && *v151 == 138)
      {
        v226 = sub_1ACC0241C((uint64_t *)a5, 49, *(_QWORD *)(v10 - 88), 0);
        *(_QWORD *)(v10 - 88) = v226;
        sub_1ACC046F8(a5, v226, *((_QWORD *)v151 + 4), v227, v228, v229, v230, v231);
        *((_QWORD *)v151 + 4) = 0;
        goto LABEL_438;
      }
LABEL_434:
      v232 = sub_1ACC0241C((uint64_t *)a5, 49, *(_QWORD *)(v10 - 88), 0);
      *(_QWORD *)(v10 - 88) = v232;
      if (!v232)
      {
LABEL_438:
        v253 = *(_QWORD **)(v10 - 16);
        if (v253)
          sub_1ACC010B0(*a5, v253);
        goto LABEL_441;
      }
      v239 = *(unsigned __int8 **)(v232 + 16);
      if (*v239 == 177)
      {
        v240 = sub_1ACC04730(a5, **((_DWORD **)v239 + 4), *(int **)(v10 - 16), v234, v235, v236, v237, v238);
        if (v240)
        {
          v247 = (uint64_t)v240;
          sub_1ACC031DC((uint64_t)a5, (uint64_t)v240, v241, v242, v243, v244, v245, v246, v257);
          sub_1ACC046F8(a5, *(_QWORD *)(v10 - 88), v247, v248, v249, v250, v251, v252);
        }
      }
      else
      {
        *(_QWORD *)(v232 + 32) = *(_QWORD *)(v10 - 16);
        sub_1ACC04890(a5, *(_QWORD *)(v10 - 88), v233, v234, v235, v236, v237, v238);
      }
LABEL_441:
      if (!*(_DWORD *)(v10 - 64))
        goto LABEL_445;
LABEL_442:
      v225 = *(_QWORD *)(v10 - 88);
      v223 = (uint64_t *)a5;
      v224 = 19;
      v106 = 0;
LABEL_443:
      v53 = sub_1ACC0241C(v223, v224, v225, v106);
LABEL_444:
      *(_QWORD *)(v10 - 88) = v53;
LABEL_445:
      v254 = word_1ACCB9FAE[v8];
      v255 = (unsigned __int16 *)(v10 + 24 * byte_1ACCB72DC[v8]);
      result = word_1ACCB8AC8[word_1ACCBA45E[*v255] + v254];
      v255[12] = result;
      v255 += 12;
      *a1 = (uint64_t)v255;
      v255[1] = v254;
      return result;
    case 220:
      v155 = sub_1ACC0241C((uint64_t *)a5, 138, 0, 0);
      *(_QWORD *)(v10 - 40) = v155;
      goto LABEL_291;
    case 221:
      v161 = sub_1ACC0241C((uint64_t *)a5, 49, *(_QWORD *)(v10 - 88), 0);
      *(_QWORD *)(v10 - 88) = v161;
      v167 = *(_QWORD *)(v10 - 16);
      v168 = a5;
      goto LABEL_288;
    case 222:
      v169 = (int *)sub_1ACB6E384((uint64_t *)a5, 0, v10 - 40, v10 - 16, (uint64_t)a5, a6, a7, a8);
      v170 = sub_1ACB6E848(a5, 0, v169, 0, 0, 0, 0, 0, 0);
      v171 = v170;
      v172 = *(_QWORD **)(v10 + 8);
      if (v172)
      {
        if (v170)
          v173 = v169;
        else
          v173 = 0;
        sub_1ACC037A0(a5, v173, v172);
      }
      v161 = sub_1ACC0241C((uint64_t *)a5, 49, *(_QWORD *)(v10 - 88), 0);
      *(_QWORD *)(v10 - 88) = v161;
      v168 = a5;
      v167 = (uint64_t)v171;
LABEL_288:
      sub_1ACC046F8(v168, v161, v167, v162, v163, v164, v165, v166);
      if (!*(_DWORD *)(v10 - 64))
        goto LABEL_445;
      goto LABEL_442;
    case 223:
      v155 = sub_1ACC0241C((uint64_t *)a5, 20, 0, 0);
      *(_QWORD *)(v10 - 64) = v155;
LABEL_291:
      sub_1ACC046F8(a5, v155, *(_QWORD *)(v10 - 16), v156, v157, v158, v159, v160);
      goto LABEL_445;
    case 224:
      v174 = sub_1ACC0241C((uint64_t *)a5, 157, *(_QWORD *)(v10 - 64), 0);
      *(_QWORD *)(v10 - 88) = v174;
      if (v174)
      {
        v180 = *(unsigned __int8 **)(v10 - 16);
        v181 = *(int **)(v10 - 40);
        if (v180)
        {
          v181 = sub_1ACB6E054((uint64_t *)a5, v181, v180);
          v174 = *(_QWORD *)(v10 - 88);
        }
        *(_QWORD *)(v174 + 32) = v181;
        sub_1ACC04890(a5, *(_QWORD *)(v10 - 88), (uint64_t)v180, v175, v176, v177, v178, v179);
      }
      else
      {
        v219 = *(_QWORD **)(v10 - 40);
        if (v219)
          sub_1ACC010B0(*a5, v219);
        v220 = *(unsigned __int8 **)(v10 - 16);
        if (v220)
          sub_1ACBF8348(*a5, v220);
      }
      goto LABEL_445;
    case 225:
      v182 = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 88), *(unsigned __int8 **)(v10 - 40));
      *(_QWORD *)(v10 - 88) = v182;
      *(_QWORD *)(v10 - 88) = sub_1ACB6E054((uint64_t *)a5, v182, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 226:
      v183 = (int *)sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 - 40));
      *(_QWORD *)(v10 - 64) = v183;
      *(_QWORD *)(v10 - 64) = sub_1ACB6E054((uint64_t *)a5, v183, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 231:
      *(_QWORD *)(v10 - 40) = sub_1ACB6E054((uint64_t *)a5, *(int **)(v10 - 40), *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 232:
      *(_QWORD *)(v10 + 8) = sub_1ACC2D490(*a5, *(unsigned __int8 **)(v10 + 8));
      goto LABEL_445;
    case 235:
      v184 = (_QWORD *)sub_1ACB6E384((uint64_t *)a5, 0, v10 - 88, 0, (uint64_t)a5, a6, a7, a8);
      sub_1ACB8BA04(a5, v10 - 160, v10 - 136, v184, *(_QWORD *)(v10 - 40), *(unsigned int *)(v10 - 232), v10 - 256, *(_QWORD *)(v10 + 8), 0, *(_DWORD *)(v10 - 184), 0);
      if (*((unsigned __int8 *)a5 + 302) >= 2u)
      {
        v185 = a5[44];
        if (v185)
          sub_1ACC037D8((uint64_t)a5, *v185, (_OWORD *)(v10 - 88));
      }
      goto LABEL_445;
    case 236:
    case 278:
      *(_DWORD *)(v10 + 8) = 2;
      goto LABEL_445;
    case 237:
      *(_DWORD *)(v10 + 32) = 0;
      goto LABEL_445;
    case 240:
      *(_QWORD *)(v10 - 88) = sub_1ACC04A14((uint64_t *)a5, *(int **)(v10 - 88), v10 - 40, *(unsigned int *)(v10 - 16), *(unsigned int *)(v10 + 8), a6, a7, a8);
      goto LABEL_445;
    case 241:
      *(_QWORD *)(v10 - 40) = sub_1ACC04A14((uint64_t *)a5, 0, v10 - 40, *(unsigned int *)(v10 - 16), *(unsigned int *)(v10 + 8), a6, a7, a8);
      goto LABEL_445;
    case 244:
      sub_1ACC04B00((uint64_t)a5, *(_QWORD *)(v10 + 8), *(_DWORD *)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 245:
      sub_1ACC04F44((uint64_t)a5, 0, *(unsigned __int8 **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 246:
      sub_1ACC04F44((uint64_t)a5, v10 - 16, *(unsigned __int8 **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 249:
      v186 = v10 - 16;
      v187 = v10 + 8;
      v188 = (uint64_t)a5;
      v189 = 0;
      goto LABEL_313;
    case 250:
      v186 = v10 - 64;
      v187 = v10 - 40;
      v189 = v10 + 8;
      goto LABEL_312;
    case 251:
      v186 = v10 - 88;
      v187 = v10 - 64;
      v189 = v10 - 16;
LABEL_312:
      v188 = (uint64_t)a5;
LABEL_313:
      sub_1ACB604EC(v188, v186, v187, v189, 0, a6, a7, a8, v257);
      goto LABEL_445;
    case 252:
      v190 = v10 - 64;
      v191 = v10 - 40;
      v192 = v10 + 8;
      goto LABEL_316;
    case 253:
      v190 = v10 - 88;
      v191 = v10 - 64;
      v192 = v10 - 16;
LABEL_316:
      sub_1ACB604EC((uint64_t)a5, v190, v191, v192, 1, a6, a7, a8, v257);
      goto LABEL_445;
    case 256:
      *((_QWORD *)&v258[0] + 1) = 0;
      *(_QWORD *)&v258[0] = *(_QWORD *)(v10 - 64);
      DWORD2(v258[0]) = *(_DWORD *)(v10 + 16) + *(_DWORD *)(v10 + 8) - LODWORD(v258[0]);
      sub_1ACB8E61C((uint64_t)a5, *(_QWORD *)(v10 - 16), (uint64_t)v258, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 257:
      v193 = (_OWORD *)(v10 - 232);
      sub_1ACB8CDB0(a5, v10 - 160, v10 - 136, *(unsigned int *)(v10 - 112), *(unsigned int *)(v10 - 88), *(_QWORD **)(v10 - 80), *(_QWORD *)(v10 - 40), *(_QWORD *)(v10 + 8), *(_DWORD *)(v10 - 232), *(_DWORD *)(v10 - 184));
      if (*(_DWORD *)(v10 - 128))
        *v193 = *(_OWORD *)(v10 - 136);
      else
        *v193 = *(_OWORD *)(v10 - 160);
      goto LABEL_445;
    case 258:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      goto LABEL_445;
    case 259:
      *(_DWORD *)(v10 - 16) = 65;
      goto LABEL_445;
    case 260:
      *(_DWORD *)(v10 + 32) = 33;
      goto LABEL_445;
    case 261:
    case 262:
      *(_DWORD *)(v10 + 8) = *(unsigned __int16 *)(v10 + 2);
      *(_QWORD *)(v10 + 16) = 0;
      goto LABEL_445;
    case 263:
      *(_DWORD *)(v10 - 40) = 129;
      *(_QWORD *)(v10 - 32) = *(_QWORD *)(v10 + 8);
      goto LABEL_445;
    case 266:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 - 40) + 88) + 80) = *(_QWORD *)(v10 - 16);
      *(_QWORD *)(*(_QWORD *)(v10 - 40) + 88) = *(_QWORD *)(v10 - 16);
      goto LABEL_445;
    case 267:
      *(_QWORD *)(*(_QWORD *)(v10 - 16) + 88) = *(_QWORD *)(v10 - 16);
      goto LABEL_445;
    case 268:
      *(_OWORD *)(v10 - 40) = *(_OWORD *)(v10 + 8);
      v194 = "qualified table names are not allowed on INSERT, UPDATE, and DELETE statements within triggers";
      goto LABEL_329;
    case 269:
      v194 = "the INDEXED BY clause is not allowed on UPDATE or DELETE statements within triggers";
      goto LABEL_329;
    case 270:
      v194 = "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements within triggers";
LABEL_329:
      sub_1ACBCB308((uint64_t)a5, v194, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 271:
      *(_QWORD *)(v10 - 184) = sub_1ACB8E514((uint64_t)a5, v10 - 136, *(int **)(v10 - 40), *(_QWORD **)(v10 - 64), *(unsigned __int8 **)(v10 - 16), *(_BYTE *)(v10 - 160), *(unsigned __int8 **)(v10 - 184), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 272:
      *(_QWORD *)(v10 - 160) = sub_1ACC05170((uint64_t)a5, v10 - 88, *(_QWORD **)(v10 - 64), *(_QWORD *)(v10 - 40), *(_BYTE *)(v10 - 136), *(unsigned int ***)(v10 - 16), *(unsigned __int8 **)(v10 - 160), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 273:
      *(_QWORD *)(v10 - 112) = sub_1ACC052F8((uint64_t)a5, v10 - 64, *(unsigned __int8 **)(v10 - 16), *(unsigned __int8 **)(v10 - 112), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 274:
      *(_QWORD *)(v10 - 40) = sub_1ACC05390(*a5, *(_QWORD *)(v10 - 16), *(unsigned __int8 **)(v10 - 40), *(_QWORD *)(v10 + 8));
      goto LABEL_445;
    case 275:
      v195 = sub_1ACC0241C((uint64_t *)a5, 71, 0, 0);
      *(_QWORD *)(v10 - 64) = v195;
      if (v195)
        *(_BYTE *)(v195 + 1) = 4;
      goto LABEL_445;
    case 276:
      v196 = sub_1ACB6DDF8((uint64_t)*a5, 71, v10 - 16, 1);
      *(_QWORD *)(v10 - 112) = v196;
      if (v196)
        *(_BYTE *)(v196 + 1) = *(_DWORD *)(v10 - 64);
      goto LABEL_445;
    case 277:
      *(_DWORD *)(v10 + 8) = 1;
      goto LABEL_445;
    case 279:
      *(_DWORD *)(v10 + 8) = 3;
      goto LABEL_445;
    case 280:
      sub_1ACC054D0((uint64_t *)a5, *(_QWORD **)(v10 + 8), *(unsigned int *)(v10 - 16), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 281:
      sub_1ACC36060((uint64_t)a5, 24, (uint64_t)&unk_1E5C746D0, *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 - 64), *(_QWORD *)(v10 - 16), *(_QWORD *)(v10 + 8), a8);
      goto LABEL_445;
    case 282:
      sub_1ACC36060((uint64_t)a5, 25, (uint64_t)&unk_1E5C74798, *(_QWORD *)(v10 + 8), 0, 0, *(_QWORD *)(v10 + 8), a8);
      goto LABEL_445;
    case 285:
      sub_1ACC0587C((uint64_t *)a5, 0, 0, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 286:
      sub_1ACC0587C((uint64_t *)a5, v10 - 16, v10 + 8, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 287:
      sub_1ACC05FE8((uint64_t)a5, 0, 0, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 288:
      sub_1ACC05FE8((uint64_t)a5, v10 - 16, v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 289:
      sub_1ACC06498((uint64_t)a5, *(_QWORD *)(v10 - 64), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 290:
      *(_DWORD *)(v10 - 8) = *((_DWORD *)a5 + 72) + *((_DWORD *)a5 + 70) - *(_DWORD *)(v10 - 16);
      sub_1ACC068C8((uint64_t)a5, v10 - 16, a3, a4, (uint64_t)a5, a6, a7, a8, v257);
      goto LABEL_445;
    case 291:
      sub_1ACC06EAC((uint64_t)a5, *(_QWORD *)(v10 - 64), v10 + 8, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 292:
      v197 = (uint64_t)*a5;
      ++*((_BYTE *)a5 + 36);
      ++*(_DWORD *)(v197 + 432);
      *(_WORD *)(v197 + 436) = 0;
      sub_1ACC075A8(a5, *(_QWORD *)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 293:
      sub_1ACC078A0((uint64_t *)a5, *(_QWORD *)(v10 - 112), v10 - 40, v10 + 8, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 294:
      sub_1ACC07CDC((uint64_t)a5, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 295:
      sub_1ACC07CDC((uint64_t)a5, (_DWORD *)(v10 + 8), a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 296:
      sub_1ACC08290((uint64_t)a5, (_OWORD *)(v10 - 64), v10 - 40, v10 + 8, *(unsigned int *)(v10 - 88), a6, a7, a8);
      goto LABEL_445;
    case 297:
      sub_1ACC084E4((uint64_t)a5);
      goto LABEL_445;
    case 298:
    case 299:
    case 300:
      v16 = a5[47];
      v17 = *(_QWORD **)(v10 + 8);
      if (v16)
      {
        v18 = (_DWORD)v17 + *(_DWORD *)(v10 + 16) - (_DWORD)v16;
      }
      else
      {
        a5[47] = v17;
        v18 = *(_DWORD *)(v10 + 16);
      }
      *((_DWORD *)a5 + 96) = v18;
      goto LABEL_445;
    case 301:
    case 302:
      sub_1ACC08564((uint64_t *)a5, *(_QWORD **)(v10 + 8), 1);
      goto LABEL_445;
    case 303:
      *(_BYTE *)(v10 + 8) = 1;
      goto LABEL_445;
    case 304:
      *(_BYTE *)(v10 - 16) = 0;
      goto LABEL_445;
    case 305:
      *(_BYTE *)(v10 - 40) = 2;
      goto LABEL_445;
    case 306:
      *(_QWORD *)(v10 - 112) = sub_1ACC085EC((uint64_t *)a5, v10 - 112, *(_QWORD **)(v10 - 88), *(_QWORD *)(v10 - 16), *(_BYTE *)(v10 - 64));
      goto LABEL_445;
    case 307:
      *(_QWORD *)(v10 + 8) = sub_1ACC0874C((uint64_t *)a5, 0, *(_QWORD **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 308:
      *(_QWORD *)(v10 - 40) = sub_1ACC0874C((uint64_t *)a5, *(_DWORD **)(v10 - 40), *(_QWORD **)(v10 + 8), a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_445;
    case 309:
      sub_1ACC08940((uint64_t *)a5, *(_QWORD **)(v10 + 8), *(_QWORD *)(v10 - 40), a4, (uint64_t)a5, a6, a7, a8);
      *(_QWORD *)(*(_QWORD *)(v10 + 8) + 64) = *(_QWORD *)(v10 - 40);
LABEL_363:
      *(_QWORD *)(v10 - 40) = *(_QWORD *)(v10 + 8);
      goto LABEL_445;
    case 310:
      v198 = *(_QWORD *)(v10 - 16);
      if (!v198)
        goto LABEL_367;
      **(_QWORD **)(v10 - 16) = sub_1ACB653C0((uint64_t)*a5, *(const void **)(v10 - 88), *(unsigned int *)(v10 - 80));
      goto LABEL_366;
    case 311:
      v199 = *(_QWORD **)(v10 + 8);
      v200 = *(_QWORD **)(v10 - 40);
      v201 = *(_QWORD **)(v10 - 16);
      v202 = (uint64_t *)a5;
      v203 = v199;
      v204 = 0;
      goto LABEL_373;
    case 312:
      v205 = *(_QWORD **)(v10 + 8);
      sub_1ACC08A6C((uint64_t *)a5, v205, *(_QWORD **)(v10 - 40), *(_QWORD **)(v10 - 16), v10 - 112);
      *(_QWORD *)(v10 - 112) = v205;
      goto LABEL_445;
    case 313:
      v206 = *(_QWORD *)(v10 + 8);
      v207 = *(_QWORD **)(v10 - 16);
      if (v206)
      {
        *(_QWORD *)(v206 + 16) = 0;
        *(_QWORD *)(v206 + 24) = v207;
        *(_QWORD *)(v10 - 64) = v206;
      }
      else
      {
        if (v207)
          sub_1ACC010B0(*a5, v207);
        *(_QWORD *)(v10 - 64) = 0;
      }
      goto LABEL_445;
    case 314:
      v199 = *(_QWORD **)(v10 + 8);
      v201 = *(_QWORD **)(v10 - 16);
      v204 = v10 - 88;
      v202 = (uint64_t *)a5;
      v203 = v199;
      v200 = 0;
LABEL_373:
      sub_1ACC08A6C(v202, v203, v200, v201, v204);
      *(_QWORD *)(v10 - 88) = v199;
      goto LABEL_445;
    case 315:
      v208 = *(_QWORD **)(v10 + 8);
      sub_1ACC08A6C((uint64_t *)a5, v208, 0, 0, v10 - 16);
      *(_QWORD *)(v10 - 16) = v208;
      goto LABEL_445;
    case 316:
      *(_QWORD *)(v10 + 32) = sub_1ACC08B10((uint64_t *)a5, 0, 90, 0, 85, 0, 0, a8);
      goto LABEL_445;
    case 317:
      *(_QWORD *)(v10 - 40) = sub_1ACC08B10((uint64_t *)a5, *(_DWORD *)(v10 - 40), *(unsigned int *)(v10 - 16), *(unsigned __int8 **)(v10 - 8), 85, 0, *(unsigned __int8 *)(v10 + 8), a8);
      goto LABEL_445;
    case 318:
      *(_QWORD *)(v10 - 112) = sub_1ACC08B10((uint64_t *)a5, *(_DWORD *)(v10 - 112), *(unsigned int *)(v10 - 64), *(unsigned __int8 **)(v10 - 56), *(unsigned int *)(v10 - 16), *(unsigned __int8 **)(v10 - 8), *(unsigned __int8 *)(v10 + 8), a8);
      goto LABEL_445;
    case 321:
    case 323:
    case 325:
      *(_QWORD *)(v10 - 16) = *(unsigned __int16 *)(v10 - 22);
      *(_QWORD *)(v10 - 8) = 0;
      goto LABEL_445;
    case 324:
      v209 = *(_QWORD *)(v10 - 16);
      *(_QWORD *)(v10 - 16) = *(unsigned __int16 *)(v10 + 2);
      *(_QWORD *)(v10 - 8) = v209;
      goto LABEL_445;
    case 326:
      *(_BYTE *)(v10 + 32) = 0;
      goto LABEL_445;
    case 327:
      *(_BYTE *)(v10 - 16) = *(_BYTE *)(v10 + 8);
      goto LABEL_445;
    case 328:
    case 329:
      *(_BYTE *)(v10 - 16) = *(_BYTE *)(v10 - 22);
      goto LABEL_445;
    case 330:
      *(_BYTE *)(v10 + 8) = *(_BYTE *)(v10 + 2);
      goto LABEL_445;
    case 332:
      v210 = *(_QWORD *)(v10 + 8);
      v211 = *(unsigned __int8 **)(v10 - 16);
      if (v210)
      {
        *(_QWORD *)(v210 + 72) = v211;
      }
      else if (v211)
      {
        sub_1ACBF8348(*a5, v211);
      }
LABEL_419:
      *(_QWORD *)(v10 - 16) = *(_QWORD *)(v10 + 8);
      goto LABEL_445;
    case 334:
      v212 = sub_1ACB5733C((uint64_t)*a5, 0x90uLL);
      if (v212)
      {
        v212[32] = -90;
        *((_QWORD *)v212 + 9) = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = v212;
      }
      else
      {
        v221 = *(unsigned __int8 **)(v10 + 8);
        if (v221)
          sub_1ACBF8348(*a5, v221);
        *(_QWORD *)(v10 + 8) = 0;
      }
      goto LABEL_445;
    case 335:
      *(_QWORD *)(v10 - 64) = *(_QWORD *)(v10 - 16);
      goto LABEL_445;
    case 336:
      v213 = sub_1ACB5733C((uint64_t)*a5, 0x90uLL);
      *(_QWORD *)(v10 - 16) = v213;
      if (v213)
        **(_QWORD **)(v10 - 16) = sub_1ACB653C0((uint64_t)*a5, *(const void **)(v10 + 8), *(unsigned int *)(v10 + 16));
      goto LABEL_445;
    case 337:
LABEL_366:
      v198 = *(_QWORD *)(v10 - 16);
LABEL_367:
      *(_QWORD *)(v10 - 88) = v198;
      goto LABEL_445;
    default:
      goto LABEL_445;
  }
}

void sub_1ACB604EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  char *v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const void *v28;
  size_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int i;
  uint64_t v41;
  int v42;
  const char *v43;
  const void *v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  int j;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD, uint64_t, char *, char *, const char *, _QWORD);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  int v63;
  int v64;
  int v65;
  char **v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  char **v70;
  uint64_t k;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t);
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  const char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int v117;
  _DWORD *v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  _BOOL4 v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t m;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char **v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  sqlite3 *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int16x8_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  unsigned int *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t n;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int (*v315)(void);
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  _BYTE *v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *nn;
  char v337;
  uint64_t v338;
  int v339;
  int8x8_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t i2;
  char **v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  char v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t i3;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  char **v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  __int16 v382;
  uint64_t v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  sqlite3 *v393;
  uint64_t v394;
  unsigned __int8 *v395;
  char *i4;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  _QWORD *v406;
  unsigned __int8 **v407;
  unsigned __int8 *v408;
  char *i5;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned __int8 *v413;
  unint64_t v414;
  char *v415;
  uint64_t i6;
  uint64_t v417;
  uint64_t v418;
  uint64_t i7;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  const char *v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  char *v441;
  char *v442;
  uint64_t v443;
  char v444;
  uint64_t v445;
  char v446;
  _QWORD *ii;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _DWORD *v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  _QWORD *i1;
  uint64_t v472;
  __int16 v473;
  uint64_t v474;
  __int16 v475;
  int v476;
  uint64_t v477;
  void *v478;
  uint64_t v479;
  unsigned __int8 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  const char *v486;
  char *i8;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned int v492;
  int v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  _BYTE *v498;
  uint64_t v499;
  uint64_t v500;
  char v501;
  int v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  const char *v507;
  uint64_t v508;
  const char *v509;
  char *i9;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  const char *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  unsigned int v545;
  uint64_t v546;
  _QWORD *v547;
  int v548;
  int v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  _DWORD *v553;
  uint64_t v554;
  _QWORD *kk;
  uint64_t v556;
  uint64_t v557;
  _DWORD *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  BOOL v565;
  int v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char *v586;
  _QWORD *v587;
  char *v588;
  uint64_t v589;
  BOOL v590;
  int v591;
  BOOL v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unsigned __int8 *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int16x8_t v624;
  uint64_t v625;
  char *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int32x4_t v636;
  uint64_t v637;
  int32x4_t v638;
  int8x16_t v639;
  int8x8_t v640;
  int8x8_t v641;
  int16x4_t v642;
  int16x4_t v643;
  __int16 *v644;
  uint64_t v645;
  __int16 v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  int v668;
  char *v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  char *v673;
  uint64_t v674;
  unsigned __int8 *v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  _BOOL4 v679;
  _BOOL4 v680;
  uint64_t v681;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  unsigned int v687;
  uint64_t v688;
  _DWORD *v689;
  uint64_t v690;
  uint64_t mm;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  void *v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  int v707;
  char *v708;
  uint64_t v709;
  int v710;
  int v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  int v721;
  void *v722;
  uint64_t v723;
  int v724;
  int v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int16x8_t v733;
  int v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  int v745;
  _QWORD *v746;
  _QWORD *v747;
  _QWORD *v748;
  int v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  void *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  int v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  int v803;
  char *v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  uint64_t v816;
  char *v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  uint64_t v822;
  int v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  uint64_t v835;
  char *v836;
  int v837;
  int v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  int v842;
  int v843;
  uint64_t v844;
  int v845;
  uint64_t v846;
  int v847;
  char *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  char *v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  uint64_t v860;
  char *v861;
  uint64_t *v862;
  char *v863;
  int v864;
  int v865;
  uint64_t v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  int v872;
  int v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int v881;
  uint64_t v882;
  char *v883;
  int v884;
  uint64_t v885;
  unsigned int *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unsigned int v893;
  unsigned int v894;
  uint64_t v895;
  char v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  char *v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t jj;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  char v926;
  char v927;
  int v928;
  uint64_t v929;
  uint64_t v930;
  unsigned int v931;
  uint64_t v932;
  unsigned int v933;
  _QWORD *v934;
  unsigned int v935;
  _QWORD *v936;
  uint64_t *v937;
  int v938;
  int v939;
  uint64_t v940;
  unsigned __int8 *v941;
  unsigned int v942;
  _BOOL4 v943;
  unsigned int v944;
  int v945;
  unsigned int v946;
  unsigned int v947;
  int v948;
  int v949;
  unsigned int v950;
  unsigned int v951;
  char *v952;
  char *zDbName;
  char *zDbNamea;
  char *zDbNameb;
  sqlite3 *v956;
  char *__s;
  unsigned int v958;
  uint64_t v959;
  int v960;
  int v961;
  _QWORD *v962;
  uint64_t v963;
  uint64_t v964;
  _QWORD *v965;
  _QWORD *v966[5];
  __int128 v967;
  __int128 v968;
  uint64_t v969;

  v9 = a5;
  v10 = (char *)a4;
  v969 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)a1;
  v963 = *(_QWORD *)(a1 + 16);
  if (!v963)
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(v14 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v963 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v963)
      return;
  }
  v967 = 0u;
  v968 = 0u;
  v15 = *(_DWORD *)(v963 + 144);
  if (*(_DWORD *)(v963 + 148) <= v15)
  {
    sub_1ACBFF5AC(v963, 166, 1, 1, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v963 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v963 + 136) + 40 * v15;
    *(_DWORD *)v16 = 166;
    *(_QWORD *)(v16 + 4) = 0x100000001;
    *(_QWORD *)(v16 + 12) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_QWORD *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 36) = 0;
  }
  *(_DWORD *)(a1 + 56) = 2;
  v17 = *(_QWORD *)a1;
  if (*(_DWORD *)(a3 + 8))
  {
    if (*(_BYTE *)(v17 + 197))
    {
      sub_1ACBCB308(a1, "corrupt database", a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    v18 = sub_1ACC0DF84(v17, a2);
    v19 = a3;
    if ((v18 & 0x80000000) != 0)
    {
      sub_1ACBCB308(a1, "unknown database %T", v20, v21, v22, v23, v24, v25, a2);
      return;
    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(v17 + 196);
    v19 = a2;
  }
  v26 = *(_QWORD *)(v14 + 32);
  if ((_DWORD)v18 == 1)
  {
    v27 = sub_1ACBE9418(a1);
    if (!v19 || v27)
      return;
  }
  else if (!v19)
  {
    return;
  }
  v28 = *(const void **)v19;
  if (!*(_QWORD *)v19)
    return;
  v29 = *(unsigned int *)(v19 + 8);
  v30 = (char *)sub_1ACBE1124(v14, v29 + 1);
  if (!v30)
    return;
  v31 = v30;
  memcpy(v30, v28, v29);
  v31[v29] = 0;
  v38 = *v31;
  if ((char)byte_1ACCB6548[*v31] < 0)
  {
    v39 = 0;
    if (v38 == 91)
      v38 = 93;
    for (i = 1; ; ++i)
    {
      v41 = i;
      v42 = v31[i];
      if (v42 == v38)
      {
        ++i;
        LOBYTE(v42) = v38;
        if (v31[v41 + 1] != v38)
          break;
      }
      v31[v39++] = v42;
    }
    v31[v39] = 0;
  }
  if (v9)
  {
    v10 = (char *)sub_1ACB6DDD0(v14, "-%T", v32, v33, v34, v35, v36, v37, (char)v10);
  }
  else if (v10)
  {
    v44 = *(const void **)v10;
    if (*(_QWORD *)v10)
    {
      v45 = *((unsigned int *)v10 + 2);
      v46 = (char *)sub_1ACBE1124(v14, v45 + 1);
      v10 = v46;
      if (v46)
      {
        memcpy(v46, v44, v45);
        v10[v45] = 0;
        v47 = *v10;
        if ((char)byte_1ACCB6548[*v10] < 0)
        {
          v48 = 0;
          if (v47 == 91)
            v47 = 93;
          for (j = 1; ; ++j)
          {
            v50 = j;
            v51 = v10[j];
            if (v51 == v47)
            {
              ++j;
              LOBYTE(v51) = v47;
              if (v10[v50 + 1] != v47)
                break;
            }
            v10[v48++] = v51;
          }
          v10[v48] = 0;
        }
      }
    }
    else
    {
      v10 = 0;
    }
  }
  v956 = (sqlite3 *)v14;
  __s = v10;
  v952 = v31;
  if (*(_DWORD *)(a3 + 8))
    v43 = *(const char **)(v26 + 32 * v18);
  else
    v43 = 0;
  v52 = *(_QWORD *)a1;
  v53 = *(uint64_t (**)(_QWORD, uint64_t, char *, char *, const char *, _QWORD))(*(_QWORD *)a1 + 528);
  if (v53 && !*(_BYTE *)(v52 + 197) && !*(_BYTE *)(a1 + 302))
  {
    v88 = v53(*(_QWORD *)(v52 + 536), 19, v31, v10, v43, *(_QWORD *)(a1 + 368));
    if (v88 == 1)
    {
      v95 = 23;
      v96 = "not authorized";
    }
    else
    {
      if ((v88 & 0xFFFFFFFD) == 0)
      {
        if (v88)
          goto LABEL_1081;
        goto LABEL_49;
      }
      v95 = 1;
      v96 = "authorizer malfunction";
    }
    sub_1ACBCB308(a1, v96, v89, v90, v91, v92, v93, v94, v926);
    *(_DWORD *)(a1 + 24) = v95;
    goto LABEL_1081;
  }
LABEL_49:
  *(_QWORD *)&v967 = 0;
  *((_QWORD *)&v967 + 1) = v31;
  v968 = (unint64_t)v10;
  *((_DWORD *)v956 + 172) = 0;
  v54 = sqlite3_file_control(v956, v43, 14, &v967);
  if (v54)
  {
    v63 = v54;
    if (v54 != 12)
    {
      if ((_QWORD)v967)
      {
        sub_1ACBCB308(a1, "%s", v56, v57, v58, v59, v60, v61, v967);
        sqlite3_free((void *)v967);
      }
      ++*(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = v63;
      goto LABEL_1081;
    }
    v64 = 0;
    v65 = 73;
    v66 = &off_1E5C73BA0;
    while (1)
    {
      v67 = v65 + v64;
      v68 = v65 + v64 < 0 != __OFADD__(v65, v64) ? v67 + 1 : v65 + v64;
      v69 = (uint64_t)v68 >> 1;
      v70 = &(&off_1E5C73BA0)[3 * (v68 >> 1)];
      if (*v70)
        break;
      v72 = 1;
LABEL_63:
      if (v72 >= 0)
        v64 = v69 + 1;
      else
        v65 = v69 - 1;
      if (v64 > v65)
        goto LABEL_1081;
    }
    for (k = 0; ; ++k)
    {
      v73 = v31[k];
      v74 = (*v70)[k];
      if ((_DWORD)v73 == (_DWORD)v74)
      {
        if (!v31[k])
        {
          v82 = *((_BYTE *)&off_1E5C73BA0 + 24 * (int)v69 + 9);
          if ((v82 & 1) != 0)
          {
            v83 = sub_1ACBFFB88((uint64_t *)a1, v55, v56, v57, v58, v59, v60, v61);
            v66 = &off_1E5C73BA0;
            if (v83)
              goto LABEL_1081;
          }
          zDbName = (char *)v43;
          if ((v82 & 2) == 0 && ((v82 & 4) == 0 || !__s))
          {
            sub_1ACC34728((uint64_t *)v963, (uint64_t)v70);
            v66 = &off_1E5C73BA0;
          }
          v84 = (uint64_t)v956;
          switch(LOBYTE((&off_1E5C73BA0)[3 * (int)v69 + 1]))
          {
            case 0:
              v966[0] = 0;
              if (__s
                && !sub_1ACBD3BF4(__s, (unint64_t *)v966)
                && ((unint64_t)v966[0] & 0x8000000000000000) == 0)
              {
                *((_DWORD *)v956 + 192) = (uint64_t)v966[0] & 0x7FFFFFFF;
              }
              v85 = *((int *)v956 + 192);
              goto LABEL_476;
            case 1:
              v97 = (int)(&off_1E5C73BA0)[3 * (int)v69 + 2];
              sub_1ACBCB690((_DWORD *)v963, v18);
              if (__s && (v67 > 0x2F || ((1 << v67) & 0xC00030000000) == 0))
              {
                v532 = sub_1ACB9FF74(v963, 2, (uint64_t)&unk_1ACCBA42B, v98, v99, v100, v101, v102);
                *(_DWORD *)(v532 + 4) = v18;
                *(_DWORD *)(v532 + 44) = v18;
                *(_DWORD *)(v532 + 48) = v97;
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                *(_DWORD *)(v532 + 52) = v966[0];
                *(_WORD *)(v532 + 42) = 1;
                v590 = v97 == 1;
                v84 = (uint64_t)v956;
                v116 = v952;
                if (v590 && (*((_BYTE *)v956 + 51) & 0x10) != 0)
                  *(_BYTE *)(v532 + 40) = -72;
                goto LABEL_634;
              }
              v103 = (_DWORD *)sub_1ACB9FF74(v963, 3, (uint64_t)&unk_1ACCBA433, v98, v99, v100, v101, v102);
              v103[1] = v18;
              v103[11] = v18;
              v103[13] = v97;
              v104 = *(unsigned int *)(v963 + 144);
              if ((int)v104 < 2)
                goto LABEL_1081;
              v105 = *(_QWORD *)(v963 + 136);
              v106 = v104 - 1;
              v107 = (unsigned __int8 *)(v105 + 40);
              do
              {
                v108 = *v107;
                v107 += 40;
                if (v108 == 166)
                  goto LABEL_534;
                --v106;
              }
              while (v106);
              goto LABEL_1081;
            case 2:
              v109 = *(_QWORD *)(v26 + 32 * v18 + 8);
              if (!__s)
              {
                v460 = sub_1ACBFE8E0(v109);
                goto LABEL_559;
              }
              v110 = sub_1ACC349CC((unsigned __int8 *)__s);
              *((_BYTE *)v956 + 106) = v110;
              v116 = v952;
              if (!sub_1ACBFE820(v109, v110) && (v110 - 1) <= 1)
              {
                v117 = *(_DWORD *)(v963 + 144);
                v118 = (_DWORD *)sub_1ACB9FF74(v963, 5, (uint64_t)&unk_1ACCBA3F5, v111, v112, v113, v114, v115);
                v118[1] = v18;
                v118[11] = v18;
                v119 = v117 + 4;
                v116 = v952;
                v118[22] = v119;
                v118[41] = v18;
                v118[43] = v110 - 1;
                sub_1ACBCB690((_DWORD *)v963, v18);
              }
              goto LABEL_634;
            case 3:
              if (!__s)
              {
                sub_1ACC34728((uint64_t *)v963, (uint64_t)v70);
                v460 = ((unint64_t)(&off_1E5C73BA0)[3 * (int)v69 + 2] & *((_QWORD *)v956 + 6)) != 0;
                v461 = v963;
                goto LABEL_560;
              }
              if (*((_BYTE *)v956 + 101))
                v120 = (unint64_t)(&off_1E5C73BA0)[3 * (int)v69 + 2];
              else
                v120 = (unint64_t)(&off_1E5C73BA0)[3 * (int)v69 + 2] & 0xFFFFFFFFFFFFBFFFLL;
              if (sub_1ACC34DB4(__s, 1, 0))
              {
                *((_QWORD *)v956 + 6) |= v120;
                goto LABEL_699;
              }
              *((_QWORD *)v956 + 6) &= ~v120;
              if (v120 == 0x80000)
              {
                *((_QWORD *)v956 + 101) = 0;
                goto LABEL_699;
              }
              if ((v120 & 1) == 0)
                goto LABEL_699;
              v533 = "reset";
              v534 = __s;
              while (2)
              {
                v535 = *v534;
                v536 = *(unsigned __int8 *)v533;
                if ((_DWORD)v535 == (_DWORD)v536)
                {
                  if (!*v534)
                  {
                    sub_1ACBC4F54((uint64_t)v956);
                    goto LABEL_699;
                  }
                }
                else if (byte_1ACCB6333[v535] != byte_1ACCB6333[v536])
                {
LABEL_699:
                  sub_1ACC08CD4(v963, 166, v121, v122, v123, v124, v125, v126);
                  sub_1ACC34AC8((uint64_t)v956);
                  goto LABEL_1081;
                }
                ++v534;
                ++v533;
                continue;
              }
            case 5:
              if (__s)
              {
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                v127 = v26 + 32 * v18;
                v128 = *(_QWORD *)(v127 + 24);
                *(_DWORD *)(v128 + 116) = v966[0];
                sub_1ACBE9680(*(_QWORD *)(v127 + 8), (_DWORD *)(v128 + 116));
                goto LABEL_633;
              }
              v460 = *(int *)(*(_QWORD *)(v26 + 32 * v18 + 24) + 116);
              goto LABEL_559;
            case 6:
              if (__s)
              {
                LODWORD(v966[0]) = 1;
                v129 = sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                v130 = (int)v966[0];
                if (!LODWORD(v966[0]))
                {
                  LODWORD(v966[0]) = 1;
                  v130 = 1;
                }
                sub_1ACBE9A60(*(_QWORD *)(v26 + 32 * v18 + 8), v130);
                if (v129 || sub_1ACC34DB4(__s, 1, 1u))
                  v131 = *((_QWORD *)v956 + 6) | 0x20;
                else
                  v131 = *((_QWORD *)v956 + 6) & 0xFFFFFFFFFFFFFFDFLL;
                *((_QWORD *)v956 + 6) = v131;
                v116 = v952;
                goto LABEL_361;
              }
              if ((*((_BYTE *)v956 + 48) & 0x20) == 0)
                goto LABEL_584;
              v462 = (int)sub_1ACBE9A60(*(_QWORD *)(v26 + 32 * v18 + 8), 0);
              goto LABEL_585;
            case 7:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v132 = sub_1ACC34DB4(__s, 1, 0) != 0;
              sub_1ACC35168((uint64_t)v956, v132);
              goto LABEL_634;
            case 8:
              *(_DWORD *)(a1 + 56) = 2;
              v133 = (_QWORD *)*((_QWORD *)v956 + 81);
              if (v133)
              {
                v134 = 0;
                do
                {
                  v135 = (v134 + 1);
                  sub_1ACC34EE4(v963, 1, (uint64_t)"is", v57, v58, v59, v60, v61, v134);
                  v133 = (_QWORD *)*v133;
                  v134 = v135;
                }
                while (v133);
              }
              goto LABEL_1081;
            case 9:
              v136 = 0;
              *(_DWORD *)(a1 + 56) = 1;
              do
              {
                v137 = off_1E5C754F8[v136];
                if (!v137)
                  break;
                sub_1ACBA86CC((uint64_t *)v963, 117, 0, 1, 0, (uint64_t)v137, 0, v61);
                sub_1ACBFF554(v963, 84, 1, 1, v138, v139, v140, v141);
                ++v136;
              }
              while (v136 != 69);
              v142 = *(unsigned int *)(v963 + 144);
              if ((int)v142 < 2)
                goto LABEL_1081;
              v105 = *(_QWORD *)(v963 + 136);
              v143 = v142 - 1;
              v144 = (unsigned __int8 *)(v105 + 40);
              while (1)
              {
                v145 = *v144;
                v144 += 40;
                if (v145 == 166)
                  break;
                if (!--v143)
                  goto LABEL_1081;
              }
LABEL_534:
              *(_BYTE *)(v105 + 40) = -72;
              goto LABEL_1081;
            case 0xB:
              *(_DWORD *)(a1 + 56) = 3;
              v146 = *((_DWORD *)v956 + 10);
              if (v146 >= 1)
              {
                v147 = 0;
                for (m = 0; m < v146; ++m)
                {
                  if (*(_QWORD *)(*((_QWORD *)v956 + 4) + v147 + 8))
                  {
                    sub_1ACC34EE4(v963, 1, (uint64_t)"iss", v57, v58, v59, v60, v61, m);
                    v146 = *((_DWORD *)v956 + 10);
                  }
                  v147 += 32;
                }
              }
              goto LABEL_1081;
            case 0xC:
              sub_1ACBCB690((_DWORD *)v963, v18);
              if (!__s)
              {
                *(_DWORD *)(a1 + 56) += 2;
                v463 = (_DWORD *)sub_1ACB9FF74(v963, 9, (uint64_t)&unk_1ACCBA3D1, v150, v151, v152, v153, v154);
                v463[1] = v18;
                v463[11] = v18;
                v463[61] = 128;
                v116 = v952;
                goto LABEL_684;
              }
              LODWORD(v966[0]) = 0;
              sub_1ACBFD07C((unsigned __int8 *)__s, v966);
              if (LODWORD(v966[0]) == 0x80000000)
                v155 = 0x7FFFFFFF;
              else
                v155 = -LODWORD(v966[0]);
              if (SLODWORD(v966[0]) >= 0)
                v156 = LODWORD(v966[0]);
              else
                v156 = v155;
              sub_1ACC0DDF0(a1, 0, v18);
              sub_1ACB683F4(v963, 100, v18, 3, v156, v157, v158, v159);
              v160 = v26 + 32 * v18;
              v161 = *(_QWORD *)(v160 + 24);
              *(_DWORD *)(v161 + 116) = v156;
              sub_1ACBE9680(*(_QWORD *)(v160 + 8), (_DWORD *)(v161 + 116));
              goto LABEL_633;
            case 0xD:
              if (__s)
              {
                v116 = v952;
                if ((*((_BYTE *)v956 + 44) & 0x40) != 0)
                  goto LABEL_634;
                v162 = 0;
                v163 = &off_1E5C74620;
                while (1)
                {
                  v164 = __s[v162];
                  v165 = aUtf8_0[v162];
                  if ((_DWORD)v164 == (_DWORD)v165)
                  {
                    if (!__s[v162])
                    {
LABEL_1057:
                      v893 = *((unsigned __int8 *)v163 + 8);
                      if (v893)
                        v894 = v893;
                      else
                        v894 = 2;
                      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v84 + 32) + 24) + 113) = v894;
                      sub_1ACBFC560(v84, v894);
                      goto LABEL_1081;
                    }
                  }
                  else if (byte_1ACCB6333[v164] != byte_1ACCB6333[v165])
                  {
                    v166 = 0;
                    v163 = &off_1E5C74630;
                    while (1)
                    {
                      v167 = __s[v166];
                      v168 = aUtf8[v166];
                      if ((_DWORD)v167 == (_DWORD)v168)
                      {
                        if (!__s[v166])
                        {
LABEL_1056:
                          v84 = (uint64_t)v956;
                          goto LABEL_1057;
                        }
                      }
                      else if (byte_1ACCB6333[v167] != byte_1ACCB6333[v168])
                      {
                        v169 = 0;
                        v163 = &off_1E5C74640;
                        while (1)
                        {
                          v170 = __s[v169];
                          v171 = aUtf16le[v169];
                          if ((_DWORD)v170 == (_DWORD)v171)
                          {
                            if (!__s[v169])
                              goto LABEL_1056;
                          }
                          else if (byte_1ACCB6333[v170] != byte_1ACCB6333[v171])
                          {
                            v172 = 0;
                            v163 = &off_1E5C74650;
                            while (1)
                            {
                              v449 = __s[v172];
                              v450 = aUtf16be[v172];
                              if ((_DWORD)v449 == (_DWORD)v450)
                              {
                                if (!__s[v172])
                                  goto LABEL_1056;
                              }
                              else if (byte_1ACCB6333[v449] != byte_1ACCB6333[v450])
                              {
                                v451 = 0;
                                v163 = &off_1E5C74660;
                                while (1)
                                {
                                  v495 = __s[v451];
                                  v496 = aUtf16le_0[v451];
                                  if ((_DWORD)v495 == (_DWORD)v496)
                                  {
                                    if (!__s[v451])
                                      goto LABEL_1056;
                                  }
                                  else if (byte_1ACCB6333[v495] != byte_1ACCB6333[v496])
                                  {
                                    v497 = 0;
                                    v163 = &off_1E5C74670;
                                    while (1)
                                    {
                                      v521 = __s[v497];
                                      v522 = aUtf16be_0[v497];
                                      if ((_DWORD)v521 == (_DWORD)v522)
                                      {
                                        if (!__s[v497])
                                          goto LABEL_1056;
                                      }
                                      else if (byte_1ACCB6333[v521] != byte_1ACCB6333[v522])
                                      {
                                        v523 = 0;
                                        v163 = &off_1E5C74680;
                                        while (1)
                                        {
                                          v888 = __s[v523];
                                          v889 = aUtf16[v523];
                                          if ((_DWORD)v888 == (_DWORD)v889)
                                          {
                                            if (!__s[v523])
                                              goto LABEL_1056;
                                          }
                                          else if (byte_1ACCB6333[v888] != byte_1ACCB6333[v889])
                                          {
                                            v890 = 0;
                                            v163 = &off_1E5C74690;
                                            while (1)
                                            {
                                              v891 = __s[v890];
                                              v892 = aUtf16_0[v890];
                                              if ((_DWORD)v891 == (_DWORD)v892)
                                              {
                                                if (!__s[v890])
                                                  goto LABEL_1056;
                                              }
                                              else if (byte_1ACCB6333[v891] != byte_1ACCB6333[v892])
                                              {
                                                sub_1ACBCB308(a1, "unsupported encoding: %s", v56, v57, v58, v59, v60, v61, (char)__s);
                                                goto LABEL_1081;
                                              }
                                              ++v890;
                                            }
                                          }
                                          ++v523;
                                        }
                                      }
                                      ++v497;
                                    }
                                  }
                                  ++v451;
                                }
                              }
                              ++v172;
                            }
                          }
                          ++v169;
                        }
                      }
                      ++v166;
                    }
                  }
                  ++v162;
                }
              }
              v116 = v952;
              if (sub_1ACBFFB88((uint64_t *)a1, v55, v56, v57, v58, v59, v60, v61))
                goto LABEL_684;
              v464 = (&off_1E5C74620)[2 * *(unsigned __int8 *)(*(_QWORD *)a1 + 100)];
              goto LABEL_683;
            case 0xE:
              v965 = 0;
              v966[0] = 0;
              v173 = *(_DWORD *)(a1 + 56);
              v174 = (v173 + 5);
              *(_DWORD *)(a1 + 56) = v174;
              v175 = __s;
              v176 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v18 + 24) + 16);
              if (!v176)
                goto LABEL_1081;
              v944 = v173 + 2;
              v946 = v173 + 1;
              v942 = v173 + 3;
              do
              {
                while (1)
                {
                  if (v175)
                  {
                    v177 = sub_1ACB8D488(a1, 0, v175, zDbName, v58, v59, v60, v61);
                    v176 = 0;
                  }
                  else
                  {
                    v177 = v176[2];
                    v176 = (_QWORD *)*v176;
                  }
                  if (v177 && !*(_BYTE *)(v177 + 63) && *(_QWORD *)(v177 + 72))
                    break;
                  if (!v176)
                    goto LABEL_1081;
                }
                v936 = v176;
                v178 = *(_QWORD *)(v177 + 96);
                v179 = *(_QWORD *)(v84 + 32);
                if (v178)
                {
                  v180 = (uint64_t *)(v179 + 24);
                  LODWORD(v181) = -1;
                  do
                  {
                    v182 = *v180;
                    v180 += 4;
                    v181 = (v181 + 1);
                  }
                  while (v182 != v178);
                }
                else
                {
                  v181 = 4294934528;
                }
                zDbName = *(char **)(v179 + 32 * (int)v181);
                sub_1ACB7A4DC(a1, v181);
                sub_1ACC08EA0(a1, v181, *(_DWORD *)(v177 + 40), 0, *(_QWORD *)v177);
                v186 = v174 + *(__int16 *)(v177 + 54);
                if (*(_DWORD *)(a1 + 56) < v186)
                  *(_DWORD *)(a1 + 56) = v186;
                sub_1ACB7A514((_QWORD *)a1, 0, v181, v177, 112, v183, v184, v185);
                sub_1ACBA86CC((uint64_t *)v963, 117, 0, v946, 0, *(_QWORD *)v177, 0, v187);
                v193 = *(_QWORD *)(v177 + 72);
                if (v193)
                {
                  v194 = 1;
                  v195 = zDbName;
                  while (1)
                  {
                    v196 = sub_1ACBD1B0C((uint64_t)v956, *(char **)(v193 + 16), v195);
                    if (v196)
                    {
                      v197 = v196;
                      v966[0] = 0;
                      sub_1ACC08EA0(a1, v181, *(_DWORD *)(v196 + 40), 0, *(_QWORD *)v196);
                      if (sub_1ACC2F2B4((_QWORD **)a1, v197, v193, v966, 0, v198, v199, v200))
                        goto LABEL_1081;
                      v204 = v966[0];
                      if (v966[0])
                      {
                        sub_1ACB683F4(v963, 112, v194, *((unsigned int *)v966[0] + 22), v181, v201, v202, v203);
                        sub_1ACC08ECC(a1, (uint64_t)v204);
                      }
                      else
                      {
                        sub_1ACB7A514((_QWORD *)a1, v194, v181, v197, 112, v201, v202, v203);
                      }
                      v195 = zDbName;
                    }
                    v194 = (v194 + 1);
                    v193 = *(_QWORD *)(v193 + 8);
                    if (!v193)
                      goto LABEL_205;
                  }
                }
                LODWORD(v194) = 1;
LABEL_205:
                if (*(_DWORD *)(a1 + 52) < (int)v194)
                  *(_DWORD *)(a1 + 52) = v194;
                v938 = sub_1ACC08D28(v963, 36, 0, v188, v189, v190, v191, v192);
                v209 = *(_QWORD *)(v177 + 72);
                v210 = zDbName;
                v211 = v956;
                if (v209)
                {
                  v212 = 1;
                  do
                  {
                    v958 = v212;
                    v217 = sub_1ACBD1B0C((uint64_t)v211, *(char **)(v209 + 16), v210);
                    v965 = 0;
                    v966[0] = 0;
                    if (v217)
                      sub_1ACC2F2B4((_QWORD **)a1, v217, v209, v966, (uint64_t *)&v965, v214, v215, v216);
                    v219 = *(_DWORD *)(a1 + 68);
                    v220 = (v219 - 1);
                    *(_DWORD *)(a1 + 68) = v220;
                    v221 = *(unsigned int *)(v209 + 40);
                    if (*(_DWORD *)(a1 + 56) < (int)v221 + (int)v174)
                      *(_DWORD *)(a1 + 56) = v221 + v174;
                    v949 = v219;
                    if ((int)v221 >= 1)
                    {
                      v940 = v217;
                      v222 = 0;
                      v223 = 0;
                      v224 = (unsigned int *)(v209 + 64);
                      do
                      {
                        if (v965)
                          v226 = (unsigned int *)((char *)v965 + v222);
                        else
                          v226 = v224;
                        *(double *)v218.i64 = sub_1ACC0B288(v963, v177, 0, *v226, v174 + v223, v214, v215, v216, v218);
                        v227 = *(_DWORD *)(v963 + 144);
                        if (*(_DWORD *)(v963 + 148) > v227)
                        {
                          *(_DWORD *)(v963 + 144) = v227 + 1;
                          v225 = *(_QWORD *)(v963 + 136) + 40 * v227;
                          *(_DWORD *)v225 = 50;
                          *(_DWORD *)(v225 + 4) = v174 + v223;
                          *(_DWORD *)(v225 + 8) = v220;
                          *(_QWORD *)(v225 + 12) = 0;
                          *(_QWORD *)(v225 + 28) = 0;
                          *(_QWORD *)(v225 + 20) = 0;
                          *(_DWORD *)(v225 + 36) = 0;
                        }
                        else
                        {
                          sub_1ACBFF5AC(v963, 50, v174 + v223, v220, 0, v214, v215, v216);
                        }
                        ++v223;
                        v221 = *(int *)(v209 + 40);
                        v222 += 4;
                        v224 += 4;
                      }
                      while (v223 < v221);
                      v210 = zDbName;
                      v211 = v956;
                      v217 = v940;
                    }
                    if (v966[0])
                    {
                      v228 = v966[0][4];
                      v229 = v221;
                      if (!v228)
                      {
                        v228 = sub_1ACC27860((uint64_t)v211, (uint64_t)v966[0]);
                        v229 = *(unsigned int *)(v209 + 40);
                      }
                      v230 = v963;
                      sub_1ACBA86CC((uint64_t *)v963, 96, v174, v221, 0, v228, v229, v216);
                      v231 = v958;
                      sub_1ACBCB640(v963, 29, v958, v220, v174, *(unsigned int *)(v209 + 40), v232, v233);
                    }
                    else
                    {
                      v230 = v963;
                      v231 = v958;
                      if (v217)
                      {
                        sub_1ACB683F4(v963, 30, v958, (*(_DWORD *)(v963 + 144) + 2), v174, v214, v215, v216);
                        sub_1ACC08E48(v963, v220, v234, v235, v236, v237, v238, v239);
                      }
                    }
                    if ((*(_DWORD *)(v177 + 48) & 0x80) != 0)
                      v240 = 75;
                    else
                      v240 = 135;
                    sub_1ACBFF554(v230, v240, 0, v944, v213, v214, v215, v216);
                    sub_1ACC34EE4(v230, v942, (uint64_t)"siX", v241, v242, v243, v244, v245, *(_QWORD *)(v209 + 16));
                    v246 = *(_DWORD *)(v230 + 144);
                    if (*(_DWORD *)(v230 + 148) <= v246)
                    {
                      sub_1ACBFF5AC(v230, 84, v946, 4, 0, v206, v207, v208);
                    }
                    else
                    {
                      *(_DWORD *)(v230 + 144) = v246 + 1;
                      v247 = *(_QWORD *)(v230 + 136) + 40 * v246;
                      *(_DWORD *)v247 = 84;
                      *(_DWORD *)(v247 + 4) = v946;
                      *(_DWORD *)(v247 + 8) = 4;
                      *(_QWORD *)(v247 + 12) = 0;
                      *(_QWORD *)(v247 + 28) = 0;
                      *(_QWORD *)(v247 + 20) = 0;
                      *(_DWORD *)(v247 + 36) = 0;
                    }
                    v248 = *(_QWORD *)(v230 + 24);
                    v249 = -v949;
                    if (*(_DWORD *)(v248 + 68) + *(_DWORD *)(v248 + 72) < 0)
                      sub_1ACC0D5D4(v248, v230, v249);
                    else
                      *(_DWORD *)(*(_QWORD *)(v248 + 80) + 4 * v249) = *(_DWORD *)(v230 + 144);
                    if (v965)
                      sub_1ACBE0F9C(v211, v965);
                    v212 = v231 + 1;
                    v209 = *(_QWORD *)(v209 + 8);
                  }
                  while (v209);
                }
                sub_1ACBFF554(v963, 39, 0, (v938 + 1), v205, v206, v207, v208);
                v250 = &byte_1EECAD280;
                if (!*(_BYTE *)(*(_QWORD *)v963 + 103))
                  v250 = (char *)(*(_QWORD *)(v963 + 136) + 40 * v938);
                *((_DWORD *)v250 + 2) = *(_DWORD *)(v963 + 144);
                v84 = (uint64_t)v956;
                v175 = __s;
                v176 = v936;
              }
              while (v936);
              goto LABEL_1081;
            case 0xF:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v251 = sub_1ACBD1B0C((uint64_t)v956, __s, zDbName);
              if (!v251)
                goto LABEL_634;
              if (*(_BYTE *)(v251 + 63))
                goto LABEL_634;
              v252 = *(_QWORD *)(v251 + 72);
              if (!v252)
                goto LABEL_634;
              v253 = *(_QWORD *)(v251 + 96);
              if (v253)
              {
                v254 = (uint64_t *)(*((_QWORD *)v956 + 4) + 24);
                v255 = -1;
                do
                {
                  v256 = *v254;
                  v254 += 4;
                  ++v255;
                }
                while (v256 != v253);
              }
              else
              {
                v255 = -32768;
              }
              *(_DWORD *)(a1 + 56) = 8;
              sub_1ACB7A4DC(a1, v255);
              v908 = 0;
              do
              {
                if (*(int *)(v252 + 40) >= 1)
                {
                  v909 = 0;
                  v910 = v252 + 72;
                  do
                  {
                    v910 += 16;
                    sub_1ACC34EE4(v963, 1, (uint64_t)"iissssss", v903, v904, v905, v906, v907, v908);
                    ++v909;
                  }
                  while (v909 < *(int *)(v252 + 40));
                }
                v908 = (v908 + 1);
                v252 = *(_QWORD *)(v252 + 8);
              }
              while (v252);
              goto LABEL_1081;
            case 0x10:
              v257 = 0;
              v258 = (*((_DWORD *)v956 + 11) >> 5) & 1;
              *(_DWORD *)(a1 + 56) = 6;
              do
              {
                v959 = v257;
                for (n = *((_QWORD *)&xmmword_1ECD3E990 + v257); n; n = *(_QWORD *)(n + 64))
                {
                  v260 = n;
                  do
                  {
                    if (*(_QWORD *)(v260 + 24) && ((_DWORD)v258 || (*(_DWORD *)(v260 + 4) & 0x40000) == 0))
                      sub_1ACC34EE4(v963, 1, (uint64_t)"sissii", v57, v58, v59, v60, v61, *(_QWORD *)(v260 + 56));
                    v260 = *(_QWORD *)(v260 + 16);
                  }
                  while (v260);
                }
                v257 = v959 + 1;
              }
              while (v959 != 22);
              for (ii = (_QWORD *)*((_QWORD *)v956 + 78); ii; ii = (_QWORD *)*ii)
                sub_1ACC35068(v963, ii[2], 0, v258, v58, v59, v60, v61);
              goto LABEL_1081;
            case 0x11:
              v966[0] = 0;
              if (__s)
              {
                if (!sub_1ACBD3BF4(__s, (unint64_t *)v966))
                {
                  v499 = sqlite3_hard_heap_limit64(-1);
                  if ((uint64_t)v966[0] >= 1 && (!v499 || v499 > (uint64_t)v966[0]))
                    sqlite3_hard_heap_limit64((uint64_t)v966[0]);
                }
              }
              v261 = sqlite3_hard_heap_limit64(-1);
              goto LABEL_353;
            case 0x12:
              LODWORD(v966[0]) = 0;
              if (!__s || !sub_1ACBFD07C((unsigned __int8 *)__s, v966) || SLODWORD(v966[0]) <= 0)
                LODWORD(v966[0]) = 0x7FFFFFFF;
              sub_1ACC0DDF0(a1, 0, v18);
              sub_1ACBFF554(v963, 71, LODWORD(v966[0]), 1, v262, v263, v264, v265);
              v271 = sub_1ACC08D28(v963, 62, v18, v266, v267, v268, v269, v270);
              sub_1ACC08D28(v963, 84, 1, v272, v273, v274, v275, v276);
              sub_1ACBFF554(v963, 86, 1, 0xFFFFFFFFLL, v277, v278, v279, v280);
              sub_1ACBFF554(v963, 59, 1, v271, v281, v282, v283, v284);
              if (*(_BYTE *)(*(_QWORD *)v963 + 103))
                dword_1EECAD288 = *(_DWORD *)(v963 + 144);
              else
                *(_DWORD *)(*(_QWORD *)(v963 + 136) + 40 * (int)v271 + 8) = *(_DWORD *)(v963 + 144);
              goto LABEL_1081;
            case 0x13:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v285 = sub_1ACBFCA9C((uint64_t)v956, (unsigned __int8 *)__s, (unsigned __int8 *)zDbName);
              v290 = v285;
              if (v285)
              {
                v291 = *(_QWORD *)(v285 + 48);
                if (v291)
                  goto LABEL_277;
              }
              else
              {
                v500 = sub_1ACB8D488(a1, 2, __s, zDbName, v286, v287, v288, v289);
                if (!v500)
                  goto LABEL_634;
                if ((*(_BYTE *)(v500 + 48) & 0x80) == 0)
                  goto LABEL_634;
                v290 = *(_QWORD *)(v500 + 16);
                if (!v290)
                  goto LABEL_634;
                while ((*(_WORD *)(v290 + 99) & 3) != 2)
                {
                  v290 = *(_QWORD *)(v290 + 40);
                  if (!v290)
                    goto LABEL_1081;
                }
                v84 = (uint64_t)v956;
                v291 = *(_QWORD *)(v290 + 48);
                if (v291)
                {
LABEL_277:
                  v292 = (uint64_t *)(*(_QWORD *)(v84 + 32) + 24);
                  v293 = -1;
                  do
                  {
                    v294 = *v292;
                    v292 += 4;
                    ++v293;
                  }
                  while (v294 != v291);
LABEL_1094:
                  v911 = (&off_1E5C73BA0)[3 * (int)v69 + 2];
                  if (v911)
                    v912 = 6;
                  else
                    v912 = 3;
                  v913 = 96;
                  if (!v911)
                    v913 = 94;
                  v914 = *(unsigned __int16 *)(v290 + v913);
                  *(_DWORD *)(a1 + 56) = v912;
                  sub_1ACB7A4DC(a1, v293);
                  if (v914)
                  {
                    for (jj = 0; jj != v914; ++jj)
                    {
                      sub_1ACC34EE4(v963, 1, (uint64_t)"iisX", v915, v916, v917, v918, v919, jj);
                      if (v911)
                        sub_1ACC34EE4(v963, 4, (uint64_t)"isiX", v921, v922, v923, v924, v925, *(unsigned __int8 *)(*(_QWORD *)(v290 + 56) + jj));
                      sub_1ACBFF554(v963, 84, 1, *(unsigned int *)(a1 + 56), v922, v923, v924, v925);
                    }
                  }
                  goto LABEL_1081;
                }
              }
              v293 = -32768;
              goto LABEL_1094;
            case 0x14:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v295 = sub_1ACBD1B0C((uint64_t)v956, __s, zDbName);
              if (!v295)
                goto LABEL_634;
              v296 = v295;
              v297 = *(_QWORD *)(v295 + 96);
              if (v297)
              {
                v298 = (uint64_t *)(*((_QWORD *)v956 + 4) + 24);
                v299 = -1;
                do
                {
                  v300 = *v298;
                  v298 += 4;
                  ++v299;
                }
                while (v300 != v297);
              }
              else
              {
                v299 = -32768;
              }
              *(_DWORD *)(a1 + 56) = 5;
              sub_1ACB7A4DC(a1, v299);
              v529 = *(_QWORD *)(v296 + 16);
              if (v529)
              {
                v530 = 0;
                do
                {
                  sub_1ACC34EE4(v963, 1, (uint64_t)"isisi", v524, v525, v526, v527, v528, v530);
                  v530 = (v530 + 1);
                  v529 = *(_QWORD *)(v529 + 40);
                }
                while (v529);
              }
              goto LABEL_1081;
            case 0x15:
              v301 = *v952;
              if (*(_QWORD *)a3)
                v302 = v18;
              else
                v302 = 0xFFFFFFFFLL;
              v929 = v302;
              *(_DWORD *)(a1 + 56) = 6;
              v303 = 100;
              LODWORD(v965) = 100;
              if (__s)
              {
                if (sub_1ACBFD07C((unsigned __int8 *)__s, &v965))
                {
                  v303 = (int)v965;
                  v304 = v963;
                  v305 = 0;
                  if ((int)v965 <= 0)
                  {
                    v303 = 100;
                    LODWORD(v965) = 100;
                  }
LABEL_709:
                  sub_1ACBFF554(v304, 71, (v303 - 1), 1, v58, v59, v60, v61);
                  if (v305)
                    v543 = 2;
                  else
                    v543 = 1;
                  v928 = v543;
                  if (*((int *)v956 + 10) < 1)
                  {
LABEL_1038:
                    v887 = sub_1ACB9FF74(v304, 7, (uint64_t)&unk_1ACCBA40F, v538, v539, v540, v541, v542);
                    if (v887)
                    {
                      *(_DWORD *)(v887 + 8) = 1 - (_DWORD)v965;
                      *(_BYTE *)(v887 + 81) = -1;
                      *(_QWORD *)(v887 + 96) = "ok";
                      *(_BYTE *)(v887 + 201) = -1;
                      *(_QWORD *)(v887 + 216) = "database disk image is malformed";
                    }
                    if (*(_BYTE *)(*(_QWORD *)v304 + 103))
                      dword_1EECAD28C = *(_DWORD *)(v304 + 144) - 2;
                    else
                      *(_DWORD *)(*(_QWORD *)(v304 + 136) + 12) = *(_DWORD *)(v304 + 144) - 2;
                    goto LABEL_1081;
                  }
                  v544 = 0;
                  v545 = v301 & 0xFFFFFFDF;
                  v932 = v305;
                  v931 = v301 & 0xFFFFFFDF;
                  while (1)
                  {
                    if ((v929 & 0x80000000) != 0 || v544 == v929)
                    {
                      sub_1ACB7A4DC(a1, v544);
                      *(_BYTE *)(a1 + 35) = 0;
                      v546 = *(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v544 + 24);
                      v547 = *(_QWORD **)(v546 + 16);
                      if (v547)
                      {
                        v548 = 0;
                        v549 = 0;
                        do
                        {
                          v551 = v547[2];
                          if (!v305 || v305 == v551)
                          {
                            v549 += ((*(_DWORD *)(v551 + 48) >> 7) & 1) == 0;
                            v552 = *(_QWORD *)(v551 + 16);
                            if (v552)
                            {
                              v550 = 0;
                              do
                              {
                                ++v550;
                                v552 = *(_QWORD *)(v552 + 40);
                              }
                              while (v552);
                              v549 += v550;
                            }
                            else
                            {
                              v550 = 0;
                            }
                            if (v550 > v548)
                              v548 = v550;
                          }
                          v547 = (_QWORD *)*v547;
                        }
                        while (v547);
                        if (v549)
                        {
                          v553 = (_DWORD *)sub_1ACBE1124((uint64_t)v956, 4 * (v549 + v928));
                          if (!v553)
                            goto LABEL_1038;
                          if (v305)
                          {
                            v553[1] = 0;
                            v554 = 1;
                          }
                          else
                          {
                            v554 = 0;
                          }
                          for (kk = *(_QWORD **)(v546 + 16); kk; kk = (_QWORD *)*kk)
                          {
                            v556 = kk[2];
                            if (!v305 || v305 == v556)
                            {
                              if ((*(_BYTE *)(v556 + 48) & 0x80) == 0)
                              {
                                v554 = (v554 + 1);
                                v553[(int)v554] = *(_DWORD *)(v556 + 40);
                              }
                              v557 = *(_QWORD *)(v556 + 16);
                              if (v557)
                              {
                                v558 = &v553[(int)v554 + 1];
                                do
                                {
                                  *v558++ = *(_DWORD *)(v557 + 88);
                                  v557 = *(_QWORD *)(v557 + 40);
                                  v554 = (v554 + 1);
                                }
                                while (v557);
                              }
                            }
                          }
                          *v553 = v554;
                          if (*(_DWORD *)(a1 + 56) < v548 + 8)
                            *(_DWORD *)(a1 + 56) = v548 + 8;
                          *(_BYTE *)(a1 + 31) = 0;
                          *(_DWORD *)(a1 + 40) = 0;
                          sub_1ACBA86CC((uint64_t *)v304, 155, 2, v554, 1, (uint64_t)v553, 4294967282, v542);
                          v564 = *(_DWORD *)(v304 + 144);
                          v565 = __OFSUB__(v564, 1);
                          v566 = v564 - 1;
                          if (v566 < 0 == v565)
                            *(_WORD *)(*(_QWORD *)(v304 + 136) + 40 * v566 + 2) = v544;
                          v567 = sub_1ACC08D28(v304, 50, 2, v559, v560, v561, v562, v563);
                          v574 = sub_1ACB6DDD0((uint64_t)v956, "*** in database %s ***\n", v568, v569, v570, v571, v572, v573, *(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v544));
                          sub_1ACBA86CC((uint64_t *)v304, 117, 0, 3, 0, (uint64_t)v574, 4294967290, v575);
                          sub_1ACB683F4(v304, 111, 2, 3, 3, v576, v577, v578);
                          sub_1ACC35274(v304, v579, v580, v581, v582, v583, v584, v585);
                          v586 = &byte_1EECAD280;
                          if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                            v586 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v567);
                          *((_DWORD *)v586 + 2) = *(_DWORD *)(v304 + 144);
                          v587 = *(_QWORD **)(v546 + 16);
                          if (v587)
                            break;
                        }
                      }
                    }
LABEL_714:
                    if (++v544 >= *((int *)v956 + 10))
                      goto LABEL_1038;
                  }
                  v930 = v544;
                  while (1)
                  {
                    v589 = v587[2];
                    v964 = 0;
                    if (v305)
                      v590 = v305 == v589;
                    else
                      v590 = 1;
                    v591 = v590;
                    if (*(_BYTE *)(v589 + 63))
                      v592 = 1;
                    else
                      v592 = v591 == 0;
                    if (v592)
                      goto LABEL_756;
                    v934 = v587;
                    if (v545 == 81)
                    {
                      zDbNameb = 0;
                      v935 = 0;
                      v593 = (uint64_t)v956;
                    }
                    else
                    {
                      v593 = (uint64_t)v956;
                      if ((*(_BYTE *)(v589 + 48) & 0x80) != 0)
                      {
                        v594 = v589 + 16;
                        do
                        {
                          v595 = *(_QWORD *)v594;
                          v596 = *(_WORD *)(*(_QWORD *)v594 + 99) & 3;
                          v594 = *(_QWORD *)v594 + 40;
                        }
                        while (v596 != 2);
                        v597 = v595;
                        v598 = sub_1ACC0A1AC(a1, *(unsigned __int16 *)(v595 + 94));
                        zDbNameb = (char *)v597;
                        v935 = v598;
                        sub_1ACB683F4(v304, 75, 1, v598, v598 + *(unsigned __int16 *)(v597 + 94) - 1, v599, v600, v601);
                      }
                      else
                      {
                        zDbNameb = 0;
                        v935 = 0;
                      }
                    }
                    sub_1ACB956A8(a1, v589, 112, 0, 1, 0, (_DWORD *)&v964 + 1, &v964);
                    sub_1ACBFF554(v304, 71, 0, 7, v602, v603, v604, v605);
                    v610 = *(_QWORD *)(v589 + 16);
                    v937 = (uint64_t *)(v589 + 16);
                    if (v610)
                    {
                      v611 = 8;
                      do
                      {
                        v613 = *(_DWORD *)(v963 + 144);
                        if (*(_DWORD *)(v963 + 148) > v613)
                        {
                          *(_DWORD *)(v963 + 144) = v613 + 1;
                          v612 = *(_QWORD *)(v963 + 136) + 40 * v613;
                          *(_QWORD *)v612 = 71;
                          *(_DWORD *)(v612 + 8) = v611;
                          *(_QWORD *)(v612 + 12) = 0;
                          *(_QWORD *)(v612 + 28) = 0;
                          *(_QWORD *)(v612 + 20) = 0;
                          *(_DWORD *)(v612 + 36) = 0;
                        }
                        else
                        {
                          sub_1ACBFF5AC(v963, 71, 0, v611, 0, v607, v608, v609);
                        }
                        v610 = *(_QWORD *)(v610 + 40);
                        v611 = (v611 + 1);
                      }
                      while (v610);
                    }
                    v304 = v963;
                    v947 = HIDWORD(v964);
                    sub_1ACBFF554(v963, 36, HIDWORD(v964), 0, v606, v607, v608, v609);
                    v933 = sub_1ACBFF554(v963, 86, 7, 1, v614, v615, v616, v617);
                    v625 = v589 + 16;
                    if ((*(_BYTE *)(v589 + 48) & 0x80) != 0)
                    {
                      do
                      {
                        v631 = *(_QWORD *)v625;
                        v632 = *(_WORD *)(*(_QWORD *)v625 + 99) & 3;
                        v625 = *(_QWORD *)v625 + 40;
                      }
                      while (v632 != 2);
                      v633 = *(unsigned __int16 *)(v631 + 96) - 1;
                      v626 = zDbNameb;
                    }
                    else
                    {
                      v626 = zDbNameb;
                      if (*(__int16 *)(v589 + 54) < 1)
                      {
                        v630 = -1;
                      }
                      else
                      {
                        v627 = *(unsigned __int16 *)(v589 + 54);
                        v628 = *(_QWORD *)(v589 + 8);
                        if (v627 >= 9)
                        {
                          v634 = v627 & 7;
                          if ((v627 & 7) == 0)
                            v634 = 8;
                          v629 = v627 - v634;
                          v635 = v628 + 78;
                          v636 = 0uLL;
                          v637 = v629;
                          v638 = (int32x4_t)xmmword_1ACCBDDE0;
                          v639.i64[0] = 0x100000001;
                          v639.i64[1] = 0x100000001;
                          do
                          {
                            v640.i32[0] = vzip1_s16(*(int16x4_t *)(v635 - 64), *(int16x4_t *)(v635 - 48)).u32[0];
                            v640.i32[1] = vext_s8(*(int8x8_t *)(v635 - 32), (int8x8_t)vzip1_s16(*(int16x4_t *)(v635 - 32), *(int16x4_t *)(v635 - 16)), 4uLL).i32[1];
                            v641 = vext_s8(*(int8x8_t *)(v635 + 32), (int8x8_t)vzip1_s16(*(int16x4_t *)(v635 + 32), *(int16x4_t *)(v635 + 48)), 4uLL);
                            v642 = *(int16x4_t *)(v635 + 16);
                            v643 = *(int16x4_t *)v635;
                            v635 += 128;
                            v642.i32[0] = vzip1_s16(v643, v642).u32[0];
                            v642.i32[1] = v641.i32[1];
                            v638 = vaddq_s32(v638, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8(v640, (int8x8_t)0x20002000200020))), v639));
                            v636 = vaddq_s32(v636, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v642, (int8x8_t)0x20002000200020))), v639));
                            v637 -= 8;
                          }
                          while (v637);
                          v624 = (int16x8_t)vaddq_s32(v636, v638);
                          v624.i32[0] = vaddvq_s32((int32x4_t)v624);
                          v630 = v624.i32[0];
                        }
                        else
                        {
                          v629 = 0;
                          v630 = -1;
                        }
                        v644 = (__int16 *)(v628 + 16 * v629 + 14);
                        v645 = v627 - v629;
                        do
                        {
                          v646 = *v644;
                          v644 += 8;
                          if ((v646 & 0x20) == 0)
                            ++v630;
                          --v645;
                        }
                        while (v645);
                      }
                      v633 = v630 - (v630 == *(__int16 *)(v589 + 52));
                    }
                    if ((v633 & 0x80000000) == 0)
                    {
                      sub_1ACB683F4(v963, 94, v947, v633, 3, v621, v622, v623);
                      sub_1ACC0D8FC(v963, 3);
                      v626 = zDbNameb;
                    }
                    v962 = (_QWORD *)v589;
                    if (v545 != 81 && v626)
                    {
                      v647 = sub_1ACBCB640(v963, 41, v947, 0, v935, *((unsigned __int16 *)v626 + 47), v622, v623);
                      sub_1ACC08D28(v963, 50, v935, v648, v649, v650, v651, v652);
                      v659 = sub_1ACB6DDD0(v593, "row not in PRIMARY KEY order for %s", v653, v654, v655, v656, v657, v658, *(_QWORD *)v589);
                      sub_1ACBA86CC((uint64_t *)v963, 117, 0, 3, 0, (uint64_t)v659, 4294967290, v660);
                      sub_1ACC35274(v963, v661, v662, v663, v664, v665, v666, v667);
                      v668 = *(_DWORD *)(v963 + 144);
                      if (*(_BYTE *)(*(_QWORD *)v963 + 103))
                      {
                        v669 = &byte_1EECAD280;
                        dword_1EECAD288 = *(_DWORD *)(v963 + 144);
                      }
                      else
                      {
                        v670 = *(_QWORD *)(v963 + 136) + 40 * v647;
                        *(_DWORD *)(v670 + 8) = v668;
                        v669 = (char *)(v670 + 40);
                      }
                      *((_DWORD *)v669 + 2) = v668;
                      v626 = zDbNameb;
                      if (*((_WORD *)zDbNameb + 47))
                      {
                        v671 = 0;
                        v672 = 8;
                        while (1)
                        {
                          v633 = *(__int16 *)(*((_QWORD *)v626 + 1) + 2 * v671);
                          if ((_DWORD)v633 == -2)
                            break;
                          v673 = v626;
                          *(double *)v624.i64 = sub_1ACC0B288(*(_QWORD *)(a1 + 16), *((_QWORD *)v626 + 3), v947, v633, v935 + v671, v621, v622, v623, v624);
LABEL_807:
                          ++v671;
                          v672 += 24;
                          v626 = v673;
                          if (v671 >= *((unsigned __int16 *)v673 + 47))
                            goto LABEL_817;
                        }
                        *(_DWORD *)(a1 + 64) = v947 + 1;
                        v618 = *(unsigned __int8 **)(*((_QWORD *)v626 + 10) + v672);
                        v674 = *(_QWORD *)a1;
                        if (v618)
                        {
                          v675 = (unsigned __int8 *)sub_1ACB8B290(*(_QWORD *)a1, v618, 0, 0);
                          if (!*(_BYTE *)(v674 + 103))
                            goto LABEL_811;
                        }
                        else
                        {
                          v675 = 0;
                          if (!*(_BYTE *)(v674 + 103))
LABEL_811:
                            sub_1ACC08D80(a1, v675, v935 + v671);
                        }
                        if (v675)
                          sub_1ACBF8348((_QWORD *)v674, v675);
                        *(_DWORD *)(a1 + 64) = 0;
                        v673 = zDbNameb;
                        v589 = (uint64_t)v962;
                        goto LABEL_807;
                      }
                    }
LABEL_817:
                    if (*(__int16 *)(v589 + 54) >= 1)
                    {
                      v676 = 0;
                      v677 = *(_DWORD *)(v589 + 48);
                      v939 = v677;
                      while (2)
                      {
                        if (v676 == *(__int16 *)(v589 + 52))
                          goto LABEL_821;
                        v678 = *(_QWORD *)(v589 + 8);
                        if ((v677 & 0x10000) != 0)
                        {
                          LODWORD(v681) = *(unsigned __int8 *)(v678 + 16 * v676 + 8);
                          v679 = v681 > 0x1F;
                          v680 = v679;
                        }
                        else
                        {
                          v679 = 0;
                          v681 = v678 + 16 * v676;
                          v680 = *(char *)(v681 + 9) > 65;
                          LOBYTE(v681) = *(_BYTE *)(v681 + 8);
                        }
                        if ((v681 & 0xF) == 0 && !v680)
                          goto LABEL_821;
                        v683 = v678 + 16 * v676;
                        v943 = v679;
                        if ((*(_WORD *)(v683 + 14) & 0x20) != 0)
                        {
                          v950 = 3;
                          sub_1ACC0B288(v963, v589, v947, v676, 3, v621, v622, v623, v624);
                          v685 = 5;
                          v688 = 0xFFFFFFFFLL;
                          goto LABEL_851;
                        }
                        v684 = *(unsigned __int16 *)(v678 + 16 * v676 + 12);
                        if (*(_WORD *)(v678 + 16 * v676 + 12)
                          && (v966[0] = 0, !*(_BYTE *)(v589 + 63))
                          && (v689 = *(_DWORD **)(v589 + 80)) != 0
                          && *v689 >= v684
                          && (v618 = *(unsigned __int8 **)&v689[6 * (v684 - 1) + 2]) != 0
                          && (sub_1ACC015D4((uint64_t)v956, v618, *((unsigned __int8 *)v956 + 100), *(unsigned __int8 *)(v678 + 16 * v676 + 9), (uint64_t *)v966), v966[0]))
                        {
                          v690 = byte_1ACCB6445[*((_WORD *)v966[0] + 10) & 0x3F];
                          sub_1ACBC6918(v966[0]);
                          v685 = v690;
                          if ((*(_BYTE *)(v589 + 48) & 0x80) != 0)
                          {
LABEL_841:
                            for (mm = *v937; mm; mm = *(_QWORD *)(mm + 40))
                            {
                              if ((*(_WORD *)(mm + 99) & 3) == 2)
                                break;
                            }
                            v692 = *(unsigned __int16 *)(mm + 96);
                            if (*(_WORD *)(mm + 96))
                            {
                              v693 = 0;
                              v694 = *(_QWORD *)(mm + 8);
                              while (*(unsigned __int16 *)(v694 + 2 * v693) != (unsigned __int16)v676)
                              {
                                if (v692 == ++v693)
                                  goto LABEL_848;
                              }
                            }
                            else
                            {
LABEL_848:
                              LOWORD(v693) = -1;
                            }
                            v950 = (__int16)v693;
LABEL_850:
                            v688 = v947;
LABEL_851:
                            v945 = *(_DWORD *)(a1 + 68);
                            v695 = (v945 - 2);
                            *(_DWORD *)(a1 + 68) = v695;
                            v941 = (unsigned __int8 *)(v683 + 8);
                            if ((*(_BYTE *)(v683 + 8) & 0xF) != 0)
                            {
                              v696 = *(_DWORD *)(v963 + 144);
                              if (*(_DWORD *)(v963 + 148) <= v696)
                              {
                                v698 = v685;
                                v696 = sub_1ACBFF7F0(v963, 18, v688, v695, v950, v685, v622, v623);
                              }
                              else
                              {
                                *(_DWORD *)(v963 + 144) = v696 + 1;
                                v697 = *(_QWORD *)(v963 + 136) + 40 * v696;
                                *(_DWORD *)v697 = 64786;
                                *(_DWORD *)(v697 + 4) = v688;
                                *(_DWORD *)(v697 + 8) = v695;
                                *(_DWORD *)(v697 + 12) = v950;
                                v698 = v685;
                                *(_DWORD *)(v697 + 16) = v685;
                                *(_QWORD *)(v697 + 24) = 0;
                                *(_QWORD *)(v697 + 32) = 0;
                              }
                              v699 = *(_DWORD *)(v963 + 144);
                              if ((v688 & 0x80000000) != 0)
                              {
                                v701 = v696;
                                if (v699 >= 1)
                                {
                                  *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * (v699 - 1) + 2) = 15;
                                  v701 = v696;
                                }
                              }
                              else
                              {
                                if (v699 >= 1)
                                  *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * (v699 - 1) + 2) = 13;
                                if (*(_DWORD *)(v963 + 148) <= v699)
                                {
                                  sub_1ACBFF5AC(v963, 94, v688, v950, 3, v685, v622, v623);
                                }
                                else
                                {
                                  *(_DWORD *)(v963 + 144) = v699 + 1;
                                  v700 = *(_QWORD *)(v963 + 136) + 40 * v699;
                                  *(_DWORD *)v700 = 94;
                                  *(_DWORD *)(v700 + 4) = v688;
                                  *(_DWORD *)(v700 + 8) = v950;
                                  *(_DWORD *)(v700 + 12) = 3;
                                  *(_QWORD *)(v700 + 24) = 0;
                                  *(_QWORD *)(v700 + 32) = 0;
                                  *(_QWORD *)(v700 + 16) = 0;
                                }
                                v701 = *(_DWORD *)(v963 + 144);
                                if (*(_DWORD *)(v963 + 148) <= v701)
                                {
                                  v701 = sub_1ACBFF5AC(v963, 51, 3, v695, 0, v685, v622, v623);
                                }
                                else
                                {
                                  *(_DWORD *)(v963 + 144) = v701 + 1;
                                  v702 = *(_QWORD *)(v963 + 136) + 40 * v701;
                                  *(_QWORD *)v702 = 0x300000033;
                                  *(_DWORD *)(v702 + 8) = v695;
                                  *(_QWORD *)(v702 + 12) = 0;
                                  *(_QWORD *)(v702 + 28) = 0;
                                  *(_QWORD *)(v702 + 20) = 0;
                                  *(_DWORD *)(v702 + 36) = 0;
                                }
                              }
                              v703 = sub_1ACB6DDD0((uint64_t)v956, "NULL value in %s.%s", v619, v633, v620, v685, v622, v623, *v962);
                              sub_1ACBA86CC((uint64_t *)v963, 117, 0, 3, 0, (uint64_t)v703, 4294967290, v704);
                              v685 = v698;
                              if (v680)
                              {
                                v633 = (v945 - 1);
                                v705 = *(_DWORD *)(v963 + 144);
                                if (*(_DWORD *)(v963 + 148) <= v705)
                                {
                                  sub_1ACBFF5AC(v963, 9, 0, v633, 0, v698, v622, v623);
                                  v685 = v698;
                                }
                                else
                                {
                                  *(_DWORD *)(v963 + 144) = v705 + 1;
                                  v706 = *(_QWORD *)(v963 + 136) + 40 * v705;
                                  *(_QWORD *)v706 = 9;
                                  *(_DWORD *)(v706 + 8) = v633;
                                  *(_QWORD *)(v706 + 12) = 0;
                                  *(_QWORD *)(v706 + 28) = 0;
                                  *(_QWORD *)(v706 + 20) = 0;
                                  *(_DWORD *)(v706 + 36) = 0;
                                }
                                v707 = *(_DWORD *)(v963 + 144);
                                if (*(_BYTE *)(*(_QWORD *)v963 + 103))
                                {
                                  v708 = &byte_1EECAD280;
                                  dword_1EECAD288 = *(_DWORD *)(v963 + 144);
                                }
                                else
                                {
                                  v709 = *(_QWORD *)(v963 + 136);
                                  *(_DWORD *)(v709 + 40 * v696 + 8) = v707;
                                  v708 = (char *)(v709 + 40 * v701);
                                }
                                *((_DWORD *)v708 + 2) = v707;
                              }
                            }
                            if (v943)
                            {
                              v710 = *(_DWORD *)(v963 + 144);
                              v589 = (uint64_t)v962;
                              v677 = v939;
                              v711 = v945;
                              if (*(_DWORD *)(v963 + 148) <= v710)
                              {
                                sub_1ACBFF7F0(v963, 18, v688, v695, v950, v685, v622, v623);
                              }
                              else
                              {
                                *(_DWORD *)(v963 + 144) = v710 + 1;
                                v712 = *(_QWORD *)(v963 + 136) + 40 * v710;
                                *(_DWORD *)v712 = 64786;
                                *(_DWORD *)(v712 + 4) = v688;
                                *(_DWORD *)(v712 + 8) = v695;
                                *(_DWORD *)(v712 + 12) = v950;
                                *(_DWORD *)(v712 + 16) = v685;
                                *(_QWORD *)(v712 + 24) = 0;
                                *(_QWORD *)(v712 + 32) = 0;
                              }
                              v724 = *(_DWORD *)(v963 + 144);
                              v565 = __OFSUB__(v724, 1);
                              v725 = v724 - 1;
                              if (v725 < 0 == v565)
                                *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * v725 + 2) = byte_1ACCBA409[((unint64_t)*v941 >> 4) - 1];
                              v722 = sub_1ACB6DDD0((uint64_t)v956, "non-%s value in %s.%s", v619, v633, v620, v685, v622, v623, (char)*(char **)((char *)&off_1EECACBA0[-1]+ (((unint64_t)*v941 >> 1) & 0x78)));
                              goto LABEL_886;
                            }
                            v589 = (uint64_t)v962;
                            v677 = v939;
                            v711 = v945;
                            if ((v939 & 0x10000) == 0)
                            {
                              v713 = *(char *)(v678 + 16 * v676 + 9);
                              if (v713 == 66)
                              {
                                sub_1ACBCB640(v963, 18, v688, v695, v950, v685, v622, v623);
                                v720 = *(_DWORD *)(v963 + 144);
                                v565 = __OFSUB__(v720, 1);
                                v721 = v720 - 1;
                                if (v721 < 0 == v565)
                                  *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * v721 + 2) = 28;
                                v722 = sub_1ACB6DDD0((uint64_t)v956, "NUMERIC value in %s.%s", v714, v715, v716, v717, v718, v719, *v962);
                                goto LABEL_886;
                              }
                              if (v713 >= 67)
                              {
                                v729 = v685;
                                sub_1ACBCB640(v963, 18, v688, v695, v950, v685, v622, v623);
                                v734 = *(_DWORD *)(v963 + 144);
                                v565 = __OFSUB__(v734, 1);
                                v735 = v734 - 1;
                                if (v735 < 0 == v565)
                                  *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * v735 + 2) = 27;
                                if ((v688 & 0x80000000) == 0)
                                  sub_1ACC0B288(v963, (uint64_t)v962, v947, v676, 3, v730, v731, v732, v733);
                                sub_1ACBA86CC((uint64_t *)v963, 96, 3, 1, 0, (uint64_t)"C", 0xFFFFFFFFLL, v732);
                                sub_1ACBCB640(v963, 18, 0xFFFFFFFFLL, v695, 3, v729, v736, v737);
                                v744 = *(_DWORD *)(v963 + 144);
                                v565 = __OFSUB__(v744, 1);
                                v745 = v744 - 1;
                                if (v745 < 0 == v565)
                                  *(_WORD *)(*(_QWORD *)(v963 + 136) + 40 * v745 + 2) = 28;
                                v722 = sub_1ACB6DDD0((uint64_t)v956, "TEXT value in %s.%s", v738, v739, v740, v741, v742, v743, *v962);
LABEL_886:
                                sub_1ACBA86CC((uint64_t *)v963, 117, 0, 3, 0, (uint64_t)v722, 4294967290, v723);
                              }
                            }
                            v726 = *(_QWORD *)(v963 + 24);
                            v727 = -v711;
                            if (*(_DWORD *)(v726 + 68) + *(_DWORD *)(v726 + 72) < 0)
                              sub_1ACC0D5D4(v726, v963, v727);
                            else
                              *(_DWORD *)(*(_QWORD *)(v726 + 80) + 4 * (int)v727) = *(_DWORD *)(v963 + 144);
                            sub_1ACC35274(v963, (uint64_t)v618, v727, v633, v620, v685, v622, v623);
                            v728 = *(_QWORD *)(v963 + 24);
                            v619 = (1 - v711);
                            if (*(_DWORD *)(v728 + 68) + *(_DWORD *)(v728 + 72) < 0)
                              sub_1ACC0D5D4(v728, v963, v619);
                            else
                              *(_DWORD *)(*(_QWORD *)(v728 + 80) + 4 * (int)v619) = *(_DWORD *)(v963 + 144);
                            v626 = zDbNameb;
LABEL_821:
                            if (++v676 >= *(__int16 *)(v589 + 54))
                              goto LABEL_900;
                            continue;
                          }
                        }
                        else
                        {
                          v685 = 5;
                          if ((*(_BYTE *)(v589 + 48) & 0x80) != 0)
                            goto LABEL_841;
                        }
                        break;
                      }
                      v686 = v685;
                      v687 = sub_1ACC09640(v589, (__int16)v676);
                      v685 = v686;
                      v950 = v687;
                      goto LABEL_850;
                    }
LABEL_900:
                    v746 = *(_QWORD **)(v589 + 32);
                    v305 = v932;
                    v545 = v931;
                    if (v746 && (*((_BYTE *)v956 + 49) & 2) == 0)
                    {
                      v747 = sub_1ACB8B6B8((uint64_t)v956, v746, 0);
                      v748 = v747;
                      if (!*((_BYTE *)v956 + 103))
                      {
                        v749 = *(_DWORD *)(a1 + 68);
                        v750 = (v749 - 1);
                        v751 = (v749 - 2);
                        *(_DWORD *)(a1 + 64) = v947 + 1;
                        *(_DWORD *)(a1 + 68) = v751;
                        v752 = *(unsigned int *)v747;
                        if ((int)v752 >= 2)
                        {
                          v753 = v752 + 1;
                          do
                            sub_1ACB9F1D0(a1, (unsigned __int8 **)v748[3 * (v753-- - 2) + 1], v750, 0, v620, v621, v622, v623);
                          while (v753 > 2);
                        }
                        sub_1ACBACA00(a1, (unsigned __int8 *)v748[1], v751, 16, v620, v621, v622, v623);
                        v304 = v963;
                        sub_1ACC0A574(v963, v750);
                        *(_DWORD *)(a1 + 64) = 0;
                        v589 = (uint64_t)v962;
                        v760 = sub_1ACB6DDD0((uint64_t)v956, "CHECK constraint failed in %s", v754, v755, v756, v757, v758, v759, *v962);
                        sub_1ACBA86CC((uint64_t *)v963, 117, 0, 3, 0, (uint64_t)v760, 4294967290, v761);
                        sub_1ACC35274(v963, v762, v763, v764, v765, v766, v767, v768);
                        sub_1ACC0A574(v963, v751);
LABEL_909:
                        sub_1ACC010B0(v956, v748);
                        v626 = zDbNameb;
                        goto LABEL_910;
                      }
                      v626 = zDbNameb;
                      if (v747)
                        goto LABEL_909;
                    }
LABEL_910:
                    if (v931 == 81)
                    {
                      sub_1ACBFF554(v304, 39, v947, v933, v620, v621, v622, v623);
                      v588 = &byte_1EECAD280;
                      v544 = v930;
                      if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                        v588 = (char *)(*(_QWORD *)(v304 + 136) + 40 * (int)v933 - 40);
                      *((_DWORD *)v588 + 2) = *(_DWORD *)(v304 + 144);
                      v587 = v934;
                      goto LABEL_756;
                    }
                    v769 = *v937;
                    if (*v937)
                    {
                      v622 = 0;
                      v770 = 0;
                      v771 = 0xFFFFFFFFLL;
                      do
                      {
                        LODWORD(v966[0]) = 0;
                        v772 = (*(_DWORD *)(a1 + 68) - 1);
                        *(_DWORD *)(a1 + 68) = v772;
                        if (v626 != (char *)v769)
                        {
                          v771 = sub_1ACB98FD8(a1, v769, HIDWORD(v964), 0, 0, (int *)v966, v622, v771, v624);
                          v776 = (v770 + 8);
                          v777 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v777)
                          {
                            sub_1ACBFF5AC(v304, 86, v776, 1, 0, v773, v774, v775);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v777 + 1;
                            v778 = *(_QWORD *)(v304 + 136) + 40 * v777;
                            *(_DWORD *)v778 = 86;
                            *(_DWORD *)(v778 + 4) = v776;
                            *(_DWORD *)(v778 + 8) = 1;
                            *(_QWORD *)(v778 + 12) = 0;
                            *(_QWORD *)(v778 + 28) = 0;
                            *(_QWORD *)(v778 + 20) = 0;
                            *(_DWORD *)(v778 + 36) = 0;
                          }
                          v779 = (v964 + v770);
                          v780 = *(unsigned __int16 *)(v769 + 96);
                          v781 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v781)
                          {
                            v781 = sub_1ACBFF7F0(v304, 29, (v964 + v770), v772, v771, v780, v774, v775);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v781 + 1;
                            v782 = *(_QWORD *)(v304 + 136) + 40 * v781;
                            *(_DWORD *)v782 = 64797;
                            *(_DWORD *)(v782 + 4) = v779;
                            *(_DWORD *)(v782 + 8) = v772;
                            *(_DWORD *)(v782 + 12) = v771;
                            *(_DWORD *)(v782 + 16) = v780;
                            *(_QWORD *)(v782 + 24) = 0;
                            *(_QWORD *)(v782 + 32) = 0;
                          }
                          sub_1ACBA86CC((uint64_t *)v304, 117, 0, 3, 0, (uint64_t)"row ", 0, v775);
                          v786 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v786)
                          {
                            sub_1ACBFF5AC(v304, 111, 7, 3, 3, v783, v784, v785);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v786 + 1;
                            v787 = *(_QWORD *)(v304 + 136) + 40 * v786;
                            *(_DWORD *)v787 = 111;
                            *(_QWORD *)(v787 + 4) = 0x300000007;
                            *(_DWORD *)(v787 + 12) = 3;
                            *(_QWORD *)(v787 + 24) = 0;
                            *(_QWORD *)(v787 + 32) = 0;
                            *(_QWORD *)(v787 + 16) = 0;
                          }
                          sub_1ACBA86CC((uint64_t *)v304, 117, 0, 4, 0, (uint64_t)" missing from index ", 0, v785);
                          v791 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v791)
                          {
                            sub_1ACBFF5AC(v304, 111, 4, 3, 3, v788, v789, v790);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v791 + 1;
                            v792 = *(_QWORD *)(v304 + 136) + 40 * v791;
                            *(_DWORD *)v792 = 111;
                            *(_QWORD *)(v792 + 4) = 0x300000004;
                            *(_DWORD *)(v792 + 12) = 3;
                            *(_QWORD *)(v792 + 24) = 0;
                            *(_QWORD *)(v792 + 32) = 0;
                            *(_QWORD *)(v792 + 16) = 0;
                          }
                          v951 = sub_1ACBA86CC((uint64_t *)v304, 117, 0, 4, 0, *(_QWORD *)v769, 0, v790);
                          v800 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v800)
                          {
                            sub_1ACBFF5AC(v304, 111, 4, 3, 3, v797, v798, v799);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v800 + 1;
                            v801 = *(_QWORD *)(v304 + 136) + 40 * v800;
                            *(_DWORD *)v801 = 111;
                            *(_QWORD *)(v801 + 4) = 0x300000004;
                            *(_DWORD *)(v801 + 12) = 3;
                            *(_QWORD *)(v801 + 24) = 0;
                            *(_QWORD *)(v801 + 32) = 0;
                            *(_QWORD *)(v801 + 16) = 0;
                          }
                          v948 = sub_1ACC35274(v304, v793, v794, v795, v796, v797, v798, v799);
                          v803 = *(_DWORD *)(v304 + 144);
                          v804 = &byte_1EECAD280;
                          if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                            v804 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v781);
                          *((_DWORD *)v804 + 2) = v803;
                          if ((*(_BYTE *)(v589 + 48) & 0x80) == 0)
                          {
                            if (*(_DWORD *)(v304 + 148) <= v803)
                            {
                              sub_1ACBFF5AC(v304, 142, v779, 3, 0, v621, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v304 + 144) = v803 + 1;
                              v805 = *(_QWORD *)(v304 + 136) + 40 * v803;
                              *(_DWORD *)v805 = 142;
                              *(_DWORD *)(v805 + 4) = v779;
                              *(_DWORD *)(v805 + 8) = 3;
                              *(_QWORD *)(v805 + 12) = 0;
                              *(_QWORD *)(v805 + 28) = 0;
                              *(_QWORD *)(v805 + 20) = 0;
                              *(_DWORD *)(v805 + 36) = 0;
                            }
                            v806 = v771 + *(unsigned __int16 *)(v769 + 96) - 1;
                            v807 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v807)
                            {
                              v807 = sub_1ACBFF5AC(v304, 53, 3, 0, v806, v621, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v304 + 144) = v807 + 1;
                              v808 = *(_QWORD *)(v304 + 136) + 40 * v807;
                              *(_DWORD *)v808 = 53;
                              *(_QWORD *)(v808 + 4) = 3;
                              *(_DWORD *)(v808 + 12) = v806;
                              *(_QWORD *)(v808 + 24) = 0;
                              *(_QWORD *)(v808 + 32) = 0;
                              *(_QWORD *)(v808 + 16) = 0;
                            }
                            sub_1ACBA86CC((uint64_t *)v304, 117, 0, 3, 0, (uint64_t)"rowid not at end-of-record for row ", 0, v623);
                            v812 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v812)
                            {
                              sub_1ACBFF5AC(v304, 111, 7, 3, 3, v809, v810, v811);
                            }
                            else
                            {
                              *(_DWORD *)(v304 + 144) = v812 + 1;
                              v813 = *(_QWORD *)(v304 + 136) + 40 * v812;
                              *(_DWORD *)v813 = 111;
                              *(_QWORD *)(v813 + 4) = 0x300000007;
                              *(_DWORD *)(v813 + 12) = 3;
                              *(_QWORD *)(v813 + 24) = 0;
                              *(_QWORD *)(v813 + 32) = 0;
                              *(_QWORD *)(v813 + 16) = 0;
                            }
                            sub_1ACBA86CC((uint64_t *)v304, 117, 0, 4, 0, (uint64_t)" of index ", 0, v811);
                            v814 = v951 - 1;
                            v815 = *(_DWORD *)(v304 + 144);
                            if (*(_DWORD *)(v304 + 148) <= v815)
                            {
                              sub_1ACBFF5AC(v304, 9, 0, v814, 0, v621, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v304 + 144) = v815 + 1;
                              v816 = *(_QWORD *)(v304 + 136) + 40 * v815;
                              *(_QWORD *)v816 = 9;
                              *(_DWORD *)(v816 + 8) = v814;
                              *(_QWORD *)(v816 + 12) = 0;
                              *(_QWORD *)(v816 + 28) = 0;
                              *(_QWORD *)(v816 + 20) = 0;
                              *(_DWORD *)(v816 + 36) = 0;
                            }
                            v817 = &byte_1EECAD280;
                            if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                              v817 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v807);
                            *((_DWORD *)v817 + 2) = *(_DWORD *)(v304 + 144);
                          }
                          if (*(_WORD *)(v769 + 94))
                          {
                            v818 = 0;
                            v819 = 0;
                            do
                            {
                              if (*(char **)(*(_QWORD *)(v769 + 64) + 8 * v818) != "BINARY")
                              {
                                if (!(_DWORD)v819)
                                {
                                  v819 = (*(_DWORD *)(a1 + 68) - 1);
                                  *(_DWORD *)(a1 + 68) = v819;
                                }
                                v821 = *(_DWORD *)(v304 + 144);
                                if (*(_DWORD *)(v304 + 148) <= v821)
                                {
                                  sub_1ACBFF5AC(v304, 94, v779, v818, 3, v621, v802, v623);
                                }
                                else
                                {
                                  *(_DWORD *)(v304 + 144) = v821 + 1;
                                  v822 = *(_QWORD *)(v304 + 136) + 40 * v821;
                                  *(_DWORD *)v822 = 94;
                                  *(_DWORD *)(v822 + 4) = v779;
                                  *(_DWORD *)(v822 + 8) = v818;
                                  *(_DWORD *)(v822 + 12) = 3;
                                  *(_QWORD *)(v822 + 24) = 0;
                                  *(_QWORD *)(v822 + 32) = 0;
                                  *(_QWORD *)(v822 + 16) = 0;
                                }
                                v620 = (v818 + v771);
                                v823 = *(_DWORD *)(v304 + 144);
                                if (*(_DWORD *)(v304 + 148) > v823)
                                {
                                  *(_DWORD *)(v304 + 144) = v823 + 1;
                                  v820 = *(_QWORD *)(v304 + 136) + 40 * v823;
                                  *(_QWORD *)v820 = 0x300000034;
                                  *(_DWORD *)(v820 + 8) = v819;
                                  *(_DWORD *)(v820 + 12) = v620;
                                  *(_QWORD *)(v820 + 24) = 0;
                                  *(_QWORD *)(v820 + 32) = 0;
                                  *(_QWORD *)(v820 + 16) = 0;
                                }
                                else
                                {
                                  sub_1ACBFF5AC(v304, 52, 3, v819, v620, v621, v802, v623);
                                }
                              }
                              ++v818;
                            }
                            while (v818 < *(unsigned __int16 *)(v769 + 94));
                            if ((_DWORD)v819)
                            {
                              v824 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v824)
                              {
                                v824 = sub_1ACBFF5AC(v304, 9, 0, 0, 0, v621, v802, v623);
                              }
                              else
                              {
                                *(_DWORD *)(v304 + 144) = v824 + 1;
                                v825 = *(_QWORD *)(v304 + 136) + 40 * v824;
                                *(_BYTE *)v825 = 9;
                                *(_OWORD *)(v825 + 1) = 0u;
                                *(_OWORD *)(v825 + 17) = 0u;
                                *(_QWORD *)(v825 + 32) = 0;
                              }
                              v826 = *(_QWORD *)(v304 + 24);
                              v827 = ~(_DWORD)v819;
                              if (*(_DWORD *)(v826 + 68) + *(_DWORD *)(v826 + 72) < 0)
                                sub_1ACC0D5D4(v826, v304, v827);
                              else
                                *(_DWORD *)(*(_QWORD *)(v826 + 80) + 4 * v827) = *(_DWORD *)(v304 + 144);
                              sub_1ACBA86CC((uint64_t *)v304, 117, 0, 3, 0, (uint64_t)"row ", 0, v623);
                              v831 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v831)
                              {
                                sub_1ACBFF5AC(v304, 111, 7, 3, 3, v828, v829, v830);
                              }
                              else
                              {
                                *(_DWORD *)(v304 + 144) = v831 + 1;
                                v832 = *(_QWORD *)(v304 + 136) + 40 * v831;
                                *(_DWORD *)v832 = 111;
                                *(_QWORD *)(v832 + 4) = 0x300000007;
                                *(_DWORD *)(v832 + 12) = 3;
                                *(_QWORD *)(v832 + 24) = 0;
                                *(_QWORD *)(v832 + 32) = 0;
                                *(_QWORD *)(v832 + 16) = 0;
                              }
                              sub_1ACBA86CC((uint64_t *)v304, 117, 0, 4, 0, (uint64_t)" values differ from index ", 0, v830);
                              v833 = v951 - 1;
                              v834 = *(_DWORD *)(v304 + 144);
                              if (*(_DWORD *)(v304 + 148) <= v834)
                              {
                                sub_1ACBFF5AC(v304, 9, 0, v833, 0, v621, v802, v623);
                              }
                              else
                              {
                                *(_DWORD *)(v304 + 144) = v834 + 1;
                                v835 = *(_QWORD *)(v304 + 136) + 40 * v834;
                                *(_QWORD *)v835 = 9;
                                *(_DWORD *)(v835 + 8) = v833;
                                *(_QWORD *)(v835 + 12) = 0;
                                *(_QWORD *)(v835 + 28) = 0;
                                *(_QWORD *)(v835 + 20) = 0;
                                *(_DWORD *)(v835 + 36) = 0;
                              }
                              v836 = &byte_1EECAD280;
                              if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                                v836 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v824);
                              *((_DWORD *)v836 + 2) = *(_DWORD *)(v304 + 144);
                            }
                          }
                          if (*(_BYTE *)(v769 + 98))
                          {
                            v837 = *(_DWORD *)(a1 + 68);
                            v838 = v837 - 1;
                            *(_DWORD *)(a1 + 68) = v837 - 1;
                            if (*(_WORD *)(v769 + 94))
                            {
                              v839 = 0;
                              do
                              {
                                if (*(__int16 *)(*(_QWORD *)(v769 + 8) + 2 * v839) < 0
                                  || (*(_BYTE *)(v962[1]
                                               + 16 * *(unsigned __int16 *)(*(_QWORD *)(v769 + 8) + 2 * v839)
                                               + 8) & 0xF) == 0)
                                {
                                  v841 = v771 + v839;
                                  v842 = *(_DWORD *)(v963 + 144);
                                  if (*(_DWORD *)(v963 + 148) > v842)
                                  {
                                    *(_DWORD *)(v963 + 144) = v842 + 1;
                                    v840 = *(_QWORD *)(v963 + 136) + 40 * v842;
                                    *(_DWORD *)v840 = 50;
                                    *(_DWORD *)(v840 + 4) = v841;
                                    *(_DWORD *)(v840 + 8) = v838;
                                    *(_QWORD *)(v840 + 12) = 0;
                                    *(_QWORD *)(v840 + 28) = 0;
                                    *(_QWORD *)(v840 + 20) = 0;
                                    *(_DWORD *)(v840 + 36) = 0;
                                  }
                                  else
                                  {
                                    sub_1ACBFF5AC(v963, 50, v841, (v837 - 1), 0, v621, v802, v623);
                                  }
                                }
                                ++v839;
                              }
                              while (v839 < *(unsigned __int16 *)(v769 + 94));
                            }
                            v304 = v963;
                            v843 = *(_DWORD *)(v963 + 144);
                            if (*(_DWORD *)(v963 + 148) <= v843)
                            {
                              v843 = sub_1ACBFF5AC(v963, 39, v779, 0, 0, v621, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v963 + 144) = v843 + 1;
                              v844 = *(_QWORD *)(v963 + 136) + 40 * v843;
                              *(_DWORD *)v844 = 39;
                              *(_DWORD *)(v844 + 4) = v779;
                              *(_OWORD *)(v844 + 8) = 0u;
                              *(_OWORD *)(v844 + 24) = 0u;
                            }
                            v845 = *(_DWORD *)(v963 + 144);
                            if (*(_DWORD *)(v963 + 148) <= v845)
                            {
                              sub_1ACBFF5AC(v963, 9, 0, (v837 - 1), 0, v621, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v963 + 144) = v845 + 1;
                              v846 = *(_QWORD *)(v963 + 136) + 40 * v845;
                              *(_QWORD *)v846 = 9;
                              *(_DWORD *)(v846 + 8) = v838;
                              *(_QWORD *)(v846 + 12) = 0;
                              *(_QWORD *)(v846 + 28) = 0;
                              *(_QWORD *)(v846 + 20) = 0;
                              *(_DWORD *)(v846 + 36) = 0;
                            }
                            v847 = *(_DWORD *)(v963 + 144);
                            v848 = &byte_1EECAD280;
                            if (!*(_BYTE *)(*(_QWORD *)v963 + 103))
                              v848 = (char *)(*(_QWORD *)(v963 + 136) + 40 * v843);
                            *((_DWORD *)v848 + 2) = v847;
                            v849 = *(unsigned __int16 *)(v769 + 94);
                            if (*(_DWORD *)(v963 + 148) <= v847)
                            {
                              sub_1ACBFF7F0(v963, 41, v779, (v837 - 1), v771, v849, v802, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v963 + 144) = v847 + 1;
                              v850 = *(_QWORD *)(v963 + 136) + 40 * v847;
                              *(_DWORD *)v850 = 64809;
                              *(_DWORD *)(v850 + 4) = v779;
                              *(_DWORD *)(v850 + 8) = v838;
                              *(_DWORD *)(v850 + 12) = v771;
                              *(_DWORD *)(v850 + 16) = v849;
                              *(_QWORD *)(v850 + 24) = 0;
                              *(_QWORD *)(v850 + 32) = 0;
                            }
                            sub_1ACBA86CC((uint64_t *)v963, 117, 0, 3, 0, (uint64_t)"non-unique entry in index ", 0, v623);
                            v852 = *(_DWORD *)(v963 + 144);
                            if (*(_DWORD *)(v963 + 148) <= v852)
                            {
                              sub_1ACBFF5AC(v963, 9, 0, v951, 0, v621, v851, v623);
                            }
                            else
                            {
                              *(_DWORD *)(v963 + 144) = v852 + 1;
                              v853 = *(_QWORD *)(v963 + 136) + 40 * v852;
                              *(_QWORD *)v853 = 9;
                              *(_DWORD *)(v853 + 8) = v951;
                              *(_QWORD *)(v853 + 12) = 0;
                              *(_QWORD *)(v853 + 28) = 0;
                              *(_QWORD *)(v853 + 20) = 0;
                              *(_DWORD *)(v853 + 36) = 0;
                            }
                            v854 = *(_QWORD *)(v963 + 24);
                            v855 = -v837;
                            if (*(_DWORD *)(v854 + 68) + *(_DWORD *)(v854 + 72) < 0)
                              sub_1ACC0D5D4(v854, v963, v855);
                            else
                              *(_DWORD *)(*(_QWORD *)(v854 + 80) + 4 * v855) = *(_DWORD *)(v963 + 144);
                          }
                          v856 = &byte_1EECAD280;
                          if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                            v856 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v948);
                          *((_DWORD *)v856 + 2) = *(_DWORD *)(v304 + 144);
                          if (LODWORD(v966[0]))
                          {
                            v857 = *(_QWORD *)(a1 + 16);
                            v858 = *(_QWORD *)(v857 + 24);
                            v859 = ~LODWORD(v966[0]);
                            v589 = (uint64_t)v962;
                            if (*(_DWORD *)(v858 + 68) + *(_DWORD *)(v858 + 72) < 0)
                              sub_1ACC0D5D4(v858, v857, v859);
                            else
                              *(_DWORD *)(*(_QWORD *)(v858 + 80) + 4 * v859) = *(_DWORD *)(v857 + 144);
                            v622 = v769;
                            v626 = zDbNameb;
                          }
                          else
                          {
                            v622 = v769;
                            v626 = zDbNameb;
                            v589 = (uint64_t)v962;
                          }
                        }
                        ++v770;
                        v769 = *(_QWORD *)(v769 + 40);
                      }
                      while (v769);
                    }
                    sub_1ACBFF554(v304, 39, HIDWORD(v964), v933, v620, v621, v622, v623);
                    v861 = &byte_1EECAD280;
                    v544 = v930;
                    if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                      v861 = (char *)(*(_QWORD *)(v304 + 136) + 40 * (int)v933 - 40);
                    *((_DWORD *)v861 + 2) = *(_DWORD *)(v304 + 144);
                    sub_1ACBA86CC((uint64_t *)v304, 117, 0, 2, 0, (uint64_t)"wrong # of entries in index ", 0, v860);
                    v862 = (uint64_t *)*v937;
                    v305 = v932;
                    v545 = v931;
                    v863 = zDbNameb;
                    if (*v937)
                    {
                      v864 = 0;
                      v865 = v964;
                      do
                      {
                        if (v863 != (char *)v862)
                        {
                          v866 = (v865 + v864);
                          v867 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v867)
                          {
                            sub_1ACBFF5AC(v304, 98, v866, 3, 0, v540, v541, v542);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v867 + 1;
                            v868 = *(_QWORD *)(v304 + 136) + 40 * v867;
                            *(_DWORD *)v868 = 98;
                            *(_DWORD *)(v868 + 4) = v866;
                            *(_DWORD *)(v868 + 8) = 3;
                            *(_QWORD *)(v868 + 12) = 0;
                            *(_QWORD *)(v868 + 28) = 0;
                            *(_QWORD *)(v868 + 20) = 0;
                            *(_DWORD *)(v868 + 36) = 0;
                          }
                          v869 = (v864 + 8);
                          v870 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v870)
                          {
                            v870 = sub_1ACBFF5AC(v304, 53, v869, 0, 3, v540, v541, v542);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v870 + 1;
                            v871 = *(_QWORD *)(v304 + 136) + 40 * v870;
                            *(_DWORD *)v871 = 53;
                            *(_DWORD *)(v871 + 4) = v869;
                            *(_QWORD *)(v871 + 8) = 0x300000000;
                            *(_QWORD *)(v871 + 24) = 0;
                            *(_QWORD *)(v871 + 32) = 0;
                            *(_QWORD *)(v871 + 16) = 0;
                          }
                          v872 = *(_DWORD *)(v304 + 144);
                          v565 = __OFSUB__(v872, 1);
                          v873 = v872 - 1;
                          if (v873 < 0 == v565)
                            *(_WORD *)(*(_QWORD *)(v304 + 136) + 40 * v873 + 2) = 144;
                          sub_1ACBA86CC((uint64_t *)v304, 117, 0, 4, 0, *v862, 0, v542);
                          v881 = *(_DWORD *)(v304 + 144);
                          if (*(_DWORD *)(v304 + 148) <= v881)
                          {
                            sub_1ACBFF5AC(v304, 111, 4, 2, 3, v878, v879, v880);
                          }
                          else
                          {
                            *(_DWORD *)(v304 + 144) = v881 + 1;
                            v882 = *(_QWORD *)(v304 + 136) + 40 * v881;
                            *(_DWORD *)v882 = 111;
                            *(_QWORD *)(v882 + 4) = 0x200000004;
                            *(_DWORD *)(v882 + 12) = 3;
                            *(_QWORD *)(v882 + 24) = 0;
                            *(_QWORD *)(v882 + 32) = 0;
                            *(_QWORD *)(v882 + 16) = 0;
                          }
                          sub_1ACC35274(v304, v874, v875, v876, v877, v878, v879, v880);
                          v883 = &byte_1EECAD280;
                          if (!*(_BYTE *)(*(_QWORD *)v304 + 103))
                            v883 = (char *)(*(_QWORD *)(v304 + 136) + 40 * v870);
                          *((_DWORD *)v883 + 2) = *(_DWORD *)(v304 + 144);
                          v863 = zDbNameb;
                        }
                        ++v864;
                        v862 = (uint64_t *)v862[5];
                      }
                      while (v862);
                    }
                    v587 = v934;
                    if (v863)
                    {
                      v884 = *((unsigned __int16 *)v863 + 47);
                      if (v884 == 1)
                      {
                        if (!v935)
                          goto LABEL_756;
                        v885 = *(unsigned __int8 *)(a1 + 31);
                        if (v885 > 7)
                          goto LABEL_756;
                        *(_BYTE *)(a1 + 31) = v885 + 1;
                        v886 = (unsigned int *)(a1 + 4 * v885 + 224);
                        goto LABEL_1037;
                      }
                      if (*(_DWORD *)(a1 + 40) < v884)
                      {
                        *(_DWORD *)(a1 + 40) = v884;
                        v886 = (unsigned int *)(a1 + 44);
LABEL_1037:
                        *v886 = v935;
                      }
                    }
LABEL_756:
                    v587 = (_QWORD *)*v587;
                    if (!v587)
                      goto LABEL_714;
                  }
                }
                if ((v929 & 0x80000000) != 0)
                  v498 = 0;
                else
                  v498 = *(_BYTE **)(*((_QWORD *)v956 + 4) + 32 * v929);
                v305 = sub_1ACB8D488(a1, 0, __s, v498, v58, v59, v60, v61);
                v303 = (int)v965;
              }
              else
              {
                v305 = 0;
              }
              v304 = v963;
              goto LABEL_709;
            case 0x16:
              if (!__s)
                goto LABEL_702;
              v306 = strlen(__s) & 0x3FFFFFFF;
              if (sqlite3_strnicmp(__s, "delete", v306))
              {
                if (!sqlite3_strnicmp(__s, "persist", v306))
                {
                  v501 = 1;
                  v308 = 3;
                  v307 = 1;
                  goto LABEL_1063;
                }
                if (sqlite3_strnicmp(__s, "off", v306))
                {
                  if (sqlite3_strnicmp(__s, "truncate", v306))
                  {
                    if (sqlite3_strnicmp(__s, "memory", v306))
                    {
                      v84 = (uint64_t)v956;
                      if (!sqlite3_strnicmp(__s, "wal", v306))
                      {
                        v307 = 5;
                        v308 = 2;
LABEL_628:
                        v501 = 1;
LABEL_1063:
                        v537 = v18;
                        goto LABEL_1064;
                      }
LABEL_702:
                      v537 = v18;
                      if (!*(_DWORD *)(a3 + 8))
                      {
                        LODWORD(v18) = 0;
                        *(_DWORD *)(a3 + 8) = 1;
                        v307 = 0xFFFFFFFFLL;
                        goto LABEL_1070;
                      }
                      v501 = 0;
                      v307 = 0xFFFFFFFFLL;
                      v308 = 3;
LABEL_1064:
                      if ((_DWORD)v18 == 1)
                      {
                        LODWORD(v18) = 1;
                      }
                      else
                      {
                        v895 = v26 + 32 * v537;
                        v896 = v501 ^ 1;
                        if (*(_BYTE *)(v895 + 17))
                          v896 = 1;
                        if ((v896 & 1) == 0)
                        {
                          v897 = **(_QWORD **)(*(_QWORD *)(v895 + 8) + 8);
                          *(_BYTE *)(v895 + 16) = v308;
                          sub_1ACBEA05C(v897, *(_BYTE *)(v84 + 48) & 0x38 | v308);
                        }
                      }
LABEL_1070:
                      v898 = *(unsigned int *)(v84 + 40);
                      if ((int)v898 >= 1)
                      {
                        do
                        {
                          v902 = v898 - 1;
                          if (*(_QWORD *)(*(_QWORD *)(v84 + 32) + 32 * (v898 - 1) + 8)
                            && ((_DWORD)v18 + 1 == (_DWORD)v898 || !*(_DWORD *)(a3 + 8)))
                          {
                            sub_1ACBCB690((_DWORD *)v963, v902);
                            sub_1ACB683F4(v963, 4, v902, 1, v307, v899, v900, v901);
                          }
                          v898 = v902;
                        }
                        while ((unint64_t)(v902 + 1) > 1);
                      }
                      v456 = v963;
                      v457 = 1;
LABEL_1079:
                      v513 = 1;
                      goto LABEL_1080;
                    }
                    v307 = 4;
                    v308 = 3;
                    v501 = 1;
                  }
                  else
                  {
                    v308 = 3;
                    v501 = 1;
                    v307 = 3;
                  }
                  v84 = (uint64_t)v956;
                  goto LABEL_1063;
                }
                if ((*((_BYTE *)v956 + 51) & 0x10) != 0)
                  goto LABEL_702;
                v307 = 2;
              }
              else
              {
                v307 = 0;
              }
              v308 = 3;
              goto LABEL_628;
            case 0x17:
              v309 = **(_QWORD **)(*(_QWORD *)(v26 + 32 * v18 + 8) + 8);
              v966[0] = (_QWORD *)-2;
              if (__s)
              {
                sub_1ACBD3BF4(__s, (unint64_t *)v966);
                if ((uint64_t)v966[0] < 0)
                  v310 = -1;
                else
                  v310 = (uint64_t)v966[0];
                *(_QWORD *)(v309 + 208) = v310;
                v311 = *(_QWORD *)(v309 + 344);
                v312 = v963;
                if (v311)
                  *(_QWORD *)(v311 + 32) = v310;
              }
              else
              {
                v310 = *(_QWORD *)(v309 + 208);
                v312 = v963;
              }
              v966[0] = (_QWORD *)v310;
              sub_1ACC347EC(v312, v310);
              goto LABEL_1081;
            case 0x18:
              v313 = **(_QWORD **)(*(_QWORD *)(v26 + 32 * v18 + 8) + 8);
              if (__s)
              {
                v314 = **(_QWORD **)(v313 + 72);
                if (*__s)
                {
                  v116 = v952;
                  if (v314)
                  {
                    v315 = *(unsigned int (**)(void))(v314 + 80);
                    goto LABEL_611;
                  }
                }
                else
                {
                  v116 = v952;
                  if (v314)
                  {
                    v315 = *(unsigned int (**)(void))(v314 + 80);
LABEL_611:
                    if (!v315())
                      goto LABEL_634;
                  }
                }
                sub_1ACBCB308(a1, "failed to set lock proxy file", v56, v57, v58, v59, v60, v61, v926);
                goto LABEL_634;
              }
              v966[0] = 0;
              v465 = **(_QWORD **)(v313 + 72);
              if (v465)
              {
                (*(void (**)(void))(v465 + 80))();
                v464 = (char *)v966[0];
              }
              else
              {
                v464 = 0;
              }
              v116 = v952;
LABEL_683:
              sub_1ACC34688((uint64_t *)v963, (uint64_t)v464, v56, v57, v58, v59, v60, v61);
LABEL_684:
              v531 = v956;
              v504 = v116;
              goto LABEL_1083;
            case 0x19:
              v316 = sub_1ACC34934(__s);
              v323 = *(_DWORD *)(a3 + 8);
              if (v323 || v316 != -1)
              {
                if (!v323)
                {
                  v452 = *((unsigned int *)v956 + 10);
                  if ((int)v452 > 2)
                  {
                    v453 = *((_QWORD *)v956 + 4) + 72;
                    v454 = v452 - 2;
                    do
                    {
                      if ((v316 & 0x80000000) == 0)
                      {
                        v458 = **(_QWORD **)(*(_QWORD *)v453 + 8);
                        if (!*(_BYTE *)(v458 + 16))
                        {
                          v459 = *(_QWORD *)(v458 + 344);
                          if (!v459 || *(_BYTE *)(v459 + 63) != 2)
                            *(_BYTE *)(v458 + 8) = v316;
                        }
                      }
                      v453 += 32;
                      --v454;
                    }
                    while (v454);
                  }
                  *((_BYTE *)v956 + 105) = v316;
                }
                v325 = (uint64_t *)v963;
                v505 = **(_QWORD **)(*(_QWORD *)(v26 + 32 * v18 + 8) + 8);
                if ((v316 & 0x80000000) == 0 && !*(_BYTE *)(v505 + 16))
                {
                  v506 = *(_QWORD *)(v505 + 344);
                  if (!v506 || *(_BYTE *)(v506 + 63) != 2)
                    *(_BYTE *)(v505 + 8) = v316;
                }
                v324 = (_BYTE *)(v505 + 8);
              }
              else
              {
                v324 = (char *)v956 + 105;
                v325 = (uint64_t *)v963;
              }
              if (*v324 == 1)
                v507 = "exclusive";
              else
                v507 = "normal";
              sub_1ACC34688(v325, (uint64_t)v507, v317, v318, v319, v320, v321, v322);
              goto LABEL_1081;
            case 0x1A:
              v966[0] = 0;
              sub_1ACB7A4DC(a1, v18);
              v330 = (*(_DWORD *)(a1 + 56) + 1);
              *(_DWORD *)(a1 + 56) = v330;
              if ((*v952 & 0xDF) == 0x50)
              {
                v331 = v963;
                sub_1ACBFF554(v963, 177, v18, v330, v326, v327, v328, v329);
              }
              else
              {
                v331 = v963;
                if (__s && !sub_1ACBD3BF4(__s, (unint64_t *)v966))
                {
                  v455 = (uint64_t)v966[0];
                  if (((unint64_t)v966[0] & 0x8000000000000000) != 0)
                  {
                    v455 = 0;
                    v966[0] = 0;
                    v331 = v963;
                  }
                  else
                  {
                    v331 = v963;
                    if (v966[0] >= (_QWORD *)0xFFFFFFFFLL)
                    {
                      v455 = 4294967294;
                      v966[0] = (_QWORD *)4294967294;
                    }
                  }
                }
                else
                {
                  v455 = 0;
                  v966[0] = 0;
                }
                sub_1ACB683F4(v331, 178, v18, v330, v455, v327, v328, v329);
              }
              v456 = v331;
              v457 = v330;
              goto LABEL_1079;
            case 0x1B:
              v966[0] = 0;
              if (__s)
              {
                sub_1ACBD3BF4(__s, (unint64_t *)v966);
                v332 = v966[0];
                if (((unint64_t)v966[0] & 0x8000000000000000) != 0)
                {
                  v332 = (_QWORD *)qword_1ECD3B268;
                  v966[0] = (_QWORD *)qword_1ECD3B268;
                }
                if (!*(_DWORD *)(a3 + 8))
                  *((_QWORD *)v956 + 8) = v332;
                v333 = *((unsigned int *)v956 + 10);
                if ((int)v333 >= 1)
                {
                  do
                  {
                    v334 = v333 - 1;
                    v335 = *(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * (v333 - 1) + 8);
                    if (v335 && ((_DWORD)v18 + 1 == (_DWORD)v333 || !*(_DWORD *)(a3 + 8)))
                      sub_1ACC34B40(v335, (uint64_t)v966[0]);
                    v333 = v334;
                  }
                  while ((unint64_t)(v334 + 1) > 1);
                }
              }
              v966[0] = (_QWORD *)-1;
              v448 = sqlite3_file_control(v956, zDbName, 18, v966);
              if (v448 != 12)
              {
                if (v448)
                {
                  ++*(_DWORD *)(a1 + 48);
                  *(_DWORD *)(a1 + 24) = v448;
                }
                else
                {
                  sub_1ACC347EC(v963, (uint64_t)v966[0]);
                }
              }
              goto LABEL_1081;
            case 0x1C:
              *(_DWORD *)(a1 + 56) = 1;
              for (nn = (_QWORD *)*((_QWORD *)v956 + 72); nn; nn = (_QWORD *)*nn)
                sub_1ACC34EE4(v963, 1, (uint64_t)"s", v57, v58, v59, v60, v61, *(_QWORD *)(nn[2] + 8));
              goto LABEL_1081;
            case 0x1D:
              if (__s)
              {
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                v337 = (char)v966[0];
                v116 = v952;
                if (((uint64_t)v966[0] & 2) == 0)
                  goto LABEL_634;
              }
              else
              {
                v337 = -2;
              }
              v466 = *(unsigned int *)(a1 + 52);
              *(_DWORD *)(a1 + 52) = v466 + 1;
              v467 = v18;
              if (!zDbName)
                v467 = *((_DWORD *)v956 + 10) - 1;
              v468 = v963;
              if ((int)v18 > v467)
                goto LABEL_553;
              v469 = v337 & 1;
              v470 = (int)v18;
              v961 = v467 + 1;
              do
              {
                if (v470 != 1)
                {
                  sub_1ACB7A4DC(a1, v470);
                  for (i1 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v470 + 24) + 16);
                        i1;
                        i1 = (_QWORD *)*i1)
                  {
                    v472 = i1[2];
                    if ((*(_BYTE *)(v472 + 49) & 1) != 0)
                    {
                      v473 = *(_WORD *)(v472 + 58);
                      v474 = *(_QWORD *)(v472 + 16);
                      if (v474)
                      {
                        while ((*(_WORD *)(v474 + 99) & 0x80) != 0)
                        {
                          v474 = *(_QWORD *)(v474 + 40);
                          if (!v474)
                            goto LABEL_574;
                        }
                      }
                      else
                      {
LABEL_574:
                        v475 = v473 + 46;
                        if (v473 != -46)
                        {
                          sub_1ACB7A514((_QWORD *)a1, v466, v470, i1[2], 112, v59, v60, v61);
                          v476 = *(_DWORD *)(v963 + 144);
                          v57 = v476 + (v469 | 2u);
                          v58 = v475;
                          if (*(_DWORD *)(v963 + 148) <= v476)
                          {
                            sub_1ACBFF5AC(v963, 33, v466, v57, v58, v59, v60, v61);
                          }
                          else
                          {
                            *(_DWORD *)(v963 + 144) = v476 + 1;
                            v477 = *(_QWORD *)(v963 + 136) + 40 * v476;
                            *(_DWORD *)v477 = 33;
                            *(_DWORD *)(v477 + 4) = v466;
                            *(_DWORD *)(v477 + 8) = v57;
                            *(_DWORD *)(v477 + 12) = v58;
                            *(_QWORD *)(v477 + 24) = 0;
                            *(_QWORD *)(v477 + 32) = 0;
                            *(_QWORD *)(v477 + 16) = 0;
                          }
                        }
                      }
                      v478 = sub_1ACB6DDD0((uint64_t)v956, "ANALYZE \"%w\".\"%w\"", v56, v57, v58, v59, v60, v61, *(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v470));
                      if (v469)
                      {
                        v468 = v963;
                        if (*(_BYTE *)(a1 + 31))
                        {
                          v480 = *(_BYTE *)(a1 + 31) - 1;
                          *(_BYTE *)(a1 + 31) = v480;
                          v481 = *(unsigned int *)(a1 + 4 * v480 + 224);
                        }
                        else
                        {
                          v481 = (*(_DWORD *)(a1 + 56) + 1);
                          *(_DWORD *)(a1 + 56) = v481;
                        }
                        sub_1ACBA86CC((uint64_t *)v963, 117, 0, v481, 0, (uint64_t)v478, 4294967290, v479);
                        sub_1ACBFF554(v963, 84, v481, 1, v482, v483, v484, v485);
                      }
                      else
                      {
                        v468 = v963;
                        sub_1ACBA86CC((uint64_t *)v963, 148, 0, 0, 0, (uint64_t)v478, 4294967290, v479);
                      }
                    }
                  }
                }
                ++v470;
              }
              while (v961 != (_DWORD)v470);
LABEL_553:
              sub_1ACC08CD4(v468, 166, v56, v57, v58, v59, v60, v61);
              goto LABEL_1081;
            case 0x1E:
              v338 = *(_QWORD *)(v26 + 32 * v18 + 8);
              if (__s)
              {
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                v339 = (int)v966[0];
                *((_DWORD *)v956 + 29) = v966[0];
                v116 = v952;
                if (sub_1ACBB5FAC(v338, v339, 0, 0, v340) == 7)
                  sub_1ACBC741C((uint64_t)v956, v341, v342, v343, v344, v345, v346, v347);
                goto LABEL_634;
              }
              if (v338)
                v462 = *(int *)(*(_QWORD *)(v338 + 8) + 52);
              else
LABEL_584:
                v462 = 0;
LABEL_585:
              v116 = v952;
              sub_1ACC347EC(v963, v462);
              goto LABEL_684;
            case 0x1F:
              for (i2 = 0; i2 != 222; i2 += 3)
              {
                v349 = v66;
                sub_1ACC34EE4(v963, 1, (uint64_t)"s", v57, v58, v59, v60, v61, (uint64_t)v66[i2]);
                v66 = v349;
              }
              goto LABEL_1081;
            case 0x20:
              v350 = *(_QWORD *)(v26 + 32 * v18 + 8);
              if (!__s)
              {
                v355 = -1;
                goto LABEL_597;
              }
              v351 = 0;
              v352 = v963;
              while (2)
              {
                v353 = __s[v351];
                v354 = aFast[v351];
                if ((_DWORD)v353 == (_DWORD)v354)
                {
                  if (!__s[v351])
                  {
                    v355 = 2;
                    goto LABEL_593;
                  }
                }
                else if (byte_1ACCB6333[v353] != byte_1ACCB6333[v354])
                {
                  v355 = sub_1ACC34DB4(__s, 1, 0) != 0;
LABEL_593:
                  if (*(_DWORD *)(a3 + 8))
                    goto LABEL_598;
                  if (*((int *)v956 + 10) >= 1)
                  {
                    v490 = 0;
                    v491 = 8;
                    do
                    {
                      sub_1ACC348A4(*(_QWORD *)(*((_QWORD *)v956 + 4) + v491), v355);
                      ++v490;
                      v491 += 32;
                    }
                    while (v490 < *((int *)v956 + 10));
                  }
LABEL_597:
                  v352 = v963;
LABEL_598:
                  v492 = sub_1ACC348A4(v350, v355);
                  sub_1ACC347EC(v352, v492);
                  goto LABEL_1081;
                }
                ++v351;
                continue;
              }
            case 0x21:
              sqlite3_db_release_memory(v956);
              goto LABEL_1081;
            case 0x22:
              v966[0] = 0;
              if (__s && !sub_1ACBD3BF4(__s, (unint64_t *)v966))
                sqlite3_soft_heap_limit64((sqlite3_int64)v966[0]);
              v261 = sqlite3_soft_heap_limit64(-1);
LABEL_353:
              v85 = v261;
              goto LABEL_476;
            case 0x23:
              if (!__s)
              {
                v460 = *(unsigned __int8 *)(v26 + 32 * v18 + 16) - 1;
                goto LABEL_559;
              }
              if (!*((_BYTE *)v956 + 101))
              {
                sub_1ACBCB308(a1, "Safety level may not be changed inside a transaction", v56, v57, v58, v59, v60, v61, v926);
                goto LABEL_633;
              }
              v116 = v952;
              if ((_DWORD)v18 != 1)
              {
                v356 = sub_1ACC34DB4(__s, 0, 1u);
                if (((v356 + 1) & 6) != 0)
                  v357 = (v356 + 1) & 7;
                else
                  v357 = 1;
                v358 = v26 + 32 * v18;
                *(_BYTE *)(v358 + 16) = v357;
                *(_BYTE *)(v358 + 17) = 1;
LABEL_361:
                sub_1ACC34AC8((uint64_t)v956);
              }
              goto LABEL_634;
            case 0x24:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              sub_1ACC13ED8((_DWORD *)a1, zDbName);
              v363 = sub_1ACB8D488(a1, 2, __s, zDbName, v359, v360, v361, v362);
              if (!v363)
                goto LABEL_634;
              v370 = v363;
              for (i3 = *(_QWORD *)(v363 + 16); i3; i3 = *(_QWORD *)(i3 + 40))
              {
                if ((*(_WORD *)(i3 + 99) & 3) == 2)
                  break;
              }
              *(_DWORD *)(a1 + 56) = 7;
              if (*(_BYTE *)(v363 + 63) != 1 && (v372 = *(__int16 *)(v363 + 54), v372 > 0)
                || (sub_1ACC114E0(a1, v363, v364, v365, v366, v367, v368, v369),
                    v372 = *(__int16 *)(v370 + 54),
                    v372 >= 1))
              {
                v960 = 0;
                v373 = 0;
                v374 = (unsigned __int16)v372;
                v375 = *(_QWORD *)(v370 + 8);
                v376 = &(&off_1E5C73BA0)[3 * (int)v69 + 2];
                zDbNamea = (char *)v370;
                do
                {
                  v382 = *(_WORD *)(v375 + 14);
                  if ((v382 & 0x62) != 0 && !*v376)
                  {
                    ++v960;
                  }
                  else
                  {
                    if (i3 && (v382 & 1) != 0 && v374 >= 1)
                    {
                      v383 = 0;
                      do
                      {
                        if (v373 == *(__int16 *)(*(_QWORD *)(i3 + 8) + 2 * v383))
                          break;
                        ++v383;
                      }
                      while ((v374 + 1) - 1 != v383);
                    }
                    if (*v376)
                      v384 = "issisii";
                    else
                      v384 = "issisi";
                    sub_1ACBD245C(v375, (uint64_t)&byte_1ACCBEAEE);
                    sub_1ACC34EE4(v963, 1, (uint64_t)v384, v377, v378, v379, v380, v381, (v373 - v960));
                    LOWORD(v372) = *((_WORD *)zDbNamea + 27);
                  }
                  ++v373;
                  v375 += 16;
                  v374 = (__int16)v372;
                }
                while (v373 < (__int16)v372);
              }
              goto LABEL_1081;
            case 0x25:
              *(_DWORD *)(a1 + 56) = 6;
              sub_1ACC13ED8((_DWORD *)a1, zDbName);
              if (*((int *)v956 + 10) < 1)
                goto LABEL_1081;
              v391 = zDbName;
              v392 = 0;
              while (1)
              {
                v393 = v956;
                v394 = *((_QWORD *)v956 + 4);
                if (v391)
                {
                  v395 = *(unsigned __int8 **)(v394 + 32 * v392);
                  if (v395)
                  {
                    for (i4 = v391; ; ++i4)
                    {
                      v397 = *i4;
                      v398 = *v395;
                      if ((_DWORD)v397 == (_DWORD)v398)
                      {
                        if (!*i4)
                          goto LABEL_396;
                      }
                      else if (byte_1ACCB6333[v397] != byte_1ACCB6333[v398])
                      {
                        goto LABEL_388;
                      }
                      ++v395;
                    }
                  }
                  goto LABEL_388;
                }
LABEL_396:
                v399 = *(_QWORD *)(v394 + 32 * v392 + 24);
                v400 = v399 + 8;
                v401 = *(_DWORD *)(v399 + 12);
                if (v401)
                {
LABEL_397:
                  --v401;
                  v402 = (_QWORD *)(v400 + 8);
                  while (1)
                  {
                    v402 = (_QWORD *)*v402;
                    if (!v402)
                      break;
                    v403 = v402[2];
                    if (!*(_WORD *)(v403 + 54))
                    {
                      v404 = sub_1ACB6DDD0((uint64_t)v956, "SELECT*FROM\"%w\"", v385, v386, v387, v388, v389, v390, *(_QWORD *)v403);
                      if (v404)
                      {
                        v405 = v404;
                        v966[0] = 0;
                        sub_1ACB5C66C(v956, v404, 0xFFFFFFFFLL, 0, 0, v966, 0);
                        sqlite3_finalize((sqlite3_stmt *)v966[0]);
                        sub_1ACBE0F9C(v956, v405);
                      }
                      if (*((_BYTE *)v956 + 103))
                      {
                        sub_1ACBCB308(*((_QWORD *)v956 + 43), "out of memory", v385, v386, v387, v388, v389, v390, v927);
                        *(_DWORD *)(*((_QWORD *)v956 + 43) + 24) = 7;
                      }
                      v400 = *(_QWORD *)(*((_QWORD *)v956 + 4) + 32 * v392 + 24) + 8;
                      if (v401)
                        goto LABEL_397;
                      break;
                    }
                  }
                }
                v406 = *(_QWORD **)(v400 + 8);
                if (v406)
                  break;
LABEL_388:
                if (++v392 >= *((int *)v393 + 10))
                  goto LABEL_1081;
              }
              while (1)
              {
                v407 = (unsigned __int8 **)v406[2];
                if (__s)
                {
                  v408 = *v407;
                  if (*v407)
                  {
                    for (i5 = __s; ; ++i5)
                    {
                      v410 = *i5;
                      v411 = *v408;
                      if ((_DWORD)v410 == (_DWORD)v411)
                      {
                        if (!*i5)
                          goto LABEL_416;
                      }
                      else if (byte_1ACCB6333[v410] != byte_1ACCB6333[v411])
                      {
                        goto LABEL_408;
                      }
                      ++v408;
                    }
                  }
                  goto LABEL_408;
                }
LABEL_416:
                v412 = *(_QWORD *)(*((_QWORD *)v393 + 4) + 32 * v392);
                v413 = *v407;
                if (*v407)
                  break;
LABEL_407:
                sub_1ACC34EE4(v963, 1, (uint64_t)"sssiii", v386, v387, v388, v389, v390, v412);
LABEL_408:
                v406 = (_QWORD *)*v406;
                if (!v406)
                  goto LABEL_388;
              }
              v414 = *v413;
              if (!*v413)
              {
                v415 = "sqlite_";
                goto LABEL_445;
              }
              if ((v414 & 0xFFFFFFDF) == 0x53)
              {
                v414 = v413[1];
                if (!v413[1])
                {
                  v415 = "qlite_";
                  goto LABEL_445;
                }
                if ((v414 & 0xFFFFFFDF) == 0x51)
                {
                  v414 = v413[2];
                  if (!v413[2])
                  {
                    v415 = "lite_";
                    goto LABEL_445;
                  }
                  if ((v414 & 0xFFFFFFDF) == 0x4C)
                  {
                    v414 = v413[3];
                    if (!v413[3])
                    {
                      v415 = "ite_";
                      goto LABEL_445;
                    }
                    if ((v414 & 0xFFFFFFDF) == 0x49)
                    {
                      v414 = v413[4];
                      if (!v413[4])
                      {
                        v415 = "te_";
                        goto LABEL_445;
                      }
                      if ((v414 & 0xFFFFFFDF) == 0x54)
                      {
                        v414 = v413[5];
                        if (!v413[5])
                        {
                          v415 = "e_";
                          goto LABEL_445;
                        }
                        if ((v414 & 0xFFFFFFDF) == 0x45)
                        {
                          v414 = v413[6];
                          if (!v413[6])
                          {
                            v415 = "_";
                            v391 = zDbName;
                            v393 = v956;
LABEL_445:
                            if ((_DWORD)v414 == byte_1ACCB6333[*v415])
                            {
LABEL_446:
                              for (i6 = 7u; ; ++i6)
                              {
                                v417 = v413[i6];
                                v418 = aSqliteMaster[i6];
                                if ((_DWORD)v417 == (_DWORD)v418)
                                {
                                  if (!v413[i6])
                                    goto LABEL_407;
                                }
                                else if (byte_1ACCB6333[v417] != byte_1ACCB6333[v418])
                                {
                                  for (i7 = 7u; ; ++i7)
                                  {
                                    v420 = v413[i7];
                                    v421 = aSqliteTempMast[i7];
                                    if ((_DWORD)v420 == (_DWORD)v421)
                                    {
                                      if (!v413[i7])
                                        goto LABEL_407;
                                    }
                                    else if (byte_1ACCB6333[v420] != byte_1ACCB6333[v421])
                                    {
                                      goto LABEL_407;
                                    }
                                  }
                                }
                              }
                            }
                            goto LABEL_407;
                          }
                          v391 = zDbName;
                          v393 = v956;
                          if ((_DWORD)v414 == 95)
                            goto LABEL_446;
                          v414 += (unint64_t)byte_1ACCB6333;
                          v415 = "_";
                        }
                        else
                        {
                          v414 += (unint64_t)byte_1ACCB6333;
                          v415 = "e_";
                          v391 = zDbName;
                          v393 = v956;
                        }
                      }
                      else
                      {
                        v414 += (unint64_t)byte_1ACCB6333;
                        v415 = "te_";
                      }
                    }
                    else
                    {
                      v414 += (unint64_t)byte_1ACCB6333;
                      v415 = "ite_";
                    }
                  }
                  else
                  {
                    v414 += (unint64_t)byte_1ACCB6333;
                    v415 = "lite_";
                  }
                }
                else
                {
                  v414 += (unint64_t)byte_1ACCB6333;
                  v415 = "qlite_";
                }
              }
              else
              {
                v414 += (unint64_t)byte_1ACCB6333;
                v415 = "sqlite_";
              }
              LODWORD(v414) = *(unsigned __int8 *)v414;
              goto LABEL_445;
            case 0x26:
              if (__s)
              {
                sub_1ACC34C34(a1, (unsigned __int8 *)__s, v56, v57, v58, v59, v60, v61, v62, v926);
                goto LABEL_633;
              }
              v460 = *((unsigned __int8 *)v956 + 102);
LABEL_559:
              v461 = v963;
LABEL_560:
              sub_1ACC347EC(v461, v460);
              v116 = v952;
              goto LABEL_684;
            case 0x27:
              if ((_BYTE)word_1ECD3B144)
              {
                v422 = qword_1ECD3B1B0(11);
                if (v422)
                  xmmword_1ECD3B1C0(v422);
              }
              if (__s)
              {
                if (*__s)
                {
                  LODWORD(v966[0]) = 0;
                  (*(uint64_t (**)(void))(*(_QWORD *)v956 + 56))();
                  sub_1ACBCB308(a1, "not a writable directory", v423, v424, v425, v426, v427, v428, v926);
                  if ((_BYTE)word_1ECD3B144)
                  {
                    v503 = qword_1ECD3B1B0(11);
                    if (v503)
                      xmmword_1ECD3B1D0(v503);
                  }
LABEL_633:
                  v116 = v952;
LABEL_634:
                  sub_1ACBE0F9C((_QWORD *)v84, v116);
                  v504 = __s;
LABEL_1082:
                  v531 = (_QWORD *)v84;
LABEL_1083:
                  sub_1ACBE0F9C(v531, v504);
                  return;
                }
                if (*((unsigned __int8 *)v956 + 102) <= 1u)
                  sub_1ACC34D48(a1, v62, v55, v56, v57, v58, v59, v60, v61, v926);
                sqlite3_free(sqlite3_temp_directory);
                if (*__s)
                  sqlite3_temp_directory = sqlite3_mprintf("%s", __s);
                else
                  sqlite3_temp_directory = 0;
              }
              else
              {
                sub_1ACC34688((uint64_t *)v963, (uint64_t)sqlite3_temp_directory, v56, v57, v58, v59, v60, v61);
              }
              if ((_BYTE)word_1ECD3B144)
              {
                v508 = qword_1ECD3B1B0(11);
                if (v508)
                  xmmword_1ECD3B1D0(v508);
              }
              goto LABEL_1081;
            case 0x28:
              v966[0] = 0;
              if (__s
                && !sub_1ACBD3BF4(__s, (unint64_t *)v966)
                && ((unint64_t)v966[0] & 0x8000000000000000) == 0)
              {
                sqlite3_limit(v956, 11, (uint64_t)v966[0] & 0x7FFFFFFF);
              }
              v85 = sqlite3_limit(v956, 11, -1);
              goto LABEL_476;
            case 0x29:
              if (__s)
              {
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                sqlite3_wal_autocheckpoint(v956, (int)v966[0]);
              }
              if (*((uint64_t (**)(uint64_t, sqlite3 *, char *, int))v956 + 47) == sub_1ACB9F16C)
                sub_1ACC347EC(v963, *((int *)v956 + 96));
              else
                sub_1ACC347EC(v963, 0);
              goto LABEL_1081;
            case 0x2A:
              if (*(_QWORD *)a3)
                v429 = v18;
              else
                v429 = 12;
              if (!__s)
                goto LABEL_657;
              v430 = "full";
              v431 = __s;
              v432 = v963;
              while (2)
              {
                v433 = *v431;
                v434 = *(unsigned __int8 *)v430;
                if ((_DWORD)v433 == (_DWORD)v434)
                {
                  if (!*v431)
                  {
                    v435 = 1;
                    goto LABEL_659;
                  }
                }
                else if (byte_1ACCB6333[v433] != byte_1ACCB6333[v434])
                {
                  v486 = "restart";
                  for (i8 = __s; ; ++i8)
                  {
                    v488 = *i8;
                    v489 = *(unsigned __int8 *)v486;
                    if ((_DWORD)v488 == (_DWORD)v489)
                    {
                      if (!*i8)
                      {
                        v435 = 2;
                        goto LABEL_659;
                      }
                    }
                    else if (byte_1ACCB6333[v488] != byte_1ACCB6333[v489])
                    {
                      v509 = "truncate";
                      for (i9 = __s; ; ++i9)
                      {
                        v511 = *i9;
                        v512 = *(unsigned __int8 *)v509;
                        if ((_DWORD)v511 == (_DWORD)v512)
                        {
                          if (!*i9)
                          {
                            v435 = 3;
                            goto LABEL_658;
                          }
                        }
                        else if (byte_1ACCB6333[v511] != byte_1ACCB6333[v512])
                        {
LABEL_657:
                          v435 = 0;
LABEL_658:
                          v432 = v963;
LABEL_659:
                          *(_DWORD *)(a1 + 56) = 3;
                          sub_1ACB683F4(v432, 3, v429, v435, 1, v59, v60, v61);
                          v456 = v432;
                          v457 = 1;
                          v513 = 3;
LABEL_1080:
                          sub_1ACBFF554(v456, 84, v457, v513, v58, v59, v60, v61);
                          goto LABEL_1081;
                        }
                        ++v509;
                      }
                    }
                    ++v486;
                  }
                }
                ++v431;
                ++v430;
                continue;
              }
            case 0x2B:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v436 = *__s;
              if (!*__s)
              {
                v502 = 0;
                v441 = "see-";
                goto LABEL_1110;
              }
              if ((v436 & 0xFFFFFFDF) == 0x53)
              {
                v437 = __s[1];
                if (!__s[1])
                {
                  v502 = 0;
                  v441 = "ee-";
                  goto LABEL_1109;
                }
                if ((v437 & 0xFFFFFFDF) == 0x45)
                {
                  v438 = __s[2];
                  if (!__s[2])
                  {
                    v502 = 0;
                    v441 = "e-";
                    goto LABEL_1109;
                  }
                  if ((v438 & 0xFFFFFFDF) == 0x45)
                  {
                    v439 = __s[3];
                    if (__s[3])
                    {
                      v84 = (uint64_t)v956;
                      v116 = v952;
                      if ((_DWORD)v439 == 45)
                        goto LABEL_1111;
                      v440 = &byte_1ACCB6333[v439];
                      v441 = "-";
                      goto LABEL_1107;
                    }
                    v502 = 0;
                    v441 = "-";
LABEL_1109:
                    v84 = (uint64_t)v956;
                    v116 = v952;
LABEL_1110:
                    if (v502 != byte_1ACCB6333[*v441])
                      goto LABEL_634;
LABEL_1111:
                    sqlite3_activate_see((uint64_t)(__s + 4));
                    goto LABEL_634;
                  }
                  v440 = &byte_1ACCB6333[v438];
                  v441 = "e-";
                }
                else
                {
                  v440 = &byte_1ACCB6333[v437];
                  v441 = "ee-";
                }
                v84 = (uint64_t)v956;
                v116 = v952;
              }
              else
              {
                v440 = &byte_1ACCB6333[v436];
                v441 = "see-";
              }
LABEL_1107:
              v502 = *v440;
              goto LABEL_1110;
            case 0x2C:
              v116 = v952;
              if (!__s)
                goto LABEL_684;
              v442 = (&off_1E5C73BA0)[3 * (int)v69 + 2];
              if ((v67 & 0xFFFFFFFC) == 0x38)
              {
                v443 = 0;
                v444 = 0;
                do
                {
                  v445 = __s[v443];
                  if ((byte_1ACCB6548[v445] & 8) == 0)
                    break;
                  v446 = ((((char)(2 * v445) >> 7) & 0xF9) + v445) & 0xF | (16 * v444);
                  if ((v443 & 1) != 0)
                    *((_BYTE *)v966 + (v443 >> 1)) = v446;
                  ++v443;
                  v444 = v446;
                }
                while (v443 != 80);
                v493 = v443 >> 1;
                v494 = (char *)v966;
              }
              else
              {
                if ((unint64_t)v442 > 3)
                  v493 = -1;
                else
                  v493 = strlen(__s) & 0x3FFFFFFF;
                v494 = __s;
              }
              if ((v442 & 1) != 0)
                v514 = sqlite3_rekey_v2(v956, zDbName, v494, v493);
              else
                v514 = sqlite3_key_v2((uint64_t)v956, zDbName, v494, v493);
              if (!v514 && v493)
              {
                sub_1ACB7E2D4(v963, 1);
                if (!*(_BYTE *)(*(_QWORD *)v963 + 103))
                  sub_1ACB57870(*(_QWORD *)(v963 + 152), "ok", -1, 1u, 0);
                sub_1ACC34688((uint64_t *)v963, (uint64_t)"ok", v515, v516, v517, v518, v519, v520);
              }
              goto LABEL_634;
            default:
              if (__s)
              {
                LODWORD(v966[0]) = 0;
                sub_1ACBFD07C((unsigned __int8 *)__s, v966);
                sqlite3_busy_timeout(v956, (int)v966[0]);
              }
              v85 = *((int *)v956 + 193);
LABEL_476:
              sub_1ACC347EC(v963, v85);
              goto LABEL_1081;
          }
        }
      }
      else
      {
        v72 = byte_1ACCB6333[v73] - byte_1ACCB6333[v74];
        if (v72)
          goto LABEL_63;
      }
    }
  }
  sub_1ACB7E2D4(v963, 1);
  v76 = v967;
  if (!*(_BYTE *)(*(_QWORD *)v963 + 103))
  {
    sub_1ACB57870(*(_QWORD *)(v963 + 152), (char *)v967, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    v76 = v967;
  }
  if (v76)
  {
    sub_1ACBA86CC((uint64_t *)v963, 117, 0, 1, 0, v76, 0, v75);
    v80 = *(_DWORD *)(v963 + 144);
    if (*(_DWORD *)(v963 + 148) <= v80)
    {
      sub_1ACBFF5AC(v963, 84, 1, 1, 0, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)(v963 + 144) = v80 + 1;
      v81 = *(_QWORD *)(v963 + 136) + 40 * v80;
      *(_DWORD *)v81 = 84;
      *(_QWORD *)(v81 + 4) = 0x100000001;
      *(_QWORD *)(v81 + 12) = 0;
      *(_QWORD *)(v81 + 28) = 0;
      *(_QWORD *)(v81 + 20) = 0;
      *(_DWORD *)(v81 + 36) = 0;
    }
  }
  v86 = v967;
  if ((_QWORD)v967)
  {
    v87 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v86);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v86);
      v86 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_1081;
      v87 = &xmmword_1ECD3B1D0;
    }
    (*v87)(v86);
  }
LABEL_1081:
  v84 = (uint64_t)v956;
  sub_1ACBE0F9C(v956, v952);
  v504 = __s;
  if (__s)
    goto LABEL_1082;
}

_BYTE *sub_1ACB653C0(uint64_t a1, const void *a2, size_t a3)
{
  _BYTE *v5;
  _BYTE *v6;

  if (!a2)
    return 0;
  v5 = (_BYTE *)sub_1ACBE1124(a1, a3 + 1);
  v6 = v5;
  if (v5)
  {
    memcpy(v5, a2, a3);
    v6[a3] = 0;
  }
  return v6;
}

uint64_t sub_1ACB6541C(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v10 = *(_DWORD *)(a1 + 44);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(v11 + 113);
  if ((*(_BYTE *)(v11 + 114) & 1) != 0 || (result = sub_1ACB654E0(a1, 0, a2, 0, a5, a6, a7, a8), !(_DWORD)result))
  {
    v13 = *(unsigned int *)(a1 + 40);
    if ((int)v13 >= 2)
    {
      while (1)
      {
        v14 = v13 - 1;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * (v13 - 1) + 24) + 114) & 1) == 0)
        {
          result = sub_1ACB654E0(a1, (v13 - 1), a2, 0, a5, a6, a7, a8);
          if ((_DWORD)result)
            break;
        }
        v13 = v14;
        if ((unint64_t)(v14 + 1) <= 2)
          goto LABEL_4;
      }
    }
    else
    {
LABEL_4:
      result = 0;
      if ((v10 & 1) == 0)
        *(_DWORD *)(a1 + 44) &= ~1u;
    }
  }
  return result;
}

uint64_t sub_1ACB654E0(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  const char *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t i;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  char v68;
  int v69;
  unsigned __int8 v70;
  int *v71;
  int v72;
  int v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int v88;
  char v89;
  char **v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  char v95;
  _QWORD v96[2];
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  _QWORD v102[8];

  v9 = a2;
  v102[6] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 197) = 1;
  if ((_DWORD)a2 == 1)
    v11 = "sqlite_temp_master";
  else
    v11 = "sqlite_master";
  v12 = *(_DWORD *)(a1 + 44);
  v101 = 0;
  v102[0] = "table";
  v102[1] = v11;
  v102[2] = v11;
  v13 = v12 | 0xFFFFFFBF;
  v102[3] = "1";
  v102[4] = "CREATE TABLE x(type text,name text,tbl_name text,rootpage int,sql text)";
  v102[5] = 0;
  v97 = a2;
  v98 = 0;
  v96[0] = a1;
  v96[1] = a3;
  v99 = a4;
  v100 = 0;
  sub_1ACB65D80((int *)v96, a2, v102, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 44) &= v13;
  v21 = v98;
  if (!v98)
  {
    v28 = *(_QWORD *)(a1 + 32);
    v29 = v9;
    v30 = v28 + 32 * v9;
    v32 = *(_QWORD *)(v30 + 8);
    v31 = (uint64_t *)(v30 + 8);
    v21 = v32;
    if (!v32)
    {
      *(_WORD *)(*(_QWORD *)(v28 + 56) + 114) |= 1u;
      goto LABEL_28;
    }
    if (!*(_BYTE *)(v21 + 17)
      || (++*(_DWORD *)(v21 + 20), *(_BYTE *)(v21 + 18))
      || (sub_1ACBECF6C(v21), (v21 = *v31) != 0))
    {
      if (*(_BYTE *)(v21 + 16))
      {
        v33 = 1;
        goto LABEL_24;
      }
    }
    if (!*(_BYTE *)(v21 + 17) && *(_BYTE *)(v21 + 16))
    {
      v33 = 0;
      goto LABEL_24;
    }
    v37 = sub_1ACBED080(v21, 0, 0);
    v21 = v37;
    if ((int)v37 > 100)
    {
      if ((_DWORD)v37 == 101)
      {
        v38 = "no more rows available";
        goto LABEL_141;
      }
      if ((_DWORD)v37 == 516)
      {
        v38 = "abort due to ROLLBACK";
        goto LABEL_141;
      }
    }
    else
    {
      if (!(_DWORD)v37)
      {
        v33 = 0;
        v21 = *v31;
LABEL_24:
        v34 = *(_QWORD *)(v21 + 8);
        v35 = *(unsigned __int8 *)(v21 + 17);
        if (*(_BYTE *)(v21 + 17))
        {
          ++*(_DWORD *)(v21 + 20);
          if (*(_BYTE *)(v21 + 18))
          {
            v35 = 1;
          }
          else
          {
            sub_1ACBECF6C(v21);
            v35 = *(unsigned __int8 *)(v21 + 17);
          }
        }
        v93 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 24) + 80) + 40);
        if (v35)
        {
          v41 = *(_DWORD *)(v21 + 20) - 1;
          *(_DWORD *)(v21 + 20) = v41;
          if (!v41)
            sub_1ACBED048(v21);
        }
        v42 = *v31;
        v43 = *(_QWORD *)(*v31 + 8);
        v44 = *(unsigned __int8 *)(*v31 + 17);
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v42 + 20);
          if (*(_BYTE *)(v42 + 18))
          {
            v44 = 1;
          }
          else
          {
            sub_1ACBECF6C(v42);
            v44 = *(unsigned __int8 *)(v42 + 17);
          }
        }
        v92 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 80) + 44);
        if (v44)
        {
          v45 = *(_DWORD *)(v42 + 20) - 1;
          *(_DWORD *)(v42 + 20) = v45;
          if (!v45)
            sub_1ACBED048(v42);
        }
        v46 = *v31;
        v47 = *(_QWORD *)(*v31 + 8);
        v48 = *(unsigned __int8 *)(*v31 + 17);
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v46 + 20);
          if (*(_BYTE *)(v46 + 18))
          {
            v48 = 1;
          }
          else
          {
            sub_1ACBECF6C(v46);
            v48 = *(unsigned __int8 *)(v46 + 17);
          }
        }
        v91 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 24) + 80) + 48);
        if (v48)
        {
          v49 = *(_DWORD *)(v46 + 20) - 1;
          *(_DWORD *)(v46 + 20) = v49;
          if (!v49)
            sub_1ACBED048(v46);
        }
        v50 = *v31;
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v50 + 20);
          if (*(_BYTE *)(v50 + 18) || (sub_1ACBECF6C(v50), *(_BYTE *)(v50 + 17)))
          {
            v51 = *(_DWORD *)(v50 + 20) - 1;
            *(_DWORD *)(v50 + 20) = v51;
            if (!v51)
              sub_1ACBED048(v50);
          }
        }
        v52 = *v31;
        v53 = *(_QWORD *)(*v31 + 8);
        v54 = *(unsigned __int8 *)(*v31 + 17);
        v90 = a3;
        v95 = v33;
        v94 = v31;
        if (*(_BYTE *)(*v31 + 17))
        {
          ++*(_DWORD *)(v52 + 20);
          if (*(_BYTE *)(v52 + 18))
          {
            v54 = 1;
          }
          else
          {
            sub_1ACBECF6C(v52);
            v54 = *(unsigned __int8 *)(v52 + 17);
          }
        }
        v55 = *(unsigned __int8 **)(*(_QWORD *)(v53 + 24) + 80);
        v56 = v55[56];
        v57 = v55[57];
        v58 = v55[58];
        v59 = v55[59];
        if (v54)
        {
          v60 = *(_DWORD *)(v52 + 20) - 1;
          *(_DWORD *)(v52 + 20) = v60;
          if (!v60)
            sub_1ACBED048(v52);
        }
        v61 = v28 + 32 * v9;
        v64 = *(_QWORD *)(v61 + 24);
        v63 = (uint64_t *)(v61 + 24);
        v62 = v64;
        if ((*(_BYTE *)(a1 + 51) & 2) != 0)
        {
          v66 = 0;
          v67 = 0;
          *(_DWORD *)v62 = 0;
        }
        else
        {
          v65 = (v56 << 24) | (v57 << 16);
          v66 = bswap32(v92);
          v67 = bswap32(v91);
          *(_DWORD *)v62 = bswap32(v93);
          if (v65 | (v58 << 8) | v59)
          {
            v68 = v95;
            if (v9 || (v69 = *(_DWORD *)(a1 + 44), (v69 & 0x40) != 0))
            {
              v79 = v59 & 3;
              v29 = v9;
              if (v79 != *(unsigned __int8 *)(a1 + 100))
              {
                v80 = (char *)sub_1ACBE1124(a1, 0x44uLL);
                v75 = v80;
                if (v80)
                {
                  strcpy(v80, "attached databases must use the same text encoding as main database");
                  v20 = *(double *)"same text encoding as main database";
                }
LABEL_113:
                if (*v90)
                  sub_1ACBE0F9C((_QWORD *)a1, *v90);
                *v90 = v75;
                v21 = 1;
                if ((v68 & 1) != 0)
                  goto LABEL_146;
                goto LABEL_123;
              }
            }
            else
            {
              v70 = v59 & 3;
              if ((v59 & 3) == 0)
                v70 = 1;
              if (*(int *)(a1 + 208) >= 1 && (v69 & 4) == 0 && *(unsigned __int8 *)(a1 + 100) != v70)
              {
                v21 = 6;
                v29 = v9;
                if ((v95 & 1) != 0)
                  goto LABEL_146;
                goto LABEL_123;
              }
              sub_1ACBFC560(a1, v70);
              v62 = *v63;
              v29 = v9;
            }
LABEL_83:
            v71 = (int *)(v62 + 116);
            v72 = *(_DWORD *)(v62 + 116);
            *(_BYTE *)(v62 + 113) = *(_BYTE *)(a1 + 100);
            if (!v72)
            {
              if (v67 == 0x80000000)
                v73 = 0x7FFFFFFF;
              else
                v73 = -v67;
              if (v67 >= 0)
                v73 = v67;
              if (!v73)
                v73 = 128;
              *v71 = v73;
              sub_1ACBE9680(*v94, v71);
              v62 = *v63;
            }
            *(_BYTE *)(v62 + 112) = v66;
            if ((_BYTE)v66)
            {
              if (v66 >= 5u)
              {
                v74 = (char *)sub_1ACBE1124(a1, 0x18uLL);
                v75 = v74;
                if (v74)
                {
                  v20 = *(double *)"unsupported file format";
                  strcpy(v74, "unsupported file format");
                }
                goto LABEL_113;
              }
            }
            else
            {
              *(_BYTE *)(v62 + 112) = 1;
            }
            if (!v9 && v66 >= 4)
              *(_QWORD *)(a1 + 48) &= ~2uLL;
            LODWORD(v101) = *(_DWORD *)(*(_QWORD *)(*v94 + 8) + 64);
            v76 = (char *)sub_1ACB6DDD0(a1, "SELECT*FROM\"%w\".%s ORDER BY rowid", v14, v15, v16, v17, v18, v19, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v29));
            v77 = *(_QWORD *)(a1 + 528);
            *(_QWORD *)(a1 + 528) = 0;
            v78 = sqlite3_exec((sqlite3 *)a1, v76, (int (__cdecl *)(void *, int, char **, char **))sub_1ACB65D80, v96, 0);
            *(_QWORD *)(a1 + 528) = v77;
            if (v78)
              v21 = v78;
            else
              v21 = v98;
            if (v76)
              sub_1ACBE0F9C((_QWORD *)a1, v76);
            if ((_DWORD)v21)
            {
              if (!*(_BYTE *)(a1 + 103))
              {
                if ((*(_BYTE *)(a1 + 51) & 8) == 0 || (_DWORD)v21 == 7)
                {
LABEL_122:
                  if ((v68 & 1) != 0)
                  {
LABEL_146:
                    v87 = *(_QWORD *)(v28 + 32 * v29 + 8);
                    if (*(_BYTE *)(v87 + 17))
                    {
                      v88 = *(_DWORD *)(v87 + 20) - 1;
                      *(_DWORD *)(v87 + 20) = v88;
                      if (!v88)
                        sub_1ACBED048(v87);
                    }
                    goto LABEL_5;
                  }
LABEL_123:
                  v81 = *(_QWORD *)(v28 + 32 * v29 + 8);
                  if (*(_BYTE *)(v81 + 17))
                  {
                    ++*(_DWORD *)(v81 + 20);
                    if (!*(_BYTE *)(v81 + 18))
                      sub_1ACBECF6C(v81);
                  }
                  if (!sub_1ACB8F578(v81, 0, v20))
                    sub_1ACB8F9C8(v81, 0);
                  if (*(_BYTE *)(v81 + 17))
                  {
                    v82 = *(_DWORD *)(v81 + 20) - 1;
                    *(_DWORD *)(v81 + 20) = v82;
                    if (!v82)
                      sub_1ACBED048(v81);
                  }
                  goto LABEL_146;
                }
LABEL_133:
                v21 = 0;
                v83 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v29 + 24);
                *(_WORD *)(v83 + 114) |= 1u;
                if ((v68 & 1) != 0)
                  goto LABEL_146;
                goto LABEL_123;
              }
            }
            else
            {
              sub_1ACB9062C(a1, v9);
              if (!*(_BYTE *)(a1 + 103))
                goto LABEL_133;
            }
            sub_1ACBC4F54(a1);
            v28 = *(_QWORD *)(a1 + 32);
            v21 = 7;
            goto LABEL_122;
          }
        }
        v29 = v9;
        v68 = v95;
        goto LABEL_83;
      }
      if ((_DWORD)v37 == 100)
      {
        v38 = "another row available";
LABEL_141:
        v84 = strlen(v38) + 1;
        v85 = (char *)sub_1ACBE1124(a1, v84);
        v86 = v85;
        if (v85)
          memcpy(v85, v38, v84);
        if (*a3)
          sub_1ACBE0F9C((_QWORD *)a1, *a3);
        *a3 = v86;
        goto LABEL_146;
      }
    }
    if (v37 > 0x1Cu || ((0x1410004uLL >> v37) & 1) != 0)
      v38 = "unknown error";
    else
      v38 = off_1E5C74AE8[v37];
    goto LABEL_141;
  }
LABEL_5:
  if ((_DWORD)v21)
  {
    if (((_DWORD)v21 == 3082 || (_DWORD)v21 == 7) && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      if (*(int *)(a1 + 220) >= 1)
        *(_DWORD *)(a1 + 424) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      v39 = *(_QWORD *)(a1 + 344);
      if (v39)
      {
        sub_1ACBCB308(v39, "out of memory", v14, v15, v16, v17, v18, v19, v89);
        for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
    if ((v9 & 0x80000000) == 0)
    {
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_QWORD *)(v22 + 32 * v9 + 24);
      *(_WORD *)(v23 + 114) |= 8u;
      *(_WORD *)(*(_QWORD *)(v22 + 56) + 114) |= 8u;
      *(_DWORD *)(a1 + 44) &= ~0x10u;
    }
    if (!*(_DWORD *)(a1 + 72))
    {
      v24 = *(_DWORD *)(a1 + 40);
      if (v24 >= 1)
      {
        v25 = 0;
        v26 = 24;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v26);
          if ((*(_WORD *)(v27 + 114) & 8) != 0)
          {
            sub_1ACBF62B4(v27);
            v24 = *(_DWORD *)(a1 + 40);
          }
          ++v25;
          v26 += 32;
        }
        while (v25 < v24);
      }
    }
  }
LABEL_28:
  *(_BYTE *)(a1 + 197) = 0;
  return v21;
}

uint64_t sub_1ACB65D80(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  sqlite3_stmt *pStmt;

  v8 = *(_QWORD *)a1;
  v9 = a1[4];
  *(_DWORD *)(*(_QWORD *)a1 + 44) |= 0x40u;
  if (!a3)
    return 0;
  v11 = (uint64_t)a1;
  ++a1[7];
  if (*(_BYTE *)(v8 + 103))
  {
    sub_1ACBFC988((uint64_t)a1, a3, 0, a4, a5, a6, a7, a8);
    return 1;
  }
  v13 = (unsigned __int8 *)a3[3];
  if (!v13)
    goto LABEL_27;
  v14 = (_BYTE *)a3[4];
  if (!v14)
  {
    v25 = (unsigned __int8 *)a3[1];
    if (v25)
      goto LABEL_21;
LABEL_27:
    v29 = a3;
    v28 = 0;
LABEL_30:
    sub_1ACBFC988((uint64_t)a1, v29, v28, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((*v14 & 0xDF) == 0x43 && (v14[1] & 0xDF) == 0x52)
  {
    v15 = *(_BYTE *)(v8 + 196);
    *(_BYTE *)(v8 + 196) = v9;
    v16 = *v13;
    if ((unint64_t)(v16 - 58) >= 0xFFFFFFFFFFFFFFF6)
    {
      v36 = 0;
      v37 = v13 + 1;
      while (1)
      {
        v36 = 10 * v36 + (char)v16 - 48;
        if (v36 > 0x100000000)
          break;
        v38 = *v37++;
        LODWORD(v16) = v38;
        if ((unint64_t)v38 - 58 < 0xFFFFFFFFFFFFFFF6)
        {
          if ((_DWORD)v16)
            v39 = 0;
          else
            v39 = v36;
          *(_DWORD *)(v8 + 192) = v39;
          if ((_DWORD)v16)
            goto LABEL_10;
          v40 = a1[8];
          if (v40 < v36)
          {
            if (v40)
              goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
    }
    *(_DWORD *)(v8 + 192) = 0;
LABEL_10:
    if (byte_1ECD3B149)
      sub_1ACBFC988((uint64_t)a1, a3, "invalid rootpage", a4, a5, a6, a7, a8);
LABEL_12:
    *(_BYTE *)(v8 + 198) &= ~1u;
    *(_QWORD *)(v8 + 200) = a3;
    pStmt = 0;
    sub_1ACB5C8C8(v8, a3[4], 0xFFFFFFFFLL, 0, 0, &pStmt, 0);
    v24 = *(_DWORD *)(v8 + 80);
    *(_BYTE *)(v8 + 196) = v15;
    if (v24 && (*(_BYTE *)(v8 + 198) & 1) == 0)
    {
      if (v24 > *(_DWORD *)(v11 + 20))
        *(_DWORD *)(v11 + 20) = v24;
      if (v24 != 9)
      {
        if (v24 == 7)
        {
          sub_1ACBC741C(v8, v17, v18, v19, v20, v21, v22, v23);
        }
        else if (v24 != 6)
        {
          v41 = (char *)sqlite3_errmsg((sqlite3 *)v8);
          sub_1ACBFC988(v11, a3, v41, v42, v43, v44, v45, v46);
        }
      }
    }
    *(_QWORD *)(v8 + 200) = off_1EECACBA0;
    sqlite3_finalize(pStmt);
    return 0;
  }
  v25 = (unsigned __int8 *)a3[1];
  if (!v25 || *v14)
    goto LABEL_27;
LABEL_21:
  v26 = sub_1ACBFCA9C(v8, v25, *(unsigned __int8 **)(*(_QWORD *)(v8 + 32) + 32 * v9));
  if (!v26)
  {
    v28 = "orphan index";
    goto LABEL_29;
  }
  v27 = *v13;
  if ((unint64_t)(v27 - 58) >= 0xFFFFFFFFFFFFFFF6)
  {
    v31 = 0;
    v32 = v13 + 1;
    while (1)
    {
      v31 = 10 * v31 + (char)v27 - 48;
      if (v31 > 0x100000000)
        break;
      v33 = *v32++;
      LODWORD(v27) = v33;
      if ((unint64_t)v33 - 58 < 0xFFFFFFFFFFFFFFF6)
      {
        if ((_DWORD)v27)
          v34 = 0;
        else
          v34 = v31;
        *(_DWORD *)(v26 + 88) = v34;
        if (!(_DWORD)v27 && v34 >= 2 && v34 <= *(_DWORD *)(v11 + 32))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 16);
          if (!v35)
            return 0;
          while (v35 == v26 || *(_DWORD *)(v35 + 88) != v34)
          {
            v12 = 0;
            v35 = *(_QWORD *)(v35 + 40);
            if (!v35)
              return v12;
          }
        }
        goto LABEL_24;
      }
    }
  }
  *(_DWORD *)(v26 + 88) = 0;
LABEL_24:
  v12 = byte_1ECD3B149;
  if (byte_1ECD3B149)
  {
    v28 = "invalid rootpage";
LABEL_29:
    a1 = (int *)v11;
    v29 = a3;
    goto LABEL_30;
  }
  return v12;
}

void sub_1ACB66080(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  int v10;
  int v11;
  int v12;
  _OWORD *v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  _DWORD *v22;
  uint64_t v23;
  const char *v24;
  const void *v25;
  size_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  int i;
  uint64_t v31;
  int v32;
  unsigned int v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD, _QWORD, char *, _QWORD, uint64_t, _QWORD);
  int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  const char *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  BOOL v137;
  int v138;
  char v139;
  unsigned __int8 *v140;
  int v141;

  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = (_OWORD *)a3;
  v16 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 197))
  {
    if (*(_DWORD *)(v16 + 192) == 1)
    {
      v141 = a6;
      v17 = *(unsigned __int8 *)(v16 + 196);
      if ((_DWORD)v17 == 1)
        v18 = 19;
      else
        v18 = 14;
      v19 = (char *)sub_1ACBE1124(v16, v18);
      if (!v19)
      {
        *(_OWORD *)(a1 + 264) = *a2;
        return;
      }
      v20 = v19;
      if ((_DWORD)v17 == 1)
        v21 = "sqlite_temp_master";
      else
        v21 = "sqlite_master";
      memcpy(v19, v21, v18);
      *(_OWORD *)(a1 + 264) = *a2;
      goto LABEL_41;
    }
    if (*(_DWORD *)(a3 + 8))
    {
      v24 = "corrupt database";
      goto LABEL_19;
    }
    v22 = (_DWORD *)(a3 + 8);
  }
  else
  {
    v22 = (_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a3 + 8))
    {
      v23 = sub_1ACC0DF84(*(_QWORD *)a1, (uint64_t)a2);
      if ((v23 & 0x80000000) != 0)
      {
        sub_1ACBCB308(a1, "unknown database %T", a3, a4, a5, a6, a7, a8, (char)a2);
        return;
      }
      if (!v12)
        goto LABEL_23;
      goto LABEL_14;
    }
  }
  v23 = *(unsigned __int8 *)(v16 + 196);
  v13 = a2;
  if (!(_DWORD)a4)
  {
LABEL_23:
    v17 = v23;
    goto LABEL_24;
  }
LABEL_14:
  v17 = 1;
  if ((_DWORD)v23 != 1 && *v22)
  {
    v24 = "temporary table name must be unqualified";
LABEL_19:
    sub_1ACBCB308(a1, v24, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
LABEL_24:
  v141 = v10;
  if (v13 && (v25 = *(const void **)v13) != 0)
  {
    v26 = *((unsigned int *)v13 + 2);
    v27 = (char *)sub_1ACBE1124(v16, v26 + 1);
    v20 = v27;
    if (v27)
    {
      memcpy(v27, v25, v26);
      v20[v26] = 0;
      v28 = *v20;
      if ((char)byte_1ACCB6548[*v20] < 0)
      {
        v29 = 0;
        if (v28 == 91)
          v28 = 93;
        for (i = 1; ; ++i)
        {
          v31 = i;
          v32 = v20[i];
          if (v32 == v28)
          {
            ++i;
            LOBYTE(v32) = v28;
            if (v20[v31 + 1] != v28)
              break;
          }
          v20[v29++] = v32;
        }
        v20[v29] = 0;
      }
    }
  }
  else
  {
    v20 = 0;
  }
  v33 = *(unsigned __int8 *)(a1 + 302);
  if (v33 > 3 || v33 == 2)
  {
    if (*(_QWORD *)a1)
    {
      v84 = sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL);
      if (!v84)
        goto LABEL_40;
    }
    else
    {
      v84 = sub_1ACB5D828(32);
      if (!v84)
        goto LABEL_40;
    }
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)(v84 + 16) = 0u;
    *(_QWORD *)v84 = v20;
    *(_OWORD *)(v84 + 8) = *v13;
    *(_QWORD *)(v84 + 24) = *(_QWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v84;
  }
LABEL_40:
  *(_OWORD *)(a1 + 264) = *v13;
  if (!v20)
    return;
LABEL_41:
  if (v11)
    v35 = "view";
  else
    v35 = "table";
  if (sub_1ACC0D9D8((_BYTE *)a1, v20, v35, v20, a5, a6, a7, a8))
    goto LABEL_45;
  if (*(_BYTE *)(v16 + 196) == 1)
    v41 = 1;
  else
    v41 = v12;
  v42 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 32 * v17);
  if (v41 == 1)
    v43 = "sqlite_temp_master";
  else
    v43 = "sqlite_master";
  v44 = *(_QWORD *)a1;
  v45 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
  if (v45 && !*(_BYTE *)(v44 + 197) && !*(_BYTE *)(a1 + 302))
  {
    v112 = v45(*(_QWORD *)(v44 + 536), 18, v43, 0, *(_QWORD *)(*(_QWORD *)(v16 + 32) + 32 * v17), *(_QWORD *)(a1 + 368));
    if (v112 == 1)
    {
LABEL_92:
      v113 = 23;
      v114 = "not authorized";
LABEL_100:
      sub_1ACBCB308(a1, v114, (uint64_t)v43, v36, v37, v38, v39, v40, v139);
      *(_DWORD *)(a1 + 24) = v113;
      goto LABEL_45;
    }
    if ((v112 & 0xFFFFFFFD) != 0)
      goto LABEL_99;
    if (v112)
      goto LABEL_45;
  }
  if (v141)
    goto LABEL_56;
  v85 = *(_QWORD *)a1;
  v86 = *(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 528);
  if (!v86 || *(_BYTE *)(v85 + 197) || *(_BYTE *)(a1 + 302))
    goto LABEL_56;
  v87 = v86(*(_QWORD *)(v85 + 536), byte_1ACCBA30E[2 * v11 + v41], v20, 0, v42, *(_QWORD *)(a1 + 368));
  if (v87 == 1)
    goto LABEL_92;
  if ((v87 & 0xFFFFFFFD) != 0)
  {
LABEL_99:
    v113 = 1;
    v114 = "authorizer malfunction";
    goto LABEL_100;
  }
  if (v87)
  {
LABEL_45:
    *(_BYTE *)(a1 + 29) = 1;
    sub_1ACBE0F9C((_QWORD *)v16, v20);
    return;
  }
LABEL_56:
  if (!*(_BYTE *)(a1 + 302))
  {
    v88 = *(unsigned __int8 **)(*(_QWORD *)(v16 + 32) + 32 * v17);
    v89 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 197))
    {
      v140 = *(unsigned __int8 **)(*(_QWORD *)(v16 + 32) + 32 * v17);
      v105 = sub_1ACB6541C(v89, (char **)(a1 + 8), (uint64_t)v43, v36, v37, v38, v39, v40);
      if (v105)
      {
        *(_DWORD *)(a1 + 24) = v105;
        goto LABEL_88;
      }
      v88 = v140;
      if (*(_BYTE *)(v89 + 111))
        *(_DWORD *)(v89 + 44) |= 0x10u;
    }
    v90 = v88;
    v91 = sub_1ACBD1B0C(v16, v20, v88);
    if (v91)
    {
      if (v9)
      {
        sub_1ACB7A4DC(a1, v17);
        sub_1ACC0DD18((uint64_t *)a1, v98, v99, v100, v101, v102, v103, v104);
      }
      else
      {
        v115 = "view";
        if (*(_BYTE *)(v91 + 63) != 2)
          v115 = "table";
        sub_1ACBCB308(a1, "%s %T already exists", v92, v93, v94, v95, v96, v97, (char)v115);
      }
      goto LABEL_45;
    }
    if (sub_1ACBFCA9C(v16, (unsigned __int8 *)v20, v90))
    {
      sub_1ACBCB308(a1, "there is already an index named %s", v106, v107, v108, v109, v110, v111, (char)v20);
      goto LABEL_45;
    }
  }
  v46 = sub_1ACBE1124(v16, 0x68uLL);
  if (!v46)
  {
    *(_DWORD *)(a1 + 24) = 7;
LABEL_88:
    ++*(_DWORD *)(a1 + 48);
    goto LABEL_45;
  }
  *(_QWORD *)(v46 + 96) = 0;
  *(_OWORD *)(v46 + 64) = 0u;
  *(_OWORD *)(v46 + 80) = 0u;
  *(_OWORD *)(v46 + 32) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_QWORD *)v46 = v20;
  *(_WORD *)(v46 + 52) = -1;
  *(_QWORD *)(v46 + 96) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 32 * v17 + 24);
  *(_DWORD *)(v46 + 44) = 1;
  *(_WORD *)(v46 + 58) = 200;
  *(_QWORD *)(a1 + 344) = v46;
  if (!*(_BYTE *)(v16 + 197))
  {
    v54 = sub_1ACBA8698((uint64_t *)a1, v47, v48, v49, v50, v51, v52, v53);
    if (v54)
    {
      v55 = v54;
      sub_1ACC0DDF0(a1, 1, v17);
      if (v141)
        sub_1ACC08CD4(v55, 170, v56, v57, v58, v59, v60, v61);
      v62 = *(_DWORD *)(a1 + 56);
      v63 = (v62 + 1);
      v64 = (v62 + 2);
      *(_DWORD *)(a1 + 128) = v63;
      *(_DWORD *)(a1 + 132) = v64;
      v65 = (v62 + 3);
      *(_DWORD *)(a1 + 56) = v65;
      sub_1ACB683F4(v55, 99, v17, v65, 2, v59, v60, v61);
      sub_1ACBCB690((_DWORD *)v55, v17);
      v74 = sub_1ACC08D28(v55, 16, v65, v66, v67, v68, v69, v70);
      if ((*(_QWORD *)(v16 + 48) & 2) != 0)
        v75 = 1;
      else
        v75 = 4;
      sub_1ACB683F4(v55, 100, v17, 2, v75, v71, v72, v73);
      sub_1ACB683F4(v55, 100, v17, 5, *(unsigned __int8 *)(v16 + 100), v76, v77, v78);
      if (*(_BYTE *)(*(_QWORD *)v55 + 103))
        v83 = &byte_1EECAD280;
      else
        v83 = (char *)(*(_QWORD *)(v55 + 136) + 40 * v74);
      *((_DWORD *)v83 + 2) = *(_DWORD *)(v55 + 144);
      if (v141 | v11)
        sub_1ACBFF554(v55, 71, 0, v64, v79, v80, v81, v82);
      else
        *(_DWORD *)(a1 + 200) = sub_1ACB683F4(v55, 147, v17, v64, 1, v80, v81, v82);
      sub_1ACC0DE64(a1, v17, v116, v117, v118, v119, v120, v121);
      sub_1ACBFF554(v55, 127, 0, v63, v122, v123, v124, v125);
      sub_1ACBA86CC((uint64_t *)v55, 77, 6, v65, 0, (uint64_t)&unk_1ACCBA312, 0xFFFFFFFFLL, v126);
      sub_1ACB683F4(v55, 128, 0, v65, v63, v127, v128, v129);
      v136 = *(_DWORD *)(v55 + 144);
      v137 = __OFSUB__(v136, 1);
      v138 = v136 - 1;
      if (v138 < 0 == v137)
        *(_WORD *)(*(_QWORD *)(v55 + 136) + 40 * v138 + 2) = 8;
      sub_1ACC08CD4(v55, 122, v130, v131, v132, v133, v134, v135);
    }
  }
}

void sub_1ACB66794(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  char v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  size_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int i;
  uint64_t v53;
  int v54;
  unsigned __int8 v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t j;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  int k;
  uint64_t v75;
  int v76;
  char v77;
  _QWORD *v78;
  char v79;
  char v80;
  char v81;

  v8 = *(_QWORD *)(a1 + 344);
  if (!v8)
    return;
  v10 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 144) <= *(__int16 *)(v8 + 54))
  {
    sub_1ACBCB308(a1, "too many columns on %s", a3, (uint64_t)a4, a5, a6, a7, a8, *(_QWORD *)v8);
    return;
  }
  v11 = a4;
  v12 = a3;
  v13 = a2;
  if (*(unsigned __int8 *)(a1 + 302) <= 1u && a3 >= 2 && (char)byte_1ACCB6548[*a2] < 0)
  {
    v14 = (a3 - 1);
    if (v14 < 2)
    {
LABEL_10:
      v12 = (a3 - 2) | a3 & 0xFFFFFFFF00000000;
      v13 = a2 + 1;
    }
    else
    {
      v15 = 1;
      while (((char)byte_1ACCB6548[a2[v15]] & 0x80000000) == 0)
      {
        if (v14 == ++v15)
          goto LABEL_10;
      }
    }
  }
  if (a5 < 0x10)
  {
LABEL_63:
    if (a5 < 3)
      goto LABEL_109;
    goto LABEL_64;
  }
  if (!a4)
    goto LABEL_64;
  v16 = (a5 - 6);
  v17 = &a4[v16];
  v18 = a4[v16];
  if (!a4[v16])
  {
    v20 = "always";
    goto LABEL_38;
  }
  if ((v18 & 0xFFFFFFDF) != 0x41)
  {
    v18 += (unint64_t)byte_1ACCB6333;
    v20 = "always";
LABEL_37:
    LODWORD(v18) = *(unsigned __int8 *)v18;
    goto LABEL_38;
  }
  v18 = v17[1];
  if (!v17[1])
  {
    v20 = "lways";
    goto LABEL_38;
  }
  if ((v18 & 0xFFFFFFDF) != 0x4C)
  {
    v18 += (unint64_t)byte_1ACCB6333;
    v20 = "lways";
    goto LABEL_37;
  }
  v18 = v17[2];
  if (!v17[2])
  {
    v20 = "ways";
    goto LABEL_38;
  }
  if ((v18 & 0xFFFFFFDF) != 0x57)
  {
    v18 += (unint64_t)byte_1ACCB6333;
    v20 = "ways";
    goto LABEL_37;
  }
  v18 = v17[3];
  if (!v17[3])
  {
    v20 = "ays";
    goto LABEL_38;
  }
  if ((v18 & 0xFFFFFFDF) != 0x41)
  {
    v18 += (unint64_t)byte_1ACCB6333;
    v20 = "ays";
    goto LABEL_37;
  }
  v18 = v17[4];
  if (!v17[4])
  {
    v20 = "ys";
    goto LABEL_38;
  }
  if ((v18 & 0xFFFFFFDF) != 0x59)
  {
    v18 += (unint64_t)byte_1ACCB6333;
    v20 = "ys";
    goto LABEL_37;
  }
  v19 = v17[5];
  if ((_DWORD)v19)
  {
    if ((v19 & 0xFFFFFFDF) == 0x53)
      goto LABEL_39;
    v18 = (unint64_t)&byte_1ACCB6333[v19];
    v20 = "s";
    goto LABEL_37;
  }
  LODWORD(v18) = 0;
  v20 = "s";
LABEL_38:
  if ((_DWORD)v18 == byte_1ACCB6333[*v20])
  {
LABEL_39:
    v21 = 0;
    v22 = a5 - 14;
    v23 = a4 - 1;
    do
    {
      if (v16 == v21)
        goto LABEL_108;
      v24 = byte_1ACCB6548[v23[v16]];
      ++v21;
      --v23;
    }
    while ((v24 & 1) != 0);
    if ((a5 - 5 - v21) > 8)
    {
      v25 = &a4[(v16 - v21 - 8)];
      v26 = *v25;
      if (*v25)
      {
        if ((v26 & 0xFFFFFFDF) == 0x47)
        {
          v26 = v25[1];
          if (!v25[1])
          {
            v28 = "enerated";
            goto LABEL_103;
          }
          if ((v26 & 0xFFFFFFDF) == 0x45)
          {
            v26 = v25[2];
            if (!v25[2])
            {
              v28 = "nerated";
              goto LABEL_103;
            }
            if ((v26 & 0xFFFFFFDF) == 0x4E)
            {
              v26 = v25[3];
              if (!v25[3])
              {
                v28 = "erated";
                goto LABEL_103;
              }
              if ((v26 & 0xFFFFFFDF) == 0x45)
              {
                v26 = v25[4];
                if (!v25[4])
                {
                  v28 = "rated";
                  goto LABEL_103;
                }
                if ((v26 & 0xFFFFFFDF) == 0x52)
                {
                  v26 = v25[5];
                  if (!v25[5])
                  {
                    v28 = "ated";
                    goto LABEL_103;
                  }
                  if ((v26 & 0xFFFFFFDF) == 0x41)
                  {
                    v26 = v25[6];
                    if (!v25[6])
                    {
                      v28 = "ted";
                      goto LABEL_103;
                    }
                    if ((v26 & 0xFFFFFFDF) == 0x54)
                    {
                      v26 = v25[7];
                      if (v25[7])
                      {
                        if ((v26 & 0xFFFFFFDF) == 0x45)
                        {
                          v27 = v25[8];
                          if (!(_DWORD)v27)
                          {
                            LODWORD(v26) = 0;
                            v28 = "d";
                            goto LABEL_103;
                          }
                          if ((v27 & 0xFFFFFFDF) == 0x44)
                          {
LABEL_104:
                            LODWORD(a5) = a5 - 13 - v21;
                            v37 = (v22 - v21);
                            while (v37)
                            {
                              v38 = &a4[v37--];
                              LODWORD(a5) = a5 - 1;
                              if ((byte_1ACCB6548[*(v38 - 1)] & 1) == 0)
                                goto LABEL_63;
                            }
LABEL_108:
                            LODWORD(a5) = 0;
LABEL_109:
                            v80 = 65;
                            v81 = 0;
                            v36 = 1;
                            goto LABEL_110;
                          }
                          v26 = (unint64_t)&byte_1ACCB6333[v27];
                          v28 = "d";
                        }
                        else
                        {
                          v26 += (unint64_t)byte_1ACCB6333;
                          v28 = "ed";
                        }
                        goto LABEL_102;
                      }
                      v28 = "ed";
LABEL_103:
                      if ((_DWORD)v26 == byte_1ACCB6333[*v28])
                        goto LABEL_104;
                      LODWORD(a5) = a5 - 5 - v21;
                      goto LABEL_64;
                    }
                    v26 += (unint64_t)byte_1ACCB6333;
                    v28 = "ted";
                  }
                  else
                  {
                    v26 += (unint64_t)byte_1ACCB6333;
                    v28 = "ated";
                  }
                }
                else
                {
                  v26 += (unint64_t)byte_1ACCB6333;
                  v28 = "rated";
                }
              }
              else
              {
                v26 += (unint64_t)byte_1ACCB6333;
                v28 = "erated";
              }
            }
            else
            {
              v26 += (unint64_t)byte_1ACCB6333;
              v28 = "nerated";
            }
          }
          else
          {
            v26 += (unint64_t)byte_1ACCB6333;
            v28 = "enerated";
          }
        }
        else
        {
          v26 += (unint64_t)byte_1ACCB6333;
          v28 = "generated";
        }
LABEL_102:
        LODWORD(v26) = *(unsigned __int8 *)v26;
        goto LABEL_103;
      }
      v28 = "generated";
      goto LABEL_103;
    }
    LODWORD(a5) = a5 - 5 - v21;
    goto LABEL_63;
  }
LABEL_64:
  if ((char)byte_1ACCB6548[*a4] < 0)
  {
    v29 = 1;
    while (((char)byte_1ACCB6548[a4[v29]] & 0x80000000) == 0)
    {
      if ((_DWORD)a5 - 1 == ++v29)
      {
        LODWORD(a5) = a5 - 2;
        v11 = a4 + 1;
        break;
      }
    }
  }
  v30 = 0;
  while (1)
  {
    if ((_DWORD)a5 != byte_1ACCBA35A[v30])
      goto LABEL_72;
    if ((a5 & 0x80000000) != 0)
      break;
    v32 = off_1EECACBA0[v30];
    if (v32)
    {
      if (!(_DWORD)a5)
        goto LABEL_81;
      v33 = a5 + 1;
      v34 = v11;
      while (1)
      {
        v35 = *v34;
        if (!*v34)
          break;
        LODWORD(v35) = byte_1ACCB6333[v35];
        v31 = byte_1ACCB6333[*v32];
        if ((_DWORD)v35 != v31)
          goto LABEL_71;
        ++v34;
        ++v32;
        if (--v33 <= 1)
          goto LABEL_81;
      }
      v31 = byte_1ACCB6333[*v32];
LABEL_71:
      if ((_DWORD)v35 == v31)
        goto LABEL_81;
    }
LABEL_72:
    if (++v30 == 6)
      goto LABEL_109;
  }
  sub_1ACBBE20C(35843);
LABEL_81:
  LODWORD(a5) = 0;
  v80 = byte_1ACCBA354[v30];
  v81 = v30 + 1;
  if ((v30 & 0x7FFFFFFB) == 1)
    v36 = 5;
  else
    v36 = 1;
LABEL_110:
  v79 = v36;
  v39 = a5;
  v40 = v12 + (unint64_t)a5;
  if ((_DWORD)a5)
    ++v40;
  if (v10)
  {
    v41 = (unsigned __int8 *)sub_1ACBE1124(v10, v40 + 1);
    if (!v41)
      return;
LABEL_116:
    v42 = *(unsigned __int8 *)(a1 + 302);
    if (v42 > 3 || v42 == 2)
    {
      v67 = *(_QWORD *)a1 ? sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL) : sub_1ACB5D828(32);
      if (v67)
      {
        *(_OWORD *)v67 = 0u;
        *(_OWORD *)(v67 + 16) = 0u;
        *(_QWORD *)v67 = v41;
        *(_QWORD *)(v67 + 8) = v13;
        *(_QWORD *)(v67 + 16) = v12;
        *(_QWORD *)(v67 + 24) = *(_QWORD *)(a1 + 408);
        *(_QWORD *)(a1 + 408) = v67;
      }
    }
    memcpy(v41, v13, v12);
    v41[v12] = 0;
    v49 = *v41;
    if ((char)byte_1ACCB6548[*v41] < 0)
    {
      v50 = 0;
      if (v49 == 91)
        v51 = 93;
      else
        v51 = *v41;
      for (i = 1; ; ++i)
      {
        v53 = i;
        v54 = v41[i];
        if (v54 == v51)
        {
          ++i;
          LOBYTE(v54) = v51;
          if (v41[v53 + 1] != v51)
            break;
        }
        v41[v50++] = v54;
      }
      v41[v50] = 0;
      v49 = *v41;
    }
    v55 = 0;
    if (v49)
    {
      v56 = v41 + 1;
      do
      {
        v55 += byte_1ACCB6333[v49];
        v57 = *v56++;
        v49 = v57;
      }
      while (v57);
    }
    v58 = *(unsigned __int16 *)(v8 + 54);
    if (*(__int16 *)(v8 + 54) <= 0)
    {
      v60 = *(_QWORD **)(v8 + 8);
    }
    else
    {
      v59 = 0;
      v60 = *(_QWORD **)(v8 + 8);
      do
      {
        if (BYTE3(v60[2 * v59 + 1]) == v55)
        {
          for (j = 0; ; ++j)
          {
            v62 = v41[j];
            v63 = *(unsigned __int8 *)(v60[2 * v59] + j);
            if ((_DWORD)v62 == (_DWORD)v63)
            {
              if (!v41[j])
              {
                sub_1ACBCB308(a1, "duplicate column name: %s", v43, v44, v45, v46, v47, v48, (char)v41);
                goto LABEL_140;
              }
            }
            else if (byte_1ACCB6333[v62] != byte_1ACCB6333[v63])
            {
              break;
            }
          }
        }
        ++v59;
      }
      while (v59 != v58);
    }
    v64 = 16 * (__int16)v58;
    v65 = v64 + 16;
    if (v60)
    {
      if (*(_QWORD *)(v10 + 512) > (unint64_t)v60)
      {
        v66 = (__int16)v58;
        if (*(_QWORD *)(v10 + 496) <= (unint64_t)v60)
        {
          if (v65 < 0x81)
            goto LABEL_158;
        }
        else if (*(_QWORD *)(v10 + 504) <= (unint64_t)v60 && v65 <= *(unsigned __int16 *)(v10 + 438))
        {
          goto LABEL_158;
        }
      }
      v68 = sub_1ACBE11D0(v10, v60, v65);
    }
    else
    {
      v68 = sub_1ACBE1124(v10, v64 + 16);
    }
    v60 = (_QWORD *)v68;
    if (!v68)
    {
LABEL_140:
      sub_1ACBE0F9C((_QWORD *)v10, v41);
      return;
    }
    v66 = *(__int16 *)(v8 + 54);
LABEL_158:
    *(_QWORD *)(v8 + 8) = v60;
    v69 = (unsigned __int8 **)&v60[2 * v66];
    *v69 = v41;
    v69[1] = 0;
    *((_BYTE *)v69 + 11) = v55;
    if ((_DWORD)v39)
    {
      v70 = &v41[strlen((const char *)v41) & 0x3FFFFFFF];
      v71 = v70 + 1;
      memcpy(v70 + 1, v11, v39);
      v70[v39 + 1] = 0;
      if ((char)byte_1ACCB6548[v70[1]] < 0)
      {
        v72 = 0;
        if (v70[1] == 91)
          v73 = 93;
        else
          v73 = v70[1];
        for (k = 1; ; ++k)
        {
          v75 = k;
          v76 = v71[k];
          if (v76 == v73)
          {
            ++k;
            LOBYTE(v76) = v73;
            if (v71[v75 + 1] != v73)
              break;
          }
          v71[v72++] = v76;
        }
        v71[v72] = 0;
      }
      v77 = sub_1ACC01D8C(v70 + 1, (uint64_t)&v60[2 * v66]);
      v78 = &v60[2 * v66];
      *((_BYTE *)v78 + 9) = v77;
      *((_WORD *)v78 + 7) |= 4u;
    }
    else
    {
      *((_BYTE *)v69 + 9) = v80;
      *((_BYTE *)v69 + 8) = (_BYTE)v69[1] & 0xF | (16 * v81);
      *((_BYTE *)v69 + 10) = v79;
    }
    ++*(_WORD *)(v8 + 54);
    ++*(_WORD *)(v8 + 56);
    *(_DWORD *)(a1 + 112) = 0;
  }
  else
  {
    v41 = (unsigned __int8 *)sub_1ACB5D828(v40 + 1);
    if (v41)
      goto LABEL_116;
  }
}

void sub_1ACB67074(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v15;
  _BYTE *v16;
  const char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  const char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  BOOL v74;
  __int16 v75;
  uint64_t i;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t j;
  unint64_t v85;
  __int16 v86;
  uint64_t v87;
  int v88;
  __int16 *v89;
  int v90;
  unsigned __int16 v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char v186;
  _DWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;

  if (!(a3 | a5))
    return;
  v10 = *(_QWORD *)(a1 + 344);
  if (!v10)
    return;
  v11 = a5;
  v12 = a4;
  v13 = (_DWORD *)a3;
  v15 = *(_QWORD *)a1;
  if (a5)
  {
    v16 = (_BYTE *)(v15 + 197);
    if (*(_BYTE *)(v15 + 197))
    {
LABEL_5:
      v17 = &byte_1ACCBEAEE;
LABEL_6:
      sub_1ACBCB308(a1, v17, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
  }
  else
  {
    v18 = *(char **)v10;
    v19 = strrchr(*(char **)v10, 95);
    if (v19)
    {
      v20 = v19;
      *v19 = 0;
      v21 = sub_1ACBD1B0C(v15, v18, 0);
      *v20 = 95;
      if (v21)
      {
        if (*(_BYTE *)(v21 + 63) == 1 && sub_1ACC0E114(v15, v21, v18))
          *(_DWORD *)(v10 + 48) |= 0x1000u;
      }
    }
    v16 = (_BYTE *)(v15 + 197);
    if (*(_BYTE *)(v15 + 197))
    {
      v22 = *(_DWORD *)(v15 + 192);
      if (*(_BYTE *)(v10 + 63))
      {
        if (v22)
          goto LABEL_5;
        *(_DWORD *)(v10 + 40) = 0;
      }
      else
      {
        *(_DWORD *)(v10 + 40) = v22;
        if (v22 == 1)
          *(_DWORD *)(v10 + 48) |= 1u;
      }
    }
  }
  if ((v12 & 0x10000) != 0)
  {
    *(_DWORD *)(v10 + 48) |= 0x10000u;
    v23 = *(__int16 *)(v10 + 54);
    if (v23 >= 1)
    {
      v24 = 0;
      v25 = 0;
      while (1)
      {
        v26 = *(_QWORD *)(v10 + 8);
        v27 = v26 + v24;
        v28 = *(unsigned __int8 *)(v26 + v24 + 8);
        if (v28 <= 0xF)
          break;
        if ((v28 & 0xF0) == 0x10)
          *(_BYTE *)(v26 + v24 + 9) = 65;
        if ((*(_WORD *)(v26 + v24 + 14) & 1) != 0 && (v28 & 0xF) == 0 && v25 != *(__int16 *)(v10 + 52))
        {
          *(_BYTE *)(v27 + 8) = v28 & 0xF0 | 2;
          *(_DWORD *)(v10 + 48) |= 0x800u;
          LOWORD(v23) = *(_WORD *)(v10 + 54);
        }
        ++v25;
        v24 += 16;
        if (v25 >= (__int16)v23)
          goto LABEL_31;
      }
      if ((*(_WORD *)(v27 + 14) & 4) == 0)
      {
        sub_1ACBCB308(a1, "missing datatype for %s.%s", a3, a4, a5, a6, a7, a8, *(_QWORD *)v10);
        return;
      }
      strlen(*(const char **)v27);
      v186 = *(_QWORD *)v10;
      v58 = "unknown datatype for %s.%s: \"%s\"";
      goto LABEL_136;
    }
  }
LABEL_31:
  if ((v12 & 0x80) != 0)
  {
    v30 = *(_DWORD *)(v10 + 48);
    if ((v30 & 8) != 0)
    {
      v17 = "AUTOINCREMENT not allowed on WITHOUT ROWID tables";
      goto LABEL_6;
    }
    if ((v30 & 4) == 0)
    {
      sub_1ACBCB308(a1, "PRIMARY KEY missing on table %s", a3, a4, a5, a6, a7, a8, *(_QWORD *)v10);
      return;
    }
    *(_DWORD *)(v10 + 48) = v30 | 0x280;
    sub_1ACC0E2FC((uint64_t *)a1, v10);
  }
  v31 = *(_QWORD *)(v10 + 96);
  if (v31)
  {
    v32 = (_QWORD *)v15;
    v33 = (uint64_t *)(*(_QWORD *)(v15 + 32) + 24);
    LODWORD(v34) = -1;
    do
    {
      v35 = *v33;
      v33 += 4;
      v34 = (v34 + 1);
    }
    while (v35 != v31);
  }
  else
  {
    v32 = (_QWORD *)v15;
    v34 = 4294934528;
  }
  v36 = *(int **)(v10 + 32);
  if (v36)
  {
    v198 = 0;
    v197 = 0u;
    v196 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    v200 = 0u;
    v201 = 0u;
    v199 = 0u;
    LODWORD(v199) = 1;
    *((_QWORD *)&v200 + 1) = *(_QWORD *)v10;
    *((_QWORD *)&v201 + 1) = v10;
    DWORD2(v203) = -1;
    v37 = *(_QWORD *)(v10 + 96);
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56);
    v194 = a1;
    v195 = &v199;
    v39 = v37 == v38 ? 65540 : 327684;
    DWORD2(v197) = v39;
    sub_1ACC0F8AC((uint64_t)&v194, v36, a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(a1 + 48))
    {
      v36 = *(int **)(v10 + 32);
      if (v36)
        sub_1ACC010B0(v32, v36);
      *(_QWORD *)(v10 + 32) = 0;
    }
  }
  v40 = *(__int16 *)(v10 + 54);
  if ((*(_BYTE *)(v10 + 48) & 0x60) != 0)
  {
    v188 = a2;
    if (v40 < 1)
      goto LABEL_76;
    v187 = v13;
    v189 = v11;
    v192 = (uint64_t)v32;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = *(_QWORD *)(v10 + 8) + v41;
      if ((*(_WORD *)(v44 + 14) & 0x60) != 0)
      {
        v45 = *(unsigned __int16 *)(v44 + 12);
        if (v45 && !*(_BYTE *)(v10 + 63) && (v52 = *(_DWORD **)(v10 + 80)) != 0 && *v52 >= v45)
          v46 = *(_QWORD *)&v52[6 * (v45 - 1) + 2];
        else
          v46 = 0;
        v198 = 0;
        v196 = 0u;
        v197 = 0u;
        v204 = 0u;
        v205 = 0u;
        v202 = 0u;
        v203 = 0u;
        v200 = 0u;
        v201 = 0u;
        v199 = 0u;
        LODWORD(v199) = 1;
        *((_QWORD *)&v200 + 1) = *(_QWORD *)v10;
        *((_QWORD *)&v201 + 1) = v10;
        DWORD2(v203) = -1;
        v47 = *(_QWORD *)(v10 + 96);
        v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56);
        v194 = a1;
        v195 = &v199;
        if (v47 == v48)
          v49 = 65544;
        else
          v49 = 327688;
        DWORD2(v197) = v49;
        if (sub_1ACC0F790((uint64_t)&v194, v46, a3, a4, a5, a6, a7, a8))
        {
          v50 = *(_QWORD *)(v10 + 8);
          v51 = sub_1ACBE1124(v192, 0x50uLL);
          if (v51)
          {
            *(_OWORD *)(v51 + 32) = 0u;
            *(_OWORD *)(v51 + 48) = 0u;
            *(_OWORD *)(v51 + 64) = 0u;
            *(_OWORD *)v51 = 0u;
            *(_OWORD *)(v51 + 16) = 0u;
            *(_BYTE *)v51 = 121;
            *(_WORD *)(v51 + 52) = -1;
            *(_DWORD *)(v51 + 40) = 1;
          }
          sub_1ACC0EA70((uint64_t *)a1, v10, v50 + v41, (unsigned __int8 *)v51);
        }
      }
      else
      {
        ++v43;
      }
      ++v42;
      v41 += 16;
    }
    while (v42 < *(__int16 *)(v10 + 54));
    v13 = v187;
    v32 = (_QWORD *)v192;
    v11 = v189;
    if (!v43)
    {
LABEL_76:
      v58 = "must have at least one non-generated column";
LABEL_136:
      sub_1ACBCB308(a1, v58, a3, a4, a5, a6, a7, a8, v186);
      return;
    }
    LOWORD(v40) = *(_WORD *)(v10 + 54);
    a2 = v188;
  }
  v53 = (uint64_t)v32;
  if ((__int16)v40 < 1)
  {
    v56 = 0;
    goto LABEL_83;
  }
  v54 = *(_QWORD *)(v10 + 8);
  v55 = (unsigned __int16)v40;
  if ((unsigned __int16)v40 == 1)
  {
    v56 = 0;
    v57 = *(_QWORD *)(v10 + 8);
LABEL_81:
    v67 = v55 + 1;
    v68 = (unsigned __int8 *)(v57 + 10);
    do
    {
      v69 = *v68;
      v68 += 16;
      v56 += v69;
      --v67;
    }
    while (v67 > 1);
    goto LABEL_83;
  }
  v59 = 0;
  v60 = 0;
  v61 = (unsigned __int16)v40;
  v62 = (unsigned __int16)v40 & 0xFFFE;
  v55 = (unsigned __int16)v40 - (v40 & 0xFFFE);
  v57 = v54 + 16 * v62;
  v63 = (unsigned __int8 *)(v54 + 26);
  v64 = v62;
  do
  {
    v65 = *(v63 - 16);
    v66 = *v63;
    v63 += 32;
    v59 += v65;
    v60 += v66;
    v64 -= 2;
  }
  while (v64);
  v56 = v60 + v59;
  if (v62 != v61)
    goto LABEL_81;
LABEL_83:
  v70 = 4 * (v56 + (*(unsigned __int16 *)(v10 + 52) >> 15));
  if (v70 >= 8)
  {
    v72 = 40;
    if (v70 >= 0x100)
    {
      v73 = v70;
      do
      {
        v72 += 40;
        v70 = v73 >> 4;
        v74 = v73 > 0xFFF;
        v73 >>= 4;
      }
      while (v74);
    }
    if (v70 < 0x10)
    {
      LOBYTE(v71) = v70;
    }
    else
    {
      do
      {
        v72 += 10;
        v71 = v70 >> 1;
        v74 = v70 > 0x1F;
        v70 >>= 1;
      }
      while (v74);
    }
    goto LABEL_93;
  }
  if ((_DWORD)v70)
  {
    LOBYTE(v71) = 8 * (v56 + (*(unsigned __int16 *)(v10 + 52) >> 15));
    v72 = 30;
LABEL_93:
    v75 = v72 + word_1ACCBD832[v71 & 7] - 10;
    goto LABEL_94;
  }
  v75 = 0;
LABEL_94:
  *(_WORD *)(v10 + 60) = v75;
  for (i = *(_QWORD *)(v10 + 16); i; i = *(_QWORD *)(i + 40))
  {
    v87 = *(unsigned __int16 *)(i + 96);
    if (*(_WORD *)(i + 96))
    {
      v88 = 0;
      v89 = *(__int16 **)(i + 8);
      do
      {
        v92 = *v89++;
        v91 = v92;
        if (v92 < 0)
          v90 = 1;
        else
          v90 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(i + 24) + 8) + 16 * v91 + 10);
        v88 += v90;
        --v87;
      }
      while (v87);
      v93 = (4 * v88);
      if (v93 < 8)
      {
        if (!(_DWORD)v93)
        {
          LOWORD(v87) = 0;
          goto LABEL_108;
        }
        LOBYTE(v85) = 2 * v93;
        v86 = 30;
      }
      else
      {
        v86 = 40;
        if (v93 >= 0x100)
        {
          v94 = v93;
          do
          {
            v86 += 40;
            v93 = v94 >> 4;
            v74 = v94 > 0xFFF;
            v94 >>= 4;
          }
          while (v74);
        }
        LOBYTE(v85) = v93;
        if (v93 >= 0x10)
        {
          do
          {
            v86 += 10;
            v85 = v93 >> 1;
            v74 = v93 > 0x1F;
            v93 >>= 1;
          }
          while (v74);
        }
      }
      LOWORD(v87) = v86 + word_1ACCBD832[v85 & 7] - 10;
    }
LABEL_108:
    *(_WORD *)(i + 92) = v87;
  }
  if (*v16)
    goto LABEL_96;
  v95 = *(_QWORD *)(a1 + 16);
  if (v95)
    goto LABEL_128;
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  v95 = sub_1ACBCB4C8((uint64_t *)a1, (uint64_t)v36, a3, a4, a5, a6, a7, a8);
  if (v95)
  {
LABEL_128:
    sub_1ACC08D28(v95, 122, 0, a4, a5, a6, a7, a8);
    v102 = "VIEW";
    if (!*(_BYTE *)(v10 + 63))
      v102 = "TABLE";
    if (!v11)
    {
      v190 = 0;
      v103 = sub_1ACB6DDD0(v53, "CREATE %s %.*s", v96, v97, v98, v99, v100, v101, (char)v102);
      goto LABEL_140;
    }
    *(_QWORD *)&v201 = 0;
    v199 = 0u;
    v200 = 0u;
    if (*(_BYTE *)(a1 + 302))
    {
      *(_DWORD *)(a1 + 24) = 1;
      ++*(_DWORD *)(a1 + 48);
      return;
    }
    v190 = v11;
    v193 = (_QWORD *)v53;
    v130 = *(_DWORD *)(a1 + 56);
    v131 = (v130 + 1);
    *(_DWORD *)(a1 + 56) = v130 + 3;
    v132 = *(_QWORD *)(a1 + 168);
    if (!v132)
      v132 = a1;
    *(_BYTE *)(v132 + 33) = 1;
    sub_1ACB683F4(v95, 113, 1, *(unsigned int *)(a1 + 132), v34, v99, v100, v101);
    v136 = *(_DWORD *)(v95 + 144);
    if (v136 >= 1)
      *(_WORD *)(*(_QWORD *)(v95 + 136) + 40 * (v136 - 1) + 2) = 16;
    *(_DWORD *)(a1 + 52) = 2;
    sub_1ACB683F4(v95, 11, (v130 + 1), 0, (v136 + 1), v133, v134, v135);
    if (!*(_DWORD *)(a1 + 48))
    {
      v137 = sub_1ACC0EC20(a1, v190, 65);
      if (v137)
      {
        v143 = *(_WORD *)(v137 + 54);
        *(_WORD *)(v10 + 56) = v143;
        *(_WORD *)(v10 + 54) = v143;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v137 + 8);
        *(_WORD *)(v137 + 54) = 0;
        *(_QWORD *)(v137 + 8) = 0;
        if (v193[102] || (v144 = *(_DWORD *)(v137 + 44) - 1, (*(_DWORD *)(v137 + 44) = v144) == 0))
          sub_1ACC00BE8(v193, (_QWORD *)v137);
        LOBYTE(v199) = 13;
        *((_QWORD *)&v200 + 1) = 0;
        DWORD1(v199) = v130 + 1;
        *((_QWORD *)&v199 + 1) = 0;
        LODWORD(v200) = 0;
        sub_1ACB6EA04((_QWORD **)a1, v190, (uint64_t)&v199, v138, v139, v140, v141, v142);
        if (!*(_DWORD *)(a1 + 48))
        {
          v191 = v130 + 3;
          v151 = (v130 + 2);
          sub_1ACC0ED48(v95, v131, v145, v146, v147, v148, v149, v150);
          if (*(_BYTE *)(*(_QWORD *)v95 + 103))
            v157 = &byte_1EECAD280;
          else
            v157 = (char *)(*(_QWORD *)(v95 + 136) + 40 * v136);
          *((_DWORD *)v157 + 2) = *(_DWORD *)(v95 + 144);
          v158 = sub_1ACC08D28(v95, 12, DWORD1(v199), v152, v153, v154, v155, v156);
          sub_1ACB683F4(v95, 97, HIDWORD(v199), v200, v151, v159, v160, v161);
          sub_1ACC0EDC4((_QWORD **)v95, v10, 0, v162, v163, v164, v165, v166);
          sub_1ACBFF554(v95, 127, 1, v191, v167, v168, v169, v170);
          sub_1ACB683F4(v95, 128, 1, v151, v191, v171, v172, v173);
          sub_1ACC08E48(v95, v158, v174, v175, v176, v177, v178, v179);
          if (*(_BYTE *)(*(_QWORD *)v95 + 103))
            v185 = &byte_1EECAD280;
          else
            v185 = (char *)(*(_QWORD *)(v95 + 136) + 40 * (int)v158);
          *((_DWORD *)v185 + 2) = *(_DWORD *)(v95 + 144);
          sub_1ACC08D28(v95, 122, 1, v180, v181, v182, v183, v184);
          v53 = (uint64_t)v193;
          v103 = sub_1ACC0F0C8((uint64_t)v193, v10);
LABEL_140:
          v110 = v103;
          sub_1ACBB60F8((uint64_t *)a1, "UPDATE %Q.sqlite_master SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q WHERE rowid=#%d", v104, v105, v106, v107, v108, v109, *(_QWORD *)(*(_QWORD *)(v53 + 32) + 32 * (int)v34));
          if (v110)
            sub_1ACBE0F9C((_QWORD *)v53, v110);
          sub_1ACC0F410((uint64_t *)a1, v34, v111, v112, v113, v114, v115, v116);
          if ((*(_BYTE *)(v10 + 48) & 8) != 0 && !*(_BYTE *)(a1 + 302))
          {
            v123 = *(_QWORD *)(v53 + 32);
            if (!*(_QWORD *)(*(_QWORD *)(v123 + 32 * (int)v34 + 24) + 104))
              sub_1ACBB60F8((uint64_t *)a1, "CREATE TABLE %Q.sqlite_sequence(name,seq)", v117, v118, v119, v120, v121, v122, *(_QWORD *)(v123 + 32 * (int)v34));
          }
          v124 = sub_1ACB6DDD0(v53, "tbl_name='%q' AND type!='trigger'", v117, v118, v119, v120, v121, v122, *(_QWORD *)v10);
          sub_1ACC0F480(v95, v34, (uint64_t)v124, 0, v125, v126, v127, v128);
          v11 = v190;
          if (!*(_BYTE *)(v53 + 197))
          {
LABEL_147:
            if (!v11 && !*(_BYTE *)(v10 + 63))
            {
              if (*a2)
                v129 = a2;
              else
                v129 = v13;
              *(_DWORD *)(v10 + 64) = *v129 - *(_DWORD *)(a1 + 264) + 13;
            }
            return;
          }
LABEL_96:
          if (sub_1ACB57390(*(_QWORD *)(v10 + 96) + 8, *(unsigned __int8 **)v10, v10))
          {
            if (!*(_BYTE *)(v53 + 103) && !*(_BYTE *)(v53 + 104))
            {
              *(_BYTE *)(v53 + 103) = 1;
              if (*(int *)(v53 + 220) >= 1)
                *(_DWORD *)(v53 + 424) = 1;
              ++*(_DWORD *)(v53 + 432);
              *(_WORD *)(v53 + 436) = 0;
              v83 = *(_QWORD *)(v53 + 344);
              if (v83)
              {
                sub_1ACBCB308(v83, "out of memory", v77, v78, v79, v80, v81, v82, v186);
                for (j = *(_QWORD *)(v53 + 344); ; ++*(_DWORD *)(j + 48))
                {
                  *(_DWORD *)(j + 24) = 7;
                  j = *(_QWORD *)(j + 256);
                  if (!j)
                    break;
                }
              }
            }
            return;
          }
          *(_QWORD *)(a1 + 344) = 0;
          *(_DWORD *)(v53 + 44) |= 1u;
          if (!strcmp(*(const char **)v10, "sqlite_sequence"))
            *(_QWORD *)(*(_QWORD *)(v10 + 96) + 104) = v10;
          goto LABEL_147;
        }
      }
    }
  }
}

void sub_1ACB67C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  _QWORD *i;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  if (*(_BYTE *)(a1 + 30))
    return;
  v9 = *(_QWORD *)a1;
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(v9 + 103))
    {
      v10 = 7;
      goto LABEL_95;
    }
    return;
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    if (*(_BYTE *)(v9 + 197))
      goto LABEL_94;
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(v9 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v11 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v11)
    {
      *(_DWORD *)(a1 + 24) = 1;
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_91;
      goto LABEL_93;
    }
  }
  if (*(_BYTE *)(a1 + 219))
  {
    v12 = *(unsigned int **)(a1 + 200);
    if (v12[47])
    {
      v13 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v13)
      {
        sub_1ACBFF5AC(v11, 83, 0, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v13 + 1;
        v14 = *(_QWORD *)(v11 + 136) + 40 * v13;
        *(_BYTE *)v14 = 83;
        *(_OWORD *)(v14 + 1) = 0u;
        *(_OWORD *)(v14 + 17) = 0u;
        *(_QWORD *)(v14 + 32) = 0;
      }
      v15 = v12[46];
      v16 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v16)
      {
        v16 = sub_1ACBFF5AC(v11, 36, v15, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v16 + 1;
        v17 = *(_QWORD *)(v11 + 136) + 40 * v16;
        *(_DWORD *)v17 = 36;
        *(_DWORD *)(v17 + 4) = v15;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
      }
      v18 = v12[48];
      if ((int)v12[47] < 1)
      {
        v19 = 0;
      }
      else
      {
        v19 = 0;
        do
        {
          v21 = v12[46];
          v22 = (v18 + v19);
          v23 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) > v23)
          {
            *(_DWORD *)(v11 + 144) = v23 + 1;
            v20 = *(_QWORD *)(v11 + 136) + 40 * v23;
            *(_DWORD *)v20 = 94;
            *(_DWORD *)(v20 + 4) = v21;
            *(_DWORD *)(v20 + 8) = v19;
            *(_DWORD *)(v20 + 12) = v22;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0;
            *(_QWORD *)(v20 + 16) = 0;
          }
          else
          {
            sub_1ACBFF5AC(v11, 94, v21, v19, v22, a6, a7, a8);
          }
          v19 = (v19 + 1);
        }
        while ((int)v19 < (int)v12[47]);
      }
      v24 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v24)
      {
        sub_1ACBFF5AC(v11, 84, v18, v19, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v24 + 1;
        v25 = *(_QWORD *)(v11 + 136) + 40 * v24;
        *(_DWORD *)v25 = 84;
        *(_DWORD *)(v25 + 4) = v18;
        *(_DWORD *)(v25 + 8) = v19;
        *(_QWORD *)(v25 + 12) = 0;
        *(_QWORD *)(v25 + 28) = 0;
        *(_QWORD *)(v25 + 20) = 0;
        *(_DWORD *)(v25 + 36) = 0;
      }
      v26 = v12[46];
      v27 = (v16 + 1);
      v28 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v28)
      {
        sub_1ACBFF5AC(v11, 39, v26, v27, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v28 + 1;
        v29 = *(_QWORD *)(v11 + 136) + 40 * v28;
        *(_DWORD *)v29 = 39;
        *(_DWORD *)(v29 + 4) = v26;
        *(_DWORD *)(v29 + 8) = v27;
        *(_QWORD *)(v29 + 12) = 0;
        *(_QWORD *)(v29 + 28) = 0;
        *(_QWORD *)(v29 + 20) = 0;
        *(_DWORD *)(v29 + 36) = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)v11 + 103))
        v30 = &byte_1EECAD280;
      else
        v30 = (char *)(*(_QWORD *)(v11 + 136) + 40 * v16);
      *((_DWORD *)v30 + 2) = *(_DWORD *)(v11 + 144);
    }
  }
  v31 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v31)
  {
    sub_1ACBFF5AC(v11, 70, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v31 + 1;
    v32 = *(_QWORD *)(v11 + 136) + 40 * v31;
    *(_BYTE *)v32 = 70;
    *(_OWORD *)(v32 + 1) = 0u;
    *(_OWORD *)(v32 + 17) = 0u;
    *(_QWORD *)(v32 + 32) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)v11 + 103))
    v33 = &byte_1EECAD280;
  else
    v33 = *(char **)(v11 + 136);
  v34 = 0;
  v35 = 0;
  *((_DWORD *)v33 + 2) = *(_DWORD *)(v11 + 144);
  do
  {
    v36 = 1 << v35;
    if ((*(_DWORD *)(a1 + 124) & (1 << v35)) == 0)
      goto LABEL_45;
    *(_DWORD *)(v11 + 272) |= v36;
    if (v34 != 32 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 32) + v34 + 8) + 17))
      *(_DWORD *)(v11 + 276) |= v36;
    v37 = *(unsigned int **)(*(_QWORD *)(v9 + 32) + v34 + 24);
    v38 = (*(_DWORD *)(a1 + 120) >> v35) & 1;
    v39 = *v37;
    a6 = v37[1];
    v40 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v40)
    {
      sub_1ACBFF7F0(v11, 2, v35, v38, v39, a6, a7, a8);
      if (*(_BYTE *)(v9 + 197))
        goto LABEL_45;
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v40 + 1;
      v41 = *(_QWORD *)(v11 + 136) + 40 * v40;
      *(_DWORD *)v41 = 64770;
      *(_DWORD *)(v41 + 4) = v35;
      *(_DWORD *)(v41 + 8) = v38;
      *(_DWORD *)(v41 + 12) = v39;
      *(_DWORD *)(v41 + 16) = a6;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      if (*(_BYTE *)(v9 + 197))
        goto LABEL_45;
    }
    v42 = *(_DWORD *)(v11 + 144);
    v43 = __OFSUB__(v42, 1);
    v44 = v42 - 1;
    if (v44 < 0 == v43)
      *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * v44 + 2) = 1;
LABEL_45:
    ++v35;
    v34 += 32;
  }
  while (v35 < *(int *)(v9 + 40));
  if (*(int *)(a1 + 304) >= 1)
  {
    v45 = 0;
    do
    {
      for (i = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v45) + 80); i; i = (_QWORD *)i[5])
      {
        if (*i == v9)
          break;
      }
      sub_1ACBA86CC((uint64_t *)v11, 170, 0, 0, 0, (uint64_t)i, 4294967285, a8);
      ++v45;
    }
    while (v45 < *(int *)(a1 + 304));
  }
  *(_DWORD *)(a1 + 304) = 0;
  if (*(int *)(a1 + 148) > 0)
  {
    v47 = 0;
    v48 = 0;
    v49 = *(uint64_t **)(a1 + 16);
    do
    {
      sub_1ACBA86CC(v49, 169, *(unsigned int *)(*(_QWORD *)(a1 + 152) + v47), *(unsigned int *)(*(_QWORD *)(a1 + 152) + v47 + 4), *(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + v47 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 152) + v47 + 16), 0xFFFFFFFFLL, a8);
      ++v48;
      v47 += 24;
    }
    while (v48 < *(int *)(a1 + 148));
  }
  v50 = *(uint64_t **)(a1 + 160);
  if (v50)
  {
    v51 = *(_QWORD *)(a1 + 16);
    v52 = *(_QWORD *)a1;
    do
    {
      v53 = *((_DWORD *)v50 + 5);
      sub_1ACB7A514((_QWORD *)a1, 0, *((int *)v50 + 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 32) + 32 * *((int *)v50 + 4) + 24) + 104), 112, a6, a7, a8);
      sub_1ACBA86CC((uint64_t *)v51, 117, 0, (v53 - 1), 0, *(_QWORD *)v50[1], 0, v54);
      v59 = *(_DWORD *)(v51 + 144);
      if (v59 + 12 > *(_DWORD *)(v51 + 148))
      {
        if (sub_1ACBFF63C(v51, v55, v56, v57, v58, a6, a7, a8))
          break;
        v59 = *(_DWORD *)(v51 + 144);
      }
      v60 = 0;
      v61 = *(_QWORD *)(v51 + 136);
      v62 = v59;
      v63 = 40 * v59;
      v64 = v61 + v63;
      do
      {
        v65 = v61 + v63;
        v66 = byte_1ACCBA2D4[v60];
        *(_BYTE *)v65 = v66;
        v67 = (char)byte_1ACCBA2D4[v60 + 2];
        *(_DWORD *)(v65 + 4) = (char)byte_1ACCBA2D4[v60 + 1];
        *(_DWORD *)(v65 + 8) = v67;
        if ((byte_1ACCB6485[v66] & 1) != 0 && v67 >= 1)
          *(_DWORD *)(v65 + 8) = *(_DWORD *)(v51 + 144) + v67;
        *(_DWORD *)(v65 + 12) = (char)byte_1ACCBA2D4[v60 + 3];
        *(_BYTE *)(v65 + 1) = 0;
        *(_QWORD *)(v65 + 16) = 0;
        *(_WORD *)(v65 + 2) = 0;
        v63 += 40;
        v60 += 4;
      }
      while ((_DWORD)v60 != 48);
      *(_DWORD *)(v51 + 144) += 12;
      if (!v61)
        break;
      v68 = v61 + 40 * v62;
      *(_DWORD *)(v68 + 8) = v53;
      *(_DWORD *)(v68 + 12) = v53 + 2;
      *(_DWORD *)(v64 + 92) = v53;
      *(_DWORD *)(v64 + 124) = v53 - 1;
      *(_DWORD *)(v64 + 132) = v53;
      *(_WORD *)(v64 + 122) = 16;
      *(_DWORD *)(v64 + 168) = v53 + 1;
      *(_DWORD *)(v64 + 212) = v53;
      *(_DWORD *)(v64 + 244) = v53;
      *(_DWORD *)(v64 + 288) = v53 + 2;
      *(_DWORD *)(v64 + 284) = v53;
      *(_DWORD *)(v64 + 408) = v53;
      if (!*(_DWORD *)(a1 + 52))
        *(_DWORD *)(a1 + 52) = 1;
      v50 = (uint64_t *)*v50;
    }
    while (v50);
  }
  v69 = *(int **)(a1 + 88);
  if (v69)
  {
    *(_BYTE *)(a1 + 35) = 0;
    if (*v69 >= 1)
    {
      v70 = 0;
      v71 = (unsigned int *)(v69 + 7);
      do
      {
        sub_1ACC08D80(a1, *(unsigned __int8 **)(v71 - 5), *v71);
        ++v70;
        v71 += 6;
      }
      while (v70 < *v69);
    }
  }
  if (*(_BYTE *)(a1 + 219))
  {
    v72 = *(_QWORD *)(a1 + 200);
    v73 = *(unsigned int *)(v72 + 188);
    if ((_DWORD)v73)
    {
      v74 = *(unsigned int *)(v72 + 184);
      v75 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v75)
      {
        sub_1ACBFF5AC(v11, 118, v74, v73, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v75 + 1;
        v76 = *(_QWORD *)(v11 + 136) + 40 * v75;
        *(_DWORD *)v76 = 118;
        *(_DWORD *)(v76 + 4) = v74;
        *(_DWORD *)(v76 + 8) = v73;
        *(_QWORD *)(v76 + 12) = 0;
        *(_QWORD *)(v76 + 28) = 0;
        *(_QWORD *)(v76 + 20) = 0;
        *(_DWORD *)(v76 + 36) = 0;
      }
    }
  }
  v77 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v77)
  {
    sub_1ACBFF5AC(v11, 9, 0, 1, 0, a6, a7, a8);
    if (!*(_DWORD *)(a1 + 48))
      goto LABEL_93;
LABEL_91:
    v10 = 1;
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v77 + 1;
    v78 = *(_QWORD *)(v11 + 136) + 40 * v77;
    *(_DWORD *)v78 = 9;
    *(_QWORD *)(v78 + 4) = 0x100000000;
    *(_QWORD *)(v78 + 12) = 0;
    *(_QWORD *)(v78 + 28) = 0;
    *(_QWORD *)(v78 + 20) = 0;
    *(_DWORD *)(v78 + 36) = 0;
    if (*(_DWORD *)(a1 + 48))
      goto LABEL_91;
LABEL_93:
    sub_1ACB68444(v11, a1);
LABEL_94:
    v10 = 101;
  }
LABEL_95:
  *(_DWORD *)(a1 + 24) = v10;
}

uint64_t sub_1ACB683F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
    return sub_1ACBFF5AC(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 144) = result + 1;
  v10 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
  *(_BYTE *)v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 12) = a5;
  *(_BYTE *)(v10 + 1) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  return result;
}

double sub_1ACB68444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _DWORD *v67;
  double result;
  int v69;

  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a2 + 296);
  v6 = *(_DWORD *)(a2 + 56);
  v7 = *(int *)(a2 + 52);
  v69 = *(_DWORD *)(a2 + 136);
  v8 = v7 + v6;
  if (v7)
    v9 = 1;
  else
    v9 = v8 <= 0;
  if (v9)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = *(_QWORD *)(a1 + 136);
  v12 = 40 * *(_DWORD *)(a1 + 144);
  v13 = *(int *)(a2 + 60) - v12;
  sub_1ACBFFA0C((_QWORD *)a1, &v69);
  if (*(_BYTE *)(a2 + 32))
    v14 = 32 * (*(_BYTE *)(a2 + 33) != 0);
  else
    v14 = 0;
  v15 = v11 + v12;
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_WORD *)(a1 + 268) & 0xFFDF | v14;
  *(_WORD *)(a1 + 268) = v17;
  v18 = *(_BYTE *)(a2 + 301);
  if (v18)
  {
    if (v10 <= 10)
      v10 = 10;
    v17 = v17 & 0xFFF3 | (4 * (v18 & 3));
    *(_WORD *)(a1 + 260) = (4 * (v18 & 3)) ^ 0xC;
  }
  *(_WORD *)(a1 + 268) = v17 & 0xFFFC;
  v19 = (uint64_t)v10 << 6;
  v20 = v16 < v19;
  v21 = v15 + v16 - v19;
  if (v16 < v19)
  {
    v22 = (uint64_t)v10 << 6;
  }
  else
  {
    v16 -= v19;
    v22 = 0;
  }
  if (v20)
    v21 = 0;
  v23 = (uint64_t)(int)v5 << 6;
  v25 = v16 - v23;
  v24 = v16 < v23;
  v26 = v15 + v16 - v23;
  if (v16 >= v23)
  {
    v27 = 0;
  }
  else
  {
    v25 = v16;
    v27 = (uint64_t)(int)v5 << 6;
  }
  v28 = v27 + v22;
  if (v24)
    v29 = 0;
  else
    v29 = v26;
  v30 = 8 * v69;
  v32 = v25 - v30;
  v31 = v25 < v30;
  if (v25 >= v30)
    v33 = 0;
  else
    v33 = 8 * v69;
  v34 = v28 + v33;
  if (v25 >= v30)
    v25 -= v30;
  v35 = v15 + v32;
  if (v31)
    v35 = 0;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v35;
  v36 = 8 * v7;
  v37 = v25 < 8 * v7;
  v38 = v15 + v25 - 8 * v7;
  if (v25 >= 8 * v7)
    v39 = 0;
  else
    v39 = 8 * v7;
  if (v37)
    v38 = 0;
  *(_QWORD *)(a1 + 120) = v38;
  *(_QWORD *)(a1 + 128) = v29;
  v40 = v34 + v39;
  if (v34 + v39)
  {
    v41 = sub_1ACBE1124(v4, v34 + v39);
    *(_QWORD *)(a1 + 344) = v41;
    if (!*(_BYTE *)(v4 + 103))
    {
      v42 = v40 - v19;
      v43 = v41 + v40 - v19;
      if (v40 < v19)
      {
        v42 = v40;
        v43 = 0;
      }
      v44 = *(_QWORD *)(a1 + 104);
      v45 = *(_QWORD *)(a1 + 112);
      if (v44)
        v46 = v40;
      else
        v46 = v42;
      if (!v44)
        v44 = v43;
      v47 = v41 + v46 - v23;
      if (v46 >= v23)
        v48 = v46 - v23;
      else
        v48 = v46;
      if (v46 < v23)
        v47 = 0;
      v49 = *(_QWORD *)(a1 + 120);
      if (*(_QWORD *)(a1 + 128))
        v47 = *(_QWORD *)(a1 + 128);
      else
        v46 = v48;
      *(_QWORD *)(a1 + 128) = v47;
      v50 = v46 - v30;
      v51 = v41 + v46 - v30;
      if (v46 < v30)
      {
        v50 = v46;
        v51 = 0;
      }
      if (v45)
        v50 = v46;
      else
        v45 = v51;
      *(_QWORD *)(a1 + 104) = v44;
      *(_QWORD *)(a1 + 112) = v45;
      if (!v49)
      {
        if (v50 >= v36)
          v49 = v41 + v50 - v36;
        else
          v49 = 0;
      }
      *(_QWORD *)(a1 + 120) = v49;
LABEL_66:
      *(_DWORD *)(a1 + 40) = v7;
      *(_DWORD *)(a1 + 32) = v5;
      if ((int)v5 >= 1)
      {
        v52 = *(_QWORD *)(a1 + 128);
        v53 = v52;
        if ((_DWORD)v5 == 1)
          goto LABEL_71;
        v54 = v5;
        v55 = v5 & 0xFFFFFFFE;
        LODWORD(v5) = v5 - (v5 & 0xFFFFFFFE);
        v53 = v52 + (v55 << 6);
        v56 = v52 + 84;
        v57 = v55;
        do
        {
          *(_WORD *)(v56 - 64) = 1;
          *(_WORD *)v56 = 1;
          *(_QWORD *)(v56 - 60) = v4;
          *(_QWORD *)(v56 + 4) = v4;
          *(_DWORD *)(v56 - 52) = 0;
          *(_DWORD *)(v56 + 12) = 0;
          v56 += 128;
          v57 -= 2;
        }
        while (v57);
        if (v55 != v54)
        {
LABEL_71:
          v58 = v5 + 1;
          v59 = (_DWORD *)(v53 + 32);
          do
          {
            *((_WORD *)v59 - 6) = 1;
            *((_QWORD *)v59 - 1) = v4;
            *v59 = 0;
            v59 += 16;
            --v58;
          }
          while (v58 > 1);
        }
      }
      *(_DWORD *)(a1 + 36) = v10;
      if (v10 < 1)
        goto LABEL_81;
      v60 = *(_QWORD *)(a1 + 104);
      if (v10 == 1)
      {
        v61 = *(_QWORD *)(a1 + 104);
      }
      else
      {
        v62 = v10;
        v63 = v10 & 0xFFFFFFFE;
        v10 -= v63;
        v61 = v60 + (v63 << 6);
        v64 = v60 + 84;
        v65 = v63;
        do
        {
          *(_WORD *)(v64 - 64) = 0;
          *(_WORD *)v64 = 0;
          *(_QWORD *)(v64 - 60) = v4;
          *(_QWORD *)(v64 + 4) = v4;
          *(_DWORD *)(v64 - 52) = 0;
          *(_DWORD *)(v64 + 12) = 0;
          v64 += 128;
          v65 -= 2;
        }
        while (v65);
        if (v63 == v62)
          goto LABEL_81;
      }
      v66 = v10 + 1;
      v67 = (_DWORD *)(v61 + 32);
      do
      {
        *((_WORD *)v67 - 6) = 0;
        *((_QWORD *)v67 - 1) = v4;
        *v67 = 0;
        v67 += 16;
        --v66;
      }
      while (v66 > 1);
LABEL_81:
      bzero(*(void **)(a1 + 120), 8 * v7);
      goto LABEL_82;
    }
  }
  else if (!*(_BYTE *)(v4 + 103))
  {
    goto LABEL_66;
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
LABEL_82:
  *(_BYTE *)(a1 + 267) = 1;
  *(_DWORD *)(a1 + 52) = 0;
  *(_WORD *)(a1 + 264) = -254;
  *(_QWORD *)(a1 + 56) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

_QWORD *sub_1ACB687B4(_QWORD *result, int a2, uint64_t *a3)
{
  _QWORD **v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = (_QWORD **)result[1];
  switch(a2)
  {
    case 204:
    case 239:
    case 240:
    case 252:
      if (*a3)
        result = sub_1ACB7E704(*v3, *a3, 1);
      break;
    case 216:
    case 217:
    case 246:
    case 248:
    case 267:
    case 278:
    case 280:
    case 283:
    case 290:
    case 295:
    case 311:
      v4 = (unsigned __int8 *)*a3;
      if (*a3)
        goto LABEL_11;
      break;
    case 221:
    case 231:
    case 232:
    case 244:
    case 247:
    case 249:
    case 253:
    case 254:
    case 261:
    case 268:
    case 277:
    case 279:
    case 310:
      if (*a3)
        result = sub_1ACC010B0(*v3, (_QWORD *)*a3);
      break;
    case 238:
    case 245:
    case 256:
    case 257:
    case 262:
      result = sub_1ACB7E8B0(*v3, (_QWORD *)*a3);
      break;
    case 241:
      result = sub_1ACBF84C4(*v3, (_QWORD *)*a3);
      break;
    case 251:
    case 306:
      v5 = (_QWORD *)*a3;
      if (*a3)
      {
        v6 = *v3;
        do
        {
          v7 = (_QWORD *)v5[8];
          result = sub_1ACBF8400(v6, v5);
          v5 = v7;
        }
        while (v7);
      }
      break;
    case 263:
    case 270:
      v8 = (_QWORD *)*a3;
      if (*a3)
      {
        v9 = *v3;
        v10 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          v11 = 0;
          v12 = 1;
          do
          {
            v13 = (_QWORD *)v8[v12];
            if (v13)
            {
              sub_1ACBE0F9C(v9, v13);
              v10 = *(_DWORD *)v8;
            }
            ++v11;
            v12 += 2;
          }
          while (v11 < v10);
        }
        goto LABEL_31;
      }
      break;
    case 273:
    case 307:
    case 308:
    case 309:
    case 312:
      result = sub_1ACBF8400(*v3, (_QWORD *)*a3);
      break;
    case 286:
    case 291:
      result = sub_1ACB8EB98(*v3, *a3);
      break;
    case 288:
      v8 = (_QWORD *)a3[1];
      if (v8)
      {
        v9 = *v3;
        v14 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          v15 = 0;
          v16 = 1;
          do
          {
            v17 = (_QWORD *)v8[v16];
            if (v17)
            {
              sub_1ACBE0F9C(v9, v17);
              v14 = *(_DWORD *)v8;
            }
            ++v15;
            v16 += 2;
          }
          while (v15 < v14);
        }
LABEL_31:
        result = sub_1ACBF0674(v9, v8);
      }
      break;
    case 314:
    case 315:
    case 316:
      v4 = (unsigned __int8 *)a3[1];
      if (v4)
LABEL_11:
        result = sub_1ACBF8348(*v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_1ACB68994(_QWORD *a1, _QWORD *a2)
{
  int v2;

  if (a2)
  {
    if (a1[102])
      return sub_1ACC00BE8(a1, a2);
    v2 = *((_DWORD *)a2 + 11) - 1;
    *((_DWORD *)a2 + 11) = v2;
    if (!v2)
      return sub_1ACC00BE8(a1, a2);
  }
  return a1;
}

_QWORD *sub_1ACB689B8(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a2 && !*(_BYTE *)(a2 + 18))
  {
    v3 = result;
    sub_1ACB8EB98(result, *(_QWORD *)(a2 + 56));
    if (*(_QWORD *)a2)
      sub_1ACBE0F9C(v3, *(_QWORD **)a2);
    v4 = *(_QWORD **)(a2 + 8);
    if (v4)
      sub_1ACBE0F9C(v3, v4);
    v5 = *(unsigned __int8 **)(a2 + 24);
    if (v5)
      sub_1ACBF8348(v3, v5);
    v6 = *(_QWORD **)(a2 + 32);
    if (v6)
    {
      v7 = *(_DWORD *)v6;
      if (*(int *)v6 >= 1)
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = (_QWORD *)v6[v9];
          if (v10)
          {
            sub_1ACBE0F9C(v3, v10);
            v7 = *(_DWORD *)v6;
          }
          ++v8;
          v9 += 2;
        }
        while (v8 < v7);
      }
      sub_1ACBF0674(v3, v6);
    }
    return sub_1ACBE0F9C(v3, (_QWORD *)a2);
  }
  return result;
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  sqlite3_stmt *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double v5;

  v1 = pStmt;
  if (pStmt)
  {
    v2 = *(_QWORD *)pStmt;
    if (!*(_QWORD *)pStmt)
    {
      sqlite3_log(21, "API called with finalized prepared statement");
      return sub_1ACBBE20C(96976);
    }
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
      xmmword_1ECD3B1C0(v3);
    sub_1ACBC594C(v2, (uint64_t)v1);
    v4 = sub_1ACB68B58((_QWORD **)v1);
    sub_1ACBBE904((uint64_t)v1);
    if (v4 || *(_BYTE *)(v2 + 103))
      LODWORD(v1) = sub_1ACBF2990(v2, v4);
    else
      LODWORD(v1) = 0;
    sub_1ACBC5444(v2, v5);
  }
  return (int)v1;
}

uint64_t sub_1ACB68B58(_QWORD **a1)
{
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (uint64_t)*a1;
  if (*((_BYTE *)a1 + 267) == 2)
    sub_1ACB68C50((uint64_t)a1);
  if (((_DWORD)a1[6] & 0x80000000) == 0)
  {
    if (off_1ECD3B2C8)
    {
      if (!*((_DWORD *)a1 + 13))
      {
        v3 = (char *)a1[40];
        if (v3)
        {
          v4 = sub_1ACBC8B98(a1, v3);
          if (v4)
          {
            v5 = v4;
            off_1ECD3B2C8(qword_1ECD3B2D0, *a1, v4, 1);
            sub_1ACBE0F9C(*a1, v5);
          }
        }
      }
    }
    if (*(_QWORD *)(v2 + 416) || a1[21])
      sub_1ACBF09C8((uint64_t)a1);
    else
      *(_DWORD *)(v2 + 80) = *((_DWORD *)a1 + 13);
  }
  sqlite3_db_release_memory((sqlite3 *)v2);
  v6 = a1[21];
  if (v6)
  {
    sub_1ACBE0F9C((_QWORD *)v2, v6);
    a1[21] = 0;
  }
  a1[20] = 0;
  a1[29] = 0;
  *((_DWORD *)a1 + 57) = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  return (*(_DWORD *)(v2 + 88) & *((_DWORD *)a1 + 13));
}

uint64_t sub_1ACB68C50(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t i;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  _QWORD *j;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void (*v24)(_QWORD);
  _QWORD *v25;
  _QWORD *v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  int v39;
  char v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *k;
  int v45;
  char v46;
  int v47;
  int v48;
  uint64_t result;
  _QWORD *m;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  double v55;
  _QWORD *v56;
  _QWORD *n;
  uint64_t v58;
  __int16 v59;
  uint64_t (*v60)(void);
  int v61;
  char v62;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 103))
    *(_DWORD *)(a1 + 52) = 7;
  v3 = *(uint64_t **)(a1 + 352);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)v3[1];
    }
    while (v3);
    sub_1ACBF0C40(v4);
    *(_QWORD *)(a1 + 352) = 0;
    *(_DWORD *)(a1 + 368) = 0;
  }
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= 1)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 120) + 8 * i);
      if (v7)
      {
        sub_1ACBF0D2C((_QWORD **)a1, v7);
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * i) = 0;
        v5 = *(_DWORD *)(a1 + 40);
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_DWORD *)(a1 + 36);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v41 = v8 + ((uint64_t)v9 << 6);
    v42 = *(_QWORD **)(v8 + 24);
    if (!v42[102])
    {
      while (1)
      {
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
        {
          sub_1ACBF2A04(v8);
        }
        else
        {
          if (!*(_DWORD *)(v8 + 32))
            goto LABEL_65;
          sub_1ACBF0674(v42, *(_QWORD **)(v8 + 40));
          *(_DWORD *)(v8 + 32) = 0;
        }
        *(_WORD *)(v8 + 20) = 0;
LABEL_65:
        v8 += 64;
        if (v8 >= v41)
          goto LABEL_16;
      }
    }
    do
    {
      if (*(_DWORD *)(v8 + 32))
      {
        v43 = *(_QWORD **)(v8 + 40);
        if (v43)
          sub_1ACBE0F9C(v42, v43);
      }
      v8 += 64;
    }
    while (v8 < v41);
  }
LABEL_16:
  for (j = *(_QWORD **)(a1 + 360); j; j = *(_QWORD **)(a1 + 360))
  {
    *(_QWORD *)(a1 + 360) = j[1];
    v13 = (unint64_t)(j + 14);
    v14 = *((_DWORD *)j + 23);
    v15 = *((int *)j + 22);
    if (v14 < 1)
    {
      v19 = *((_DWORD *)j + 22);
      if (!(_DWORD)v15)
        goto LABEL_40;
    }
    else
    {
      v16 = 0;
      v17 = v13 + (v15 << 6);
      do
      {
        v18 = *(unsigned __int8 **)(v17 + 8 * v16);
        if (v18)
        {
          sub_1ACBF0D2C((_QWORD **)*j, v18);
          v14 = *((_DWORD *)j + 23);
        }
        ++v16;
      }
      while (v16 < v14);
      v19 = *((_DWORD *)j + 22);
      if (!v19)
        goto LABEL_40;
    }
    v20 = v13 + ((uint64_t)v19 << 6);
    v21 = (_QWORD *)j[17];
    if (!v21[102])
    {
      while (1)
      {
        if ((*(_WORD *)(v13 + 20) & 0x9000) != 0)
        {
          sub_1ACBF2A04(v13);
        }
        else
        {
          if (!*(_DWORD *)(v13 + 32))
            goto LABEL_36;
          sub_1ACBF0674(v21, *(_QWORD **)(v13 + 40));
          *(_DWORD *)(v13 + 32) = 0;
        }
        *(_WORD *)(v13 + 20) = 0;
LABEL_36:
        v13 += 64;
        if (v13 >= v20)
          goto LABEL_40;
      }
    }
    do
    {
      if (*(_DWORD *)(v13 + 32))
      {
        v22 = *(_QWORD **)(v13 + 40);
        if (v22)
          sub_1ACBE0F9C(v21, v22);
      }
      v13 += 64;
    }
    while (v13 < v20);
LABEL_40:
    v12 = *(_QWORD **)*j;
    v23 = (_QWORD *)j[8];
    if (v23)
    {
      do
      {
        v24 = (void (*)(_QWORD))v23[2];
        if (v24)
          v24(v23[1]);
        j[8] = v23[3];
        sub_1ACBE0F9C(v12, v23);
        v23 = (_QWORD *)j[8];
      }
      while (v23);
      v12 = *(_QWORD **)*j;
    }
    sub_1ACBE0F9C(v12, j);
  }
  v25 = *(_QWORD **)(a1 + 384);
  if (v25)
  {
    v26 = *(_QWORD **)a1;
    do
    {
      v27 = (void (*)(_QWORD))v25[2];
      if (v27)
        v27(v25[1]);
      *(_QWORD *)(a1 + 384) = v25[3];
      sub_1ACBE0F9C(v26, v25);
      v25 = *(_QWORD **)(a1 + 384);
    }
    while (v25);
  }
  if ((*(_WORD *)(a1 + 268) & 0x80) == 0)
    goto LABEL_143;
  sub_1ACBF0ABC((_DWORD *)a1);
  v35 = *(_DWORD *)(a1 + 52);
  if (!v35)
  {
LABEL_77:
    v40 = 0;
LABEL_78:
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      *(_DWORD *)(a1 + 52) = 787;
      *(_BYTE *)(a1 + 264) = 2;
      sub_1ACBF1C7C((uint64_t *)a1, "FOREIGN KEY constraint failed", v28, v29, v30, v31, v32, v33, v62);
    }
    v38 = 0;
    goto LABEL_81;
  }
  if (*(_DWORD *)(a1 + 52) > 0xDu || ((1 << v35) & 0x2680) == 0)
  {
    if (*(_BYTE *)(a1 + 264) != 3)
    {
      v38 = 0;
      v40 = 0;
LABEL_81:
      v39 = 1;
      goto LABEL_82;
    }
    goto LABEL_77;
  }
  v36 = *(_DWORD *)(a1 + 52);
  v37 = *(_WORD *)(a1 + 268);
  if (v36 == 9 && (v37 & 0x40) != 0)
  {
    v38 = 0;
    v39 = 1;
    v40 = 1;
    goto LABEL_82;
  }
  if ((v36 == 13 || v36 == 7) && (v37 & 0x20) != 0)
  {
    v39 = 0;
    v40 = 1;
    v38 = 2;
  }
  else
  {
    sub_1ACBB6E64(v2, 516, v34);
    for (k = *(_QWORD **)(v2 + 760); k; k = *(_QWORD **)(v2 + 760))
    {
      *(_QWORD *)(v2 + 760) = k[3];
      sub_1ACBE0F9C((_QWORD *)v2, k);
    }
    v38 = 0;
    *(_QWORD *)(v2 + 788) = 0;
    *(_BYTE *)(v2 + 109) = 0;
    v40 = 1;
    *(_BYTE *)(v2 + 101) = 1;
    *(_QWORD *)(a1 + 56) = 0;
    v39 = 1;
    if (!*(_DWORD *)(a1 + 52))
      goto LABEL_78;
  }
LABEL_82:
  if (*(int *)(v2 + 564) >= 1 && !*(_QWORD *)(v2 + 600)
    || !*(_BYTE *)(v2 + 101)
    || *(_DWORD *)(v2 + 216) != ((*(_WORD *)(a1 + 268) & 0x40) == 0))
  {
    if (v39)
    {
      if (!*(_DWORD *)(a1 + 52) || (v47 = *(unsigned __int8 *)(a1 + 264), v47 == 3))
      {
        v38 = 1;
      }
      else
      {
        if (v47 != 2)
        {
          sub_1ACBB6E64(v2, 516, v34);
          for (m = *(_QWORD **)(v2 + 760); m; m = *(_QWORD **)(v2 + 760))
          {
            *(_QWORD *)(v2 + 760) = m[3];
            sub_1ACBE0F9C((_QWORD *)v2, m);
          }
          v51 = 0;
          *(_QWORD *)(v2 + 788) = 0;
          *(_BYTE *)(v2 + 109) = 0;
          *(_BYTE *)(v2 + 101) = 1;
          *(_QWORD *)(a1 + 56) = 0;
          if ((*(_BYTE *)(a1 + 268) & 0x10) == 0)
            goto LABEL_141;
          goto LABEL_139;
        }
        v38 = 2;
      }
    }
    goto LABEL_124;
  }
  v45 = *(_DWORD *)(a1 + 52);
  if (v45)
  {
    v46 = *(_BYTE *)(a1 + 264) == 3 ? v40 : 1;
    if ((v46 & 1) != 0)
    {
      if (v45 == 17 && *(int *)(v2 + 208) >= 2)
      {
LABEL_119:
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(v2 + 792) = 0;
        if ((v39 & 1) != 0)
          goto LABEL_120;
        goto LABEL_124;
      }
LABEL_118:
      sub_1ACBB6E64(v2, 0, v34);
      goto LABEL_119;
    }
  }
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) + *(_QWORD *)(*(_QWORD *)a1 + 800)) >= 1)
  {
    v48 = 787;
    *(_DWORD *)(a1 + 52) = 787;
    *(_BYTE *)(a1 + 264) = 2;
    sub_1ACBF1C7C((uint64_t *)a1, "FOREIGN KEY constraint failed", v28, v29, v30, v31, v32, v33, v62);
    if ((*(_WORD *)(a1 + 268) & 0x40) != 0)
    {
      if (*(_DWORD *)(a1 + 276))
        sub_1ACBF1CD0(a1);
      return 1;
    }
LABEL_117:
    *(_DWORD *)(a1 + 52) = v48;
    goto LABEL_118;
  }
  v52 = *(_QWORD *)(v2 + 48);
  if ((v52 & 0x200000000) != 0)
  {
    *(_QWORD *)(v2 + 48) = v52 & 0xFFFFFFFDFFFFFFFFLL;
    v48 = 11;
    goto LABEL_117;
  }
  v53 = sub_1ACB8ED80(v2, a1, v34);
  if (!v53)
  {
    v34 = 0.0;
    *(_OWORD *)(v2 + 800) = 0u;
    *(_QWORD *)(v2 + 48) &= ~0x80000uLL;
    *(_DWORD *)(v2 + 44) &= ~1u;
    *(_DWORD *)(v2 + 792) = 0;
    if ((v39 & 1) != 0)
    {
LABEL_120:
      if ((*(_WORD *)(a1 + 268) & 0x10) == 0)
        goto LABEL_141;
LABEL_138:
      v51 = *(_QWORD *)(a1 + 56);
LABEL_139:
      v58 = *(_QWORD *)(v2 + 128) + v51;
      *(_QWORD *)(v2 + 120) = v51;
      *(_QWORD *)(v2 + 128) = v58;
      goto LABEL_140;
    }
LABEL_124:
    if (*(_DWORD *)(*(_QWORD *)a1 + 792))
    {
      if (*(_DWORD *)(a1 + 64))
      {
        v54 = sub_1ACBF1FE4(a1, v38, v34);
        if (v54)
        {
          if (!*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 52) == 19)
          {
            *(_DWORD *)(a1 + 52) = v54;
            v56 = *(_QWORD **)(a1 + 168);
            if (v56)
              sub_1ACBE0F9C((_QWORD *)v2, v56);
            *(_QWORD *)(a1 + 168) = 0;
          }
          sub_1ACBB6E64(v2, 516, v55);
          for (n = *(_QWORD **)(v2 + 760); n; n = *(_QWORD **)(v2 + 760))
          {
            *(_QWORD *)(v2 + 760) = n[3];
            sub_1ACBE0F9C((_QWORD *)v2, n);
          }
          *(_QWORD *)(v2 + 788) = 0;
          *(_BYTE *)(v2 + 109) = 0;
          *(_BYTE *)(v2 + 101) = 1;
          *(_QWORD *)(a1 + 56) = 0;
        }
      }
    }
    if ((*(_WORD *)(a1 + 268) & 0x10) == 0)
      goto LABEL_141;
    if (v38 == 2)
    {
      *(_QWORD *)(v2 + 120) = 0;
LABEL_140:
      *(_QWORD *)(a1 + 56) = 0;
LABEL_141:
      if (*(_DWORD *)(a1 + 276))
        sub_1ACBF1CD0(a1);
LABEL_143:
      --*(_DWORD *)(v2 + 208);
      v59 = *(_WORD *)(a1 + 268);
      if ((v59 & 0x40) == 0)
      {
        --*(_DWORD *)(v2 + 216);
        v59 = *(_WORD *)(a1 + 268);
      }
      if ((v59 & 0x80) != 0)
        --*(_DWORD *)(v2 + 212);
      *(_BYTE *)(a1 + 267) = 3;
      if (*(_BYTE *)(v2 + 103))
      {
        result = 0;
        *(_DWORD *)(a1 + 52) = 7;
      }
      else if (*(_DWORD *)(a1 + 52) == 5)
      {
        return 5;
      }
      else
      {
        return 0;
      }
      return result;
    }
    goto LABEL_138;
  }
  v48 = v53;
  if (v53 != 5)
  {
    if (v53 != 3082 && (v53 & 0xFB) == 0xA)
    {
      v60 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 128);
      if (v60)
        v61 = v60();
      else
        v61 = 0;
      *(_DWORD *)(v2 + 92) = v61;
    }
    goto LABEL_117;
  }
  if ((*(_WORD *)(a1 + 268) & 0x40) == 0)
  {
    v48 = 5;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a1 + 276))
    sub_1ACBF1CD0(a1);
  return 5;
}

_QWORD *sub_1ACB693B4(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  _QWORD *v11;

  switch(a2)
  {
    case -15:
      result = sub_1ACBF0784(result, (_QWORD *)a3);
      break;
    case -14:
    case -13:
    case -12:
    case -6:
      if (a3)
        goto LABEL_3;
      break;
    case -11:
      if (!result[102])
      {
        v4 = *(_QWORD **)a3;
        v5 = *(_DWORD *)(a3 + 24) - 1;
        *(_DWORD *)(a3 + 24) = v5;
        if (!v5)
        {
          v6 = *(_QWORD *)(a3 + 16);
          v7 = v4;
          if (v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
            v7 = *(_QWORD **)a3;
          }
          v8 = *(_QWORD *)(a3 + 8);
          v9 = *(_DWORD *)(v8 + 16) - 1;
          *(_DWORD *)(v8 + 16) = v9;
          if (!v9)
          {
            v10 = *(void (**)(_QWORD))(v8 + 32);
            if (v10)
              v10(*(_QWORD *)(v8 + 24));
            sub_1ACBE0F9C(v7, (_QWORD *)v8);
          }
          v11 = v4;
          goto LABEL_28;
        }
      }
      break;
    case -10:
      if (result[102])
      {
        result = sub_1ACBF07C0(result, a3);
      }
      else if (a3)
      {
        if ((*(_WORD *)(a3 + 20) & 0x9000) != 0 || *(_DWORD *)(a3 + 32))
          sub_1ACBF2A04(a3);
        v11 = *(_QWORD **)(a3 + 24);
LABEL_28:
        result = sub_1ACBE0F9C(v11, (_QWORD *)a3);
      }
      break;
    case -8:
      if (a3)
      {
        if (!result[102] && (*(_DWORD *)a3)-- == 1)
        {
          result = *(_QWORD **)(a3 + 16);
          goto LABEL_3;
        }
      }
      break;
    case -7:
      if ((*(_BYTE *)(a3 + 4) & 0x10) != 0)
LABEL_3:
        result = sub_1ACBF0674(result, (_QWORD *)a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1ACB69520(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;

  if (*(_BYTE *)(a1 + 17) || !*(_BYTE *)(a1 + 16) || a2 && *(_BYTE *)(a1 + 16) == 1)
    return sub_1ACBED080(a1, a2, a3);
  v4 = *(uint64_t **)(a1 + 8);
  if (a3)
    *a3 = bswap32(*(_DWORD *)(*(_QWORD *)(v4[3] + 80) + 40));
  if (a2 && (v5 = *v4, v6 = *(_DWORD *)(*(_QWORD *)a1 + 788), *(_DWORD *)(v5 + 128) < v6) && *(_BYTE *)(v5 + 10))
    return sub_1ACBEDD40(v5, v6);
  else
    return 0;
}

uint64_t sub_1ACB69590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  __n128 v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t (*v37)(uint64_t, _QWORD, _QWORD, __n128);
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 344);
  if (v2)
  {
LABEL_2:
    v53 = 0;
    if (*(_BYTE *)(v2 + 64))
    {
      if (!*(_BYTE *)(v2 + 63))
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 112))(*(_QWORD *)(v2 + 8), 0, 1, 9);
      *(_BYTE *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 124) = 0;
      *(_BYTE *)(v2 + 67) = 0;
    }
    if ((*(__int16 *)(v2 + 60) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v2 + 63))
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 112))(*(_QWORD *)(v2 + 8), *(unsigned __int16 *)(v2 + 60) + 3, 1, 5);
      *(_WORD *)(v2 + 60) = -1;
    }
    v3 = *(_QWORD *)(a1 + 344);
    v4 = *(_QWORD **)(v3 + 144);
    if (v4)
    {
      v10 = *v4 != *(_QWORD *)(v3 + 72)
         || v4[1] != *(_QWORD *)(v3 + 80)
         || v4[2] != *(_QWORD *)(v3 + 88)
         || v4[3] != *(_QWORD *)(v3 + 96)
         || v4[4] != *(_QWORD *)(v3 + 104)
         || v4[5] != *(_QWORD *)(v3 + 112);
      v11 = *(_QWORD *)(v3 + 152);
      if (v11)
      {
        LODWORD(v54) = *(_DWORD *)(v11 + 772);
        if ((_DWORD)v54)
        {
          v12 = *(_QWORD *)(v3 + 8);
          if (*(_QWORD *)v12)
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 80))(v12, 34, &v54);
        }
      }
      if (*(_BYTE *)(v3 + 63))
        v13 = 0;
      else
        v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), 1, 1, 6);
      LODWORD(v54) = 0;
      v17 = **(_QWORD **)(v3 + 8);
      if (v17)
        (*(void (**)(void))(v17 + 80))();
      if ((_DWORD)v13)
        goto LABEL_90;
    }
    else
    {
      v10 = 0;
    }
    v18 = 1;
    do
      v19 = sub_1ACB6A6F8(v3, &v53, 0, v18++);
    while ((_DWORD)v19 == -1);
    v13 = v19;
    if (!v4 || (_DWORD)v19)
    {
      if (!v4 || *(_BYTE *)(v3 + 63))
        goto LABEL_89;
    }
    else if (*v4 == *(_QWORD *)(v3 + 72)
           && v4[1] == *(_QWORD *)(v3 + 80)
           && v4[2] == *(_QWORD *)(v3 + 88)
           && v4[3] == *(_QWORD *)(v3 + 96)
           && v4[4] == *(_QWORD *)(v3 + 104)
           && v4[5] == *(_QWORD *)(v3 + 112))
    {
      v13 = 0;
      if (*(_BYTE *)(v3 + 63))
        goto LABEL_89;
    }
    else if (v4[4] == *(_QWORD *)(v3 + 104) && *((_DWORD *)v4 + 4) >= *(_DWORD *)(**(_QWORD **)(v3 + 48) + 128))
    {
      v13 = 0;
      v26 = *(_OWORD *)v4;
      v27 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v3 + 88) = *((_OWORD *)v4 + 1);
      *(_OWORD *)(v3 + 104) = v27;
      *(_OWORD *)(v3 + 72) = v26;
      v53 = v10;
      *(_DWORD *)(v3 + 120) = 1;
      if (*(_BYTE *)(v3 + 63))
        goto LABEL_89;
    }
    else
    {
      *(_DWORD *)(v3 + 120) = 1;
      if (*(_BYTE *)(v3 + 64))
      {
        if (!*(_BYTE *)(v3 + 63))
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), 0, 1, 9);
        *(_BYTE *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 124) = 0;
        *(_BYTE *)(v3 + 67) = 0;
      }
      if ((*(__int16 *)(v3 + 60) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v3 + 63))
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), *(unsigned __int16 *)(v3 + 60) + 3, 1, 5);
        *(_WORD *)(v3 + 60) = -1;
        v13 = 769;
        if (!*(_BYTE *)(v3 + 63))
          goto LABEL_88;
LABEL_89:
        if (!(v13 | v53))
        {
          v13 = 0;
LABEL_96:
          if (!*(_BYTE *)(a1 + 16))
            goto LABEL_188;
LABEL_97:
          if ((_DWORD)v13)
            goto LABEL_98;
          goto LABEL_200;
        }
LABEL_90:
        ++*(_DWORD *)(a1 + 132);
        for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
          *(_DWORD *)(i + 24) = 1;
        sub_1ACB5AD68(*(_QWORD **)(a1 + 336), 0);
        if (*(_BYTE *)(a1 + 27))
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72), 0, 0);
          if (!*(_BYTE *)(a1 + 16))
            goto LABEL_188;
          goto LABEL_97;
        }
        goto LABEL_96;
      }
      v13 = 769;
      if (*(_BYTE *)(v3 + 63))
        goto LABEL_89;
    }
LABEL_88:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), 1, 1, 5);
    goto LABEL_89;
  }
  if (*(_BYTE *)(a1 + 21))
  {
    v13 = 0;
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_188;
    goto LABEL_97;
  }
  while (1)
  {
    v14 = *(unsigned __int8 *)(a1 + 22);
    if (v14 != 5 && v14 != 0)
    {
      if (v14 <= 1)
        goto LABEL_107;
LABEL_156:
      if (*(_BYTE *)(a1 + 18))
      {
        v13 = 776;
        goto LABEL_98;
      }
      v13 = sub_1ACBEBA34(a1, 4);
      if (!(_DWORD)v13)
      {
        if (**(_QWORD **)(a1 + 80))
        {
LABEL_160:
          v13 = sub_1ACBECEE8(a1);
          if ((_DWORD)v13)
            goto LABEL_182;
          v13 = sub_1ACBB6FE4(a1, *(_BYTE *)(a1 + 16) == 0);
          *(_BYTE *)(a1 + 21) = 0;
LABEL_181:
          if (!(_DWORD)v13)
            goto LABEL_185;
LABEL_182:
          if (v13 == 13 || v13 == 10)
          {
            *(_DWORD *)(a1 + 48) = v13;
            *(_BYTE *)(a1 + 21) = 6;
            *(_QWORD *)(a1 + 288) = sub_1ACBEBC4C;
          }
          goto LABEL_98;
        }
        if (*(_BYTE *)(a1 + 9) == 2)
        {
          v13 = 0;
        }
        else
        {
          v41 = *(_QWORD *)a1;
          LODWORD(v54) = 0;
          v42 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(v41 + 56))(v41, *(_QWORD *)(a1 + 224), 0, &v54);
          v43 = *(_QWORD **)(a1 + 80);
          if ((_DWORD)v42)
            v44 = 1;
          else
            v44 = (_DWORD)v54 == 0;
          if (v44)
          {
            v13 = v42;
          }
          else
          {
            v53 = 0;
            v45 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, _QWORD, int *))(v41 + 40))(v41, *(_QWORD *)(a1 + 224), v43, *(_DWORD *)(a1 + 180) & 0x1700000 | 0x802u, &v53);
            v13 = v45;
            if (!(_DWORD)v45)
            {
              if ((v53 & 1) != 0)
              {
                v13 = sub_1ACBE1D1C(69227);
                v46 = *(_QWORD *)(a1 + 80);
                if (*(_QWORD *)v46)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)v46 + 8))(*(_QWORD *)(a1 + 80));
                  *(_QWORD *)v46 = 0;
                }
              }
              else
              {
                v13 = 0;
              }
            }
            v43 = *(_QWORD **)(a1 + 80);
          }
          if (*v43)
            goto LABEL_160;
        }
        if (!*(_BYTE *)(a1 + 8))
          sub_1ACBEC4F8(a1, 1);
        goto LABEL_181;
      }
LABEL_98:
      sub_1ACB90304(a1);
      return v13;
    }
    if (*(_BYTE *)(a1 + 17))
      goto LABEL_48;
    v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 1);
    if ((_DWORD)v16 != 5)
      break;
    if (!(*(unsigned int (**)(_QWORD))(a1 + 232))(*(_QWORD *)(a1 + 240)))
    {
      v13 = 5;
      goto LABEL_98;
    }
  }
  v13 = v16;
  if ((_DWORD)v16)
    goto LABEL_97;
  v14 = *(unsigned __int8 *)(a1 + 22);
LABEL_48:
  if (v14 == 5)
    goto LABEL_156;
  *(_BYTE *)(a1 + 22) = 1;
LABEL_107:
  v28 = *(_QWORD *)a1;
  v53 = 1;
  v29 = **(_QWORD **)(a1 + 80);
  if (!v29)
  {
    v30 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, int *))(v28 + 56))(v28, *(_QWORD *)(a1 + 224), 0, &v53);
    if ((_DWORD)v30 || v53 == 0)
    {
      v13 = v30;
      if ((_DWORD)v30)
        goto LABEL_98;
      goto LABEL_185;
    }
  }
  v52 = 0;
  v32 = (uint64_t *)(*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), &v52);
  if (v32 | v52)
  {
    v13 = (uint64_t)v32;
    v34 = 0;
    if ((_DWORD)v32)
      goto LABEL_98;
    goto LABEL_155;
  }
  v35 = *(_QWORD *)(a1 + 344);
  if (v35 && (*(__int16 *)(v35 + 60) & 0x80000000) == 0 && (LODWORD(v35) = *(_DWORD *)(v35 + 92), (_DWORD)v35))
  {
LABEL_124:
    if (v35 <= *(_DWORD *)(a1 + 188))
      goto LABEL_126;
    *(_DWORD *)(a1 + 188) = v35;
  }
  else
  {
    v32 = *(uint64_t **)(a1 + 72);
    v35 = *v32;
    if (*v32)
    {
      v54 = 0;
      v32 = (uint64_t *)(*(uint64_t (**)(void))(v35 + 48))();
      if ((_DWORD)v32)
        goto LABEL_195;
      v35 = (v54 + *(_QWORD *)(a1 + 200) - 1) / *(_QWORD *)(a1 + 200);
      goto LABEL_124;
    }
LABEL_126:
    if (!v29 && !(_DWORD)v35)
    {
      if (off_1EECAD248)
        v33.n128_f64[0] = off_1EECAD248(v32);
      v36 = *(unsigned __int8 *)(a1 + 22);
      if (v36 > 5 || ((1 << v36) & 0x23) == 0)
        goto LABEL_135;
      if (*(_BYTE *)(a1 + 17))
      {
        if (v36 != 5)
          goto LABEL_134;
        goto LABEL_135;
      }
      v32 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 2, v33);
      if (!(_DWORD)v32)
      {
        if (*(_BYTE *)(a1 + 22) != 5)
LABEL_134:
          *(_BYTE *)(a1 + 22) = 2;
LABEL_135:
        v37 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(v28 + 48);
        if (v37)
          v32 = (uint64_t *)v37(v28, *(_QWORD *)(a1 + 224), 0, v33);
        if (!*(_BYTE *)(a1 + 8))
          v32 = (uint64_t *)sub_1ACBEC4F8(a1, 1);
      }
      v34 = (int)off_1EECAD250;
      if (off_1EECAD250)
      {
        off_1EECAD250(v32);
        v34 = 0;
      }
      goto LABEL_155;
    }
  }
  if (!v29)
  {
    LODWORD(v54) = *(_DWORD *)(a1 + 180) & 0x1700000 | 0x801;
    v40 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v28 + 40))(v28, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 80));
    if ((_DWORD)v40 == 14)
    {
      v34 = 1;
      goto LABEL_155;
    }
    v13 = v40;
    if ((_DWORD)v40)
      goto LABEL_98;
  }
  LOBYTE(v54) = 0;
  v38 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), &v54, 1, 0);
  if (v38 == 522)
    v13 = 0;
  else
    v13 = v38;
  if (!v29)
  {
    v39 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)v39)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v39 + 8))(*(_QWORD *)(a1 + 80));
      *(_QWORD *)v39 = 0;
    }
  }
  v34 = (_BYTE)v54 != 0;
  if ((_DWORD)v13)
    goto LABEL_98;
LABEL_155:
  if (v34)
    goto LABEL_156;
LABEL_185:
  if (!*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 28))
  {
    v50 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), &v54, 16, 24);
    if ((_DWORD)v50)
    {
      v13 = v50;
      if ((_DWORD)v50 != 522)
        goto LABEL_97;
      v54 = 0;
      v55 = 0;
    }
    if (*(_QWORD *)(a1 + 136) != v54 || *(_QWORD *)(a1 + 144) != v55)
    {
      sub_1ACBEC550(a1);
      if (*(_BYTE *)(a1 + 27))
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72), 0, 0);
    }
  }
  v47 = sub_1ACCB1FC4((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 344);
  if (v2)
    goto LABEL_2;
  v13 = v47;
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_97;
LABEL_188:
  if (*(_BYTE *)(a1 + 21) || (_DWORD)v13)
    goto LABEL_97;
  v48 = *(_QWORD *)(a1 + 344);
  if (v48)
  {
    if ((*(__int16 *)(v48 + 60) & 0x80000000) == 0)
    {
      LODWORD(v48) = *(_DWORD *)(v48 + 92);
      if ((_DWORD)v48)
        goto LABEL_197;
    }
  }
  v48 = **(_QWORD **)(a1 + 72);
  if (v48)
  {
    v54 = 0;
    v32 = (uint64_t *)(*(uint64_t (**)(void))(v48 + 48))();
    if ((_DWORD)v32)
    {
LABEL_195:
      v13 = (uint64_t)v32;
      goto LABEL_98;
    }
    v48 = (v54 + *(_QWORD *)(a1 + 200) - 1) / *(_QWORD *)(a1 + 200);
LABEL_197:
    if (v48 > *(_DWORD *)(a1 + 188))
      *(_DWORD *)(a1 + 188) = v48;
  }
  *(_DWORD *)(a1 + 32) = v48;
LABEL_200:
  v13 = 0;
  *(_BYTE *)(a1 + 21) = 1;
  *(_BYTE *)(a1 + 28) = 1;
  return v13;
}

uint64_t sub_1ACB69EBC(uint64_t a1, int a2)
{
  int v2;
  int32x2_t *v5;
  int32x2_t v6;
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  int32x2_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v2 = *(unsigned __int8 *)(a1 + 28);
  if (v2 >= a2)
    return 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v5 = *(int32x2_t **)(a1 + 16);
  v6 = v5[2];
  if (v6)
  {
    xmmword_1ECD3B1C0(*(_QWORD *)&v6);
    v2 = *(unsigned __int8 *)(a1 + 28);
  }
  v7 = v5[4].u8[0];
  if (v2 != v7)
  {
    v8 = 5;
    if (a2 > 1 || v7 > 2)
      goto LABEL_79;
  }
  if (a2 == 1)
  {
    if (v7 - 1 < 2)
    {
      v8 = 0;
      *(_BYTE *)(a1 + 28) = 1;
      v5[3] = vadd_s32(v5[3], (int32x2_t)0x100000001);
      goto LABEL_79;
    }
    v9 = 1;
    v36 = 1;
    HIWORD(v37) = 0;
LABEL_15:
    WORD2(v37) = v9;
    v10 = dword_1EECAC650;
    v35 = dword_1EECAC650;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(unsigned int *)(v11 + 88);
    if ((_DWORD)v12 == -1)
    {
      v12 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v11 + 88) = v12;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v11 + 33))
        goto LABEL_27;
      v38 = v10 + 2;
      v39 = xmmword_1ACCBDC50;
      v13 = sub_1ACBE2784(v12, (uint64_t)&v38, a1);
      if (v13 < 0)
        goto LABEL_23;
      *(_BYTE *)(v11 + 33) = 1;
      ++*(_DWORD *)(v11 + 28);
    }
    else
    {
      v13 = sub_1ACBE2784(v12, (uint64_t)&v35, a1);
    }
    if (v13)
    {
LABEL_23:
      v14 = *__error();
      v8 = 5;
      if (v14 > 0x3C)
        goto LABEL_54;
      if (((1 << v14) & 0x1000000800012010) == 0)
      {
        if (v14 != 1)
        {
LABEL_54:
          if ((_DWORD)v14 != 77)
          {
            v8 = 3850;
            *(_DWORD *)(a1 + 32) = v14;
          }
          goto LABEL_79;
        }
        goto LABEL_53;
      }
      goto LABEL_79;
    }
LABEL_27:
    if (a2 == 4)
    {
      *(_BYTE *)(a1 + 28) = 3;
      v5[4].i8[0] = 3;
      goto LABEL_29;
    }
    v15 = dword_1EECAC650 + 2;
    v35 = v15;
    v36 = 510;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(unsigned int *)(v16 + 88);
    if ((_DWORD)v17 == -1)
    {
      v17 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v16 + 88) = v17;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v16 + 33))
        goto LABEL_62;
      v38 = v15;
      v39 = xmmword_1ACCBDC50;
      v18 = sub_1ACBE2784(v17, (uint64_t)&v38, a1);
      if (v18 < 0)
      {
LABEL_58:
        v25 = 0;
        v26 = *__error();
        v8 = 5;
        if (v26 > 0x3C)
          goto LABEL_82;
        if (((1 << v26) & 0x1000000800012010) != 0)
          goto LABEL_63;
        if (v26 == 1)
        {
          v25 = 0;
          v8 = 3;
        }
        else
        {
LABEL_82:
          if ((_DWORD)v26 != 77)
          {
            v25 = 0;
            v8 = 3850;
          }
        }
LABEL_63:
        v27 = dword_1EECAC650;
        v35 = dword_1EECAC650;
        v36 = 1;
        WORD2(v37) = 2;
        v28 = *(_QWORD *)(a1 + 16);
        v29 = *(unsigned int *)(v28 + 88);
        if ((_DWORD)v29 == -1)
        {
          v29 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v28 + 88) = v29;
        }
        if ((*(_WORD *)(a1 + 30) & 3) == 1)
        {
          if (*(_BYTE *)(v28 + 33))
          {
LABEL_74:
            if ((_DWORD)v8)
            {
              if ((_DWORD)v8 != 5)
                *(_DWORD *)(a1 + 32) = v26;
              goto LABEL_79;
            }
            v32 = v5[3].i32[1] + 1;
            v5[3].i32[0] = 1;
            v5[3].i32[1] = v32;
            goto LABEL_78;
          }
          v38 = v27 + 2;
          v39 = xmmword_1ACCBDC50;
          v30 = sub_1ACBE2784(v29, (uint64_t)&v38, a1);
          if (v30 < 0)
          {
            v30 = 1;
          }
          else
          {
            *(_BYTE *)(v28 + 33) = 1;
            ++*(_DWORD *)(v28 + 28);
          }
        }
        else
        {
          v30 = sub_1ACBE2784(v29, (uint64_t)&v35, a1);
        }
        v31 = v25 ^ 1;
        if (!v30)
          v31 = 1;
        if ((v31 & 1) == 0)
        {
          v8 = 2058;
          *(_DWORD *)(a1 + 32) = *__error();
          goto LABEL_79;
        }
        goto LABEL_74;
      }
      *(_BYTE *)(v16 + 33) = 1;
      ++*(_DWORD *)(v16 + 28);
    }
    else
    {
      v18 = sub_1ACBE2784(v17, (uint64_t)&v35, a1);
    }
    if (v18)
      goto LABEL_58;
LABEL_62:
    v8 = 0;
    LODWORD(v26) = 0;
    v25 = 1;
    goto LABEL_63;
  }
  v36 = 1;
  HIWORD(v37) = 0;
  if (a2 != 4)
    goto LABEL_37;
  if (v2 == 2)
  {
    v9 = 3;
    goto LABEL_15;
  }
LABEL_29:
  if (v5[3].i32[0] > 1)
  {
    v8 = 5;
    goto LABEL_79;
  }
LABEL_37:
  WORD2(v37) = 3;
  v19 = dword_1EECAC650 + 2;
  if (a2 == 2)
    v20 = dword_1EECAC650 + 1;
  else
    v20 = dword_1EECAC650 + 2;
  v21 = 510;
  if (a2 == 2)
    v21 = 1;
  v35 = v20;
  v36 = v21;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(unsigned int *)(v22 + 88);
  if ((_DWORD)v23 == -1)
  {
    v23 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(v22 + 88) = v23;
  }
  if ((*(_WORD *)(a1 + 30) & 3) == 1)
  {
    if (*(_BYTE *)(v22 + 33))
    {
LABEL_78:
      v8 = 0;
      *(_BYTE *)(a1 + 28) = a2;
      v5[4].i8[0] = a2;
      goto LABEL_79;
    }
    v38 = v19;
    v39 = xmmword_1ACCBDC50;
    v24 = sub_1ACBE2784(v23, (uint64_t)&v38, a1);
    if (v24 < 0)
      goto LABEL_50;
    *(_BYTE *)(v22 + 33) = 1;
    ++*(_DWORD *)(v22 + 28);
  }
  else
  {
    v24 = sub_1ACBE2784(v23, (uint64_t)&v35, a1);
  }
  if (!v24)
    goto LABEL_78;
LABEL_50:
  v14 = *__error();
  v8 = 5;
  if (v14 > 0x3C)
    goto LABEL_54;
  if (((1 << v14) & 0x1000000800012010) == 0)
  {
    if (v14 != 1)
      goto LABEL_54;
LABEL_53:
    v8 = 3;
    *(_DWORD *)(a1 + 32) = v14;
  }
LABEL_79:
  v33 = v5[2];
  if (v33)
    xmmword_1ECD3B1D0(*(_QWORD *)&v33);
  return v8;
}

uint64_t sub_1ACB6A3A8(uint64_t a1, uint64_t a2, int a3, _BOOL4 *a4)
{
  _BOOL4 v5;
  _OWORD v8[6];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a3)
  {
    v5 = off_1EECAC8F8(a2, 6) == 0;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    memset(v8, 0, sizeof(v8));
    if (off_1EECAC928(a2, v8))
      v5 = 0;
    else
      v5 = (WORD2(v8[0]) & 0xF000) != 0x8000 || (uint64_t)v9 > 0;
  }
  *a4 = v5;
  return 0;
}

uint64_t sub_1ACB6A444(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[6];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 160)
    || (v9 = 0u, v10 = 0u, v8 = 0u, memset(v7, 0, sizeof(v7)), (v5 = *(_QWORD *)(a1 + 64)) != 0)
    && *(_DWORD *)(*(_QWORD *)v5 + 168))
  {
    sqlite3_log(27, "denying fileSize on invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    result = off_1EECAC940(*(unsigned int *)(a1 + 24), v7);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 32) = *__error();
      return 1802;
    }
    else
    {
      v6 = v8;
      *(_QWORD *)(a1 + 144) = v8;
      if (v6 == 1)
        v6 = 0;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t sub_1ACB6A500(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16) || *(_QWORD *)(a1 + 344))
  {
    result = 0;
    *a2 = 1;
  }
  else if (!*(_BYTE *)(a1 + 17)
         && (*(_BYTE *)(a1 + 8) || (v5 = **(_QWORD **)(a1 + 72), *(int *)v5 >= 2) && *(_QWORD *)(v5 + 104)))
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)v4)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v4 + 8))(*(_QWORD *)(a1 + 80));
      *(_QWORD *)v4 = 0;
    }
    result = sub_1ACBEDA54((uint64_t *)a1);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(a1 + 9) = 5;
      *(_BYTE *)(a1 + 21) = 0;
    }
  }
  else
  {
    return 14;
  }
  return result;
}

uint64_t sub_1ACB6A5A8(const char *a1, _DWORD *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char __s[1025];
  _OWORD __strerrbuf[5];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sqlite3_snprintf(1024, __s, "%s", a1);
  v3 = strlen(__s);
  if (v3 < 1)
  {
LABEL_4:
    if (__s[0] != 47)
      __s[0] = 46;
    v4 = 1;
  }
  else
  {
    while (1)
    {
      v4 = v3;
      if (__s[v3] == 47)
        break;
      --v3;
      if ((int)v4 < 2)
        goto LABEL_4;
    }
  }
  __s[v4] = 0;
  v5 = sub_1ACBE1D30(__s, 0, 0, 0);
  v6 = 0;
  *a2 = v5;
  if (v5 < 0)
  {
    v6 = sub_1ACBE1D1C(44570);
    v7 = *__error();
    memset(__strerrbuf, 0, sizeof(__strerrbuf));
    strerror_r(v7, (char *)__strerrbuf, 0x4FuLL);
    sqlite3_log(v6, "os_unix.c:%d: (%d) %s(%s) - %s", 44570, v7, "openDirectory", __s, (const char *)__strerrbuf);
  }
  return v6;
}

uint64_t sub_1ACB6A6F8(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v18;
  unsigned int v21;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  NSObject *v33;
  const char *v34;
  const char *v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (**v52)(uint64_t);
  uint64_t v53;
  void (*v54)(void);
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (**v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  unsigned int v90;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[5];

  v96[4] = *MEMORY[0x1E0C80C00];
  if (a4 >= 6)
  {
    if (a4 < 0x65)
    {
      (*(void (**)(void))(*(_QWORD *)a1 + 112))();
      goto LABEL_4;
    }
    v96[0] = -1;
    sqlite3_file_control(*(sqlite3 **)(a1 + 152), 0, 103, v96);
    v32 = HIDWORD(v96[0]);
    if (qword_1ECD3EA78 != -1)
      dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
    v33 = qword_1ECD3EA48;
    if (os_log_type_enabled((os_log_t)qword_1ECD3EA48, OS_LOG_TYPE_ERROR))
    {
      sub_1ACCB3F90(a1, v32, v33);
      v34 = getprogname();
      if (!v34)
        goto LABEL_69;
    }
    else
    {
      v34 = getprogname();
      if (!v34)
        goto LABEL_69;
    }
    v35 = v34;
    if (!strcmp(v34, "testfixture") || !strcmp(v35, "sqlite3") || !strcmp(v35, "xctest"))
      return 15;
LABEL_69:
    v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
    if (v36)
      sub_1ACCB3F5C(v36, v37, v38, v39, v40, v41, v42, v43);
    return 15;
  }
LABEL_4:
  if (a3)
  {
    LODWORD(v7) = 0;
    v8 = (_DWORD *)(**(_QWORD **)(a1 + 48) + 96);
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 70))
  {
LABEL_52:
    v94 = 0;
    v95 = 0;
    if (!*(_BYTE *)(a1 + 63))
    {
      v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 3, 1, 6);
      if (v46)
      {
        if (v46 == 5)
          v7 = 0xFFFFFFFFLL;
        else
          v7 = v46;
        goto LABEL_104;
      }
    }
    *(_WORD *)(a1 + 60) = 0;
    v28 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), 0, 0x8000, 0, &v94);
    if ((_DWORD)v28 == 8)
      goto LABEL_103;
    v7 = v28;
    if ((_DWORD)v28 != 1288)
      goto LABEL_60;
    v29 = **(_OWORD ***)(a1 + 48);
    v31 = v29[1];
    v30 = v29[2];
    *(_OWORD *)(a1 + 72) = *v29;
    *(_OWORD *)(a1 + 88) = v31;
    *(_OWORD *)(a1 + 104) = v30;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), &v95);
    if (!(_DWORD)v7)
    {
      if (v95 <= 31)
      {
        *a2 = 1;
        if (*(_DWORD *)(a1 + 88))
          v7 = 0xFFFFFFFFLL;
        else
          v7 = 0;
        goto LABEL_60;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v96, 32, 0);
      if (!(_DWORD)v7)
      {
        if (*(_QWORD *)(a1 + 104) != v96[2])
        {
LABEL_103:
          v7 = 0xFFFFFFFFLL;
          goto LABEL_104;
        }
        v55 = *(_DWORD *)(a1 + 56);
        if (!sqlite3_initialize())
        {
          v69 = v55 + 24;
          v70 = sub_1ACB5D828(v69);
          if (v70)
          {
            v71 = v70;
            v72 = *(_QWORD *)(a1 + 96);
            v73 = *(unsigned int *)(a1 + 88) * (unint64_t)(*(_DWORD *)(a1 + 56) + 24) + 32;
            if ((uint64_t)(v73 + v69) <= v95)
            {
              while (1)
              {
                v92 = 0;
                v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16)
                                                                                            + 16))(*(_QWORD *)(a1 + 16), v71, v69, v73);
                if ((_DWORD)v75)
                {
                  v7 = v75;
                  goto LABEL_162;
                }
                if (!sub_1ACBEB784(a1, &v93, &v92, (unsigned int *)(v71 + 24), v71))
                  goto LABEL_161;
                if (v92)
                  break;
                v73 += v69;
                if ((uint64_t)(v69 + v73) > v95)
                  goto LABEL_161;
              }
              v7 = 0xFFFFFFFFLL;
            }
            else
            {
LABEL_161:
              v7 = 0;
            }
LABEL_162:
            *(_QWORD *)(a1 + 96) = v72;
            v74 = (void (**)(uint64_t))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888 -= (int)off_1ECD3B178(v71);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v71);
              v71 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
              {
LABEL_60:
                if (!(_DWORD)v7)
                  return v7;
                goto LABEL_104;
              }
              v74 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
            }
            (*v74)(v71);
            goto LABEL_60;
          }
        }
        v7 = 7;
      }
    }
LABEL_104:
    if (*(int *)(a1 + 40) < 1)
    {
LABEL_114:
      *(_BYTE *)(a1 + 70) = 0;
      if (*(_BYTE *)(a1 + 64))
      {
        if (!*(_BYTE *)(a1 + 63))
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 9);
        *(_BYTE *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 124) = 0;
        *(_BYTE *)(a1 + 67) = 0;
      }
      if ((*(__int16 *)(a1 + 60) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(a1 + 63))
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 60) + 3, 1, 5);
        *(_WORD *)(a1 + 60) = -1;
      }
      *a2 = 1;
      return v7;
    }
    v50 = 0;
    while (1)
    {
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v50);
      if (v51)
      {
        v52 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v51);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v51);
          v51 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_107;
          v52 = &xmmword_1ECD3B1D0;
        }
        (*v52)(v51);
      }
LABEL_107:
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v50++) = 0;
      if (v50 >= *(int *)(a1 + 40))
        goto LABEL_114;
    }
  }
  v44 = sub_1ACB6B0B0(a1, a2);
  if ((_DWORD)v44)
  {
    v7 = v44;
    if ((_DWORD)v44 != 5)
      return v7;
    if (**(_QWORD **)(a1 + 48) && !*(_BYTE *)(a1 + 63))
    {
      v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 2, 1, 6);
      if (v45)
      {
        if (v45 == 5)
          return 261;
        else
          return v45;
      }
      if (!*(_BYTE *)(a1 + 63))
      {
        v54 = *(void (**)(void))(**(_QWORD **)(a1 + 8) + 112);
        goto LABEL_208;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 70))
    goto LABEL_52;
  v8 = (_DWORD *)(**(_QWORD **)(a1 + 48) + 96);
  if (*v8 != *(_DWORD *)(a1 + 88) || (*v8 ? (v48 = *(_QWORD *)(a1 + 144) == 0) : (v48 = 1), !v48))
  {
    LODWORD(v7) = 0;
    goto LABEL_6;
  }
  v49 = *(unsigned __int8 *)(a1 + 63);
  if (*(_BYTE *)(a1 + 63))
  {
    v7 = 0;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 3, 1, 6);
    v49 = *(unsigned __int8 *)(a1 + 63);
  }
  if (v49 != 2)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)v7 != 5)
  {
    if ((_DWORD)v7)
      return v7;
    v56 = **(uint64_t ***)(a1 + 48);
    v57 = *v56;
    v58 = v56[1];
    v59 = v56[2];
    v60 = v56[3];
    v62 = v56[4];
    v61 = v56[5];
    if (v57 == *(_QWORD *)(a1 + 72)
      && v58 == *(_QWORD *)(a1 + 80)
      && v59 == *(_QWORD *)(a1 + 88)
      && v60 == *(_QWORD *)(a1 + 96)
      && v62 == *(_QWORD *)(a1 + 104)
      && v61 == *(_QWORD *)(a1 + 112))
    {
      v7 = 0;
      *(_WORD *)(a1 + 60) = 0;
      return v7;
    }
    if (!*(_BYTE *)(a1 + 63))
    {
      v54 = *(void (**)(void))(**(_QWORD **)(a1 + 8) + 112);
      goto LABEL_208;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  v9 = *(_DWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 144);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 16);
    if (v11 < v9)
      v9 = v11;
  }
  v12 = v8 + 1;
  v13 = v8[2];
  v14 = v13 <= v9;
  if (v13 > v9)
    v13 = 0;
  v15 = v8[3];
  if (v13 <= v15 && v15 <= v9)
  {
    v14 = 2;
    v13 = v8[3];
  }
  v18 = v8[4];
  if (v13 <= v18 && v18 <= v9)
  {
    v14 = 3;
    v13 = v8[4];
  }
  v21 = v8[5];
  v23 = v13 > v21 || v21 > v9;
  if (v23)
    v24 = v14;
  else
    v24 = 4;
  if (v23)
    v25 = v13;
  else
    v25 = v8[5];
  if ((*(_BYTE *)(a1 + 66) & 2) != 0)
    goto LABEL_177;
  if (v25 < v9 || v24 == 0)
  {
    if (*(_BYTE *)(a1 + 63))
    {
      v27 = 4;
LABEL_47:
      v24 = 1;
LABEL_48:
      v12[v24] = v9;
      if (!*(_BYTE *)(a1 + 63))
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), v27, 1, 9);
      v25 = v9;
      goto LABEL_178;
    }
    v27 = 4;
    v47 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 4, 1, 10);
    if ((_DWORD)v47 != 5)
    {
      v7 = v47;
      if ((_DWORD)v47)
        return v7;
      goto LABEL_47;
    }
    if (*(_BYTE *)(a1 + 63))
    {
      v27 = 5;
      v24 = 2;
      goto LABEL_48;
    }
    v27 = 5;
    v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 5, 1, 10);
    if (!(_DWORD)v53)
    {
      v24 = 2;
      goto LABEL_48;
    }
    v7 = v53;
    if ((_DWORD)v53 != 5)
      return v7;
    if (*(_BYTE *)(a1 + 63))
    {
      v27 = 6;
      v24 = 3;
      goto LABEL_48;
    }
    v27 = 6;
    v68 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 6, 1, 10);
    if (!(_DWORD)v68)
    {
      v24 = 3;
      goto LABEL_48;
    }
    v7 = v68;
    if ((_DWORD)v68 != 5)
      return v7;
    if (*(_BYTE *)(a1 + 63))
    {
      v27 = 7;
      v24 = 4;
      goto LABEL_48;
    }
    v27 = 7;
    v76 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 7, 1, 10);
    if (!(_DWORD)v76)
    {
      v24 = 4;
      goto LABEL_48;
    }
    v7 = v76;
    if ((_DWORD)v76 != 5)
      return v7;
LABEL_177:
    if (!v24)
    {
      if ((_DWORD)v7 == 5)
        return 0xFFFFFFFFLL;
      else
        return 1288;
    }
  }
LABEL_178:
  v77 = *(unsigned __int8 *)(a1 + 63);
  if (*(_BYTE *)(a1 + 63))
  {
LABEL_179:
    *(_DWORD *)(a1 + 120) = *v8 + 1;
    if (v77 != 2)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
    if (v12[v24] == v25)
    {
      v78 = **(uint64_t ***)(a1 + 48);
      v79 = *v78;
      v80 = v78[1];
      v81 = v78[2];
      v82 = v78[3];
      v84 = v78[4];
      v83 = v78[5];
      v85 = v79 == *(_QWORD *)(a1 + 72) && v80 == *(_QWORD *)(a1 + 80);
      v86 = v85 && v81 == *(_QWORD *)(a1 + 88);
      v87 = v86 && v82 == *(_QWORD *)(a1 + 96);
      v88 = v87 && v84 == *(_QWORD *)(a1 + 104);
      if (v88 && v83 == *(_QWORD *)(a1 + 112))
      {
        v7 = 0;
        *(_WORD *)(a1 + 60) = v24;
        return v7;
      }
    }
    if (*(_BYTE *)(a1 + 63))
      return 0xFFFFFFFFLL;
    v54 = *(void (**)(void))(**(_QWORD **)(a1 + 8) + 112);
LABEL_208:
    v54();
    return 0xFFFFFFFFLL;
  }
  v90 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), v24 + 3, 1, 6);
  if (!v90)
  {
    v77 = *(unsigned __int8 *)(a1 + 63);
    goto LABEL_179;
  }
  if (v90 == 5)
    return 0xFFFFFFFFLL;
  else
    return v90;
}

uint64_t sub_1ACB6B0B0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __n128 v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int32x2_t *v44;
  uint64_t v46;
  uint64_t v47;
  int32x2_t *v48;
  int32x2_t *v49;
  uint64_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  unsigned int *v73;
  unint64_t v74;
  unsigned int v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84[2];
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v78 = 0;
  if (*(int *)(a1 + 40) >= 1 && (v78 = **(_QWORD **)(a1 + 48)) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = sub_1ACBEB628(a1, 0, &v78);
    v4 = v5;
    if ((_DWORD)v5)
    {
      if ((_DWORD)v5 != 1288)
        return v4;
      *(_BYTE *)(a1 + 70) = 1;
      *(_BYTE *)(a1 + 63) = 2;
      *a2 = 1;
    }
    if (!v78)
    {
      v7 = 1;
      if (*(_BYTE *)(a1 + 70))
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v6 = sub_1ACB6CB58(a1, a2);
  if (!(_DWORD)v6)
    goto LABEL_45;
  v7 = v6;
  v4 = v6;
  if ((_DWORD)v6 != 6922)
  {
    if (*(_BYTE *)(a1 + 70))
      goto LABEL_14;
LABEL_13:
    if ((*(_BYTE *)(a1 + 66) & 2) == 0)
    {
LABEL_14:
      v8 = *(unsigned __int8 *)(a1 + 64);
      if (!*(_BYTE *)(a1 + 64))
      {
        v13 = *(_QWORD *)(a1 + 152);
        if (v13)
        {
          v84[0] = *(_DWORD *)(v13 + 772);
          if (v84[0])
          {
            v14 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)v14)
              (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v14 + 80))(v14, 34, v84);
          }
        }
        if (*(_BYTE *)(a1 + 63))
          v4 = 0;
        else
          v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 10);
        v84[0] = 0;
        v15 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)v15)
          (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v15 + 80))(v15, 34, v84);
        if ((_DWORD)v4)
          goto LABEL_47;
      }
      *(_BYTE *)(a1 + 64) = 1;
      if (*(int *)(a1 + 40) < 1 || (v78 = **(_QWORD **)(a1 + 48)) == 0)
      {
        v4 = sub_1ACBEB628(a1, 0, &v78);
        if ((_DWORD)v4)
          goto LABEL_41;
      }
      if (!sub_1ACB6CB58(a1, a2))
      {
        v4 = 0;
        v7 = 0;
        goto LABEL_41;
      }
      v83 = 0;
      v82 = 0;
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)v9)
        (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v9 + 80))(v9, 34, &v82);
      v10 = *(unsigned __int8 *)(a1 + 65);
      v11 = (v10 + 1);
      v12 = (2 - v10);
      if (!*(_BYTE *)(a1 + 63))
      {
        v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), v11, v12, 10);
        if ((_DWORD)v4)
          goto LABEL_40;
      }
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), &v83);
      if ((_DWORD)v4)
        goto LABEL_23;
      if (v83 < 33)
        goto LABEL_67;
      v4 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v84, 32, 0);
      if ((_DWORD)v4)
        goto LABEL_23;
      if (((LOBYTE(v84[0]) << 24) | (BYTE1(v84[0]) << 16) | (BYTE2(v84[0]) << 8) | HIBYTE(v84[0]) & 0xFE) != 0x377F0682)
        goto LABEL_67;
      v17 = (v85 << 24) | (v86 << 16);
      v18 = v87;
      v19 = v17 | v88 | (v87 << 8);
      if ((v19 & ((_DWORD)v19 - 1)) != 0
        || (v19 - 65537) < 0xFFFF01FF
        || (v20 = HIBYTE(v84[0]) & 1,
            *(_BYTE *)(a1 + 85) = v20,
            *(_DWORD *)(a1 + 56) = v19,
            *(_DWORD *)(a1 + 136) = bswap32(v89),
            *(_QWORD *)(a1 + 104) = v90,
            sub_1ACBEAF64(v20 == 0, v84, 24, 0, (_DWORD *)(a1 + 96)),
            *(_DWORD *)(a1 + 96) != bswap32(v91))
        || *(_DWORD *)(a1 + 100) != bswap32(v92))
      {
LABEL_67:
        v21 = 0;
        goto LABEL_68;
      }
      if (bswap32(v84[1]) != 3007000)
      {
        v4 = sub_1ACBE1D1C(73296);
        goto LABEL_23;
      }
      if (sqlite3_initialize()
        || (v71 = (v19 + 24), (v73 = (unsigned int *)sub_1ACB5D828(v71 + 0x8000)) == 0))
      {
        v4 = 7;
        goto LABEL_23;
      }
      v29 = 0;
      v30 = 0;
      v31 = v18 << 8;
      v32 = (v19 + 24);
      v69 = v73 + 6;
      v33 = (char *)v73 + v19 + 24;
      v63 = v31 | HIWORD(v17);
      v67 = (uint64_t)v73 + v19 + 24;
      v68 = ((v83 - 32) / v71);
      v65 = ((unint64_t)(((v83 - 32) / v71) + 4096) + 0xFFFFFFFF021) >> 12;
      v66 = (unint64_t)v73 + v19 + 32792;
      v62 = (uint64_t)v73 + v19 + 32;
      v76 = 0u;
      v72 = v33;
      while (1)
      {
        v34 = v29 + 4062;
        if (v34 >= v68)
          v34 = v68;
        v74 = v34;
        v81 = 0;
        v35 = ((_DWORD)v30 << 12) | 0xFDEu;
        if (v68 < v35)
          v35 = v68;
        v77 = v35;
        v75 = v29;
        if (*(_DWORD *)(a1 + 40) > (int)v30
          && (v36 = *(_QWORD *)(a1 + 48), v37 = *(_QWORD *)(v36 + 8 * (int)v30), (v81 = v37) != 0))
        {
          v4 = 0;
        }
        else
        {
          v38 = v30;
          v4 = sub_1ACBEB628(a1, v30, &v81);
          v37 = v81;
          if (!v81)
            goto LABEL_156;
          v36 = *(_QWORD *)(a1 + 48);
          LODWORD(v30) = v38;
          v33 = v72;
        }
        if ((_DWORD)v30)
          v39 = (((_DWORD)v30 << 12) - 33);
        else
          v39 = 1;
        *(_QWORD *)(v36 + 8 * v30) = v33;
        if (v39 > v77)
        {
          v40 = 1;
          goto LABEL_117;
        }
        v64 = v30;
        v80 = 0;
        v79 = 0;
        v41 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16)
                                                                                           + 16))(*(_QWORD *)(a1 + 16), v73, v32, (v39 - 1) * v32 + 32);
        if ((_DWORD)v41)
          break;
        if (!sub_1ACBEB784(a1, (unsigned int *)&v80, &v79, v69, (uint64_t)v73))
        {
          v40 = 0;
          v4 = 0;
          goto LABEL_116;
        }
        v70 = 0;
        v57 = v32 * (unint64_t)v39 + 32;
        while (1)
        {
          v58 = sub_1ACB6CDD4(a1, v39, v80);
          if ((_DWORD)v58)
          {
            v4 = v58;
            goto LABEL_153;
          }
          v59 = v79;
          v60 = v76;
          if (v79)
          {
            *(_DWORD *)(a1 + 88) = v39;
            *(_DWORD *)(a1 + 92) = v59;
            *(_WORD *)(a1 + 86) = v63;
            *(_QWORD *)&v60 = *(_QWORD *)(a1 + 96);
          }
          v76 = v60;
          v70 = v39 >= v77;
          if (v74 == v39)
            break;
          v80 = 0;
          v79 = 0;
          v32 = v71;
          v61 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16)
                                                                                             + 16))(*(_QWORD *)(a1 + 16), v73, v71, v57);
          if ((_DWORD)v61)
          {
            v4 = v61;
            v40 = v39 >= v77;
            goto LABEL_116;
          }
          v57 += v71;
          ++v39;
          if (!sub_1ACBEB784(a1, (unsigned int *)&v80, &v79, v69, (uint64_t)v73))
          {
            v4 = 0;
LABEL_153:
            v32 = v71;
            v40 = v70;
            goto LABEL_116;
          }
        }
        v4 = 0;
        v32 = v71;
        v33 = v72;
        v29 = v75;
        LODWORD(v30) = v64;
        v40 = v39 >= v77;
LABEL_117:
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v30) = v37;
        v42 = 34;
        if ((_DWORD)v30)
          v42 = 0;
        v43 = 4 * v42;
        v44 = (int32x2_t *)(v37 + 4 * v42);
        if ((unint64_t)v44 < v66 && v67 + 4 * v42 < (unint64_t)(v37 + 0x8000))
          goto LABEL_138;
        v46 = 0x2000 - v42;
        v47 = (0x2000 - v42) & 0x3FFC;
        v42 += v47;
        v48 = v44 + 1;
        v49 = (int32x2_t *)(v62 + v43);
        v50 = v47;
        do
        {
          v52 = v49[-1];
          v51 = *v49;
          v53 = vmvn_s8((int8x8_t)vceq_s32(v48[-1], v52));
          if ((v53.i8[0] & 1) != 0)
            v48[-1].i32[0] = v52.i32[0];
          if ((v53.i8[4] & 1) != 0)
            v48[-1].i32[1] = v52.i32[1];
          v54 = vmvn_s8((int8x8_t)vceq_s32(*v48, v51));
          if ((v54.i8[0] & 1) != 0)
            v48->i32[0] = v51.i32[0];
          if ((v54.i8[4] & 1) != 0)
            v48->i32[1] = v51.i32[1];
          v48 += 2;
          v49 += 2;
          v50 -= 4;
        }
        while (v50);
        if (v46 != v47)
        {
LABEL_138:
          v55 = 4 * v42;
          do
          {
            v56 = *(_DWORD *)&v33[v55];
            if (*(_DWORD *)(v37 + v55) != v56)
              *(_DWORD *)(v37 + v55) = v56;
            v55 += 4;
          }
          while (v55 != 0x8000);
        }
        if (v40)
        {
          v30 = (v30 + 1);
          v29 += 4096;
          if (v30 <= v65)
            continue;
        }
LABEL_156:
        sqlite3_free(v73);
        v21 = v76;
        if (!(_DWORD)v4)
        {
LABEL_68:
          *(_QWORD *)(a1 + 96) = v21;
          v22 = sub_1ACB6CF44(a1);
          v23 = **(_DWORD ***)(a1 + 48);
          v23[24] = 0;
          v23[32] = *(_DWORD *)(a1 + 88);
          v23[25] = 0;
          if (*(_BYTE *)(a1 + 63))
            goto LABEL_69;
          v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 4, 1, 10, v22);
          if ((_DWORD)v25 != 5)
          {
            v4 = v25;
            if ((_DWORD)v25)
              goto LABEL_23;
LABEL_69:
            v24 = *(_DWORD *)(a1 + 88);
            if (!v24)
              v24 = -1;
            v23[26] = v24;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 4, 1, 9, v22);
              goto LABEL_76;
            }
LABEL_77:
            v23[27] = -1;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 5, 1, 9, v22);
              goto LABEL_79;
            }
            goto LABEL_80;
          }
LABEL_76:
          if (*(_BYTE *)(a1 + 63))
            goto LABEL_77;
          v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 5, 1, 10);
          if ((_DWORD)v26 != 5)
          {
            v4 = v26;
            if ((_DWORD)v26)
              goto LABEL_23;
            goto LABEL_77;
          }
LABEL_79:
          if (*(_BYTE *)(a1 + 63))
          {
LABEL_80:
            v23[28] = -1;
            if (!*(_BYTE *)(a1 + 63))
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 6, 1, 9, v22);
              goto LABEL_82;
            }
            goto LABEL_83;
          }
          v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 6, 1, 10);
          if ((_DWORD)v27 != 5)
          {
            v4 = v27;
            if ((_DWORD)v27)
              goto LABEL_23;
            goto LABEL_80;
          }
LABEL_82:
          if (*(_BYTE *)(a1 + 63))
          {
LABEL_83:
            v23[29] = -1;
            if (!*(_BYTE *)(a1 + 63))
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 7, 1, 9, v22);
            v4 = 0;
          }
          else
          {
            v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 7, 1, 10);
            v4 = v28;
            if ((_DWORD)v28 != 5)
            {
              if ((_DWORD)v28)
                goto LABEL_23;
              goto LABEL_83;
            }
          }
          if (*(_DWORD *)(a1 + 92))
            sqlite3_log(283, "recovered %d frames from WAL file %s", *(_DWORD *)(a1 + 88), *(const char **)(a1 + 128));
        }
LABEL_23:
        if (!*(_BYTE *)(a1 + 63))
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), v11, v12, 9);
LABEL_40:
        v7 = 1;
        *a2 = 1;
LABEL_41:
        if (!v8)
        {
          *(_BYTE *)(a1 + 64) = 0;
          if (!*(_BYTE *)(a1 + 63))
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 9);
        }
        if (!v7)
        {
LABEL_45:
          if (*(_DWORD *)(a1 + 72) != 3007000)
            v4 = sub_1ACBE1D1C(74581);
        }
        goto LABEL_47;
      }
      v4 = v41;
      v40 = 0;
LABEL_116:
      v29 = v75;
      LODWORD(v30) = v64;
      v33 = v72;
      goto LABEL_117;
    }
    if (!*(_BYTE *)(a1 + 63))
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 6);
      if ((_DWORD)v4)
        goto LABEL_47;
      if (!*(_BYTE *)(a1 + 63))
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 5);
        v4 = 264;
        goto LABEL_47;
      }
    }
    v4 = 264;
  }
LABEL_47:
  if (*(_BYTE *)(a1 + 70))
  {
    if ((_DWORD)v4)
    {
      sub_1ACBEB4DC(a1, 0);
      *(_BYTE *)(a1 + 70) = 0;
      if ((_DWORD)v4 == 522)
        v4 = 0xFFFFFFFFLL;
      else
        v4 = v4;
    }
    *(_BYTE *)(a1 + 63) = 0;
  }
  return v4;
}

uint64_t sub_1ACB6BB48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (**v5)(uint64_t);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return sub_1ACB5D828(a2);
  v3 = a1;
  if (!a2)
  {
    v5 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return v3;
      v5 = &xmmword_1ECD3B1D0;
    }
    (*v5)(v3);
    return 0;
  }
  if ((unint64_t)a2 > 0x7FFFFEFF)
    return 0;
  v6 = off_1ECD3B178(a1);
  v7 = unk_1ECD3B180(a2);
  v8 = (v7 - v6);
  if ((_DWORD)v7 == v6)
    return v3;
  v9 = v7;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    if (qword_1ECD3E900 < a2)
      qword_1ECD3E900 = a2;
    if ((int)v8 < 1)
      goto LABEL_21;
    v10 = qword_1ECD3E888;
    if (qword_1ECD3E888 < *((_QWORD *)&xmmword_1ECD3E930 + 1) - v8)
      goto LABEL_21;
    if (*((uint64_t *)&xmmword_1ECD3E930 + 1) >= 1)
    {
      if ((_QWORD)xmmword_1ECD3E930)
      {
        xmmword_1ECD3B1D0(xmmword_1ECD3E930);
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      }
    }
    if (qword_1ECD3E940 < 1 || v10 < qword_1ECD3E940 - v8)
    {
LABEL_21:
      v11 = off_1ECD3B170(v3, v9);
      v3 = v11;
      if (v11)
      {
        v12 = qword_1ECD3E888 + (int)(off_1ECD3B178(v11) - v6);
        qword_1ECD3E888 = v12;
        if (v12 > qword_1ECD3E8D8)
          qword_1ECD3E8D8 = v12;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1D0(xmmword_1ECD3E930);
      return v3;
    }
    if (!(_QWORD)xmmword_1ECD3E930)
      return 0;
    xmmword_1ECD3B1D0(xmmword_1ECD3E930);
    return 0;
  }
  return off_1ECD3B170(v3, v7);
}

uint64_t sub_1ACB6BDB8(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  off_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t (**v57)(uint64_t *);
  void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  const char *v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char __strerrbuf[16];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v10 = off_1EECACB20();
  if (v10 < 0x8000)
    v11 = 1;
  else
    v11 = v10 >> 15;
  if (*(_DWORD *)(a1 + 160))
    goto LABEL_5;
  v14 = *(uint64_t **)(a1 + 64);
  if (v14)
  {
    if (*(_DWORD *)(*v14 + 168))
    {
LABEL_5:
      sqlite3_log(27, "denying shm read from invalidated fd %d", *(_DWORD *)(a1 + 24));
      return 6922;
    }
    goto LABEL_9;
  }
  if (sqlite3_initialize())
    return 7;
  v23 = (uint64_t *)sub_1ACB5D828(24);
  if (!v23)
    return 7;
  v24 = v23;
  *v23 = 0;
  v23[1] = 0;
  v23[2] = 0;
  v25 = &qword_1ECD3DBE0[132];
  if (qword_1ECD3E950)
  {
    xmmword_1ECD3B1C0(qword_1ECD3E950);
    v25 = &qword_1ECD3DBE0[132];
  }
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(v26 + 56);
  if (v27)
  {
    v12 = 0;
LABEL_27:
    *v24 = v27;
    ++*(_DWORD *)(v27 + 48);
    *(_QWORD *)(a1 + 64) = v24;
    v28 = v25[298];
    if (v28)
      xmmword_1ECD3B1D0(v28);
    v29 = *(_QWORD *)(v27 + 8);
    if (v29)
    {
      xmmword_1ECD3B1C0(v29);
      v30 = *(_QWORD *)(v27 + 8);
      v24[1] = *(_QWORD *)(v27 + 56);
      *(_QWORD *)(v27 + 56) = v24;
      if (!v30)
        goto LABEL_94;
      goto LABEL_93;
    }
    v24[1] = *(_QWORD *)(v27 + 56);
    *(_QWORD *)(v27 + 56) = v24;
    goto LABEL_94;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v96 = 0u;
  v31 = *(const char **)(a1 + 56);
  if (off_1EECAC940(*(unsigned int *)(a1 + 24), &v96))
  {
    *(_DWORD *)(a1 + 32) = *__error();
    v12 = 1802;
    goto LABEL_86;
  }
  if (*(_UNKNOWN **)a1 == &unk_1E5C730D8)
  {
    v54 = *(_QWORD *)(a1 + 40);
    v55 = *(uint64_t **)(v54 + 16);
    if (!v55 || (v56 = *v55, *(int *)v56 < 2) || !*(_QWORD *)(v56 + 104) || (v31 = *(const char **)(v54 + 24)) == 0)
    {
      v12 = sub_1ACBE1D1C(46639);
      goto LABEL_86;
    }
  }
  v53 = strlen(v31);
  if (sqlite3_initialize() || (v92 = v53 + 182, v94 = v53, (v58 = (void *)sub_1ACB5D828(v92)) == 0))
  {
LABEL_80:
    v12 = 7;
    goto LABEL_86;
  }
  v27 = (uint64_t)v58;
  bzero(v58, v92);
  *(_QWORD *)(v27 + 16) = v27 + 176;
  v59 = v94 + 6;
  v95 = (char *)(v27 + 176);
  sqlite3_snprintf(v59, (char *)(v27 + 176), "%s-shm", v31);
  *(_DWORD *)(v27 + 24) = -1;
  v60 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v60 + 56) = v27;
  *(_QWORD *)v27 = v60;
  if ((_BYTE)word_1ECD3B144)
  {
    v61 = sqlite3_initialize();
    if ((_DWORD)v61)
    {
      *(_QWORD *)(v27 + 8) = 0;
      goto LABEL_80;
    }
    v67 = qword_1ECD3B1B0(v61);
    *(_QWORD *)(v27 + 8) = v67;
    if (!v67)
      goto LABEL_80;
    v68 = sqlite3_initialize();
    if ((_DWORD)v68)
    {
      v69 = 0;
LABEL_113:
      *(_QWORD *)(v27 + 8 * v69 + 64) = 0;
      goto LABEL_80;
    }
    v70 = qword_1ECD3B1B0(v68);
    *(_QWORD *)(v27 + 64) = v70;
    if (!v70)
      goto LABEL_80;
    v71 = sqlite3_initialize();
    if ((_DWORD)v71)
    {
      v69 = 1;
      goto LABEL_113;
    }
    v72 = qword_1ECD3B1B0(v71);
    *(_QWORD *)(v27 + 72) = v72;
    if (!v72)
      goto LABEL_80;
    v73 = sqlite3_initialize();
    if ((_DWORD)v73)
    {
      v69 = 2;
      goto LABEL_113;
    }
    v74 = qword_1ECD3B1B0(v73);
    *(_QWORD *)(v27 + 80) = v74;
    if (!v74)
      goto LABEL_80;
    v75 = sqlite3_initialize();
    if ((_DWORD)v75)
    {
      v69 = 3;
      goto LABEL_113;
    }
    v76 = qword_1ECD3B1B0(v75);
    *(_QWORD *)(v27 + 88) = v76;
    if (!v76)
      goto LABEL_80;
    v77 = sqlite3_initialize();
    if ((_DWORD)v77)
    {
      v69 = 4;
      goto LABEL_113;
    }
    v78 = qword_1ECD3B1B0(v77);
    *(_QWORD *)(v27 + 96) = v78;
    if (!v78)
      goto LABEL_80;
    v79 = sqlite3_initialize();
    if ((_DWORD)v79)
    {
      v69 = 5;
      goto LABEL_113;
    }
    v80 = qword_1ECD3B1B0(v79);
    *(_QWORD *)(v27 + 104) = v80;
    if (!v80)
      goto LABEL_80;
    v81 = sqlite3_initialize();
    if ((_DWORD)v81)
    {
      v69 = 6;
      goto LABEL_113;
    }
    v82 = qword_1ECD3B1B0(v81);
    *(_QWORD *)(v27 + 112) = v82;
    if (!v82)
      goto LABEL_80;
    v83 = sqlite3_initialize();
    if ((_DWORD)v83)
    {
      v69 = 7;
      goto LABEL_113;
    }
    v84 = qword_1ECD3B1B0(v83);
    *(_QWORD *)(v27 + 120) = v84;
    if (!v84)
      goto LABEL_80;
  }
  if (*(_BYTE *)(v26 + 33))
  {
    v12 = 0;
LABEL_139:
    v25 = qword_1ECD3DBE0 + 1056;
    goto LABEL_27;
  }
  v85 = *(_DWORD *)(a1 + 120) & 0x20000100;
  v86 = dword_1ACCBD88C[((unint64_t)*(unsigned int *)(a1 + 124) >> 20) & 7];
  if (off_1EECAC8F8(v95, 6) && (*__error() == 1 || *__error() == 13))
  {
    *(_DWORD *)(v27 + 24) = -1;
  }
  else
  {
    if (sqlite3_uri_BOOLean(*(const char **)(a1 + 56), "readonly_shm", 0))
    {
      v87 = *(unsigned int *)(v27 + 24);
    }
    else
    {
      v87 = sub_1ACBE1D30(v95, v85 | 0x202u, WORD2(v96) & 0x1FF, v86);
      *(_DWORD *)(v27 + 24) = v87;
    }
    if ((v87 & 0x80000000) == 0)
      goto LABEL_150;
  }
  v87 = sub_1ACBE1D30(v95, v85, WORD2(v96) & 0x1FF, v86);
  *(_DWORD *)(v27 + 24) = v87;
  if ((v87 & 0x80000000) != 0)
  {
    if (*__error() == 1)
    {
      v12 = 23;
      sub_1ACBE2298(23, "open", v95, 46710);
    }
    else
    {
      v12 = sub_1ACBE1D1C(46712);
      v90 = __error();
      sub_1ACBE1C58(v12, "open", v95, *v90, 46712);
    }
    goto LABEL_86;
  }
  *(_BYTE *)(v27 + 34) = 1;
LABEL_150:
  if ((*(_WORD *)(a1 + 30) & 2) == 0)
  {
    v88 = sub_1ACBE670C(v87, *(_DWORD *)(a1 + 124) & 0x700000, 1);
    v12 = v88;
    if ((_DWORD)v88 == 10)
    {
      *(_DWORD *)(a1 + 32) = *__error();
    }
    else if (!(_DWORD)v88)
    {
      v87 = *(unsigned int *)(v27 + 24);
      goto LABEL_154;
    }
    off_1EECAC8E0(*(_DWORD *)(v27 + 24));
    goto LABEL_86;
  }
LABEL_154:
  sub_1ACBE665C(v87, v97, DWORD1(v97));
  v89 = sub_1ACBE69BC(a1, v27);
  v12 = v89;
  if ((_DWORD)v89 == 1288 || !(_DWORD)v89)
  {
    sub_1ACBE526C(*(_DWORD *)(v27 + 24), (NSObject **)(v27 + 160), 8);
    goto LABEL_139;
  }
LABEL_86:
  sub_1ACBE6B88(a1);
  v57 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_91:
    (*v57)(v24);
    goto LABEL_92;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v24);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v24);
  v24 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v57 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
    goto LABEL_91;
  }
LABEL_92:
  v30 = qword_1ECD3E950;
  if (qword_1ECD3E950)
LABEL_93:
    xmmword_1ECD3B1D0(v30);
LABEL_94:
  if ((_DWORD)v12)
    return v12;
  v14 = *(uint64_t **)(a1 + 64);
LABEL_9:
  v15 = *v14;
  v16 = *(_QWORD *)(*v14 + 8);
  if (v16)
    xmmword_1ECD3B1C0(v16);
  if (*(_BYTE *)(v15 + 35))
  {
    v17 = sub_1ACBE69BC(a1, v15);
    if (v17)
      goto LABEL_53;
    *(_BYTE *)(v15 + 35) = 0;
  }
  v18 = ((int)v11 + a2) / (int)v11 * v11;
  if (v18 <= *(unsigned __int16 *)(v15 + 32))
    goto LABEL_52;
  v19 = *(const char **)(v15 + 16);
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v96 = 0u;
  *(_DWORD *)(v15 + 28) = a3;
  v20 = *(unsigned int *)(v15 + 24);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_47;
  if (off_1EECAC940(v20, &v96))
  {
    v21 = *__error();
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v21, __strerrbuf, 0x4FuLL);
    v22 = &byte_1ACCBEAEE;
    if (v19)
      v22 = v19;
    v17 = 4874;
    sqlite3_log(4874, "os_unix.c:%d: (%d) %s(%s) - %s", 46857, v21, "unixShmMap-stat", v22, __strerrbuf);
    goto LABEL_53;
  }
  v32 = v18 * a3;
  v33 = v102;
  if ((uint64_t)v102 >= v32)
    goto LABEL_47;
  if (!a4)
  {
LABEL_52:
    v17 = 0;
    goto LABEL_53;
  }
  if ((uint64_t)v102 < 0)
    v33 = v102 + 4095;
  v34 = (uint64_t)(int)(v32 + ((int)v32 < 0 ? 0xFFF : 0)) >> 12;
  v35 = (char *)(int)(v33 >> 12);
  if ((uint64_t)v35 < v34)
  {
    v91 = v34;
    do
    {
      v36 = *(_DWORD *)(v15 + 24);
      v93 = v35;
      v37 = ((_DWORD)v35 << 12) | 0xFFF;
      while (1)
      {
        v38 = off_1EECAC9E8(v36, &byte_1ACCBEAEE, 1uLL, v37);
        if ((v38 & 0x80000000) == 0)
          break;
        if (*__error() != 4)
        {
          if (*__error() == 28)
            v17 = 13;
          else
            v17 = 4874;
          goto LABEL_103;
        }
      }
      if (v38 != 1)
      {
        v17 = 4874;
LABEL_103:
        v62 = *__error();
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v62, __strerrbuf, 0x4FuLL);
        v63 = &byte_1ACCBEAEE;
        if (v19)
          v63 = v19;
        sqlite3_log(v17, "os_unix.c:%d: (%d) %s(%s) - %s", 46885, v62, "unixShmMap-write", v63, __strerrbuf);
        goto LABEL_53;
      }
      v35 = v93 + 1;
    }
    while ((uint64_t)(v93 + 1) < v91);
  }
LABEL_47:
  v39 = *(_QWORD *)(v15 + 40);
  if (sqlite3_initialize() || (v40 = sub_1ACB6BB48(v39, (8 * v18) & ~((8 * v18) >> 31))) == 0)
  {
    v17 = 3082;
    goto LABEL_53;
  }
  *(_QWORD *)(v15 + 40) = v40;
  if (v18 <= *(unsigned __int16 *)(v15 + 32))
    goto LABEL_52;
  v41 = (int)v11 * a3;
  v42 = a3;
  while ((*(_DWORD *)(v15 + 24) & 0x80000000) != 0)
  {
    if (sqlite3_initialize() || (v49 = (void *)sub_1ACB5D828(v41)) == 0)
    {
      v17 = 7;
      goto LABEL_53;
    }
    v48 = (uint64_t)v49;
    bzero(v49, v41);
LABEL_74:
    v50 = *(unsigned __int16 *)(v15 + 32);
    if ((int)v11 >= 1)
    {
      v51 = 8 * v50;
      v52 = v11;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v15 + 40) + v51) = v48;
        v51 += 8;
        v48 += v42;
        --v52;
      }
      while (v52);
    }
    v17 = 0;
    v46 = v50 + v11;
    *(_WORD *)(v15 + 32) = v46;
    if (v18 <= v46)
      goto LABEL_53;
  }
  if (*(_BYTE *)(v15 + 34))
    v47 = 1;
  else
    v47 = 3;
  v48 = off_1EECACAD8(0, v41, v47, 1);
  if (v48 != -1)
    goto LABEL_74;
  v64 = *(const char **)(v15 + 16);
  v65 = *__error();
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v65, __strerrbuf, 0x4FuLL);
  v66 = &byte_1ACCBEAEE;
  if (v64)
    v66 = v64;
  v17 = 5386;
  sqlite3_log(5386, "os_unix.c:%d: (%d) %s(%s) - %s", 46912, v65, "mmap", v66, __strerrbuf);
LABEL_53:
  if (*(unsigned __int16 *)(v15 + 32) <= a2)
    v43 = 0;
  else
    v43 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8 * a2);
  *a5 = v43;
  if (v17)
    v44 = 1;
  else
    v44 = *(_BYTE *)(v15 + 34) == 0;
  if (v44)
    v12 = v17;
  else
    v12 = 8;
  v45 = *(_QWORD *)(v15 + 8);
  if (v45)
    xmmword_1ECD3B1D0(v45);
  return v12;
}

uint64_t sub_1ACB6C7EC(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v29;
  _QWORD v30[3];

  v4 = *(uint64_t **)(a1 + 64);
  if (!v4)
    return 5130;
  v5 = *v4;
  if (!*v4)
    return 5130;
  v8 = a2;
  v10 = a3 + a2;
  v11 = (1 << (a3 + a2)) + (-1 << a2);
  if (((a4 & 1) == 0 || ((unsigned __int16)v11 & (unsigned __int16)(*((_WORD *)v4 + 10) | *((_WORD *)v4 + 9))) == 0)
    && a4 != 10
    && (a4 != 6 || ((unsigned __int16)v11 & *((_WORD *)v4 + 9)) != 0))
  {
    return 0;
  }
  v29 = (1 << (a3 + a2)) + (-1 << a2);
  LODWORD(v14) = a2;
  if (a3 >= 1)
  {
    v14 = a2;
    v27 = a3 + a2;
    while (1)
    {
      v15 = *(_QWORD *)(v5 + 64 + 8 * v14);
      if (a4 == 10)
      {
        if (v15)
        {
          v16 = ((uint64_t (*)(void))*(&xmmword_1ECD3B1C0 + 1))();
          if ((_DWORD)v16)
          {
            v12 = v16;
            v8 = a2;
            if ((int)v14 > a2)
              goto LABEL_59;
            return v12;
          }
        }
      }
      else if (v15)
      {
        xmmword_1ECD3B1C0(v15);
      }
      if (++v14 >= v10)
      {
        v8 = a2;
        v10 = v27;
        break;
      }
    }
  }
  v17 = v5 + 128;
  if ((a4 & 1) == 0)
  {
    if ((a4 & 4) == 0)
    {
      if (a3 >= 1)
      {
        v18 = v8;
        while (!*(_DWORD *)(v17 + 4 * v18))
        {
          if (++v18 >= v10)
            goto LABEL_27;
        }
LABEL_52:
        v12 = 5;
        if ((int)v14 > v8)
          goto LABEL_59;
        return v12;
      }
LABEL_27:
      v19 = sub_1ACBE6F28(a1, 3, v8 + 120, a3);
      if (!(_DWORD)v19)
      {
        *((_WORD *)v4 + 10) |= v29;
        if (a3 >= 1)
        {
          if (v10 <= v8 + 1)
            v20 = v8 + 1;
          else
            v20 = v10;
          memset((void *)(v5 + 4 * v8 + 128), 255, 4 * (v20 + ~v8) + 4);
        }
        v12 = 0;
        if ((int)v14 <= v8)
          return v12;
LABEL_59:
        v25 = (int)v14;
        do
        {
          v26 = *(_QWORD *)(v5 + 56 + 8 * v25);
          if (v26)
            xmmword_1ECD3B1D0(v26);
          --v25;
        }
        while (v25 > v8);
        return v12;
      }
LABEL_58:
      v12 = v19;
      if ((int)v14 <= v8)
        return v12;
      goto LABEL_59;
    }
    v24 = *(_DWORD *)(v17 + 4 * v8);
    if (v24 < 0)
      goto LABEL_52;
    if (!v24)
    {
      v19 = sub_1ACBE6F28(a1, 1, v8 + 120, a3);
      if ((_DWORD)v19)
        goto LABEL_58;
      v24 = *(_DWORD *)(v17 + 4 * v8);
    }
    v12 = 0;
    *((_WORD *)v4 + 9) |= v29;
    *(_DWORD *)(v17 + 4 * v8) = v24 + 1;
    if ((int)v14 <= v8)
      return v12;
    goto LABEL_59;
  }
  if ((a4 & 4) != 0)
  {
    v21 = *(_DWORD *)(v17 + 4 * v8);
    if (v21 >= 2)
    {
      v12 = 0;
      *(_DWORD *)(v17 + 4 * v8) = v21 - 1;
      *((_WORD *)v4 + 9) &= ~v29;
      if ((int)v14 <= v8)
        return v12;
      goto LABEL_59;
    }
  }
  v22 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 24);
  if ((v22 & 0x80000000) != 0)
  {
    v23 = a3;
  }
  else
  {
    v23 = a3;
    v30[0] = v8 + 120;
    v30[1] = a3;
    v30[2] = 0x200000000;
    if (sub_1ACBE2784(v22, (uint64_t)v30, a1) == -1)
    {
      if (*(_DWORD *)(a1 + 132))
        v12 = 773;
      else
        v12 = 5;
      if ((int)v14 > v8)
        goto LABEL_59;
      return v12;
    }
  }
  bzero((void *)(v17 + 4 * v8), 4 * v23);
  v12 = 0;
  *((_WORD *)v4 + 9) &= ~v29;
  *((_WORD *)v4 + 10) &= ~v29;
  if ((int)v14 > v8)
    goto LABEL_59;
  return v12;
}

uint64_t sub_1ACB6CB58(uint64_t a1, _DWORD *a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = **(__int128 ***)(a1 + 48);
  if (!v2)
    return 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)v5)
    {
      if (*(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(_QWORD *)v5 + 16) == sub_1ACB5AEB4
        && *(_DWORD *)(v5 + 128) <= 3u)
      {
        if (*(_DWORD *)(v5 + 160))
          goto LABEL_40;
        v16 = *(_QWORD *)(v5 + 64);
        if (v16)
        {
          if (*(_DWORD *)(*(_QWORD *)v16 + 168))
            goto LABEL_40;
        }
      }
    }
  }
  v18 = *v2;
  v19 = v2[1];
  v20 = v2[2];
  if (*(_BYTE *)(a1 + 63) != 2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5
    && *(_QWORD *)v5
    && *(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(_QWORD *)v5 + 16) == sub_1ACB5AEB4
    && *(_DWORD *)(v5 + 128) <= 3u
    && (*(_DWORD *)(v5 + 160) || (v17 = *(_QWORD *)(v5 + 64)) != 0 && *(_DWORD *)(*(_QWORD *)v17 + 168)))
  {
LABEL_40:
    sqlite3_log(27, "denying shm read from invalidated fd %d", *(_DWORD *)(v5 + 24));
    return 6922;
  }
  else
  {
    result = 1;
    if (!((unint64_t)v18 ^ *((_QWORD *)v2 + 6) | *((_QWORD *)&v18 + 1) ^ *((_QWORD *)v2 + 7) | (unint64_t)v19 ^ *((_QWORD *)v2 + 8) | *((_QWORD *)&v19 + 1) ^ *((_QWORD *)v2 + 9) | (unint64_t)v20 ^ *((_QWORD *)v2 + 10) | *((_QWORD *)&v20 + 1) ^ *((_QWORD *)v2 + 11)))
    {
      if (BYTE12(v18))
      {
        v7 = DWORD1(v18) + v18 + v18 + DWORD2(v18);
        v8 = HIDWORD(v18) + DWORD1(v18) + v18 + v7;
        v9 = v8 + v7 + v19;
        v10 = DWORD1(v19) + v8 + v9;
        if (__PAIR64__(DWORD1(v20)+ HIDWORD(v19)+ v10+ v10+ v9+ DWORD2(v19)+ HIDWORD(v19)+ v10+ v10+ v9+ DWORD2(v19)+ v10+ v9+ DWORD2(v19)+ (int)v20, HIDWORD(v19) + v10 + v10 + v9 + DWORD2(v19) + v10 + v9 + DWORD2(v19) + (int)v20) == *((_QWORD *)&v20 + 1))
        {
          v15 = *(_QWORD *)(a1 + 72) == (_QWORD)v18
             && *(_QWORD *)(a1 + 80) == *((_QWORD *)&v18 + 1)
             && *(_QWORD *)(a1 + 88) == (_QWORD)v19
             && *(_QWORD *)(a1 + 96) == *((_QWORD *)&v19 + 1)
             && *(_QWORD *)(a1 + 104) == (_QWORD)v20
             && *(_QWORD *)(a1 + 112) == *((_QWORD *)&v20 + 1);
          result = 0;
          if (!v15)
          {
            *a2 = 1;
            *(_OWORD *)(a1 + 72) = v18;
            *(_OWORD *)(a1 + 88) = v19;
            *(_OWORD *)(a1 + 104) = v20;
            *(_DWORD *)(a1 + 56) = (*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00;
          }
        }
      }
    }
  }
  return result;
}

void sub_1ACB6CDCC()
{
  __dmb(0xBu);
}

uint64_t sub_1ACB6CDD4(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v6 = ((unint64_t)(a2 + 4096) + 0xFFFFFFFF021) >> 12;
  if (*(_DWORD *)(a1 + 40) > (int)v6 && (v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (int)v6), (v17 = v7) != 0))
  {
    result = 0;
  }
  else
  {
    result = sub_1ACBEB628(a1, ((unint64_t)(a2 + 4096) + 0xFFFFFFFF021) >> 12, &v17);
    v7 = v17;
    if (!v17)
    {
      if (result <= 1)
        return 1;
      else
        return result;
    }
  }
  v9 = 34;
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = ((_DWORD)v6 << 12) - 34;
  }
  else
  {
    v10 = 0;
  }
  LODWORD(v18) = v10;
  if (!(_DWORD)result)
  {
    v11 = (void *)(v7 + 4 * v9);
    v12 = a2 - v10 - 1;
    if (a2 - v10 == 1)
      bzero(v11, (unint64_t)(0x800000000000 - (v9 << 34)) >> 32);
    v13 = v7 + 0x4000;
    if (*((_DWORD *)v11 + v12))
      sub_1ACBEB86C(a1);
    v14 = (383 * (_WORD)a3) & 0x1FFF;
    if (*(_WORD *)(v13 + 2 * v14))
    {
      v15 = ~a2 + v10;
      while (!__CFADD__(v15++, 1))
      {
        v14 = ((_WORD)v14 + 1) & 0x1FFF;
        if (!*(_WORD *)(v13 + 2 * v14))
          goto LABEL_17;
      }
      return sub_1ACBEB08C(73159);
    }
    else
    {
LABEL_17:
      result = 0;
      *((_DWORD *)v11 + v12) = a3;
      *(_WORD *)(v13 + 2 * v14) = a2 - v10;
    }
  }
  return result;
}

__n128 sub_1ACB6CF44(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;

  *(_DWORD *)(a1 + 72) = 3007000;
  v1 = a1 + 72;
  *(_BYTE *)(a1 + 84) = 1;
  v2 = *(_DWORD *)(a1 + 76);
  v3 = v2 + *(_DWORD *)(a1 + 84);
  v4 = **(_QWORD **)(a1 + 48);
  v5 = v2 + *(_DWORD *)(a1 + 80) + 6014000;
  v6 = v3 + 3007000 + v5;
  v7 = v6 + v5 + *(_DWORD *)(a1 + 88);
  v8 = *(_DWORD *)(a1 + 92) + v6 + v7;
  v9 = v8 + v7 + *(_DWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a1 + 100) + v8 + v9;
  v11 = v10 + v9 + *(_DWORD *)(a1 + 104);
  v12 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 116) = v12 + v10 + v11;
  v13 = *(_OWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 80) = v14;
  *(_OWORD *)(v4 + 48) = v13;
  if (*(_BYTE *)(a1 + 63) != 2)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  result = *(__n128 *)v1;
  v16 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + 32) = v16;
  *(__n128 *)v4 = result;
  return result;
}

void sqlite3_log(int iErrCode, const char *zFormat, ...)
{
  uint64_t v2;
  BOOL v4;
  NSObject *v6;
  os_log_type_t v7;
  NSObject *v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int128 v15;
  int v16;
  uint8_t buf[4];
  __int128 *v18;
  uint64_t v19;
  va_list va;

  va_start(va, zFormat);
  v2 = *(_QWORD *)&iErrCode;
  v19 = *MEMORY[0x1E0C80C00];
  if (off_1ECD3B2B8 || (dword_1ECD3B304 & 1) != 0)
  {
    v9 = 0;
    v14 = 0;
    v10 = &v15;
    v11 = 1536;
    v12 = 0;
    v13 = 0;
    sqlite3_str_vappendf((sqlite3_str *)&v9, zFormat, va);
    if (v10)
    {
      *((_BYTE *)v10 + HIDWORD(v12)) = 0;
      if ((_DWORD)v12)
      {
        if ((v13 & 0x400) == 0)
          sub_1ACBE13A0(&v9);
      }
    }
    if (off_1ECD3B2B8)
      ((void (*)(uint64_t, uint64_t, __int128 *))off_1ECD3B2B8)(qword_1ECD3B2C0, v2, &v15);
    if ((dword_1ECD3B304 & 1) != 0)
    {
      if (qword_1ECD3EA78 != -1)
        dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
      if ((_QWORD)v15 != 0x2068637573206F6ELL || *(_QWORD *)((char *)&v15 + 7) != 0x203A656C62617420)
      {
        v4 = (_QWORD)v15 == 0x6E656D6574617473 && *((_QWORD *)&v15 + 1) == 0x7374726F62612074;
        if (!v4 || v16 != 544497952)
        {
          v6 = qword_1ECD3EA48;
          v7 = OS_LOG_TYPE_ERROR;
          switch((char)v2)
          {
            case 0:
            case 17:
            case 19:
            case 27:
            case 100:
            case 101:
              return;
            case 1:
            case 2:
            case 7:
            case 10:
            case 11:
            case 13:
            case 15:
            case 21:
            case 26:
              goto LABEL_24;
            case 14:
              v6 = qword_1ECD3EA50;
              goto LABEL_24;
            default:
              v7 = OS_LOG_TYPE_DEFAULT;
LABEL_24:
              if (os_log_type_enabled(v6, v7))
              {
                if ((dword_1ECD3B304 & 0x20) != 0)
                {
                  v8 = qword_1ECD3EA48;
                  if (os_log_type_enabled((os_log_t)qword_1ECD3EA48, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315138;
                    v18 = &v15;
                    _os_log_impl(&dword_1ACB54000, v8, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
                  }
                }
                if (os_log_type_enabled(v6, v7))
                {
                  *(_DWORD *)buf = 136315138;
                  v18 = &v15;
                  _os_log_impl(&dword_1ACB54000, v6, v7, "%s", buf, 0xCu);
                }
              }
              break;
          }
        }
      }
    }
  }
}

uint64_t sub_1ACB6D2A8(int a1, int a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  result = sub_1ACB5D828(192);
  if (result)
  {
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    if (a2 <= 16)
      v5 = 16;
    else
      v5 = a2;
    v6 = (v5 + 7) & 0xFFFFFFF8;
    *(_DWORD *)result = a1;
    *(_DWORD *)(result + 4) = v6;
    v7 = v6 + a1;
    if (v7 <= 0x20000)
      v8 = 0x20000;
    else
      v8 = v7;
    v9 = (*MEMORY[0x1E0C85AA0] + v8) & ~*MEMORY[0x1E0C85AA0];
    *(_QWORD *)(result + 8) = v9;
    v10 = v9 / v7;
    *(_DWORD *)(result + 124) = v10;
    if ((int)v10 <= 10)
      LODWORD(v10) = 10;
    *(_DWORD *)(result + 16) = v10;
  }
  return result;
}

uint64_t sub_1ACB6D34C(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 >= 0x3FFFFFFF)
    v2 = 0x3FFFFFFF;
  else
    v2 = a2;
  if (v2 <= *(_DWORD *)(result + 16))
    v2 = *(_DWORD *)(result + 16);
  v3 = *(_DWORD *)(result + 124);
  v4 = (int)(v2 - 1) / v3 + 1;
  v5 = v3 * (uint64_t)v4;
  v6 = v5 << 31 >> 31;
  if (v6 != v5 || v6 < 0)
  {
    do
    {
      do
      {
        v4 /= 2;
        v7 = v3 * (uint64_t)v4;
        v5 = v7 << 31 >> 31;
      }
      while (v5 != v7);
    }
    while (v5 < 0);
  }
  *(_DWORD *)(result + 128) = v4;
  *(_DWORD *)(result + 20) = v5;
  return sub_1ACC4DA08(result);
}

unint64_t sub_1ACB6D3B4(int *a1, unsigned int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  uint64_t (**v22)(uint64_t);
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t);
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  v49 = 0;
  if (a3 == 1 && off_1EECAD248)
    off_1EECAD248(a1);
  v6 = sub_1ACC4E0FC((uint64_t)a1, a2, &v49);
  v7 = v6;
  if (!a3 || v6)
    goto LABEL_74;
  if ((*((_QWORD *)a1 + 8) || *((_QWORD *)a1 + 10) || *((_QWORD *)a1 + 12) || *((_QWORD *)a1 + 14))
    && a1[7] >= a1[5])
  {
    v8 = a1[12];
    v9 = *(_QWORD *)&a1[4 * (((_BYTE)v8 - 1) & 3) + 16];
    if (!v9)
    {
      do
      {
        v10 = v8++ & 3;
        v9 = *(_QWORD *)&a1[4 * v10 + 16];
      }
      while (!v9);
      a1[12] = v8;
    }
    v6 = sub_1ACC4E0FC((uint64_t)a1, *(_DWORD *)(v9 - 24), 0);
    if (v6)
    {
      v7 = v6;
      v11 = (uint64_t *)(*((_QWORD *)a1 + 5) + 8 * (*(_DWORD *)(v6 + 16) % a1[8]));
      v12 = *v11;
      if (*v11 != v6)
      {
        do
        {
          v13 = v12;
          v12 = *(_QWORD *)(v12 + 24);
        }
        while (v12 != v6);
        v11 = (uint64_t *)(v13 + 24);
      }
      *v11 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      --a1[7];
      goto LABEL_53;
    }
  }
  if (a3 != 2 && a1[7] >= a1[5])
  {
LABEL_21:
    v7 = 0;
    goto LABEL_53;
  }
  v6 = sub_1ACBECD04(64);
  v7 = v6;
  if (!v6)
    goto LABEL_53;
  v14 = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v50[0] = a1 + 42;
  v50[1] = a1 + 34;
  v48 = (uint64_t *)(a1 + 34);
  v50[2] = a1 + 38;
  v50[3] = 0;
  do
  {
    v16 = (uint64_t *)v50[v14];
    if (v16)
    {
      v15 = *v16;
      if (*v16 && *(unsigned __int8 *)(v15 + 34) + *(unsigned __int8 *)(v15 + 33) < a1[31])
        goto LABEL_51;
      goto LABEL_25;
    }
    v6 = sub_1ACB5D828(40);
    v15 = v6;
    if (!v6)
      goto LABEL_25;
    *(_QWORD *)(v6 + 32) = 0;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    v17 = 8 * a1[31];
    v18 = (void *)sub_1ACB5D828(v17);
    if (v18)
    {
      v19 = v18;
      bzero(v18, v17);
      *(_QWORD *)(v15 + 16) = v19;
      v6 = vm_allocate(*MEMORY[0x1E0C83DA0], (vm_address_t *)(v15 + 24), *((_QWORD *)a1 + 1), 1040187395);
      if (!(_DWORD)v6)
      {
        *(_BYTE *)(v15 + 32) = 2;
        v23 = *v48;
        if (*v48)
        {
          *(_QWORD *)(v23 + 8) = v15;
          *(_QWORD *)v15 = v23;
        }
        else
        {
          *((_QWORD *)a1 + 18) = v15;
        }
        *((_QWORD *)a1 + 17) = v15;
        ++a1[33];
        goto LABEL_25;
      }
      v20 = *(_QWORD *)(v15 + 16);
      if (!v20)
        goto LABEL_41;
      v21 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_39;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v20);
      v20 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v21 = &xmmword_1ECD3B1D0;
LABEL_39:
        (*v21)(v20);
      }
    }
    else
    {
      *(_QWORD *)(v15 + 16) = 0;
    }
LABEL_41:
    v22 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_24;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    v6 = off_1ECD3B168(v15);
    v15 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v22 = &xmmword_1ECD3B1D0;
LABEL_24:
      v6 = (*v22)(v15);
      v15 = 0;
    }
LABEL_25:
    ++v14;
  }
  while (v14 != 4);
  if (!v15)
    goto LABEL_52;
LABEL_51:
  v6 = sub_1ACB6DA2C((uint64_t)a1, v15, 0, 0);
  if (!(_DWORD)v6)
  {
    v39 = 0;
    v40 = *(_QWORD *)(v15 + 16);
    while (*(_QWORD *)(v40 + 8 * v39++))
      ;
    *(_QWORD *)(v40 + 8 * v39 - 8) = v7;
    v42 = *a1;
    v43 = a1[1];
    v44 = v43 + v42;
    v45 = *(_QWORD *)(v15 + 24) + ((int)v43 + (int)v42) * ((int)v39 - 1);
    *(_QWORD *)v7 = v45;
    *(_QWORD *)(v7 + 8) = v45 + v42;
    *(_QWORD *)(v7 + 56) = v15;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 += v44;
      if (qword_1ECD3E888 > qword_1ECD3E8D8)
        qword_1ECD3E8D8 = qword_1ECD3E888;
      v46 = qword_1ECD3E8D0;
      v47 = ++qword_1ECD3E8D0;
      if (v46 >= qword_1ECD3E920)
        qword_1ECD3E920 = v47;
      v6 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
        v6 = xmmword_1ECD3B1D0(xmmword_1ECD3E930);
    }
  }
LABEL_52:
  if (!*(_QWORD *)v7)
  {
    v6 = sub_1ACBEBAB0(v7);
    goto LABEL_21;
  }
LABEL_53:
  v24 = a1[8];
  if (a1[7] >= v24)
  {
    v25 = 2 * v24;
    v26 = v25 <= 0x100 ? 256 : v25;
    v6 = sub_1ACB5D828(8 * v26);
    if (v6)
    {
      v27 = v6;
      bzero((void *)v6, 8 * v26);
      v28 = a1[8];
      if ((_DWORD)v28)
      {
        for (i = 0; i != v28; ++i)
        {
          v30 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8 * i);
          if (v30)
          {
            do
            {
              v31 = *(_QWORD *)(v30 + 24);
              v32 = 8 * (*(_DWORD *)(v30 + 16) % v26);
              *(_QWORD *)(v30 + 24) = *(_QWORD *)(v27 + v32);
              *(_QWORD *)(v27 + v32) = v30;
              v30 = v31;
            }
            while (v31);
          }
        }
      }
      v33 = *((_QWORD *)a1 + 5);
      if (v33)
      {
        v34 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_70;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v33);
        --qword_1ECD3E8D0;
        v6 = off_1ECD3B168(v33);
        v33 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v34 = &xmmword_1ECD3B1D0;
LABEL_70:
          v6 = (*v34)(v33);
        }
      }
      *((_QWORD *)a1 + 5) = v27;
      a1[8] = v26;
    }
  }
  if (v7)
  {
    v35 = a2 % a1[8];
    ++a1[7];
    *(_DWORD *)(v7 + 16) = a2;
    *(_BYTE *)(v7 + 33) = 4;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    bzero(*(void **)v7, *a1);
    bzero(*(void **)(v7 + 8), a1[1]);
    v36 = *((_QWORD *)a1 + 5);
    v37 = 8 * v35;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v36 + v37);
    *(_QWORD *)(v36 + v37) = v7;
  }
LABEL_74:
  if (a3 == 1 && off_1EECAD250)
    off_1EECAD250(v6);
  if (a1[30] < a2)
    a1[30] = a2;
  if (v7)
    *(_BYTE *)(v7 + 32) = *(_BYTE *)(v7 + 32) & 0xFE | v49 & 1;
  return v7;
}

uint64_t sub_1ACB6DA2C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  char v8;
  uint64_t result;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  uint64_t i;
  int v23;
  unint64_t v24;

  if (a4)
    *a4 = 0;
  v8 = *(_BYTE *)(a2 + 33);
  if (!v8)
  {
    if (*(_BYTE *)(a2 + 32) == 1)
    {
      v23 = 0;
      result = MEMORY[0x1AF446FE4](*MEMORY[0x1E0C83DA0], *(_QWORD *)(a2 + 24), 0, &v23);
      if ((_DWORD)result)
        return result;
      if (*(_BYTE *)(a1 + 184))
      {
        *(_BYTE *)(a1 + 184) = 0;
        goto LABEL_37;
      }
      if (v23 == 2)
      {
LABEL_37:
        bzero(*(void **)(a2 + 24), *(_QWORD *)(a1 + 8));
        if (*(_BYTE *)(a2 + 34))
        {
          v21 = *(_DWORD *)(a1 + 124);
          if (v21 >= 1)
          {
            for (i = 0; i < v21; ++i)
            {
              v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
              if (v24)
              {
                sub_1ACC4DDE0((int *)a1, &v24);
                v21 = *(_DWORD *)(a1 + 124);
              }
            }
          }
        }
        if (a4)
          *a4 = 14;
        v10 = *(_BYTE *)(a2 + 33);
        if (a3 != 1)
          *(_BYTE *)(a2 + 33) = ++v10;
        goto LABEL_11;
      }
      v8 = *(_BYTE *)(a2 + 33);
    }
    else
    {
      v8 = 0;
    }
  }
  v10 = v8 + 1;
  *(_BYTE *)(a2 + 33) = v10;
  if (a3 == 1)
    --*(_BYTE *)(a2 + 34);
LABEL_11:
  if (v10 == 1)
  {
    sub_1ACC4DCC0((_QWORD *)a1, (uint64_t *)a2);
    v13 = (uint64_t *)(a1 + 168);
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) < *(_DWORD *)(a1 + 124))
    {
      v14 = *v13;
      if (!*v13)
      {
LABEL_22:
        *(_QWORD *)(a1 + 176) = a2;
        goto LABEL_30;
      }
LABEL_18:
      *(_QWORD *)(v14 + 8) = a2;
      *(_QWORD *)a2 = v14;
LABEL_30:
      result = 0;
      *v13 = a2;
      *(_BYTE *)(a2 + 32) = 0;
      return result;
    }
LABEL_23:
    v17 = *(_QWORD **)(a1 + 176);
    v16 = (uint64_t *)(a1 + 176);
    v15 = v17;
    if (v17)
    {
      *v15 = a2;
      *(_QWORD *)(a2 + 8) = v15;
    }
    else
    {
      *v13 = a2;
    }
    v13 = v16;
    goto LABEL_30;
  }
  if (v10)
  {
    if (*(unsigned __int8 *)(a2 + 34) + v10 != *(_DWORD *)(a1 + 124))
      return 0;
    sub_1ACC4DCC0((_QWORD *)a1, (uint64_t *)a2);
    v13 = (uint64_t *)(a1 + 168);
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) < *(_DWORD *)(a1 + 124))
    {
      v14 = *v13;
      if (!*v13)
        goto LABEL_22;
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  sub_1ACC4DCC0((_QWORD *)a1, (uint64_t *)a2);
  v11 = (uint64_t *)(a1 + 136);
  if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *(_DWORD *)(a1 + 124))
  {
    v20 = *(_QWORD **)(a1 + 144);
    v19 = (uint64_t *)(a1 + 144);
    v18 = v20;
    if (v20)
    {
      *v18 = a2;
      *(_QWORD *)(a2 + 8) = v18;
    }
    else
    {
      *v11 = a2;
    }
    v11 = v19;
  }
  else
  {
    v12 = *v11;
    if (*v11)
    {
      *(_QWORD *)(v12 + 8) = a2;
      *(_QWORD *)a2 = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = a2;
    }
  }
  result = 0;
  *v11 = a2;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

uint64_t sub_1ACB6DCA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, uint64_t);
  int v12;

  v2 = *(_QWORD *)(a1 + 40);
  v12 = 0;
  v3 = *(_QWORD *)(v2 + 344);
  if (!v3)
    goto LABEL_8;
  v4 = sub_1ACBEB0A0(v3, *(_DWORD *)(a1 + 48), &v12);
  if ((_DWORD)v4)
    return v4;
  if (v12)
  {
    v5 = *(_QWORD *)(v2 + 344);
    v6 = *(_DWORD *)(v2 + 200);
    v7 = (*(unsigned __int16 *)(v5 + 86) | (*(unsigned __int16 *)(v5 + 86) << 16)) & 0x1FE00;
    if (v7 >= v6)
      v8 = v6;
    else
      v8 = v7;
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), *(_QWORD *)(a1 + 8), v8, (v7 | 0x18u) * (unint64_t)(v12 - 1) + 56);
  }
  else
  {
LABEL_8:
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 72) + 16))(*(_QWORD *)(v2 + 72), *(_QWORD *)(a1 + 8), *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 200) * (*(_DWORD *)(a1 + 48) - 1));
    if (v9 == 522)
      v4 = 0;
    else
      v4 = v9;
  }
  if (*(_DWORD *)(a1 + 48) != 1)
    goto LABEL_14;
  if ((_DWORD)v4)
  {
    *(_QWORD *)(v2 + 136) = -1;
    *(_QWORD *)(v2 + 144) = -1;
LABEL_14:
    v10 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v2 + 296);
    if (!v10)
      return v4;
    goto LABEL_15;
  }
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v10 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v2 + 296);
  if (!v10)
    return v4;
LABEL_15:
  if (v10(*(_QWORD *)(v2 + 320), *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 48), 3))
    return v4;
  else
    return 7;
}

void *sub_1ACB6DDD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_1ACBE9258(a1, a2, &a9);
}

uint64_t sub_1ACB6DDF8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  char v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  int v20;
  int v22;

  v6 = a2;
  v22 = 0;
  if (!a3 || a2 == 155 && *(_QWORD *)a3 && sub_1ACBFD07C(*(unsigned __int8 **)a3, &v22))
    v8 = 0;
  else
    v8 = *(_DWORD *)(a3 + 8) + 1;
  v9 = sub_1ACBE1124(a1, v8 + 80);
  v10 = v9;
  if (v9)
  {
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)v9 = 0u;
    *(_BYTE *)v9 = v6;
    *(_WORD *)(v9 + 52) = -1;
    if (a3)
    {
      if (!v8)
      {
        v13 = v22;
        if (v22)
          v14 = 276826112;
        else
          v14 = 545261568;
        *(_DWORD *)(v9 + 4) |= v14;
        *(_DWORD *)(v9 + 8) = v13;
        goto LABEL_29;
      }
      v11 = (_BYTE *)(v9 + 80);
      *(_QWORD *)(v9 + 8) = v9 + 80;
      v12 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v12)
      {
        memcpy((void *)(v9 + 80), *(const void **)a3, v12);
        v11[*(unsigned int *)(a3 + 8)] = 0;
        if (!a4)
          goto LABEL_29;
LABEL_18:
        v15 = *v11;
        if ((char)byte_1ACCB6548[*v11] < 0)
        {
          v16 = 0;
          if (v15 == 34)
            v17 = 67108992;
          else
            v17 = 0x4000000;
          *(_DWORD *)(v10 + 4) |= v17;
          if (v15 == 91)
            v15 = 93;
          for (i = 1; ; ++i)
          {
            v19 = i;
            v20 = v11[i];
            if (v20 == v15)
            {
              ++i;
              LOBYTE(v20) = v15;
              if (v11[v19 + 1] != v15)
                break;
            }
            v11[v16++] = v20;
          }
          v11[v16] = 0;
        }
        goto LABEL_29;
      }
      *v11 = 0;
      if (a4)
        goto LABEL_18;
    }
LABEL_29:
    *(_DWORD *)(v10 + 40) = 1;
  }
  return v10;
}

_QWORD *sub_1ACB6DF98(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  _QWORD *v6;
  int v7;

  if (a2)
  {
    if (a4)
    {
      *(_QWORD *)(a2 + 24) = a4;
      *(_DWORD *)(a2 + 4) |= *(_DWORD *)(a4 + 4) & 0x400208;
      v5 = *(_DWORD *)(a4 + 40) + 1;
      *(_DWORD *)(a2 + 40) = v5;
      if (!a3)
        return result;
    }
    else
    {
      v5 = 1;
      *(_DWORD *)(a2 + 40) = 1;
      if (!a3)
        return result;
    }
    *(_QWORD *)(a2 + 16) = a3;
    *(_DWORD *)(a2 + 4) |= *(_DWORD *)(a3 + 4) & 0x400208;
    v7 = *(_DWORD *)(a3 + 40);
    if (v7 >= v5)
      *(_DWORD *)(a2 + 40) = v7 + 1;
  }
  else
  {
    v6 = result;
    if (a3)
      result = sub_1ACBF8348(result, (unsigned __int8 *)a3);
    if (a4)
      return sub_1ACBF8348(v6, (unsigned __int8 *)a4);
  }
  return result;
}

int *sub_1ACB6E054(uint64_t *a1, int *a2, unsigned __int8 *a3)
{
  int v3;
  int *v4;

  if (!a2)
    return (int *)sub_1ACC2D490((_QWORD *)*a1, a3);
  v3 = *a2;
  if (a2[1] <= *a2)
    return sub_1ACC2D4F4(*a1, a2, a3);
  *a2 = v3 + 1;
  v4 = &a2[6 * v3];
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 1) = a3;
  return a2;
}

int *sub_1ACB6E09C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  _QWORD *v14;
  const char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const void *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  int i;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int *v37;

  v11 = (_QWORD *)a4;
  v14 = *(_QWORD **)a1;
  if (!a2 && a7)
  {
    if (*(_QWORD *)a7)
    {
      v15 = "ON";
LABEL_7:
      sub_1ACBCB308(a1, "a JOIN clause is required before %s", a3, a4, a5, a6, a7, a8, (char)v15);
      goto LABEL_31;
    }
    if (*(_QWORD *)(a7 + 8))
    {
      v15 = "USING";
      goto LABEL_7;
    }
  }
  v16 = (int *)sub_1ACB6E384((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16)
  {
    if (!a7)
    {
LABEL_40:
      if (a6)
        sub_1ACB7E704(v14, a6, 1);
      return 0;
    }
LABEL_31:
    if (*(_QWORD *)a7)
    {
      sub_1ACBF8348(v14, *(unsigned __int8 **)a7);
    }
    else
    {
      v31 = *(_QWORD **)(a7 + 8);
      if (v31)
      {
        v32 = *(_DWORD *)v31;
        if (*(int *)v31 >= 1)
        {
          v33 = 0;
          v34 = 1;
          do
          {
            v35 = (_QWORD *)v31[v34];
            if (v35)
            {
              sub_1ACBE0F9C(v14, v35);
              v32 = *(_DWORD *)v31;
            }
            ++v33;
            v34 += 2;
          }
          while (v33 < v32);
        }
        sub_1ACBF0674(v14, v31);
      }
    }
    goto LABEL_40;
  }
  v17 = v16;
  v18 = *v16 - 1;
  v19 = *(unsigned __int8 *)(a1 + 302);
  if (v19 >= 2)
  {
    v20 = *(_QWORD *)&v16[26 * v18 + 6];
    if (v20)
    {
      if (!v11 || !*v11)
        v11 = (_QWORD *)a3;
      if (v19 != 3)
      {
        if (!*(_QWORD *)a1)
        {
          v21 = sub_1ACB5D828(32);
          if (!v21)
            goto LABEL_18;
          goto LABEL_17;
        }
        v21 = sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL);
        if (v21)
        {
LABEL_17:
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_QWORD *)v21 = v20;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)v11;
          *(_QWORD *)(v21 + 24) = *(_QWORD *)(a1 + 408);
          *(_QWORD *)(a1 + 408) = v21;
        }
      }
    }
  }
LABEL_18:
  v22 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v22)
  {
    v23 = *(const void **)a5;
    if (v23)
    {
      v24 = (_BYTE *)sub_1ACBE1124((uint64_t)v14, v22 + 1);
      v25 = v24;
      if (v24)
      {
        memcpy(v24, v23, v22);
        v25[v22] = 0;
        if ((char)byte_1ACCB6548[*v25] < 0)
        {
          v26 = 0;
          if (*v25 == 91)
            v27 = 93;
          else
            v27 = *v25;
          for (i = 1; ; ++i)
          {
            v29 = i;
            v30 = v25[i];
            if (v30 == v27)
            {
              ++i;
              LOBYTE(v30) = v27;
              if (v25[v29 + 1] != v27)
                break;
            }
            v25[v26++] = v30;
          }
          v25[v26] = 0;
        }
      }
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)&v17[26 * v18 + 8] = v25;
  }
  if (a6)
  {
    *(_QWORD *)&v17[26 * v18 + 12] = a6;
    if ((*(_BYTE *)(a6 + 5) & 8) != 0)
      *(_WORD *)((char *)&v17[26 * v18 + 17] + 1) |= 0x2000u;
  }
  if (a7)
  {
    if (*(_QWORD *)(a7 + 8))
    {
      v37 = &v17[26 * v18];
      *(_WORD *)((char *)v37 + 69) |= 0x400u;
      *((_QWORD *)v37 + 10) = *(_QWORD *)(a7 + 8);
    }
    else
    {
      *(_QWORD *)&v17[26 * v18 + 20] = *(_QWORD *)a7;
    }
  }
  else
  {
    *(_QWORD *)&v17[26 * v18 + 20] = 0;
  }
  return v17;
}

uint64_t sub_1ACB6E384(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int j;
  uint64_t v23;
  int v24;
  const void *v25;
  size_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int k;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int i;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v10 = (_QWORD *)*a1;
  if (a2)
  {
    v12 = sub_1ACB6E648(a1, a2, 1, *a2, a5, a6, a7, a8);
    v13 = (uint64_t)v12;
    if (!v12)
    {
      sub_1ACB7E8B0(v10, a2);
      return v13;
    }
    v14 = *v12 - 1;
    if (!a4)
      goto LABEL_30;
  }
  else
  {
    v15 = sub_1ACBE1124(*a1, 0x70uLL);
    v13 = v15;
    if (!v15)
      return v13;
    v14 = 0;
    *(_QWORD *)v15 = 0x100000001;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_QWORD *)(v15 + 104) = 0;
    *(_DWORD *)(v15 + 72) = -1;
    if (!a4)
      goto LABEL_30;
  }
  v16 = *(const void **)a4;
  if (!*(_QWORD *)a4)
  {
LABEL_30:
    if (a3 && (v34 = *(const void **)a3) != 0)
    {
      v35 = *(unsigned int *)(a3 + 8);
      v36 = (_BYTE *)sub_1ACBE1124((uint64_t)v10, v35 + 1);
      v37 = v36;
      if (v36)
      {
        memcpy(v36, v34, v35);
        v37[v35] = 0;
        if ((char)byte_1ACCB6548[*v37] < 0)
        {
          v38 = 0;
          if (*v37 == 91)
            v39 = 93;
          else
            v39 = *v37;
          for (i = 1; ; ++i)
          {
            v41 = i;
            v42 = v37[i];
            if (v42 == v39)
            {
              ++i;
              LOBYTE(v42) = v39;
              if (v37[v41 + 1] != v39)
                break;
            }
            v37[v38++] = v42;
          }
          v37[v38] = 0;
        }
      }
    }
    else
    {
      v37 = 0;
    }
    v43 = v13 + 104 * v14;
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = v37;
    return v13;
  }
  v17 = *(unsigned int *)(a4 + 8);
  v18 = (_BYTE *)sub_1ACBE1124((uint64_t)v10, v17 + 1);
  v19 = v18;
  if (v18)
  {
    memcpy(v18, v16, v17);
    v19[v17] = 0;
    if ((char)byte_1ACCB6548[*v19] < 0)
    {
      v20 = 0;
      if (*v19 == 91)
        v21 = 93;
      else
        v21 = *v19;
      for (j = 1; ; ++j)
      {
        v23 = j;
        v24 = v19[j];
        if (v24 == v21)
        {
          ++j;
          LOBYTE(v24) = v21;
          if (v19[v23 + 1] != v21)
            break;
        }
        v19[v20++] = v24;
      }
      v19[v20] = 0;
    }
  }
  *(_QWORD *)(v13 + 104 * v14 + 24) = v19;
  if (a3 && (v25 = *(const void **)a3) != 0)
  {
    v26 = *(unsigned int *)(a3 + 8);
    v27 = (_BYTE *)sub_1ACBE1124((uint64_t)v10, v26 + 1);
    v28 = v27;
    if (v27)
    {
      memcpy(v27, v25, v26);
      v28[v26] = 0;
      if ((char)byte_1ACCB6548[*v28] < 0)
      {
        v29 = 0;
        if (*v28 == 91)
          v30 = 93;
        else
          v30 = *v28;
        for (k = 1; ; ++k)
        {
          v32 = k;
          v33 = v28[k];
          if (v33 == v30)
          {
            ++k;
            LOBYTE(v33) = v30;
            if (v28[v32 + 1] != v30)
              break;
          }
          v28[v29++] = v33;
        }
        v28[v29] = 0;
      }
    }
  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)(v13 + 104 * v14 + 16) = v28;
  return v13;
}

int *sub_1ACB6E648(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = *a2;
  v12 = *a2 + a3;
  if (v12 <= a2[1])
    goto LABEL_16;
  if (v12 >= 200)
  {
    sub_1ACBCB308((uint64_t)a1, "too many FROM clause terms, max: %d", a3, a4, a5, a6, a7, a8, 200);
    return 0;
  }
  v13 = *a1;
  if (2 * v11 + (int)a3 >= 200)
    v14 = 200;
  else
    v14 = 2 * v11 + (int)a3;
  v15 = 104 * v14 + 8;
  if (*(_QWORD *)(v13 + 512) <= (unint64_t)a2)
    goto LABEL_13;
  if (*(_QWORD *)(v13 + 496) > (unint64_t)a2)
  {
    if (*(_QWORD *)(v13 + 504) <= (unint64_t)a2 && v15 <= *(unsigned __int16 *)(v13 + 438))
      goto LABEL_15;
LABEL_13:
    v16 = (int *)sub_1ACBE11D0(v13, a2, v15);
    v10 = v16;
    if (!v16)
      return v10;
    v11 = *v16;
    goto LABEL_15;
  }
  if (v15 >= 0x81)
    goto LABEL_13;
LABEL_15:
  v10[1] = v14;
LABEL_16:
  if (v11 <= v8)
  {
    v18 = v8;
  }
  else
  {
    v17 = v11;
    v18 = v8;
    v19 = 26 * v11;
    do
    {
      --v17;
      v20 = &v10[26 * v9 + v19];
      v21 = *(_OWORD *)&v10[v19 - 24];
      v22 = *(_OWORD *)&v10[v19 - 16];
      *((_OWORD *)v20 - 5) = *(_OWORD *)&v10[v19 - 20];
      *((_OWORD *)v20 - 4) = v22;
      *((_OWORD *)v20 - 6) = v21;
      v23 = *(_OWORD *)&v10[v19 - 12];
      v24 = *(_OWORD *)&v10[v19 - 8];
      v25 = *(_OWORD *)&v10[v19 - 4];
      *(_QWORD *)v20 = *(_QWORD *)&v10[v19];
      *((_OWORD *)v20 - 2) = v24;
      *((_OWORD *)v20 - 1) = v25;
      *((_OWORD *)v20 - 3) = v23;
      v19 -= 26;
    }
    while (v17 > v8);
    v11 = *v10;
  }
  *v10 = v11 + v9;
  bzero(&v10[26 * (int)v18 + 2], 104 * v9);
  if (v9 >= 1)
  {
    v26 = v8 + v9;
    if (v18 + 1 > v26)
      v27 = v18 + 1;
    else
      v27 = v8 + v9;
    v28 = v27 - v18;
    if ((unint64_t)(v27 - v18) < 2)
    {
      v29 = v18;
LABEL_30:
      v32 = 104 * v29 + 72;
      do
      {
        *(int *)((char *)v10 + v32) = -1;
        ++v29;
        v32 += 104;
      }
      while (v29 < v26);
      return v10;
    }
    v29 = v18 + (v28 & 0xFFFFFFFFFFFFFFFELL);
    v30 = &v10[26 * (int)v18 + 44];
    v31 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 26) = -1;
      *v30 = -1;
      v30 += 52;
      v31 -= 2;
    }
    while (v31);
    if (v28 != (v28 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_30;
  }
  return v10;
}

_OWORD *sub_1ACB6E848(_QWORD **a1, _QWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15;
  _OWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  _OWORD *v19;
  int v20;
  _OWORD *v21;
  _OWORD v25[8];

  memset(v25, 0, sizeof(v25));
  v15 = sub_1ACBE1124((uint64_t)*a1, 0x80uLL);
  v16 = (_OWORD *)v15;
  if (v15)
    v17 = (_BYTE *)v15;
  else
    v17 = v25;
  if (!a2)
  {
    v18 = sub_1ACBE1124((uint64_t)*a1, 0x51uLL);
    if (v18)
    {
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_BYTE *)v18 = -76;
      *(_WORD *)(v18 + 52) = -1;
      *(_BYTE *)(v18 + 80) = 0;
      *(_QWORD *)(v18 + 8) = v18 + 80;
      *(_DWORD *)(v18 + 40) = 1;
    }
    a2 = sub_1ACC2D490(*a1, (unsigned __int8 *)v18);
  }
  if (v16)
    v19 = v16;
  else
    v19 = v25;
  *((_QWORD *)v19 + 4) = a2;
  *v17 = -118;
  *((_DWORD *)v19 + 1) = a8;
  *((_QWORD *)v19 + 1) = 0;
  v20 = *((_DWORD *)a1 + 35) + 1;
  *((_DWORD *)a1 + 35) = v20;
  *((_DWORD *)v19 + 4) = v20;
  *(_QWORD *)((char *)v19 + 20) = -1;
  *((_WORD *)v19 + 1) = 0;
  if (!a3)
  {
    if (*a1)
    {
      a3 = (_OWORD *)sub_1ACBE1124((uint64_t)*a1, 0x70uLL);
      if (!a3)
        goto LABEL_15;
      goto LABEL_14;
    }
    a3 = (_OWORD *)sub_1ACB5D828(112);
    if (a3)
    {
LABEL_14:
      a3[5] = 0u;
      a3[6] = 0u;
      a3[3] = 0u;
      a3[4] = 0u;
      a3[1] = 0u;
      a3[2] = 0u;
      *a3 = 0u;
    }
  }
LABEL_15:
  if (v16)
    v21 = v16;
  else
    v21 = v25;
  *((_QWORD *)v21 + 5) = a3;
  *((_QWORD *)v21 + 6) = a4;
  *((_QWORD *)v21 + 7) = a5;
  *((_QWORD *)v21 + 8) = a6;
  *((_QWORD *)v21 + 9) = a7;
  v21[5] = 0u;
  *((_QWORD *)v21 + 12) = a9;
  *(_OWORD *)((char *)v21 + 104) = 0u;
  *((_QWORD *)v21 + 15) = 0;
  if (*((_BYTE *)*a1 + 103))
  {
    sub_1ACB7E704(*a1, (uint64_t)v17, v17 != (_BYTE *)v25);
    return 0;
  }
  return v16;
}

uint64_t sub_1ACB6EA04(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *);
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int *v48;
  int *v49;
  int v50;
  int *v51;
  _QWORD *v52;
  int v53;
  _DWORD *v54;
  int v55;
  uint64_t *i;
  BOOL v57;
  int *v58;
  _DWORD *v59;
  int v60;
  uint64_t *j;
  BOOL v62;
  int v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int v72;
  int v73;
  uint64_t *k;
  BOOL v75;
  int v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  int *v80;
  int *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int *v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  char v97;
  int v98;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  int *v102;
  int v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int *v129;
  uint64_t v130;
  uint32x4_t *v131;
  BOOL v132;
  unint64_t v133;
  __int16 *v134;
  uint32x4_t v135;
  unint64_t v136;
  uint16x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  unsigned __int16 *v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  int *v165;
  char v166;
  char *v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  unsigned int *v172;
  unsigned int v173;
  int v174;
  char v175;
  char v176;
  uint64_t v177;
  int *v178;
  int v179;
  char v180;
  uint64_t v181;
  int *v182;
  char v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  int *v189;
  int *v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  unsigned int *v198;
  int *v199;
  BOOL v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int16 *v205;
  int v206;
  int v207;
  int *v208;
  _QWORD **v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  unsigned __int8 *v225;
  char v226;
  unsigned int *v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  __int128 v232;
  unsigned int *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  int *v239;
  int v240;
  unsigned int *v241;
  uint64_t v242;
  uint64_t v243;
  _WORD *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  _BYTE *v254;
  uint64_t v255;
  int *v256;
  int v257;
  int *v258;
  uint64_t *v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  unsigned __int8 **v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t *v271;
  _QWORD *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  BOOL v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  __int16 *v283;
  __int16 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int16 v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  int v308;
  int *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int16 v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  uint64_t v320;
  int *v321;
  int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  int *v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int *v335;
  uint64_t v336;
  unsigned __int16 *v337;
  int v338;
  int v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int8 *v345;
  uint64_t v346;
  int v347;
  int v348;
  uint64_t v349;
  int *v350;
  uint64_t v351;
  int v352;
  int *v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  _QWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  BOOL v377;
  uint64_t v378;
  unsigned __int8 *v379;
  unsigned int v380;
  unsigned __int8 *v381;
  unsigned __int8 *v382;
  uint64_t v383;
  uint64_t (*v384)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  unsigned int *v394;
  uint64_t v395;
  int v396;
  unsigned int *v397;
  unsigned int *v398;
  int v399;
  unsigned __int16 *v400;
  int v401;
  uint64_t v402;
  int v403;
  unsigned int *v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  int v432;
  int v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  unsigned __int8 *v439;
  int v440;
  uint64_t v441;
  const char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  int v482;
  __int16 v483;
  unint64_t v484;
  int v485;
  unint64_t v486;
  unsigned __int8 *v487;
  _QWORD *v488;
  _WORD *v489;
  uint64_t v490;
  char *v491;
  unsigned __int8 *v492;
  unsigned __int8 *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unsigned __int8 *v499;
  unsigned __int8 *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  char v508;
  uint64_t v509;
  unsigned __int8 v510;
  const char *v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  int v537;
  char *v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  _QWORD *v553;
  _QWORD *v554;
  int v555;
  _QWORD *v556;
  char *v557;
  _DWORD *v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  unsigned __int8 *v574;
  unsigned __int8 *v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unsigned __int8 *v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unsigned __int8 *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  BOOL v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  int v644;
  _DWORD *v645;
  unsigned int *v646;
  uint64_t v647;
  unsigned int *v648;
  _BOOL4 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  unsigned __int8 *v656;
  int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unsigned __int8 v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  _WORD *v702;
  uint64_t v703;
  _WORD *v704;
  unsigned int v705;
  uint64_t v706;
  _QWORD *v707;
  int v708;
  _WORD *v709;
  uint64_t v710;
  _WORD *v711;
  unsigned int v712;
  unint64_t v713;
  uint64_t v714;
  char *v715;
  _BYTE *v716;
  char v717;
  int v718;
  unsigned int *v719;
  int v720;
  int v721;
  uint64_t v722;
  int v723;
  int v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t v727;
  uint64_t v728;
  unsigned __int8 *v729;
  unsigned __int8 *v730;
  int v731;
  uint64_t v732;
  int v733;
  const char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unsigned int v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  int v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  _QWORD *v801;
  char *v802;
  int v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unsigned __int8 *v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unsigned int v815;
  uint64_t v816;
  int v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  unsigned int v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  _QWORD *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t *v839;
  uint64_t v840;
  uint64_t v841;
  const char *v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  __int16 *v846;
  int v847;
  int v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int v856;
  uint64_t v857;
  uint64_t m;
  uint64_t v859;
  unsigned __int8 v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t n;
  uint64_t ii;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  int v880;
  unsigned int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  _DWORD *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unsigned __int8 v916;
  int v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  int v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  _DWORD *v1025;
  uint64_t v1026;
  int *v1027;
  int v1028;
  int *v1029;
  int v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t **v1037;
  int v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  char v1053;
  char v1054;
  char v1055;
  char v1056;
  char v1057;
  int v1058;
  unsigned int v1059;
  int v1060;
  uint64_t v1061;
  int v1062;
  _QWORD *v1063;
  unsigned int v1064;
  unsigned __int8 *v1065;
  unsigned __int8 *v1066;
  unsigned int v1067;
  int v1068;
  _DWORD *v1069;
  int *v1070;
  unsigned int v1071;
  unsigned int v1072;
  int v1073;
  unsigned int v1074;
  unsigned int v1075;
  int v1076;
  int v1077;
  uint64_t v1078;
  char *v1079;
  int v1080;
  uint64_t v1081;
  int v1082;
  unsigned int v1083;
  int v1084;
  _QWORD *v1085;
  uint64_t v1086;
  unsigned int v1087;
  _QWORD *v1088;
  int *v1089;
  char v1090;
  int v1091;
  unsigned int v1092;
  unsigned int v1093;
  uint64_t v1094;
  unsigned __int8 *v1095;
  _DWORD *v1096;
  unsigned int v1097;
  int v1098;
  unsigned int v1099;
  char v1100;
  int *v1101;
  _QWORD *v1102;
  unsigned int v1103;
  int *v1104;
  int **v1105;
  uint64_t v1106;
  _QWORD *v1107;
  int v1108;
  int v1109;
  int v1110;
  unsigned int v1111;
  int v1112;
  uint64_t v1113;
  uint64_t v1114;
  char v1115;
  unsigned int v1116;
  unsigned int *v1117;
  unsigned int v1118;
  unsigned int v1119;
  unsigned int v1120;
  uint64_t v1121;
  unsigned int v1122;
  uint64_t *v1123;
  unsigned int *v1124;
  unsigned int v1125;
  uint64_t v1126;
  int v1127;
  uint64_t v1128;
  char v1129;
  unsigned int v1130;
  unsigned int v1131;
  unsigned int v1132;
  int v1133;
  unsigned int v1134;
  int *v1135;
  _QWORD *v1136;
  unsigned int v1137;
  uint64_t v1138;
  int v1139;
  unsigned __int8 *v1140;
  unsigned __int8 *v1141;
  uint64_t v1142;
  uint64_t v1143;
  unsigned __int8 *v1144;
  uint64_t v1145;
  unsigned int v1146;
  uint64_t v1147;
  unsigned int v1148;
  _OWORD *v1149;
  unsigned __int8 *v1150;
  uint64_t v1151;
  unsigned int v1152;
  uint64_t v1153;
  unsigned int v1154;
  uint64_t v1155;
  uint64_t v1156;
  int v1157;
  __int128 v1158;
  _BYTE v1159[40];
  int *v1160;
  _OWORD v1161[4];
  uint64_t v1162;
  int v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  _BYTE v1167[32];
  uint64_t v1168;
  _QWORD v1169[4];

  v8 = (unsigned __int8 *)a3;
  v9 = (unsigned __int8 *)a2;
  v1163 = 0;
  v1162 = 0;
  v1160 = 0;
  v11 = (uint64_t)*a1;
  v12 = (uint64_t)a1[2];
  if (v12)
  {
    if (!a2)
      return 1;
  }
  else
  {
    if (!a1[21] && (*(_BYTE *)(v11 + 96) & 8) == 0)
      *((_BYTE *)a1 + 35) = 1;
    v12 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 1;
  }
  if (*((_DWORD *)a1 + 12))
    return 1;
  v15 = (uint64_t)*a1;
  v16 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *))(*a1)[66];
  if (v16 && !*(_BYTE *)(v15 + 197) && !*((_BYTE *)a1 + 302))
  {
    v32 = v16(*(_QWORD *)(v15 + 536), 21, 0, 0, 0, a1[46]);
    if (v32 == 1)
    {
      v39 = 23;
      v40 = "not authorized";
    }
    else
    {
      if ((v32 & 0xFFFFFFFD) == 0)
      {
        if (v32)
          return 1;
        goto LABEL_14;
      }
      v39 = 1;
      v40 = "authorizer malfunction";
    }
    sub_1ACBCB308((uint64_t)a1, v40, v33, v34, v35, v36, v37, v38, v1053);
    *((_DWORD *)a1 + 6) = v39;
    return 1;
  }
LABEL_14:
  memset(v1161, 0, 56);
  if (*v8 <= 6u)
  {
    v17 = (_QWORD *)*((_QWORD *)v9 + 9);
    if (!v17)
    {
LABEL_22:
      *((_DWORD *)v9 + 1) = *((_DWORD *)v9 + 1) & 0xFFBFFFFE | 0x400000;
      goto LABEL_23;
    }
    if (*a1)
    {
      v18 = (_QWORD *)sub_1ACBE1124((uint64_t)*a1, 0x18uLL);
      if (v18)
      {
LABEL_18:
        *v18 = a1[24];
        a1[24] = v18;
        v18[1] = v17;
        v18[2] = sub_1ACB7E8A4;
LABEL_21:
        *((_QWORD *)v9 + 9) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v18 = (_QWORD *)sub_1ACB5D828(24);
      if (v18)
        goto LABEL_18;
    }
    sub_1ACC010B0(*a1, v17);
    goto LABEL_21;
  }
LABEL_23:
  sub_1ACC10600(a1, (uint64_t)v9, 0);
  if (*((_DWORD *)a1 + 12))
    goto LABEL_24;
  v29 = *((_DWORD *)v9 + 1);
  if ((v29 & 0x800000) != 0)
  {
    v30 = *((_QWORD *)v9 + 5);
    if (sub_1ACC14D74(v30 + 8, (unsigned int *)v30))
    {
      v31 = *(_QWORD *)(v30 + 32);
      if (!v31)
        v31 = **(_QWORD **)(v30 + 40);
      sub_1ACBCB308((uint64_t)a1, "target object/alias may not appear in FROM clause: %s", v20, v21, v22, v23, v24, v25, v31);
      goto LABEL_24;
    }
    *((_DWORD *)v9 + 1) = v29 & 0xFF7FFFFF;
  }
  if (*v8 == 9)
    sub_1ACC14E74(a1, (uint64_t)v9);
  v41 = *((_QWORD *)v9 + 14);
  v1145 = v12;
  if (v41)
  {
    if (!*((_QWORD *)v9 + 10))
    {
      v42 = *((_DWORD *)v9 + 1);
      if ((v42 & 0x100000) == 0 && *((unsigned __int8 *)a1 + 302) <= 1u)
      {
        v43 = (uint64_t)a1[2];
        if (!v43)
        {
          if (!a1[21] && ((*a1)[12] & 8) == 0)
            *((_BYTE *)a1 + 35) = 1;
          v43 = sub_1ACBCB4C8((uint64_t *)a1, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
          v41 = *((_QWORD *)v9 + 14);
          v42 = *((_DWORD *)v9 + 1);
        }
        v44 = (uint64_t)*a1;
        v1149 = (_OWORD *)*((_QWORD *)v9 + 5);
        v1155 = v11;
        v1121 = *((_QWORD *)v9 + 7);
        v1128 = *((_QWORD *)v9 + 6);
        v1113 = *((_QWORD *)v9 + 8);
        if (*a1)
        {
          v45 = sub_1ACBE1124(v44, 0x68uLL);
          if (!v45)
          {
            v46 = *(_QWORD *)(v44 + 344);
            if (v46)
            {
              *(_DWORD *)(v46 + 24) = 7;
              ++*(_DWORD *)(v46 + 48);
            }
            goto LABEL_862;
          }
        }
        else
        {
          v45 = sub_1ACB5D828(104);
          if (!v45)
            goto LABEL_862;
        }
        v1100 = v42;
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)(v45 + 16) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_QWORD *)(v45 + 96) = 0;
        *(_OWORD *)(v45 + 64) = 0u;
        *(_OWORD *)(v45 + 80) = 0u;
        v1166 = 0uLL;
        *(_QWORD *)&v1164 = a1;
        *((_QWORD *)&v1164 + 1) = sub_1ACC1865C;
        *(_QWORD *)&v1165 = sub_1ACC1243C;
        *((_QWORD *)&v1165 + 1) = 0;
        sub_1ACB73B30(&v1164, v9);
        v47 = *((_DWORD *)v9 + 1);
        if ((v47 & 8) == 0)
        {
          *((_QWORD *)&v1164 + 1) = sub_1ACC183F4;
          *(_QWORD *)&v1165 = 0;
          sub_1ACC0B80C((uint64_t)&v1164, *((_DWORD **)v9 + 9));
          v47 = *((_DWORD *)v9 + 1);
        }
        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 56) = 0u;
        *((_DWORD *)v9 + 1) = v47 & 0xFFEFFFF7 | 0x100000;
        v48 = sub_1ACC1843C((uint64_t *)a1, 0, *(int **)(v41 + 16), 1);
        v1135 = sub_1ACC1843C((uint64_t *)a1, v48, *(int **)(v41 + 24), 1);
        if (v1135)
        {
          v49 = (int *)*((_QWORD *)v9 + 9);
          if (v49)
          {
            v50 = *v1135;
            if (*v49 <= *v1135)
            {
              v51 = v1135;
              *v1135 = *v49;
              if (!sub_1ACC0B0F4((unint64_t)v1135, (unint64_t)v49, 0xFFFFFFFFLL))
              {
                v52 = (_QWORD *)*((_QWORD *)v9 + 9);
                if (v52)
                  sub_1ACC010B0((_QWORD *)v44, v52);
                *((_QWORD *)v9 + 9) = 0;
                v51 = v1135;
              }
              *v51 = v50;
            }
          }
        }
        v53 = *((_DWORD *)a1 + 13);
        *(_DWORD *)(v41 + 88) = v53;
        *((_DWORD *)a1 + 13) = v53 + 4;
        v54 = (_DWORD *)*((_QWORD *)v9 + 4);
        *(_QWORD *)&v1167[24] = v45;
        v1168 = 0;
        *(_QWORD *)v1167 = v41;
        *(_QWORD *)&v1167[8] = v1149;
        *(_QWORD *)&v1167[16] = 0;
        *(_QWORD *)&v1158 = a1;
        *((_QWORD *)&v1158 + 1) = sub_1ACC1875C;
        *(_QWORD *)v1159 = sub_1ACC18998;
        *(_QWORD *)&v1159[8] = 0;
        *(_QWORD *)&v1159[16] = 0;
        *(_QWORD *)&v1159[24] = v1167;
        v1105 = (int **)(v9 + 40);
        if (v54)
        {
          v55 = *v54;
          if ((int)*v54 >= 1)
          {
            for (i = (uint64_t *)(v54 + 2); ; i += 3)
            {
              if (*i)
              {
                if (sub_1ACC0B714((uint64_t)&v1158, *i))
                  v57 = 1;
                else
                  v57 = v55 <= 1;
                if (v57)
                {
LABEL_83:
                  v58 = *(int **)&v1167[16];
                  goto LABEL_85;
                }
              }
              else if (v55 < 2)
              {
                goto LABEL_83;
              }
              --v55;
            }
          }
        }
        v58 = 0;
LABEL_85:
        v59 = (_DWORD *)*((_QWORD *)v9 + 9);
        *(_QWORD *)&v1167[24] = v45;
        v1168 = 0;
        *(_QWORD *)v1167 = v41;
        *(_QWORD *)&v1167[8] = v1149;
        *(_QWORD *)&v1167[16] = v58;
        *(_QWORD *)&v1158 = a1;
        *((_QWORD *)&v1158 + 1) = sub_1ACC1875C;
        *(_QWORD *)v1159 = sub_1ACC18998;
        *(_QWORD *)&v1159[8] = 0;
        *(_QWORD *)&v1159[16] = 0;
        *(_QWORD *)&v1159[24] = v1167;
        if (!v59)
          goto LABEL_97;
        v60 = *v59;
        if ((int)*v59 < 1)
          goto LABEL_97;
        for (j = (uint64_t *)(v59 + 2); ; j += 3)
        {
          if (*j)
          {
            if (sub_1ACC0B714((uint64_t)&v1158, *j))
              v62 = 1;
            else
              v62 = v60 <= 1;
            if (v62)
            {
LABEL_96:
              v58 = *(int **)&v1167[16];
LABEL_97:
              v1140 = v8;
              if (v58)
                v63 = *v58;
              else
                v63 = 0;
              *(_DWORD *)(v41 + 120) = v63;
              v64 = sub_1ACC1843C((uint64_t *)a1, v58, *(int **)(v41 + 16), 0);
              v68 = sub_1ACC1843C((uint64_t *)a1, v64, *(int **)(v41 + 24), 0);
              v69 = v41;
LABEL_102:
              v71 = *(int **)(*(_QWORD *)(v69 + 112) + 32);
              if ((*(_BYTE *)(*(_QWORD *)(v69 + 80) + 6) & 0x10) == 0)
              {
                if (v68)
                  v72 = *v68;
                else
                  v72 = 0;
                *(_DWORD *)(v69 + 124) = v72;
                v68 = sub_1ACC1843C((uint64_t *)a1, v68, v71, 0);
                goto LABEL_123;
              }
              *(_QWORD *)&v1159[8] = 0;
              *(_QWORD *)&v1159[16] = 0;
              *(_QWORD *)&v1167[24] = v45;
              v1168 = 0;
              *(_QWORD *)v1167 = v41;
              *(_QWORD *)&v1167[8] = v1149;
              *(_QWORD *)&v1167[16] = v68;
              *(_QWORD *)&v1158 = a1;
              *((_QWORD *)&v1158 + 1) = sub_1ACC1875C;
              *(_QWORD *)v1159 = sub_1ACC18998;
              *(_QWORD *)&v1159[24] = v1167;
              if (!v71)
                goto LABEL_117;
              v73 = *v71;
              if (*v71 < 1)
                goto LABEL_117;
              for (k = (uint64_t *)(v71 + 2); ; k += 3)
              {
                if (*k)
                {
                  if (sub_1ACC0B714((uint64_t)&v1158, *k))
                    v75 = 1;
                  else
                    v75 = v73 <= 1;
                  if (v75)
                  {
LABEL_116:
                    v68 = *(int **)&v1167[16];
LABEL_117:
                    if (v68)
                      v76 = *v68;
                    else
                      v76 = 0;
                    *(_DWORD *)(v69 + 124) = v76;
                    *(_BYTE *)(v69 + 140) = 1;
LABEL_123:
                    v77 = *(unsigned __int8 **)(v69 + 72);
                    if (v77)
                    {
                      v78 = (unsigned __int8 *)sub_1ACB8B290(v44, v77, 0, 0);
                      if (v68)
                      {
                        v79 = *v68;
                        if (v68[1] > *v68)
                        {
                          *v68 = v79 + 1;
                          v80 = &v68[6 * v79];
                          *((_QWORD *)v80 + 2) = 0;
                          *((_QWORD *)v80 + 3) = 0;
                          *((_QWORD *)v80 + 1) = v78;
                          goto LABEL_130;
                        }
                        v81 = sub_1ACC2D4F4((uint64_t)*a1, v68, v78);
                      }
                      else
                      {
                        v81 = (int *)sub_1ACC2D490(*a1, v78);
                      }
                      v68 = v81;
                    }
LABEL_130:
                    v82 = *((_DWORD *)a1 + 14);
                    v83 = (v82 + 1);
                    *(_DWORD *)(v69 + 92) = v83;
                    v82 += 2;
                    *((_DWORD *)a1 + 14) = v82;
                    *(_DWORD *)(v69 + 96) = v82;
                    v84 = *(_DWORD *)(v43 + 144);
                    if (*(_DWORD *)(v43 + 148) > v84)
                    {
                      *(_DWORD *)(v43 + 144) = v84 + 1;
                      v70 = *(_QWORD *)(v43 + 136) + 40 * v84;
                      *(_QWORD *)v70 = 75;
                      *(_DWORD *)(v70 + 8) = v83;
                      *(_QWORD *)(v70 + 12) = 0;
                      *(_QWORD *)(v70 + 28) = 0;
                      *(_QWORD *)(v70 + 20) = 0;
                      *(_DWORD *)(v70 + 36) = 0;
                      v69 = *(_QWORD *)(v69 + 64);
                      if (!v69)
                        goto LABEL_132;
                      goto LABEL_102;
                    }
                    sub_1ACBFF5AC(v43, 75, 0, v83, 0, v65, v66, v67);
                    v69 = *(_QWORD *)(v69 + 64);
                    if (!v69)
                    {
LABEL_132:
                      v85 = (uint64_t)v1135;
                      if (!v68)
                      {
                        v86 = (unsigned __int8 *)sub_1ACC03524(v44, 155, "0");
                        v87 = (int *)sub_1ACC2D490(*a1, v86);
                        v85 = (uint64_t)v1135;
                        v68 = v87;
                      }
                      v88 = sub_1ACB6E848(a1, v68, v1149, v1128, v1121, v1113, v85, 0, 0);
                      v89 = sub_1ACBE1124((uint64_t)*a1, 0x70uLL);
                      if (v89)
                      {
                        *(_QWORD *)v89 = 0x100000001;
                        *(_OWORD *)(v89 + 72) = 0u;
                        *(_OWORD *)(v89 + 8) = 0u;
                        *(_OWORD *)(v89 + 24) = 0u;
                        *(_OWORD *)(v89 + 56) = 0u;
                        *(_OWORD *)(v89 + 88) = 0u;
                        *(_QWORD *)(v89 + 104) = 0;
                        *(_OWORD *)(v89 + 40) = 0u;
                        *(_DWORD *)(v89 + 72) = -1;
                        *(_QWORD *)(v89 + 16) = 0;
                        *(_QWORD *)(v89 + 24) = 0;
                        *v1105 = (int *)v89;
                        *(_QWORD *)(v89 + 48) = v88;
                        *(_WORD *)(v89 + 69) |= 8u;
                        sub_1ACBAC224((uint64_t)a1, *v1105);
                        *((_DWORD *)v88 + 1) |= 0x8000040u;
                        v90 = sub_1ACC0EC20((uint64_t)a1, (uint64_t)v88, 64);
                        *((_DWORD *)v88 + 1) |= v1100 & 8;
                        v8 = v1140;
                        if (v90)
                        {
                          v91 = v90;
                          v93 = *(_OWORD *)(v90 + 64);
                          v92 = *(_OWORD *)(v90 + 80);
                          v94 = *(_QWORD *)(v90 + 96);
                          *(_OWORD *)(v45 + 48) = *(_OWORD *)(v90 + 48);
                          v95 = *(_OWORD *)v90;
                          v96 = *(_OWORD *)(v90 + 32);
                          *(_OWORD *)(v45 + 16) = *(_OWORD *)(v90 + 16);
                          *(_OWORD *)(v45 + 32) = v96;
                          *(_OWORD *)v45 = v95;
                          *(_QWORD *)(v45 + 96) = v94;
                          *(_OWORD *)(v45 + 64) = v93;
                          *(_OWORD *)(v45 + 80) = v92;
                          *(_DWORD *)(v45 + 48) |= 0x4000u;
                          *((_QWORD *)*v1105 + 5) = v45;
                          *(_QWORD *)&v1164 = 0;
                          v1166 = 0u;
                          *((_QWORD *)&v1164 + 1) = sub_1ACC1860C;
                          *(_QWORD *)&v1165 = sub_1ACC18638;
                          *((_QWORD *)&v1165 + 1) = sub_1ACC1864C;
                          sub_1ACB73B30(&v1164, v88);
                          v97 = 1;
                          v45 = v91;
                        }
                        else
                        {
                          v97 = 0;
                        }
                      }
                      else
                      {
                        *v1105 = 0;
                        v8 = v1140;
                        v97 = 1;
                        if (v88)
                          sub_1ACB7E704((_QWORD *)v44, (uint64_t)v88, 1);
                      }
                      v98 = *(unsigned __int8 *)(v44 + 103);
                      if (*a1)
                        v99 = (_QWORD *)sub_1ACBE1124((uint64_t)*a1, 0x18uLL);
                      else
                        v99 = (_QWORD *)sub_1ACB5D828(24);
                      if (v99)
                      {
                        *v99 = a1[24];
                        a1[24] = v99;
                        v99[1] = v45;
                        v99[2] = sub_1ACB7EA34;
                      }
                      else
                      {
                        sub_1ACBE0F9C(*a1, (_QWORD *)v45);
                      }
                      v100 = v97 ^ 1;
                      if (v98)
                        v100 = 1;
                      v11 = v1155;
                      if ((v100 & 1) == 0)
                        goto LABEL_149;
LABEL_24:
                      v13 = 1;
                      goto LABEL_25;
                    }
                    goto LABEL_102;
                  }
                }
                else if (v73 < 2)
                {
                  goto LABEL_116;
                }
                --v73;
              }
            }
          }
          else if (v60 < 2)
          {
            goto LABEL_96;
          }
          --v60;
        }
      }
    }
  }
LABEL_149:
  v101 = *((_QWORD *)v9 + 9);
  v102 = (int *)*((_QWORD *)v9 + 5);
  v103 = *((_DWORD *)v9 + 1);
  v104 = 0uLL;
  memset((char *)v1161 + 8, 0, 48);
  *(_QWORD *)&v1161[0] = v101;
  v1150 = v9 + 72;
  v105 = *((_QWORD *)v9 + 10);
  if (v105)
  {
LABEL_150:
    v1156 = (uint64_t)*a1;
    v106 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v1167 = *(_OWORD *)v8;
    *(_OWORD *)&v1167[16] = v106;
    v1168 = *((_QWORD *)v8 + 4);
    v107 = (uint64_t)a1[2];
    if (!v107)
    {
      if (!a1[21] && (*(_BYTE *)(v1156 + 96) & 8) == 0)
        *((_BYTE *)a1 + 35) = 1;
      v107 = sub_1ACBCB4C8((uint64_t *)a1, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
    }
    v108 = v1167[0];
    if (v1167[0] == 12)
    {
      v20 = *(unsigned int *)&v1167[4];
      v21 = **((unsigned int **)v9 + 4);
      v109 = *(_DWORD *)(v107 + 144);
      if (*(_DWORD *)(v107 + 148) <= v109)
      {
        sub_1ACBFF5AC(v107, 118, *(unsigned int *)&v1167[4], v21, 0, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)(v107 + 144) = v109 + 1;
        v110 = *(_QWORD *)(v107 + 136) + 40 * v109;
        *(_DWORD *)v110 = 118;
        *(_DWORD *)(v110 + 4) = v20;
        *(_DWORD *)(v110 + 8) = v21;
        *(_QWORD *)(v110 + 12) = 0;
        *(_QWORD *)(v110 + 28) = 0;
        *(_QWORD *)(v110 + 20) = 0;
        *(_DWORD *)(v110 + 36) = 0;
      }
      v108 = 14;
      v1167[0] = 14;
    }
    v112 = *((_DWORD *)v9 + 1);
    if ((v112 & 0x400) != 0)
    {
      v113 = *((_QWORD *)v9 + 12);
      if (!*((_QWORD *)v9 + 14))
      {
        v114 = 1;
        v115 = (uint64_t)v9;
        while (1)
        {
          v116 = *(_QWORD *)(v115 + 80);
          if (!v116)
            break;
          v114 += v113 == 0;
          v115 = *(_QWORD *)(v115 + 80);
          if (*(_QWORD *)(v116 + 112))
            goto LABEL_166;
        }
        sub_1ACC0BE9C((uint64_t *)a1, 0, "SCAN %d CONSTANT ROW%s", v21, v22, v23, v24, v25, v114);
        do
        {
          sub_1ACB7A74C((uint64_t)a1, v115, 0xFFFFFFFFLL, 0, 0, v1167, 1, 1);
          if (v113)
            break;
          *(_WORD *)(v115 + 2) = v114;
          v115 = *(_QWORD *)(v115 + 88);
        }
        while (v115);
        v13 = 0;
        goto LABEL_646;
      }
    }
LABEL_166:
    if ((v112 & 0x2000) != 0)
    {
      v117 = v9;
      while ((v117[5] & 0x20) != 0)
      {
        v117 = (unsigned __int8 *)*((_QWORD *)v117 + 10);
        if (!v117)
          goto LABEL_170;
      }
      v150 = (unsigned int *)*((_QWORD *)v9 + 5);
      v151 = **((unsigned int **)v9 + 4);
      v152 = (uint64_t)a1[2];
      v1158 = 0u;
      memset(v1159, 0, 24);
      if (*((_QWORD *)v9 + 14))
      {
        sub_1ACBCB308((uint64_t)a1, "cannot use window functions in recursive queries", v20, v21, v22, v23, v24, v25, v1053);
LABEL_881:
        v609 = 0;
        v13 = 0;
LABEL_906:
        if (!*((_DWORD *)a1 + 12) && (v9[4] & 0x20) != 0)
        {
          v803 = **((_DWORD **)v9 + 4);
          v804 = sub_1ACC092C0(v1156, v803, 1);
          if (v804)
          {
            v810 = v804;
            v811 = v9;
            if (v803 >= 1)
            {
              v812 = 0;
              v813 = v804 + 32;
              do
              {
                v814 = sub_1ACBA4E80((uint64_t)a1, (uint64_t)v9, v812, v805, v806, v807, v808, v809);
                *(_QWORD *)(v813 + 8 * v812) = v814;
                if (!v814)
                  *(_QWORD *)(v813 + 8 * v812) = *(_QWORD *)(v1156 + 16);
                ++v812;
              }
              while (v803 != (_DWORD)v812);
              v811 = v9;
            }
            do
            {
              v815 = *((_DWORD *)v811 + 5);
              if ((v815 & 0x80000000) == 0)
              {
                v816 = *(_QWORD *)v107;
                if (*(_BYTE *)(*(_QWORD *)v107 + 103))
                {
                  dword_1EECAD288 = v803;
                  v817 = (*(_DWORD *)v810)++;
                  if (!*(_QWORD *)(v816 + 816))
                  {
                    *(_DWORD *)v810 = v817;
                    if (!v817)
                      sub_1ACBF0674(*(_QWORD **)(v810 + 16), (_QWORD *)v810);
                  }
                }
                else
                {
                  v818 = *(_QWORD *)(v107 + 136);
                  v819 = v818 + 40 * v815;
                  v821 = *(unsigned __int8 *)(v819 + 1);
                  v820 = v819 + 1;
                  *(_DWORD *)(v820 + 7) = v803;
                  ++*(_DWORD *)v810;
                  if (v821)
                  {
                    sub_1ACBFF884((uint64_t *)v107, v818 + 40 * v815, (char *)v810, 0xFFFFFFF8);
                  }
                  else
                  {
                    *(_QWORD *)(v818 + 40 * v815 + 16) = v810;
                    *(_BYTE *)v820 = -8;
                  }
                }
                *((_DWORD *)v811 + 5) = -1;
                v822 = *((_DWORD *)v811 + 6);
                if ((v822 & 0x80000000) == 0)
                {
                  v823 = *(_QWORD *)v107;
                  if (*(_BYTE *)(*(_QWORD *)v107 + 103))
                  {
                    dword_1EECAD288 = v803;
                    v824 = (*(_DWORD *)v810)++;
                    if (!*(_QWORD *)(v823 + 816))
                    {
                      *(_DWORD *)v810 = v824;
                      if (!v824)
                        sub_1ACBF0674(*(_QWORD **)(v810 + 16), (_QWORD *)v810);
                    }
                  }
                  else
                  {
                    v825 = *(_QWORD *)(v107 + 136);
                    v826 = v825 + 40 * v822;
                    v828 = *(unsigned __int8 *)(v826 + 1);
                    v827 = v826 + 1;
                    *(_DWORD *)(v827 + 7) = v803;
                    ++*(_DWORD *)v810;
                    if (v828)
                    {
                      sub_1ACBFF884((uint64_t *)v107, v825 + 40 * v822, (char *)v810, 0xFFFFFFF8);
                    }
                    else
                    {
                      *(_QWORD *)(v825 + 40 * v822 + 16) = v810;
                      *(_BYTE *)v827 = -8;
                    }
                  }
                  *((_DWORD *)v811 + 6) = -1;
                }
              }
              v811 = (unsigned __int8 *)*((_QWORD *)v811 + 10);
            }
            while (v811);
            v200 = (*(_DWORD *)v810)-- == 1;
            if (v200)
              sub_1ACBF0674(*(_QWORD **)(v810 + 16), (_QWORD *)v810);
          }
          else
          {
            v13 = 7;
          }
        }
        *(_QWORD *)(v8 + 12) = *(_QWORD *)&v1167[12];
        if (v609)
        {
          if (*a1)
            v829 = (_QWORD *)sub_1ACBE1124((uint64_t)*a1, 0x18uLL);
          else
            v829 = (_QWORD *)sub_1ACB5D828(24);
          if (v829)
          {
            *v829 = a1[24];
            a1[24] = v829;
            v829[1] = v609;
            v829[2] = sub_1ACBF8338;
          }
          else
          {
            sub_1ACB7E704(*a1, v609, 1);
          }
        }
LABEL_944:
        if (!*((_QWORD *)v9 + 11))
          goto LABEL_27;
        return v13;
      }
      v383 = (uint64_t)*a1;
      v384 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *))(*a1)[66];
      if (!v384 || *(_BYTE *)(v383 + 197) || *((_BYTE *)a1 + 302))
      {
LABEL_521:
        v385 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v385;
        *((_WORD *)v9 + 1) = 320;
        sub_1ACB7895C((uint64_t)a1, (uint64_t)v9, v385, v21, v22, v23, v24, v25);
        v390 = *((_QWORD *)v9 + 12);
        v391 = *((_DWORD *)v9 + 2);
        v392 = *((_DWORD *)v9 + 3);
        *((_QWORD *)v9 + 12) = 0;
        *((_QWORD *)v9 + 1) = 0;
        v393 = *v150;
        v1147 = v390;
        v1137 = v385;
        v1125 = v392;
        if ((int)v393 < 1)
        {
LABEL_525:
          v395 = 0;
        }
        else
        {
          v394 = v150 + 18;
          while ((*(_WORD *)((_BYTE *)v394 - 3) & 0x40) == 0)
          {
            v394 += 26;
            if (!--v393)
              goto LABEL_525;
          }
          v395 = *v394;
        }
        v558 = (_DWORD *)*((_QWORD *)v9 + 9);
        v559 = *((unsigned int *)a1 + 13);
        v560 = (v559 + 1);
        *((_DWORD *)a1 + 13) = v560;
        v1144 = v8;
        if (*v9 == 134)
        {
          if (v558)
            v561 = 6;
          else
            v561 = 5;
          *((_DWORD *)a1 + 13) = v559 + 2;
        }
        else
        {
          v560 = 0;
          if (v558)
            v561 = 7;
          else
            v561 = 8;
        }
        LOBYTE(v1158) = v561;
        *(_QWORD *)&v1159[8] = 0;
        DWORD1(v1158) = v559;
        *((_QWORD *)&v1158 + 1) = 0;
        *(_DWORD *)v1159 = 0;
        v562 = (*((_DWORD *)a1 + 14) + 1);
        *((_DWORD *)a1 + 14) = v562;
        v563 = *(_DWORD *)(v152 + 144);
        v1131 = v391;
        if (*(_DWORD *)(v152 + 148) <= v563)
        {
          sub_1ACBFF5AC(v152, 121, v395, v562, v151, v387, v388, v389);
        }
        else
        {
          *(_DWORD *)(v152 + 144) = v563 + 1;
          v564 = *(_QWORD *)(v152 + 136) + 40 * v563;
          *(_DWORD *)v564 = 121;
          *(_DWORD *)(v564 + 4) = v395;
          *(_DWORD *)(v564 + 8) = v562;
          *(_DWORD *)(v564 + 12) = v151;
          *(_QWORD *)(v564 + 24) = 0;
          *(_QWORD *)(v564 + 32) = 0;
          *(_QWORD *)(v564 + 16) = 0;
        }
        if (v558)
        {
          v565 = sub_1ACC18F3C((uint64_t *)a1, (uint64_t)v9);
          sub_1ACBA86CC((uint64_t *)v152, 118, v559, (*v558 + 2), 0, v565, 4294967288, v566);
          *(_QWORD *)&v1159[16] = v558;
        }
        else
        {
          sub_1ACBFF554(v152, 118, v559, v151, v386, v387, v388, v389);
        }
        if ((_DWORD)v560)
        {
          *((_DWORD *)v9 + 5) = sub_1ACBFF554(v152, 118, v560, 0, v569, v570, v571, v572);
          v573 = *((_DWORD *)v9 + 1) | 0x20;
          *((_DWORD *)v9 + 1) = v573;
        }
        else
        {
          v573 = *((_DWORD *)v9 + 1);
        }
        *(_QWORD *)v1150 = 0;
        v574 = v9;
        do
        {
          if ((v573 & 8) != 0)
          {
            sub_1ACBCB308((uint64_t)a1, "recursive aggregate queries not supported", v567, v568, v569, v570, v571, v572, v1053);
            goto LABEL_878;
          }
          v575 = v574;
          *v574 = -121;
          v574 = (unsigned __int8 *)*((_QWORD *)v574 + 10);
          v573 = *((_DWORD *)v574 + 1);
        }
        while ((v573 & 0x2000) != 0);
        *((_QWORD *)v574 + 11) = 0;
        sub_1ACC0BE9C((uint64_t *)a1, 1, "SETUP", v568, v569, v570, v571, v572, v1053);
        v576 = sub_1ACB6EA04(a1, v574, &v1158);
        *((_QWORD *)v574 + 11) = v9;
        if (!v576)
        {
          v1111 = sub_1ACBFF554(v152, 36, v559, v1137, v577, v578, v579, v580);
          sub_1ACC08D28(v152, 136, v395, v581, v582, v583, v584, v585);
          v1119 = v395;
          if (v558)
            sub_1ACB683F4(v152, 94, v559, (*v558 + 1), v562, v587, v588, v589);
          else
            sub_1ACBFF554(v152, 134, v559, v562, v586, v587, v588, v589);
          sub_1ACC08D28(v152, 130, v559, v590, v591, v592, v593, v594);
          v735 = (*((_DWORD *)a1 + 17) - 1);
          *((_DWORD *)a1 + 17) = v735;
          sub_1ACC190F0(v152, v1125, v735, v736, v737, v738, v739, v740);
          sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, v1119, 0, 0, v1167, v735, v1137);
          if (v1131)
            sub_1ACBFF554(v152, 61, v1131, v1137, v741, v742, v743, v744);
          sub_1ACC0A574(v152, v735);
          *((_QWORD *)v575 + 10) = 0;
          sub_1ACC0BE9C((uint64_t *)a1, 1, "RECURSIVE STEP", v745, v746, v747, v748, v749, v1057);
          sub_1ACB6EA04(a1, v9, &v1158);
          *((_QWORD *)v575 + 10) = v574;
          sub_1ACC08E48(v152, v1111, v750, v751, v752, v753, v754, v755);
          sub_1ACC0A574(v152, v1137);
        }
LABEL_878:
        if (*(_QWORD *)v1150)
          sub_1ACC010B0(*a1, *(_QWORD **)v1150);
        *((_QWORD *)v9 + 9) = v558;
        v8 = v1144;
        *((_QWORD *)v9 + 12) = v1147;
        goto LABEL_881;
      }
      v731 = v384(*(_QWORD *)(v383 + 536), 33, 0, 0, 0, a1[46]);
      if (v731 == 1)
      {
        v733 = 23;
        v734 = "not authorized";
      }
      else
      {
        if ((v731 & 0xFFFFFFFD) == 0)
        {
          if (v731)
            goto LABEL_881;
          goto LABEL_521;
        }
        v733 = 1;
        v734 = "authorizer malfunction";
      }
      sub_1ACBCB308((uint64_t)a1, v734, v732, v21, v22, v23, v24, v25, v1053);
      *((_DWORD *)a1 + 6) = v733;
      goto LABEL_881;
    }
LABEL_170:
    v118 = *(unsigned int **)v1150;
    if (*(_QWORD *)v1150)
    {
      v1158 = 0u;
      memset(v1159, 0, 24);
      *(_QWORD *)&v1166 = 0;
      v1164 = 0u;
      v1165 = 0u;
      v119 = (uint64_t)*a1;
      v120 = (uint64_t)a1[2];
      v121 = *((_DWORD *)a1 + 17);
      v1122 = v121 - 2;
      *((_DWORD *)a1 + 17) = v121 - 2;
      v1157 = *v9;
      v122 = *v118;
      if (v1157 == 135 || *(_BYTE *)(v119 + 103))
      {
LABEL_173:
        v123 = (v122 + 1);
        v124 = (_DWORD *)sub_1ACBE1124(v119, 4 * (int)v123);
        v1081 = (uint64_t)v124;
        if (!v124)
        {
          v1078 = 0;
          v128 = v1157;
          goto LABEL_201;
        }
        *v124 = v122;
        v128 = v1157;
        if ((int)v122 >= 1)
        {
          v129 = v118 + 2;
          v130 = v123 - 1;
          if ((unint64_t)(v123 - 1) >= 0xC
            && ((v131 = (uint32x4_t *)(v124 + 1),
                 v124 + 1 < (unsigned int *)((char *)&v118[6 * v123 - 4] - 2))
              ? (v132 = v118 + 7 >= &v124[v123])
              : (v132 = 1),
                v132))
          {
            v133 = v130 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v129 += 6 * (v130 & 0xFFFFFFFFFFFFFFFCLL);
            v134 = (__int16 *)(v118 + 13);
            v135.i64[0] = -1;
            v135.i64[1] = -1;
            v136 = v130 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v137.i16[0] = *(v134 - 12);
              v137.i16[1] = *v134;
              v137.i16[2] = v134[12];
              v137.i16[3] = v134[24];
              *v131++ = vaddw_u16(v135, v137);
              v134 += 48;
              v136 -= 4;
            }
            while (v136);
            if (v130 == (v130 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_200;
          }
          else
          {
            v133 = 1;
          }
          v154 = v123 - v133;
          v155 = &v124[v133];
          v156 = (unsigned __int16 *)(v129 + 5);
          do
          {
            v157 = *v156;
            v156 += 12;
            *v155++ = v157 - 1;
            --v154;
          }
          while (v154);
        }
LABEL_200:
        v1078 = sub_1ACC18F3C((uint64_t *)a1, (uint64_t)v9);
LABEL_201:
        v1146 = v121 - 1;
        v1088 = (_QWORD *)v119;
        v1142 = (uint64_t)v8;
        v1084 = v121;
        if (v128 == 135)
        {
          v158 = 0;
          v159 = 0;
        }
        else
        {
          v160 = **((unsigned int **)v9 + 4);
          v161 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v161 + v160;
          v162 = *(_DWORD *)(v120 + 144);
          v1093 = v161;
          if (*(_DWORD *)(v120 + 148) <= v162)
          {
            sub_1ACBFF5AC(v120, 71, 0, v161, 0, v125, v126, v127);
          }
          else
          {
            *(_DWORD *)(v120 + 144) = v162 + 1;
            v163 = *(_QWORD *)(v120 + 136) + 40 * v162;
            *(_QWORD *)v163 = 71;
            *(_DWORD *)(v163 + 8) = v161;
            *(_QWORD *)(v163 + 12) = 0;
            *(_QWORD *)(v163 + 28) = 0;
            *(_QWORD *)(v163 + 20) = 0;
            *(_DWORD *)(v163 + 36) = 0;
          }
          v158 = sub_1ACC092C0(v119, v160, 1);
          if (v158)
            v377 = (int)v160 < 1;
          else
            v377 = 1;
          if (!v377)
          {
            v378 = 0;
            do
            {
              *(_QWORD *)(v158 + 32 + 8 * v378) = sub_1ACBA4E80((uint64_t)a1, (uint64_t)v9, v378, v372, v373, v374, v375, v376);
              *(_BYTE *)(*(_QWORD *)(v158 + 24) + v378++) = 0;
            }
            while (v160 != v378);
          }
          v128 = v1157;
          if ((v1157 & 0xFE) != 0x86)
          {
            v1076 = v1157 & 0xFE;
            v1110 = 0;
            v382 = v9;
LABEL_555:
            v429 = *((_QWORD *)v382 + 10);
            *((_QWORD *)v382 + 10) = 0;
            *(_QWORD *)(v429 + 88) = 0;
            *(_QWORD *)(v429 + 72) = sub_1ACB8B6B8((uint64_t)*a1, v118, 0);
            sub_1ACC124C8((unsigned __int8 *)a1, (uint64_t)v9, *((int **)v9 + 9), (uint64_t)"ORDER", v411, v412, v413, v414);
            v1138 = v429;
            sub_1ACC124C8((unsigned __int8 *)a1, v429, *(int **)(v429 + 72), (uint64_t)"ORDER", v415, v416, v417, v418);
            sub_1ACB7895C((uint64_t)a1, (uint64_t)v9, v1146, v419, v420, v421, v422, v423);
            LODWORD(v429) = 0;
            if (v1157 == 135)
            {
              v430 = *((_DWORD *)v9 + 2);
              LODWORD(v431) = 0;
              if (v430)
              {
                v432 = *((_DWORD *)a1 + 14);
                v429 = (v432 + 1);
                v431 = (v432 + 2);
                *((_DWORD *)a1 + 14) = v431;
                v433 = *((_DWORD *)v9 + 3);
                if (v433)
                  v434 = (v433 + 1);
                else
                  v434 = v430;
                v435 = *(_DWORD *)(v120 + 144);
                if (*(_DWORD *)(v120 + 148) <= v435)
                {
                  sub_1ACBFF5AC(v120, 80, v434, v429, 0, v426, v427, v428);
                }
                else
                {
                  *(_DWORD *)(v120 + 144) = v435 + 1;
                  v436 = *(_QWORD *)(v120 + 136) + 40 * v435;
                  *(_DWORD *)v436 = 80;
                  *(_DWORD *)(v436 + 4) = v434;
                  *(_DWORD *)(v436 + 8) = v429;
                  *(_QWORD *)(v436 + 12) = 0;
                  *(_QWORD *)(v436 + 28) = 0;
                  *(_QWORD *)(v436 + 20) = 0;
                  *(_DWORD *)(v436 + 36) = 0;
                }
                v437 = *(_DWORD *)(v120 + 144);
                if (*(_DWORD *)(v120 + 148) <= v437)
                {
                  sub_1ACBFF5AC(v120, 80, v429, v431, 0, v426, v427, v428);
                }
                else
                {
                  *(_DWORD *)(v120 + 144) = v437 + 1;
                  v438 = *(_QWORD *)(v120 + 136) + 40 * v437;
                  *(_DWORD *)v438 = 80;
                  *(_DWORD *)(v438 + 4) = v429;
                  *(_DWORD *)(v438 + 8) = v431;
                  *(_QWORD *)(v438 + 12) = 0;
                  *(_QWORD *)(v438 + 28) = 0;
                  *(_QWORD *)(v438 + 20) = 0;
                  *(_DWORD *)(v438 + 36) = 0;
                }
              }
            }
            else
            {
              LODWORD(v431) = 0;
            }
            v1072 = v431;
            v439 = (unsigned __int8 *)*((_QWORD *)v9 + 12);
            if (v439)
              sub_1ACBF8348((_QWORD *)v119, v439);
            *((_QWORD *)v9 + 12) = 0;
            v440 = *((_DWORD *)a1 + 14);
            LODWORD(v441) = v440 + 1;
            v1103 = v440 + 4;
            *((_DWORD *)a1 + 14) = v440 + 4;
            LOBYTE(v1158) = 13;
            DWORD1(v1158) = v440 + 1;
            *(_QWORD *)&v1159[8] = 0;
            *((_QWORD *)&v1158 + 1) = 0;
            *(_DWORD *)v1159 = 0;
            LOBYTE(v1164) = 13;
            v1152 = v440 + 2;
            DWORD1(v1164) = v440 + 2;
            *((_QWORD *)&v1165 + 1) = 0;
            *((_QWORD *)&v1164 + 1) = 0;
            LODWORD(v1165) = 0;
            if ((*v9 + 121) > 2u)
              v442 = "UNION";
            else
              v442 = off_1E5C75768[(char)(*v9 + 121)];
            sub_1ACC0BE9C((uint64_t *)a1, 1, "MERGE (%s)", v424, v425, v426, v427, v428, (char)v442);
            v447 = *(_DWORD *)(v120 + 144);
            v448 = (v447 + 1);
            v1118 = v440 + 1;
            if (*(_DWORD *)(v120 + 148) <= v447)
            {
              v447 = sub_1ACBFF5AC(v120, 11, (v440 + 1), 0, v448, v444, v445, v446);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v448;
              v449 = *(_QWORD *)(v120 + 136) + 40 * v447;
              *(_DWORD *)v449 = 11;
              *(_DWORD *)(v449 + 4) = v441;
              *(_DWORD *)(v449 + 8) = 0;
              *(_DWORD *)(v449 + 12) = v448;
              *(_QWORD *)(v449 + 24) = 0;
              *(_QWORD *)(v449 + 32) = 0;
              *(_QWORD *)(v449 + 16) = 0;
            }
            *(_DWORD *)(v1138 + 8) = v429;
            sub_1ACC0BE9C((uint64_t *)a1, 1, "LEFT", v443, v448, v444, v445, v446, v1055);
            sub_1ACB6EA04(a1, v1138, &v1158);
            v454 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v454)
            {
              v441 = v441;
              sub_1ACBFF5AC(v120, 68, v441, 0, 0, v451, v452, v453);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v454 + 1;
              v455 = *(_QWORD *)(v120 + 136) + 40 * v454;
              v441 = v441;
              *(_DWORD *)v455 = 68;
              *(_DWORD *)(v455 + 4) = v441;
              *(_OWORD *)(v455 + 8) = 0u;
              *(_OWORD *)(v455 + 24) = 0u;
            }
            v456 = *(_QWORD *)(v120 + 24);
            *(_BYTE *)(v456 + 31) = 0;
            *(_DWORD *)(v456 + 40) = 0;
            v457 = *(_DWORD *)(v120 + 144);
            if (*(_BYTE *)(*(_QWORD *)v120 + 103))
              v458 = &byte_1EECAD280;
            else
              v458 = (char *)(*(_QWORD *)(v120 + 136) + 40 * v447);
            v1130 = v440 + 3;
            *((_DWORD *)v458 + 2) = v457;
            v459 = (v457 + 1);
            if (*(_DWORD *)(v120 + 148) <= v457)
            {
              v1068 = sub_1ACBFF5AC(v120, 11, v1152, 0, v459, v451, v452, v453);
            }
            else
            {
              v1068 = v457;
              *(_DWORD *)(v120 + 144) = v459;
              v460 = *(_QWORD *)(v120 + 136) + 40 * v457;
              *(_DWORD *)v460 = 11;
              *(_QWORD *)(v460 + 4) = v1152;
              *(_DWORD *)(v460 + 12) = v459;
              *(_QWORD *)(v460 + 24) = 0;
              *(_QWORD *)(v460 + 32) = 0;
              *(_QWORD *)(v460 + 16) = 0;
            }
            v461 = v441;
            v462 = *((_QWORD *)v9 + 1);
            *((_QWORD *)v9 + 1) = v1072;
            sub_1ACC0BE9C((uint64_t *)a1, 1, "RIGHT", v450, v459, v451, v452, v453, v1056);
            sub_1ACB6EA04(a1, v9, &v1164);
            *((_QWORD *)v9 + 1) = v462;
            v466 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v466)
            {
              sub_1ACBFF5AC(v120, 68, v1152, 0, 0, v463, v464, v465);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v466 + 1;
              v467 = *(_QWORD *)(v120 + 136) + 40 * v466;
              *(_DWORD *)v467 = 68;
              *(_DWORD *)(v467 + 4) = v1152;
              *(_OWORD *)(v467 + 8) = 0u;
              *(_OWORD *)(v467 + 24) = 0u;
            }
            v468 = v1093;
            v469 = *(_QWORD *)(v120 + 24);
            *(_BYTE *)(v469 + 31) = 0;
            *(_DWORD *)(v469 + 40) = 0;
            v473 = sub_1ACC1914C((uint64_t)a1, (uint64_t)v9, (uint64_t)&v1158, v1142, v1130, v1093, (_DWORD *)v158, v1146);
            v1097 = 0;
            if (v1110)
              v1097 = sub_1ACC1914C((uint64_t)a1, (uint64_t)v9, (uint64_t)&v1164, v1142, v1103, v468, (_DWORD *)v158, v1146);
            if (v158)
            {
              v200 = (*(_DWORD *)v158)-- == 1;
              if (v200)
                sub_1ACBF0674(*(_QWORD **)(v158 + 16), (_QWORD *)v158);
            }
            v474 = v1146;
            v475 = v1146;
            v476 = v461;
            if (v1076 != 136)
            {
              v474 = *(unsigned int *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= (int)v474)
              {
                v474 = sub_1ACBFF5AC(v120, 10, v1103, v1097, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v474 + 1;
                v477 = *(_QWORD *)(v120 + 136) + 40 * (int)v474;
                *(_DWORD *)v477 = 10;
                *(_DWORD *)(v477 + 4) = v1103;
                *(_DWORD *)(v477 + 8) = v1097;
                *(_QWORD *)(v477 + 12) = 0;
                *(_QWORD *)(v477 + 28) = 0;
                *(_QWORD *)(v477 + 20) = 0;
                *(_DWORD *)(v477 + 36) = 0;
              }
              v475 = *(unsigned int *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= (int)v475)
              {
                v475 = sub_1ACBFF5AC(v120, 12, v1152, v1146, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v475 + 1;
                v478 = *(_QWORD *)(v120 + 136) + 40 * (int)v475;
                *(_DWORD *)v478 = 12;
                *(_DWORD *)(v478 + 4) = v1152;
                *(_DWORD *)(v478 + 8) = v1146;
                *(_QWORD *)(v478 + 12) = 0;
                *(_QWORD *)(v478 + 28) = 0;
                *(_QWORD *)(v478 + 20) = 0;
                *(_DWORD *)(v478 + 36) = 0;
              }
              v479 = *(_DWORD *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= v479)
              {
                sub_1ACBFF5AC(v120, 9, 0, v474, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v479 + 1;
                v480 = *(_QWORD *)(v120 + 136) + 40 * v479;
                *(_QWORD *)v480 = 9;
                *(_DWORD *)(v480 + 8) = v474;
                *(_QWORD *)(v480 + 12) = 0;
                *(_QWORD *)(v480 + 28) = 0;
                *(_QWORD *)(v480 + 20) = 0;
                *(_DWORD *)(v480 + 36) = 0;
              }
              v481 = *((__int16 *)v9 + 1);
              v482 = *(__int16 *)(v1138 + 2);
              if (v481 >= v482)
              {
                v483 = *((_WORD *)v9 + 1);
                if (v482 + 49 >= v481)
                {
                  if (v482 + 31 >= v481)
                    v483 = v481 + byte_1ACCBA360[v481 - v482];
                  else
                    v483 = v481 + 1;
                }
              }
              else
              {
                v483 = *(_WORD *)(v1138 + 2);
                if (v481 + 49 >= v482)
                {
                  if (v481 + 31 >= v482)
                    v483 = v482 + byte_1ACCBA360[v482 - v481];
                  else
                    v483 = v482 + 1;
                }
              }
              *((_WORD *)v9 + 1) = v483;
            }
            v1143 = v475;
            if (v1157 == 137)
            {
              v512 = *(__int16 *)(v1138 + 2);
              v513 = v474;
              if (*((__int16 *)v9 + 1) > v512)
              {
                *((_WORD *)v9 + 1) = v512;
                v513 = v474;
              }
            }
            else
            {
              v513 = *(unsigned int *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= (int)v513)
              {
                v513 = sub_1ACBFF5AC(v120, 10, v1130, v473, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v513 + 1;
                v514 = *(_QWORD *)(v120 + 136) + 40 * (int)v513;
                *(_DWORD *)v514 = 10;
                *(_DWORD *)(v514 + 4) = v1130;
                *(_DWORD *)(v514 + 8) = v473;
                *(_QWORD *)(v514 + 12) = 0;
                *(_QWORD *)(v514 + 28) = 0;
                *(_QWORD *)(v514 + 20) = 0;
                *(_DWORD *)(v514 + 36) = 0;
              }
              v515 = *(_DWORD *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= v515)
              {
                sub_1ACBFF5AC(v120, 12, v461, v1146, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v515 + 1;
                v516 = *(_QWORD *)(v120 + 136) + 40 * v515;
                *(_DWORD *)v516 = 12;
                *(_DWORD *)(v516 + 4) = v461;
                *(_DWORD *)(v516 + 8) = v1146;
                *(_QWORD *)(v516 + 12) = 0;
                *(_QWORD *)(v516 + 28) = 0;
                *(_QWORD *)(v516 + 20) = 0;
                *(_DWORD *)(v516 + 36) = 0;
              }
              v517 = *(_DWORD *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= v517)
              {
                sub_1ACBFF5AC(v120, 9, 0, v513, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v517 + 1;
                v518 = *(_QWORD *)(v120 + 136) + 40 * v517;
                *(_QWORD *)v518 = 9;
                *(_DWORD *)(v518 + 8) = v513;
                *(_QWORD *)(v518 + 12) = 0;
                *(_QWORD *)(v518 + 28) = 0;
                *(_QWORD *)(v518 + 20) = 0;
                *(_DWORD *)(v518 + 36) = 0;
              }
            }
            v519 = *(unsigned int *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= (int)v519)
            {
              v519 = sub_1ACBFF5AC(v120, 10, v1130, v473, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v519 + 1;
              v520 = *(_QWORD *)(v120 + 136) + 40 * (int)v519;
              *(_DWORD *)v520 = 10;
              *(_DWORD *)(v520 + 4) = v1130;
              *(_DWORD *)(v520 + 8) = v473;
              *(_QWORD *)(v520 + 12) = 0;
              *(_QWORD *)(v520 + 28) = 0;
              *(_QWORD *)(v520 + 20) = 0;
              *(_DWORD *)(v520 + 36) = 0;
            }
            v521 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v521)
            {
              sub_1ACBFF5AC(v120, 12, v476, v474, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v521 + 1;
              v522 = *(_QWORD *)(v120 + 136) + 40 * v521;
              *(_DWORD *)v522 = 12;
              *(_DWORD *)(v522 + 4) = v476;
              *(_DWORD *)(v522 + 8) = v474;
              *(_QWORD *)(v522 + 12) = 0;
              *(_QWORD *)(v522 + 28) = 0;
              *(_QWORD *)(v522 + 20) = 0;
              *(_DWORD *)(v522 + 36) = 0;
            }
            v523 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v523)
            {
              sub_1ACBFF5AC(v120, 9, 0, v1122, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v523 + 1;
              v524 = *(_QWORD *)(v120 + 136) + 40 * v523;
              *(_QWORD *)v524 = 9;
              *(_DWORD *)(v524 + 8) = v1122;
              *(_QWORD *)(v524 + 12) = 0;
              *(_QWORD *)(v524 + 28) = 0;
              *(_QWORD *)(v524 + 20) = 0;
              *(_DWORD *)(v524 + 36) = 0;
            }
            if (v1157 == 135)
            {
              v525 = v519;
              v526 = v1084;
            }
            else if (v1157 == 137)
            {
              v525 = (v519 + 1);
              v526 = v1084;
            }
            else
            {
              v527 = *(unsigned int *)(v120 + 144);
              if (*(_DWORD *)(v120 + 148) <= (int)v527)
              {
                v527 = sub_1ACBFF5AC(v120, 12, v1118, v474, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v527 + 1;
                v528 = *(_QWORD *)(v120 + 136) + 40 * (int)v527;
                *(_DWORD *)v528 = 12;
                *(_DWORD *)(v528 + 4) = v1118;
                *(_DWORD *)(v528 + 8) = v474;
                *(_QWORD *)(v528 + 12) = 0;
                *(_QWORD *)(v528 + 28) = 0;
                *(_QWORD *)(v528 + 20) = 0;
                *(_DWORD *)(v528 + 36) = 0;
              }
              v529 = *(_DWORD *)(v120 + 144);
              v526 = v1084;
              if (*(_DWORD *)(v120 + 148) <= v529)
              {
                sub_1ACBFF5AC(v120, 9, 0, v1122, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v529 + 1;
                v530 = *(_QWORD *)(v120 + 136) + 40 * v529;
                *(_QWORD *)v530 = 9;
                *(_DWORD *)(v530 + 8) = v1122;
                *(_QWORD *)(v530 + 12) = 0;
                *(_QWORD *)(v530 + 28) = 0;
                *(_QWORD *)(v530 + 20) = 0;
                *(_DWORD *)(v530 + 36) = 0;
              }
              v525 = v519;
              v519 = v527;
            }
            v531 = *(unsigned int *)(v120 + 144);
            if (v1110)
            {
              if (*(_DWORD *)(v120 + 148) <= (int)v531)
              {
                sub_1ACBFF5AC(v120, 10, v1103, v1097, 0, v470, v471, v472);
              }
              else
              {
                *(_DWORD *)(v120 + 144) = v531 + 1;
                v532 = *(_QWORD *)(v120 + 136) + 40 * (int)v531;
                *(_DWORD *)v532 = 10;
                *(_DWORD *)(v532 + 4) = v1103;
                *(_DWORD *)(v532 + 8) = v1097;
                *(_QWORD *)(v532 + 12) = 0;
                *(_QWORD *)(v532 + 28) = 0;
                *(_QWORD *)(v532 + 20) = 0;
                *(_DWORD *)(v532 + 36) = 0;
              }
            }
            v533 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v533)
            {
              sub_1ACBFF5AC(v120, 12, v1152, v513, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v533 + 1;
              v534 = *(_QWORD *)(v120 + 136) + 40 * v533;
              *(_DWORD *)v534 = 12;
              *(_DWORD *)(v534 + 4) = v1152;
              *(_DWORD *)(v534 + 8) = v513;
              *(_QWORD *)(v534 + 12) = 0;
              *(_QWORD *)(v534 + 28) = 0;
              *(_QWORD *)(v534 + 20) = 0;
              *(_DWORD *)(v534 + 36) = 0;
            }
            v535 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v535)
            {
              sub_1ACBFF5AC(v120, 9, 0, v1122, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v535 + 1;
              v536 = *(_QWORD *)(v120 + 136) + 40 * v535;
              *(_QWORD *)v536 = 9;
              *(_DWORD *)(v536 + 8) = v1122;
              *(_QWORD *)(v536 + 12) = 0;
              *(_QWORD *)(v536 + 28) = 0;
              *(_QWORD *)(v536 + 20) = 0;
              *(_DWORD *)(v536 + 36) = 0;
            }
            v537 = *(_DWORD *)(v120 + 144);
            if (*(_BYTE *)(*(_QWORD *)v120 + 103))
              v538 = &byte_1EECAD280;
            else
              v538 = (char *)(*(_QWORD *)(v120 + 136) + 40 * v1068);
            *((_DWORD *)v538 + 2) = v537;
            if (*(_DWORD *)(v120 + 148) <= v537)
            {
              sub_1ACBFF5AC(v120, 12, v1118, v1143, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v537 + 1;
              v539 = *(_QWORD *)(v120 + 136) + 40 * v537;
              *(_DWORD *)v539 = 12;
              *(_DWORD *)(v539 + 4) = v1118;
              *(_DWORD *)(v539 + 8) = v1143;
              *(_QWORD *)(v539 + 12) = 0;
              *(_QWORD *)(v539 + 28) = 0;
              *(_QWORD *)(v539 + 20) = 0;
              *(_DWORD *)(v539 + 36) = 0;
            }
            v540 = *(_DWORD *)(v120 + 144);
            if (*(_DWORD *)(v120 + 148) <= v540)
            {
              sub_1ACBFF5AC(v120, 12, v1152, v513, 0, v470, v471, v472);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v540 + 1;
              v541 = *(_QWORD *)(v120 + 136) + 40 * v540;
              *(_DWORD *)v541 = 12;
              *(_DWORD *)(v541 + 4) = v1152;
              *(_DWORD *)(v541 + 8) = v513;
              *(_QWORD *)(v541 + 12) = 0;
              *(_QWORD *)(v541 + 28) = 0;
              *(_QWORD *)(v541 + 20) = 0;
              *(_DWORD *)(v541 + 36) = 0;
            }
            v542 = *(_QWORD *)(v120 + 24);
            v543 = 1 - v526;
            if (*(_DWORD *)(v542 + 68) + *(_DWORD *)(v542 + 72) < 0)
              sub_1ACC0D5D4(v542, v120, v543);
            else
              *(_DWORD *)(*(_QWORD *)(v542 + 80) + 4 * v543) = *(_DWORD *)(v120 + 144);
            sub_1ACBA86CC((uint64_t *)v120, 89, 0, 0, 0, v1081, 4294967282, v472);
            sub_1ACBA86CC((uint64_t *)v120, 90, HIDWORD(v1158), HIDWORD(v1164), v122, v1078, 4294967288, v544);
            v548 = *(_DWORD *)(v120 + 144);
            if (v548 >= 1)
              *(_WORD *)(*(_QWORD *)(v120 + 136) + 40 * (v548 - 1) + 2) = 1;
            if (*(_DWORD *)(v120 + 148) <= v548)
            {
              sub_1ACBFF5AC(v120, 14, v525, v519, v531, v545, v546, v547);
            }
            else
            {
              *(_DWORD *)(v120 + 144) = v548 + 1;
              v549 = *(_QWORD *)(v120 + 136) + 40 * v548;
              *(_DWORD *)v549 = 14;
              *(_DWORD *)(v549 + 4) = v525;
              *(_DWORD *)(v549 + 8) = v519;
              *(_DWORD *)(v549 + 12) = v531;
              *(_QWORD *)(v549 + 24) = 0;
              *(_QWORD *)(v549 + 32) = 0;
              *(_QWORD *)(v549 + 16) = 0;
            }
            v550 = *(_QWORD *)(v120 + 24);
            v551 = -v526;
            if (*(_DWORD *)(v550 + 68) + *(_DWORD *)(v550 + 72) < 0)
              sub_1ACC0D5D4(v550, v120, v551);
            else
              *(_DWORD *)(*(_QWORD *)(v550 + 80) + 4 * v551) = *(_DWORD *)(v120 + 144);
            v552 = *((_QWORD *)v382 + 10);
            if (v552)
            {
              if (*a1)
                v553 = (_QWORD *)sub_1ACBE1124((uint64_t)*a1, 0x18uLL);
              else
                v553 = (_QWORD *)sub_1ACB5D828(24);
              if (v553)
              {
                *v553 = a1[24];
                a1[24] = v553;
                v553[1] = v552;
                v553[2] = sub_1ACBF8338;
              }
              else
              {
                sub_1ACB7E704(*a1, v552, 1);
              }
            }
            *((_QWORD *)v382 + 10) = v1138;
            *(_QWORD *)(v1138 + 88) = v382;
            v554 = *(_QWORD **)(v1138 + 72);
            if (v554)
              sub_1ACC010B0(v1088, v554);
            *(_QWORD *)(v1138 + 72) = 0;
            v555 = *((_DWORD *)a1 + 78);
            if (v555)
            {
              v556 = a1[2];
              if (*(_BYTE *)(*v556 + 103))
                v557 = &byte_1EECAD280;
              else
                v557 = (char *)(v556[17] + 40 * v555);
              v555 = *((_DWORD *)v557 + 2);
            }
            *((_DWORD *)a1 + 78) = v555;
            v13 = *((_DWORD *)a1 + 12) != 0;
            goto LABEL_944;
          }
          v159 = v1093;
        }
        v1093 = v159;
        if ((*(_BYTE *)(v119 + 98) & 0x20) != 0)
          goto LABEL_512;
        v379 = (unsigned __int8 *)*((_QWORD *)v9 + 10);
        if (!v379)
          goto LABEL_512;
        v380 = 1;
        v381 = v9;
        do
        {
          if (*v381 != v128)
            break;
          v381 = v379;
          ++v380;
          v379 = (unsigned __int8 *)*((_QWORD *)v379 + 10);
        }
        while (v379);
        if (v380 >= 4)
        {
          v410 = 2;
          v382 = v9;
          do
          {
            v382 = (unsigned __int8 *)*((_QWORD *)v382 + 10);
            v410 += 2;
          }
          while (v410 < v380);
          v1110 = 1;
          v1076 = 134;
        }
        else
        {
LABEL_512:
          v1110 = 1;
          v1076 = 134;
          v382 = v9;
        }
        goto LABEL_555;
      }
      v396 = 1;
      while (1)
      {
        if (v396 > **((_DWORD **)v9 + 4))
          goto LABEL_173;
        if ((int)v122 < 1)
        {
          v399 = 0;
        }
        else
        {
          v399 = 0;
          v400 = (unsigned __int16 *)(v118 + 7);
          while (1)
          {
            v401 = *v400;
            v400 += 12;
            if (v396 == v401)
              break;
            if ((_DWORD)v122 == ++v399)
              goto LABEL_538;
          }
        }
        if (v399 == (_DWORD)v122)
          break;
LABEL_529:
        ++v396;
        if (*(_BYTE *)(v119 + 103))
          goto LABEL_173;
      }
LABEL_538:
      v1169[0] = 0;
      v1169[1] = 0;
      v402 = sub_1ACB6DDF8(v119, 155, (uint64_t)v1169, 0);
      if (!v402)
      {
        v13 = 7;
        goto LABEL_944;
      }
      *(_DWORD *)(v402 + 4) |= 0x800u;
      *(_DWORD *)(v402 + 8) = v396;
      if (v118)
      {
        v403 = *v118;
        if ((int)v118[1] > (int)*v118)
        {
          *v118 = v403 + 1;
          v397 = &v118[6 * v403];
          *((_QWORD *)v397 + 2) = 0;
          *((_QWORD *)v397 + 3) = 0;
          *((_QWORD *)v397 + 1) = v402;
          *(_QWORD *)v1150 = v118;
LABEL_528:
          v398 = &v118[6 * (int)v122];
          v122 = (v122 + 1);
          *((_WORD *)v398 + 14) = v396;
          goto LABEL_529;
        }
        v404 = sub_1ACC2D4F4((uint64_t)*a1, v118, (unsigned __int8 *)v402);
      }
      else
      {
        v404 = (unsigned int *)sub_1ACC2D490(*a1, (unsigned __int8 *)v402);
      }
      v118 = v404;
      *(_QWORD *)v1150 = v404;
      if (!v404)
        goto LABEL_529;
      goto LABEL_528;
    }
    if (!*(_QWORD *)(v105 + 80))
    {
      sub_1ACC0BE9C((uint64_t *)a1, 1, "COMPOUND QUERY", v21, v22, v23, v24, v25, v1053);
      sub_1ACC0BE9C((uint64_t *)a1, 1, "LEFT-MOST SUBQUERY", v138, v139, v140, v141, v142, v1054);
    }
    v143 = *v9;
    if (v143 == 134 || v143 == 136)
    {
      v1158 = 0u;
      memset(v1159, 0, 24);
      if (v108 == 1)
      {
        v153 = *(unsigned int *)&v1167[4];
      }
      else
      {
        v153 = *((unsigned int *)a1 + 13);
        *((_DWORD *)a1 + 13) = v153 + 1;
        v408 = *(_DWORD *)(v107 + 144);
        if (*(_DWORD *)(v107 + 148) <= v408)
        {
          v408 = sub_1ACBFF5AC(v107, 118, v153, 0, 0, v23, v24, v25);
        }
        else
        {
          *(_DWORD *)(v107 + 144) = v408 + 1;
          v409 = *(_QWORD *)(v107 + 136) + 40 * v408;
          *(_DWORD *)v409 = 118;
          *(_DWORD *)(v409 + 4) = v153;
          *(_OWORD *)(v409 + 8) = 0uLL;
          *(_OWORD *)(v409 + 24) = 0uLL;
        }
        *((_DWORD *)v9 + 5) = v408;
        v499 = v9;
        do
        {
          v500 = v499;
          v499 = (unsigned __int8 *)*((_QWORD *)v499 + 11);
        }
        while (v499);
        *((_DWORD *)v500 + 1) |= 0x20u;
      }
      LOBYTE(v1158) = 1;
      *(_QWORD *)&v1159[8] = 0;
      DWORD1(v1158) = v153;
      *((_QWORD *)&v1158 + 1) = 0;
      *(_DWORD *)v1159 = 0;
      v501 = sub_1ACB6EA04(a1, v105, &v1158);
      if ((_DWORD)v501)
      {
        v13 = v501;
        goto LABEL_646;
      }
      v507 = *v9;
      if (v507 == 136)
        v508 = 2;
      else
        v508 = 1;
      *((_QWORD *)v9 + 10) = 0;
      v509 = *((_QWORD *)v9 + 12);
      *((_QWORD *)v9 + 12) = 0;
      LOBYTE(v1158) = v508;
      v510 = v507 + 121;
      if (v510 > 2u)
        v511 = "UNION";
      else
        v511 = off_1E5C75768[(char)v510];
      sub_1ACC0BE9C((uint64_t *)a1, 1, "%s USING TEMP B-TREE", v502, v503, v504, v505, v506, (char)v511);
      v13 = sub_1ACB6EA04(a1, v9, &v1158);
      v609 = *((_QWORD *)v9 + 10);
      *((_QWORD *)v9 + 9) = 0;
      *((_QWORD *)v9 + 10) = v105;
      if (*v9 == 134)
        *((_WORD *)v9 + 1) = sub_1ACC18EAC(*((__int16 *)v9 + 1), *(__int16 *)(v105 + 2));
      v610 = (unsigned __int8 *)*((_QWORD *)v9 + 12);
      if (v610)
        sub_1ACBF8348((_QWORD *)v1156, v610);
      *((_QWORD *)v9 + 12) = v509;
      *((_QWORD *)v9 + 1) = 0;
      if (v108 != 1 && !*(_BYTE *)(v1156 + 103))
      {
        v611 = *((_DWORD *)a1 + 17);
        v612 = (v611 - 1);
        v613 = (v611 - 2);
        *((_DWORD *)a1 + 17) = v613;
        sub_1ACB7895C((uint64_t)a1, (uint64_t)v9, v612, v604, v605, v606, v607, v608);
        sub_1ACBFF554(v107, 36, v153, v612, v614, v615, v616, v617);
        v618 = v8;
        v619 = *(unsigned int *)(v107 + 144);
        sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, v153, 0, 0, v1167, v613, v612);
        sub_1ACC0A574(v107, v613);
        v620 = v619;
        v8 = v618;
        sub_1ACBFF554(v107, 39, v153, v620, v621, v622, v623, v624);
        sub_1ACC0A574(v107, v612);
        sub_1ACBFF554(v107, 122, v153, 0, v625, v626, v627, v628);
      }
    }
    else if (v143 == 135)
    {
      LODWORD(v1158) = 0;
      *(_QWORD *)(v105 + 8) = *((_QWORD *)v9 + 1);
      *(_QWORD *)(v105 + 96) = *((_QWORD *)v9 + 12);
      v144 = sub_1ACB6EA04(a1, v105, v1167);
      *(_QWORD *)(v105 + 96) = 0;
      if ((_DWORD)v144)
      {
        v13 = v144;
LABEL_646:
        *(_QWORD *)(v8 + 12) = *(_QWORD *)&v1167[12];
        goto LABEL_944;
      }
      *((_QWORD *)v9 + 10) = 0;
      v595 = *(_QWORD *)(v105 + 8);
      *((_QWORD *)v9 + 1) = v595;
      if ((_DWORD)v595)
      {
        v596 = sub_1ACC08D28(v107, 17, v595, v145, v146, v147, v148, v149);
        v146 = *((unsigned int *)v9 + 3);
        if ((_DWORD)v146)
          sub_1ACB683F4(v107, 160, *((unsigned int *)v9 + 2), (v146 + 1), v146, v147, v148, v149);
      }
      else
      {
        v596 = 0;
      }
      sub_1ACC0BE9C((uint64_t *)a1, 1, "UNION ALL", v145, v146, v147, v148, v149, v1053);
      v13 = sub_1ACB6EA04(a1, v9, v1167);
      v609 = *((_QWORD *)v9 + 10);
      *((_QWORD *)v9 + 10) = v105;
      v721 = sub_1ACC18EAC(*((__int16 *)v9 + 1), *(__int16 *)(v105 + 2));
      *((_WORD *)v9 + 1) = v721;
      v722 = *((_QWORD *)v9 + 12);
      if (v722)
      {
        v723 = v721;
        if (sub_1ACC12444(*(_QWORD *)(v722 + 16), (int *)&v1158))
        {
          if ((int)v1158 >= 1)
          {
            v724 = sub_1ACBD36D0(v1158);
            if (v723 > v724)
              *((_WORD *)v9 + 1) = v724;
          }
        }
      }
      if (v596)
      {
        if (*(_BYTE *)(*(_QWORD *)v107 + 103))
          dword_1EECAD288 = *(_DWORD *)(v107 + 144);
        else
          *(_DWORD *)(*(_QWORD *)(v107 + 136) + 40 * v596 + 8) = *(_DWORD *)(v107 + 144);
      }
    }
    else
    {
      v1158 = 0u;
      memset(v1159, 0, 24);
      v405 = *((unsigned int *)a1 + 13);
      *((_DWORD *)a1 + 13) = v405 + 2;
      v406 = *(_DWORD *)(v107 + 144);
      if (*(_DWORD *)(v107 + 148) <= v406)
      {
        v406 = sub_1ACBFF5AC(v107, 118, v405, 0, 0, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)(v107 + 144) = v406 + 1;
        v407 = *(_QWORD *)(v107 + 136) + 40 * v406;
        *(_DWORD *)v407 = 118;
        *(_DWORD *)(v407 + 4) = v405;
        *(_OWORD *)(v407 + 8) = 0uLL;
        *(_OWORD *)(v407 + 24) = 0uLL;
      }
      *((_DWORD *)v9 + 5) = v406;
      v492 = v9;
      do
      {
        v493 = v492;
        v492 = (unsigned __int8 *)*((_QWORD *)v492 + 11);
      }
      while (v492);
      *((_DWORD *)v493 + 1) |= 0x20u;
      LOBYTE(v1158) = 1;
      *(_QWORD *)&v1159[8] = 0;
      DWORD1(v1158) = v405;
      *((_QWORD *)&v1158 + 1) = 0;
      *(_DWORD *)v1159 = 0;
      v494 = sub_1ACB6EA04(a1, v105, &v1158);
      if ((_DWORD)v494)
      {
        v13 = v494;
        goto LABEL_646;
      }
      *((_DWORD *)v9 + 6) = sub_1ACBFF554(v107, 118, (v405 + 1), 0, v495, v496, v497, v498);
      *((_QWORD *)v9 + 10) = 0;
      v602 = *((_QWORD *)v9 + 12);
      *((_QWORD *)v9 + 12) = 0;
      DWORD1(v1158) = v405 + 1;
      if ((*v9 + 121) > 2u)
        v603 = "UNION";
      else
        v603 = off_1E5C75768[(char)(*v9 + 121)];
      sub_1ACC0BE9C((uint64_t *)a1, 1, "%s USING TEMP B-TREE", v597, v598, v599, v600, v601, (char)v603);
      v13 = sub_1ACB6EA04(a1, v9, &v1158);
      v609 = *((_QWORD *)v9 + 10);
      *((_QWORD *)v9 + 10) = v105;
      v655 = *(__int16 *)(v105 + 2);
      if (*((__int16 *)v9 + 1) > v655)
        *((_WORD *)v9 + 1) = v655;
      v656 = (unsigned __int8 *)*((_QWORD *)v9 + 12);
      if (v656)
        sub_1ACBF8348((_QWORD *)v1156, v656);
      *((_QWORD *)v9 + 12) = v602;
      if (!(_DWORD)v13)
      {
        v657 = *((_DWORD *)a1 + 17);
        v658 = (v657 - 1);
        v659 = (v657 - 2);
        *((_DWORD *)a1 + 17) = v659;
        sub_1ACB7895C((uint64_t)a1, (uint64_t)v9, v658, v650, v651, v652, v653, v654);
        v1154 = v658;
        sub_1ACBFF554(v107, 36, v405, v658, v660, v661, v662, v663);
        if (*((_BYTE *)a1 + 31))
        {
          v668 = *((_BYTE *)a1 + 31) - 1;
          *((_BYTE *)a1 + 31) = v668;
          v669 = *((unsigned int *)a1 + v668 + 56);
        }
        else
        {
          v669 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v669;
        }
        v1148 = sub_1ACBFF554(v107, 134, v405, v669, v664, v665, v666, v667);
        sub_1ACBCB640(v107, 28, (v405 + 1), v659, v669, 0, v785, v786);
        if ((_DWORD)v669)
        {
          v787 = *((unsigned __int8 *)a1 + 31);
          if (v787 <= 7)
          {
            *((_BYTE *)a1 + 31) = v787 + 1;
            *((_DWORD *)a1 + v787 + 56) = v669;
          }
        }
        sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, v405, 0, 0, v1167, v659, v1154);
        sub_1ACC0A574(v107, v659);
        sub_1ACBFF554(v107, 39, v405, v1148, v788, v789, v790, v791);
        sub_1ACC0A574(v107, v1154);
        sub_1ACBFF554(v107, 122, (v405 + 1), 0, v792, v793, v794, v795);
        sub_1ACBFF554(v107, 122, v405, 0, v796, v797, v798, v799);
      }
    }
    if (!*((_QWORD *)v9 + 11))
    {
      v800 = *((_DWORD *)a1 + 78);
      if (v800)
      {
        v801 = a1[2];
        if (*(_BYTE *)(*v801 + 103))
          v802 = &byte_1EECAD280;
        else
          v802 = (char *)(v801[17] + 40 * v800);
        v800 = *((_DWORD *)v802 + 2);
      }
      *((_DWORD *)a1 + 78) = v800;
    }
    goto LABEL_906;
  }
  v1129 = v103;
  v1155 = v11;
  v1141 = v8;
  v111 = 0;
  while (1)
  {
    if (v111 >= *v102)
    {
      v254 = (_BYTE *)*((_QWORD *)v9 + 6);
      v11 = v1155;
      if (v254 && *v254 == 44 && (*(_BYTE *)(v1155 + 97) & 0x80) == 0)
        sub_1ACC152BC(a1, (uint64_t)v9);
      if ((*(_WORD *)(v1155 + 96) & 0x201) == 0 && sub_1ACC153C0((uint64_t *)a1, (uint64_t)v9))
      {
        if (*(_BYTE *)(v1155 + 103))
          goto LABEL_24;
        v102 = (int *)*((_QWORD *)v9 + 5);
      }
      if (*v102 >= 1)
      {
        v255 = 0;
        v256 = v102 - 14;
        v257 = -1;
        v1066 = v9;
        while (1)
        {
          v258 = &v102[26 * v255];
          v1158 = 0u;
          memset(v1159, 0, 24);
          v260 = *((_QWORD *)v258 + 11);
          v259 = (uint64_t *)(v258 + 22);
          if (!v260)
          {
            v20 = *(_QWORD *)&v102[26 * v255 + 6];
            if (v20)
              sub_1ACC0D950((uint64_t)a1, 20, v20, (uint64_t)&byte_1ACCBEAEE, *(_QWORD *)&v102[26 * v255 + 4]);
          }
          v261 = &v102[26 * v255];
          v264 = *((_QWORD *)v261 + 6);
          v263 = (unsigned __int8 **)(v261 + 12);
          v262 = v264;
          if (v264)
            break;
LABEL_393:
          ++v255;
          --v257;
          v256 += 26;
          if (v255 >= *v102)
            goto LABEL_490;
        }
        v1151 = v262;
        LODWORD(v1164) = 0;
        sub_1ACB8DE58(v9, &v1164);
        *((_DWORD *)a1 + 77) += v1164;
        v269 = *(_DWORD *)(v1155 + 96);
        if ((v269 & 0x1000) == 0)
        {
          if ((*(_WORD *)((_BYTE *)&v102[26 * v255 + 17] + 1) & 0x100) == 0
            || (v270 = *(_QWORD *)&v102[26 * v255 + 26], *(_BYTE *)(v270 + 18)) && *(int *)v270 <= 1)
          {
            sub_1ACC1560C((uint64_t *)a1, (unsigned __int8 *)v1151, *((_QWORD *)v9 + 6), (uint64_t)v102, v255, v266, v267, v268);
            v269 = *(_DWORD *)(v1155 + 96);
          }
        }
        if ((v269 & 0x4000000) == 0 && (*(_WORD *)((_BYTE *)&v102[26 * v255 + 17] + 1) & 0x108) == 0)
        {
          v318 = *v263;
          v319 = *v263;
          while (v319)
          {
            if ((v319[4] & 9) == 0 && (!*((_QWORD *)v319 + 10) || *v319 == 135))
            {
              v320 = *((_QWORD *)v319 + 14);
              v319 = (unsigned __int8 *)*((_QWORD *)v319 + 10);
              if (!v320)
                continue;
            }
            goto LABEL_405;
          }
          v334 = *v259;
          v335 = (unsigned int *)*((_QWORD *)v318 + 9);
          if (v335)
          {
            v336 = *v335;
            if ((int)v336 >= 1)
            {
              v337 = (unsigned __int16 *)(v335 + 7);
              do
              {
                v339 = *v337;
                v337 += 12;
                v338 = v339;
                if (v339)
                {
                  v340 = v338 - 1;
                  if (v340 >= 0x3F)
                    LOBYTE(v340) = 63;
                  v334 |= 1 << v340;
                }
                --v336;
              }
              while (v336);
            }
          }
          if (*(__int16 *)(*(_QWORD *)&v102[26 * v255 + 10] + 54) >= 1)
          {
            v341 = 0;
            v342 = *(unsigned __int16 *)(*(_QWORD *)&v102[26 * v255 + 10] + 54);
            do
            {
              v343 = 1 << v341;
              if (v341 >= 0x3F)
                v343 = 0x8000000000000000;
              if ((v343 & v334) == 0 && v318 != 0)
              {
                v345 = v318;
                do
                {
                  v346 = *(_QWORD *)(*((_QWORD *)v345 + 4) + 24 * v341 + 8);
                  if (*(_BYTE *)v346 != 121)
                  {
                    *(_BYTE *)v346 = 121;
                    *(_DWORD *)(v346 + 4) &= 0xFFF7DFFF;
                    *((_DWORD *)v345 + 1) |= 0x1000000u;
                  }
                  v345 = (unsigned __int8 *)*((_QWORD *)v345 + 10);
                }
                while (v345);
              }
              ++v341;
            }
            while (v341 != v342);
          }
        }
LABEL_405:
        v271 = v259 - 10;
        v272 = a1[46];
        a1[46] = *(_QWORD **)&v102[26 * v255 + 6];
        v273 = *((_DWORD *)v9 + 1);
        v274 = (uint64_t)&v102[26 * (int)v255 + 2];
        v1136 = v272;
        if ((*(_BYTE *)(v274 + 62) & 1) == 0
          || (v275 = *(_QWORD *)&v102[26 * (int)v255 + 26], v276 = *(unsigned __int8 *)(v275 + 18),
                                                            *(_BYTE *)(v275 + 18))
          && ((v277 = *(_DWORD *)v275, v276 != 2) ? (v278 = v277 <= 1) : (v278 = 1), v278))
        {
          if ((v102[17] & 0x40) == 0 && (*((_BYTE *)*a1 + 99) & 2) == 0)
          {
            v279 = *v102;
            v1123 = v271;
            v280 = sub_1ACC158E8((uint64_t)v102, (_QWORD *)v274, (v255 + 1), *v102);
            v271 = v1123;
            if (!v280)
            {
              if ((_DWORD)v255)
              {
                if ((v273 & 0x10000000) == 0)
                {
                  v331 = v256;
                  v332 = v257;
                  do
                  {
                    if ((v331[31] & 0x22) != 0)
                      break;
                    v132 = __CFADD__(v332++, 1);
                    if (v132)
                      goto LABEL_477;
                    v333 = *(_QWORD *)v331;
                    v331 -= 26;
                  }
                  while (!v333);
                }
              }
              else if (v279 == 1 || (v102[43] & 2) != 0 || (v273 & 0x10000000) == 0)
              {
LABEL_477:
                v347 = *(_DWORD *)(v1145 + 144);
                v348 = v347 + 1;
                v349 = (*((_DWORD *)a1 + 14) + 1);
                *((_DWORD *)a1 + 14) = v349;
                v350 = &v102[26 * v255];
                v350[15] = v349;
                v1109 = v347;
                v1117 = (unsigned int *)(v350 + 15);
                if (*(_DWORD *)(v1145 + 148) <= v347)
                {
                  v352 = v347 + 1;
                  sub_1ACBFF5AC(v1145, 11, v349, 0, (v347 + 1), v266, v267, v268);
                  v348 = v352;
                  LOBYTE(v271) = (_BYTE)v1123;
                }
                else
                {
                  *(_DWORD *)(v1145 + 144) = v348;
                  v351 = *(_QWORD *)(v1145 + 136) + 40 * v347;
                  *(_DWORD *)v351 = 11;
                  *(_DWORD *)(v351 + 4) = v349;
                  *(_DWORD *)(v351 + 8) = 0;
                  *(_DWORD *)(v351 + 12) = v348;
                  *(_QWORD *)(v351 + 24) = 0;
                  *(_QWORD *)(v351 + 32) = 0;
                  *(_QWORD *)(v351 + 16) = 0;
                }
                v353 = &v102[26 * v255];
                v353[14] = v348;
                v354 = *v1117;
                LOBYTE(v1158) = 13;
                *(_QWORD *)&v1159[8] = 0;
                DWORD1(v1158) = v354;
                *((_QWORD *)&v1158 + 1) = 0;
                *(_DWORD *)v1159 = 0;
                sub_1ACC0BE9C((uint64_t *)a1, 1, "CO-ROUTINE %!S", v281, v265, v266, v267, v268, (char)v271);
                sub_1ACB6EA04(a1, v1151, &v1158);
                *(_WORD *)(*((_QWORD *)v353 + 5) + 58) = *(_WORD *)(v1151 + 2);
                *(_WORD *)((char *)v353 + 69) |= 0x20u;
                v353[16] = HIDWORD(v1158);
                v358 = *v1117;
                v359 = *(_DWORD *)(v1145 + 144);
                if (*(_DWORD *)(v1145 + 148) <= v359)
                {
                  sub_1ACBFF5AC(v1145, 68, v358, 0, 0, v355, v356, v357);
                }
                else
                {
                  *(_DWORD *)(v1145 + 144) = v359 + 1;
                  v360 = *(_QWORD *)(v1145 + 136) + 40 * v359;
                  *(_DWORD *)v360 = 68;
                  *(_DWORD *)(v360 + 4) = v358;
                  *(_OWORD *)(v360 + 8) = 0u;
                  *(_OWORD *)(v360 + 24) = 0u;
                }
                v361 = *(_QWORD *)(v1145 + 24);
                *(_BYTE *)(v361 + 31) = 0;
                *(_DWORD *)(v361 + 40) = 0;
                v362 = &byte_1EECAD280;
                if (!*(_BYTE *)(*(_QWORD *)v1145 + 103))
                  v362 = (char *)(*(_QWORD *)(v1145 + 136) + 40 * v1109);
                *((_DWORD *)v362 + 2) = *(_DWORD *)(v1145 + 144);
                *((_BYTE *)a1 + 31) = 0;
                *((_DWORD *)a1 + 10) = 0;
                goto LABEL_430;
              }
            }
          }
        }
        v282 = &v102[26 * v255];
        v284 = *(_WORD *)((char *)v282 + 69);
        v283 = (__int16 *)((char *)v282 + 69);
        if ((v284 & 0x100) != 0
          && (v285 = *(_QWORD *)&v102[26 * v255 + 26], v286 = *(unsigned int *)(v285 + 4), (int)v286 >= 1))
        {
          sub_1ACBFF554(v1145, 10, *(unsigned int *)(v285 + 8), v286, v265, v266, v267, v268);
          v291 = v102[26 * v255 + 18];
          v292 = *(unsigned int *)(v285 + 12);
          if ((_DWORD)v291 != (_DWORD)v292)
            sub_1ACBFF554(v1145, 115, v291, v292, v287, v288, v289, v290);
          v293 = *(_WORD *)(v285 + 16);
        }
        else
        {
          v294 = (char)v271;
          v295 = sub_1ACC158E8((uint64_t)v102, v271, 0, v255);
          if (!v295)
          {
            v308 = *((_DWORD *)a1 + 14) + 1;
            *((_DWORD *)a1 + 14) = v308;
            v309 = &v102[26 * v255];
            v309[15] = v308;
            v1124 = (unsigned int *)(v309 + 15);
            v310 = sub_1ACC08CD4(v1145, 9, v296, v297, v298, v299, v300, v301);
            v309[14] = v310 + 1;
            v1102 = v309 + 14;
            v317 = *v283;
            *v283 |= 0x10u;
            v1091 = v310;
            v1116 = v310 + 1;
            if ((v317 & 8) != 0)
              v1108 = 0;
            else
              v1108 = sub_1ACC08CD4(v1145, 15, v311, v312, v313, v314, v315, v316);
            v321 = &v102[26 * v255];
            v322 = v321[18];
            LOBYTE(v1158) = 12;
            *(_QWORD *)&v1159[8] = 0;
            DWORD1(v1158) = v322;
            *((_QWORD *)&v1158 + 1) = 0;
            *(_DWORD *)v1159 = 0;
            v323 = sub_1ACC0BE9C((uint64_t *)a1, 1, "MATERIALIZE %!S", v312, v313, v314, v315, v316, v294);
            sub_1ACB6EA04(a1, v1151, &v1158);
            v1096 = v321 + 18;
            *(_WORD *)(*((_QWORD *)v321 + 5) + 58) = *(_WORD *)(v1151 + 2);
            v9 = v1066;
            if (v1108)
            {
              v328 = &byte_1EECAD280;
              if (!*(_BYTE *)(*(_QWORD *)v1145 + 103))
                v328 = (char *)(*(_QWORD *)(v1145 + 136) + 40 * v1108);
              *((_DWORD *)v328 + 2) = *(_DWORD *)(v1145 + 144);
            }
            sub_1ACBFF554(v1145, 67, *v1124, v1116, v324, v325, v326, v327);
            sub_1ACC0BFD4(v1145, v323, v323, -1);
            v329 = &byte_1EECAD280;
            if (!*(_BYTE *)(*(_QWORD *)v1145 + 103))
              v329 = (char *)(*(_QWORD *)(v1145 + 136) + 40 * v1091);
            *((_DWORD *)v329 + 2) = *(_DWORD *)(v1145 + 144);
            *((_BYTE *)a1 + 31) = 0;
            *((_DWORD *)a1 + 10) = 0;
            if ((*v283 & 0x108) == 0x100)
            {
              v330 = *(_QWORD *)&v102[26 * v255 + 26];
              *(_QWORD *)(v330 + 4) = *v1102;
              *(_DWORD *)(v330 + 12) = *v1096;
              *(_WORD *)(v330 + 16) = *(_WORD *)(v1151 + 2);
            }
            goto LABEL_430;
          }
          v302 = v295;
          v303 = *(unsigned int *)(v295 + 48);
          if ((_DWORD)v303)
            sub_1ACBFF554(v1145, 10, *(unsigned int *)(v295 + 52), v303, v298, v299, v300, v301);
          v304 = v102[26 * v255 + 18];
          v305 = *(unsigned int *)(v302 + 64);
          v306 = *(_DWORD *)(v1145 + 144);
          if (*(_DWORD *)(v1145 + 148) <= v306)
          {
            sub_1ACBFF5AC(v1145, 115, v304, v305, 0, v299, v300, v301);
          }
          else
          {
            *(_DWORD *)(v1145 + 144) = v306 + 1;
            v307 = *(_QWORD *)(v1145 + 136) + 40 * v306;
            *(_DWORD *)v307 = 115;
            *(_DWORD *)(v307 + 4) = v304;
            *(_DWORD *)(v307 + 8) = v305;
            *(_QWORD *)(v307 + 12) = 0;
            *(_QWORD *)(v307 + 28) = 0;
            *(_QWORD *)(v307 + 20) = 0;
            *(_DWORD *)(v307 + 36) = 0;
          }
          v293 = *(_WORD *)(*(_QWORD *)(v302 + 40) + 2);
        }
        *(_WORD *)(v1151 + 2) = v293;
LABEL_430:
        if (*(_BYTE *)(v1155 + 103))
          goto LABEL_862;
        LODWORD(v1164) = 0;
        sub_1ACB8DE58(v9, &v1164);
        *((_DWORD *)a1 + 77) -= v1164;
        a1[46] = v1136;
        goto LABEL_393;
      }
LABEL_490:
      v363 = (_QWORD *)*((_QWORD *)v9 + 4);
      v364 = *((_QWORD *)v9 + 6);
      v365 = (_QWORD *)*((_QWORD *)v9 + 7);
      v366 = *((_QWORD *)v9 + 8);
      v367 = *((_DWORD *)v9 + 1);
      LOBYTE(v1162) = v367 & 1;
      if ((v367 & 9) == 1
        && !sub_1ACC0B0F4(*(unint64_t *)&v1161[0], (unint64_t)v363, 0xFFFFFFFFLL)
        && !*((_QWORD *)v9 + 14))
      {
        *((_DWORD *)v9 + 1) &= ~1u;
        v365 = sub_1ACB8B6B8(v1155, v363, 0);
        *((_QWORD *)v9 + 7) = v365;
        *((_DWORD *)v9 + 1) |= 8u;
        LOBYTE(v1162) = 2;
      }
      if (*(_QWORD *)&v1161[0])
      {
        v368 = sub_1ACC159CC((uint64_t *)a1, *(int **)&v1161[0], 0, *(_DWORD *)v363);
        v369 = *((unsigned int *)a1 + 13);
        *((_DWORD *)a1 + 13) = v369 + 1;
        HIDWORD(v1161[0]) = v369;
        v371 = sub_1ACBA86CC((uint64_t *)v1145, 118, v369, (**(_DWORD **)&v1161[0] + *(_DWORD *)v363 + 1), 0, v368, 4294967288, v370);
      }
      else
      {
        v371 = -1;
      }
      DWORD2(v1161[1]) = v371;
      if (*v1141 != 12
        || (sub_1ACBFF554(v1145, 118, *((unsigned int *)v1141 + 1), *(unsigned int *)v363, v22, v23, v24, v25),
            (v9[5] & 8) == 0))
      {
LABEL_627:
        v490 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v490;
        if ((v9[5] & 0x40) == 0)
          *((_WORD *)v9 + 1) = 320;
        if (*((_QWORD *)v9 + 12))
          sub_1ACB7895C((uint64_t)a1, (uint64_t)v9, v490, v21, v22, v23, v24, v25);
        if (!*((_DWORD *)v9 + 2) && (DWORD2(v1161[1]) & 0x80000000) == 0)
        {
          if (*(_BYTE *)(*(_QWORD *)v1145 + 103))
            v491 = &byte_1EECAD280;
          else
            v491 = (char *)(*(_QWORD *)(v1145 + 136) + 40 * DWORD2(v1161[1]));
          *v491 = 119;
          BYTE4(v1161[2]) |= 1u;
        }
        if ((v9[4] & 1) != 0)
        {
          v630 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v630 + 1;
          HIDWORD(v1162) = v630;
          v631 = sub_1ACC159CC((uint64_t *)a1, *((int **)v9 + 4), 0, 0);
          v1163 = sub_1ACBA86CC((uint64_t *)v1145, 118, v630, 0, 0, v631, 4294967288, v632);
          v633 = *(_DWORD *)(v1145 + 144);
          v634 = __OFSUB__(v633, 1);
          v635 = v633 - 1;
          if (v635 < 0 == v634)
            *(_WORD *)(*(_QWORD *)(v1145 + 136) + 40 * v635 + 2) = 8;
          v629 = 3;
        }
        else
        {
          v629 = 0;
        }
        BYTE1(v1162) = v629;
        if ((v1129 & 8) == 0 && !v365)
        {
          v636 = *((_DWORD *)v9 + 1) & 0x4000 | (((_BYTE)v1162 != 0) << 8);
          v637 = *((_QWORD *)v9 + 14);
          if (v637)
            sub_1ACC15A80((uint64_t *)a1, (uint64_t)v9, v20, v21, v22, v23, v24, v25);
          v638 = sub_1ACB78E3C((uint64_t)a1, v102, v364, *(int **)&v1161[0], *((int **)v9 + 4), (uint64_t)v9, v636, *((__int16 *)v9 + 1));
          if (!v638)
            goto LABEL_862;
          v642 = v638;
          v643 = *(__int16 *)(v638 + 70);
          if (v643 < *((__int16 *)v9 + 1))
            *((_WORD *)v9 + 1) = v643;
          if ((_BYTE)v1162 && *(_BYTE *)(v638 + 67))
            BYTE1(v1162) = *(_BYTE *)(v638 + 67);
          if (*(_QWORD *)&v1161[0])
          {
            v644 = *(char *)(v638 + 65) & ~(*(char *)(v638 + 65) >> 31);
            DWORD2(v1161[0]) = v644;
            if ((*(_BYTE *)(v638 + 68) & 4) != 0)
            {
              v670 = v638 + 120 * *(unsigned __int8 *)(v638 + 64);
              v671 = *(_QWORD *)(v670 + 792);
              v645 = (_DWORD *)(v670 + 752);
              if (v671)
                v645 = (_DWORD *)(v638 + 48);
            }
            else
            {
              v645 = (_DWORD *)(v638 + 48);
            }
            LODWORD(v1161[2]) = *v645;
            if (**(_DWORD **)&v1161[0] != v644)
              goto LABEL_811;
            *(_QWORD *)&v1161[0] = 0;
          }
          if ((DWORD2(v1161[1]) & 0x80000000) == 0)
            sub_1ACB7A700(v1145, SDWORD2(v1161[1]));
LABEL_811:
          v1139 = v490;
          if (!v637)
          {
            sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, (int **)v1161, (uint64_t)&v1162, v1141, *(unsigned int *)(v642 + 48), *(unsigned int *)(v642 + 52));
            sub_1ACB7D270((uint64_t **)v642, v689, v690, v691, v692, v693, v694, v695);
            v11 = v1155;
            v677 = v1145;
LABEL_1083:
            if (BYTE1(v1162) == 3)
              sub_1ACC0BE9C((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %s", v696, v697, v698, v699, v700, (char)"DISTINCT");
            if (*(_QWORD *)&v1161[0])
              sub_1ACBA58F4((uint64_t)a1, (uint64_t)v9, (uint64_t)v1161, *(unsigned int *)v363, v1141, v698, v699, v700);
            sub_1ACC0A574(v677, v1139);
            v13 = *((_DWORD *)a1 + 12) > 0;
            goto LABEL_25;
          }
          v672 = *((_DWORD *)a1 + 17);
          v673 = v672 - 1;
          v674 = (v672 - 2);
          v675 = (v672 - 3);
          *((_DWORD *)a1 + 17) = v675;
          v676 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v676;
          sub_1ACC16150((uint64_t *)a1, (uint64_t)v9, (uint64_t **)v642, v676, (v672 - 1), v639, v640, v641);
          v677 = v1145;
          sub_1ACBFF554(v1145, 9, 0, v675, v678, v679, v680, v681);
          sub_1ACC0A574(v1145, v673);
          LODWORD(v1161[2]) = 0;
          sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, (int **)v1161, (uint64_t)&v1162, v1141, v674, v675);
          sub_1ACC0A574(v1145, v674);
          sub_1ACC08D28(v1145, 67, v676, v682, v683, v684, v685, v686);
          v687 = v1145;
          v688 = v675;
LABEL_1082:
          sub_1ACC0A574(v687, v688);
          v11 = v1155;
          goto LABEL_1083;
        }
        memset(v1159, 0, sizeof(v1159));
        v1158 = 0u;
        v1153 = v366;
        if (!v365)
        {
          v649 = 0;
          *((_WORD *)v9 + 1) = 0;
          goto LABEL_835;
        }
        v646 = (unsigned int *)*((_QWORD *)v9 + 4);
        v647 = *v646;
        if ((int)v647 >= 1)
        {
          v648 = v646 + 2;
          if ((_DWORD)v647 == 1)
          {
            v701 = *v646;
LABEL_816:
            v704 = (_WORD *)v648 + 11;
            v705 = v701 + 1;
            do
            {
              *v704 = 0;
              v704 += 12;
              --v705;
            }
            while (v705 > 1);
            goto LABEL_818;
          }
          v648 += 6 * (v647 & 0xFFFFFFFE);
          v701 = v647 - (v647 & 0xFFFFFFFE);
          v702 = (_WORD *)v646 + 27;
          v703 = v647 & 0xFFFFFFFE;
          do
          {
            *(v702 - 12) = 0;
            *v702 = 0;
            v702 += 24;
            v703 -= 2;
          }
          while (v703);
          if ((v647 & 0xFFFFFFFE) != v647)
            goto LABEL_816;
        }
LABEL_818:
        v706 = *(unsigned int *)v365;
        if ((int)v706 >= 1)
        {
          v707 = v365 + 1;
          if ((_DWORD)v706 == 1)
          {
            v708 = *(_DWORD *)v365;
          }
          else
          {
            v707 += 3 * (v706 & 0xFFFFFFFE);
            v708 = v706 - (v706 & 0xFFFFFFFE);
            v709 = (_WORD *)v365 + 27;
            v710 = v706 & 0xFFFFFFFE;
            do
            {
              *(v709 - 12) = 0;
              *v709 = 0;
              v709 += 24;
              v710 -= 2;
            }
            while (v710);
            if ((v706 & 0xFFFFFFFE) == v706)
              goto LABEL_826;
          }
          v711 = (_WORD *)v707 + 11;
          v712 = v708 + 1;
          do
          {
            *v711 = 0;
            v711 += 12;
            --v712;
          }
          while (v712 > 1);
        }
LABEL_826:
        if (*((__int16 *)v9 + 1) >= 67)
          *((_WORD *)v9 + 1) = 66;
        v713 = *(_QWORD *)&v1161[0];
        if (*(_QWORD *)&v1161[0] && (v714 = *(unsigned int *)v365, (_DWORD)v714 == **(_DWORD **)&v1161[0]))
        {
          if ((int)v714 >= 1)
          {
            v715 = (char *)(*(_QWORD *)&v1161[0] + 24);
            v716 = v365 + 3;
            do
            {
              v717 = *v715;
              v715 += 24;
              *v716 = v717 & 1;
              v716 += 24;
              --v714;
            }
            while (v714);
          }
          v649 = sub_1ACC0B0F4((unint64_t)v365, v713, 0xFFFFFFFFLL) == 0;
        }
        else
        {
          v649 = 0;
        }
LABEL_835:
        v718 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v718;
        v719 = (unsigned int *)sub_1ACB5733C(v1155, 0x38uLL);
        if (v719)
          sub_1ACC0C1E8((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1ACC17A9C, (uint64_t)v719);
        if (*(_BYTE *)(v1155 + 103))
          goto LABEL_862;
        v719[13] = *((_DWORD *)v9 + 4);
        memset(&v1159[8], 0, 32);
        *(_QWORD *)&v1158 = a1;
        *((_QWORD *)&v1158 + 1) = v102;
        *(_QWORD *)v1159 = v719;
        if (v365)
          v720 = *(_DWORD *)v365;
        else
          LOWORD(v720) = 0;
        *((_WORD *)v719 + 1) = v720;
        *((_QWORD *)v719 + 2) = v365;
        sub_1ACC17AE4((uint64_t)&v1158, (int *)v363);
        sub_1ACC17AE4((uint64_t)&v1158, *(int **)&v1161[0]);
        if (v1153)
        {
          if (v365)
          {
            v1165 = 0uLL;
            *(_QWORD *)&v1164 = a1;
            *((_QWORD *)&v1164 + 1) = sub_1ACC2D15C;
            *(_QWORD *)&v1166 = 0;
            *((_QWORD *)&v1166 + 1) = v9;
            v725 = *((_QWORD *)v9 + 8);
            if (v725)
              sub_1ACC0B714((uint64_t)&v1164, v725);
            v364 = *((_QWORD *)v9 + 6);
          }
          *(_QWORD *)&v1165 = sub_1ACC18638;
          *((_QWORD *)&v1165 + 1) = sub_1ACC1864C;
          *(_QWORD *)&v1164 = 0;
          *((_QWORD *)&v1164 + 1) = sub_1ACBAB64C;
          *(_QWORD *)&v1166 = 0;
          *((_QWORD *)&v1166 + 1) = &v1158;
          sub_1ACC0B714((uint64_t)&v1164, v1153);
        }
        v719[9] = v719[8];
        if (*((_QWORD *)v9 + 7) || *((_QWORD *)v9 + 8) || v719[12] != 1)
          v1132 = 0;
        else
          v1132 = sub_1ACC17B90(v1155, **((_QWORD **)v719 + 5), &v1160);
        sub_1ACC17D10((uint64_t)v719, (uint64_t)&v1158);
        if (*(_BYTE *)(v1155 + 103))
          goto LABEL_862;
        v1120 = v718;
        v1139 = v490;
        if (v365)
        {
          v1098 = v649;
          v1126 = v364;
          if (v719[12] == 1
            && (v726 = (uint64_t *)*((_QWORD *)v719 + 5), (v726[2] & 0x80000000) == 0)
            && (v727 = *v726) != 0
            && (*(_BYTE *)(v727 + 5) & 0x10) == 0
            && (v728 = *(_QWORD *)(v727 + 32)) != 0)
          {
            v729 = *(unsigned __int8 **)(v728 + 8);
            if (v729)
              v730 = (unsigned __int8 *)sub_1ACB8B290(v1155, v729, 0, 0);
            else
              v730 = 0;
            v1029 = (int *)sub_1ACB8B6B8(v1155, v365, 0);
            v1104 = sub_1ACB6E054((uint64_t *)a1, v1029, v730);
            if (v1104)
              v1030 = 1280;
            else
              v1030 = 0;
            v1112 = v1030;
          }
          else
          {
            v1104 = 0;
            v1112 = 0;
          }
          v756 = *((_DWORD *)a1 + 13);
          *((_DWORD *)a1 + 13) = v756 + 1;
          v719[1] = v756;
          v1069 = (_DWORD *)sub_1ACC159CC((uint64_t *)a1, (int *)v365, 0, v719[8]);
          v1060 = sub_1ACBA86CC((uint64_t *)v1145, 119, v719[1], *((unsigned __int16 *)v719 + 1), 0, (uint64_t)v1069, 4294967288, v757);
          v758 = *((_DWORD *)a1 + 14);
          v759 = (v758 + 4);
          v1073 = *((_DWORD *)a1 + 17);
          v760 = (v1073 - 2);
          *((_DWORD *)a1 + 17) = v760;
          v1080 = v758;
          v761 = (v758 + 5);
          v1062 = *(_DWORD *)v365 + v759;
          *((_DWORD *)a1 + 14) = v1062 + *(_DWORD *)v365;
          v1083 = v758 + 2;
          sub_1ACBFF554(v1145, 71, 0, (v758 + 2), v762, v763, v764, v765);
          v1064 = v761;
          sub_1ACB683F4(v1145, 75, 0, v761, (*(_DWORD *)v365 + v759), v766, v767, v768);
          v1092 = v759;
          v1087 = v1073 - 2;
          sub_1ACBFF554(v1145, 10, v759, v760, v769, v770, v771, v772);
          if (v1162 == 2)
            v773 = 128;
          else
            v773 = 64;
          v774 = v1098;
          v775 = sub_1ACB78E3C((uint64_t)a1, v102, v1126, (int *)v365, v1104, (uint64_t)v9, v773 | (v1098 << 9) | v1112, 0);
          if (!v775)
          {
            if (v1104)
              sub_1ACC010B0((_QWORD *)v1155, v1104);
            goto LABEL_862;
          }
          v781 = v775;
          if (a1[12])
            sub_1ACC17E44((uint64_t)v9, (uint64_t)v719, (uint64_t)&v1158);
          v782 = *((_DWORD *)a1 + 14);
          v719[3] = v782 + 1;
          *((_DWORD *)a1 + 14) = v719[8] + v782 + v719[12];
          v1077 = *(unsigned __int8 *)(v781 + 67);
          v1133 = *(char *)(v781 + 65) & ~(*(char *)(v781 + 65) >> 31);
          v1127 = *(_DWORD *)v365;
          v1061 = v781;
          if (*(_DWORD *)v365 == v1133)
          {
            v783 = 0;
            v784 = 0;
            goto LABEL_1026;
          }
          v842 = "GROUP BY";
          if ((_BYTE)v1162 && (*((_DWORD *)v9 + 1) & 1) == 0)
            v842 = "DISTINCT";
          v1058 = sub_1ACC0BE9C((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %s", v776, v777, v778, v779, v780, (char)v842);
          v843 = *(_DWORD *)v365;
          v844 = v719[8];
          v845 = *(unsigned int *)v365;
          if ((int)v844 >= 1)
          {
            v846 = (__int16 *)(*((_QWORD *)v719 + 3) + 22);
            LODWORD(v845) = *(_DWORD *)v365;
            v847 = *(_DWORD *)v365;
            do
            {
              v848 = *v846;
              v846 += 12;
              if (v847 > v848)
              {
                v845 = v845;
              }
              else
              {
                ++v847;
                v845 = (v845 + 1);
              }
              --v844;
            }
            while (v844);
          }
          v849 = sub_1ACC0A1AC((uint64_t)a1, v845);
          sub_1ACC0A21C((uint64_t)a1, v365, v849, 0, 0, v850, v851, v852);
          *(_BYTE *)v719 = 1;
          v856 = v719[8];
          if (v856 >= 1)
          {
            v857 = 0;
            for (m = 0; m < v856; ++m)
            {
              v859 = *((_QWORD *)v719 + 3) + v857;
              if (v843 <= *(__int16 *)(v859 + 22))
              {
                sub_1ACC08D80((uint64_t)a1, *(unsigned __int8 **)(v859 + 8), (v843 + v849));
                ++v843;
                v856 = v719[8];
              }
              v857 += 24;
            }
          }
          *(_BYTE *)v719 = 0;
          if (*((_BYTE *)a1 + 31))
          {
            v860 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v860;
            v861 = *((unsigned int *)a1 + v860 + 56);
          }
          else
          {
            v861 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v861;
          }
          if ((*(_BYTE *)(*(_QWORD *)v1145 + 49) & 4) != 0)
          {
            v892 = *(_DWORD *)(v1145 + 144);
            v893 = *(unsigned int *)(v1145 + 392);
            v894 = 56 * v893;
            v895 = v893 + 1;
            do
            {
              if (--v895 < 1)
                goto LABEL_1006;
              v896 = v894 - 56;
              v897 = *(_QWORD *)(v1145 + 400);
              v898 = *(_DWORD *)(v897 + v894 - 56);
              v894 -= 56;
            }
            while (v898 != v1058);
            if (v892 >= 1)
              *(_DWORD *)(v897 + v896 + 32) = v892;
          }
LABEL_1006:
          sub_1ACB683F4(v1145, 97, v849, v845, v861, v853, v854, v855);
          sub_1ACBFF554(v1145, 139, v719[1], v861, v899, v900, v901, v902);
          sub_1ACC0BFD4(v1145, v1058, *(_DWORD *)(v1145 + 144) - 2, -1);
          if ((_DWORD)v861)
          {
            v910 = *((unsigned __int8 *)a1 + 31);
            if (v910 <= 7)
            {
              *((_BYTE *)a1 + 31) = v910 + 1;
              *((_DWORD *)a1 + v910 + 56) = v861;
            }
          }
          if ((_DWORD)v845 == 1)
          {
            if ((_DWORD)v849)
            {
              v911 = *((unsigned __int8 *)a1 + 31);
              if (v911 <= 7)
              {
                *((_BYTE *)a1 + 31) = v911 + 1;
                v912 = (_DWORD *)a1 + v911 + 56;
LABEL_1015:
                *v912 = v849;
              }
            }
          }
          else if (*((_DWORD *)a1 + 10) < (int)v845)
          {
            *((_DWORD *)a1 + 10) = v845;
            v912 = (_DWORD *)a1 + 11;
            goto LABEL_1015;
          }
          sub_1ACB7D270((uint64_t **)v1061, v903, v904, v905, v906, v907, v908, v909);
          v783 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v783 + 1;
          v719[2] = v783;
          if (*((_BYTE *)a1 + 31))
          {
            v916 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v916;
            v784 = *((unsigned int *)a1 + v916 + 56);
          }
          else
          {
            v784 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v784;
          }
          if ((*(_BYTE *)(*(_QWORD *)v1145 + 49) & 4) != 0)
          {
            v917 = *(_DWORD *)(v1145 + 144);
            v918 = *(unsigned int *)(v1145 + 392);
            v919 = 56 * v918;
            v920 = v918 + 1;
            do
            {
              if (--v920 < 1)
                goto LABEL_1025;
              v921 = v919 - 56;
              v922 = *(_QWORD *)(v1145 + 400);
              v923 = *(_DWORD *)(v922 + v919 - 56);
              v919 -= 56;
            }
            while (v923 != v1058);
            if (v917 >= 1)
              *(_DWORD *)(v922 + v921 + 28) = v917;
          }
LABEL_1025:
          sub_1ACB683F4(v1145, 121, v783, v784, v845, v913, v914, v915);
          sub_1ACBFF554(v1145, 34, v719[1], v1120, v924, v925, v926, v927);
          *((_BYTE *)v719 + 1) = 1;
          sub_1ACC0BFD4(v1145, v1058, -1, v783);
          sub_1ACC0BFD4(v1145, v1058, -1, v719[1]);
          v774 = v1098;
LABEL_1026:
          if (a1[12])
            sub_1ACC17F34((uint64_t)v719);
          if (v774 && (*(_BYTE *)(v1155 + 96) & 4) == 0)
          {
            if (v1127 == v1133 && (*(_BYTE *)(v1061 + 68) & 8) == 0)
            {
              v1059 = *(_DWORD *)(v1145 + 144);
LABEL_1036:
              v1099 = v1080 + 3;
              v1074 = v1073 - 1;
              v928 = (v1062 + 1);
              v929 = *(unsigned int *)v365;
              if ((int)v929 >= 1)
              {
                v930 = 0;
                v931 = 1;
                do
                {
                  if (v1127 == v1133)
                  {
                    *(_BYTE *)v719 = 1;
                    sub_1ACC08D80((uint64_t)a1, (unsigned __int8 *)v365[v931], (v928 + v930));
                  }
                  else
                  {
                    sub_1ACB683F4(v1145, 94, v783, v930, (v928 + v930), v778, v779, v780);
                  }
                  ++v930;
                  v929 = *(int *)v365;
                  v931 += 3;
                }
                while (v930 < v929);
              }
              v932 = (v1080 + 1);
              if (v1069)
                ++*v1069;
              sub_1ACBA86CC((uint64_t *)v1145, 90, v1064, v928, v929, (uint64_t)v1069, 4294967288, v780);
              v933 = *(_DWORD *)(v1145 + 144);
              sub_1ACB683F4(v1145, 14, (v933 + 1), 0, (v933 + 1), v934, v935, v936);
              sub_1ACC17FBC((uint64_t)a1, v928, v1064, *(unsigned int *)v365, v937, v938, v939, v940);
              sub_1ACBFF554(v1145, 10, v1099, v1074, v941, v942, v943, v944);
              sub_1ACBFF554(v1145, 59, v1083, v1120, v945, v946, v947, v948);
              sub_1ACBFF554(v1145, 10, v1092, v1087, v949, v950, v951, v952);
              if (*(_BYTE *)(*(_QWORD *)v1145 + 103))
                v957 = &byte_1EECAD280;
              else
                v957 = (char *)(*(_QWORD *)(v1145 + 136) + 40 * v933);
              *((_DWORD *)v957 + 2) = *(_DWORD *)(v1145 + 144);
              sub_1ACBABAA8((uint64_t)a1, v932, (uint64_t)v719, v1077, v953, v954, v955, v956);
              sub_1ACBFF554(v1145, 71, 1, v932, v958, v959, v960, v961);
              if (v1127 == v1133)
              {
                sub_1ACB7D270((uint64_t **)v1061, v962, v963, v964, v965, v966, v967, v968);
                sub_1ACB7A700(v1145, v1060);
              }
              else
              {
                sub_1ACBFF554(v1145, 37, v719[1], v1059, v965, v966, v967, v968);
              }
              if (v1104)
                sub_1ACC010B0((_QWORD *)v1155, v1104);
              sub_1ACBFF554(v1145, 10, v1099, v1074, v969, v970, v971, v972);
              sub_1ACC08E48(v1145, v1120, v973, v974, v975, v976, v977, v978);
              v979 = *(unsigned int *)(v1145 + 144);
              sub_1ACBFF554(v1145, 71, 1, v1083, v980, v981, v982, v983);
              sub_1ACC08D28(v1145, 67, v1099, v984, v985, v986, v987, v988);
              sub_1ACC0A574(v1145, v1074);
              v989 = *(_DWORD *)(v1145 + 144);
              sub_1ACBFF554(v1145, 59, v932, (v989 + 2), v990, v991, v992, v993);
              sub_1ACC08D28(v1145, 67, v1099, v994, v995, v996, v997, v998);
              sub_1ACC18010(a1, (uint64_t)v719, v999, v1000, v1001, v1002, v1003, v1004);
              sub_1ACB9F1D0(a1, v1153);
              sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, (int **)v1161, (uint64_t)&v1162, v1141, (v989 + 1), v979);
              sub_1ACC08D28(v1145, 67, v1099, v1005, v1006, v1007, v1008, v1009);
              sub_1ACC0A574(v1145, v1087);
              sub_1ACBAB8F4((uint64_t)a1, (uint64_t)v719, v1010, v1011, v1012, v1013, v1014, v1015);
              v677 = v1145;
              sub_1ACBFF554(v1145, 71, 0, v932, v1016, v1017, v1018, v1019);
              sub_1ACC08D28(v1145, 67, v1092, v1020, v1021, v1022, v1023, v1024);
              if (v1112 && v1077)
                sub_1ACC18128(a1, v1077, *(_DWORD *)(*((_QWORD *)v719 + 5) + 16), *(_DWORD *)(*((_QWORD *)v719 + 5) + 20));
              goto LABEL_1081;
            }
            *(_QWORD *)&v1161[0] = 0;
            sub_1ACB7A700(v1145, SDWORD2(v1161[1]));
          }
          v1059 = *(_DWORD *)(v1145 + 144);
          if (v1127 != v1133)
            sub_1ACB683F4(v1145, 133, v719[1], v784, v783, v778, v779, v780);
          goto LABEL_1036;
        }
        v830 = sub_1ACC18230(v9, (uint64_t)v719);
        if (v830)
        {
          v837 = v830;
          v838 = *(_QWORD *)(v830 + 96);
          if (v838)
          {
            v839 = (uint64_t *)((*a1)[4] + 24);
            LODWORD(v840) = -1;
            do
            {
              v841 = *v839;
              v839 += 4;
              v840 = (v840 + 1);
            }
            while (v841 != v838);
          }
          else
          {
            v840 = 4294934528;
          }
          v865 = *((unsigned int *)a1 + 13);
          *((_DWORD *)a1 + 13) = v865 + 1;
          v866 = *(unsigned int *)(v830 + 40);
          sub_1ACB7A4DC((uint64_t)a1, v840);
          sub_1ACC08EA0((uint64_t)a1, v840, *(_DWORD *)(v837 + 40), 0, *(_QWORD *)v837);
          if ((*(_BYTE *)(v837 + 48) & 0x80) != 0)
          {
            for (n = *(_QWORD *)(v837 + 16); n; n = *(_QWORD *)(n + 40))
            {
              if ((*(_WORD *)(n + 99) & 3) == 2)
                break;
            }
          }
          else
          {
            n = 0;
          }
          if ((*(_WORD *)(*((_QWORD *)v9 + 5) + 69) & 1) == 0)
          {
            for (ii = *(_QWORD *)(v837 + 16); ii; ii = *(_QWORD *)(ii + 40))
            {
              if ((*(_WORD *)(ii + 99) & 4) == 0)
              {
                v879 = *(__int16 *)(ii + 92);
                if (v879 < *(__int16 *)(v837 + 60) && !*(_QWORD *)(ii + 72) && (!n || v879 < *(__int16 *)(n + 92)))
                  n = ii;
              }
            }
          }
          if (n)
          {
            v1134 = *(_DWORD *)(n + 88);
            v871 = sub_1ACC09130(a1, n);
            v872 = v1145;
            sub_1ACBCB640(v1145, 112, v865, v1134, v840, 1, v873, v874);
            if (v871)
              sub_1ACB788AC((uint64_t *)v1145, -1, v871, 0xFFFFFFF8);
          }
          else
          {
            v872 = v1145;
            sub_1ACBCB640(v1145, 112, v865, v866, v840, 1, v867, v868);
          }
          v880 = *((_DWORD *)a1 + 14);
          v719[3] = v880 + 1;
          v881 = v719[8];
          *((_DWORD *)a1 + 14) = v881 + v880 + v719[12];
          sub_1ACBFF554(v872, 98, v865, v881 + v880 + 1, v875, v876, v877, v878);
          sub_1ACC08D28(v872, 122, v865, v882, v883, v884, v885, v886);
          sub_1ACC182CC((uint64_t)a1, (_QWORD *)v837, n, v887, v888, v889, v890, v891);
LABEL_1080:
          *(_QWORD *)&v1161[0] = 0;
          sub_1ACB9F1D0(a1, v1153);
          sub_1ACB7A74C((uint64_t)a1, (uint64_t)v9, 0xFFFFFFFFLL, 0, 0, v1141, v1120, v1120);
          v677 = v1145;
LABEL_1081:
          v687 = v677;
          v688 = v1120;
          goto LABEL_1082;
        }
        v862 = v719[12];
        if (v719[9])
        {
          if ((int)v862 < 1)
          {
            LODWORD(v863) = 0;
          }
          else
          {
            v863 = 0;
            v864 = *((_QWORD *)v719 + 5) + 8;
            while ((*(_BYTE *)(*(_QWORD *)(v864 - 8) + 7) & 1) != 0
                 || (*(_BYTE *)(*(_QWORD *)v864 + 4) & 0x20) == 0)
            {
              ++v863;
              v864 += 24;
              if (v862 == v863)
                goto LABEL_1062;
            }
          }
          if ((_DWORD)v863 == (_DWORD)v862)
          {
LABEL_1062:
            v1026 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v1026;
            sub_1ACBFF554(v1145, 71, 0, v1026, v833, v834, v835, v836);
            v1027 = 0;
            v1028 = 0;
            LODWORD(v862) = v719[12];
LABEL_1071:
            v1031 = *((_DWORD *)a1 + 14);
            v719[3] = v1031 + 1;
            *((_DWORD *)a1 + 14) = v1031 + v862 + v719[8];
            sub_1ACBAB8F4((uint64_t)a1, (uint64_t)v719, v831, v832, v833, v834, v835, v836);
            v1032 = sub_1ACB78E3C((uint64_t)a1, v102, v364, v1160, v1027, (uint64_t)v9, v1028 | v1132, 0);
            if (!v1032)
              goto LABEL_862;
            v1037 = (uint64_t **)v1032;
            v1038 = *(unsigned __int8 *)(v1032 + 67);
            sub_1ACBABAA8((uint64_t)a1, v1026, (uint64_t)v719, v1038, v1033, v1034, v1035, v1036);
            if (v1038)
            {
              v1046 = *((_QWORD *)v719 + 5);
              if (v1046)
                sub_1ACC18128(a1, v1038, *(_DWORD *)(v1046 + 16), *(_DWORD *)(v1046 + 20));
            }
            if ((_DWORD)v1026)
              sub_1ACBFF554(v1145, 71, 1, v1026, v1042, v1043, v1044, v1045);
            if (v1132)
              sub_1ACC18354(v1145, (uint64_t)v1037, v1040, v1041, v1042, v1043, v1044, v1045);
            sub_1ACB7D270(v1037, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
            sub_1ACC18010(a1, (uint64_t)v719, v1047, v1048, v1049, v1050, v1051, v1052);
            goto LABEL_1080;
          }
        }
        else if ((_DWORD)v862 == 1)
        {
          v1025 = (_DWORD *)*((_QWORD *)v719 + 5);
          if ((v1025[4] & 0x80000000) != 0)
          {
            v1026 = 0;
            v1027 = 0;
            v1028 = 0;
          }
          else
          {
            v1026 = 0;
            v1027 = *(int **)(*(_QWORD *)v1025 + 32);
            if (v1027)
              v1028 = 1280;
            else
              v1028 = 0;
          }
          LODWORD(v862) = 1;
          goto LABEL_1071;
        }
        v1026 = 0;
        v1027 = 0;
        v1028 = 0;
        goto LABEL_1071;
      }
      v484 = *(unsigned int *)v363;
      v485 = v484;
      if ((int)v484 > 1)
      {
        v486 = v484 - 1;
        if ((*(_WORD *)((_BYTE *)&v363[3 * v484] + 1) & 0x40) != 0)
        {
LABEL_623:
          v489 = (_WORD *)((char *)v363 + 25);
          do
          {
            if ((*v489 & 0x40) == 0)
              **(_BYTE **)((char *)v489 - 17) = 121;
            v489 += 12;
            --v484;
          }
          while (v484);
          goto LABEL_627;
        }
        do
        {
          v487 = (unsigned __int8 *)v363[3 * v486 + 1];
          if (v487)
            sub_1ACBF8348((_QWORD *)v1155, v487);
          v488 = (_QWORD *)v363[3 * v486 + 2];
          if (v488)
            sub_1ACBE0F9C((_QWORD *)v1155, v488);
          v485 = *(_DWORD *)v363 - 1;
          *(_DWORD *)v363 = v485;
          if (v484 <= 2)
            break;
          v486 = (v484-- - 2);
        }
        while ((*(_WORD *)((_BYTE *)&v363[3 * v486 + 3] + 1) & 0x40) == 0);
      }
      if (v485 < 1)
        goto LABEL_627;
      v484 = v485;
      goto LABEL_623;
    }
    v164 = v111;
    v165 = &v102[26 * v111];
    v168 = *((_BYTE *)v165 + 68);
    v167 = (char *)(v165 + 17);
    v166 = v168;
    v169 = *(_QWORD *)(v167 - 20);
    v170 = *(_QWORD *)(v167 - 28);
    if ((v168 & 0x48) != 0)
    {
      v171 = &v102[26 * v111];
      v173 = v171[18];
      v172 = (unsigned int *)(v171 + 18);
      v174 = sub_1ACC0BA94(*((_QWORD *)v9 + 6), v173, v166 & 0x40);
      v104 = 0uLL;
      if (v174)
      {
        if ((*(_BYTE *)(v1155 + 97) & 0x20) == 0)
        {
          v175 = *v167;
          if ((*v167 & 8) != 0)
          {
            if ((*v167 & 0x10) != 0)
              v176 = -9;
            else
              v176 = -41;
            v175 &= v176;
            *v167 = v175;
          }
          if ((v175 & 0x40) != 0)
          {
            v177 = *v102;
            if (v111 + 1 < (int)v177)
            {
              v178 = &v102[26 * v111 + 43];
              v179 = ~v111 + v177;
              do
              {
                if ((*(_BYTE *)v178 & 0x10) != 0)
                {
                  if ((*(_BYTE *)v178 & 8) != 0)
                    v180 = -17;
                  else
                    v180 = -49;
                  *(_BYTE *)v178 &= v180;
                }
                v178 += 26;
                --v179;
              }
              while (v179);
            }
            v181 = v177 + 1;
            v182 = &v102[26 * (int)v177 - 9];
            do
            {
              if (--v181 <= v111)
                break;
              v183 = *(_BYTE *)v182;
              *(_BYTE *)v182 &= ~0x40u;
              v182 -= 26;
            }
            while ((v183 & 0x10) == 0);
          }
          sub_1ACC151C4(*((_QWORD *)v9 + 6), *v172, v102[17] & 0x40);
          v104 = 0uLL;
        }
      }
    }
    if (!v169)
      goto LABEL_206;
    v184 = *(__int16 *)(v170 + 54);
    if (**(_DWORD **)(v169 + 32) != v184)
    {
      sub_1ACBCB308((uint64_t)a1, "expected %d columns for '%s' but got %d", v20, v21, v22, v23, v24, v25, v184);
      goto LABEL_862;
    }
    if ((*(_WORD *)((_BYTE *)&v102[26 * v111 + 17] + 1) & 0x100) != 0
      && !*(_BYTE *)(*(_QWORD *)&v102[26 * v111 + 26] + 18))
    {
      goto LABEL_206;
    }
    v185 = *(_DWORD *)(v169 + 4);
    if ((v185 & 8) != 0)
      goto LABEL_206;
    v20 = *(_QWORD *)(v169 + 72);
    if (!v20)
      goto LABEL_244;
    if ((*(_QWORD *)v1150 || *v102 >= 2)
      && (v185 & 0x8000000) == 0
      && !*(_QWORD *)(v169 + 96)
      && (v9[7] & 8) == 0
      && (*(_BYTE *)(v1155 + 98) & 4) == 0)
    {
      break;
    }
    if (v111 || (v9[6] & 4) == 0 || *v102 != 1 && (v102[43] & 0x22) == 0)
      goto LABEL_244;
    v111 = 0;
LABEL_206:
    ++v111;
    v105 = *((_QWORD *)v9 + 10);
    if (v105)
    {
      v8 = v1141;
      goto LABEL_150;
    }
  }
  sub_1ACC0C1E8((uint64_t *)a1, (void (*)(uint64_t, uint64_t))sub_1ACB7E8A4, v20);
  v104 = 0uLL;
  *(_QWORD *)(v169 + 72) = 0;
LABEL_244:
  v186 = (uint64_t)*a1;
  v187 = *((_DWORD *)*a1 + 24);
  if ((v187 & 1) != 0)
    goto LABEL_247;
  v188 = a1[46];
  *(_OWORD *)v1159 = v104;
  *(_OWORD *)&v1159[16] = v104;
  v1158 = v104;
  if (*((_QWORD *)v9 + 14)
    || (v189 = (int *)*((_QWORD *)v9 + 5),
        v190 = &v189[26 * v111],
        v193 = *((_QWORD *)v190 + 6),
        v191 = v190 + 12,
        v192 = v193,
        *(_QWORD *)(v193 + 112)))
  {
LABEL_247:
    if (*(_BYTE *)(v1155 + 103))
      goto LABEL_862;
    v102 = (int *)*((_QWORD *)v9 + 5);
    if (*v1141 >= 9u)
      *(_QWORD *)&v1161[0] = *(_QWORD *)v1150;
    goto LABEL_206;
  }
  v194 = *(_QWORD *)(v192 + 40);
  v195 = *(_QWORD *)(v192 + 96);
  if (v195)
  {
    if (*((_QWORD *)v9 + 12))
      goto LABEL_247;
    if (*(_QWORD *)(v195 + 24))
      goto LABEL_247;
    v196 = *((_DWORD *)v9 + 1);
    if ((v196 & 0x100) != 0)
      goto LABEL_247;
  }
  else
  {
    v196 = *((_DWORD *)v9 + 1);
  }
  if (!*(_DWORD *)v194)
    goto LABEL_247;
  v197 = *(_DWORD *)(v192 + 4);
  if ((v197 & 1) != 0 || v195 && ((v1129 & 8) != 0 || *v189 > 1))
    goto LABEL_247;
  v198 = *(unsigned int **)v1150;
  if (*(_QWORD *)v1150)
  {
    if (*(_QWORD *)(v192 + 72))
      goto LABEL_247;
  }
  if ((v1129 & 8) != 0 && *(_QWORD *)(v192 + 72))
    goto LABEL_247;
  if (v195)
  {
    if (*((_QWORD *)v9 + 6) || *(_DWORD *)(v192 + 4) & 0x2000 | v196 & 1)
      goto LABEL_247;
  }
  else if ((v197 & 0x2000) != 0)
  {
    goto LABEL_247;
  }
  v1065 = v9;
  v1070 = v191;
  v1075 = v191[6];
  v1101 = (int *)*((_QWORD *)v9 + 5);
  v199 = &v189[26 * v111];
  v1079 = (char *)(v199 + 17);
  v1082 = v199[17] & 0x60;
  if ((v199[17] & 0x60) != 0)
  {
    v104 = 0uLL;
    if (*(int *)v194 > 1)
      goto LABEL_247;
    v200 = *(_BYTE *)(*(_QWORD *)(v194 + 40) + 63) != 1 && (v199[17] & 0x10 | v196 & 1) == 0;
    if (!v200)
      goto LABEL_247;
    v1067 = 1;
  }
  else
  {
    v1067 = 0;
  }
  v104 = 0uLL;
  if (v111 >= 1 && (*(_BYTE *)(v194 + 68) & 0x40) != 0)
    goto LABEL_247;
  if (!*(_QWORD *)(v192 + 80))
    goto LABEL_310;
  if ((v1129 & 8) != 0 || *(_QWORD *)(v192 + 72) || v1082 | v196 & 1)
    goto LABEL_247;
  v201 = (unsigned __int8 *)v192;
  do
  {
    v104 = 0uLL;
    v9 = v1065;
    if ((v201[4] & 9) != 0)
      goto LABEL_247;
    v202 = *((_QWORD *)v201 + 10);
    if (v202)
    {
      if (*v201 != 135)
        goto LABEL_247;
    }
    v203 = *((_QWORD *)v201 + 5);
    if (*(int *)v203 < 1 || *((_QWORD *)v201 + 14) || v111 >= 1 && (*(_BYTE *)(v203 + 68) & 0x40) != 0)
      goto LABEL_247;
    v201 = (unsigned __int8 *)*((_QWORD *)v201 + 10);
  }
  while (v202);
  if (v198)
  {
    v204 = *v198;
    if ((int)v204 >= 1)
    {
      v205 = (unsigned __int16 *)(v198 + 7);
      do
      {
        v206 = *v205;
        v205 += 12;
        v104 = 0uLL;
        v9 = v1065;
        if (!v206)
          goto LABEL_247;
        --v204;
      }
      while (v204);
    }
  }
  v9 = v1065;
  if ((v196 & 0x2000) != 0)
    goto LABEL_247;
  v207 = sub_1ACC189D8(v192);
  v104 = 0uLL;
  if (v207)
    goto LABEL_247;
  if (*v1101 < 2)
    goto LABEL_310;
  v9 = v1065;
  if ((v187 & 0x800000) != 0 || *((int *)a1 + 35) > 500)
    goto LABEL_247;
  v1085 = sub_1ACB5733C(v186, 4 * *((int *)a1 + 13) + 4);
  if (v1085)
    *(_DWORD *)v1085 = *((_DWORD *)a1 + 13);
  else
LABEL_310:
    v1085 = 0;
  v208 = &v1101[26 * v111];
  v209 = (_QWORD **)(v208 + 6);
  a1[46] = (_QWORD *)*((_QWORD *)v208 + 3);
  sub_1ACC0D950((uint64_t)a1, 21, 0, 0, 0);
  a1[46] = v188;
  v1063 = *(_QWORD **)v1070;
  v212 = (_QWORD *)*((_QWORD *)v208 + 2);
  v211 = v208 + 4;
  v210 = v212;
  if (v212)
    sub_1ACBE0F9C((_QWORD *)v186, v210);
  if (*v209)
    sub_1ACBE0F9C((_QWORD *)v186, *v209);
  v19 = *(_QWORD **)&v1101[26 * v111 + 8];
  if (v19)
    sub_1ACBE0F9C((_QWORD *)v186, v19);
  *(_QWORD *)v1070 = 0;
  v211[1] = 0;
  v211[2] = 0;
  *v211 = 0;
  v213 = *(_QWORD *)(v192 + 80);
  v214 = (uint64_t)v1065;
  if (v213)
  {
    v1089 = &v1101[26 * v111 + 10];
    v1094 = *((_QWORD *)v1065 + 10);
    do
    {
      v216 = *(_QWORD *)(v214 + 96);
      v1106 = *(_QWORD *)v1089;
      v1114 = *(_QWORD *)(v214 + 72);
      *(_QWORD *)v1089 = 0;
      *(_QWORD *)(v214 + 96) = 0;
      *(_QWORD *)v1150 = 0;
      *((_QWORD *)v1150 + 1) = 0;
      v217 = sub_1ACB8DFB8(v186, v214, 0);
      *(_QWORD *)(v214 + 96) = v216;
      *(_QWORD *)(v214 + 72) = v1114;
      *(_BYTE *)v214 = -121;
      *(_QWORD *)v1089 = v1106;
      if (v217)
      {
        v215 = v217;
        v218 = *((_DWORD *)a1 + 35) + 1;
        *((_DWORD *)a1 + 35) = v218;
        *(_DWORD *)(v217 + 16) = v218;
        if (v1085 && !*(_BYTE *)(v186 + 103))
          sub_1ACC18A74((uint64_t)a1, v217, v111, (uint64_t)v1085);
        *(_QWORD *)(v215 + 80) = v1094;
        if (v1094)
          *(_QWORD *)(v1094 + 88) = v215;
        v214 = (uint64_t)v1065;
        *(_QWORD *)(v215 + 88) = v1065;
        v1094 = v215;
      }
      else
      {
        v215 = v1094;
      }
      *(_QWORD *)(v214 + 80) = v215;
      v213 = *(_QWORD *)(v213 + 80);
    }
    while (v213);
  }
  if (v1085)
    sub_1ACBE0F9C((_QWORD *)v186, v1085);
  if (*(_BYTE *)(v186 + 103))
  {
    *(_QWORD *)v1070 = v1063;
    goto LABEL_384;
  }
  v219 = &v1101[26 * v111];
  v222 = *((_QWORD *)v219 + 5);
  v221 = v219 + 10;
  v220 = v222;
  if (v222)
  {
    if (*(_DWORD *)(v220 + 44) == 1)
    {
      if (a1[21])
        v223 = a1[21];
      else
        v223 = (uint64_t *)a1;
      sub_1ACC0C1E8(v223, (void (*)(uint64_t, uint64_t))sub_1ACB68994, v220);
    }
    else
    {
      --*(_DWORD *)(v220 + 44);
    }
    *v221 = 0;
  }
  v1071 = v111 + 1;
  v1086 = 26 * v111;
  v224 = 0xFFFFFFFFLL;
  v225 = v1065;
  v1107 = v1063;
  while (2)
  {
    v226 = v1101[26 * v164 + 17];
    v227 = (unsigned int *)v1107[5];
    v228 = *v227;
    v1095 = v225;
    v1101 = (int *)*((_QWORD *)v225 + 5);
    if (v225 == v1065)
      v1090 = *v1079;
    else
      v1090 = 0;
    v1115 = v226 & 0x40;
    if ((int)v228 < 2)
    {
      if ((_DWORD)v228 == 1)
        goto LABEL_349;
      v240 = 0;
    }
    else
    {
      v1101 = sub_1ACB6E648((uint64_t *)a1, v1101, (v228 - 1), v1071, v22, v23, v24, v25);
      if (!v1101)
        break;
      *((_QWORD *)v225 + 5) = v1101;
LABEL_349:
      v229 = 0;
      v230 = &v1101[v1086];
      v231 = v228;
      v232 = 0uLL;
      do
      {
        v239 = &v230[v229];
        if ((*(_WORD *)((_BYTE *)&v230[v229 + 17] + 1) & 0x400) != 0)
        {
          sub_1ACBF8560((_QWORD *)v186, *((_QWORD **)v239 + 10));
          v232 = 0uLL;
        }
        v233 = &v227[v229];
        v234 = *(_OWORD *)&v227[v229 + 14];
        v235 = *(_OWORD *)&v227[v229 + 18];
        v236 = *(_OWORD *)&v227[v229 + 22];
        *((_QWORD *)v239 + 13) = *(_QWORD *)&v227[v229 + 26];
        *(_OWORD *)(v239 + 18) = v235;
        *(_OWORD *)(v239 + 22) = v236;
        *(_OWORD *)(v239 + 14) = v234;
        v237 = *(_OWORD *)&v227[v229 + 2];
        v238 = *(_OWORD *)&v227[v229 + 10];
        *(_OWORD *)(v239 + 6) = *(_OWORD *)&v227[v229 + 6];
        *(_OWORD *)(v239 + 10) = v238;
        *(_OWORD *)(v239 + 2) = v237;
        *((_BYTE *)v239 + 68) |= v1115;
        v224 = v227[v229 + 18];
        *(_OWORD *)(v233 + 18) = v232;
        *(_OWORD *)(v233 + 2) = v232;
        *(_OWORD *)(v233 + 6) = v232;
        *(_OWORD *)(v233 + 10) = v232;
        *(_OWORD *)(v233 + 14) = v232;
        *(_OWORD *)(v233 + 22) = v232;
        *((_QWORD *)v233 + 13) = 0;
        v229 += 26;
        --v231;
      }
      while (v231);
      v240 = 1;
    }
    LOBYTE(v1101[26 * v164 + 17]) = v1090 | v1115 | v1101[26 * v164 + 17] & 0x40;
    v241 = (unsigned int *)v1107[9];
    if (v241 && (v1095[6] & 0x40) == 0)
    {
      v242 = *v241;
      if ((int)v242 >= 1)
      {
        if ((_DWORD)v242 == 1)
        {
          v243 = 0;
          goto LABEL_363;
        }
        v243 = v242 & 0xFFFFFFFE;
        v244 = v241 + 13;
        v245 = v243;
        do
        {
          *(v244 - 12) = 0;
          *v244 = 0;
          v244 += 24;
          v245 -= 2;
        }
        while (v245);
        if (v243 != v242)
        {
LABEL_363:
          v246 = v242 - v243;
          v247 = &v241[6 * v243 + 7];
          do
          {
            *(_WORD *)v247 = 0;
            v247 += 6;
            --v246;
          }
          while (v246);
        }
      }
      *((_QWORD *)v1095 + 9) = v241;
      v1107[9] = 0;
    }
    v248 = v1107[6];
    v1107[6] = 0;
    if (v1082)
      sub_1ACC12384(v248, v224, 1);
    if (v248)
    {
      v249 = *((_QWORD *)v1095 + 6);
      if (v249)
        v248 = sub_1ACC0241C((uint64_t *)a1, 44, v248, v249);
      *((_QWORD *)v1095 + 6) = v248;
    }
    if (!*(_BYTE *)(v186 + 103))
    {
      *(_QWORD *)&v1166 = 0;
      *(_QWORD *)&v1164 = a1;
      *((_QWORD *)&v1164 + 1) = __PAIR64__(v224, v1075);
      v1165 = v1067;
      v250 = v1107;
      *((_QWORD *)&v1165 + 1) = v1107[4];
      do
      {
        v251 = v250;
        v250 = (_QWORD *)v250[10];
      }
      while (v250);
      *(_QWORD *)&v1166 = v251[4];
      sub_1ACC18AD8((uint64_t)&v1164, v1095, 0);
    }
    *((_DWORD *)v1095 + 1) |= *((_DWORD *)v1107 + 1) & 0x100;
    v252 = v1107[12];
    if (v252)
    {
      *((_QWORD *)v1095 + 12) = v252;
      v1107[12] = 0;
    }
    if (v240)
    {
      v253 = (uint64_t)&v1101[v1086 + 2];
      do
      {
        sub_1ACC18C84(v1095, v253);
        v253 += 104;
        --v228;
      }
      while (v228);
    }
    v225 = (unsigned __int8 *)*((_QWORD *)v1095 + 10);
    v1107 = (_QWORD *)v1107[10];
    if (v225)
      continue;
    break;
  }
  memset(&v1159[8], 0, 24);
  *(_QWORD *)&v1158 = a1;
  *((_QWORD *)&v1158 + 1) = sub_1ACC1865C;
  *(_QWORD *)v1159 = sub_1ACC1243C;
  sub_1ACB73B30(&v1158, v1063);
  if (v1063)
    sub_1ACB7E704((_QWORD *)v186, (uint64_t)v1063, 1);
LABEL_384:
  if (!*((_DWORD *)a1 + 12))
  {
    v111 = -1;
    v104 = 0uLL;
    v9 = v1065;
    goto LABEL_247;
  }
LABEL_862:
  v13 = 1;
  v11 = v1155;
LABEL_25:
  if (v1160)
    sub_1ACC010B0((_QWORD *)v11, v1160);
LABEL_27:
  v26 = *((_DWORD *)a1 + 78);
  if (v26)
  {
    v27 = a1[2];
    if (*(_BYTE *)(*v27 + 103))
      v28 = &byte_1EECAD280;
    else
      v28 = (char *)(v27[17] + 40 * v26);
    v26 = *((_DWORD *)v28 + 2);
  }
  *((_DWORD *)a1 + 78) = v26;
  return v13;
}

uint64_t sub_1ACB73B30(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  int *v19;
  int v20;
  _DWORD *v21;
  BOOL v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  void (*v27)(_QWORD *, _QWORD *);
  uint64_t result;

  if (!a2)
    return 0;
  if (!a1[2])
    return 0;
  v3 = a2;
  while (1)
  {
    v4 = ((uint64_t (*)(_QWORD *, _QWORD *))a1[2])(a1, v3);
    if (v4)
      return v4 & 2;
    v5 = (_DWORD *)v3[4];
    if (v5 && (int)*v5 >= 1)
    {
      v6 = (uint64_t *)(v5 + 2);
      v7 = *v5 + 1;
      while (!*v6 || !sub_1ACC0B714((uint64_t)a1, *v6))
      {
        v6 += 3;
        if (--v7 <= 1)
          goto LABEL_12;
      }
      return 2;
    }
LABEL_12:
    v8 = v3[6];
    if (v8 && sub_1ACC0B714((uint64_t)a1, v8))
      return 2;
    v9 = (_DWORD *)v3[7];
    if (v9 && (int)*v9 >= 1)
    {
      v10 = (uint64_t *)(v9 + 2);
      v11 = *v9 + 1;
      while (!*v10 || !sub_1ACC0B714((uint64_t)a1, *v10))
      {
        v10 += 3;
        if (--v11 <= 1)
          goto LABEL_21;
      }
      return 2;
    }
LABEL_21:
    v12 = v3[8];
    if (v12 && sub_1ACC0B714((uint64_t)a1, v12))
      return 2;
    v13 = (_DWORD *)v3[9];
    if (v13 && (int)*v13 >= 1)
    {
      v14 = (uint64_t *)(v13 + 2);
      v15 = *v13 + 1;
      while (!*v14 || !sub_1ACC0B714((uint64_t)a1, *v14))
      {
        v14 += 3;
        if (--v15 <= 1)
          goto LABEL_30;
      }
      return 2;
    }
LABEL_30:
    v16 = v3[12];
    if (v16 && sub_1ACC0B714((uint64_t)a1, v16))
      return 2;
    v17 = (_QWORD *)v3[15];
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))a1[3];
      if ((char *)v18 != (char *)nullsub_8)
      {
        if (*a1)
        {
          if (v18 != sub_1ACC0B9B4 && *(unsigned __int8 *)(*a1 + 302) <= 1u)
            goto LABEL_40;
        }
        else if (v18 != sub_1ACC0B9B4)
        {
          goto LABEL_40;
        }
      }
      if (sub_1ACC0B874((uint64_t)a1, v17, 0))
        return 2;
    }
LABEL_40:
    v19 = (int *)v3[5];
    if (v19)
    {
      v20 = *v19;
      if (*v19 >= 1)
      {
        v21 = v19 + 2;
        do
        {
          v23 = *((_QWORD *)v21 + 5);
          if (v23)
          {
            if (sub_1ACB73B30(a1, v23))
              return 2;
          }
          if ((*(_WORD *)((_BYTE *)v21 + 61) & 4) != 0)
          {
            v24 = (_DWORD *)*((_QWORD *)v21 + 11);
            if (v24)
            {
              if ((int)*v24 >= 1)
              {
                v25 = (uint64_t *)(v24 + 2);
                v26 = *v24 + 1;
                while (!*v25 || !sub_1ACC0B714((uint64_t)a1, *v25))
                {
                  v25 += 3;
                  if (--v26 <= 1)
                    goto LABEL_43;
                }
                return 2;
              }
            }
          }
LABEL_43:
          v21 += 26;
          v22 = __OFSUB__(v20--, 1);
        }
        while (!((v20 < 0) ^ v22 | (v20 == 0)));
      }
    }
    v27 = (void (*)(_QWORD *, _QWORD *))a1[3];
    if (v27)
      v27(a1, v3);
    result = 0;
    v3 = (_QWORD *)v3[10];
    if (!v3)
      return result;
  }
}

uint64_t sub_1ACB73DC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  unsigned int *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t *v49;
  const void *v50;
  uint64_t v51;
  size_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  unsigned __int8 *i;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  const char *v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  unsigned int *v66;
  _QWORD *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  int *v101;
  int *v102;
  const char *v103;
  int *v104;
  uint64_t v105;
  int *v106;
  int *v107;
  uint64_t v108;
  BOOL v109;
  int v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  int v118;
  unsigned __int8 v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t j;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  unint64_t v131;
  void *v132;
  int *v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  unsigned __int8 v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t k;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t m;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int *v163;
  int *v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  int v182;
  int *v183;
  uint64_t *v184;
  uint64_t v185;
  int *v186;
  unsigned int *v187;
  int *v188;
  uint64_t v189;
  int v190;
  unsigned int *v191;
  int v192;
  unsigned __int8 *v193;
  int v194;
  int *v195;
  int v196;
  int v197;
  int v198;
  int *v199;
  int v200;
  uint64_t v201;
  _BYTE *v202;
  const char *n;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  unsigned int v209;
  uint64_t v210;
  const char *v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  int v216;
  void *v217;
  int *v218;
  int *v219;
  const void *v220;
  size_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  _BOOL4 v227;
  unsigned __int8 *v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  _BYTE *v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  _BYTE *v239;
  _BYTE *v240;
  int v241;
  int v242;
  unsigned __int8 *v243;
  uint64_t v244;
  int v245;
  __int16 v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  const char *ii;
  uint64_t v252;
  uint64_t v253;
  size_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int *v259;
  unsigned int *v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  const char *jj;
  uint64_t v266;
  uint64_t v267;
  size_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  const char *v274;
  size_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int *v280;
  int *v281;
  uint64_t v282;
  void *v283;
  int *v284;
  size_t v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  const void *v289;
  size_t v290;
  unint64_t v291;
  void *v292;
  int *v293;
  int *v294;
  _WORD *v295;
  __int16 v296;
  __int16 v297;
  unsigned int *v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  const char *kk;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  unsigned int *v315;
  unsigned int *v316;
  int v317;
  int v318;
  uint64_t v319;
  _DWORD *v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  int v325;
  int v326;
  int *v327;
  int *v328;
  int v329;
  _BOOL4 v330;
  int __s;
  unsigned int __sa;
  char *__sb;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  _BYTE *v338;
  char **v339;
  int *v340;
  uint64_t v341;
  int *v342;
  const char **v343;
  uint64_t v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  int *v348;
  int *v349;
  __int16 v350;
  uint64_t *v351;
  uint64_t v352;
  unsigned int v353[4];

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v4 | 0x40;
  if (*(_BYTE *)(v3 + 103))
    return 2;
  if ((v4 & 0x40) != 0)
    return 1;
  if (*(_WORD *)(a1 + 36))
  {
    v7 = *((_DWORD *)v2 + 35) + 1;
    *((_DWORD *)v2 + 35) = v7;
    *(_DWORD *)(a2 + 16) = v7;
  }
  v342 = *(int **)(a2 + 40);
  v315 = *(unsigned int **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 104);
  if (v2[50])
    v9 = (v4 & 0x200000) == 0;
  else
    v9 = 1;
  v352 = v3;
  v350 = v4;
  if (v9)
  {
    if (v8 && !*((_DWORD *)v2 + 12))
    {
LABEL_244:
      *(_QWORD *)(v8 + 8) = v2[50];
      v2[50] = v8;
    }
  }
  else
  {
    if (!v8)
    {
      v8 = sub_1ACBE1124(v3, 0x40uLL);
      if (!v8)
      {
        *(_QWORD *)(a2 + 104) = 0;
        return 2;
      }
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_QWORD *)(a2 + 104) = v8;
    }
    *(_DWORD *)(v8 + 4) = 1;
    if (!*((_DWORD *)v2 + 12))
      goto LABEL_244;
  }
  sub_1ACBAC224((uint64_t)v2, v342);
  v351 = v2;
  if (*v342 >= 1)
  {
    v16 = 0;
    v17 = v342 + 2;
    do
    {
      if (*((_QWORD *)v17 + 4))
        goto LABEL_15;
      v10 = (char *)*((_QWORD *)v17 + 2);
      if (!v10)
      {
        if (sub_1ACB73B30((_QWORD *)a1, *((_QWORD **)v17 + 5)))
          return 2;
        v34 = *((_QWORD *)v17 + 5);
        if (*v2)
        {
          v41 = sub_1ACBE1124(*v2, 0x68uLL);
          if (!v41)
            goto LABEL_256;
        }
        else
        {
          v41 = sub_1ACB5D828(104);
          if (!v41)
            goto LABEL_256;
        }
        *(_QWORD *)(v41 + 96) = 0;
        *(_OWORD *)(v41 + 64) = 0u;
        *(_OWORD *)(v41 + 80) = 0u;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)(v41 + 48) = 0u;
        *(_OWORD *)v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *((_QWORD *)v17 + 4) = v41;
        *(_DWORD *)(v41 + 44) = 1;
        v49 = v2;
        v50 = (const void *)*((_QWORD *)v17 + 3);
        v51 = *v49;
        if (v50)
        {
          v52 = strlen(*((const char **)v17 + 3));
          v53 = v52 + 1;
          if (v51)
          {
            v54 = (void *)sub_1ACBE1124(v51, v53);
            if (!v54)
              goto LABEL_71;
LABEL_70:
            memcpy(v54, v50, v53);
          }
          else
          {
            v54 = (void *)sub_1ACB5D828(v52 + 1);
            if (v54)
              goto LABEL_70;
          }
        }
        else
        {
          v54 = sub_1ACB6DDD0(v51, "%!S", v35, v36, v37, v38, v39, v40, (char)v17);
        }
LABEL_71:
        v2 = v351;
        *(_QWORD *)v41 = v54;
        do
        {
          v55 = v34;
          v34 = *(_QWORD *)(v34 + 80);
        }
        while (v34);
        sub_1ACC10EB0(v351, *(int **)(v55 + 32), (_WORD *)(v41 + 54), (_QWORD *)(v41 + 8));
        *(_WORD *)(v41 + 52) = -1;
        *(_WORD *)(v41 + 58) = 200;
        *(_DWORD *)(v41 + 48) |= 0x4200u;
        if (*((_DWORD *)v351 + 12))
          return 2;
LABEL_74:
        if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) == 0)
          goto LABEL_15;
        goto LABEL_75;
      }
      v18 = (unsigned int *)v2[50];
      if (!v18
        || *((_DWORD *)v2 + 12)
        || *((_QWORD *)v17 + 1)
        || (v19 = *(_WORD *)((char *)v17 + 61), (v19 & 0x200) != 0))
      {
LABEL_33:
        if (*(_QWORD *)v17)
        {
          v29 = *(_QWORD *)(*v2 + 32);
          v30 = (uint64_t *)(v29 + 24);
          v31 = 0xFFFFFFFF00000000;
          do
          {
            v32 = *v30;
            v30 += 4;
            v31 += 0x100000000;
          }
          while (v32 != *(_QWORD *)v17);
          v33 = (_BYTE **)(v29 + (v31 >> 27));
        }
        else
        {
          v33 = (_BYTE **)(v17 + 2);
        }
        v42 = sub_1ACB8D488((uint64_t)v2, 0, v10, *v33, v12, v13, v14, v15);
        *((_QWORD *)v17 + 4) = v42;
        if (!v42)
          return 2;
        v43 = v42;
        v44 = *(_DWORD *)(v42 + 44);
        if (v44 < 0xFFFF)
        {
          *(_DWORD *)(v42 + 44) = v44 + 1;
          v45 = *(unsigned __int8 *)(v42 + 63);
          if (v45 == 1)
          {
            v46 = *(unsigned __int8 *)(a1 + 36);
            goto LABEL_46;
          }
          if ((*(_WORD *)((_BYTE *)v17 + 61) & 4) == 0)
          {
            if (!*(_BYTE *)(v42 + 63))
              goto LABEL_74;
            v46 = *(unsigned __int8 *)(a1 + 36);
            if (*(__int16 *)(v42 + 54) <= 0)
            {
LABEL_46:
              if (sub_1ACC114E0((uint64_t)v2, v42, (uint64_t)v10, v11, v12, v13, v14, v15))
                return 2;
              v45 = *(unsigned __int8 *)(v43 + 63);
            }
            if (v45 == 1)
            {
              if ((*(_WORD *)((_BYTE *)v17 + 61) & 0x80) != 0)
              {
                v47 = *(_QWORD *)(v43 + 80);
                if (v47)
                {
                  if (((*(_DWORD *)(v352 + 48) >> 7) & 1u) < *(unsigned __int8 *)(v47 + 30))
                    sub_1ACBCB308((uint64_t)v2, "unsafe use of virtual table \"%s\"", (uint64_t)v10, v11, v12, v13, v14, v15, *(_QWORD *)v43);
                }
              }
            }
            else if (v45 == 2)
            {
              if ((*(_BYTE *)(v352 + 51) & 0x80) == 0
                && *(_QWORD *)(v43 + 96) != *(_QWORD *)(*(_QWORD *)(v352 + 32) + 56))
              {
                sub_1ACBCB308((uint64_t)v2, "access to view \"%s\" prohibited", (uint64_t)v10, v11, v12, v13, v14, v15, *(_QWORD *)v43);
              }
              *((_QWORD *)v17 + 5) = sub_1ACB8DFB8(v352, *(_QWORD *)(v43 + 64), 0);
            }
            v48 = *(_WORD *)(v43 + 54);
            *(_WORD *)(v43 + 54) = -1;
            *(_WORD *)(a1 + 36) = 1;
            sub_1ACB73B30((_QWORD *)a1, *((_QWORD **)v17 + 5));
            *(_WORD *)(a1 + 36) = v46;
            *(_WORD *)(v43 + 54) = v48;
            v2 = v351;
            if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) != 0)
              goto LABEL_75;
            goto LABEL_15;
          }
          v313 = *((_QWORD *)v17 + 2);
LABEL_488:
          v62 = "'%s' is not a function";
LABEL_491:
          v312 = (uint64_t)v2;
LABEL_492:
          sub_1ACBCB308(v312, v62, (uint64_t)v10, v11, v12, v13, v14, v15, v313);
          return 2;
        }
        sub_1ACBCB308((uint64_t)v2, "too many references to \"%s\": max 65535", (uint64_t)v10, v11, v12, v13, v14, v15, *(_QWORD *)v42);
LABEL_256:
        *((_QWORD *)v17 + 4) = 0;
        return 2;
      }
      while (1)
      {
        v20 = *v18;
        if ((int)v20 >= 1)
          break;
LABEL_31:
        if (!v18[1])
        {
          v18 = (unsigned int *)*((_QWORD *)v18 + 1);
          if (v18)
            continue;
        }
        goto LABEL_33;
      }
      v21 = 0;
LABEL_24:
      v22 = 0;
      v23 = &v18[12 * v21];
      v26 = *((_QWORD *)v23 + 2);
      v25 = (char **)(v23 + 4);
      v24 = v26;
      while (1)
      {
        v27 = v10[v22];
        v28 = *(unsigned __int8 *)(v24 + v22);
        if ((_DWORD)v27 == (_DWORD)v28)
          break;
        if (byte_1ACCB6333[v27] != byte_1ACCB6333[v28])
        {
          if (++v21 == v20)
            goto LABEL_31;
          goto LABEL_24;
        }
LABEL_26:
        ++v22;
      }
      if (v10[v22])
        goto LABEL_26;
      v61 = &v18[12 * v21];
      v62 = (const char *)*((_QWORD *)v61 + 5);
      v343 = (const char **)(v61 + 10);
      if (v62)
      {
        LOBYTE(v313) = v24;
        goto LABEL_491;
      }
      if ((v19 & 4) != 0)
      {
        LOBYTE(v313) = *((_QWORD *)v17 + 2);
        goto LABEL_488;
      }
      v346 = v21;
      v63 = *v2;
      v64 = sub_1ACB5733C(*v2, 0x68uLL);
      if (!v64)
        return 2;
      v65 = v64;
      v339 = v25;
      v66 = &v18[12 * v346];
      v69 = (_BYTE *)*((_QWORD *)v66 + 6);
      v67 = v66 + 12;
      v68 = v69;
      if (!v69)
      {
        v70 = sub_1ACB5733C(v63, 0x14uLL);
        *v67 = v70;
        if (!v70
          || (v68 = v70, !sub_1ACC0C1E8(v351, (void (*)(uint64_t, uint64_t))sub_1ACB7EA34, (uint64_t)v70)))
        {
          sub_1ACBE0F9C((_QWORD *)v63, v65);
          return 2;
        }
        v68[18] = v18[12 * v346 + 14];
      }
      *((_QWORD *)v17 + 4) = v65;
      v65[11] = 1;
      *(_QWORD *)v65 = sub_1ACB8CB7C(v63, *v339);
      *((_WORD *)v65 + 26) = -1;
      *((_WORD *)v65 + 29) = 200;
      v65[12] |= 0x4200u;
      v71 = (unsigned __int8 *)sub_1ACB8DFB8(v63, *(_QWORD *)&v18[12 * v346 + 8], 0);
      *((_QWORD *)v17 + 5) = v71;
      if (*(_BYTE *)(v63 + 103))
        return 2;
      *((_DWORD *)v71 + 1) |= 0x4000000u;
      v78 = *(_WORD *)((char *)v17 + 61);
      if ((v78 & 2) != 0)
      {
        sub_1ACBCB308((uint64_t)v351, "no such index: \"%s\"", v72, v73, v74, v75, v76, v77, *((_QWORD *)v17 + 11));
        return 2;
      }
      *(_WORD *)((char *)v17 + 61) = v78 | 0x100;
      *((_QWORD *)v17 + 12) = v68;
      ++*(_DWORD *)v68;
      v79 = *v71 & 0xFE;
      v80 = v71;
      if (v79 != 134)
        goto LABEL_111;
      v81 = -1;
      v80 = v71;
      while (2)
      {
        v82 = (unsigned int *)*((_QWORD *)v80 + 5);
        v83 = *v82;
        if ((int)v83 < 1)
          goto LABEL_109;
        v84 = 0;
        while (2)
        {
          if (*(_QWORD *)&v82[26 * v84 + 4])
            goto LABEL_98;
          v85 = *(_BYTE **)&v82[26 * v84 + 6];
          if (!v85)
            goto LABEL_98;
          v86 = *v339;
          while (2)
          {
            v87 = *v85;
            v88 = *v86;
            if ((_DWORD)v87 != (_DWORD)v88)
            {
              if (byte_1ACCB6333[v87] != byte_1ACCB6333[v88])
                goto LABEL_98;
LABEL_103:
              ++v85;
              ++v86;
              continue;
            }
            break;
          }
          if (*v85)
            goto LABEL_103;
          v89 = &v82[26 * v84];
          *((_QWORD *)v89 + 5) = v65;
          ++v65[11];
          *(_WORD *)((char *)v89 + 69) |= 0x40u;
          v90 = *((_DWORD *)v80 + 1);
          if ((v90 & 0x2000) != 0)
          {
            sub_1ACBCB308((uint64_t)v351, "multiple references to recursive table: %s", v72, v73, v74, v75, v76, v77, (char)*v339);
            return 2;
          }
          *((_DWORD *)v80 + 1) = v90 | 0x2000;
          if (v81 < 0)
          {
            v81 = *((_DWORD *)v351 + 13);
            *((_DWORD *)v351 + 13) = v81 + 1;
          }
          v82[26 * v84 + 18] = v81;
LABEL_98:
          if (++v84 != v83)
            continue;
          break;
        }
LABEL_109:
        if ((v80[5] & 0x20) != 0)
        {
          v80 = (unsigned __int8 *)*((_QWORD *)v80 + 10);
          if (*v80 == *v71)
            continue;
        }
        break;
      }
LABEL_111:
      __s = v79;
      *v343 = "circular reference: %s";
      v335 = (_QWORD *)v351[50];
      v351[50] = (uint64_t)v18;
      if ((v71[5] & 0x20) != 0)
      {
        *((_QWORD *)v80 + 13) = *((_QWORD *)v71 + 13);
        v91 = v71;
        v98 = sub_1ACB73B30((_QWORD *)a1, v80);
        *((_QWORD *)v80 + 13) = 0;
        if (v98)
        {
LABEL_497:
          v351[50] = (uint64_t)v335;
          return 2;
        }
      }
      else
      {
        v91 = v71;
        if (sub_1ACB73B30((_QWORD *)a1, v71))
          goto LABEL_497;
      }
      v351[50] = (uint64_t)v18;
      v99 = v91;
      do
      {
        v100 = v99;
        v99 = (unsigned __int8 *)*((_QWORD *)v99 + 10);
      }
      while (v99);
      v101 = (int *)*((_QWORD *)v100 + 4);
      v102 = *(int **)&v18[12 * v346 + 6];
      if (v102)
      {
        if (v101 && *v101 != *v102)
        {
          sub_1ACBCB308((uint64_t)v351, "table %s has %d values for %d columns", v92, v93, v94, v95, v96, v97, (char)*v339);
          v351[50] = (uint64_t)v335;
          return 2;
        }
      }
      else
      {
        v102 = v101;
      }
      sub_1ACC10EB0(v351, v102, (_WORD *)v65 + 27, (_QWORD *)v65 + 1);
      if (__s == 134)
      {
        v103 = "multiple recursive references: %s";
        if ((*((_DWORD *)v91 + 1) & 0x2000) == 0)
          v103 = "recursive reference in a subquery: %s";
        *v343 = v103;
        sub_1ACB73B30((_QWORD *)a1, v91);
      }
      *v343 = 0;
      v2 = v351;
      v351[50] = (uint64_t)v335;
      if ((*(_WORD *)((_BYTE *)v17 + 61) & 2) != 0)
      {
LABEL_75:
        v56 = *(_QWORD *)(*((_QWORD *)v17 + 4) + 16);
        if (!v56)
          goto LABEL_253;
        while (1)
        {
          v57 = *(_BYTE **)v56;
          for (i = (unsigned __int8 *)*((_QWORD *)v17 + 11); ; ++i)
          {
            v59 = *v57;
            v60 = *i;
            if ((_DWORD)v59 != (_DWORD)v60)
              break;
            if (!*v57)
            {
              *((_QWORD *)v17 + 12) = v56;
              goto LABEL_15;
            }
LABEL_78:
            ++v57;
          }
          if (byte_1ACCB6333[v59] == byte_1ACCB6333[v60])
            goto LABEL_78;
          v56 = *(_QWORD *)(v56 + 40);
          if (!v56)
          {
LABEL_253:
            sub_1ACBCB308((uint64_t)v2, "no such index: %s", (uint64_t)v10, v11, v12, v13, v14, v15, *((_QWORD *)v17 + 11));
            *((_BYTE *)v2 + 29) = 1;
            return 2;
          }
        }
      }
LABEL_15:
      ++v16;
      v17 += 26;
    }
    while (v16 < *v342);
  }
  if (*((_DWORD *)v2 + 12))
    return 2;
  v104 = *(int **)(a2 + 40);
  if (*v104 <= 1)
    goto LABEL_245;
  v105 = 0;
  v106 = v104 + 28;
  v107 = v104 + 2;
  while (2)
  {
    v108 = *((_QWORD *)v106 + 4);
    if (*((_QWORD *)v107 + 4))
      v109 = v108 == 0;
    else
      v109 = 1;
    if (v109)
      goto LABEL_132;
    if ((v106[15] & 0x20) != 0)
      v110 = 1;
    else
      v110 = 2;
    __sa = v110;
    v340 = v107;
    if ((v106[15] & 4) == 0)
      goto LABEL_181;
    if ((*(_WORD *)((_BYTE *)v106 + 61) & 0x400) != 0 || *((_QWORD *)v106 + 9))
    {
      LOBYTE(v313) = 0;
      v62 = "a NATURAL join may not have an ON or USING clause";
      goto LABEL_491;
    }
    v111 = *(__int16 *)(v108 + 54);
    if (v111 < 1)
      goto LABEL_180;
    v112 = 0;
    v113 = 0;
    v336 = *((_QWORD *)v106 + 4);
    while (2)
    {
      while (2)
      {
        v115 = *(_QWORD *)(v108 + 8);
        if ((*(_WORD *)(v115 + 16 * v112 + 14) & 2) != 0)
          goto LABEL_148;
        v116 = 0;
        v117 = *(const char **)(v115 + 16 * v112);
        while (2)
        {
          if (v117 && (v118 = *(unsigned __int8 *)v117, *v117))
          {
            v119 = 0;
            v120 = (unsigned __int8 *)(v117 + 1);
            do
            {
              v119 += byte_1ACCB6333[v118];
              v121 = *v120++;
              v118 = v121;
            }
            while (v121);
          }
          else
          {
            v119 = 0;
          }
          v122 = *(_QWORD *)&v104[26 * v116 + 10];
          v123 = *(__int16 *)(v122 + 54);
          if (v123 < 1)
            goto LABEL_151;
          v124 = 0;
          v125 = *(_QWORD *)(v122 + 8);
          v126 = v125;
          while (*(unsigned __int8 *)(v126 + 11) != v119)
          {
LABEL_160:
            v126 += 16;
            if (++v124 == v123)
              goto LABEL_151;
          }
          for (j = 0; ; ++j)
          {
            v128 = *(unsigned __int8 *)(*(_QWORD *)v126 + j);
            v129 = v117[j];
            if ((_DWORD)v128 == (_DWORD)v129)
              break;
            if (byte_1ACCB6333[v128] != byte_1ACCB6333[v129])
              goto LABEL_160;
LABEL_164:
            ;
          }
          if (*(_BYTE *)(*(_QWORD *)v126 + j))
            goto LABEL_164;
          if ((*(_WORD *)(v125 + 16 * v124 + 14) & 2) != 0)
          {
LABEL_151:
            v9 = v116++ == v105;
            if (v9)
              goto LABEL_147;
            continue;
          }
          break;
        }
        v113 = sub_1ACC041AC((uint64_t)v351, v113, 0);
        if (!v113)
        {
          ++v112;
          LOWORD(v111) = *(_WORD *)(v108 + 54);
          v2 = v351;
          if (v112 >= (__int16)v111)
            goto LABEL_180;
          continue;
        }
        break;
      }
      if (v117)
      {
        v130 = strlen(v117);
        v131 = v130 + 1;
        if (*v351)
          v132 = (void *)sub_1ACBE1124(*v351, v131);
        else
          v132 = (void *)sub_1ACB5D828(v130 + 1);
        v114 = v132;
        if (v132)
          memcpy(v132, v117, v131);
        v108 = v336;
      }
      else
      {
        v114 = 0;
      }
      v113[2 * *(int *)v113 - 1] = v114;
      LOWORD(v111) = *(_WORD *)(v108 + 54);
LABEL_147:
      v2 = v351;
LABEL_148:
      if (++v112 < (__int16)v111)
        continue;
      break;
    }
    if (v113)
    {
      *(_WORD *)((char *)v106 + 61) |= 0x1400u;
      *((_QWORD *)v106 + 9) = v113;
    }
LABEL_180:
    v107 = v340;
    if (*((_DWORD *)v2 + 12))
      return 2;
LABEL_181:
    v133 = (int *)*((_QWORD *)v106 + 9);
    if ((*(_WORD *)((_BYTE *)v106 + 61) & 0x400) != 0)
    {
      if (*v133 < 1)
        goto LABEL_132;
      v134 = 0;
      v347 = *v2;
      v337 = v108;
      v328 = (int *)*((_QWORD *)v106 + 9);
LABEL_187:
      *(_QWORD *)v353 = 0;
      v135 = *(unsigned __int8 **)&v133[4 * v134 + 2];
      v344 = v134;
      if (v135 && (v136 = *v135) != 0)
      {
        v137 = 0;
        v138 = v135 + 1;
        do
        {
          v137 += byte_1ACCB6333[v136];
          v139 = *v138++;
          v136 = v139;
        }
        while (v139);
      }
      else
      {
        v137 = 0;
      }
      v140 = *(__int16 *)(v108 + 54);
      if (v140 < 1)
      {
LABEL_252:
        LOBYTE(v313) = (_BYTE)v135;
        v62 = "cannot join using column %s - column not present in both tables";
        goto LABEL_491;
      }
      v141 = 0;
      v142 = *(_QWORD *)(v108 + 8);
      while (*(unsigned __int8 *)(v142 + 11) != v137)
      {
LABEL_195:
        v142 += 16;
        if (++v141 == v140)
          goto LABEL_252;
      }
      for (k = 0; ; ++k)
      {
        v144 = *(unsigned __int8 *)(*(_QWORD *)v142 + k);
        v145 = v135[k];
        if ((_DWORD)v144 == (_DWORD)v145)
        {
          if (!*(_BYTE *)(*(_QWORD *)v142 + k))
          {
            if (!sub_1ACC12140((uint64_t)v104, 0, v105, v135, &v353[1], v353, (*(unsigned __int16 *)((char *)v106 + 61) >> 12) & 1))goto LABEL_252;
            v146 = v353[0];
            v147 = (unsigned __int8 *)sub_1ACC12288(v347, (uint64_t)v104, v353[1], v353[0]);
            if ((*(_WORD *)((_BYTE *)&v104[26 * v353[1] + 17] + 1) & 0x2000) != 0)
            {
              v148 = *(_QWORD *)(*(_QWORD *)&v104[26 * v353[1] + 12] + 32) + 24 * (int)v146;
              *(_WORD *)(v148 + 25) |= 0x40u;
            }
            if ((v104[17] & 0x40) == 0
              || !sub_1ACC12140((uint64_t)v104, v353[1] + 1, v105, v135, &v353[1], v353, (*(unsigned __int16 *)((char *)v106 + 61) >> 12) & 1))
            {
              goto LABEL_236;
            }
            v155 = 0;
LABEL_209:
            if ((*(_WORD *)((_BYTE *)&v104[26 * v353[1] + 17] + 1) & 0x400) != 0)
            {
              v156 = *(unsigned int **)&v104[26 * v353[1] + 20];
              v157 = *v156;
              if ((int)v157 >= 1)
              {
                v158 = 0;
LABEL_212:
                for (m = 0; ; ++m)
                {
                  v160 = *(unsigned __int8 *)(*(_QWORD *)&v156[4 * v158 + 2] + m);
                  v161 = v135[m];
                  if ((_DWORD)v160 == (_DWORD)v161)
                  {
                    if (!*(_BYTE *)(*(_QWORD *)&v156[4 * v158 + 2] + m))
                    {
                      if ((v158 & 0x80000000) != 0)
                        break;
                      if (!v155)
                      {
                        v164 = (int *)sub_1ACC2D490((_QWORD *)*v351, v147);
LABEL_226:
                        v155 = v164;
                        goto LABEL_227;
                      }
                      v162 = *v155;
                      if (v155[1] <= *v155)
                      {
                        v164 = sub_1ACC2D4F4(*v351, v155, v147);
                        goto LABEL_226;
                      }
                      *v155 = v162 + 1;
                      v163 = &v155[6 * v162];
                      *((_QWORD *)v163 + 2) = 0;
                      *((_QWORD *)v163 + 3) = 0;
                      *((_QWORD *)v163 + 1) = v147;
LABEL_227:
                      v165 = v353[0];
                      v147 = (unsigned __int8 *)sub_1ACC12288(v347, (uint64_t)v104, v353[1], v353[0]);
                      v166 = v353[1];
                      if ((*(_WORD *)((_BYTE *)&v104[26 * v353[1] + 17] + 1) & 0x2000) != 0)
                      {
                        v167 = *(_QWORD *)(*(_QWORD *)&v104[26 * v353[1] + 12] + 32) + 24 * (int)v165;
                        *(_WORD *)(v167 + 25) |= 0x40u;
                        v166 = v353[1];
                      }
                      if (!sub_1ACC12140((uint64_t)v104, v166 + 1, v105, v135, &v353[1], v353, (*(unsigned __int16 *)((char *)v106 + 61) >> 12) & 1))goto LABEL_230;
                      goto LABEL_209;
                    }
                  }
                  else if (byte_1ACCB6333[v160] != byte_1ACCB6333[v161])
                  {
                    if (++v158 != v157)
                      goto LABEL_212;
                    break;
                  }
                }
              }
            }
            sub_1ACBCB308((uint64_t)v351, "ambiguous reference to %s in USING()", v149, v150, v151, v152, v153, v154, (char)v135);
LABEL_230:
            if (v155)
            {
              v168 = *v155;
              if (v155[1] <= *v155)
              {
                v170 = (uint64_t)v351;
                v155 = sub_1ACC2D4F4(*v351, v155, v147);
              }
              else
              {
                *v155 = v168 + 1;
                v169 = &v155[6 * v168];
                *((_QWORD *)v169 + 2) = 0;
                *((_QWORD *)v169 + 3) = 0;
                *((_QWORD *)v169 + 1) = v147;
                v170 = (uint64_t)v351;
              }
              v147 = (unsigned __int8 *)sub_1ACB8DD70(v170, v155, &off_1E5C74560, 0);
              v2 = (uint64_t *)v170;
            }
            else
            {
              v2 = v351;
            }
LABEL_236:
            v171 = sub_1ACC12288(v347, (uint64_t)v104, (int)v105 + 1, v141);
            if ((*(_WORD *)((_BYTE *)v106 + 61) & 0x2000) != 0)
            {
              v172 = *(_QWORD *)(*((_QWORD *)v106 + 5) + 32) + 24 * v141;
              *(_WORD *)(v172 + 25) |= 0x40u;
            }
            v173 = sub_1ACC0241C(v2, 53, (uint64_t)v147, v171);
            if (v173)
            {
              *(_DWORD *)(v173 + 4) |= __sa;
              *(_DWORD *)(v173 + 56) = *(_DWORD *)(v171 + 44);
            }
            *(_QWORD *)(a2 + 48) = sub_1ACC04474(v2, *(_QWORD *)(a2 + 48), v173);
            v134 = v344 + 1;
            v133 = v328;
            v108 = v337;
            v107 = v340;
            if (v344 + 1 >= *v328)
              goto LABEL_132;
            goto LABEL_187;
          }
        }
        else if (byte_1ACCB6333[v144] != byte_1ACCB6333[v145])
        {
          goto LABEL_195;
        }
      }
    }
    if (v133)
    {
      sub_1ACC12384(*((_QWORD *)v106 + 9), v106[16], __sa);
      *(_QWORD *)(a2 + 48) = sub_1ACC04474(v2, *(_QWORD *)(a2 + 48), *((_QWORD *)v106 + 9));
      *((_QWORD *)v106 + 9) = 0;
      *(_WORD *)((char *)v106 + 61) |= 0x800u;
    }
LABEL_132:
    ++v105;
    v106 += 26;
    v107 += 26;
    if (v105 < *v104 - 1)
      continue;
    break;
  }
LABEL_245:
  v174 = v315;
  v175 = *v315;
  if ((int)v175 < 1)
  {
    v177 = 0;
    v179 = a2;
    v180 = v352;
    v183 = *(int **)(a2 + 32);
    goto LABEL_481;
  }
  v176 = 0;
  v177 = 0;
  v178 = 24 * v175;
  v179 = a2;
  v180 = v352;
  while (1)
  {
    v181 = *(unsigned __int8 **)&v315[v176 / 4 + 2];
    v182 = *v181;
    if (v182 == 141)
      v182 = **((unsigned __int8 **)v181 + 3);
    if (v182 == 180)
      break;
    v177 |= *((_DWORD *)v181 + 1);
    v176 += 24;
    if (v178 == v176)
    {
      v183 = *(int **)(a2 + 32);
      goto LABEL_481;
    }
  }
  v184 = v2;
  v183 = 0;
  v316 = v315 + 2;
  v324 = *(_QWORD *)(*v184 + 48) & 0x44;
  v185 = 0;
  while (2)
  {
    v317 = v177;
    v319 = v185;
    v191 = &v316[6 * v185];
    v318 = *(_DWORD *)(*(_QWORD *)v191 + 4);
    v320 = *(_DWORD **)v191;
    v192 = **(unsigned __int8 **)v191;
    if (v192 == 180)
    {
      v338 = 0;
      v193 = *(unsigned __int8 **)v191;
LABEL_272:
      v196 = *v342;
      if (*v342 < 1)
      {
        v190 = v317;
        v311 = (char)v338;
        if (v338)
          goto LABEL_474;
        goto LABEL_479;
      }
      v197 = 0;
      v198 = 0;
      v325 = *((_DWORD *)v193 + 14);
      v199 = v342 + 2;
LABEL_277:
      v201 = *((_QWORD *)v199 + 4);
      v345 = (const char *)*((_QWORD *)v199 + 3);
      if (!v345)
        v345 = *(const char **)v201;
      if (*(_BYTE *)(v180 + 103))
      {
LABEL_472:
        v179 = a2;
        v174 = v315;
        v190 = v317;
        v189 = v319;
        if (v197)
          goto LABEL_262;
        v311 = (char)v338;
        if (v338)
        {
LABEL_474:
          sub_1ACBCB308((uint64_t)v351, "no such table: %s", (uint64_t)v10, v11, v12, v13, v14, v15, v311);
LABEL_480:
          v189 = v319;
          goto LABEL_262;
        }
LABEL_479:
        sub_1ACBCB308((uint64_t)v351, "no tables specified", (uint64_t)v10, v11, v12, v13, v14, v15, v313);
        goto LABEL_480;
      }
      if ((*(_WORD *)((_BYTE *)v199 + 61) & 0x2000) != 0)
      {
        __sb = 0;
        v341 = *(_QWORD *)(*((_QWORD *)v199 + 5) + 32);
      }
      else
      {
        if (v338)
        {
          v202 = v338;
          for (n = v345; ; ++n)
          {
            v204 = *v202;
            v205 = *(unsigned __int8 *)n;
            if ((_DWORD)v204 == (_DWORD)v205)
            {
              if (!*v202)
                break;
            }
            else if (byte_1ACCB6333[v204] != byte_1ACCB6333[v205])
            {
              v200 = v198 + 1;
              goto LABEL_276;
            }
            ++v202;
          }
        }
        v206 = *(_QWORD *)(v201 + 96);
        if (!v206)
          goto LABEL_293;
        v207 = *(_QWORD *)(v180 + 32);
        v208 = (uint64_t *)(v207 + 24);
        v209 = -1;
        do
        {
          v210 = *v208;
          v208 += 4;
          ++v209;
        }
        while (v210 != v206);
        if ((v209 & 0x80000000) != 0)
        {
LABEL_293:
          v341 = 0;
          v211 = "*";
        }
        else
        {
          v341 = 0;
          v211 = *(const char **)(v207 + 32 * v209);
        }
        __sb = (char *)v211;
      }
      v200 = v198 + 1;
      if (v198 + 1 >= v196)
      {
        v212 = 0;
        goto LABEL_320;
      }
      v212 = 0;
      if ((*(_WORD *)((_BYTE *)v199 + 165) & 0x400) != 0 && (v350 & 0x800) != 0)
      {
        v212 = (int *)*((_QWORD *)v199 + 22);
        if (*v212 >= 1)
        {
          v326 = v198;
          v329 = v197;
          v322 = v198 + 1;
          v348 = v199;
          v213 = 0;
          v214 = 2;
          while (1)
          {
            v219 = v212;
            v220 = *(const void **)&v212[v214];
            if (v220)
              v221 = strlen(*(const char **)&v212[v214]) & 0x3FFFFFFF;
            else
              v221 = 0;
            v222 = sub_1ACBE1124(v352, v221 + 81);
            v223 = v222;
            if (!v222)
              goto LABEL_310;
            *(_OWORD *)(v222 + 48) = 0u;
            *(_OWORD *)(v222 + 64) = 0u;
            *(_OWORD *)(v222 + 16) = 0u;
            *(_OWORD *)(v222 + 32) = 0u;
            *(_OWORD *)v222 = 0u;
            *(_BYTE *)v222 = 59;
            *(_WORD *)(v222 + 52) = -1;
            v224 = v222 + 80;
            *(_QWORD *)(v222 + 8) = v222 + 80;
            if (v221)
              memcpy((void *)(v222 + 80), v220, v221);
            *(_BYTE *)(v224 + v221) = 0;
            *(_DWORD *)(v223 + 40) = 1;
            if ((*(_BYTE *)(v223 + 4) & 3) == 0)
            {
              *(_DWORD *)(v223 + 56) = v325;
              if (v183)
              {
LABEL_311:
                v225 = *v183;
                if (v183[1] > *v183)
                {
                  *v183 = v225 + 1;
                  v215 = &v183[6 * v225];
                  *((_QWORD *)v215 + 2) = 0;
                  *((_QWORD *)v215 + 3) = 0;
                  *((_QWORD *)v215 + 1) = v223;
                }
                else
                {
                  v183 = sub_1ACC2D4F4(*v351, v183, (unsigned __int8 *)v223);
                  if (!v183)
                    goto LABEL_316;
                }
                goto LABEL_301;
              }
            }
            else
            {
LABEL_310:
              if (v183)
                goto LABEL_311;
            }
            v183 = (int *)sub_1ACC2D490((_QWORD *)*v351, (unsigned __int8 *)v223);
            if (!v183)
            {
LABEL_316:
              v180 = v352;
              goto LABEL_302;
            }
LABEL_301:
            v216 = *v183;
            v314 = (char)v220;
            v180 = v352;
            v217 = sub_1ACB6DDD0(v352, "..%s", (uint64_t)v10, v11, v12, v13, v14, v15, v314);
            v218 = &v183[6 * v216];
            *((_QWORD *)v218 - 1) = v217;
            *(_WORD *)((char *)v218 + 1) = *(_WORD *)((_BYTE *)v218 + 1) & 0xFF7C | 0x82;
LABEL_302:
            ++v213;
            v212 = v219;
            v214 += 4;
            if (v213 >= *v219)
            {
              v199 = v348;
              v200 = v322;
              v197 = v329;
              v198 = v326;
              break;
            }
          }
        }
      }
LABEL_320:
      if (*(__int16 *)(v201 + 54) < 1)
        goto LABEL_276;
      v327 = v212;
      v323 = v200;
      v349 = v199;
      v226 = 0;
      v227 = v198 != 0;
      v228 = v338;
      v229 = v341;
      if (v338)
        v227 = 0;
      if (v341)
        v230 = v338 != 0;
      else
        v230 = 0;
      if ((v350 & 0x800) != 0)
        v227 = 0;
      v330 = v227;
      v321 = ~v198;
      v231 = a2;
LABEL_331:
      v232 = *(_QWORD *)(v201 + 8);
      v233 = *(const char **)(v232 + 16 * v226);
      if (v230)
      {
        if ((*(_WORD *)(v229 + 24 * v226 + 25) & 3) != 2)
          goto LABEL_330;
        v234 = 0;
        v235 = *(_BYTE **)(v229 + 24 * v226 + 16);
        v236 = 1;
        v237 = *v235;
        if (*v235)
        {
          do
          {
            if (v237 == 46)
              break;
            ++v234;
            ++v236;
            v237 = v235[v234];
          }
          while (v235[v234]);
        }
        v238 = 0;
        v239 = &v235[(v234 + 1)];
        v240 = &v235[v236];
        v241 = 1;
        v242 = *v240;
        if (*v240)
        {
          do
          {
            if (v242 == 46)
              break;
            ++v238;
            ++v241;
            v242 = v240[v238];
          }
          while (v240[v238]);
        }
        if ((_DWORD)v238)
        {
          v243 = v228;
          while (1)
          {
            v244 = *v239;
            if (!*v239)
              break;
            LODWORD(v244) = byte_1ACCB6333[v244];
            v245 = byte_1ACCB6333[*v243];
            if ((_DWORD)v244 != v245)
              goto LABEL_363;
            ++v239;
            ++v243;
            if (--v241 <= 1)
              goto LABEL_329;
          }
          v245 = byte_1ACCB6333[*v243];
LABEL_363:
          if ((_DWORD)v244 != v245)
            goto LABEL_330;
        }
LABEL_329:
        if (v228[v238])
          goto LABEL_330;
      }
      v246 = *(_WORD *)(v232 + 16 * v226 + 14);
      if ((*(_BYTE *)(v231 + 6) & 2) == 0 && (v246 & 2) != 0 || (v246 & 0x400) != 0 && !v228 && (v350 & 0x800) == 0)
        goto LABEL_330;
      if (!v330)
        goto LABEL_366;
      if ((*(_WORD *)((_BYTE *)v349 + 61) & 0x400) == 0)
        goto LABEL_366;
      v247 = (unsigned int *)*((_QWORD *)v349 + 9);
      v248 = *v247;
      if ((int)v248 < 1)
        goto LABEL_366;
      v249 = 0;
LABEL_354:
      v250 = *(_BYTE **)&v247[4 * v249 + 2];
      for (ii = v233; ; ++ii)
      {
        v252 = *v250;
        v253 = *(unsigned __int8 *)ii;
        if ((_DWORD)v252 == (_DWORD)v253)
        {
          if (!*v250)
          {
            if ((v249 & 0x80000000) == 0)
              goto LABEL_468;
            goto LABEL_366;
          }
        }
        else if (byte_1ACCB6333[v252] != byte_1ACCB6333[v253])
        {
          if (++v249 != v248)
            goto LABEL_354;
LABEL_366:
          if (v233)
            v254 = strlen(v233) & 0x3FFFFFFF;
          else
            v254 = 0;
          v255 = sub_1ACBE1124(v180, v254 + 81);
          v256 = v255;
          if (v255)
          {
            *(_OWORD *)(v255 + 48) = 0u;
            *(_OWORD *)(v255 + 64) = 0u;
            *(_OWORD *)(v255 + 16) = 0u;
            *(_OWORD *)(v255 + 32) = 0u;
            *(_OWORD *)v255 = 0u;
            *(_BYTE *)v255 = 59;
            *(_WORD *)(v255 + 52) = -1;
            v257 = v255 + 80;
            *(_QWORD *)(v255 + 8) = v255 + 80;
            if (v254)
              memcpy((void *)(v255 + 80), v233, v254);
            *(_BYTE *)(v257 + v254) = 0;
            *(_DWORD *)(v256 + 40) = 1;
          }
          if (*v342 >= 2)
          {
            if ((v349[15] & 0x40) == 0)
              goto LABEL_393;
            if ((v350 & 0x800) != 0)
              goto LABEL_393;
            v258 = *v342 + v321;
            if (v258 < 1)
              goto LABEL_393;
            v259 = v349;
LABEL_380:
            if ((*(_WORD *)((_BYTE *)v259 + 165) & 0x400) == 0)
              goto LABEL_379;
            v261 = (unsigned int *)*((_QWORD *)v259 + 22);
            if (!v261)
              goto LABEL_379;
            v262 = *v261;
            if ((int)v262 < 1)
              goto LABEL_379;
            v263 = 0;
LABEL_384:
            v264 = *(_BYTE **)&v261[4 * v263 + 2];
            for (jj = v233; ; ++jj)
            {
              v266 = *v264;
              v267 = *(unsigned __int8 *)jj;
              if ((_DWORD)v266 == (_DWORD)v267)
              {
                if (!*v264)
                {
                  if ((v263 & 0x80000000) == 0)
                    break;
                  goto LABEL_379;
                }
              }
              else if (byte_1ACCB6333[v266] != byte_1ACCB6333[v267])
              {
                if (++v263 != v262)
                  goto LABEL_384;
LABEL_379:
                v259 += 26;
                if (v258-- > 1)
                  goto LABEL_380;
LABEL_393:
                if (v345)
                  v268 = strlen(v345) & 0x3FFFFFFF;
                else
                  v268 = 0;
                v269 = sub_1ACBE1124(v352, v268 + 81);
                v270 = v269;
                if (v269)
                {
                  *(_OWORD *)(v269 + 48) = 0u;
                  *(_OWORD *)(v269 + 64) = 0u;
                  *(_OWORD *)(v269 + 16) = 0u;
                  *(_OWORD *)(v269 + 32) = 0u;
                  *(_OWORD *)v269 = 0u;
                  *(_BYTE *)v269 = 59;
                  *(_WORD *)(v269 + 52) = -1;
                  v271 = v269 + 80;
                  *(_QWORD *)(v269 + 8) = v269 + 80;
                  if (v268)
                    memcpy((void *)(v269 + 80), v345, v268);
                  *(_BYTE *)(v271 + v268) = 0;
                  *(_DWORD *)(v270 + 40) = 1;
                }
                v256 = sub_1ACC0241C(v351, 141, v270, v256);
                if (*((unsigned __int8 *)v351 + 302) >= 2u
                  && (v272 = *((_QWORD *)v320 + 2)) != 0
                  && (v273 = (uint64_t *)v351[51]) != 0)
                {
                  while (*v273 != v272)
                  {
                    v273 = (uint64_t *)v273[3];
                    if (!v273)
                      goto LABEL_405;
                  }
                  *v273 = v270;
                  v274 = __sb;
                  if (!__sb)
                    goto LABEL_411;
                }
                else
                {
LABEL_405:
                  v274 = __sb;
                  if (!__sb)
                    goto LABEL_411;
                }
                v275 = strlen(v274) & 0x3FFFFFFF;
                v276 = sub_1ACBE1124(v352, v275 + 81);
                v277 = v276;
                if (v276)
                {
                  *(_OWORD *)(v276 + 48) = 0u;
                  *(_OWORD *)(v276 + 64) = 0u;
                  *(_OWORD *)(v276 + 16) = 0u;
                  *(_OWORD *)(v276 + 32) = 0u;
                  *(_OWORD *)v276 = 0u;
                  *(_BYTE *)v276 = 59;
                  *(_WORD *)(v276 + 52) = -1;
                  v278 = v276 + 80;
                  *(_QWORD *)(v276 + 8) = v276 + 80;
                  if (v275)
                    memcpy((void *)(v276 + 80), __sb, v275);
                  *(_BYTE *)(v278 + v275) = 0;
                  *(_DWORD *)(v277 + 40) = 1;
                }
                v256 = sub_1ACC0241C(v351, 141, v277, v256);
                goto LABEL_411;
              }
              ++v264;
            }
          }
          if (*((unsigned __int8 *)v351 + 302) >= 2u)
            goto LABEL_393;
LABEL_411:
          if (v256 && (*(_BYTE *)(v256 + 4) & 3) == 0)
          {
            *(_DWORD *)(v256 + 56) = v325;
            if (!v183)
              goto LABEL_418;
LABEL_414:
            v279 = *v183;
            if (v183[1] <= *v183)
            {
              v281 = sub_1ACC2D4F4(*v351, v183, (unsigned __int8 *)v256);
              goto LABEL_419;
            }
            *v183 = v279 + 1;
            v280 = &v183[6 * v279];
            *((_QWORD *)v280 + 2) = 0;
            *((_QWORD *)v280 + 3) = 0;
            *((_QWORD *)v280 + 1) = v256;
            v180 = v352;
LABEL_420:
            v282 = *v183 - 1;
            if ((v350 & 0x800) == 0 || *((unsigned __int8 *)v351 + 302) > 1u)
            {
              if (v324 == 4)
              {
                v283 = sub_1ACB6DDD0(v180, "%s.%s", (uint64_t)v10, v11, v12, v13, v14, v15, (char)v345);
                v284 = &v183[6 * v282];
                *((_QWORD *)v284 + 2) = v283;
                *(_WORD *)((char *)v284 + 25) &= 0xFFFCu;
                v197 = 1;
                v231 = a2;
LABEL_439:
                v228 = v338;
                v229 = v341;
                goto LABEL_330;
              }
              if (v233)
              {
                v285 = strlen(v233);
                v286 = v285 + 1;
                if (v180)
                {
                  v287 = (void *)sub_1ACBE1124(v180, v286);
                  if (!v287)
                    goto LABEL_438;
LABEL_437:
                  memcpy(v287, v233, v286);
                }
                else
                {
                  v287 = (void *)sub_1ACB5D828(v285 + 1);
                  if (v287)
                    goto LABEL_437;
                }
              }
              else
              {
                v287 = 0;
              }
LABEL_438:
              v293 = &v183[6 * v282];
              *((_QWORD *)v293 + 2) = v287;
              *(_WORD *)((char *)v293 + 25) &= 0xFFFCu;
              v197 = 1;
              v231 = a2;
              v180 = v352;
              goto LABEL_439;
            }
            if (v341)
            {
              v288 = v341 + 24 * v226;
              v289 = *(const void **)(v288 + 16);
              if (v289)
              {
                v290 = strlen(*(const char **)(v288 + 16));
                v291 = v290 + 1;
                if (v180)
                {
                  v292 = (void *)sub_1ACBE1124(v180, v291);
                  if (v292)
                    goto LABEL_432;
                }
                else
                {
                  v292 = (void *)sub_1ACB5D828(v290 + 1);
                  if (v292)
LABEL_432:
                    memcpy(v292, v289, v291);
                }
              }
              else
              {
                v292 = 0;
              }
            }
            else
            {
              v292 = sub_1ACB6DDD0(v180, "%s.%s.%s", (uint64_t)v10, v11, v12, v13, v14, v15, (char)__sb);
            }
            v294 = &v183[6 * v282];
            v296 = *(_WORD *)((char *)v294 + 25);
            v295 = (_WORD *)((char *)v294 + 25);
            *(_QWORD *)((char *)v295 - 9) = v292;
            v297 = v296 & 0xFFFC;
            *v295 = v296 & 0xFFFC | 2;
            v231 = a2;
            v228 = v338;
            v180 = v352;
            v229 = v341;
            if ((*(_WORD *)((_BYTE *)v349 + 61) & 0x400) == 0)
              goto LABEL_455;
            v298 = (unsigned int *)*((_QWORD *)v349 + 9);
            v299 = *v298;
            if ((int)v299 < 1)
              goto LABEL_455;
            v300 = 0;
LABEL_446:
            v301 = *(_BYTE **)&v298[4 * v300 + 2];
            for (kk = v233; ; ++kk)
            {
              v303 = *v301;
              v304 = *(unsigned __int8 *)kk;
              if ((_DWORD)v303 == (_DWORD)v304)
              {
                if (!*v301)
                {
                  if ((v300 & 0x80000000) == 0)
                    goto LABEL_469;
                  goto LABEL_455;
                }
              }
              else if (byte_1ACCB6333[v303] != byte_1ACCB6333[v304])
              {
                if (++v300 != v299)
                  goto LABEL_446;
LABEL_455:
                if (!v327)
                  goto LABEL_467;
                v305 = *v327;
                if ((int)v305 < 1)
                  goto LABEL_467;
                v306 = 0;
                while (2)
                {
                  v307 = *(_BYTE **)&v327[4 * v306 + 2];
                  v308 = v233;
LABEL_461:
                  v309 = *v307;
                  v310 = *(unsigned __int8 *)v308;
                  if ((_DWORD)v309 == (_DWORD)v310)
                  {
                    if (!*v307)
                    {
                      if ((v306 & 0x80000000) == 0)
                        goto LABEL_469;
LABEL_467:
                      if ((*(_WORD *)(*(_QWORD *)(v201 + 8) + 16 * v226 + 14) & 0x400) == 0)
                      {
LABEL_468:
                        v197 = 1;
                        goto LABEL_330;
                      }
LABEL_469:
                      *v295 = v297 | 0x102;
                      v197 = 1;
LABEL_330:
                      if (++v226 >= *(__int16 *)(v201 + 54))
                        goto LABEL_275;
                      goto LABEL_331;
                    }
                  }
                  else if (byte_1ACCB6333[v309] != byte_1ACCB6333[v310])
                  {
                    if (++v306 != v305)
                      continue;
                    goto LABEL_467;
                  }
                  break;
                }
                ++v307;
                ++v308;
                goto LABEL_461;
              }
              ++v301;
            }
          }
          if (v183)
            goto LABEL_414;
LABEL_418:
          v281 = (int *)sub_1ACC2D490((_QWORD *)*v351, (unsigned __int8 *)v256);
LABEL_419:
          v183 = v281;
          v180 = v352;
          if (v281)
            goto LABEL_420;
          v197 = 1;
LABEL_275:
          v199 = v349;
          v200 = v323;
LABEL_276:
          v199 += 26;
          v196 = *v342;
          v198 = v200;
          if (v200 >= *v342)
            goto LABEL_472;
          goto LABEL_277;
        }
        ++v250;
      }
    }
    if (v192 == 141)
    {
      v193 = (unsigned __int8 *)*((_QWORD *)v320 + 3);
      if (*v193 == 180)
      {
        v338 = *(_BYTE **)(*((_QWORD *)v320 + 2) + 8);
        goto LABEL_272;
      }
    }
    if (v183)
    {
      v194 = *v183;
      if (v183[1] <= *v183)
      {
        v195 = sub_1ACC2D4F4(*v351, v183, (unsigned __int8 *)v320);
        goto LABEL_476;
      }
      *v183 = v194 + 1;
      v186 = &v183[6 * v194];
      *((_QWORD *)v186 + 2) = 0;
      *((_QWORD *)v186 + 3) = 0;
      *((_QWORD *)v186 + 1) = v320;
LABEL_260:
      v187 = &v316[6 * v319];
      v188 = &v183[6 * *v183];
      *((_QWORD *)v188 - 1) = *((_QWORD *)v187 + 1);
      *(_WORD *)((char *)v188 + 1) = *(_WORD *)((_BYTE *)v188 + 1) & 0xFFFC | *(_WORD *)((_BYTE *)v187 + 17) & 3;
      *((_QWORD *)v187 + 1) = 0;
      v189 = v319;
    }
    else
    {
      v195 = (int *)sub_1ACC2D490((_QWORD *)*v351, (unsigned __int8 *)v320);
LABEL_476:
      v183 = v195;
      v189 = v319;
      if (v195)
        goto LABEL_260;
    }
    *(_QWORD *)v191 = 0;
    v190 = v317;
LABEL_262:
    v177 = v318 | v190;
    v185 = v189 + 1;
    if (v185 < *(int *)v174)
      continue;
    break;
  }
  sub_1ACC010B0((_QWORD *)v180, v174);
  *(_QWORD *)(v179 + 32) = v183;
  if (!v183)
    return 0;
LABEL_481:
  if (*v183 > *(_DWORD *)(v180 + 144))
  {
    v62 = "too many columns in result set";
    v312 = (uint64_t)v351;
    goto LABEL_492;
  }
  if ((v177 & 0x400008) == 0)
    return 0;
  result = 0;
  *(_DWORD *)(v179 + 4) |= 0x40000u;
  return result;
}

uint64_t sub_1ACB75AF4(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  int v53;
  int *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _OWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;

  v8 = *(_DWORD *)(a2 + 4);
  if ((v8 & 4) != 0)
    return 1;
  v62 = 0;
  v10 = 0uLL;
  memset(v61, 0, sizeof(v61));
  v11 = a1[5];
  v12 = *a1;
  if ((v8 & 0x40) != 0)
  {
    v14 = 0;
    v58 = *(_QWORD *)(a2 + 80);
    v59 = *(_QWORD *)v12;
    v15 = a2;
    while (1)
    {
      *(_DWORD *)(v15 + 4) |= 4u;
      *((_QWORD *)&v61[2] + 1) = 0;
      *(_OWORD *)((char *)v61 + 8) = v10;
      *(_OWORD *)((char *)&v61[1] + 8) = v10;
      *(_QWORD *)&v61[0] = v12;
      v62 = v15;
      if (sub_1ACC0F790((uint64_t)v61, *(_QWORD *)(v15 + 96), (uint64_t)a3, a4, a5, a6, a7, a8))
        return 2;
      v22 = *(int **)(v15 + 40);
      if ((*(_BYTE *)(v15 + 6) & 1) != 0)
      {
        *(_QWORD *)(*((_QWORD *)v22 + 6) + 72) = *(_QWORD *)(v15 + 72);
        *(_QWORD *)(v15 + 72) = 0;
      }
      v60 = v14;
      if (*v22 >= 1)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = *(_QWORD *)&v22[v23 + 12];
          if (v25 && (*(_BYTE *)(v25 + 4) & 4) == 0)
          {
            if (v11)
              v26 = *(_DWORD *)(v11 + 32);
            else
              v26 = 0;
            v27 = *(_QWORD *)(v12 + 368);
            v28 = *(_QWORD *)&v22[v23 + 6];
            if (v28)
              *(_QWORD *)(v12 + 368) = v28;
            v65 = sub_1ACB75AF4;
            v66 = 0;
            v63 = v12;
            v64 = sub_1ACB75FF4;
            v67 = 0;
            v68 = (_OWORD *)v11;
            sub_1ACB73B30(&v63, (_QWORD *)v25);
            *(_QWORD *)(v12 + 368) = v27;
            if (*(_DWORD *)(v12 + 48))
              return 2;
            if (v11)
              *(_WORD *)((char *)&v22[v23 + 17] + 1) = *(_WORD *)((_BYTE *)&v22[v23 + 17] + 1) & 0xFFF7 | (8 * (*(_DWORD *)(v11 + 32) > v26));
          }
          ++v24;
          v22 = *(int **)(v15 + 40);
          v23 += 26;
        }
        while (v24 < *v22);
      }
      DWORD2(v61[2]) = 16385;
      *((_QWORD *)&v61[0] + 1) = v22;
      *((_QWORD *)&v61[1] + 1) = v11;
      if (sub_1ACC0F8AC((uint64_t)v61, *(int **)(v15 + 32), v16, v17, v18, v19, v20, v21))
        return 2;
      v29 = *(int **)(v15 + 56);
      if (v29 || (BYTE8(v61[2]) & 0x10) != 0)
      {
        v30 = DWORD2(v61[2]) & 0xFFFFBFFF;
        *(_DWORD *)(v15 + 4) |= DWORD2(v61[2]) & 0x8001000 | 8;
      }
      else
      {
        v30 = DWORD2(v61[2]) & 0xFFFFBFFE;
      }
      *(_QWORD *)&v61[1] = *(_QWORD *)(v15 + 32);
      DWORD2(v61[2]) = v30 | 0x80;
      v31 = *(_QWORD *)(v15 + 64);
      if (v31)
      {
        if ((*(_BYTE *)(v15 + 4) & 8) == 0)
        {
          v56 = "HAVING clause on a non-aggregate query";
          goto LABEL_74;
        }
        DWORD2(v61[2]) = v30 & 0xF7FF2F6F | 0x80;
        v32 = *(_QWORD *)&v61[0];
        v63 = *(_QWORD *)&v61[0];
        v64 = sub_1ACB75FF4;
        v33 = sub_1ACB75AF4;
        if ((v30 & 0x80000) != 0)
          v33 = 0;
        v65 = v33;
        v66 = 0;
        v67 = 0;
        v68 = v61;
        v34 = *(_DWORD *)(*(_QWORD *)&v61[0] + 308) + *(_DWORD *)(v31 + 40);
        *(_DWORD *)(*(_QWORD *)&v61[0] + 308) = v34;
        if (*(_DWORD *)(*(_QWORD *)v32 + 148) < v34)
        {
          sub_1ACBCB308(v32, "Expression tree is too large (maximum depth %d)", (uint64_t)a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)v32 + 148));
          return 2;
        }
        v35 = v30 & 0x8009010;
        sub_1ACC0B714((uint64_t)&v63, v31);
        v36 = v63;
        *(_DWORD *)(v63 + 308) -= *(_DWORD *)(v31 + 40);
        v37 = DWORD2(v61[2]);
        *(_DWORD *)(v31 + 4) |= WORD4(v61[2]) & 0x8010;
        DWORD2(v61[2]) = v37 | v35;
        if (SDWORD1(v61[2]) >= 1 || *(int *)(v36 + 48) > 0)
          return 2;
      }
      if (sub_1ACC0F790((uint64_t)v61, *(_QWORD *)(v15 + 48), (uint64_t)a3, a4, a5, a6, a7, a8))
        return 2;
      v39 = *(int **)(v15 + 40);
      v40 = *v39;
      if (*v39 >= 1)
      {
        v41 = 0;
        for (i = 0; i < v40; ++i)
        {
          if ((*(_WORD *)((_BYTE *)&v39[v41 + 17] + 1) & 4) != 0)
          {
            if (sub_1ACC0F8AC((uint64_t)v61, *(int **)&v39[v41 + 24], v38, a4, a5, a6, a7, a8))
              return 2;
            v39 = *(int **)(v15 + 40);
            v40 = *v39;
          }
          v41 += 26;
        }
      }
      if (*(unsigned __int8 *)(v12 + 302) >= 2u)
      {
        v43 = *(_QWORD *)(v15 + 120);
        if (v43)
        {
          while (!sub_1ACC0F8AC((uint64_t)v61, *(int **)(v43 + 24), v38, a4, a5, a6, a7, a8)
               && !sub_1ACC0F8AC((uint64_t)v61, *(int **)(v43 + 16), v44, v45, v46, v47, v48, v49))
          {
            v43 = *(_QWORD *)(v43 + 64);
            if (!v43)
              goto LABEL_47;
          }
          return 2;
        }
      }
LABEL_47:
      *((_QWORD *)&v61[1] + 1) = 0;
      DWORD2(v61[2]) |= 0x4001u;
      if ((*(_BYTE *)(v15 + 6) & 1) != 0)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 48);
        *(_QWORD *)(v15 + 72) = *(_QWORD *)(v50 + 72);
        *(_QWORD *)(v50 + 72) = 0;
      }
      a3 = *(int **)(v15 + 72);
      if (v58)
        v51 = v60 == 0;
      else
        v51 = 0;
      v52 = v51;
      if (a3
        && (v52 & 1) == 0
        && sub_1ACB782E0((unsigned __int8 **)v61, v15, a3, "ORDER", a5, a6, a7, a8)
        || *(_BYTE *)(v59 + 103))
      {
        return 2;
      }
      DWORD2(v61[2]) &= ~0x4000u;
      v10 = 0uLL;
      if (v29)
      {
        if (sub_1ACB782E0((unsigned __int8 **)v61, v15, v29, "GROUP", a5, a6, a7, a8)
          || *(_BYTE *)(v59 + 103))
        {
          return 2;
        }
        v53 = *v29;
        v10 = 0uLL;
        if (*v29 >= 1)
          break;
      }
LABEL_66:
      v55 = *(_QWORD *)(v15 + 88);
      if (v55 && **(_DWORD **)(v15 + 32) != **(_DWORD **)(v55 + 32))
      {
        sub_1ACC10700(v12, (_BYTE *)v55, (uint64_t)a3, a4, a5, a6, a7, a8, v57);
        return 2;
      }
      v15 = *(_QWORD *)(v15 + 80);
      v14 = v60 + 1;
      if (!v15)
      {
        if (v58 && sub_1ACC10774((unsigned __int8 *)v12, (_QWORD *)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          return 2;
        return 1;
      }
    }
    v54 = v29 + 2;
    while ((*(_BYTE *)(*(_QWORD *)v54 + 4) & 0x10) == 0)
    {
      v54 += 6;
      if (!--v53)
        goto LABEL_66;
    }
    v56 = "aggregate functions are not allowed in the GROUP BY clause";
LABEL_74:
    sub_1ACBCB308(v12, v56, (uint64_t)a3, a4, a5, a6, a7, a8, v57);
    return 2;
  }
  else
  {
    sub_1ACC10600(*a1, a2, v11);
    if (*(_DWORD *)(v12 + 48))
      return 2;
    else
      return 1;
  }
}

uint64_t sub_1ACB75FF4(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  char *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t result;
  _QWORD *v55;
  unsigned __int8 **v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  char *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _BOOL4 v72;
  _BYTE *v73;
  unsigned int v74;
  BOOL v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int v80;
  int v81;
  _BYTE *v82;
  unsigned __int8 *v83;
  _BYTE *v84;
  const char *v85;
  uint64_t *v86;
  unsigned int v87;
  int v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  int v97;
  int v98;
  _DWORD *v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  int *v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  unsigned __int8 *n;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  __int16 v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  _BYTE *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *k;
  uint64_t v135;
  uint64_t v136;
  uint64_t m;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  unsigned __int8 **v143;
  int v144;
  uint64_t v145;
  unsigned __int8 **v146;
  int v147;
  unsigned __int8 *v148;
  unsigned __int8 *kk;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 **v152;
  const char *v153;
  unsigned __int8 *ii;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v157;
  const char *v158;
  unsigned __int8 *jj;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  unsigned __int8 *mm;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  signed int v173;
  unsigned __int8 *v174;
  _BYTE *v175;
  unsigned __int8 *nn;
  uint64_t v177;
  uint64_t v178;
  signed int v179;
  unsigned __int8 *v180;
  const char *i1;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 *v184;
  const char *i2;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  const char *i3;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned __int8 *v193;
  const char *i4;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  const char *i5;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;
  const char *i6;
  uint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  uint64_t i7;
  unsigned int *v208;
  _BYTE *v209;
  _BYTE *v210;
  unsigned __int8 *i8;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 *v214;
  int v215;
  uint64_t v216;
  int v217;
  char *v218;
  unsigned int *v219;
  _DWORD **v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  char *j;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 **v229;
  char v230;
  const char *v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  int v238;
  unsigned __int8 *v239;
  unsigned __int8 *i;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  int v261;
  int v262;
  const char *v263;
  uint64_t v264;
  int v265;
  unsigned __int8 *v266;
  uint64_t v267;
  uint64_t v268;
  __int16 v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  int v278;
  int v279;
  uint64_t *i9;
  BOOL v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  unsigned __int8 *v290;
  _DWORD *v291;
  int v292;
  uint64_t *i10;
  BOOL v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  __int16 v302;
  _BYTE *v303;
  const char *v304;
  _BYTE *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  _QWORD *v315;
  uint64_t v316;
  unsigned __int8 *v317;
  int16x8_t v318;
  int8x16_t v319;
  uint64_t v320;
  int16x8_t v321;
  int8x16_t v322;
  uint16x8_t v323;
  uint16x8_t v324;
  int8x16_t v325;
  int16x8_t v326;
  int16x8_t v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unsigned int v330;
  int v331;
  uint64_t v332;
  unsigned __int8 *v333;
  int16x8_t v334;
  int8x16_t v335;
  uint64_t v336;
  int16x8_t v337;
  int8x16_t v338;
  uint16x8_t v339;
  uint16x8_t v340;
  int8x16_t v341;
  int16x8_t v342;
  int16x8_t v343;
  uint64_t v344;
  unsigned __int8 *v345;
  unsigned int v346;
  unsigned __int8 *v347;
  uint64_t v348;
  unsigned __int8 *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  int v355;
  unsigned int *v356;
  uint64_t *v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  char v364;
  char v365;
  BOOL v366;
  int *v367;
  unsigned int *v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  unsigned __int8 *v373;
  uint64_t v374;
  uint64_t v375;
  int *v376;
  uint64_t v377;
  unsigned __int8 *v378;
  uint64_t v379;
  unsigned __int8 *v380;
  unsigned __int8 *v381;
  _DWORD *v382;
  int v383;
  uint64_t v384;
  char *v385;
  int __src;
  int __srca;
  unsigned __int8 *__srcb;
  _QWORD v389[3];
  _QWORD *v390;
  _DWORD *v391[4];
  uint64_t v392;
  _QWORD *v393;
  int8x16x2_t v394;
  int8x16x2_t v395;

  v13 = a1[5];
  v14 = *(_QWORD *)v13;
  v15 = a2;
  switch(*a2)
  {
    case 0x14u:
    case 0x31u:
    case 0x8Au:
      if ((a2[5] & 0x10) == 0)
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      v20 = *(_DWORD *)(v13 + 32);
      if ((*(_DWORD *)(v13 + 40) & 0x2E) != 0)
      {
        sub_1ACBCB308(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"subqueries");
        *v15 = 121;
        v21 = v15;
        while (1)
        {
          if ((v21[4] & 3) == 0)
          {
            v22 = *((_DWORD *)v21 + 14);
            if (v22 > 0)
              break;
          }
          v21 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
          if (!v21)
            goto LABEL_68;
        }
        *(_DWORD *)(*(_QWORD *)v14 + 84) = v22;
      }
      else
      {
        sub_1ACB73B30(a1, *((_QWORD **)a2 + 4));
      }
LABEL_68:
      if (v20 != *(_DWORD *)(v13 + 32))
        *((_DWORD *)v15 + 1) |= 0x40u;
      *(_DWORD *)(v13 + 40) |= 0x40u;
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x2Du:
    case 0xABu:
      v23 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      if (!v23)
        goto LABEL_2;
      while (1)
      {
        v24 = *((_DWORD *)v23 + 1);
        if ((v24 & 0x82000) == 0)
          break;
        if ((v24 & 0x80000) == 0)
        {
          v23 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
          if (!v23)
            goto LABEL_2;
          continue;
        }
        v23 = *(unsigned __int8 **)(*((_QWORD *)v23 + 4) + 8);
        if (!v23)
          goto LABEL_2;
      }
      v53 = *v23;
      if (v53 == 170 || v53 == 59)
      {
        result = sub_1ACB75FF4(a1, v23);
        if ((_DWORD)result == 2)
          return result;
        if (*v23 == 170)
        {
          result = 0;
          v15[2] = *v15;
          *v15 = -81;
          return result;
        }
      }
LABEL_2:
      if (*(_BYTE *)(*(_QWORD *)v14 + 103))
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      v17 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
      v18 = *v17;
      if (v18 == 176)
        v18 = v17[2];
      if (v18 == 138)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)v17 + 4);
      }
      else if (v18 != 177)
      {
        v19 = 1;
        goto LABEL_32;
      }
      v19 = **((_DWORD **)v17 + 4);
LABEL_32:
      if (*v15 != 48)
      {
        v37 = (unsigned __int8 *)*((_QWORD *)v15 + 3);
        v38 = *v37;
        if (v38 == 176)
          v38 = v37[2];
        if (v38 == 138)
        {
LABEL_77:
          v37 = (unsigned __int8 *)*((_QWORD *)v37 + 4);
          goto LABEL_78;
        }
        goto LABEL_41;
      }
      v33 = *((_QWORD *)v15 + 4);
      v34 = *(unsigned __int8 **)(v33 + 8);
      v35 = *v34;
      if (v35 == 176)
        v35 = v34[2];
      if (v35 == 138)
      {
        v34 = (unsigned __int8 *)*((_QWORD *)v34 + 4);
      }
      else if (v35 != 177)
      {
        v36 = 1;
        goto LABEL_73;
      }
      v36 = **((_DWORD **)v34 + 4);
LABEL_73:
      if (v36 != v19)
        goto LABEL_79;
      v37 = *(unsigned __int8 **)(v33 + 32);
      v38 = *v37;
      if (v38 == 176)
        v38 = v37[2];
      if (v38 == 138)
        goto LABEL_77;
LABEL_41:
      if (v38 != 177)
      {
        v36 = 1;
        goto LABEL_79;
      }
LABEL_78:
      v36 = **((_DWORD **)v37 + 4);
LABEL_79:
      if (v19 != v36)
      {
        sub_1ACBCB308(v14, "row value misused", a3, a4, a5, a6, a7, a8, v364);
        v49 = *(_QWORD *)v14;
        while (1)
        {
          if ((v15[4] & 3) == 0)
          {
            v50 = *((_DWORD *)v15 + 14);
            if (v50 > 0)
              break;
          }
          v15 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
          if (!v15)
            return 2 * (*(_DWORD *)(v14 + 48) != 0);
        }
LABEL_84:
        *(_DWORD *)(v49 + 84) = v50;
      }
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x30u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
      goto LABEL_2;
    case 0x32u:
    case 0x33u:
      v25 = *(_QWORD *)(v13 + 24);
      if (v25)
      {
        v8 = *(_DWORD *)(v25 + 32);
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
        {
          v9 = *(_DWORD *)(v26 + 32);
          v27 = *(_QWORD *)(v26 + 24);
          if (v27)
          {
            v11 = *(_DWORD *)(v27 + 32);
            v28 = *(_QWORD *)(v27 + 24);
            if (v28)
            {
              v12 = *(_DWORD *)(v28 + 32);
              v29 = *(_QWORD *)(v28 + 24);
              if (v29)
              {
                v30 = *(_QWORD *)v13;
                v10 = *(_DWORD *)(v29 + 32);
                v31 = *(_QWORD *)(v29 + 24);
                if (v31)
                {
                  __src = *(_DWORD *)(v31 + 32);
                  v32 = *(_QWORD *)(v31 + 24);
                  if (v32)
                    v383 = *(_DWORD *)(v32 + 32);
                }
              }
              else
              {
                v30 = *(_QWORD *)v13;
              }
            }
            else
            {
              v30 = *(_QWORD *)v13;
            }
          }
          else
          {
            v30 = *(_QWORD *)v13;
          }
        }
        else
        {
          v30 = *(_QWORD *)v13;
        }
      }
      else
      {
        v30 = *(_QWORD *)v13;
      }
      v238 = *(_DWORD *)(v13 + 32);
      v239 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      if (v239)
      {
        sub_1ACC0B714((uint64_t)a1, (uint64_t)v239);
        v239 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
      }
      for (i = v239; ; i = (unsigned __int8 *)*((_QWORD *)i + 2))
      {
        v241 = *i;
        if ((v241 - 173) >= 2)
          break;
      }
      if (v241 == 176)
        v241 = i[2];
      if ((v241 - 153) < 3
        || v241 == 117
        || v241 == 167
        && (i[6] & 0x20) == 0
        && (v242 = *((_QWORD *)i + 9)) != 0
        && ((v243 = *((unsigned int *)i + 12), (v243 & 0x80000000) != 0)
         || (v244 = *(_QWORD *)(v242 + 8)) == 0
         || (*(_BYTE *)(v244 + 16 * v243 + 8) & 0xF) != 0))
      {
        if (*(unsigned __int8 *)(v30 + 302) <= 1u)
        {
          v245 = *v15 == 51;
          *((_DWORD *)v15 + 1) |= 0x800u;
          *((_DWORD *)v15 + 2) = v245;
          *v15 = -101;
          *(_DWORD *)(v13 + 32) = v238;
          v246 = *(_QWORD *)(v13 + 24);
          if (v246)
          {
            *(_DWORD *)(v246 + 32) = v8;
            v247 = *(_QWORD *)(v246 + 24);
            if (v247)
            {
              *(_DWORD *)(v247 + 32) = v9;
              v248 = *(_QWORD *)(v247 + 24);
              if (v248)
              {
                *(_DWORD *)(v248 + 32) = v11;
                v249 = *(_QWORD *)(v248 + 24);
                if (v249)
                {
                  *(_DWORD *)(v249 + 32) = v12;
                  v250 = *(_QWORD *)(v249 + 24);
                  if (v250)
                  {
                    *(_DWORD *)(v250 + 32) = v10;
                    v251 = *(_QWORD *)(v250 + 24);
                    if (v251)
                    {
                      *(_DWORD *)(v251 + 32) = __src;
                      v252 = *(_QWORD *)(v251 + 24);
                      if (v252)
                        *(_DWORD *)(v252 + 32) = v383;
                    }
                  }
                }
              }
            }
          }
          if (v239)
            sub_1ACBF8348(*(_QWORD **)v30, v239);
          *((_QWORD *)v15 + 2) = 0;
        }
      }
      return 1;
    case 0x3Bu:
      v369 = a1[5];
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v379 = *(_QWORD *)v14;
      v391[0] = 0;
      *((_DWORD *)a2 + 11) = -1;
      v367 = (int *)(a2 + 44);
      goto LABEL_168;
    case 0x4Bu:
      v43 = *(_QWORD *)(v13 + 8);
      *(_WORD *)a2 = 17575;
      *((_QWORD *)a2 + 9) = *(_QWORD *)(v43 + 40);
      v44 = *((_DWORD *)a2 + 12) - 1;
      *((_DWORD *)a2 + 11) = *(_DWORD *)(v43 + 72);
      *((_DWORD *)a2 + 12) = v44;
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
    case 0x8Du:
      v45 = *((_QWORD *)a2 + 2);
      if ((*(_DWORD *)(v13 + 40) & 0x28) == 0)
        goto LABEL_51;
      sub_1ACBCB308(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"the \".\" operator");
      v46 = v15;
      while (1)
      {
        if ((v46[4] & 3) == 0)
        {
          v47 = *((_DWORD *)v46 + 14);
          if (v47 > 0)
            break;
        }
        v46 = (unsigned __int8 *)*((_QWORD *)v46 + 2);
        if (!v46)
          goto LABEL_51;
      }
      *(_DWORD *)(*(_QWORD *)v14 + 84) = v47;
LABEL_51:
      v48 = *((_QWORD *)v15 + 3);
      v369 = v13;
      if (*(_BYTE *)v48 == 59)
      {
        v40 = 0;
      }
      else
      {
        v40 = *(char **)(v45 + 8);
        v45 = *(_QWORD *)(v48 + 16);
        v48 = *(_QWORD *)(v48 + 24);
      }
      v39 = *(unsigned __int8 **)(v45 + 8);
      v42 = *(unsigned __int8 **)(v48 + 8);
      if (*(unsigned __int8 *)(v14 + 302) >= 2u)
      {
        v55 = *(_QWORD **)(v14 + 408);
        if (v55)
        {
          v56 = *(unsigned __int8 ***)(v14 + 408);
          while (*v56 != (unsigned __int8 *)v48)
          {
            v56 = (unsigned __int8 **)v56[3];
            if (!v56)
              goto LABEL_110;
          }
          *v56 = v15;
          v55 = *(_QWORD **)(v14 + 408);
LABEL_110:
          if (v55)
          {
            while (*v55 != v45)
            {
              v55 = (_QWORD *)v55[3];
              if (!v55)
                goto LABEL_164;
            }
            *v55 = v15 + 72;
          }
        }
      }
LABEL_164:
      v91 = *(_QWORD *)v14;
      v391[0] = 0;
      *((_DWORD *)v15 + 11) = -1;
      v367 = (int *)(v15 + 44);
      v379 = v91;
      if (!v40)
        goto LABEL_167;
      if ((*(_BYTE *)(v13 + 40) & 6) != 0)
      {
        v40 = 0;
LABEL_167:
        v41 = 0;
        goto LABEL_168;
      }
      v221 = *(unsigned int *)(v91 + 40);
      if ((int)v221 >= 1)
      {
        v222 = 0;
        v223 = *(_QWORD *)(v91 + 32);
        while (1)
        {
          v224 = *(_BYTE **)(v223 + 32 * v222);
          for (j = v40; ; ++j)
          {
            v226 = *v224;
            v227 = *j;
            if ((_DWORD)v226 != (_DWORD)v227)
              break;
            if (!*v224)
            {
              v41 = *(_QWORD *)(v223 + 32 * v222 + 24);
              goto LABEL_454;
            }
LABEL_431:
            ++v224;
          }
          if (byte_1ACCB6333[v226] == byte_1ACCB6333[v227])
            goto LABEL_431;
          if (++v222 == v221)
          {
            v41 = 0;
            goto LABEL_455;
          }
        }
      }
      LODWORD(v222) = 0;
      v41 = 0;
LABEL_454:
      if ((_DWORD)v222 != (_DWORD)v221)
        goto LABEL_168;
LABEL_455:
      v233 = 0;
      while (2)
      {
        v234 = aMain[v233];
        v235 = v40[v233];
        if ((_DWORD)v234 != (_DWORD)v235)
        {
          if (byte_1ACCB6333[v234] != byte_1ACCB6333[v235])
            goto LABEL_168;
          goto LABEL_457;
        }
        if (aMain[v233])
        {
LABEL_457:
          ++v233;
          continue;
        }
        break;
      }
      v236 = *(_QWORD *)(v91 + 32);
      v41 = *(_QWORD *)(v236 + 24);
      v40 = *(char **)v236;
LABEL_168:
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v366 = v39 == 0;
      v380 = v15;
      v381 = v39;
      v378 = v15 + 72;
      v368 = (unsigned int *)(v14 + 176);
      v373 = v42 + 1;
      v374 = v14;
      v95 = v369;
      v385 = v40;
      __srcb = v42;
      while (2)
      {
        v96 = *(int **)(v95 + 8);
        if (v96)
        {
          v371 = v93;
          v372 = v95;
          v375 = v41;
          if (*v96 >= 1)
          {
            v97 = 0;
            v98 = 0;
            v99 = v96 + 2;
            v376 = *(int **)(v95 + 8);
            while (1)
            {
              v100 = *((_QWORD *)v99 + 4);
              if ((*(_WORD *)((_BYTE *)v99 + 61) & 0x2000) != 0)
                break;
              if (!v39)
                goto LABEL_178;
LABEL_243:
              if (v40)
              {
                if (*(_QWORD *)(v100 + 96) != v375)
                  goto LABEL_175;
                if (!v375)
                {
                  v144 = strcmp(v40, "*");
                  v40 = v385;
                  v42 = __srcb;
                  v39 = v381;
                  if (v144)
                    goto LABEL_175;
                }
              }
              v132 = *((_QWORD *)v99 + 3);
              if (v132)
              {
                v133 = v39;
                for (k = (unsigned __int8 *)*((_QWORD *)v99 + 3); ; ++k)
                {
                  v135 = *v133;
                  v136 = *k;
                  if ((_DWORD)v135 == (_DWORD)v136)
                  {
                    if (!*v133)
                      goto LABEL_277;
                  }
                  else if (byte_1ACCB6333[v135] != byte_1ACCB6333[v136])
                  {
                    goto LABEL_175;
                  }
                  ++v133;
                }
              }
              for (m = 0; ; ++m)
              {
                v138 = v39[m];
                v139 = *(unsigned __int8 *)(*(_QWORD *)v100 + m);
                if ((_DWORD)v138 != (_DWORD)v139)
                  break;
                if (!v39[m])
                  goto LABEL_277;
LABEL_255:
                ;
              }
              if (byte_1ACCB6333[v138] == byte_1ACCB6333[v139])
                goto LABEL_255;
              if (*(_DWORD *)(v100 + 40) != 1)
                goto LABEL_175;
              v142 = sub_1ACC100B8((uint64_t)v39, v100, v375);
              v40 = v385;
              v42 = __srcb;
              v39 = v381;
              if (!v142)
                goto LABEL_175;
LABEL_277:
              if (v132)
              {
                if (*(unsigned __int8 *)(v374 + 302) >= 2u)
                {
                  v143 = *(unsigned __int8 ***)(v374 + 408);
                  if (v143)
                  {
                    while (*v143 != v378)
                    {
                      v143 = (unsigned __int8 **)v143[3];
                      if (!v143)
                        goto LABEL_178;
                    }
                    *v143 = 0;
                  }
                }
              }
LABEL_178:
              if (v42 && (v101 = *v42) != 0)
              {
                v102 = 0;
                v103 = v373;
                do
                {
                  v102 += byte_1ACCB6333[v101];
                  v104 = *v103++;
                  v101 = v104;
                }
                while (v104);
              }
              else
              {
                LOBYTE(v102) = 0;
              }
              v118 = *(__int16 *)(v100 + 54);
              if (v118 < 1)
              {
LABEL_269:
                if (!v97)
                  goto LABEL_270;
                goto LABEL_175;
              }
              v119 = 0;
              v120 = *(_QWORD *)(v100 + 8);
              while (2)
              {
                if (*(unsigned __int8 *)(v120 + 11) != v102)
                {
LABEL_215:
                  ++v119;
                  v120 += 16;
                  if (v119 == v118)
                  {
                    v39 = v381;
                    v40 = v385;
                    if (!v97)
                      goto LABEL_270;
                    goto LABEL_175;
                  }
                  continue;
                }
                break;
              }
              v121 = *(_BYTE **)v120;
              v122 = v42;
              while (2)
              {
                v123 = *v121;
                v124 = *v122;
                if ((_DWORD)v123 != (_DWORD)v124)
                {
                  if (byte_1ACCB6333[v123] != byte_1ACCB6333[v124])
                    goto LABEL_215;
LABEL_219:
                  ++v121;
                  ++v122;
                  continue;
                }
                break;
              }
              if (*v121)
                goto LABEL_219;
              if (v97 < 1)
                goto LABEL_264;
              if ((*(_WORD *)((_BYTE *)v99 + 61) & 0x400) == 0
                || (v125 = (unsigned int *)*((_QWORD *)v99 + 9), v126 = *v125, (int)v126 < 1))
              {
LABEL_261:
                if (v391[0])
                {
                  sub_1ACC010B0((_QWORD *)v379, (_QWORD *)v391[0]);
                  v42 = __srcb;
                }
                goto LABEL_263;
              }
              v127 = 0;
              while (2)
              {
                v128 = *(_BYTE **)&v125[4 * v127 + 2];
                v129 = v42;
LABEL_229:
                v130 = *v128;
                v131 = *v129;
                if ((_DWORD)v130 != (_DWORD)v131)
                {
                  if (byte_1ACCB6333[v130] != byte_1ACCB6333[v131])
                  {
                    if (++v127 != v126)
                      continue;
                    goto LABEL_261;
                  }
LABEL_228:
                  ++v128;
                  ++v129;
                  goto LABEL_229;
                }
                break;
              }
              if (*v128)
                goto LABEL_228;
              if ((v127 & 0x80000000) != 0)
                goto LABEL_261;
              if ((v99[15] & 0x10) == 0)
                goto LABEL_215;
              if ((v99[15] & 8) != 0)
              {
                sub_1ACC0FFDC((uint64_t *)v374, v391, v94, *((__int16 *)v15 + 24));
                v42 = __srcb;
                goto LABEL_264;
              }
              if (v391[0])
              {
                sub_1ACC010B0((_QWORD *)v379, (_QWORD *)v391[0]);
                v42 = __srcb;
              }
              v97 = 0;
LABEL_263:
              v391[0] = 0;
LABEL_264:
              ++v97;
              if (v119 == *(__int16 *)(v100 + 52))
                v140 = -1;
              else
                v140 = (__int16)v119;
              v39 = v381;
              *((_DWORD *)v15 + 12) = v140;
              v40 = v385;
              if ((*(_WORD *)((_BYTE *)v99 + 61) & 0x2000) == 0)
              {
                v94 = (uint64_t)v99;
                goto LABEL_269;
              }
              v141 = *(_QWORD *)(*((_QWORD *)v99 + 5) + 32) + 24 * v119;
              *(_WORD *)(v141 + 25) |= 0x40u;
              v94 = (uint64_t)v99;
              if (!v97)
              {
LABEL_270:
                v92 += ((*(_DWORD *)(v100 + 48) & 0x200u) >> 9) ^ 1;
                if ((*(_DWORD *)(v100 + 48) & 0x200) == 0)
                  v94 = (uint64_t)v99;
              }
LABEL_175:
              ++v98;
              v99 += 26;
              if (v98 >= *v96)
                goto LABEL_289;
            }
            v377 = *((_QWORD *)v99 + 4);
            v105 = *(int **)(*((_QWORD *)v99 + 5) + 32);
            v106 = *v105;
            if (*v105 < 1)
            {
              v108 = 0;
LABEL_241:
              if (!v39)
              {
LABEL_174:
                v96 = v376;
                goto LABEL_175;
              }
              v96 = v376;
              v100 = v377;
              if (v108)
                goto LABEL_175;
              goto LABEL_243;
            }
            v107 = 0;
            v108 = 0;
LABEL_187:
            if (!sub_1ACC0FE54((uint64_t)&v105[6 * v107 + 2], v42, v39, (unsigned __int8 *)v40))
            {
LABEL_185:
              v39 = v381;
              v40 = v385;
              v42 = __srcb;
              goto LABEL_186;
            }
            if (v97 < 1)
              goto LABEL_209;
            if ((*(_WORD *)((_BYTE *)v99 + 61) & 0x400) == 0
              || (v109 = (unsigned int *)*((_QWORD *)v99 + 9), v110 = *v109, (int)v110 < 1))
            {
LABEL_206:
              if (v391[0])
                sub_1ACC010B0((_QWORD *)v379, (_QWORD *)v391[0]);
LABEL_208:
              v391[0] = 0;
              goto LABEL_209;
            }
            v111 = 0;
LABEL_192:
            v112 = *(_BYTE **)&v109[4 * v111 + 2];
            for (n = __srcb; ; ++n)
            {
              v114 = *v112;
              v115 = *n;
              if ((_DWORD)v114 == (_DWORD)v115)
              {
                if (!*v112)
                {
                  if ((v111 & 0x80000000) != 0)
                    goto LABEL_206;
                  if ((v99[15] & 0x10) == 0)
                    goto LABEL_185;
                  if ((v99[15] & 8) == 0)
                  {
                    if (v391[0])
                      sub_1ACC010B0((_QWORD *)v379, (_QWORD *)v391[0]);
                    v97 = 0;
                    goto LABEL_208;
                  }
                  sub_1ACC0FFDC((uint64_t *)v374, v391, v94, *((__int16 *)v15 + 24));
LABEL_209:
                  ++v97;
                  v39 = v381;
                  *((_DWORD *)v15 + 12) = v107;
                  v116 = &v105[6 * v107];
                  v117 = *(_WORD *)((char *)v116 + 25);
                  *(_WORD *)((char *)v116 + 25) = v117 | 0x40;
                  v40 = v385;
                  v42 = __srcb;
                  if ((v117 & 0x80) != 0)
                  {
                    v92 = 2;
                    v94 = (uint64_t)v99;
                    goto LABEL_174;
                  }
                  v106 = *v105;
                  v108 = 1;
                  v92 = 2;
                  v94 = (uint64_t)v99;
LABEL_186:
                  if (++v107 >= v106)
                    goto LABEL_241;
                  goto LABEL_187;
                }
              }
              else if (byte_1ACCB6333[v114] != byte_1ACCB6333[v115])
              {
                if (++v111 == v110)
                  goto LABEL_206;
                goto LABEL_192;
              }
              ++v112;
            }
          }
          v97 = 0;
LABEL_289:
          v41 = v375;
          if (v94)
          {
            *v367 = *(_DWORD *)(v94 + 64);
            v145 = *(_QWORD *)(v94 + 32);
            *(_QWORD *)v378 = v145;
            v14 = v374;
            v95 = v372;
            v93 = v371;
            if ((*(_BYTE *)(v94 + 60) & 0x48) != 0)
              *((_DWORD *)v15 + 1) |= 0x200000u;
            v41 = *(_QWORD *)(v145 + 96);
            if (v97)
              goto LABEL_378;
          }
          else
          {
            v14 = v374;
            v95 = v372;
            v93 = v371;
            if (v97)
              goto LABEL_378;
          }
        }
        else
        {
          v97 = 0;
        }
        if (v40)
          goto LABEL_378;
        v146 = *(unsigned __int8 ***)v368;
        if (*(_QWORD *)v368)
        {
          v147 = *(unsigned __int8 *)(v14 + 218);
          if (!*(_BYTE *)(v14 + 219))
          {
            if (v39 && v147 != 128)
            {
              v153 = "new";
              for (ii = v39; ; ++ii)
              {
                v155 = *(unsigned __int8 *)v153;
                v156 = *ii;
                if ((_DWORD)v155 == (_DWORD)v156)
                {
                  if (!*v153)
                  {
                    v157 = 1;
                    goto LABEL_324;
                  }
                }
                else if (byte_1ACCB6333[v155] != byte_1ACCB6333[v156])
                {
                  break;
                }
                ++v153;
              }
            }
            v152 = 0;
            if (v39 && v147 != 127)
            {
              v158 = "old";
              for (jj = v39; ; ++jj)
              {
                v160 = *(unsigned __int8 *)v158;
                v161 = *jj;
                if ((_DWORD)v160 == (_DWORD)v161)
                {
                  if (!*v158)
                  {
                    v157 = 0;
                    goto LABEL_324;
                  }
                }
                else if (byte_1ACCB6333[v160] != byte_1ACCB6333[v161])
                {
                  goto LABEL_305;
                }
                ++v158;
              }
            }
            goto LABEL_325;
          }
          if ((*(_BYTE *)(v95 + 41) & 4) != 0)
          {
            if (v39)
            {
              v148 = *v146;
              for (kk = v39; ; ++kk)
              {
                v150 = *kk;
                v151 = *v148;
                if ((_DWORD)v150 == (_DWORD)v151)
                {
                  if (!*kk)
                    break;
                }
                else if (byte_1ACCB6333[v150] != byte_1ACCB6333[v151])
                {
                  goto LABEL_305;
                }
                ++v148;
              }
            }
            v157 = v147 != 128;
LABEL_324:
            *v367 = v157;
            v152 = v146;
LABEL_325:
            if (!v39)
              goto LABEL_334;
LABEL_326:
            if ((*(_DWORD *)(v95 + 40) & 0x200) != 0)
            {
              v162 = *(_QWORD *)(v95 + 16);
              if (v162)
              {
                v163 = "excluded";
                for (mm = v39; ; ++mm)
                {
                  v165 = *(unsigned __int8 *)v163;
                  v166 = *mm;
                  if ((_DWORD)v165 == (_DWORD)v166)
                  {
                    if (!*v163)
                    {
                      v152 = *(unsigned __int8 ***)(*(_QWORD *)(v162 + 64) + 40);
                      *v367 = 2;
                      goto LABEL_334;
                    }
                  }
                  else if (byte_1ACCB6333[v165] != byte_1ACCB6333[v166])
                  {
                    goto LABEL_334;
                  }
                  ++v163;
                }
              }
            }
            goto LABEL_334;
          }
        }
LABEL_305:
        v152 = 0;
        if (v39)
          goto LABEL_326;
LABEL_334:
        if (v152)
        {
          if (v42 && (v167 = *v42) != 0)
          {
            v168 = 0;
            v169 = v373;
            do
            {
              v168 += byte_1ACCB6333[v167];
              v170 = *v169++;
              v167 = v170;
            }
            while (v170);
          }
          else
          {
            LOBYTE(v168) = 0;
          }
          v41 = (uint64_t)v152[12];
          v171 = v152[1];
          v172 = *((__int16 *)v152 + 27);
          if (v172 < 1)
          {
            v179 = 0;
          }
          else
          {
            v173 = 0;
            v174 = v152[1];
            do
            {
              if (v174[11] == v168)
              {
                v175 = *(_BYTE **)v174;
                for (nn = v42; ; ++nn)
                {
                  v177 = *v175;
                  v178 = *nn;
                  if ((_DWORD)v177 == (_DWORD)v178)
                  {
                    if (!*v175)
                    {
                      if (v173 == *((__int16 *)v152 + 26))
                        v179 = -1;
                      else
                        v179 = v173;
                      v39 = v381;
                      v40 = v385;
                      if (v179 < v172)
                        goto LABEL_376;
                      goto LABEL_358;
                    }
                  }
                  else if (byte_1ACCB6333[v177] != byte_1ACCB6333[v178])
                  {
                    break;
                  }
                  ++v175;
                }
              }
              ++v173;
              v174 += 16;
            }
            while (v173 != v172);
            v179 = *((__int16 *)v152 + 27);
          }
LABEL_358:
          v180 = v42;
          for (i1 = "_ROWID_"; ; ++i1)
          {
            v182 = *v180;
            v183 = *(unsigned __int8 *)i1;
            if ((_DWORD)v182 == (_DWORD)v183)
            {
              if (!*v180)
              {
LABEL_373:
                if ((*((_BYTE *)v152 + 49) & 2) == 0)
                  v179 = -1;
LABEL_375:
                v39 = v381;
                v40 = v385;
LABEL_376:
                if (v179 >= v172)
                {
                  v97 = 0;
                  ++v92;
                  goto LABEL_378;
                }
                v253 = *v367;
                if (*v367 == 2)
                {
                  v218 = (char *)v15;
                  v219 = v368;
                  v216 = v369;
                  if (*(unsigned __int8 *)(v14 + 302) >= 2u)
                  {
                    v94 = 0;
                    *((_DWORD *)v15 + 12) = v179;
                    *((_QWORD *)v15 + 9) = v152;
                    v97 = 1;
                    goto LABEL_542;
                  }
                  v300 = (__int16)v179;
                  if ((v179 & 0x8000) == 0 && ((_DWORD)v152[6] & 0x20) != 0)
                  {
                    if ((_WORD)v179)
                    {
                      if ((v179 << 16) >= 0x110000)
                      {
                        v332 = v179 & 0xF;
                        if ((v179 & 0xF) == 0)
                          v332 = 16;
                        v301 = v300 - v332;
                        v333 = v171 + 142;
                        v334 = 0uLL;
                        v335.i64[0] = 0x1000100010001;
                        v335.i64[1] = 0x1000100010001;
                        v336 = v301;
                        v337 = 0uLL;
                        do
                        {
                          v338 = vqtbl2q_s8(*((int8x16x2_t *)v333 - 2), (int8x16_t)xmmword_1ACCBDDC0);
                          v338.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v333 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
                          v339.i32[0] = vzip1q_s16(*((int16x8_t *)v333 - 8), *((int16x8_t *)v333 - 7)).u32[0];
                          v339.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v333 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                          v339.i64[1] = v338.i64[1];
                          v340 = (uint16x8_t)vqtbl2q_s8(*((int8x16x2_t *)v333 + 3), (int8x16_t)xmmword_1ACCBDDB0);
                          v395 = *(int8x16x2_t *)(v333 + 1);
                          v341 = vqtbl2q_s8(*((int8x16x2_t *)v333 + 2), (int8x16_t)xmmword_1ACCBDDC0);
                          v343 = *(int16x8_t *)v333;
                          v342 = *((int16x8_t *)v333 + 1);
                          v333 += 256;
                          v341.i32[3] = v340.i32[3];
                          v340.i32[0] = vzip1q_s16(v343, v342).u32[0];
                          v340.i32[1] = vqtbl2q_s8(v395, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                          v340.i64[1] = v341.i64[1];
                          v334 = vaddq_s16((int16x8_t)vbicq_s8(v335, (int8x16_t)vshrq_n_u16(v339, 5uLL)), v334);
                          v337 = vaddq_s16((int16x8_t)vbicq_s8(v335, (int8x16_t)vshrq_n_u16(v340, 5uLL)), v337);
                          v336 -= 16;
                        }
                        while (v336);
                        v302 = vaddvq_s16(vaddq_s16(v337, v334));
                      }
                      else
                      {
                        v301 = 0;
                        v302 = 0;
                      }
                      v344 = v300 - v301;
                      v345 = &v171[16 * v301 + 14];
                      do
                      {
                        v346 = *(unsigned __int16 *)v345;
                        v345 += 16;
                        v302 += ((v346 >> 5) & 1) == 0;
                        --v344;
                      }
                      while (v344);
                    }
                    else
                    {
                      v302 = 0;
                    }
                    if ((*(_WORD *)&v171[16 * v300 + 14] & 0x20) != 0)
                      LOWORD(v300) = v179 - v302 + *((_WORD *)v152 + 28);
                    else
                      LOWORD(v300) = v302;
                  }
                  v94 = 0;
                  v331 = *(_DWORD *)(*(_QWORD *)(v95 + 16) + 72) + (__int16)v300;
LABEL_666:
                  *v367 = v331;
                  v97 = 1;
                  v232 = -80;
                }
                else
                {
                  *(_QWORD *)v378 = v152;
                  v264 = (__int16)v179;
                  v218 = (char *)v15;
                  v219 = v368;
                  v216 = v369;
                  if (*(_BYTE *)(v14 + 219))
                  {
                    v15[2] = -89;
                    *((_DWORD *)v15 + 12) = v179;
                    v265 = v253 + v253 * *((__int16 *)v152 + 27);
                    if ((v179 & 0x8000) == 0 && ((_DWORD)v152[6] & 0x20) != 0)
                    {
                      v266 = v152[1];
                      if ((_WORD)v179)
                      {
                        if ((v179 << 16) >= 0x110000)
                        {
                          v316 = v179 & 0xF;
                          if ((v179 & 0xF) == 0)
                            v316 = 16;
                          v268 = v264 - v316;
                          v317 = v266 + 142;
                          v318 = 0uLL;
                          v319.i64[0] = 0x1000100010001;
                          v319.i64[1] = 0x1000100010001;
                          v320 = v268;
                          v321 = 0uLL;
                          do
                          {
                            v322 = vqtbl2q_s8(*((int8x16x2_t *)v317 - 2), (int8x16_t)xmmword_1ACCBDDC0);
                            v322.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v317 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
                            v323.i32[0] = vzip1q_s16(*((int16x8_t *)v317 - 8), *((int16x8_t *)v317 - 7)).u32[0];
                            v323.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v317 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                            v323.i64[1] = v322.i64[1];
                            v324 = (uint16x8_t)vqtbl2q_s8(*((int8x16x2_t *)v317 + 3), (int8x16_t)xmmword_1ACCBDDB0);
                            v394 = *(int8x16x2_t *)(v317 + 1);
                            v325 = vqtbl2q_s8(*((int8x16x2_t *)v317 + 2), (int8x16_t)xmmword_1ACCBDDC0);
                            v327 = *(int16x8_t *)v317;
                            v326 = *((int16x8_t *)v317 + 1);
                            v317 += 256;
                            v325.i32[3] = v324.i32[3];
                            v324.i32[0] = vzip1q_s16(v327, v326).u32[0];
                            v324.i32[1] = vqtbl2q_s8(v394, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                            v324.i64[1] = v325.i64[1];
                            v318 = vaddq_s16((int16x8_t)vbicq_s8(v319, (int8x16_t)vshrq_n_u16(v323, 5uLL)), v318);
                            v321 = vaddq_s16((int16x8_t)vbicq_s8(v319, (int8x16_t)vshrq_n_u16(v324, 5uLL)), v321);
                            v320 -= 16;
                          }
                          while (v320);
                          v267 = v41;
                          v269 = vaddvq_s16(vaddq_s16(v321, v318));
                        }
                        else
                        {
                          v267 = v41;
                          v268 = 0;
                          v269 = 0;
                        }
                        v328 = v264 - v268;
                        v329 = &v266[16 * v268 + 14];
                        do
                        {
                          v330 = *(unsigned __int16 *)v329;
                          v329 += 16;
                          v269 += ((v330 >> 5) & 1) == 0;
                          --v328;
                        }
                        while (v328);
                      }
                      else
                      {
                        v267 = v41;
                        v269 = 0;
                      }
                      if ((*(_WORD *)&v266[16 * v264 + 14] & 0x20) != 0)
                        LOWORD(v264) = v179 - v269 + *((_WORD *)v152 + 28);
                      else
                        LOWORD(v264) = v269;
                      v41 = v267;
                    }
                    v94 = 0;
                    v331 = *(_DWORD *)(v95 + 16) + v265 + (__int16)v264 + 1;
                    goto LABEL_666;
                  }
                  *((_DWORD *)v15 + 12) = v264;
                  if (v179 < 0)
                  {
                    v94 = 0;
                    v15[1] = 68;
                  }
                  else
                  {
                    v309 = 1 << v179;
                    if (v179 > 0x1F)
                      v309 = -1;
                    v94 = 0;
                    if (v253)
                      *(_DWORD *)(v14 + 212) |= v309;
                    else
                      *(_DWORD *)(v14 + 208) |= v309;
                  }
                  v97 = 1;
                  v232 = 77;
                }
LABEL_667:
                if ((v218[6] & 0x81) == 0)
                {
                  v347 = (unsigned __int8 *)*((_QWORD *)v218 + 2);
                  if (v347)
                  {
                    v348 = v41;
                    sub_1ACBF8348((_QWORD *)v379, v347);
                    v41 = v348;
                  }
                  *((_QWORD *)v218 + 2) = 0;
                  v349 = (unsigned __int8 *)*((_QWORD *)v218 + 3);
                  if (v349)
                  {
                    v350 = v41;
                    sub_1ACBF8348((_QWORD *)v379, v349);
                    v41 = v350;
                  }
                  *((_QWORD *)v218 + 3) = 0;
                  *((_DWORD *)v218 + 1) |= 0x800000u;
                }
                v351 = *((unsigned int *)v218 + 12);
                if ((v351 & 0x80000000) == 0 && v94)
                {
                  v352 = *(_QWORD *)v378;
                  if ((*(_BYTE *)(*(_QWORD *)v378 + 48) & 0x60) != 0
                    && (*(_WORD *)(*(_QWORD *)(v352 + 8) + 16 * v351 + 14) & 0x60) != 0)
                  {
                    v353 = *(__int16 *)(v352 + 54);
                    if (v353 <= 63)
                      v354 = ~(-1 << v353);
                    else
                      v354 = -1;
                  }
                  else
                  {
                    if ((int)v351 >= 63)
                      LOBYTE(v351) = 63;
                    v354 = 1 << v351;
                  }
                  *(_QWORD *)(v94 + 80) |= v354;
                }
                *v218 = v232;
                if (v97 == 1)
                  goto LABEL_685;
                return 2;
              }
            }
            else if (byte_1ACCB6333[v182] != byte_1ACCB6333[v183])
            {
              v184 = v42;
              for (i2 = "ROWID"; ; ++i2)
              {
                v186 = *v184;
                v187 = *(unsigned __int8 *)i2;
                if ((_DWORD)v186 == (_DWORD)v187)
                {
                  if (!*v184)
                    goto LABEL_373;
                }
                else if (byte_1ACCB6333[v186] != byte_1ACCB6333[v187])
                {
                  v188 = v42;
                  for (i3 = "OID"; ; ++i3)
                  {
                    v190 = *v188;
                    v191 = *(unsigned __int8 *)i3;
                    if ((_DWORD)v190 == (_DWORD)v191)
                    {
                      if (!*v188)
                        goto LABEL_373;
                    }
                    else if (byte_1ACCB6333[v190] != byte_1ACCB6333[v191])
                    {
                      goto LABEL_375;
                    }
                    ++v188;
                  }
                }
                ++v184;
              }
            }
            ++v180;
          }
        }
        v97 = 0;
LABEL_378:
        if (v97 || v92 != 1 || !v94)
        {
          if (!v97)
          {
            v192 = *(_DWORD *)(v95 + 40);
            if (!v39)
              goto LABEL_403;
            goto LABEL_169;
          }
          if (v97 != 1)
          {
            v231 = "ambiguous column name";
            v218 = (char *)v15;
            v230 = v366;
            goto LABEL_500;
          }
          v232 = -89;
          v218 = (char *)v15;
          goto LABEL_516;
        }
        v192 = *(_DWORD *)(v95 + 40);
        if ((v192 & 0x28) != 0)
          goto LABEL_402;
        v193 = v42;
        for (i4 = "_ROWID_"; ; ++i4)
        {
          v195 = *v193;
          v196 = *(unsigned __int8 *)i4;
          if ((_DWORD)v195 == (_DWORD)v196)
            break;
          if (byte_1ACCB6333[v195] != byte_1ACCB6333[v196])
          {
            v197 = v42;
            for (i5 = "ROWID"; ; ++i5)
            {
              v199 = *v197;
              v200 = *(unsigned __int8 *)i5;
              if ((_DWORD)v199 == (_DWORD)v200)
              {
                if (!*v197)
                  goto LABEL_401;
              }
              else if (byte_1ACCB6333[v199] != byte_1ACCB6333[v200])
              {
                v201 = v42;
                for (i6 = "OID"; ; ++i6)
                {
                  v203 = *v201;
                  v204 = *(unsigned __int8 *)i6;
                  if ((_DWORD)v203 == (_DWORD)v204)
                  {
                    if (!*v201)
                      goto LABEL_401;
                  }
                  else if (byte_1ACCB6333[v203] != byte_1ACCB6333[v204])
                  {
                    goto LABEL_402;
                  }
                  ++v201;
                }
              }
              ++v197;
            }
          }
LABEL_384:
          ++v193;
        }
        if (*v193)
          goto LABEL_384;
LABEL_401:
        if ((*(_BYTE *)(*(_QWORD *)(v94 + 32) + 49) & 2) == 0)
        {
          v218 = (char *)v15;
          *((_DWORD *)v15 + 12) = -1;
          v15[1] = 68;
          v97 = 1;
          v232 = -89;
LABEL_516:
          v219 = v368;
          v216 = v369;
          goto LABEL_667;
        }
LABEL_402:
        v92 = 1;
        if (!v39)
        {
LABEL_403:
          if ((v192 & 0x80) != 0)
          {
            v205 = *(unsigned int **)(v95 + 16);
            v206 = *v205;
            if ((int)v206 >= 1)
            {
              for (i7 = 0; i7 != v206; ++i7)
              {
                v208 = &v205[6 * i7];
                if ((*(_WORD *)((_BYTE *)v208 + 25) & 3) == 0)
                {
                  v209 = (_BYTE *)*((_QWORD *)v208 + 2);
                  if (v209)
                  {
                    if (v42)
                    {
                      v210 = v209;
                      for (i8 = v42; ; ++i8)
                      {
                        v212 = *v210;
                        v213 = *i8;
                        if ((_DWORD)v212 == (_DWORD)v213)
                        {
                          if (!*v210)
                            goto LABEL_416;
                        }
                        else if (byte_1ACCB6333[v212] != byte_1ACCB6333[v213])
                        {
                          break;
                        }
                        ++v210;
                      }
                    }
                  }
                  else if (!v42)
                  {
LABEL_416:
                    v214 = *(unsigned __int8 **)&v205[6 * i7 + 2];
                    v215 = *((_DWORD *)v214 + 1);
                    if ((v192 & 1) == 0 && (v215 & 0x10) != 0)
                    {
                      sub_1ACBCB308(v14, "misuse of aliased aggregate %s", i7, (uint64_t)v40, v93, (uint64_t)v42, a7, a8, (char)v209);
                      return 2;
                    }
                    v216 = v369;
                    if ((v215 & 0x8000) != 0 && (v95 != v369 || (v192 & 0x4000) == 0))
                    {
                      sub_1ACBCB308(v14, "misuse of aliased window function %s", i7, (uint64_t)v40, v93, (uint64_t)v42, a7, a8, (char)v209);
                      return 2;
                    }
                    v217 = *v214;
                    if (v217 == 176)
                      v217 = v214[2];
                    v218 = (char *)v15;
                    v219 = v368;
                    if (v217 != 138)
                    {
                      if (v217 == 177)
                      {
                        v220 = (_DWORD **)(v214 + 32);
LABEL_439:
                        if (**v220 != 1)
                        {
                          sub_1ACBCB308(v14, "row value misused", i7, (uint64_t)v40, v93, (uint64_t)v42, a7, a8, v364);
                          return 2;
                        }
                      }
                      v228 = v41;
                      sub_1ACBAC2AC((uint64_t *)v14, (uint64_t)v205, i7, (uint64_t)v15, v93);
                      if (*(unsigned __int8 *)(v14 + 302) < 2u)
                        goto LABEL_528;
                      v229 = *(unsigned __int8 ***)(v14 + 408);
                      v41 = v228;
                      if (v229)
                      {
                        while (*v229 != v15)
                        {
                          v229 = (unsigned __int8 **)v229[3];
                          if (!v229)
                            goto LABEL_685;
                        }
                        *v229 = 0;
                      }
                      goto LABEL_685;
                    }
                    v220 = (_DWORD **)(*((_QWORD *)v214 + 4) + 32);
                    goto LABEL_439;
                  }
                }
              }
            }
          }
        }
LABEL_169:
        v95 = *(_QWORD *)(v95 + 24);
        v93 = (v93 + 1);
        v39 = v381;
        v40 = v385;
        if (v95)
          continue;
        break;
      }
      if (v381)
      {
        v97 = 0;
        v95 = 0;
        v230 = 0;
LABEL_449:
        v231 = "no such column";
        goto LABEL_450;
      }
      v254 = *((_DWORD *)v15 + 1);
      if ((v254 & 0x80) != 0)
      {
        if (*(_BYTE *)(v379 + 197))
          goto LABEL_630;
        if ((*(_BYTE *)(v369 + 42) & 1) != 0)
        {
          if ((*(_QWORD *)(v379 + 48) & 0x50000001) == 0x40000001)
            goto LABEL_630;
          v270 = 29;
        }
        else
        {
          v270 = 30;
        }
        if (((*(_QWORD *)(v379 + 48) >> v270) & 1) == 0)
          goto LABEL_496;
LABEL_630:
        v313 = *(_QWORD *)(v14 + 16);
        if (v313)
        {
          v314 = v42 ? strlen((const char *)v42) & 0x3FFFFFFF : 0;
          v315 = (_QWORD *)sub_1ACBE1124(v379, (v314 + 9));
          if (v315)
          {
            *v315 = *(_QWORD *)(v313 + 336);
            *(_QWORD *)(v313 + 336) = v315;
            memcpy(v315 + 1, __srcb, (v314 + 1));
          }
        }
        *v15 = 117;
        *((_QWORD *)v15 + 9) = 0;
        return 1;
      }
LABEL_496:
      if ((v254 & 0x4000800) != 0)
      {
        v97 = 0;
        v95 = 0;
        v230 = 1;
        goto LABEL_449;
      }
      v303 = (_BYTE *)*((_QWORD *)v15 + 1);
      v304 = "true";
      v305 = v303;
      while (2)
      {
        v306 = *v305;
        v307 = *(unsigned __int8 *)v304;
        if ((_DWORD)v306 == (_DWORD)v307)
        {
          if (!*v305)
          {
            v308 = 0x10000000;
LABEL_626:
            *v15 = -86;
            *((_DWORD *)v15 + 1) = v308 | v254;
            return 1;
          }
          goto LABEL_609;
        }
        if (byte_1ACCB6333[v306] == byte_1ACCB6333[v307])
        {
LABEL_609:
          ++v305;
          ++v304;
          continue;
        }
        break;
      }
      v310 = "false";
      v231 = "no such column";
      while (2)
      {
        v311 = *v303;
        v312 = *(unsigned __int8 *)v310;
        if ((_DWORD)v311 == (_DWORD)v312)
        {
          if (!*v303)
          {
            v308 = 0x20000000;
            goto LABEL_626;
          }
          goto LABEL_622;
        }
        if (byte_1ACCB6333[v311] == byte_1ACCB6333[v312])
        {
LABEL_622:
          ++v303;
          ++v310;
          continue;
        }
        break;
      }
      v97 = 0;
      v95 = 0;
      v230 = 1;
LABEL_450:
      v218 = (char *)v380;
LABEL_500:
      if (!v391[0])
      {
LABEL_509:
        v259 = v41;
        if (v40)
        {
          sub_1ACBCB308(v14, "%s: %s.%s.%s", (uint64_t)v39, (uint64_t)v40, v93, (uint64_t)v42, a7, a8, (char)v231);
        }
        else if ((v230 & 1) != 0)
        {
          sub_1ACBCB308(v14, "%s: %s", (uint64_t)v39, 0, v93, (uint64_t)v42, a7, a8, (char)v231);
        }
        else
        {
          sub_1ACBCB308(v14, "%s: %s.%s", (uint64_t)v39, 0, v93, (uint64_t)v42, a7, a8, (char)v231);
        }
        v219 = v368;
        v216 = v369;
        v41 = v259;
        if (v218)
        {
          v277 = v218;
          while (1)
          {
            if ((v277[4] & 3) == 0)
            {
              v278 = *((_DWORD *)v277 + 14);
              if (v278 > 0)
                break;
            }
            v277 = (char *)*((_QWORD *)v277 + 2);
            if (!v277)
              goto LABEL_541;
          }
          *(_DWORD *)(*(_QWORD *)v14 + 84) = v278;
        }
LABEL_541:
        *(_BYTE *)(v14 + 29) = 1;
        ++*(_DWORD *)(v369 + 36);
LABEL_542:
        v232 = -89;
        goto LABEL_667;
      }
      if (*v391[0] != v97 - 1)
      {
        v258 = v41;
        sub_1ACC010B0((_QWORD *)v379, (_QWORD *)v391[0]);
        v40 = v385;
        v42 = __srcb;
        v39 = v381;
        v41 = v258;
        goto LABEL_509;
      }
      v228 = v41;
      v255 = *((_DWORD *)v218 + 1);
      if ((v255 & 0x800000) != 0)
      {
        *((_DWORD *)v218 + 1) = v255 & 0xFF7FFFFF;
        v219 = v368;
        v216 = v369;
      }
      else
      {
        v256 = (unsigned __int8 *)*((_QWORD *)v218 + 2);
        v219 = v368;
        v216 = v369;
        if (v256)
          sub_1ACBF8348((_QWORD *)v379, v256);
        *((_QWORD *)v218 + 2) = 0;
        v257 = (unsigned __int8 *)*((_QWORD *)v218 + 3);
        if (v257)
          sub_1ACBF8348((_QWORD *)v379, v257);
        *((_QWORD *)v218 + 3) = 0;
      }
      sub_1ACC0FFDC((uint64_t *)v14, v391, v94, *((__int16 *)v218 + 24));
      *v218 = -84;
      *((_QWORD *)v218 + 1) = "coalesce";
      *((_DWORD **)v218 + 4) = v391[0];
LABEL_528:
      v41 = v228;
LABEL_685:
      if (*(_QWORD *)(*(_QWORD *)v14 + 528))
      {
        v355 = *v218;
        if (v355 == 167 || v355 == 77)
        {
          if (v41)
          {
            v356 = *(unsigned int **)(v95 + 8);
            v357 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v14 + 32) + 24);
            v358 = -1;
            do
            {
              v359 = *v357;
              v357 += 4;
              ++v358;
            }
            while (v359 != v41);
            if ((v358 & 0x80000000) == 0)
            {
              if (v355 == 77)
                goto LABEL_693;
              v363 = *v356;
              if ((int)v363 >= 1)
              {
                v219 = v356 + 10;
                while (*v367 != v219[8])
                {
                  v219 += 26;
                  if (!--v363)
                    goto LABEL_705;
                }
LABEL_693:
                v360 = *(_QWORD *)v219;
                if (*(_QWORD *)v219)
                {
                  v361 = *((unsigned int *)v218 + 12);
                  if ((v361 & 0x80000000) == 0)
                    goto LABEL_697;
                  if (*(__int16 *)(v360 + 52) < 0)
                  {
                    v362 = "ROWID";
                  }
                  else
                  {
                    v361 = *(unsigned __int16 *)(v360 + 52);
LABEL_697:
                    v362 = *(const char **)(*(_QWORD *)(v360 + 8) + 16 * v361);
                  }
                  if (sub_1ACBA07A4(v14, *(const char **)v360, v362, v358) == 2)
                    *v218 = 121;
                }
              }
            }
          }
        }
      }
LABEL_705:
      ++*(_DWORD *)(v216 + 32);
      for (; v216 != v95; ++*(_DWORD *)(v216 + 32))
        v216 = *(_QWORD *)(v216 + 24);
      return 1;
    case 0x9Cu:
      if ((*(_DWORD *)(v13 + 40) & 0x2E) == 0)
        return 2 * (*(_DWORD *)(v14 + 48) != 0);
      sub_1ACBCB308(v14, "%s prohibited in %s", a3, a4, a5, a6, a7, a8, (char)"parameters");
      *v15 = 121;
      v49 = *(_QWORD *)v14;
      while (1)
      {
        if ((v15[4] & 3) == 0)
        {
          v50 = *((_DWORD *)v15 + 14);
          if (v50 > 0)
            break;
        }
        v15 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
        if (!v15)
          return 2 * (*(_DWORD *)(v14 + 48) != 0);
      }
      goto LABEL_84;
    case 0xACu:
      v51 = *((_QWORD *)a2 + 4);
      if (v51)
        v52 = *(_DWORD *)v51;
      else
        v52 = 0;
      v370 = a1[5];
      v57 = *(_QWORD *)v14;
      v58 = *(unsigned __int8 *)(*(_QWORD *)v14 + 100);
      if ((a2[7] & 1) != 0)
      {
        v59 = *(_QWORD *)v13;
        if (*(unsigned __int8 *)(*((_QWORD *)a2 + 9) + 32) == 166)
          v60 = 0;
        else
          v60 = *((_QWORD *)a2 + 9);
      }
      else
      {
        v59 = *(_QWORD *)v13;
        v60 = 0;
      }
      v61 = (int *)(v370 + 40);
      __srca = *(_DWORD *)(v370 + 40);
      v62 = (char *)*((_QWORD *)a2 + 1);
      v63 = sub_1ACB5B284(v57, v62, v52, v58, 0);
      if (!v63)
      {
        v70 = sub_1ACB5B284(*(_QWORD *)v59, v62, -2, v58, 0);
        v72 = 0;
        v75 = v70 == 0;
        v76 = v70 != 0;
        goto LABEL_138;
      }
      v70 = v63;
      v71 = *((_QWORD *)v63 + 4);
      v72 = v71 != 0;
      if ((v63[5] & 4) != 0)
      {
        *((_DWORD *)v15 + 1) |= 0x80000u;
        if (v52 == 2)
        {
          v73 = v63;
          v74 = sub_1ACC0FAD4(*(unsigned __int8 **)(v51 + 32));
          v70 = v73;
          *((_DWORD *)v15 + 11) = v74;
          if ((v74 & 0x80000000) != 0)
          {
            sub_1ACBCB308(v59, "second argument to %#T() must be a constant between 0.0 and 1.0", v64, v65, v66, v67, v68, v69, (char)v15);
            v70 = v73;
            ++*(_DWORD *)(v370 + 36);
          }
        }
        else
        {
          if (**((_BYTE **)v63 + 7) == 117)
            v77 = 0x800000;
          else
            v77 = 125829120;
          *((_DWORD *)v15 + 11) = v77;
        }
      }
      v78 = *(_QWORD *)v59;
      v79 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v59 + 528);
      if (!v79 || *(_BYTE *)(v78 + 197) || *(_BYTE *)(v59 + 302))
        goto LABEL_121;
      v260 = v70;
      v261 = v79(*(_QWORD *)(v78 + 536), 31, 0, *((_QWORD *)v70 + 7), 0, *(_QWORD *)(v59 + 368));
      if (v261 == 1)
      {
        v262 = 23;
        v263 = "not authorized";
      }
      else
      {
        if ((v261 & 0xFFFFFFFD) == 0)
        {
          v70 = v260;
          if (!v261)
          {
LABEL_121:
            v80 = *((_DWORD *)v70 + 1);
            if ((v80 & 0x2800) != 0)
              *((_DWORD *)v15 + 1) |= 0x100000u;
            v81 = *v61;
            if ((v80 & 0x800) != 0)
            {
              v15[2] = v81 & 0x2E;
              if ((v81 & 0x40000) != 0)
                *((_DWORD *)v15 + 1) |= 0x40000000u;
            }
            else if ((v81 & 0x2A) != 0)
            {
              v82 = v70;
              sub_1ACC0FA18(v59, v370, (uint64_t)"non-deterministic functions", 0, (uint64_t)v15, v67, v68, v69);
              v70 = v82;
              v80 = *((_DWORD *)v82 + 1);
            }
            if ((v80 & 0x40000) != 0 && !*(_BYTE *)(v59 + 30) && (*(_BYTE *)(*(_QWORD *)v59 + 44) & 0x20) == 0)
            {
              v72 = v71 != 0;
              v83 = (unsigned __int8 *)(v59 + 302);
              if (*(unsigned __int8 *)(v59 + 302) <= 1u)
              {
                v70 = 0;
                v75 = 1;
                if (v71)
                {
                  v76 = 0;
                  goto LABEL_147;
                }
                goto LABEL_461;
              }
              v384 = 0;
              goto LABEL_144;
            }
            if ((v80 & 0x280000) != 0 && *(unsigned __int8 *)(v59 + 302) <= 1u)
            {
              v84 = v70;
              sub_1ACC0A168(v59, (uint64_t)v15, (uint64_t)v70, v65, v66, v67, v68, v69);
              v70 = v84;
            }
            v76 = 1;
            v75 = 1;
LABEL_138:
            v83 = (unsigned __int8 *)(v59 + 302);
            if (*(unsigned __int8 *)(v59 + 302) < 2u)
            {
              if (v70 && v60 && !*((_QWORD *)v70 + 5))
              {
                v384 = (uint64_t)v70;
                v85 = "%#T() may not be used as a window function";
                goto LABEL_549;
              }
              if (v72)
              {
LABEL_147:
                v87 = *((_DWORD *)v70 + 1);
                if ((*v61 & 1) == 0 || !v60 && (v87 & 0x10000) != 0 || v60 && (*v61 & 0x4000) == 0)
                {
                  v384 = (uint64_t)v70;
                  v88 = HIWORD(v87) & 1;
                  if (v60)
                    v88 = 1;
                  if (v88)
                    v89 = "window";
                  else
                    v89 = "aggregate";
                  v365 = (char)v89;
                  v90 = "misuse of %s function %#T()";
LABEL_158:
                  v86 = (uint64_t *)v59;
                  sub_1ACBCB308(v59, v90, v64, v65, v66, v67, v68, v69, v365);
                  v72 = 0;
                  ++*(_DWORD *)(v370 + 36);
                  goto LABEL_552;
                }
                v72 = 1;
                v237 = 1;
                if (v76)
                {
LABEL_544:
                  v384 = (uint64_t)v70;
                  if (v75)
                  {
                    if ((v237 & 1) == 0)
                      goto LABEL_546;
LABEL_550:
                    v86 = (uint64_t *)v59;
                    *v61 &= (v60 == 0) ^ 0xFFFFBFFF;
                    v72 = 1;
                    goto LABEL_552;
                  }
                  goto LABEL_548;
                }
LABEL_462:
                if (!*(_BYTE *)(*(_QWORD *)v59 + 197) && !*(_BYTE *)(v59 + 301))
                {
                  v384 = (uint64_t)v70;
                  v85 = "no such function: %#T";
                  goto LABEL_549;
                }
                goto LABEL_544;
              }
              if (v76)
              {
                v384 = (uint64_t)v70;
                if (v75)
                {
LABEL_546:
                  if ((v15[7] & 1) == 0)
                  {
                    v86 = (uint64_t *)v59;
                    v72 = 0;
                    goto LABEL_552;
                  }
                  v365 = (char)v15;
                  v90 = "FILTER may not be used with non-aggregate %#T()";
                  goto LABEL_158;
                }
                v72 = 0;
LABEL_548:
                v85 = "wrong number of arguments to function %#T()";
LABEL_549:
                sub_1ACBCB308(v59, v85, v64, v65, v66, v67, v68, v69, (char)v15);
                ++*(_DWORD *)(v370 + 36);
                if (!v72)
                {
                  v86 = (uint64_t *)v59;
                  goto LABEL_552;
                }
                goto LABEL_550;
              }
LABEL_461:
              v72 = 0;
              v237 = 0;
              goto LABEL_462;
            }
            v384 = (uint64_t)v70;
LABEL_144:
            v86 = (uint64_t *)v59;
            if ((v15[7] & 1) != 0)
              v72 = 1;
LABEL_552:
            if (v51)
            {
              v279 = *(_DWORD *)v51;
              if (*(int *)v51 >= 1)
              {
                for (i9 = (uint64_t *)(v51 + 8); ; i9 += 3)
                {
                  if (*i9)
                  {
                    if (sub_1ACC0B714((uint64_t)a1, *i9))
                      v281 = 1;
                    else
                      v281 = v279 <= 1;
                    if (v281)
                      break;
                  }
                  else if (v279 < 2)
                  {
                    break;
                  }
                  --v279;
                }
              }
            }
            if (!v72)
              return 1;
            if (v60)
            {
              v282 = *(_QWORD *)(v370 + 48);
              if (*v83 <= 1u)
              {
                v14 = (uint64_t)v86;
                v283 = v282 ? *(_QWORD *)(v282 + 120) : 0;
                sub_1ACC0FB50(v86, v283, v60, v384, v66, v67, v68, v69);
                if (*(_BYTE *)(*v86 + 103))
                  return 2 * (*(_DWORD *)(v14 + 48) != 0);
              }
              sub_1ACC0B80C((uint64_t)a1, *(_DWORD **)(v60 + 16));
              sub_1ACC0B80C((uint64_t)a1, *(_DWORD **)(v60 + 24));
              v299 = *(_QWORD *)(v60 + 72);
              if (v299)
                sub_1ACC0B714((uint64_t)a1, v299);
              sub_1ACC0D4C8(v282, (_QWORD *)v60);
              v296 = *v61;
              v297 = 0x8000;
              v382 = (_DWORD *)(v370 + 40);
            }
            else
            {
              v382 = (_DWORD *)(v370 + 40);
              *v15 = -88;
              v15[2] = 0;
              v284 = v86;
              if ((v15[7] & 1) != 0)
              {
                v285 = *(_QWORD *)(*((_QWORD *)v15 + 9) + 72);
                if (v285)
                  sub_1ACC0B714((uint64_t)a1, v285);
              }
              v286 = v370;
              while (1)
              {
                v287 = v286;
                v288 = *(_QWORD *)(v286 + 8);
                v391[0] = 0;
                v389[2] = 0;
                v390 = 0;
                v391[1] = sub_1ACC10464;
                v391[2] = sub_1ACC104F4;
                v391[3] = sub_1ACC105E0;
                v392 = 0;
                v393 = v389;
                v289 = v284;
                v389[0] = *v284;
                v389[1] = v288;
                v290 = v15;
                v291 = (_DWORD *)*((_QWORD *)v15 + 4);
                if (v291)
                {
                  v292 = *v291;
                  if ((int)*v291 >= 1)
                  {
                    for (i10 = (uint64_t *)(v291 + 2); ; i10 += 3)
                    {
                      if (*i10)
                      {
                        if (sub_1ACC0B714((uint64_t)v391, *i10))
                          v294 = 1;
                        else
                          v294 = v292 <= 1;
                        if (v294)
                          break;
                      }
                      else if (v292 < 2)
                      {
                        break;
                      }
                      --v292;
                    }
                  }
                }
                v15 = v290;
                if ((v290[7] & 1) != 0)
                {
                  v295 = *(_QWORD *)(*((_QWORD *)v290 + 9) + 72);
                  if (v295)
                    sub_1ACC0B714((uint64_t)v391, v295);
                }
                v284 = v289;
                if (v390)
                  sub_1ACBF0674((_QWORD *)*v289, v390);
                if (!WORD2(v392) || (v392 & 0x100000000) != 0)
                  break;
                ++v15[2];
                v286 = *(_QWORD *)(v287 + 24);
                if (!v286)
                  goto LABEL_600;
              }
              if (!v384)
              {
LABEL_600:
                *v382 |= __srca & 0x4001;
                return 1;
              }
              v296 = *(_DWORD *)(v384 + 4) & 0x8001000 ^ 0x8000010;
              v298 = *(_DWORD *)(v287 + 40);
              v61 = (int *)(v287 + 40);
              v297 = v298;
            }
            *v61 = v296 | v297;
            goto LABEL_600;
          }
LABEL_532:
          *v15 = 121;
          return 1;
        }
        v262 = 1;
        v263 = "authorizer malfunction";
      }
      sub_1ACBCB308(v59, v263, v64, v65, v66, v67, v68, v69, v364);
      *(_DWORD *)(v59 + 24) = v262;
      sub_1ACBCB308(v59, "not authorized to use function: %#T", v271, v272, v273, v274, v275, v276, (char)v15);
      ++*(_DWORD *)(v370 + 36);
      goto LABEL_532;
    default:
      return 2 * (*(_DWORD *)(v14 + 48) != 0);
  }
}

_QWORD *sub_1ACB782D4(_QWORD *result, unsigned __int8 *a2)
{
  if (a2)
    return sub_1ACBF8348(result, a2);
  return result;
}

uint64_t sub_1ACB782E0(unsigned __int8 **a1, uint64_t a2, int *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int *i;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned __int8 *j;
  uint64_t v28;
  uint64_t v29;
  int v31;
  unsigned __int8 *v32;
  int v34;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v34 = 0;
  v32 = *a1;
  if (*a3 < 1)
    return sub_1ACC124C8(v32, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = 0;
  for (i = a3 + 2; ; i += 6)
  {
    v16 = *(unsigned __int8 **)i;
    if (*(_QWORD *)i)
      break;
LABEL_7:
    if (++v11 >= *a3)
      return sub_1ACC124C8(v32, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)i;
  while (1)
  {
    v18 = *(_DWORD *)(v17 + 4);
    if ((v18 & 0x82000) == 0)
      break;
    if ((v18 & 0x80000) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8);
      if (!v17)
        goto LABEL_7;
    }
    else
    {
      v17 = *(_QWORD *)(v17 + 16);
      if (!v17)
        goto LABEL_7;
    }
  }
  if (*a4 == 71)
    goto LABEL_4;
  if (*(_BYTE *)v17 != 59 || (v19 = *(unsigned int **)(a2 + 32), v20 = *v19, (int)v20 < 1))
  {
LABEL_3:
    v34 = 0;
    goto LABEL_4;
  }
  v21 = 0;
  v22 = *(_QWORD *)(v17 + 8);
  while (1)
  {
    if ((*(_WORD *)((_BYTE *)&v19[6 * v21 + 6] + 1) & 3) == 0)
    {
      v26 = *(_BYTE **)&v19[6 * v21 + 4];
      if (v26)
      {
        if (v22)
        {
          for (j = *(unsigned __int8 **)(v17 + 8); ; ++j)
          {
            v28 = *v26;
            v29 = *j;
            if ((_DWORD)v28 == (_DWORD)v29)
            {
              if (!*v26)
                goto LABEL_37;
            }
            else if (byte_1ACCB6333[v28] != byte_1ACCB6333[v29])
            {
              goto LABEL_28;
            }
            ++v26;
          }
        }
        goto LABEL_28;
      }
      if (!v22)
        break;
    }
LABEL_28:
    if (++v21 == v20)
      goto LABEL_3;
  }
LABEL_37:
  v15 = v21 + 1;
  v34 = v21 + 1;
  if ((v21 & 0x80000000) == 0)
  {
LABEL_6:
    *((_WORD *)i + 10) = v15;
    goto LABEL_7;
  }
LABEL_4:
  if (!sub_1ACC12444(v17, &v34))
  {
    *((_WORD *)i + 10) = 0;
    if (sub_1ACC0F790((uint64_t)a1, (uint64_t)v16, v13, v14, a5, a6, a7, a8))
      return 1;
    v23 = *(int **)(a2 + 32);
    if (*v23 >= 1)
    {
      v24 = 0;
      v25 = 2;
      do
      {
        if (!sub_1ACC0ABAC(0, v16, *(unsigned __int8 **)&v23[v25], 0xFFFFFFFFLL))
        {
          if (*(_QWORD *)(a2 + 112))
          {
            v35[0] = 0;
            v36 = 0u;
            v37 = 0;
            v38 = a2;
            v35[1] = sub_1ACC125D4;
            sub_1ACC0B714((uint64_t)v35, (uint64_t)v16);
          }
          *((_WORD *)i + 10) = v24 + 1;
        }
        ++v24;
        v23 = *(int **)(a2 + 32);
        v25 += 6;
      }
      while (v24 < *v23);
    }
    goto LABEL_7;
  }
  v15 = v34;
  if ((v34 - 0x10000) > 0xFFFF0000)
    goto LABEL_6;
  sub_1ACBCB308((uint64_t)v32, "%r %s BY term out of range - should be between 1 and %d", v13, v14, a5, a6, a7, a8, v11 + 1);
  while (1)
  {
    if ((*(_BYTE *)(v17 + 4) & 3) == 0)
    {
      v31 = *(_DWORD *)(v17 + 56);
      if (v31 > 0)
        break;
    }
    v17 = *(_QWORD *)(v17 + 16);
    if (!v17)
      return 1;
  }
  *(_DWORD *)(*(_QWORD *)v32 + 84) = v31;
  return 1;
}

uint64_t *sub_1ACB78598(uint64_t *result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a2 + 4);
  if ((v2 & 0x80) == 0)
  {
    *(_DWORD *)(a2 + 4) = v2 | 0x80;
    v3 = *(_DWORD **)(a2 + 40);
    v4 = *v3;
    if ((int)*v3 >= 1)
    {
      v5 = 0;
      v6 = *result;
      v7 = (_QWORD **)(v3 + 12);
      do
      {
        v8 = (uint64_t)*(v7 - 1);
        if ((*(_BYTE *)(v8 + 49) & 0x40) != 0)
        {
          if (*v7)
          {
            result = (uint64_t *)sub_1ACC11890(v6, v8, *v7, 64);
            v4 = *v3;
          }
        }
        ++v5;
        v7 += 13;
      }
      while (v5 < v4);
    }
  }
  return result;
}

uint64_t sub_1ACB78620(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t *v30;
  _DWORD *v31;
  int v32;
  _BYTE *v33;
  unsigned __int8 *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a2)
    return 0;
  v9 = *(_QWORD *)a1;
  while (1)
  {
    v12 = *a2;
    if (v12 == 176)
      v12 = a2[2];
    if (v12 > 166)
    {
      switch(v12)
      {
        case 167:
          goto LABEL_28;
        case 169:
          if (*((_QWORD *)a2 + 9))
            goto LABEL_28;
          goto LABEL_16;
        case 174:
          goto LABEL_4;
        case 177:
          v10 = (unsigned __int8 **)(*((_QWORD *)a2 + 4) + 8);
          goto LABEL_5;
        default:
          goto LABEL_16;
      }
    }
    if (v12 == 36)
    {
LABEL_4:
      v10 = (unsigned __int8 **)(a2 + 16);
LABEL_5:
      v11 = *v10;
      goto LABEL_6;
    }
    if (v12 == 77)
      break;
    if (v12 == 113)
    {
      v20 = sub_1ACC01130(a1, *(unsigned __int8 *)(v9 + 100), 0, *((char **)a2 + 1), a5, a6, a7, a8);
      if (!v20)
        return v20;
LABEL_58:
      if (!*(_QWORD *)(v20 + 24)
        && !sub_1ACC01130(a1, *(unsigned __int8 *)(*(_QWORD *)a1 + 100), v20, *(char **)v20, a5, a6, a7, a8))
      {
        return 0;
      }
      return v20;
    }
LABEL_16:
    v13 = *((_DWORD *)a2 + 1);
    if ((v13 & 0x200) == 0)
      return 0;
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if (!v11 || (v11[5] & 2) == 0)
    {
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      if ((v13 & 0x1000) == 0)
      {
        v14 = (unsigned int *)*((_QWORD *)a2 + 4);
        if (v14)
        {
          if (!*(_BYTE *)(v9 + 103))
          {
            v15 = *v14;
            if ((int)v15 >= 1)
            {
              v16 = v14 + 2;
              while ((*(_BYTE *)(*(_QWORD *)v16 + 5) & 2) == 0)
              {
                v16 += 6;
                if (!--v15)
                  goto LABEL_6;
              }
              v11 = *(unsigned __int8 **)v16;
            }
          }
        }
      }
    }
LABEL_6:
    a2 = v11;
    if (!v11)
      return 0;
  }
LABEL_28:
  v17 = *((unsigned int *)a2 + 12);
  if ((v17 & 0x80000000) != 0)
    return 0;
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8);
  v19 = *(_WORD *)(v18 + 16 * v17 + 14);
  if ((v19 & 0x200) == 0)
  {
    v20 = *(_QWORD *)(v9 + 16);
    if (v20)
      goto LABEL_58;
    return v20;
  }
  v21 = *(_QWORD *)(v18 + 16 * v17) - 1;
  while (*(unsigned __int8 *)++v21)
    ;
  if ((v19 & 4) != 0)
  {
    while (*(unsigned __int8 *)++v21)
      ;
  }
  v24 = (unsigned __int8 *)(v21 + 1);
  v25 = *(_QWORD *)(v9 + 656);
  if (v25)
  {
    v26 = *v24;
    if (*v24)
    {
      v27 = 0;
      v28 = (unsigned __int8 *)(v21 + 2);
      do
      {
        v27 = -1640531535 * (v27 + byte_1ACCB6333[v26]);
        v29 = *v28++;
        v26 = v29;
      }
      while (v29);
    }
    else
    {
      v27 = 0;
    }
    v31 = (_DWORD *)(v25 + 16 * (v27 % *(_DWORD *)(v9 + 640)));
    v30 = (uint64_t *)(v31 + 2);
  }
  else
  {
    v30 = (uint64_t *)(v9 + 648);
    v31 = (_DWORD *)(v9 + 644);
  }
  v32 = *v31;
  if (v32)
  {
LABEL_47:
    v30 = (uint64_t *)*v30;
    v33 = (_BYTE *)v30[3];
    for (i = v24; ; ++i)
    {
      v35 = *v33;
      v36 = *i;
      if ((_DWORD)v35 == (_DWORD)v36)
      {
        if (!*v33)
          goto LABEL_56;
      }
      else if (byte_1ACCB6333[v35] != byte_1ACCB6333[v36])
      {
        if (!--v32)
        {
          v30 = &qword_1EECAD260;
          goto LABEL_56;
        }
        goto LABEL_47;
      }
      ++v33;
    }
  }
  v30 = &qword_1EECAD260;
LABEL_56:
  v37 = v30[2];
  if (!v37)
    return 0;
  v38 = v37 + 40 * *(unsigned __int8 *)(v9 + 100);
  v20 = v38 - 40;
  if (v38 != 40)
    goto LABEL_58;
  return v20;
}

uint64_t *sub_1ACB788AC(uint64_t *result, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  if (*(_BYTE *)(*result + 103))
  {
    if (a4 != -11)
      return sub_1ACB693B4((_QWORD *)*result, a4, a3);
    return result;
  }
  if (a2 < 0)
  {
    a2 = *((_DWORD *)result + 36) - 1;
    v4 = result[17];
    if ((a4 & 0x80000000) != 0)
      goto LABEL_9;
    return sub_1ACBFF884(result, v4 + 40 * a2, (char *)a3, a4);
  }
  v4 = result[17];
  if ((a4 & 0x80000000) == 0)
    return sub_1ACBFF884(result, v4 + 40 * a2, (char *)a3, a4);
LABEL_9:
  v5 = v4 + 40 * a2;
  v7 = *(unsigned __int8 *)(v5 + 1);
  v6 = (_BYTE *)(v5 + 1);
  if (v7)
    return sub_1ACBFF884(result, v4 + 40 * a2, (char *)a3, a4);
  if (a4 == -3)
  {
    *(_DWORD *)(v4 + 40 * a2 + 16) = a3;
    *v6 = -3;
  }
  else if (a3)
  {
    *(_QWORD *)(v4 + 40 * a2 + 16) = a3;
    *v6 = a4;
    if (a4 == -11)
      ++*(_DWORD *)(a3 + 24);
  }
  return result;
}

uint64_t sub_1ACB7895C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;

  v8 = *(_QWORD *)(a2 + 96);
  if (*(_DWORD *)(a2 + 8))
    v9 = 1;
  else
    v9 = v8 == 0;
  if (v9)
    return result;
  v12 = result;
  v13 = (*(_DWORD *)(result + 56) + 1);
  *(_DWORD *)(result + 56) = v13;
  *(_DWORD *)(a2 + 8) = v13;
  v14 = *(_QWORD *)(result + 16);
  if (!v14)
  {
    if (!*(_QWORD *)(result + 168) && (*(_BYTE *)(*(_QWORD *)result + 96) & 8) == 0)
      *(_BYTE *)(result + 35) = 1;
    v14 = sub_1ACBCB4C8((uint64_t *)result, a2, a3, a4, a5, a6, a7, a8);
  }
  v57 = 0;
  v15 = *(unsigned __int8 **)(v8 + 16);
  result = sub_1ACC12444((uint64_t)v15, (int *)&v57);
  if (!(_DWORD)result)
  {
    result = sub_1ACC08D80(v12, v15, v13);
    v25 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v25)
    {
      result = sub_1ACBFF5AC(v14, 13, v13, 0, 0, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v25 + 1;
      v26 = *(_QWORD *)(v14 + 136) + 40 * v25;
      *(_DWORD *)v26 = 13;
      *(_DWORD *)(v26 + 4) = v13;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
    }
    v29 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v29)
    {
      *(_DWORD *)(v14 + 144) = v29 + 1;
      v28 = *(_QWORD *)(v14 + 136) + 40 * v29;
      *(_DWORD *)v28 = 17;
      *(_DWORD *)(v28 + 4) = v13;
      goto LABEL_26;
    }
    v30 = v14;
    v31 = 17;
    v32 = v13;
LABEL_34:
    result = sub_1ACBFF5AC(v30, v31, v32, a3, 0, v18, v19, v20);
    goto LABEL_60;
  }
  v21 = v57;
  v22 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) > v22)
  {
    *(_DWORD *)(v14 + 144) = v22 + 1;
    v23 = *(_QWORD *)(v14 + 136) + 40 * v22;
    *(_DWORD *)v23 = 71;
    *(_DWORD *)(v23 + 4) = v21;
    *(_DWORD *)(v23 + 8) = v13;
    *(_QWORD *)(v23 + 12) = 0;
    *(_QWORD *)(v23 + 28) = 0;
    *(_QWORD *)(v23 + 20) = 0;
    *(_DWORD *)(v23 + 36) = 0;
    if ((_DWORD)v21)
      goto LABEL_13;
    goto LABEL_21;
  }
  result = sub_1ACBFF5AC(v14, 71, v57, v13, 0, v18, v19, v20);
  if (!(_DWORD)v21)
  {
LABEL_21:
    v27 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v27)
    {
      *(_DWORD *)(v14 + 144) = v27 + 1;
      v28 = *(_QWORD *)(v14 + 136) + 40 * v27;
      *(_QWORD *)v28 = 9;
LABEL_26:
      *(_DWORD *)(v28 + 8) = a3;
      *(_QWORD *)(v28 + 12) = 0;
      *(_QWORD *)(v28 + 28) = 0;
      *(_QWORD *)(v28 + 20) = 0;
      *(_DWORD *)(v28 + 36) = 0;
      goto LABEL_60;
    }
    v30 = v14;
    v31 = 9;
    v32 = 0;
    goto LABEL_34;
  }
LABEL_13:
  if ((v21 & 0x80000000) != 0)
    goto LABEL_60;
  v24 = *(__int16 *)(a2 + 2);
  if (v21 >= 8)
  {
    v33 = 40;
    if (v21 < 0x100)
    {
      v35 = v21;
      if (v21 < 0x10)
      {
LABEL_42:
        LOBYTE(v38) = v35;
LABEL_43:
        if (v24 <= (__int16)(v33 + word_1ACCBD832[v38 & 7] - 10))
          goto LABEL_60;
        v40 = (int)v21;
        if (v21 >= 8)
        {
          v42 = 40;
          if (v21 >= 0x100)
          {
            v43 = (int)v21;
            do
            {
              v42 += 40;
              v40 = v43 >> 4;
              v36 = v43 > 0xFFF;
              v43 >>= 4;
            }
            while (v36);
          }
          if (v40 < 0x10)
          {
            LOBYTE(v44) = v40;
          }
          else
          {
            do
            {
              v42 += 10;
              v44 = v40 >> 1;
              v36 = v40 > 0x1F;
              v40 >>= 1;
            }
            while (v36);
          }
        }
        else
        {
          v42 = 40;
          do
          {
            v42 -= 10;
            LOBYTE(v44) = 2 * v40;
            v39 = v40 >= 4;
            v40 *= 2;
          }
          while (!v39);
        }
        v41 = v42 + word_1ACCBD832[v44 & 7] - 10;
        goto LABEL_59;
      }
    }
    else
    {
      v34 = v21;
      do
      {
        v33 += 40;
        v35 = v34 >> 4;
        v36 = v34 > 0xFFF;
        v34 >>= 4;
      }
      while (v36);
      if (v35 < 0x10)
        goto LABEL_42;
    }
    do
    {
      v33 += 10;
      v38 = v35 >> 1;
      v36 = v35 > 0x1F;
      v35 >>= 1;
    }
    while (v36);
    goto LABEL_43;
  }
  if (v21 >= 2)
  {
    v33 = 40;
    v37 = v21;
    do
    {
      v33 -= 10;
      LOBYTE(v38) = 2 * v37;
      v39 = v37 >= 4;
      v37 *= 2;
    }
    while (!v39);
    goto LABEL_43;
  }
  if (v24 > 0)
  {
    v41 = 0;
LABEL_59:
    *(_WORD *)(a2 + 2) = v41;
    *(_DWORD *)(a2 + 4) |= 0x4000u;
  }
LABEL_60:
  v45 = *(unsigned __int8 **)(v8 + 24);
  if (v45)
  {
    v46 = *(_DWORD *)(v12 + 56);
    v47 = (v46 + 1);
    *(_DWORD *)(a2 + 12) = v47;
    v48 = (v46 + 2);
    *(_DWORD *)(v12 + 56) = v48;
    if (*(_QWORD *)(v12 + 16))
    {
      result = sub_1ACB7B84C((_QWORD *)v12, v45, v47, v16, v17, v18, v19, v20);
      if ((_DWORD)result != (_DWORD)v47)
      {
        v49 = result;
        v50 = 80;
        if ((v45[6] & 0x40) == 0)
        {
          if (*v45 == 176)
            v50 = 80;
          else
            v50 = 81;
        }
        result = *(_QWORD *)(v12 + 16);
        v51 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v51)
        {
          result = sub_1ACBFF5AC(result, v50, v49, v47, 0, v18, v19, v20);
        }
        else
        {
          *(_DWORD *)(result + 144) = v51 + 1;
          v52 = *(_QWORD *)(result + 136) + 40 * v51;
          *(_BYTE *)v52 = v50;
          *(_WORD *)(v52 + 2) = 0;
          *(_DWORD *)(v52 + 4) = v49;
          *(_DWORD *)(v52 + 8) = v47;
          *(_BYTE *)(v52 + 1) = 0;
          *(_QWORD *)(v52 + 12) = 0;
          *(_QWORD *)(v52 + 28) = 0;
          *(_QWORD *)(v52 + 20) = 0;
          *(_DWORD *)(v52 + 36) = 0;
        }
      }
    }
    v53 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v53)
    {
      result = sub_1ACBFF5AC(v14, 13, v47, 0, 0, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v53 + 1;
      v54 = *(_QWORD *)(v14 + 136) + 40 * v53;
      *(_DWORD *)v54 = 13;
      *(_DWORD *)(v54 + 4) = v47;
      *(_OWORD *)(v54 + 8) = 0u;
      *(_OWORD *)(v54 + 24) = 0u;
    }
    v55 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v55)
    {
      return sub_1ACBFF5AC(v14, 160, v13, v48, v47, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v55 + 1;
      v56 = *(_QWORD *)(v14 + 136) + 40 * v55;
      *(_DWORD *)v56 = 160;
      *(_DWORD *)(v56 + 4) = v13;
      *(_DWORD *)(v56 + 8) = v48;
      *(_DWORD *)(v56 + 12) = v47;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 32) = 0;
      *(_QWORD *)(v56 + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACB78E3C(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  __int16 v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int16 *v115;
  __int16 v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int16 *v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  __int16 v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *i;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t j;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  BOOL v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  __int16 v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  unsigned int *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int16x8_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  char v225;
  int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  __int16 v234;
  __int16 v235;
  uint64_t v236;
  int *v238;
  uint64_t v239;
  uint64_t v241;
  __int16 v242;
  uint64_t *v243;
  uint64_t v244;
  _BOOL4 v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t (*v256)(uint64_t, unsigned __int8 *);
  __int128 v257;
  _BYTE v258[56];
  __int128 v259;
  uint64_t v260;

  v8 = a8;
  v9 = a7;
  v11 = (uint64_t)a2;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)a1;
  v253 = 0;
  v254 = 0;
  if (a4)
  {
    if (*a4 <= 63)
      v15 = a4;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  if (*a2 >= 65)
  {
    sub_1ACBCB308(a1, "at most %d tables in a join", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, 64);
    return 0;
  }
  v238 = v15;
  if ((a7 & 0x20) != 0)
    v16 = 1;
  else
    v16 = *a2;
  v17 = 120 * v16 + 856;
  v18 = sub_1ACBE1124(v14, v17 + 104);
  if (*(_BYTE *)(v14 + 103))
  {
    if (v18)
      sub_1ACBE0F9C((_QWORD *)v14, (_QWORD *)v18);
    return 0;
  }
  v231 = v13;
  *(_QWORD *)v18 = a1;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 16) = v238;
  *(_QWORD *)(v18 + 24) = a5;
  *(_QWORD *)(v18 + 40) = -1;
  *(_BYTE *)(v18 + 64) = v16;
  v19 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v19;
  *(_DWORD *)(v18 + 48) = v19;
  *(_DWORD *)(v18 + 52) = v19;
  *(_WORD *)(v18 + 60) = v9;
  *(_WORD *)(v18 + 62) = v8;
  *(_DWORD *)(v18 + 56) = *(__int16 *)(a1 + 216);
  *(_OWORD *)(v18 + 65) = 0u;
  v20 = (_BYTE *)(v18 + 65);
  *(_QWORD *)(v18 + 32) = a6;
  *(_OWORD *)(v18 + 81) = 0u;
  *(_QWORD *)(v18 + 96) = 0;
  v228 = v18 + 856;
  v21 = v18;
  bzero((void *)(v18 + 856), 120 * v16 + 104);
  *(_QWORD *)(v21 + 596) = 0xFFFFFF9D00000000;
  v250 = v21;
  v251 = v21 + 104;
  v22 = v21 + v17;
  v252 = v22;
  *(_QWORD *)(v22 + 64) = v21 + v17 + 80;
  *(_WORD *)(v22 + 52) = 0;
  *(_WORD *)(v22 + 56) = 3;
  *(_DWORD *)(v22 + 48) = 0;
  *(_BYTE *)(v21 + 121) = 0;
  *(_QWORD *)(v21 + 104) = v21;
  *(_QWORD *)(v21 + 112) = 0;
  *(_DWORD *)(v21 + 132) = 0;
  *(_QWORD *)(v21 + 124) = 0x800000000;
  v249 = v21;
  *(_QWORD *)(v21 + 136) = v21 + 144;
  v243 = (uint64_t *)(v21 + 104);
  sub_1ACC19FAC(v21 + 104, a3, 44);
  v248 = a1;
  v236 = v14;
  v232 = v16;
  v234 = v9;
  v230 = v8;
  if (v16)
  {
    v29 = 0;
    v30 = v21;
    do
    {
      v31 = (int *)v11;
      v32 = v11 + 104 * v29;
      v34 = *(_DWORD *)(v32 + 72);
      v33 = (_DWORD *)(v32 + 72);
      v35 = *(int *)(v30 + 596);
      *(_DWORD *)(v30 + 596) = v35 + 1;
      *(_DWORD *)(v30 + 4 * v35 + 600) = v34;
      if ((*(_WORD *)((_BYTE *)v33 - 3) & 4) != 0)
      {
        v36 = v11 + 104 * v29;
        v37 = *(int **)(v36 + 96);
        if (v37)
        {
          if (*v37 >= 1)
          {
            v38 = 0;
            v39 = 0;
            v40 = *(_QWORD *)(v36 + 40);
            while ((int)v39 < *(__int16 *)(v40 + 54))
            {
              v41 = v39 << 32;
              v42 = *(__int16 *)(v40 + 54) - (uint64_t)(int)v39;
              v43 = (__int16 *)(*(_QWORD *)(v40 + 8) + 16 * (int)v39 + 14);
              while (1)
              {
                v44 = *v43;
                v43 += 8;
                if ((v44 & 2) != 0)
                  break;
                v41 += 0x100000000;
                LODWORD(v39) = v39 + 1;
                if (!--v42)
                  goto LABEL_16;
              }
              v45 = sub_1ACBE1124(*(_QWORD *)v248, 0x50uLL);
              v30 = v249;
              if (v45)
              {
                v46 = v45;
                *(_OWORD *)(v45 + 32) = 0u;
                *(_OWORD *)(v45 + 48) = 0u;
                *(_OWORD *)(v45 + 64) = 0u;
                *(_OWORD *)v45 = 0u;
                *(_OWORD *)(v45 + 16) = 0u;
                *(_BYTE *)v45 = -89;
                *(_WORD *)(v45 + 52) = -1;
                *(_DWORD *)(v45 + 40) = 1;
                *(_DWORD *)(v45 + 44) = *v33;
                *(_DWORD *)(v45 + 48) = v39;
                *(_QWORD *)(v45 + 72) = v40;
                if ((*(_BYTE *)(v40 + 48) & 0x60) == 0)
                  goto LABEL_33;
                if ((*(_WORD *)(*(_QWORD *)(v40 + 8) + (v41 >> 28) + 14) & 0x60) != 0)
                {
                  v47 = *(__int16 *)(v40 + 54);
                  v48 = v47 <= 63 ? ~(-1 << v47) : -1;
                }
                else
                {
LABEL_33:
                  v49 = (int)v39 >= 63 ? 63 : v39;
                  v48 = 1 << v49;
                }
                *(_QWORD *)&v31[26 * v29 + 22] |= v48;
                v50 = *(unsigned __int8 **)&v37[6 * v38 + 2];
                if (v50)
                {
                  v51 = (uint64_t *)v248;
                  v52 = sub_1ACB8B290(*(_QWORD *)v248, v50, 0, 0);
                }
                else
                {
                  v52 = 0;
                  v51 = (uint64_t *)v248;
                }
                v39 = (v39 + 1);
                v53 = sub_1ACC0241C(v51, 174, (uint64_t)v52, 0);
                v54 = sub_1ACC0241C(v51, 53, v46, v53);
                v55 = v54;
                v56 = (*(_BYTE *)(v33 - 1) & 0x18) != 0 ? 1 : 2;
                sub_1ACC12384(v54, *v33, v56);
                sub_1ACB90C28((uint64_t)v243, v55, 1);
                ++v38;
                v30 = v249;
                if (v38 < *v37)
                  continue;
              }
              goto LABEL_17;
            }
LABEL_16:
            sub_1ACBCB308(v248, "too many arguments on %s() - max %d", v23, v24, v25, v26, v27, v28, *(_QWORD *)v40);
            v30 = v249;
          }
        }
      }
LABEL_17:
      ++v29;
      v11 = (uint64_t)v31;
    }
    while (v29 < *v31);
  }
  else
  {
    if (v238)
      *v20 = *v238;
    if ((v9 & 0x100) != 0 && (*(_BYTE *)(v14 + 96) & 0x10) == 0)
      *(_BYTE *)(v21 + 67) = 1;
    sub_1ACC0BE9C((uint64_t *)a1, 0, "SCAN CONSTANT ROW", v24, v25, v26, v27, v28, v227);
    v30 = v21;
  }
  v57 = *(_DWORD *)(v30 + 124);
  if (v57 >= 1)
  {
    v58 = v57 + 1;
    do
    {
      sub_1ACB90E34((int *)v11, v243, v58 - 2, v24, v25, v26, v27, v28, v227);
      --v58;
    }
    while (v58 > 1);
  }
  v59 = v248;
  v60 = v236;
  if (a6 && *(_QWORD *)(a6 + 96))
    sub_1ACC1A05C((unsigned __int8 *)v243, a6);
  v61 = v249;
  if (*(_DWORD *)(v248 + 48))
    goto LABEL_138;
  if (*(int *)(v249 + 132) >= 1)
  {
    v62 = 0;
    v63 = 0;
    v64 = v243;
    do
    {
      v65 = v64[4] + v62;
      if ((*(_WORD *)(v65 + 18) & 2) == 0 && !*(_QWORD *)(v65 + 48))
      {
        v66 = *(_QWORD *)v65;
        if (!v232
          || (*(_OWORD *)v258 = 0u,
              v255 = 0,
              *(_WORD *)&v258[4] = 1,
              v256 = sub_1ACC229C4,
              v257 = (unint64_t)sub_1ACC0B708,
              !v66)
          || (sub_1ACC0B714((uint64_t)&v255, v66), v61 = v249, *(_WORD *)&v258[4]))
        {
          if ((*(_BYTE *)(v66 + 4) & 2) == 0 || (*(_BYTE *)(v11 + 68) & 0x40) == 0)
          {
            sub_1ACB9F1D0(v248, v66);
            v61 = v249;
            *(_WORD *)(v65 + 18) |= 4u;
          }
        }
      }
      ++v63;
      v64 = (uint64_t *)v251;
      v62 += 56;
    }
    while (v63 < *(int *)(v251 + 28));
  }
  v67 = v234;
  if ((v234 & 0x100) != 0)
  {
    if ((*(_BYTE *)(v236 + 96) & 0x10) != 0)
    {
      v67 = v234 & 0xFEFF;
      *(_WORD *)(v61 + 60) &= ~0x100u;
    }
    else if (sub_1ACC1A19C(v248, v11, (uint64_t)v243, a5))
    {
      *(_BYTE *)(v249 + 67) = 1;
    }
    else if (!v238)
    {
      *(_WORD *)(v249 + 60) |= 0x80u;
      *(_QWORD *)(v249 + 16) = a5;
    }
  }
  v235 = v67;
  v68 = v250;
  v229 = v11;
  if (v232 != 1)
    goto LABEL_79;
  if ((*(_WORD *)(v250 + 60) & 0x20) != 0)
    goto LABEL_79;
  v69 = *(_QWORD *)(v250 + 8);
  v70 = *(_QWORD *)(v69 + 40);
  if (*(_BYTE *)(v70 + 63) == 1 || (*(_WORD *)(v69 + 69) & 3) != 0)
    goto LABEL_79;
  v260 = 0;
  v259 = 0u;
  memset(&v258[8], 0, 48);
  v111 = *(_DWORD *)(v69 + 72);
  v112 = v250;
  v113 = v250 + 104;
  v114 = v252;
  *(_DWORD *)(v252 + 48) = 0;
  *(_WORD *)(v114 + 54) = 0;
  v255 = v68 + 104;
  v256 = (uint64_t (*)(uint64_t, unsigned __int8 *))(v68 + 104);
  v257 = 0uLL;
  *(_QWORD *)v258 = 0x8200000000;
  *(_DWORD *)&v258[12] = v111;
  *(_WORD *)&v258[9] = 257;
  LOWORD(v259) = -1;
  while (1)
  {
    v115 = sub_1ACC22B44(&v255);
    if (!v115)
      break;
    if (!*((_QWORD *)v115 + 5))
    {
      *(_DWORD *)(v114 + 48) = 4353;
      **(_QWORD **)(v114 + 64) = v115;
      *(_WORD *)(v114 + 52) = 1;
      *(_WORD *)(v114 + 24) = 1;
      v116 = 33;
      v61 = v249;
      goto LABEL_151;
    }
  }
  v117 = *(_QWORD *)(v70 + 16);
  v61 = v249;
  while (v117)
  {
    if (*(_BYTE *)(v117 + 98) && !*(_QWORD *)(v117 + 72) && *(unsigned __int16 *)(v117 + 94) <= 3u)
    {
      if ((*(_WORD *)(v117 + 99) & 8) != 0)
        v118 = 130;
      else
        v118 = 2;
      if (*(_WORD *)(v117 + 94))
      {
        v119 = 0;
        while (1)
        {
          v255 = v113;
          v256 = (uint64_t (*)(uint64_t, unsigned __int8 *))v113;
          v258[8] = 0;
          v257 = 0uLL;
          *(_DWORD *)v258 = 0;
          *(_DWORD *)&v258[4] = v118;
          *(_DWORD *)&v258[12] = v111;
          *(_WORD *)&v258[9] = 257;
          v120 = *(__int16 *)(*(_QWORD *)(v117 + 8) + 2 * v119);
          v121 = *(_QWORD *)(v117 + 24);
          if (*(unsigned __int16 *)(v121 + 52) == *(unsigned __int16 *)(*(_QWORD *)(v117 + 8) + 2 * v119))
          {
            LOWORD(v120) = -1;
          }
          else if ((v120 & 0x80000000) != 0)
          {
            if (v120 == -2)
            {
              *((_QWORD *)&v257 + 1) = *(_QWORD *)(*(_QWORD *)(v117 + 80) + 24 * v119 + 8);
              *(_QWORD *)&v257 = *(_QWORD *)(*(_QWORD *)(v117 + 64) + 8 * v119);
              LOWORD(v259) = -2;
              v122 = sub_1ACC22E9C((uint64_t)&v255);
              goto LABEL_172;
            }
          }
          else
          {
            v258[8] = *(_BYTE *)(*(_QWORD *)(v121 + 8) + 16 * v120 + 9);
            *(_QWORD *)&v257 = *(_QWORD *)(*(_QWORD *)(v117 + 64) + 8 * v119);
          }
          LOWORD(v259) = v120;
          v122 = sub_1ACC22B44(&v255);
LABEL_172:
          if (!v122)
          {
LABEL_154:
            v61 = v249;
            goto LABEL_155;
          }
          while (*((_QWORD *)v122 + 5))
          {
            v122 = sub_1ACC22B44(&v255);
            if (!v122)
              goto LABEL_154;
          }
          *(_QWORD *)(*(_QWORD *)(v114 + 64) + 8 * v119++) = v122;
          v61 = v249;
          if (v119 >= *(unsigned __int16 *)(v117 + 94))
            goto LABEL_155;
        }
      }
      LODWORD(v119) = 0;
LABEL_155:
      if ((_DWORD)v119 == *(unsigned __int16 *)(v117 + 94))
      {
        *(_DWORD *)(v114 + 48) = 4609;
        if ((*(_WORD *)(v117 + 99) & 0x20) != 0 || (*(_QWORD *)(v117 + 104) & *(_QWORD *)(v69 + 88)) == 0)
          *(_DWORD *)(v114 + 48) = 4673;
        *(_WORD *)(v114 + 52) = v119;
        *(_WORD *)(v114 + 24) = v119;
        v116 = 39;
        *(_QWORD *)(v114 + 32) = v117;
LABEL_151:
        *(_WORD *)(v114 + 20) = v116;
        break;
      }
    }
    v117 = *(_QWORD *)(v117 + 40);
  }
  v123 = *(_DWORD *)(v114 + 48);
  if (v123)
  {
    *(_WORD *)(v114 + 22) = 1;
    v124 = v112;
    *(_QWORD *)(v112 + 952) = v114;
    *(_QWORD *)(v114 + 8) = 1;
    *(_DWORD *)(v112 + 860) = v111;
    *(_WORD *)(v112 + 70) = 1;
    v125 = *(_DWORD **)(v112 + 16);
    v60 = v236;
    v110 = v232;
    if (v125)
      *(_BYTE *)(v112 + 65) = *v125;
    v126 = *(_WORD *)(v112 + 60);
    v59 = v248;
    if ((v126 & 0x100) != 0)
      *(_BYTE *)(v124 + 67) = 1;
    if (v258[9] >= 2u)
      *(_DWORD *)(v114 + 48) = v123 | 0x200000;
    goto LABEL_186;
  }
  v68 = v250;
LABEL_79:
  v71 = *(_QWORD *)(v68 + 8) + 8;
  v72 = v71 + 104 * *(unsigned __int8 *)(v68 + 64);
  v241 = **(_QWORD **)v68;
  v73 = v252;
  HIDWORD(v254) = 20000;
  if (v71 < v72)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = v68 + 604;
    v244 = v68;
    v246 = v252;
    do
    {
      *(_BYTE *)(v73 + 16) = v76;
      HIDWORD(v254) += 1000;
      v80 = *(_DWORD *)(v71 + 64);
      v81 = *(_DWORD *)(v68 + 600);
      if (v81 == v80)
      {
        v82 = 1;
      }
      else
      {
        v83 = *(unsigned int *)(v68 + 596);
        if ((int)v83 < 2)
        {
LABEL_89:
          v82 = 0;
        }
        else
        {
          v84 = 0;
          v85 = v83 - 1;
          while (*(_DWORD *)(v79 + 4 * v84) != v80)
          {
            if (v85 == ++v84)
              goto LABEL_89;
          }
          v82 = 1 << (v84 + 1);
        }
      }
      *(_QWORD *)(v73 + 8) = v82;
      v86 = *(unsigned __int8 *)(v71 + 60);
      v87 = v75 | v86 & 0x62;
      if (v74)
        v88 = v78;
      else
        v88 = 0;
      v89 = (v86 & 0x40) != 0 || v74;
      v90 = (v86 >> 4) & 1;
      if (v87)
        v91 = v78 | v77;
      else
        v91 = v88;
      if (v87)
        v75 = v90;
      else
        v75 = 0;
      if (v87)
        v74 = v89;
      else
        v74 = v74;
      if (*(_BYTE *)(*(_QWORD *)(v71 + 32) + 63) == 1)
      {
        v92 = v71 + 104;
        if (v71 + 104 >= v72)
        {
          v93 = 0;
        }
        else
        {
          v93 = 0;
          v94 = v71;
          do
          {
            v96 = v92;
            if (v93 || (*(_BYTE *)(v94 + 164) & 0x22) != 0)
            {
              v97 = *(_DWORD *)(v94 + 168);
              if (v81 == v97)
              {
                v95 = 1;
              }
              else
              {
                v98 = *(unsigned int *)(v68 + 596);
                if ((int)v98 < 2)
                {
LABEL_119:
                  v95 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = v98 - 1;
                  while (*(_DWORD *)(v79 + 4 * v99) != v97)
                  {
                    if (v100 == ++v99)
                      goto LABEL_119;
                  }
                  v95 = 1 << (v99 + 1);
                }
              }
              v93 |= v95;
            }
            else
            {
              v93 = 0;
            }
            v92 = v96 + 104;
            v94 = v96;
          }
          while (v96 + 104 < v72);
        }
        v78 = v91;
        v101 = sub_1ACC22FB0((uint64_t)&v250, v91, v93);
        if (v101)
          goto LABEL_128;
      }
      else
      {
        v78 = v91;
        v101 = sub_1ACC23970(&v250, v91);
        v93 = 0;
        if (v101)
          goto LABEL_128;
      }
      if (!*(_BYTE *)(v251 + 17))
      {
        v73 = v246;
        v77 |= *(_QWORD *)(v246 + 8);
        goto LABEL_132;
      }
      v101 = sub_1ACC242F0(&v250, v78, v93);
LABEL_128:
      v73 = v246;
      v77 |= *(_QWORD *)(v246 + 8);
      if (v101 == 101)
      {
        sqlite3_log(28, "abbreviated query algorithm search");
        goto LABEL_82;
      }
      if (v101)
        goto LABEL_134;
LABEL_132:
      if (*(_BYTE *)(v241 + 103))
        break;
LABEL_82:
      ++v76;
      v71 += 104;
      v68 = v244;
    }
    while (v71 < v72);
  }
  v101 = 0;
LABEL_134:
  v102 = *(_QWORD **)(v73 + 64);
  if (v102 != (_QWORD *)(v73 + 80))
  {
    sub_1ACBE0F9C((_QWORD *)v241, v102);
    *(_QWORD *)(v73 + 64) = v73 + 80;
    *(_WORD *)(v73 + 56) = 3;
  }
  sub_1ACC2585C((_QWORD *)v241, v73);
  *(_WORD *)(v73 + 52) = 0;
  *(_DWORD *)(v73 + 48) = 0;
  v59 = v248;
  v61 = v249;
  v60 = v236;
  v11 = v229;
  if (v101 || (sub_1ACC1A450(v249, 0), v61 = v249, *(_BYTE *)(v236 + 103)))
  {
LABEL_138:
    if (v61)
      goto LABEL_139;
    return v61;
  }
  v110 = v232;
  if (*(_QWORD *)(v249 + 16))
  {
    sub_1ACC1A450(v249, (__int16)(*(_WORD *)(v249 + 70) + 1));
    v61 = v249;
    if (*(_BYTE *)(v236 + 103))
      goto LABEL_139;
LABEL_186:
    if (*(_QWORD *)(v61 + 16))
      goto LABEL_189;
  }
  if ((*(_BYTE *)(v60 + 49) & 0x10) != 0)
  {
    sub_1ACC1AFD0(v61);
    v61 = v249;
  }
LABEL_189:
  if (*(_DWORD *)(v59 + 48))
    goto LABEL_139;
  v127 = *(unsigned __int8 *)(v61 + 64);
  v128 = -1;
  if ((v235 & 0x400) != 0)
  {
    v129 = v231;
  }
  else
  {
    v129 = v231;
    if (a5 && v127 >= 2)
    {
      v130 = *(_DWORD *)(v60 + 96);
      if ((v130 & 0x100) != 0)
        goto LABEL_199;
      v131 = sub_1ACC1B040(v61);
      v61 = v249;
      v128 = v131;
      v127 = *(unsigned __int8 *)(v249 + 64);
      v110 = v127;
    }
  }
  if (v127 < 2)
    goto LABEL_201;
  v130 = *(_DWORD *)(v60 + 96);
LABEL_199:
  if ((v130 & 0x80000) == 0)
  {
    sub_1ACC1B3AC(v61);
    v61 = v249;
  }
LABEL_201:
  *(_WORD *)(*(_QWORD *)v61 + 216) += *(_WORD *)(v61 + 70);
  if ((v235 & 4) != 0)
  {
    v222 = *(_QWORD *)(v61 + 952);
    v223 = *(_DWORD *)(v222 + 48);
    if ((v223 & 0x1000) != 0)
    {
      v224 = *(_QWORD *)(v11 + 40);
      v225 = 1;
    }
    else
    {
      if ((v235 & 8) == 0)
        goto LABEL_202;
      v224 = *(_QWORD *)(v11 + 40);
      if (*(_BYTE *)(v224 + 63) == 1 || (v235 & 0x10) == 0 && (v223 & 0x2000) != 0)
        goto LABEL_202;
      if ((*(_BYTE *)(v60 + 99) & 8) != 0)
        goto LABEL_202;
      v225 = 2;
    }
    v242 = 0;
    *(_BYTE *)(v61 + 66) = v225;
    if ((v223 & 0x40) != 0 && (*(_DWORD *)(v224 + 48) & 0x80) == 0)
    {
      v242 = v235 & 8;
      *(_DWORD *)(v222 + 48) = v223 & 0xFFFFFFBF;
    }
    goto LABEL_203;
  }
LABEL_202:
  v242 = 0;
LABEL_203:
  if (v110 < 1)
  {
    v226 = *(_DWORD *)(v129 + 144);
    *(_DWORD *)(v61 + 72) = v226;
    v59 = v248;
    if (*(_BYTE *)(v60 + 103))
      goto LABEL_139;
LABEL_348:
    *(_DWORD *)(v61 + 76) = v226;
    return v61;
  }
  v239 = v128;
  v132 = 0;
  v247 = v235 & 0x20;
  v133 = (v235 & 0x20) == 0 || v230 == 0;
  v245 = v133;
  v134 = v228;
  v233 = v110;
  do
  {
    v138 = *(unsigned __int8 *)(v134 + 64);
    v139 = v11 + 104 * *(unsigned __int8 *)(v134 + 64);
    v142 = *(_QWORD *)(v139 + 40);
    v140 = v139 + 40;
    v141 = v142;
    v143 = *(_QWORD *)(v142 + 96);
    if (v143)
    {
      v144 = (uint64_t *)(*(_QWORD *)(v60 + 32) + 24);
      LODWORD(v145) = -1;
      do
      {
        v146 = *v144;
        v144 += 4;
        v145 = (v145 + 1);
      }
      while (v146 != v143);
    }
    else
    {
      v145 = 4294934528;
    }
    v147 = *(_QWORD *)(v134 + 96);
    v148 = v134;
    v149 = v147;
    if ((*(_BYTE *)(v141 + 49) & 0x40) == 0)
    {
      v150 = *(unsigned __int8 *)(v141 + 63);
      if (v150 != 2)
      {
        if ((*(_DWORD *)(v147 + 48) & 0x400) != 0)
        {
          for (i = *(_QWORD **)(v141 + 80); i; i = (_QWORD *)i[5])
          {
            if (*i == v60)
              break;
          }
          sub_1ACBA86CC((uint64_t *)v231, 173, *(unsigned int *)(v229 + 104 * *(unsigned __int8 *)(v134 + 64) + 72), 0, 0, (uint64_t)i, 4294967285, v108);
          v61 = v249;
          v134 = v148;
        }
        else if (v150 != 1)
        {
          if (*(_DWORD *)(v147 + 48) & 0x40 | v247
            && (*(_BYTE *)(v229 + 104 * *(unsigned __int8 *)(v134 + 64) + 68) & 0x50) == 0)
          {
            sub_1ACC08EA0(v248, v145, *(_DWORD *)(v141 + 40), 0, *(_QWORD *)v141);
            v134 = v148;
            v61 = v249;
          }
          else
          {
            if (*(_BYTE *)(v61 + 66))
            {
              v151 = v229;
              *(_DWORD *)(v61 + 40) = *(_DWORD *)(v229 + 104 * *(unsigned __int8 *)(v134 + 64) + 72);
              v152 = 113;
              v153 = v61;
            }
            else
            {
              v152 = 112;
              v153 = v61;
              v151 = v229;
            }
            sub_1ACB7A514((_QWORD *)v248, *(unsigned int *)(v151 + 104 * v138 + 72), v145, v141, v152, v106, v107, v108);
            v197 = *(unsigned __int8 *)(v153 + 66);
            v61 = v153;
            v147 = v149;
            if (!v197
              && *(__int16 *)(v141 + 54) <= 63
              && (*(_BYTE *)(v141 + 48) & 0xE0) == 0
              && (*(_DWORD *)(v149 + 48) & 0x404000) == 0)
            {
              v198 = *(_QWORD *)(v229 + 104 * v138 + 88);
              if (v198)
              {
                v199 = 0;
                do
                {
                  ++v199;
                  v200 = v198 > 1;
                  v198 >>= 1;
                }
                while (v200);
              }
              else
              {
                v199 = 0;
              }
              sub_1ACB788AC((uint64_t *)v231, -1, v199, 0xFFFFFFFD);
              v60 = v236;
              v61 = v249;
              v147 = v149;
            }
            v201 = *(_DWORD *)(v231 + 144);
            v169 = __OFSUB__(v201, 1);
            v202 = v201 - 1;
            v134 = v148;
            if (v202 < 0 == v169)
              *(_WORD *)(*(_QWORD *)(v231 + 136) + 40 * v202 + 2) = v242;
          }
        }
      }
    }
    if ((*(_BYTE *)(v147 + 49) & 2) != 0)
    {
      v155 = *(_QWORD *)(v147 + 32);
      if ((*(_BYTE *)(v141 + 48) & 0x80) != 0 && (v235 & 0x20) != 0 && (*(_WORD *)(v155 + 99) & 3) == 2)
      {
        *(_DWORD *)(v134 + 8) = *(_DWORD *)(v134 + 4);
      }
      else
      {
        if (*(_BYTE *)(v61 + 66))
        {
          v156 = *(_QWORD *)(*(_QWORD *)v140 + 16);
          if (v156)
            v157 = v156 == v155;
          else
            v157 = 1;
          v158 = v230;
          if (!v157)
          {
            LODWORD(v158) = v230;
            do
            {
              v158 = (v158 + 1);
              v156 = *(_QWORD *)(v156 + 40);
              if (v156)
                v159 = v156 == v155;
              else
                v159 = 1;
            }
            while (!v159);
          }
          *(_DWORD *)(v61 + 44) = v158;
          v160 = 113;
        }
        else if (v245)
        {
          v158 = *(unsigned int *)(v248 + 52);
          *(_DWORD *)(v248 + 52) = v158 + 1;
          if ((*(_WORD *)(v155 + 99) & 0x800) != 0 && (*(_BYTE *)(v60 + 99) & 1) == 0)
          {
            sub_1ACC1B46C((uint64_t *)v248, v155, v158, v140 - 32);
            v134 = v148;
          }
          v160 = 112;
        }
        else
        {
          v160 = 101;
          v158 = v230;
        }
        *(_DWORD *)(v134 + 8) = v158;
        v161 = *(unsigned int *)(v155 + 88);
        v162 = *(_DWORD *)(v231 + 144);
        if (*(_DWORD *)(v231 + 148) <= v162)
        {
          sub_1ACBFF5AC(v231, v160, v158, v161, v145, v106, v107, v108);
        }
        else
        {
          *(_DWORD *)(v231 + 144) = v162 + 1;
          v163 = *(_QWORD *)(v231 + 136) + 40 * v162;
          *(_BYTE *)v163 = v160;
          *(_WORD *)(v163 + 2) = 0;
          *(_DWORD *)(v163 + 4) = v158;
          *(_DWORD *)(v163 + 8) = v161;
          *(_DWORD *)(v163 + 12) = v145;
          *(_BYTE *)(v163 + 1) = 0;
          *(_QWORD *)(v163 + 24) = 0;
          *(_QWORD *)(v163 + 32) = 0;
          *(_QWORD *)(v163 + 16) = 0;
        }
        v164 = *(_QWORD *)(v248 + 16);
        v165 = sub_1ACC09130((_DWORD *)v248, v155);
        v61 = v249;
        v134 = v148;
        if (v165)
        {
          if (*(_BYTE *)(*(_QWORD *)v164 + 103))
          {
            if (!*(_QWORD *)(*(_QWORD *)v164 + 816))
            {
              v157 = (*(_DWORD *)v165)-- == 1;
              if (v157)
              {
                sub_1ACBF0674(*(_QWORD **)(v165 + 16), (_QWORD *)v165);
                v134 = v148;
                v61 = v249;
              }
            }
          }
          else
          {
            v166 = *(_QWORD *)(v164 + 136) + 40 * *(int *)(v164 + 144);
            *(_BYTE *)(v166 - 39) = -8;
            *(_QWORD *)(v166 - 24) = v165;
          }
        }
        v167 = *(_DWORD *)(v149 + 48);
        if ((v167 & 0xF) != 0 && (v167 & 0x188002) == 0 && (*(_WORD *)(v61 + 60) & 1) == 0 && *(_BYTE *)(v61 + 67) != 2)
        {
          v168 = *(_DWORD *)(v231 + 144);
          v169 = __OFSUB__(v168, 1);
          v170 = v168 - 1;
          if (v170 < 0 == v169)
            *(_WORD *)(*(_QWORD *)(v231 + 136) + 40 * v170 + 2) = 2;
        }
      }
    }
    if ((v145 & 0x80000000) == 0)
    {
      v171 = *(_QWORD *)(v248 + 168) ? *(_QWORD *)(v248 + 168) : v248;
      v172 = *(_DWORD *)(v171 + 124);
      if ((v172 & (1 << v145)) == 0)
      {
        *(_DWORD *)(v171 + 124) = v172 | (1 << v145);
        if ((_DWORD)v145 == 1)
        {
          sub_1ACBE9418(v171);
          v134 = v148;
          v61 = v249;
        }
      }
    }
    v11 = v229;
    if ((*(_BYTE *)(v229 + 104 * v138 + 68) & 0x10) != 0)
    {
      v173 = v61;
      v174 = sub_1ACBE1124(**(_QWORD **)v61, 0x24uLL);
      if (v174)
      {
        v175 = v174;
        *(_QWORD *)v174 = *(_QWORD *)(v173 + 88);
        *(_QWORD *)(v174 + 8) = 20;
        *(_QWORD *)(v173 + 88) = v174;
        v176 = *(_DWORD *)(v248 + 52);
        *(_DWORD *)(v174 + 16) = v176;
        v177 = (unsigned int *)(v174 + 16);
        *(_QWORD *)(v148 + 56) = v174 + 16;
        v178 = (*(_DWORD *)(v248 + 56) + 1);
        *(_DWORD *)(v248 + 52) = v176 + 1;
        *(_DWORD *)(v248 + 56) = v178;
        *(_DWORD *)(v174 + 20) = v178;
        v179 = *(_DWORD *)(v231 + 144);
        if (*(_DWORD *)(v231 + 148) <= v179)
        {
          sub_1ACBFF5AC(v231, 77, 0x10000, v178, 0, v106, v107, v108);
        }
        else
        {
          *(_DWORD *)(v231 + 144) = v179 + 1;
          v180 = *(_QWORD *)(v231 + 136) + 40 * v179;
          *(_QWORD *)v180 = 0x100000000004DLL;
          *(_DWORD *)(v180 + 8) = v178;
          *(_QWORD *)(v180 + 12) = 0;
          *(_QWORD *)(v180 + 28) = 0;
          *(_QWORD *)(v180 + 20) = 0;
          *(_DWORD *)(v180 + 36) = 0;
        }
        v181 = (*(_DWORD *)(v248 + 56) + 1);
        *(_DWORD *)(v248 + 56) = v181;
        *(_DWORD *)(v175 + 24) = v181;
        v182 = *(_DWORD *)(v231 + 144);
        if (*(_DWORD *)(v231 + 148) <= v182)
        {
          sub_1ACBFF5AC(v231, 75, 0, v181, 0, v106, v107, v108);
        }
        else
        {
          *(_DWORD *)(v231 + 144) = v182 + 1;
          v183 = *(_QWORD *)(v231 + 136) + 40 * v182;
          *(_QWORD *)v183 = 75;
          *(_DWORD *)(v183 + 8) = v181;
          *(_QWORD *)(v183 + 12) = 0;
          *(_QWORD *)(v183 + 28) = 0;
          *(_QWORD *)(v183 + 20) = 0;
          *(_DWORD *)(v183 + 36) = 0;
        }
        v184 = v149;
        if ((*(_BYTE *)(v141 + 48) & 0x80) != 0)
        {
          for (j = *(_QWORD *)(v141 + 16); j; j = *(_QWORD *)(j + 40))
          {
            if ((*(_WORD *)(j + 99) & 3) == 2)
              break;
          }
          v189 = *v177;
          v190 = *(unsigned __int16 *)(j + 94);
          v191 = *(_DWORD *)(v231 + 144);
          if (*(_DWORD *)(v231 + 148) <= v191)
          {
            sub_1ACBFF5AC(v231, 118, v189, v190, 0, v106, v107, v108);
          }
          else
          {
            *(_DWORD *)(v231 + 144) = v191 + 1;
            v192 = *(_QWORD *)(v231 + 136) + 40 * v191;
            *(_DWORD *)v192 = 118;
            *(_DWORD *)(v192 + 4) = v189;
            *(_DWORD *)(v192 + 8) = v190;
            *(_QWORD *)(v192 + 12) = 0;
            *(_QWORD *)(v192 + 28) = 0;
            *(_QWORD *)(v192 + 20) = 0;
            *(_DWORD *)(v192 + 36) = 0;
          }
          v196 = *(_QWORD *)(v248 + 16);
          v194 = sub_1ACC09130((_DWORD *)v248, j);
          v61 = v249;
          v134 = v148;
          v184 = v149;
          if (!v194)
            goto LABEL_210;
          v195 = *(_QWORD *)v196;
          if (!*(_BYTE *)(*(_QWORD *)v196 + 103))
          {
            v135 = *(_QWORD *)(v196 + 136);
            v136 = *(_DWORD *)(v196 + 144);
            goto LABEL_209;
          }
        }
        else
        {
          v185 = *v177;
          v186 = *(_DWORD *)(v231 + 144);
          if (*(_DWORD *)(v231 + 148) <= v186)
          {
            sub_1ACBFF5AC(v231, 118, v185, 1, 0, v106, v107, v108);
          }
          else
          {
            *(_DWORD *)(v231 + 144) = v186 + 1;
            v187 = *(_QWORD *)(v231 + 136) + 40 * v186;
            *(_DWORD *)v187 = 118;
            *(_DWORD *)(v187 + 4) = v185;
            *(_DWORD *)(v187 + 8) = 1;
            *(_QWORD *)(v187 + 12) = 0;
            *(_QWORD *)(v187 + 28) = 0;
            *(_QWORD *)(v187 + 20) = 0;
            *(_DWORD *)(v187 + 36) = 0;
          }
          v193 = sub_1ACC092C0(*(_QWORD *)v248, 1, 0);
          v61 = v249;
          v134 = v148;
          if (!v193)
            goto LABEL_210;
          v194 = v193;
          *(_QWORD *)(v193 + 32) = 0;
          **(_BYTE **)(v193 + 24) = 0;
          v195 = *(_QWORD *)v231;
          if (!*(_BYTE *)(*(_QWORD *)v231 + 103))
          {
            v135 = *(_QWORD *)(v231 + 136);
            v136 = *(_DWORD *)(v231 + 144);
LABEL_209:
            v137 = v135 + 40 * v136;
            *(_BYTE *)(v137 - 39) = -8;
            *(_QWORD *)(v137 - 24) = v194;
LABEL_210:
            *(_DWORD *)(v184 + 48) &= ~0x40u;
            *(_BYTE *)(v61 + 65) = 0;
            *(_BYTE *)(v61 + 67) = 3;
            goto LABEL_211;
          }
        }
        if (!*(_QWORD *)(v195 + 816))
        {
          v157 = (*(_DWORD *)v194)-- == 1;
          if (v157)
          {
            sub_1ACBF0674(*(_QWORD **)(v194 + 16), (_QWORD *)v194);
            v134 = v148;
            v61 = v249;
          }
        }
        goto LABEL_210;
      }
      v134 = v148;
      *(_QWORD *)(v148 + 56) = 0;
      v61 = v173;
    }
LABEL_211:
    ++v132;
    v134 += 120;
  }
  while (v132 != v233);
  *(_DWORD *)(v61 + 72) = *(_DWORD *)(v231 + 144);
  v59 = v248;
  v203 = v239;
  if (!*(_BYTE *)(v60 + 103))
  {
    v204 = 0;
    v205 = 0;
    while (!*(_DWORD *)(v59 + 48))
    {
      v206 = v61 + v204;
      v207 = *(_DWORD *)(*(_QWORD *)(v61 + v204 + 952) + 48);
      v208 = *(unsigned __int8 *)(v61 + v204 + 920);
      v209 = *(_WORD *)(v11 + 104 * *(unsigned __int8 *)(v61 + v204 + 920) + 69);
      if ((v209 & 0x10) != 0)
      {
        if ((v209 & 8) != 0)
        {
          sub_1ACBFF554(v231, 10, *(unsigned int *)(v11 + 104 * *(unsigned __int8 *)(v61 + v204 + 920) + 60), *(unsigned int *)(v11 + 104 * *(unsigned __int8 *)(v61 + v204 + 920) + 56), v105, v106, v107, v108);
          v61 = v249;
        }
        else
        {
          v210 = sub_1ACC08CD4(v231, 15, v103, v104, v105, v106, v107, v108);
          sub_1ACBFF554(v231, 10, *(unsigned int *)(v11 + 104 * v208 + 60), *(unsigned int *)(v11 + 104 * v208 + 56), v211, v212, v213, v214);
          v215 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v231 + 103))
            v215 = (char *)(*(_QWORD *)(v231 + 136) + 40 * v210);
          *((_DWORD *)v215 + 2) = *(_DWORD *)(v231 + 144);
          v61 = v249;
          v11 = v229;
        }
      }
      v216 = (unsigned int *)(v206 + 856);
      v59 = v248;
      v60 = v236;
      if ((v207 & 0x404000) != 0)
      {
        if ((v207 & 0x4000) != 0)
          sub_1ACC1B6B8((uint64_t *)v248, v243, v203, (uint64_t)v216, v105, v106, v107, v108);
        else
          sub_1ACC1C9CC((uint64_t *)v61, v205, (uint64_t)v216, v203, v105, v106, v107, v108);
        v61 = v249;
        if (*(_BYTE *)(v236 + 103))
          break;
      }
      v217 = sub_1ACC1D144((uint64_t *)v248, v11, (uint64_t)v216, v235);
      *(_DWORD *)(v249 + v204 + 888) = *(_DWORD *)(v231 + 144);
      v221 = sub_1ACC1D6B8(v248, v231, v249, v205, v216, v203, v218, v219, v220);
      v61 = v249;
      v203 = v221;
      *(_DWORD *)(v249 + 48) = *(_DWORD *)(v249 + v204 + 880);
      if (!(v207 & 0x2000 | v247))
      {
        sub_1ACC2044C(v231, v11, (uint64_t)v216, v217);
        v61 = v249;
      }
      ++v205;
      v204 += 120;
      v59 = v248;
      v60 = v236;
      if (120 * v233 == v204)
      {
        v226 = *(_DWORD *)(v231 + 144);
        goto LABEL_348;
      }
    }
  }
LABEL_139:
  *(_WORD *)(v59 + 216) = *(_DWORD *)(v61 + 56);
  sub_1ACB7E214((_QWORD *)v60, (_QWORD *)v61);
  return 0;
}

uint64_t sub_1ACB7A4DC(uint64_t result, int a2)
{
  int v2;

  if (*(_QWORD *)(result + 168))
    result = *(_QWORD *)(result + 168);
  v2 = *(_DWORD *)(result + 124);
  if ((v2 & (1 << a2)) == 0)
  {
    *(_DWORD *)(result + 124) = v2 | (1 << a2);
    if (a2 == 1)
      return sub_1ACBE9418(result);
  }
  return result;
}

void sub_1ACB7A514(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v13 = a1[2];
  if (!*(_BYTE *)(*a1 + 111)
    && (_DWORD)a3 != 1
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 32 * (int)a3 + 8) + 17))
  {
    sub_1ACC08F44((uint64_t)a1, a3, *(_DWORD *)(a4 + 40), a5 == 113, *(_QWORD *)a4);
  }
  if ((*(_BYTE *)(a4 + 48) & 0x80) != 0)
  {
    for (i = *(_QWORD *)(a4 + 16); i; i = *(_QWORD *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2)
        break;
    }
    v19 = *(unsigned int *)(i + 88);
    v20 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v20)
    {
      sub_1ACBFF5AC(v13, a5, a2, v19, a3, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v20 + 1;
      v21 = *(_QWORD *)(v13 + 136) + 40 * v20;
      *(_BYTE *)v21 = a5;
      *(_WORD *)(v21 + 2) = 0;
      *(_DWORD *)(v21 + 4) = a2;
      *(_DWORD *)(v21 + 8) = v19;
      *(_DWORD *)(v21 + 12) = a3;
      *(_BYTE *)(v21 + 1) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 16) = 0;
    }
    v22 = a1[2];
    v23 = sub_1ACC09130(a1, i);
    if (v23)
    {
      if (*(_BYTE *)(*(_QWORD *)v22 + 103))
      {
        if (!*(_QWORD *)(*(_QWORD *)v22 + 816) && (*(_DWORD *)v23)-- == 1)
          sub_1ACBF0674(*(_QWORD **)(v23 + 16), (_QWORD *)v23);
      }
      else
      {
        v25 = *(_QWORD *)(v22 + 136) + 40 * *(int *)(v22 + 144);
        *(_BYTE *)(v25 - 39) = -8;
        *(_QWORD *)(v25 - 24) = v23;
      }
    }
  }
  else
  {
    v14 = *(unsigned int *)(a4 + 40);
    v15 = *(__int16 *)(a4 + 56);
    v16 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v16)
    {
      sub_1ACBFF7F0(v13, a5, a2, v14, a3, v15, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v16 + 1;
      v17 = *(_QWORD *)(v13 + 136) + 40 * v16;
      *(_BYTE *)v17 = a5;
      *(_WORD *)(v17 + 2) = 0;
      *(_DWORD *)(v17 + 4) = a2;
      *(_DWORD *)(v17 + 8) = v14;
      *(_DWORD *)(v17 + 12) = a3;
      *(_DWORD *)(v17 + 16) = v15;
      *(_BYTE *)(v17 + 1) = -3;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
    }
  }
}

_QWORD *sub_1ACB7A700(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (!*((_BYTE *)result + 103))
  {
    v4 = *(_QWORD *)(a1 + 136) + 40 * a2;
    result = sub_1ACB693B4(result, *(char *)(v4 + 1), *(_QWORD *)(v4 + 16));
    *(_QWORD *)(v4 + 16) = 0;
    *(_WORD *)v4 = 184;
  }
  return result;
}

uint64_t sub_1ACB7A74C(uint64_t result, uint64_t a2, uint64_t a3, int **a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  signed int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned int *v51;
  uint64_t v52;
  char v53;
  int v54;
  unsigned int v55;
  unsigned __int8 v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned __int8 v61;
  int v62;
  unsigned __int8 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int **v78;
  int **v79;
  signed int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned __int16 *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int **v152;
  unsigned __int8 *v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;

  v156 = a8;
  v161 = a7;
  v8 = a6;
  v11 = result;
  v12 = *(_QWORD *)(result + 16);
  v13 = *a6;
  v14 = *((unsigned int *)a6 + 1);
  v166 = 0;
  if (a5)
  {
    v15 = *(unsigned __int8 *)(a5 + 1);
    v157 = a5;
    if (a4)
      goto LABEL_3;
  }
  else
  {
    v15 = 0;
    v157 = 0;
    if (a4)
    {
LABEL_3:
      if (*a4)
        v16 = a4;
      else
        v16 = 0;
      if (v16)
        goto LABEL_15;
      goto LABEL_10;
    }
  }
  v16 = 0;
LABEL_10:
  if (!v15)
  {
    v17 = *(unsigned int *)(a2 + 12);
    if ((int)v17 >= 1)
    {
      v18 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v18)
      {
        result = sub_1ACBFF5AC(v12, 59, v17, a7, 1, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v18 + 1;
        v19 = *(_QWORD *)(v12 + 136) + 40 * v18;
        *(_DWORD *)v19 = 59;
        *(_DWORD *)(v19 + 4) = v17;
        *(_DWORD *)(v19 + 8) = a7;
        *(_DWORD *)(v19 + 12) = 1;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 16) = 0;
      }
    }
  }
LABEL_15:
  v163 = v15;
  v20 = *(int **)(a2 + 32);
  v21 = *v20;
  v22 = *((_DWORD *)v8 + 3);
  if (!v22)
  {
    if (v16)
    {
      if ((*((_BYTE *)v16 + 36) & 1) != 0)
        v23 = **v16;
      else
        v23 = **v16 + 1;
      v24 = v23 + *(_DWORD *)(v11 + 56);
    }
    else
    {
      v23 = 0;
      v24 = *(_DWORD *)(v11 + 56);
    }
    v25 = (_DWORD *)(v11 + 56);
    v22 = v24 + 1;
    *((_DWORD *)v8 + 3) = v24 + 1;
    goto LABEL_25;
  }
  v23 = 0;
  v25 = (_DWORD *)(v11 + 56);
  v24 = *(_DWORD *)(v11 + 56);
  if ((int)(v22 + v21) > v24)
LABEL_25:
    *v25 = v24 + v21;
  v159 = v23;
  *((_DWORD *)v8 + 4) = v21;
  v165 = v14;
  if ((a3 & 0x80000000) != 0)
  {
    v31 = 1;
    if ((v13 - 9) >= 2 && v13 != 13)
    {
      if (v13 == 3)
        goto LABEL_37;
      v31 = 0;
    }
    if (!v16 || v163 || v13 == 12 || v13 == 14)
      goto LABEL_55;
    v31 |= 0xCu;
    v32 = *((int *)v16 + 2);
    v33 = *v16;
    v34 = **v16;
    v35 = v21;
    if ((int)v32 < v34)
    {
      do
      {
        while (1)
        {
          v36 = LOWORD(v33[6 * v32 + 7]);
          if (LOWORD(v33[6 * v32 + 7]))
            break;
          if (++v32 >= v34)
            goto LABEL_48;
        }
        *(_WORD *)(*(_QWORD *)(a2 + 32) + 24 * (v36 - 1) + 28) = ++v32 - *((_DWORD *)v16 + 2);
        v33 = *v16;
        v34 = **v16;
      }
      while (v32 < v34);
LABEL_48:
      v20 = *(int **)(a2 + 32);
      v35 = *v20;
    }
    if (v35 < 1)
    {
LABEL_55:
      v30 = v22;
    }
    else
    {
      v37 = 0;
      v38 = 24 * v35;
      v30 = v22;
      do
      {
        if (LOWORD(v20[v37 / 4 + 7]))
          v30 = 0;
        v21 = v21 - (LOWORD(v20[v37 / 4 + 7]) != 0);
        v37 += 24;
      }
      while (v38 != v37);
    }
    LODWORD(v166) = v22;
    BYTE4(v166) = v31;
    if (*(_DWORD *)(a2 + 8) && (v31 & 8) != 0 && (int)v159 >= 1)
    {
      v30 = 0;
      v16[5] = (int *)&v166;
    }
    else
    {
      result = sub_1ACC0A21C(v11, v20, v22, 0, v31, (uint64_t)a6, a7, a8);
    }
    goto LABEL_61;
  }
  if ((int)v21 < 1)
  {
LABEL_37:
    v30 = v22;
    goto LABEL_61;
  }
  v153 = v8;
  v26 = 0;
  do
  {
    v28 = v22 + v26;
    v29 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v29)
    {
      *(_DWORD *)(v12 + 144) = v29 + 1;
      v27 = *(_QWORD *)(v12 + 136) + 40 * v29;
      *(_DWORD *)v27 = 94;
      *(_DWORD *)(v27 + 4) = a3;
      *(_DWORD *)(v27 + 8) = v26;
      *(_DWORD *)(v27 + 12) = v28;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0;
      *(_QWORD *)(v27 + 16) = 0;
    }
    else
    {
      result = sub_1ACBFF5AC(v12, 94, a3, v26, v28, (uint64_t)a6, a7, a8);
    }
    v26 = (v26 + 1);
  }
  while ((_DWORD)v21 != (_DWORD)v26);
  v30 = v22;
  v14 = v14;
  v8 = v153;
LABEL_61:
  if (v163)
  {
    v39 = v8;
    v40 = *(unsigned __int8 *)(v157 + 1);
    v41 = sub_1ACC2C898(v11, v40, *(unsigned int *)(v157 + 4), v161, *(unsigned int **)(a2 + 32), v22, a7, a8);
    v42 = v40;
    v8 = v39;
    v14 = v165;
    result = (uint64_t)sub_1ACC18128((_QWORD *)v11, v42, v41, *(_DWORD *)(v157 + 8));
    if (!v16)
    {
      v46 = *(unsigned int *)(a2 + 12);
      if ((int)v46 >= 1)
      {
        v47 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v47)
        {
          result = sub_1ACBFF5AC(v12, 59, v46, v161, 1, (uint64_t)a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v47 + 1;
          v48 = *(_QWORD *)(v12 + 136) + 40 * v47;
          *(_DWORD *)v48 = 59;
          *(_DWORD *)(v48 + 4) = v46;
          *(_DWORD *)(v48 + 8) = v161;
          *(_DWORD *)(v48 + 12) = 1;
          *(_QWORD *)(v48 + 24) = 0;
          *(_QWORD *)(v48 + 32) = 0;
          *(_QWORD *)(v48 + 16) = 0;
        }
      }
    }
  }
  switch(v13)
  {
    case 1:
      if (*(_BYTE *)(v11 + 31))
      {
        v63 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v63;
        v64 = *(unsigned int *)(v11 + 4 * v63 + 224);
      }
      else
      {
        v64 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v64;
      }
      v128 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v128)
      {
        result = sub_1ACBFF5AC(v12, 97, v22, v21, v64, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v128 + 1;
        v129 = *(_QWORD *)(v12 + 136) + 40 * v128;
        *(_DWORD *)v129 = 97;
        *(_DWORD *)(v129 + 4) = v22;
        *(_DWORD *)(v129 + 8) = v21;
        *(_DWORD *)(v129 + 12) = v64;
        *(_QWORD *)(v129 + 24) = 0;
        *(_QWORD *)(v129 + 32) = 0;
        *(_QWORD *)(v129 + 16) = 0;
      }
      v130 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v130)
      {
        result = sub_1ACBFF7F0(v12, 138, v14, v64, v22, v21, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v130 + 1;
        v131 = *(_QWORD *)(v12 + 136) + 40 * v130;
        *(_DWORD *)v131 = 64906;
        *(_DWORD *)(v131 + 4) = v14;
        *(_DWORD *)(v131 + 8) = v64;
        *(_DWORD *)(v131 + 12) = v22;
        *(_DWORD *)(v131 + 16) = v21;
        *(_QWORD *)(v131 + 24) = 0;
        *(_QWORD *)(v131 + 32) = 0;
      }
      if ((_DWORD)v64)
      {
        v132 = *(unsigned __int8 *)(v11 + 31);
        if (v132 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v132 + 1;
          *(_DWORD *)(v11 + 4 * v132 + 224) = v64;
        }
      }
      goto LABEL_192;
    case 2:
      v65 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v65)
      {
        result = sub_1ACBFF5AC(v12, 140, v14, v22, v21, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v65 + 1;
        v66 = *(_QWORD *)(v12 + 136) + 40 * v65;
        *(_DWORD *)v66 = 140;
        *(_DWORD *)(v66 + 4) = v14;
        *(_DWORD *)(v66 + 8) = v22;
        *(_DWORD *)(v66 + 12) = v21;
        *(_QWORD *)(v66 + 24) = 0;
        *(_QWORD *)(v66 + 32) = 0;
        *(_QWORD *)(v66 + 16) = 0;
      }
      goto LABEL_192;
    case 3:
      v67 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v67)
      {
        result = sub_1ACBFF5AC(v12, 71, 1, v14, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v67 + 1;
        v68 = *(_QWORD *)(v12 + 136) + 40 * v67;
        *(_QWORD *)v68 = 0x100000047;
        *(_DWORD *)(v68 + 8) = v14;
        *(_QWORD *)(v68 + 12) = 0;
        *(_QWORD *)(v68 + 28) = 0;
        *(_QWORD *)(v68 + 20) = 0;
        *(_DWORD *)(v68 + 36) = 0;
      }
      goto LABEL_192;
    case 5:
    case 8:
    case 12:
    case 14:
      v43 = v159 + 1;
      v152 = v16;
      if (v159)
      {
        v44 = *(_DWORD *)(v11 + 40);
        if (v44 <= (int)v159)
        {
          v62 = *(_DWORD *)(v11 + 56);
          v45 = (v62 + 1);
          *(_DWORD *)(v11 + 56) = v62 + v43;
        }
        else
        {
          v45 = *(unsigned int *)(v11 + 44);
          *(_DWORD *)(v11 + 40) = v44 - v43;
          *(_DWORD *)(v11 + 44) = v45 + v43;
        }
      }
      else if (*(_BYTE *)(v11 + 31))
      {
        v61 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v61;
        v45 = *(unsigned int *)(v11 + 4 * v61 + 224);
      }
      else
      {
        v45 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v45;
      }
      v75 = v45 + v159;
      v76 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v76)
      {
        result = sub_1ACBFF5AC(v12, 97, v22, v21, v45 + v159, (uint64_t)a6, a7, a8);
        if (v13 != 5)
          goto LABEL_104;
LABEL_110:
        v81 = *(_DWORD *)(v12 + 144);
        v82 = (v81 + 4);
        v83 = (v14 + 1);
        if (*(_DWORD *)(v12 + 148) <= v81)
        {
          result = sub_1ACBFF7F0(v12, 29, v83, v82, v45, 0, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v81 + 1;
          v84 = *(_QWORD *)(v12 + 136) + 40 * v81;
          *(_DWORD *)v84 = 64797;
          *(_DWORD *)(v84 + 4) = v83;
          *(_DWORD *)(v84 + 8) = v82;
          *(_DWORD *)(v84 + 12) = v45;
          *(_DWORD *)(v84 + 16) = 0;
          *(_QWORD *)(v84 + 24) = 0;
          *(_QWORD *)(v84 + 32) = 0;
        }
        v86 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v86)
        {
          result = sub_1ACBFF7F0(v12, 138, v83, v45, v22, v21, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v86 + 1;
          v87 = *(_QWORD *)(v12 + 136) + 40 * v86;
          *(_DWORD *)v87 = 64906;
          *(_DWORD *)(v87 + 4) = v83;
          *(_DWORD *)(v87 + 8) = v45;
          *(_DWORD *)(v87 + 12) = v22;
          *(_DWORD *)(v87 + 16) = v21;
          *(_QWORD *)(v87 + 24) = 0;
          *(_QWORD *)(v87 + 32) = 0;
        }
        v14 = v165;
        v78 = v152;
        if (v152)
          goto LABEL_105;
        goto LABEL_120;
      }
      *(_DWORD *)(v12 + 144) = v76 + 1;
      v77 = *(_QWORD *)(v12 + 136) + 40 * v76;
      *(_DWORD *)v77 = 97;
      *(_DWORD *)(v77 + 4) = v22;
      *(_DWORD *)(v77 + 8) = v21;
      *(_DWORD *)(v77 + 12) = v75;
      *(_QWORD *)(v77 + 24) = 0;
      *(_QWORD *)(v77 + 32) = 0;
      *(_QWORD *)(v77 + 16) = 0;
      if (v13 == 5)
        goto LABEL_110;
LABEL_104:
      v78 = v152;
      if (v152)
      {
LABEL_105:
        v79 = v78;
        result = sub_1ACBA4EF8(v11, v78, a2, v75, v30, 1, v159, a8);
        v80 = v159;
        goto LABEL_106;
      }
LABEL_120:
      v79 = v78;
      if (*(_BYTE *)(v11 + 31))
      {
        v88 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v88;
        v89 = *(unsigned int *)(v11 + 4 * v88 + 224);
      }
      else
      {
        v89 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v89;
      }
      v90 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v90)
      {
        result = sub_1ACBFF5AC(v12, 127, v14, v89, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v90 + 1;
        v91 = *(_QWORD *)(v12 + 136) + 40 * v90;
        *(_DWORD *)v91 = 127;
        *(_DWORD *)(v91 + 4) = v14;
        *(_DWORD *)(v91 + 8) = v89;
        *(_QWORD *)(v91 + 12) = 0;
        *(_QWORD *)(v91 + 28) = 0;
        *(_QWORD *)(v91 + 20) = 0;
        *(_DWORD *)(v91 + 36) = 0;
      }
      v92 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v92)
      {
        result = sub_1ACBFF5AC(v12, 128, v14, v45, v89, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v92 + 1;
        v93 = *(_QWORD *)(v12 + 136) + 40 * v92;
        *(_DWORD *)v93 = 128;
        *(_DWORD *)(v93 + 4) = v14;
        *(_DWORD *)(v93 + 8) = v45;
        *(_DWORD *)(v93 + 12) = v89;
        *(_QWORD *)(v93 + 24) = 0;
        *(_QWORD *)(v93 + 32) = 0;
        *(_QWORD *)(v93 + 16) = 0;
      }
      v80 = v159;
      v94 = *(_DWORD *)(v12 + 144);
      v72 = __OFSUB__(v94, 1);
      v95 = v94 - 1;
      if (v95 < 0 == v72)
        *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v95 + 2) = 8;
      if ((_DWORD)v89)
      {
        v96 = *(unsigned __int8 *)(v11 + 31);
        if (v96 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v96 + 1;
          *(_DWORD *)(v11 + 4 * v96 + 224) = v89;
        }
      }
LABEL_106:
      if (v80)
      {
        v16 = v79;
        if (*(_DWORD *)(v11 + 40) <= v80)
        {
          *(_DWORD *)(v11 + 40) = v159 + 1;
          *(_DWORD *)(v11 + 44) = v45;
        }
      }
      else
      {
        v16 = v79;
        if ((_DWORD)v45)
        {
          v85 = *(unsigned __int8 *)(v11 + 31);
          if (v85 <= 7)
          {
            *(_BYTE *)(v11 + 31) = v85 + 1;
            *(_DWORD *)(v11 + 4 * v85 + 224) = v45;
          }
        }
      }
LABEL_192:
      if (!v16)
      {
LABEL_193:
        v133 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v133)
        {
          v134 = *(_DWORD *)(v12 + 144);
          if (*(_DWORD *)(v12 + 148) <= v134)
          {
            return sub_1ACBFF5AC(v12, 61, v133, v156, 0, (uint64_t)a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v12 + 144) = v134 + 1;
            v135 = *(_QWORD *)(v12 + 136) + 40 * v134;
            *(_DWORD *)v135 = 61;
            *(_DWORD *)(v135 + 4) = v133;
            *(_DWORD *)(v135 + 8) = v156;
            *(_QWORD *)(v135 + 12) = 0;
            *(_QWORD *)(v135 + 28) = 0;
            *(_QWORD *)(v135 + 20) = 0;
            *(_DWORD *)(v135 + 36) = 0;
          }
        }
      }
      return result;
    case 6:
    case 7:
      v49 = v8;
      v50 = v13;
      v51 = (unsigned int *)*((_QWORD *)v49 + 4);
      v52 = *v51;
      v53 = *(_BYTE *)(v11 + 31);
      if (v53)
      {
        *(_BYTE *)(v11 + 31) = v53 - 1;
        v54 = *(_DWORD *)(v11 + 4 * (v53 - 1) + 224);
        v55 = v52 + 2;
        if ((_DWORD)v52 == -1)
        {
          if (v53 != 1)
          {
            v158 = *(_DWORD *)(v11 + 4 * (v53 - 1) + 224);
            v56 = v53 - 2;
            *(_BYTE *)(v11 + 31) = v56;
            v57 = *(_DWORD *)(v11 + 4 * v56 + 224);
LABEL_97:
            v154 = 1;
            v155 = 1;
            goto LABEL_136;
          }
LABEL_96:
          v158 = v54;
          v57 = *(_DWORD *)(v11 + 56) + 1;
          *(_DWORD *)(v11 + 56) = v57;
          goto LABEL_97;
        }
      }
      else
      {
        v54 = *(_DWORD *)(v11 + 56) + 1;
        *(_DWORD *)(v11 + 56) = v54;
        v55 = v52 + 2;
        if ((_DWORD)v52 == -1)
          goto LABEL_96;
      }
      v158 = v54;
      v71 = *(_DWORD *)(v11 + 40);
      v72 = __OFSUB__(v71, v55);
      v73 = v71 - v55;
      v155 = v55;
      v154 = 0;
      if (v73 < 0 != v72)
      {
        v74 = *(_DWORD *)(v11 + 56);
        v57 = v74 + 1;
        *(_DWORD *)(v11 + 56) = v74 + v55;
      }
      else
      {
        v57 = *(_DWORD *)(v11 + 44);
        *(_DWORD *)(v11 + 40) = v73;
        *(_DWORD *)(v11 + 44) = v57 + v55;
      }
LABEL_136:
      v164 = v57;
      v160 = v57 + v52;
      v97 = (v57 + v52 + 1);
      if (v50 == 6)
      {
        v98 = v165 + 1;
        result = *(unsigned int *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= (int)result)
        {
          result = sub_1ACBFF7F0(v12, 29, v98, 0, v22, v21, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = result + 1;
          v99 = *(_QWORD *)(v12 + 136) + 40 * (int)result;
          *(_DWORD *)v99 = 64797;
          *(_QWORD *)(v99 + 4) = v98;
          *(_DWORD *)(v99 + 12) = v22;
          *(_DWORD *)(v99 + 16) = v21;
          *(_QWORD *)(v99 + 24) = 0;
          *(_QWORD *)(v99 + 32) = 0;
        }
      }
      else
      {
        result = 0;
      }
      v100 = *(_DWORD *)(v12 + 144);
      v162 = result;
      if (*(_DWORD *)(v12 + 148) <= v100)
      {
        result = sub_1ACBFF5AC(v12, 97, v22, v21, v97, (uint64_t)a6, a7, a8);
        if (v50 != 6)
          goto LABEL_150;
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v100 + 1;
        v101 = *(_QWORD *)(v12 + 136) + 40 * v100;
        *(_DWORD *)v101 = 97;
        *(_DWORD *)(v101 + 4) = v22;
        *(_DWORD *)(v101 + 8) = v21;
        *(_DWORD *)(v101 + 12) = v97;
        *(_QWORD *)(v101 + 24) = 0;
        *(_QWORD *)(v101 + 32) = 0;
        *(_QWORD *)(v101 + 16) = 0;
        if (v50 != 6)
          goto LABEL_150;
      }
      v102 = v165 + 1;
      v103 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v103)
      {
        result = sub_1ACBFF5AC(v12, 138, v102, v97, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v103 + 1;
        v104 = *(_QWORD *)(v12 + 136) + 40 * v103;
        *(_DWORD *)v104 = 138;
        *(_DWORD *)(v104 + 4) = v102;
        *(_DWORD *)(v104 + 8) = v97;
        *(_QWORD *)(v104 + 12) = 0;
        *(_QWORD *)(v104 + 28) = 0;
        *(_QWORD *)(v104 + 20) = 0;
        *(_DWORD *)(v104 + 36) = 0;
      }
      v105 = *(_DWORD *)(v12 + 144);
      v72 = __OFSUB__(v105, 1);
      v106 = v105 - 1;
      if (v106 < 0 == v72)
        *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v106 + 2) = 16;
LABEL_150:
      if ((int)v52 >= 1)
      {
        v107 = v22 - 1;
        v108 = (unsigned __int16 *)(v51 + 7);
        v109 = v164;
        do
        {
          v111 = *v108;
          v108 += 12;
          v112 = v107 + v111;
          v113 = *(_DWORD *)(v12 + 144);
          if (*(_DWORD *)(v12 + 148) > v113)
          {
            *(_DWORD *)(v12 + 144) = v113 + 1;
            v110 = *(_QWORD *)(v12 + 136) + 40 * v113;
            *(_DWORD *)v110 = 81;
            *(_DWORD *)(v110 + 4) = v112;
            *(_DWORD *)(v110 + 8) = v109;
            *(_QWORD *)(v110 + 12) = 0;
            *(_QWORD *)(v110 + 28) = 0;
            *(_QWORD *)(v110 + 20) = 0;
            *(_DWORD *)(v110 + 36) = 0;
          }
          else
          {
            result = sub_1ACBFF5AC(v12, 81, v112, v109, 0, (uint64_t)a6, a7, a8);
          }
          v109 = (v109 + 1);
          --v52;
        }
        while (v52);
      }
      v114 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v114)
      {
        v116 = v165;
        result = sub_1ACBFF5AC(v12, 126, v165, v160, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v114 + 1;
        v115 = *(_QWORD *)(v12 + 136) + 40 * v114;
        v116 = v165;
        *(_DWORD *)v115 = 126;
        *(_DWORD *)(v115 + 4) = v165;
        *(_DWORD *)(v115 + 8) = v160;
        *(_QWORD *)(v115 + 12) = 0;
        *(_QWORD *)(v115 + 28) = 0;
        *(_QWORD *)(v115 + 20) = 0;
        *(_DWORD *)(v115 + 36) = 0;
      }
      v117 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v117)
      {
        result = sub_1ACBFF5AC(v12, 97, v164, v155, v158, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v117 + 1;
        v118 = *(_QWORD *)(v12 + 136) + 40 * v117;
        *(_DWORD *)v118 = 97;
        *(_DWORD *)(v118 + 4) = v164;
        *(_DWORD *)(v118 + 8) = v155;
        *(_DWORD *)(v118 + 12) = v158;
        *(_QWORD *)(v118 + 24) = 0;
        *(_QWORD *)(v118 + 32) = 0;
        *(_QWORD *)(v118 + 16) = 0;
      }
      v119 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v119)
      {
        result = sub_1ACBFF7F0(v12, 138, v116, v158, v164, v155, a7, a8);
        v121 = v162;
        if (!v162)
          goto LABEL_170;
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v119 + 1;
        v120 = *(_QWORD *)(v12 + 136) + 40 * v119;
        *(_DWORD *)v120 = 64906;
        *(_DWORD *)(v120 + 4) = v116;
        *(_DWORD *)(v120 + 8) = v158;
        *(_DWORD *)(v120 + 12) = v164;
        *(_DWORD *)(v120 + 16) = v155;
        *(_QWORD *)(v120 + 24) = 0;
        *(_QWORD *)(v120 + 32) = 0;
        v121 = v162;
        if (!v162)
          goto LABEL_170;
      }
      if (*(_BYTE *)(*(_QWORD *)v12 + 103))
        v122 = &byte_1EECAD280;
      else
        v122 = (char *)(*(_QWORD *)(v12 + 136) + 40 * v121);
      *((_DWORD *)v122 + 2) = *(_DWORD *)(v12 + 144);
LABEL_170:
      if (v158)
      {
        v123 = *(unsigned __int8 *)(v11 + 31);
        if (v123 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v123 + 1;
          *(_DWORD *)(v11 + 4 * v123 + 224) = v158;
        }
      }
      if (v154)
      {
        if (!v164)
          goto LABEL_192;
        v124 = *(unsigned __int8 *)(v11 + 31);
        if (v124 > 7)
          goto LABEL_192;
        *(_BYTE *)(v11 + 31) = v124 + 1;
        v125 = (unsigned int *)(v11 + 4 * v124 + 224);
      }
      else
      {
        if (*(_DWORD *)(v11 + 40) >= (signed int)v155)
          goto LABEL_192;
        *(_DWORD *)(v11 + 40) = v155;
        v125 = (unsigned int *)(v11 + 44);
      }
      *v125 = v164;
      goto LABEL_192;
    case 9:
    case 13:
      if (v16)
        return sub_1ACBA4EF8(v11, v16, a2, v22, v30, v21, v159, a8);
      v58 = v22;
      if (v13 == 13)
      {
        v58 = *((unsigned int *)v8 + 1);
        v59 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) > v59)
        {
          *(_DWORD *)(v12 + 144) = v59 + 1;
          v60 = *(_QWORD *)(v12 + 136) + 40 * v59;
          *(_DWORD *)v60 = 12;
          *(_DWORD *)(v60 + 4) = v58;
          *(_OWORD *)(v60 + 8) = 0u;
          *(_OWORD *)(v60 + 24) = 0u;
          goto LABEL_193;
        }
        v139 = v12;
        v140 = 12;
        v141 = 0;
      }
      else
      {
        v126 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) > v126)
        {
          *(_DWORD *)(v12 + 144) = v126 + 1;
          v127 = *(_QWORD *)(v12 + 136) + 40 * v126;
          *(_DWORD *)v127 = 84;
          *(_DWORD *)(v127 + 4) = v22;
          *(_DWORD *)(v127 + 8) = v21;
          *(_QWORD *)(v127 + 12) = 0;
          *(_QWORD *)(v127 + 28) = 0;
          *(_QWORD *)(v127 + 20) = 0;
          *(_DWORD *)(v127 + 36) = 0;
          goto LABEL_193;
        }
        v139 = v12;
        v140 = 84;
        v141 = v21;
      }
      result = sub_1ACBFF5AC(v139, v140, v58, v141, 0, (uint64_t)a6, a7, a8);
      goto LABEL_193;
    case 10:
      if (!v16)
        goto LABEL_193;
      return sub_1ACBA4EF8(v11, v16, a2, v22, v30, v21, v159, a8);
    case 11:
      if (v16)
        return sub_1ACBA4EF8(v11, v16, a2, v22, v30, v21, v159, a8);
      if (*(_BYTE *)(v11 + 31))
      {
        v69 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v69;
        v70 = *(unsigned int *)(v11 + 4 * v69 + 224);
      }
      else
      {
        v70 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v11 + 56) = v70;
      }
      result = sub_1ACBA86CC((uint64_t *)v12, 97, v22, v21, v70, *((_QWORD *)v8 + 3), v21, a8);
      v142 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v142)
      {
        result = sub_1ACBFF7F0(v12, 138, v14, v70, v22, v21, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v142 + 1;
        v143 = *(_QWORD *)(v12 + 136) + 40 * v142;
        *(_DWORD *)v143 = 64906;
        *(_DWORD *)(v143 + 4) = v14;
        *(_DWORD *)(v143 + 8) = v70;
        *(_DWORD *)(v143 + 12) = v22;
        *(_DWORD *)(v143 + 16) = v21;
        *(_QWORD *)(v143 + 24) = 0;
        *(_QWORD *)(v143 + 32) = 0;
      }
      if ((_DWORD)v70)
      {
        v144 = *(unsigned __int8 *)(v11 + 31);
        if (v144 <= 7)
        {
          *(_BYTE *)(v11 + 31) = v144 + 1;
          *(_DWORD *)(v11 + 4 * v144 + 224) = v70;
        }
      }
      goto LABEL_193;
    case 15:
      if (v16)
        return sub_1ACBA4EF8(v11, v16, a2, v22, v30, v21, v159, a8);
      v136 = *((unsigned int *)v8 + 2);
      if (*(_BYTE *)(v11 + 31))
      {
        v137 = *(_BYTE *)(v11 + 31) - 1;
        *(_BYTE *)(v11 + 31) = v137;
        v138 = *(unsigned int *)(v11 + 4 * v137 + 224);
      }
      else
      {
        v145 = v11;
        v138 = (*(_DWORD *)(v11 + 56) + 1);
        *(_DWORD *)(v145 + 56) = v138;
      }
      v146 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v146)
      {
        sub_1ACBFF5AC(v12, 50, v22, v156, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v146 + 1;
        v147 = *(_QWORD *)(v12 + 136) + 40 * v146;
        *(_DWORD *)v147 = 50;
        *(_DWORD *)(v147 + 4) = v22;
        *(_DWORD *)(v147 + 8) = v156;
        *(_QWORD *)(v147 + 12) = 0;
        *(_QWORD *)(v147 + 28) = 0;
        *(_QWORD *)(v147 + 20) = 0;
        *(_DWORD *)(v147 + 36) = 0;
      }
      v148 = (v136 >> 31) + v22;
      v149 = v21 - (v136 >> 31);
      v150 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v150)
      {
        sub_1ACBFF5AC(v12, 97, v148, v149, v138, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v150 + 1;
        v151 = *(_QWORD *)(v12 + 136) + 40 * v150;
        *(_DWORD *)v151 = 97;
        *(_DWORD *)(v151 + 4) = v148;
        *(_DWORD *)(v151 + 8) = v149;
        *(_DWORD *)(v151 + 12) = v138;
        *(_QWORD *)(v151 + 24) = 0;
        *(_QWORD *)(v151 + 32) = 0;
        *(_QWORD *)(v151 + 16) = 0;
      }
      if ((v136 & 0x80000000) != 0)
        result = sub_1ACB683F4(v12, 128, v14, v138, v22, (uint64_t)a6, a7, a8);
      else
        result = sub_1ACBCB640(v12, 138, v14, v138, v22, v136, a7, a8);
      goto LABEL_193;
    default:
      goto LABEL_192;
  }
}

uint64_t sub_1ACB7B84C(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int **v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  _DWORD *v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  int *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned int v130;
  int v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  int v138;
  unsigned int v139;
  int **v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  int v159;
  int v160;
  int v161;
  unsigned __int8 *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char *v183;
  int v184;
  unsigned __int8 *v185;
  int v186;
  unsigned __int8 *v187;
  int *v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned __int8 *v192;
  int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  char *v216;
  int v217;
  int v218;
  int v219;
  unsigned __int8 **v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  unsigned __int8 *v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int16 v255;
  __int16 *v256;
  __int16 v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  int v262;
  uint64_t v263;
  unsigned __int8 *v264;
  int v265;
  unsigned __int8 **v266;
  uint64_t v267;
  char v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  unsigned __int8 *v275;
  unsigned int v276;
  unsigned int v277;
  unsigned __int8 *v278;
  int *v279;
  char v280;
  unsigned __int8 *v281;
  unsigned int v282;
  _QWORD *v283;
  unsigned int *v284;
  int v285;
  char v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[5];
  uint64_t v293;
  int v294[3];

  v8 = a3;
  v9 = a1[2];
  v293 = 0;
  v10 = 0uLL;
  memset(v292, 0, sizeof(v292));
  if (!a2)
  {
LABEL_11:
    v22 = *(_DWORD *)(v9 + 144);
    if (*(_DWORD *)(v9 + 148) <= v22)
    {
      sub_1ACBFF5AC(v9, 75, 0, v8, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v9 + 144) = v22 + 1;
      v23 = *(_QWORD *)(v9 + 136) + 40 * v22;
      *(_QWORD *)v23 = 75;
      *(_DWORD *)(v23 + 8) = v8;
      *(_QWORD *)(v23 + 12) = 0;
      *(_QWORD *)(v23 + 28) = 0;
      *(_QWORD *)(v23 + 20) = 0;
      *(_DWORD *)(v23 + 36) = 0;
    }
    return v8;
  }
  v11 = a2;
  while (2)
  {
    if (a1[12])
    {
      if ((v11[6] & 0x80) == 0)
      {
        v13 = sub_1ACC093C8((uint64_t)a1, v11, v8);
        if ((v13 & 0x80000000) == 0)
          return v13;
      }
    }
    v14 = *v11;
    switch(*v11)
    {
      case 0x13u:
      case 0x72u:
        v32 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v293 + 1);
        v36 = v32;
        v37 = *(_DWORD *)(v9 + 144);
        if (*(_DWORD *)(v9 + 148) > v37)
        {
          *(_DWORD *)(v9 + 144) = v37 + 1;
          v38 = *(_QWORD *)(v9 + 136) + 40 * v37;
          *(_BYTE *)v38 = v14;
          *(_WORD *)(v38 + 2) = 0;
          *(_DWORD *)(v38 + 4) = v32;
          *(_DWORD *)(v38 + 8) = v8;
          *(_BYTE *)(v38 + 1) = 0;
          goto LABEL_45;
        }
        v56 = v9;
        v57 = v14;
        goto LABEL_122;
      case 0x14u:
      case 0x8Au:
        if (*(_BYTE *)(*a1 + 103))
          return 0;
        if ((_DWORD)v14 != 138 || (v11[5] & 0x10) == 0 || **(_DWORD **)(*((_QWORD *)v11 + 4) + 32) == 1)
          return sub_1ACBA2944((_QWORD **)a1, v11, a3, a4, a5, a6, a7, a8);
        if (!*((_DWORD *)a1 + 12))
          sub_1ACBCB308((uint64_t)a1, "sub-select returns %d columns - expected %d", a3, a4, a5, a6, a7, a8, **(_DWORD **)(*((_QWORD *)v11 + 4) + 32));
        goto LABEL_276;
      case 0x24u:
        sub_1ACC08D80((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v8);
        v58 = sub_1ACC01D8C(*((_BYTE **)v11 + 1), 0);
        sub_1ACBFF554(v9, 88, v8, v58, v59, v60, v61, v62);
        return v8;
      case 0x2Bu:
      case 0x2Cu:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
        v24 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v293 + 1);
        v25 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 3), &v293);
        v29 = *(_DWORD *)(v9 + 144);
        if (*(_DWORD *)(v9 + 148) > v29)
        {
          *(_DWORD *)(v9 + 144) = v29 + 1;
          v30 = *(_QWORD *)(v9 + 136) + 40 * v29;
          *(_BYTE *)v30 = v14;
          *(_WORD *)(v30 + 2) = 0;
          *(_DWORD *)(v30 + 4) = v25;
          *(_DWORD *)(v30 + 8) = v24;
          *(_DWORD *)(v30 + 12) = v8;
          *(_BYTE *)(v30 + 1) = 0;
          goto LABEL_16;
        }
        sub_1ACBFF5AC(v9, v14, v25, v24, v8, v26, v27, v28);
        goto LABEL_276;
      case 0x2Du:
      case 0xABu:
        v280 = 0;
        if ((_DWORD)v14 == 45)
          v14 = 53;
        else
          v14 = 52;
        v282 = 128;
        v31 = 1;
        goto LABEL_27;
      case 0x30u:
        sub_1ACC0A5A4((unsigned int *)a1, (uint64_t)v11, v8, 0, 0, a6, a7, a8);
        return v8;
      case 0x31u:
        v63 = *((_DWORD *)a1 + 17);
        v64 = (v63 - 1);
        v65 = (v63 - 2);
        *((_DWORD *)a1 + 17) = v65;
        sub_1ACBFF554(v9, 75, 0, v8, a5, a6, a7, a8);
        sub_1ACBA1164(a1, v11, v64, v65);
        sub_1ACBFF554(v9, 71, 1, v8, v66, v67, v68, v69);
        sub_1ACC0A574(v9, v64);
        sub_1ACBFF554(v9, 86, v8, 0, v70, v71, v72, v73);
        sub_1ACC0A574(v9, v65);
        return v8;
      case 0x32u:
      case 0x33u:
        v54 = *(_DWORD *)(v9 + 144);
        if (*(_DWORD *)(v9 + 148) <= v54)
        {
          sub_1ACBFF5AC(v9, 71, 1, v8, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v9 + 144) = v54 + 1;
          v55 = *(_QWORD *)(v9 + 136) + 40 * v54;
          *(_QWORD *)v55 = 0x100000047;
          *(_DWORD *)(v55 + 8) = v8;
          *(_QWORD *)(v55 + 12) = 0;
          *(_QWORD *)(v55 + 28) = 0;
          *(_QWORD *)(v55 + 20) = 0;
          *(_DWORD *)(v55 + 36) = 0;
        }
        v147 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v293 + 1);
        v151 = *(_DWORD *)(v9 + 144);
        if (*(_DWORD *)(v9 + 148) <= v151)
        {
          v151 = sub_1ACBFF5AC(v9, v14, v147, 0, 0, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)(v9 + 144) = v151 + 1;
          v152 = *(_QWORD *)(v9 + 136) + 40 * v151;
          *(_BYTE *)v152 = v14;
          *(_WORD *)(v152 + 2) = 0;
          *(_DWORD *)(v152 + 4) = v147;
          *(_BYTE *)(v152 + 1) = 0;
          *(_OWORD *)(v152 + 8) = 0u;
          *(_OWORD *)(v152 + 24) = 0u;
        }
        v153 = *(_DWORD *)(v9 + 144);
        if (*(_DWORD *)(v9 + 148) <= v153)
        {
          sub_1ACBFF5AC(v9, 71, 0, v8, 0, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)(v9 + 144) = v153 + 1;
          v154 = *(_QWORD *)(v9 + 136) + 40 * v153;
          *(_QWORD *)v154 = 71;
          *(_DWORD *)(v154 + 8) = v8;
          *(_QWORD *)(v154 + 12) = 0;
          *(_QWORD *)(v154 + 28) = 0;
          *(_QWORD *)(v154 + 20) = 0;
          *(_DWORD *)(v154 + 36) = 0;
        }
        v155 = *(_DWORD *)(v9 + 144);
        if (*(_BYTE *)(*(_QWORD *)v9 + 103))
          goto LABEL_147;
        *(_DWORD *)(*(_QWORD *)(v9 + 136) + 40 * v151 + 8) = v155;
        goto LABEL_276;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
        v31 = 0;
        v282 = 0;
        v280 = 1;
LABEL_27:
        v39 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
        v40 = *v39;
        v41 = v40;
        if (v40 == 176)
          v41 = v39[2];
        if (v41 == 138)
        {
          v42 = (int **)(*((_QWORD *)v39 + 4) + 32);
        }
        else
        {
          if (v41 != 177)
            goto LABEL_34;
          v42 = (int **)(v39 + 32);
        }
        if (**v42 < 2)
        {
LABEL_34:
          v43 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v293 + 1);
          v47 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 3), &v293);
          v48 = *(_DWORD *)(v9 + 144);
          if (*(_DWORD *)(v9 + 148) <= v48)
          {
            sub_1ACBFF5AC(v9, 71, 1, v8, 0, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)(v9 + 144) = v48 + 1;
            v49 = *(_QWORD *)(v9 + 136) + 40 * v48;
            *(_QWORD *)v49 = 0x100000047;
            *(_DWORD *)(v49 + 8) = v8;
            *(_QWORD *)(v49 + 12) = 0;
            *(_QWORD *)(v49 + 28) = 0;
            *(_QWORD *)(v49 + 20) = 0;
            *(_DWORD *)(v49 + 36) = 0;
          }
          sub_1ACB9F66C((uint64_t)a1, v39, *((unsigned __int8 **)v11 + 3), v14, v43, v47, (*(_DWORD *)(v9 + 144) + 2), v282, (*((_DWORD *)v11 + 1) >> 10) & 1);
          v52 = *(_DWORD *)(v9 + 148);
          v53 = *(_DWORD *)(v9 + 144);
          if (v31)
          {
            if (v52 <= v53)
            {
              v56 = v9;
              v57 = 71;
              v36 = 0;
LABEL_122:
              sub_1ACBFF5AC(v56, v57, v36, v8, 0, v33, v34, v35);
            }
            else
            {
              *(_DWORD *)(v9 + 144) = v53 + 1;
              v38 = *(_QWORD *)(v9 + 136) + 40 * v53;
              *(_QWORD *)v38 = 71;
              *(_DWORD *)(v38 + 8) = v8;
LABEL_45:
              *(_QWORD *)(v38 + 12) = 0;
              *(_QWORD *)(v38 + 28) = 0;
              *(_QWORD *)(v38 + 20) = 0;
              *(_DWORD *)(v38 + 36) = 0;
            }
          }
          else if (v52 <= v53)
          {
            sub_1ACBFF5AC(v9, 92, v43, v8, v47, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)(v9 + 144) = v53 + 1;
            v30 = *(_QWORD *)(v9 + 136) + 40 * v53;
            *(_DWORD *)v30 = 92;
            *(_DWORD *)(v30 + 4) = v43;
            *(_DWORD *)(v30 + 8) = v8;
            *(_DWORD *)(v30 + 12) = v47;
LABEL_16:
            *(_QWORD *)(v30 + 24) = 0;
            *(_QWORD *)(v30 + 32) = 0;
            *(_QWORD *)(v30 + 16) = 0;
          }
          goto LABEL_276;
        }
        v50 = *v39;
        if (v40 == 176)
          v50 = v39[2];
        if (v50 == 138)
        {
          v51 = (int **)(*((_QWORD *)v39 + 4) + 32);
        }
        else
        {
          if (v50 != 177)
          {
            v156 = 1;
LABEL_135:
            v157 = a1[2];
            v158 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
            v159 = *((_DWORD *)a1 + 17) - 1;
            *((_DWORD *)a1 + 17) = v159;
            if (*((_DWORD *)a1 + 12))
              goto LABEL_276;
            v278 = v158;
            v160 = *v158;
            v161 = v160;
            if (v160 == 176)
              v161 = v278[2];
            if (v161 == 138)
            {
              v162 = (unsigned __int8 *)*((_QWORD *)v278 + 4);
            }
            else
            {
              if (v161 != 177)
              {
                v171 = 1;
                goto LABEL_164;
              }
              v162 = v278;
            }
            v171 = **((_DWORD **)v162 + 4);
LABEL_164:
            if (v156 != v171)
            {
LABEL_175:
              sub_1ACBCB308((uint64_t)a1, "row value misused", a3, a4, a5, a6, a7, a8, v268);
              goto LABEL_276;
            }
            v172 = *((_DWORD *)v11 + 1);
            if (v14 == 55)
              v173 = 56;
            else
              v173 = v14;
            if (v14 == 57)
              v173 = 54;
            if (v14 == 52)
              v174 = 53;
            else
              v174 = v173;
            v285 = v174;
            if (v40 == 138)
            {
              v270 = sub_1ACBA2944((_QWORD **)a1, v39, a3, a4, a5, a6, a7, a8);
              v175 = v278;
              v160 = *v278;
            }
            else
            {
              v270 = 0;
              v175 = v278;
            }
            if (v160 == 138)
              v269 = sub_1ACBA2944((_QWORD **)a1, v175, a3, a4, a5, a6, a7, a8);
            else
              v269 = 0;
            v273 = (v172 >> 10) & 1;
            sub_1ACBFF554(v157, 71, 1, v8, a5, a6, a7, a8);
            v178 = 0;
            v179 = 0;
            v272 = (v156 - 1);
            v271 = (v156 - 2);
            v180 = 8;
            v275 = v39;
            v274 = v159;
            v276 = v8;
            while (1)
            {
              LODWORD(v287) = 0;
              v294[0] = 0;
              if (v179)
              {
                v183 = &byte_1EECAD280;
                if (!*(_BYTE *)(*(_QWORD *)v157 + 103))
                  v183 = (char *)(*(_QWORD *)(v157 + 136) + 40 * v179);
                *((_DWORD *)v183 + 2) = *(_DWORD *)(v157 + 144);
              }
              v184 = *v39;
              if (v184 == 138)
              {
                v187 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)v39 + 4) + 32) + v180);
                v189 = (v270 + v178);
                v185 = v278;
                goto LABEL_205;
              }
              v185 = v278;
              if (v184 == 177)
              {
                v187 = *(unsigned __int8 **)(*((_QWORD *)v39 + 4) + v180);
                v189 = sub_1ACC09A28((uint64_t)a1, v187, &v287);
                goto LABEL_205;
              }
              if (v184 != 176)
              {
                v187 = 0;
                v189 = 0;
                goto LABEL_205;
              }
              v186 = v39[2];
              if (v186 == 177)
                break;
              v187 = v39;
              if (v186 == 138)
              {
                v188 = *(int **)(*((_QWORD *)v39 + 4) + 32);
                goto LABEL_202;
              }
LABEL_204:
              v189 = (v178 + *((_DWORD *)v39 + 11));
LABEL_205:
              v190 = *v185;
              switch(v190)
              {
                case 138:
                  v194 = v180;
                  v192 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)v185 + 4) + 32) + v180);
                  v195 = (v269 + v178);
                  break;
                case 177:
                  v194 = v180;
                  v192 = *(unsigned __int8 **)(*((_QWORD *)v185 + 4) + v180);
                  v195 = sub_1ACC09A28((uint64_t)a1, v192, v294);
                  break;
                case 176:
                  v191 = v185[2];
                  if (v191 != 177)
                  {
                    v192 = v185;
                    if (v191 == 138)
                    {
                      v193 = *(int **)(*((_QWORD *)v185 + 4) + 32);
LABEL_215:
                      v192 = v185;
                      if (*v193 >= 2)
                        v192 = *(unsigned __int8 **)((char *)v193 + v180);
                    }
                    v194 = v180;
                    v195 = (v178 + *((_DWORD *)v185 + 11));
                    break;
                  }
                  v193 = (int *)*((_QWORD *)v185 + 4);
                  goto LABEL_215;
                default:
                  v194 = v180;
                  v192 = 0;
                  v195 = 0;
                  break;
              }
              v179 = *(_DWORD *)(v157 + 144);
              sub_1ACB9F66C((uint64_t)a1, v187, v192, v285, v189, v195, v274, v282, v273);
              v199 = v287;
              if ((_DWORD)v287)
              {
                v200 = *((unsigned __int8 *)a1 + 31);
                if (v200 <= 7)
                {
                  *((_BYTE *)a1 + 31) = v200 + 1;
                  *((_DWORD *)a1 + v200 + 56) = v199;
                }
              }
              v201 = v294[0];
              v39 = v275;
              if (v294[0])
              {
                v202 = *((unsigned __int8 *)a1 + 31);
                if (v202 <= 7)
                {
                  *((_BYTE *)a1 + 31) = v202 + 1;
                  *((_DWORD *)a1 + v202 + 56) = v201;
                }
              }
              if ((v285 == 56 || v285 == 54) && v178 < (int)v272)
              {
                v179 = *(_DWORD *)(v157 + 144);
                if (*(_DWORD *)(v157 + 148) <= v179)
                {
                  v179 = sub_1ACBFF5AC(v157, 58, 0, 0, 0, v196, v197, v198);
                }
                else
                {
                  *(_DWORD *)(v157 + 144) = v179 + 1;
                  v203 = *(_QWORD *)(v157 + 136) + 40 * v179;
                  *(_BYTE *)v203 = 58;
                  *(_OWORD *)(v203 + 1) = 0u;
                  *(_OWORD *)(v203 + 17) = 0u;
                  *(_QWORD *)(v203 + 32) = 0;
                }
              }
              v204 = *(_DWORD *)(v157 + 148);
              v205 = *(_DWORD *)(v157 + 144);
              if ((v280 & 1) != 0)
              {
                if (v204 > v205)
                {
                  *(_DWORD *)(v157 + 144) = v205 + 1;
                  v206 = *(_QWORD *)(v157 + 136) + 40 * v205;
                  *(_DWORD *)v206 = 92;
                  *(_DWORD *)(v206 + 4) = v189;
                  v8 = v276;
                  *(_DWORD *)(v206 + 8) = v276;
                  *(_DWORD *)(v206 + 12) = v195;
                  *(_QWORD *)(v206 + 24) = 0;
                  *(_QWORD *)(v206 + 32) = 0;
                  *(_QWORD *)(v206 + 16) = 0;
                  goto LABEL_238;
                }
                v208 = v157;
                v209 = 92;
                v210 = v189;
                v8 = v276;
                v211 = v276;
                v212 = v195;
              }
              else
              {
                if (v204 > v205)
                {
                  *(_DWORD *)(v157 + 144) = v205 + 1;
                  v207 = *(_QWORD *)(v157 + 136) + 40 * v205;
                  *(_QWORD *)v207 = 71;
                  v8 = v276;
                  *(_DWORD *)(v207 + 8) = v276;
                  *(_QWORD *)(v207 + 12) = 0;
                  *(_QWORD *)(v207 + 28) = 0;
                  *(_QWORD *)(v207 + 20) = 0;
                  *(_DWORD *)(v207 + 36) = 0;
                  goto LABEL_238;
                }
                v208 = v157;
                v209 = 71;
                v210 = 0;
                v8 = v276;
                v211 = v276;
                v212 = 0;
              }
              sub_1ACBFF5AC(v208, v209, v210, v211, v212, v196, v197, v198);
LABEL_238:
              if (v272 == v178)
              {
                if (*(_BYTE *)(*(_QWORD *)v157 + 103))
                  v216 = &byte_1EECAD280;
                else
                  v216 = (char *)(*(_QWORD *)(v157 + 136) + 40 * v179);
                *((_DWORD *)v216 + 2) = *(_DWORD *)(v157 + 144);
                sub_1ACC0A574(v157, v274);
                if (v14 == 52)
                {
                  v164 = v157;
                  v165 = 19;
                  v166 = v8;
                  goto LABEL_275;
                }
                goto LABEL_276;
              }
              v213 = *(_DWORD *)(v157 + 148);
              v214 = *(_DWORD *)(v157 + 144);
              if (v285 == 53)
              {
                if (v213 <= v214)
                {
                  sub_1ACBFF5AC(v157, 51, v8, v274, 0, v196, v197, v198);
                }
                else
                {
                  *(_DWORD *)(v157 + 144) = v214 + 1;
                  v215 = *(_QWORD *)(v157 + 136) + 40 * v214;
                  *(_DWORD *)v215 = 51;
                  *(_DWORD *)(v215 + 4) = v8;
                  *(_DWORD *)(v215 + 8) = v274;
                  *(_QWORD *)(v215 + 12) = 0;
                  *(_QWORD *)(v215 + 28) = 0;
                  *(_QWORD *)(v215 + 20) = 0;
                  *(_DWORD *)(v215 + 36) = 0;
                }
                v182 = 53;
              }
              else
              {
                if (v213 > v214)
                {
                  *(_DWORD *)(v157 + 144) = v214 + 1;
                  v181 = *(_QWORD *)(v157 + 136) + 40 * v214;
                  *(_QWORD *)v181 = 9;
                  *(_DWORD *)(v181 + 8) = v274;
                  *(_QWORD *)(v181 + 12) = 0;
                  *(_QWORD *)(v181 + 28) = 0;
                  *(_QWORD *)(v181 + 20) = 0;
                  *(_DWORD *)(v181 + 36) = 0;
                }
                else
                {
                  sub_1ACBFF5AC(v157, 9, 0, v274, 0, v196, v197, v198);
                }
                v182 = v285;
                if (v271 == v178)
                  v182 = v14;
              }
              v285 = v182;
              ++v178;
              v180 = v194 + 24;
            }
            v188 = (int *)*((_QWORD *)v39 + 4);
LABEL_202:
            v187 = v39;
            if (*v188 >= 2)
              v187 = *(unsigned __int8 **)((char *)v188 + v180);
            goto LABEL_204;
          }
          v51 = (int **)(v39 + 32);
        }
        v156 = **v51;
        goto LABEL_135;
      case 0x47u:
        v74 = a1[22];
        if (!v74 && !*((_BYTE *)a1 + 30))
        {
          sub_1ACBCB308((uint64_t)a1, "RAISE() may only be used within a trigger-program", a3, a4, a5, a6, a7, a8, v268);
          return 0;
        }
        v75 = v11[1];
        if (v75 == 4)
        {
          sub_1ACBA86CC((uint64_t *)v9, 70, 0, 4, 0, *((_QWORD *)v11 + 1), 0, a8);
        }
        else
        {
          v76 = (char)v75;
          if (v75 == 2)
          {
            v77 = (_QWORD *)a1[21];
            if (!v77)
              v77 = a1;
            *((_BYTE *)v77 + 33) = 1;
          }
          if (v74)
            v78 = 1811;
          else
            v78 = 1;
          sub_1ACC0AAD0(a1, v78, v76, *((_QWORD *)v11 + 1), 0, 0, a7, a8);
        }
        goto LABEL_276;
      case 0x4Du:
        v79 = *((_QWORD *)v11 + 9);
        v80 = *((unsigned int *)v11 + 12);
        v81 = *((_DWORD *)v11 + 11) + *((_DWORD *)v11 + 11) * *(__int16 *)(v79 + 54);
        v82 = sub_1ACC09640(v79, (__int16)v80);
        sub_1ACBFF554(v9, 157, (v82 + v81 + 1), v8, v83, v84, v85, v86);
        if ((v80 & 0x80000000) == 0 && *(_BYTE *)(*(_QWORD *)(v79 + 8) + 16 * v80 + 9) == 69)
          sub_1ACC08D28(v9, 87, v8, v87, v88, v89, v90, v91);
        goto LABEL_276;
      case 0x71u:
        if ((v11[5] & 2) != 0)
          goto LABEL_3;
        sub_1ACC08D80((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v8);
        v20 = v9;
        v21 = 179;
        goto LABEL_10;
      case 0x75u:
        sub_1ACBA86CC((uint64_t *)v9, 117, 0, v8, 0, *((_QWORD *)v11 + 1), 0, a8);
        return v8;
      case 0x99u:
        v92 = (char *)*((_QWORD *)v11 + 1);
        v93 = (uint64_t *)v9;
        v94 = 0;
        goto LABEL_152;
      case 0x9Au:
        v95 = strlen((const char *)(*((_QWORD *)v11 + 1) + 2)) & 0x3FFFFFFF;
        v96 = sub_1ACC01F78(*(_QWORD *)v9, *((_QWORD *)v11 + 1) + 2, v95 - 1);
        if (v95 - 1 >= 0)
          v98 = v95 - 1;
        else
          v98 = v95;
        sub_1ACBA86CC((uint64_t *)v9, 77, (v98 >> 1), v8, 0, v96, 4294967290, v97);
        return v8;
      case 0x9Bu:
        v99 = (uint64_t)a1;
        v100 = v11;
        v101 = 0;
        goto LABEL_106;
      case 0x9Cu:
        sub_1ACBFF554(v9, 78, *((unsigned int *)v11 + 12), v8, a5, a6, a7, a8);
        if (!*(_BYTE *)(*((_QWORD *)v11 + 1) + 1))
          return v8;
        v102 = (_DWORD *)a1[40];
        if (!v102)
          goto LABEL_82;
        v103 = 2;
        while (v102[v103] != *((_DWORD *)v11 + 12))
        {
          v103 += v102[v103 + 1];
          if (v103 >= v102[1])
          {
LABEL_82:
            v104 = 0;
            goto LABEL_269;
          }
        }
        v104 = (uint64_t)&v102[v103 + 2];
LABEL_269:
        *v102 = 0;
        sub_1ACC09284((_QWORD *)v9, v104, -1);
        return v8;
      case 0x9Du:
        v290 = 0u;
        v291 = 0u;
        v288 = 0u;
        v289 = 0u;
        v287 = 0u;
        v105 = (_QWORD *)*a1;
        v106 = (int *)*((_QWORD *)v11 + 4);
        v107 = *v106;
        v108 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v108;
        v109 = *((_QWORD *)v11 + 2);
        if (v109)
        {
          v110 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v105, *((unsigned __int8 **)v11 + 2), 0, 0);
          v116 = (uint64_t)v110;
          if (*((_BYTE *)v105 + 103))
          {
            if (v110)
              sub_1ACBF8348(v105, v110);
            goto LABEL_276;
          }
          v279 = v106;
          v283 = v105;
          v167 = v8;
          v217 = sub_1ACC0A888((uint64_t)a1, v110, (_DWORD *)&v293 + 1, v111, v112, v113, v114, v115);
          sub_1ACC0A830(v116, v217);
          v287 = 0u;
          v290 = 0u;
          v291 = 0u;
          v289 = 0u;
          LOBYTE(v287) = 53;
          v281 = (unsigned __int8 *)v116;
          v288 = (unint64_t)v116;
          v168 = &v287;
          HIDWORD(v293) = 0;
        }
        else
        {
          v279 = v106;
          v281 = 0;
          v283 = v105;
          v167 = v8;
          v168 = 0;
        }
        v218 = v107 - 1;
        v286 = v107;
        if (v107 >= 2)
        {
          v219 = 0;
          v220 = (unsigned __int8 **)(v279 + 8);
          do
          {
            if (v109)
              *((_QWORD *)&v288 + 1) = *(v220 - 3);
            else
              v168 = (__int128 *)*(v220 - 3);
            v221 = *((_DWORD *)a1 + 17);
            *((_DWORD *)a1 + 17) = v221 - 1;
            sub_1ACB9F1D0(a1, v168);
            sub_1ACC08D80((uint64_t)a1, *v220, v167);
            v222 = *(_DWORD *)(v9 + 144);
            if (*(_DWORD *)(v9 + 148) <= v222)
            {
              sub_1ACBFF5AC(v9, 9, 0, v108, 0, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v9 + 144) = v222 + 1;
              v223 = *(_QWORD *)(v9 + 136) + 40 * v222;
              *(_QWORD *)v223 = 9;
              *(_DWORD *)(v223 + 8) = v108;
              *(_QWORD *)(v223 + 12) = 0;
              *(_QWORD *)(v223 + 28) = 0;
              *(_QWORD *)(v223 + 20) = 0;
              *(_DWORD *)(v223 + 36) = 0;
            }
            v224 = *(_QWORD *)(v9 + 24);
            v225 = -v221;
            if (*(_DWORD *)(v224 + 68) + *(_DWORD *)(v224 + 72) >= 0)
              *(_DWORD *)(*(_QWORD *)(v224 + 80) + 4 * v225) = *(_DWORD *)(v9 + 144);
            else
              sub_1ACC0D5D4(v224, v9, v225);
            v220 += 6;
            v219 += 2;
          }
          while (v218 > v219);
        }
        if ((v286 & 1) != 0)
        {
          v226 = *(unsigned __int8 **)&v279[6 * v218 + 2];
          v8 = v167;
          sub_1ACC08D80((uint64_t)a1, v226, v167);
        }
        else
        {
          v8 = v167;
          sub_1ACBFF554(v9, 75, 0, v167, a5, a6, a7, a8);
        }
        if (v281)
          sub_1ACBF8348(v283, v281);
        sub_1ACC0AA74(v9);
        sub_1ACC0A574(v9, v108);
        goto LABEL_276;
      case 0xA7u:
        goto LABEL_286;
      case 0xA8u:
        v117 = (_DWORD *)*((_QWORD *)v11 + 8);
        if (v117)
        {
          v118 = *((__int16 *)v11 + 26);
          if ((v118 & 0x80000000) == 0 && v117[12] > v118)
            return (v117[3] + v118 + v117[8]);
        }
        sub_1ACBCB308((uint64_t)a1, "misuse of aggregate: %#T()", a3, a4, a5, a6, a7, a8, (char)v11);
        goto LABEL_276;
      case 0xA9u:
        v119 = *((_QWORD *)v11 + 8);
        v120 = *((__int16 *)v11 + 26);
        if (*(_DWORD *)(v119 + 32) <= v120)
        {
          v164 = v9;
          v165 = 75;
          v166 = 0;
LABEL_275:
          sub_1ACBFF554(v164, v165, v166, v8, a5, a6, a7, a8);
LABEL_276:
          v227 = HIDWORD(v293);
          if (HIDWORD(v293))
          {
            v228 = *((unsigned __int8 *)a1 + 31);
            if (v228 <= 7)
            {
              *((_BYTE *)a1 + 31) = v228 + 1;
              *((_DWORD *)a1 + v228 + 56) = v227;
            }
          }
          v229 = v293;
          if ((_DWORD)v293)
          {
            v230 = *((unsigned __int8 *)a1 + 31);
            if (v230 <= 7)
            {
              *((_BYTE *)a1 + 31) = v230 + 1;
              *((_DWORD *)a1 + v230 + 56) = v229;
            }
          }
          return v8;
        }
        if (!*(_BYTE *)v119)
          return (*(_DWORD *)(v119 + 12) + v120);
        if (*(_BYTE *)(v119 + 1))
        {
          v121 = *(_QWORD *)(v119 + 24);
          v122 = *((__int16 *)v11 + 26);
          v123 = *(_QWORD *)(v121 + 24 * v120);
          sub_1ACB683F4(v9, 94, *(unsigned int *)(v119 + 8), *(__int16 *)(v121 + 24 * v120 + 22), v8, a6, a7, a8);
          if (v123
            && (*(__int16 *)(v121 + 24 * v122 + 20) & 0x80000000) == 0
            && *(_BYTE *)(*(_QWORD *)(v123 + 8) + 16 * *(unsigned __int16 *)(v121 + 24 * v122 + 20) + 9) == 69)
          {
LABEL_97:
            v20 = v9;
            v21 = 87;
LABEL_10:
            sub_1ACC08D28(v20, v21, v8, v15, v16, v17, v18, v19);
            return v8;
          }
          return v8;
        }
        if (!*((_QWORD *)v11 + 9))
        {
          sub_1ACB683F4(v9, 94, *((unsigned int *)v11 + 11), *((unsigned int *)v11 + 12), v8, a6, a7, a8);
          return v8;
        }
LABEL_286:
        if ((v11[4] & 0x20) != 0)
        {
          v8 = sub_1ACB7B84C(a1, *((_QWORD *)v11 + 2), v8);
          v234 = *((unsigned int *)v11 + 12);
          if ((v234 & 0x80000000) != 0 || (v235 = *((_QWORD *)v11 + 9), (int)v234 >= *(__int16 *)(v235 + 54)))
          {
            LOBYTE(v236) = 68;
          }
          else
          {
            v236 = *(char *)(*(_QWORD *)(v235 + 8) + 16 * v234 + 9);
            if (v236 < 66)
              return v8;
          }
          sub_1ACBA86CC((uint64_t *)v9, 96, v8, 1, 0, (uint64_t)&aBcdef[v236 - 66], 0xFFFFFFFFLL, v233);
          return v8;
        }
        v231 = *((unsigned int *)v11 + 11);
        if ((v231 & 0x80000000) == 0)
          goto LABEL_290;
        v232 = *((_DWORD *)a1 + 16);
        if ((v232 & 0x80000000) == 0)
        {
          v231 = (v232 - 1);
LABEL_290:
          sub_1ACB7D1DC((uint64_t)a1, *((_QWORD *)v11 + 9), *((unsigned int *)v11 + 12), v231, v8, v11[2], a7, a8, v10);
          return v8;
        }
        v245 = *((unsigned int *)v11 + 12);
        if ((v245 & 0x80000000) != 0)
          return ~v232;
        v246 = *((_QWORD *)v11 + 9);
        v247 = *(_QWORD *)(v246 + 8) + 16 * v245;
        v254 = sub_1ACC09640(v246, (__int16)v245) - v232;
        v256 = (__int16 *)(v247 + 14);
        v255 = *(_WORD *)(v247 + 14);
        if ((v255 & 0x60) != 0)
        {
          if ((*(_WORD *)(v247 + 14) & 0x100) != 0)
          {
            sub_1ACBCB308((uint64_t)a1, "generated column loop on \"%s\"", v248, v249, v250, v251, v252, v253, *(_QWORD *)v247);
            return 0;
          }
          else
          {
            v257 = v255 | 0x100;
            *v256 = v255 | 0x100;
            if ((v255 & 0x80) != 0)
            {
              sub_1ACC09780((uint64_t)a1, v246, v247, v254, v250, v251, v252, v253);
              v257 = *v256;
            }
            *v256 = v257 & 0xFE7F;
            return v254;
          }
        }
        if (*(_BYTE *)(v247 + 9) == 69)
        {
          sub_1ACBFF554(v9, 81, v254, v8, v250, v251, v252, v253);
          goto LABEL_97;
        }
        return v254;
      case 0xAAu:
        v124 = sub_1ACC09940((uint64_t)v11);
        sub_1ACBFF554(v9, 71, v124, v8, v125, v126, v127, v128);
        return v8;
      case 0xACu:
        if ((v11[7] & 1) != 0)
          return *(unsigned int *)(*((_QWORD *)v11 + 9) + 96);
        v129 = (_QWORD *)*a1;
        v130 = *(unsigned __int8 *)(*a1 + 100);
        if (*((_BYTE *)a1 + 35))
        {
          *((_QWORD *)&v288 + 1) = 0;
          v289 = 0u;
          *(_QWORD *)&v287 = 0;
          WORD2(v289) = 2;
          *((_QWORD *)&v287 + 1) = sub_1ACB8B0F4;
          *(_QWORD *)&v288 = sub_1ACC0B708;
          sub_1ACC0B714((uint64_t)&v287, (uint64_t)v11);
          if (WORD2(v289))
            return sub_1ACC09B6C((_QWORD **)a1, v11, 0xFFFFFFFFLL);
        }
        v176 = (unsigned int *)*((_QWORD *)v11 + 4);
        if (v176)
          v177 = *v176;
        else
          v177 = 0;
        v243 = sub_1ACB5B284((uint64_t)v129, *((char **)v11 + 1), v177, v130, 0);
        if (!v243 && (!*((_BYTE *)a1 + 301) || (v243 = sub_1ACB5B284((uint64_t)v129, "unknown", v177, v130, 0)) == 0)
          || *((_QWORD *)v243 + 4))
        {
          sub_1ACBCB308((uint64_t)a1, "unknown function: %#T()", v237, v238, v239, v240, v241, v242, (char)v11);
          goto LABEL_276;
        }
        v244 = *((_DWORD *)v243 + 1);
        if (v176 && (v244 & 0x400000) != 0)
          return sub_1ACC09E24((uint64_t)a1, (unsigned __int8 **)v176, *((_DWORD *)v243 + 2), v8, v239, v240, v241, v242);
        if ((v244 & 0x280000) != 0)
          sub_1ACC0A168((uint64_t)a1, (uint64_t)v11, (uint64_t)v243, v238, v239, v240, v241, v242);
        v277 = v8;
        if ((int)v177 < 1)
        {
          if (!v176)
          {
            v263 = 0;
            v260 = 0;
            if ((*((_BYTE *)v243 + 4) & 0x20) == 0)
              goto LABEL_356;
            goto LABEL_354;
          }
          v259 = 0;
        }
        else
        {
          v258 = 0;
          v259 = 0;
          v260 = 0;
          v284 = v176;
          v261 = (uint64_t *)(v176 + 2);
          do
          {
            if (v258 <= 0x1F)
            {
              if (sub_1ACC046A4(*v261))
                v260 = (1 << v258) | v260;
              else
                v260 = v260;
            }
            if ((*((_BYTE *)v243 + 4) & 0x20) != 0 && !v259)
              v259 = sub_1ACB78620((uint64_t)a1, (unsigned __int8 *)*v261, v237, v238, v239, v240, v241, v242);
            ++v258;
            v261 += 3;
          }
          while (v177 != v258);
          v176 = v284;
          if (!v284)
          {
            v263 = 0;
            v177 = v177;
            goto LABEL_343;
          }
          v177 = v177;
          if ((_DWORD)v260)
          {
            v262 = *((_DWORD *)a1 + 14);
            v263 = (v262 + 1);
            *((_DWORD *)a1 + 14) = v262 + v177;
            goto LABEL_336;
          }
        }
        v263 = sub_1ACC0A1AC((uint64_t)a1, v177);
        v260 = 0;
LABEL_336:
        if ((*((_DWORD *)v243 + 1) & 0xC0) != 0)
        {
          v264 = (unsigned __int8 *)*((_QWORD *)v176 + 1);
          v265 = *v264;
          if (v265 == 169 || v265 == 167)
            v264[2] = *((_DWORD *)v243 + 1) & 0xC0;
        }
        sub_1ACC0A21C((uint64_t)a1, v176, v263, 0, 2, v240, v241, v242);
LABEL_343:
        if ((int)v177 < 2)
        {
          if ((_DWORD)v177 != 1)
            goto LABEL_349;
        }
        else if ((v11[5] & 1) != 0)
        {
          v266 = (unsigned __int8 **)(v176 + 8);
LABEL_348:
          v243 = sub_1ACBAC89C((uint64_t)v129, (__int128 *)v243, v177, *v266);
LABEL_349:
          if ((*((_BYTE *)v243 + 4) & 0x20) == 0)
            goto LABEL_356;
          if (v259)
          {
LABEL_355:
            sub_1ACBA86CC((uint64_t *)v9, 85, 0, 0, 0, v259, 4294967294, v242);
LABEL_356:
            v8 = v277;
            sub_1ACC0A46C(a1, v260, v263, v277, v177, (uint64_t)v243, v11[2]);
            if ((_DWORD)v177 && !(_DWORD)v260)
            {
              if ((_DWORD)v177 == 1)
              {
                if ((_DWORD)v263)
                {
                  v267 = *((unsigned __int8 *)a1 + 31);
                  if (v267 <= 7)
                  {
                    *((_BYTE *)a1 + 31) = v267 + 1;
                    *((_DWORD *)a1 + v267 + 56) = v263;
                  }
                }
              }
              else if (*((_DWORD *)a1 + 10) < (int)v177)
              {
                *((_DWORD *)a1 + 10) = v177;
                *((_DWORD *)a1 + 11) = v263;
              }
            }
            return v8;
          }
LABEL_354:
          v259 = v129[2];
          goto LABEL_355;
        }
        v266 = (unsigned __int8 **)(v176 + 2);
        goto LABEL_348;
      case 0xADu:
        v100 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
        v132 = *v100;
        if (v132 == 153)
        {
          v92 = (char *)*((_QWORD *)v100 + 1);
          v93 = (uint64_t *)v9;
          v94 = 1;
LABEL_152:
          sub_1ACC09984(v93, v92, v94, v8);
        }
        else
        {
          if (v132 != 155)
          {
            LOBYTE(v292[0]) = -101;
            *(_QWORD *)((char *)v292 + 4) = 67584;
            v169 = sub_1ACC09A28((uint64_t)a1, (unsigned __int8 *)v292, (_DWORD *)&v293 + 1);
            v143 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), &v293);
            v145 = v9;
            v146 = 107;
            v144 = v169;
            goto LABEL_154;
          }
          v99 = (uint64_t)a1;
          v101 = 1;
LABEL_106:
          sub_1ACBA2F1C(v99, (uint64_t)v100, v101, v8, a5, a6, a7, a8);
        }
        return v8;
      case 0xAEu:
      case 0xB5u:
LABEL_3:
        v11 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
        if (v11)
          continue;
        goto LABEL_11;
      case 0xAFu:
        v133 = sub_1ACC09A28((uint64_t)a1, *((unsigned __int8 **)v11 + 2), (_DWORD *)&v293 + 1);
        v134 = sub_1ACC09940(*((_QWORD *)v11 + 3));
        sub_1ACBCB640(v9, 91, v133, v8, !v134, v134 ^ (v11[2] == 45), v135, v136);
        goto LABEL_276;
      case 0xB0u:
        return *((unsigned int *)v11 + 11);
      case 0xB1u:
        goto LABEL_175;
      case 0xB2u:
        v137 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
        v138 = *((_DWORD *)v137 + 11);
        if (!v138 || (v139 = v137[2], *((unsigned __int8 *)a1 + 38) > v139))
        {
          v138 = sub_1ACBA2944((_QWORD **)a1, *((unsigned __int8 **)v11 + 2), a3, a4, a5, a6, a7, a8);
          *((_DWORD *)v137 + 11) = v138;
          v139 = *((unsigned __int8 *)a1 + 38);
          v137[2] = v139;
        }
        if (*v137 != 176)
          v139 = *v137;
        if (v139 == 138)
        {
          v140 = (int **)(*((_QWORD *)v137 + 4) + 32);
        }
        else
        {
          if (v139 != 177)
          {
            v170 = 1;
LABEL_158:
            if (*((_DWORD *)v11 + 11) != v170)
            {
              sub_1ACBCB308((uint64_t)a1, "%d columns assigned %d values", a3, a4, a5, a6, a7, a8, *((_DWORD *)v11 + 11));
              v138 = *((_DWORD *)v137 + 11);
            }
            return (*((_DWORD *)v11 + 12) + v138);
          }
          v140 = (int **)(v137 + 32);
        }
        v170 = **v140;
        goto LABEL_158;
      case 0xB3u:
        v141 = *((_BYTE *)a1 + 35);
        v142 = *((_QWORD *)v11 + 8);
        if (!v142)
          goto LABEL_146;
        if (*(_BYTE *)v142)
        {
          if (*(_BYTE *)(v142 + 1))
          {
            v143 = *(unsigned int *)(v142 + 8);
            v144 = *(__int16 *)(*(_QWORD *)(v142 + 24) + 24 * *((__int16 *)v11 + 26) + 22);
            v145 = v9;
            v146 = 94;
LABEL_154:
            sub_1ACB683F4(v145, v146, v143, v144, v8, a6, a7, a8);
          }
          else
          {
LABEL_146:
            v163 = sub_1ACB683F4(v9, 20, *((unsigned int *)v11 + 11), 0, v8, a6, a7, a8);
            *((_BYTE *)a1 + 35) = 0;
            sub_1ACC08D80((uint64_t)a1, *((unsigned __int8 **)v11 + 2), v8);
            *((_BYTE *)a1 + 35) = v141;
            v155 = *(_DWORD *)(v9 + 144);
            if (*(_BYTE *)(*(_QWORD *)v9 + 103))
LABEL_147:
              dword_1EECAD288 = v155;
            else
              *(_DWORD *)(*(_QWORD *)(v9 + 136) + 40 * v163 + 8) = v155;
          }
        }
        else
        {
          v8 = (*(_DWORD *)(v142 + 12) + *((__int16 *)v11 + 26));
        }
        goto LABEL_276;
      default:
        goto LABEL_11;
    }
  }
}

uint64_t sub_1ACB7D1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  int v9;
  uint64_t v12;
  char *v13;
  int v14;

  v9 = a6;
  sub_1ACC0B288(*(_QWORD *)(a1 + 16), a2, a4, a3, a5, a6, a7, a8, a9);
  if (v9)
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(*(_QWORD *)v12 + 103))
      v13 = &byte_1EECAD280;
    else
      v13 = (char *)(*(_QWORD *)(v12 + 136) + 40 * *(int *)(v12 + 144) - 40);
    v14 = *v13;
    if (v14 == 94)
      goto LABEL_8;
    if (v14 == 175)
    {
      LOWORD(v9) = v9 & 1;
LABEL_8:
      *((_WORD *)v13 + 1) = v9;
    }
  }
  return a5;
}

_QWORD *sub_1ACB7D270(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t **v15;
  uint64_t v16;
  int v17;
  signed int v18;
  signed int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t **v41;
  char *v42;
  uint64_t *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t **v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t **v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  int v150;
  BOOL v151;
  int v152;
  int v153;
  _DWORD *v154;
  int v155;
  int v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  unsigned __int16 *v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  int v178;
  _QWORD *result;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  char v185;
  _BYTE *v186;
  uint64_t **v187;

  v8 = a1;
  v9 = *a1;
  v10 = (*a1)[2];
  v182 = **a1;
  v11 = *((unsigned __int8 *)a1 + 64);
  if (!*((_BYTE *)a1 + 64))
  {
    v176 = 0;
    goto LABEL_216;
  }
  v185 = 0;
  v183 = a1[1];
  v184 = *a1;
  v180 = *(_DWORD *)(v10 + 144);
  v12 = &byte_1EECAD280;
  do
  {
    v13 = v11 - 1;
    v187 = &v8[15 * v11 - 15];
    v14 = (unsigned int *)v187[114];
    if (v14)
    {
      v15 = &v8[15 * v13];
      v16 = *(_QWORD *)(v10 + 24);
      v17 = ~*((_DWORD *)v15 + 220);
      if (*(_DWORD *)(v16 + 68) + *(_DWORD *)(v16 + 72) < 0)
        sub_1ACC0D5D4(v16, v10, v17);
      else
        *(_DWORD *)(*(_QWORD *)(v16 + 80) + 4 * v17) = *(_DWORD *)(v10 + 144);
      *((_DWORD *)v15 + 220) = 0;
      v18 = *(_DWORD *)(v10 + 148);
      v19 = *(_DWORD *)(v10 + 144);
      v14[4] = v19;
      v20 = v14[2];
      v21 = v14[3];
      if (v18 <= v19)
      {
        sub_1ACBFF5AC(v10, 67, v20, v21, 1, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v19 + 1;
        v22 = *(_QWORD *)(v10 + 136) + 40 * v19;
        *(_DWORD *)v22 = 67;
        *(_DWORD *)(v22 + 4) = v20;
        *(_DWORD *)(v22 + 8) = v21;
        *(_DWORD *)(v22 + 12) = 1;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 16) = 0;
      }
      ++v185;
    }
    v23 = &v8[15 * v13];
    v24 = v23[119];
    v186 = (char *)v23 + 921;
    if (*((unsigned __int8 *)v23 + 921) == 184)
    {
      v25 = (int)v8[15 * v13 + 110];
      if (v25)
      {
        v26 = *(_QWORD *)(v10 + 24);
        v27 = ~v25;
        if (*(_DWORD *)(v26 + 68) + *(_DWORD *)(v26 + 72) < 0)
          sub_1ACC0D5D4(v26, v10, v27);
        else
          *(_DWORD *)(*(_QWORD *)(v26 + 80) + 4 * v27) = *(_DWORD *)(v10 + 144);
      }
      goto LABEL_51;
    }
    if (*((_BYTE *)v8 + 67) == 2
      && v11 == *((unsigned __int8 *)v8 + 64)
      && (*((_BYTE *)v24 + 49) & 2) != 0
      && (v28 = v24[4], (*(_WORD *)(v28 + 99) & 0x80) != 0)
      && (v29 = *((unsigned __int16 *)v24 + 15), *((_WORD *)v24 + 15))
      && *(__int16 *)(*(_QWORD *)(v28 + 16) + 2 * *((unsigned __int16 *)v24 + 15)) >= 36)
    {
      v30 = 0;
      v31 = (*((_DWORD *)v184 + 14) + 1);
      v32 = (unsigned int *)&v8[15 * v13 + 108];
      v181 = v11;
      do
      {
        v38 = *v32;
        v39 = (v31 + v30);
        v40 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) > v40)
        {
          *(_DWORD *)(v10 + 144) = v40 + 1;
          v37 = *(_QWORD *)(v10 + 136) + 40 * v40;
          *(_DWORD *)v37 = 94;
          *(_DWORD *)(v37 + 4) = v38;
          *(_DWORD *)(v37 + 8) = v30;
          *(_DWORD *)(v37 + 12) = v39;
          *(_QWORD *)(v37 + 24) = 0;
          *(_QWORD *)(v37 + 32) = 0;
          *(_QWORD *)(v37 + 16) = 0;
        }
        else
        {
          v41 = v8;
          v42 = v12;
          v43 = v24;
          v44 = v32;
          sub_1ACBFF5AC(v10, 94, v38, v30, v39, a6, a7, a8);
          v32 = v44;
          v24 = v43;
          v12 = v42;
          v8 = v41;
          v11 = v181;
        }
        v30 = (v30 + 1);
      }
      while ((_DWORD)v29 != (_DWORD)v30);
      *((_DWORD *)v184 + 14) += v29 + 1;
      if (*v186 == 38)
        v134 = 21;
      else
        v134 = 24;
      v135 = *v32;
      v33 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v33)
      {
        v33 = sub_1ACBFF7F0(v10, v134, v135, 0, v31, v29, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v33 + 1;
        v136 = *(_QWORD *)(v10 + 136) + 40 * v33;
        *(_BYTE *)v136 = v134;
        *(_WORD *)(v136 + 2) = 0;
        *(_DWORD *)(v136 + 4) = v135;
        *(_DWORD *)(v136 + 8) = 0;
        *(_DWORD *)(v136 + 12) = v31;
        *(_DWORD *)(v136 + 16) = v29;
        *(_BYTE *)(v136 + 1) = -3;
        *(_QWORD *)(v136 + 24) = 0;
        *(_QWORD *)(v136 + 32) = 0;
      }
      v137 = LODWORD(v8[15 * v13 + 116]);
      v138 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v138)
      {
        sub_1ACBFF5AC(v10, 9, 1, v137, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v138 + 1;
        v139 = *(_QWORD *)(v10 + 136) + 40 * v138;
        *(_QWORD *)v139 = 0x100000009;
        *(_DWORD *)(v139 + 8) = v137;
        *(_QWORD *)(v139 + 12) = 0;
        *(_QWORD *)(v139 + 28) = 0;
        *(_QWORD *)(v139 + 20) = 0;
        *(_DWORD *)(v139 + 36) = 0;
      }
    }
    else
    {
      v33 = 0;
    }
    v34 = (int)v8[15 * v13 + 110];
    if (v34)
    {
      v35 = *(_QWORD *)(v10 + 24);
      v36 = ~v34;
      if (*(_DWORD *)(v35 + 68) + *(_DWORD *)(v35 + 72) < 0)
        sub_1ACC0D5D4(v35, v10, v36);
      else
        *(_DWORD *)(*(_QWORD *)(v35 + 80) + 4 * v36) = *(_DWORD *)(v10 + 144);
    }
    v45 = *v186;
    v46 = &v8[15 * v13];
    v47 = *((unsigned int *)v46 + 231);
    v48 = *((unsigned int *)v46 + 232);
    a5 = *((unsigned __int8 *)v46 + 922);
    v49 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v49)
    {
      sub_1ACBFF5AC(v10, v45, v47, v48, a5, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v49 + 1;
      v50 = *(_QWORD *)(v10 + 136) + 40 * v49;
      *(_BYTE *)v50 = v45;
      *(_WORD *)(v50 + 2) = 0;
      *(_DWORD *)(v50 + 4) = v47;
      *(_DWORD *)(v50 + 8) = v48;
      *(_DWORD *)(v50 + 12) = a5;
      *(_BYTE *)(v50 + 1) = 0;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0;
      *(_QWORD *)(v50 + 16) = 0;
    }
    v51 = *(_DWORD *)(v10 + 144);
    if (v51 >= 1)
      *(_WORD *)(*(_QWORD *)(v10 + 136) + 40 * (v51 - 1) + 2) = BYTE3(v8[15 * v13 + 115]);
    v52 = &v8[15 * v13];
    if (!*((_DWORD *)v52 + 223))
      goto LABEL_45;
    v53 = *(_QWORD *)(v10 + 24);
    v54 = ~LODWORD(v8[15 * v13 + 112]);
    if (*(_DWORD *)(v53 + 68) + *(_DWORD *)(v53 + 72) < 0)
      sub_1ACC0D5D4(v53, v10, v54);
    else
      *(_DWORD *)(*(_QWORD *)(v53 + 80) + 4 * v54) = v51;
    v55 = *((unsigned int *)v52 + 223);
    v56 = (*((_DWORD *)v46 + 232) - 1);
    v57 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) > v57)
    {
      *(_DWORD *)(v10 + 144) = v57 + 1;
      v58 = *(_QWORD *)(v10 + 136) + 40 * v57;
      *(_DWORD *)v58 = 61;
      *(_DWORD *)(v58 + 4) = v55;
      *(_DWORD *)(v58 + 8) = v56;
      *(_QWORD *)(v58 + 12) = 0;
      *(_QWORD *)(v58 + 28) = 0;
      *(_QWORD *)(v58 + 20) = 0;
      *(_DWORD *)(v58 + 36) = 0;
LABEL_45:
      if (!v33)
        goto LABEL_51;
      goto LABEL_48;
    }
    sub_1ACBFF5AC(v10, 61, v55, v56, 0, a6, a7, a8);
    if (!v33)
      goto LABEL_51;
LABEL_48:
    v59 = (uint64_t)v12;
    if (!*(_BYTE *)(*(_QWORD *)v10 + 103))
      v59 = *(_QWORD *)(v10 + 136) + 40 * v33;
    *(_DWORD *)(v59 + 8) = *(_DWORD *)(v10 + 144);
LABEL_51:
    v60 = v11;
    v61 = v187 + 107;
    if ((*((_BYTE *)v24 + 49) & 8) != 0)
    {
      v62 = &v8[15 * v13];
      if (*((int *)v62 + 234) >= 1)
      {
        v63 = *(_QWORD *)(v10 + 24);
        v64 = ~LODWORD(v8[15 * v13 + 109]);
        if (*(_DWORD *)(v63 + 68) + *(_DWORD *)(v63 + 72) < 0)
          sub_1ACC0D5D4(v63, v10, v64);
        else
          *(_DWORD *)(*(_QWORD *)(v63 + 80) + 4 * v64) = *(_DWORD *)(v10 + 144);
        v65 = *((_DWORD *)v62 + 234);
        if (v65 >= 1)
        {
          v66 = *(_DWORD *)(v10 + 144);
          v67 = *(unsigned __int8 *)(*(_QWORD *)v10 + 103);
          v68 = v65 + 1;
          v69 = (unsigned int *)v62[118] + 5 * (v65 - 1) + 2;
          do
          {
            v72 = (uint64_t)v12;
            if (!v67)
              v72 = *(_QWORD *)(v10 + 136) + 40 * (int)*(v69 - 1) + 40;
            *(_DWORD *)(v72 + 8) = v66;
            if (*((unsigned __int8 *)v69 + 8) != 184)
            {
              if (v69[1])
              {
                v73 = v24[6] & 0x40400;
                if (*v61)
                {
                  v74 = *(v69 - 2);
                  if (v73 == 0x40000)
                    v75 = v66 + 1;
                  else
                    v75 = v66;
                  v76 = (v75 + 2);
                  if (*(_DWORD *)(v10 + 148) <= v66)
                  {
                    sub_1ACBFF5AC(v10, 25, v74, v76, 0, a6, a7, a8);
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 144) = v66 + 1;
                    v77 = *(_QWORD *)(v10 + 136) + 40 * v66;
                    *(_DWORD *)v77 = 25;
                    *(_DWORD *)(v77 + 4) = v74;
                    *(_DWORD *)(v77 + 8) = v76;
                    *(_QWORD *)(v77 + 12) = 0;
                    *(_QWORD *)(v77 + 28) = 0;
                    *(_QWORD *)(v77 + 20) = 0;
                    *(_DWORD *)(v77 + 36) = 0;
                  }
                }
                v66 = *(_DWORD *)(v10 + 144);
                if (v73 == 0x40000)
                {
                  v78 = LODWORD(v8[15 * v13 + 108]);
                  v79 = (v66 + 2);
                  a5 = *v69;
                  a6 = v69[1];
                  if (*(_DWORD *)(v10 + 148) <= v66)
                  {
                    sub_1ACBFF7F0(v10, 26, v78, v79, a5, a6, a7, a8);
                  }
                  else
                  {
                    *(_DWORD *)(v10 + 144) = v66 + 1;
                    v80 = *(_QWORD *)(v10 + 136) + 40 * v66;
                    *(_DWORD *)v80 = 64794;
                    *(_DWORD *)(v80 + 4) = v78;
                    *(_DWORD *)(v80 + 8) = v79;
                    *(_DWORD *)(v80 + 12) = a5;
                    *(_DWORD *)(v80 + 16) = a6;
                    *(_QWORD *)(v80 + 24) = 0;
                    *(_QWORD *)(v80 + 32) = 0;
                  }
                  v66 = *(_DWORD *)(v10 + 144);
                  v81 = (uint64_t)v12;
                  if (!*(_BYTE *)(*(_QWORD *)v10 + 103))
                    v81 = *(_QWORD *)(v10 + 136) + 40 * (int)*(v69 - 1) + 40;
                  *(_DWORD *)(v81 + 8) = v66;
                }
              }
              v82 = *((unsigned __int8 *)v69 + 8);
              v83 = *(v69 - 2);
              v84 = *(v69 - 1);
              if (*(_DWORD *)(v10 + 148) > v66)
              {
                *(_DWORD *)(v10 + 144) = v66 + 1;
                v70 = *(_QWORD *)(v10 + 136) + 40 * v66;
                *(_BYTE *)v70 = v82;
                *(_WORD *)(v70 + 2) = 0;
                *(_DWORD *)(v70 + 4) = v83;
                *(_DWORD *)(v70 + 8) = v84;
                *(_BYTE *)(v70 + 1) = 0;
                *(_QWORD *)(v70 + 12) = 0;
                *(_QWORD *)(v70 + 28) = 0;
                *(_QWORD *)(v70 + 20) = 0;
                *(_DWORD *)(v70 + 36) = 0;
              }
              else
              {
                sub_1ACBFF5AC(v10, v82, v83, v84, 0, a6, a7, a8);
              }
            }
            v66 = *(_DWORD *)(v10 + 144);
            v67 = *(unsigned __int8 *)(*(_QWORD *)v10 + 103);
            v71 = (uint64_t)v12;
            if (!*(_BYTE *)(*(_QWORD *)v10 + 103))
              v71 = *(_QWORD *)(v10 + 136) + 40 * (int)*(v69 - 1) - 40;
            *(_DWORD *)(v71 + 8) = v66;
            --v68;
            v69 -= 5;
          }
          while (v68 > 1);
        }
      }
    }
    v85 = *(_QWORD *)(v10 + 24);
    v86 = ~HIDWORD(v8[15 * v13 + 108]);
    if (*(_DWORD *)(v85 + 68) + *(_DWORD *)(v85 + 72) < 0)
      sub_1ACC0D5D4(v85, v10, v86);
    else
      *(_DWORD *)(*(_QWORD *)(v85 + 80) + 4 * v86) = *(_DWORD *)(v10 + 144);
    v87 = v60;
    v88 = v187[114];
    if (v88)
    {
      v89 = *((unsigned int *)v88 + 2);
      v90 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v90)
      {
        sub_1ACBFF5AC(v10, 67, v89, 0, 1, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v90 + 1;
        v91 = *(_QWORD *)(v10 + 136) + 40 * v90;
        *(_DWORD *)v91 = 67;
        *(_DWORD *)(v91 + 4) = v89;
        *(_QWORD *)(v91 + 8) = 0x100000000;
        *(_QWORD *)(v91 + 24) = 0;
        *(_QWORD *)(v91 + 32) = 0;
        *(_QWORD *)(v91 + 16) = 0;
      }
    }
    v92 = &v8[15 * v13];
    v93 = *((unsigned int *)v92 + 219);
    if ((_DWORD)v93)
    {
      v94 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v94)
      {
        sub_1ACBFF5AC(v10, 9, 0, v93, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v94 + 1;
        v95 = *(_QWORD *)(v10 + 136) + 40 * v94;
        *(_QWORD *)v95 = 9;
        *(_DWORD *)(v95 + 8) = v93;
        *(_QWORD *)(v95 + 12) = 0;
        *(_QWORD *)(v95 + 28) = 0;
        *(_QWORD *)(v95 + 20) = 0;
        *(_DWORD *)(v95 + 36) = 0;
      }
      v96 = *(_DWORD *)(v10 + 144);
      if (*(_BYTE *)(*(_QWORD *)v10 + 103))
      {
        *((_DWORD *)v12 + 2) = v96;
        v97 = v12;
      }
      else
      {
        v98 = *(_QWORD *)(v10 + 136) + 40 * *((int *)v92 + 219);
        *(_DWORD *)(v98 + 8) = v96;
        v97 = (char *)(v98 - 80);
      }
      *((_DWORD *)v97 + 2) = v96;
    }
    v99 = LODWORD(v8[15 * v13 + 113]);
    if ((_DWORD)v99)
    {
      v100 = HIDWORD(v8[15 * v13 + 112]) >> 1;
      v101 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v101)
      {
        sub_1ACBFF5AC(v10, 61, v100, v99, 0, a6, a7, a8);
        v103 = *v61;
        if (!(_DWORD)v103)
          goto LABEL_4;
        goto LABEL_103;
      }
      *(_DWORD *)(v10 + 144) = v101 + 1;
      v102 = *(_QWORD *)(v10 + 136) + 40 * v101;
      *(_DWORD *)v102 = 61;
      *(_DWORD *)(v102 + 4) = v100;
      *(_DWORD *)(v102 + 8) = v99;
      *(_QWORD *)(v102 + 12) = 0;
      *(_QWORD *)(v102 + 28) = 0;
      *(_QWORD *)(v102 + 20) = 0;
      *(_DWORD *)(v102 + 36) = 0;
    }
    v103 = *v61;
    if (!(_DWORD)v103)
      goto LABEL_4;
LABEL_103:
    v104 = *((_DWORD *)v24 + 12);
    v105 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v105)
    {
      v105 = sub_1ACBFF5AC(v10, 59, v103, 0, 0, a6, a7, a8);
      if ((v104 & 0x40) != 0)
      {
LABEL_105:
        if ((v104 & 0x200) != 0)
          goto LABEL_114;
        goto LABEL_106;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v105 + 1;
      v106 = *(_QWORD *)(v10 + 136) + 40 * v105;
      *(_DWORD *)v106 = 59;
      *(_DWORD *)(v106 + 4) = v103;
      *(_OWORD *)(v106 + 8) = 0u;
      *(_OWORD *)(v106 + 24) = 0u;
      if ((v104 & 0x40) != 0)
        goto LABEL_105;
    }
    v107 = HIDWORD(v8[15 * v13 + 107]);
    v108 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v108)
    {
      sub_1ACBFF5AC(v10, 136, v107, 0, 0, a6, a7, a8);
      if ((v104 & 0x200) != 0)
      {
LABEL_114:
        if ((v104 & 0x2000) != 0)
        {
LABEL_115:
          v110 = (uint64_t)v8[15 * v13 + 117];
          v111 = *(_QWORD *)(v110 + 48);
          if (v111)
          {
            v112 = (uint64_t *)(*(_QWORD *)(v182 + 32) + 24);
            LODWORD(v113) = -1;
            do
            {
              v114 = *v112;
              v112 += 4;
              v113 = (v113 + 1);
            }
            while (v114 != v111);
          }
          else
          {
            v113 = 4294934528;
          }
          v115 = LODWORD(v8[15 * v13 + 108]);
          v116 = *(unsigned int *)(v110 + 88);
          v117 = *(_DWORD *)(v10 + 144);
          if (*(_DWORD *)(v10 + 148) <= v117)
          {
            sub_1ACBFF5AC(v10, 101, v115, v116, v113, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v10 + 144) = v117 + 1;
            v118 = *(_QWORD *)(v10 + 136) + 40 * v117;
            *(_DWORD *)v118 = 101;
            *(_DWORD *)(v118 + 4) = v115;
            *(_DWORD *)(v118 + 8) = v116;
            *(_DWORD *)(v118 + 12) = v113;
            *(_QWORD *)(v118 + 24) = 0;
            *(_QWORD *)(v118 + 32) = 0;
            *(_QWORD *)(v118 + 16) = 0;
          }
          v119 = v184[2];
          v120 = sub_1ACC09130(v184, v110);
          if (v120)
          {
            if (*(_BYTE *)(*(_QWORD *)v119 + 103))
            {
              if (!*(_QWORD *)(*(_QWORD *)v119 + 816) && (*(_DWORD *)v120)-- == 1)
                sub_1ACBF0674(*(_QWORD **)(v120 + 16), (_QWORD *)v120);
            }
            else
            {
              v122 = *(_QWORD *)(v119 + 136) + 40 * *(int *)(v119 + 144);
              *(_BYTE *)(v122 - 39) = -8;
              *(_QWORD *)(v122 - 24) = v120;
            }
          }
        }
        v123 = LODWORD(v8[15 * v13 + 108]);
        v124 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v124)
        {
          sub_1ACBFF5AC(v10, 136, v123, 0, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v10 + 144) = v124 + 1;
          v125 = *(_QWORD *)(v10 + 136) + 40 * v124;
          *(_DWORD *)v125 = 136;
          *(_DWORD *)(v125 + 4) = v123;
          *(_OWORD *)(v125 + 8) = 0u;
          *(_OWORD *)(v125 + 24) = 0u;
        }
        goto LABEL_133;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v108 + 1;
      v109 = *(_QWORD *)(v10 + 136) + 40 * v108;
      *(_DWORD *)v109 = 136;
      *(_DWORD *)(v109 + 4) = v107;
      *(_OWORD *)(v109 + 8) = 0u;
      *(_OWORD *)(v109 + 24) = 0u;
      if ((v104 & 0x200) != 0)
        goto LABEL_114;
    }
LABEL_106:
    if ((v104 & 0x2000) != 0 && v8[15 * v13 + 117])
      goto LABEL_115;
LABEL_133:
    if (*v186 != 67)
    {
      v99 = HIDWORD(v8[15 * v13 + 110]);
      v130 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) > v130)
      {
        *(_DWORD *)(v10 + 144) = v130 + 1;
        v129 = *(_QWORD *)(v10 + 136) + 40 * v130;
        *(_QWORD *)v129 = 9;
        goto LABEL_138;
      }
      v131 = v10;
      v132 = 9;
      v127 = 0;
LABEL_141:
      sub_1ACBFF5AC(v131, v132, v127, v99, 0, a6, a7, a8);
      goto LABEL_142;
    }
    v126 = &v8[15 * v13];
    v127 = *((unsigned int *)v126 + 231);
    v99 = *((unsigned int *)v126 + 221);
    v128 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v128)
    {
      v131 = v10;
      v132 = 10;
      goto LABEL_141;
    }
    *(_DWORD *)(v10 + 144) = v128 + 1;
    v129 = *(_QWORD *)(v10 + 136) + 40 * v128;
    *(_DWORD *)v129 = 10;
    *(_DWORD *)(v129 + 4) = v127;
LABEL_138:
    *(_DWORD *)(v129 + 8) = v99;
    *(_QWORD *)(v129 + 12) = 0;
    *(_QWORD *)(v129 + 28) = 0;
    *(_QWORD *)(v129 + 20) = 0;
    *(_DWORD *)(v129 + 36) = 0;
LABEL_142:
    v133 = (uint64_t)v12;
    if (!*(_BYTE *)(*(_QWORD *)v10 + 103))
      v133 = *(_QWORD *)(v10 + 136) + 40 * v105;
    *(_DWORD *)(v133 + 8) = *(_DWORD *)(v10 + 144);
LABEL_4:
    v11 = v13;
  }
  while (v87 > 1);
  v140 = *((unsigned __int8 *)v8 + 64);
  if (*((_BYTE *)v8 + 64))
  {
    v141 = 0;
    v142 = (uint64_t)(v8 + 107);
    do
    {
      if (*(_QWORD *)(v142 + 56))
      {
        sub_1ACC2CC30(v8, v141, v142, v99, a5, a6, a7, a8);
        v140 = *((unsigned __int8 *)v8 + 64);
      }
      else
      {
        if ((*(_WORD *)((_BYTE *)&v183[13 * *(unsigned __int8 *)(v142 + 64) + 8] + 5) & 0x20) != 0)
        {
          v147 = *(_DWORD *)(v142 + 32);
          v148 = v184[2];
          v149 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v148 + 103))
            v149 = (char *)(*(_QWORD *)(v148 + 136) + 40 * v147);
          v150 = *(_DWORD *)(v148 + 144);
          if (*(_BYTE *)(*v184 + 103))
            v151 = 1;
          else
            v151 = v150 <= v147;
          if (!v151)
          {
            v152 = *(_DWORD *)(v142 + 4);
            v153 = v183[13 * *(unsigned __int8 *)(v142 + 64) + 8];
            v154 = v149 + 8;
            v155 = v150 - v147;
            do
            {
              if (*(v154 - 1) == v152)
              {
                v156 = *((unsigned __int8 *)v154 - 8);
                if (v156 == 135)
                {
                  *((_BYTE *)v154 - 8) = 126;
                  *(v154 - 1) = 0;
                }
                else if (v156 == 94)
                {
                  *((_BYTE *)v154 - 8) = 80;
                  v157 = v154[1];
                  *(v154 - 1) = *v154 + v153;
                  *(_QWORD *)v154 = v157;
                  *((_WORD *)v154 - 3) = 2;
                }
              }
              v154 += 10;
              --v155;
            }
            while (v155);
          }
          goto LABEL_156;
        }
        v143 = v183[13 * *(unsigned __int8 *)(v142 + 64) + 5];
        v144 = *(_QWORD *)(v142 + 96);
        v145 = *(_DWORD *)(v144 + 48);
        if ((v145 & 0x240) != 0)
        {
          v146 = *(_QWORD *)(v144 + 32);
          if (!v146)
            goto LABEL_156;
        }
        else
        {
          if ((v145 & 0x2000) == 0)
            goto LABEL_156;
          v146 = *(_QWORD *)(v142 + 80);
          if (!v146)
            goto LABEL_156;
        }
        if (!*(_BYTE *)(v182 + 103))
        {
          v158 = v180;
          if (*((_BYTE *)v8 + 66))
          {
            v158 = v180;
            if ((*(_BYTE *)(*(_QWORD *)(v146 + 24) + 48) & 0x80) == 0)
              v158 = *((_DWORD *)v8 + 19);
          }
          if ((*(_WORD *)(v146 + 99) & 0x800) != 0)
          {
            v159 = v184[12];
            if (v159)
            {
              v160 = *(_DWORD *)(v142 + 8);
              do
              {
                if (*(_DWORD *)(v159 + 12) == v160)
                  *(_QWORD *)(v159 + 8) = -1;
                v159 = *(_QWORD *)(v159 + 24);
              }
              while (v159);
            }
          }
          v161 = *(int *)(v142 + 32) + 1;
          v162 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v10 + 103))
            v162 = (char *)(*(_QWORD *)(v10 + 136) + 40 * v161);
          v163 = &v162[40 * (v158 - (int)v161)];
          v164 = *(_DWORD *)(v142 + 4);
          do
          {
            if (*((_DWORD *)v162 + 1) == v164)
            {
              v165 = *v162;
              if (v165 == 20)
              {
                v172 = *(_DWORD *)(v142 + 8);
LABEL_203:
                *((_DWORD *)v162 + 1) = v172;
                goto LABEL_191;
              }
              if (v165 != 135)
              {
                if (v165 != 94)
                  goto LABEL_191;
                v166 = *((int *)v162 + 2);
                v167 = *(_DWORD *)(v143 + 48);
                if ((v167 & 0x80) != 0)
                {
                  v173 = v143 + 16;
                  do
                  {
                    v168 = *(_QWORD *)v173;
                    v174 = *(_WORD *)(*(_QWORD *)v173 + 99) & 3;
                    v173 = *(_QWORD *)v173 + 40;
                  }
                  while (v174 != 2);
                  LOWORD(v168) = *(_WORD *)(*(_QWORD *)(v168 + 8) + 2 * v166);
                }
                else
                {
                  LOWORD(v168) = *((_DWORD *)v162 + 2);
                  if ((v166 & 0x8000) == 0 && (v167 & 0x20) != 0)
                  {
                    v169 = (unsigned __int16 *)(*(_QWORD *)(v143 + 8) + 14);
                    v170 = -1;
                    LODWORD(v168) = *((_DWORD *)v162 + 2);
                    do
                    {
                      v171 = *v169;
                      v169 += 8;
                      LODWORD(v168) = ((v171 >> 5) & 1) + v168;
                      ++v170;
                    }
                    while (v170 < (__int16)v168);
                  }
                }
                if (!*(_WORD *)(v146 + 96))
                  goto LABEL_191;
                v175 = 0;
                while (*(unsigned __int16 *)(*(_QWORD *)(v146 + 8) + 2 * v175) != (unsigned __int16)v168)
                {
                  if (*(unsigned __int16 *)(v146 + 96) == ++v175)
                    goto LABEL_191;
                }
                if ((v175 & 0x8000) != 0)
                  goto LABEL_191;
                v172 = *(_DWORD *)(v142 + 8);
                *((_DWORD *)v162 + 2) = v175;
                goto LABEL_203;
              }
              *((_DWORD *)v162 + 1) = *(_DWORD *)(v142 + 8);
              *v162 = -114;
            }
LABEL_191:
            v162 += 40;
          }
          while (v162 < v163);
        }
      }
LABEL_156:
      ++v141;
      v142 += 120;
    }
    while (v141 < v140);
  }
  v9 = v184;
  v176 = v185;
LABEL_216:
  v177 = *(_QWORD *)(v10 + 24);
  v178 = ~*((_DWORD *)v8 + 13);
  if (*(_DWORD *)(v177 + 68) + *(_DWORD *)(v177 + 72) < 0)
    sub_1ACC0D5D4(v177, v10, v178);
  else
    *(_DWORD *)(*(_QWORD *)(v177 + 80) + 4 * v178) = *(_DWORD *)(v10 + 144);
  *((_WORD *)v9 + 108) = *((_DWORD *)v8 + 14);
  result = sub_1ACB7E214((_QWORD *)v182, v8);
  *((_BYTE *)v9 + 38) -= v176;
  return result;
}

_QWORD *sub_1ACB7E214(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  sub_1ACC29314(a2 + 13);
  for (i = a2[10]; i; i = a2[10])
  {
    v5 = *(_QWORD **)(i + 64);
    a2[10] = *(_QWORD *)(i + 72);
    if (v5 != (_QWORD *)(i + 80))
    {
      sub_1ACBE0F9C(a1, v5);
      *(_QWORD *)(i + 64) = i + 80;
      *(_WORD *)(i + 56) = 3;
    }
    sub_1ACC2585C(a1, i);
    *(_WORD *)(i + 52) = 0;
    *(_DWORD *)(i + 48) = 0;
    sub_1ACBF0674(a1, (_QWORD *)i);
  }
  v6 = (_QWORD *)a2[11];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      sub_1ACBF0674(a1, v6);
      a2[11] = v7;
      v6 = v7;
    }
    while (v7);
  }
  return sub_1ACBF0674(a1, a2);
}

uint64_t sub_1ACB7E2D4(uint64_t a1, int a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;

  v4 = *(_QWORD **)a1;
  if (*(_WORD *)(a1 + 262))
  {
    v5 = *(_QWORD *)(a1 + 152);
    if (v5)
    {
      v6 = v5 + 320 * *(unsigned __int16 *)(a1 + 262);
      v7 = *(_QWORD **)(v5 + 24);
      if (!v7[102])
      {
        while (1)
        {
          if ((*(_WORD *)(v5 + 20) & 0x9000) != 0)
          {
            sub_1ACBF2A04(v5);
          }
          else
          {
            if (!*(_DWORD *)(v5 + 32))
              goto LABEL_11;
            sub_1ACBF0674(v7, *(_QWORD **)(v5 + 40));
            *(_DWORD *)(v5 + 32) = 0;
          }
          *(_WORD *)(v5 + 20) = 0;
LABEL_11:
          v5 += 64;
          if (v5 >= v6)
            goto LABEL_15;
        }
      }
      do
      {
        if (*(_DWORD *)(v5 + 32))
        {
          v8 = *(_QWORD **)(v5 + 40);
          if (v8)
            sub_1ACBE0F9C(v7, v8);
        }
        v5 += 64;
      }
      while (v5 < v6);
LABEL_15:
      v9 = *(_QWORD **)(a1 + 152);
      if (v9)
        sub_1ACBE0F9C(v4, v9);
    }
  }
  v10 = (5 * a2);
  *(_WORD *)(a1 + 262) = a2;
  *(_WORD *)(a1 + 260) = a2;
  result = sub_1ACBE1124((uint64_t)v4, (uint64_t)(int)v10 << 6);
  *(_QWORD *)(a1 + 152) = result;
  if (a2 >= 1)
  {
    if (result)
    {
      v12 = 5 * a2;
      if (v10 < 2)
        goto LABEL_23;
      v12 = v10 - (v10 & 0xFFFFFFFE);
      v13 = result + 84;
      v14 = v10 & 0xFFFFFFFE;
      do
      {
        *(_WORD *)(v13 - 64) = 1;
        *(_WORD *)v13 = 1;
        *(_QWORD *)(v13 - 60) = v4;
        *(_QWORD *)(v13 + 4) = v4;
        *(_DWORD *)(v13 - 52) = 0;
        *(_DWORD *)(v13 + 12) = 0;
        v13 += 128;
        v14 -= 2;
      }
      while (v14);
      result += (unint64_t)(v10 & 0xFFFFFFFE) << 6;
      if ((v10 & 0xFFFFFFFE) != v10)
      {
LABEL_23:
        v15 = v12 + 1;
        v16 = (_DWORD *)(result + 32);
        do
        {
          *((_WORD *)v16 - 6) = 1;
          *((_QWORD *)v16 - 1) = v4;
          *v16 = 0;
          v16 += 16;
          --v15;
        }
        while (v15 > 1);
      }
    }
  }
  return result;
}

uint64_t sub_1ACB7E454(uint64_t a1, signed int a2, int a3)
{
  int v3;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);

  v3 = a3;
  v6 = *(_DWORD *)(a1 + 32);
  if (!a3 || v6 < 1)
  {
    if (v6 < 1)
      goto LABEL_14;
    v8 = *(_QWORD **)(a1 + 40);
LABEL_13:
    sub_1ACBE0F9C(*(_QWORD **)(a1 + 24), v8);
LABEL_14:
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
    {
      v10 = sub_1ACBE1124(v11, a2);
      *(_QWORD *)(a1 + 40) = v10;
      if (v10)
        goto LABEL_16;
    }
    else
    {
      v10 = sub_1ACB5D828(a2);
      *(_QWORD *)(a1 + 40) = v10;
      if (v10)
        goto LABEL_16;
    }
LABEL_28:
    if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)a1);
    else
      *(_WORD *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    return 7;
  }
  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 40);
  if (v7 != v8)
    goto LABEL_13;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
  {
    v17 = sub_1ACB6BB48(*(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 40) = v17;
    if (!v17)
    {
      v18 = *(_QWORD *)(a1 + 8);
      if (v18)
      {
        v19 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v18);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v18);
          v18 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_43;
          v19 = &xmmword_1ECD3B1D0;
        }
        (*v19)(v18);
      }
    }
LABEL_43:
    v10 = *(_QWORD *)(a1 + 40);
    goto LABEL_50;
  }
  if (v7)
  {
    if (*(_QWORD *)(v9 + 512) > (unint64_t)v7)
    {
      if (*(_QWORD *)(v9 + 496) <= (unint64_t)v7)
      {
        if (a2 < 0x81)
        {
LABEL_10:
          v10 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 40) = v7;
          goto LABEL_50;
        }
      }
      else if (*(_QWORD *)(v9 + 504) <= (unint64_t)v7 && *(unsigned __int16 *)(v9 + 438) >= (unint64_t)a2)
      {
        goto LABEL_10;
      }
    }
    v10 = sub_1ACBE11D0(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 8), a2);
    if (!v10)
    {
      sub_1ACBE0F9C((_QWORD *)v9, v7);
      v10 = 0;
    }
  }
  else
  {
    v10 = sub_1ACBE1124(*(_QWORD *)(a1 + 24), a2);
  }
  *(_QWORD *)(a1 + 40) = v10;
LABEL_50:
  v3 = 0;
  *(_QWORD *)(a1 + 8) = v10;
  if (!v10)
    goto LABEL_28;
LABEL_16:
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12 || *(_QWORD *)(v12 + 520) <= v10)
    goto LABEL_20;
  if (*(_QWORD *)(v12 + 496) <= v10)
  {
    v13 = 128;
  }
  else
  {
    if (*(_QWORD *)(v12 + 504) > v10)
    {
LABEL_20:
      v13 = off_1ECD3B178(v10);
      goto LABEL_21;
    }
    v13 = *(unsigned __int16 *)(v12 + 438);
  }
LABEL_21:
  *(_DWORD *)(a1 + 32) = v13;
  if (v3)
  {
    v14 = *(const void **)(a1 + 8);
    if (v14)
      memcpy(*(void **)(a1 + 40), v14, *(int *)(a1 + 16));
  }
  if ((*(_WORD *)(a1 + 20) & 0x1000) != 0)
  {
    v15 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 56))
    {
      (*(void (**)(_QWORD, _QWORD))(v15 + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 8));
      _Block_release(*(const void **)(a1 + 48));
    }
    else
    {
      ((void (*)(_QWORD))v15)(*(_QWORD *)(a1 + 8));
    }
  }
  result = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
  *(_WORD *)(a1 + 20) &= 0x8FFFu;
  return result;
}

_QWORD *sub_1ACB7E704(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(v4 + 80);
      v7 = *(_QWORD **)(v4 + 32);
      if (v7)
        sub_1ACC010B0(v5, v7);
      result = sub_1ACB7E8B0(v5, *(_QWORD **)(v4 + 40));
      v8 = *(unsigned __int8 **)(v4 + 48);
      if (v8)
        result = sub_1ACBF8348(v5, v8);
      v9 = *(_QWORD **)(v4 + 56);
      if (v9)
        result = sub_1ACC010B0(v5, v9);
      v10 = *(unsigned __int8 **)(v4 + 64);
      if (v10)
        result = sub_1ACBF8348(v5, v10);
      v11 = *(_QWORD **)(v4 + 72);
      if (v11)
        result = sub_1ACC010B0(v5, v11);
      v12 = *(unsigned __int8 **)(v4 + 96);
      if (v12)
        result = sub_1ACBF8348(v5, v12);
      v13 = *(_QWORD **)(v4 + 104);
      if (v13)
      {
        if (*(int *)v13 >= 1)
        {
          v14 = 0;
          v15 = v13 + 4;
          do
          {
            v16 = (_QWORD *)*(v15 - 1);
            if (v16)
              sub_1ACC010B0(v5, v16);
            if (*v15)
              sub_1ACB7E704(v5, *v15, 1);
            v17 = (_QWORD *)*(v15 - 2);
            if (v17)
              sub_1ACBE0F9C(v5, v17);
            ++v14;
            v15 += 6;
          }
          while (v14 < *(int *)v13);
        }
        result = sub_1ACBE0F9C(v5, v13);
      }
      v18 = *(_QWORD **)(v4 + 120);
      if (v18)
      {
        do
        {
          v19 = (_QWORD *)v18[8];
          result = sub_1ACBF8400(v5, v18);
          v18 = v19;
        }
        while (v19);
      }
      v20 = *(_QWORD *)(v4 + 112);
      while (v20)
      {
        v21 = *(_QWORD **)(v20 + 56);
        if (v21)
        {
          *v21 = *(_QWORD *)(v20 + 64);
          v22 = *(_QWORD *)(v20 + 64);
          if (v22)
            *(_QWORD *)(v22 + 56) = *(_QWORD *)(v20 + 56);
          *(_QWORD *)(v20 + 56) = 0;
          v20 = *(_QWORD *)(v4 + 112);
        }
      }
      if (a3)
        result = sub_1ACBF0674(v5, (_QWORD *)v4);
      a3 = 1;
      v4 = v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_1ACB7E8A4(_QWORD *a1, _QWORD *a2)
{
  if (a2)
    return sub_1ACC010B0(a1, a2);
  return a1;
}

_QWORD *sub_1ACB7E8B0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int16 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (a2)
  {
    v3 = result;
    if (*(int *)a2 >= 1)
    {
      v4 = 0;
      v5 = a2 + 1;
      do
      {
        v6 = (_QWORD *)v5[1];
        if (v6)
          sub_1ACBF0674(v3, v6);
        v7 = (_QWORD *)v5[2];
        if (v7)
          sub_1ACBF0674(v3, v7);
        v8 = (_QWORD *)v5[3];
        if (v8)
          sub_1ACBF0674(v3, v8);
        v9 = *(_WORD *)((char *)v5 + 61);
        if ((v9 & 2) != 0)
        {
          v10 = (_QWORD *)v5[11];
          if (v10)
          {
            sub_1ACBE0F9C(v3, v10);
            v9 = *(_WORD *)((char *)v5 + 61);
          }
        }
        if ((v9 & 4) != 0)
        {
          v11 = (_QWORD *)v5[11];
          if (v11)
            sub_1ACC010B0(v3, v11);
        }
        v12 = v5[4];
        if (v12)
        {
          if (v3[102] || (v13 = *(_DWORD *)(v12 + 44) - 1, (*(_DWORD *)(v12 + 44) = v13) == 0))
            sub_1ACC00BE8(v3, (_QWORD *)v12);
        }
        v14 = v5[5];
        if (v14)
          sub_1ACB7E704(v3, v14, 1);
        v15 = (_QWORD *)v5[9];
        if ((*(_WORD *)((_BYTE *)v5 + 61) & 0x400) != 0)
        {
          if (v15)
          {
            v16 = *(_DWORD *)v15;
            if (*(int *)v15 >= 1)
            {
              v17 = 0;
              v18 = 1;
              do
              {
                v19 = (_QWORD *)v15[v18];
                if (v19)
                {
                  sub_1ACBE0F9C(v3, v19);
                  v16 = *(_DWORD *)v15;
                }
                ++v17;
                v18 += 2;
              }
              while (v17 < v16);
            }
            sub_1ACBF0674(v3, v15);
          }
        }
        else if (v15)
        {
          sub_1ACBF8348(v3, (unsigned __int8 *)v5[9]);
        }
        ++v4;
        v5 += 13;
      }
      while (v4 < *(_DWORD *)a2);
    }
    return sub_1ACBF0674(v3, a2);
  }
  return result;
}

_QWORD *sub_1ACB7EA34(_QWORD *result, _QWORD *a2)
{
  if (a2)
    return sub_1ACBE0F9C(result, a2);
  return result;
}

int sqlite3_step(sqlite3_stmt *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  double v9;
  int64x2_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  void (*v33)(void);
  __int16 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t (*v81)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v88;
  uint64_t v89;
  int v90;
  const char *v91;
  _QWORD *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  char *__s;
  uint64_t v97;
  double v98;
  uint64_t v99;
  int v100;
  int v101;
  double v102;

  if (!a1)
  {
    sqlite3_log(21, "API called with NULL prepared statement");
    return sub_1ACBBE20C(97864);
  }
  if (!*(_QWORD *)a1)
  {
    sqlite3_log(21, "API called with finalized prepared statement");
    return sub_1ACBBE20C(97864);
  }
  v99 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v13 = 0x1ECD3B000uLL;
  if (v12)
    xmmword_1ECD3B1C0(v12);
  v100 = 0;
  v14 = 0x1ECD3B000uLL;
  while (1)
  {
    v15 = *(_QWORD *)a1;
    v16 = *((unsigned __int8 *)a1 + 267);
    if (v16 == 2)
      goto LABEL_67;
    while (v16 == 3)
    {
      if (*((unsigned __int8 *)a1 + 52) - 5 > 1)
      {
        v19 = sub_1ACBBE20C(97779);
        goto LABEL_191;
      }
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)(*(_QWORD *)a1 + 24))
        (*(void (**)(void))(v13 + 448))();
      sub_1ACBC594C(v17, (uint64_t)a1);
      v1 = sub_1ACB68B58((_QWORD **)a1);
      *((_BYTE *)a1 + 267) = 1;
      *((_DWORD *)a1 + 13) = 0;
      *((_WORD *)a1 + 132) = -254;
      *((_QWORD *)a1 + 7) = 0;
      *(_QWORD *)((char *)a1 + 44) = 0xFFFFFFFF00000001;
      *((_DWORD *)a1 + 16) = 0;
      *((_QWORD *)a1 + 10) = 0;
      if ((_DWORD)v1 || *(_BYTE *)(v17 + 103))
        sub_1ACBF2990(v17, v1);
      v18 = *(_QWORD *)(v17 + 24);
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(v14 + 464))(v18, v1);
      v16 = *((unsigned __int8 *)a1 + 267);
    }
    if (v16 != 1)
      goto LABEL_67;
    if ((*((_WORD *)a1 + 134) & 3) == 0)
    {
      if (*(_DWORD *)(v15 + 208))
      {
        if (*(_BYTE *)(v15 + 197))
          goto LABEL_55;
      }
      else
      {
        *(_DWORD *)(v15 + 424) = 0;
        if (*(_BYTE *)(v15 + 197))
          goto LABEL_55;
      }
      if (*((_QWORD *)a1 + 40) && (dword_1ECD3B304 & 1) != 0)
      {
        *((_QWORD *)a1 + 24) = mach_continuous_time();
        *((_DWORD *)a1 + 64) = 0;
        v20 = *(unsigned int *)(v15 + 40);
        if ((int)v20 < 1)
        {
          v21 = 0;
        }
        else
        {
          v21 = 0;
          v22 = *(_QWORD *)(v15 + 32) + 8;
          do
          {
            if (*(_QWORD *)v22)
              v21 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v22 + 8) + 248);
            v22 += 32;
            --v20;
          }
          while (v20);
        }
        *((_DWORD *)a1 + 60) = v21;
        v23 = *(unsigned int *)(v15 + 40);
        if ((int)v23 < 1)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          v25 = *(_QWORD *)(v15 + 32) + 8;
          do
          {
            if (*(_QWORD *)v25)
              v24 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v25 + 8) + 252);
            v25 += 32;
            --v23;
          }
          while (v23);
        }
        *((_DWORD *)a1 + 61) = v24;
        v26 = *(unsigned int *)(v15 + 40);
        if ((int)v26 < 1)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          v28 = *(_QWORD *)(v15 + 32) + 8;
          do
          {
            if (*(_QWORD *)v28)
              v27 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v28 + 8) + 256);
            v28 += 32;
            --v26;
          }
          while (v26);
        }
        *((_DWORD *)a1 + 62) = v27;
        v29 = *(unsigned int *)(v15 + 40);
        if ((int)v29 < 1)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          v31 = *(_QWORD *)(v15 + 32) + 8;
          do
          {
            if (*(_QWORD *)v31)
              v30 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v31 + 8) + 260);
            v31 += 32;
            --v29;
          }
          while (v29);
        }
        *((_DWORD *)a1 + 63) = v30;
      }
LABEL_55:
      if ((*(_BYTE *)(v15 + 110) & 0x82) != 0 && !*(_BYTE *)(v15 + 197) && *((_QWORD *)a1 + 40))
      {
        v32 = *(int **)v15;
        if (**(int **)v15 >= 2 && (v33 = (void (*)(void))*((_QWORD *)v32 + 17)) != 0)
        {
          v33();
        }
        else
        {
          v102 = 0.0;
          (*((void (**)(int *, double *))v32 + 15))(v32, &v102);
          v9 = 86400000.0;
          *(double *)v8.i64 = v102 * 86400000.0;
          *((_QWORD *)a1 + 23) = (uint64_t)(v102 * 86400000.0);
        }
      }
      ++*(_DWORD *)(v15 + 208);
      v34 = *((_WORD *)a1 + 134);
      if ((v34 & 0x40) == 0)
      {
        ++*(_DWORD *)(v15 + 216);
        v34 = *((_WORD *)a1 + 134);
      }
      if ((v34 & 0x80) != 0)
        ++*(_DWORD *)(v15 + 212);
      *((_DWORD *)a1 + 12) = 0;
      *((_BYTE *)a1 + 267) = 2;
LABEL_67:
      if ((*((_WORD *)a1 + 134) & 0xC) == 0)
      {
        ++*(_DWORD *)(v15 + 220);
        v19 = sub_1ACB7F6A4((uint64_t *)a1, v8, v9, v10, v1, v2, v3, v4, v5, v6, v7);
        --*(_DWORD *)(v15 + 220);
LABEL_158:
        ++*((_DWORD *)a1 + 59);
        if (v19 == 100)
        {
          *(_DWORD *)(v15 + 80) = 100;
          goto LABEL_226;
        }
        sub_1ACBC594C(v15, (uint64_t)a1);
        *((_QWORD *)a1 + 20) = 0;
        if (v19 != 101)
        {
          if (*((char *)a1 + 266) < 0)
            v19 = sub_1ACBF09C8((uint64_t)a1);
LABEL_185:
          *(_DWORD *)(v15 + 80) = v19;
          v82 = *(_QWORD *)a1;
          v1 = *((unsigned int *)a1 + 13);
          if (((_DWORD)v1 || *(_BYTE *)(v82 + 103)) && sub_1ACBF2990(v82, v1) == 7)
          {
            *((_DWORD *)a1 + 13) = 7;
            if (*((char *)a1 + 266) < 0)
              v19 = 7;
          }
          goto LABEL_190;
        }
        if (!*(_BYTE *)(v15 + 101))
          goto LABEL_184;
        if (*(int *)(v15 + 40) <= 0)
        {
          *((_DWORD *)a1 + 13) = 0;
          goto LABEL_184;
        }
        v74 = 0;
        v75 = 0;
        v76 = 0;
        while (1)
        {
          v77 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + v74 + 8);
          if (!v77)
            goto LABEL_163;
          if (*(_BYTE *)(v77 + 17))
          {
            ++*(_DWORD *)(v77 + 20);
            if (!*(_BYTE *)(v77 + 18))
              sub_1ACBECF6C(v77);
          }
          v78 = *(_QWORD *)(**(_QWORD **)(v77 + 8) + 344);
          if (v78)
          {
            v79 = *(unsigned int *)(v78 + 24);
            *(_DWORD *)(v78 + 24) = 0;
            if (!*(_BYTE *)(v77 + 17))
              goto LABEL_173;
          }
          else
          {
            v79 = 0;
            if (!*(_BYTE *)(v77 + 17))
              goto LABEL_173;
          }
          v80 = *(_DWORD *)(v77 + 20) - 1;
          *(_DWORD *)(v77 + 20) = v80;
          if (v80)
          {
LABEL_173:
            if ((int)v79 >= 1)
              goto LABEL_174;
            goto LABEL_163;
          }
          sub_1ACBED048(v77);
          if ((int)v79 >= 1)
          {
LABEL_174:
            if (!v76)
            {
              v81 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v15 + 376);
              if (v81)
                v76 = v81(*(_QWORD *)(v15 + 384), v15, *(_QWORD *)(*(_QWORD *)(v15 + 32) + v74), v79);
            }
          }
LABEL_163:
          ++v75;
          v74 += 32;
          if (v75 >= *(int *)(v15 + 40))
          {
            *((_DWORD *)a1 + 13) = v76;
            v13 = 0x1ECD3B000;
            if (v76)
            {
              v19 = 1;
              goto LABEL_185;
            }
LABEL_184:
            v19 = 101;
            goto LABEL_185;
          }
        }
      }
      v35 = *(_QWORD *)a1;
      if ((*((_WORD *)a1 + 134) & 0xC) == 4)
        v36 = 1;
      else
        v36 = *(_BYTE *)(v35 + 51) & 1;
      v37 = *((_QWORD *)a1 + 13);
      v102 = 0.0;
      v38 = *(_QWORD **)(v37 + 88);
      if (v38[102])
      {
        if (*(_DWORD *)(v37 + 96))
        {
          v39 = *(_QWORD **)(v37 + 104);
          if (v39)
            sub_1ACBE0F9C(*(_QWORD **)(v37 + 88), v39);
        }
        if (*(_DWORD *)(v37 + 160))
        {
          v40 = *(_QWORD **)(v37 + 168);
          if (v40)
            sub_1ACBE0F9C(v38, v40);
        }
        if (*(_DWORD *)(v37 + 224))
        {
          v41 = *(_QWORD **)(v37 + 232);
          if (v41)
            sub_1ACBE0F9C(v38, v41);
        }
        if (*(_DWORD *)(v37 + 288))
        {
          v42 = *(_QWORD **)(v37 + 296);
          if (v42)
            sub_1ACBE0F9C(v38, v42);
        }
        if (*(_DWORD *)(v37 + 352))
        {
          v43 = *(_QWORD **)(v37 + 360);
          if (v43)
            sub_1ACBE0F9C(v38, v43);
        }
        if (*(_DWORD *)(v37 + 416))
        {
          v44 = *(_QWORD **)(v37 + 424);
          if (v44)
            sub_1ACBE0F9C(v38, v44);
        }
        if (*(_DWORD *)(v37 + 480))
        {
          v45 = *(_QWORD **)(v37 + 488);
          if (v45)
            sub_1ACBE0F9C(v38, v45);
        }
        if (*(_DWORD *)(v37 + 544))
        {
          v46 = *(_QWORD **)(v37 + 552);
          if (v46)
            sub_1ACBE0F9C(v38, v46);
        }
LABEL_97:
        v101 = 0;
        if (*((_DWORD *)a1 + 13) == 7)
        {
          v14 = 0x1ECD3B000;
          if (*(_BYTE *)(v35 + 103) || *(_BYTE *)(v35 + 104))
          {
            v19 = 1;
            v13 = 0x1ECD3B000;
          }
          else
          {
            *(_BYTE *)(v35 + 103) = 1;
            v13 = 0x1ECD3B000;
            if (*(int *)(v35 + 220) >= 1)
              *(_DWORD *)(v35 + 424) = 1;
            ++*(_DWORD *)(v35 + 432);
            *(_WORD *)(v35 + 436) = 0;
            v58 = *(_QWORD *)(v35 + 344);
            if (v58
              && (sub_1ACBCB308(v58, "out of memory", v2, (uint64_t)v3, v4, v5, v6, v7, (char)__s),
                  v59 = *(_QWORD *)(v35 + 344),
                  *(_DWORD *)(v59 + 24) = 7,
                  (v60 = *(_QWORD *)(v59 + 256)) != 0))
            {
              do
              {
                ++*(_DWORD *)(v60 + 48);
                *(_DWORD *)(v60 + 24) = 7;
                v60 = *(_QWORD *)(v60 + 256);
                v19 = 1;
              }
              while (v60);
            }
            else
            {
              v19 = 1;
            }
          }
        }
        else
        {
          v14 = 0x1ECD3B000uLL;
          if (v36)
            v47 = *((_QWORD *)a1 + 13) + 576;
          else
            v47 = 0;
          v19 = sub_1ACBF32C4((uint64_t)a1, v47, (*((_WORD *)a1 + 134) & 0xC) == 8, (int *)a1 + 12, &v101, &v102);
          v13 = 0x1ECD3B000;
          if (!v19)
          {
            v56 = v102;
            v57 = v101;
            if (*(_DWORD *)(v35 + 424))
            {
              *((_DWORD *)a1 + 13) = 9;
              sub_1ACBF1C7C((uint64_t *)a1, "interrupted", v50, v51, v52, v53, v54, v55, (char)__s);
              v19 = 1;
            }
            else
            {
              v97 = v37 + 64;
              v61 = (unsigned __int8 *)(*(_QWORD *)&v102 + 40 * v101);
              v98 = v102;
              __s = (char *)sub_1ACBF359C(v35, (uint64_t)v61, v50, v51, v52, v53, v54, v55);
              if ((*((_WORD *)a1 + 134) & 0xC) == 8)
              {
                v62 = *(int *)(*(_QWORD *)&v56 + 40 * (int)v57 + 4);
                if ((*(_WORD *)(v37 + 84) & 0x9000) != 0)
                {
                  v63 = v37 + 64;
                  sub_1ACBF327C(v97, v62);
                  v64 = v98;
                  v13 = 0x1ECD3B000;
                }
                else
                {
                  v64 = v56;
                  *(_QWORD *)(v37 + 64) = v62;
                  *(_WORD *)(v37 + 84) = 4;
                  v13 = 0x1ECD3B000;
                  v63 = v37 + 64;
                }
                v65 = *(int *)(*(_QWORD *)&v64 + 40 * (int)v57 + 8);
                if ((*(_WORD *)(v37 + 148) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 128, v65);
                  v64 = v98;
                }
                else
                {
                  *(_QWORD *)(v37 + 128) = v65;
                  *(_WORD *)(v37 + 148) = 4;
                }
                v68 = *(int *)(*(_QWORD *)&v64 + 40 * (int)v57 + 12);
                if ((*(_WORD *)(v37 + 212) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 192, v68);
                }
                else
                {
                  *(_QWORD *)(v37 + 192) = v68;
                  *(_WORD *)(v37 + 212) = 4;
                }
                v69 = 4;
              }
              else
              {
                if ((*(_WORD *)(v37 + 84) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v97, v57);
                }
                else
                {
                  *(_QWORD *)(v37 + 64) = v57;
                  *(_WORD *)(v37 + 84) = 4;
                }
                sub_1ACB57870(v37 + 128, off_1E5C73418[*v61], -1, 1u, 0);
                v66 = v56;
                v67 = *(int *)(*(_QWORD *)&v56 + 40 * (int)v57 + 4);
                if ((*(_WORD *)(v37 + 212) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 192, v67);
                  v66 = v56;
                }
                else
                {
                  *(_QWORD *)(v37 + 192) = v67;
                  *(_WORD *)(v37 + 212) = 4;
                }
                v13 = 0x1ECD3B000uLL;
                v63 = v37 + 64;
                v70 = *(int *)(*(_QWORD *)&v66 + 40 * (int)v57 + 8);
                if ((*(_WORD *)(v37 + 276) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 256, v70);
                  v66 = v98;
                }
                else
                {
                  *(_QWORD *)(v37 + 256) = v70;
                  *(_WORD *)(v37 + 276) = 4;
                }
                v71 = *(int *)(*(_QWORD *)&v66 + 40 * (int)v57 + 12);
                if ((*(_WORD *)(v37 + 340) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 320, v71);
                  v66 = v98;
                }
                else
                {
                  *(_QWORD *)(v37 + 320) = v71;
                  *(_WORD *)(v37 + 340) = 4;
                }
                v72 = *(unsigned __int16 *)(*(_QWORD *)&v66 + 40 * (int)v57 + 2);
                if ((*(_WORD *)(v37 + 468) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v37 + 448, v72);
                }
                else
                {
                  *(_QWORD *)(v37 + 448) = v72;
                  *(_WORD *)(v37 + 468) = 4;
                }
                if ((*(_WORD *)(v37 + 532) & 0x9000) != 0)
                  sub_1ACBF2A54((int *)(v37 + 512));
                else
                  *(_WORD *)(v37 + 532) = 1;
                v69 = 6;
              }
              sub_1ACB57870(v37 + (v69 << 6), __s, -1, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
              *((_QWORD *)a1 + 20) = v63;
              if (*(_BYTE *)(v35 + 103))
                v73 = 7;
              else
                v73 = 0;
              if (*(_BYTE *)(v35 + 103))
                v19 = 1;
              else
                v19 = 100;
              *((_DWORD *)a1 + 13) = v73;
            }
          }
        }
        goto LABEL_158;
      }
      v48 = 0;
      while (1)
      {
        v49 = v37 + v48;
        if ((*(_WORD *)(v37 + v48 + 84) & 0x9000) != 0)
        {
          sub_1ACBF2A04(v49 + 64);
        }
        else
        {
          if (!*(_DWORD *)(v49 + 96))
            goto LABEL_106;
          sub_1ACBF0674(v38, *(_QWORD **)(v37 + v48 + 104));
          *(_DWORD *)(v49 + 96) = 0;
        }
        *(_WORD *)(v49 + 84) = 0;
LABEL_106:
        v48 += 64;
        if (v48 == 512)
          goto LABEL_97;
      }
    }
    *((_DWORD *)a1 + 13) = 17;
    v19 = *((char *)a1 + 266) < 0 ? sub_1ACBF09C8((uint64_t)a1) : 1;
LABEL_190:
    v19 &= *(_DWORD *)(v15 + 88);
LABEL_191:
    if (v19 != 17)
      goto LABEL_226;
    if (v100 == 50)
    {
      v19 = 17;
      goto LABEL_226;
    }
    v83 = *((_DWORD *)a1 + 12);
    v84 = sub_1ACBC74A8((uint64_t)a1, v1, v2, (uint64_t)v3, v4, v5, v6, v7);
    if (v84)
      break;
    v85 = *(_QWORD *)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
      (*(void (**)(void))(v13 + 448))();
    sub_1ACBC594C(v85, (uint64_t)a1);
    v1 = sub_1ACB68B58((_QWORD **)a1);
    *((_BYTE *)a1 + 267) = 1;
    *((_DWORD *)a1 + 13) = 0;
    *((_WORD *)a1 + 132) = -254;
    *((_QWORD *)a1 + 7) = 0;
    *(_QWORD *)((char *)a1 + 44) = 0xFFFFFFFF00000001;
    *((_DWORD *)a1 + 16) = 0;
    *((_QWORD *)a1 + 10) = 0;
    if ((_DWORD)v1 || *(_BYTE *)(v85 + 103))
      sub_1ACBF2990(v85, v1);
    v86 = *(_QWORD *)(v85 + 24);
    if (v86)
      (*(void (**)(uint64_t, uint64_t))(v14 + 464))(v86, v1);
    ++v100;
    if ((v83 & 0x80000000) == 0)
      *((_BYTE *)a1 + 265) = -2;
  }
  v88 = v84;
  v89 = *(_QWORD *)(v99 + 416);
  if (!v89)
    goto LABEL_216;
  v90 = *(unsigned __int16 *)(v89 + 20);
  if ((~v90 & 0x202) == 0 && *(_BYTE *)(v89 + 22) == 1)
  {
    v91 = *(const char **)(v89 + 8);
    v92 = (_QWORD *)*((_QWORD *)a1 + 21);
    if (!v92)
      goto LABEL_218;
LABEL_217:
    sub_1ACBE0F9C((_QWORD *)v99, v92);
    goto LABEL_218;
  }
  if ((v90 & 1) != 0)
  {
LABEL_216:
    v91 = 0;
    v92 = (_QWORD *)*((_QWORD *)a1 + 21);
    if (!v92)
      goto LABEL_218;
    goto LABEL_217;
  }
  v91 = (const char *)sub_1ACBF2B64((int *)v89, 1);
  v92 = (_QWORD *)*((_QWORD *)a1 + 21);
  if (v92)
    goto LABEL_217;
LABEL_218:
  if (*(_BYTE *)(v99 + 103))
  {
    *((_QWORD *)a1 + 21) = 0;
    v19 = 7;
    *((_DWORD *)a1 + 13) = 7;
  }
  else
  {
    if (v91)
    {
      v93 = strlen(v91) + 1;
      v94 = (void *)sub_1ACBE1124(v99, v93);
      v95 = v94;
      if (v94)
        memcpy(v94, v91, v93);
    }
    else
    {
      v95 = 0;
    }
    *((_QWORD *)a1 + 21) = v95;
    v19 = sub_1ACBF2990(v99, v88);
    *((_DWORD *)a1 + 13) = v19;
  }
  v14 = 0x1ECD3B000uLL;
LABEL_226:
  if (*(_QWORD *)(v99 + 24))
    (*(void (**)(void))(v14 + 464))();
  return v19;
}

uint64_t sub_1ACB7F6A4(uint64_t *a1, int64x2_t a2, double a3, int64x2_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ii;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;
  __int16 *v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  __int16 *v39;
  uint64_t v40;
  int v41;
  _WORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int *v45;
  int64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v52;
  __int16 v53;
  __int16 v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  signed int v61;
  int v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t (**v88)(uint64_t);
  unsigned __int8 *v89;
  uint64_t v90;
  __int16 v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  sqlite3_value *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  __int16 *v104;
  __int16 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _WORD *v117;
  __int16 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _WORD *v129;
  int v130;
  int v131;
  char v132;
  char v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  char v138;
  unint64_t v139;
  int v140;
  _BOOL4 v141;
  unsigned __int8 *v142;
  int v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  const void *v148;
  uint64_t v149;
  int v150;
  _BYTE *v151;
  unsigned __int8 *i;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  BOOL v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _WORD *v178;
  __int16 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  int64x2_t *v187;
  uint64_t v188;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t *);
  uint64_t v197;
  char v198;
  int64x2_t *v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int v206;
  unint64_t v207;
  __int16 v208;
  __int16 *v209;
  __int16 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  __int16 v220;
  BOOL v221;
  uint64_t v222;
  __int16 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BOOL8 v230;
  _WORD *v231;
  uint64_t v232;
  unint64_t v233;
  _WORD *v234;
  __int16 v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  int64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  unint64_t v262;
  __int16 v263;
  __int16 *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t *v271;
  unsigned __int8 **v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _WORD *v276;
  __int16 v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  char *v285;
  char *v286;
  unint64_t v287;
  int v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t **v310;
  uint64_t *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t *v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  __int16 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _WORD *v338;
  __int16 v339;
  uint64_t v340;
  uint64_t v341;
  int64x2_t *v342;
  __int32 v343;
  __n128 *v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  __int128 v350;
  __int128 v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __n128 *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  __int16 v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  __int16 v375;
  BOOL v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  int *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned __int8 *v390;
  _BYTE *v391;
  uint64_t v392;
  char v393;
  unsigned __int8 *v394;
  char v395;
  __int16 v396;
  __int16 v397;
  int v398;
  __int16 v399;
  uint64_t v400;
  _BYTE *v401;
  uint64_t v402;
  unint64_t v403;
  char v404;
  unsigned __int8 *v405;
  char v406;
  uint64_t v407;
  int v408;
  __int16 v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  int v418;
  int v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int16 v425;
  uint64_t v426;
  unsigned int v427;
  double v428;
  unint64_t v429;
  __int16 v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  __int16 v437;
  _WORD *v438;
  __int16 v439;
  _WORD *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  _WORD *v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  char v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  __int16 *v452;
  __int16 v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  unsigned __int8 *v458;
  int v459;
  uint64_t v460;
  int v461;
  _QWORD *v462;
  _QWORD *v463;
  uint64_t v464;
  char *v465;
  unsigned __int8 v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned __int8 *v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  signed int v482;
  int v483;
  char *v484;
  int v485;
  int v486;
  int v487;
  int v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  unint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  _BOOL4 v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _WORD *v524;
  uint64_t v525;
  _WORD *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  __int16 v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  const void **v541;
  uint64_t v542;
  char *v543;
  int v544;
  int v545;
  _QWORD *v546;
  uint64_t v547;
  unsigned __int8 *v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  _WORD *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _QWORD *v559;
  const char *v560;
  const char *v561;
  int v562;
  int v563;
  int v564;
  char *v565;
  int v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  _WORD *v576;
  _QWORD *v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  unint64_t v582;
  __int16 *v583;
  __int16 v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  __int16 v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  int v608;
  int v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t (*v613)(_QWORD, _QWORD);
  int64x2_t *v614;
  char v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  _QWORD *v621;
  uint64_t v622;
  _QWORD *v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  _QWORD *v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  _QWORD *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  _WORD *v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  _WORD *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  _BYTE *v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  __int16 v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  int *v664;
  unsigned int v665;
  uint64_t v666;
  unint64_t v667;
  unsigned int v668;
  unsigned int v669;
  uint64_t v670;
  signed int v671;
  uint64_t v672;
  int v673;
  int v674;
  unint64_t v675;
  unint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  uint64_t (*v680)(uint64_t, _DWORD *, char *, unsigned int, char *, unsigned int);
  uint64_t v681;
  uint64_t v682;
  __int16 v683;
  __int16 v684;
  uint64_t v685;
  unint64_t v686;
  int v687;
  __int16 v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v697;
  __int16 v698;
  __int16 v699;
  uint64_t v700;
  __int16 v701;
  __int16 v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v706;
  uint64_t v707;
  BOOL v708;
  uint64_t v709;
  int v710;
  unsigned __int8 *v711;
  uint64_t v712;
  uint64_t v713;
  int v714;
  int64x2_t v715;
  unint64_t v716;
  uint64_t v717;
  int64x2_t v718;
  int64x2_t v719;
  int8x16_t v720;
  int8x16_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  int v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  unsigned __int8 *v731;
  unint64_t v732;
  int v733;
  char v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  int v738;
  uint64_t v739;
  int v740;
  int v741;
  uint64_t v742;
  int v743;
  int v744;
  int v745;
  uint64_t v746;
  __int16 *v747;
  __int16 v748;
  uint64_t v749;
  int64x2_t v750;
  unint64_t v751;
  uint64_t v752;
  int64x2_t v753;
  int64x2_t v754;
  int8x16_t v755;
  int8x16_t v756;
  uint64_t v757;
  uint64_t v758;
  int v759;
  char v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  unsigned int v769;
  uint64_t *v770;
  unsigned int v771;
  void (*v772)(_QWORD);
  unsigned __int16 v773;
  int v774;
  int v775;
  int v776;
  unint64_t v777;
  int v778;
  uint64_t v779;
  uint64_t *v780;
  uint64_t v781;
  int v782;
  int v783;
  int v784;
  const char *v785;
  int v786;
  int v787;
  _QWORD *v788;
  _QWORD *v789;
  uint64_t v790;
  unint64_t v791;
  unint64_t v792;
  char *v793;
  uint64_t v794;
  uint64_t v795;
  char *v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  uint64_t v805;
  int8x8_t *v806;
  unint64_t v807;
  int8x8_t *v808;
  int v809;
  signed int *v810;
  const void *v811;
  uint64_t v812;
  uint64_t v813;
  int v814;
  unsigned int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  _DWORD *v822;
  int v823;
  int v824;
  int v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t *v832;
  unint64_t v833;
  uint64_t v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  void *v839;
  void *v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  unint64_t v845;
  uint64_t v846;
  uint64_t v847;
  __int16 v848;
  uint64_t *v849;
  uint64_t v850;
  _WORD *v851;
  uint64_t v852;
  unsigned int v853;
  unsigned int v854;
  unint64_t v855;
  unint64_t v856;
  uint64_t v857;
  __int16 v858;
  _BYTE *v859;
  _QWORD *v860;
  uint64_t v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t jj;
  int v866;
  unint64_t v867;
  unsigned __int8 *v868;
  int64x2_t *v869;
  uint64_t v870;
  int64x2_t v871;
  uint64_t *v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  unsigned int v877;
  int v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  _BOOL4 v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  int v887;
  int v888;
  int v889;
  unsigned __int8 *v890;
  uint64_t n;
  uint64_t v892;
  _DWORD *v893;
  int v894;
  int v895;
  int v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  char v903;
  int v904;
  uint64_t v905;
  _BYTE *v906;
  double v907;
  _QWORD *v908;
  uint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  int v912;
  int v913;
  size_t v914;
  int *v915;
  int *v916;
  unint64_t v917;
  unint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int *v921;
  uint64_t v922;
  unint64_t v923;
  int v924;
  int v925;
  uint64_t v926;
  int v927;
  uint64_t v928;
  int *v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  void (**v933)(int *);
  int *v934;
  int v935;
  int v936;
  int v937;
  int v938;
  int v939;
  int v940;
  int v941;
  int v942;
  int v943;
  int v944;
  int *v945;
  int v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t *v949;
  uint64_t v950;
  int *v951;
  int *v952;
  int v953;
  _QWORD *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t (**v957)(uint64_t);
  uint64_t v958;
  uint64_t (**v959)(uint64_t);
  uint64_t v960;
  uint64_t (**v961)(uint64_t);
  int *v962;
  uint64_t v963;
  uint64_t v964;
  void (**v965)(int *);
  uint64_t (**v966)(_QWORD);
  int v967;
  uint64_t v968;
  uint64_t *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  uint64_t v979;
  uint64_t v980;
  void (**v981)(unsigned int *);
  int *v982;
  __int16 v983;
  unsigned __int8 *v984;
  double v985;
  __int16 v986;
  int v987;
  unint64_t v988;
  __int16 v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  unint64_t v993;
  _WORD *v994;
  __int16 v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  _QWORD *v999;
  uint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  int v1004;
  int v1005;
  unint64_t v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  int v1012;
  unint64_t v1013;
  _BYTE *v1014;
  int8x8_t *v1015;
  char *v1016;
  unint64_t v1017;
  unint64_t v1018;
  unsigned int v1019;
  char *v1020;
  unsigned int v1021;
  int v1022;
  void (*v1023)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL4 v1024;
  uint64_t v1025;
  _QWORD *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  _WORD *v1030;
  __int16 v1031;
  uint64_t v1032;
  uint64_t v1033;
  BOOL v1034;
  int v1035;
  uint64_t v1036;
  signed int v1037;
  unint64_t v1038;
  unint64_t v1039;
  void *v1040;
  __int16 v1041;
  unint64_t v1042;
  int v1043;
  _BYTE *v1044;
  uint64_t v1045;
  int v1046;
  unsigned int v1047;
  unsigned __int8 *v1048;
  int v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  int v1053;
  int v1054;
  int v1055;
  unsigned int v1056;
  uint64_t v1057;
  uint64_t v1058;
  _QWORD *v1059;
  uint64_t v1060;
  uint64_t v1061;
  unsigned int (*v1062)(_QWORD);
  uint64_t v1063;
  __int16 v1064;
  unint64_t v1065;
  int v1066;
  int v1067;
  uint64_t v1068;
  unsigned __int8 *v1069;
  int v1070;
  unint64_t v1071;
  uint64_t v1072;
  int *v1073;
  uint64_t v1074;
  unint64_t v1075;
  int *v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  unsigned int v1085;
  uint64_t v1086;
  unint64_t v1087;
  int v1088;
  char *v1089;
  int64x2_t *v1090;
  uint64_t v1091;
  int64x2_t v1092;
  unint64_t *v1093;
  uint64_t v1094;
  int v1095;
  int v1096;
  uint64_t v1097;
  uint64_t v1098;
  int v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  _QWORD *v1113;
  _QWORD *v1114;
  _QWORD *v1115;
  int v1116;
  int *v1117;
  int v1118;
  int v1119;
  int v1120;
  unint64_t v1121;
  uint64_t v1122;
  int v1123;
  uint64_t v1124;
  uint64_t v1125;
  int v1126;
  uint64_t v1127;
  uint64_t v1128;
  unsigned int *v1129;
  char *v1130;
  __int16 *v1131;
  __int16 v1132;
  int v1133;
  int v1134;
  int v1135;
  const char *v1136;
  uint64_t v1137;
  _BOOL4 v1138;
  int v1140;
  uint64_t v1141;
  uint64_t v1142;
  int v1143;
  int v1144;
  uint64_t v1145;
  uint64_t v1146;
  void *v1147;
  int v1148;
  uint64_t v1149;
  _DWORD *v1150;
  uint64_t v1151;
  unint64_t v1152;
  unsigned int v1153;
  unint64_t v1154;
  uint64_t v1155;
  int *v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  __int16 v1162;
  uint64_t v1163;
  uint64_t v1164;
  int *v1165;
  unsigned int v1166;
  unint64_t v1167;
  char *v1168;
  unint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  int v1172;
  int v1173;
  int v1174;
  uint64_t v1175;
  int v1176;
  unsigned int v1177;
  uint64_t v1178;
  uint64_t (*v1179)(_QWORD);
  _QWORD *v1180;
  int v1181;
  uint64_t v1182;
  _QWORD *v1183;
  uint64_t v1184;
  int v1185;
  void (*v1186)(_QWORD);
  _QWORD *v1187;
  int v1188;
  uint64_t v1189;
  int v1190;
  int v1191;
  int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t *v1198;
  uint64_t v1199;
  uint64_t v1200;
  unsigned int v1201;
  int v1202;
  BOOL v1203;
  BOOL v1204;
  uint64_t v1205;
  char *v1206;
  unsigned int *v1207;
  unint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  unsigned int v1211;
  uint64_t v1213;
  int8x8_t *v1214;
  uint64_t v1215;
  signed int v1216;
  unsigned int v1217;
  unsigned int v1218;
  uint64_t v1219;
  int v1220;
  uint64_t v1221;
  uint64_t v1222;
  int v1223;
  unsigned int *v1224;
  unsigned int v1225;
  int v1226;
  BOOL v1227;
  int v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  int v1236;
  uint64_t v1237;
  char *v1238;
  uint64_t v1239;
  void *v1240;
  int v1241;
  int v1242;
  int v1243;
  unsigned __int8 *v1244;
  uint64_t *v1245;
  _DWORD *v1246;
  int v1247;
  uint64_t j;
  _QWORD *v1249;
  BOOL v1250;
  uint64_t v1251;
  __int16 v1252;
  BOOL v1253;
  uint64_t v1254;
  int v1255;
  char v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  _BYTE *v1263;
  uint64_t v1264;
  unsigned __int8 *v1265;
  uint64_t v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  char v1271;
  uint64_t v1272;
  BOOL v1273;
  int v1274;
  uint64_t v1275;
  unsigned int v1276;
  uint64_t v1277;
  unsigned int v1278;
  int v1279;
  unsigned int v1280;
  uint64_t v1281;
  uint64_t v1282;
  int v1283;
  _BYTE *v1284;
  unsigned __int8 *kk;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  _QWORD *v1289;
  _QWORD *v1290;
  _QWORD *v1291;
  _QWORD *v1292;
  BOOL v1293;
  char v1295;
  unint64_t v1296;
  int *v1297;
  unint64_t v1298;
  unint64_t v1299;
  int v1300;
  unint64_t v1301;
  unint64_t v1302;
  int v1303;
  int v1304;
  int v1305;
  int v1306;
  int v1307;
  uint64_t v1308;
  int v1309;
  uint64_t v1310;
  int v1311;
  uint64_t v1312;
  unsigned int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  _DWORD *v1317;
  uint64_t v1318;
  _WORD *v1319;
  int *v1320;
  uint64_t v1321;
  int *v1322;
  uint64_t v1323;
  int v1324;
  int v1325;
  char *v1326;
  char *v1327;
  unint64_t v1328;
  unint64_t v1329;
  unint64_t v1330;
  void *v1331;
  int *v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  int **v1336;
  int *v1337;
  unint64_t v1338;
  uint64_t v1339;
  int **v1340;
  int *v1341;
  uint64_t v1342;
  uint64_t k;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  unsigned __int8 *v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  int v1351;
  int v1352;
  uint32x4_t *v1354;
  uint32x4_t v1355;
  uint64_t v1356;
  uint32x4_t v1357;
  unint64_t v1358;
  unsigned int *v1359;
  unsigned int v1360;
  unsigned int v1361;
  uint64_t v1362;
  int v1363;
  unint64_t v1364;
  unsigned int v1365;
  unsigned int v1367;
  unint64_t v1368;
  int v1369;
  unsigned int v1370;
  unsigned int v1371;
  int v1372;
  unsigned int v1373;
  unsigned int v1374;
  int v1375;
  uint64_t v1376;
  uint64_t (**v1377)(uint64_t);
  uint64_t v1378;
  void *v1379;
  char v1380;
  int v1381;
  uint64_t v1382;
  _WORD *v1383;
  _BYTE *v1384;
  int v1385;
  BOOL v1386;
  int v1387;
  uint64_t v1388;
  BOOL v1389;
  unint64_t v1390;
  int v1391;
  uint64_t v1392;
  uint64_t v1393;
  unsigned int v1394;
  int v1395;
  unsigned int v1396;
  int v1397;
  uint64_t v1398;
  int v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  unsigned int v1403;
  unsigned int v1404;
  int v1405;
  unsigned int v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  char v1410;
  int v1411;
  uint64_t v1412;
  uint64_t v1413;
  int v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  char v1418;
  int v1419;
  uint64_t v1420;
  uint64_t v1421;
  int v1422;
  int v1423;
  int v1424;
  uint64_t v1425;
  int v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  const char *v1433;
  const char *v1434;
  uint64_t v1435;
  int v1436;
  int v1437;
  const char *v1438;
  const char *v1439;
  int v1440;
  uint64_t *v1441;
  uint64_t v1442;
  int v1443;
  const char *v1444;
  char v1445;
  const char *v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  void (**v1450)(unsigned int *);
  int v1451;
  const char *v1452;
  int v1453;
  uint64_t (*v1454)(void);
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t m;
  uint64_t v1463;
  uint64_t v1464;
  int v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  unsigned int (*v1469)(_QWORD);
  uint64_t v1471;
  char v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  int v1476;
  uint64_t *v1477;
  uint64_t v1478;
  char **v1479;
  int v1480;
  int *v1481;
  __int16 v1482;
  int *v1483;
  _WORD *v1484;
  int *v1485;
  int8x8_t *v1486;
  int *v1487;
  uint64_t v1488;
  int v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  int v1493;
  uint64_t v1494;
  BOOL v1495;
  _DWORD *v1496;
  int v1497;
  int v1498;
  __int16 v1499;
  int *v1500;
  unsigned int v1501;
  unsigned __int8 *v1502;
  unsigned __int8 *v1503;
  unsigned __int8 *v1504;
  unsigned __int8 *v1505;
  unsigned __int8 *v1506;
  unsigned __int8 *v1507;
  unsigned __int8 *v1508;
  unsigned __int8 *v1509;
  unint64_t v1510;
  unint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  unint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  BOOL v1521;
  uint64_t v1522;
  int *v1523;
  uint64_t v1524;
  _WORD *v1525;
  uint64_t v1526;
  unsigned int v1527;
  unsigned int v1528;
  unsigned int v1529;
  unsigned int v1530;
  unsigned int v1531;
  unsigned int v1532;
  unsigned int v1533;
  unsigned int v1534;
  unsigned int v1535;
  unsigned int v1536;
  unsigned int v1537;
  unsigned int v1538;
  unsigned int v1539;
  unsigned int v1540;
  unsigned int v1541;
  int v1542;
  int v1543;
  uint64_t v1544;
  int v1545;
  uint64_t v1546;
  int v1547;
  uint64_t v1548;
  int v1549;
  uint64_t v1550;
  uint64_t v1551;
  unsigned __int8 *v1552;
  uint64_t v1553;
  unint64_t v1554;
  int v1555;
  int *v1556;
  uint64_t v1557;
  __int128 v1558;
  __int128 v1559;
  uint64_t v1560;
  _OWORD __buf[4];
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  uint64_t v1565;
  uint64_t v1566;

  v11 = (uint64_t)a1;
  v1566 = *MEMORY[0x1E0C80C00];
  v12 = (unsigned __int8 *)a1[17];
  v13 = *a1;
  v14 = *(unsigned __int8 *)(*a1 + 100);
  v15 = a1[13];
  v1553 = *(_QWORD *)(*a1 + 48);
  if (*((_DWORD *)a1 + 69))
    sub_1ACBF0ABC(a1);
  if (*(_QWORD *)(v13 + 544))
    v16 = (*(_DWORD *)(v13 + 560)
                       + *(_DWORD *)(v11 + 296) / *(_DWORD *)(v13 + 560) * *(_DWORD *)(v13 + 560)
                       - *(_DWORD *)(v11 + 296));
  else
    v16 = -1;
  v1552 = v12;
  if (*(_DWORD *)(v11 + 52) == 7)
  {
    v17 = 0;
    LOBYTE(v18) = 0;
    goto LABEL_8;
  }
  *(_DWORD *)(v11 + 52) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_DWORD *)(v13 + 688) = 0;
  if (*(_DWORD *)(v13 + 424))
  {
    v17 = 0;
    LOBYTE(v18) = 0;
    LODWORD(v19) = 9;
    goto LABEL_2696;
  }
  v1554 = v15;
  v1476 = 0;
  v17 = 0;
  v1480 = 0;
  v1541 = v14;
  v1542 = 0;
  v18 = 0;
  v12 += 40 * *(int *)(v11 + 48);
  v1477 = (uint64_t *)(v11 + 384);
  v1479 = (char **)(v11 + 168);
  v1551 = v11;
  v1488 = v13;
LABEL_22:
  while (2)
  {
    if ((v1553 & 0x400) != 0)
      ++*((_QWORD *)v12 + 3);
    ++v17;
    v22 = *v12;
    switch(*v12)
    {
      case 0u:
        v147 = *((_DWORD *)v12 + 1);
        v148 = (const void *)*((_QWORD *)v12 + 2);
        if (v147)
        {
          v149 = *(_QWORD *)(v13 + 760);
          if (v149)
          {
            v150 = 0;
LABEL_162:
            v151 = *(_BYTE **)v149;
            for (i = (unsigned __int8 *)*((_QWORD *)v12 + 2); ; ++i)
            {
              v153 = *v151;
              v154 = *i;
              if ((_DWORD)v153 == (_DWORD)v154)
              {
                if (!*v151)
                {
                  if (v147 != 1 || *(int *)(v13 + 216) < 1)
                  {
                    if (*(_QWORD *)(v149 + 24))
                    {
                      v708 = 0;
                    }
                    else
                    {
                      v708 = *(_BYTE *)(v13 + 109) != 0;
                      if (v147 == 1 && *(_BYTE *)(v13 + 109))
                      {
                        v1061 = sub_1ACBF0BCC(v1551, 1, a6, (uint64_t)a7, a8, a9, a10, a11);
                        if ((_DWORD)v1061)
                        {
                          v1442 = v1061;
                          v11 = v1551;
                          goto LABEL_2738;
                        }
                        *(_BYTE *)(v13 + 101) = 1;
                        if (sub_1ACB68C50(v1551) == 5)
                        {
                          *(_DWORD *)(v1551 + 48) = -858993459 * ((unint64_t)(v12 - v1552) >> 3);
                          *(_BYTE *)(v13 + 101) = 0;
                          v1442 = 5;
                          *(_DWORD *)(v1551 + 52) = 5;
                          v11 = v1551;
                          goto LABEL_2738;
                        }
                        LODWORD(v19) = *(_DWORD *)(v1551 + 52);
                        if ((_DWORD)v19)
                        {
                          *(_BYTE *)(v13 + 101) = 0;
                          v11 = v1551;
                          goto LABEL_2696;
                        }
                        *(_BYTE *)(v13 + 109) = 0;
                        v708 = 1;
                        goto LABEL_2145;
                      }
                    }
                    v1531 = v18;
                    v150 = *(_DWORD *)(v13 + 788) + ~v150;
                    LODWORD(v709) = *(_DWORD *)(v13 + 40);
                    if (v147 == 2)
                    {
                      v710 = *(_DWORD *)(v13 + 44) & 1;
                      if ((int)v709 < 1)
                      {
                        LODWORD(v19) = v1542;
                        goto LABEL_2138;
                      }
                      v1521 = v708;
                      v1503 = v12;
                      v1511 = v17;
                      v711 = v1552;
                      v712 = 0;
                      v713 = 8;
                      while (1)
                      {
                        v714 = sub_1ACBF02F4(*(_QWORD *)(*(_QWORD *)(v13 + 32) + v713), 516, v710 ^ 1u);
                        if (v714)
                          break;
                        ++v712;
                        v709 = *(int *)(v13 + 40);
                        v713 += 32;
                        if (v712 >= v709)
                        {
                          LODWORD(v19) = 0;
                          v12 = v1503;
                          v17 = v1511;
                          goto LABEL_1670;
                        }
                      }
                      LODWORD(v19) = v714;
                      v11 = v1551;
LABEL_2657:
                      v12 = v1503;
                      v17 = v1511;
LABEL_2658:
                      LOBYTE(v18) = v1531;
                      goto LABEL_2696;
                    }
                    v1521 = v708;
                    v711 = v1552;
                    v710 = 0;
                    LODWORD(v19) = v1542;
LABEL_1670:
                    v1552 = v711;
                    if ((int)v709 < 1)
                      goto LABEL_1675;
                    v1517 = v17;
                    v1051 = 0;
                    v1052 = 8;
                    while (2)
                    {
                      v1053 = sub_1ACBAF3B4(*(_QWORD *)(*(_QWORD *)(v13 + 32) + v1052), v147, v150, *(double *)a2.i64);
                      if (v1053)
                      {
                        LODWORD(v19) = v1053;
                        v11 = v1551;
                        LOBYTE(v18) = v1531;
                        v17 = v1517;
                        goto LABEL_2696;
                      }
                      ++v1051;
                      v1052 += 32;
                      if (v1051 < *(int *)(v13 + 40))
                        continue;
                      break;
                    }
                    LODWORD(v19) = 0;
                    v17 = v1517;
LABEL_1675:
                    v708 = v1521;
LABEL_2138:
                    if (v710)
                    {
                      v1247 = v19;
                      for (j = *(_QWORD *)(v13 + 8); j; j = *(_QWORD *)(j + 16))
                        *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 1;
                      sub_1ACBC4F54(v13);
                      *(_DWORD *)(v13 + 44) |= 1u;
                      LODWORD(v19) = v1247;
                    }
                    v18 = v1531;
                    if ((_DWORD)v19)
                    {
LABEL_2562:
                      v11 = v1551;
                      goto LABEL_2696;
                    }
LABEL_2145:
                    while (1)
                    {
                      v1249 = *(_QWORD **)(v13 + 760);
                      if (v1249 == (_QWORD *)v149)
                        break;
                      *(_QWORD *)(v13 + 760) = v1249[3];
                      sub_1ACBE0F9C((_QWORD *)v13, v1249);
                      --*(_DWORD *)(v13 + 788);
                    }
                    if (v147 == 1)
                    {
                      *(_QWORD *)(v13 + 760) = *(_QWORD *)(v149 + 24);
                      sub_1ACBE0F9C((_QWORD *)v13, (_QWORD *)v149);
                      if (!v708)
                      {
                        --*(_DWORD *)(v13 + 788);
                        v11 = v1551;
                        goto LABEL_2154;
                      }
                    }
                    else
                    {
                      a2 = *(int64x2_t *)(v149 + 8);
                      *(int64x2_t *)(v13 + 800) = a2;
                    }
                    v1250 = v147 != 2 && v708;
                    v11 = v1551;
                    if (!v1250)
                    {
LABEL_2154:
                      v65 = sub_1ACBF2114(v13, v147, v150);
                      if (v65)
                        goto LABEL_2548;
                    }
LABEL_2158:
                    if (*(_BYTE *)(v11 + 267) == 3)
                    {
                      v1442 = 101;
                      goto LABEL_2738;
                    }
                    v1542 = 0;
                    v12 += 40;
                    goto LABEL_22;
                  }
                  v1444 = "cannot release savepoint - SQL statements in progress";
LABEL_2650:
                  v11 = v1551;
                  sub_1ACBF1C7C((uint64_t *)v1551, v1444, a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
                  LODWORD(v19) = 5;
                  goto LABEL_2696;
                }
              }
              else if (byte_1ACCB6333[v153] != byte_1ACCB6333[v154])
              {
                ++v150;
                v149 = *(_QWORD *)(v149 + 24);
                if (!v149)
                  break;
                goto LABEL_162;
              }
              ++v151;
            }
          }
          v1471 = *((_QWORD *)v12 + 2);
          v1434 = "no such savepoint: %s";
LABEL_2623:
          v11 = v1551;
          sub_1ACBF1C7C((uint64_t *)v1551, v1434, a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
          LODWORD(v19) = 1;
          goto LABEL_2696;
        }
        if (*(int *)(v13 + 216) >= 1)
        {
          v1444 = "cannot open savepoint - SQL statements in progress";
          goto LABEL_2650;
        }
        v11 = v1551;
        if (v148)
          v774 = strlen(*((const char **)v12 + 2)) & 0x3FFFFFFF;
        else
          v774 = 0;
        v65 = sub_1ACBF2114(v13, 0, *(_DWORD *)(v13 + 788) + *(_DWORD *)(v13 + 792));
        if (!v65)
        {
          v1145 = sub_1ACBE1124(v13, (v774 + 33));
          if (v1145)
          {
            v1146 = v1145;
            v1147 = (void *)(v1145 + 32);
            *(_QWORD *)v1146 = v1147;
            memcpy(v1147, v148, (v774 + 1));
            if (*(_BYTE *)(v13 + 101))
            {
              *(_BYTE *)(v13 + 101) = 0;
              *(_BYTE *)(v13 + 109) = 1;
            }
            else
            {
              ++*(_DWORD *)(v13 + 788);
            }
            *(_QWORD *)(v1146 + 24) = *(_QWORD *)(v13 + 760);
            *(_QWORD *)(v13 + 760) = v1146;
            a2 = *(int64x2_t *)(v13 + 800);
            *(int64x2_t *)(v1146 + 8) = a2;
          }
          goto LABEL_2158;
        }
        goto LABEL_2548;
      case 1u:
        v1437 = *((_DWORD *)v12 + 1);
        v1436 = *((_DWORD *)v12 + 2);
        if (v1437 == *(unsigned __int8 *)(v13 + 101))
        {
          if (v1436)
            v1438 = "cannot rollback - no transaction is active";
          else
            v1438 = "cannot commit - no transaction is active";
          if (v1437)
            v1439 = v1438;
          else
            v1439 = "cannot start a transaction within a transaction";
          v1440 = 1;
          v11 = v1551;
          goto LABEL_2593;
        }
        v11 = v1551;
        if (v1436)
        {
          sub_1ACBB6E64(v13, 516, *(double *)a2.i64);
          v1445 = 1;
        }
        else
        {
          if (v1437 && *(int *)(v13 + 216) > 0)
          {
            v1440 = 5;
            v1439 = "cannot commit transaction - SQL statements in progress";
LABEL_2593:
            v1441 = (uint64_t *)v11;
            goto LABEL_2621;
          }
          v1447 = sub_1ACBF0BCC(v1551, 1, a6, (uint64_t)a7, a8, a9, a10, a11);
          if ((_DWORD)v1447)
          {
            v1442 = v1447;
            goto LABEL_2738;
          }
          v1445 = v1437;
        }
        *(_BYTE *)(v13 + 101) = v1445;
        if (sub_1ACB68C50(v1551) == 5)
        {
          *(_DWORD *)(v1551 + 48) = -858993459 * ((unint64_t)(v12 - v1552) >> 3);
          *(_BYTE *)(v13 + 101) = 1 - v1437;
          goto LABEL_2618;
        }
        sub_1ACBF0B84((_QWORD *)v13);
        goto LABEL_2666;
      case 2u:
        LODWORD(__buf[0]) = 0;
        v155 = *((_DWORD *)v12 + 2);
        if (v155)
        {
          v156 = *(_QWORD *)(v13 + 48);
          if ((v156 & 0x200100000) != 0)
          {
            if ((v156 & 0x100000) != 0)
              LODWORD(v19) = 8;
            else
              LODWORD(v19) = 11;
            v11 = v1551;
            goto LABEL_2696;
          }
        }
        v157 = *(_QWORD *)(v13 + 32);
        v158 = *((int *)v12 + 1);
        v159 = v157 + 32 * v158;
        v160 = *(_QWORD *)(v159 + 8);
        v11 = v1551;
        if (!v160)
          goto LABEL_183;
        v161 = sub_1ACB69520(*(_QWORD *)(v159 + 8), v155, __buf);
        if ((_DWORD)v161)
        {
          LODWORD(v19) = v161;
          if (v161 == 5)
          {
            *(_DWORD *)(v1551 + 48) = -858993459 * ((unint64_t)(v12 - v1552) >> 3);
            *(_DWORD *)(v1551 + 52) = v161;
            v1442 = v161;
            goto LABEL_2738;
          }
        }
        else
        {
          if ((*(_WORD *)(v1551 + 268) & 0x20) != 0
            && *((_DWORD *)v12 + 2)
            && (!*(_BYTE *)(v13 + 101) || *(int *)(v13 + 212) >= 2))
          {
            v162 = *(_DWORD *)(v1551 + 64);
            if (!v162)
            {
              v163 = *(_DWORD *)(v13 + 792) + 1;
              *(_DWORD *)(v13 + 792) = v163;
              v162 = *(_DWORD *)(v13 + 788) + v163;
              *(_DWORD *)(v1551 + 64) = v162;
            }
            v164 = sub_1ACBF2114(v13, 0, v162 - 1);
            if (!v164)
              v164 = sub_1ACBF441C(v160, *(_DWORD *)(v1551 + 64));
            v1542 = v164;
            a2 = *(int64x2_t *)(v13 + 800);
            *(int64x2_t *)(v1551 + 88) = a2;
LABEL_183:
            LODWORD(v19) = v1542;
            if (v1542)
              goto LABEL_2696;
          }
          if (!*((_WORD *)v12 + 1)
            || LODWORD(__buf[0]) == *((_DWORD *)v12 + 3)
            && *(_DWORD *)(*(_QWORD *)(v157 + 32 * v158 + 24) + 4) == *((_DWORD *)v12 + 4))
          {
            v1542 = 0;
            v12 += 40;
            continue;
          }
          if (*v1479)
            sub_1ACBE0F9C((_QWORD *)v13, *v1479);
          *v1479 = (char *)sub_1ACB8CB7C(v13, "database schema has changed");
          v1435 = *((int *)v12 + 1);
          if (**(_DWORD **)(*(_QWORD *)(v13 + 32) + 32 * v1435 + 24) != LODWORD(__buf[0]))
            sub_1ACBF44C4(v13, v1435);
          *(_WORD *)(v1551 + 268) = *(_WORD *)(v1551 + 268) & 0xFFEC | 1;
          LODWORD(v19) = 17;
        }
        goto LABEL_2696;
      case 3u:
        DWORD2(__buf[0]) = -1;
        a2.i64[0] = 0xFFFFFFFF00000000;
        *(_QWORD *)&__buf[0] = 0xFFFFFFFF00000000;
        v165 = *(_DWORD *)(v13 + 40);
        if (v165 < 1)
        {
          v171 = 0;
          v167 = 0;
          v173 = 1;
        }
        else
        {
          v166 = 0;
          v167 = 0;
          v169 = *((unsigned int *)v12 + 1);
          v168 = *((_DWORD *)v12 + 2);
          v170 = 8;
          a7 = (char *)__buf + 8;
          a6 = (uint64_t)__buf + 4;
          do
          {
            if ((_DWORD)v169 == 12 || v169 == v166)
            {
              v172 = sub_1ACC4EB48(*(_QWORD *)(*(_QWORD *)(v13 + 32) + v170), v168, (_DWORD *)a6, a7);
              a6 = 0;
              a7 = 0;
              if (v172 == 5)
                v171 = 0;
              else
                v171 = v172;
              if (v172 == 5)
                v167 = 1;
              v165 = *(_DWORD *)(v13 + 40);
            }
            else
            {
              v171 = 0;
            }
            ++v166;
            v173 = v171 == 0;
            if (v166 >= v165)
              break;
            v170 += 32;
          }
          while (!v171);
        }
        if (v173 && v167 != 0)
          v775 = 5;
        else
          v775 = v171;
        if (v775 == 5)
        {
          v776 = 1;
          LODWORD(__buf[0]) = 1;
        }
        else
        {
          v11 = v1551;
          if (v775)
          {
            LODWORD(v19) = v171;
            goto LABEL_2696;
          }
          v776 = __buf[0];
        }
        v777 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        if ((*(_WORD *)(v777 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v1554 + ((uint64_t)*((int *)v12 + 3) << 6), v776);
        }
        else
        {
          *(_QWORD *)v777 = v776;
          *(_WORD *)(v777 + 20) = 4;
        }
        if ((*(_WORD *)(v777 + 84) & 0x9000) != 0)
        {
          sub_1ACBF327C(v777 + 64, SDWORD1(__buf[0]));
        }
        else
        {
          *(_QWORD *)(v777 + 64) = SDWORD1(__buf[0]);
          *(_WORD *)(v777 + 84) = 4;
        }
        if ((*(_WORD *)(v777 + 148) & 0x9000) != 0)
        {
          sub_1ACBF327C(v777 + 128, SDWORD2(__buf[0]));
        }
        else
        {
          *(_QWORD *)(v777 + 128) = SDWORD2(__buf[0]);
          *(_WORD *)(v777 + 148) = 4;
        }
        v1542 = 0;
        v12 += 40;
        continue;
      case 4u:
        v174 = v17;
        v1531 = v18;
        v175 = *(_QWORD *)(v1551 + 104);
        v176 = *((int *)v12 + 2);
        v177 = v175 + (v176 << 6);
        v179 = *(_WORD *)(v177 + 20);
        v178 = (_WORD *)(v177 + 20);
        v1511 = v174;
        if ((v179 & 0x9000) != 0)
          sub_1ACBF7980(v175 + (v176 << 6));
        else
          *v178 = 4;
        v778 = *((_DWORD *)v12 + 3);
        v1503 = v12;
        v779 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8);
        v780 = *(uint64_t **)(v779 + 8);
        v781 = *v780;
        v782 = *(unsigned __int8 *)(*v780 + 9);
        if (v778 == -1)
          v783 = *(unsigned __int8 *)(*v780 + 9);
        else
          v783 = v778;
        v784 = v1542;
        if (*(unsigned __int8 *)(v781 + 21) > 2u || **(_QWORD **)(v781 + 80) && *(uint64_t *)(v781 + 96) >= 1)
          v783 = v782;
        if (*(_BYTE *)(v781 + 19))
        {
          v785 = (const char *)&unk_1ACCB6CCD;
        }
        else
        {
          if (*(_UNKNOWN **)v781 == &unk_1ECD3BD38)
            v785 = (const char *)&unk_1ACCB6CCD;
          else
            v785 = *(const char **)(v781 + 216);
          v784 = v1542;
        }
        if (v783 != 5)
          goto LABEL_1876;
        if (!v785)
          goto LABEL_1877;
        if ((strlen(v785) & 0x3FFFFFFF) == 0)
          goto LABEL_2482;
        v784 = v1542;
        if (*(_BYTE *)(v781 + 17))
          goto LABEL_1877;
        if (*(_BYTE *)(v781 + 8))
        {
LABEL_1876:
          if (v783 == v782)
          {
LABEL_1877:
            v783 = v782;
            goto LABEL_1878;
          }
          v1138 = v782 == 5;
          if (v782 != 5 && v783 != 5)
          {
LABEL_1878:
            v617 = v784;
            if (v784)
              v1133 = v782;
            else
              v1133 = v783;
            v1134 = sub_1ACBF6C0C(v781, v1133);
            *v178 = 8706;
            if (v1134 == 6)
            {
              v1135 = 0;
              *(_QWORD *)(v175 + (v176 << 6) + 8) = 0;
            }
            else
            {
              v1136 = off_1E5C73A50[v1134];
              *(_QWORD *)(v175 + (v176 << 6) + 8) = v1136;
              v1135 = strlen(v1136) & 0x3FFFFFFF;
            }
            v11 = v1551;
            v12 = v1503;
            v17 = v1511;
            v1137 = v175 + (v176 << 6);
            *(_DWORD *)(v1137 + 16) = v1135;
            *(_BYTE *)(v1137 + 22) = 1;
            if (v1541 != 1)
              sub_1ACBB0FEC((int *)(v175 + (v176 << 6)), v1541);
            v18 = v1531;
            if (!v617)
            {
              v1542 = 0;
              v12 = v1503 + 40;
              continue;
            }
LABEL_2608:
            LODWORD(v19) = v617;
            goto LABEL_2696;
          }
          if (!*(_BYTE *)(v13 + 101))
            goto LABEL_2654;
        }
        else
        {
          v1388 = **(_QWORD **)(v781 + 72);
          if (*(int *)v1388 < 2)
          {
LABEL_2482:
            v783 = v782;
            v784 = v1542;
            goto LABEL_1878;
          }
          if (*(_QWORD *)(v1388 + 104))
            v1389 = v782 == 5;
          else
            v1389 = 1;
          v784 = v1542;
          if (v1389)
            goto LABEL_1877;
          v1138 = 0;
          if (!*(_BYTE *)(v13 + 101))
            goto LABEL_2654;
        }
        if (*(int *)(v13 + 212) < 2)
        {
          if (v1138)
          {
            v1140 = sub_1ACBF6994(v781, v13);
            if (v1140)
            {
LABEL_2216:
              v784 = v1140;
              goto LABEL_1878;
            }
            sub_1ACBF6C0C(v781, v783);
          }
          else
          {
            if (v782 == 4)
              sub_1ACBF6C0C(v781, 2);
            v784 = v1542;
            if (v1542)
              goto LABEL_1878;
          }
          if (v783 == 5)
            v1274 = 2;
          else
            v1274 = 1;
          v1140 = sub_1ACBC5028(v779, v1274);
          goto LABEL_2216;
        }
LABEL_2654:
        v1446 = "out of";
        if (v783 == 5)
          v1446 = "into";
        v11 = v1551;
        sub_1ACBF1C7C((uint64_t *)v1551, "cannot change %s wal mode from within a transaction", a6, (uint64_t)a7, a8, a9, a10, a11, (char)v1446);
        LODWORD(v19) = 1;
        goto LABEL_2657;
      case 5u:
        v11 = v1551;
        *(_DWORD *)(v1551 + 256) = 1;
        v180 = *((int *)v12 + 2);
        if ((_DWORD)v180)
          v181 = v1554 + (v180 << 6);
        else
          v181 = 0;
        v65 = sub_1ACBF6DD4(v1479, v13, *((_DWORD *)v12 + 1), v181);
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        v12 += 40;
        continue;
      case 6u:
        v182 = *((int *)v12 + 3);
        v183 = v1554 + (v182 << 6);
        v186 = *(_QWORD *)(v183 + 64);
        v185 = v183 + 64;
        v184 = v186;
        v187 = *(int64x2_t **)(v1551 + 112);
        v188 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v189 = *(uint64_t ***)(v188 + 40);
        v190 = *v189;
        v191 = **v189;
        v192 = *(unsigned int *)(v1554 + (v182 << 6));
        if ((int)v186 < 1)
          goto LABEL_1266;
        if (v184 < 4uLL)
        {
          v193 = 0;
LABEL_1264:
          v872 = &v187->i64[v193];
          v873 = v184 - v193;
          v874 = v1554 + (v193 << 6) + (v182 << 6) + 128;
          do
          {
            *v872++ = v874;
            v874 += 64;
            --v873;
          }
          while (v873);
          goto LABEL_1266;
        }
        v193 = v184 & 0xFFFFFFFC;
        a2 = (int64x2_t)xmmword_1ACCBDC40;
        v869 = v187 + 1;
        v870 = v193;
        do
        {
          v871 = vaddq_s64(vshlq_n_s64(a2, 6uLL), vdupq_n_s64(v185));
          v869[-1] = vaddq_s64(v871, vdupq_n_s64(0x40uLL));
          *v869 = vaddq_s64(v871, vdupq_n_s64(0xC0uLL));
          a2 = vaddq_s64(a2, vdupq_n_s64(4uLL));
          v869 += 2;
          v870 -= 4;
        }
        while (v870);
        if ((v184 & 3) != 0)
          goto LABEL_1264;
LABEL_1266:
        v875 = (*(uint64_t (**)(uint64_t **, uint64_t, _QWORD, int64x2_t))(v191 + 64))(v189, v192, *((_QWORD *)v12 + 2), a2);
        sub_1ACBF1EB0(v1551, (uint64_t)v190);
        if (v875)
        {
          LODWORD(v19) = v875;
          v11 = v1551;
          goto LABEL_2696;
        }
        v876 = (*(uint64_t (**)(uint64_t **))(v191 + 80))(v189);
        v1542 = 0;
        *(_BYTE *)(v188 + 2) = 0;
        if (!v876)
          goto LABEL_21;
        goto LABEL_2381;
      case 7u:
        *(_QWORD *)&__buf[0] = 0;
        if (*(_BYTE *)(v13 + 103))
          goto LABEL_2549;
        v194 = *(uint64_t **)(*((_QWORD *)v12 + 2) + 16);
        v11 = v1551;
        if (!v194)
          goto LABEL_2558;
        v195 = *v194;
        if (!*v194)
          goto LABEL_2558;
        v196 = *(uint64_t (**)(uint64_t *))(v195 + 104);
        if (!v196)
          goto LABEL_21;
        v197 = *((unsigned int *)v12 + 2);
        v198 = *(_BYTE *)(v13 + 108);
        v199 = *(int64x2_t **)(v1551 + 112);
        if ((int)v197 < 1)
          goto LABEL_1782;
        v200 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        if (v197 >= 4)
        {
          v201 = v197 & 0x7FFFFFFC;
          v202 = v200 + ((unint64_t)(v197 & 0xFFFFFFFC) << 6);
          v1090 = v199 + 1;
          v1091 = v197 & 0xFFFFFFFC;
          do
          {
            v1092 = vdupq_n_s64(v200);
            v1090[-1] = vaddq_s64(v1092, (int64x2_t)xmmword_1ACCBDCE0);
            *v1090 = vaddq_s64(v1092, (int64x2_t)xmmword_1ACCBDCF0);
            v200 += 256;
            v1090 += 2;
            v1091 -= 4;
          }
          while (v1091);
          if (v201 == v197)
          {
LABEL_1781:
            v196 = *(uint64_t (**)(uint64_t *))(v195 + 104);
LABEL_1782:
            *(_BYTE *)(v13 + 108) = v12[2];
            v1095 = v196(v194);
            *(_BYTE *)(v13 + 108) = v198;
            sub_1ACBF1EB0(v1551, (uint64_t)v194);
            if (!v1095)
            {
              if (*((_DWORD *)v12 + 1))
                *(_QWORD *)(v13 + 56) = *(_QWORD *)&__buf[0];
              v1542 = 0;
              ++*(_QWORD *)(v1551 + 56);
              v12 += 40;
              continue;
            }
            LODWORD(v19) = v1095;
            if (v1095 != 19 || !*(_BYTE *)(*((_QWORD *)v12 + 2) + 28))
            {
              ++*(_QWORD *)(v1551 + 56);
              goto LABEL_2696;
            }
            v1096 = *((unsigned __int16 *)v12 + 1);
            if (v1096 == 4)
            {
              v1542 = 0;
              v12 += 40;
              continue;
            }
            if (v1096 == 5)
              *(_BYTE *)(v1551 + 264) = 2;
            else
              *(_BYTE *)(v1551 + 264) = v1096;
            goto LABEL_2696;
          }
        }
        else
        {
          v201 = 0;
          v202 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        }
        v1093 = (unint64_t *)v199 + v201;
        v1094 = v197 - v201;
        do
        {
          *v1093++ = v202;
          v202 += 64;
          --v1094;
        }
        while (v1094);
        goto LABEL_1781;
      case 8u:
      case 0xB5u:
        if ((*(_BYTE *)(v13 + 110) & 0x41) != 0 && *(unsigned __int8 *)(v1551 + 265) != 254)
        {
          a7 = (char *)*((_QWORD *)v12 + 2);
          if (a7 || (a7 = *(char **)(v1551 + 320)) != 0)
          {
            if ((*(_BYTE *)(v13 + 110) & 0x40) != 0)
            {
              v999 = sub_1ACBC8B98((_QWORD *)v1551, a7);
              (*(void (**)(_QWORD, _QWORD *))(v13 + 240))(*(_QWORD *)(v13 + 248), v999);
              sqlite3_free(v999);
            }
            else if (*(int *)(v13 + 220) < 2)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 240))(1, *(_QWORD *)(v13 + 248), v1551);
            }
            else
            {
              v77 = sub_1ACB6DDD0(v13, "-- %s", a6, (uint64_t)a7, a8, a9, a10, a11, (char)a7);
              (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v13 + 240))(1, *(_QWORD *)(v13 + 248), v1551, v77);
              if (v77)
                sub_1ACBE0F9C((_QWORD *)v13, v77);
            }
          }
        }
        v1148 = *((_DWORD *)v12 + 1);
        if (v1148 < dword_1ECD3B2F8)
          goto LABEL_1921;
        if (*v12 == 181)
          goto LABEL_21;
        v1149 = *(unsigned int *)(v1551 + 144);
        if ((int)v1149 >= 2)
        {
          v1150 = (_DWORD *)(*(_QWORD *)(v1551 + 136) + 44);
          v1151 = v1149 - 1;
          do
          {
            if (*((_BYTE *)v1150 - 4) == 15)
              *v1150 = 0;
            v1150 += 10;
            --v1151;
          }
          while (v1151);
        }
        v1148 = 0;
        *((_DWORD *)v12 + 1) = 0;
LABEL_1921:
        *((_DWORD *)v12 + 1) = v1148 + 1;
        ++*(_DWORD *)(v1551 + 304);
        ++*(_DWORD *)(v1551 + 224);
        goto LABEL_2381;
      case 9u:
        goto LABEL_1702;
      case 0xAu:
        v203 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v203 + 20) = 4;
        *(_QWORD *)v203 = (int)(-858993459 * ((unint64_t)(v12 - v1552) >> 3));
        goto LABEL_1702;
      case 0xBu:
        v204 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_QWORD *)v204 = *((int *)v12 + 3) - 1;
        *(_WORD *)(v204 + 20) = 4;
        if (!*((_DWORD *)v12 + 2))
          goto LABEL_21;
        goto LABEL_2381;
      case 0xCu:
        v205 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v205 + 20) = 4;
        v206 = *(_DWORD *)v205;
        *(_QWORD *)v205 = (int)(-858993459 * ((unint64_t)(v12 - v1552) >> 3));
        v12 = &v1552[40 * v206 + 40];
        continue;
      case 0xDu:
        v207 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v210 = *(_WORD *)(v207 + 20);
        v209 = (__int16 *)(v207 + 20);
        v208 = v210;
        if ((v210 & 4) != 0
          || (sub_1ACB9A00C(v1554 + ((uint64_t)*((int *)v12 + 1) << 6), 67, v1541), v208 = *v209, (*v209 & 4) != 0))
        {
          *v209 = v208 & 0xF240 | 4;
          v12 += 40;
          continue;
        }
        v11 = v1551;
        if (*((_DWORD *)v12 + 2))
          goto LABEL_2381;
        LODWORD(v19) = 20;
        goto LABEL_2696;
      case 0xEu:
        if (v1480 < 0)
        {
          v211 = *((_DWORD *)v12 + 1);
          goto LABEL_2382;
        }
        if (v1480)
        {
          v211 = *((_DWORD *)v12 + 3);
          goto LABEL_2382;
        }
LABEL_325:
        v1480 = 0;
        goto LABEL_2381;
      case 0xFu:
        v212 = *(_QWORD *)(v1551 + 352);
        v213 = *(_QWORD *)(v1551 + 136);
        if (v212)
        {
          v214 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v213] >> 3);
          v215 = *(_QWORD *)(v212 + 40);
          v216 = v214 >> 3;
          v217 = *(unsigned __int8 *)(v215 + v216);
          v218 = 1 << (v214 & 7);
          if ((v218 & v217) != 0)
            goto LABEL_2381;
          *(_BYTE *)(v215 + v216) = v217 | v218;
          *((_DWORD *)v12 + 1) = *(_DWORD *)(*(_QWORD *)(v1551 + 136) + 4);
          v12 += 40;
        }
        else
        {
          v786 = *(_DWORD *)(v213 + 4);
          if (v786 == *((_DWORD *)v12 + 1))
            goto LABEL_2381;
          *((_DWORD *)v12 + 1) = v786;
          v12 += 40;
        }
        continue;
      case 0x10u:
        v219 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v220 = *(_WORD *)(v219 + 20);
        if ((v220 & 0x24) != 0)
        {
          v221 = *(_QWORD *)v219 == 0;
        }
        else
        {
          if ((v220 & 1) != 0)
            goto LABEL_1197;
          if ((v220 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v219;
          }
          else if ((v220 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_1ACBF2F88(v219);
          }
          else
          {
            a2.i64[0] = 0;
          }
          v221 = *(double *)a2.i64 == 0.0;
        }
        if (!v221)
          goto LABEL_2381;
        goto LABEL_21;
      case 0x11u:
        v222 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v223 = *(_WORD *)(v222 + 20);
        if ((v223 & 0x24) != 0)
        {
          if (*(_QWORD *)v222)
            goto LABEL_21;
          goto LABEL_2381;
        }
        if ((v223 & 1) != 0)
        {
LABEL_1197:
          if (*((_DWORD *)v12 + 3))
            goto LABEL_2381;
          goto LABEL_21;
        }
        if ((v223 & 8) != 0)
        {
          a2.i64[0] = *(_QWORD *)v222;
        }
        else
        {
          if ((v223 & 0x12) == 0)
            goto LABEL_2381;
          *(double *)a2.i64 = sub_1ACBF2F88(v222);
        }
        if (*(double *)a2.i64 != 0.0)
          goto LABEL_21;
        goto LABEL_2381;
      case 0x12u:
        v224 = *((unsigned int *)v12 + 1);
        if ((v224 & 0x80000000) != 0)
        {
          if (v1554)
          {
            LOBYTE(v787) = byte_1ACCB6445[*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 3) << 6) + 20) & 0x3F];
          }
          else
          {
            sub_1ACBBE20C(97202);
            LOBYTE(v787) = 0;
          }
        }
        else
        {
          v225 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v224);
          v226 = *((int *)v12 + 3);
          if ((int)v226 < *(unsigned __int16 *)(v225 + 66))
          {
            v227 = *(unsigned int *)(v225 + 4 * v226 + 112);
            if (v227 < 0xC)
            {
              LOWORD(v227) = byte_1ACCB6D4F[v227];
            }
            else if ((v227 & 1) != 0)
            {
              LOWORD(v227) = 4;
            }
            else
            {
              LOWORD(v227) = 8;
            }
LABEL_1867:
            if (((unsigned __int16)v227 & *((_WORD *)v12 + 1)) == 0)
              goto LABEL_21;
            goto LABEL_2381;
          }
          v787 = *((_DWORD *)v12 + 4);
        }
        LODWORD(v227) = 1 << (v787 - 1);
        goto LABEL_1867;
      case 0x13u:
        v228 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        v229 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v229 + 20) & 1) == 0)
        {
          v230 = !sub_1ACBF3E30(v229, 0);
          v231 = (_WORD *)(v228 + 20);
          if ((*(_WORD *)(v228 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v228, v230);
            v12 += 40;
            continue;
          }
          *(_QWORD *)v228 = v230;
          goto LABEL_2390;
        }
        v129 = (_WORD *)(v228 + 20);
        if ((*(_WORD *)(v228 + 20) & 0x9000) == 0)
          goto LABEL_929;
        sub_1ACBF2A54((int *)v228);
        v12 += 40;
        continue;
      case 0x14u:
        v232 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (!v232 || !*(_BYTE *)(v232 + 2))
          goto LABEL_21;
        v233 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        v235 = *(_WORD *)(v233 + 20);
        v234 = (_WORD *)(v233 + 20);
        if ((v235 & 0x9000) != 0)
          sub_1ACBF2A54((int *)(v1554 + ((uint64_t)*((int *)v12 + 3) << 6)));
        else
          *v234 = 1;
        goto LABEL_2381;
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
        LODWORD(v1558) = 0;
        a2 = 0uLL;
        memset(__buf, 0, 40);
        v11 = v1551;
        v49 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        *(_WORD *)(v49 + 2) = 0;
        *(_DWORD *)(v49 + 24) = 0;
        if (*(_BYTE *)(v49 + 4))
        {
          v1530 = v18;
          v50 = *((int *)v12 + 3);
          v51 = v1554 + (v50 << 6);
          v52 = (__int16 *)(v51 + 20);
          v53 = *(_WORD *)(v51 + 20);
          LOBYTE(v54) = v53;
          if ((v53 & 0x2E) == 2)
          {
            sub_1ACBCA9CC(v1554 + (v50 << 6), 0);
            v54 = *v52;
          }
          if ((v54 & 0x24) != 0)
          {
            v55 = *(_QWORD *)v51;
          }
          else if ((v54 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v51;
            v749 = 0x7FFFFFFFFFFFFFFFLL;
            if (*(double *)v51 <= 9.22337204e18)
              v749 = (uint64_t)*(double *)v51;
            if (*(double *)a2.i64 >= -9.22337204e18)
              v55 = v749;
            else
              v55 = 0x8000000000000000;
          }
          else if ((v54 & 0x12) != 0 && *(_QWORD *)(v1554 + (v50 << 6) + 8))
          {
            v55 = sub_1ACBF2FC0(v51);
            v54 = *v52;
          }
          else
          {
            v55 = 0;
          }
          *v52 = v53;
          if ((v54 & 0x24) != 0)
          {
            v18 = v1530;
            v11 = v1551;
            goto LABEL_1338;
          }
          v18 = v1530;
          v11 = v1551;
          if ((v54 & 8) == 0)
          {
            if (v22 > 0x16 || (v54 & 1) != 0)
              goto LABEL_2381;
            v906 = *(_BYTE **)(v49 + 40);
            if (!*v906 && (v906[1] & 8) != 0)
            {
LABEL_1564:
              v1542 = 0;
              v12 += 40;
              continue;
            }
            LODWORD(v19) = sub_1ACBF8BC8((uint64_t)v906, &v1558);
            if ((_DWORD)v19)
              goto LABEL_2696;
            v140 = 0;
            v141 = v1558;
            goto LABEL_1560;
          }
          v907 = *(double *)v51;
          if (*(double *)v51 < -9.22337204e18)
            goto LABEL_1360;
          if (v907 >= 9.22337204e18 || v55 < (uint64_t)v907)
            goto LABEL_1667;
          if (v55 <= (uint64_t)v907)
          {
            if (v907 > (double)v55)
            {
LABEL_1667:
              v1050 = 1;
LABEL_1668:
              LODWORD(v22) = (v22 & v1050) + v22;
LABEL_1338:
              v65 = sub_1ACBF4EEC(*(_QWORD *)(v49 + 40), v55, 0, (int *)&v1558);
              v140 = 0;
              *(_QWORD *)(v49 + 72) = v55;
              if (v65)
                goto LABEL_2548;
              goto LABEL_1339;
            }
            if (v907 >= (double)v55)
            {
              v1050 = 0;
              goto LABEL_1668;
            }
          }
LABEL_1360:
          LODWORD(v22) = v22 + (v22 & 1) - 1;
          goto LABEL_1338;
        }
        v135 = *(_QWORD *)(v49 + 40);
        v136 = *(_QWORD *)(v49 + 48);
        v137 = *(unsigned __int8 *)(v135 + 3);
        WORD6(__buf[1]) = *((_DWORD *)v12 + 4);
        if ((v22 & 1) != 0)
          v138 = 1;
        else
          v138 = -1;
        BYTE14(__buf[1]) = v138;
        v139 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        *(_QWORD *)&__buf[0] = v136;
        *((_QWORD *)&__buf[0] + 1) = v139;
        BYTE2(__buf[2]) = 0;
        v65 = sub_1ACBF514C(v135, (uint64_t *)__buf, (int *)&v1558);
        if (!v65)
        {
          v140 = (v137 >> 1) & 1;
          if ((v137 & 2) != 0 && !BYTE2(__buf[2]))
          {
            v140 = 1;
            v141 = v1558;
            goto LABEL_1560;
          }
LABEL_1339:
          if (v22 >= 0x17)
          {
            if ((v1558 & 0x80000000) == 0 && ((_DWORD)v22 != 24 || (_DWORD)v1558)
              || (v904 = sub_1ACB8B8D4(*(_QWORD *)(v49 + 40))) == 0)
            {
LABEL_1562:
              if (v140)
                v12 += 40;
              goto LABEL_1564;
            }
            goto LABEL_1350;
          }
          if ((int)v1558 > 0 || (_DWORD)v22 == 21 && !(_DWORD)v1558)
          {
            v905 = *(_QWORD *)(v49 + 40);
            *(_BYTE *)(v905 + 1) &= 0xF1u;
            *(_WORD *)(v905 + 70) = 0;
            if (!*(_BYTE *)v905 && *(_WORD *)(v905 + 86) && *(_BYTE *)(*(_QWORD *)(v905 + 136) + 8))
            {
              --*(_WORD *)(v905 + 86);
              goto LABEL_1562;
            }
            v904 = sub_1ACBF9260((unsigned __int8 *)v905);
            if (!v904)
              goto LABEL_1562;
LABEL_1350:
            LODWORD(v19) = v904;
            if (v904 != 101)
              goto LABEL_2696;
            goto LABEL_1561;
          }
          v141 = **(_BYTE **)(v49 + 40) != 0;
LABEL_1560:
          if (v141)
            goto LABEL_1561;
          goto LABEL_1562;
        }
        goto LABEL_2548;
      case 0x19u:
        v236 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (v236 && !*(_BYTE *)(v236 + 2))
          goto LABEL_21;
        goto LABEL_1702;
      case 0x1Au:
        if (*((_DWORD *)v12 + 4) > (int)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120)
                                                                         + 8 * *((int *)v12 + 1))
                                                             + 6))
          goto LABEL_255;
        goto LABEL_21;
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
LABEL_255:
        memset(__buf, 0, 40);
        v11 = v1551;
        v237 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v238 = *((_DWORD *)v12 + 4);
        v239 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        *((_QWORD *)&__buf[0] + 1) = v239;
        WORD6(__buf[1]) = v238;
        if ((_WORD)v238)
        {
          v240 = *(_QWORD *)(v237 + 40);
          *(_QWORD *)&__buf[0] = *(_QWORD *)(v237 + 48);
          BYTE14(__buf[1]) = 0;
          LODWORD(v19) = sub_1ACBF514C(v240, (uint64_t *)__buf, (int *)(v237 + 28));
          if ((_DWORD)v19)
            goto LABEL_2696;
        }
        else
        {
          if ((*(_WORD *)(v239 + 20) & 0x400) != 0 && sub_1ACBA6920((int *)v239))
            goto LABEL_8;
          v241 = *(_QWORD *)(v237 + 48);
          v242 = (unint64_t)*(unsigned __int16 *)(v241 + 6) << 6;
          v243 = *(_QWORD *)(v241 + 16);
          v244 = v243 ? sub_1ACBE1124(v243, v242 + 104) : sub_1ACB5D828(v242 + 104);
          v742 = v244;
          if (!v244)
            goto LABEL_8;
          *(_QWORD *)v244 = v241;
          *(_QWORD *)(v244 + 8) = v244 + 40;
          *(_WORD *)(v244 + 28) = *(_WORD *)(v241 + 6) + 1;
          sub_1ACB9E49C(*(_QWORD *)(v237 + 48), *(_DWORD *)(*((_QWORD *)&__buf[0] + 1) + 16), *(char **)(*((_QWORD *)&__buf[0] + 1) + 8), v244);
          *(_BYTE *)(v742 + 30) = 0;
          v743 = sub_1ACBF514C(*(_QWORD *)(v237 + 40), (uint64_t *)v742, (int *)(v237 + 28));
          sub_1ACBE0F9C((_QWORD *)v13, (_QWORD *)v742);
          LODWORD(v19) = v743;
          if (v743)
            goto LABEL_2696;
        }
        v744 = *(_DWORD *)(v237 + 28);
        *(_BYTE *)(v237 + 2) = v744 != 0;
        *(_BYTE *)(v237 + 3) = 0;
        *(_DWORD *)(v237 + 24) = 0;
        v745 = *v12;
        if (v745 == 29)
        {
          if (!v744)
            goto LABEL_1561;
        }
        else
        {
          if (v744)
            goto LABEL_1561;
          if (v745 == 26)
          {
            *(_WORD *)(v237 + 6) = *((_DWORD *)v12 + 4);
          }
          else if (v745 == 27)
          {
            v746 = WORD6(__buf[1]);
            if (WORD6(__buf[1]))
            {
              v747 = (__int16 *)(*((_QWORD *)&__buf[0] + 1) + 20);
              do
              {
                v748 = *v747;
                v747 += 32;
                if ((v748 & 1) != 0)
                  goto LABEL_1561;
              }
              while (--v746);
            }
          }
        }
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x1Eu:
        v1555 = 0;
        v245 = *((int *)v12 + 3);
        v246 = v1554 + (v245 << 6);
        if ((*(_WORD *)(v246 + 20) & 0x24) != 0)
          goto LABEL_266;
        memset(&__buf[2], 0, 32);
        memset(__buf, 0, 32);
        v247 = *(_OWORD *)v246;
        v248 = *(_OWORD *)(v246 + 16);
        v249 = *(_OWORD *)(v246 + 48);
        __buf[2] = *(_OWORD *)(v246 + 32);
        __buf[3] = v249;
        __buf[0] = v247;
        __buf[1] = v248;
        sub_1ACB9A00C((uint64_t)__buf, 67, v1541);
        v11 = v1551;
        if ((BYTE4(__buf[1]) & 4) == 0)
          goto LABEL_2381;
        v250 = *(_QWORD *)&__buf[0];
LABEL_267:
        v251 = *(_QWORD *)(*(_QWORD *)(v11 + 120) + 8 * *((int *)v12 + 1));
        v252 = *(_QWORD *)(v251 + 40);
        v1555 = 0;
        v253 = sub_1ACBF4EEC(v252, v250, 0, &v1555);
        LODWORD(v19) = v253;
        *(_QWORD *)(v251 + 72) = v250;
        *(_WORD *)(v251 + 2) = 0;
        v254 = v1555;
        *(_DWORD *)(v251 + 24) = 0;
        *(_DWORD *)(v251 + 28) = v254;
        if (!v254)
        {
          if (!v253)
          {
            v1542 = 0;
            v12 += 40;
            continue;
          }
          goto LABEL_2696;
        }
        if (!*((_DWORD *)v12 + 2))
        {
          v1422 = 105402;
          goto LABEL_2584;
        }
        v1542 = v253;
        goto LABEL_2381;
      case 0x1Fu:
        v245 = *((int *)v12 + 3);
LABEL_266:
        v250 = *(_QWORD *)(v1554 + (v245 << 6));
        v11 = v1551;
        goto LABEL_267;
      case 0x20u:
      case 0x89u:
        v11 = v1551;
        v78 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v79 = *(_BYTE **)(v78 + 40);
        LODWORD(__buf[0]) = 0;
        if (v22 == 137)
        {
          *(_DWORD *)(v78 + 28) = -1;
          if (!*v79)
            goto LABEL_21;
        }
        else if (!*v79 && (v79[1] & 8) != 0)
        {
          v1542 = 0;
          *(_WORD *)(v78 + 2) = 0;
          *(_DWORD *)(v78 + 24) = 0;
          v12 += 40;
          continue;
        }
        v65 = sub_1ACBF8BC8((uint64_t)v79, __buf);
        v659 = __buf[0];
        *(_WORD *)(v78 + 2) = LOBYTE(__buf[0]);
        *(_DWORD *)(v78 + 24) = 0;
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        if (*((int *)v12 + 2) < 1 || !v659)
          goto LABEL_21;
        goto LABEL_1561;
      case 0x21u:
        v11 = v1551;
        v255 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40);
        v256 = sub_1ACB8A058((unsigned __int8 *)v255);
        if (v256 == 16)
          goto LABEL_1561;
        LODWORD(v19) = v256;
        if (v256)
          goto LABEL_2696;
        while (1)
        {
          v257 = *(_QWORD *)(v255 + 136);
          if (*(_BYTE *)(v257 + 8))
            break;
          v65 = sub_1ACB8A3D0(v255, bswap32(*(_DWORD *)(*(_QWORD *)(v257 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v257 + 96)+ 2* *(unsigned __int16 *)(v255 + 86))) & *(_WORD *)(v257 + 26)))));
          if (v65)
            goto LABEL_2548;
        }
        v1001 = sub_1ACBF4378(v255);
        if ((v1001 & 0x8000000000000000) != 0)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        v1542 = 0;
        if (*((_DWORD *)v12 + 3) <= (int)sub_1ACBD36D0(v1001))
          goto LABEL_21;
        goto LABEL_2381;
      case 0x22u:
      case 0x23u:
        ++*(_DWORD *)(v1551 + 288);
        ++*(_DWORD *)(v1551 + 208);
        goto LABEL_76;
      case 0x24u:
LABEL_76:
        v11 = v1551;
        v80 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v81 = *(_QWORD *)(v80 + 40);
        if (*(_BYTE *)v80 != 1)
        {
          v143 = sub_1ACB8A058(*(unsigned __int8 **)(v80 + 40));
          if (v143 == 16)
          {
            LODWORD(v19) = 0;
          }
          else
          {
            LODWORD(v19) = v143;
            if (!v143)
            {
              do
              {
                v144 = *(_QWORD *)(v81 + 136);
                if (*(_BYTE *)(v144 + 8))
                {
                  v146 = 0;
                  LODWORD(v19) = 0;
                  goto LABEL_1553;
                }
                v145 = sub_1ACB8A3D0(v81, bswap32(*(_DWORD *)(*(_QWORD *)(v144 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v144 + 96)+ 2* *(unsigned __int16 *)(v81 + 86))) & *(_WORD *)(v144 + 26)))));
              }
              while (!v145);
              LODWORD(v19) = v145;
              v146 = 0;
LABEL_1553:
              *(_BYTE *)(v80 + 3) = 0;
              *(_DWORD *)(v80 + 24) = 0;
              goto LABEL_1554;
            }
          }
          v146 = 1;
          goto LABEL_1553;
        }
        if (!*(_BYTE *)(v81 + 88))
        {
          if (*(_QWORD *)(v81 + 56))
          {
            LODWORD(v19) = sub_1ACBFA33C((_QWORD *)(v81 + 96), (unsigned int **)(v81 + 56));
            v146 = 0;
            goto LABEL_1554;
          }
          v146 = 1;
          goto LABEL_1555;
        }
        v1475 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        sub_1ACBFA614(v81);
        LODWORD(v19) = v82;
        v1478 = v81;
        if (*(_BYTE *)(v81 + 91))
        {
          v83 = *(unsigned __int8 *)(v81 + 91) + 1;
          v84 = v81 + 104 * *(unsigned __int8 *)(v81 + 91) - 8;
          while (1)
          {
            v86 = *(_QWORD *)v84;
            if (*(_QWORD *)v84)
              break;
            LODWORD(v85) = 0;
LABEL_81:
            if (!(_DWORD)v19)
              LODWORD(v19) = v85;
            --v83;
            v84 -= 104;
            if (v83 <= 1)
              goto LABEL_779;
          }
          v1543 = v19;
          if (*(_QWORD *)v86)
            LODWORD(v85) = (*(uint64_t (**)(_QWORD))v86)(*(_QWORD *)(v86 + 8));
          else
            v85 = *(_QWORD *)(v86 + 16);
          v87 = v17;
          v88 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            v89 = v1552;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v86);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v86);
            v86 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_95;
            v88 = &xmmword_1ECD3B1D0;
          }
          else
          {
            v89 = v1552;
          }
          (*v88)(v86);
LABEL_95:
          v1552 = v89;
          *(_DWORD *)(v84 + 8) = 0;
          *(_QWORD *)v84 = 0;
          v13 = v1488;
          v17 = v87;
          LODWORD(v19) = v1543;
          goto LABEL_81;
        }
LABEL_779:
        if ((_DWORD)v19)
          goto LABEL_2562;
        v678 = v1478;
        v1474 = *(_QWORD *)(*(_QWORD *)(v1478 + 112) + 32);
        v679 = *(unsigned __int8 *)(v1478 + 92);
        v680 = sub_1ACBFABC4;
        if (v679 == 2)
          v680 = sub_1ACBFA9E4;
        if (v679 == 1)
          v680 = sub_1ACBFA874;
        v681 = *(unsigned __int8 *)(v1478 + 91);
        v11 = v1551;
        if (!*(_BYTE *)(v1478 + 91))
          goto LABEL_1376;
        if ((_DWORD)v681 == 1)
        {
          v682 = 0;
LABEL_1367:
          v910 = v681 - v682;
          v911 = (_QWORD *)(v1478 + 104 * v682 + 160);
          do
          {
            *v911 = v680;
            v911 += 13;
            --v910;
          }
          while (v910);
          goto LABEL_1369;
        }
        v682 = v681 & 0xFE;
        v908 = (_QWORD *)(v1478 + 264);
        v909 = v682;
        do
        {
          *(v908 - 13) = v680;
          *v908 = v680;
          v908 += 26;
          v909 -= 2;
        }
        while (v909);
        if (v682 != v681)
          goto LABEL_1367;
LABEL_1369:
        if (v681 >= 2)
        {
          v912 = 2;
          do
          {
            v913 = v912;
            v912 *= 2;
          }
          while (v913 < (int)v681);
          if (off_1ECD3B2E0 && off_1ECD3B2E0(100))
            goto LABEL_2686;
          v914 = 84 * v913 + 32;
          v915 = (int *)sub_1ACB5D828(v914);
          if (!v915)
            goto LABEL_2686;
          v916 = v915;
          bzero(v915, v914);
          *v916 = v913;
          *((_QWORD *)v916 + 3) = v916 + 8;
          v678 = v1478;
          *((_QWORD *)v916 + 1) = 0;
          *((_QWORD *)v916 + 2) = &v916[20 * v913 + 8];
          goto LABEL_1377;
        }
LABEL_1376:
        v916 = 0;
LABEL_1377:
        v917 = 0;
        v1473 = v678 + 96;
        v1506 = v12;
        v1515 = v17;
        v1531 = v18;
        do
        {
          while (1)
          {
            v918 = *(unsigned __int8 *)(v678 + 91);
            if (v917 >= v918)
            {
              if (!*(_BYTE *)(v678 + 89))
              {
                *((_QWORD *)v916 + 1) = v1473;
                v1105 = *v916;
                if ((int)v1105 >= 1)
                {
                  v1485 = v916;
                  v1106 = 0;
                  v1107 = 80 * v1105;
                  v80 = v1475;
                  v1108 = v1478;
                  do
                  {
                    v1110 = *((_QWORD *)v1485 + 3) + v1106;
                    v1111 = *(_QWORD *)(v1110 + 72);
                    if (v1111)
                    {
                      if (*(_DWORD *)(v1111 + 32))
                      {
                        v1112 = v18;
                        v1113 = *(_QWORD **)v1111;
                        **(_QWORD **)v1111 = 0;
                        v1114 = (_QWORD *)sub_1ACB5D828(24);
                        if (!v1114)
                        {
                          LODWORD(v19) = 7;
                          v18 = v1112;
                          v11 = v1551;
                          v80 = v1475;
                          v1108 = v1478;
                          v916 = v1485;
                          goto LABEL_2229;
                        }
                        v1115 = v1114;
                        if ((((int)v1114 / 17) & 1) != 0)
                        {
                          *v1114 = sub_1ACBFC3D8;
                          v1114[1] = v1110;
                        }
                        else
                        {
                          *v1114 = 0;
                          v1116 = sub_1ACBFB4BC(v1110, 1);
                          *(_DWORD *)(**(_QWORD **)(v1110 + 72) + 8) = 1;
                          v13 = v1488;
                          v1115[2] = v1116;
                        }
                        *v1113 = v1115;
                        v18 = v1112;
                        v80 = v1475;
                        v1108 = v1478;
                      }
                      else
                      {
                        v1109 = sub_1ACBFB4BC(*((_QWORD *)v1485 + 3) + v1106, 0);
                        if (v1109)
                        {
                          LODWORD(v19) = v1109;
                          v11 = v1551;
                          v916 = v1485;
                          goto LABEL_2229;
                        }
                      }
                    }
                    v1106 += 80;
                  }
                  while (v1107 != v1106);
                  v916 = v1485;
                  v1275 = *v1485;
                  v11 = v1551;
                  if ((int)v1275 >= 2)
                  {
                    v1276 = 2 * v1275 - 2;
                    do
                    {
                      v1279 = *v1485 / 2;
                      if (v1275 <= v1279)
                      {
                        v1281 = *((_QWORD *)v1485 + 2);
                        v1280 = *(_DWORD *)(v1281 + 4 * v1276);
                        v1278 = *(_DWORD *)(v1281 + 4 * (v1276 + 1));
                      }
                      else
                      {
                        v1280 = v1276 - 2 * v1279;
                        v1278 = v1280 + 1;
                      }
                      v1282 = *((_QWORD *)v1485 + 3);
                      if (*(_QWORD *)(v1282 + 80 * (int)v1280 + 24))
                      {
                        if (*(_QWORD *)(v1282 + 80 * (int)v1278 + 24))
                        {
                          v1277 = *((_QWORD *)v1485 + 1);
                          LODWORD(__buf[0]) = 0;
                          if ((*(int (**)(void))(v1277 + 64))() < 1)
                            v1278 = v1280;
                        }
                        else
                        {
                          v1278 = v1280;
                        }
                      }
                      *(_DWORD *)(*((_QWORD *)v1485 + 2) + 4 * --v1275) = v1278;
                      v1276 -= 2;
                      v11 = v1551;
                    }
                    while ((unint64_t)(v1275 + 1) > 2);
                  }
                }
                v1108 = v1478;
                LODWORD(v19) = *(unsigned __int8 *)(*(_QWORD *)(v1478 + 120) + 31);
                v80 = v1475;
LABEL_2229:
                v146 = 0;
                *(_QWORD *)(v1108 + 24) = v916;
                goto LABEL_1554;
              }
              v967 = v918 - 1;
              v968 = v678 + 104 * v967;
              v970 = *(_QWORD *)(v968 + 120);
              v969 = (uint64_t *)(v968 + 120);
              if (!v970)
              {
                v971 = v678 + 104 * v967;
                v973 = *(_QWORD *)(v971 + 112);
                v972 = v971 + 112;
                v974 = *(_QWORD *)(v973 + 40);
                v975 = (unint64_t)*(unsigned __int16 *)(v974 + 6) << 6;
                v976 = *(_QWORD *)(v974 + 16);
                if (v976)
                  v977 = sub_1ACBE1124(v976, v975 + 104);
                else
                  v977 = sub_1ACB5D828(v975 + 104);
                if (!v977)
                {
                  v11 = v1551;
LABEL_2676:
                  *v969 = 0;
                  if (v916)
                  {
                    if (*v916 >= 1)
                    {
                      v1448 = 0;
                      v1449 = 0;
                      do
                      {
                        sub_1ACBF172C(*((_QWORD *)v916 + 3) + v1448);
                        ++v1449;
                        v1448 += 80;
                      }
                      while (v1449 < *v916);
                    }
                    v1450 = (void (**)(unsigned int *))&off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888 -= (int)off_1ECD3B178(v916);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v916);
                      v916 = (int *)xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                      {
                        LODWORD(v19) = 7;
                        v11 = v1551;
                        v13 = v1488;
                        goto LABEL_2696;
                      }
                      v1450 = (void (**)(unsigned int *))&xmmword_1ECD3B1D0;
                      v11 = v1551;
                      v13 = v1488;
                    }
                    (*v1450)((unsigned int *)v916);
                    LODWORD(v19) = 7;
                    goto LABEL_2696;
                  }
LABEL_2686:
                  LODWORD(v19) = 7;
                  goto LABEL_2696;
                }
                *(_QWORD *)v977 = v974;
                *(_QWORD *)(v977 + 8) = v977 + 40;
                *v969 = v977;
                *(_WORD *)(v977 + 28) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v972 + 40) + 6);
                *(_BYTE *)(v977 + 31) = 0;
                v11 = v1551;
              }
              if (v1474)
                v1333 = sub_1ACBE1124(v1474, 0x50uLL);
              else
                v1333 = sub_1ACB5D828(80);
              v1334 = v1333;
              if (v1333)
              {
                *(_OWORD *)(v1333 + 48) = 0u;
                *(_OWORD *)(v1333 + 64) = 0u;
                v1335 = (uint64_t)(v969 - 3);
                *(_OWORD *)(v1334 + 16) = 0u;
                *(_OWORD *)(v1334 + 32) = 0u;
                *(_OWORD *)v1334 = 0u;
                *(_QWORD *)(v678 + 16) = v1334;
                v1550 = v1334;
                v1336 = (int **)(v1334 + 72);
                v65 = sub_1ACBFB358(v1335, v916, (uint64_t *)(v1334 + 72));
                if (v65)
                  goto LABEL_2548;
                v1337 = *v1336;
                v1337[8] = 1;
                *(_QWORD *)(*(_QWORD *)v1337 + 96) -= v1337[6];
                v1338 = *(unsigned __int8 *)(v678 + 91);
                if (v1338 >= 2)
                {
                  v1339 = (v1338 - 1);
                  v1340 = (int **)(*((_QWORD *)v916 + 3) + 72);
                  do
                  {
                    v1341 = *v1340;
                    if (*v1340)
                    {
                      v1341[8] = 1;
                      *(_QWORD *)(*(_QWORD *)v1341 + 96) -= v1341[6];
                    }
                    v1340 += 10;
                    --v1339;
                  }
                  while (v1339);
                }
                v1487 = v916;
                v1342 = -1;
                for (k = 72; ; k += 80)
                {
                  while (1)
                  {
                    if (++v1342 >= (unint64_t)*(unsigned __int8 *)(v678 + 91))
                    {
                      LODWORD(v19) = sub_1ACBFB4BC(v1550, 2);
                      v146 = 0;
                      v18 = v1531;
                      v80 = v1475;
                      goto LABEL_1554;
                    }
                    v1344 = v17;
                    v1345 = *((_QWORD *)v1487 + 3);
                    v1346 = *(_QWORD *)(v1345 + k);
                    if (v1346)
                      break;
                    LODWORD(v19) = 0;
LABEL_2360:
                    v11 = v1551;
                    v17 = v1344;
                    k += 80;
                    if ((_DWORD)v19)
                      goto LABEL_2658;
                  }
                  if (!*(_DWORD *)(v1346 + 32))
                  {
                    LODWORD(v19) = sub_1ACBFB4BC(v1345 + k - 72, 1);
                    goto LABEL_2360;
                  }
                  v1347 = v12;
                  v1348 = *(_QWORD **)v1346;
                  **(_QWORD **)v1346 = 0;
                  v1349 = (_QWORD *)sub_1ACB5D828(24);
                  if (!v1349)
                  {
                    LODWORD(v19) = 7;
                    v11 = v1551;
                    v17 = v1344;
                    LOBYTE(v18) = v1531;
                    v12 = v1347;
                    goto LABEL_2696;
                  }
                  v1350 = v1349;
                  if ((((int)v1349 / 17) & 1) != 0)
                  {
                    *v1349 = sub_1ACBFC3D8;
                    v1349[1] = v1345 + k - 72;
                  }
                  else
                  {
                    *v1349 = 0;
                    v1351 = sub_1ACBFB4BC(v1345 + k - 72, 1);
                    *(_DWORD *)(**(_QWORD **)(v1345 + k) + 8) = 1;
                    v1350[2] = v1351;
                  }
                  *v1348 = v1350;
                  v11 = v1551;
                  v17 = v1344;
                  v12 = v1347;
                  v678 = v1478;
                }
              }
              v969 = (uint64_t *)(v678 + 16);
              goto LABEL_2676;
            }
            v919 = v678 + 104 * v917;
            v922 = *(int *)(v919 + 152);
            v921 = (int *)(v919 + 152);
            v920 = v922;
            if ((_DWORD)v922)
              break;
            ++v917;
          }
          *(_QWORD *)&v1558 = 0;
          v1491 = v917;
          v1524 = (uint64_t)(v921 - 14);
          if ((int)v920 < 17)
          {
            v1557 = 0;
            LODWORD(v19) = sub_1ACBFB798((uint64_t)(v921 - 14), v920, &v1557, (int **)&v1558);
            v929 = (int *)v1558;
            if (!(_DWORD)v19)
              goto LABEL_1478;
LABEL_1388:
            if (!v929)
              goto LABEL_1481;
            v930 = v19;
            if (*v929 >= 1)
            {
              v931 = 0;
              v932 = 0;
              do
              {
                sub_1ACBF172C(*((_QWORD *)v929 + 3) + v931);
                ++v932;
                v931 += 80;
              }
              while (v932 < *v929);
            }
            v933 = (void (**)(int *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888 -= (int)off_1ECD3B178(v929);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v929);
              v929 = (int *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_1398;
              v933 = (void (**)(int *))&xmmword_1ECD3B1D0;
            }
            (*v933)(v929);
LABEL_1398:
            v17 = v1515;
            LODWORD(v19) = v930;
            v678 = v1478;
            v917 = v1491;
            goto LABEL_1482;
          }
          v1481 = v921;
          v923 = v17;
          v924 = 0;
          v925 = -1;
          v926 = 16;
          do
          {
            v927 = v924;
            v926 *= 16;
            ++v925;
            ++v924;
          }
          while (v926 < v920);
          v1557 = 0;
          v928 = v1524;
          if (off_1ECD3B2E0 && off_1ECD3B2E0(100))
          {
            LODWORD(v19) = 7;
            v11 = v1551;
            v17 = v923;
            v678 = v1478;
            goto LABEL_1482;
          }
          v934 = (int *)sub_1ACB5D828(1376);
          if (!v934)
          {
            LODWORD(v19) = 7;
            v11 = v1551;
            v17 = v1515;
            v678 = v1478;
            goto LABEL_1482;
          }
          v929 = v934;
          bzero(v934, 0x560uLL);
          *v929 = 16;
          *((_QWORD *)v929 + 1) = 0;
          *((_QWORD *)v929 + 2) = v929 + 328;
          *((_QWORD *)v929 + 3) = v929 + 8;
          *(_QWORD *)&v1558 = v929;
          v935 = *v1481;
          if (*v1481 < 1)
          {
            v11 = v1551;
            v678 = v1478;
            goto LABEL_1478;
          }
          v936 = 0;
          v937 = 0;
          v1483 = v916;
          while (1)
          {
            v1556 = 0;
            v1498 = v937;
            v938 = v935 - v937;
            if (v938 >= 16)
              v939 = 16;
            else
              v939 = v938;
            v940 = sub_1ACBFB798(v928, v939, &v1557, &v1556);
            if (v940)
            {
              LODWORD(v19) = v940;
              v11 = v1551;
              v18 = v1531;
              v678 = v1478;
              goto LABEL_1388;
            }
            *(_QWORD *)&__buf[0] = 0;
            v941 = sub_1ACBFB358(v928, v1556, (uint64_t *)__buf);
            LODWORD(v19) = v941;
            if (v925)
            {
              v942 = 1;
              v943 = v927;
              do
              {
                v942 *= 16;
                --v943;
              }
              while (v943);
              v944 = v927;
              v945 = v929;
              if (!v941)
              {
                while (1)
                {
                  if (v936 / v942 <= 0)
                    v946 = -(-(v936 / v942) & 0xF);
                  else
                    v946 = (v936 / v942) & 0xF;
                  v947 = *((_QWORD *)v945 + 3) + 80 * v946;
                  v950 = *(_QWORD *)(v947 + 72);
                  v949 = (uint64_t *)(v947 + 72);
                  v948 = v950;
                  if (!v950)
                  {
                    if (off_1ECD3B2E0 && off_1ECD3B2E0(100)
                      || (v951 = (int *)sub_1ACB5D828(1376)) == 0)
                    {
                      LODWORD(v19) = 7;
                      break;
                    }
                    v952 = v951;
                    bzero(v951, 0x560uLL);
                    *v952 = 16;
                    *((_QWORD *)v952 + 1) = 0;
                    *((_QWORD *)v952 + 2) = v952 + 328;
                    *((_QWORD *)v952 + 3) = v952 + 8;
                    v953 = sub_1ACBFB358(v1524, v952, v949);
                    if (v953)
                    {
                      LODWORD(v19) = v953;
                      break;
                    }
                    v948 = *v949;
                  }
                  v945 = *(int **)(v948 + 8);
                  v942 /= 16;
                  if (!--v944)
                    goto LABEL_1422;
                }
              }
LABEL_1425:
              v954 = *(_QWORD **)&__buf[0];
              if (!*(_QWORD *)&__buf[0])
              {
                v11 = v1551;
                v18 = v1531;
                v678 = v1478;
                v916 = v1483;
                v917 = v1491;
                goto LABEL_1388;
              }
              v1547 = v19;
              if (!*(_DWORD *)(*(_QWORD *)&__buf[0] + 32))
                goto LABEL_1455;
              v955 = **(_QWORD **)&__buf[0];
              v956 = ***(_QWORD ***)&__buf[0];
              if (!v956)
              {
LABEL_1437:
                v958 = v954[5];
                if (v958)
                {
                  if (*(_QWORD *)v958)
                  {
                    (*(void (**)(_QWORD))(*(_QWORD *)v958 + 8))(v954[5]);
                    *(_QWORD *)v958 = 0;
                  }
                  v959 = &off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888 -= (int)off_1ECD3B178(v958);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v958);
                    v958 = xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                      goto LABEL_1446;
                    v959 = &xmmword_1ECD3B1D0;
                  }
                  (*v959)(v958);
                }
LABEL_1446:
                v960 = v954[7];
                if (!v960)
                  goto LABEL_1455;
                if (*(_QWORD *)v960)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)v960 + 8))(v954[7]);
                  *(_QWORD *)v960 = 0;
                }
                v961 = &off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_1454;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888 -= (int)off_1ECD3B178(v960);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v960);
                v960 = xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v961 = &xmmword_1ECD3B1D0;
LABEL_1454:
                  (*v961)(v960);
                }
LABEL_1455:
                v962 = (int *)v954[1];
                if (!v962)
                  goto LABEL_1465;
                if (*v962 >= 1)
                {
                  v963 = 0;
                  v964 = 0;
                  do
                  {
                    sub_1ACBF172C(*((_QWORD *)v962 + 3) + v963);
                    ++v964;
                    v963 += 80;
                  }
                  while (v964 < *v962);
                }
                v965 = (void (**)(int *))&off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888 -= (int)off_1ECD3B178(v962);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v962);
                  v962 = (int *)xmmword_1ECD3E930;
                  if (!(_QWORD)xmmword_1ECD3E930)
                  {
LABEL_1465:
                    v966 = &off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      v928 = v1524;
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888 -= (int)off_1ECD3B178(v954);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v954);
                      v954 = (_QWORD *)xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                        goto LABEL_1472;
                      v966 = &xmmword_1ECD3B1D0;
                    }
                    else
                    {
                      v928 = v1524;
                    }
                    (*v966)(v954);
LABEL_1472:
                    v917 = v1491;
                    goto LABEL_1473;
                  }
                  v965 = (void (**)(int *))&xmmword_1ECD3B1D0;
                }
                (*v965)(v962);
                goto LABEL_1465;
              }
              if (*(_QWORD *)v956)
                (*(void (**)(_QWORD))v956)(*(_QWORD *)(v956 + 8));
              v957 = &off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888 -= (int)off_1ECD3B178(v956);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v956);
                v956 = xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_1436;
                v957 = &xmmword_1ECD3B1D0;
              }
              (*v957)(v956);
LABEL_1436:
              *(_DWORD *)(v955 + 8) = 0;
              *(_QWORD *)v955 = 0;
              goto LABEL_1437;
            }
            v945 = v929;
            if (v941)
              goto LABEL_1425;
LABEL_1422:
            v1547 = 0;
            *(_QWORD *)(*((_QWORD *)v945 + 3) + 80 * (v936 & 0xF) + 72) = *(_QWORD *)&__buf[0];
            v917 = v1491;
            v928 = v1524;
LABEL_1473:
            v937 = v1498 + 16;
            v916 = v1483;
            v935 = *v1481;
            if (v1498 + 16 >= *v1481)
              break;
            ++v936;
            LODWORD(v19) = v1547;
            if (v1547)
            {
              v11 = v1551;
              v18 = v1531;
              goto LABEL_1487;
            }
          }
          v11 = v1551;
          v18 = v1531;
          LODWORD(v19) = v1547;
LABEL_1487:
          v678 = v1478;
          if ((_DWORD)v19)
            goto LABEL_1388;
LABEL_1478:
          if (v916)
          {
            LODWORD(v19) = sub_1ACBFB358(v1524, v929, (uint64_t *)(*((_QWORD *)v916 + 3) + 80 * v917 + 72));
          }
          else
          {
            LODWORD(v19) = 0;
            v916 = v929;
          }
LABEL_1481:
          v17 = v1515;
LABEL_1482:
          v12 = v1506;
          ++v917;
        }
        while (!(_DWORD)v19);
        if (v916)
        {
          v978 = v19;
          if (*v916 >= 1)
          {
            v979 = 0;
            v980 = 0;
            do
            {
              sub_1ACBF172C(*((_QWORD *)v916 + 3) + v979);
              ++v980;
              v979 += 80;
            }
            while (v980 < *v916);
          }
          v981 = (void (**)(unsigned int *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v916);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v916);
            v916 = (int *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v981 = (void (**)(unsigned int *))&xmmword_1ECD3B1D0;
              goto LABEL_1502;
            }
          }
          else
          {
LABEL_1502:
            (*v981)((unsigned int *)v916);
          }
          v146 = 0;
          LODWORD(v19) = v978;
          v80 = v1475;
LABEL_1554:
          if (!(_DWORD)v19)
          {
LABEL_1555:
            v1542 = 0;
            *(_BYTE *)(v80 + 2) = v146;
            if (v146)
            {
              v131 = *((_DWORD *)v12 + 2);
              goto LABEL_1557;
            }
            goto LABEL_21;
          }
        }
LABEL_2696:
        v1451 = 7;
        if (!*(_BYTE *)(v13 + 103))
        {
          v1451 = v19;
          if ((_DWORD)v19 == 8458)
            v1451 = sub_1ACBEB08C(108901);
        }
        if (!*(_QWORD *)(v11 + 168) && v1451 != 3082)
        {
          v1452 = "abort due to ROLLBACK";
          if (v1451 != 516)
          {
            if (v1451 == 101)
            {
              v1452 = "no more rows available";
            }
            else if (v1451 == 100)
            {
              v1452 = "another row available";
            }
            else
            {
              v1452 = "unknown error";
              if (v1451 <= 0x1Cu)
              {
                v1452 = "unknown error";
                if (((0x1410004uLL >> v1451) & 1) == 0)
                  v1452 = off_1E5C74AE8[v1451];
              }
            }
          }
          sub_1ACBF1C7C((uint64_t *)v11, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, (char)v1452);
        }
        *(_DWORD *)(v11 + 52) = v1451;
        if (v1451 != 3082 && (v1451 & 0xFB) == 0xA)
        {
          v1453 = 0;
          v1454 = *(uint64_t (**)(void))(*(_QWORD *)v13 + 128);
          if (v1454)
            v1453 = v1454();
          *(_DWORD *)(v13 + 92) = v1453;
        }
        sqlite3_log(v1451, "statement aborts at %d: [%s] %s", -858993459 * ((v12 - v1552) >> 3), *(const char **)(v11 + 320), *(const char **)(v11 + 168));
        if (*(_BYTE *)(v11 + 267) == 2)
          sub_1ACB68C50(v11);
        if (v1451 != 11)
        {
          if (v1451 == 3082 && !*(_BYTE *)(v13 + 103) && !*(_BYTE *)(v13 + 104))
          {
            *(_BYTE *)(v13 + 103) = 1;
            if (*(int *)(v13 + 220) >= 1)
              *(_DWORD *)(v13 + 424) = 1;
            ++*(_DWORD *)(v13 + 432);
            *(_WORD *)(v13 + 436) = 0;
            v1461 = *(_QWORD *)(v13 + 344);
            if (v1461)
            {
              sub_1ACBCB308(v1461, "out of memory", v1455, v1456, v1457, v1458, v1459, v1460, v1472);
              for (m = *(_QWORD *)(v13 + 344); ; ++*(_DWORD *)(m + 48))
              {
                *(_DWORD *)(m + 24) = 7;
                m = *(_QWORD *)(m + 256);
                if (!m)
                  break;
              }
            }
          }
LABEL_2728:
          if ((_BYTE)v18)
            goto LABEL_2729;
LABEL_2737:
          v1442 = 1;
          LOBYTE(v18) = 0;
          goto LABEL_2738;
        }
        if (*(_BYTE *)(v13 + 101))
          goto LABEL_2728;
        *(_QWORD *)(v13 + 48) |= 0x200000000uLL;
        if (!(_BYTE)v18)
          goto LABEL_2737;
LABEL_2729:
        v1463 = *(_QWORD *)(v13 + 32);
        v1464 = *(_QWORD *)(v1463 + 32 * (v18 - 1) + 24);
        *(_WORD *)(v1464 + 114) |= 8u;
        *(_WORD *)(*(_QWORD *)(v1463 + 56) + 114) |= 8u;
        *(_DWORD *)(v13 + 44) &= ~0x10u;
        if (!*(_DWORD *)(v13 + 72))
        {
          v1465 = *(_DWORD *)(v13 + 40);
          if (v1465 >= 1)
          {
            v1466 = 0;
            v1467 = 24;
            do
            {
              v1468 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v1467);
              if ((*(_WORD *)(v1468 + 114) & 8) != 0)
              {
                sub_1ACBF62B4(v1468);
                v1465 = *(_DWORD *)(v13 + 40);
              }
              ++v1466;
              v1467 += 32;
            }
            while (v1466 < v1465);
          }
        }
        v1442 = 1;
LABEL_2738:
        while (v17 >= v16)
        {
          v1469 = *(unsigned int (**)(_QWORD))(v13 + 544);
          if (!v1469)
            break;
          v16 += *(unsigned int *)(v13 + 560);
          if (v1469(*(_QWORD *)(v13 + 552)))
            goto LABEL_2695;
        }
        *(_DWORD *)(v11 + 296) += v17;
        *(_DWORD *)(v11 + 216) += v17;
        if (*(_DWORD *)(v11 + 276))
          sub_1ACBF1CD0(v11);
        return v1442;
      case 0x25u:
        v11 = v1551;
        v258 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v259 = *(_QWORD *)(v258 + 40);
        if (*(_BYTE *)(v259 + 88))
        {
          if (*(_BYTE *)(v259 + 89))
          {
            v260 = sub_1ACBFBC38(*(_QWORD *)(v259 + 16));
            if (v260)
              goto LABEL_283;
            if (!*(_QWORD *)(*(_QWORD *)(v259 + 16) + 24))
              goto LABEL_1635;
            goto LABEL_1063;
          }
          LODWORD(__buf[0]) = 0;
          v260 = sub_1ACBFC26C(*(_QWORD *)(v259 + 24), __buf);
          if (v260)
            v1034 = 1;
          else
            v1034 = LODWORD(__buf[0]) == 0;
          if (v1034)
          {
LABEL_283:
            LODWORD(v19) = v260;
            *(_DWORD *)(v258 + 24) = 0;
            if (v260 == 101)
            {
LABEL_1636:
              v1035 = 0;
              *(_BYTE *)(v258 + 2) = 1;
LABEL_1705:
              if (!*(_DWORD *)(v13 + 424))
              {
                v1542 = v1035;
                while (v17 >= v16)
                {
                  v1062 = *(unsigned int (**)(_QWORD))(v13 + 544);
                  if (!v1062)
                    break;
                  v16 += *(unsigned int *)(v13 + 560);
                  if (v1062(*(_QWORD *)(v13 + 552)))
                  {
LABEL_2695:
                    LODWORD(v19) = 9;
                    v16 = -1;
                    goto LABEL_2696;
                  }
                }
                goto LABEL_21;
              }
              LODWORD(v19) = 9;
              goto LABEL_2696;
            }
            if (v260)
              goto LABEL_2696;
            goto LABEL_1064;
          }
        }
        else
        {
          v788 = *(_QWORD **)(v259 + 56);
          *(_QWORD *)(v259 + 56) = v788[1];
          v788[1] = 0;
          if (!*(_QWORD *)(v259 + 64))
          {
            do
            {
              v789 = (_QWORD *)v788[1];
              sub_1ACBE0F9C((_QWORD *)v13, v788);
              v788 = v789;
            }
            while (v789);
          }
          if (*(_QWORD *)(v259 + 56))
          {
LABEL_1063:
            *(_DWORD *)(v258 + 24) = 0;
LABEL_1064:
            v1542 = 0;
            *(_BYTE *)(v258 + 2) = 0;
            v790 = v11 + 4 * *((unsigned __int16 *)v12 + 1);
            ++*(_DWORD *)(v790 + 280);
            ++*(_DWORD *)(v790 + 200);
LABEL_1702:
            v12 = &v1552[40 * *((int *)v12 + 2) - 40];
LABEL_1703:
            v11 = v1551;
            goto LABEL_1704;
          }
        }
LABEL_1635:
        *(_DWORD *)(v258 + 24) = 0;
        goto LABEL_1636;
      case 0x26u:
        v11 = v1551;
        v258 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v261 = *(_QWORD *)(v258 + 40);
        *(_BYTE *)(v261 + 1) &= 0xF1u;
        *(_WORD *)(v261 + 70) = 0;
        if (*(_BYTE *)v261 || !*(_WORD *)(v261 + 86) || !*(_BYTE *)(*(_QWORD *)(v261 + 136) + 8))
        {
          v260 = sub_1ACBF9260((unsigned __int8 *)v261);
          goto LABEL_283;
        }
        --*(_WORD *)(v261 + 86);
        goto LABEL_1063;
      case 0x27u:
        v11 = v1551;
        v258 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v260 = sub_1ACB8B8D4(*(_QWORD *)(v258 + 40));
        goto LABEL_283;
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Du:
        v1560 = 0;
        v1558 = 0u;
        v1559 = 0u;
        v11 = v1551;
        v56 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        WORD6(v1559) = *((_DWORD *)v12 + 4);
        v57 = *(_QWORD *)(v56 + 48);
        if (v22 >= 0x2A)
          v58 = 0;
        else
          v58 = -1;
        BYTE14(v1559) = v58;
        v59 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        *(_QWORD *)&v1558 = v57;
        *((_QWORD *)&v1558 + 1) = v59;
        memset(__buf, 0, sizeof(__buf));
        v60 = *(_QWORD *)(v56 + 40);
        sub_1ACBEF184(v60);
        v61 = *(_DWORD *)(v60 + 64);
        if (v61 <= 0)
        {
          v1422 = 106690;
          goto LABEL_2584;
        }
        WORD2(__buf[1]) = 0;
        *((_QWORD *)&__buf[1] + 1) = v13;
        LODWORD(__buf[2]) = 0;
        v62 = *(unsigned __int16 *)(v60 + 68);
        v63 = *(char **)(v60 + 56);
        v64 = *(_DWORD *)(*(_QWORD *)(v60 + 136) + 88) - (_DWORD)v63;
        if (v62 > v64)
          v62 = v64 & ~(v64 >> 31);
        *((_QWORD *)&__buf[0] + 1) = *(_QWORD *)(v60 + 56);
        if (v62 >= v61)
        {
          WORD2(__buf[1]) = 16400;
          LODWORD(__buf[1]) = v61;
        }
        else
        {
          v65 = sub_1ACB934EC(v60, 0, v61, (uint64_t)__buf);
          if (v65)
            goto LABEL_2548;
          v61 = __buf[1];
          v63 = (char *)*((_QWORD *)&__buf[0] + 1);
        }
        v130 = sub_1ACBF5AA0(v61, v63, (uint64_t *)&v1558, 0);
        if (LODWORD(__buf[2]))
          sub_1ACBF2A04((uint64_t)__buf);
        v1542 = 0;
        if ((*v12 & 1) != 0)
          v131 = v130 + 1;
        else
          v131 = -v130;
LABEL_1557:
        if (v131 <= 0)
        {
LABEL_21:
          v12 += 40;
          continue;
        }
        goto LABEL_2381;
      case 0x2Bu:
      case 0x2Cu:
        v90 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v91 = *(_WORD *)(v90 + 20);
        if ((v91 & 0x24) != 0)
        {
          v92 = *(_QWORD *)v90 == 0;
        }
        else
        {
          if ((v91 & 1) != 0)
          {
            v857 = 2;
            goto LABEL_2165;
          }
          if ((v91 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v90;
          }
          else if ((v91 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_1ACBF2F88(v90);
          }
          else
          {
            a2.i64[0] = 0;
          }
          v92 = *(double *)a2.i64 == 0.0;
        }
        v857 = !v92;
LABEL_2165:
        v1251 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        v1252 = *(_WORD *)(v1251 + 20);
        if ((v1252 & 0x24) != 0)
        {
          v1253 = *(_QWORD *)v1251 == 0;
        }
        else
        {
          if ((v1252 & 1) != 0)
          {
            v1254 = 2;
            goto LABEL_2193;
          }
          if ((v1252 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v1251;
          }
          else if ((v1252 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_1ACBF2F88(v1251);
          }
          else
          {
            a2.i64[0] = 0;
          }
          v1253 = *(double *)a2.i64 == 0.0;
        }
        v1254 = !v1253;
LABEL_2193:
        v1264 = v1254 + 3 * v857;
        if (*v12 == 44)
          v1265 = (unsigned __int8 *)&unk_1ACCB6D3D;
        else
          v1265 = (unsigned __int8 *)&unk_1ACCB6D46;
        v1266 = v1265[v1264];
        v1267 = *((int *)v12 + 3);
        if (v1266 == 2)
        {
          v333 = v1554 + (v1267 << 6);
          v334 = *(_WORD *)(v333 + 20) & 0xF240;
LABEL_2198:
          *(_WORD *)(v333 + 20) = v334 | 1;
          v12 += 40;
        }
        else
        {
          v1268 = v1554 + (v1267 << 6);
          *(_QWORD *)v1268 = v1266;
          *(_WORD *)(v1268 + 20) = *(_WORD *)(v1268 + 20) & 0xF240 | 4;
          v12 += 40;
        }
        continue;
      case 0x2Eu:
        *(_QWORD *)&__buf[0] = 0;
        v262 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v264 = (__int16 *)(v262 + 20);
        v263 = *(_WORD *)(v262 + 20);
        if ((v263 & 0x10) == 0)
          goto LABEL_1699;
        if (sub_1ACBF65E8(*(_QWORD *)(v262 + 8), __buf))
        {
          v265 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
          if ((*(_WORD *)(v265 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v265, *(uint64_t *)&__buf[0]);
          }
          else
          {
            *(_QWORD *)v265 = *(_QWORD *)&__buf[0];
            *(_WORD *)(v265 + 20) = 4;
          }
          goto LABEL_1703;
        }
        v263 = *v264;
LABEL_1699:
        if ((v263 & 0x9000) != 0)
          sub_1ACBF2A54((int *)v262);
        else
          *v264 = 1;
        goto LABEL_1702;
      case 0x2Fu:
        v266 = *((int *)v12 + 1);
        v267 = *((_DWORD *)v12 + 4);
        v268 = *((int *)v12 + 3);
        v269 = v1554 + (v266 << 6);
        if ((*(_WORD *)(v269 + 20) & 0x10) == 0 && sub_1ACBF63C0(v269))
          goto LABEL_2549;
        v270 = v1554;
        v271 = (uint64_t *)(v1554 + (v268 << 6));
        if (!v267)
          goto LABEL_295;
        if (sub_1ACBF6694(*(_QWORD *)(v1554 + (v266 << 6) + 8), v267, *v271))
          goto LABEL_2381;
        v270 = v1554;
        if (v267 < 0)
          goto LABEL_21;
LABEL_295:
        sub_1ACBF64C8(*(_QWORD *)(v270 + (v266 << 6) + 8), *v271);
        v12 += 40;
        continue;
      case 0x30u:
        v272 = (unsigned __int8 **)*((_QWORD *)v12 + 2);
        v273 = *((int *)v12 + 3);
        if (!*((_WORD *)v12 + 1))
          goto LABEL_300;
        v274 = *(_QWORD *)(v1551 + 352);
        if (!v274)
          goto LABEL_300;
        do
        {
          if (*(unsigned __int8 **)(v274 + 48) == v272[4])
            goto LABEL_21;
          v274 = *(_QWORD *)(v274 + 8);
        }
        while (v274);
LABEL_300:
        if (*(_DWORD *)(v1551 + 368) >= *(_DWORD *)(v13 + 176))
        {
          v1434 = "too many levels of trigger recursion";
          goto LABEL_2623;
        }
        v275 = v1554 + (v273 << 6);
        v277 = *(_WORD *)(v275 + 20);
        v276 = (_WORD *)(v275 + 20);
        if ((v277 & 0x10) != 0)
        {
          v286 = *(char **)(v1554 + (v273 << 6) + 8);
          v280 = *((_DWORD *)v286 + 22);
          v773 = *((_WORD *)v286 + 46);
          v288 = *((_DWORD *)v272 + 4);
          v11 = v1551;
        }
        else
        {
          v1532 = v18;
          v278 = *((_DWORD *)v272 + 4);
          v279 = *((_DWORD *)v272 + 2);
          if (v278)
            v280 = v278 + *((_DWORD *)v272 + 3);
          else
            v280 = *((_DWORD *)v272 + 3) + 1;
          v281 = 8 * v278;
          v282 = v279 + 7;
          v1293 = v279 < -7;
          v283 = v279 + 14;
          if (v1293)
            v282 = v283;
          v284 = v281 + (v282 >> 3) + (v280 << 6) + 112;
          v285 = (char *)sub_1ACB5733C(v13, v284);
          if (!v285)
            goto LABEL_2557;
          v286 = v285;
          if ((*v276 & 0x9000) != 0 || *(_DWORD *)(v1554 + (v273 << 6) + 32))
            sub_1ACBF2A04(v1554 + (v273 << 6));
          *v276 = 4112;
          v287 = v1554 + (v273 << 6);
          *(_QWORD *)(v287 + 8) = v286;
          *(_DWORD *)(v287 + 16) = v284;
          *(_BYTE *)(v287 + 56) = 0;
          *(_QWORD *)(v287 + 48) = sub_1ACBF6980;
          v11 = v1551;
          *(_QWORD *)v286 = v1551;
          *((_DWORD *)v286 + 22) = v280;
          v288 = *((_DWORD *)v272 + 4);
          *((_DWORD *)v286 + 23) = v288;
          *((_DWORD *)v286 + 19) = -858993459 * ((unint64_t)(v12 - v1552) >> 3);
          *((_QWORD *)v286 + 3) = *(_QWORD *)(v1551 + 104);
          *((_DWORD *)v286 + 21) = *(_DWORD *)(v1551 + 36);
          *((_QWORD *)v286 + 4) = *(_QWORD *)(v1551 + 120);
          *((_DWORD *)v286 + 18) = *(_DWORD *)(v1551 + 40);
          *((_QWORD *)v286 + 2) = *(_QWORD *)(v1551 + 136);
          *((_DWORD *)v286 + 20) = *(_DWORD *)(v1551 + 144);
          *((_QWORD *)v286 + 6) = v272[4];
          if (v280)
          {
            v289 = v286 + 112;
            v290 = (v280 - 1) & 0x3FFFFFFFFFFFFFFLL;
            if (v290)
            {
              v291 = v290 + 1;
              v292 = (v290 + 1) & 0x7FFFFFFFFFFFFFELL;
              v293 = &v289[64 * v292];
              v294 = (uint64_t *)(v286 + 200);
              v295 = v292;
              do
              {
                *((_WORD *)v294 - 34) = 0;
                *((_WORD *)v294 - 2) = 0;
                *(v294 - 8) = v13;
                *v294 = v13;
                v294 += 16;
                v295 -= 2;
              }
              while (v295);
              v18 = v1532;
              if (v291 == v292)
                goto LABEL_2132;
            }
            else
            {
              v293 = v286 + 112;
              v18 = v1532;
            }
            v1238 = &v289[64 * (uint64_t)v280];
            do
            {
              *((_WORD *)v293 + 10) = 0;
              *((_QWORD *)v293 + 3) = v13;
              v293 += 64;
            }
            while (v293 != v1238);
LABEL_2132:
            v773 = v288;
            goto LABEL_2133;
          }
          v773 = v288;
          v18 = v1532;
        }
LABEL_2133:
        ++*(_DWORD *)(v11 + 368);
        *((_QWORD *)v286 + 1) = *(_QWORD *)(v11 + 352);
        *((_QWORD *)v286 + 7) = *(_QWORD *)(v13 + 56);
        *((_QWORD *)v286 + 12) = *(_QWORD *)(v11 + 56);
        *((_QWORD *)v286 + 13) = *(_QWORD *)(*(_QWORD *)v11 + 120);
        *((_QWORD *)v286 + 8) = *(_QWORD *)(v11 + 384);
        *(_QWORD *)(v11 + 384) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_QWORD *)(v11 + 352) = v286;
        *(_QWORD *)(v11 + 104) = v286 + 112;
        *(_DWORD *)(v11 + 36) = v280;
        *(_DWORD *)(v11 + 40) = v773;
        v1554 = (unint64_t)(v286 + 112);
        v1239 = (uint64_t)&v286[64 * (uint64_t)v280 + 112];
        *(_QWORD *)(v11 + 120) = v1239;
        v1240 = (void *)(v1239 + 8 * v288);
        *((_QWORD *)v286 + 5) = v1240;
        v1241 = *((_DWORD *)v272 + 2);
        v1242 = v1241 + 7;
        v1293 = v1241 < -7;
        v1243 = v1241 + 14;
        if (!v1293)
          v1243 = v1242;
        bzero(v1240, (uint64_t)v1243 >> 3);
        v1244 = *v272;
        *(_QWORD *)(v11 + 136) = *v272;
        *(_DWORD *)(v11 + 144) = *((_DWORD *)v272 + 2);
        v1552 = v1244;
        v12 = v1244 - 40;
LABEL_1704:
        v1035 = v1542;
        goto LABEL_1705;
      case 0x31u:
        if (*((_DWORD *)v12 + 1))
        {
          if (*(_QWORD *)(v13 + 800))
            goto LABEL_21;
        }
        else if (*(_QWORD *)(v1551 + 80))
        {
          goto LABEL_21;
        }
        if (!*(_QWORD *)(v13 + 808))
          goto LABEL_2381;
        goto LABEL_21;
      case 0x32u:
        if ((*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6) + 20) & 1) != 0)
          goto LABEL_2381;
        goto LABEL_21;
      case 0x33u:
        if ((*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6) + 20) & 1) == 0)
          goto LABEL_2381;
        goto LABEL_21;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
        v1528 = v18;
        v23 = v17;
        v24 = v12;
        v25 = *((int *)v12 + 1);
        v26 = v1554 + (v25 << 6);
        v27 = *((int *)v24 + 3);
        v28 = v1554 + (v27 << 6);
        v29 = (_WORD *)(v26 + 20);
        v30 = *(_WORD *)(v26 + 20);
        v31 = (__int16 *)(v28 + 20);
        v32 = *(_WORD *)(v28 + 20);
        if ((v32 & v30 & 4) != 0)
        {
          if (*(_QWORD *)v28 <= *(_QWORD *)v26)
          {
            v17 = v23;
            v18 = v1528;
            v12 = v24;
            v142 = &byte_1ACCB6333[v22];
            if (*(_QWORD *)v28 >= *(_QWORD *)v26)
            {
              if (v142[210])
                goto LABEL_2381;
              v1480 = 0;
              v12 = v24 + 40;
            }
            else
            {
              if (v142[204])
                goto LABEL_2381;
              v1480 = -1;
              v12 = v24 + 40;
            }
          }
          else
          {
            v17 = v23;
            v18 = v1528;
            v12 = v24;
            if (byte_1ACCB6333[v22 + 216])
              goto LABEL_2381;
            v1480 = 1;
            v12 = v24 + 40;
          }
          continue;
        }
        v1502 = v24;
        v33 = *((_WORD *)v24 + 1);
        if (((v32 | v30) & 1) != 0)
        {
          if ((v33 & 0x80) == 0)
          {
            v17 = v23;
            v12 = v1502;
            if ((v33 & 0x10) == 0)
            {
              v1480 = 1;
              v18 = v1528;
              v12 = v1502 + 40;
              continue;
            }
            v18 = v1528;
            goto LABEL_2381;
          }
          v12 = v1502;
          if ((*(_WORD *)(v28 + 20) & 0x100) != 0 || (v32 & v30 & 1) == 0)
          {
            if ((v32 & 1) != 0)
            {
              v1480 = -1;
              v1069 = (unsigned __int8 *)&unk_1ACCB63FF;
              goto LABEL_2021;
            }
            v1480 = 1;
            goto LABEL_2018;
          }
        }
        else
        {
          if ((v33 & 0x47u) < 0x43)
          {
            if (((v32 | v30) & 2) != 0 && (v33 & 0x47) == 0x42)
            {
              v683 = *(_WORD *)(v28 + 20);
              if ((v30 & 2) == 0 && (v30 & 0x2C) != 0)
              {
                v684 = *(_WORD *)(v26 + 20);
                sub_1ACB8AA08(v1554 + (v25 << 6), v1541, 1);
                v30 = *(_WORD *)(v26 + 20) & 0xF240 | v684 & 0xDBF;
                if ((_DWORD)v25 == (_DWORD)v27)
                  v683 = v30 | 2;
                else
                  v683 = v32;
                LOBYTE(v32) = v683;
              }
              v34 = v30;
              if ((v32 & 2) != 0)
              {
                v32 = v683;
                v12 = v1502;
              }
              else
              {
                v12 = v1502;
                if ((v32 & 0x2C) != 0)
                {
                  sub_1ACB8AA08(v28, v1541, 1);
                  v32 = *v31 & 0xF240 | v683 & 0xDBF;
                }
                else
                {
                  v32 = v683;
                }
              }
            }
            else
            {
              v34 = *(_WORD *)(v26 + 20);
              v12 = v1502;
            }
          }
          else
          {
            v12 = v1502;
            if (((v32 | v30) & 2) != 0)
            {
              v34 = *(_WORD *)(v26 + 20);
              if ((v30 & 0x2E) == 2)
              {
                sub_1ACBCA9CC(v26, 0);
                v32 = *v31;
              }
              if ((v32 & 0x2E) == 2)
                sub_1ACBCA9CC(v28, 0);
            }
            else
            {
              v34 = *(_WORD *)(v26 + 20);
            }
          }
          v1191 = sub_1ACB93348(v28, v26, *((_QWORD *)v12 + 2));
          v22 = *v12;
          if (v1191 < 0)
          {
            v1480 = v1191;
            v1069 = (unsigned __int8 *)&unk_1ACCB63FF;
            v29 = (_WORD *)(v26 + 20);
            v30 = v34;
LABEL_2021:
            v1192 = v1069[v22];
            *v31 = v32;
            *v29 = v30;
            v18 = v1528;
            v17 = v23;
            if (v1192)
              goto LABEL_2381;
            goto LABEL_21;
          }
          v29 = (_WORD *)(v26 + 20);
          v30 = v34;
          if (v1191)
          {
            v1480 = v1191;
LABEL_2018:
            v1069 = (unsigned __int8 *)&unk_1ACCB640B;
            goto LABEL_2021;
          }
        }
        v1480 = 0;
        v1069 = (unsigned __int8 *)&unk_1ACCB6405;
        goto LABEL_2021;
      case 0x3Au:
        if (!v1480)
          goto LABEL_325;
        goto LABEL_21;
      case 0x3Bu:
        v296 = (uint64_t *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6));
        if (*v296 < 1)
          goto LABEL_21;
        *v296 -= *((int *)v12 + 3);
        goto LABEL_2381;
      case 0x3Cu:
        v297 = (uint64_t *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6));
        v298 = *v297;
        if (!*v297)
          goto LABEL_21;
        v1293 = v298 < 1;
        v299 = v298 - 1;
        if (!v1293)
          *v297 = v299;
        goto LABEL_2381;
      case 0x3Du:
        v300 = (uint64_t *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6));
        if (*v300 != 0x8000000000000000)
        {
          v301 = *v300 - 1;
          *v300 = v301;
          if (!v301)
            goto LABEL_2381;
        }
        goto LABEL_21;
      case 0x3Eu:
        v302 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8);
        v303 = *(_QWORD *)(v302 + 8);
        if (*(_BYTE *)(v302 + 17))
        {
          ++*(_DWORD *)(v302 + 20);
          if (!*(_BYTE *)(v302 + 18))
            sub_1ACBECF6C(v302);
        }
        if (!*(_BYTE *)(v303 + 33))
          goto LABEL_1302;
        v304 = *(_DWORD *)(v303 + 64);
        v305 = *(_DWORD *)(v303 + 56) / 5u;
        if (v304 > 1)
        {
          v307 = v305 + 1;
          v877 = (v304 - 2) / v307 * v307;
          v308 = dword_1EECAC650 / *(_DWORD *)(v303 + 52);
          if (v877 + 1 == v308)
            v878 = 3;
          else
            v878 = 2;
          v306 = v878 + v877;
        }
        else
        {
          v306 = 0;
          v307 = v305 + 1;
          v308 = dword_1EECAC650 / *(_DWORD *)(v303 + 52);
        }
        v879 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v303 + 24) + 80) + 36));
        v880 = v304 - v879 - (v305 - v304 + v879 + v306) / v305;
        v881 = v308 + 1;
        v883 = v308 + 1 < v304 && v880 < v881;
        v884 = v880 - v883;
        do
        {
          v885 = v884;
          v48 = v884 >= 2;
          v886 = v884 - 2;
          if (v48)
          {
            v888 = v886 / v307 * v307;
            if (v888 + 1 == v308)
              v889 = 3;
            else
              v889 = 2;
            v887 = v889 + v888;
          }
          else
          {
            v887 = 0;
          }
          v884 = v885 - 1;
        }
        while (v885 == v887 || v885 == v881);
        if (v879 >= v304 || v304 < v885)
        {
          LODWORD(v19) = sub_1ACBEB08C(80937);
        }
        else
        {
          if (!v879)
          {
LABEL_1302:
            LODWORD(v19) = 101;
            if (!*(_BYTE *)(v302 + 17))
              goto LABEL_1320;
            goto LABEL_1318;
          }
          v890 = *(unsigned __int8 **)(v303 + 16);
          if (v890)
          {
            LODWORD(v19) = sub_1ACBEEE90(v890, 0, 0);
            if ((_DWORD)v19)
              goto LABEL_1317;
            for (n = *(_QWORD *)(v303 + 16); n; n = *(_QWORD *)(n + 40))
              *(_BYTE *)(n + 1) &= ~4u;
          }
          LODWORD(v19) = sub_1ACBEEAAC(v303, v885, v304, 0);
          if (!(_DWORD)v19)
          {
            v892 = *(_QWORD *)(*(_QWORD *)(v303 + 24) + 112);
            v893 = *(_DWORD **)(v892 + 40);
            if ((*(_WORD *)(v892 + 52) & 4) != 0 && v893[8] >= *(_DWORD *)(v892 + 48))
            {
              if (!v893[32])
              {
                LODWORD(v19) = 0;
LABEL_2529:
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v303 + 24) + 80) + 28) = bswap32(*(_DWORD *)(v303 + 64));
                if (!*(_BYTE *)(v302 + 17))
                  goto LABEL_1320;
LABEL_1318:
                v896 = *(_DWORD *)(v302 + 20) - 1;
                *(_DWORD *)(v302 + 20) = v896;
                if (!v896)
                {
                  v897 = v302;
                  v898 = v19;
                  sub_1ACBED048(v897);
                  LODWORD(v19) = v898;
                }
LABEL_1320:
                v11 = v1551;
                if ((_DWORD)v19 != 101)
                {
                  v1542 = v19;
                  if ((_DWORD)v19)
                    goto LABEL_2696;
                  goto LABEL_21;
                }
                goto LABEL_1561;
              }
              v894 = sub_1ACBEA110(v892);
            }
            else
            {
              LODWORD(v19) = v893[12];
              if ((_DWORD)v19)
                goto LABEL_2529;
              if (v893[46] <= v893[50])
                v894 = sub_1ACB9A818(v892);
              else
                v894 = sub_1ACBEDEA4(v892);
            }
            LODWORD(v19) = v894;
            goto LABEL_2529;
          }
        }
LABEL_1317:
        if (!*(_BYTE *)(v302 + 17))
          goto LABEL_1320;
        goto LABEL_1318;
      case 0x3Fu:
        v11 = v1551;
        v309 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (*(_BYTE *)(v309 + 2))
          goto LABEL_21;
        v310 = *(uint64_t ***)(v309 + 40);
        v311 = *v310;
        v312 = **v310;
        v313 = (*(uint64_t (**)(void))(v312 + 72))();
        sub_1ACBF1EB0(v1551, (uint64_t)v311);
        if (v313)
        {
          LODWORD(v19) = v313;
          goto LABEL_2696;
        }
        v1542 = 0;
        if (!(*(unsigned int (**)(_QWORD))(v312 + 80))(*(_QWORD *)(v309 + 40)))
          goto LABEL_1702;
        goto LABEL_1703;
      case 0x40u:
        v314 = *((int *)v12 + 4);
        if ((int)v314 < 1)
        {
          v315 = 0;
          v319 = (_DWORD *)v1551;
LABEL_1069:
          v791 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
          v792 = v315 % (8 * *(int *)(v791 + 16));
          if (((*(unsigned __int8 *)(*(_QWORD *)(v791 + 8) + (v792 >> 3)) >> (v792 & 7)) & 1) != 0)
          {
            ++v319[77];
            ++v319[57];
            v12 += 40;
            continue;
          }
          ++v319[78];
          ++v319[58];
          goto LABEL_2381;
        }
        v315 = 0;
        v316 = *((int *)v12 + 3);
        v317 = v316 + v314;
        v318 = v1554 + (v316 << 6);
        v319 = (_DWORD *)v1551;
        while (1)
        {
          v321 = *(_WORD *)(v318 + 20);
          if ((v321 & 0x24) != 0)
          {
            v322 = *(_QWORD *)v318;
          }
          else
          {
            if ((v321 & 8) == 0)
            {
              v320 = v321 & 0x12;
              if ((_DWORD)v320)
                v315 += v320 + 4093;
              goto LABEL_348;
            }
            a2.i64[0] = *(_QWORD *)v318;
            if (*(double *)v318 >= -9.22337204e18)
            {
              if (*(double *)a2.i64 <= 9.22337204e18)
                v322 = (uint64_t)*(double *)a2.i64;
              else
                v322 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v322 = 0x8000000000000000;
            }
          }
          v315 += v322;
LABEL_348:
          v318 += 64;
          if (++v316 >= v317)
            goto LABEL_1069;
        }
      case 0x41u:
      case 0x42u:
        v93 = *((_QWORD *)v12 + 2);
        v94 = *((int *)v12 + 3);
        v95 = (sqlite3_value *)(v1554 + (v94 << 6));
        if (*(sqlite3_value **)v93 == v95)
        {
          v96 = (uint64_t *)v1551;
          goto LABEL_999;
        }
        v96 = (uint64_t *)v1551;
        *(_QWORD *)(v93 + 24) = v1551;
        *(_QWORD *)v93 = v95;
        *(_BYTE *)(v93 + 40) = v1541;
        v97 = *(unsigned __int8 *)(v93 + 42);
        if (!*(_BYTE *)(v93 + 42))
          goto LABEL_999;
        v98 = *((int *)v12 + 2);
        if (v97 >= 4)
        {
          v99 = v97 & 3;
          a2.i64[0] = *((int *)v12 + 2);
          v750 = vdupq_n_s64(v98);
          v751 = *(unsigned __int8 *)(v93 + 42);
          v752 = v97 & 0xFC;
          do
          {
            a4.i64[0] = v751;
            v753 = vaddq_s64(vdupq_n_s64(v751), (int64x2_t)xmmword_1ACCBDCC0);
            v754 = vdupq_n_s64(v1554);
            v755 = (int8x16_t)vaddq_s64(v754, vshlq_n_s64(vaddq_s64(v753, v750), 6uLL));
            v756 = (int8x16_t)vaddq_s64(vdupq_lane_s64(vshlq_n_s64(vaddq_s64(a2, a4), 6uLL).i64[0], 0), vaddq_s64(v754, (int64x2_t)xmmword_1ACCBDCD0));
            v757 = v93 + 8 * v753.i64[0];
            *(int8x16_t *)(v757 + 40) = vextq_s8(v755, v755, 8uLL);
            a4 = (int64x2_t)vextq_s8(v756, v756, 8uLL);
            *(int64x2_t *)(v757 + 24) = a4;
            v751 -= 4;
            v752 -= 4;
          }
          while (v752);
          if ((v97 & 0xFC) == v97)
          {
LABEL_999:
            *(_WORD *)(v1554 + (v94 << 6) + 20) = *(_WORD *)(v1554 + (v94 << 6) + 20) & 0xF240 | 1;
            (*(void (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 24))(v93);
            v759 = *(_DWORD *)(v93 + 36);
            if (!v759)
              goto LABEL_21;
            v1538 = v18;
            v630 = v1542;
            if (v759 >= 1)
            {
              v760 = sqlite3_value_text(v95);
              sub_1ACBF1C7C(v96, "%s", v761, v762, v763, v764, v765, v766, v760);
              v630 = *(_DWORD *)(v93 + 36);
            }
            v767 = *v1477;
            if (*v1477)
            {
              v768 = *(_DWORD *)(v93 + 32);
              v769 = *((_DWORD *)v12 + 1);
              v770 = v1477;
              do
              {
                while ((v768 & 0x80000000) == 0)
                {
                  if (*(_DWORD *)v767 == v768)
                  {
                    v771 = *(_DWORD *)(v767 + 4);
                    if ((v771 & 0x80000000) == 0 && (v771 > 0x1F || ((v769 >> v771) & 1) == 0))
                      break;
                  }
                  v770 = (uint64_t *)(v767 + 24);
                  v767 = *(_QWORD *)(v767 + 24);
                  if (!v767)
                    goto LABEL_20;
                }
                v772 = *(void (**)(_QWORD))(v767 + 16);
                if (v772)
                  v772(*(_QWORD *)(v767 + 8));
                *v770 = *(_QWORD *)(v767 + 24);
                sub_1ACBE0F9C((_QWORD *)v13, (_QWORD *)v767);
                v767 = *v770;
              }
              while (*v770);
            }
LABEL_20:
            v1542 = 0;
            *(_DWORD *)(v93 + 36) = 0;
            v18 = v1538;
            v11 = v1551;
            if (!v630)
              goto LABEL_21;
LABEL_2553:
            LODWORD(v19) = v630;
            goto LABEL_2696;
          }
        }
        else
        {
          v99 = *(unsigned __int8 *)(v93 + 42);
        }
        v758 = v1554 + ((v99 + v98) << 6) - 64;
        do
        {
          *(_QWORD *)(v93 + 40 + 8 * v99) = v758;
          v758 -= 64;
          v1293 = v99-- > 1;
        }
        while (v1293);
        goto LABEL_999;
      case 0x43u:
        v323 = *((int *)v12 + 1);
        if ((*(_WORD *)(v1554 + (v323 << 6) + 20) & 4) == 0)
          goto LABEL_21;
        v12 = &v1552[40 * *(_QWORD *)(v1554 + (v323 << 6)) + 40];
        continue;
      case 0x44u:
        v324 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v12 = &v1552[40 * *(int *)&v1552[40 * *(_QWORD *)v324 + 8] - 40];
        *(_WORD *)(v324 + 20) = 0;
        goto LABEL_21;
      case 0x45u:
        if ((*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 3) << 6) + 20) & 1) != 0)
          goto LABEL_362;
        goto LABEL_21;
      case 0x46u:
LABEL_362:
        v11 = v1551;
        v325 = *(uint64_t **)(v1551 + 352);
        v326 = *((_DWORD *)v12 + 1);
        if (v325)
        {
          if (!v326)
          {
            *(_QWORD *)(v1551 + 352) = v325[1];
            --*(_DWORD *)(v1551 + 368);
            v327 = *(_QWORD *)(v1551 + 56);
            v328 = *(_QWORD *)(v13 + 128) + v327;
            *(_QWORD *)(v13 + 120) = v327;
            *(_QWORD *)(v13 + 128) = v328;
            v329 = sub_1ACBF0C40(v325);
            v330 = *(_QWORD *)(v1551 + 136);
            if (*((_DWORD *)v12 + 2) == 4)
              v329 = *(_DWORD *)(v330 + 40 * v329 + 8) - 1;
            v1554 = *(_QWORD *)(v1551 + 104);
            v1552 = *(unsigned __int8 **)(v1551 + 136);
            v12 = (unsigned __int8 *)(v330 + 40 * v329 + 40);
            continue;
          }
          *(_DWORD *)(v1551 + 52) = v326;
          *(_BYTE *)(v1551 + 264) = *((_DWORD *)v12 + 2);
        }
        else
        {
          *(_DWORD *)(v1551 + 52) = v326;
          *(_BYTE *)(v1551 + 264) = *((_DWORD *)v12 + 2);
          if (!v326)
            goto LABEL_2617;
        }
        if (*((_WORD *)v12 + 1))
        {
          sub_1ACBF1C7C((uint64_t *)v1551, "%s constraint failed", a6, (uint64_t)a7, a8, a9, a10, a11, (char)off_1E5C739F0[*((unsigned __int16 *)v12 + 1) - 1]);
          v1433 = *(const char **)(v1551 + 168);
          if (*((_QWORD *)v12 + 2))
          {
            v1433 = (const char *)sub_1ACB6DDD0(v13, "%z: %s", v1427, v1428, v1429, v1430, v1431, v1432, *(_QWORD *)(v1551 + 168));
            *v1479 = (char *)v1433;
          }
        }
        else
        {
          sub_1ACBF1C7C((uint64_t *)v1551, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, *((_QWORD *)v12 + 2));
          v1433 = *(const char **)(v1551 + 168);
        }
        sqlite3_log(*((_DWORD *)v12 + 1), "abort at %d in [%s]: %s", -858993459 * ((v12 - v1552) >> 3), *(const char **)(v1551 + 320), v1433);
LABEL_2617:
        if (sub_1ACB68C50(v1551) == 5)
        {
LABEL_2618:
          v1442 = 5;
          *(_DWORD *)(v11 + 52) = 5;
          goto LABEL_2738;
        }
LABEL_2666:
        if (*(_DWORD *)(v11 + 52))
          v1442 = 1;
        else
          v1442 = 101;
        goto LABEL_2738;
      case 0x47u:
        v331 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v331 + 20) & 0x9000) != 0)
          v331 = sub_1ACBF7980(v331);
        else
          *(_WORD *)(v331 + 20) = 4;
        *(_QWORD *)v331 = *((int *)v12 + 1);
        v12 += 40;
        continue;
      case 0x48u:
        v332 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v332 + 20) & 0x9000) != 0)
          v332 = sub_1ACBF7980(v332);
        else
          *(_WORD *)(v332 + 20) = 4;
        *(_QWORD *)v332 = **((_QWORD **)v12 + 2);
        v12 += 40;
        continue;
      case 0x49u:
        goto LABEL_1625;
      case 0x4Au:
      case 0x4Bu:
        v100 = *(_QWORD *)(v1551 + 104);
        v101 = *((_DWORD *)v12 + 2);
        v102 = v101;
        v103 = v100 + ((uint64_t)v101 << 6);
        v105 = *(_WORD *)(v103 + 20);
        v104 = (__int16 *)(v103 + 20);
        if ((v105 & 0x9000) != 0)
        {
          sub_1ACBF7980(v100 + ((uint64_t)v101 << 6));
          v101 = *((_DWORD *)v12 + 2);
        }
        else
        {
          *v104 = 4;
        }
        v687 = *((_DWORD *)v12 + 3) - v101;
        if (*((_DWORD *)v12 + 1))
          v688 = 257;
        else
          v688 = 1;
        *v104 = v688;
        v689 = v100 + (v102 << 6);
        *(_DWORD *)(v689 + 16) = 0;
        if (v687 >= 1)
        {
          v690 = v689 + 64;
          v691 = v687 + 1;
          do
          {
            if ((*(_WORD *)(v690 + 20) & 0x9000) != 0)
              sub_1ACBF2A54((int *)v690);
            else
              *(_WORD *)(v690 + 20) = 1;
            *(_WORD *)(v690 + 20) = v688;
            *(_DWORD *)(v690 + 16) = 0;
            v690 += 64;
            --v691;
          }
          while (v691 > 1);
        }
        goto LABEL_21;
      case 0x4Cu:
        v333 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v334 = *(_WORD *)(v333 + 20) & 0xFFC0;
        goto LABEL_2198;
      case 0x4Du:
        v11 = v1551;
        v335 = *(_QWORD *)(v1551 + 104);
        v336 = *((int *)v12 + 2);
        v337 = v335 + (v336 << 6);
        v339 = *(_WORD *)(v337 + 20);
        v338 = (_WORD *)(v337 + 20);
        if ((v339 & 0x9000) != 0)
          sub_1ACBF7980(v335 + (v336 << 6));
        else
          *v338 = 4;
        v793 = (char *)*((_QWORD *)v12 + 2);
        if (v793)
        {
          sub_1ACB57870(v335 + (v336 << 6), v793, *((int *)v12 + 1), 0, 0);
        }
        else
        {
          sub_1ACBC723C(v335 + (v336 << 6), *((_DWORD *)v12 + 1));
          if (sub_1ACBA6920((int *)(v335 + (v336 << 6))))
            goto LABEL_8;
        }
        *(_BYTE *)(v335 + (v336 << 6) + 22) = v1541;
        v12 += 40;
        continue;
      case 0x4Eu:
        v340 = *(_QWORD *)(v1551 + 128);
        v341 = *((int *)v12 + 1) - 1;
        v342 = (int64x2_t *)(v340 + (v341 << 6));
        if ((v342[1].i16[2] & 0x12) != 0)
        {
          v343 = v342[1].i32[0];
          if ((v342[1].i16[2] & 0x400) != 0)
            v343 += v342->i32[0];
          if (v343 > *(_DWORD *)(*(_QWORD *)(v340 + (v341 << 6) + 24) + 136))
            goto LABEL_2693;
        }
        v344 = (__n128 *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6));
        if ((v344[1].n128_u16[2] & 0x9000) != 0)
          sub_1ACBF2A54((int *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6)));
        a2 = *v342;
        v344[1].n128_u64[0] = v342[1].u64[0];
        *v344 = (__n128)a2;
        v344[1].n128_u16[2] = v344[1].n128_u16[2] & 0x8FBF | 0x2040;
        v12 += 40;
        continue;
      case 0x4Fu:
        v345 = *((_DWORD *)v12 + 3);
        v346 = (uint64_t)*((int *)v12 + 2) << 6;
        v347 = (uint64_t)*((int *)v12 + 1) << 6;
        while (1)
        {
          v348 = v1554 + v346;
          if ((*(_WORD *)(v1554 + v346 + 20) & 0x9000) != 0 || *(_DWORD *)(v348 + 32))
            sub_1ACBF2A04(v1554 + v346);
          v349 = v1554 + v347;
          a2 = *(int64x2_t *)(v1554 + v347);
          v350 = *(_OWORD *)(v1554 + v347 + 16);
          a4 = *(int64x2_t *)(v1554 + v347 + 32);
          v351 = *(_OWORD *)(v1554 + v347 + 48);
          *(int64x2_t *)(v348 + 32) = a4;
          *(_OWORD *)(v348 + 48) = v351;
          *(int64x2_t *)v348 = a2;
          *(_OWORD *)(v348 + 16) = v350;
          *(_WORD *)(v349 + 20) = 1;
          *(_DWORD *)(v349 + 32) = 0;
          if ((*(_WORD *)(v348 + 20) & 0x4000) != 0)
          {
            if (sub_1ACBC6854((int *)v348))
              goto LABEL_2549;
          }
          v346 += 64;
          v347 += 64;
          if (!--v345)
            goto LABEL_21;
        }
      case 0x50u:
        v352 = *((_DWORD *)v12 + 3);
        v353 = (uint64_t)*((int *)v12 + 2) << 6;
        v354 = (uint64_t)*((int *)v12 + 1) << 6;
        while (2)
        {
          v355 = v1554 + v353;
          v356 = v1554 + v354;
          if ((*(_WORD *)(v1554 + v353 + 20) & 0x9000) != 0)
          {
            sub_1ACBF79C0(v1554 + v353, (__int128 *)v356, 0x4000);
            LOWORD(v357) = *(_WORD *)(v355 + 20);
          }
          else
          {
            a2 = *(int64x2_t *)v356;
            v357 = *(_QWORD *)(v356 + 16);
            *(_QWORD *)(v355 + 16) = v357;
            *(int64x2_t *)v355 = a2;
            LOWORD(v357) = WORD2(v357);
            if ((*(_WORD *)(v356 + 20) & 0x2000) == 0)
            {
              LOWORD(v357) = WORD2(v357) & 0x8FFF | 0x4000;
              *(_WORD *)(v355 + 20) = v357;
            }
          }
          if ((v357 & 0x4000) == 0)
            goto LABEL_397;
          if (sub_1ACBC6854((int *)v355))
            goto LABEL_2549;
          LOWORD(v357) = *(_WORD *)(v355 + 20);
LABEL_397:
          if ((v357 & 0x800) != 0 && (*((_WORD *)v12 + 1) & 2) != 0)
            *(_WORD *)(v355 + 20) = v357 & 0xF7FF;
          if (v352)
          {
            --v352;
            v353 += 64;
            v354 += 64;
            continue;
          }
          goto LABEL_21;
        }
      case 0x51u:
        v358 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v359 = (__n128 *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6));
        if ((v359[1].n128_u16[2] & 0x9000) != 0)
          goto LABEL_1162;
        a2 = *(int64x2_t *)v358;
        v359[1].n128_u64[0] = *(_QWORD *)(v358 + 16);
        *v359 = (__n128)a2;
        if ((*(_BYTE *)(v358 + 21) & 0x20) != 0)
          goto LABEL_21;
        v359[1].n128_u16[2] = v359[1].n128_u16[2] & 0x8FFF | 0x4000;
        v12 += 40;
        continue;
      case 0x52u:
        v360 = *(_QWORD *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6));
        v361 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        v231 = (_WORD *)(v361 + 20);
        if ((*(_WORD *)(v361 + 20) & 0x9000) != 0)
          goto LABEL_406;
        goto LABEL_2389;
      case 0x53u:
        v11 = v1551;
        if (*(uint64_t *)(v1551 + 80) < 1)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        *(_DWORD *)(v1551 + 52) = 787;
        *(_BYTE *)(v1551 + 264) = 2;
        sub_1ACBF1C7C((uint64_t *)v1551, "FOREIGN KEY constraint failed", a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
        if (*(char *)(v1551 + 266) >= 0)
          LODWORD(v19) = 1;
        else
          LODWORD(v19) = 787;
        goto LABEL_2696;
      case 0x54u:
        v11 = v1551;
        *(_DWORD *)(v1551 + 44) = (*(_DWORD *)(v1551 + 44) | 1) + 2;
        *(_QWORD *)(v1551 + 160) = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        if (*(_BYTE *)(v13 + 103))
          goto LABEL_8;
        if ((*(_BYTE *)(v13 + 110) & 4) != 0)
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v13 + 240))(4, *(_QWORD *)(v13 + 248), v1551, 0);
        *(_DWORD *)(v1551 + 48) = -858993459 * ((unint64_t)(v12 - v1552) >> 3) + 1;
        v1442 = 100;
        goto LABEL_2738;
      case 0x55u:
        v362 = *((int *)v12 + 1);
        if (!(_DWORD)v362)
          goto LABEL_21;
        v363 = v1554;
        goto LABEL_427;
      case 0x56u:
        v364 = *((int *)v12 + 1);
        v365 = v1554 + (v364 << 6);
        if (v1554)
        {
          v366 = *(_WORD *)(v365 + 20);
          if ((v366 & 0x24) != 0)
          {
            v367 = *(_QWORD *)v365;
            goto LABEL_1943;
          }
          if ((v366 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v365;
            v1158 = 0x7FFFFFFFFFFFFFFFLL;
            if (*(double *)v365 <= 9.22337204e18)
              v1158 = (uint64_t)*(double *)v365;
            if (*(double *)a2.i64 >= -9.22337204e18)
              v367 = v1158;
            else
              v367 = 0x8000000000000000;
            goto LABEL_1943;
          }
          if ((v366 & 0x12) != 0 && *(_QWORD *)(v1554 + (v364 << 6) + 8))
          {
            v367 = sub_1ACBF2FC0(v1554 + (v364 << 6));
LABEL_1943:
            *(_QWORD *)v365 = v367;
            *(_WORD *)(v1554 + (v364 << 6) + 20) = *(_WORD *)(v1554 + (v364 << 6) + 20) & 0xF240 | 4;
            *(_QWORD *)v365 = v367 + *((int *)v12 + 2);
            v12 += 40;
            continue;
          }
        }
        else
        {
          sub_1ACBBE20C(89699);
        }
        v367 = 0;
        goto LABEL_1943;
      case 0x57u:
        v368 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v368 + 20) & 0x24) == 0)
          goto LABEL_21;
        sub_1ACBC9D30(v368);
        v12 += 40;
        continue;
      case 0x58u:
        v369 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v369 + 20) & 0x400) != 0)
        {
          v370 = sub_1ACBA6920((int *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6)));
          if (v370)
            goto LABEL_2551;
        }
        v65 = sub_1ACBF3B8C(v369, v12[8], v1541);
        v11 = v1551;
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x5Au:
        v371 = v17;
        if ((*((_WORD *)v12 + 1) & 1) != 0)
          v372 = *((_QWORD *)v12 - 3) + 4;
        else
          v372 = 0;
        v1522 = *((unsigned int *)v12 + 3);
        if ((int)v1522 < 1)
        {
          v12 += 40;
        }
        else
        {
          v1537 = v18;
          v729 = 0;
          v730 = *((_QWORD *)v12 + 2);
          v1497 = *((_DWORD *)v12 + 1);
          v1489 = *((_DWORD *)v12 + 2);
          while (1)
          {
            v731 = v12;
            v732 = v371;
            v733 = v372 ? *(_DWORD *)(v372 + 4 * v729) : v729;
            v734 = *(_BYTE *)(*(_QWORD *)(v730 + 24) + v729);
            v735 = (v733 + v1497);
            v736 = (v733 + v1489);
            v737 = sub_1ACB93348(v1554 + (v735 << 6), v1554 + (v736 << 6), *(_QWORD *)(v730 + 32 + 8 * v729));
            if (v737)
              break;
            ++v729;
            v371 = v732;
            v12 = v731;
            if (v1522 == v729)
            {
              v1480 = 0;
              v18 = v1537;
              v17 = v371;
              v12 += 40;
              goto LABEL_22;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v730 + 24) + v729) & 2) != 0
            && ((*(_WORD *)(v1554 + (v735 << 6) + 20) & 1) != 0 || (*(_WORD *)(v1554 + (v736 << 6) + 20) & 1) != 0))
          {
            v737 = -v737;
          }
          if ((v734 & 1) != 0)
            v866 = -v737;
          else
            v866 = v737;
          v1480 = v866;
          v867 = v732;
          v18 = v1537;
          v868 = v731;
          v17 = v867;
          v12 = v868 + 40;
        }
        continue;
      case 0x5Bu:
        v373 = *((int *)v12 + 2);
        v374 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v375 = *(_WORD *)(v374 + 20);
        if ((v375 & 0x24) != 0)
        {
          v376 = *(_QWORD *)v374 == 0;
        }
        else
        {
          if ((v375 & 1) != 0)
          {
            v1070 = *((_DWORD *)v12 + 3);
            goto LABEL_2388;
          }
          if ((v375 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v374;
          }
          else if ((v375 & 0x12) != 0)
          {
            *(double *)a2.i64 = sub_1ACBF2F88(v374);
          }
          else
          {
            a2.i64[0] = 0;
          }
          v376 = *(double *)a2.i64 == 0.0;
        }
        v1070 = !v376;
LABEL_2388:
        v361 = v1554 + (v373 << 6);
        v360 = *((_DWORD *)v12 + 4) ^ v1070;
        v231 = (_WORD *)(v361 + 20);
        if ((*(_WORD *)(v361 + 20) & 0x9000) != 0)
        {
LABEL_406:
          sub_1ACBF327C(v361, v360);
          v12 += 40;
          continue;
        }
LABEL_2389:
        *(_QWORD *)v361 = v360;
        goto LABEL_2390;
      case 0x5Cu:
        v363 = v1554;
        if ((*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 1) << 6) + 20) & 1) == 0
          && (*(_WORD *)(v1554 + ((uint64_t)*((int *)v12 + 3) << 6) + 20) & 1) == 0)
        {
          v362 = *((int *)v12 + 2);
LABEL_427:
          v377 = v363 + (v362 << 6);
          v231 = (_WORD *)(v377 + 20);
          if ((*(_WORD *)(v377 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v377, 0);
            v12 += 40;
          }
          else
          {
            *(_QWORD *)v377 = 0;
LABEL_2390:
            *v231 = 4;
            v12 += 40;
          }
          continue;
        }
        v693 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        v129 = (_WORD *)(v693 + 20);
        if ((*(_WORD *)(v693 + 20) & 0x9000) == 0)
          goto LABEL_929;
        goto LABEL_2341;
      case 0x5Eu:
        a2 = 0uLL;
        memset(__buf, 0, sizeof(__buf));
        v11 = v1551;
        v378 = *((_DWORD *)v12 + 2);
        v379 = *(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1);
        v380 = *(_DWORD *)(v1551 + 44);
        while (2)
        {
          v381 = *(_QWORD *)v379;
          v382 = *(int **)(*(_QWORD *)v379 + 80);
          if (*(_DWORD *)(*(_QWORD *)v379 + 24) == v380)
          {
            if (**(_BYTE **)(v381 + 40))
            {
              v65 = sub_1ACBF3F00(v381);
              if (v65)
                goto LABEL_2548;
              while (1)
              {
LABEL_438:
                while (1)
                {
                  v382 = *(int **)(v381 + 80);
                  v380 = *(_DWORD *)(v1551 + 44);
                  if (*(_DWORD *)(v381 + 24) == v380)
                    break;
                  if (*(_BYTE *)(v381 + 2))
                  {
                    v1542 = 0;
                    goto LABEL_1771;
                  }
                  v383 = *(_QWORD *)(v381 + 40);
                  if (*(_BYTE *)(v381 + 3))
                  {
                    v1542 = 0;
                    goto LABEL_448;
                  }
                  if (!*(_BYTE *)v383)
                  {
                    v1542 = 0;
                    goto LABEL_1824;
                  }
                  v65 = sub_1ACBF3F00(v381);
                  if (v65)
                    goto LABEL_2548;
                }
                if (!**(_BYTE **)(v381 + 40))
                  break;
                v65 = sub_1ACBF3F00(v381);
                if (v65)
                  goto LABEL_2548;
              }
              v1542 = 0;
            }
            LODWORD(v1084) = *(unsigned __int16 *)(v381 + 66);
            goto LABEL_1768;
          }
          if (*(_BYTE *)(v381 + 2))
          {
LABEL_1771:
            if (*(_BYTE *)v381 != 3 || (v1086 = *(unsigned int *)(v381 + 28), (int)v1086 < 1))
            {
              v693 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
              v642 = (_WORD *)(v693 + 20);
              if ((*(_WORD *)(v693 + 20) & 0x9000) != 0)
                goto LABEL_2341;
              goto LABEL_2342;
            }
            v1087 = v1554 + (v1086 << 6);
            v1088 = *(_DWORD *)(v1087 + 16);
            *(_DWORD *)(v381 + 96) = v1088;
            *(_DWORD *)(v381 + 100) = v1088;
            v1089 = *(char **)(v1087 + 8);
            *(_QWORD *)(v381 + 88) = v1089;
            goto LABEL_1827;
          }
          v383 = *(_QWORD *)(v381 + 40);
          if (!*(_BYTE *)(v381 + 3))
          {
            if (*(_BYTE *)v383)
            {
              v65 = sub_1ACBF3F00(v381);
              if (v65)
                goto LABEL_2548;
              goto LABEL_438;
            }
            goto LABEL_1824;
          }
LABEL_448:
          v384 = *(_QWORD *)(v381 + 8);
          if (v384)
          {
            v385 = *(_DWORD *)(v384 + 4 * (v378 + 1));
            if (v385)
            {
              v379 = v381 + 32;
              v378 = v385 - 1;
              continue;
            }
          }
          break;
        }
        v1332 = v382;
        v65 = sub_1ACBF3E90(v381);
        if (!v65)
        {
          v1542 = 0;
          v382 = v1332;
LABEL_1824:
          v1117 = v382;
          sub_1ACBEF184(v383);
          v382 = v1117;
          *(_DWORD *)(v381 + 96) = *(_DWORD *)(v383 + 64);
          v1118 = *(unsigned __int16 *)(v383 + 68);
          v1089 = *(char **)(v383 + 56);
          v1119 = *(_DWORD *)(*(_QWORD *)(v383 + 136) + 88) - (_DWORD)v1089;
          if (v1118 > v1119)
            v1118 = v1119 & ~(v1119 >> 31);
          *(_DWORD *)(v381 + 100) = v1118;
          *(_QWORD *)(v381 + 88) = v1089;
          v380 = *(_DWORD *)(v1551 + 44);
LABEL_1827:
          *(_DWORD *)(v381 + 24) = v380;
          v1120 = *v1089;
          *v382 = *v1089;
          if (v1120 < 0)
          {
            v1165 = v382;
            v1166 = sub_1ACBF3F64(v1089, v382);
            v382 = v1165;
            v1121 = v1166;
          }
          else
          {
            v1121 = 1;
          }
          *(_DWORD *)(v381 + 56) = v1121;
          *(_WORD *)(v381 + 66) = 0;
          v1154 = *v382;
          if (*(unsigned int *)(v381 + 100) >= v1154)
          {
            v1509 = v12;
            v1518 = v17;
            v1531 = v18;
            LODWORD(v1084) = 0;
            v1155 = *(_QWORD *)(v381 + 88);
LABEL_1971:
            v1167 = v382[v1084];
            v1168 = (char *)(v1155 + v1121);
            v1493 = v1155;
            v1500 = v382;
            v1169 = v1155 + v1154;
            v1170 = v381 + 112;
            v1171 = v1084;
            while (1)
            {
              v1172 = *v1168;
              v1085 = *v1168;
              *(_DWORD *)(v1170 + 4 * v1171) = v1085;
              if ((v1172 & 0x80000000) == 0)
              {
                ++v1168;
                v1084 = byte_1ACCB6D60[v1085];
                goto LABEL_1984;
              }
              v1173 = *v1168;
              v1174 = v1168[1];
              if (v1168[1] < 0)
              {
                v1176 = v1168[2];
                if (v1176 < 0)
                {
                  *(_QWORD *)&v1558 = 0;
                  v1177 = sub_1ACB8A6CC(v1168, (unint64_t *)&v1558);
                  v1175 = v1177;
                  v1085 = v1558;
                  if (DWORD1(v1558))
                  {
                    v1168 += v1177;
                    v1085 = -1;
                    *(_DWORD *)(v1170 + 4 * v1171) = -1;
                    v382 = v1500;
                    goto LABEL_1981;
                  }
                  v382 = v1500;
                }
                else
                {
                  v1085 = v1176 & 0x7F | (v1173 << 14) & 0x1FC07F | ((v1174 & 0x7F) << 7);
                  v1175 = 3;
                }
              }
              else
              {
                v1085 = ((v1173 & 0x7F) << 7) | v1174;
                v1175 = 2;
              }
              v1168 += v1175;
              *(_DWORD *)(v1170 + 4 * v1171) = v1085;
              if (v1085 < 0x80)
              {
                LODWORD(v1084) = byte_1ACCB6D60[v1085];
                goto LABEL_1983;
              }
LABEL_1981:
              LODWORD(v1084) = (v1085 - 12) >> 1;
LABEL_1983:
              v1084 = v1084;
LABEL_1984:
              v1167 += v1084;
              LOWORD(v1084) = v1171 + 1;
              v382[v1171 + 1] = v1167;
              if (v1171 < v378)
              {
                ++v1171;
                if ((unint64_t)v1168 < v1169)
                  continue;
              }
              LODWORD(v1084) = (unsigned __int16)v1084;
              if ((unint64_t)v1168 >= v1169)
              {
                v18 = v1531;
                if ((unint64_t)v1168 <= v1169 && v1167 == *(_DWORD *)(v381 + 96))
                  goto LABEL_2312;
              }
              else
              {
                v18 = v1531;
                if (v1167 <= *(unsigned int *)(v381 + 96))
                  goto LABEL_2312;
              }
              LODWORD(v1084) = *v382;
              if (*v382)
              {
                if (*(_QWORD *)(v381 + 88))
                {
                  v11 = v1551;
                  v17 = v1518;
                }
                else
                {
                  v11 = v1551;
                  v17 = v1518;
                  if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2]))
                    sub_1ACBF2A04((uint64_t)__buf);
                }
                v12 = v1509;
LABEL_2473:
                v1385 = *((_DWORD *)v1552 + 3);
                v1386 = __OFSUB__(v1385, 1);
                v1387 = v1385 - 1;
                if (v1387 < 0 == v1386)
                {
                  v12 = &v1552[40 * v1387 + 40];
                  goto LABEL_22;
                }
                v1422 = 103158;
LABEL_2584:
                LODWORD(v19) = sub_1ACBEB08C(v1422);
                goto LABEL_2696;
              }
              LODWORD(v1168) = v1169;
LABEL_2312:
              *(_WORD *)(v381 + 66) = v1084;
              *(_DWORD *)(v381 + 56) = (_DWORD)v1168 - v1493;
              if (*(_QWORD *)(v381 + 88))
              {
                v12 = v1509;
                v17 = v1518;
              }
              else
              {
                v12 = v1509;
                v17 = v1518;
                if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2]))
                {
                  sub_1ACBF2A04((uint64_t)__buf);
                  v382 = v1500;
                  LODWORD(v1084) = *(unsigned __int16 *)(v381 + 66);
                }
              }
LABEL_2316:
              if (v378 < v1084)
              {
                v1532 = v18;
LABEL_2318:
                v1318 = *((int *)v12 + 3);
                a10 = v1554 + (v1318 << 6);
                v1319 = (_WORD *)(a10 + 20);
                if ((*(_WORD *)(a10 + 20) & 0x9000) != 0)
                {
                  v1320 = (int *)(v1554 + (v1318 << 6));
                  v1527 = v378;
                  v1321 = *((int *)v12 + 3);
                  v1322 = v382;
                  v1323 = a10;
                  sub_1ACBF2A54(v1320);
                  a10 = v1323;
                  v382 = v1322;
                  v1318 = v1321;
                  v378 = v1527;
                }
                if (*(_DWORD *)(v381 + 100) < v382[v378 + 1])
                {
                  *(_BYTE *)(v1554 + (v1318 << 6) + 22) = v1541;
                  v1324 = *((_WORD *)v12 + 1) & 0xC0;
                  if ((*((_WORD *)v12 + 1) & 0xC0) == 0)
                    goto LABEL_2326;
                  if (v1324 != 128)
                  {
                    if (v1085 < 0xC)
                      goto LABEL_2327;
                    if ((v1085 & 1) != 0 && v1324 != 192)
                    {
LABEL_2326:
                      if (v1085 > 0x7F)
                        goto LABEL_2328;
LABEL_2327:
                      if (byte_1ACCB6D60[v1085])
                      {
LABEL_2328:
                        v1325 = sub_1ACBF4044(v381, v378, v1085, v382[v378], *(_DWORD *)(v1551 + 44), v1476, a10);
                        LODWORD(v19) = v1325;
                        v18 = v1532;
                        if (!v1325)
                        {
                          v1542 = 0;
                          v12 += 40;
                          goto LABEL_22;
                        }
                        if (v1325 != 18)
                        {
                          v11 = v1551;
                          if (v1325 != 7)
                            goto LABEL_2696;
                          goto LABEL_8;
                        }
LABEL_2693:
                        v11 = v1551;
                        sub_1ACBF1C7C((uint64_t *)v1551, "string or blob too big", a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
                        LODWORD(v19) = 18;
                        goto LABEL_2696;
                      }
                    }
                  }
                  v1327 = byte_1ACCB6548;
LABEL_2335:
                  sub_1ACB8A864(v1327, v1085, a10);
                  v18 = v1532;
                  v12 += 40;
                  goto LABEL_22;
                }
                v1326 = (char *)(*(_QWORD *)(v381 + 88) + v382[v378]);
                if (v1085 <= 0xB)
                {
                  v1327 = v1326;
                  goto LABEL_2335;
                }
                v1328 = (unint64_t)(v1085 - 12) >> 1;
                v1329 = v1554 + (v1318 << 6);
                *(_DWORD *)(v1329 + 16) = v1328;
                *(_BYTE *)(v1329 + 22) = v1541;
                if (*(_DWORD *)(v1329 + 32) >= (int)v1328 + 2)
                {
                  v1331 = *(void **)(v1329 + 40);
                  *(_QWORD *)(v1329 + 8) = v1331;
                  v1330 = v1554;
                  goto LABEL_2484;
                }
                if ((int)v1328 > *(_DWORD *)(v13 + 136))
                {
                  LOBYTE(v18) = v1532;
                  goto LABEL_2693;
                }
                *v1319 = 1;
                if (!sub_1ACB7E454(a10, (int)v1328 + 2, 0))
                {
                  v1330 = v1554;
                  v1331 = *(void **)(v1554 + (v1318 << 6) + 8);
LABEL_2484:
                  v1390 = v1330 + (v1318 << 6);
                  memcpy(v1331, v1326, (unint64_t)(v1085 - 12) >> 1);
                  *(_BYTE *)(*(_QWORD *)(v1390 + 8) + v1328) = 0;
                  *(_BYTE *)(*(_QWORD *)(v1390 + 8) + v1328 + 1) = 0;
                  *v1319 = word_1ACCB6D5C[v1085 & 1];
                  v18 = v1532;
                  v12 += 40;
                  goto LABEL_22;
                }
LABEL_2557:
                LOBYTE(v18) = v1532;
                v11 = v1551;
LABEL_8:
                if (!*(_BYTE *)(v13 + 103) && !*(_BYTE *)(v13 + 104))
                {
                  *(_BYTE *)(v13 + 103) = 1;
                  if (*(int *)(v13 + 220) >= 1)
                    *(_DWORD *)(v13 + 424) = 1;
                  ++*(_DWORD *)(v13 + 432);
                  *(_WORD *)(v13 + 436) = 0;
                  v20 = *(_QWORD *)(v13 + 344);
                  if (v20)
                  {
                    sub_1ACBCB308(v20, "out of memory", a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
                    for (ii = *(_QWORD *)(v13 + 344); ; ++*(_DWORD *)(ii + 48))
                    {
                      *(_DWORD *)(ii + 24) = 7;
                      ii = *(_QWORD *)(ii + 256);
                      if (!ii)
                        break;
                    }
                  }
                }
                sub_1ACBF1C7C((uint64_t *)v11, "out of memory", a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
                LODWORD(v19) = 7;
                goto LABEL_2696;
              }
              v693 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
              if (v12[1] == 246)
              {
                sub_1ACB99FCC(v693, *((__int128 **)v12 + 2), 0x2000);
                v12 += 40;
                goto LABEL_22;
              }
              v642 = (_WORD *)(v693 + 20);
              if ((*(_WORD *)(v693 + 20) & 0x9000) != 0)
              {
LABEL_2341:
                sub_1ACBF2A54((int *)v693);
                v12 += 40;
                goto LABEL_22;
              }
LABEL_2342:
              *v642 = 1;
              v12 += 40;
              goto LABEL_22;
            }
          }
          *(_QWORD *)(v381 + 88) = 0;
          *(_DWORD *)(v381 + 100) = 0;
          if (*v382 > 0x18003 || *v382 > *(_DWORD *)(v381 + 96))
            goto LABEL_2473;
          LODWORD(v1084) = 0;
LABEL_1768:
          if (v378 < v1084)
          {
            v1532 = v18;
            v1085 = *(_DWORD *)(v381 + 4 * v378 + 112);
            goto LABEL_2318;
          }
          v1121 = *(unsigned int *)(v381 + 56);
          v1154 = *v382;
          if (v1121 >= v1154)
          {
            v1085 = 0u;
            goto LABEL_2316;
          }
          v1155 = *(_QWORD *)(v381 + 88);
          v1509 = v12;
          v1518 = v17;
          v1531 = v18;
          if (!v1155)
          {
            memset(__buf, 0, sizeof(__buf));
            v1156 = v382;
            v1157 = sub_1ACBF3FF4(*(_QWORD *)(v381 + 40), *v382, (uint64_t)__buf);
            if (v1157)
            {
              LODWORD(v19) = v1157;
              v11 = v1551;
              goto LABEL_2658;
            }
            v1542 = 0;
            v1155 = *((_QWORD *)&__buf[0] + 1);
            LODWORD(v1084) = *(unsigned __int16 *)(v381 + 66);
            v1121 = *(unsigned int *)(v381 + 56);
            v1154 = *v1156;
            v382 = v1156;
          }
          goto LABEL_1971;
        }
        goto LABEL_2548;
      case 0x5Fu:
        v386 = *((_QWORD *)v12 + 2);
        v387 = *(__int16 *)(v386 + 54);
        if (v387 < 1)
          goto LABEL_21;
        v388 = 0;
        v389 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v390 = (unsigned __int8 *)(*(_QWORD *)(v386 + 8) + 8);
        while (2)
        {
          v698 = *((_WORD *)v390 + 3);
          if ((v698 & 0x60) == 0)
            goto LABEL_857;
          if ((v698 & 0x20) != 0)
            goto LABEL_852;
          if (*((_DWORD *)v12 + 3))
          {
            v389 += 64;
          }
          else
          {
LABEL_857:
            sub_1ACB9A00C(v389, (char)v390[1], v1541);
            v699 = *(_WORD *)(v389 + 20);
            if ((v699 & 1) == 0)
            {
              switch((unint64_t)*v390 >> 4)
              {
                case 2uLL:
                  if ((v699 & 0x10) != 0)
                    break;
                  goto LABEL_2555;
                case 3uLL:
                case 4uLL:
                  if ((v699 & 4) != 0)
                    break;
                  goto LABEL_2555;
                case 5uLL:
                  if ((v699 & 4) != 0)
                  {
                    v700 = *(_QWORD *)v389;
                    if ((unint64_t)(*(_QWORD *)v389 + 0x800000000000) >> 48)
                    {
                      *(double *)a2.i64 = (double)v700;
                      *(double *)v389 = (double)v700;
                      v701 = 8;
                      v702 = -13;
                    }
                    else
                    {
                      v701 = 32;
                      v702 = -37;
                    }
                    *(_WORD *)(v389 + 20) = v702 & v699 | v701;
                  }
                  else if ((v699 & 0x28) == 0)
                  {
LABEL_2555:
                    v11 = v1551;
                    sub_1ACBF1C7C((uint64_t *)v1551, "cannot store %s value in %s column %s.%s", a6, (uint64_t)a7, a8, a9, a10, a11, (char)off_1E5C73A10[byte_1ACCB6445[v699 & 0x3F] - 1]);
                    LODWORD(v19) = 3091;
                    goto LABEL_2696;
                  }
                  break;
                case 6uLL:
                  if ((v699 & 2) != 0)
                    break;
                  goto LABEL_2555;
                default:
                  break;
              }
            }
            v389 += 64;
            LOWORD(v387) = *(_WORD *)(v386 + 54);
          }
LABEL_852:
          ++v388;
          v390 += 16;
          if (v388 >= (__int16)v387)
            goto LABEL_21;
          continue;
        }
      case 0x60u:
        v391 = (_BYTE *)*((_QWORD *)v12 + 2);
        v392 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v395 = *v391;
        v394 = v391 + 1;
        v393 = v395;
        do
        {
          sub_1ACB9A00C(v392, v393, v1541);
          if (*(v394 - 1) == 69)
          {
            v399 = *(_WORD *)(v392 + 20);
            if ((v399 & 4) != 0)
            {
              v400 = *(_QWORD *)v392;
              if ((unint64_t)(*(_QWORD *)v392 + 0x800000000000) >> 48)
              {
                *(double *)a2.i64 = (double)v400;
                *(double *)v392 = (double)v400;
                v396 = 8;
                v397 = -15;
              }
              else
              {
                v396 = 32;
                v397 = -37;
              }
              *(_WORD *)(v392 + 20) = v397 & v399 | v396;
            }
          }
          v398 = *v394++;
          v393 = v398;
          v392 += 64;
        }
        while (v398);
        goto LABEL_21;
      case 0x61u:
        v401 = (_BYTE *)*((_QWORD *)v12 + 2);
        v402 = *((int *)v12 + 2);
        v403 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v1519 = *((int *)v12 + 3);
        if (v401)
        {
          v406 = *v401;
          v405 = v401 + 1;
          v404 = v406;
          v407 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
          do
          {
            sub_1ACB9A00C(v407, v404, v1541);
            if (*(v405 - 1) == 69)
            {
              v409 = *(_WORD *)(v407 + 20);
              if ((v409 & 4) != 0)
                *(_WORD *)(v407 + 20) = v409 & 0xFFDB | 0x20;
            }
            v407 += 64;
            v408 = *v405++;
            v404 = v408;
          }
          while (v408);
        }
        v1505 = v12;
        v1514 = v17;
        v660 = 0;
        v661 = 0;
        v662 = 0;
        v663 = v403 + (v402 << 6) - 64;
        v1496 = (_DWORD *)(v1554 + (v1519 << 6));
        v664 = (int *)v663;
        v1536 = v18;
        while (1)
        {
          v665 = *((unsigned __int16 *)v664 + 10);
          if ((v665 & 1) != 0)
          {
            v664[9] = ((int)(v665 << 21) >> 31) & 0xA;
            ++v661;
          }
          else
          {
            if ((v665 & 0x24) == 0)
            {
              if ((v665 & 8) == 0)
              {
                v668 = v664[4];
                v669 = ((v665 >> 1) & 1 | (2 * v668)) + 12;
                if ((v665 & 0x400) != 0)
                {
                  v670 = *v664;
                  v669 += 2 * v670;
                  if (v660)
                  {
                    v671 = v670 + v668;
                    if ((int)(v670 + v668) > 0)
                    {
                      v672 = v662;
                      goto LABEL_765;
                    }
                    if ((v665 & 0x10) != 0)
                    {
                      v672 = v662;
                      v671 = 1;
LABEL_765:
                      if (sub_1ACB7E454((uint64_t)v664, v671, 1))
                      {
                        v11 = v1551;
                        v12 = v1505;
                        v17 = v1514;
                        LOBYTE(v18) = v1536;
                        goto LABEL_8;
                      }
                      bzero((void *)(*((_QWORD *)v664 + 1) + v664[4]), *v664);
                      v673 = *v664;
                      v664[4] += *v664;
                      *((_WORD *)v664 + 10) &= 0xF9FFu;
                      v668 += v673;
                      v662 = v672;
                    }
                    else
                    {
                      v668 += v670;
                    }
                  }
                  else
                  {
                    v662 += v670;
                  }
                }
                if (v669 >= 0x80)
                {
                  v675 = v669;
                  v674 = 1;
                  do
                  {
                    v676 = v675 >> 14;
                    v675 >>= 7;
                    ++v674;
                  }
                  while (v676);
                }
                else
                {
                  v674 = 1;
                }
                v660 += v668;
                v661 += v674;
                v664[9] = v669;
                v18 = v1536;
                goto LABEL_736;
              }
              ++v661;
              v660 += 8;
LABEL_752:
              v664[9] = 7;
              goto LABEL_736;
            }
            v666 = *(_QWORD *)v664;
            v667 = *(_QWORD *)v664 ^ (*(uint64_t *)v664 >> 63);
            ++v661;
            if (v667 <= 0x7F)
            {
              if ((unint64_t)v666 > 1 || *(unsigned __int8 *)(v1551 + 265) < 4u)
              {
                ++v660;
                v664[9] = 1;
              }
              else
              {
                v664[9] = v667 + 8;
              }
              goto LABEL_736;
            }
            if (v667 >> 15)
            {
              if (!(v667 >> 23))
              {
                v660 += 3;
                v664[9] = 3;
                goto LABEL_736;
              }
              if (!(v667 >> 31))
              {
                v660 += 4;
                v664[9] = 4;
                goto LABEL_736;
              }
              if (!(v667 >> 47))
              {
                v660 += 6;
                v664[9] = 5;
                goto LABEL_736;
              }
              v660 += 8;
              if ((v665 & 0x20) == 0)
              {
                v664[9] = 6;
                goto LABEL_736;
              }
              *(double *)a2.i64 = (double)v666;
              *(double *)v664 = (double)v666;
              *((_WORD *)v664 + 10) = v665 & 0xFFD7 | 8;
              goto LABEL_752;
            }
            v660 += 2;
            v664[9] = 2;
          }
LABEL_736:
          v92 = v664 == (int *)v403;
          v664 -= 16;
          if (v92)
          {
            if (v661 > 126)
            {
              if (v661 == 127)
              {
                v741 = 1;
              }
              else
              {
                v1002 = v661;
                v741 = 1;
                do
                {
                  v1003 = v1002 >> 14;
                  v1002 >>= 7;
                  ++v741;
                }
                while (v1003);
              }
              v1004 = v741 + v661;
              if ((v741 + v661) >= 0x80)
              {
                v1006 = v1004;
                v1005 = 1;
                v12 = v1505;
                v17 = v1514;
                do
                {
                  v1007 = v1006 >> 14;
                  v1006 >>= 7;
                  ++v1005;
                }
                while (v1007);
              }
              else
              {
                v1005 = 1;
                v12 = v1505;
                v17 = v1514;
              }
              if (v741 >= v1005)
                v677 = v1004;
              else
                v677 = v1004 + 1;
            }
            else
            {
              v677 = v661 + 1;
              v12 = v1505;
              v17 = v1514;
            }
            v1008 = v677;
            v1009 = v660 + v677;
            v1010 = v1554 + (v1519 << 6);
            if (v1009 + v662 <= *(int *)(v1010 + 32))
            {
              *(_QWORD *)(v1010 + 8) = *(_QWORD *)(v1010 + 40);
            }
            else
            {
              if (v1009 + v662 > *(int *)(v13 + 136))
                goto LABEL_2693;
              v1011 = v662;
              v1012 = sub_1ACBF2DDC((uint64_t)v1496, v1009);
              v662 = v1011;
              if (v1012)
                goto LABEL_2549;
            }
            v1013 = v1554 + (v1519 << 6);
            *(_WORD *)(v1013 + 20) = 16;
            *(_DWORD *)(v1013 + 16) = v1009;
            if (v662)
            {
              *v1496 = v662;
              *(_WORD *)(v1013 + 20) = 1040;
            }
            v1014 = *(_BYTE **)(v1013 + 8);
            if ((int)v1008 > 127)
            {
              v1015 = (int8x8_t *)&v1014[(int)sub_1ACBF433C(*(int8x8_t **)(v1013 + 8), v1008)];
            }
            else
            {
              *v1014 = v1008;
              v1015 = (int8x8_t *)(v1014 + 1);
            }
            v1016 = &v1014[v1008];
            while (2)
            {
              v1017 = *(unsigned int *)(v403 + 36);
              if (v1017 <= 7)
              {
                v1015->i8[0] = v1017;
                v1015 = (int8x8_t *)((char *)v1015 + 1);
                if ((_DWORD)v1017)
                {
                  v1018 = *(_QWORD *)v403;
                  v1019 = byte_1ACCB6D60[v1017];
                  v1020 = &v1016[v1019 - 1];
                  v1021 = v1019;
                  do
                  {
                    *v1020-- = v1018;
                    v1018 >>= 8;
                    --v1021;
                  }
                  while (v1021);
                  v1016 += v1019;
                }
LABEL_1594:
                v92 = v403 == v663;
                v403 += 64;
                if (v92)
                  goto LABEL_21;
                continue;
              }
              break;
            }
            if (v1017 > 0x7F)
            {
              if (v1017 >> 14)
              {
                v1022 = sub_1ACBF8034(v1015, v1017);
              }
              else
              {
                v1015->i8[0] = (v1017 >> 7) | 0x80;
                v1015->i8[1] = v1017 & 0x7F;
                v1022 = 2;
              }
              v1015 = (int8x8_t *)((char *)v1015 + v1022);
              a6 = *(int *)(v403 + 16);
              if (!(_DWORD)a6)
                goto LABEL_1594;
            }
            else
            {
              v1015->i8[0] = v1017;
              v1015 = (int8x8_t *)((char *)v1015 + 1);
              if (v1017 < 0xE)
                goto LABEL_1594;
              a6 = *(unsigned int *)(v403 + 16);
              if ((int)a6 < 1)
                goto LABEL_1594;
            }
            memcpy(v1016, *(const void **)(v403 + 8), a6);
            v1016 += *(int *)(v403 + 16);
            goto LABEL_1594;
          }
        }
      case 0x62u:
        *(_QWORD *)&__buf[0] = 0;
        v11 = v1551;
        if (*((_DWORD *)v12 + 3))
        {
          *(_QWORD *)&__buf[0] = sub_1ACBF4378(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8
                                                                                                * *((int *)v12 + 1))
                                                         + 40));
        }
        else
        {
          v65 = sub_1ACBB0C74(v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40), __buf);
          if (v65)
            goto LABEL_2548;
          v1542 = 0;
        }
        v794 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v794 + 20) & 0x9000) != 0)
          v794 = sub_1ACBF7980(v794);
        else
          *(_WORD *)(v794 + 20) = 4;
        *(_QWORD *)v794 = *(_QWORD *)&__buf[0];
        goto LABEL_1704;
      case 0x63u:
        v410 = *((int *)v12 + 3);
        v411 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8);
        v412 = *(_QWORD **)(v411 + 8);
        if (*(_BYTE *)(v411 + 17))
        {
          ++*(_DWORD *)(v411 + 20);
          if (!*(_BYTE *)(v411 + 18))
            sub_1ACBECF6C(v411);
        }
        if ((_DWORD)v410 == 15)
          v413 = *(_DWORD *)(v411 + 28) + *(_DWORD *)(*v412 + 132);
        else
          v413 = bswap32(*(_DWORD *)(*(_QWORD *)(v412[3] + 80) + 4 * v410 + 36));
        if (*(_BYTE *)(v411 + 17))
        {
          v738 = *(_DWORD *)(v411 + 20) - 1;
          *(_DWORD *)(v411 + 20) = v738;
          if (!v738)
            sub_1ACBED048(v411);
        }
        v739 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v739 + 20) & 0x9000) != 0)
          v739 = sub_1ACBF7980(v739);
        else
          *(_WORD *)(v739 + 20) = 4;
        *(_QWORD *)v739 = v413;
        v12 += 40;
        continue;
      case 0x64u:
        v414 = *(_QWORD *)(v13 + 32);
        v415 = *((int *)v12 + 1);
        v416 = v414 + 32 * v415;
        v417 = sub_1ACBC4E30(*(_QWORD *)(v416 + 8), *((_DWORD *)v12 + 2), *((_DWORD *)v12 + 3));
        LODWORD(v19) = v417;
        v418 = *((_DWORD *)v12 + 2);
        if (v418 == 2)
        {
          *(_BYTE *)(*(_QWORD *)(v416 + 24) + 112) = *((_DWORD *)v12 + 3);
          v11 = v1551;
        }
        else
        {
          v11 = v1551;
          if (v418 == 1)
          {
            v419 = v417;
            **(_DWORD **)(v414 + 32 * v415 + 24) = *((_DWORD *)v12 + 3) - *((unsigned __int16 *)v12 + 1);
            *(_DWORD *)(v13 + 44) |= 1u;
            sub_1ACBF4630((_QWORD *)v13, *((_DWORD *)v12 + 1));
            LODWORD(v19) = v419;
          }
        }
        if (*((_DWORD *)v12 + 1) == 1)
        {
          for (jj = *(_QWORD *)(v13 + 8); jj; jj = *(_QWORD *)(jj + 16))
            *(_WORD *)(jj + 268) = *(_WORD *)(jj + 268) & 0xFFFC | 1;
          *(_WORD *)(v11 + 268) &= 0xFFFCu;
        }
        if ((_DWORD)v19)
          goto LABEL_2696;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x65u:
        v420 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (!v420 || *(_DWORD *)(v420 + 60) != *((_DWORD *)v12 + 2))
          goto LABEL_480;
        sub_1ACBF05BC(*(_QWORD *)(v420 + 40));
        v370 = v1542;
        goto LABEL_1843;
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
        v67 = *((int *)v12 + 1);
        v66 = *((int *)v12 + 2);
        v68 = *((int *)v12 + 3);
        v69 = v1554 + (v68 << 6);
        v70 = v1554 + (v67 << 6);
        LOBYTE(v71) = *(_WORD *)(v70 + 20);
        v72 = v1554 + (v66 << 6);
        v73 = *(unsigned __int16 *)(v72 + 20);
        if (((v73 | *(unsigned __int16 *)(v70 + 20)) & 1) != 0)
        {
          v129 = (_WORD *)(v69 + 20);
          if ((*(_WORD *)(v69 + 20) & 0x9000) != 0)
          {
            sub_1ACBF2A54((int *)(v1554 + (v68 << 6)));
            v12 += 40;
          }
          else
          {
LABEL_929:
            *v129 = 1;
            v12 += 40;
          }
        }
        else
        {
          if ((v73 & 0x24) != 0)
          {
            v74 = *(_QWORD *)v72;
          }
          else if ((v73 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v72;
            if (*(double *)v72 >= -9.22337204e18)
            {
              if (*(double *)a2.i64 <= 9.22337204e18)
                v74 = (uint64_t)*(double *)a2.i64;
              else
                v74 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v74 = 0x8000000000000000;
            }
          }
          else if ((v73 & 0x12) != 0 && *(_QWORD *)(v1554 + (v66 << 6) + 8))
          {
            v685 = sub_1ACBF2FC0(v72);
            v69 = v1554 + (v68 << 6);
            v74 = v685;
            v71 = *(_WORD *)(v70 + 20);
          }
          else
          {
            v74 = 0;
          }
          if ((v71 & 0x24) != 0)
          {
            v75 = *(_QWORD *)v70;
          }
          else if ((v71 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v70;
            if (*(double *)v70 >= -9.22337204e18)
            {
              if (*(double *)a2.i64 <= 9.22337204e18)
                v75 = (uint64_t)*(double *)a2.i64;
              else
                v75 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v75 = 0x8000000000000000;
            }
          }
          else if ((v71 & 0x12) != 0 && *(_QWORD *)(v1554 + (v67 << 6) + 8))
          {
            v686 = v69;
            v75 = sub_1ACBF2FC0(v70);
            v69 = v686;
          }
          else
          {
            v75 = 0;
          }
          v76 = *v12;
          if (v76 == 103)
          {
            v74 |= v75;
          }
          else if (v76 == 102)
          {
            v74 &= v75;
          }
          else if (v75)
          {
            v703 = 64;
            if (v75 > -64)
              v703 = -v75;
            if (v75 < 0)
              LOBYTE(v76) = -47 - v76;
            else
              v703 = v75;
            v704 = (unint64_t)v74 >> v703;
            if (v74 < 0)
              v704 = (-1 << -(char)v703) | ((unint64_t)v74 >> v703);
            if (v76 == 104)
              v704 = v74 << v703;
            v706 = v74 < 0 && v76 != 104;
            v707 = v706 << 63 >> 63;
            if (v703 >= 64)
              v74 = v707;
            else
              v74 = v704;
          }
          *(_QWORD *)v69 = v74;
          *(_WORD *)(v1554 + (v68 << 6) + 20) = *(_WORD *)(v1554 + (v68 << 6) + 20) & 0xF240 | 4;
          v12 += 40;
        }
        continue;
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
        v1529 = v18;
        v1510 = v17;
        *(_QWORD *)&__buf[0] = 0;
        v35 = *((int *)v12 + 2);
        v36 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        v37 = v12;
        v39 = (__int16 *)(v36 + 20);
        v38 = *(unsigned __int16 *)(v36 + 20);
        v40 = v1554 + (v35 << 6);
        v42 = (_WORD *)(v40 + 20);
        v41 = *(unsigned __int16 *)(v40 + 20);
        v43 = v37;
        v44 = *((int *)v37 + 3);
        v45 = (int *)(v1554 + (v44 << 6));
        if ((v38 & v41 & 4) != 0)
          goto LABEL_31;
        if (((v41 | v38) & 1) != 0)
        {
LABEL_1527:
          v993 = v1554 + (v44 << 6);
          v995 = *(_WORD *)(v993 + 20);
          v994 = (_WORD *)(v993 + 20);
          if ((v995 & 0x9000) != 0)
            sub_1ACBF2A54(v45);
          else
            *v994 = 1;
LABEL_1911:
          v17 = v1510;
          v18 = v1529;
          v12 = v43 + 40;
          continue;
        }
        v132 = v38 & 0x2D;
        if ((v38 & 0x2D) == 0)
        {
          v132 = sub_1ACBF7A2C((int *)v36);
          LOWORD(v41) = *v42;
        }
        v133 = v41 & 0x2D;
        if ((v41 & 0x2D) == 0)
          v133 = sub_1ACBF7A2C((int *)v40);
        v134 = v132 & v133;
        v45 = (int *)(v1554 + (v44 << 6));
        if ((v134 & 4) == 0)
          goto LABEL_1506;
        v22 = *v43;
LABEL_31:
        v46 = *(_QWORD *)v36;
        v47 = *(_QWORD *)v40;
        *(_QWORD *)&__buf[0] = *(_QWORD *)v40;
        switch(v22)
        {
          case 'j':
            if (v46 < 0)
            {
              if (v47 < 0 && (uint64_t)(0x8000000000000001 - v47) > v46 + 1)
              {
LABEL_1506:
                v982 = v45;
                v983 = *v39;
                if ((*v39 & 8) != 0)
                {
                  v985 = *(double *)v36;
                  v984 = v43;
                }
                else
                {
                  v984 = v43;
                  if ((v983 & 0x24) != 0)
                  {
                    v985 = (double)*(uint64_t *)v36;
                  }
                  else if ((v983 & 0x12) != 0)
                  {
                    v985 = sub_1ACBF2F88(v36);
                  }
                  else
                  {
                    v985 = 0.0;
                  }
                }
                v986 = *v42;
                if ((*v42 & 8) != 0)
                {
                  a2.i64[0] = *(_QWORD *)v40;
                }
                else if ((v986 & 0x24) != 0)
                {
                  *(double *)a2.i64 = (double)*(uint64_t *)v40;
                }
                else if ((v986 & 0x12) != 0)
                {
                  *(double *)a2.i64 = sub_1ACBF2F88(v40);
                }
                else
                {
                  a2.i64[0] = 0;
                }
                v987 = *v984 - 106;
                v45 = v982;
                switch(v987)
                {
                  case 0:
                    *(double *)a2.i64 = v985 + *(double *)a2.i64;
                    break;
                  case 1:
                    *(double *)a2.i64 = *(double *)a2.i64 - v985;
                    break;
                  case 2:
                    *(double *)a2.i64 = v985 * *(double *)a2.i64;
                    break;
                  case 3:
                    if (v985 == 0.0)
                      goto LABEL_1527;
                    *(double *)a2.i64 = *(double *)a2.i64 / v985;
                    break;
                  default:
                    v990 = sub_1ACB9A164(v36);
                    v991 = sub_1ACB9A164(v40);
                    *(_QWORD *)&__buf[0] = v991;
                    v45 = v982;
                    if (!v990)
                      goto LABEL_1527;
                    if (v990 == -1)
                      v992 = 1;
                    else
                      v992 = v990;
                    *(double *)a2.i64 = (double)(v991 % v992);
                    break;
                }
                *(_QWORD *)v45 = a2.i64[0];
                v988 = v1554 + (v44 << 6);
                v989 = *(_WORD *)(v988 + 20) & 0xF240 | 8;
LABEL_1910:
                *(_WORD *)(v988 + 20) = v989;
                goto LABEL_1911;
              }
            }
            else
            {
              v48 = v47 < 1 || (v47 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v46;
              if (!v48)
                goto LABEL_1506;
            }
            v695 = v47 + v46;
            goto LABEL_1517;
          case 'k':
            if (sub_1ACBF39A0((uint64_t *)__buf, v46))
              goto LABEL_1506;
            goto LABEL_1518;
          case 'l':
            if (sub_1ACBF3A1C((uint64_t *)__buf, v46))
              goto LABEL_1506;
            goto LABEL_1518;
          case 'm':
            if (!v46)
              goto LABEL_1527;
            if (v46 == -1 && v47 == 0x8000000000000000)
              goto LABEL_1506;
            v695 = v47 / v46;
            goto LABEL_1517;
          default:
            if (!v46)
              goto LABEL_1527;
            if (v46 == -1)
              v694 = 1;
            else
              v694 = v46;
            v695 = v47 % v694;
LABEL_1517:
            *(_QWORD *)&__buf[0] = v695;
LABEL_1518:
            *(_QWORD *)v45 = *(_QWORD *)&__buf[0];
            v988 = v1554 + (v44 << 6);
            v989 = *(_WORD *)(v988 + 20) & 0xF240 | 4;
            goto LABEL_1910;
        }
      case 0x6Fu:
        v1533 = v18;
        v432 = *((int *)v12 + 1);
        v431 = *((int *)v12 + 2);
        v433 = v1554 + (v432 << 6);
        v434 = v1554 + (v431 << 6);
        v435 = *((int *)v12 + 3);
        v436 = v1554 + (v435 << 6);
        v438 = (_WORD *)(v433 + 20);
        v437 = *(_WORD *)(v433 + 20);
        v440 = (_WORD *)(v434 + 20);
        v439 = *(_WORD *)(v434 + 20);
        if (v439 & 1 | v437 & 1)
        {
          if ((*(_WORD *)(v436 + 20) & 0x9000) != 0)
            sub_1ACBF2A54((int *)(v1554 + (v435 << 6)));
          else
            *(_WORD *)(v436 + 20) = 1;
          v18 = v1533;
          v12 += 40;
          continue;
        }
        v1520 = *((int *)v12 + 2);
        if ((v437 & 0x12) != 0)
        {
          if ((*(_WORD *)(v433 + 20) & 0x400) == 0)
          {
LABEL_1713:
            v1499 = v437;
            if ((v439 & 0x12) != 0)
            {
              if ((v439 & 0x400) == 0)
              {
LABEL_1759:
                v1525 = v438;
                v1492 = v432;
                v1071 = v1554 + (v432 << 6);
                v1074 = *(int *)(v1071 + 16);
                v1073 = (int *)(v1071 + 16);
                v1072 = v1074;
                v1075 = v1554 + (v431 << 6);
                v1077 = *(int *)(v1075 + 16);
                v1076 = (int *)(v1075 + 16);
                v1078 = v1077 + v1072;
                LOBYTE(v18) = v1533;
                if ((int)v1077 + (int)v1072 > *(_DWORD *)(v13 + 136))
                  goto LABEL_2693;
                v1482 = v439;
                v1484 = v440;
                v1079 = v436;
                v1080 = v431;
                v1081 = v435;
                if (!sub_1ACB7E454(v1079, (int)v1078 + 2, v435 == v431))
                {
                  v1508 = v12;
                  v1082 = v1554 + (v1081 << 6);
                  *(_WORD *)(v1082 + 20) = *(_WORD *)(v1082 + 20) & 0xF240 | 2;
                  if ((_DWORD)v1081 != (_DWORD)v1080)
                  {
                    memcpy(*(void **)(v1082 + 8), *(const void **)(v1554 + (v1080 << 6) + 8), *v1076);
                    *v1484 = v1482;
                  }
                  memcpy((void *)(*(_QWORD *)(v1082 + 8) + *v1076), *(const void **)(v1554 + (v1492 << 6) + 8), *v1073);
                  *v1525 = v1499;
                  v1083 = v1078 & 0xFFFFFFFFFFFFFFFELL;
                  if (v1541 <= 1)
                    v1083 = v1078;
                  *(_BYTE *)(*(_QWORD *)(v1082 + 8) + v1083) = 0;
                  *(_BYTE *)(v1083 + *(_QWORD *)(v1082 + 8) + 1) = 0;
                  *(_WORD *)(v1082 + 20) |= 0x200u;
                  *(_DWORD *)(v1082 + 16) = v1083;
                  *(_BYTE *)(v1082 + 22) = v1541;
                  v18 = v1533;
                  v12 = v1508 + 40;
                  continue;
                }
                goto LABEL_2549;
              }
              v1063 = v435;
              if (sub_1ACBA6920((int *)v434))
                goto LABEL_2627;
LABEL_1758:
              v439 = *v440 & 0xFFFD;
              v431 = v1520;
              v435 = v1063;
              goto LABEL_1759;
            }
            v1063 = v435;
            if (!sub_1ACB8AA08(v434, v1541, 0))
              goto LABEL_1758;
LABEL_2627:
            v11 = v1551;
            LOBYTE(v18) = v1533;
            goto LABEL_8;
          }
          v441 = *((int *)v12 + 3);
          if (sub_1ACBA6920((int *)v433))
            goto LABEL_2627;
        }
        else
        {
          v441 = *((int *)v12 + 3);
          if (sub_1ACB8AA08(v433, v1541, 0))
            goto LABEL_2627;
        }
        v437 = *v438 & 0xFFFD;
        v439 = *v440;
        v431 = v1520;
        v435 = v441;
        goto LABEL_1713;
      case 0x70u:
      case 0x71u:
LABEL_480:
        v11 = v1551;
        if ((*(_WORD *)(v1551 + 268) & 3) == 1)
        {
          LODWORD(v19) = 516;
          goto LABEL_2696;
        }
        v421 = v17;
        v1532 = v18;
        v422 = *((unsigned int *)v12 + 2);
        v423 = *((int *)v12 + 3);
        v424 = *(_QWORD *)(v13 + 32) + 32 * v423;
        v425 = *((_WORD *)v12 + 1);
        v1544 = *(_QWORD *)(v424 + 8);
        if (v22 == 113)
        {
          v426 = v425 & 8 | 4u;
          v427 = *(unsigned __int8 *)(*(_QWORD *)(v424 + 24) + 112);
          if (v427 < *(unsigned __int8 *)(v1551 + 265))
            *(_BYTE *)(v1551 + 265) = v427;
        }
        else
        {
          v426 = 0;
        }
        LODWORD(v428) = v422;
        if ((v425 & 0x10) == 0)
          goto LABEL_1836;
        v429 = v1554 + (v422 << 6);
        if (v1554)
        {
          v430 = *(_WORD *)(v429 + 20);
          if ((v430 & 0x24) != 0)
          {
            v428 = *(double *)v429;
            goto LABEL_1835;
          }
          if ((v430 & 8) != 0)
          {
            v1122 = 0x7FFFFFFFFFFFFFFFLL;
            if (*(double *)v429 <= 9.22337204e18)
              v1122 = (uint64_t)*(double *)v429;
            if (*(double *)v429 >= -9.22337204e18)
              v428 = *(double *)&v1122;
            else
              v428 = -0.0;
LABEL_1835:
            *(double *)v429 = v428;
            *(_WORD *)(v1554 + (v422 << 6) + 20) = *(_WORD *)(v1554 + (v422 << 6) + 20) & 0xF240 | 4;
LABEL_1836:
            v1123 = v12[1];
            if (v1123 == 253)
            {
              v1125 = 0;
              v1126 = *((_DWORD *)v12 + 4);
              v1124 = v1551;
              v17 = v421;
            }
            else
            {
              v1124 = v1551;
              v17 = v421;
              if (v1123 == 248)
              {
                v1125 = *((_QWORD *)v12 + 2);
                v1126 = *(unsigned __int16 *)(v1125 + 8);
              }
              else
              {
                v1126 = 0;
                v1125 = 0;
              }
            }
            v1127 = sub_1ACB89F34(v1124, *((_DWORD *)v12 + 1), v1126, 0);
            if (!v1127)
              goto LABEL_2557;
            v420 = v1127;
            *(_BYTE *)(v1127 + 1) = v423;
            *(_BYTE *)(v1127 + 2) = 1;
            *(_BYTE *)(v1127 + 5) |= 4u;
            *(_DWORD *)(v1127 + 60) = LODWORD(v428);
            v370 = sub_1ACBF46B8(v1544, LODWORD(v428), v426, v1125, *(_QWORD *)(v1127 + 40));
            *(_QWORD *)(v420 + 48) = v1125;
            *(_BYTE *)(v420 + 4) = v12[1] != 248;
            v18 = v1532;
LABEL_1843:
            *(_BYTE *)(*(_QWORD *)(v420 + 40) + 3) = v12[2] & 3;
            if (!v370)
            {
              v1542 = 0;
              v12 += 40;
              continue;
            }
LABEL_2551:
            LODWORD(v19) = v370;
            v11 = v1551;
            goto LABEL_2696;
          }
          if ((v430 & 0x12) != 0 && *(_QWORD *)(v1554 + (v422 << 6) + 8))
          {
            v428 = COERCE_DOUBLE(sub_1ACBF2FC0(v1554 + (v422 << 6)));
            goto LABEL_1835;
          }
        }
        else
        {
          sub_1ACBBE20C(89699);
        }
        v428 = 0.0;
        goto LABEL_1835;
      case 0x72u:
        v442 = *((int *)v12 + 1);
        v443 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        v444 = (_WORD *)(v443 + 20);
        if ((*(_WORD *)(v443 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6)));
        else
          *v444 = 1;
        v795 = v1554 + (v442 << 6);
        if ((*(_WORD *)(v795 + 20) & 1) != 0)
          goto LABEL_21;
        *v444 = 4;
        *(_QWORD *)v443 = ~sub_1ACB9A164(v795);
        v12 += 40;
        continue;
      case 0x73u:
        v11 = v1551;
        v445 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 2));
        v446 = sub_1ACB89F34(v1551, *((_DWORD *)v12 + 1), *(__int16 *)(v445 + 64), 0);
        if (!v446)
          goto LABEL_8;
        *(_BYTE *)(v446 + 2) = 1;
        v447 = *(_BYTE *)(v446 + 5) | 1;
        *(_BYTE *)(v446 + 5) = v447;
        *(_QWORD *)(v446 + 48) = *(_QWORD *)(v445 + 48);
        *(_BYTE *)(v446 + 4) = *(_BYTE *)(v445 + 4);
        *(_DWORD *)(v446 + 60) = *(_DWORD *)(v445 + 60);
        v448 = v447 & 0xFB | (4 * ((*(_BYTE *)(v445 + 5) & 4) != 0));
        *(_BYTE *)(v446 + 5) = v448;
        *(_QWORD *)(v446 + 8) = *(_QWORD *)(v445 + 8);
        *(_BYTE *)(v446 + 5) = v448 | 8;
        *(_BYTE *)(v445 + 5) |= 8u;
        v1542 = sub_1ACBF46B8(*(_QWORD *)(v446 + 8), *(_DWORD *)(v446 + 60), 4, *(_QWORD *)(v446 + 48), *(_QWORD *)(v446 + 40));
        v12 += 40;
        continue;
      case 0x74u:
      case 0x76u:
        v106 = *((unsigned int *)v12 + 3);
        if ((int)v106 >= 1)
        {
          v107 = v1554 + (v106 << 6);
          *(_DWORD *)(v107 + 16) = 0;
          *(_QWORD *)(v107 + 8) = &byte_1ACCBEAEE;
        }
        v11 = v1551;
        v108 = *((int *)v12 + 1);
        v109 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v108);
        if (v109 && (*(_BYTE *)(v109 + 5) & 8) == 0 && *((_DWORD *)v12 + 2) <= *(__int16 *)(v109 + 64))
        {
          *(_QWORD *)(v109 + 16) = 0;
          *(_DWORD *)(v109 + 24) = 0;
          v65 = sub_1ACBB8A64(*(_QWORD *)(v109 + 8), *(_DWORD *)(v109 + 60), 0);
          if (v65)
            goto LABEL_2548;
          goto LABEL_1537;
        }
        v110 = sub_1ACB89F34(v1551, v108, *((_DWORD *)v12 + 2), 0);
        if (!v110)
          goto LABEL_8;
        v109 = v110;
        *(_BYTE *)(v110 + 5) |= 1u;
        v111 = (uint64_t *)(v110 + 8);
        v65 = sub_1ACB57BF0(*(_QWORD *)v13, 0, v13, (uint64_t *)(v110 + 8), *((_WORD *)v12 + 1) | 5u, 0x41Eu);
        if (v65)
          goto LABEL_2548;
        v112 = *v111;
        if (*(_BYTE *)(*v111 + 17) || *(unsigned __int8 *)(v112 + 16) <= 1u)
        {
          v113 = sub_1ACBED080(v112, 1, 0);
          if (v113)
            goto LABEL_1536;
        }
        else
        {
          v899 = *(_QWORD *)v112;
          v900 = **(_QWORD **)(v112 + 8);
          v901 = *(_DWORD *)(v899 + 788);
          if (*(_DWORD *)(v900 + 128) < v901)
          {
            if (*(_BYTE *)(v900 + 10))
            {
              v113 = sub_1ACBEDD40(v900, v901);
              if (v113)
                goto LABEL_1536;
            }
          }
        }
        v902 = *((_QWORD *)v12 + 2);
        *(_QWORD *)(v109 + 48) = v902;
        if (v902)
        {
          v113 = sub_1ACBF48F4(*(_QWORD *)(v109 + 8), (unsigned int *)(v109 + 60), *((_WORD *)v12 + 1) | 2u);
          if (!v113)
            v113 = sub_1ACBF46B8(*(_QWORD *)(v109 + 8), *(_DWORD *)(v109 + 60), 4, v902, *(_QWORD *)(v109 + 40));
          v903 = 0;
        }
        else
        {
          v903 = 1;
          *(_DWORD *)(v109 + 60) = 1;
          v113 = sub_1ACBF46B8(*(_QWORD *)(v109 + 8), 1u, 4, 0, *(_QWORD *)(v109 + 40));
        }
        *(_BYTE *)(v109 + 4) = v903;
LABEL_1536:
        *(_BYTE *)(v109 + 5) = *(_BYTE *)(v109 + 5) & 0xFB | (4 * (*((_WORD *)v12 + 1) != 8));
        if (v113)
        {
          v1426 = v113;
          sub_1ACBA3F80(*v111, *(double *)a2.i64);
          LODWORD(v19) = v1426;
          goto LABEL_2696;
        }
LABEL_1537:
        v1542 = 0;
        *(_BYTE *)(v109 + 2) = 1;
        v12 += 40;
        continue;
      case 0x75u:
        v449 = *(_QWORD *)(v1551 + 104);
        v450 = *((int *)v12 + 2);
        v451 = v449 + (v450 << 6);
        v453 = *(_WORD *)(v451 + 20);
        v452 = (__int16 *)(v451 + 20);
        if ((v453 & 0x9000) != 0)
          sub_1ACBF7980(v449 + (v450 << 6));
        else
          *v452 = 4;
        v796 = (char *)*((_QWORD *)v12 + 2);
        if (v796)
          v797 = strlen(*((const char **)v12 + 2)) & 0x3FFFFFFF;
        else
          v797 = 0;
        *((_DWORD *)v12 + 1) = v797;
        if (v1541 == 1)
          goto LABEL_1623;
        if (sub_1ACB57870(v449 + (v450 << 6), v796, -1, 1u, 0))
          goto LABEL_2693;
        v858 = *v452;
        v859 = (_BYTE *)(v449 + (v450 << 6) + 22);
        if ((*v452 & 2) != 0)
        {
          if (*v859 != v1541)
          {
            if (sub_1ACBB0FEC((int *)(v449 + (v450 << 6)), v1541))
            {
LABEL_2549:
              v11 = v1551;
              goto LABEL_8;
            }
            v858 = *v452;
          }
        }
        else
        {
          *v859 = v1541;
        }
        v1025 = v449 + (v450 << 6);
        *(_DWORD *)(v1025 + 32) = 0;
        *v452 = v858 | 0x2000;
        if (v12[1] == 250)
        {
          v1026 = (_QWORD *)*((_QWORD *)v12 + 2);
          if (v1026)
            sub_1ACBE0F9C((_QWORD *)v13, v1026);
        }
        v1542 = 0;
        v12[1] = -6;
        *((_QWORD *)v12 + 2) = *(_QWORD *)(v1025 + 8);
        v797 = *(_DWORD *)(v1025 + 16);
        *((_DWORD *)v12 + 1) = v797;
LABEL_1623:
        if (v797 <= *(_DWORD *)(v13 + 136))
        {
          *v12 = 73;
LABEL_1625:
          v1027 = *(_QWORD *)(v1551 + 104);
          v1028 = *((int *)v12 + 2);
          v1029 = v1027 + (v1028 << 6);
          v1031 = *(_WORD *)(v1029 + 20);
          v1030 = (_WORD *)(v1029 + 20);
          if ((v1031 & 0x9000) != 0)
            sub_1ACBF7980(v1027 + (v1028 << 6));
          else
            *v1030 = 4;
          *v1030 = 8706;
          v1032 = v1027 + (v1028 << 6);
          *(_QWORD *)(v1032 + 8) = *((_QWORD *)v12 + 2);
          *(_DWORD *)(v1032 + 16) = *((_DWORD *)v12 + 1);
          *(_BYTE *)(v1032 + 22) = v1541;
          v1033 = *((unsigned int *)v12 + 3);
          if ((int)v1033 >= 1 && *(_QWORD *)(v1554 + (v1033 << 6)) == *((unsigned __int16 *)v12 + 1))
          {
            *v1030 = 8720;
            v12 += 40;
            continue;
          }
          goto LABEL_21;
        }
        goto LABEL_2693;
      case 0x77u:
        v454 = sub_1ACB89F34(v1551, *((_DWORD *)v12 + 1), *((_DWORD *)v12 + 2), 1);
        if (!v454)
        {
          v11 = v1551;
          goto LABEL_8;
        }
        v455 = v454;
        v456 = 0;
        v457 = *((_QWORD *)v12 + 2);
        *(_QWORD *)(v454 + 48) = v457;
        v1512 = v17;
        v1534 = v18;
        if (*(_BYTE *)(v13 + 102) != 2 && (_BYTE)word_1ECD3B144)
          v456 = *(_DWORD *)(v13 + 180);
        v458 = v12;
        v459 = *((_DWORD *)v12 + 3);
        v460 = 8 * *(unsigned __int16 *)(v457 + 6) + 32;
        v1545 = v456;
        v461 = 104 * v456 + 200;
        v462 = (_QWORD *)sub_1ACBE1124(v13, v460 + v461);
        if (!v462)
        {
          *(_QWORD *)(v455 + 40) = 0;
          LODWORD(v19) = 7;
          v11 = v1551;
          v17 = v1512;
          LOBYTE(v18) = v1534;
          v12 = v458;
          goto LABEL_2696;
        }
        v463 = v462;
        bzero(v462, v460 + v461);
        *(_QWORD *)(v455 + 40) = v463;
        v464 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8);
        v465 = (char *)v463 + v461;
        v463[5] = v465;
        memcpy(v465, *(const void **)(v455 + 48), v460);
        *((_QWORD *)v465 + 2) = 0;
        v466 = v1545;
        if (v459 && !v1545)
          *((_WORD *)v465 + 3) = v459;
        v12 = v458;
        if (!*(_BYTE *)(v464 + 17))
        {
          v468 = *(_DWORD *)(*(_QWORD *)(v464 + 8) + 52);
          *((_DWORD *)v463 + 3) = v468;
          v469 = v1551;
          v17 = v1512;
          v18 = v1534;
          goto LABEL_1683;
        }
        v467 = *(_DWORD *)(v464 + 20) + 1;
        *(_DWORD *)(v464 + 20) = v467;
        if (*(_BYTE *)(v464 + 18))
        {
          v468 = *(_DWORD *)(*(_QWORD *)(v464 + 8) + 52);
          *((_DWORD *)v463 + 3) = v468;
          v469 = v1551;
          v17 = v1512;
          v18 = v1534;
        }
        else
        {
          sub_1ACBECF6C(v464);
          v1054 = *(unsigned __int8 *)(v464 + 17);
          v468 = *(_DWORD *)(*(_QWORD *)(v464 + 8) + 52);
          *((_DWORD *)v463 + 3) = v468;
          v469 = v1551;
          v17 = v1512;
          v18 = v1534;
          if (!v1054)
            goto LABEL_1682;
          v467 = *(_DWORD *)(v464 + 20);
          v466 = v1545;
        }
        v1055 = v467 - 1;
        *(_DWORD *)(v464 + 20) = v1055;
        if (v1055)
          goto LABEL_1683;
        sub_1ACBED048(v464);
LABEL_1682:
        v466 = v1545;
LABEL_1683:
        v1056 = (v466 + 1);
        *((_BYTE *)v463 + 91) = v466 + 1;
        *((_BYTE *)v463 + 90) = v466 - 1;
        *((_BYTE *)v463 + 89) = v1056 > 1;
        v463[4] = v13;
        if (v1056 != v466 + 1)
          goto LABEL_1793;
        v1057 = (v466 + 1);
        if (v466)
        {
          v1058 = v1057 & 0xFE;
          v1059 = v463 + 27;
          v1060 = v1058;
          do
          {
            *(v1059 - 13) = v463;
            *v1059 = v463;
            v1059 += 26;
            v1060 -= 2;
          }
          while (v1060);
          if (v1058 == v1057)
          {
LABEL_1793:
            if (*(_BYTE *)(v13 + 102) == 2)
              goto LABEL_1801;
            v1099 = dword_1ECD3B290 * v468;
            *(_DWORD *)v463 = dword_1ECD3B290 * v468;
            v1100 = *(int *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 24) + 116);
            v1101 = -1024;
            if ((int)v1100 >= 0)
              v1101 = v468;
            v1102 = v1101 * v1100;
            if (v1102 >= 0x20000000)
              LODWORD(v1102) = 0x20000000;
            if (v1099 <= (int)v1102)
              v1099 = v1102;
            *((_DWORD *)v463 + 1) = v1099;
            if (byte_1ECD3B148)
            {
LABEL_1801:
              LODWORD(v19) = 0;
            }
            else
            {
              *((_DWORD *)v463 + 21) = v468;
              v1104 = sub_1ACB5D828(v468);
              v463[8] = v1104;
              if (v1104)
                LODWORD(v19) = 0;
              else
                LODWORD(v19) = 7;
            }
            v11 = v469;
            if (*((unsigned __int16 *)v465 + 4) <= 0xCu)
            {
              v1103 = *((_QWORD *)v465 + 4);
              if ((!v1103 || v1103 == *(_QWORD *)(v13 + 16)) && (**((_BYTE **)v465 + 3) & 2) == 0)
                *((_BYTE *)v463 + 92) = 3;
            }
            if (!(_DWORD)v19)
            {
              v1542 = 0;
              v12 += 40;
              continue;
            }
            goto LABEL_2696;
          }
        }
        else
        {
          v1058 = 0;
        }
        v1097 = v1057 - v1058;
        v1098 = 104 * v1058 + 112;
        do
        {
          *(_QWORD *)((char *)v463 + v1098) = v463;
          v1098 += 104;
          --v1097;
        }
        while (v1097);
        goto LABEL_1793;
      case 0x78u:
        v470 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v471 = *(_QWORD *)(v470 + 16);
        *(_QWORD *)(v470 + 16) = v471 + 1;
        if (!v471)
          goto LABEL_2381;
        goto LABEL_21;
      case 0x79u:
        v11 = v1551;
        v472 = sub_1ACB89F34(v1551, *((_DWORD *)v12 + 1), *((_DWORD *)v12 + 3), 3);
        if (!v472)
          goto LABEL_8;
        *(_BYTE *)(v472 + 2) = 1;
        *(_DWORD *)(v472 + 28) = *((_DWORD *)v12 + 2);
        *(_BYTE *)(v472 + 4) = 1;
        *(_QWORD *)(v472 + 40) = &unk_1EECAD258;
        v12 += 40;
        continue;
      case 0x7Au:
        v473 = *(_QWORD *)(v1551 + 120);
        v474 = *((int *)v12 + 1);
        v475 = *(unsigned __int8 **)(v473 + 8 * v474);
        if (v475)
        {
          sub_1ACBF0D2C((_QWORD **)v1551, v475);
          v473 = *(_QWORD *)(v1551 + 120);
          v474 = *((int *)v12 + 1);
        }
        *(_QWORD *)(v473 + 8 * v474) = 0;
        v12 += 40;
        continue;
      case 0x7Cu:
        v1560 = 0;
        a2 = 0uLL;
        v1558 = 0u;
        v1559 = 0u;
        v11 = v1551;
        v476 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 11));
        if (**(_BYTE **)(v476 + 40))
          goto LABEL_21;
        v477 = *((_DWORD *)v12 + 1);
        v478 = *(_QWORD *)(v476 + 48);
        v479 = *((int *)v12 + 13);
        WORD6(v1559) = *((_DWORD *)v12 + 14);
        *(_QWORD *)&v1558 = v478;
        *((_QWORD *)&v1558 + 1) = v1554 + (v479 << 6);
        v480 = v477 + 1;
        do
        {
          v481 = *(_QWORD *)(v476 + 40);
          sub_1ACBEF184(v481);
          v482 = *(_DWORD *)(v481 + 64);
          if (v482 <= 0)
          {
            v1422 = 96365;
            goto LABEL_2584;
          }
          memset(__buf, 0, 24);
          memset(&__buf[2], 0, 32);
          *((_QWORD *)&__buf[1] + 1) = v13;
          v483 = *(unsigned __int16 *)(v481 + 68);
          v484 = *(char **)(v481 + 56);
          v485 = *(_DWORD *)(*(_QWORD *)(v481 + 136) + 88) - (_DWORD)v484;
          if (v483 > v485)
            v483 = v485 & ~(v485 >> 31);
          *((_QWORD *)&__buf[0] + 1) = *(_QWORD *)(v481 + 56);
          if (v483 >= v482)
          {
            WORD2(__buf[1]) = 16400;
            LODWORD(__buf[1]) = v482;
          }
          else
          {
            v65 = sub_1ACB934EC(v481, 0, v482, (uint64_t)__buf);
            if (v65)
              goto LABEL_2548;
            v482 = __buf[1];
            v484 = (char *)*((_QWORD *)&__buf[0] + 1);
          }
          v486 = sub_1ACBF5AA0(v482, v484, (uint64_t *)&v1558, 0);
          if (LODWORD(__buf[2]))
            sub_1ACBF2A04((uint64_t)__buf);
          if (v486 >= 1)
          {
            if (!*((_WORD *)v12 + 1))
              goto LABEL_2232;
            goto LABEL_1561;
          }
          if ((v486 & 0x80000000) == 0)
            goto LABEL_1561;
          if (--v480 < 1)
          {
            v1542 = 0;
            v12 += 40;
            goto LABEL_22;
          }
          *(_DWORD *)(v476 + 24) = 0;
          v487 = sub_1ACB8B8D4(*(_QWORD *)(v476 + 40));
        }
        while (!v487);
        LODWORD(v19) = v487;
        if (v487 != 101)
          goto LABEL_2696;
LABEL_2232:
        v12 += 40;
LABEL_1561:
        v1542 = 0;
        goto LABEL_2381;
      case 0x7Du:
        v488 = *((_DWORD *)v12 + 2);
        v489 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v490 = *(unsigned __int16 *)(v489 + 6);
        if (v488 > v490)
        {
          *(_WORD *)(v489 + 6) = v488;
          v12 += 40;
          continue;
        }
        v740 = *((_DWORD *)v12 + 3);
        if (v740 >= v490)
          goto LABEL_21;
        *(_WORD *)(v489 + 6) = v740;
        v12 += 40;
        continue;
      case 0x7Eu:
        v491 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v491 + 20) & 0x9000) != 0)
          v491 = sub_1ACBF7980(v491);
        else
          *(_WORD *)(v491 + 20) = 4;
        v798 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v799 = *(_QWORD *)(v798 + 16);
        *(_QWORD *)(v798 + 16) = v799 + 1;
        *(_QWORD *)v491 = v799;
        v12 += 40;
        continue;
      case 0x7Fu:
        *(_QWORD *)&__buf[0] = 0;
        LODWORD(v1558) = 0;
        v11 = v1551;
        v492 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_BYTE *)(v492 + 21) & 0x90) != 0)
          sub_1ACBF7980(*(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        else
          *(_WORD *)(v492 + 20) = 4;
        v800 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if ((*(_BYTE *)(v800 + 5) & 2) != 0)
          goto LABEL_2032;
        v801 = *(_QWORD *)(v800 + 40);
        if (!*(_BYTE *)v801 && (*(_BYTE *)(v801 + 1) & 8) != 0)
        {
          LODWORD(v1558) = 0;
        }
        else
        {
          v65 = sub_1ACBF8BC8(*(_QWORD *)(v800 + 40), &v1558);
          if (v65)
            goto LABEL_2548;
          if ((_DWORD)v1558)
          {
            v1542 = 0;
            *(_QWORD *)&__buf[0] = 1;
            goto LABEL_2032;
          }
          v801 = *(_QWORD *)(v800 + 40);
        }
        sub_1ACBEF184(v801);
        v1193 = *(_QWORD *)(v801 + 48);
        *(_QWORD *)&__buf[0] = v1193;
        v1542 = 0;
        if (v1193 == 0x7FFFFFFFFFFFFFFFLL)
          *(_BYTE *)(v800 + 5) |= 2u;
        else
          *(_QWORD *)&__buf[0] = v1193 + 1;
LABEL_2032:
        v1194 = *((int *)v12 + 3);
        if ((_DWORD)v1194)
        {
          v1195 = *(_QWORD *)(v1551 + 352);
          v1196 = v1554;
          if (v1195)
          {
            do
            {
              v1197 = v1195;
              v1195 = *(_QWORD *)(v1195 + 8);
            }
            while (v1195);
            v1196 = *(_QWORD *)(v1197 + 24);
          }
          v1198 = (uint64_t *)(v1196 + (v1194 << 6));
          sub_1ACBF3AD4((uint64_t)v1198);
          v1199 = *v1198;
          if (*v1198 == 0x7FFFFFFFFFFFFFFFLL || (*(_BYTE *)(v800 + 5) & 2) != 0)
          {
            LODWORD(v19) = 13;
            goto LABEL_2696;
          }
          v1200 = *(_QWORD *)&__buf[0];
          if (*(uint64_t *)&__buf[0] <= v1199)
          {
            v1200 = v1199 + 1;
            *(_QWORD *)&__buf[0] = v1199 + 1;
          }
          *v1198 = v1200;
        }
        if ((*(_BYTE *)(v800 + 5) & 2) == 0)
          goto LABEL_2055;
        v1201 = 0;
        do
        {
          sqlite3_initialize();
          arc4random_buf(__buf, 8uLL);
          *(_QWORD *)&__buf[0] = (*(_QWORD *)&__buf[0] & 0x3FFFFFFFFFFFFFFFLL) + 1;
          v1202 = sub_1ACBF4EEC(*(_QWORD *)(v800 + 40), *(int64_t *)&__buf[0], 0, (int *)&v1558);
          if (v1202)
            v1203 = 0;
          else
            v1203 = (_DWORD)v1558 == 0;
          if (!v1203)
            break;
          v48 = v1201++ >= 0x63;
        }
        while (!v48);
        if (v1202)
          v1204 = 1;
        else
          v1204 = (_DWORD)v1558 == 0;
        if (!v1204)
        {
          v1542 = 0;
LABEL_2055:
          *(_BYTE *)(v800 + 3) = 0;
          *(_DWORD *)(v800 + 24) = 0;
          *(_QWORD *)v492 = *(_QWORD *)&__buf[0];
          v12 += 40;
          continue;
        }
        if (v1202)
          LODWORD(v19) = v1202;
        else
          LODWORD(v19) = 13;
        goto LABEL_2696;
      case 0x80u:
        a2 = 0uLL;
        memset(__buf, 0, 48);
        v493 = *((int *)v12 + 2);
        v494 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v495 = *(_QWORD *)(v1554 + ((uint64_t)*((int *)v12 + 3) << 6));
        *((_QWORD *)&__buf[0] + 1) = v495;
        if (v12[1] != 251)
          goto LABEL_1722;
        if (*(_QWORD *)(v13 + 360))
        {
          v496 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *(char *)(v494 + 1));
          v497 = (_QWORD *)*((_QWORD *)v12 + 2);
          if (!v497)
            goto LABEL_1724;
          if ((*((_WORD *)v12 + 1) & 4) == 0)
            sub_1ACBF5874((uint64_t *)v1551, v494, 18, *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *(char *)(v494 + 1)), *((_QWORD *)v12 + 2), v495, v493, 0xFFFFFFFF);
        }
        else
        {
          if (!*(_QWORD *)(v13 + 312))
          {
LABEL_1722:
            v496 = 0;
            goto LABEL_1723;
          }
          v496 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *(char *)(v494 + 1));
          v497 = (_QWORD *)*((_QWORD *)v12 + 2);
          if (!v497)
            goto LABEL_1724;
        }
        if (*(_QWORD *)(v13 + 312) && v497[1])
        {
LABEL_1724:
          v1064 = *((_WORD *)v12 + 1);
          if ((v1064 & 0x40) != 0)
            goto LABEL_21;
          if ((v1064 & 1) != 0)
          {
            ++*(_QWORD *)(v1551 + 56);
            if ((v1064 & 0x20) != 0)
              *(_QWORD *)(v13 + 56) = v495;
          }
          v1065 = v1554 + (v493 << 6);
          *(_QWORD *)&__buf[1] = *(_QWORD *)(v1065 + 8);
          DWORD1(__buf[2]) = *(_DWORD *)(v1065 + 16);
          if ((v1064 & 0x10) != 0)
            v1066 = *(_DWORD *)(v494 + 28);
          else
            v1066 = 0;
          if ((*(_WORD *)(v1065 + 20) & 0x400) != 0)
            v1067 = *(_DWORD *)(v1554 + (v493 << 6));
          else
            v1067 = 0;
          v11 = v1551;
          DWORD2(__buf[2]) = v1067;
          *(_QWORD *)&__buf[0] = 0;
          v65 = sub_1ACB9D4C4(*(unsigned __int8 **)(v494 + 40), (uint64_t)__buf, v1064 & 0x8A, v1066);
          *(_BYTE *)(v494 + 3) = 0;
          *(_DWORD *)(v494 + 24) = 0;
          if (!v65)
          {
            ++v1476;
            if (v497)
            {
              if ((*((_WORD *)v12 + 1) & 4) != 0)
                v1068 = 23;
              else
                v1068 = 18;
              (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(v13 + 312))(*(_QWORD *)(v13 + 304), v1068, v496, *v497, v495);
            }
            v1542 = 0;
            v12 += 40;
            continue;
          }
LABEL_2548:
          LODWORD(v19) = v65;
          goto LABEL_2696;
        }
LABEL_1723:
        v497 = 0;
        goto LABEL_1724;
      case 0x81u:
        v498 = *((int *)v12 + 3);
        if ((_DWORD)v498)
          v499 = *(_QWORD *)(v1554 + (v498 << 6));
        else
          v499 = 0;
        v802 = *(_QWORD *)(v1551 + 120);
        v803 = *(_QWORD **)(*(_QWORD *)(v802 + 8 * *((int *)v12 + 1)) + 40);
        v804 = *(_QWORD *)(*(_QWORD *)(v802 + 8 * *((int *)v12 + 2)) + 40);
        v805 = v803[4];
        v806 = *(int8x8_t **)(v805 + 136);
        sub_1ACBEF184(v804);
        v807 = *(unsigned int *)(v804 + 64);
        if (v807 > 0x7F)
        {
          if (v807 >> 14)
          {
            v809 = sub_1ACBF8034(v806, v807);
          }
          else
          {
            v806->i8[0] = (v807 >> 7) | 0x80;
            v806->i8[1] = v807 & 0x7F;
            v809 = 2;
          }
          v808 = (int8x8_t *)((char *)v806 + v809);
        }
        else
        {
          v806->i8[0] = v807;
          v808 = (int8x8_t *)((char *)v806 + 1);
        }
        v1507 = v12;
        v1516 = v17;
        if (!v803[16])
        {
          if (v499 > 0x7F)
          {
            if (v499 >> 14)
            {
              v1000 = (int)sub_1ACBF8034(v808, v499);
            }
            else
            {
              v808->i8[0] = (v499 >> 7) | 0x80;
              v808->i8[1] = v499 & 0x7F;
              v1000 = 2;
            }
          }
          else
          {
            v808->i8[0] = v499;
            v1000 = 1;
          }
          v808 = (int8x8_t *)((char *)v808 + v1000);
        }
        v1205 = *(unsigned __int16 *)(v804 + 68);
        v1206 = *(char **)(v804 + 56);
        v1207 = (unsigned int *)&v1206[v1205];
        v1208 = *(_QWORD *)(*(_QWORD *)(v804 + 136) + 88);
        if ((unint64_t)&v1206[v1205] > v1208)
        {
          v1443 = 86409;
        }
        else
        {
          v1209 = *(unsigned int *)(v804 + 64);
          v1210 = v803[17];
          v1211 = *(unsigned __int16 *)(v1210 + 14);
          if ((_DWORD)v1209 == (_DWORD)v1205 && v1205 < v1211)
          {
            memcpy(v808, *(const void **)(v804 + 56), *(unsigned __int16 *)(v804 + 68));
            v1542 = 0;
            *(_DWORD *)(v805 + 144) = v1205 + (_DWORD)v808 - *(_DWORD *)(v805 + 136);
            v17 = v1516;
            v12 = v1507 + 40;
            continue;
          }
          v1213 = v804;
          v1214 = v808;
          LODWORD(v1557) = 0;
          v1526 = v1213;
          v1548 = **(_QWORD **)(v1213 + 32);
          *(_QWORD *)&__buf[0] = 0;
          if (v1209 <= v1211)
          {
            v1486 = 0;
            *(_DWORD *)(v805 + 144) = v1209 + (_DWORD)v808 - *(_DWORD *)(v805 + 136);
            v1217 = v1209;
          }
          else
          {
            v1215 = *(unsigned __int16 *)(v1210 + 16);
            v1216 = (v1209 - v1215) % (*(_DWORD *)(*(_QWORD *)(v1210 + 72) + 56) - 4) + v1215;
            if (v1216 <= (int)v1211)
              v1217 = v1216;
            else
              v1217 = v1215;
            v1218 = v1217 + (_DWORD)v808 - *(_DWORD *)(v805 + 136);
            *(_DWORD *)(v805 + 144) = v1218;
            if (v1217 >= v1209)
            {
              v1486 = 0;
            }
            else
            {
              v1486 = (int8x8_t *)((char *)v808 + v1217);
              *(_DWORD *)(v805 + 144) = v1218 + 4;
            }
          }
          v1501 = v1209;
          if (v1209 <= v1205)
          {
            v1219 = 0;
            goto LABEL_2076;
          }
          if ((unint64_t)(v1207 + 1) <= v1208)
          {
            v1219 = bswap32(*v1207);
LABEL_2076:
            v1494 = 0;
            while (1)
            {
              v1501 -= v1217;
              if (!(_DWORD)v1205)
                goto LABEL_2082;
LABEL_2078:
              v1220 = v1217 >= v1205 ? v1205 : v1217;
              memcpy(v1214, v1206, v1220);
              v1217 -= v1220;
              LODWORD(v1205) = v1205 - v1220;
              v1214 = (int8x8_t *)((char *)v1214 + v1220);
              v1206 += v1220;
LABEL_2082:
              while (v1217)
              {
                v1221 = *(_QWORD *)&__buf[0];
                if (*(_QWORD *)&__buf[0])
                {
                  if ((*(_WORD *)(*(_QWORD *)&__buf[0] + 52) & 0x20) != 0)
                  {
                    v1222 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 40);
                    --*(_DWORD *)(v1222 + 152);
                    *(_QWORD *)(v1221 + 32) = *(_QWORD *)(v1222 + 168);
                    *(_QWORD *)(v1222 + 168) = v1221;
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1222 + 72) + 144))(*(_QWORD *)(v1222 + 72), *(_QWORD *)(v1222 + 200) * (*(_DWORD *)(v1221 + 48) - 1), *(_QWORD *)(v1221 + 8));
                  }
                  else
                  {
                    sub_1ACBE906C(*(uint64_t *)&__buf[0]);
                  }
                }
                *(_QWORD *)&__buf[0] = 0;
                v1223 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(v1548 + 288))(v1548, v1219, __buf, 2);
                LODWORD(v1557) = v1223;
                if (v1223)
                {
                  LODWORD(v19) = v1223;
                  goto LABEL_2116;
                }
                v1224 = *(unsigned int **)(*(_QWORD *)&__buf[0] + 8);
                v1225 = *v1224;
                v1206 = (char *)(v1224 + 1);
                v1219 = bswap32(v1225);
                v1226 = *(_DWORD *)(*(_QWORD *)(v1526 + 32) + 56);
                LODWORD(v1205) = v1226 - 4;
                if (v1226 != 4)
                  goto LABEL_2078;
              }
              LODWORD(v19) = v1557;
              v1227 = (_DWORD)v1557 || v1501 == 0;
              if (!v1227 && v1486 != 0)
                break;
              v1217 = 0;
LABEL_2112:
              if (!v1501 || (_DWORD)v19)
              {
LABEL_2116:
                v11 = v1551;
                v12 = v1507;
                v17 = v1516;
                if (v1494)
                {
                  v1232 = v19;
                  v1233 = *(_QWORD *)(v1494 + 112);
                  if ((*(_WORD *)(v1233 + 52) & 0x20) != 0)
                  {
                    v1234 = *(_QWORD *)(v1233 + 40);
                    --*(_DWORD *)(v1234 + 152);
                    *(_QWORD *)(v1233 + 32) = *(_QWORD *)(v1234 + 168);
                    *(_QWORD *)(v1234 + 168) = v1233;
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1234 + 72) + 144))(*(_QWORD *)(v1234 + 72), *(_QWORD *)(v1234 + 200) * (*(_DWORD *)(v1233 + 48) - 1), *(_QWORD *)(v1233 + 8));
                  }
                  else
                  {
                    sub_1ACBE906C(v1233);
                  }
                  LODWORD(v19) = v1232;
                }
                v1235 = *(_QWORD *)&__buf[0];
                if (*(_QWORD *)&__buf[0])
                {
                  v1236 = v19;
                  if ((*(_WORD *)(*(_QWORD *)&__buf[0] + 52) & 0x20) != 0)
                  {
                    v1237 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 40);
                    --*(_DWORD *)(v1237 + 152);
                    *(_QWORD *)(v1235 + 32) = *(_QWORD *)(v1237 + 168);
                    *(_QWORD *)(v1237 + 168) = v1235;
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1237 + 72) + 144))(*(_QWORD *)(v1237 + 72), *(_QWORD *)(v1237 + 200) * (*(_DWORD *)(v1235 + 48) - 1), *(_QWORD *)(v1235 + 8));
                  }
                  else
                  {
                    sub_1ACBE906C(*(uint64_t *)&__buf[0]);
                  }
                  LODWORD(v19) = v1236;
                }
                if (!(_DWORD)v19)
                {
                  v1542 = 0;
                  v12 = v1507 + 40;
                  goto LABEL_22;
                }
                goto LABEL_2696;
              }
            }
            LODWORD(v1556) = 0;
            *(_QWORD *)&v1558 = 0;
            v1229 = sub_1ACBA3368(v805, (uint64_t *)&v1558, (int *)&v1556, 0, 0);
            LODWORD(v1557) = v1229;
            v1486->i32[0] = bswap32(v1556);
            if (*(_BYTE *)(v805 + 33) && v1494)
            {
              sub_1ACBAF160((_DWORD *)v805, (int)v1556, 4, *(_DWORD *)(v1494 + 4), &v1557);
            }
            else if (!v1494)
            {
              goto LABEL_2106;
            }
            v1230 = *(_QWORD *)(v1494 + 112);
            if ((*(_WORD *)(v1230 + 52) & 0x20) != 0)
            {
              v1231 = *(_QWORD *)(v1230 + 40);
              --*(_DWORD *)(v1231 + 152);
              *(_QWORD *)(v1230 + 32) = *(_QWORD *)(v1231 + 168);
              *(_QWORD *)(v1231 + 168) = v1230;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1231 + 72) + 144))(*(_QWORD *)(v1231 + 72), *(_QWORD *)(v1231 + 200) * (*(_DWORD *)(v1230 + 48) - 1), *(_QWORD *)(v1230 + 8));
            }
            else
            {
              sub_1ACBE906C(v1230);
            }
LABEL_2106:
            v1494 = v1558;
            if ((_QWORD)v1558)
            {
              v1486 = *(int8x8_t **)(v1558 + 80);
              v1486->i32[0] = 0;
              v1214 = (int8x8_t *)((char *)v1486 + 4);
              if (*(_DWORD *)(v805 + 56) - 4 >= v1501)
                v1217 = v1501;
              else
                v1217 = *(_DWORD *)(v805 + 56) - 4;
            }
            else
            {
              v1217 = 0;
            }
            LODWORD(v19) = v1557;
            goto LABEL_2112;
          }
          v1443 = 86434;
        }
        LODWORD(v19) = sub_1ACBEB08C(v1443);
        v11 = v1551;
        v12 = v1507;
        v17 = v1516;
        goto LABEL_2696;
      case 0x82u:
        v500 = *((_DWORD *)v12 + 2);
        v501 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (v12[1] == 251 && ((v502 = *(_QWORD *)(v13 + 360)) != 0 || *(_QWORD *)(v13 + 312)))
        {
          v503 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *(char *)(v501 + 1));
          v504 = *((_QWORD *)v12 + 2);
          if ((*((_WORD *)v12 + 1) & 2) != 0 && *(_BYTE *)(v501 + 4))
          {
            v505 = *(_QWORD *)(v501 + 40);
            sub_1ACBEF184(v505);
            *(_QWORD *)(v501 + 72) = *(_QWORD *)(v505 + 48);
            v502 = *(_QWORD *)(v13 + 360);
          }
          v506 = v504 != 0;
          if (v502 && v504)
          {
            if ((v500 & 4) != 0)
              v507 = 23;
            else
              v507 = 9;
            sub_1ACBF5874((uint64_t *)v1551, v501, v507, v503, v504, *(_QWORD *)(v501 + 72), *((_DWORD *)v12 + 3), 0xFFFFFFFF);
            v506 = 1;
          }
        }
        else
        {
          v506 = 0;
          v504 = 0;
          v503 = 0;
        }
        if ((v500 & 0x40) != 0)
          goto LABEL_21;
        v370 = sub_1ACB9A20C(*(unsigned __int8 **)(v501 + 40), v12[2]);
        *(_QWORD *)(v501 + 24) = 0;
        if (v370)
          goto LABEL_2551;
        ++v1476;
        if ((v500 & 1) != 0)
        {
          ++*(_QWORD *)(v1551 + 56);
          v1023 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(v13 + 312);
          if (v1023)
            v1024 = v506;
          else
            v1024 = 0;
          if (v1024)
          {
            if ((*(_BYTE *)(v504 + 48) & 0x80) == 0)
              v1023(*(_QWORD *)(v13 + 304), 9, v503, *(_QWORD *)v504, *(_QWORD *)(v501 + 72));
            v1542 = 0;
            v12 += 40;
          }
          else
          {
            v1542 = 0;
            v12 += 40;
          }
        }
        else
        {
          v1542 = 0;
          v12 += 40;
        }
        continue;
      case 0x83u:
        v508 = *(_QWORD *)(v1551 + 56);
        v509 = *(_QWORD *)(v13 + 128) + v508;
        *(_QWORD *)(v13 + 120) = v508;
        *(_QWORD *)(v13 + 128) = v509;
        *(_QWORD *)(v1551 + 56) = 0;
        v12 += 40;
        continue;
      case 0x84u:
        v510 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v511 = *((unsigned int *)v12 + 4);
        v512 = *((int *)v12 + 3);
        v514 = *(_QWORD *)(v510 + 40);
        v513 = *(_QWORD *)(v510 + 48);
        v515 = *(uint64_t **)(v514 + 48);
        if (v515)
          goto LABEL_1853;
        v516 = (unint64_t)*(unsigned __int16 *)(v513 + 6) << 6;
        v517 = *(_QWORD *)(v513 + 16);
        if (v517)
          v518 = sub_1ACBE1124(v517, v516 + 104);
        else
          v518 = sub_1ACB5D828(v516 + 104);
        v515 = (uint64_t *)v518;
        if (v518)
        {
          *(_QWORD *)v518 = v513;
          *(_QWORD *)(v518 + 8) = v518 + 40;
          *(_QWORD *)(v514 + 48) = v518;
          *(_WORD *)(v518 + 28) = v511;
LABEL_1853:
          if (*(_BYTE *)(v514 + 88))
          {
            if (*(_BYTE *)(v514 + 89))
              v1128 = *(_QWORD *)(v514 + 16);
            else
              v1128 = *(_QWORD *)(*(_QWORD *)(v514 + 24) + 24)
                    + 80 * *(int *)(*(_QWORD *)(*(_QWORD *)(v514 + 24) + 16) + 4);
            v1129 = (unsigned int *)(v1128 + 20);
            v1130 = *(char **)(v1128 + 40);
          }
          else
          {
            v1129 = *(unsigned int **)(v514 + 56);
            v1130 = (char *)(v1129 + 4);
          }
          sub_1ACB9E49C(v513, *v1129, v1130, (uint64_t)v515);
          if ((int)v511 >= 1)
          {
            v1131 = (__int16 *)(v515[1] + 20);
            do
            {
              v1132 = *v1131;
              v1131 += 32;
              if ((v1132 & 1) != 0)
                goto LABEL_1561;
              --v511;
            }
            while (v511);
          }
          v1542 = 0;
          if (!sub_1ACBF5AA0(*(_DWORD *)(v1554 + (v512 << 6) + 16), *(char **)(v1554 + (v512 << 6) + 8), v515, 0))goto LABEL_21;
LABEL_2381:
          v211 = *((_DWORD *)v12 + 2);
LABEL_2382:
          v12 = &v1552[40 * v211];
          continue;
        }
        *(_QWORD *)(v514 + 48) = 0;
        goto LABEL_2652;
      case 0x85u:
        v519 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40);
        if (*(_BYTE *)(v519 + 88))
        {
          if (*(_BYTE *)(v519 + 89))
            v520 = *(_QWORD *)(v519 + 16);
          else
            v520 = *(_QWORD *)(*(_QWORD *)(v519 + 24) + 24)
                 + 80 * *(int *)(*(_QWORD *)(*(_QWORD *)(v519 + 24) + 16) + 4);
          v810 = (signed int *)(v520 + 20);
          v811 = *(const void **)(v520 + 40);
        }
        else
        {
          v810 = *(signed int **)(v519 + 56);
          v811 = v810 + 4;
        }
        v1036 = *((int *)v12 + 2);
        v1037 = *v810;
        v1038 = v1554 + (v1036 << 6);
        if (*(_DWORD *)(v1038 + 32) >= v1037)
        {
          v1040 = *(void **)(v1038 + 40);
          *(_QWORD *)(v1038 + 8) = v1040;
          v1041 = 16;
        }
        else
        {
          if (sub_1ACB7E454(v1554 + (v1036 << 6), v1037, 0))
          {
LABEL_2652:
            LODWORD(v19) = 7;
            v11 = v1551;
            goto LABEL_2696;
          }
          v1039 = v1554 + (v1036 << 6);
          v1040 = *(void **)(v1039 + 8);
          v1041 = *(_WORD *)(v1039 + 20) & 0xF240 | 0x10;
        }
        v1042 = v1554 + (v1036 << 6);
        *(_DWORD *)(v1042 + 16) = v1037;
        *(_WORD *)(v1042 + 20) = v1041;
        memcpy(v1040, v811, v1037);
        v1542 = 0;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 3)) + 24) = 0;
        v12 += 40;
        continue;
      case 0x86u:
        v521 = *(_QWORD *)(v1551 + 104);
        v522 = *((int *)v12 + 2);
        v523 = v521 + (v522 << 6);
        v524 = (_WORD *)(v523 + 20);
        if ((*(_WORD *)(v523 + 20) & 0x9000) != 0)
          sub_1ACBF7980(v521 + (v522 << 6));
        else
          *v524 = 4;
        v812 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40);
        sub_1ACBEF184(v812);
        a6 = *(unsigned int *)(v812 + 64);
        if (a6 > *(_DWORD *)(v13 + 136))
          goto LABEL_2693;
        v813 = *(_QWORD *)(v812 + 56);
        v814 = *(_DWORD *)(*(_QWORD *)(v812 + 136) + 88) - v813;
        if (*(unsigned __int16 *)(v812 + 68) <= v814)
          v815 = *(unsigned __int16 *)(v812 + 68);
        else
          v815 = v814 & ~(v814 >> 31);
        v816 = v521 + (v522 << 6);
        *(_QWORD *)(v816 + 8) = v813;
        if (v815 >= a6)
        {
          *v524 = 16400;
          *(_DWORD *)(v816 + 16) = a6;
        }
        else
        {
          v370 = sub_1ACB934EC(v812, 0, a6, v521 + (v522 << 6));
          if (v370)
            goto LABEL_2551;
        }
        v11 = v1551;
        if (*((_DWORD *)v12 + 3))
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        if ((*v524 & 0x4000) == 0)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        if (!sub_1ACBC6854((int *)v523))
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        goto LABEL_8;
      case 0x87u:
        *(_QWORD *)&__buf[0] = 0;
        v525 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v526 = (_WORD *)(v525 + 20);
        if ((*(_WORD *)(v525 + 20) & 0x9000) != 0)
          sub_1ACBF7980(*(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        else
          *v526 = 4;
        v817 = *((int *)v12 + 1);
        v818 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v817);
        if (*(_BYTE *)(v818 + 2))
          goto LABEL_1122;
        if (*(_BYTE *)(v818 + 3))
        {
          v860 = (_QWORD *)(v818 + 72);
        }
        else
        {
          v1141 = *(_QWORD *)(v818 + 40);
          if (*(_BYTE *)v818 == 2)
          {
            v1142 = *(_QWORD *)v1141;
            v860 = __buf;
            v1143 = (*(uint64_t (**)(uint64_t, _OWORD *))(**(_QWORD **)v1141 + 96))(v1141, __buf);
            sub_1ACBF1EB0(v1551, v1142);
            if (v1143)
            {
              LODWORD(v19) = v1143;
              v11 = v1551;
              goto LABEL_2696;
            }
            v1542 = 0;
          }
          else
          {
            if (*(_BYTE *)v1141)
            {
              v370 = sub_1ACBF3F00(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v817));
              if (v370)
                goto LABEL_2551;
              if (*(_BYTE *)(v818 + 2))
              {
                v1542 = 0;
LABEL_1122:
                *v526 = 1;
                v12 += 40;
                continue;
              }
              v1141 = *(_QWORD *)(v818 + 40);
            }
            sub_1ACBEF184(v1141);
            v1542 = 0;
            v860 = (_QWORD *)(v1141 + 48);
          }
        }
        *(_QWORD *)v525 = *v860;
        v12 += 40;
        continue;
      case 0x88u:
        v11 = v1551;
        v527 = *((int *)v12 + 1);
        v528 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v527);
        if (v528)
          goto LABEL_574;
        v528 = sub_1ACB89F34(v1551, v527, 1, 3);
        if (!v528)
          goto LABEL_8;
        *(_DWORD *)(v528 + 28) = 0;
        *(_BYTE *)(v528 + 4) = 1;
        *(_BYTE *)(v528 + 5) |= 8u;
        *(_QWORD *)(v528 + 40) = &unk_1EECAD258;
LABEL_574:
        *(_BYTE *)(v528 + 2) = 1;
        *(_DWORD *)(v528 + 24) = 0;
        if (*(_BYTE *)v528)
          goto LABEL_21;
        sub_1ACBF05BC(*(_QWORD *)(v528 + 40));
        v12 += 40;
        continue;
      case 0x8Au:
        memset(__buf, 0, 48);
        v11 = v1551;
        v529 = *((int *)v12 + 2);
        v530 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v531 = *((_WORD *)v12 + 1);
        if ((v531 & 1) != 0)
          ++*(_QWORD *)(v1551 + 56);
        v532 = v1554;
        v533 = v1554 + (v529 << 6);
        if ((*(_WORD *)(v533 + 20) & 0x400) == 0)
          goto LABEL_581;
        v65 = sub_1ACBA6920((int *)v533);
        if (v65)
          goto LABEL_2548;
        v531 = *((_WORD *)v12 + 1);
        v532 = v1554;
LABEL_581:
        v534 = v532 + (v529 << 6);
        *((_QWORD *)&__buf[0] + 1) = *(int *)(v534 + 16);
        *(_QWORD *)&__buf[0] = *(_QWORD *)(v534 + 8);
        *((_QWORD *)&__buf[1] + 1) = v532 + ((uint64_t)*((int *)v12 + 3) << 6);
        LOWORD(__buf[2]) = *((_DWORD *)v12 + 4);
        v535 = (v531 & 0x10) != 0 ? *(_DWORD *)(v530 + 28) : 0;
        v65 = sub_1ACB9D4C4(*(unsigned __int8 **)(v530 + 40), (uint64_t)__buf, v531 & 0x8A, v535);
        *(_DWORD *)(v530 + 24) = 0;
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x8Bu:
        v11 = v1551;
        v536 = *((int *)v12 + 2);
        v537 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v538 = v1554 + (v536 << 6);
        if ((*(_WORD *)(v538 + 20) & 0x400) != 0)
        {
          v65 = sub_1ACBA6920((int *)(v1554 + (v536 << 6)));
          if (v65)
            goto LABEL_2548;
        }
        v539 = *(_QWORD *)(v537 + 40);
        v542 = *(_QWORD *)(v538 + 8);
        v541 = (const void **)(v538 + 8);
        v540 = v542;
        v543 = (char *)(v542 + 1);
        v544 = *(unsigned __int8 *)(v542 + 1);
        if (*(char *)(v542 + 1) < 0)
        {
          v545 = *(unsigned __int8 *)(v540 + 2);
          if (*(char *)(v540 + 2) < 0)
          {
            v1144 = *(char *)(v540 + 3);
            if (v1144 < 0)
            {
              *(_QWORD *)&__buf[0] = 0;
              sub_1ACB8A6CC(v543, (unint64_t *)__buf);
              if (HIDWORD(*(_QWORD *)&__buf[0]))
                v544 = -1;
              else
                v544 = __buf[0];
            }
            else
            {
              v544 = v1144 & 0x7F | (v544 << 14) & 0x1FC07F | ((v545 & 0x7F) << 7);
            }
          }
          else
          {
            v544 = ((v544 & 0x7F) << 7) | v545;
          }
        }
        v1293 = v544 == 7 || (v544 - 1) > 8;
        if (v1293)
        {
          if (v544 < 11 || (v544 & 1) == 0)
          {
            *(_BYTE *)(v539 + 92) = 0;
            goto LABEL_2274;
          }
          v1295 = *(_BYTE *)(v539 + 92) & 2;
        }
        else
        {
          v1295 = *(_BYTE *)(v539 + 92) & 1;
        }
        *(_BYTE *)(v539 + 92) = v1295;
LABEL_2274:
        v1296 = v1554 + (v536 << 6);
        v1299 = *(int *)(v1296 + 16);
        v1297 = (int *)(v1296 + 16);
        v1298 = v1299;
        v1540 = v18;
        v1300 = 1;
        if (v1299 >= 0x80)
        {
          v1301 = v1298;
          do
          {
            v1302 = v1301 >> 14;
            v1301 >>= 7;
            ++v1300;
          }
          while (v1302);
        }
        v1303 = v1298 + 16;
        v1304 = *(_DWORD *)(v539 + 4);
        if (!v1304)
          goto LABEL_2286;
        if (*(_QWORD *)(v539 + 64))
        {
          v1549 = 0;
          v1305 = *(_DWORD *)(v539 + 80);
          if (!v1305 || v1305 + v1303 <= v1304)
          {
LABEL_2287:
            *(_DWORD *)(v539 + 72) += v1300 + v1298;
            if (v1300 + (int)v1298 > *(_DWORD *)(v539 + 8))
              *(_DWORD *)(v539 + 8) = v1300 + v1298;
            v1308 = *(_QWORD *)(v539 + 64);
            if (v1308)
            {
              v1309 = *(_DWORD *)(v539 + 80);
              v1310 = *(int *)(v539 + 84);
              v1311 = v1309 + v1303;
              v1312 = *(_QWORD *)(v539 + 56);
              if (v1309 + v1303 <= (int)v1310)
                goto LABEL_2307;
              do
                v1310 *= 2;
              while (v1310 < v1311);
              if (v1312)
                v1313 = v1312 - v1308;
              else
                v1313 = -1;
              v1314 = *(int *)(v539 + 4);
              if (v1310 < v1314)
                v1314 = v1310;
              if (v1314 <= v1311)
                v1315 = v1311;
              else
                v1315 = v1314;
              v1308 = sub_1ACB6BB48(v1308, v1315);
              if (v1308)
              {
                if ((v1313 & 0x80000000) != 0)
                {
                  v1312 = *(_QWORD *)(v539 + 56);
                }
                else
                {
                  v1312 = v1308 + v1313;
                  *(_QWORD *)(v539 + 56) = v1312;
                }
                *(_QWORD *)(v539 + 64) = v1308;
                *(_DWORD *)(v539 + 84) = v1315;
                v1309 = *(_DWORD *)(v539 + 80);
LABEL_2307:
                v18 = v1540;
                v1317 = (_DWORD *)(v1308 + v1309);
                *(_DWORD *)(v539 + 80) = v1309 + ((v1298 + 23) & 0xFFFFFFF8);
                if (v1312)
                  v1317[2] = v1312 - v1308;
                goto LABEL_2309;
              }
            }
            else
            {
              v1316 = sub_1ACB5D828(v1303);
              if (v1316)
              {
                v1317 = (_DWORD *)v1316;
                *(_QWORD *)(v1316 + 8) = *(_QWORD *)(v539 + 56);
                v18 = v1540;
LABEL_2309:
                memcpy(v1317 + 4, *v541, *v1297);
                *v1317 = *v1297;
                *(_QWORD *)(v539 + 56) = v1317;
                LODWORD(v19) = v1549;
                if (v1549)
                  goto LABEL_2562;
                v1542 = 0;
                v12 += 40;
                continue;
              }
            }
            LODWORD(v19) = 7;
            LOBYTE(v18) = v1540;
            v11 = v1551;
            goto LABEL_2696;
          }
        }
        else
        {
          v1306 = *(_DWORD *)(v539 + 72);
          if (v1306 <= v1304 && (v1306 <= *(_DWORD *)v539 || !dword_1ECD3E948))
          {
LABEL_2286:
            v1549 = 0;
            goto LABEL_2287;
          }
        }
        sub_1ACBFA614(v539);
        v1549 = v1307;
        *(_DWORD *)(v539 + 72) = 0;
        *(_DWORD *)(v539 + 80) = 0;
        goto LABEL_2287;
      case 0x8Cu:
        LODWORD(v1558) = 0;
        memset(__buf, 0, 40);
        v11 = v1551;
        v546 = *(_QWORD **)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v548 = (unsigned __int8 *)v546[5];
        v547 = v546[6];
        WORD6(__buf[1]) = *((_DWORD *)v12 + 3);
        v549 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
        *(_QWORD *)&__buf[0] = v547;
        *((_QWORD *)&__buf[0] + 1) = v549;
        v65 = sub_1ACBF514C((uint64_t)v548, (uint64_t *)__buf, (int *)&v1558);
        if (v65)
          goto LABEL_2548;
        if ((_DWORD)v1558)
        {
          if (*((_WORD *)v12 + 1) && (*(_QWORD *)(v13 + 48) & 0x10000001) != 1)
          {
            sub_1ACBE1FD0(779, 106485, "index corruption");
            LODWORD(v19) = 779;
            goto LABEL_2696;
          }
        }
        else
        {
          v65 = sub_1ACB9A20C(v548, 4);
          if (v65)
            goto LABEL_2548;
        }
        v1542 = 0;
        v546[3] = 0;
        v12 += 40;
        continue;
      case 0x8Du:
      case 0x8Eu:
        *(_QWORD *)&__buf[0] = 0;
        v11 = v1551;
        v114 = *((int *)v12 + 1);
        v115 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v114);
        if (**(_BYTE **)(v115 + 40))
        {
          v65 = sub_1ACBF3F00(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * v114));
          if (v65)
            goto LABEL_2548;
        }
        if (*(_BYTE *)(v115 + 2))
        {
          v116 = v1554 + ((uint64_t)*((int *)v12 + 2) << 6);
          v118 = *(_WORD *)(v116 + 20);
          v117 = (_WORD *)(v116 + 20);
          if ((v118 & 0x9000) != 0)
            sub_1ACBF2A54((int *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6)));
          else
            *v117 = 1;
          v1542 = 0;
          v12 += 40;
        }
        else
        {
          *(_QWORD *)&__buf[0] = 0;
          v65 = sub_1ACB935F8(v13, *(_QWORD *)(v115 + 40), __buf);
          if (v65)
            goto LABEL_2548;
          if (*v12 == 141)
          {
            v697 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 3));
            *(_WORD *)(v697 + 2) = 256;
            *(_QWORD *)(v697 + 72) = *(_QWORD *)&__buf[0];
            *(_DWORD *)(v697 + 24) = 0;
            *(_QWORD *)(v697 + 8) = *((_QWORD *)v12 + 2);
            *(_QWORD *)(v697 + 32) = v115;
            v1542 = 0;
            v12 += 40;
          }
          else
          {
            v863 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
            if ((*(_WORD *)(v863 + 20) & 0x9000) != 0)
              v863 = sub_1ACBF7980(v863);
            else
              *(_WORD *)(v863 + 20) = 4;
            *(_QWORD *)v863 = *(_QWORD *)&__buf[0];
            v1542 = 0;
            v12 += 40;
          }
        }
        continue;
      case 0x8Fu:
        v11 = v1551;
        v550 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (!*(_BYTE *)(v550 + 3))
          goto LABEL_21;
        v65 = sub_1ACBF3E90(v550);
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x90u:
        v1531 = v18;
        v1503 = v12;
        v1511 = v17;
        v11 = v1551;
        v551 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v552 = (_WORD *)(v551 + 20);
        if ((*(_WORD *)(v551 + 20) & 0x9000) != 0)
          sub_1ACBF7980(v551);
        else
          *v552 = 4;
        *v552 = 1;
        if (*(_DWORD *)(v13 + 212) > *(_DWORD *)(v13 + 224) + 1)
        {
          *(_BYTE *)(v1551 + 264) = 2;
          LODWORD(v19) = 6;
          goto LABEL_2657;
        }
        v819 = *((int *)v1503 + 3);
        v820 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * v819 + 8);
        v821 = *((unsigned int *)v1503 + 1);
        if (*(_BYTE *)(v820 + 17))
        {
          ++*(_DWORD *)(v820 + 20);
          if (!*(_BYTE *)(v820 + 18))
            sub_1ACBECF6C(v820);
        }
        v822 = *(_DWORD **)(v820 + 8);
        if (v822[16] < v821)
        {
          v823 = sub_1ACBEB08C(87002);
LABEL_1132:
          LODWORD(v19) = v823;
LABEL_1133:
          v824 = 0;
          goto LABEL_1134;
        }
        v823 = sub_1ACBB8A64(v820, v821, 0);
        if (v823)
          goto LABEL_1132;
        *(_QWORD *)&__buf[0] = 0;
        v823 = (*(uint64_t (**)(void))(*(_QWORD *)v822 + 288))();
        if (v823)
          goto LABEL_1132;
        v1269 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 16);
        if (*(_DWORD *)(v1269 + 4) != (_DWORD)v821)
        {
          v1270 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 8);
          *(_QWORD *)(v1269 + 112) = *(_QWORD *)&__buf[0];
          *(_QWORD *)(v1269 + 72) = v822;
          *(_QWORD *)(v1269 + 80) = v1270;
          *(_DWORD *)(v1269 + 4) = v821;
          if ((_DWORD)v821 == 1)
            v1271 = 100;
          else
            v1271 = 0;
          *(_BYTE *)(v1269 + 9) = v1271;
        }
        if (*((_BYTE *)v822 + 33))
        {
          v1272 = *(_QWORD *)(v820 + 8);
          if (*(_BYTE *)(v820 + 17))
          {
            ++*(_DWORD *)(v820 + 20);
            if (*(_BYTE *)(v820 + 18))
            {
              v1273 = 0;
            }
            else
            {
              sub_1ACBECF6C(v820);
              v1273 = *(_BYTE *)(v820 + 17) == 0;
            }
          }
          else
          {
            v1273 = 1;
          }
          v1394 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1272 + 24) + 80) + 52);
          if (!v1273)
          {
            v1395 = *(_DWORD *)(v820 + 20) - 1;
            *(_DWORD *)(v820 + 20) = v1395;
            if (!v1395)
              sub_1ACBED048(v820);
          }
          v1396 = bswap32(v1394);
          if (v1396 == (_DWORD)v821)
          {
            v1397 = sub_1ACBB0704(*(_QWORD *)(v1269 + 72), v1269, *(unsigned int *)(v1269 + 4));
            v1398 = v1269;
            v1399 = v1397;
            v1400 = *(_QWORD *)(v1398 + 112);
            if ((*(_WORD *)(v1400 + 52) & 0x20) != 0)
            {
              v1402 = *(_QWORD *)(v1400 + 40);
              --*(_DWORD *)(v1402 + 152);
              *(_QWORD *)(v1400 + 32) = *(_QWORD *)(v1402 + 168);
              *(_QWORD *)(v1402 + 168) = v1400;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1402 + 72) + 144))(*(_QWORD *)(v1402 + 72), *(_QWORD *)(v1402 + 200) * (*(_DWORD *)(v1400 + 48) - 1), *(_QWORD *)(v1400 + 8));
            }
            else
            {
              sub_1ACBE906C(v1400);
            }
            v824 = 0;
            LODWORD(v19) = v1399;
            if (v1399)
              goto LABEL_1134;
          }
          else
          {
            v1401 = *(_QWORD *)(v1269 + 112);
            if ((*(_WORD *)(v1401 + 52) & 0x20) != 0)
            {
              v1407 = *(_QWORD *)(v1401 + 40);
              --*(_DWORD *)(v1407 + 152);
              *(_QWORD *)(v1401 + 32) = *(_QWORD *)(v1407 + 168);
              *(_QWORD *)(v1407 + 168) = v1401;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1407 + 72) + 144))(*(_QWORD *)(v1407 + 72), *(_QWORD *)(v1407 + 200) * (*(_DWORD *)(v1401 + 48) - 1), *(_QWORD *)(v1401 + 8));
            }
            else
            {
              sub_1ACBE906C(v1401);
            }
            *(_QWORD *)&__buf[0] = 0;
            v823 = (*(uint64_t (**)(void))(*(_QWORD *)v822 + 288))();
            if (v823)
              goto LABEL_1132;
            v1408 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 16);
            if (*(_DWORD *)(v1408 + 4) != v1396)
            {
              v1409 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 8);
              *(_QWORD *)(v1408 + 112) = *(_QWORD *)&__buf[0];
              *(_QWORD *)(v1408 + 72) = v822;
              *(_QWORD *)(v1408 + 80) = v1409;
              *(_DWORD *)(v1408 + 4) = v1396;
              if (v1396 == 1)
                v1410 = 100;
              else
                v1410 = 0;
              *(_BYTE *)(v1408 + 9) = v1410;
            }
            v1411 = sub_1ACBEF43C(v822, v1408, 1, 0, v821, 0);
            v1412 = *(_QWORD *)(v1408 + 112);
            if ((*(_WORD *)(v1412 + 52) & 0x20) != 0)
            {
              v1413 = *(_QWORD *)(v1412 + 40);
              --*(_DWORD *)(v1413 + 152);
              *(_QWORD *)(v1412 + 32) = *(_QWORD *)(v1413 + 168);
              *(_QWORD *)(v1413 + 168) = v1412;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1413 + 72) + 144))(*(_QWORD *)(v1413 + 72), *(_QWORD *)(v1413 + 200) * (*(_DWORD *)(v1412 + 48) - 1), *(_QWORD *)(v1412 + 8));
            }
            else
            {
              sub_1ACBE906C(v1412);
            }
            if (v1411)
            {
              LODWORD(v19) = v1411;
              goto LABEL_1133;
            }
            *(_QWORD *)&__buf[0] = 0;
            v1414 = (*(uint64_t (**)(void))(*(_QWORD *)v822 + 288))();
            if (v1414)
            {
              LODWORD(v19) = v1414;
              v824 = 0;
              v13 = v1488;
              goto LABEL_1134;
            }
            v1415 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 16);
            if (*(_DWORD *)(v1415 + 4) == v1396)
            {
              v1416 = *(_QWORD *)(v1415 + 72);
            }
            else
            {
              v1417 = *(_QWORD *)(*(_QWORD *)&__buf[0] + 8);
              *(_QWORD *)(v1415 + 112) = *(_QWORD *)&__buf[0];
              *(_QWORD *)(v1415 + 72) = v822;
              *(_QWORD *)(v1415 + 80) = v1417;
              *(_DWORD *)(v1415 + 4) = v1396;
              if (v1396 == 1)
                v1418 = 100;
              else
                v1418 = 0;
              *(_BYTE *)(v1415 + 9) = v1418;
              v1416 = (uint64_t)v822;
            }
            v1419 = sub_1ACBB0704(v1416, v1415, *(unsigned int *)(v1415 + 4));
            v1420 = *(_QWORD *)(v1415 + 112);
            if ((*(_WORD *)(v1420 + 52) & 0x20) != 0)
            {
              v1421 = *(_QWORD *)(v1420 + 40);
              --*(_DWORD *)(v1421 + 152);
              *(_QWORD *)(v1420 + 32) = *(_QWORD *)(v1421 + 168);
              *(_QWORD *)(v1421 + 168) = v1420;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1421 + 72) + 144))(*(_QWORD *)(v1421 + 72), *(_QWORD *)(v1421 + 200) * (*(_DWORD *)(v1420 + 48) - 1), *(_QWORD *)(v1420 + 8));
            }
            else
            {
              sub_1ACBE906C(v1420);
            }
            v824 = v1396;
            v13 = v1488;
            if (v1419)
            {
              LODWORD(v19) = v1419;
              goto LABEL_1133;
            }
          }
          v1403 = dword_1EECAC650 / v822[13];
          do
          {
            while (1)
            {
              do
                v1406 = v1396--;
              while (v1403 + 2 == v1406);
              if (v1396 >= 2)
                break;
              if (v1396)
                goto LABEL_2516;
            }
            v1404 = (v1406 - 3) / (v822[14] / 5u + 1) * (v822[14] / 5u + 1);
            if (v1404 + 1 == v1403)
              v1405 = 3;
            else
              v1405 = 2;
          }
          while (v1396 == v1405 + v1404);
LABEL_2516:
          LODWORD(v19) = sub_1ACBC4E30(v820, 4, v1396);
        }
        else
        {
          v1391 = sub_1ACBB0704(*(_QWORD *)(v1269 + 72), v1269, *(unsigned int *)(v1269 + 4));
          v1392 = *(_QWORD *)(v1269 + 112);
          if ((*(_WORD *)(v1392 + 52) & 0x20) != 0)
          {
            v1393 = *(_QWORD *)(v1392 + 40);
            --*(_DWORD *)(v1393 + 152);
            *(_QWORD *)(v1392 + 32) = *(_QWORD *)(v1393 + 168);
            *(_QWORD *)(v1393 + 168) = v1392;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1393 + 72) + 144))(*(_QWORD *)(v1393 + 72), *(_QWORD *)(v1393 + 200) * (*(_DWORD *)(v1392 + 48) - 1), *(_QWORD *)(v1392 + 8));
          }
          else
          {
            sub_1ACBE906C(v1392);
          }
          v824 = 0;
          LODWORD(v19) = v1391;
        }
LABEL_1134:
        if (*(_BYTE *)(v820 + 17))
        {
          v825 = *(_DWORD *)(v820 + 20) - 1;
          *(_DWORD *)(v820 + 20) = v825;
          if (!v825)
          {
            v826 = v820;
            v827 = v19;
            sub_1ACBED048(v826);
            LODWORD(v19) = v827;
          }
        }
        *v552 = 4;
        *(_QWORD *)v551 = v824;
        v11 = v1551;
        if (!(_DWORD)v19)
        {
          if (v824)
          {
            sub_1ACBF6250(v13, v819, v824, *((_DWORD *)v1503 + 1));
            v1542 = 0;
            v18 = (v819 + 1);
            v17 = v1511;
          }
          else
          {
            v1542 = 0;
            v17 = v1511;
            v18 = v1531;
          }
          v12 = v1503 + 40;
          continue;
        }
        goto LABEL_2657;
      case 0x91u:
        *(_QWORD *)&__buf[0] = 0;
        v65 = sub_1ACBB8A64(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 2) + 8), *((_DWORD *)v12 + 1), __buf);
        v553 = *((unsigned int *)v12 + 3);
        v11 = v1551;
        if ((_DWORD)v553)
        {
          v554 = *(_QWORD *)&__buf[0];
          *(_QWORD *)(v1551 + 56) += *(_QWORD *)&__buf[0];
          if ((int)v553 >= 1)
            *(_QWORD *)(v1554 + (v553 << 6)) += v554;
        }
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x92u:
        v11 = v1551;
        v555 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v556 = *(_QWORD *)(v555 + 40);
        if (*(_BYTE *)v555 == 1)
        {
          sub_1ACBF1224((_QWORD *)v13, v556);
          v12 += 40;
        }
        else
        {
          v65 = sub_1ACBB8A64(*(_QWORD *)(v556 + 8), *(_DWORD *)(v556 + 80), 0);
          if (v65)
            goto LABEL_2548;
          v1542 = 0;
          v12 += 40;
        }
        continue;
      case 0x93u:
        v11 = v1551;
        v557 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v557 + 20) & 0x9000) != 0)
          sub_1ACBF7980(*(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        else
          *(_WORD *)(v557 + 20) = 4;
        LODWORD(__buf[0]) = 0;
        v65 = sub_1ACBF48F4(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8), (unsigned int *)__buf, *((_DWORD *)v12 + 3));
        if (v65)
          goto LABEL_2548;
        v1542 = 0;
        *(_QWORD *)v557 = LODWORD(__buf[0]);
        v12 += 40;
        continue;
      case 0x94u:
        ++*(_BYTE *)(v13 + 112);
        v370 = sqlite3_exec((sqlite3 *)v13, *((const char **)v12 + 2), 0, 0, 0);
        --*(_BYTE *)(v13 + 112);
        if (v370)
          goto LABEL_2551;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x95u:
        memset(__buf, 0, 40);
        v558 = *((unsigned int *)v12 + 1);
        if (*((_QWORD *)v12 + 2))
        {
          *(_QWORD *)&__buf[0] = v13;
          *((_QWORD *)&__buf[0] + 1) = v1479;
          LODWORD(__buf[1]) = v558;
          DWORD2(__buf[1]) = 0;
          v559 = (_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * (int)v558);
          LODWORD(__buf[2]) = *(_DWORD *)(*(_QWORD *)(v559[1] + 8) + 64);
          v560 = (const char *)sub_1ACB6DDD0(v13, "SELECT*FROM\"%w\".%s WHERE %s ORDER BY rowid", a6, (uint64_t)a7, a8, a9, a10, a11, *v559);
          v11 = v1551;
          if (!v560)
          {
            sub_1ACBC4F54(v13);
            goto LABEL_8;
          }
          v561 = v560;
          *(_BYTE *)(v13 + 197) = 1;
          DWORD1(__buf[1]) = 0;
          HIDWORD(__buf[1]) = 0;
          v562 = sqlite3_exec((sqlite3 *)v13, v560, (int (__cdecl *)(void *, int, char **, char **))sub_1ACB65D80, __buf, 0);
          if (v562)
            v563 = v562;
          else
            v563 = DWORD1(__buf[1]);
          v564 = v563;
          if (!(v563 | HIDWORD(__buf[1])))
            v564 = sub_1ACBEB08C(106942);
          v565 = (char *)v561;
          v566 = v564;
          sub_1ACBE0F9C((_QWORD *)v13, v565);
          v567 = v566;
          *(_BYTE *)(v13 + 197) = 0;
        }
        else
        {
          sub_1ACBF62B4(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * (int)v558 + 24));
          *(_DWORD *)(v13 + 44) &= ~0x10u;
          v567 = sub_1ACB654E0(v13, v558, v1479, *((unsigned __int16 *)v12 + 1), v828, v829, v830, v831);
          *(_DWORD *)(v13 + 44) |= 1u;
          v11 = v1551;
          *(_WORD *)(v1551 + 268) &= 0xFFFCu;
        }
        if (!v567)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        v617 = v567;
        sub_1ACBC4F54(v13);
        if (v617 == 7)
          goto LABEL_8;
        goto LABEL_2608;
      case 0x96u:
        v370 = sub_1ACB9062C(v13, *((_DWORD *)v12 + 1));
        if (v370)
          goto LABEL_2551;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0x97u:
        v568 = sub_1ACB57390(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 24) + 8, *((unsigned __int8 **)v12 + 2), 0);
        if (v568)
        {
          if (*(_QWORD *)(v13 + 816) || (v1043 = *(_DWORD *)(v568 + 44) - 1, (*(_DWORD *)(v568 + 44) = v1043) == 0))
            sub_1ACC00BE8((_QWORD *)v13, (_QWORD *)v568);
        }
        goto LABEL_634;
      case 0x98u:
        v569 = sub_1ACB57390(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 24) + 32, *((unsigned __int8 **)v12 + 2), 0);
        if (!v569)
          goto LABEL_634;
        v570 = *(_QWORD *)(v569 + 24);
        v573 = *(_QWORD *)(v570 + 16);
        v571 = (_QWORD *)(v570 + 16);
        v572 = v573;
        if (v573 == v569)
          goto LABEL_627;
        do
        {
          if (!v572)
            goto LABEL_628;
          v574 = v572;
          v572 = *(_QWORD *)(v572 + 40);
        }
        while (v572 != v569);
        v571 = (_QWORD *)(v574 + 40);
LABEL_627:
        *v571 = *(_QWORD *)(v569 + 40);
LABEL_628:
        sub_1ACBFD414((_QWORD *)v13, v569);
        goto LABEL_634;
      case 0x99u:
        v575 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        v576 = (_WORD *)(v575 + 20);
        if ((*(_WORD *)(v575 + 20) & 0x9000) != 0)
          v575 = sub_1ACBF7980(v575);
        else
          *v576 = 4;
        *v576 = 8;
        v832 = (unint64_t *)*((_QWORD *)v12 + 2);
        a2.i64[0] = *v832;
        *(_QWORD *)v575 = *v832;
        v12 += 40;
        continue;
      case 0x9Au:
        v577 = (_QWORD *)sub_1ACB57390(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 24) + 56, *((unsigned __int8 **)v12 + 2), 0);
        if (!v577)
          goto LABEL_21;
        v578 = v577[5];
        if (v578 != v577[6])
          goto LABEL_633;
        v1044 = (_BYTE *)v577[1];
        v1045 = *(_QWORD *)(v578 + 24);
        if (v1045)
        {
          v1046 = *v1044;
          if (*v1044)
          {
            v1047 = 0;
            v1048 = v1044 + 1;
            do
            {
              v1047 = -1640531535 * (v1047 + byte_1ACCB6333[v1046]);
              v1049 = *v1048++;
              v1046 = v1049;
            }
            while (v1049);
          }
          else
          {
            v1047 = 0;
          }
          v1246 = (_DWORD *)(v1045 + 16 * (v1047 % *(_DWORD *)(v578 + 8)));
          v1245 = (uint64_t *)(v1246 + 2);
        }
        else
        {
          v1245 = (uint64_t *)(v578 + 16);
          v1246 = (_DWORD *)(v578 + 12);
        }
        v1283 = *v1246;
        if (!v1283)
          goto LABEL_2251;
        while (1)
        {
          v1245 = (uint64_t *)*v1245;
          v1284 = (_BYTE *)v1245[3];
          for (kk = (unsigned __int8 *)v577[1]; ; ++kk)
          {
            v1286 = *v1284;
            v1287 = *kk;
            if ((_DWORD)v1286 != (_DWORD)v1287)
              break;
            if (!*v1284)
              goto LABEL_2252;
LABEL_2246:
            ++v1284;
          }
          if (byte_1ACCB6333[v1286] == byte_1ACCB6333[v1287])
            goto LABEL_2246;
          if (!--v1283)
          {
LABEL_2251:
            v1245 = &qword_1EECAD260;
LABEL_2252:
            v1288 = v1245[2];
            if (v1288)
            {
              v1291 = *(_QWORD **)(v1288 + 88);
              v1289 = (_QWORD *)(v1288 + 88);
              v1290 = v1291;
              if (v1291)
              {
                if (v1290 != v577)
                {
                  do
                  {
                    v1292 = v1290;
                    v1290 = (_QWORD *)v1290[8];
                    if (!v1290)
                      goto LABEL_633;
                  }
                  while (v1290 != v577);
                  v1289 = v1292 + 8;
                }
                *v1289 = v577[8];
              }
            }
LABEL_633:
            sub_1ACB689B8((_QWORD *)v13, (uint64_t)v577);
LABEL_634:
            *(_DWORD *)(v13 + 44) |= 1u;
            v12 += 40;
            goto LABEL_22;
          }
        }
      case 0x9Bu:
        v1504 = v12;
        v1513 = v17;
        v579 = *((_QWORD *)v12 + 2);
        v580 = *(_DWORD *)(v579 + 4);
        v1535 = v18;
        if (v580)
          v1495 = 0;
        else
          v1495 = *(_DWORD *)(v579 + 8) != 1;
        v833 = *((unsigned int *)v1504 + 2);
        v1546 = *((int *)v1504 + 1);
        v834 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((unsigned __int16 *)v1504 + 1) + 8);
        v1523 = (int *)(v1554 + ((uint64_t)*((int *)v1504 + 3) << 6));
        v835 = *v1523;
        v836 = *(_QWORD *)(v834 + 8);
        v837 = *(_QWORD *)(*(_QWORD *)(v836 + 8) + 48);
        if (*(_BYTE *)(v834 + 17))
        {
          ++*(_DWORD *)(v834 + 20);
          if (!*(_BYTE *)(v834 + 18))
            sub_1ACBECF6C(v834);
        }
        v1563 = 0u;
        v1564 = 0u;
        v1562 = 0u;
        memset(&__buf[1], 0, 48);
        v1565 = v13;
        *(_QWORD *)&__buf[0] = v836;
        *((_QWORD *)&__buf[0] + 1) = *(_QWORD *)v836;
        DWORD2(__buf[1]) = *(_DWORD *)(v836 + 64);
        HIDWORD(__buf[1]) = v835 + 1;
        *(_QWORD *)&v1563 = &v1558;
        *((_QWORD *)&v1563 + 1) = 0x7FFFFFFD00000064;
        BYTE5(v1564) = 1;
        if (!DWORD2(__buf[1]))
          goto LABEL_2439;
        v1490 = v837;
        v838 = ((unint64_t)DWORD2(__buf[1]) >> 3) + 1;
        v839 = (void *)sub_1ACB5D828(v838);
        if (v839)
        {
          v840 = v839;
          bzero(v839, v838);
          *(_QWORD *)&__buf[1] = v840;
          *((_QWORD *)&v1564 + 1) = sub_1ACBECD04(*(_DWORD *)(v836 + 52));
          if (*((_QWORD *)&v1564 + 1))
          {
            v841 = dword_1EECAC650 / *(_DWORD *)(v836 + 52) + 1;
            if (v841 <= DWORD2(__buf[1]))
            {
              *(_BYTE *)(*(_QWORD *)&__buf[1] + (v841 >> 3)) |= 1 << ((dword_1EECAC650
                                                                     / *(_DWORD *)(v836 + 52)
                                                                     + 1) & 7);
              if (v1495)
              {
LABEL_1158:
                v842 = v1490;
                if (!v580)
                {
LABEL_2400:
                  v1362 = *(_QWORD *)(v836 + 8);
                  *(_QWORD *)(v1362 + 48) &= ~0x200000uLL;
                  v1363 = HIDWORD(__buf[1]);
                  if ((int)v833 >= 1 && HIDWORD(__buf[1]))
                  {
                    v1364 = 1;
                    do
                    {
                      v1365 = *(_DWORD *)(v579 + 4 * v1364);
                      if (v1365)
                      {
                        if (v580)
                        {
                          if (v1365 != 1 && *(_BYTE *)(v836 + 33) != 0)
                          {
                            sub_1ACBFD8F4((uint64_t)__buf, v1365, 1, 0);
                            v1365 = *(_DWORD *)(v579 + 4 * v1364);
                          }
                        }
                        DWORD2(__buf[3]) = v1365;
                        sub_1ACBFD9B4((uint64_t)__buf, v1365, &v1557, 0x7FFFFFFFFFFFFFFFLL);
                        v1363 = HIDWORD(__buf[1]);
                      }
                      if (v1364 >= v833)
                        break;
                      ++v1364;
                    }
                    while (v1363);
                    v1362 = *(_QWORD *)(v836 + 8);
                    v842 = v1490;
                  }
                  *(_QWORD *)(v1362 + 48) = v842;
                  if (v580 && DWORD2(__buf[1]) && v1363)
                  {
                    v1367 = -1;
                    do
                    {
                      v1368 = v1367 + 2;
                      v1369 = 1 << ((v1367 + 2) & 7);
                      if ((v1369 & *(_BYTE *)(*(_QWORD *)&__buf[1] + (v1368 >> 3))) != 0
                        || (v1368 >= 2
                          ? ((v1371 = v1367 / (*(_DWORD *)(v836 + 56) / 5u + 1) * (*(_DWORD *)(v836 + 56) / 5u + 1),
                              v1371 + 1 != dword_1EECAC650 / *(_DWORD *)(v836 + 52))
                           ? (v1372 = 2)
                           : (v1372 = 3),
                             v1370 = v1372 + v1371)
                          : (v1370 = 0),
                            ((_DWORD)v1368 != v1370 || !*(_BYTE *)(v836 + 33))
                         && (sub_1ACBFD79C((uint64_t)__buf, "Page %u: never used", v1367 + 2),
                             (v1369 & *(_BYTE *)(*(_QWORD *)&__buf[1] + (v1368 >> 3))) != 0)))
                      {
                        if (v1368 >= 2)
                        {
                          v1374 = v1367 / (*(_DWORD *)(v836 + 56) / 5u + 1) * (*(_DWORD *)(v836 + 56) / 5u + 1);
                          v1375 = v1374 + 1 == dword_1EECAC650 / *(_DWORD *)(v836 + 52) ? 3 : 2;
                          v1373 = v1375 + v1374;
                        }
                        else
                        {
                          v1373 = 0;
                        }
                        if ((_DWORD)v1368 == v1373 && *(_BYTE *)(v836 + 33))
                          sub_1ACBFD79C((uint64_t)__buf, "Page %u: pointer map referenced", v1367 + 2);
                      }
                      if (v1367 + 3 > DWORD2(__buf[1]))
                        break;
                      ++v1367;
                    }
                    while (HIDWORD(__buf[1]));
                  }
                  goto LABEL_2439;
                }
LABEL_1928:
                if (!*(_BYTE *)(v836 + 33))
                {
                  if (bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 24) + 80) + 64)))
                    sub_1ACBFD79C((uint64_t)__buf, "incremental_vacuum enabled with a max rootpage of zero");
                  goto LABEL_2400;
                }
                if ((int)v833 < 1)
                {
                  v1153 = 0;
                }
                else
                {
                  if (v833 < 8)
                  {
                    v1152 = 0;
                    v1153 = 0;
                    goto LABEL_2394;
                  }
                  v1152 = v833 & 0x7FFFFFF8;
                  v1354 = (uint32x4_t *)(v579 + 20);
                  v1355 = 0uLL;
                  v1356 = v833 & 0xFFFFFFF8;
                  v1357 = 0uLL;
                  do
                  {
                    v1355 = vmaxq_u32(v1355, v1354[-1]);
                    v1357 = vmaxq_u32(v1357, *v1354);
                    v1354 += 2;
                    v1356 -= 8;
                  }
                  while (v1356);
                  v1153 = vmaxvq_u32(vmaxq_u32(v1355, v1357));
                  if (v1152 != v833)
                  {
LABEL_2394:
                    v1358 = v833 - v1152;
                    v1359 = (unsigned int *)(v579 + 4 * v1152 + 4);
                    do
                    {
                      v1361 = *v1359++;
                      v1360 = v1361;
                      if (v1153 <= v1361)
                        v1153 = v1360;
                      --v1358;
                    }
                    while (v1358);
                  }
                }
                if (v1153 != bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 24) + 80) + 52)))
                  sub_1ACBFD79C((uint64_t)__buf, "max rootpage (%u) disagrees with header (%u)");
                goto LABEL_2400;
              }
            }
            else if (v1495)
            {
              goto LABEL_1158;
            }
            *(_QWORD *)&__buf[3] = "Freelist: ";
            sub_1ACBFD484((uint64_t)__buf, 1, bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 24) + 80) + 32)), bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 24) + 80) + 36)));
            *(_QWORD *)&__buf[3] = 0;
            v842 = v1490;
            if (!v580)
              goto LABEL_2400;
            goto LABEL_1928;
          }
        }
        else
        {
          *(_QWORD *)&__buf[1] = 0;
        }
        DWORD1(__buf[2]) = 7;
        HIDWORD(__buf[1]) = 0;
        if (!LODWORD(__buf[2]))
          LODWORD(__buf[2]) = 1;
LABEL_2439:
        sub_1ACBEBAB0(*((unint64_t *)&v1564 + 1));
        v1376 = *(_QWORD *)&__buf[1];
        v12 = v1504;
        v17 = v1513;
        v18 = v1535;
        if (!*(_QWORD *)&__buf[1])
          goto LABEL_2446;
        v1377 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_2445;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v1376);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v1376);
        v1376 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v1377 = &xmmword_1ECD3B1D0;
LABEL_2445:
          (*v1377)(v1376);
        }
LABEL_2446:
        v1378 = SLODWORD(__buf[2]);
        if (LODWORD(__buf[2]))
        {
          if ((_QWORD)v1563 && (*(_BYTE *)(v1563 + v1564) = 0, HIDWORD(v1563)) && (BYTE5(v1564) & 4) == 0)
            v1379 = sub_1ACBE13A0((uint64_t *)&v1562 + 1);
          else
            v1379 = (void *)v1563;
        }
        else
        {
          v1380 = BYTE5(v1564);
          if ((BYTE5(v1564) & 4) != 0)
          {
            if ((_QWORD)v1563)
            {
              sub_1ACBE0F9C(*((_QWORD **)&v1562 + 1), (_QWORD *)v1563);
              v1380 = BYTE5(v1564);
            }
            BYTE5(v1564) = v1380 & 0xFB;
          }
          v1379 = 0;
          DWORD2(v1563) = 0;
          LODWORD(v1564) = 0;
          *(_QWORD *)&v1563 = 0;
        }
        if (*(_BYTE *)(v834 + 17))
        {
          v1381 = *(_DWORD *)(v834 + 20) - 1;
          *(_DWORD *)(v834 + 20) = v1381;
          if (!v1381)
            sub_1ACBED048(v834);
        }
        v1382 = v1554 + (v1546 << 6);
        v1035 = DWORD1(__buf[2]);
        v1383 = (_WORD *)(v1382 + 20);
        if ((*(_WORD *)(v1382 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)(v1554 + (v1546 << 6)));
        else
          *v1383 = 1;
        if ((_DWORD)v1378)
        {
          if (v1035)
          {
            sqlite3_free(v1379);
            v11 = v1551;
            LODWORD(v19) = v1035;
            goto LABEL_2696;
          }
          *(_QWORD *)v1523 = *(_QWORD *)v1523 - v1378 + 1;
          sub_1ACB57870(v1382, (char *)v1379, -1, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
        }
        v1384 = (_BYTE *)(v1554 + (v1546 << 6) + 22);
        if ((*v1383 & 2) != 0)
        {
          v11 = v1551;
          if (*v1384 != v1541)
            sub_1ACBB0FEC((int *)v1382, v1541);
        }
        else
        {
          *v1384 = v1541;
          v11 = v1551;
        }
        goto LABEL_1705;
      case 0x9Cu:
        v581 = *((int *)v12 + 2);
        v582 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        if ((*(_WORD *)(v582 + 20) & 0x10) == 0
          && sub_1ACBF63C0(v1554 + ((uint64_t)*((int *)v12 + 1) << 6)))
        {
          goto LABEL_2549;
        }
        sub_1ACBF64C8(*(_QWORD *)(v582 + 8), *(_QWORD *)(v1554 + (v581 << 6)));
        v12 += 40;
        continue;
      case 0x9Du:
        v359 = (__n128 *)(*(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        v583 = &v359[1].n128_i16[2];
        if ((v359[1].n128_u16[2] & 0x9000) != 0)
        {
          v359 = (__n128 *)sub_1ACBF7980((uint64_t)v359);
          v584 = *v583;
        }
        else
        {
          v584 = 4;
          *v583 = 4;
        }
        v358 = *(_QWORD *)(*(_QWORD *)(v1551 + 352) + 24)
             + ((*(int *)(*(_QWORD *)(*(_QWORD *)(v1551 + 352) + 16)
                        + 40 * *(int *)(*(_QWORD *)(v1551 + 352) + 76)
                        + 4)
               + (uint64_t)*((int *)v12 + 1)) << 6);
        if ((v584 & 0x9000) != 0)
        {
LABEL_1162:
          sub_1ACBF79C0((uint64_t)v359, (__int128 *)v358, 0x4000);
          v12 += 40;
          continue;
        }
        a2 = *(int64x2_t *)v358;
        v359[1].n128_u64[0] = *(_QWORD *)(v358 + 16);
        *v359 = (__n128)a2;
        if ((*(_BYTE *)(v358 + 21) & 0x20) != 0)
          goto LABEL_21;
        *v583 = *v583 & 0x8FFF | 0x4000;
        v12 += 40;
        continue;
      case 0x9Eu:
        if ((*(_BYTE *)(v13 + 50) & 8) != 0)
        {
          *(_QWORD *)(v13 + 808) += *((int *)v12 + 2);
          v12 += 40;
        }
        else
        {
          v585 = *((int *)v12 + 2);
          if (*((_DWORD *)v12 + 1))
            *(_QWORD *)(v13 + 800) += v585;
          else
            *(_QWORD *)(v1551 + 80) += v585;
          v12 += 40;
        }
        continue;
      case 0x9Fu:
        v586 = *(_QWORD *)(v1551 + 352);
        v587 = v1554;
        if (v586)
        {
          do
          {
            v588 = v586;
            v586 = *(_QWORD *)(v586 + 8);
          }
          while (v586);
          v587 = *(_QWORD *)(v588 + 24);
        }
        v589 = *((int *)v12 + 1);
        v590 = v587 + (v589 << 6);
        if (v587)
        {
          v591 = *(_WORD *)(v590 + 20);
          if ((v591 & 0x24) != 0)
          {
            v592 = *(_QWORD *)v590;
            goto LABEL_1949;
          }
          if ((v591 & 8) != 0)
          {
            a2.i64[0] = *(_QWORD *)v590;
            v1159 = 0x7FFFFFFFFFFFFFFFLL;
            if (*(double *)v590 <= 9.22337204e18)
              v1159 = (uint64_t)*(double *)v590;
            if (*(double *)a2.i64 >= -9.22337204e18)
              v592 = v1159;
            else
              v592 = 0x8000000000000000;
LABEL_1949:
            *(_QWORD *)v590 = v592;
            *(_WORD *)(v587 + (v589 << 6) + 20) = *(_WORD *)(v587 + (v589 << 6) + 20) & 0xF240 | 4;
            v1160 = *((int *)v12 + 2);
            v1161 = v1554 + (v1160 << 6);
            if (v1554)
            {
              v1162 = *(_WORD *)(v1161 + 20);
              if ((v1162 & 0x24) != 0)
              {
                v1163 = *(_QWORD *)v1161;
                goto LABEL_1963;
              }
              if ((v1162 & 8) != 0)
              {
                a2.i64[0] = *(_QWORD *)v1161;
                v1164 = 0x7FFFFFFFFFFFFFFFLL;
                if (*(double *)v1161 <= 9.22337204e18)
                  v1164 = (uint64_t)*(double *)v1161;
                if (*(double *)a2.i64 >= -9.22337204e18)
                  v1163 = v1164;
                else
                  v1163 = 0x8000000000000000;
LABEL_1963:
                *(_QWORD *)v1161 = v1163;
                *(_WORD *)(v1554 + (v1160 << 6) + 20) = *(_WORD *)(v1554 + (v1160 << 6) + 20) & 0xF240 | 4;
                if (*(_QWORD *)v590 < v1163)
                {
                  *(_QWORD *)v590 = v1163;
                  v12 += 40;
                  continue;
                }
                goto LABEL_21;
              }
              if ((v1162 & 0x12) != 0 && *(_QWORD *)(v1554 + (v1160 << 6) + 8))
              {
                v1163 = sub_1ACBF2FC0(v1554 + (v1160 << 6));
                goto LABEL_1963;
              }
            }
            else
            {
              sub_1ACBBE20C(89699);
            }
            v1163 = 0;
            goto LABEL_1963;
          }
          if ((v591 & 0x12) != 0 && *(_QWORD *)(v587 + (v589 << 6) + 8))
          {
            v592 = sub_1ACBF2FC0(v587 + (v589 << 6));
            goto LABEL_1949;
          }
        }
        else
        {
          sub_1ACBBE20C(89699);
        }
        v592 = 0;
        goto LABEL_1949;
      case 0xA0u:
        v593 = *((int *)v12 + 3);
        v594 = *((int *)v12 + 1);
        v595 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v595 + 20) & 0x9000) != 0)
          v595 = sub_1ACBF7980(v595);
        else
          *(_WORD *)(v595 + 20) = 4;
        v843 = *(_QWORD *)(v1554 + (v594 << 6));
        if (v843 < 1)
        {
          *(_QWORD *)v595 = -1;
          v12 += 40;
        }
        else
        {
          v844 = *(_QWORD *)(v1554 + (v593 << 6)) & ~(*(uint64_t *)(v1554 + (v593 << 6)) >> 63);
          v845 = v843 ^ 0x7FFFFFFFFFFFFFFFLL;
          v846 = v844 + v843;
          if (v845 < v844)
            v846 = -1;
          *(_QWORD *)v595 = v846;
          v12 += 40;
        }
        continue;
      case 0xA1u:
      case 0xA2u:
        v119 = *((unsigned __int16 *)v12 + 1);
        v120 = (8 * v119 + 55) & 0xFFFF8;
        v121 = sub_1ACBE1124(v13, v120 + 64);
        if (!v121)
          goto LABEL_2549;
        v122 = v121;
        *(_QWORD *)(v121 + 16) = 0;
        v123 = v121 + v120;
        *(_QWORD *)v121 = v121 + v120;
        *(_WORD *)(v123 + 20) = 1;
        *(_QWORD *)(v123 + 24) = v13;
        *(_DWORD *)(v123 + 32) = 0;
        *(_QWORD *)(v121 + 8) = *((_QWORD *)v12 + 2);
        v11 = v1551;
        *(_QWORD *)(v121 + 24) = v1551;
        *(_BYTE *)(v121 + 41) = 0;
        *(_DWORD *)(v121 + 32) = -858993459 * ((unint64_t)(v12 - v1552) >> 3);
        *(_DWORD *)(v121 + 36) = 0;
        *(_BYTE *)(v121 + 40) = v1541;
        *(_BYTE *)(v121 + 42) = v119;
        *((_QWORD *)v12 + 2) = v121;
        *(_WORD *)v12 = -3677;
LABEL_655:
        v596 = *((int *)v12 + 3);
        v597 = v1554 + (v596 << 6);
        if (*(_QWORD *)(v122 + 16) == v597)
          goto LABEL_908;
        *(_QWORD *)(v122 + 16) = v597;
        v598 = *(unsigned __int8 *)(v122 + 42);
        if (!*(_BYTE *)(v122 + 42))
          goto LABEL_908;
        v599 = *((int *)v12 + 2);
        if (v598 >= 4)
        {
          v600 = v598 & 3;
          a2.i64[0] = *((int *)v12 + 2);
          v715 = vdupq_n_s64(v599);
          v716 = *(unsigned __int8 *)(v122 + 42);
          v717 = v598 & 0xFC;
          do
          {
            a4.i64[0] = v716;
            v718 = vaddq_s64(vdupq_n_s64(v716), (int64x2_t)xmmword_1ACCBDCC0);
            v719 = vdupq_n_s64(v1554);
            v720 = (int8x16_t)vaddq_s64(v719, vshlq_n_s64(vaddq_s64(v718, v715), 6uLL));
            v721 = (int8x16_t)vaddq_s64(vdupq_lane_s64(vshlq_n_s64(vaddq_s64(a2, a4), 6uLL).i64[0], 0), vaddq_s64(v719, (int64x2_t)xmmword_1ACCBDCD0));
            v722 = v122 + 8 * v718.i64[0];
            *(int8x16_t *)(v722 + 40) = vextq_s8(v720, v720, 8uLL);
            a4 = (int64x2_t)vextq_s8(v721, v721, 8uLL);
            *(int64x2_t *)(v722 + 24) = a4;
            v716 -= 4;
            v717 -= 4;
          }
          while (v717);
          if ((v598 & 0xFC) == v598)
          {
LABEL_908:
            ++*(_DWORD *)(v1554 + (v596 << 6) + 16);
            v724 = 48;
            if (!*((_DWORD *)v12 + 1))
              v724 = 24;
            (*(void (**)(uint64_t))(*(_QWORD *)(v122 + 8) + v724))(v122);
            v725 = *(_DWORD *)(v122 + 36);
            if (!v725)
              goto LABEL_21;
            v726 = v1542;
            if (v725 >= 1)
            {
              v727 = *(_QWORD *)v122;
              if (*(_QWORD *)v122)
              {
                v728 = *(unsigned __int16 *)(v727 + 20);
                if ((~v728 & 0x202) != 0 || *(_BYTE *)(v727 + 22) != 1)
                {
                  if ((v728 & 1) != 0)
                    LOBYTE(v727) = 0;
                  else
                    LOBYTE(v727) = sub_1ACBF2B64((int *)v727, 1);
                }
                else
                {
                  v727 = *(_QWORD *)(v727 + 8);
                }
              }
              sub_1ACBF1C7C((uint64_t *)v11, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, v727);
              v726 = *(_DWORD *)(v122 + 36);
            }
            if (*(_BYTE *)(v122 + 41))
            {
              v996 = *((int *)v12 - 9);
              if ((_DWORD)v996)
              {
                v997 = v1554 + (v996 << 6);
                if ((*(_WORD *)(v997 + 20) & 0x9000) != 0)
                {
                  sub_1ACBF327C(v997, 1);
                }
                else
                {
                  *(_QWORD *)v997 = 1;
                  *(_WORD *)(v997 + 20) = 4;
                }
              }
              *(_BYTE *)(v122 + 41) = 0;
            }
            v998 = *(_QWORD *)v122;
            if ((*(_WORD *)(*(_QWORD *)v122 + 20) & 0x9000) != 0 || *(_DWORD *)(v998 + 32))
            {
              sub_1ACBF2A04(v998);
              v998 = *(_QWORD *)v122;
            }
            v1542 = 0;
            *(_WORD *)(v998 + 20) = 1;
            *(_DWORD *)(v122 + 36) = 0;
            if (!v726)
              goto LABEL_21;
LABEL_2561:
            LODWORD(v19) = v726;
            goto LABEL_2696;
          }
        }
        else
        {
          v600 = *(unsigned __int8 *)(v122 + 42);
        }
        v723 = v1554 + ((v600 + v599) << 6) - 64;
        do
        {
          *(_QWORD *)(v122 + 40 + 8 * v600) = v723;
          v723 -= 64;
          v1293 = v600-- > 1;
        }
        while (v1293);
        goto LABEL_908;
      case 0xA3u:
        v122 = *((_QWORD *)v12 + 2);
        v11 = v1551;
        goto LABEL_655;
      case 0xA4u:
      case 0xA5u:
        v124 = *((int *)v12 + 1);
        v125 = v1554 + (v124 << 6);
        v126 = *((int *)v12 + 3);
        if ((_DWORD)v126)
        {
          v127 = v1554 + (v126 << 6);
          v128 = *((_QWORD *)v12 + 2);
          memset((char *)&__buf[1] + 8, 0, 32);
          if ((*(_WORD *)(v127 + 20) & 0x9000) != 0)
            sub_1ACBF2A54((int *)v127);
          else
            *(_WORD *)(v127 + 20) = 1;
          *((_QWORD *)&__buf[0] + 1) = v128;
          *(_QWORD *)&__buf[1] = v1554 + (v124 << 6);
          *(_QWORD *)&__buf[0] = v127;
          BYTE8(__buf[2]) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&__buf[1] + 24) + 100);
          (*(void (**)(_OWORD *))(v128 + 40))(__buf);
          v692 = DWORD1(__buf[2]);
          v125 = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        }
        else
        {
          v692 = sub_1ACBABFB4(v1554 + (v124 << 6), *((_QWORD *)v12 + 2));
        }
        v11 = v1551;
        if (!v692)
        {
          if ((*(_WORD *)(v125 + 20) & 2) != 0)
          {
            if (*(unsigned __int8 *)(v125 + 22) != v1541)
              sub_1ACBB0FEC((int *)v125, v1541);
            v1542 = 0;
            v12 += 40;
          }
          else
          {
            v1542 = 0;
            *(_BYTE *)(v125 + 22) = v1541;
            v12 += 40;
          }
          continue;
        }
        v1423 = v692;
        if (!v125)
          goto LABEL_2612;
        v1424 = *(unsigned __int16 *)(v125 + 20);
        if ((~v1424 & 0x202) != 0 || *(_BYTE *)(v125 + 22) != 1)
        {
          if ((v1424 & 1) != 0)
LABEL_2612:
            LOBYTE(v1425) = 0;
          else
            LOBYTE(v1425) = sub_1ACBF2B64((int *)v125, 1);
        }
        else
        {
          v1425 = *(_QWORD *)(v125 + 8);
        }
        sub_1ACBF1C7C((uint64_t *)v1551, "%s", a6, (uint64_t)a7, a8, a9, a10, a11, v1425);
        LODWORD(v19) = v1423;
        goto LABEL_2696;
      case 0xA6u:
        if (*((_DWORD *)v12 + 1))
        {
          *(_WORD *)(v1551 + 268) = *(_WORD *)(v1551 + 268) & 0xFFFC | (*((_WORD *)v12 + 4) + 1) & 3;
          v12 += 40;
          continue;
        }
        v847 = *(_QWORD *)(v13 + 8);
        if (v847)
        {
          v848 = (*((_WORD *)v12 + 4) + 1) & 3;
          do
          {
            *(_WORD *)(v847 + 268) = *(_WORD *)(v847 + 268) & 0xFFFC | v848;
            v847 = *(_QWORD *)(v847 + 16);
          }
          while (v847);
        }
        goto LABEL_21;
      case 0xA7u:
        v601 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40);
        *(_BYTE *)(v601 + 1) |= 0x40u;
        v12 += 40;
        continue;
      case 0xA8u:
        v602 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1)) + 40);
        *(_BYTE *)(v602 + 1) &= ~0x40u;
        v12 += 40;
        continue;
      case 0xA9u:
        a6 = v12[12];
        if (!v12[12] && (*(_BYTE *)(v13 + 52) & 4) != 0)
          goto LABEL_21;
        v603 = sub_1ACBF7550(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8), *((_DWORD *)v12 + 2), a6);
        v11 = v1551;
        if (!v603)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        LODWORD(v19) = v603;
        if (v603 == 6)
        {
          v1471 = *((_QWORD *)v12 + 2);
          v1439 = "database table is locked: %s";
          v1441 = (uint64_t *)v1551;
          v1440 = v19;
LABEL_2621:
          sub_1ACBF1C7C(v1441, v1439, a6, (uint64_t)a7, a8, a9, a10, a11, v1471);
          LODWORD(v19) = v1440;
        }
        goto LABEL_2696;
      case 0xAAu:
        v604 = *((_QWORD *)v12 + 2);
        v605 = *(unsigned int *)(v13 + 564);
        if ((int)v605 < 1 || *(_QWORD *)(v13 + 600))
        {
          v11 = v1551;
          if (!v604)
          {
            v1542 = 0;
            v12 += 40;
            continue;
          }
          v606 = **(_QWORD **)(v604 + 16);
          v19 = *(_QWORD *)(v606 + 112);
          if (!v19)
            goto LABEL_2010;
          if ((int)v605 >= 1)
          {
            v607 = *(_QWORD **)(v13 + 600);
            do
            {
              if (*v607 == v604)
              {
                LODWORD(v19) = 0;
                goto LABEL_2010;
              }
              ++v607;
              --v605;
            }
            while (v605);
          }
          *(double *)a2.i64 = sub_1ACBFEB74(v13);
          LODWORD(v19) = v608;
          if (!v608)
          {
            LODWORD(v19) = (*(uint64_t (**)(_QWORD, double))(v606 + 112))(*(_QWORD *)(v604 + 16), *(double *)a2.i64);
            if (!(_DWORD)v19)
            {
              v609 = *(_DWORD *)(v13 + 792);
              v610 = *(_DWORD *)(v13 + 788);
              v611 = *(_QWORD *)(v13 + 600);
              v612 = *(int *)(v13 + 564);
              *(_DWORD *)(v13 + 564) = v612 + 1;
              *(_QWORD *)(v611 + 8 * v612) = v604;
              ++*(_DWORD *)(v604 + 24);
              LODWORD(v19) = v610 + v609;
              if ((_DWORD)v19)
              {
                v613 = *(uint64_t (**)(_QWORD, _QWORD))(v606 + 160);
                if (v613)
                {
                  *(_DWORD *)(v604 + 32) = v19;
                  LODWORD(v19) = v613(*(_QWORD *)(v604 + 16), (v19 - 1));
                }
                else
                {
                  LODWORD(v19) = 0;
                }
              }
            }
            goto LABEL_2010;
          }
        }
        else
        {
          LODWORD(v19) = 6;
          v11 = v1551;
        }
        if (!v604)
          goto LABEL_2011;
LABEL_2010:
        v1189 = *(_QWORD *)(v604 + 16);
        v1190 = v19;
        sub_1ACBF1EB0(v11, v1189);
        LODWORD(v19) = v1190;
LABEL_2011:
        if (!(_DWORD)v19)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        goto LABEL_2696;
      case 0xABu:
        memset(&__buf[2], 0, 32);
        memset(__buf, 0, 24);
        *((_QWORD *)&__buf[1] + 1) = v13;
        v614 = (int64x2_t *)(v1554 + ((uint64_t)*((int *)v12 + 2) << 6));
        a2 = *v614;
        *(_QWORD *)&__buf[1] = v614[1].i64[0];
        __buf[0] = a2;
        v615 = BYTE4(__buf[1]);
        v616 = WORD2(__buf[1]) & 0xEFFF;
        WORD2(__buf[1]) &= ~0x1000u;
        if ((v615 & 0x12) != 0)
        {
          v11 = v1551;
          if ((v614[1].i16[2] & 0x2000) != 0)
          {
            v617 = 0;
          }
          else
          {
            WORD2(__buf[1]) = v616 | 0x4000;
            v617 = sub_1ACBC6854((int *)__buf);
            v616 = WORD2(__buf[1]);
          }
        }
        else
        {
          v617 = 0;
          v11 = v1551;
        }
        if ((~v616 & 0x202) != 0 || BYTE6(__buf[1]) != 1)
        {
          if ((v616 & 1) != 0)
            goto LABEL_1312;
          a6 = sub_1ACBF2B64((int *)__buf, 1);
        }
        else
        {
          a6 = *((_QWORD *)&__buf[0] + 1);
        }
        if (a6)
        {
          sub_1ACBF76E8(v13, *((_DWORD *)v12 + 1), (char *)a6, (void **)v1479);
          v617 = v895;
        }
LABEL_1312:
        if (WORD2(__buf[1]) & 0x9000 | LODWORD(__buf[2]))
          sub_1ACBF2A04((uint64_t)__buf);
        if (v617)
          goto LABEL_2608;
        v1542 = 0;
        v12 += 40;
        continue;
      case 0xACu:
        ++*(_DWORD *)(v13 + 224);
        v618 = sub_1ACBD1B0C(v13, *((char **)v12 + 2), *(_BYTE **)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1)));
        if (!v618
          || (v619 = v618, *(_BYTE *)(v618 + 63) != 1)
          || (v621 = (_QWORD *)(v618 + 80), (v620 = *(_QWORD **)(v618 + 80)) == 0))
        {
          v1542 = 0;
          --*(_DWORD *)(v13 + 224);
          v12 += 40;
          continue;
        }
        v622 = *(_QWORD *)(v618 + 80);
        v11 = v1551;
        do
        {
          if (*(int *)(*(_QWORD *)(v622 + 16) + 8) >= 1)
          {
            --*(_DWORD *)(v13 + 224);
            LODWORD(v19) = 6;
            goto LABEL_2696;
          }
          v622 = *(_QWORD *)(v622 + 40);
        }
        while (v622);
        v623 = 0;
        *v621 = 0;
        do
        {
          v626 = *v620;
          v627 = (_QWORD *)v620[5];
          if (*v620 == v13)
          {
            v625 = 0;
            v624 = (_QWORD *)(v618 + 80);
            v623 = v620;
          }
          else
          {
            v624 = (_QWORD *)(v626 + 608);
            v625 = *(_QWORD *)(v626 + 608);
          }
          *v624 = v620;
          v620[5] = v625;
          v620 = v627;
        }
        while (v627);
        v1178 = *(_QWORD *)v623[1];
        v1179 = *(uint64_t (**)(_QWORD))(v1178 + 40);
        if (!v1179)
          v1179 = *(uint64_t (**)(_QWORD))(v1178 + 32);
        ++*(_DWORD *)(v618 + 44);
        LODWORD(v19) = v1179(v623[2]);
        if (!(_DWORD)v19)
        {
          v623[2] = 0;
          *v621 = 0;
          v1180 = (_QWORD *)*v623;
          v1181 = *((_DWORD *)v623 + 6) - 1;
          *((_DWORD *)v623 + 6) = v1181;
          if (!v1181)
          {
            v1182 = v623[2];
            v1183 = v1180;
            if (v1182)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1182 + 32))(v1182);
              v1183 = (_QWORD *)*v623;
            }
            v1184 = v623[1];
            v1185 = *(_DWORD *)(v1184 + 16) - 1;
            *(_DWORD *)(v1184 + 16) = v1185;
            if (!v1185)
            {
              v1186 = *(void (**)(_QWORD))(v1184 + 32);
              if (v1186)
                v1186(*(_QWORD *)(v1184 + 24));
              sub_1ACBE0F9C(v1183, (_QWORD *)v1184);
            }
            sub_1ACBE0F9C(v1180, v623);
            v11 = v1551;
            LODWORD(v19) = 0;
          }
        }
        if (*(_QWORD *)(v13 + 816) || (v1352 = *(_DWORD *)(v619 + 44) - 1, (*(_DWORD *)(v619 + 44) = v1352) == 0))
        {
          v1187 = (_QWORD *)v619;
          v1188 = v19;
          sub_1ACC00BE8((_QWORD *)v13, v1187);
          LODWORD(v19) = v1188;
        }
        --*(_DWORD *)(v13 + 224);
        if (!(_DWORD)v19)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        goto LABEL_2696;
      case 0xADu:
        *(_QWORD *)&__buf[0] = 0;
        v628 = *(_QWORD *)(*((_QWORD *)v12 + 2) + 16);
        if (!v628)
        {
          LODWORD(v19) = 6;
          v11 = v1551;
          goto LABEL_2696;
        }
        v629 = *(_QWORD *)v628;
        v11 = v1551;
        if (!*(_QWORD *)v628)
        {
LABEL_2558:
          LODWORD(v19) = 6;
          goto LABEL_2696;
        }
        v630 = (*(uint64_t (**)(_QWORD, _OWORD *))(v629 + 48))(*(_QWORD *)(*((_QWORD *)v12 + 2) + 16), __buf);
        sub_1ACBF1EB0(v1551, v628);
        if (v630)
          goto LABEL_2553;
        **(_QWORD **)&__buf[0] = v628;
        v631 = sub_1ACB89F34(v1551, *((_DWORD *)v12 + 1), 0, 2);
        if (v631)
        {
          v1542 = 0;
          *(_QWORD *)(v631 + 40) = *(_QWORD *)&__buf[0];
          ++*(_DWORD *)(v628 + 8);
          v12 += 40;
          continue;
        }
        (*(void (**)(_QWORD))(v629 + 56))(*(_QWORD *)&__buf[0]);
        goto LABEL_8;
      case 0xAEu:
        v11 = v1551;
        v632 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        if (sqlite3_initialize())
          goto LABEL_8;
        v633 = (_QWORD *)sub_1ACB5D828(16);
        if (!v633)
          goto LABEL_8;
        v634 = v633;
        *v633 = *(_QWORD *)(v632 + 40);
        v633[1] = v1554 + ((uint64_t)*((int *)v12 + 3) << 6);
        v635 = *(_QWORD *)(v1551 + 104);
        v636 = *((int *)v12 + 2);
        v637 = v635 + (v636 << 6);
        v638 = (_WORD *)(v637 + 20);
        if ((*(_BYTE *)(v637 + 21) & 0x90) != 0)
          sub_1ACBF7980(v635 + (v636 << 6));
        else
          *v638 = 4;
        *v638 = 1;
        sub_1ACBF2A04(v635 + (v636 << 6));
        *(_QWORD *)v637 = "ValueList";
        v864 = v635 + (v636 << 6);
        *(_QWORD *)(v864 + 8) = v634;
        *v638 = 6657;
        *(_BYTE *)(v864 + 23) = 112;
        *(_BYTE *)(v864 + 56) = 0;
        *(_QWORD *)(v864 + 48) = sub_1ACBF78CC;
        v12 += 40;
        continue;
      case 0xAFu:
        a2 = 0uLL;
        memset(__buf, 0, 56);
        v639 = *(_QWORD *)(*(_QWORD *)(v1551 + 120) + 8 * *((int *)v12 + 1));
        v640 = *((int *)v12 + 3);
        v641 = v1554 + (v640 << 6);
        if (*(_BYTE *)(v639 + 2))
        {
          v642 = (_WORD *)(v641 + 20);
          if ((*(_WORD *)(v641 + 20) & 0x9000) != 0)
          {
            sub_1ACBF2A54((int *)(v1554 + (v640 << 6)));
            v12 += 40;
            continue;
          }
          goto LABEL_2342;
        }
        v1539 = v18;
        v849 = **(uint64_t ***)(v639 + 40);
        v850 = *v849;
        *(_OWORD *)((char *)&__buf[1] + 8) = 0uLL;
        *(_OWORD *)((char *)&__buf[2] + 8) = 0uLL;
        *(_OWORD *)((char *)__buf + 8) = 0uLL;
        *(_QWORD *)&__buf[0] = v1554 + (v640 << 6);
        BYTE8(__buf[2]) = v1541;
        v851 = (_WORD *)(v641 + 20);
        if ((v12[2] & 1) != 0)
        {
          if ((*(_WORD *)(v641 + 20) & 0x9000) != 0)
            sub_1ACBF2A54((int *)v641);
          else
            *v851 = 1;
          *v851 = 1025;
          *(_DWORD *)v641 = 0;
        }
        else
        {
          *v851 = *(_WORD *)(v641 + 20) & 0xF240 | 1;
        }
        v1255 = (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD))(v850 + 88))(*(_QWORD *)(v639 + 40), __buf, *((unsigned int *)v12 + 2));
        sub_1ACBF1EB0(v1551, (uint64_t)v849);
        if (SDWORD1(__buf[2]) < 1)
        {
          v726 = v1255;
        }
        else
        {
          v1256 = sqlite3_value_text((sqlite3_value *)v641);
          sub_1ACBF1C7C((uint64_t *)v1551, "%s", v1257, v1258, v1259, v1260, v1261, v1262, v1256);
          v726 = DWORD1(__buf[2]);
        }
        v18 = v1539;
        v1263 = (_BYTE *)(v1554 + (v640 << 6) + 22);
        if ((*v851 & 2) != 0)
        {
          v11 = v1551;
          if (*v1263 != v1541)
            sub_1ACBB0FEC((int *)v641, v1541);
        }
        else
        {
          *v1263 = v1541;
          v11 = v1551;
        }
        if (!v726)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        goto LABEL_2561;
      case 0xB0u:
        v643 = *(_QWORD *)(v13 + 48);
        *(_QWORD *)(v13 + 48) = v643 | 0x4000000;
        v644 = *(_QWORD *)(*((_QWORD *)v12 + 2) + 16);
        v645 = *((int *)v12 + 1);
        v646 = v1554 + (v645 << 6);
        v647 = (_BYTE *)(v646 + 22);
        if ((*(_WORD *)(v646 + 20) & 2) != 0)
        {
          v11 = v1551;
          if (*v647 != 1)
          {
            v65 = sub_1ACBB0FEC((int *)v646, 1);
            if (v65)
              goto LABEL_2548;
          }
        }
        else
        {
          *v647 = 1;
          v11 = v1551;
        }
        v630 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v644 + 152))(v644, *(_QWORD *)(v1554 + (v645 << 6) + 8));
        if ((v643 & 0x4000000) == 0)
          *(_QWORD *)(v13 + 48) &= ~0x4000000uLL;
        sub_1ACBF1EB0(v11, v644);
        *(_WORD *)(v11 + 268) &= 0xFFFCu;
        if (!v630)
        {
          v1542 = 0;
          v12 += 40;
          continue;
        }
        goto LABEL_2553;
      case 0xB1u:
        v648 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v648 + 20) & 0x9000) != 0)
          v648 = sub_1ACBF7980(v648);
        else
          *(_WORD *)(v648 + 20) = 4;
        *(_QWORD *)v648 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8)
                                                      + 8)
                                          + 64);
        v12 += 40;
        continue;
      case 0xB2u:
        v649 = *(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6);
        if ((*(_WORD *)(v649 + 20) & 0x9000) != 0)
          sub_1ACBF7980(*(_QWORD *)(v1551 + 104) + ((uint64_t)*((int *)v12 + 2) << 6));
        else
          *(_WORD *)(v649 + 20) = 4;
        v852 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 32 * *((int *)v12 + 1) + 8);
        v853 = *((_DWORD *)v12 + 3);
        if (v853)
        {
          if (*(_DWORD *)(*(_QWORD *)(v852 + 8) + 64) <= v853)
            v854 = *((_DWORD *)v12 + 3);
          else
            v854 = *(_DWORD *)(*(_QWORD *)(v852 + 8) + 64);
        }
        else
        {
          v854 = 0;
        }
        if (*(_BYTE *)(v852 + 17))
        {
          ++*(_DWORD *)(v852 + 20);
          if (!*(_BYTE *)(v852 + 18))
            sub_1ACBECF6C(v852);
        }
        v861 = **(_QWORD **)(v852 + 8);
        if (v854)
          *(_DWORD *)(v861 + 188) = v854;
        else
          v854 = *(_DWORD *)(v861 + 188);
        if (*(_BYTE *)(v852 + 17))
        {
          v862 = *(_DWORD *)(v852 + 20) - 1;
          *(_DWORD *)(v852 + 20) = v862;
          if (!v862)
            sub_1ACBED048(v852);
        }
        *(_QWORD *)v649 = v854;
        v12 += 40;
        continue;
      case 0xB3u:
        v650 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
        *(_WORD *)(v650 + 20) &= ~0x800u;
        v12 += 40;
        continue;
      case 0xB4u:
        v651 = *((int *)v12 + 4);
        if ((int)v651 < 1)
        {
          v652 = 0;
LABEL_1185:
          v855 = v1554 + ((uint64_t)*((int *)v12 + 1) << 6);
          v856 = v652 % (8 * *(int *)(v855 + 16));
          *(_BYTE *)(*(_QWORD *)(v855 + 8) + (v856 >> 3)) |= 1 << (v856 & 7);
          v12 += 40;
          continue;
        }
        v652 = 0;
        v653 = *((int *)v12 + 3);
        v654 = v653 + v651;
        v655 = v1554 + (v653 << 6);
        break;
      default:
        goto LABEL_21;
    }
    break;
  }
  while (1)
  {
    v657 = *(_WORD *)(v655 + 20);
    if ((v657 & 0x24) != 0)
    {
      v658 = *(_QWORD *)v655;
    }
    else
    {
      if ((v657 & 8) == 0)
      {
        v656 = v657 & 0x12;
        if ((_DWORD)v656)
          v652 += v656 + 4093;
        goto LABEL_718;
      }
      a2.i64[0] = *(_QWORD *)v655;
      if (*(double *)v655 >= -9.22337204e18)
      {
        if (*(double *)a2.i64 <= 9.22337204e18)
          v658 = (uint64_t)*(double *)a2.i64;
        else
          v658 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v658 = 0x8000000000000000;
      }
    }
    v652 += v658;
LABEL_718:
    v655 += 64;
    if (++v653 >= v654)
      goto LABEL_1185;
  }
}

uint64_t sub_1ACB89F34(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  _OWORD *v16;

  v7 = *(_QWORD *)(a1 + 104);
  if (a2 >= 1)
    v7 += (*(int *)(a1 + 36) - (uint64_t)a2) << 6;
  v8 = 8 * a3 + 120;
  v9 = 296;
  if (a4)
    v9 = 0;
  v10 = v8 + v9;
  v11 = a2;
  v12 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 120) + 8 * a2);
  if (v12)
  {
    sub_1ACBF0D2C((_QWORD **)a1, v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v11) = 0;
  }
  v13 = *(_DWORD *)(v7 + 32);
  if (v13 >= v10)
  {
    result = *(_QWORD *)(v7 + 40);
  }
  else
  {
    if (v13 >= 1)
      sub_1ACBE0F9C(*(_QWORD **)(v7 + 24), *(_QWORD **)(v7 + 40));
    v14 = *(_QWORD *)(v7 + 24);
    if (v14)
      result = sub_1ACBE1124(v14, v10);
    else
      result = sub_1ACB5D828(v10);
    *(_QWORD *)(v7 + 40) = result;
    *(_QWORD *)(v7 + 8) = result;
    if (!result)
    {
      *(_DWORD *)(v7 + 32) = 0;
      return result;
    }
    *(_DWORD *)(v7 + 32) = v10;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v11) = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_BYTE *)result = a4;
  *(_WORD *)(result + 64) = a3;
  *(_QWORD *)(result + 80) = result + 4 * a3 + 112;
  if (!a4)
  {
    v16 = (_OWORD *)(*(_QWORD *)(v7 + 8) + v8);
    *(_QWORD *)(result + 40) = v16;
    *v16 = 0uLL;
    v16[1] = 0uLL;
  }
  return result;
}

uint64_t sub_1ACB8A058(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  signed __int8 v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);

  if ((char)a1[84] < 0)
  {
    v7 = *((_DWORD *)a1 + 20);
    if (!v7)
    {
LABEL_17:
      *a1 = 1;
      return 16;
    }
    v8 = *a1;
    if (v8 < 3)
      goto LABEL_28;
    if (v8 == 4)
      return *((unsigned int *)a1 + 1);
    v10 = *((_QWORD *)a1 + 3);
    if (v10)
    {
      v11 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v10);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v10);
        v10 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_27;
        v11 = &xmmword_1ECD3B1D0;
      }
      (*v11)(v10);
    }
LABEL_27:
    *((_QWORD *)a1 + 3) = 0;
    *a1 = 1;
    v7 = *((_DWORD *)a1 + 20);
LABEL_28:
    result = sub_1ACBF81EC(*((_DWORD **)a1 + 4), v7, (uint64_t *)a1 + 17);
    if ((_DWORD)result)
    {
      *a1 = 1;
      return result;
    }
    a1[84] = 0;
    v2 = *((_QWORD *)a1 + 17);
    a1[85] = *(_BYTE *)(v2 + 1);
    goto LABEL_31;
  }
  v2 = *((_QWORD *)a1 + 17);
  if (a1[84])
  {
    v3 = *(_QWORD *)(v2 + 112);
    if ((*(_WORD *)(v3 + 52) & 0x20) != 0)
      goto LABEL_5;
LABEL_4:
    sub_1ACBE906C(v3);
    while (1)
    {
      v5 = a1[84] - 1;
      a1[84] = v5;
      if (!v5)
        break;
      v3 = *(_QWORD *)(*(_QWORD *)&a1[8 * v5 + 144] + 112);
      if ((*(_WORD *)(v3 + 52) & 0x20) == 0)
        goto LABEL_4;
LABEL_5:
      v4 = *(_QWORD *)(v3 + 40);
      --*(_DWORD *)(v4 + 152);
      *(_QWORD *)(v3 + 32) = *(_QWORD *)(v4 + 168);
      *(_QWORD *)(v4 + 168) = v3;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 72) + 144))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 200) * (*(_DWORD *)(v3 + 48) - 1), *(_QWORD *)(v3 + 8));
    }
    v2 = *((_QWORD *)a1 + 18);
    *((_QWORD *)a1 + 17) = v2;
    goto LABEL_10;
  }
LABEL_31:
  if (!*(_BYTE *)v2 || *(_BYTE *)(v2 + 1) != (*((_QWORD *)a1 + 16) == 0))
    return sub_1ACBEC69C(82333, v2);
LABEL_10:
  *((_WORD *)a1 + 43) = 0;
  *((_WORD *)a1 + 35) = 0;
  a1[1] &= 0xF1u;
  if (*(_WORD *)(v2 + 24))
  {
    result = 0;
    *a1 = 0;
    return result;
  }
  if (*(_BYTE *)(v2 + 8))
    goto LABEL_17;
  if (*(_DWORD *)(v2 + 4) != 1)
    return sub_1ACBEB08C(82345);
  v9 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v2 + 9) + *(_QWORD *)(v2 + 80) + 8));
  *a1 = 0;
  return sub_1ACB8A3D0((uint64_t)a1, v9);
}

uint64_t sub_1ACB8A2CC(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + *(unsigned __int8 *)(a1 + 9));
  if (sub_1ACBEC580(a1, *v3))
  {
    v4 = 79025;
    return sub_1ACBEC69C(v4, a1);
  }
  v5 = *(unsigned int *)(v2 + 52);
  *(_WORD *)(a1 + 26) = v5 - 1;
  *(_BYTE *)(a1 + 12) = 0;
  v6 = *(unsigned __int8 *)(a1 + 10);
  *(_WORD *)(a1 + 18) = *(unsigned __int8 *)(a1 + 9) + (_WORD)v6 + 8;
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = v7 + v5;
  *(_QWORD *)(a1 + 96) = &v3[v6 + 8];
  *(_QWORD *)(a1 + 104) = v7 + v6;
  v8 = __rev16(*(unsigned __int16 *)(v3 + 3));
  *(_WORD *)(a1 + 24) = v8;
  if (((int)v5 - 8) / 6u < v8)
  {
    v4 = 79039;
    return sub_1ACBEC69C(v4, a1);
  }
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)a1 = 1;
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 8) + 50) & 0x20) != 0)
    return sub_1ACBEC7AC(a1);
  else
    return 0;
}

uint64_t sub_1ACB8A3D0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(char *)(a1 + 84);
  if (v2 >= 19)
    return sub_1ACBEB08C(82184);
  *(_WORD *)(a1 + 70) = 0;
  *(_BYTE *)(a1 + 1) &= 0xF9u;
  *(_WORD *)(a1 + 2 * v2 + 88) = *(_WORD *)(a1 + 86);
  v5 = (uint64_t *)(a1 + 136);
  *(_QWORD *)(a1 + 8 * v2 + 144) = *(_QWORD *)(a1 + 136);
  *(_WORD *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 84) = v2 + 1;
  result = sub_1ACBF81EC(*(_DWORD **)(a1 + 32), a2, (uint64_t *)(a1 + 136));
  if (!(_DWORD)result)
  {
    v6 = *v5;
    if (*(_WORD *)(*v5 + 24) && *(unsigned __int8 *)(v6 + 1) == *(unsigned __int8 *)(a1 + 85))
      return 0;
    v7 = *(_QWORD *)(v6 + 112);
    if ((*(_WORD *)(v7 + 52) & 0x20) != 0)
    {
      v8 = *(_QWORD *)(v7 + 40);
      --*(_DWORD *)(v8 + 152);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 168);
      *(_QWORD *)(v8 + 168) = v7;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v8 + 72) + 144))(*(_QWORD *)(v8 + 72), *(_QWORD *)(v8 + 200) * (*(_DWORD *)(v7 + 48) - 1), *(_QWORD *)(v7 + 8));
    }
    else
    {
      sub_1ACBE906C(v7);
    }
    result = sub_1ACBEB08C(82198);
  }
  v9 = *(_BYTE *)(a1 + 84) - 1;
  *(_BYTE *)(a1 + 84) = v9;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 8 * v9 + 144);
  return result;
}

uint64_t sub_1ACB8A4FC(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int16 v10;

  v3 = *a2;
  v4 = a2;
  if ((char)*a2 < 0)
  {
    v4 = a2 + 1;
    v5 = a2[1] & 0x7F | ((v3 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      v3 = v5;
      goto LABEL_6;
    }
    v4 = a2 + 2;
    v3 = a2[2] & 0x7F | (v5 << 7);
    if ((a2[2] & 0x80) != 0)
    {
      v4 = a2 + 3;
      v3 = a2[3] & 0x7F | (v3 << 7);
      if ((a2[3] & 0x80) != 0)
      {
        v4 = a2 + 4;
        v5 = a2[4] & 0x7F | (v3 << 7);
        if ((a2[4] & 0x80) == 0)
          goto LABEL_3;
        v4 = a2 + 5;
        v3 = a2[5] & 0x7F | (v5 << 7);
        if ((a2[5] & 0x80) != 0)
        {
          v4 = a2 + 6;
          v5 = a2[6] & 0x7F | (v3 << 7);
          if ((a2[6] & 0x80) == 0)
            goto LABEL_3;
          v4 = a2 + 7;
          v3 = a2[7] & 0x7F | (v5 << 7);
          if ((a2[7] & 0x80) != 0)
          {
            v4 = a2 + 8;
            v5 = a2[8] & 0x7F | (v3 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }
LABEL_6:
  v6 = v4 + 1;
  v7 = v4[1];
  if ((char)v4[1] < 0)
  {
    v6 = v4 + 2;
    v8 = v4[2] ^ (unint64_t)(v7 << 7);
    if ((char)v4[2] < 0)
    {
      v6 = v4 + 3;
      v9 = v4[3] ^ (v8 << 7);
      if ((char)v4[3] < 0)
      {
        v6 = v4 + 4;
        v7 = v4[4] ^ (v9 << 7) ^ 0x10204000;
        if ((char)v4[4] < 0)
        {
          v6 = v4 + 5;
          v7 = v4[5] ^ (unint64_t)(v7 << 7) ^ 0x4000;
          if ((char)v4[5] < 0)
          {
            v6 = v4 + 6;
            v7 = v4[6] ^ (unint64_t)(v7 << 7) ^ 0x4000;
            if ((char)v4[6] < 0)
            {
              v6 = v4 + 7;
              v7 = v4[7] ^ (unint64_t)(v7 << 7) ^ 0x4000;
              if ((char)v4[7] < 0)
              {
                v6 = v4 + 8;
                v7 = v4[8] ^ (unint64_t)(v7 << 7) ^ 0x4000;
                if ((char)v4[8] < 0)
                {
                  v7 = (v4[9] | (unint64_t)(v7 << 8)) ^ 0x8000;
                  v6 = v4 + 9;
                }
              }
            }
          }
        }
      }
      else
      {
        v7 = v9 ^ 0x204000;
      }
    }
    else
    {
      v7 = v8 ^ 0x4000;
    }
  }
  *(_DWORD *)(a3 + 16) = v3;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6 + 1;
  if (v3 > *(unsigned __int16 *)(result + 14))
    return sub_1ACBECCB8(result, (__int16)a2, a3);
  v10 = v3 + (_WORD)v6 + 1 - (_WORD)a2;
  if ((v10 & 0xFFFC) == 0)
    v10 = 4;
  *(_WORD *)(a3 + 22) = v10;
  *(_WORD *)(a3 + 20) = v3;
  return result;
}

uint64_t sub_1ACB8A6CC(char *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    if (a1[1] < 0)
    {
      v5 = a1[2];
      v6 = v5 & 0x7F | (*a1 << 14) & 0x1FFFFF;
      if (v5 < 0)
      {
        v7 = (a1[3] | ((_DWORD)v4 << 14)) & 0x1FC07F;
        if (a1[3] < 0)
        {
          v8 = a1[4];
          v9 = v8 | (v6 << 14);
          if (a1[4] < 0)
          {
            v10 = v7 | (v6 << 7);
            v11 = a1[5] | (v7 << 14);
            if (a1[5] < 0)
            {
              v12 = a1[6] | (v9 << 14);
              if (a1[6] < 0)
              {
                v13 = v12 & 0x1FC07F;
                v14 = a1[7] | (v11 << 14);
                if (a1[7] < 0)
                {
                  v15 = a1[8] | (v13 << 15) | (v14 << 8) & 0x1FC07F00u | ((unint64_t)((v8 >> 3) & 0xF | (16 * v10)) << 32);
                  result = 9;
                }
                else
                {
                  v15 = v14 & 0xF01FC07F | (v13 << 7) | ((unint64_t)(v10 >> 4) << 32);
                  result = 8;
                }
                *a2 = v15;
              }
              else
              {
                result = 7;
                *a2 = v12 & 0xF01FC07F | (v11 << 7) & 0xFE03F80 | ((unint64_t)(v10 >> 11) << 32);
              }
            }
            else
            {
              result = 6;
              *a2 = v11 | (v9 << 7) & 0xFE03F80u | ((unint64_t)(v10 >> 18) << 32);
            }
          }
          else
          {
            result = 5;
            *a2 = v9 | (v7 << 7) | ((unint64_t)(v6 >> 18) << 32);
          }
        }
        else
        {
          result = 4;
          *a2 = v7 | (v6 << 7);
        }
      }
      else
      {
        result = 3;
        *a2 = v6 | ((v4 & 0x7F) << 7);
      }
    }
    else
    {
      result = 2;
      *a2 = v4 | ((v2 & 0x7F) << 7);
    }
  }
  else
  {
    result = 1;
    *a2 = v2;
  }
  return result;
}

char *sub_1ACB8A864(char *result, int a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;

  switch(a2)
  {
    case 0:
    case 11:
      *(_WORD *)(a3 + 20) = 1;
      return result;
    case 1:
      v5 = *result;
      goto LABEL_12;
    case 2:
      v5 = result[1] | (unint64_t)((uint64_t)*result << 8);
      goto LABEL_12;
    case 3:
      v6 = ((uint64_t)*result << 16) | ((unint64_t)result[1] << 8);
      v7 = result[2];
      goto LABEL_10;
    case 4:
      v6 = ((uint64_t)*result << 24) | ((unint64_t)result[1] << 16) | ((unint64_t)result[2] << 8);
      v7 = result[3];
LABEL_10:
      v5 = v6 | v7;
      goto LABEL_12;
    case 5:
      v5 = bswap32(*(_DWORD *)(result + 2)) | ((unint64_t)(result[1] | (*result << 8)) << 32);
      goto LABEL_12;
    case 6:
    case 7:
      v3 = (*result << 24) | (result[1] << 16);
      v4 = ((unint64_t)result[4] << 24) | ((unint64_t)result[5] << 16) | ((unint64_t)(v3 | (bswap32(*((unsigned __int16 *)result + 1)) >> 16)) << 32) | result[7] | ((unint64_t)result[6] << 8);
      if (a2 == 6)
      {
        *(_QWORD *)a3 = v4;
LABEL_13:
        *(_WORD *)(a3 + 20) = 4;
      }
      else
      {
        *(_QWORD *)a3 = v4;
        v8 = ~v3 & 0x7FF00000;
        if ((v4 & 0xFFFFFFFFFFFFFLL) != 0 && v8 == 0)
          v10 = 1;
        else
          v10 = 8;
        *(_WORD *)(a3 + 20) = v10;
      }
      return result;
    case 8:
    case 9:
      v5 = (a2 - 8);
LABEL_12:
      *(_QWORD *)a3 = v5;
      goto LABEL_13;
    case 10:
      *(_WORD *)(a3 + 20) = 1025;
      *(_DWORD *)(a3 + 16) = 0;
      *(_DWORD *)a3 = 0;
      return result;
    default:
      *(_QWORD *)(a3 + 8) = result;
      *(_DWORD *)(a3 + 16) = (a2 - 12) >> 1;
      *(_WORD *)(a3 + 20) = word_1ACCB6DE0[a2 & 1];
      return result;
  }
}

const unsigned __int8 *__cdecl sqlite3_value_text(const unsigned __int8 *result)
{
  int v1;

  if (result)
  {
    v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || result[22] != 1)
    {
      if ((v1 & 1) != 0)
        return 0;
      else
        return (const unsigned __int8 *)sub_1ACBF2B64((int *)result, 1);
    }
    else
    {
      return (const unsigned __int8 *)*((_QWORD *)result + 1);
    }
  }
  return result;
}

uint64_t sub_1ACB8AA08(uint64_t a1, int a2, int a3)
{
  void *v7;
  __int16 v8;

  if (*(int *)(a1 + 32) >= 32)
  {
    v7 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 20) &= 0x2Du;
  }
  else
  {
    if (sub_1ACB7E454(a1, 32, 0))
    {
      *(_BYTE *)(a1 + 22) = 0;
      return 7;
    }
    v7 = *(void **)(a1 + 8);
  }
  sub_1ACBF2E10(v7, a1);
  *(_BYTE *)(a1 + 22) = 1;
  v8 = *(_WORD *)(a1 + 20) | 0x202;
  if (a3)
    v8 = *(_WORD *)(a1 + 20) & 0xFDD1 | 0x202;
  *(_WORD *)(a1 + 20) = v8;
  if (a2 != 1)
    sub_1ACBB0FEC((int *)a1, a2);
  return 0;
}

void sub_1ACB8AAC8(_QWORD **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *j;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _BYTE *k;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t i;
  _QWORD *v30;
  uint64_t v31;
  _WORD *v32;
  int v33;
  BOOL v34;
  const char *v35;
  char v36;
  int v37;
  int v38;
  unsigned int v39;

  v10 = a1[43];
  if (!v10)
  {
LABEL_47:
    if (!a2)
      return;
    goto LABEL_48;
  }
  v11 = *((_DWORD *)v10 + 12);
  if ((v11 & 4) != 0)
  {
    sub_1ACBCB308((uint64_t)a1, "table \"%s\" has more than one primary key", a3, a4, a5, a6, a7, a8, *v10);
    goto LABEL_47;
  }
  v12 = a5;
  v13 = a4;
  v14 = a3;
  *((_DWORD *)v10 + 12) = v11 | 4;
  if (!a2)
  {
    v18 = *((__int16 *)v10 + 27) - 1;
    v17 = v10[1] + 16 * v18;
    v28 = *(_WORD *)(v17 + 14);
    *(_WORD *)(v17 + 14) = v28 | 1;
    if ((v28 & 0x60) != 0)
      sub_1ACBCB308((uint64_t)a1, "generated columns cannot be part of the PRIMARY KEY", a3, a4, a5, a6, a7, a8, v36);
LABEL_33:
    if (!v17 || v12 == 1 || (*(_BYTE *)(v17 + 8) & 0xF0) != 0x40)
      goto LABEL_45;
    if (a2 && *((unsigned __int8 *)a1 + 302) >= 2u)
    {
      for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 16))
      {
        if ((*(_BYTE *)(i + 5) & 0x20) == 0)
          break;
      }
      v30 = a1[51];
      if (v30)
      {
        while (*v30 != i)
        {
          v30 = (_QWORD *)v30[3];
          if (!v30)
            goto LABEL_52;
        }
        *v30 = (char *)v10 + 52;
      }
    }
LABEL_52:
    *((_WORD *)v10 + 26) = v18;
    *((_BYTE *)v10 + 62) = v14;
    *((_DWORD *)v10 + 12) |= 8 * v13;
    if (!a2)
      return;
    *((_BYTE *)a1 + 300) = *((_BYTE *)a2 + 24);
    v31 = *a2;
    if ((int)v31 >= 1)
    {
      v32 = (_WORD *)((char *)a2 + 25);
      while ((*v32 & 0x20) == 0)
      {
        v32 += 12;
        if (!--v31)
          goto LABEL_48;
      }
      v33 = *((unsigned __int8 *)v32 - 1);
      v34 = v33 == 3 || v33 == 0;
      v35 = "LAST";
      if (v34)
        v35 = "FIRST";
      sub_1ACBCB308((uint64_t)a1, "unsupported use of NULLS %s", a3, a4, a5, a6, a7, a8, (char)v35);
    }
LABEL_48:
    sub_1ACC010B0(*a1, a2);
    return;
  }
  v15 = *a2;
  if ((int)v15 < 1)
    goto LABEL_45;
  v37 = a5;
  v38 = a4;
  v39 = a3;
  v16 = 0;
  v17 = 0;
  LOWORD(v18) = -1;
  while (2)
  {
    for (j = *(unsigned __int8 **)&a2[6 * v16 + 2]; j; j = (unsigned __int8 *)*((_QWORD *)j + 2))
    {
      if ((j[5] & 0x20) == 0)
        break;
    }
    v20 = *j;
    v21 = j;
    if (v20 == 117)
      goto LABEL_14;
    if (v20 == 113)
    {
      v21 = (_BYTE *)*((_QWORD *)j + 2);
      if (*v21 != 117)
        goto LABEL_7;
LABEL_14:
      *v21 = 59;
      v20 = *j;
    }
    if (v20 != 59)
      goto LABEL_7;
    if (*((__int16 *)v10 + 27) < 1)
    {
      LOWORD(v18) = 0;
      goto LABEL_7;
    }
    v18 = 0;
    v22 = v10[1];
    while (2)
    {
      v23 = *(unsigned __int8 **)(v22 + 16 * v18);
      for (k = (_BYTE *)*((_QWORD *)j + 1); ; ++k)
      {
        v25 = *k;
        v26 = *v23;
        if ((_DWORD)v25 != (_DWORD)v26)
          break;
        if (!*k)
        {
          v17 = v22 + 16 * v18;
          v27 = *(_WORD *)(v17 + 14);
          *(_WORD *)(v17 + 14) = v27 | 1;
          if ((v27 & 0x60) != 0)
            sub_1ACBCB308((uint64_t)a1, "generated columns cannot be part of the PRIMARY KEY", a3, a4, a5, a6, a7, a8, v36);
          goto LABEL_7;
        }
LABEL_20:
        ++v23;
      }
      if (byte_1ACCB6333[v25] == byte_1ACCB6333[v26])
        goto LABEL_20;
      if (++v18 != *((unsigned __int16 *)v10 + 27))
        continue;
      break;
    }
    LOWORD(v18) = *((_WORD *)v10 + 27);
LABEL_7:
    if (++v16 != v15)
      continue;
    break;
  }
  v13 = v38;
  v14 = v39;
  v12 = v37;
  if ((_DWORD)v15 == 1)
    goto LABEL_33;
LABEL_45:
  if (v13)
  {
    sub_1ACBCB308((uint64_t)a1, "AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY", a3, a4, a5, a6, a7, a8, v36);
    goto LABEL_47;
  }
  sub_1ACB8BA04(a1, 0, 0, 0, (uint64_t)a2, v14, 0, 0, v12, 0, 2u);
}

uint64_t sub_1ACB8AE30(int a1)
{
  return (a1 + 7) & 0xFFFFFFF8;
}

void *sub_1ACB8AE3C(void *ptr, int a2)
{
  malloc_zone_t *v4;
  void *v5;
  int v6;

  v4 = (malloc_zone_t *)qword_1EECAD2A8;
  if (!qword_1EECAD2A8)
    v4 = malloc_default_zone();
  v5 = malloc_type_zone_realloc(v4, ptr, a2, 0xF56B3FD2uLL);
  if (!v5)
  {
    if (qword_1EECAD2A8)
      v6 = (*(uint64_t (**)(uint64_t, void *))(qword_1EECAD2A8 + 16))(qword_1EECAD2A8, ptr);
    else
      v6 = malloc_size(ptr);
    sqlite3_log(7, "failed memory resize %u to %u bytes", v6, a2);
  }
  return v5;
}

void sub_1ACB8AED0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  int v19;
  const void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  size_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 344);
  if (v11)
  {
    v12 = a4;
    v13 = (unsigned __int8 *)a3;
    v14 = 4;
    if (*(_BYTE *)(v10 + 197))
    {
      if (*(_BYTE *)(v10 + 196) == 1)
        v14 = 4;
      else
        v14 = 5;
    }
    v15 = *(_QWORD *)(v11 + 8);
    v16 = *(__int16 *)(v11 + 54) - 1;
    v17 = (uint64_t *)(v15 + 16 * v16);
    *((_QWORD *)&v34 + 1) = 0;
    v35 = 0u;
    *(_QWORD *)&v33 = 0;
    WORD2(v35) = v14;
    *((_QWORD *)&v33 + 1) = sub_1ACB8B0F4;
    *(_QWORD *)&v34 = sub_1ACC0B708;
    if (a2)
    {
      sub_1ACC0B714((uint64_t)&v33, (uint64_t)a2);
      if (!WORD2(v35))
      {
        v32 = *v17;
        v18 = "default value of column [%s] is not constant";
        goto LABEL_20;
      }
    }
    if ((*(_WORD *)(v15 + 16 * v16 + 14) & 0x60) != 0)
    {
      v18 = "cannot use DEFAULT on a generated column";
LABEL_20:
      sub_1ACBCB308(a1, v18, a3, a4, a5, a6, a7, a8, v32);
      goto LABEL_21;
    }
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    LOBYTE(v33) = -75;
    v19 = v12 - (_DWORD)v13;
    do
    {
      v20 = v13;
      v21 = v19;
      v22 = *v13++;
      --v19;
    }
    while ((byte_1ACCB6548[v22] & 1) != 0);
    v23 = v21;
    v24 = ((uint64_t)v21 << 32) + 0x100000000;
    v25 = v23 - 2;
    do
    {
      v26 = byte_1ACCB6548[v13[v25]];
      v24 -= 0x100000000;
      --v25;
    }
    while ((v26 & 1) != 0);
    v27 = v24 >> 32;
    v28 = (_BYTE *)sub_1ACBE1124(v10, (v24 >> 32) + 1);
    v29 = v28;
    if (v28)
    {
      memcpy(v28, v20, v27);
      v29[v27] = 0;
    }
    *((_QWORD *)&v33 + 1) = v29;
    *(_QWORD *)&v34 = a2;
    DWORD1(v33) = 0x2000;
    v30 = (unsigned __int8 *)sub_1ACB8B290(v10, (unsigned __int8 *)&v33, 1, 0);
    if (*((_QWORD *)&v33 + 1))
      sub_1ACBE0F9C((_QWORD *)v10, *((_QWORD **)&v33 + 1));
    sub_1ACC0EA70((uint64_t *)a1, v11, (uint64_t)v17, v30);
  }
LABEL_21:
  v31 = *(unsigned __int8 *)(a1 + 302);
  if (v31 >= 2)
  {
    v35 = 0uLL;
    *(_QWORD *)&v33 = a1;
    *((_QWORD *)&v33 + 1) = sub_1ACC12814;
    *(_QWORD *)&v34 = sub_1ACC12880;
    *((_QWORD *)&v34 + 1) = 0;
    *(_BYTE *)(a1 + 302) = 3;
    if (a2)
      sub_1ACC0B714((uint64_t)&v33, (uint64_t)a2);
    *(_BYTE *)(a1 + 302) = v31;
  }
  if (a2)
    sub_1ACBF8348((_QWORD *)v10, a2);
}

uint64_t sub_1ACB8B0F4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int v5;
  _BYTE *v6;
  const char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  const char *i;
  uint64_t v16;
  uint64_t v17;

  v2 = *(unsigned __int16 *)(a1 + 36);
  if (v2 == 2 && (*(_BYTE *)(a2 + 4) & 1) != 0)
    goto LABEL_27;
  v3 = 0;
  switch(*(_BYTE *)a2)
  {
    case 0x8D:
    case 0xB0:
    case 0xB3:
      goto LABEL_27;
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xAA:
    case 0xAB:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB1:
    case 0xB2:
      return v3;
    case 0x9C:
      if (v2 == 4)
        goto LABEL_27;
      if (v2 != 5)
        return 0;
      *(_BYTE *)a2 = 121;
      return 0;
    case 0xA7:
    case 0xA8:
    case 0xA9:
      goto LABEL_4;
    case 0xAC:
      v12 = *(_DWORD *)(a2 + 4);
      v13 = (v12 >> 20) & 1;
      if (v2 > 3)
        v13 = 1;
      if (v13 != 1 || (v12 & 0x1000000) != 0)
        goto LABEL_27;
      if (v2 != 5)
        return 0;
      *(_DWORD *)(a2 + 4) = v12 | 0x40000000;
      return 0;
    default:
      if (*(_BYTE *)a2 != 59)
        return v3;
      v5 = *(_DWORD *)(a2 + 4);
      if ((v5 & 0x4000800) != 0)
        goto LABEL_4;
      v6 = *(_BYTE **)(a2 + 8);
      v7 = "true";
      v8 = v6;
      break;
  }
  while (1)
  {
    v9 = *v8;
    v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 != (_DWORD)v10)
      break;
    if (!*v8)
    {
      v11 = 0x10000000;
      goto LABEL_37;
    }
LABEL_14:
    ++v8;
    ++v7;
  }
  if (byte_1ACCB6333[v9] == byte_1ACCB6333[v10])
    goto LABEL_14;
  for (i = "false"; ; ++i)
  {
    v16 = *v6;
    v17 = *(unsigned __int8 *)i;
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      if (byte_1ACCB6333[v16] == byte_1ACCB6333[v17])
        goto LABEL_33;
LABEL_4:
      if ((*(_BYTE *)(a2 + 4) & 0x20) != 0)
      {
        if (v2 != 2)
          return 0;
      }
      else if (v2 == 3 && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 40))
      {
        return 0;
      }
LABEL_27:
      *(_WORD *)(a1 + 36) = 0;
      return 2;
    }
    if (!*v6)
      break;
LABEL_33:
    ++v6;
  }
  v11 = 0x20000000;
LABEL_37:
  *(_BYTE *)a2 = -86;
  *(_DWORD *)(a2 + 4) = v11 | v5;
  return 1;
}

unsigned int *sub_1ACB8B290(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  size_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v35;

  if (a4)
  {
    v8 = (unsigned int *)*a4;
    v9 = 0x8000000;
    if (!*a4)
      return v8;
  }
  else
  {
    v10 = sub_1ACB8B5D8(a2, a3);
    v8 = (unsigned int *)sub_1ACBE1124(a1, v10);
    v9 = 0;
    if (!v8)
      return v8;
  }
  if (!(_DWORD)a3 || *a2 == 178 || (a2[7] & 1) != 0)
  {
    v11 = 80;
    v12 = *((_DWORD *)a2 + 1);
    if ((v12 & 0x800) != 0)
      goto LABEL_26;
  }
  else
  {
    v11 = 16428;
    if (*((_QWORD *)a2 + 2))
    {
      v12 = *((_DWORD *)a2 + 1);
      if ((v12 & 0x800) != 0)
        goto LABEL_26;
    }
    else
    {
      if (*((_QWORD *)a2 + 4))
        v11 = 16428;
      else
        v11 = 65552;
      v12 = *((_DWORD *)a2 + 1);
      if ((v12 & 0x800) != 0)
        goto LABEL_26;
    }
  }
  v13 = (const char *)*((_QWORD *)a2 + 1);
  if (v13)
  {
    v14 = (strlen(v13) & 0x3FFFFFFF) + 1;
    v15 = v11 & 0x7C;
    if (!(_DWORD)a3)
      goto LABEL_14;
LABEL_27:
    memcpy(v8, a2, v15);
    goto LABEL_28;
  }
LABEL_26:
  v14 = 0;
  v15 = v11 & 0x7C;
  if ((_DWORD)a3)
    goto LABEL_27;
LABEL_14:
  if ((v12 & 0x4000) != 0)
    v16 = 44;
  else
    v16 = 80;
  if ((v12 & 0x10000) != 0)
    v17 = 16;
  else
    v17 = v16;
  memcpy(v8, a2, v17);
  if (v17 <= 0x4F)
    bzero((char *)v8 + v17, 80 - v17);
LABEL_28:
  v35 = 0;
  v18 = v11 & 0x14000 | v9 | v8[1] & 0xF7FEBFFF;
  v8[1] = v18;
  if (v14)
  {
    v19 = (unsigned __int8 *)v8 + v15;
    *((_QWORD *)v8 + 1) = v19;
    memcpy(v19, *((const void **)a2 + 1), v14);
    v18 = v8[1];
  }
  v20 = *((_DWORD *)a2 + 1);
  if (((v18 | v20) & 0x810000) == 0)
  {
    v21 = (_QWORD *)*((_QWORD *)a2 + 4);
    if ((v20 & 0x1000) != 0)
      v22 = sub_1ACB8DFB8(a1, (uint64_t)v21, a3);
    else
      v22 = (uint64_t)sub_1ACB8B6B8(a1, v21, a3);
    *((_QWORD *)v8 + 4) = v22;
  }
  v23 = v8[1];
  if ((v23 & 0x1014000) != 0)
  {
    if ((_DWORD)a3)
    {
      v24 = *((_DWORD *)a2 + 1);
      v25 = 80;
      if (*a2 != 178 && (v24 & 0x1000000) == 0)
      {
        v25 = 44;
        if (!*((_QWORD *)a2 + 2))
        {
          if (*((_QWORD *)a2 + 4))
            v25 = 44;
          else
            v25 = 16;
        }
      }
    }
    else
    {
      v24 = *((_DWORD *)a2 + 1);
      v25 = 80;
    }
    if ((v24 & 0x800) == 0)
    {
      v29 = (const char *)*((_QWORD *)a2 + 1);
      if (v29)
        v25 = (v25 | 1) + (strlen(v29) & 0x3FFFFFFF);
    }
    v35 = (unsigned __int8 *)v8 + ((v25 + 7) & 0x7FFFFFF8);
    if ((v23 & 0x810000) != 0)
    {
      if ((v24 & 0x1000000) == 0)
        goto LABEL_55;
    }
    else
    {
      v30 = *((_QWORD *)a2 + 2);
      if (v30)
        v31 = sub_1ACB8B290(a1, v30, 1, &v35);
      else
        v31 = 0;
      *((_QWORD *)v8 + 2) = v31;
      v32 = *((_QWORD *)a2 + 3);
      if (v32)
        v33 = sub_1ACB8B290(a1, v32, 1, &v35);
      else
        v33 = 0;
      *((_QWORD *)v8 + 3) = v33;
      if ((*((_DWORD *)a2 + 1) & 0x1000000) == 0)
      {
LABEL_55:
        if (!a4)
          return v8;
        goto LABEL_65;
      }
    }
    *((_QWORD *)v8 + 9) = sub_1ACC0D1F4(a1, (uint64_t)v8, *((_QWORD *)a2 + 9));
    if (a4)
LABEL_65:
      *a4 = v35;
  }
  else if ((a2[6] & 0x81) == 0)
  {
    v26 = *((_QWORD *)a2 + 2);
    if (*(unsigned __int8 *)v8 != 178 && v26)
      v26 = sub_1ACB8B290(a1, v26, 0, 0);
    *((_QWORD *)v8 + 2) = v26;
    v27 = *((_QWORD *)a2 + 3);
    if (v27)
      v28 = sub_1ACB8B290(a1, v27, 0, 0);
    else
      v28 = 0;
    *((_QWORD *)v8 + 3) = v28;
  }
  return v8;
}

uint64_t sub_1ACB8B5D8(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int i;
  int v5;
  const char *v6;
  int v7;
  int v8;

  v3 = a1;
  for (i = 0; v3; i += v8 + v7)
  {
    if (!(_DWORD)a2 || *v3 == 178 || (v3[7] & 1) != 0)
    {
      v5 = 80;
      if ((v3[5] & 8) == 0)
        goto LABEL_9;
    }
    else
    {
      if (!*((_QWORD *)v3 + 2))
      {
        if (*((_QWORD *)v3 + 4))
          v5 = 44;
        else
          v5 = 16;
        if ((v3[5] & 8) != 0)
          goto LABEL_11;
LABEL_9:
        v6 = (const char *)*((_QWORD *)v3 + 1);
        if (v6)
          v5 = (v5 | 1) + (strlen(v6) & 0x3FFFFFFF);
        goto LABEL_11;
      }
      v5 = 44;
      if ((v3[5] & 8) == 0)
        goto LABEL_9;
    }
LABEL_11:
    v7 = (v5 + 7) & 0x7FFFFFF8;
    if ((a2 & 1) == 0)
      return (v7 + i);
    v8 = sub_1ACB8B5D8(*((_QWORD *)v3 + 2), a2);
    v3 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
  }
  v7 = 0;
  return (v7 + i);
}

_QWORD *sub_1ACB8B6B8(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (!a2)
    return 0;
  if (a1 && *(_QWORD *)(a1 + 520) > (unint64_t)a2)
  {
    if (*(_QWORD *)(a1 + 496) <= (unint64_t)a2)
    {
      v5 = 128;
      goto LABEL_7;
    }
    if (*(_QWORD *)(a1 + 504) <= (unint64_t)a2)
    {
      v5 = *(unsigned __int16 *)(a1 + 438);
      goto LABEL_7;
    }
  }
  v5 = off_1ECD3B178(a2);
LABEL_7:
  v6 = (_QWORD *)sub_1ACBE1124(a1, v5);
  v7 = v6;
  if (v6)
  {
    *v6 = *a2;
    if (*(int *)a2 >= 1)
    {
      v8 = 0;
      v9 = 0;
      v26 = 0;
      v10 = 0;
      while (1)
      {
        v14 = &a2[v8];
        v15 = &v7[v8];
        v16 = (unsigned __int8 *)a2[v8 + 1];
        if (!v16)
          break;
        v17 = sub_1ACB8B290(a1, a2[v8 + 1], a3, 0);
        v15[1] = v17;
        if (*v16 != 178 || v17 == 0)
          goto LABEL_21;
        v19 = v17;
        v20 = *(_QWORD *)(v17 + 24);
        if (v20)
        {
          v26 = *((_QWORD *)v16 + 3);
          *(_QWORD *)(v17 + 16) = v20;
          v9 = v20;
          v21 = (const char *)v14[2];
          if (!v21)
            goto LABEL_10;
        }
        else
        {
          v24 = *((_QWORD *)v16 + 2);
          if (v24 != v26)
          {
            if (v24)
              v9 = sub_1ACB8B290(a1, v24, a3, 0);
            else
              v9 = 0;
            *(_QWORD *)(v19 + 24) = v9;
            v26 = v24;
          }
          *(_QWORD *)(v19 + 16) = v9;
          v21 = (const char *)v14[2];
          if (!v21)
          {
LABEL_10:
            v11 = 0;
            goto LABEL_11;
          }
        }
LABEL_22:
        v22 = strlen(v21);
        v23 = v22 + 1;
        if (a1)
        {
          v11 = (void *)sub_1ACBE1124(a1, v23);
          if (!v11)
            goto LABEL_11;
LABEL_26:
          memcpy(v11, v21, v23);
          goto LABEL_11;
        }
        v11 = (void *)sub_1ACB5D828(v22 + 1);
        if (v11)
          goto LABEL_26;
LABEL_11:
        v12 = &v7[v8];
        v12[2] = v11;
        v13 = *((_DWORD *)v14 + 6);
        *((_DWORD *)v12 + 6) = v13;
        *(_WORD *)((char *)v12 + 25) = (v13 >> 8) & 0xFFFB;
        *((_DWORD *)v12 + 7) = *((_DWORD *)v14 + 7);
        ++v10;
        v8 += 3;
        if (v10 >= *(_DWORD *)a2)
          return v7;
      }
      v15[1] = 0;
LABEL_21:
      v21 = (const char *)v14[2];
      if (!v21)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  return v7;
}

uint64_t sub_1ACB8B8D4(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t result;
  uint64_t v5;

  *(_WORD *)(a1 + 70) = 0;
  *(_BYTE *)(a1 + 1) &= 0xF9u;
  if (*(_BYTE *)a1)
    return sub_1ACBF8EF8((unsigned __int8 *)a1);
  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_WORD *)(a1 + 86);
  *(_WORD *)(a1 + 86) = v3 + 1;
  if (*(unsigned __int16 *)(v2 + 24) <= (unsigned __int16)(v3 + 1))
  {
    *(_WORD *)(a1 + 86) = v3;
    return sub_1ACBF8EF8((unsigned __int8 *)a1);
  }
  if (!*(_BYTE *)(v2 + 8))
  {
    while (1)
    {
      v5 = *(_QWORD *)(a1 + 136);
      if (*(_BYTE *)(v5 + 8))
        break;
      result = sub_1ACB8A3D0(a1, bswap32(*(_DWORD *)(*(_QWORD *)(v5 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v5 + 96)+ 2 * *(unsigned __int16 *)(a1 + 86))) & *(_WORD *)(v5 + 26)))));
      if ((_DWORD)result)
        return result;
    }
  }
  return 0;
}

_QWORD *sub_1ACB8B98C(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *(unsigned __int8 *)(v4 + 100);
  v6 = *(unsigned __int8 *)(v4 + 197);
  result = sub_1ACBFC650(v4, *(unsigned __int8 *)(v4 + 100), a2, v6);
  if (!v6 && (!result || !result[3]))
    return (_QWORD *)sub_1ACC01130((uint64_t)a1, v5, (uint64_t)result, a2, v8, v9, v10, v11);
  return result;
}

_QWORD *sub_1ACB8BA04(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned __int8 a11)
{
  unsigned __int8 *v11;
  _QWORD *v12;
  uint64_t v14;
  int v16;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  BOOL v35;
  const char *v36;
  _QWORD *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  char *v58;
  int v59;
  int v60;
  const char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  unsigned __int8 *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  int v105;
  int v106;
  const char *v107;
  int v108;
  int v109;
  __int16 v110;
  size_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned __int8 **v118;
  unint64_t v119;
  unint64_t v120;
  unsigned __int8 **v121;
  char v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *j;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 **v133;
  const char *v134;
  unint64_t v135;
  const char *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  unsigned __int8 *k;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  unsigned int v232;
  unsigned __int8 **v233;
  unsigned __int8 *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  void *__dst;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  _OWORD v247[2];
  uint64_t v248;
  _QWORD *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;

  v11 = (unsigned __int8 *)a8;
  v12 = (_QWORD *)a5;
  v245 = 0u;
  v246 = 0u;
  v243 = 0u;
  v244 = 0u;
  v241 = 0u;
  v242 = 0u;
  v14 = (uint64_t)*a1;
  __dst = 0;
  if (*((_DWORD *)a1 + 12))
    goto LABEL_28;
  v16 = a6;
  if (a11 != 2 && *((_BYTE *)a1 + 302) == 1)
    goto LABEL_28;
  if (!*(_BYTE *)(v14 + 197))
  {
    v25 = sub_1ACB6541C(v14, (char **)a1 + 1, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v25)
    {
      v26 = 0;
      *((_DWORD *)a1 + 6) = v25;
      ++*((_DWORD *)a1 + 12);
      goto LABEL_29;
    }
    if (*(_BYTE *)(v14 + 111))
      *(_DWORD *)(v14 + 44) |= 0x10u;
  }
  if (v12)
  {
    v20 = *(unsigned int *)v12;
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 24 * v20;
      while ((*(_WORD *)((_BYTE *)&v12[v21 / 8 + 3] + 1) & 0x20) == 0)
      {
        v21 += 24;
        if (v22 == v21)
          goto LABEL_10;
      }
      v34 = LOBYTE(v12[v21 / 8 + 3]);
      v35 = v34 == 3 || v34 == 0;
      v36 = "LAST";
      if (v35)
        v36 = "FIRST";
      v226 = (char)v36;
      v24 = "unsupported use of NULLS %s";
      goto LABEL_27;
    }
  }
LABEL_10:
  if (a4)
  {
    v23 = (uint64_t)*a1;
    if (*(_DWORD *)(a3 + 8))
    {
      if (*(_BYTE *)(v23 + 197))
      {
        v24 = "corrupt database";
LABEL_27:
        sub_1ACBCB308((uint64_t)a1, v24, a3, (uint64_t)a4, a5, a6, a7, a8, v226);
        goto LABEL_28;
      }
      v238 = a11;
      v30 = sub_1ACC0DF84(v23, a2);
      v38 = a3;
      if (v30 < 0)
      {
        sub_1ACBCB308((uint64_t)a1, "unknown database %T", a3, (uint64_t)a4, a5, a6, a7, a8, a2);
        goto LABEL_28;
      }
    }
    else
    {
      v238 = a11;
      v30 = *(unsigned __int8 *)(v23 + 196);
      v38 = a2;
    }
    v239 = v38;
    if (!*(_BYTE *)(v14 + 197))
    {
      v39 = sub_1ACC12D54(a1, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(a3 + 8))
      {
        v38 = v239;
      }
      else
      {
        v38 = v239;
        if (v39 && *(_QWORD *)(v39 + 96) == *(_QWORD *)(*(_QWORD *)(v14 + 32) + 56))
          v30 = 1;
      }
    }
    v40 = (uint64_t)*a1;
    *(_QWORD *)&v241 = a1;
    v41 = (_QWORD *)(*(_QWORD *)(v40 + 32) + 32 * v30);
    *((_QWORD *)&v245 + 1) = *v41;
    v42 = v41[3];
    *(_QWORD *)&v246 = "index";
    *((_QWORD *)&v246 + 1) = v38;
    LOBYTE(v245) = v30 == 1;
    *((_QWORD *)&v241 + 1) = a1;
    *(_QWORD *)&v242 = sub_1ACC13854;
    *((_QWORD *)&v242 + 1) = sub_1ACC138D0;
    *(_QWORD *)&v243 = nullsub_8;
    DWORD2(v243) = 0;
    WORD6(v243) = 0;
    *(_QWORD *)&v244 = &v241;
    *((_QWORD *)&v244 + 1) = v42;
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v248 = 0;
    v250 = 0u;
    memset(v247, 0, sizeof(v247));
    v249 = a4;
    sub_1ACB73B30((_QWORD *)&v241 + 1, v247);
    v48 = sub_1ACC10E6C((uint64_t)a1, 0, (uint64_t)(a4 + 1), v43, v44, v45, v46, v47);
    if (!v48)
      goto LABEL_28;
    v27 = (_QWORD *)v48;
    if (v30 == 1 && *(_QWORD *)(*(_QWORD *)(v14 + 32) + 56) != *(_QWORD *)(v48 + 96))
    {
      sub_1ACBCB308((uint64_t)a1, "cannot create a TEMP index on non-TEMP table \"%s\"", a3, (uint64_t)a4, a5, a6, a7, a8, *(_QWORD *)v48);
LABEL_95:
      v26 = 0;
      goto LABEL_96;
    }
    if ((*(_BYTE *)(v48 + 48) & 0x80) != 0)
    {
      v33 = *(_QWORD *)(v48 + 16);
      for (i = v239; v33; v33 = *(_QWORD *)(v33 + 40))
      {
        if ((*(_WORD *)(v33 + 99) & 3) == 2)
          break;
      }
    }
    else
    {
      v33 = 0;
      i = v239;
    }
  }
  else
  {
    v27 = a1[43];
    if (!v27)
    {
LABEL_28:
      v26 = 0;
      goto LABEL_29;
    }
    v238 = a11;
    v28 = v27[12];
    if (v28)
    {
      v29 = (uint64_t *)(*(_QWORD *)(v14 + 32) + 24);
      v30 = -1;
      do
      {
        v31 = *v29;
        v29 += 4;
        ++v30;
      }
      while (v31 != v28);
      i = 0;
      v33 = 0;
    }
    else
    {
      i = 0;
      v33 = 0;
      v30 = -32768;
    }
  }
  v49 = (char *)*v27;
  if (*v27)
  {
    v50 = *v49;
    if (!*v49)
    {
      v59 = 0;
      v58 = "sqlite_";
      goto LABEL_86;
    }
    if ((v50 & 0xFFFFFFDF) == 0x53)
    {
      v51 = v49[1];
      if (!v49[1])
      {
        v59 = 0;
        v58 = "qlite_";
        goto LABEL_86;
      }
      if ((v51 & 0xFFFFFFDF) == 0x51)
      {
        v52 = v49[2];
        if (!v49[2])
        {
          v59 = 0;
          v58 = "lite_";
          goto LABEL_86;
        }
        if ((v52 & 0xFFFFFFDF) == 0x4C)
        {
          v53 = v49[3];
          if (!v49[3])
          {
            v59 = 0;
            v58 = "ite_";
            goto LABEL_86;
          }
          if ((v53 & 0xFFFFFFDF) == 0x49)
          {
            v54 = v49[4];
            if (!v49[4])
            {
              v59 = 0;
              v58 = "te_";
              goto LABEL_86;
            }
            if ((v54 & 0xFFFFFFDF) == 0x54)
            {
              v55 = v49[5];
              if (!v49[5])
              {
                v59 = 0;
                v58 = "e_";
                goto LABEL_86;
              }
              if ((v55 & 0xFFFFFFDF) == 0x45)
              {
                v56 = v49[6];
                if (!v49[6])
                {
                  v59 = 0;
                  v58 = "_";
LABEL_86:
                  if (v59 != byte_1ACCB6333[*v58])
                    goto LABEL_90;
                  goto LABEL_87;
                }
                if ((_DWORD)v56 == 95)
                {
LABEL_87:
                  if (a4 && !*(_BYTE *)(v14 + 197))
                  {
                    sub_1ACBCB308((uint64_t)a1, "table %s may not be indexed", a3, (uint64_t)a4, a5, a6, a7, a8, *v27);
                    goto LABEL_95;
                  }
                  goto LABEL_90;
                }
                v57 = &byte_1ACCB6333[v56];
                v58 = "_";
              }
              else
              {
                v57 = &byte_1ACCB6333[v55];
                v58 = "e_";
              }
            }
            else
            {
              v57 = &byte_1ACCB6333[v54];
              v58 = "te_";
            }
          }
          else
          {
            v57 = &byte_1ACCB6333[v53];
            v58 = "ite_";
          }
        }
        else
        {
          v57 = &byte_1ACCB6333[v52];
          v58 = "lite_";
        }
      }
      else
      {
        v57 = &byte_1ACCB6333[v51];
        v58 = "qlite_";
      }
    }
    else
    {
      v57 = &byte_1ACCB6333[v50];
      v58 = "sqlite_";
    }
    v59 = *v57;
    goto LABEL_86;
  }
LABEL_90:
  v60 = *((unsigned __int8 *)v27 + 63);
  if (v60 == 1)
  {
    v61 = "virtual tables may not be indexed";
    goto LABEL_94;
  }
  if (v60 == 2)
  {
    v61 = "views may not be indexed";
LABEL_94:
    sub_1ACBCB308((uint64_t)a1, v61, a3, (uint64_t)a4, a5, a6, a7, a8, v226);
    goto LABEL_95;
  }
  v237 = v30;
  v230 = *(_QWORD *)(v14 + 32);
  v233 = (unsigned __int8 **)(v230 + 32 * v30);
  if (i)
  {
    v26 = sub_1ACC03858(v14, i);
    if (!v26 || sub_1ACC0D9D8(a1, v26, "index", (char *)*v27, v67, v68, v69, v70))
      goto LABEL_96;
    if (*((unsigned __int8 *)a1 + 302) > 1u)
      goto LABEL_128;
    if (!*(_BYTE *)(v14 + 197) && sub_1ACBD1B0C(v14, v26, *v233))
    {
      sub_1ACBCB308((uint64_t)a1, "there is already a table named %s", v93, v94, v95, v96, v97, v98, (char)v26);
      goto LABEL_96;
    }
    if (sub_1ACBFCA9C(v14, (unsigned __int8 *)v26, *v233))
    {
      if (a10)
      {
        sub_1ACB7A4DC((uint64_t)a1, v237);
        sub_1ACC0DD18((uint64_t *)a1, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        sub_1ACBCB308((uint64_t)a1, "index %s already exists", v71, v72, v73, v74, v75, v76, (char)v26);
      }
      goto LABEL_96;
    }
  }
  else
  {
    v84 = v27[2];
    if (v84)
    {
      v85 = 1;
      do
      {
        ++v85;
        v84 = *(_QWORD *)(v84 + 40);
      }
      while (v84);
    }
    v86 = (char *)sub_1ACB6DDD0(v14, "sqlite_autoindex_%s_%d", a3, (uint64_t)a4, a5, a6, a7, a8, (char)v49);
    v26 = v86;
    if (!v86)
      goto LABEL_96;
    if (!*((_BYTE *)a1 + 302))
    {
LABEL_120:
      v87 = *v233;
      if ((_DWORD)v237 == 1)
        v88 = "sqlite_temp_master";
      else
        v88 = "sqlite_master";
      v234 = *v233;
      if (sub_1ACC0D950((uint64_t)a1, 18, (uint64_t)v88, 0, (uint64_t)v87))
        goto LABEL_96;
      v89 = (_DWORD)v237 == 1 ? 3 : 1;
      if (sub_1ACC0D950((uint64_t)a1, v89, (uint64_t)v26, *v27, (uint64_t)v234))
        goto LABEL_96;
      goto LABEL_128;
    }
    ++v86[7];
  }
  if (*((unsigned __int8 *)a1 + 302) <= 1u)
    goto LABEL_120;
LABEL_128:
  if (v12)
  {
    if (*(_DWORD *)v12 > *((_DWORD *)*a1 + 36))
      sub_1ACBCB308((uint64_t)a1, "too many columns in %s", v71, v72, v73, v74, v75, v76, (char)"index");
    if (*((_DWORD *)a1 + 12))
      goto LABEL_96;
  }
  else
  {
    v247[0] = 0uLL;
    v90 = v27[1] + 16 * *((__int16 *)v27 + 27);
    *(_WORD *)(v90 - 2) |= 8u;
    v91 = *(const char **)(v90 - 16);
    *(_QWORD *)&v247[0] = v91;
    if (v91)
      v92 = strlen(v91) & 0x3FFFFFFF;
    else
      v92 = 0;
    DWORD2(v247[0]) = v92;
    v99 = (unsigned __int8 *)sub_1ACB6DDF8(v14, 59, (uint64_t)v247, 0);
    v100 = sub_1ACC2D490(*a1, v99);
    v12 = v100;
    if (!v100)
      goto LABEL_96;
    v101 = a9;
    if (a9 == -1)
      v101 = 0;
    LOBYTE(v100[3 * *(int *)v100]) = v101;
  }
  v227 = a7;
  v228 = v16;
  v102 = *(unsigned int *)v12;
  v103 = 0;
  if ((int)v102 >= 1)
  {
    v104 = v12 + 1;
    do
    {
      if (*(_BYTE *)*v104 == 113)
      {
        v107 = *(const char **)(*v104 + 8);
        if (v107)
        {
          v235 = v103;
          v105 = strlen(v107);
          v103 = v235;
          v106 = v105 & 0x3FFFFFFF;
        }
        else
        {
          v106 = 0;
        }
        v103 += v106 + 1;
      }
      v104 += 3;
      --v102;
    }
    while (v102);
  }
  v108 = v103;
  v109 = strlen(v26) & 0x3FFFFFFF;
  if (v33)
    v110 = *(_WORD *)(v33 + 94);
  else
    v110 = 1;
  v111 = (v109 + 1);
  v112 = sub_1ACC12EAC(v14, (__int16)(v110 + *(_DWORD *)v12), (int)v111 + v108, &__dst);
  if (*(_BYTE *)(v14 + 103))
    goto LABEL_154;
  v113 = (char *)__dst;
  *(_QWORD *)v112 = __dst;
  __dst = &v113[v111];
  memcpy(v113, v26, v111);
  *(_QWORD *)(v112 + 24) = v27;
  *(_BYTE *)(v112 + 98) = v228;
  *(_WORD *)(v112 + 99) = *(_WORD *)(v112 + 99) & 0xFFF4 | (8 * (v228 != 0)) | v238 & 3;
  *(_QWORD *)(v112 + 48) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 32 * v237 + 24);
  *(_WORD *)(v112 + 94) = *(_DWORD *)v12;
  if (v11)
  {
    sub_1ACC0E9C0((uint64_t)a1, v27, 2, (uint64_t)v11, 0, v114, v115, v116);
    *(_QWORD *)(v112 + 72) = v11;
  }
  v117 = *(unsigned __int8 *)(*(_QWORD *)(v230 + 32 * v237 + 24) + 112);
  v231 = v12;
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    v231 = 0;
    *(_QWORD *)(v112 + 80) = v12;
  }
  v236 = v112;
  if (!*(_WORD *)(v112 + 94))
  {
    v146 = 0;
    goto LABEL_207;
  }
  v118 = (unsigned __int8 **)(v12 + 1);
  v119 = 0;
  v229 = v117;
  do
  {
    v123 = *v118;
    v124 = **v118;
    v125 = *v118;
    if (v124 == 117 || v124 == 113 && (v125 = (unsigned __int8 *)*((_QWORD *)v123 + 2), *v125 == 117))
      *v125 = 59;
    sub_1ACC0E9C0((uint64_t)a1, v27, 32, (uint64_t)v123, 0, v114, v115, v116);
    if (*((_DWORD *)a1 + 12))
    {
      v11 = 0;
      v12 = v231;
      goto LABEL_155;
    }
    for (j = *v118; j; j = (unsigned __int8 *)*((_QWORD *)j + 2))
    {
      if ((j[5] & 0x20) == 0)
        break;
    }
    if (*j != 167)
    {
      if (v27 == a1[43])
      {
        sub_1ACBCB308((uint64_t)a1, "expressions prohibited in PRIMARY KEY and UNIQUE constraints", v126, v127, v128, v114, v115, v116, v226);
        v11 = 0;
        v12 = v231;
        goto LABEL_154;
      }
      if (!*(_QWORD *)(v112 + 80))
      {
        *(_QWORD *)(v112 + 80) = v231;
        v231 = 0;
      }
      *(_WORD *)(*(_QWORD *)(v112 + 8) + 2 * v119) = -2;
      *(_WORD *)(v112 + 99) = *(_WORD *)(v112 + 99) & 0xF7F7 | 0x800;
      v132 = *v118;
      if (**v118 != 113)
      {
LABEL_190:
        v133 = v118;
        v135 = v119;
        v141 = 0;
        goto LABEL_193;
      }
LABEL_186:
      v133 = v118;
      v134 = (const char *)*((_QWORD *)v132 + 1);
      v135 = v119;
      if (v134)
      {
        v136 = (const char *)*((_QWORD *)v132 + 1);
        v137 = strlen(v136);
        v134 = v136;
        v138 = v137 & 0x3FFFFFFF;
      }
      else
      {
        v138 = 0;
      }
      v142 = v138 + 1;
      v141 = (char *)__dst;
      memcpy(__dst, v134, v138 + 1);
      __dst = &v141[v142];
      v117 = v229;
      goto LABEL_193;
    }
    v130 = *((unsigned int *)j + 12);
    if ((v130 & 0x80000000) != 0)
    {
      LODWORD(v130) = *((__int16 *)v27 + 26);
    }
    else
    {
      v131 = v27[1];
      if ((*(_BYTE *)(v131 + 16 * v130 + 8) & 0xF) == 0)
      {
        *(_WORD *)(v112 + 99) &= ~8u;
        v131 = v27[1];
      }
      if ((*(_WORD *)(v131 + 16 * v130 + 14) & 0x20) != 0)
        *(_WORD *)(v112 + 99) |= 0xC00u;
    }
    *(_WORD *)(*(_QWORD *)(v112 + 8) + 2 * v119) = v130;
    v132 = *v118;
    if (**v118 == 113)
      goto LABEL_186;
    if ((v130 & 0x80000000) != 0)
      goto LABEL_190;
    v139 = v27[1];
    v140 = *(_WORD *)(v139 + 16 * v130 + 14);
    if ((v140 & 0x200) == 0)
      goto LABEL_190;
    v143 = *(_QWORD *)(v139 + 16 * v130) - 1;
    while (*(unsigned __int8 *)++v143)
      ;
    v133 = v118;
    v135 = v119;
    if ((v140 & 4) != 0)
    {
      while (*(unsigned __int8 *)++v143)
        ;
    }
    v141 = (char *)(v143 + 1);
LABEL_193:
    if (!v141)
      v141 = "BINARY";
    if (!*(_BYTE *)(v14 + 197) && !sub_1ACB8B98C((uint64_t *)a1, v141))
    {
      v11 = 0;
      v12 = v231;
      v112 = v236;
      goto LABEL_154;
    }
    *(_QWORD *)(*(_QWORD *)(v236 + 64) + 8 * v135) = v141;
    v120 = v135;
    v121 = v133;
    v112 = v236;
    v122 = *((_BYTE *)v121 + 16);
    if (v117 <= 3)
      v122 = 0;
    *(_BYTE *)(*(_QWORD *)(v236 + 56) + v120) = v122;
    v119 = v120 + 1;
    v118 = v121 + 3;
  }
  while (v119 < *(unsigned __int16 *)(v236 + 94));
  v146 = v119;
LABEL_207:
  v12 = v231;
  if (v33)
  {
    v232 = v146;
    v147 = *(unsigned __int16 *)(v33 + 94);
    if (*(_WORD *)(v33 + 94))
    {
      v148 = 0;
      do
      {
        if (sub_1ACC0F584(v112, *(unsigned __int16 *)(v112 + 94), v33, v148))
        {
          --*(_WORD *)(v112 + 96);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(v112 + 8) + 2 * (int)v232) = *(_WORD *)(*(_QWORD *)(v33 + 8) + 2 * v148);
          *(_QWORD *)(*(_QWORD *)(v112 + 64) + 8 * (int)v232) = *(_QWORD *)(*(_QWORD *)(v33 + 64) + 8 * v148);
          *(_BYTE *)(*(_QWORD *)(v112 + 56) + (int)v232++) = *(_BYTE *)(*(_QWORD *)(v33 + 56) + v148);
          v147 = *(unsigned __int16 *)(v33 + 94);
        }
        ++v148;
      }
      while (v148 < v147);
    }
  }
  else
  {
    *(_WORD *)(*(_QWORD *)(v112 + 8) + 2 * v146) = -1;
    *(_QWORD *)(*(_QWORD *)(v112 + 64) + 8 * v146) = "BINARY";
  }
  sub_1ACBFCD10(v112);
  if (!a1[43])
    sub_1ACC0EB50(v112);
  sub_1ACC0F71C(v112);
  if (a4)
  {
    v156 = *(unsigned __int16 *)(v112 + 96);
    if ((int)v156 >= *((__int16 *)v27 + 27))
    {
      v157 = *(_WORD *)(v112 + 99);
      *(_WORD *)(v112 + 99) = v157 | 0x20;
      v158 = *((__int16 *)v27 + 27);
      if (v158 >= 1)
      {
        v159 = 0;
        while (1)
        {
          if (v159 != *((__int16 *)v27 + 26))
          {
            if (!(_DWORD)v156)
              break;
            v160 = 0;
            while (*(unsigned __int16 *)(*(_QWORD *)(v112 + 8) + 2 * v160) != (unsigned __int16)v159)
            {
              if (v156 == ++v160)
                goto LABEL_229;
            }
            if ((v160 & 0x8000) != 0)
              break;
          }
          if (++v159 == v158)
            goto LABEL_230;
        }
LABEL_229:
        *(_WORD *)(v112 + 99) = v157 & 0xFFDF;
      }
    }
  }
LABEL_230:
  if (v27 != a1[43] || (v170 = v27[2]) == 0)
  {
LABEL_231:
    if (*((unsigned __int8 *)a1 + 302) <= 1u)
    {
      if (*(_BYTE *)(v14 + 197))
      {
        if (a4)
        {
          v161 = *(_DWORD *)(v14 + 192);
          *(_DWORD *)(v112 + 88) = v161;
          v162 = *(_QWORD *)(*(_QWORD *)(v112 + 24) + 16);
          if (v162)
          {
            while (v162 == v112 || *(_DWORD *)(v162 + 88) != v161)
            {
              v162 = *(_QWORD *)(v162 + 40);
              if (!v162)
                goto LABEL_235;
            }
            sub_1ACBCB308((uint64_t)a1, "invalid rootpage", v150, v151, v152, v153, v154, v155, v226);
            v11 = 0;
            *((_DWORD *)a1 + 6) = sub_1ACBEB08C(132008);
            goto LABEL_154;
          }
        }
LABEL_235:
        if (sub_1ACB57390(*(_QWORD *)(v112 + 48) + 32, *(unsigned __int8 **)v112, v112))
        {
          sub_1ACBC741C(v14, v163, v164, v165, v166, v167, v168, v169);
          goto LABEL_266;
        }
        *(_DWORD *)(v14 + 44) |= 1u;
      }
      else
      {
        if (!a4 && (v27[6] & 0x80) != 0)
          goto LABEL_291;
        v179 = (*((_DWORD *)a1 + 14) + 1);
        *((_DWORD *)a1 + 14) = v179;
        v180 = sub_1ACBA8698((uint64_t *)a1, v149, v150, v151, v152, v153, v154, v155);
        if (!v180)
        {
          v11 = 0;
          v112 = v236;
          goto LABEL_154;
        }
        v181 = v180;
        sub_1ACC0DDF0((uint64_t)a1, 1, v237);
        *(_DWORD *)(v236 + 88) = sub_1ACC08CD4(v181, 184, v182, v183, v184, v185, v186, v187);
        sub_1ACB683F4(v181, 147, v237, v179, 2, v188, v189, v190);
        if (v227)
        {
          v197 = " UNIQUE";
          if (!v228)
            v197 = &byte_1ACCBEAEE;
          v198 = sub_1ACB6DDD0(v14, "CREATE%s INDEX %.*s", v191, v192, v193, v194, v195, v196, (char)v197);
        }
        else
        {
          v198 = 0;
        }
        sub_1ACBB60F8((uint64_t *)a1, "INSERT INTO %Q.sqlite_master VALUES('index',%Q,%Q,#%d,%Q);",
          v191,
          v192,
          v193,
          v194,
          v195,
          v196,
          *(_QWORD *)(*(_QWORD *)(v14 + 32) + 32 * v237));
        if (v198)
          sub_1ACBE0F9C((_QWORD *)v14, v198);
        if (a4)
        {
          sub_1ACC12F74((uint64_t)a1, v236, v179, v199, v200, v201, v202, v203);
          sub_1ACC0F410((uint64_t *)a1, v237, v204, v205, v206, v207, v208, v209);
          v216 = sub_1ACB6DDD0(v14, "name='%q' AND type='index'", v210, v211, v212, v213, v214, v215, *(_QWORD *)v236);
          sub_1ACC0F480(v181, v237, (uint64_t)v216, 0, v217, v218, v219, v220);
          sub_1ACBFF554(v181, 166, 0, 1, v221, v222, v223, v224);
        }
        if (*(_BYTE *)(*(_QWORD *)v181 + 103))
          v225 = &byte_1EECAD280;
        else
          v225 = (char *)(*(_QWORD *)(v181 + 136) + 40 * *(int *)(v236 + 88));
        *((_DWORD *)v225 + 2) = *(_DWORD *)(v181 + 144);
      }
      v112 = v236;
    }
    if (a4 && !*(_BYTE *)(v14 + 197))
    {
      if (*((unsigned __int8 *)a1 + 302) >= 2u)
      {
        v11 = 0;
        a1[44] = (_QWORD *)v112;
        goto LABEL_96;
      }
      v11 = 0;
LABEL_154:
      if (v112)
        goto LABEL_155;
      goto LABEL_96;
    }
LABEL_291:
    v11 = 0;
    *(_QWORD *)(v112 + 40) = v27[2];
    v27[2] = v112;
    goto LABEL_96;
  }
  v171 = *(unsigned __int16 *)(v112 + 94);
  while (*(unsigned __int16 *)(v170 + 94) != (_DWORD)v171)
  {
LABEL_245:
    v170 = *(_QWORD *)(v170 + 40);
    if (!v170)
      goto LABEL_231;
  }
  if (!*(_WORD *)(v112 + 94))
  {
    LODWORD(v172) = 0;
LABEL_244:
    if ((_DWORD)v172 == (_DWORD)v171)
      goto LABEL_256;
    goto LABEL_245;
  }
  v172 = 0;
  do
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v170 + 8) + 2 * v172) != *(unsigned __int16 *)(*(_QWORD *)(v112 + 8)
                                                                                        + 2 * v172))
      goto LABEL_244;
    v173 = *(_BYTE **)(*(_QWORD *)(v170 + 64) + 8 * v172);
    for (k = *(unsigned __int8 **)(*(_QWORD *)(v112 + 64) + 8 * v172); ; ++k)
    {
      v175 = *v173;
      v176 = *k;
      if ((_DWORD)v175 == (_DWORD)v176)
        break;
      if (byte_1ACCB6333[v175] != byte_1ACCB6333[v176])
        goto LABEL_244;
LABEL_252:
      ++v173;
    }
    if (*v173)
      goto LABEL_252;
    ++v172;
  }
  while (v172 != v171);
LABEL_256:
  v177 = *(unsigned __int8 *)(v170 + 98);
  v178 = *(unsigned __int8 *)(v112 + 98);
  if (v177 != v178)
  {
    if (v177 != 11 && v178 != 11)
    {
      sub_1ACBCB308((uint64_t)a1, "conflicting ON CONFLICT clauses specified", v150, v151, v152, v153, v154, v155, 0);
      v177 = *(unsigned __int8 *)(v170 + 98);
    }
    if (v177 == 11)
      *(_BYTE *)(v170 + 98) = *(_BYTE *)(v236 + 98);
  }
  if (v238 == 2)
    *(_WORD *)(v170 + 99) = *(_WORD *)(v170 + 99) & 0xFFFC | 2;
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    v11 = 0;
    *(_QWORD *)(v236 + 40) = a1[44];
    a1[44] = (_QWORD *)v236;
    goto LABEL_96;
  }
LABEL_266:
  v11 = 0;
  v112 = v236;
LABEL_155:
  sub_1ACBFD414((_QWORD *)v14, v112);
LABEL_96:
  v64 = v27[2];
  v63 = v27 + 2;
  v62 = v64;
  if (v64)
  {
    if (*(_BYTE *)(v62 + 98) == 5)
    {
LABEL_103:
      while (1)
      {
        v66 = *(_QWORD *)(v62 + 40);
        if (!v66 || *(_BYTE *)(v66 + 98) == 5)
          break;
        *v63 = v66;
        v63 = (_QWORD *)(v66 + 40);
        *(_QWORD *)(v62 + 40) = *(_QWORD *)(v66 + 40);
        *(_QWORD *)(v66 + 40) = v62;
      }
    }
    else
    {
      while (1)
      {
        v65 = v62;
        v62 = *(_QWORD *)(v62 + 40);
        if (!v62)
          break;
        if (*(_BYTE *)(v62 + 98) == 5)
        {
          v63 = (_QWORD *)(v65 + 40);
          goto LABEL_103;
        }
      }
    }
  }
LABEL_29:
  if (v11)
    sub_1ACBF8348((_QWORD *)v14, v11);
  if (v12)
    sub_1ACC010B0((_QWORD *)v14, v12);
  result = sub_1ACB7E8B0((_QWORD *)v14, a4);
  if (v26)
    return sub_1ACBE0F9C((_QWORD *)v14, v26);
  return result;
}

void *sub_1ACB8CB7C(uint64_t a1, char *__s)
{
  size_t v4;
  unint64_t v5;
  void *v6;

  if (!__s)
    return 0;
  v4 = strlen(__s);
  v5 = v4 + 1;
  if (a1)
  {
    v6 = (void *)sub_1ACBE1124(a1, v5);
    if (!v6)
      return v6;
    goto LABEL_7;
  }
  v6 = (void *)sub_1ACB5D828(v4 + 1);
  if (v6)
LABEL_7:
    memcpy(v6, __s, v5);
  return v6;
}

uint64_t sub_1ACB8CBFC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    v3 = result;
    v23 = a2;
    if (a3)
    {
      v4 = (unint64_t *)&v23;
    }
    else
    {
      v24 = a2;
      v5 = *(_QWORD *)(a2 + 56);
      if (v5)
      {
        v6 = (((2 * *(_BYTE *)(a2 + 32)) ^ 2) + *(_BYTE *)(result + 48)) & 3;
        *(_BYTE *)(a2 + 33) = v6;
        v7 = *(unsigned int *)(result + 124);
        if ((int)v7 >= 1)
        {
          v8 = *(uint64_t **)(v5 + 16);
          while (1)
          {
            v9 = *v8;
            v10 = !*v8 || v9 == a2;
            if (!v10 && *(unsigned __int8 *)(v9 + 33) == (_DWORD)v6)
              break;
            ++v8;
            if (!--v7)
              goto LABEL_20;
          }
          v11 = (_QWORD *)(v9 + 40);
          while (1)
          {
            v12 = v11;
            v11 = (_QWORD *)v11[1];
            if (!v11)
              break;
            if (v11[2] != v5)
            {
              *v11 = a2 + 40;
              *(_QWORD *)(a2 + 40) = v12;
              v12[1] = a2 + 40;
              *(_QWORD *)(a2 + 48) = v11;
              goto LABEL_25;
            }
          }
        }
LABEL_20:
        v13 = result + 16 * v6;
        v16 = *(_QWORD *)(v13 + 56);
        v14 = (_QWORD *)(v13 + 56);
        v15 = v16;
        v17 = (_QWORD *)(a2 + 40);
        if (v16)
        {
          *(_QWORD *)(v15 + 8) = v17;
          *v17 = v15;
        }
        else
        {
          *(_QWORD *)(result + 16 * v6 + 64) = v17;
        }
        *v14 = v17;
LABEL_25:
        ++*(_DWORD *)(result + 24);
        v18 = *(_QWORD *)(a2 + 56);
        if (v18)
        {
          v19 = *(_BYTE *)(v18 + 33) - 1;
          *(_BYTE *)(v18 + 33) = v19;
          ++*(_BYTE *)(v18 + 34);
          if (!v19)
          {
            sub_1ACC4DCC0((_QWORD *)result, (uint64_t *)v18);
            v20 = (uint64_t *)(v3 + 136);
            if (*(unsigned __int8 *)(v18 + 33) + *(unsigned __int8 *)(v18 + 34) >= *(_DWORD *)(v3 + 124))
            {
              v22 = *(_QWORD **)(v3 + 144);
              if (v22)
              {
                *v22 = v18;
                *(_QWORD *)(v18 + 8) = v22;
              }
              else
              {
                *v20 = v18;
              }
              v20 = (uint64_t *)(v3 + 144);
            }
            else
            {
              v21 = *v20;
              if (*v20)
              {
                *(_QWORD *)(v21 + 8) = v18;
                *(_QWORD *)v18 = v21;
              }
              else
              {
                *(_QWORD *)(v3 + 144) = v18;
              }
            }
            *v20 = v18;
            *(_BYTE *)(v18 + 32) = 2;
          }
        }
        return sub_1ACC4DA08(v3);
      }
      v4 = (unint64_t *)&v24;
    }
    sub_1ACC4DDE0((int *)result, v4);
    return sub_1ACC4DA08(v3);
  }
  return result;
}

_QWORD *sub_1ACB8CDB0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  unsigned __int8 *v10;
  char v13;
  int v14;
  uint64_t v16;
  uint64_t v18;
  int v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned __int8 *i;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *result;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  const char *v80;
  const char *v81;
  _QWORD *v82;
  void *v83;
  BOOL v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char *v96;
  int v97;
  unsigned int *v98;
  char v99;
  unsigned __int8 *v100;
  char v101;
  int v102;
  unsigned int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  v10 = (unsigned __int8 *)a8;
  v13 = a5;
  v14 = a4;
  v16 = a2;
  v18 = *(_QWORD *)a1;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v19 = *(_DWORD *)(a3 + 8);
  if (a9)
  {
    if (v19)
    {
      v20 = "temporary trigger may not have qualified name";
LABEL_7:
      sub_1ACBCB308((uint64_t)a1, v20, a3, a4, a5, (uint64_t)a6, a7, a8, v99);
      goto LABEL_46;
    }
    if (!a7)
      goto LABEL_46;
    v21 = 1;
  }
  else
  {
    if (v19)
    {
      if (*(_BYTE *)(v18 + 197))
      {
        v20 = "corrupt database";
        goto LABEL_7;
      }
      v21 = sub_1ACC0DF84(v18, a2);
      a2 = a3;
      if (v21 < 0)
      {
        sub_1ACBCB308((uint64_t)a1, "unknown database %T", v22, v23, a5, (uint64_t)a6, a7, a8, v16);
        goto LABEL_46;
      }
    }
    else
    {
      v21 = *(unsigned __int8 *)(v18 + 196);
    }
    v16 = a2;
    if (!a7)
      goto LABEL_46;
  }
  if (!*(_BYTE *)(v18 + 103))
  {
    v102 = v21;
    if (v21 != 1 && *(_BYTE *)(v18 + 197))
    {
      v24 = *(_QWORD **)(a7 + 16);
      if (v24)
        sub_1ACBE0F9C((_QWORD *)v18, v24);
      *(_QWORD *)(a7 + 16) = 0;
    }
    v25 = *(_QWORD *)(a7 + 8);
    v101 = v13;
    if (v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v27 = (uint64_t *)(v26 + 24);
      v28 = 0xFFFFFFFF00000000;
      do
      {
        v29 = *v27;
        v27 += 4;
        v28 += 0x100000000;
      }
      while (v29 != v25);
      v30 = (_BYTE **)(v26 + (v28 >> 27));
    }
    else
    {
      v30 = (_BYTE **)(a7 + 16);
    }
    v37 = sub_1ACB8D488((uint64_t)a1, 0, *(char **)(a7 + 24), *v30, a5, (uint64_t)a6, a7, a8);
    v38 = *(_QWORD *)(a7 + 40);
    if (v38)
    {
      v39 = *(_QWORD **)a1;
      if (*(_QWORD *)(*(_QWORD *)a1 + 816) || (v40 = *(_DWORD *)(v38 + 44) - 1, (*(_DWORD *)(v38 + 44) = v40) == 0))
        sub_1ACC00BE8(v39, (_QWORD *)v38);
    }
    *(_QWORD *)(a7 + 40) = v37;
    *(_WORD *)(a7 + 69) |= 0x200u;
    v41 = v102;
    if (v37)
    {
      ++*(_DWORD *)(v37 + 44);
      if ((*(_WORD *)(a7 + 69) & 2) != 0)
      {
        v42 = *(_QWORD *)(v37 + 16);
        if (!v42)
          goto LABEL_39;
        while (1)
        {
          v43 = *(_BYTE **)v42;
          for (i = *(unsigned __int8 **)(a7 + 96); ; ++i)
          {
            v45 = *v43;
            v46 = *i;
            if ((_DWORD)v45 != (_DWORD)v46)
              break;
            if (!*v43)
            {
              *(_QWORD *)(a7 + 104) = v42;
              goto LABEL_40;
            }
LABEL_34:
            ++v43;
          }
          if (byte_1ACCB6333[v45] == byte_1ACCB6333[v46])
            goto LABEL_34;
          v42 = *(_QWORD *)(v42 + 40);
          if (!v42)
          {
LABEL_39:
            sub_1ACBCB308((uint64_t)a1, "no such index: %s", v31, v32, v33, v34, v35, v36, *(_QWORD *)(a7 + 96));
            v41 = v102;
            v37 = 0;
            a1[29] = 1;
            break;
          }
        }
      }
    }
LABEL_40:
    if (!*(_BYTE *)(v18 + 197)
      && !*(_DWORD *)(a3 + 8)
      && v37
      && *(_QWORD *)(v37 + 96) == *(_QWORD *)(*(_QWORD *)(v18 + 32) + 56))
    {
      v41 = 1;
    }
    v47 = v101;
    if (!*(_BYTE *)(v18 + 103))
    {
      v54 = *(_QWORD *)a1;
      *(_QWORD *)&v104 = a1;
      v55 = (_QWORD *)(*(_QWORD *)(v54 + 32) + 32 * v41);
      *((_QWORD *)&v108 + 1) = *v55;
      v56 = v55[3];
      *(_QWORD *)&v109 = "trigger";
      *((_QWORD *)&v109 + 1) = v16;
      LOBYTE(v108) = v41 == 1;
      *((_QWORD *)&v104 + 1) = a1;
      *(_QWORD *)&v105 = sub_1ACC13854;
      *((_QWORD *)&v105 + 1) = sub_1ACC138D0;
      *(_QWORD *)&v106 = nullsub_8;
      DWORD2(v106) = 0;
      WORD6(v106) = 0;
      *(_QWORD *)&v107 = &v104;
      *((_QWORD *)&v107 + 1) = v56;
      if (!a7)
        goto LABEL_60;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v111 = 0;
      v113 = 0u;
      memset(v110, 0, sizeof(v110));
      v112 = a7;
      v57 = v41;
      v58 = sub_1ACB73B30((_QWORD *)&v104 + 1, v110);
      v41 = v57;
      if (!v58)
      {
LABEL_60:
        v103 = v41;
        v59 = sub_1ACC12D54(a1, a7, v31, v32, v33, v34, v35, v36);
        if (!v59)
        {
LABEL_63:
          v67 = 0;
LABEL_64:
          if (*(_BYTE *)(v18 + 196) == 1)
            *(_BYTE *)(v18 + 198) |= 1u;
          if (!v67)
            goto LABEL_46;
LABEL_71:
          sub_1ACBE0F9C((_QWORD *)v18, v67);
          goto LABEL_46;
        }
        v66 = v59;
        if (*(_BYTE *)(v59 + 63) == 1)
        {
          sub_1ACBCB308((uint64_t)a1, "cannot create triggers on virtual tables", v60, v61, v62, v63, v64, v65, v99);
          goto LABEL_63;
        }
        v68 = sub_1ACC03858(v18, v16);
        if (!v68)
          goto LABEL_46;
        v100 = (unsigned __int8 *)v68;
        if (sub_1ACC0D9D8(a1, v68, "trigger", *(char **)v66, v69, v70, v71, v72))
        {
LABEL_70:
          v67 = v100;
          goto LABEL_71;
        }
        if (a1[302] <= 1u
          && sub_1ACBFC8AC(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 32 * v103 + 24) + 56, v100))
        {
          if (a10)
          {
            sub_1ACB7A4DC((uint64_t)a1, v103);
            goto LABEL_70;
          }
          v99 = v16;
          v81 = "trigger %T already exists";
        }
        else
        {
          if (sqlite3_strnicmp(*(const char **)v66, "sqlite_", 7))
          {
            v79 = *(unsigned __int8 *)(v66 + 63);
            if (v14 == 65 || v79 != 2)
            {
              if (v14 != 65 || v79 == 2)
              {
                if (a1[302] > 1u)
                  goto LABEL_130;
                v87 = *(_QWORD *)(v66 + 96);
                v88 = *(_QWORD *)(v18 + 32);
                if (v87)
                {
                  v89 = (uint64_t *)(v88 + 24);
                  v90 = -1;
                  do
                  {
                    v91 = *v89;
                    v89 += 4;
                    ++v90;
                  }
                  while (v91 != v87);
                }
                else
                {
                  v90 = -32768;
                }
                v92 = *(_QWORD *)(v88 + 32 * v90);
                v93 = v92;
                if (a9)
                  v93 = *(_QWORD *)(v88 + 32);
                v94 = v90 != 1 && a9 == 0;
                v95 = v94 ? 7 : 5;
                if (!sub_1ACC0D950((uint64_t)a1, v95, (uint64_t)v100, *(_QWORD *)v66, v93))
                {
                  v96 = v90 == 1 ? "sqlite_temp_master" : "sqlite_master";
                  v97 = sub_1ACC0D950((uint64_t)a1, 18, (uint64_t)v96, 0, v92);
                  v47 = v101;
                  if (!v97)
                  {
LABEL_130:
                    v82 = sub_1ACB5733C(v18, 0x48uLL);
                    if (v82)
                    {
                      v53 = (uint64_t)v82;
                      *v82 = v100;
                      v83 = sub_1ACB8CB7C(v18, *(char **)(a7 + 24));
                      v84 = v14 == 33 || v14 == 65;
                      *(_QWORD *)(v53 + 8) = v83;
                      *(_QWORD *)(v53 + 40) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 32 * v103 + 24);
                      *(_QWORD *)(v53 + 48) = *(_QWORD *)(v66 + 96);
                      *(_BYTE *)(v53 + 16) = v47;
                      if (v84)
                        v85 = 1;
                      else
                        v85 = 2;
                      *(_BYTE *)(v53 + 17) = v85;
                      if (a1[302] < 2u)
                      {
                        if (v10)
                          v98 = sub_1ACB8B290(v18, v10, 1, 0);
                        else
                          v98 = 0;
                      }
                      else
                      {
                        v86 = (_QWORD *)*((_QWORD *)a1 + 51);
                        if (v86)
                        {
                          while (*v86 != *(_QWORD *)(a7 + 24))
                          {
                            v86 = (_QWORD *)v86[3];
                            if (!v86)
                              goto LABEL_125;
                          }
                          *v86 = v83;
                        }
LABEL_125:
                        v98 = (unsigned int *)v10;
                        v10 = 0;
                      }
                      *(_QWORD *)(v53 + 24) = v98;
                      *(_QWORD *)(v53 + 32) = a6;
                      *((_QWORD *)a1 + 45) = v53;
                      result = sub_1ACB7E8B0((_QWORD *)v18, (_QWORD *)a7);
                      if (v10)
                        goto LABEL_54;
                      goto LABEL_55;
                    }
                  }
                }
                v67 = v100;
                goto LABEL_71;
              }
              sub_1ACBCB308((uint64_t)a1, "cannot create INSTEAD OF trigger on table: %S", v73, v74, v75, v76, v77, v78, a7 + 8);
            }
            else
            {
              v80 = "AFTER";
              if (v14 == 33)
                v80 = "BEFORE";
              sub_1ACBCB308((uint64_t)a1, "cannot create %s trigger on view: %S", v73, v74, v75, v76, v77, v78, (char)v80);
            }
            v67 = v100;
            goto LABEL_64;
          }
          v81 = "cannot create trigger on system table";
        }
        sub_1ACBCB308((uint64_t)a1, v81, v73, v74, v75, v76, v77, v78, v99);
        goto LABEL_70;
      }
    }
  }
LABEL_46:
  result = sub_1ACB7E8B0((_QWORD *)v18, (_QWORD *)a7);
  if (a6)
  {
    v49 = *(_DWORD *)a6;
    if (*(int *)a6 >= 1)
    {
      v50 = 0;
      v51 = 1;
      do
      {
        v52 = (_QWORD *)a6[v51];
        if (v52)
        {
          sub_1ACBE0F9C((_QWORD *)v18, v52);
          v49 = *(_DWORD *)a6;
        }
        ++v50;
        v51 += 2;
      }
      while (v50 < v49);
    }
    result = sub_1ACBF0674((_QWORD *)v18, a6);
  }
  v53 = 0;
  if (v10)
LABEL_54:
    result = sub_1ACBF8348((_QWORD *)v18, v10);
LABEL_55:
  if (!*((_QWORD *)a1 + 45))
    return sub_1ACB689B8((_QWORD *)v18, v53);
  return result;
}

uint64_t sub_1ACB8D488(uint64_t a1, char a2, char *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  int v27;
  uint64_t *v28;
  _DWORD *v29;
  int v30;
  _BYTE *v31;
  char *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  int v49;
  uint64_t v50;
  const void *v51;
  size_t v52;
  char *v53;
  const char *v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  size_t __n;
  _QWORD *v91;

  v12 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 44) & 0x10) == 0 && !*(_BYTE *)(v12 + 197))
  {
    v21 = sub_1ACB6541C(*(_QWORD *)a1, (char **)(a1 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v21)
    {
      v22 = v21;
      result = 0;
      *(_DWORD *)(a1 + 24) = v22;
      ++*(_DWORD *)(a1 + 48);
      return result;
    }
    if (*(_BYTE *)(v12 + 111))
      *(_DWORD *)(v12 + 44) |= 0x10u;
  }
  result = sub_1ACBD1B0C(v12, a3, a4);
  if (result)
  {
    if (*(_BYTE *)(result + 63) != 1 || (*(_BYTE *)(a1 + 37) & 4) == 0)
      return result;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 37) & 4) != 0 || *(_BYTE *)(v12 + 197))
  {
LABEL_9:
    if ((a2 & 2) != 0)
      return 0;
    *(_BYTE *)(a1 + 29) = 1;
LABEL_11:
    v20 = "no such view";
    if ((a2 & 1) == 0)
      v20 = "no such table";
    if (a4)
      sub_1ACBCB308(a1, "%s: %s.%s", v14, v15, v16, v17, v18, v19, (char)v20);
    else
      sub_1ACBCB308(a1, "%s: %s", v14, v15, v16, v17, v18, v19, (char)v20);
    return 0;
  }
  v23 = *(_QWORD *)(v12 + 584);
  if (v23)
  {
    v24 = *a3;
    if (*a3)
    {
      v25 = 0;
      v26 = a3 + 1;
      do
      {
        v25 = -1640531535 * (v25 + byte_1ACCB6333[v24]);
        v27 = *v26++;
        v24 = v27;
      }
      while (v27);
    }
    else
    {
      v25 = 0;
    }
    v29 = (_DWORD *)(v23 + 16 * (v25 % *(_DWORD *)(v12 + 568)));
    v28 = (uint64_t *)(v29 + 2);
  }
  else
  {
    v28 = (uint64_t *)(v12 + 576);
    v29 = (_DWORD *)(v12 + 572);
  }
  v30 = *v29;
  if (v30)
  {
LABEL_31:
    v28 = (uint64_t *)*v28;
    v31 = (_BYTE *)v28[3];
    for (i = a3; ; ++i)
    {
      v33 = *v31;
      v34 = *i;
      if ((_DWORD)v33 == (_DWORD)v34)
      {
        if (!*v31)
          goto LABEL_40;
      }
      else if (byte_1ACCB6333[v33] != byte_1ACCB6333[v34])
      {
        if (!--v30)
        {
          v28 = &qword_1EECAD260;
          goto LABEL_40;
        }
        goto LABEL_31;
      }
      ++v31;
    }
  }
  v28 = &qword_1EECAD260;
LABEL_40:
  v35 = v28[2];
  if (!v35)
  {
    if (!a3)
      goto LABEL_9;
    v40 = *a3;
    if (!*a3)
    {
      v49 = 0;
      v48 = "pragma_";
      goto LABEL_98;
    }
    if ((v40 & 0xFFFFFFDF) == 0x50)
    {
      v41 = a3[1];
      if (!a3[1])
      {
        v49 = 0;
        v48 = "ragma_";
        goto LABEL_98;
      }
      if ((v41 & 0xFFFFFFDF) == 0x52)
      {
        v42 = a3[2];
        if (!a3[2])
        {
          v49 = 0;
          v48 = "agma_";
          goto LABEL_98;
        }
        if ((v42 & 0xFFFFFFDF) == 0x41)
        {
          v43 = a3[3];
          if (!a3[3])
          {
            v49 = 0;
            v48 = "gma_";
            goto LABEL_98;
          }
          if ((v43 & 0xFFFFFFDF) == 0x47)
          {
            v44 = a3[4];
            if (!a3[4])
            {
              v49 = 0;
              v48 = "ma_";
              goto LABEL_98;
            }
            if ((v44 & 0xFFFFFFDF) == 0x4D)
            {
              v45 = a3[5];
              if (!a3[5])
              {
                v49 = 0;
                v48 = "a_";
                goto LABEL_98;
              }
              if ((v45 & 0xFFFFFFDF) == 0x41)
              {
                v46 = a3[6];
                if (!a3[6])
                {
                  v49 = 0;
                  v48 = "_";
LABEL_98:
                  if (v49 != byte_1ACCB6333[*v48])
                    goto LABEL_9;
                  goto LABEL_99;
                }
                if ((_DWORD)v46 == 95)
                {
LABEL_99:
                  v35 = sub_1ACBFFBF4(v12, a3);
                  if (!v35)
                    goto LABEL_9;
                  goto LABEL_41;
                }
                v47 = &byte_1ACCB6333[v46];
                v48 = "_";
              }
              else
              {
                v47 = &byte_1ACCB6333[v45];
                v48 = "a_";
              }
            }
            else
            {
              v47 = &byte_1ACCB6333[v44];
              v48 = "ma_";
            }
          }
          else
          {
            v47 = &byte_1ACCB6333[v43];
            v48 = "gma_";
          }
        }
        else
        {
          v47 = &byte_1ACCB6333[v42];
          v48 = "agma_";
        }
      }
      else
      {
        v47 = &byte_1ACCB6333[v41];
        v48 = "ragma_";
      }
    }
    else
    {
      v47 = &byte_1ACCB6333[v40];
      v48 = "pragma_";
    }
    v49 = *v47;
    goto LABEL_98;
  }
LABEL_41:
  v36 = *(_QWORD *)v35;
  v91 = 0;
  result = *(_QWORD *)(v35 + 40);
  if (result)
    return result;
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD *)(v36 + 8);
  if (v38 && v38 != *(_QWORD *)(v36 + 16))
    goto LABEL_9;
  v39 = v37 ? sub_1ACBE1124(*(_QWORD *)a1, 0x68uLL) : sub_1ACB5D828(104);
  v50 = v39;
  if (!v39)
    goto LABEL_9;
  *(_QWORD *)(v39 + 96) = 0;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)(v39 + 16) = 0u;
  v51 = *(const void **)(v35 + 8);
  if (!v51
    || ((v52 = strlen(*(const char **)(v35 + 8)), __n = v52 + 1, !v37)
      ? (v53 = (char *)sub_1ACB5D828(v52 + 1))
      : (v53 = (char *)sub_1ACBE1124((uint64_t)v37, v52 + 1)),
        (v54 = v53) == 0))
  {
    *(_QWORD *)v50 = 0;
    sub_1ACBE0F9C(v37, (_QWORD *)v50);
    goto LABEL_9;
  }
  memcpy(v53, v51, __n);
  *(_QWORD *)v50 = v54;
  *(_QWORD *)(v35 + 40) = v50;
  *(_BYTE *)(v50 + 63) = 1;
  *(_QWORD *)(v50 + 96) = *(_QWORD *)(v37[4] + 24);
  *(_WORD *)(v50 + 52) = -1;
  v55 = *(_DWORD *)(v50 + 48) | 0x8000;
  *(_DWORD *)(v50 + 44) = 1;
  *(_DWORD *)(v50 + 48) = v55;
  v56 = strlen(v54) + 1;
  v57 = (_QWORD *)sub_1ACBE1124((uint64_t)v37, v56);
  v63 = v57;
  if (v57)
    memcpy(v57, v54, v56);
  sub_1ACC009EC(a1, v50, v63, v58, v59, v60, v61, v62);
  sub_1ACC009EC(a1, v50, 0, v64, v65, v66, v67, v68);
  v74 = *(const char **)v50;
  if (*(_QWORD *)v50)
  {
    v75 = strlen(*(const char **)v50) + 1;
    v76 = (_QWORD *)sub_1ACBE1124((uint64_t)v37, v75);
    v77 = v76;
    if (v76)
      memcpy(v76, v74, v75);
  }
  else
  {
    v77 = 0;
  }
  sub_1ACC009EC(a1, v50, v77, v69, v70, v71, v72, v73);
  if (!sub_1ACBFEC54((uint64_t)v37, v50, v35, *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(v36 + 16), (void **)&v91, v78, v79, v80))return *(_QWORD *)(v35 + 40);
  v87 = v91;
  sub_1ACBCB308(a1, "%s", v81, v82, v83, v84, v85, v86, (char)v91);
  if (v87)
    sub_1ACBE0F9C(v37, v87);
  v88 = *(_QWORD *)(v35 + 40);
  if (!v88)
    return 0;
  *(_DWORD *)(v88 + 48) |= 0x4000u;
  if (v37[102] || (v89 = *(_DWORD *)(v88 + 44) - 1, (*(_DWORD *)(v88 + 44) = v89) == 0))
    sub_1ACC00BE8(v37, (_QWORD *)v88);
  result = 0;
  *(_QWORD *)(v35 + 40) = 0;
  return result;
}

uint64_t sub_1ACB8DA48(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  unint64_t v12;

  if (!a2)
    return 0;
  v4 = sub_1ACBE1124(a1, (16 * *a2) | 8);
  v5 = v4;
  if (v4)
  {
    *(_DWORD *)v4 = *a2;
    *(_BYTE *)(v4 + 4) = *((_BYTE *)a2 + 4);
    if (*a2 >= 1)
    {
      v6 = 0;
      for (i = 0; i < *a2; ++i)
      {
        v10 = *(const void **)&a2[v6 + 2];
        if (v10)
        {
          v11 = strlen(*(const char **)&a2[v6 + 2]);
          v12 = v11 + 1;
          if (a1)
          {
            v8 = (void *)sub_1ACBE1124(a1, v12);
            if (!v8)
              goto LABEL_6;
LABEL_12:
            memcpy(v8, v10, v12);
            goto LABEL_6;
          }
          v8 = (void *)sub_1ACB5D828(v11 + 1);
          if (v8)
            goto LABEL_12;
        }
        else
        {
          v8 = 0;
        }
LABEL_6:
        v9 = v5 + v6 * 4;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)&a2[v6 + 4];
        v6 += 4;
      }
    }
  }
  return v5;
}

_QWORD *sub_1ACB8DB54(uint64_t a1, char a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  _QWORD *v5;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  int v20;
  int v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  size_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  if (*(_DWORD *)(a1 + 48))
    return 0;
  v12 = *(_QWORD *)a1;
  v13 = *(unsigned int *)(a3 + 8);
  v14 = v13 + 97;
  if (*(_QWORD *)a1)
  {
    v5 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, v13 + 97);
    if (!v5)
      return v5;
  }
  else
  {
    v5 = (_QWORD *)sub_1ACB5D828(v13 + 97);
    if (!v5)
      return v5;
  }
  bzero(v5, v14);
  v15 = v5 + 12;
  memcpy(v5 + 12, *(const void **)a3, *(unsigned int *)(a3 + 8));
  if ((char)byte_1ACCB6548[*((unsigned __int8 *)v5 + 96)] < 0)
  {
    v16 = 0;
    if (*((_BYTE *)v5 + 96) == 91)
      v17 = 93;
    else
      v17 = *((unsigned __int8 *)v5 + 96);
    for (i = 1; ; ++i)
    {
      v19 = i;
      v20 = *((unsigned __int8 *)v15 + i);
      if (v20 == v17)
      {
        ++i;
        LOBYTE(v20) = v17;
        if (*((unsigned __int8 *)v15 + v19 + 1) != v17)
          break;
      }
      *((_BYTE *)v15 + v16++) = v20;
    }
    *((_BYTE *)v15 + v16) = 0;
  }
  v5[3] = v15;
  *(_BYTE *)v5 = a2;
  v21 = a5 - (_DWORD)a4;
  do
  {
    v22 = a4;
    v23 = v21;
    v24 = *a4++;
    --v21;
  }
  while ((byte_1ACCB6548[v24] & 1) != 0);
  v25 = v23;
  v26 = ((uint64_t)v23 << 32) + 0x100000000;
  v27 = v25 - 2;
  do
  {
    v28 = byte_1ACCB6548[a4[v27]];
    v26 -= 0x100000000;
    --v27;
  }
  while ((v28 & 1) != 0);
  v29 = v26 >> 32;
  v30 = (_BYTE *)sub_1ACBE1124(v12, (v26 >> 32) + 1);
  v31 = v30;
  if (v30)
  {
    memcpy(v30, v22, v29);
    v31[v29] = 0;
    v32 = *v31;
    if (*v31)
    {
      v33 = v31 + 1;
      do
      {
        if ((byte_1ACCB6548[v32] & 1) != 0)
          *(v33 - 1) = 32;
        v34 = *v33++;
        v32 = v34;
      }
      while (v34);
    }
  }
  v5[9] = v31;
  v35 = *(unsigned __int8 *)(a1 + 302);
  if (v35 >= 2 && v35 != 3)
  {
    v36 = v5[3];
    if (*(_QWORD *)a1)
    {
      v37 = sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL);
      if (!v37)
        return v5;
    }
    else
    {
      v37 = sub_1ACB5D828(32);
      if (!v37)
        return v5;
    }
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_QWORD *)v37 = v36;
    *(_OWORD *)(v37 + 8) = *(_OWORD *)a3;
    *(_QWORD *)(v37 + 24) = *(_QWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v37;
  }
  return v5;
}

uint64_t sub_1ACB8DD70(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD **)a1;
  v9 = sub_1ACB6DDF8(*(_QWORD *)a1, 172, (uint64_t)a3, 1);
  v16 = v9;
  if (v9)
  {
    *(_DWORD *)(v9 + 56) = *a3 - *(_DWORD *)(a1 + 336);
    if (a2 && *(_DWORD *)a2 > *(_DWORD *)(*(_QWORD *)a1 + 160) && !*(_BYTE *)(a1 + 30))
      sub_1ACBCB308(a1, "too many arguments on function %T", v10, v11, v12, v13, v14, v15, (char)a3);
    *(_QWORD *)(v16 + 32) = a2;
    *(_DWORD *)(v16 + 4) |= 8u;
    sub_1ACC04890((_DWORD *)a1, v16, v10, v11, v12, v13, v14, v15);
    if (a4 == 1)
      *(_DWORD *)(v16 + 4) |= 4u;
  }
  else if (a2)
  {
    sub_1ACC010B0(v8, a2);
  }
  return v16;
}

_QWORD *sub_1ACB8DE58(_QWORD *result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  for (; result; result = (_QWORD *)result[10])
  {
    v2 = result[6];
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 40);
      if (v3 > *a2)
        *a2 = v3;
    }
    v4 = result[8];
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 40);
      if (v5 > *a2)
        *a2 = v5;
    }
    v6 = result[12];
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 40);
      if (v7 > *a2)
        *a2 = v7;
    }
    v8 = (int *)result[4];
    if (v8)
    {
      v9 = *v8;
      if (*v8 >= 1)
      {
        v10 = 0;
        v11 = 2;
        do
        {
          v12 = *(_QWORD *)&v8[v11];
          if (v12)
          {
            v13 = *(_DWORD *)(v12 + 40);
            if (v13 > *a2)
            {
              *a2 = v13;
              v9 = *v8;
            }
          }
          ++v10;
          v11 += 6;
        }
        while (v10 < v9);
      }
    }
    v14 = (int *)result[7];
    if (v14)
    {
      v15 = *v14;
      if (*v14 >= 1)
      {
        v16 = 0;
        v17 = 2;
        do
        {
          v18 = *(_QWORD *)&v14[v17];
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 40);
            if (v19 > *a2)
            {
              *a2 = v19;
              v15 = *v14;
            }
          }
          ++v16;
          v17 += 6;
        }
        while (v16 < v15);
      }
    }
    v20 = (int *)result[9];
    if (v20)
    {
      v21 = *v20;
      if (*v20 >= 1)
      {
        v22 = 0;
        v23 = 2;
        do
        {
          v24 = *(_QWORD *)&v20[v23];
          if (v24)
          {
            v25 = *(_DWORD *)(v24 + 40);
            if (v25 > *a2)
            {
              *a2 = v25;
              v21 = *v20;
            }
          }
          ++v22;
          v23 += 6;
        }
        while (v22 < v21);
      }
    }
  }
  return result;
}

uint64_t sub_1ACB8DFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  _QWORD v23[6];

  v22 = 0;
  if (a2)
  {
    v4 = a2;
    v6 = 0;
    v7 = &v22;
    do
    {
      v8 = sub_1ACBE1124(a1, 0x80uLL);
      if (!v8)
        break;
      v9 = v8;
      *(_QWORD *)(v8 + 32) = sub_1ACB8B6B8(a1, *(_QWORD **)(v4 + 32), a3);
      *(_QWORD *)(v9 + 40) = sub_1ACB8E1EC(a1, *(int **)(v4 + 40), a3);
      v10 = *(_QWORD *)(v4 + 48);
      if (v10)
        v11 = sub_1ACB8B290(a1, v10, a3, 0);
      else
        v11 = 0;
      *(_QWORD *)(v9 + 48) = v11;
      *(_QWORD *)(v9 + 56) = sub_1ACB8B6B8(a1, *(_QWORD **)(v4 + 56), a3);
      v12 = *(_QWORD *)(v4 + 64);
      if (v12)
        v13 = sub_1ACB8B290(a1, v12, a3, 0);
      else
        v13 = 0;
      *(_QWORD *)(v9 + 64) = v13;
      *(_QWORD *)(v9 + 72) = sub_1ACB8B6B8(a1, *(_QWORD **)(v4 + 72), a3);
      *(_BYTE *)v9 = *(_BYTE *)v4;
      *(_QWORD *)(v9 + 88) = v6;
      *(_QWORD *)(v9 + 80) = 0;
      v14 = *(_QWORD *)(v4 + 96);
      if (v14)
        v15 = sub_1ACB8B290(a1, v14, a3, 0);
      else
        v15 = 0;
      *(_QWORD *)(v9 + 96) = v15;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v4 + 4) & 0xFFFFFFDF;
      *(_QWORD *)(v9 + 20) = -1;
      *(_WORD *)(v9 + 2) = *(_WORD *)(v4 + 2);
      *(_QWORD *)(v9 + 104) = sub_1ACC0D094(a1, *(int **)(v4 + 104));
      *(_QWORD *)(v9 + 112) = 0;
      v16 = *(_QWORD *)(v4 + 120);
      v23[0] = 0;
      if (v16)
      {
        v17 = v23;
        do
        {
          v18 = sub_1ACC0D1F4(a1, 0, v16);
          *v17 = v18;
          if (!v18)
            break;
          v17 = (uint64_t *)(v18 + 64);
          v16 = *(_QWORD *)(v16 + 64);
        }
        while (v16);
        v19 = v23[0];
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)(v9 + 120) = v19;
      v20 = *(unsigned __int8 *)(a1 + 103);
      if (*(_QWORD *)(v4 + 112))
      {
        if (*(_BYTE *)(a1 + 103))
        {
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(v4 + 16);
LABEL_26:
          *(_QWORD *)(v9 + 88) = 0;
          sub_1ACB7E704((_QWORD *)a1, v9, 1);
          return v22;
        }
        v23[2] = sub_1ACC0D4B8;
        v23[3] = 0;
        v23[0] = 0;
        v23[1] = sub_1ACC0D484;
        v23[4] = 0;
        v23[5] = v9;
        sub_1ACB73B30(v23, (_QWORD *)v9);
        v20 = *(unsigned __int8 *)(a1 + 103);
      }
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v4 + 16);
      if (v20)
        goto LABEL_26;
      *v7 = v9;
      v4 = *(_QWORD *)(v4 + 80);
      v7 = (uint64_t *)(v9 + 80);
      v6 = v9;
    }
    while (v4);
  }
  return v22;
}

_DWORD *sub_1ACB8E1EC(uint64_t a1, int *a2, unsigned int a3)
{
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  const char *v14;
  size_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  void *v21;
  _DWORD *v22;
  int *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  void *v27;
  __int16 v28;
  const void *v29;
  size_t v30;
  unint64_t v31;
  void *v32;
  _DWORD *v33;
  int *v34;
  uint64_t v35;
  int *v36;

  if (!a2)
    return 0;
  if (*a2 <= 0)
    v5 = 112;
  else
    v5 = 104 * *a2 + 8;
  v6 = (_DWORD *)sub_1ACBE1124(a1, v5);
  v7 = v6;
  if (v6)
  {
    v8 = *a2;
    *v6 = *a2;
    v6[1] = v8;
    if (*a2 >= 1)
    {
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v13 = &a2[v9];
        v14 = *(const char **)&a2[v9 + 4];
        *(_QWORD *)&v7[v9 + 2] = *(_QWORD *)&a2[v9 + 2];
        if (!v14)
        {
          v17 = 0;
          goto LABEL_17;
        }
        v15 = strlen(v14);
        v16 = v15 + 1;
        if (!a1)
          break;
        v17 = (void *)sub_1ACBE1124(a1, v16);
        if (v17)
          goto LABEL_16;
LABEL_17:
        *(_QWORD *)&v7[v9 + 4] = v17;
        v18 = (const void *)*((_QWORD *)v13 + 3);
        if (!v18)
        {
          v21 = 0;
          goto LABEL_24;
        }
        v19 = strlen(*((const char **)v13 + 3));
        v20 = v19 + 1;
        if (!a1)
        {
          v21 = (void *)sub_1ACB5D828(v19 + 1);
          if (!v21)
            goto LABEL_24;
LABEL_23:
          memcpy(v21, v18, v20);
          goto LABEL_24;
        }
        v21 = (void *)sub_1ACBE1124(a1, v20);
        if (v21)
          goto LABEL_23;
LABEL_24:
        v22 = &v7[v9];
        *(_QWORD *)&v7[v9 + 6] = v21;
        v23 = &a2[v9];
        v24 = *(const void **)&a2[v9 + 8];
        if (!v24)
        {
          v27 = 0;
          goto LABEL_31;
        }
        v25 = strlen(*(const char **)&a2[v9 + 8]);
        v26 = v25 + 1;
        if (!a1)
        {
          v27 = (void *)sub_1ACB5D828(v25 + 1);
          if (!v27)
            goto LABEL_31;
LABEL_30:
          memcpy(v27, v24, v26);
          goto LABEL_31;
        }
        v27 = (void *)sub_1ACBE1124(a1, v26);
        if (v27)
          goto LABEL_30;
LABEL_31:
        *((_QWORD *)v22 + 4) = v27;
        v22[17] = v23[17];
        v22[18] = v23[18];
        *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
        v28 = *(_WORD *)((char *)v22 + 69);
        if ((v28 & 2) != 0)
        {
          v29 = *(const void **)&a2[v9 + 24];
          if (v29)
          {
            v30 = strlen(*(const char **)&a2[v9 + 24]);
            v31 = v30 + 1;
            if (a1)
            {
              v32 = (void *)sub_1ACBE1124(a1, v31);
              if (!v32)
                goto LABEL_39;
LABEL_38:
              memcpy(v32, v29, v31);
            }
            else
            {
              v32 = (void *)sub_1ACB5D828(v30 + 1);
              if (v32)
                goto LABEL_38;
            }
          }
          else
          {
            v32 = 0;
          }
LABEL_39:
          *(_QWORD *)&v7[v9 + 24] = v32;
          v28 = *(_WORD *)((char *)v22 + 69);
        }
        v33 = *(_DWORD **)&a2[v9 + 26];
        *(_QWORD *)&v7[v9 + 26] = v33;
        if ((v28 & 0x100) != 0)
        {
          ++*v33;
          v28 = *(_WORD *)((char *)v22 + 69);
        }
        if ((v28 & 4) != 0)
          *(_QWORD *)&v7[v9 + 24] = sub_1ACB8B6B8(a1, *(_QWORD **)&a2[v9 + 24], a3);
        v34 = &a2[v9];
        v35 = *(_QWORD *)&a2[v9 + 10];
        *(_QWORD *)&v7[v9 + 10] = v35;
        if (v35)
          ++*(_DWORD *)(v35 + 44);
        *(_QWORD *)&v7[v9 + 12] = sub_1ACB8DFB8(a1, *((_QWORD *)v34 + 6), a3);
        v36 = (int *)*((_QWORD *)v34 + 10);
        if ((*(_WORD *)((_BYTE *)v34 + 69) & 0x400) != 0)
        {
          v11 = sub_1ACB8DA48(a1, v36);
        }
        else if (v36)
        {
          v11 = sub_1ACB8B290(a1, v36, a3, 0);
        }
        else
        {
          v11 = 0;
        }
        v12 = &v7[v9];
        *((_QWORD *)v12 + 10) = v11;
        *((_QWORD *)v12 + 11) = *(_QWORD *)&a2[v9 + 22];
        ++v10;
        v9 += 26;
        if (v10 >= *a2)
          return v7;
      }
      v17 = (void *)sub_1ACB5D828(v15 + 1);
      if (!v17)
        goto LABEL_17;
LABEL_16:
      memcpy(v17, v14, v16);
      goto LABEL_17;
    }
  }
  return v7;
}

_QWORD *sub_1ACB8E514(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4, unsigned __int8 *a5, char a6, unsigned __int8 *a7, int a8)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  unsigned int *v17;

  v13 = *(_QWORD **)a1;
  v14 = sub_1ACB8DB54(a1, 129, a2, a7, a8);
  v15 = v14;
  if (v14)
  {
    if (*(unsigned __int8 *)(a1 + 302) < 2u)
    {
      v14[6] = sub_1ACB8B6B8((uint64_t)v13, a4, 1u);
      if (a5)
        v17 = sub_1ACB8B290((uint64_t)v13, a5, 1, 0);
      else
        v17 = 0;
      v15[5] = v17;
      v16 = sub_1ACB8E1EC((uint64_t)v13, a3, 1u);
    }
    else
    {
      v14[5] = a5;
      v14[6] = a4;
      v16 = a3;
      a5 = 0;
      a4 = 0;
      a3 = 0;
    }
    v15[4] = v16;
    *((_BYTE *)v15 + 1) = a6;
  }
  if (a4)
    sub_1ACC010B0(v13, a4);
  if (a5)
    sub_1ACBF8348(v13, a5);
  sub_1ACB7E8B0(v13, a3);
  return v15;
}

_QWORD *sub_1ACB8E61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 360);
  v10 = *(_QWORD *)a1;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0;
  v82 = 0;
  *(_QWORD *)(a1 + 360) = 0;
  if (*(_DWORD *)(a1 + 48) || !v9)
    goto LABEL_73;
  v11 = a3;
  v13 = *(_QWORD *)(v9 + 40);
  if (v13)
  {
    v14 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 24);
    LODWORD(v15) = -1;
    do
    {
      v16 = *v14;
      v14 += 4;
      v15 = (v15 + 1);
    }
    while (v16 != v13);
  }
  else
  {
    v15 = 4294934528;
  }
  v17 = *(char **)v9;
  *(_QWORD *)(v9 + 56) = a2;
  if (a2)
  {
    v18 = a2;
    do
    {
      *(_QWORD *)(v18 + 8) = v9;
      v18 = *(_QWORD *)(v18 + 80);
    }
    while (v18);
  }
  v81 = v17;
  if (v17)
    v19 = strlen(v17) & 0x3FFFFFFF;
  else
    v19 = 0;
  LODWORD(v82) = v19;
  *(_QWORD *)&v83 = a1;
  v20 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (int)v15);
  *((_QWORD *)&v87 + 1) = *v20;
  v21 = v20[3];
  *(_QWORD *)&v88 = "trigger";
  *((_QWORD *)&v88 + 1) = &v81;
  LOBYTE(v87) = (_DWORD)v15 == 1;
  *((_QWORD *)&v83 + 1) = a1;
  *(_QWORD *)&v84 = sub_1ACC13854;
  *((_QWORD *)&v84 + 1) = sub_1ACC138D0;
  *(_QWORD *)&v85 = nullsub_8;
  DWORD2(v85) = 0;
  WORD6(v85) = 0;
  *(_QWORD *)&v86 = &v83;
  *((_QWORD *)&v86 + 1) = v21;
  if (v8)
  {
    v80 = v11;
    while (!sub_1ACB73B30((_QWORD *)&v83 + 1, *(_QWORD **)(v8 + 16)))
    {
      v22 = *(_QWORD *)(v8 + 40);
      if (v22)
      {
        if (sub_1ACC0B714((uint64_t)&v83 + 8, v22))
          break;
      }
      v23 = *(_DWORD **)(v8 + 48);
      if (v23 && (int)*v23 >= 1)
      {
        v24 = (uint64_t *)(v23 + 2);
        v25 = *v23 + 1;
        while (!*v24 || !sub_1ACC0B714((uint64_t)&v83 + 8, *v24))
        {
          v24 += 3;
          if (--v25 <= 1)
            goto LABEL_26;
        }
        goto LABEL_72;
      }
LABEL_26:
      v26 = *(_QWORD *)(v8 + 32);
      if (v26)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v90 = 0;
        v92 = 0u;
        memset(v89, 0, sizeof(v89));
        v91 = v26;
        if (sub_1ACB73B30((_QWORD *)&v83 + 1, v89))
          goto LABEL_72;
      }
      v27 = *(_QWORD *)(v8 + 64);
      if (v27)
      {
        while (1)
        {
          v28 = *(int **)v27;
          if (*(_QWORD *)v27)
          {
            if (*v28 >= 1)
              break;
          }
LABEL_36:
          v31 = *(_QWORD *)(v27 + 8);
          if (v31 && sub_1ACC0B714((uint64_t)&v83 + 8, v31))
            goto LABEL_72;
          v32 = *(_DWORD **)(v27 + 16);
          if (v32 && (int)*v32 >= 1)
          {
            v33 = (uint64_t *)(v32 + 2);
            v34 = *v32 + 1;
            while (!*v33 || !sub_1ACC0B714((uint64_t)&v83 + 8, *v33))
            {
              v33 += 3;
              if (--v34 <= 1)
                goto LABEL_45;
            }
            goto LABEL_72;
          }
LABEL_45:
          v35 = *(_QWORD *)(v27 + 24);
          if (v35 && sub_1ACC0B714((uint64_t)&v83 + 8, v35))
            goto LABEL_72;
          v27 = *(_QWORD *)(v27 + 32);
          if (!v27)
            goto LABEL_48;
        }
        v29 = (uint64_t *)(v28 + 2);
        v30 = *v28 + 1;
        while (!*v29 || !sub_1ACC0B714((uint64_t)&v83 + 8, *v29))
        {
          v29 += 3;
          if (--v30 <= 1)
            goto LABEL_36;
        }
        goto LABEL_72;
      }
LABEL_48:
      v8 = *(_QWORD *)(v8 + 80);
      v11 = v80;
      if (!v8)
        goto LABEL_49;
    }
    goto LABEL_72;
  }
LABEL_49:
  v36 = *(_QWORD *)(v9 + 24);
  if (v36 && sub_1ACC0B714((uint64_t)&v83 + 8, v36))
    goto LABEL_72;
  if (*(unsigned __int8 *)(a1 + 302) < 2u)
  {
    if (!*(_BYTE *)(v10 + 197))
    {
      if ((*(_BYTE *)(v10 + 51) & 0x10) != 0
        && !*(_QWORD *)(v10 + 592)
        && !*(_DWORD *)(v10 + 220)
        && (*(int *)(v10 + 564) < 1 || *(_QWORD *)(v10 + 600)))
      {
        v74 = *(_QWORD *)(v9 + 56);
        if (v74)
        {
          while (1)
          {
            v75 = *(char **)(v74 + 24);
            if (v75)
            {
              v76 = strrchr(*(char **)(v74 + 24), 95);
              if (v76)
              {
                v77 = v76;
                *v76 = 0;
                v78 = sub_1ACBD1B0C(v10, v75, 0);
                *v77 = 95;
                if (v78)
                {
                  v36 = v78;
                  if (*(_BYTE *)(v78 + 63) == 1)
                  {
                    if (sub_1ACC0E114(v10, v78, v75))
                      break;
                  }
                }
              }
            }
            v74 = *(_QWORD *)(v74 + 80);
            if (!v74)
              goto LABEL_57;
          }
          sub_1ACBCB308(a1, "trigger \"%s\" may not write to shadow table \"%s\"", a3, a4, a5, a6, a7, a8, *(_QWORD *)v9);
          goto LABEL_72;
        }
      }
LABEL_57:
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
      {
        if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
          *(_BYTE *)(a1 + 35) = 1;
        v8 = sub_1ACBCB4C8((uint64_t *)a1, v36, a3, a4, a5, a6, a7, a8);
        if (!v8)
          goto LABEL_73;
      }
      sub_1ACC0DDF0(a1, 0, v15);
      v37 = sub_1ACB653C0(v10, *(const void **)v11, *(unsigned int *)(v11 + 8));
      sub_1ACBB60F8((uint64_t *)a1, "INSERT INTO %Q.sqlite_master VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')", v38, v39, v40, v41, v42, v43, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (int)v15));
      if (v37)
        sub_1ACBE0F9C((_QWORD *)v10, v37);
      sub_1ACC0F410((uint64_t *)a1, v15, v44, v45, v46, v47, v48, v49);
      v56 = sub_1ACB6DDD0(v10, "type='trigger' AND name='%q'", v50, v51, v52, v53, v54, v55, (char)v17);
      sub_1ACC0F480(v8, v15, (uint64_t)v56, 0, v57, v58, v59, v60);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 360) = v9;
    v9 = 0;
  }
  if (!*(_BYTE *)(v10 + 197))
  {
LABEL_72:
    v8 = 0;
    goto LABEL_73;
  }
  v61 = sub_1ACB57390(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (int)v15 + 24) + 56, (unsigned __int8 *)v17, v9);
  if (!v61)
  {
    v69 = *(_QWORD *)(v9 + 40);
    if (v69 == *(_QWORD *)(v9 + 48))
    {
      v71 = sub_1ACBFC8AC(v69 + 8, *(unsigned __int8 **)(v9 + 8));
      v8 = 0;
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v71 + 88);
      *(_QWORD *)(v71 + 88) = v9;
      v9 = 0;
      goto LABEL_73;
    }
    v9 = 0;
    goto LABEL_72;
  }
  v68 = v61;
  if (!*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    if (*(int *)(v10 + 220) >= 1)
      *(_DWORD *)(v10 + 424) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    v72 = *(_QWORD *)(v10 + 344);
    if (v72)
    {
      sub_1ACBCB308(v72, "out of memory", v62, v63, v64, v65, v66, v67, v79);
      for (i = *(_QWORD *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
  v8 = 0;
  v9 = v68;
LABEL_73:
  sub_1ACB689B8((_QWORD *)v10, v9);
  return sub_1ACB8EB98((_QWORD *)v10, v8);
}

_QWORD *sub_1ACB8EB98(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v2 + 80);
      v5 = *(unsigned __int8 **)(v2 + 40);
      if (v5)
        sub_1ACBF8348(v3, v5);
      v6 = *(_QWORD **)(v2 + 48);
      if (v6)
        sub_1ACC010B0(v3, v6);
      v7 = *(_QWORD *)(v2 + 16);
      if (v7)
        sub_1ACB7E704(v3, v7, 1);
      v8 = *(_QWORD **)(v2 + 56);
      if (v8)
      {
        v9 = *(_DWORD *)v8;
        if (*(int *)v8 >= 1)
        {
          v10 = 0;
          v11 = 1;
          do
          {
            v12 = (_QWORD *)v8[v11];
            if (v12)
            {
              sub_1ACBE0F9C(v3, v12);
              v9 = *(_DWORD *)v8;
            }
            ++v10;
            v11 += 2;
          }
          while (v10 < v9);
        }
        sub_1ACBF0674(v3, v8);
      }
      v13 = *(_QWORD **)(v2 + 64);
      if (v13)
        sub_1ACC01018(v3, v13);
      sub_1ACB7E8B0(v3, *(_QWORD **)(v2 + 32));
      v14 = *(_QWORD **)(v2 + 72);
      if (v14)
        sub_1ACBE0F9C(v3, v14);
      result = sub_1ACBE0F9C(v3, (_QWORD *)v2);
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1ACB8ECA0(uint64_t a1, _QWORD *a2, int *a3, _DWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = a2;
  v6 = *a3;
  *a4 = v6;
  if ((v6 & (v6 - 1)) != 0)
    goto LABEL_10;
  if ((_DWORD)v6)
    v8 = 48 * v6;
  else
    v8 = 24;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 512) > (unint64_t)a2)
    {
      if (*(_QWORD *)(a1 + 496) <= (unint64_t)a2)
      {
        if (v8 < 0x81)
        {
LABEL_10:
          v9 = (uint64_t)a2;
LABEL_15:
          v10 = (_QWORD *)(v9 + 24 * (int)v6);
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          ++*a3;
          return v9;
        }
      }
      else if (*(_QWORD *)(a1 + 504) <= (unint64_t)a2 && v8 <= *(unsigned __int16 *)(a1 + 438))
      {
        goto LABEL_10;
      }
    }
    v9 = sub_1ACBE11D0(a1, a2, v8);
    if (v9)
      goto LABEL_15;
  }
  else
  {
    v9 = sub_1ACBE1124(a1, v8);
    if (v9)
      goto LABEL_15;
  }
  *a4 = -1;
  return (uint64_t)v5;
}

uint64_t sub_1ACB8ED80(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int (*v21)(_QWORD);
  uint64_t *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(_QWORD);
  void (*v70)(uint64_t, char *, _QWORD);
  unsigned int __buf;
  int v72;
  _QWORD *v73;

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  while (v5 < *(int *)(a1 + 564))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * v5) + 16);
    if (v7 && (v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120)) != 0)
    {
      v9 = v8(v7);
      sub_1ACBF1EB0(a2, v7);
      ++v5;
      if ((_DWORD)v9)
      {
        *(_QWORD *)(a1 + 600) = v6;
        return v9;
      }
    }
    else
    {
      ++v5;
    }
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)(a1 + 600) = v6;
  while (v11 < *(int *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 + 32 * v11 + 8);
    if (v15 && *(_BYTE *)(v15 + 16) == 2)
    {
      if (*(_BYTE *)(v15 + 17))
      {
        ++*(_DWORD *)(v15 + 20);
        if (!*(_BYTE *)(v15 + 18))
        {
          sub_1ACBECF6C(v15);
          v14 = *(_QWORD *)(a1 + 32);
        }
      }
      v16 = **(_QWORD **)(v15 + 8);
      if (*(_BYTE *)(v14 + 32 * v11 + 16) == 1 || ((0x34uLL >> *(_BYTE *)(v16 + 9)) & 1) != 0 || *(_BYTE *)(v16 + 16))
      {
        v9 = *(unsigned int *)(v16 + 48);
        if (!(_DWORD)v9)
          goto LABEL_27;
      }
      else
      {
        if (!*(_BYTE *)(v16 + 20))
          ++v13;
        v9 = *(unsigned int *)(v16 + 48);
        if (!(_DWORD)v9)
        {
LABEL_27:
          if (!*(_QWORD *)(v16 + 344))
          {
            while (1)
            {
              v18 = *(unsigned __int8 *)(v16 + 22);
              if (v18 >= 4 && v18 != 5)
                break;
              if (*(_BYTE *)(v16 + 17))
                goto LABEL_42;
              v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 72) + 56))(*(_QWORD *)(v16 + 72), 4);
              if ((_DWORD)v20 != 5)
              {
                v9 = v20;
                if ((_DWORD)v20)
                  goto LABEL_21;
LABEL_42:
                v9 = 0;
                *(_BYTE *)(v16 + 22) = 4;
                goto LABEL_21;
              }
              if (!(*(unsigned int (**)(_QWORD))(v16 + 232))(*(_QWORD *)(v16 + 240)))
              {
                v9 = 5;
                if (*(_BYTE *)(v15 + 17))
                  goto LABEL_22;
                goto LABEL_29;
              }
            }
          }
          v9 = 0;
          if (!*(_BYTE *)(v15 + 17))
            goto LABEL_29;
LABEL_22:
          v17 = *(_DWORD *)(v15 + 20) - 1;
          *(_DWORD *)(v15 + 20) = v17;
          if (!v17)
            sub_1ACBED048(v15);
          goto LABEL_29;
        }
      }
LABEL_21:
      if (*(_BYTE *)(v15 + 17))
        goto LABEL_22;
LABEL_29:
      v12 = 1;
      ++v11;
      if ((_DWORD)v9)
        return v9;
    }
    else
    {
      ++v11;
    }
  }
  if (v12)
  {
    v21 = *(unsigned int (**)(_QWORD))(a1 + 280);
    if (v21)
    {
      if (v21(*(_QWORD *)(a1 + 272)))
        return 531;
    }
  }
  v22 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8);
  v23 = *v22;
  v24 = *(unsigned __int8 *)(*v22 + 19);
  if (*(_BYTE *)(*v22 + 19) || *(_UNKNOWN **)v23 == &unk_1ECD3BD38)
  {
    v25 = (const char *)&unk_1ACCB6CCD;
  }
  else
  {
    v25 = *(const char **)(v23 + 216);
    if (!v25)
    {
LABEL_72:
      v42 = -1;
      v43 = 8;
      while (++v42 < *(int *)(a1 + 40))
      {
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v43);
        if (v44)
        {
          v9 = sub_1ACB8F578(v44, 0, a3);
          v43 += 32;
          if ((_DWORD)v9)
            return v9;
        }
        else
        {
          v43 += 32;
        }
      }
      v45 = -1;
      v46 = 8;
      while (++v45 < *(int *)(a1 + 40))
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v46);
        if (v47)
        {
          v9 = sub_1ACB8F9C8(v47, 0);
          v46 += 32;
          if ((_DWORD)v9)
            return v9;
        }
        else
        {
          v46 += 32;
        }
      }
      goto LABEL_118;
    }
  }
  if ((strlen(v25) & 0x3FFFFFFF) == 0 || v13 <= 1)
    goto LABEL_72;
  v32 = *(_QWORD *)a1;
  if (v24 || *(_UNKNOWN **)v23 == &unk_1ECD3BD38)
  {
    v73 = 0;
    v72 = 0;
    v33 = (const char *)&unk_1ACCB6CCD;
LABEL_53:
    v34 = strlen(v33) & 0x3FFFFFFF;
    goto LABEL_54;
  }
  v33 = *(const char **)(v23 + 216);
  v73 = 0;
  v72 = 0;
  if (v33)
    goto LABEL_53;
  v34 = 0;
LABEL_54:
  v35 = (char *)sub_1ACB6DDD0(a1, "%.4c%s%.16c", v26, v27, v28, v29, v30, v31, 0);
  if (!v35)
    return 7;
  v36 = v35;
  v37 = v35 + 4;
  v38 = &v35[v34 + 4];
  __buf = 0;
  sqlite3_initialize();
  arc4random_buf(&__buf, 4uLL);
  sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf);
  v9 = (*(uint64_t (**)(uint64_t, char *, _QWORD, int *))(v32 + 56))(v32, v37, 0, &v72);
  if ((_DWORD)v9
    || !v72
    || (__buf = 0,
        sqlite3_log(13, "MJ collide: %s", v37),
        sqlite3_initialize(),
        arc4random_buf(&__buf, 4uLL),
        sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf),
        v9 = (*(uint64_t (**)(uint64_t, char *, _QWORD, int *))(v32 + 56))(v32, v37, 0, &v72),
        (_DWORD)v9)
    || !v72)
  {
LABEL_67:
    if ((_DWORD)v9)
      goto LABEL_69;
  }
  else
  {
    v39 = 1;
    while (1)
    {
      __buf = 0;
      if (++v39 >= 0x65)
        break;
      sqlite3_initialize();
      arc4random_buf(&__buf, 4uLL);
      sqlite3_snprintf(13, v38, "-mj%06X9%02X", __buf >> 8, __buf);
      v40 = (*(uint64_t (**)(uint64_t, char *, _QWORD, int *))(v32 + 56))(v32, v37, 0, &v72);
      if ((_DWORD)v40)
        v41 = 1;
      else
        v41 = v72 == 0;
      if (v41)
      {
        v9 = v40;
        goto LABEL_67;
      }
    }
    sqlite3_log(13, "MJ delete: %s", v37);
    v60 = *(void (**)(uint64_t, char *, _QWORD))(v32 + 48);
    if (v60)
      v60(v32, v37, 0);
  }
  v9 = sub_1ACBF1D8C(v32, (uint64_t)v37, &v73, 16406, 0);
  if ((_DWORD)v9)
    goto LABEL_69;
  v48 = *(_DWORD *)(a1 + 40);
  v49 = v73;
  if (v48 < 1)
  {
LABEL_94:
    if (((*(uint64_t (**)(_QWORD *))(*v49 + 96))(v49) & 0x400) == 0)
    {
      v59 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 40))(v49, 2);
      if ((_DWORD)v59)
      {
        v9 = v59;
        sub_1ACBF1BB4(v49);
        goto LABEL_127;
      }
    }
    v61 = -1;
    v62 = 8;
    while (++v61 < *(int *)(a1 + 40))
    {
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v62);
      if (v63)
      {
        v9 = sub_1ACB8F578(v63, v37, v58);
        v62 += 32;
        if ((_DWORD)v9)
        {
          sub_1ACBF1BB4(v49);
          goto LABEL_69;
        }
      }
      else
      {
        v62 += 32;
      }
    }
    sub_1ACBF1BB4(v49);
    v64 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 48);
    if (v64)
    {
      v9 = v64(v32, v37, 1);
      v65 = (uint64_t)sub_1ACBE0F9C((_QWORD *)a1, v36);
      if ((_DWORD)v9)
        return v9;
    }
    else
    {
      v65 = (uint64_t)sub_1ACBE0F9C((_QWORD *)a1, v36);
    }
    if (off_1EECAD248)
      off_1EECAD248(v65);
    v66 = *(_DWORD *)(a1 + 40);
    if (v66 >= 1)
    {
      v67 = 0;
      v68 = 8;
      do
      {
        v65 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v68);
        if (v65)
        {
          v65 = sub_1ACB8F9C8(v65, 1);
          v66 = *(_DWORD *)(a1 + 40);
        }
        ++v67;
        v68 += 32;
      }
      while (v67 < v66);
    }
    if (off_1EECAD250)
      off_1EECAD250(v65);
LABEL_118:
    sub_1ACB90524((int *)a1, 0x80u);
    return 0;
  }
  v50 = 0;
  v51 = 0;
  v52 = 8;
  while (2)
  {
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v52);
    if (!v53 || *(_BYTE *)(v53 + 16) != 2 || (v54 = **(_QWORD **)(v53 + 8), (v55 = *(const char **)(v54 + 224)) == 0))
    {
LABEL_88:
      ++v50;
      v52 += 32;
      if (v50 >= v48)
        goto LABEL_94;
      continue;
    }
    break;
  }
  v56 = strlen(*(const char **)(v54 + 224));
  v57 = (*(uint64_t (**)(_QWORD *, const char *, _QWORD, uint64_t))(*v49 + 24))(v49, v55, (v56 & 0x3FFFFFFFu) + 1, v51);
  if (!(_DWORD)v57)
  {
    v51 += (strlen(v55) & 0x3FFFFFFF) + 1;
    v48 = *(_DWORD *)(a1 + 40);
    goto LABEL_88;
  }
  v9 = v57;
  if (*v49)
  {
    (*(void (**)(_QWORD *))(*v49 + 8))(v49);
    *v49 = 0;
  }
  v69 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v49);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v49);
    v49 = (_QWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v69 = &xmmword_1ECD3B1D0;
      goto LABEL_126;
    }
  }
  else
  {
LABEL_126:
    (*v69)(v49);
  }
LABEL_127:
  v70 = *(void (**)(uint64_t, char *, _QWORD))(v32 + 48);
  if (v70)
    v70(v32, v37, 0);
LABEL_69:
  sub_1ACBE0F9C((_QWORD *)a1, v36);
  return v9;
}

uint64_t sub_1ACB8F578(uint64_t a1, _BYTE *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  BOOL v46;
  _BOOL4 v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  if (*(_BYTE *)(a1 + 16) != 2)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1ACBECF6C(a1);
    if (!*(_BYTE *)(v5 + 33))
      goto LABEL_8;
  }
  else if (!*(_BYTE *)(v5 + 33))
  {
LABEL_8:
    v9 = *(_QWORD *)v5;
    if (*(_BYTE *)(v5 + 35))
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v5 + 64);
    v10 = sub_1ACB9E9C0(v9, a2, 0);
LABEL_11:
    v11 = v10;
    if (!*(_BYTE *)(a1 + 17))
      return v11;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)v6;
  for (i = *(_QWORD *)(v6 + 16); i; i = *(_QWORD *)(i + 40))
    *(_BYTE *)(i + 1) &= ~4u;
  if (*(_BYTE *)(v6 + 34))
    goto LABEL_8;
  v14 = *(_DWORD *)(v6 + 64);
  v15 = v14 - 2;
  if (v14 >= 2)
  {
    v16 = v15 / (*(_DWORD *)(v6 + 56) / 5u + 1) * (*(_DWORD *)(v6 + 56) / 5u + 1);
    if (v16 + 1 == dword_1EECAC650 / *(_DWORD *)(v6 + 52))
      v17 = 3;
    else
      v17 = 2;
    if (v17 + v16 == v14)
      goto LABEL_26;
  }
  else if (!v14)
  {
    goto LABEL_26;
  }
  v18 = dword_1EECAC650;
  if (v14 == dword_1EECAC650 / *(_DWORD *)(v6 + 52) + 1)
  {
LABEL_26:
    v10 = sub_1ACBEB08C(80988);
    goto LABEL_11;
  }
  v19 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 80) + 36));
  v20 = *(_QWORD *)a1;
  v21 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 336);
  if (v21)
  {
    v22 = *(unsigned int *)(v20 + 40);
    v23 = *(_QWORD *)(v20 + 32);
    if ((int)v22 < 1)
    {
      LODWORD(v24) = 0;
    }
    else
    {
      v24 = 0;
      v25 = (_QWORD *)(v23 + 8);
      while (*v25 != a1)
      {
        ++v24;
        v25 += 4;
        if (v22 == v24)
        {
          LODWORD(v24) = *(_DWORD *)(v20 + 40);
          break;
        }
      }
    }
    v27 = v21(*(_QWORD *)(v20 + 320), *(_QWORD *)(v23 + 32 * v24), *(unsigned int *)(v6 + 64), v19);
    if (v27 >= v19)
      v26 = v19;
    else
      v26 = v27;
    if (!v26)
      goto LABEL_8;
    v18 = dword_1EECAC650;
  }
  else
  {
    v26 = v19;
  }
  v28 = *(_DWORD *)(v6 + 56) / 5u;
  if (v14 > 1)
  {
    v30 = v28 + 1;
    v32 = v15 / v30 * v30;
    v31 = v18 / *(_DWORD *)(v6 + 52);
    if (v32 + 1 == v31)
      v33 = 3;
    else
      v33 = 2;
    v29 = v33 + v32;
  }
  else
  {
    v29 = 0;
    v30 = v28 + 1;
    v31 = v18 / *(_DWORD *)(v6 + 52);
  }
  v34 = v14 - v26 - (v26 - v14 + v28 + v29) / v28;
  v35 = v31 + 1;
  v36 = v31 + 1 >= v14 || v34 >= v35;
  v37 = !v36;
  v38 = v34 - v37;
  do
  {
    v39 = v38;
    v36 = v38 >= 2;
    v40 = v38 - 2;
    if (v36)
    {
      v42 = v40 / v30 * v30;
      if (v42 + 1 == v31)
        v43 = 3;
      else
        v43 = 2;
      v41 = v43 + v42;
    }
    else
    {
      v41 = 0;
    }
    v38 = v39 - 1;
  }
  while (v39 == v41 || v39 == v35);
  if (v39 > v14)
  {
    v10 = sub_1ACBEB08C(81015);
    goto LABEL_11;
  }
  v54 = v19;
  if (v39 >= v14)
  {
    v11 = 0;
    v46 = 1;
  }
  else
  {
    v44 = *(unsigned __int8 **)(v6 + 16);
    if (v44 && (v45 = sub_1ACBEEE90(v44, 0, 0), (_DWORD)v45))
    {
      v11 = v45;
      v46 = 0;
    }
    else
    {
      v47 = v26 == v19;
      do
      {
        v48 = sub_1ACBEEAAC(v6, v39, v14, v47);
        v11 = v48;
        --v14;
        v46 = (_DWORD)v48 == 0;
      }
      while (v14 > v39 && !(_DWORD)v48);
    }
  }
  v49 = !v46;
  if ((_DWORD)v11 == 101)
    v49 = 0;
  if (!v49 && v54)
  {
    v50 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 112);
    v51 = *(_DWORD **)(v50 + 40);
    if ((*(_WORD *)(v50 + 52) & 4) != 0 && v51[8] >= *(_DWORD *)(v50 + 48))
    {
      if (!v51[32])
      {
        v11 = 0;
        goto LABEL_84;
      }
      v52 = sub_1ACBEA110(v50);
    }
    else
    {
      v11 = v51[12];
      if ((_DWORD)v11)
      {
LABEL_84:
        v53 = *(_QWORD *)(v6 + 24);
        if (v26 == v54)
        {
          *(_DWORD *)(*(_QWORD *)(v53 + 80) + 32) = 0;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 80) + 36) = 0;
          v53 = *(_QWORD *)(v6 + 24);
        }
        *(_DWORD *)(*(_QWORD *)(v53 + 80) + 28) = bswap32(v39);
        *(_BYTE *)(v6 + 35) = 1;
        *(_DWORD *)(v6 + 64) = v39;
        goto LABEL_87;
      }
      if (v51[46] <= v51[50])
        v52 = sub_1ACB9A818(v50);
      else
        v52 = sub_1ACBEDEA4(v50);
    }
    v11 = v52;
    goto LABEL_84;
  }
LABEL_87:
  if (!(_DWORD)v11)
    goto LABEL_8;
  sub_1ACBA43F8(v7, a3);
  if (!*(_BYTE *)(a1 + 17))
    return v11;
LABEL_12:
  v12 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v12;
  if (!v12)
    sub_1ACBED048(a1);
  return v11;
}

uint64_t sub_1ACB8F9C8(uint64_t a1, int a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  int v11;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    return 0;
  if (!*(_BYTE *)(a1 + 17) || (++*(_DWORD *)(a1 + 20), *(_BYTE *)(a1 + 18)))
  {
    if (v2 != 2)
      goto LABEL_29;
LABEL_5:
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)v5;
    v7 = *(unsigned int *)(*(_QWORD *)v5 + 48);
    if (!(_DWORD)v7)
    {
      ++*(_DWORD *)(v6 + 132);
      if (*(_BYTE *)(v6 + 21) == 2 && *(_BYTE *)(v6 + 8) && *(_BYTE *)(v6 + 9) == 1)
      {
        *(_BYTE *)(v6 + 21) = 1;
LABEL_28:
        --*(_DWORD *)(a1 + 28);
        *(_BYTE *)(v5 + 36) = 1;
        sub_1ACBAF4D0(*(_QWORD *)(v5 + 96));
        *(_QWORD *)(v5 + 96) = 0;
        goto LABEL_29;
      }
      v8 = sub_1ACB8FD38(v6, *(unsigned __int8 *)(v6 + 24), 1);
      v7 = v8;
      if (v8 == 13 || v8 == 10)
      {
        *(_DWORD *)(v6 + 48) = v8;
        *(_BYTE *)(v6 + 21) = 6;
        if ((_DWORD)v8)
        {
          v10 = sub_1ACBEBC4C;
        }
        else if (*(_BYTE *)(v6 + 27) && !*(_QWORD *)(v6 + 296))
        {
          v10 = sub_1ACBEBC58;
        }
        else
        {
          v10 = sub_1ACBEBEA8;
        }
        *(_QWORD *)(v6 + 288) = v10;
      }
    }
    if (!a2 && (_DWORD)v7)
    {
      if (!*(_BYTE *)(a1 + 17))
        return v7;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  sub_1ACBECF6C(a1);
  if (*(_BYTE *)(a1 + 16) == 2)
    goto LABEL_5;
LABEL_29:
  sub_1ACB8FB54(a1);
  if (!*(_BYTE *)(a1 + 17))
    return 0;
  v7 = 0;
LABEL_31:
  v11 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v11;
  if (!v11)
    sub_1ACBED048(a1);
  return v7;
}

uint64_t sub_1ACB8FB54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v1 = result;
  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v3 + 35) = 0;
  if (*(_BYTE *)(result + 16))
  {
    if (*(int *)(v2 + 212) >= 2)
    {
      if (*(_QWORD *)(v3 + 128) == result)
      {
        *(_QWORD *)(v3 + 128) = 0;
        *(_WORD *)(v3 + 40) &= 0xFF3Fu;
        for (i = *(_QWORD *)(v3 + 120); i; i = *(_QWORD *)(i + 16))
          *(_BYTE *)(i + 12) = 1;
      }
      *(_BYTE *)(result + 16) = 1;
      return result;
    }
    v6 = (uint64_t *)(v3 + 120);
    v5 = *(_QWORD *)(v3 + 120);
    if (v5)
    {
      do
      {
        if (*(_QWORD *)v5 == v1)
        {
          v7 = *(_QWORD *)(v5 + 16);
          *v6 = v7;
          if (*(_DWORD *)(v5 + 8) == 1)
            goto LABEL_11;
          v8 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
            --qword_1ECD3E8D0;
            result = off_1ECD3B168(v5);
            v5 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_10;
            v8 = &xmmword_1ECD3B1D0;
          }
          result = (*v8)(v5);
        }
        else
        {
          v6 = (uint64_t *)(v5 + 16);
        }
LABEL_10:
        v7 = *v6;
LABEL_11:
        v5 = v7;
      }
      while (v7);
    }
    if (*(_QWORD *)(v3 + 128) == v1)
    {
      *(_QWORD *)(v3 + 128) = 0;
      v9 = *(_DWORD *)(v3 + 60);
      v10 = -193;
    }
    else
    {
      v9 = *(_DWORD *)(v3 + 60);
      if (v9 != 2)
        goto LABEL_25;
      v10 = -129;
    }
    *(_WORD *)(v3 + 40) &= v10;
LABEL_25:
    v11 = v9 - 1;
    *(_DWORD *)(v3 + 60) = v11;
    if (!v11)
      *(_BYTE *)(v3 + 36) = 0;
  }
  *(_BYTE *)(v1 + 16) = 0;
  if (!*(_BYTE *)(v3 + 36))
  {
    v12 = *(_QWORD *)(v3 + 24);
    if (v12)
    {
      *(_QWORD *)(v3 + 24) = 0;
      return sub_1ACBE097C(*(_QWORD *)(v12 + 112));
    }
  }
  return result;
}

uint64_t sub_1ACB8FD38(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (**v14)(_QWORD);
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;

  if (*(unsigned __int8 *)(a1 + 21) <= 1u && *(unsigned __int8 *)(a1 + 22) < 2u)
    return 0;
  sub_1ACBEC304(a1);
  v7 = *(uint64_t **)(a1 + 80);
  v8 = *v7;
  if (!*v7)
    goto LABEL_34;
  if ((_UNKNOWN *)v8 == &unk_1E5C732E0)
  {
    v12 = (_QWORD *)v7[2];
    if (!v12)
    {
LABEL_22:
      v10 = 0;
      *v7 = 0;
      goto LABEL_49;
    }
    while (1)
    {
      v13 = (_QWORD *)*v12;
      v14 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v12);
        v12 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_16;
        v14 = &xmmword_1ECD3B1D0;
      }
      (*v14)(v12);
LABEL_16:
      v12 = v13;
      if (!v13)
        goto LABEL_22;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + 9);
  if (v9 == 1)
    goto LABEL_25;
  if (v9 != 3)
  {
    if (v9 != 5 && *(_BYTE *)(a1 + 8))
    {
LABEL_25:
      if (a2)
      {
        v15 = 1;
        if (!*(_QWORD *)(a1 + 96))
          goto LABEL_47;
      }
      else
      {
        v15 = *(_BYTE *)(a1 + 16) != 0;
        if (!*(_QWORD *)(a1 + 96))
          goto LABEL_47;
      }
      v16 = *(_QWORD *)(a1 + 208);
      if (v15 || !v16)
      {
        v10 = (*(uint64_t (**)(_QWORD, _QWORD))(v8 + 32))(*(_QWORD *)(a1 + 80), 0);
        if (v10)
          goto LABEL_48;
      }
      else
      {
        v10 = (*(uint64_t (**)(_QWORD, void *, uint64_t, _QWORD))(v8 + 24))(*(_QWORD *)(a1 + 80), &unk_1ACCB6CDA, 28, 0);
        if (v10)
          goto LABEL_48;
      }
      if (*(_BYTE *)(a1 + 11))
        v10 = 0;
      else
        v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 14) | 0x10u);
      if (v10)
        goto LABEL_48;
      if (v16 < 1)
        goto LABEL_48;
      v34 = 0;
      v10 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), &v34);
      if (v10)
        goto LABEL_48;
      if (v34 > v16)
      {
        v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80), v16);
        goto LABEL_46;
      }
LABEL_47:
      v10 = 0;
      goto LABEL_48;
    }
    v17 = *(unsigned __int8 *)(a1 + 16);
    (*(void (**)(_QWORD))(v8 + 8))(*(_QWORD *)(a1 + 80));
    *v7 = 0;
    if (!v17)
    {
      v18 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 48);
      if (v18)
      {
        v10 = v18();
        goto LABEL_49;
      }
    }
LABEL_34:
    v10 = 0;
    goto LABEL_49;
  }
  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_47;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(v8 + 32))(*(_QWORD *)(a1 + 80), 0);
  if (!v10)
  {
    if (*(_BYTE *)(a1 + 12) && *(_BYTE *)(a1 + 14))
    {
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
LABEL_46:
      v10 = v11;
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_48:
  *(_QWORD *)(a1 + 96) = 0;
LABEL_49:
  sub_1ACBAF4D0(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 19) && *(_BYTE *)(a1 + 16))
    {
      if (!a3 || !**(_QWORD **)(a1 + 72))
        goto LABEL_107;
      v27 = *(uint64_t **)(a1 + 336);
      LODWORD(v28) = *((_DWORD *)v27 + 8);
      if ((v28 & 0x80000000) != 0)
      {
        v28 = -1024 * (int)v28 / (*((int *)v27 + 11) + (uint64_t)*((int *)v27 + 10));
        if (v28 >= 1000000000)
          LODWORD(v28) = 1000000000;
      }
      v29 = *v27;
      if (*v27)
      {
        v30 = 0;
        do
        {
          v29 = *(_QWORD *)(v29 + 64);
          v30 += 100;
        }
        while (v29);
      }
      else
      {
        v30 = 0;
      }
      if (!(_DWORD)v28 || (int)(v30 / (int)v28) < 25)
      {
LABEL_107:
        v21 = *(uint64_t **)(a1 + 336);
        for (i = *v21; i; i = *(_QWORD *)(i + 64))
          *(_WORD *)(i + 52) &= 0xFFF3u;
        v21[2] = v21[1];
LABEL_110:
        sub_1ACB5AD68(v21, *(_DWORD *)(a1 + 32));
        v19 = *(_QWORD *)(a1 + 344);
        if (v19)
          goto LABEL_51;
        goto LABEL_111;
      }
    }
    v21 = *(uint64_t **)(a1 + 336);
    v22 = *v21;
    if (!*v21)
      goto LABEL_110;
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(_QWORD *)(v22 + 72);
      if (*(_QWORD *)(v23 + 16) == v22)
      {
        *(_QWORD *)(v23 + 16) = v24;
        v25 = *(_QWORD *)(v22 + 64);
        if (v25)
        {
LABEL_71:
          *(_QWORD *)(v25 + 72) = v24;
          v24 = *(_QWORD *)(v22 + 72);
          if (!v24)
          {
            *(_QWORD *)v23 = v25;
            goto LABEL_76;
          }
LABEL_75:
          *(_QWORD *)(v24 + 64) = v25;
          goto LABEL_76;
        }
      }
      else
      {
        v25 = *(_QWORD *)(v22 + 64);
        if (v25)
          goto LABEL_71;
      }
      *(_QWORD *)(v23 + 8) = v24;
      if (v24)
        goto LABEL_75;
      *(_QWORD *)v23 = 0;
      *(_BYTE *)(v23 + 49) = 2;
LABEL_76:
      *(_WORD *)(v22 + 52) = *(_WORD *)(v22 + 52) & 0xFFF0 | 1;
      if (!*(_QWORD *)(v22 + 56) && *(_BYTE *)(v23 + 48))
        xmmword_1ECD3B228(*(_QWORD *)(v23 + 72), *(_QWORD *)v22, 0);
      v22 = *v21;
      if (!*v21)
      {
        v21 = *(uint64_t **)(a1 + 336);
        goto LABEL_110;
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 344);
  if (v19)
  {
LABEL_51:
    if (*(_BYTE *)(v19 + 64))
    {
      if (!*(_BYTE *)(v19 + 63))
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 8) + 112))(*(_QWORD *)(v19 + 8), 0, 1, 9);
      *(_BYTE *)(v19 + 64) = 0;
      *(_DWORD *)(v19 + 124) = 0;
      *(_BYTE *)(v19 + 67) = 0;
    }
    goto LABEL_55;
  }
LABEL_111:
  if (a3 && !v10)
  {
    v33 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 40) <= v33)
      v10 = 0;
    else
      v10 = sub_1ACBB7A78(a1, v33);
  }
LABEL_55:
  if (a3)
  {
    if (!v10)
    {
      v20 = *(_QWORD *)(a1 + 72);
      if (!*(_QWORD *)v20
        || (v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 80))(v20, 22, 0),
            v10 == 12))
      {
        v10 = 0;
      }
    }
  }
  if (*(_BYTE *)(a1 + 8))
    goto LABEL_61;
  v26 = *(_QWORD *)(a1 + 344);
  if (!v26)
  {
LABEL_96:
    v31 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)v31)
    {
      if (*(_BYTE *)(a1 + 17))
        LODWORD(result) = 0;
      else
        LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 64))(v31, 1);
      if (*(_BYTE *)(a1 + 22) != 5)
        *(_BYTE *)(a1 + 22) = 1;
    }
    else
    {
      LODWORD(result) = 0;
    }
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    goto LABEL_62;
  }
  if (!*(_BYTE *)(v26 + 63))
  {
LABEL_61:
    LODWORD(result) = 0;
    goto LABEL_62;
  }
  *(_BYTE *)(v26 + 63) = 0;
  if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v26 + 8) + 112))(*(_QWORD *)(v26 + 8), (*(__int16 *)(v26 + 60) + 3), 1, 6))
  {
    if (!*(_BYTE *)(v26 + 63))
      goto LABEL_96;
    goto LABEL_61;
  }
  LODWORD(result) = 0;
  *(_BYTE *)(v26 + 63) = 1;
LABEL_62:
  *(_BYTE *)(a1 + 21) = 1;
  *(_BYTE *)(a1 + 24) = 0;
  if (v10)
    return v10;
  else
    return result;
}

uint64_t sub_1ACB90304(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t i;
  int v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  sub_1ACBAF4D0(*(_QWORD *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  result = sub_1ACBEC304(a1);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 64))
    {
      if (!*(_BYTE *)(v3 + 63))
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), 0, 1, 9);
      *(_BYTE *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 124) = 0;
      *(_BYTE *)(v3 + 67) = 0;
    }
    if ((*(__int16 *)(v3 + 60) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v3 + 63))
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8) + 112))(*(_QWORD *)(v3 + 8), *(unsigned __int16 *)(v3 + 60) + 3, 1, 5);
      *(_WORD *)(v3 + 60) = -1;
    }
LABEL_10:
    *(_BYTE *)(a1 + 21) = 0;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    v8 = *(_QWORD *)(a1 + 72);
    if (!*(_QWORD *)v8
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8) & 0x800) == 0
      || (*(_BYTE *)(a1 + 9) & 5) != 1)
    {
      v9 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)v9)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v9 + 8))(*(_QWORD *)(a1 + 80));
        *(_QWORD *)v9 = 0;
      }
    }
    result = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)result)
    {
      if (*(_BYTE *)(a1 + 17))
        result = 0;
      else
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 64))(result, 0);
      if (*(_BYTE *)(a1 + 22) != 5)
        *(_BYTE *)(a1 + 22) = 0;
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
      if ((_DWORD)result && *(_BYTE *)(a1 + 21) == 6)
        *(_BYTE *)(a1 + 22) = 5;
    }
    else
    {
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    }
    goto LABEL_10;
  }
LABEL_12:
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = **(_QWORD **)(a1 + 80) == 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 132);
      for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
        *(_DWORD *)(i + 24) = 1;
      result = (uint64_t)sub_1ACB5AD68(*(_QWORD **)(a1 + 336), 0);
      v4 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
    *(_BYTE *)(a1 + 21) = v4;
    if (*(_BYTE *)(a1 + 27))
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72), 0, 0);
      v6 = *(unsigned __int8 *)(a1 + 27);
      *(_DWORD *)(a1 + 48) = 0;
      if (v6 && !*(_QWORD *)(a1 + 296))
      {
        v7 = sub_1ACBEBC58;
LABEL_24:
        *(_QWORD *)(a1 + 288) = v7;
        goto LABEL_25;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 48) = 0;
    }
    v7 = sub_1ACBEBEA8;
    goto LABEL_24;
  }
LABEL_25:
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

int *sub_1ACB90524(int *result, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void);
  _QWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  void (*v15)(_QWORD);

  v2 = (_QWORD *)*((_QWORD *)result + 75);
  if (v2)
  {
    v3 = result;
    *((_QWORD *)result + 75) = 0;
    if (result[141] >= 1)
    {
      v4 = 0;
      v5 = a2;
      do
      {
        v6 = v2[v4];
        v7 = *(_QWORD **)(v6 + 16);
        if (v7)
        {
          v8 = *(void (**)(void))(*v7 + v5);
          if (v8)
            v8();
        }
        *(_DWORD *)(v6 + 32) = 0;
        v9 = *(_QWORD **)v6;
        v10 = *(_DWORD *)(v6 + 24) - 1;
        *(_DWORD *)(v6 + 24) = v10;
        if (!v10)
        {
          v11 = *(_QWORD *)(v6 + 16);
          v12 = v9;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
            v12 = *(_QWORD **)v6;
          }
          v13 = *(_QWORD *)(v6 + 8);
          v14 = *(_DWORD *)(v13 + 16) - 1;
          *(_DWORD *)(v13 + 16) = v14;
          if (!v14)
          {
            v15 = *(void (**)(_QWORD))(v13 + 32);
            if (v15)
              v15(*(_QWORD *)(v13 + 24));
            sub_1ACBE0F9C(v12, (_QWORD *)v13);
          }
          sub_1ACBE0F9C(v9, (_QWORD *)v6);
        }
        ++v4;
      }
      while (v4 < *((int *)v3 + 141));
    }
    result = (int *)sub_1ACBE0F9C(v3, v2);
    *((_DWORD *)v3 + 141) = 0;
  }
  return result;
}

uint64_t sub_1ACB9062C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  unint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v26;
  uint64_t j;
  char v28;
  _QWORD v29[2];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 32 * a2 + 24);
  for (i = *(_QWORD **)(v4 + 16); i; i = (_QWORD *)*i)
    *(_DWORD *)(i[2] + 48) &= ~0x10u;
  v6 = *(_QWORD **)(v4 + 40);
  if (v6)
  {
    do
    {
      *(_WORD *)(v6[2] + 99) &= ~0x80u;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v3 = *(_QWORD *)(a1 + 32);
  }
  v29[0] = a1;
  v7 = *(_BYTE **)(v3 + 32 * a2);
  v29[1] = v7;
  v8 = sub_1ACBD1B0C(a1, "sqlite_stat1", v7);
  if (v8 && !*(_BYTE *)(v8 + 63))
  {
    v23 = (const char *)sub_1ACB6DDD0(a1, "SELECT tbl,idx,stat FROM %Q.sqlite_stat1", v9, v10, v11, v12, v13, v14, (char)v7);
    if (v23)
    {
      v24 = (char *)v23;
      v15 = sqlite3_exec((sqlite3 *)a1, v23, (int (__cdecl *)(void *, int, char **, char **))sub_1ACBB5E3C, v29, 0);
      sub_1ACBE0F9C((_QWORD *)a1, v24);
      v16 = *(_QWORD **)(v4 + 40);
      if (!v16)
        goto LABEL_27;
    }
    else
    {
      v15 = 7;
      v16 = *(_QWORD **)(v4 + 40);
      if (!v16)
        goto LABEL_27;
    }
  }
  else
  {
    v15 = 0;
    v16 = *(_QWORD **)(v4 + 40);
    if (!v16)
      goto LABEL_27;
  }
  do
  {
    v17 = v16[2];
    if ((*(_WORD *)(v17 + 99) & 0x80) == 0)
    {
      if (*(unsigned __int16 *)(v17 + 94) >= 5u)
        v18 = 5;
      else
        v18 = *(unsigned __int16 *)(v17 + 94);
      v20 = *(_WORD **)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      v21 = *(__int16 *)(v19 + 58);
      if (v21 <= 98)
      {
        LOWORD(v21) = 99;
        *(_WORD *)(v19 + 58) = 99;
      }
      if (*(_QWORD *)(v17 + 72))
        LOWORD(v21) = v21 - 10;
      *v20 = v21;
      memcpy(v20 + 1, &unk_1ACCB6DF0, 2 * (v18 & 0x7FFF));
      LODWORD(v22) = *(unsigned __int16 *)(v17 + 94);
      if (v18 < v22)
      {
        do
        {
          v20[v18 + 1] = 23;
          v22 = *(unsigned __int16 *)(v17 + 94);
          ++v18;
        }
        while (v18 < v22);
      }
      if (*(_BYTE *)(v17 + 98))
        v20[v22] = 0;
    }
    v16 = (_QWORD *)*v16;
  }
  while (v16);
LABEL_27:
  if ((_DWORD)v15 == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v26 = *(_QWORD *)(a1 + 344);
    if (v26)
    {
      sub_1ACBCB308(v26, "out of memory", v9, v10, v11, v12, v13, v14, v28);
      for (j = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
      {
        *(_DWORD *)(j + 24) = 7;
        j = *(_QWORD *)(j + 256);
        if (!j)
          break;
      }
    }
  }
  return v15;
}

int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
{
  int v12;
  const char *v13;
  int v14;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char *v19;
  void (**v20)(char *);
  uint64_t (**v21)(uint64_t);
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (pazResult)
    *pazResult = 0;
  if (pnColumn)
    *pnColumn = 0;
  if (pnRow)
    *pnRow = 0;
  if (pzErrmsg)
    *pzErrmsg = 0;
  if (!db)
  {
    v13 = "NULL";
    goto LABEL_21;
  }
  v12 = *((unsigned __int8 *)db + 113);
  if (v12 == 186)
  {
LABEL_13:
    v13 = "unopened";
LABEL_21:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1ACBBE20C(157441);
  }
  if (v12 != 118)
  {
    if (v12 != 109)
    {
      v13 = "invalid";
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (pazResult)
  {
    v25 = 0u;
    v26 = xmmword_1ACCBDB30;
    v27 = 0;
    if (sqlite3_initialize() || (v16 = (_QWORD *)sub_1ACB5D828(160), (*(_QWORD *)&v25 = v16) == 0))
    {
LABEL_17:
      v14 = 7;
LABEL_18:
      *((_DWORD *)db + 20) = v14;
      return v14;
    }
    *v16 = 0;
    v17 = sqlite3_exec(db, zSql, (int (__cdecl *)(void *, int, char **, char **))sub_1ACB93804, &v25, pzErrmsg);
    *(_QWORD *)v25 = HIDWORD(v26);
    if (v17 == 4)
    {
      sqlite3_free_table((char **)(v25 + 8));
      v18 = *((_QWORD *)&v25 + 1);
      if (!*((_QWORD *)&v25 + 1))
        goto LABEL_41;
      if (!pzErrmsg)
      {
LABEL_35:
        v21 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v18);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v18);
          v18 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_41;
          v21 = &xmmword_1ECD3B1D0;
        }
        (*v21)(v18);
LABEL_41:
        v14 = v27;
        goto LABEL_18;
      }
      v19 = *pzErrmsg;
      if (*pzErrmsg)
      {
        v20 = (void (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
        {
LABEL_33:
          (*v20)(v19);
          goto LABEL_34;
        }
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v19);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v19);
        v19 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v20 = (void (**)(char *))&xmmword_1ECD3B1D0;
          goto LABEL_33;
        }
      }
LABEL_34:
      *pzErrmsg = sqlite3_mprintf("%s", *((const char **)&v25 + 1));
      v18 = *((_QWORD *)&v25 + 1);
      if (!*((_QWORD *)&v25 + 1))
        goto LABEL_41;
      goto LABEL_35;
    }
    v14 = v17;
    v22 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v23 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v22);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v22);
        v22 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_49;
        v23 = &xmmword_1ECD3B1D0;
      }
      (*v23)(v22);
    }
LABEL_49:
    if (v14)
    {
      sqlite3_free_table((char **)(v25 + 8));
      return v14;
    }
    v24 = v25;
    if (v26 <= HIDWORD(v26) || (v24 = sub_1ACB6BB48(v25, 8 * HIDWORD(v26))) != 0)
    {
      *pazResult = (char **)(v24 + 8);
      if (pnColumn)
        *pnColumn = DWORD2(v26);
      v14 = 0;
      if (pnRow)
        *pnRow = DWORD1(v26);
      return v14;
    }
    sqlite3_free_table((char **)(v25 + 8));
    goto LABEL_17;
  }
  return sub_1ACBBE20C(157441);
}

uint64_t sub_1ACB90C28(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result;
  uint64_t v7;
  const void *v8;
  _QWORD ***v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  int v24;

  result = *(unsigned int *)(a1 + 20);
  v7 = *(int *)(a1 + 24);
  if ((int)result < (int)v7)
  {
LABEL_4:
    v14 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 20) = result + 1;
    if ((a3 & 2) == 0)
      *(_DWORD *)(a1 + 28) = result + 1;
    if (!a2)
    {
      *(_WORD *)(v14 + 56 * (int)result + 16) = 1;
LABEL_10:
      *(_QWORD *)(v14 + 56 * (int)result) = a2;
      v16 = v14 + 56 * (int)result;
      *(_WORD *)(v16 + 18) = a3;
      *(_QWORD *)(v16 + 8) = a1;
      *(_OWORD *)(v16 + 20) = 0u;
      *(_OWORD *)(v16 + 36) = 0u;
      *(_DWORD *)(v16 + 52) = 0;
      return result;
    }
    if ((*(_BYTE *)(a2 + 6) & 8) == 0)
    {
      v15 = 1;
      goto LABEL_30;
    }
    v17 = *(int *)(a2 + 44);
    if (v17 >= 8)
    {
      v18 = 40;
      if (v17 >= 0x100)
      {
        v19 = *(int *)(a2 + 44);
        do
        {
          v18 += 40;
          v17 = v19 >> 4;
          v20 = v19 > 0xFFF;
          v19 >>= 4;
        }
        while (v20);
      }
      if (v17 < 0x10)
      {
        LOBYTE(v21) = v17;
      }
      else
      {
        do
        {
          v18 += 10;
          v21 = v17 >> 1;
          v20 = v17 > 0x1F;
          v17 >>= 1;
        }
        while (v20);
      }
    }
    else
    {
      if (v17 < 2)
      {
        v15 = -270;
        goto LABEL_30;
      }
      v18 = 40;
      do
      {
        v18 -= 10;
        LOBYTE(v21) = 2 * v17;
        v22 = v17 >= 4;
        v17 *= 2;
      }
      while (!v22);
    }
    v15 = v18 + word_1ACCBD832[v21 & 7] - 280;
LABEL_30:
    *(_WORD *)(v14 + 56 * (int)result + 16) = v15;
    do
    {
      v24 = *(_DWORD *)(a2 + 4);
      if ((v24 & 0x82000) == 0)
        break;
      v23 = (uint64_t *)((v24 & 0x80000) != 0 ? *(_QWORD *)(a2 + 32) + 8 : a2 + 16);
      a2 = *v23;
    }
    while (*v23);
    goto LABEL_10;
  }
  v8 = *(const void **)(a1 + 32);
  v9 = *(_QWORD ****)a1;
  v10 = ***(_QWORD ****)a1;
  v11 = 112 * v7;
  v12 = (_QWORD *)sub_1ACBE1124((uint64_t)v10, 112 * v7 + 16);
  if (v12)
  {
    *v12 = v9[11];
    v12[1] = v11;
    v9[11] = (_QWORD **)v12;
    v13 = v12 + 2;
    *(_QWORD *)(a1 + 32) = v13;
    memcpy(v13, v8, 56 * *(int *)(a1 + 20));
    result = *(unsigned int *)(a1 + 20);
    *(_DWORD *)(a1 + 24) *= 2;
    goto LABEL_4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  if (a2 && (a3 & 1) != 0)
    sub_1ACBF8348(v10, (unsigned __int8 *)a2);
  result = 0;
  *(_QWORD *)(a1 + 32) = v8;
  return result;
}

void sub_1ACB90E34(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _WORD *v61;
  unsigned __int8 *n;
  unsigned __int8 *v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  BOOL v67;
  int v68;
  unsigned int *v69;
  int v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int *v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned int *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  BOOL v122;
  char v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  int v127;
  int **v128;
  int v129;
  unsigned __int8 *v130;
  int v131;
  _DWORD **v132;
  int i;
  uint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  _BYTE *v144;
  const char *v145;
  _BYTE *j;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int **v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 *v167;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190;
  unsigned int *v191;
  unsigned __int8 *v192;
  unsigned int *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  _BYTE *k;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  _BYTE *m;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t (*v216)(void);
  uint64_t v217;
  int v218;
  _BYTE *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  size_t v223;
  size_t v224;
  uint64_t v225;
  char *v226;
  unsigned int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t ii;
  __int16 v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v247;
  uint64_t *v248;
  _DWORD *v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  unsigned __int8 *v253[2];
  _QWORD v254[2];

  v254[1] = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v252 = 0;
  v253[0] = 0;
  v10 = *(uint64_t **)v9;
  v11 = **(_QWORD **)v9;
  if (!*(_BYTE *)(v11 + 103))
  {
    v12 = a3;
    v14 = a1;
    v15 = a2[4];
    v16 = a3;
    v249 = (_DWORD *)(v9 + 592);
    v242 = v15 + 56 * (int)a3;
    v17 = *(unsigned __int8 **)v242;
    *(_DWORD *)(v9 + 592) = 0;
    v18 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
    if (v18)
    {
      if (*v18 == 167 && (*((_DWORD *)v18 + 1) & 0x20) == 0)
      {
        v22 = *((_DWORD *)v18 + 11);
        if (*(_DWORD *)(v9 + 600) == v22)
        {
          v21 = 1;
          goto LABEL_16;
        }
        v23 = *(unsigned int *)(v9 + 596);
        if ((int)v23 >= 2)
        {
          v24 = 0;
          v25 = v23 - 1;
          while (*(_DWORD *)(v9 + 604 + 4 * v24) != v22)
          {
            if (v25 == ++v24)
              goto LABEL_15;
          }
          v21 = 1 << (v24 + 1);
LABEL_16:
          v26 = *v17;
          v250 = (uint64_t)a2;
          v251 = v16;
          v248 = v10;
          v244 = v21;
          if (v26 == 49)
          {
            v27 = sub_1ACC0C25C(v10, (uint64_t)v17, a3, a4, a5, a6, a7, a8);
            v14 = a1;
            if (v27)
              return;
            v28 = (int *)*((_QWORD *)v17 + 4);
            v245 = v12;
            v243 = v11;
            if ((v17[5] & 0x10) != 0)
            {
              v43 = sub_1ACC20738(v249, (uint64_t)v28);
              v14 = a1;
              v31 = v43;
              v21 = v244;
            }
            else
            {
              v21 = v244;
              if (v28)
              {
                v29 = *v28;
                if (*v28 >= 1)
                {
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v36 = *(unsigned __int8 **)&v28[6 * v30 + 2];
                    if (v36)
                    {
                      if (*v36 == 167 && (*((_DWORD *)v36 + 1) & 0x20) == 0)
                      {
                        v38 = *((_DWORD *)v36 + 11);
                        if (*(_DWORD *)(v9 + 600) == v38)
                        {
                          v35 = 1;
                          goto LABEL_31;
                        }
                        v39 = *(unsigned int *)(v9 + 596);
                        if ((int)v39 >= 2)
                        {
                          v40 = 0;
                          v41 = v39 - 1;
                          while (*(_DWORD *)(v9 + 604 + 4 * v40) != v38)
                          {
                            if (v41 == ++v40)
                              goto LABEL_30;
                          }
                          v35 = 1 << (v40 + 1);
                          goto LABEL_31;
                        }
                      }
                      else if ((*((_DWORD *)v36 + 1) & 0x810000) == 0)
                      {
                        v35 = sub_1ACC220D4(v249, v36);
                        v21 = v244;
                        v14 = a1;
                        v29 = *v28;
                        goto LABEL_31;
                      }
                    }
LABEL_30:
                    v35 = 0;
LABEL_31:
                    v31 |= v35;
                    if (++v30 >= v29)
                      goto LABEL_71;
                  }
                }
              }
              v31 = 0;
            }
LABEL_71:
            *(_QWORD *)(v15 + 56 * v16 + 40) = v31;
            v49 = v31 | v21;
            v10 = v248;
LABEL_72:
            if (*v249)
              *(_WORD *)(v15 + 56 * v16 + 18) |= 0x1000u;
            v53 = *((_DWORD *)v17 + 1);
            if ((v53 & 3) == 0)
              goto LABEL_78;
            v54 = *((_DWORD *)v17 + 14);
            if (*(_DWORD *)(v9 + 600) == v54)
            {
              v55 = 1;
              if ((v53 & 1) == 0)
              {
LABEL_77:
                if (v55 > v49 >> 1)
                {
LABEL_78:
                  v241 = 0;
LABEL_89:
                  v59 = v15 + 56 * v16;
                  *(_QWORD *)(v59 + 48) = v49;
                  v60 = (_QWORD *)(v59 + 48);
                  *(v60 - 3) = -1;
                  *((_WORD *)v60 - 14) = 0;
                  v61 = (_WORD *)v60 - 14;
                  if (v26 > 0x39 || ((1 << v26) & 0x3E6200000000000) == 0)
                  {
                    v91 = *v17;
                    if (v91 > 0x32)
                    {
                      v85 = v250;
                      if (v91 == 51)
                      {
                        v107 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                        if (*v107 == 167 && (v53 & 1) == 0 && (*((_DWORD *)v107 + 12) & 0x80000000) == 0)
                        {
                          v108 = sub_1ACB8B290(v243, *((unsigned __int8 **)v17 + 2), 0, 0);
                          v109 = sub_1ACB6DDF8(v243, 121, 0, 0);
                          v110 = (uint64_t)v108;
                          v10 = v248;
                          v111 = sub_1ACC0241C(v248, 54, v110, v109);
                          v112 = sub_1ACB90C28(v250, v111, 131);
                          if (v112)
                          {
                            v113 = *(_QWORD *)(v250 + 32) + 56 * v112;
                            *(_QWORD *)(v113 + 40) = 0;
                            *(_QWORD *)(v113 + 28) = *(_QWORD *)(v107 + 44);
                            *(_WORD *)(v113 + 20) = 4;
                            v114 = *(_QWORD *)(v250 + 32);
                            v115 = v114 + 56 * v112;
                            *(_DWORD *)(v115 + 24) = v245;
                            v116 = v114 + 56 * v16;
                            *(_WORD *)(v115 + 16) = *(_WORD *)(v116 + 16);
                            ++*(_BYTE *)(v116 + 22);
                            *(_WORD *)(v116 + 18) |= 8u;
                            v242 = v116;
                            *(_QWORD *)(v113 + 48) = *(_QWORD *)(v116 + 48);
                          }
                        }
                        goto LABEL_221;
                      }
                      if (v91 == 172)
                      {
                        if (*(_BYTE *)(v250 + 16) != 44
                          || !sub_1ACC21A24((uint64_t)v10, (uint64_t)v17, (uint64_t *)v253, (_BOOL4 *)&v252 + 1, &v252))
                        {
                          goto LABEL_221;
                        }
                        v101 = *(unsigned __int8 **)(*((_QWORD *)v17 + 4) + 32);
                        v102 = v253[0];
                        if (v253[0])
                          v103 = sub_1ACB8B290(v243, v253[0], 0, 0);
                        else
                          v103 = 0;
                        v218 = v252;
                        if ((_DWORD)v252)
                        {
                          if (!*(_BYTE *)(*v248 + 103))
                          {
                            *(_WORD *)(v15 + 56 * v16 + 18) |= 0x400u;
                            v219 = (_BYTE *)*((_QWORD *)v102 + 1);
                            v220 = *v219;
                            if (*v219)
                            {
                              v221 = 0;
                              do
                              {
                                *v219 = v220 & (~byte_1ACCB6548[v220] | 0xDF);
                                *(_BYTE *)(*((_QWORD *)v103 + 1) + v221++) = byte_1ACCB6333[v220];
                                v219 = (_BYTE *)(v221 + *((_QWORD *)v102 + 1));
                                v220 = *v219;
                              }
                              while (*v219);
                            }
                          }
                        }
                        if (!*(_BYTE *)(v243 + 103))
                        {
                          v222 = *((_QWORD *)v103 + 1);
                          if (v222)
                            v223 = strlen(*((const char **)v103 + 1)) & 0x3FFFFFFF;
                          else
                            v223 = 0;
                          v224 = v223 - 1;
                          v225 = *(unsigned __int8 *)(v222 + v224);
                          if (v218)
                          {
                            if ((_DWORD)v225 == 64)
                              HIDWORD(v252) = 0;
                            LOBYTE(v225) = byte_1ACCB6333[v225];
                          }
                          *(_BYTE *)(v222 + v224) = v225 + 1;
                        }
                        if (v218)
                          v226 = "NOCASE";
                        else
                          v226 = "BINARY";
                        if (v101)
                          v227 = sub_1ACB8B290(v243, v101, 0, 0);
                        else
                          v227 = 0;
                        v228 = sub_1ACC10384(v248, (uint64_t)v227, v226);
                        v229 = sub_1ACC0241C(v248, 57, v228, (uint64_t)v102);
                        if (v229 && (*((_DWORD *)v17 + 1) & 3) != 0)
                        {
                          *(_DWORD *)(v229 + 4) |= *((_DWORD *)v17 + 1) & 3;
                          *(_DWORD *)(v229 + 56) = *((_DWORD *)v17 + 14);
                        }
                        v230 = sub_1ACB90C28(v250, v229, 259);
                        if (v101)
                          v231 = sub_1ACB8B290(v243, v101, 0, 0);
                        else
                          v231 = 0;
                        v232 = sub_1ACC10384(v248, (uint64_t)v231, v226);
                        v233 = sub_1ACC0241C(v248, 56, v232, (uint64_t)v103);
                        if (v233 && (*((_DWORD *)v17 + 1) & 3) != 0)
                        {
                          *(_DWORD *)(v233 + 4) |= *((_DWORD *)v17 + 1) & 3;
                          *(_DWORD *)(v233 + 56) = *((_DWORD *)v17 + 14);
                        }
                        v234 = sub_1ACB90C28(v250, v233, 259);
                        sub_1ACB90E34(a1, v250, v230);
                        sub_1ACB90E34(a1, v250, v234);
                        v235 = *(_QWORD *)(v250 + 32);
                        v242 = v235 + 56 * v16;
                        if (HIDWORD(v252))
                        {
                          v236 = v235 + 56 * (int)v230;
                          *(_DWORD *)(v236 + 24) = v245;
                          v237 = v235 + 56 * v16;
                          *(_WORD *)(v236 + 16) = *(_WORD *)(v237 + 16);
                          LOBYTE(v236) = *(_BYTE *)(v237 + 22);
                          v238 = v235 + 56 * (int)v234;
                          *(_DWORD *)(v238 + 24) = v245;
                          *(_WORD *)(v238 + 16) = *(_WORD *)(v237 + 16);
                          *(_BYTE *)(v237 + 22) = v236 + 2;
                        }
                        goto LABEL_151;
                      }
                    }
                    else
                    {
                      v85 = v250;
                      if (v91 == 43)
                      {
                        sub_1ACC20E64(v14, v250, v245);
                        v242 = *(_QWORD *)(v250 + 32) + 56 * v16;
                        goto LABEL_221;
                      }
                      if (v91 == 48)
                      {
                        if (*(_BYTE *)(v250 + 16) == 44)
                        {
                          v92 = *((_QWORD *)v17 + 4);
                          v93 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                          if (v93)
                            v94 = sub_1ACB8B290(v243, v93, 0, 0);
                          else
                            v94 = 0;
                          v182 = *(unsigned __int8 **)(v92 + 8);
                          if (v182)
                            v183 = sub_1ACB8B290(v243, v182, 0, 0);
                          else
                            v183 = 0;
                          v184 = sub_1ACC0241C(v10, 57, (uint64_t)v94, (uint64_t)v183);
                          if (v184 && (*((_DWORD *)v17 + 1) & 3) != 0)
                          {
                            *(_DWORD *)(v184 + 4) |= *((_DWORD *)v17 + 1) & 3;
                            *(_DWORD *)(v184 + 56) = *((_DWORD *)v17 + 14);
                          }
                          v185 = sub_1ACB90C28(v250, v184, 3);
                          v186 = v185;
                          sub_1ACB90E34(a1, v250, v185);
                          v187 = *(_QWORD *)(v250 + 32);
                          v188 = v187 + 56 * v186;
                          *(_DWORD *)(v188 + 24) = v245;
                          v189 = v187 + 56 * v16;
                          *(_WORD *)(v188 + 16) = *(_WORD *)(v189 + 16);
                          ++*(_BYTE *)(v189 + 22);
                          v190 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                          if (v190)
                            v191 = sub_1ACB8B290(v243, v190, 0, 0);
                          else
                            v191 = 0;
                          v192 = *(unsigned __int8 **)(v92 + 32);
                          if (v192)
                            v193 = sub_1ACB8B290(v243, v192, 0, 0);
                          else
                            v193 = 0;
                          v194 = sub_1ACC0241C(v10, 55, (uint64_t)v191, (uint64_t)v193);
                          if (v194 && (*((_DWORD *)v17 + 1) & 3) != 0)
                          {
                            *(_DWORD *)(v194 + 4) |= *((_DWORD *)v17 + 1) & 3;
                            *(_DWORD *)(v194 + 56) = *((_DWORD *)v17 + 14);
                          }
                          v195 = sub_1ACB90C28(v250, v194, 3);
                          v196 = v195;
                          sub_1ACB90E34(a1, v250, v195);
                          v197 = *(_QWORD *)(v250 + 32);
                          v198 = v197 + 56 * v196;
                          *(_DWORD *)(v198 + 24) = v245;
                          v199 = v197 + 56 * v16;
                          *(_WORD *)(v198 + 16) = *(_WORD *)(v199 + 16);
                          v242 = v199;
                          ++*(_BYTE *)(v199 + 22);
                        }
                        goto LABEL_221;
                      }
                    }
LABEL_222:
                    if (v91 == 53)
                    {
LABEL_225:
                      v126 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                      v127 = *v126;
                      if (v127 == 176)
                        v127 = v126[2];
                      if (v127 == 138)
                      {
                        v128 = (int **)(*((_QWORD *)v126 + 4) + 32);
                      }
                      else
                      {
                        if (v127 != 177)
                          goto LABEL_258;
                        v128 = (int **)(v126 + 32);
                      }
                      v129 = **v128;
                      if (v129 >= 2)
                      {
                        v130 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                        v131 = *v130;
                        if (v131 == 176)
                          v131 = v130[2];
                        if (v131 == 138)
                        {
                          v132 = (_DWORD **)(*((_QWORD *)v130 + 4) + 32);
                        }
                        else
                        {
                          if (v131 != 177)
                            goto LABEL_258;
                          v132 = (_DWORD **)(v130 + 32);
                        }
                        if (**v132 == v129
                          && ((v126[5] & 0x10) == 0 || (v130[5] & 0x10) == 0)
                          && *(_BYTE *)(v85 + 16) == 44)
                        {
                          for (i = 0; i != v129; ++i)
                          {
                            v135 = sub_1ACC21FBC((uint64_t)v10, *((unsigned __int8 **)v17 + 2), i, v129);
                            v136 = sub_1ACC21FBC((uint64_t)v10, *((unsigned __int8 **)v17 + 3), i, v129);
                            v137 = sub_1ACC0241C(v10, *v17, (uint64_t)v135, (uint64_t)v136);
                            if (v137 && (*((_DWORD *)v17 + 1) & 3) != 0)
                            {
                              *(_DWORD *)(v137 + 4) |= *((_DWORD *)v17 + 1) & 3;
                              *(_DWORD *)(v137 + 56) = *((_DWORD *)v17 + 14);
                            }
                            v134 = sub_1ACB90C28(v85, v137, 32769);
                            sub_1ACB90E34(a1, v85, v134);
                          }
                          v181 = *(_QWORD *)(v85 + 32) + 56 * v16;
                          *(_WORD *)(v181 + 18) |= 6u;
                          *(_WORD *)(v181 + 20) = 0x2000;
                          goto LABEL_383;
                        }
                      }
LABEL_258:
                      if (*(_BYTE *)(v85 + 16) != 44)
                      {
LABEL_383:
                        v217 = *(_QWORD *)(v250 + 32) + 56 * v251;
                        *(_QWORD *)(v217 + 40) |= v241;
                        return;
                      }
                      if (v91 - 51 >= 2 && v91 != 171)
                      {
                        if (v91 == 172)
                        {
                          v142 = *((_QWORD *)v17 + 4);
                          if (v142)
                          {
                            if (*(_DWORD *)v142 == 2)
                            {
                              v143 = *(unsigned __int8 **)(v142 + 32);
                              if (*v143 == 167 && *(_BYTE *)(*((_QWORD *)v143 + 9) + 63) == 1)
                              {
                                v144 = (_BYTE *)*((_QWORD *)v17 + 1);
                                v145 = "match";
                                for (j = v144; ; ++j)
                                {
                                  v157 = *j;
                                  v158 = *(unsigned __int8 *)v145;
                                  if ((_DWORD)v157 == (_DWORD)v158)
                                  {
                                    if (!*j)
                                    {
                                      v159 = 0;
LABEL_294:
                                      LOBYTE(v247) = (&off_1E5C745A0)[2 * v159 + 1];
                                      v148 = *(unsigned __int8 **)(v142 + 8);
                                      v149 = 1;
LABEL_299:
                                      v160 = v9 + 604;
                                      while (2)
                                      {
                                        v167 = v143;
                                        if (v148)
                                        {
                                          if (*v148 == 167 && (*((_DWORD *)v148 + 1) & 0x20) == 0)
                                          {
                                            v170 = *((_DWORD *)v148 + 11);
                                            if (*(_DWORD *)(v9 + 600) == v170)
                                            {
                                              v169 = 1;
                                              if (v143)
                                                goto LABEL_318;
                                              goto LABEL_334;
                                            }
                                            v171 = *(unsigned int *)(v9 + 596);
                                            if ((int)v171 >= 2)
                                            {
                                              v172 = 0;
                                              v173 = v171 - 1;
                                              while (*(_DWORD *)(v160 + 4 * v172) != v170)
                                              {
                                                if (v173 == ++v172)
                                                  goto LABEL_317;
                                              }
                                              v169 = 1 << (v172 + 1);
                                              if (v143)
                                                goto LABEL_318;
                                              goto LABEL_334;
                                            }
                                          }
                                          else if ((*((_DWORD *)v148 + 1) & 0x810000) == 0)
                                          {
                                            v169 = sub_1ACC220D4(v249, v148);
                                            if (!v143)
                                              goto LABEL_334;
LABEL_318:
                                            if (*v143 != 167 || (*((_DWORD *)v143 + 1) & 0x20) != 0)
                                            {
                                              if ((*((_DWORD *)v143 + 1) & 0x810000) != 0
                                                || (sub_1ACC220D4(v249, v143) & v169) == 0)
                                              {
                                                goto LABEL_334;
                                              }
LABEL_301:
                                              v143 = v148;
                                              v148 = v167;
                                              if (v149-- <= 1)
                                                goto LABEL_383;
                                              continue;
                                            }
                                            v175 = *((_DWORD *)v143 + 11);
                                            if (*(_DWORD *)(v9 + 600) == v175)
                                            {
                                              if ((v169 & 1) != 0)
                                                goto LABEL_301;
                                            }
                                            else
                                            {
                                              v176 = *(unsigned int *)(v9 + 596);
                                              if ((int)v176 >= 2)
                                              {
                                                v177 = 0;
                                                v178 = v176 - 1;
                                                while (*(_DWORD *)(v160 + 4 * v177) != v175)
                                                {
                                                  if (v178 == ++v177)
                                                    goto LABEL_334;
                                                }
                                                if (((1 << (v177 + 1)) & v169) != 0)
                                                  goto LABEL_301;
                                              }
                                            }
LABEL_334:
                                            if (v148)
                                              v179 = sub_1ACB8B290(v243, v148, 0, 0);
                                            else
                                              v179 = 0;
                                            v180 = sub_1ACC0241C(v248, 46, 0, (uint64_t)v179);
                                            if ((v17[4] & 1) != 0 && v180)
                                            {
                                              *(_DWORD *)(v180 + 4) |= 1u;
                                              *(_DWORD *)(v180 + 56) = *((_DWORD *)v17 + 14);
                                            }
                                            v161 = sub_1ACB90C28(v250, v180, 3);
                                            v162 = *(_QWORD *)(v250 + 32) + 56 * v161;
                                            *(_QWORD *)(v162 + 40) = v169;
                                            *(_QWORD *)(v162 + 28) = *(_QWORD *)(v143 + 44);
                                            *(_WORD *)(v162 + 20) = 64;
                                            *(_BYTE *)(v162 + 23) = v247;
                                            v163 = *(_QWORD *)(v250 + 32);
                                            v164 = v163 + 56 * v161;
                                            *(_DWORD *)(v164 + 24) = v245;
                                            v165 = v163 + 56 * v251;
                                            *(_WORD *)(v164 + 16) = *(_WORD *)(v165 + 16);
                                            ++*(_BYTE *)(v165 + 22);
                                            *(_WORD *)(v165 + 18) |= 8u;
                                            *(_QWORD *)(v162 + 48) = *(_QWORD *)(v165 + 48);
                                            goto LABEL_301;
                                          }
                                        }
                                        break;
                                      }
LABEL_317:
                                      v169 = 0;
                                      if (!v143)
                                        goto LABEL_334;
                                      goto LABEL_318;
                                    }
                                  }
                                  else if (byte_1ACCB6333[v157] != byte_1ACCB6333[v158])
                                  {
                                    v200 = "glob";
                                    v159 = 1;
                                    for (k = (_BYTE *)*((_QWORD *)v17 + 1); ; ++k)
                                    {
                                      v202 = *k;
                                      v203 = *(unsigned __int8 *)v200;
                                      if ((_DWORD)v202 == (_DWORD)v203)
                                      {
                                        if (!*k)
                                          goto LABEL_294;
                                      }
                                      else if (byte_1ACCB6333[v202] != byte_1ACCB6333[v203])
                                      {
                                        v204 = "like";
                                        v159 = 2;
                                        for (m = (_BYTE *)*((_QWORD *)v17 + 1); ; ++m)
                                        {
                                          v206 = *m;
                                          v207 = *(unsigned __int8 *)v204;
                                          if ((_DWORD)v206 == (_DWORD)v207)
                                          {
                                            if (!*m)
                                              goto LABEL_294;
                                          }
                                          else if (byte_1ACCB6333[v206] != byte_1ACCB6333[v207])
                                          {
                                            v208 = "regexp";
                                            v159 = 3;
                                            while (1)
                                            {
                                              v209 = *v144;
                                              v210 = *(unsigned __int8 *)v208;
                                              if ((_DWORD)v209 == (_DWORD)v210)
                                              {
                                                if (!*v144)
                                                  goto LABEL_294;
                                              }
                                              else if (byte_1ACCB6333[v209] != byte_1ACCB6333[v210])
                                              {
                                                goto LABEL_376;
                                              }
                                              ++v144;
                                              ++v208;
                                            }
                                          }
                                          ++v204;
                                        }
                                      }
                                      ++v200;
                                    }
                                  }
                                  ++v145;
                                }
                              }
LABEL_376:
                              v143 = *(unsigned __int8 **)(v142 + 8);
                              if (*v143 == 167)
                              {
                                v211 = *((_QWORD *)v143 + 9);
                                if (*(_BYTE *)(v211 + 63) == 1)
                                {
                                  v253[1] = 0;
                                  v254[0] = 0;
                                  v212 = (uint64_t **)(v211 + 80);
                                  do
                                  {
                                    v213 = *v212;
                                    v214 = *v212;
                                    v215 = *v214;
                                    v212 = (uint64_t **)(v214 + 5);
                                  }
                                  while (v215 != v243);
                                  v216 = *(uint64_t (**)(void))(*(_QWORD *)v213[2] + 144);
                                  if (v216)
                                  {
                                    v247 = v216();
                                    if (v247 >= 150)
                                    {
                                      v148 = *(unsigned __int8 **)(v142 + 32);
                                      v149 = 1;
                                      goto LABEL_299;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        goto LABEL_383;
                      }
                      v148 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                      v147 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                      if (*v148 == 167)
                      {
                        v149 = *(unsigned __int8 *)(*((_QWORD *)v148 + 9) + 63) == 1;
                        if (v147)
                        {
LABEL_269:
                          if (*v147 == 167 && *(_BYTE *)(*((_QWORD *)v147 + 9) + 63) == 1)
                          {
                            ++v149;
                            v143 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                          }
                          else
                          {
                            v143 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                            v148 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                          }
LABEL_285:
                          switch(v91)
                          {
                            case 0xABu:
                              LOBYTE(v247) = 69;
                              break;
                            case 0x34u:
                              LOBYTE(v247) = 68;
                              break;
                            case 0x33u:
                              LOBYTE(v247) = 70;
                              break;
                            default:
                              LOBYTE(v247) = 0;
                              break;
                          }
                          if (v149)
                            goto LABEL_299;
                          goto LABEL_383;
                        }
                      }
                      else
                      {
                        v149 = 0;
                        if (v147)
                          goto LABEL_269;
                      }
                      v143 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                      v148 = 0;
                      goto LABEL_285;
                    }
                    if (v91 != 49)
                    {
                      if (v91 != 45)
                        goto LABEL_258;
                      goto LABEL_225;
                    }
                    if (*(_DWORD *)(v242 + 36))
                      goto LABEL_258;
                    v138 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                    if (*v138 != 177)
                      goto LABEL_258;
                    if ((v17[5] & 0x10) == 0)
                      goto LABEL_258;
                    v139 = *((_QWORD *)v17 + 4);
                    if (*(_QWORD *)(v139 + 80))
                    {
                      if ((*(_BYTE *)(v139 + 5) & 2) == 0)
                        goto LABEL_258;
                    }
                    if (*(_QWORD *)(v139 + 112) || *(_BYTE *)(v85 + 16) != 44)
                      goto LABEL_258;
                    v140 = 177;
                    v141 = 1;
                    while (v140 != 138)
                    {
                      if (v140 == 177)
                      {
                        v155 = (int **)(v138 + 32);
LABEL_278:
                        v156 = **v155;
                        goto LABEL_280;
                      }
                      v156 = 1;
LABEL_280:
                      if (v141 - 1 >= v156)
                        goto LABEL_383;
                      v150 = sub_1ACB90C28(v250, (uint64_t)v17, 32770);
                      v151 = v150;
                      *(_DWORD *)(*(_QWORD *)(v250 + 32) + 56 * (int)v150 + 36) = v141;
                      sub_1ACB90E34(a1, v250, v150);
                      v152 = *(_QWORD *)(v250 + 32);
                      v153 = v152 + 56 * v151;
                      *(_DWORD *)(v153 + 24) = v245;
                      v154 = v152 + 56 * v251;
                      *(_WORD *)(v153 + 16) = *(_WORD *)(v154 + 16);
                      ++*(_BYTE *)(v154 + 22);
                      v138 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
                      v140 = *v138;
                      ++v141;
                      if (v140 == 176)
                        v140 = v138[2];
                    }
                    v155 = (int **)(*((_QWORD *)v138 + 4) + 32);
                    goto LABEL_278;
                  }
                  for (n = (unsigned __int8 *)*((_QWORD *)v17 + 2); n; n = (unsigned __int8 *)*((_QWORD *)n + 2))
                  {
                    if ((n[5] & 0x20) == 0)
                      break;
                  }
                  v63 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                  for (ii = v49; v63; v63 = (unsigned __int8 *)*((_QWORD *)v63 + 2))
                  {
                    if ((v63[5] & 0x20) == 0)
                      break;
                  }
                  v64 = v15 + 56 * v16;
                  if ((*(_QWORD *)(v64 + 40) & v21) != 0)
                    v65 = 2048;
                  else
                    v65 = 0x3FFF;
                  v240 = v65;
                  v66 = *(_DWORD *)(v64 + 36);
                  v67 = __OFSUB__(v66, 1);
                  v68 = v66 - 1;
                  if (v68 < 0 == v67)
                    n = *(unsigned __int8 **)(*((_QWORD *)n + 4) + 24 * v68 + 8);
                  v69 = (unsigned int *)v60 - 5;
                  v70 = *n;
                  v71 = n;
                  if (v26 - 54 <= 3 && v70 == 177)
                  {
                    v71 = *(unsigned __int8 **)(*((_QWORD *)n + 4) + 8);
                    v70 = *v71;
                  }
                  if (v70 == 167)
                  {
                    v72 = *((_DWORD *)v71 + 11);
                    v73 = *((_DWORD *)v71 + 12);
                    v254[0] = __PAIR64__(v73, v72);
                  }
                  else
                  {
                    v74 = *v14;
                    if ((int)v74 < 1)
                      goto LABEL_125;
                    a4 = 0;
                    while (1)
                    {
                      v75 = *(_QWORD *)(*(_QWORD *)&v14[26 * a4 + 10] + 16);
                      if (v75)
                        break;
LABEL_109:
                      if (++a4 == v74)
                        goto LABEL_125;
                    }
                    while (!*(_QWORD *)(v75 + 80))
                    {
                      v75 = *(_QWORD *)(v75 + 40);
                      if (!v75)
                        goto LABEL_109;
                    }
                    v76 = sub_1ACC22654(v14, v254, v71, a4);
                    v14 = a1;
                    if (!v76)
                    {
LABEL_125:
                      if (v26 == 45)
                        *(_WORD *)(v15 + 56 * v16 + 18) |= 0x800u;
                      if (v63)
                      {
                        v78 = *v63;
                        v79 = v63;
                        if (v26 - 54 <= 3 && v78 == 177)
                        {
                          v79 = *(unsigned __int8 **)(*((_QWORD *)v63 + 4) + 8);
                          v78 = *v79;
                        }
                        if (v78 == 167)
                        {
                          v254[0] = *(_QWORD *)(v79 + 44);
                          goto LABEL_141;
                        }
                        v80 = *v14;
                        if ((int)v80 >= 1)
                        {
                          v81 = 0;
                          while (1)
                          {
                            v82 = *(_QWORD *)(*(_QWORD *)&v14[26 * v81 + 10] + 16);
                            if (v82)
                              break;
LABEL_135:
                            if (++v81 == v80)
                              goto LABEL_146;
                          }
                          while (!*(_QWORD *)(v82 + 80))
                          {
                            v82 = *(_QWORD *)(v82 + 40);
                            if (!v82)
                              goto LABEL_135;
                          }
                          if (sub_1ACC22654(v14, v254, v79, v81))
                          {
LABEL_141:
                            if ((v63[4] & 0x20) == 0)
                            {
                              if ((*((_DWORD *)v60 - 5) & 0x80000000) != 0)
                              {
                                v95 = 0;
                                v96 = v242;
                                v84 = v17;
                                v85 = v250;
                                v10 = v248;
                              }
                              else
                              {
                                v83 = (unsigned __int8 *)sub_1ACB8B290(v243, v17, 0, 0);
                                v84 = v83;
                                v85 = v250;
                                v10 = v248;
                                if (*(_BYTE *)(v243 + 103))
                                {
                                  if (v83)
                                    sub_1ACBF8348((_QWORD *)v243, v83);
                                  return;
                                }
                                v104 = sub_1ACB90C28(v250, (uint64_t)v83, 3);
                                if (!v104)
                                  return;
                                v105 = *(_QWORD *)(v250 + 32);
                                v96 = v105 + 56 * v104;
                                *(_DWORD *)(v96 + 24) = v245;
                                v106 = v105 + 56 * v251;
                                *(_WORD *)(v96 + 16) = *(_WORD *)(v106 + 16);
                                ++*(_BYTE *)(v106 + 22);
                                if (v26 == 45)
                                  *(_WORD *)(v105 + 56 * v104 + 18) |= 0x800u;
                                v242 = v105 + 56 * v251;
                                *(_WORD *)(v242 + 18) |= 8u;
                                if (sub_1ACC20D30((uint64_t)v248, (unsigned __int8 **)v84))
                                {
                                  *(_WORD *)(v105 + 56 * v251 + 20) |= 0x800u;
                                  v95 = 2048;
                                }
                                else
                                {
                                  v95 = 0;
                                }
                              }
                              v97 = v244;
                              v98 = (unsigned __int8 *)*((_QWORD *)v84 + 2);
                              if (*v98 == 177)
                                goto LABEL_209;
                              v99 = (unsigned __int8 *)*((_QWORD *)v84 + 3);
                              if (*v99 == 177)
                                goto LABEL_209;
                              if ((v98[5] & 2) != 0)
                              {
                                v99 = (unsigned __int8 *)*((_QWORD *)v84 + 2);
                              }
                              else if ((v99[5] & 2) == 0)
                              {
                                v100 = sub_1ACB78620((uint64_t)v10, v98, (uint64_t)v79, a4, a5, a6, a7, a8);
                                if (v100)
                                {
LABEL_201:
                                  v117 = (unsigned __int8 *)*((_QWORD *)v84 + 3);
                                  if ((v117[5] & 2) != 0)
                                  {
                                    v120 = (uint64_t)v10;
                                  }
                                  else
                                  {
                                    v118 = (unsigned __int8 *)*((_QWORD *)v84 + 2);
                                    if (!v118 || (v118[5] & 2) == 0)
                                    {
                                      v119 = sub_1ACB78620((uint64_t)v10, v117, (uint64_t)v79, a4, a5, a6, a7, a8);
                                      if (v119)
                                      {
LABEL_208:
                                        v97 = v244;
                                        if (v100 == v119)
                                        {
LABEL_210:
                                          *((int8x16_t *)v84 + 1) = vextq_s8(*((int8x16_t *)v84 + 1), *((int8x16_t *)v84 + 1), 8uLL);
                                          v121 = *v84;
                                          v122 = v121 >= 0x36;
                                          v123 = v121 - 54;
                                          if (v122)
                                            *v84 = (v123 ^ 2) + 54;
                                          *(_QWORD *)(v96 + 28) = v254[0];
                                          *(_QWORD *)(v96 + 40) = v241 | v97;
                                          *(_QWORD *)(v96 + 48) = ii;
                                          v124 = *v84;
                                          switch(v124)
                                          {
                                            case '-':
                                              LOWORD(v125) = 128;
                                              break;
                                            case '1':
                                              LOWORD(v125) = 1;
                                              break;
                                            case '2':
                                              LOWORD(v125) = 256;
                                              break;
                                            default:
                                              v125 = 2 << (v124 - 53);
                                              break;
                                          }
                                          *(_WORD *)(v96 + 20) = (v125 + v95) & v240;
                                          v16 = v251;
                                          goto LABEL_221;
                                        }
LABEL_209:
                                        *((_DWORD *)v84 + 1) ^= 0x400u;
                                        goto LABEL_210;
                                      }
                                    }
                                    v120 = (uint64_t)v10;
                                    v117 = v118;
                                  }
                                  v119 = sub_1ACB78620(v120, v117, (uint64_t)v79, a4, a5, a6, a7, a8);
                                  goto LABEL_208;
                                }
                              }
                              v100 = sub_1ACB78620((uint64_t)v10, v99, (uint64_t)v79, a4, a5, a6, a7, a8);
                              goto LABEL_201;
                            }
                          }
                        }
                      }
LABEL_146:
                      if (v26 == 50)
                      {
                        v86 = *((_DWORD *)v17 + 1);
                        v10 = v248;
                        if ((v86 & 1) == 0)
                        {
                          while (1)
                          {
                            v87 = *n;
                            if ((v87 - 173) >= 2)
                              break;
                            n = (unsigned __int8 *)*((_QWORD *)n + 2);
                          }
                          if (v87 == 176)
                            v87 = n[2];
                          if ((v87 - 153) < 3
                            || v87 == 117
                            || v87 == 167
                            && (n[6] & 0x20) == 0
                            && (v88 = *((_QWORD *)n + 9)) != 0
                            && ((v89 = *((unsigned int *)n + 12), (v89 & 0x80000000) != 0)
                             || (v90 = *(_QWORD *)(v88 + 8)) == 0
                             || (*(_BYTE *)(v90 + 16 * v89 + 8) & 0xF) != 0))
                          {
                            *v17 = -86;
                            *((_QWORD *)v17 + 1) = "false";
                            *((_DWORD *)v17 + 1) = v86 | 0x20000000;
                            *v60 = 0;
                            *v61 = 0;
                          }
                        }
                        v85 = v250;
                        goto LABEL_221;
                      }
                      v85 = v250;
LABEL_151:
                      v10 = v248;
LABEL_221:
                      v91 = *v17;
                      goto LABEL_222;
                    }
                    v72 = v254[0];
                    v73 = HIDWORD(v254[0]);
                    v69 = (unsigned int *)v60 - 5;
                  }
                  *v69 = v72;
                  *(_DWORD *)(v64 + 32) = v73;
                  switch(v26)
                  {
                    case '-':
                      LOWORD(v77) = 128;
                      break;
                    case '1':
                      LOWORD(v77) = 1;
                      break;
                    case '2':
                      LOWORD(v77) = 256;
                      break;
                    default:
                      v77 = 2 << (v26 - 53);
                      break;
                  }
                  *v61 = v77 & v240;
                  goto LABEL_125;
                }
                if (*v14 < 1 || (v14[17] & 0x40) == 0)
                {
                  v241 = 0;
                  v53 &= ~2u;
                  *((_DWORD *)v17 + 1) = v53;
                  goto LABEL_89;
                }
LABEL_120:
                sub_1ACBCB308((uint64_t)v10, "ON clause references tables to its right", a3, a4, a5, a6, a7, a8, a9);
                return;
              }
            }
            else
            {
              v56 = *(unsigned int *)(v9 + 596);
              if ((int)v56 < 2)
              {
LABEL_83:
                v55 = 0;
                if ((v53 & 1) == 0)
                  goto LABEL_77;
              }
              else
              {
                v57 = 0;
                v58 = v56 - 1;
                while (*(_DWORD *)(v9 + 604 + 4 * v57) != v54)
                {
                  if (v58 == ++v57)
                    goto LABEL_83;
                }
                v55 = 1 << (v57 + 1);
                if ((v53 & 1) == 0)
                  goto LABEL_77;
              }
            }
            v49 |= v55;
            if (v55 > v49 >> 1)
            {
              v241 = v55 - 1;
              goto LABEL_89;
            }
            goto LABEL_120;
          }
          v32 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
          if (v32)
          {
            if (*v32 == 167 && (*((_DWORD *)v32 + 1) & 0x20) == 0)
            {
              v42 = *((_DWORD *)v32 + 11);
              if (*(_DWORD *)(v9 + 600) == v42)
              {
                v34 = 1;
                goto LABEL_55;
              }
              v44 = *(unsigned int *)(v9 + 596);
              if ((int)v44 >= 2)
              {
                v45 = 0;
                v46 = v44 - 1;
                while (*(_DWORD *)(v9 + 604 + 4 * v45) != v42)
                {
                  if (v46 == ++v45)
                    goto LABEL_54;
                }
                v34 = 1 << (v45 + 1);
LABEL_55:
                *(_QWORD *)(v15 + 56 * v16 + 40) = v34;
                v47 = *((_DWORD *)v17 + 1);
                v245 = v12;
                v243 = v11;
                if (*((_QWORD *)v17 + 2) && (v47 & 0x41000) == 0 && !*((_QWORD *)v17 + 4))
                {
                  v49 = v34 | v21;
                  goto LABEL_72;
                }
                if (*v17 != 167 || (v47 & 0x20) != 0)
                {
                  if ((v47 & 0x810000) == 0)
                  {
                    v49 = sub_1ACC220D4(v249, v17);
                    v21 = v244;
                    v14 = a1;
                    goto LABEL_72;
                  }
                }
                else
                {
                  v48 = *((_DWORD *)v17 + 11);
                  if (*(_DWORD *)(v9 + 600) == v48)
                  {
                    v49 = 1;
                    goto LABEL_72;
                  }
                  v50 = *(unsigned int *)(v9 + 596);
                  if ((int)v50 >= 2)
                  {
                    v51 = 0;
                    v52 = v50 - 1;
                    while (*(_DWORD *)(v9 + 604 + 4 * v51) != v48)
                    {
                      if (v52 == ++v51)
                        goto LABEL_68;
                    }
                    v49 = 1 << (v51 + 1);
                    goto LABEL_72;
                  }
                }
LABEL_68:
                v49 = 0;
                goto LABEL_72;
              }
            }
            else if ((*((_DWORD *)v32 + 1) & 0x810000) == 0)
            {
              v34 = sub_1ACC220D4(v249, v32);
              v21 = v244;
              v14 = a1;
              goto LABEL_55;
            }
          }
LABEL_54:
          v34 = 0;
          goto LABEL_55;
        }
      }
      else if ((*((_DWORD *)v18 + 1) & 0x810000) == 0)
      {
        v20 = sub_1ACC220D4(v249, v18);
        v14 = a1;
        v21 = v20;
        goto LABEL_16;
      }
    }
LABEL_15:
    v21 = 0;
    goto LABEL_16;
  }
}

uint64_t sub_1ACB92644(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v14;
  BOOL v16;

  while (2)
  {
    v1 = *a1;
LABEL_2:
    switch(v1)
    {
      case 138:
        v2 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 32);
        goto LABEL_14;
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 168:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
        goto LABEL_4;
      case 167:
        v3 = *((_QWORD *)a1 + 9);
        goto LABEL_19;
      case 169:
        v3 = *((_QWORD *)a1 + 9);
        if (!v3)
        {
          if ((*((_DWORD *)a1 + 1) & 0x42000) == 0)
          {
LABEL_15:
            v4 = a1 + 1;
LABEL_16:
            LOBYTE(v5) = *v4;
            return (char)v5;
          }
LABEL_11:
          a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
          continue;
        }
LABEL_19:
        v7 = *((unsigned int *)a1 + 12);
        if ((v7 & 0x80000000) == 0 && (int)v7 < *(__int16 *)(v3 + 54))
        {
          v4 = (_BYTE *)(*(_QWORD *)(v3 + 8) + 16 * v7 + 9);
          goto LABEL_16;
        }
        return 68;
      case 177:
        v2 = *((_QWORD *)a1 + 4);
        goto LABEL_14;
      case 178:
        v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 32) + 32) + 24 * *((int *)a1 + 12);
LABEL_14:
        a1 = *(unsigned __int8 **)(v2 + 8);
        continue;
      default:
        if (v1 == 36)
        {
          v8 = (_BYTE *)*((_QWORD *)a1 + 1);
          v9 = *v8;
          if (!*v8)
            return 67;
          v10 = 0;
          v11 = v8 + 1;
          v12 = 67;
          while (2)
          {
            v10 = byte_1ACCB6333[v9] | (v10 << 8);
            v5 = 66;
            if (v10 > 1668050785)
            {
              if (v10 != 1668050786 && v10 != 1952807028)
                goto LABEL_36;
            }
            else if (v10 == 1651273570)
            {
              v5 = 65;
              if ((_DWORD)v12 != 67 && (_DWORD)v12 != 69)
              {
LABEL_36:
                v16 = v10 == 1718382433 || v10 == 1919246700 || v10 == 1685026146;
                if (v16 && (_DWORD)v12 == 67)
                {
                  v5 = 69;
                }
                else
                {
                  v5 = v12;
                  if ((v10 & 0xFFFFFF) == 0x696E74)
                    return 68;
                }
              }
            }
            else if (v10 != 1667785074)
            {
              goto LABEL_36;
            }
            v14 = *v11++;
            v9 = v14;
            v12 = v5;
            if (!v14)
              return (char)v5;
            continue;
          }
        }
LABEL_4:
        if ((*((_DWORD *)a1 + 1) & 0x42000) != 0)
          goto LABEL_11;
        if (v1 != 176)
          goto LABEL_15;
        v1 = a1[2];
        if (v1 == 176)
          goto LABEL_15;
        goto LABEL_2;
    }
  }
}

uint64_t sub_1ACB92834(uint64_t *a1, unsigned __int8 **a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;
  unsigned __int8 **v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  __int16 v16;
  int v17;
  int v18;
  BOOL v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 **v33;
  _WORD *v34;
  __int16 v35;
  int v36;
  int v37;
  unsigned __int8 **v38;
  BOOL v39;
  __int16 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  signed int v49;
  unint64_t v50;
  int v51;
  int v52;
  unsigned __int8 ***v53;
  unint64_t v54;
  unsigned __int8 ***v55;
  uint64_t v56;
  unsigned __int8 **v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _DWORD *v75;
  int *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  int v85;
  int *v86;
  int *v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  _QWORD *v90;
  unsigned __int8 *v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  _WORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  size_t v105;
  void *v106;
  void *v107;
  _BOOL4 v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t ***v117;
  uint64_t **v118;
  const void *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _BOOL4 v151;
  uint64_t v152;
  unsigned int *v153;
  char v154;
  unsigned int v155;
  int *v156;
  int *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  int v161;
  uint64_t v163;
  uint64_t *v164;
  unsigned int v165;

  v8 = a6;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = *a2;
  v13 = **a2;
  if (v13 == 53)
    goto LABEL_4;
  v14 = a1[2];
  if (v13 == 50)
  {
    v25 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v25)
    {
      sub_1ACBFF5AC(v14, 75, 0, a6, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v25 + 1;
      v26 = *(_QWORD *)(v14 + 136) + 40 * v25;
      *(_QWORD *)v26 = 75;
      *(_DWORD *)(v26 + 8) = a6;
      *(_QWORD *)(v26 + 12) = 0;
      *(_QWORD *)(v26 + 28) = 0;
      *(_QWORD *)(v26 + 20) = 0;
      *(_DWORD *)(v26 + 36) = 0;
    }
    goto LABEL_5;
  }
  if (v13 == 45)
  {
LABEL_4:
    v8 = sub_1ACB7B84C(v11, *((unsigned __int8 **)v12 + 3), a6, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v27 = a5;
  v28 = a4;
  v29 = *((_QWORD *)a3 + 12);
  if ((*(_BYTE *)(v29 + 49) & 4) == 0)
  {
    v30 = *(_QWORD *)(v29 + 32);
    if (v30)
    {
      if (*(_BYTE *)(*(_QWORD *)(v30 + 56) + (int)a4))
        v27 = a5 == 0;
      else
        v27 = a5;
    }
  }
  if ((int)a4 < 1)
  {
LABEL_50:
    v46 = *(unsigned __int16 *)(v29 + 52);
    v155 = a6;
    if ((int)v46 <= (int)a4)
    {
      v49 = 0;
    }
    else
    {
      v47 = *(_QWORD *)(v29 + 64);
      v48 = v46 - (int)a4;
      if (v48 >= 2)
      {
        v51 = 0;
        v52 = 0;
        v50 = (v48 & 0xFFFFFFFFFFFFFFFELL) + (int)a4;
        v53 = (unsigned __int8 ***)(v47 + 8 * (int)a4 + 8);
        v54 = v48 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (**(v53 - 1) == v12)
            ++v51;
          if (**v53 == v12)
            ++v52;
          v53 += 2;
          v54 -= 2;
        }
        while (v54);
        v49 = v52 + v51;
        if (v48 == (v48 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_66;
      }
      else
      {
        v49 = 0;
        v50 = (int)a4;
      }
      v55 = (unsigned __int8 ***)(v47 + 8 * v50);
      v56 = v46 - v50;
      do
      {
        v57 = *v55++;
        if (*v57 == v12)
          ++v49;
        --v56;
      }
      while (v56);
    }
LABEL_66:
    v165 = 0;
    v58 = *((_DWORD *)v12 + 1);
    v163 = v14;
    v164 = v11;
    if ((v58 & 0x1000) == 0 || **(_DWORD **)(*((_QWORD *)v12 + 4) + 32) == 1)
    {
      v59 = sub_1ACBA1EF4(v11, v12, 4, 0, 0, &v165);
      v63 = v163;
      v64 = v59;
      v158 = 0;
      goto LABEL_138;
    }
    if ((v58 & 0x2000000) != 0 && *((_DWORD *)v12 + 11))
    {
      v65 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v66 = *v65;
      if (v66 == 176)
        v66 = v65[2];
      if (v66 == 138)
      {
        v65 = (unsigned __int8 *)*((_QWORD *)v65 + 4);
      }
      else if (v66 != 177)
      {
        v67 = 1;
LABEL_125:
        v104 = *v11;
        if (v49 > (int)v67)
          v67 = v49;
        v105 = 4 * v67;
        if (v104)
          v106 = (void *)sub_1ACBE1124(v104, 4 * v67);
        else
          v106 = (void *)sub_1ACB5D828(4 * v67);
        v107 = v106;
        v158 = v106;
        if (v106)
        {
          bzero(v106, v105);
          v107 = v158;
        }
        v64 = sub_1ACBA1EF4(v11, v12, 4, 0, v107, &v165);
        goto LABEL_137;
      }
      v67 = **((_DWORD **)v65 + 4);
      goto LABEL_125;
    }
    v68 = *v11;
    v69 = sub_1ACB8B290(*v11, v12, 0, 0);
    v70 = v69;
    v152 = v68;
    if (*(_BYTE *)(v68 + 103))
      goto LABEL_77;
    v72 = *((_QWORD *)v69 + 4);
    if (!v72)
      goto LABEL_134;
    v150 = v28;
    v151 = v27;
    v153 = v69;
    v156 = v9;
    while (1)
    {
      if (v72 == *((_QWORD *)v70 + 4))
        v73 = *(_QWORD **)(*((_QWORD *)v70 + 2) + 32);
      else
        v73 = 0;
      v74 = *(_QWORD **)(v72 + 32);
      v159 = v72;
      v160 = v73;
      if (*(unsigned __int16 *)(v29 + 52) > v28)
      {
        v75 = 0;
        v76 = 0;
        v77 = v150;
        while (1)
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v29 + 64) + 8 * v77);
          if (*(unsigned __int8 **)v79 != v12)
            goto LABEL_89;
          v80 = *(int *)(v79 + 36) - 1;
          v81 = &v74[3 * v80];
          v84 = (unsigned __int8 *)v81[1];
          v83 = v81 + 1;
          v82 = v84;
          if (!v84)
            goto LABEL_89;
          if (v76)
          {
            v85 = *v76;
            if (v76[1] > *v76)
            {
              *v76 = v85 + 1;
              v86 = &v76[6 * v85];
              *((_QWORD *)v86 + 2) = 0;
              *((_QWORD *)v86 + 3) = 0;
              *((_QWORD *)v86 + 1) = v82;
              *v83 = 0;
              if (!v73)
                goto LABEL_89;
              goto LABEL_99;
            }
            v87 = sub_1ACC2D4F4(*v164, v76, v82);
          }
          else
          {
            v87 = (int *)sub_1ACC2D490((_QWORD *)*v164, v82);
          }
          v73 = v160;
          v76 = v87;
          *v83 = 0;
          if (!v160)
            goto LABEL_89;
LABEL_99:
          v88 = &v73[3 * v80];
          v91 = (unsigned __int8 *)v88[1];
          v90 = v88 + 1;
          v89 = v91;
          if (v75)
          {
            v92 = *v75;
            if (v75[1] > *v75)
            {
              *v75 = v92 + 1;
              v93 = &v75[6 * v92];
              v93[2] = 0;
              v93[3] = 0;
              v93[1] = v89;
              goto LABEL_88;
            }
            v78 = sub_1ACC2D4F4(*v164, v75, v89);
          }
          else
          {
            v78 = sub_1ACC2D490((_QWORD *)*v164, v89);
          }
          v73 = v160;
          v75 = v78;
LABEL_88:
          *v90 = 0;
LABEL_89:
          if (++v77 >= *(unsigned __int16 *)(v29 + 52))
            goto LABEL_104;
        }
      }
      v76 = 0;
      v75 = 0;
LABEL_104:
      if (v74)
      {
        sub_1ACC010B0((_QWORD *)v152, v74);
        v73 = v160;
      }
      v11 = v164;
      if (v73)
      {
        sub_1ACC010B0((_QWORD *)v152, v73);
        *(_QWORD *)(*((_QWORD *)v153 + 2) + 32) = v75;
      }
      v9 = v156;
      v94 = v159;
      *(_QWORD *)(v159 + 32) = v76;
      if (v75 && *v75 == 1)
      {
        v95 = *((_QWORD *)v75 + 1);
        *((_QWORD *)v75 + 1) = 0;
        v96 = (unsigned __int8 *)*((_QWORD *)v153 + 2);
        if (v96)
          sub_1ACBF8348((_QWORD *)v152, v96);
        *((_QWORD *)v153 + 2) = v95;
        v94 = v159;
      }
      v97 = *(unsigned int **)(v94 + 72);
      v28 = a4;
      v27 = v151;
      v70 = v153;
      if (!v97)
        goto LABEL_80;
      v98 = *v97;
      if ((int)v98 < 1)
        goto LABEL_80;
      if ((_DWORD)v98 == 1)
      {
        v99 = 0;
      }
      else
      {
        v99 = v98 & 0xFFFFFFFE;
        v100 = v97 + 13;
        v101 = v99;
        do
        {
          *(v100 - 12) = 0;
          *v100 = 0;
          v100 += 24;
          v101 -= 2;
        }
        while (v101);
        if (v99 == v98)
          goto LABEL_80;
      }
      v102 = v98 - v99;
      v103 = &v97[6 * v99 + 7];
      do
      {
        *(_WORD *)v103 = 0;
        v103 += 6;
        --v102;
      }
      while (v102);
LABEL_80:
      v72 = *(_QWORD *)(v94 + 80);
      if (!v72)
      {
        if (!*(_BYTE *)(v152 + 103))
        {
LABEL_134:
          v71 = sub_1ACB5733C(*v11, 4 * v49);
          v64 = sub_1ACBA1EF4(v11, v70, 4, 0, v71, &v165);
          *((_DWORD *)v12 + 11) = v165;
          goto LABEL_135;
        }
LABEL_77:
        v71 = 0;
        v64 = 5;
LABEL_135:
        v158 = v71;
        if (v70)
          sub_1ACBF8348((_QWORD *)v152, (unsigned __int8 *)v70);
LABEL_137:
        v63 = v163;
LABEL_138:
        if (v64 == 4)
          v108 = !v27;
        else
          v108 = v27;
        if (v108)
          v109 = 32;
        else
          v109 = 36;
        v110 = v165;
        v111 = *(_DWORD *)(v63 + 144);
        if (*(_DWORD *)(v63 + 148) <= v111)
        {
          sub_1ACBFF5AC(v63, v109, v165, 0, 0, v60, v61, v62);
        }
        else
        {
          *(_DWORD *)(v63 + 144) = v111 + 1;
          v112 = *(_QWORD *)(v63 + 136) + 40 * v111;
          *(_BYTE *)v112 = v109;
          *(_WORD *)(v112 + 2) = 0;
          *(_DWORD *)(v112 + 4) = v110;
          *(_BYTE *)(v112 + 1) = 0;
          *(_OWORD *)(v112 + 8) = 0u;
          *(_OWORD *)(v112 + 24) = 0u;
        }
        v113 = *(_DWORD *)(v29 + 48);
        *(_DWORD *)(v29 + 48) = v113 | 0x800;
        if (!v9[20])
        {
          v114 = *((_DWORD *)v11 + 17) - 1;
          *((_DWORD *)v11 + 17) = v114;
          v9[4] = v114;
        }
        v161 = v64;
        if ((int)a4 >= 1 && (v113 & 0x100000) == 0)
          *(_DWORD *)(v29 + 48) = v113 | 0x40800;
        v115 = v9[20];
        v116 = v115 + v49;
        v9[20] = v116;
        v117 = (uint64_t ***)v10[1];
        v118 = *v117;
        v119 = (const void *)*((_QWORD *)v9 + 11);
        v120 = 20 * v116;
        v121 = (uint64_t *)sub_1ACBE1124(***v117, 20 * v116 + 16);
        if (v121)
        {
          v157 = v9;
          *v121 = (uint64_t)v118[11];
          v121[1] = v120;
          v118[11] = v121;
          v125 = v121 + 2;
          if (v119)
            memcpy(v121 + 2, v119, *((_QWORD *)v119 - 1));
          *((_QWORD *)v157 + 11) = v125;
          v126 = *(unsigned __int16 *)(v29 + 52);
          v127 = v163;
          if ((int)v126 > (int)a4)
          {
            v128 = 0;
            v129 = 0;
            v130 = (char *)v125 + 20 * (int)v115;
            v131 = v155;
            if (v108)
              v132 = 38;
            else
              v132 = 39;
            v154 = v132;
            v133 = (int)a4;
            while (2)
            {
              if (**(unsigned __int8 ***)(*(_QWORD *)(v29 + 64) + 8 * v133) != v12)
                goto LABEL_162;
              if (v161 == 1)
              {
                v134 = v165;
                v135 = *(_DWORD *)(v127 + 144);
                if (*(_DWORD *)(v127 + 148) > v135)
                {
                  *(_DWORD *)(v127 + 144) = v135 + 1;
                  v136 = *(_QWORD *)(v127 + 136) + 40 * v135;
                  *(_DWORD *)v136 = 135;
                  *(_DWORD *)(v136 + 4) = v134;
                  *(_DWORD *)(v136 + 8) = v131;
                  *(_QWORD *)(v136 + 12) = 0;
                  *(_QWORD *)(v136 + 28) = 0;
                  *(_QWORD *)(v136 + 20) = 0;
                  *(_DWORD *)(v136 + 36) = 0;
                  goto LABEL_175;
                }
                v138 = v127;
                v139 = 135;
                v140 = v165;
                v137 = v131;
                v141 = 0;
LABEL_174:
                v135 = sub_1ACBFF5AC(v138, v139, v140, v137, v141, v122, v123, v124);
                v127 = v163;
              }
              else
              {
                if (v158)
                  v137 = *((unsigned int *)v158 + v129++);
                else
                  v137 = 0;
                v134 = v165;
                v135 = *(_DWORD *)(v127 + 144);
                if (*(_DWORD *)(v127 + 148) <= v135)
                {
                  v138 = v127;
                  v139 = 94;
                  v140 = v165;
                  v141 = v131;
                  goto LABEL_174;
                }
                *(_DWORD *)(v127 + 144) = v135 + 1;
                v142 = *(_QWORD *)(v127 + 136) + 40 * v135;
                *(_DWORD *)v142 = 94;
                *(_DWORD *)(v142 + 4) = v134;
                *(_DWORD *)(v142 + 8) = v137;
                *(_DWORD *)(v142 + 12) = v131;
                *(_QWORD *)(v142 + 24) = 0;
                *(_QWORD *)(v142 + 32) = 0;
                *(_QWORD *)(v142 + 16) = 0;
              }
LABEL_175:
              *((_DWORD *)v130 + 1) = v135;
              v143 = *(_DWORD *)(v127 + 144);
              if (*(_DWORD *)(v127 + 148) <= v143)
              {
                sub_1ACBFF5AC(v127, 50, v131, 0, 0, v122, v123, v124);
                v127 = v163;
                if (v128)
                  goto LABEL_160;
LABEL_179:
                *(_DWORD *)v130 = v134;
                v130[16] = v154;
                if ((int)a4 < 1)
                {
                  *((_DWORD *)v130 + 3) = 0;
                }
                else
                {
                  *((_DWORD *)v130 + 2) = v155 - a4;
                  *((_DWORD *)v130 + 3) = a4;
                }
              }
              else
              {
                *(_DWORD *)(v127 + 144) = v143 + 1;
                v144 = *(_QWORD *)(v127 + 136) + 40 * v143;
                *(_DWORD *)v144 = 50;
                *(_DWORD *)(v144 + 4) = v131;
                *(_OWORD *)(v144 + 8) = 0u;
                *(_OWORD *)(v144 + 24) = 0u;
                if (!v128)
                  goto LABEL_179;
LABEL_160:
                v130[16] = -72;
              }
              v130 += 20;
              v126 = *(unsigned __int16 *)(v29 + 52);
LABEL_162:
              ++v133;
              --v128;
              v131 = (v131 + 1);
              if (v133 >= v126)
                break;
              continue;
            }
          }
          v8 = v155;
          v9 = v157;
          v145 = v164;
          if ((int)a4 >= 1 && (*(_DWORD *)(v29 + 48) & 0x100400) == 0)
          {
            v146 = v157[2];
            v147 = *(_DWORD *)(v127 + 144);
            if (*(_DWORD *)(v127 + 148) <= v147)
            {
              sub_1ACBFF5AC(v127, 125, v146, 0, a4, v122, v123, v124);
              v149 = v158;
              if (!v158)
              {
LABEL_5:
                if ((*(_BYTE *)(*((_QWORD *)v9 + 12) + 50) & 0x20) == 0 || (*((_WORD *)v10 + 10) & 0x800) == 0)
                {
                  v15 = (_WORD *)v10 + 9;
                  v16 = *((_WORD *)v10 + 9);
                  if ((v16 & 4) == 0)
                  {
                    v17 = 0;
                    v18 = *v9;
                    do
                    {
                      if (v18 && ((*v10)[4] & 1) == 0)
                        break;
                      if (((unint64_t)v10[6] & *((_QWORD *)v9 + 13)) != 0)
                        break;
                      v19 = !v17 || (v16 & 0x400) == 0;
                      v20 = v19 ? 4 : 512;
                      *v15 = v20 | v16;
                      v21 = *((_DWORD *)v10 + 6);
                      if ((v21 & 0x80000000) != 0)
                        break;
                      v22 = *((_QWORD *)v10[1] + 4);
                      v23 = v22 + 56 * v21;
                      v24 = *(_BYTE *)(v23 + 22) - 1;
                      *(_BYTE *)(v23 + 22) = v24;
                      if (v24)
                        break;
                      v10 = (unsigned __int8 **)(v22 + 56 * v21);
                      v15 = (_WORD *)v10 + 9;
                      v16 = *((_WORD *)v10 + 9);
                      --v17;
                    }
                    while ((v16 & 4) == 0);
                  }
                }
                return v8;
              }
            }
            else
            {
              *(_DWORD *)(v127 + 144) = v147 + 1;
              v148 = *(_QWORD *)(v127 + 136) + 40 * v147;
              *(_DWORD *)v148 = 125;
              *(_DWORD *)(v148 + 4) = v146;
              *(_DWORD *)(v148 + 8) = 0;
              *(_DWORD *)(v148 + 12) = a4;
              *(_QWORD *)(v148 + 24) = 0;
              *(_QWORD *)(v148 + 32) = 0;
              *(_QWORD *)(v148 + 16) = 0;
              v149 = v158;
              if (!v158)
                goto LABEL_5;
            }
LABEL_189:
            sub_1ACBE0F9C((_QWORD *)*v145, v149);
            goto LABEL_5;
          }
        }
        else
        {
          *((_QWORD *)v9 + 11) = 0;
          v9[20] = 0;
          v8 = v155;
          v145 = v164;
        }
        v149 = v158;
        if (!v158)
          goto LABEL_5;
        goto LABEL_189;
      }
    }
  }
  v31 = 0;
  v32 = 1;
  while (1)
  {
    v33 = *(unsigned __int8 ***)(*(_QWORD *)(v29 + 64) + 8 * v31);
    if (v33)
    {
      if (*v33 == v12)
        break;
    }
    v32 = ++v31 < (unint64_t)a4;
    if (a4 == v31)
      goto LABEL_50;
  }
  v34 = (_WORD *)a2 + 9;
  v35 = *((_WORD *)a2 + 9);
  if ((v35 & 4) == 0)
  {
    v36 = 0;
    v37 = *a3;
    v38 = a2;
    do
    {
      if (v37 && ((*v38)[4] & 1) == 0)
        break;
      if (((unint64_t)v38[6] & *((_QWORD *)a3 + 13)) != 0)
        break;
      v39 = !v36 || (v35 & 0x400) == 0;
      v40 = v39 ? 4 : 512;
      *v34 = v40 | v35;
      v41 = *((_DWORD *)v38 + 6);
      if ((v41 & 0x80000000) != 0)
        break;
      v42 = *((_QWORD *)v38[1] + 4);
      v43 = v42 + 56 * v41;
      v44 = *(_BYTE *)(v43 + 22) - 1;
      *(_BYTE *)(v43 + 22) = v44;
      if (v44)
        break;
      v38 = (unsigned __int8 **)(v42 + 56 * v41);
      v34 = (_WORD *)v38 + 9;
      v35 = *((_WORD *)v38 + 9);
      --v36;
    }
    while ((v35 & 4) == 0);
    if (!v32)
      goto LABEL_5;
  }
  return v8;
}

uint64_t sub_1ACB93340(unsigned int a1, char *a2, uint64_t *a3)
{
  return sub_1ACBF5AA0(a1, a2, a3, 0);
}

uint64_t sub_1ACB93348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  __int16 v4;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v3 = *(_WORD *)(a1 + 20);
  v4 = *(_WORD *)(a2 + 20);
  if (((v4 | v3) & 1) != 0)
    return (v4 & 1) - (v3 & 1u);
  if (((v4 | v3) & 0x2C) == 0)
  {
    if (((v4 | v3) & 2) != 0)
    {
      if ((v3 & 2) == 0)
        return 1;
      if ((v4 & 2) == 0)
        return 0xFFFFFFFFLL;
      if (a3)
        return sub_1ACBF7C2C((__int128 *)a1, (__int128 *)a2, a3, 0);
    }
    return sub_1ACBF7DD0(a1, a2);
  }
  if ((v4 & v3 & 0x24) != 0)
    goto LABEL_4;
  if ((v4 & v3 & 8) != 0)
  {
    if (*(double *)a1 >= *(double *)a2)
      return *(double *)a1 > *(double *)a2;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    if ((v3 & 0x24) != 0)
    {
      if ((v4 & 8) == 0)
      {
        if ((v4 & 0x24) != 0)
        {
LABEL_4:
          if (*(_QWORD *)a1 >= *(_QWORD *)a2)
            return *(_QWORD *)a1 > *(_QWORD *)a2;
          else
            return 0xFFFFFFFFLL;
        }
        return 0xFFFFFFFFLL;
      }
      v8 = *(double *)a2;
      if (*(double *)a2 >= -9.22337204e18)
      {
        if (v8 >= 9.22337204e18)
          return 0xFFFFFFFFLL;
        v9 = *(_QWORD *)a1;
        if (*(_QWORD *)a1 < (uint64_t)v8)
          return 0xFFFFFFFFLL;
        if (*(_QWORD *)a1 <= (uint64_t)v8)
        {
          if (v8 <= (double)v9)
            return v8 < (double)v9;
          return 0xFFFFFFFFLL;
        }
      }
      return 1;
    }
    if ((v3 & 8) == 0)
      return 1;
    if ((v4 & 0x24) == 0)
      return 0xFFFFFFFFLL;
    v6 = *(double *)a1;
    if (*(double *)a1 < -9.22337204e18)
      return 0xFFFFFFFFLL;
    if (v6 >= 9.22337204e18)
      return 1;
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 < (uint64_t)v6)
      return 1;
    if (*(_QWORD *)a2 > (uint64_t)v6)
      return 0xFFFFFFFFLL;
    if (v6 > (double)v7)
      return 1;
    if (v6 >= (double)v7)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1ACB934B4(int a1, int a2, void *__s1, int a4, void *__s2)
{
  unsigned int v5;
  int v6;
  uint64_t result;

  v5 = a2 - a4;
  if (a2 >= a4)
    v6 = a4;
  else
    v6 = a2;
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if ((_DWORD)result)
    return result;
  else
    return v5;
}

uint64_t sub_1ACB934EC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v9;
  char *v10;

  *(_WORD *)(a4 + 20) = 1;
  if (*(unsigned int *)(*(_QWORD *)(a1 + 32) + 64) * (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 52) < a3 + a2)
    return sub_1ACBEB08C(90380);
  if (*(_DWORD *)(a4 + 32) >= (signed int)(a3 + 1))
  {
    v10 = *(char **)(a4 + 40);
    *(_QWORD *)(a4 + 8) = v10;
    *(_WORD *)(a4 + 20) = 1;
LABEL_7:
    v9 = sub_1ACBAE978(a1, a2, a3, v10, 0);
    if ((_DWORD)v9)
    {
      if ((*(_WORD *)(a4 + 20) & 0x9000) != 0 || *(_DWORD *)(a4 + 32))
        sub_1ACBF2A04(a4);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a4 + 8) + a3) = 0;
      *(_WORD *)(a4 + 20) = 16;
      *(_DWORD *)(a4 + 16) = a3;
    }
    return v9;
  }
  v9 = sub_1ACB7E454(a4, a3 + 1, 0);
  if (!(_DWORD)v9)
  {
    v10 = *(char **)(a4 + 8);
    goto LABEL_7;
  }
  return v9;
}

uint64_t sub_1ACB935F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  int v7;
  char *v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v20;
  _OWORD v21[4];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_1ACBEF184(a2);
  v6 = *(_DWORD *)(a2 + 64);
  WORD2(v23) = 0;
  *((_QWORD *)&v23 + 1) = a1;
  LODWORD(v24) = 0;
  v7 = *(unsigned __int16 *)(a2 + 68);
  v8 = *(char **)(a2 + 56);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 88) - (_DWORD)v8;
  if (v7 > v9)
    v7 = v9 & ~(v9 >> 31);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(a2 + 56);
  if (v7 >= v6)
  {
    WORD2(v23) = 16400;
    LODWORD(v23) = v6;
  }
  else
  {
    result = sub_1ACB934EC(a2, 0, v6, (uint64_t)&v22);
    if ((_DWORD)result)
      return result;
    v8 = (char *)*((_QWORD *)&v22 + 1);
  }
  v11 = *v8;
  if (*v8 < 0)
  {
    v12 = v8[1];
    if (v8[1] < 0)
    {
      v13 = v8[2];
      if (v13 < 0)
      {
        v26 = 0;
        sub_1ACB8A6CC(v8, &v26);
        v11 = v26;
        if (HIDWORD(v26))
        {
          v11 = -1;
          goto LABEL_14;
        }
      }
      else
      {
        v11 = v13 & 0x7F | (v11 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
      }
    }
    else
    {
      v11 = ((v11 & 0x7F) << 7) | v12;
    }
  }
  if (v11 < 3)
  {
LABEL_30:
    if ((_DWORD)v24)
      sub_1ACBF2A04((uint64_t)&v22);
    return sub_1ACBEB08C(96332);
  }
LABEL_14:
  v14 = v23;
  if (v11 > v23)
    goto LABEL_30;
  v15 = &v8[v11 - 1];
  v16 = *v15;
  if (*v15 < 0)
  {
    v17 = v15[1];
    if (v15[1] < 0)
    {
      v18 = v15[2];
      if (v18 < 0)
      {
        v26 = 0;
        sub_1ACB8A6CC(v15, &v26);
        if (HIDWORD(v26))
          v16 = -1;
        else
          v16 = v26;
      }
      else
      {
        v16 = v18 & 0x7F | (v16 << 14) & 0x1FC07F | ((v17 & 0x7F) << 7);
      }
    }
    else
    {
      v16 = ((v16 & 0x7F) << 7) | v17;
    }
  }
  if (v16 == 7 || (v16 - 10) < 0xFFFFFFF7)
    goto LABEL_30;
  v20 = byte_1ACCB6D60[v16];
  if (v14 < v11 + v20)
    goto LABEL_30;
  sub_1ACB8A864(&v8[v14 - v20], v16, (uint64_t)v21);
  *a3 = *(_QWORD *)&v21[0];
  if ((_DWORD)v24)
    sub_1ACBF2A04((uint64_t)&v22);
  return 0;
}

uint64_t sub_1ACB93804(uint64_t a1, int a2, const char **a3, const char **a4)
{
  const char **v5;
  int v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t);
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;

  v5 = a3;
  v9 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  if (a3)
    v10 = v8 == 0;
  else
    v10 = 0;
  v11 = v10;
  v12 = a2 << v11;
  if (v12 + *(_DWORD *)(a1 + 28) > v9)
  {
    *(_DWORD *)(a1 + 16) = v12 + 2 * v9;
    v13 = sub_1ACB6BB48(*(_QWORD *)a1, 8 * (v12 + 2 * v9));
    if (!v13)
    {
LABEL_33:
      *(_DWORD *)(a1 + 32) = 7;
      return 1;
    }
    *(_QWORD *)a1 = v13;
    v8 = *(_DWORD *)(a1 + 20);
  }
  if (v8)
  {
    if (*(_DWORD *)(a1 + 24) != a2)
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14)
      {
        v15 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v14);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v14);
          v14 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_19;
          v15 = &xmmword_1ECD3B1D0;
        }
        (*v15)(v14);
      }
LABEL_19:
      *(_QWORD *)(a1 + 8) = sqlite3_mprintf("sqlite3_get_table() called with two or more incompatible queries");
      result = 1;
      *(_DWORD *)(a1 + 32) = 1;
      return result;
    }
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 24) = a2;
  if (a2 >= 1)
  {
    v17 = a2;
    do
    {
      v18 = sqlite3_mprintf("%s", *a4);
      if (!v18)
        goto LABEL_33;
      v19 = *(_QWORD *)a1;
      v20 = *(unsigned int *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = v20 + 1;
      *(_QWORD *)(v19 + 8 * v20) = v18;
      ++a4;
    }
    while (--v17);
  }
LABEL_24:
  if (!v5)
    return 0;
  if (a2 >= 1)
  {
    for (i = a2; i; --i)
    {
      if (*v5)
      {
        v25 = strlen(*v5);
        if (sqlite3_initialize())
          goto LABEL_33;
        v26 = (v25 & 0x3FFFFFFF) + 1;
        v27 = (void *)sub_1ACB5D828(v26);
        if (!v27)
          goto LABEL_33;
        v22 = v27;
        memcpy(v27, *v5, v26);
      }
      else
      {
        v22 = 0;
      }
      v23 = *(_QWORD *)a1;
      v24 = *(unsigned int *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = v24 + 1;
      *(_QWORD *)(v23 + 8 * v24) = v22;
      ++v5;
    }
  }
  result = 0;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

char *sqlite3_mprintf(const char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  if (sqlite3_initialize())
    return 0;
  else
    return sqlite3_vmprintf(a1, va);
}

void sqlite3_free_table(char **result)
{
  char **v1;
  char **v2;
  uint64_t i;
  char *v4;
  uint64_t (**v5)(void);
  uint64_t (**v6)(void);

  if (result)
  {
    v1 = result;
    v2 = result - 1;
    if ((int)*(result - 1) >= 2)
    {
      for (i = *(result - 1) - 1; i; --i)
      {
        v4 = *v1;
        if (*v1)
        {
          v5 = (uint64_t (**)(void))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0();
            qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v4);
            v4 = (char *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_5;
            v5 = &xmmword_1ECD3B1D0;
          }
          ((void (*)(char *))*v5)(v4);
        }
LABEL_5:
        ++v1;
      }
    }
    v6 = (uint64_t (**)(void))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_17;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0();
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = (char **)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
LABEL_17:
      ((void (*)(char **))*v6)(v2);
    }
  }
}

void sub_1ACB93BE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  const char *v24;
  char v25;

  v8 = a2;
  v10 = *a1;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*a1 + 528);
  if (v11 && !*(_BYTE *)(v10 + 197) && !*((_BYTE *)a1 + 302))
  {
    v22 = v11(*(_QWORD *)(v10 + 536), 22, "BEGIN", 0, 0, a1[46]);
    if (v22 == 1)
    {
      v23 = 23;
      v24 = "not authorized";
    }
    else
    {
      if ((v22 & 0xFFFFFFFD) == 0)
      {
        if (v22)
          return;
        goto LABEL_4;
      }
      v23 = 1;
      v24 = "authorizer malfunction";
    }
    sub_1ACBCB308((uint64_t)a1, v24, a3, a4, a5, a6, a7, a8, v25);
    *((_DWORD *)a1 + 6) = v23;
    return;
  }
LABEL_4:
  v12 = a1[2];
  if (v12)
    goto LABEL_10;
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v12 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
LABEL_10:
    if (v8 != 7 && *(int *)(v10 + 40) >= 1)
    {
      v13 = 0;
      if (v8 == 9)
        v14 = 2;
      else
        v14 = 1;
      v15 = 8;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + v15);
        if (v16 && (*(_WORD *)(*(_QWORD *)(v16 + 8) + 40) & 1) != 0)
          v17 = 0;
        else
          v17 = v14;
        v18 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v18)
        {
          sub_1ACBFF5AC(v12, 2, v13, v17, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v18 + 1;
          v19 = *(_QWORD *)(v12 + 136) + 40 * v18;
          *(_DWORD *)v19 = 2;
          *(_DWORD *)(v19 + 4) = v13;
          *(_DWORD *)(v19 + 8) = v17;
          *(_QWORD *)(v19 + 12) = 0;
          *(_QWORD *)(v19 + 28) = 0;
          *(_QWORD *)(v19 + 20) = 0;
          *(_DWORD *)(v19 + 36) = 0;
        }
        *(_DWORD *)(v12 + 272) |= 1 << v13;
        if (v13 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 32) + v15) + 17))
          *(_DWORD *)(v12 + 276) |= 1 << v13;
        ++v13;
        v15 += 32;
      }
      while (v13 < *(int *)(v10 + 40));
    }
    v20 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v20)
    {
      sub_1ACBFF5AC(v12, 1, 0, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v20 + 1;
      v21 = *(_QWORD *)(v12 + 136) + 40 * v20;
      *(_BYTE *)v21 = 1;
      *(_OWORD *)(v21 + 1) = 0u;
      *(_OWORD *)(v21 + 17) = 0u;
      *(_QWORD *)(v21 + 32) = 0;
    }
  }
}

uint64_t sub_1ACB93E30(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_DWORD *)(a1 + 64))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 112);
  v6 = *(_DWORD **)(v5 + 40);
  if ((*(_WORD *)(v5 + 52) & 4) == 0 || v6[8] < *(_DWORD *)(v5 + 48))
  {
    result = v6[12];
    if ((_DWORD)result)
      return result;
    v7 = *(_QWORD *)(v3 + 112);
    if (v6[46] <= v6[50])
    {
      result = sub_1ACB9A818(v7);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = sub_1ACBEDEA4(v7);
      if ((_DWORD)result)
        return result;
    }
    goto LABEL_13;
  }
  if (!v6[32] || (result = sub_1ACBEA110(*(_QWORD *)(v3 + 112)), !(_DWORD)result))
  {
LABEL_13:
    strcpy((char *)v4, "SQLite format 3");
    *(_BYTE *)(v4 + 16) = BYTE1(*(_DWORD *)(a1 + 52));
    *(_BYTE *)(v4 + 17) = *(_WORD *)(a1 + 54);
    *(_WORD *)(v4 + 18) = 257;
    *(_BYTE *)(v4 + 20) = *(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 56);
    *(_WORD *)(v4 + 21) = 8256;
    *(_BYTE *)(v4 + 23) = 32;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 84) = 0u;
    sub_1ACBA3288(v3, 13);
    result = 0;
    *(_WORD *)(a1 + 40) |= 2u;
    v8 = *(_BYTE *)(a1 + 33);
    *(_WORD *)(v4 + 52) = 0;
    *(_BYTE *)(v4 + 54) = 0;
    *(_BYTE *)(v4 + 55) = v8;
    v9 = *(_BYTE *)(a1 + 34);
    *(_WORD *)(v4 + 64) = 0;
    *(_BYTE *)(v4 + 66) = 0;
    *(_BYTE *)(v4 + 67) = v9;
    *(_DWORD *)(a1 + 64) = 1;
    *(_BYTE *)(v4 + 31) = 1;
  }
  return result;
}

_QWORD *sub_1ACB93F7C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v8;
  uint64_t v10;
  uint64_t v12;
  _QWORD *result;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int8 *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int *v79;
  int v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  _DWORD *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  const char *k;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  const char *m;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int32x4_t v138;
  int8x16_t v139;
  uint64_t v140;
  int32x4_t v141;
  int16x4_t v142;
  int8x8_t v143;
  int16x4_t v144;
  int16x4_t v145;
  __int16 *v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  int v157;
  int v158;
  char v159;
  int v160;
  uint64_t v161;
  unsigned __int8 v162;
  int v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  BOOL v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int **v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  int *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned int *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int16x8_t v277;
  _QWORD *j;
  uint64_t v279;
  int v280;
  BOOL v281;
  int v282;
  __int16 v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BOOL4 v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  char v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int **v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  int v330;
  int *v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  int v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  unsigned int v340[4];

  v8 = (unsigned int **)a6;
  v10 = a3;
  *(_QWORD *)v340 = 0;
  v339 = 0;
  v337 = 0u;
  v338 = 0u;
  v336 = 0;
  v12 = *(_QWORD *)a1;
  if (*(_DWORD *)(a1 + 48))
  {
    result = sub_1ACB7E8B0(*(_QWORD **)a1, (_QWORD *)a2);
    v14 = 0;
    goto LABEL_44;
  }
  v15 = a5;
  DWORD1(v337) = 0;
  if (a3 && (*(_BYTE *)(a3 + 5) & 2) != 0 && !*(_QWORD *)(a3 + 80))
  {
    v331 = *(int **)(a3 + 32);
    *(_QWORD *)(a3 + 32) = 0;
    sub_1ACB7E704((_QWORD *)v12, a3, 1);
    v10 = 0;
  }
  else
  {
    v331 = 0;
  }
  v23 = sub_1ACC10E6C(a1, 0, a2 + 8, (uint64_t)a4, a5, a6, a7, a8);
  v24 = *(_QWORD *)(a2 + 40);
  if (v24)
  {
    v25 = *(_QWORD **)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 816) || (v26 = *(_DWORD *)(v24 + 44) - 1, (*(_DWORD *)(v24 + 44) = v26) == 0))
      sub_1ACC00BE8(v25, (_QWORD *)v24);
  }
  *(_QWORD *)(a2 + 40) = v23;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (!v23)
    goto LABEL_41;
  ++*(_DWORD *)(v23 + 44);
  if ((*(_WORD *)(a2 + 69) & 2) == 0)
    goto LABEL_23;
  v27 = *(_QWORD *)(v23 + 16);
  if (!v27)
  {
LABEL_21:
    sub_1ACBCB308(a1, "no such index: %s", v17, v18, v19, v20, v21, v22, *(_QWORD *)(a2 + 96));
    goto LABEL_22;
  }
LABEL_14:
  v28 = *(_BYTE **)v27;
  for (i = *(unsigned __int8 **)(a2 + 96); ; ++i)
  {
    v30 = *v28;
    v31 = *i;
    if ((_DWORD)v30 == (_DWORD)v31)
      break;
    if (byte_1ACCB6333[v30] != byte_1ACCB6333[v31])
    {
      v27 = *(_QWORD *)(v27 + 40);
      if (!v27)
        goto LABEL_21;
      goto LABEL_14;
    }
LABEL_16:
    ++v28;
  }
  if (*v28)
    goto LABEL_16;
  *(_QWORD *)(a2 + 104) = v27;
LABEL_23:
  v32 = *(_QWORD *)(v23 + 96);
  v33 = *(_QWORD *)(v12 + 32);
  if (v32)
  {
    v34 = (uint64_t *)(v33 + 24);
    LODWORD(v35) = -1;
    do
    {
      v36 = *v34;
      v34 += 4;
      v35 = (v35 + 1);
    }
    while (v36 != v32);
  }
  else
  {
    v35 = 4294934528;
  }
  v37 = *(_QWORD *)a1;
  v38 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
  if (v38 && !*(_BYTE *)(v37 + 197) && !*(_BYTE *)(a1 + 302))
  {
    v78 = v38(*(_QWORD *)(v37 + 536), 18, *(_QWORD *)v23, 0, *(_QWORD *)(v33 + 32 * (int)v35), *(_QWORD *)(a1 + 368));
    if (v78 == 1)
    {
      v79 = v331;
      v80 = 23;
      v81 = "not authorized";
    }
    else
    {
      if ((v78 & 0xFFFFFFFD) == 0)
      {
        if (!v78)
          goto LABEL_31;
        goto LABEL_41;
      }
      v79 = v331;
      v80 = 1;
      v81 = "authorizer malfunction";
    }
    v331 = v79;
    sub_1ACBCB308(a1, v81, v17, v18, v19, v20, v21, v22, v297);
    v14 = 0;
    *(_DWORD *)(a1 + 24) = v80;
    goto LABEL_42;
  }
LABEL_31:
  v328 = *(_DWORD *)(v23 + 48);
  if ((*(_QWORD *)(v23 + 88)
     || (v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56)) != 0 && *(_QWORD *)(v40 + 64))
    && !*(_BYTE *)(a1 + 221))
  {
    v39 = (uint64_t)sub_1ACC2E0D4((_QWORD *)a1, (unsigned __int8 **)v23, 127, 0, &v336, v20, v21, v22);
  }
  else
  {
    v39 = 0;
    v336 = 0;
  }
  v323 = *(unsigned __int8 *)(v23 + 63);
  if ((v323 == 1 || *(__int16 *)(v23 + 54) <= 0) && sub_1ACC114E0(a1, v23, v17, v18, v19, v20, v21, v22)
    || sub_1ACC2DB0C(a1, v23, v39, v18, v19, v20, v21, v22))
  {
    goto LABEL_41;
  }
  v321 = v39;
  v53 = *(_QWORD *)(a1 + 16);
  if (!v53)
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v53 = sub_1ACBCB4C8((uint64_t *)a1, v41, v42, v43, v44, v45, v46, v47);
    if (!v53)
      goto LABEL_41;
  }
  v319 = v15;
  v320 = v8;
  if (!*(_BYTE *)(a1 + 30))
    *(_WORD *)(v53 + 268) |= 0x10u;
  v322 = v53;
  v54 = v39;
  v55 = (v10 | v39) != 0;
  if (*(_QWORD *)(a1 + 168))
    v56 = *(_QWORD *)(a1 + 168);
  else
    v56 = a1;
  v57 = *(_DWORD *)(v56 + 124);
  v58 = 1 << v35;
  if ((v57 & (1 << v35)) == 0)
  {
    *(_DWORD *)(v56 + 124) = v57 | v58;
    if ((_DWORD)v35 == 1)
    {
      sub_1ACBE9418(v56);
      v54 = v321;
    }
  }
  *(_DWORD *)(v56 + 120) |= v58;
  *(_BYTE *)(v56 + 32) |= v55;
  if (!a4 && v10 && !v54 && sub_1ACBB6258(a1, v23, v10, v319, v35, v45, v46, v47))
  {
    v66 = 0;
    v14 = 0;
    v8 = v320;
LABEL_77:
    if (!*(_BYTE *)(a1 + 30) && !*(_QWORD *)(a1 + 176) && *(_QWORD *)(a1 + 160))
      sub_1ACC32090((uint64_t *)a1, v59, v60, v61, v62, v63, v64, v65);
    if ((_DWORD)v66)
      sub_1ACC2DFB4(v322, v66, "rows inserted", v61, v62, v63, v64, v65);
    goto LABEL_42;
  }
  v67 = sub_1ACC33FB8(a1, v35, v23);
  v72 = *(_DWORD *)(a1 + 56);
  v73 = v72 + 1;
  v74 = v72 + 1 + *(__int16 *)(v23 + 54);
  *(_DWORD *)(a1 + 56) = v74;
  v316 = v67;
  v317 = v72 + 1;
  v8 = v320;
  if (*(_BYTE *)(v23 + 63) == 1)
  {
    v73 = v72 + 2;
    *(_DWORD *)(a1 + 56) = v74 + 1;
  }
  v75 = (*(_WORD *)(v23 + 48) & 0x440) == 0;
  if (!a4 || (*((_BYTE *)a4 + 4) = 1, v76 = *a4, (int)v76 < 1))
  {
    v82 = 0xFFFFFFFFLL;
LABEL_92:
    v315 = v73;
    v318 = v73 + 1;
    if (!v10)
    {
      v335 = 0u;
      v334 = 0u;
      v333 = 0u;
      v332 = a1;
      if (v331)
      {
        v102 = v82;
        LODWORD(v103) = *v331;
        v104 = sub_1ACC0F8AC((uint64_t)&v332, v331, v68, v69, v70, v71, v82, v75);
        v105 = a2 + 8;
        if (v104)
        {
          sub_1ACB7E8B0((_QWORD *)v12, (_QWORD *)a2);
          v14 = 0;
          v48 = v331;
          goto LABEL_43;
        }
        v82 = v102;
      }
      else
      {
        LODWORD(v103) = 0;
        v105 = a2 + 8;
      }
      v98 = 0;
      v311 = 1;
      v309 = -1;
      v100 = v322;
LABEL_154:
      if (a4 || (int)v103 < 1)
        goto LABEL_180;
      v127 = *(__int16 *)(v23 + 52);
      v128 = *(_DWORD *)(v23 + 48);
      if ((v127 & 0x80000000) != 0 || !*(_WORD *)(v23 + 52) || (v128 & 0x60) == 0)
      {
        v82 = *(__int16 *)(v23 + 52);
        goto LABEL_165;
      }
      v129 = *(_QWORD *)(v23 + 8);
      if (v127 < 2 || (unint64_t)(v127 - 1) >> 32)
      {
        v130 = *(__int16 *)(v23 + 52);
      }
      else
      {
        v164 = 0;
        v130 = *(_WORD *)(v23 + 52) & 1;
        v165 = v127 - 2;
        v166 = v127 & 0xFFFFFFFE;
        v167 = *(__int16 *)(v23 + 52);
        do
        {
          v167 -= (*(_WORD *)(v129 + 16 * (v165 + 1) + 14) & 0x60) != 0;
          v164 -= (*(_WORD *)(v129 + 16 * v165 + 14) & 0x60) != 0;
          v165 -= 2;
          v166 -= 2;
        }
        while (v166);
        v82 = (v164 + v167);
        v168 = (v127 & 0xFFFFFFFE) == v127;
        LODWORD(v127) = v164 + v167;
        v100 = v322;
        if (v168)
        {
LABEL_165:
          v132 = 0;
          v133 = *(__int16 *)(v23 + 54);
          if ((v128 & 0x62) != 0 && (int)v133 >= 1)
          {
            v134 = *(_QWORD *)(v23 + 8);
            if (v133 >= 9)
            {
              v136 = *(_WORD *)(v23 + 54) & 7;
              if ((*(_WORD *)(v23 + 54) & 7) == 0)
                v136 = 8;
              v135 = v133 - v136;
              v137 = v134 + 78;
              v138 = 0uLL;
              v139.i64[0] = 0x100000001;
              v139.i64[1] = 0x100000001;
              v140 = v135;
              v141 = 0uLL;
              do
              {
                v142.i32[0] = vzip1_s16(*(int16x4_t *)(v137 - 64), *(int16x4_t *)(v137 - 48)).u32[0];
                v142.i32[1] = vext_s8(*(int8x8_t *)(v137 - 32), (int8x8_t)vzip1_s16(*(int16x4_t *)(v137 - 32), *(int16x4_t *)(v137 - 16)), 4uLL).i32[1];
                v143 = vext_s8(*(int8x8_t *)(v137 + 32), (int8x8_t)vzip1_s16(*(int16x4_t *)(v137 + 32), *(int16x4_t *)(v137 + 48)), 4uLL);
                v144 = *(int16x4_t *)(v137 + 16);
                v145 = *(int16x4_t *)v137;
                v137 += 128;
                v144.i32[0] = vzip1_s16(v145, v144).u32[0];
                v144.i32[1] = v143.i32[1];
                v138 = vaddq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vtst_s16(v142, (int16x4_t)0x62006200620062)), v139));
                v141 = vaddq_s32(v141, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vtst_s16(v144, (int16x4_t)0x62006200620062)), v139));
                v140 -= 8;
              }
              while (v140);
              v132 = vaddvq_s32(vaddq_s32(v141, v138));
            }
            else
            {
              v135 = 0;
              v132 = 0;
            }
            v146 = (__int16 *)(v134 + 16 * v135 + 14);
            v147 = v133 - v135;
            do
            {
              v148 = *v146;
              v146 += 8;
              if ((v148 & 0x62) != 0)
                ++v132;
              --v147;
            }
            while (v147);
          }
          if ((_DWORD)v103 != (_DWORD)v133 - v132)
          {
            sub_1ACBCB308(a1, "table %S has %d columns but %d values were supplied", v68, v69, v70, v71, v82, v75, v105);
            goto LABEL_41;
          }
LABEL_180:
          if (a4 && (_DWORD)v103 != *a4)
          {
            sub_1ACBCB308(a1, "%d values for %d columns", v68, v69, v70, v71, v82, v75, v103);
            goto LABEL_41;
          }
          v314 = v82;
          v305 = v98;
          if ((*(_BYTE *)(v12 + 52) & 1) == 0 || *(_BYTE *)(a1 + 30) || *(_QWORD *)(a1 + 176) || *(_BYTE *)(a1 + 219))
          {
            LODWORD(v149) = 0;
          }
          else
          {
            v149 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v149;
            sub_1ACBFF554(v100, 71, 0, v149, v70, v71, v82, v75);
            v100 = v322;
          }
          v302 = v103;
          v300 = v149;
          if (v323 == 2)
          {
            v14 = 0;
          }
          else
          {
            v150 = sub_1ACB956A8(a1, v23, 113, 0, 0xFFFFFFFFLL, 0, &v340[1], v340);
            v151 = sub_1ACBE1124(v12, 4 * (v150 + 2));
            v14 = (_QWORD *)v151;
            if (!v151)
              goto LABEL_42;
            v152 = *(_DWORD *)(a1 + 56);
            if (v150 < 1)
            {
              v150 = 0;
              v100 = v322;
            }
            else
            {
              v153 = (uint64_t *)(v23 + 16);
              v154 = v150;
              v155 = (int *)v151;
              v100 = v322;
              do
              {
                v156 = *v153;
                v157 = v152 + 1;
                *(_DWORD *)(a1 + 56) = v157;
                *v155++ = v157;
                v152 = *(_DWORD *)(a1 + 56) + *(unsigned __int16 *)(v156 + 96);
                *(_DWORD *)(a1 + 56) = v152;
                v153 = (uint64_t *)(v156 + 40);
                --v154;
              }
              while (v154);
            }
            v169 = v152 + 1;
            *(_DWORD *)(a1 + 56) = v169;
            *(_DWORD *)(v151 + 4 * v150) = v169;
          }
          if (v320)
          {
            v170 = *(unsigned __int8 *)(v23 + 63);
            if (v170 == 2)
            {
              sub_1ACBCB308(a1, "cannot UPSERT a view", v68, v69, v70, v71, v82, v75, v297);
            }
            else if (v170 == 1)
            {
              sub_1ACBCB308(a1, "UPSERT not implemented for virtual table \"%s\"", v68, v69, v70, v71, v82, v75, *(_QWORD *)v23);
            }
            else if (!sub_1ACC12CD0(a1, *v320, v68, v69, v70, v71, v82, v75))
            {
              v171 = v340[0];
              v325 = v340[1];
              *(_DWORD *)(a2 + 72) = v340[1];
              v172 = v320;
              v100 = v322;
              while (1)
              {
                v172[8] = (unsigned int *)a2;
                *((_DWORD *)v172 + 18) = v318;
                *((_DWORD *)v172 + 19) = v325;
                *((_DWORD *)v172 + 20) = v171;
                if (*v172)
                {
                  v173 = sub_1ACC34214(a1, a2, (unsigned __int8 *)v172, v69, v70, v71, v82, v75);
                  v100 = v322;
                  if (v173)
                    break;
                }
                v172 = (unsigned int **)v172[4];
                if (!v172)
                  goto LABEL_222;
              }
            }
            goto LABEL_42;
          }
LABEL_222:
          if ((v311 & 1) != 0)
          {
            if (v10)
            {
              v174 = v100;
              v175 = sub_1ACC08D28(v100, 12, DWORD1(v337), v69, v70, v71, v82, v75);
              LODWORD(v299) = v175;
              if ((v314 & 0x80000000) != 0)
              {
                HIDWORD(v299) = v175;
              }
              else
              {
                v176 = v175;
                sub_1ACBFF554(v174, 80, v314 + v305, v315, v70, v71, v82, v75);
                HIDWORD(v299) = v176;
              }
              v100 = v174;
            }
            else
            {
              v299 = 0;
            }
          }
          else
          {
            v177 = sub_1ACC08D28(v100, 36, v309, v69, v70, v71, v82, v75);
            v100 = v322;
            LODWORD(v299) = v177;
            HIDWORD(v299) = *(_DWORD *)(v322 + 144);
          }
          LODWORD(v202) = *(__int16 *)(v23 + 54);
          if ((int)v202 >= 1)
          {
            v203 = 0;
            v326 = 0;
            v204 = v318;
            while (1)
            {
              if (v203 == *(__int16 *)(v23 + 52))
                goto LABEL_245;
              v205 = *(_QWORD *)(v23 + 8);
              v206 = *(_WORD *)(v205 + 16 * v203 + 14);
              if ((v206 & 0x62) != 0)
                break;
              if (a4)
                goto LABEL_255;
              if (!v302)
              {
LABEL_269:
                v213 = *(unsigned __int16 *)(v205 + 16 * v203 + 12);
                if (v213 && !*(_BYTE *)(v23 + 63) && (v215 = *(_DWORD **)(v23 + 80)) != 0 && *v215 >= v213)
                  v214 = *(_QWORD *)&v215[6 * (v213 - 1) + 2];
                else
                  v214 = 0;
                sub_1ACC0D760((_QWORD *)a1, v214, v204);
                goto LABEL_246;
              }
              v69 = (v203 - v326);
LABEL_265:
              if ((v311 & 1) != 0)
              {
                if (v10)
                {
                  if (v305 == v318)
                    goto LABEL_247;
                  v210 = (v69 + v305);
                  v211 = v100;
                  v212 = 81;
                  goto LABEL_282;
                }
                v298 = *(_QWORD *)&v331[6 * (int)v69 + 2];
                v216 = sub_1ACB7B84C((_QWORD *)a1, (unsigned __int8 *)v298, v204, v69, v70, v71, v82, v75);
                if ((_DWORD)v216 != (_DWORD)v204)
                {
                  v210 = v216;
                  if ((*(_DWORD *)(v298 + 4) & 0x400000) != 0)
                    v212 = 80;
                  else
                    v212 = 81;
                  v211 = v322;
LABEL_282:
                  sub_1ACBFF554(v211, v212, v210, v204, v70, v71, v82, v75);
                }
              }
              else
              {
                sub_1ACB683F4(v100, 94, v309, v69, v204, v71, v82, v75);
              }
LABEL_246:
              v100 = v322;
LABEL_247:
              ++v203;
              v204 = (v204 + 1);
              v202 = *(__int16 *)(v23 + 54);
              if (v203 >= v202)
                goto LABEL_283;
            }
            ++v326;
            if ((v206 & 0x20) != 0)
            {
              LODWORD(v204) = v204 - 1;
              goto LABEL_247;
            }
            if ((v206 & 0x40) != 0)
            {
              if ((v336 & 1) == 0)
                goto LABEL_247;
LABEL_245:
              sub_1ACC08D28(v100, 76, v204, v69, v70, v71, v82, v75);
              goto LABEL_246;
            }
            if (!a4)
              goto LABEL_269;
LABEL_255:
            v207 = *a4;
            if ((int)v207 < 1)
              goto LABEL_269;
            v69 = 0;
            v208 = (int *)(a4 + 4);
            while (1)
            {
              v209 = *v208;
              v208 += 4;
              if (v203 == v209)
                goto LABEL_265;
              if (v207 == ++v69)
                goto LABEL_269;
            }
          }
LABEL_283:
          v217 = *(_DWORD *)(a1 + 68) - 1;
          *(_DWORD *)(a1 + 68) = v217;
          v218 = v315;
          v327 = v217;
          if ((v336 & 1) != 0)
          {
            v223 = sub_1ACC0A1AC(a1, (__int16)v202 + 1);
            v307 = v223;
            if ((v314 & 0x80000000) != 0)
            {
              v230 = v322;
              v231 = v223;
              sub_1ACBFF554(v322, 71, 0xFFFFFFFFLL, v223, v219, v220, v221, v222);
            }
            else
            {
              if ((v311 & 1) != 0)
              {
                v224 = v223;
                sub_1ACC08D80(a1, *(unsigned __int8 **)&v331[6 * v314 + 2], v223);
                v230 = v322;
              }
              else
              {
                v230 = v322;
                v224 = v223;
                sub_1ACB683F4(v322, 94, v309, v314, v223, v220, v221, v222);
              }
              v304 = sub_1ACC08D28(v230, 51, v224, v225, v226, v227, v228, v229);
              sub_1ACBFF554(v230, 71, 0xFFFFFFFFLL, v224, v235, v236, v237, v238);
              if (*(_BYTE *)(*(_QWORD *)v230 + 103))
                v244 = &byte_1EECAD280;
              else
                v244 = (char *)(*(_QWORD *)(v230 + 136) + 40 * v304);
              *((_DWORD *)v244 + 2) = *(_DWORD *)(v230 + 144);
              v231 = v307;
              sub_1ACC08D28(v230, 13, v307, v239, v240, v241, v242, v243);
            }
            v245 = (v231 + 1);
            sub_1ACB683F4(v230, 80, v318, v245, (*(__int16 *)(v23 + 56) - 1), v232, v233, v234);
            if ((*(_BYTE *)(v23 + 48) & 0x60) != 0)
              sub_1ACC33500(a1, v245, v23, v246, v247, v248, v249, v250);
            v251 = v245;
            v217 = v327;
            v218 = v315;
            if (v323 != 2)
              sub_1ACC0EDC4((_QWORD **)v322, v23, v251, v246, v247, v248, v249, v250);
            sub_1ACC2E8C0(a1, v321, 127, 0, 1, v23, v307 + (__int16)~*(_WORD *)(v23 + 54), v319, v327);
            v252 = *(__int16 *)(v23 + 54);
            if (*(_WORD *)(v23 + 54))
            {
              v100 = v322;
              if (*(_DWORD *)(a1 + 40) > v252)
                goto LABEL_304;
              *(_DWORD *)(a1 + 40) = v252 + 1;
              v253 = (unsigned int *)(a1 + 44);
              goto LABEL_303;
            }
            v100 = v322;
            if (v307)
            {
              v254 = *(unsigned __int8 *)(a1 + 31);
              if (v254 <= 7)
              {
                *(_BYTE *)(a1 + 31) = v254 + 1;
                v253 = (unsigned int *)(a1 + 4 * v254 + 224);
LABEL_303:
                *v253 = v307;
              }
            }
          }
LABEL_304:
          if (v323 == 2)
          {
LABEL_347:
            if (v300)
              sub_1ACBFF554(v322, 86, v300, 1, v70, v71, v82, v75);
            if (v321)
              sub_1ACC2E8C0(a1, v321, 127, 0, 2, v23, v315 + (__int16)~*(_WORD *)(v23 + 54), v319, v327);
            sub_1ACC0A574(v322, v327);
            if ((v311 & 1) != 0)
            {
              v66 = v300;
              if (v10)
              {
                sub_1ACC08E48(v322, HIDWORD(v299), v60, v61, v62, v63, v64, v65);
                if (*(_BYTE *)(*(_QWORD *)v322 + 103))
                  v290 = &byte_1EECAD280;
                else
                  v290 = (char *)(*(_QWORD *)(v322 + 136) + 40 * (int)v299);
                *((_DWORD *)v290 + 2) = *(_DWORD *)(v322 + 144);
              }
            }
            else
            {
              sub_1ACBFF554(v322, 39, v309, HIDWORD(v299), v62, v63, v64, v65);
              v66 = v300;
              if (*(_BYTE *)(*(_QWORD *)v322 + 103))
                v296 = &byte_1EECAD280;
              else
                v296 = (char *)(*(_QWORD *)(v322 + 136) + 40 * (int)v299);
              *((_DWORD *)v296 + 2) = *(_DWORD *)(v322 + 144);
              sub_1ACC08D28(v322, 122, v309, v291, v292, v293, v294, v295);
            }
            goto LABEL_77;
          }
          if (*(_BYTE *)(v23 + 63) == 1)
          {
            sub_1ACBFF554(v100, 75, 0, v317, v70, v71, v82, v75);
            v100 = v322;
          }
          v255 = v314;
          if ((v314 & 0x80000000) != 0)
          {
            if (*(_BYTE *)(v23 + 63) != 1 && (v328 & 0x80) == 0)
            {
              sub_1ACB683F4(v100, 127, v340[1], v218, v316, v71, v82, v75);
              v329 = 1;
LABEL_327:
              sub_1ACC344BC(a1, v316, v218, v257, v258, v259, v260, v261);
              if ((*(_BYTE *)(v23 + 48) & 0x60) != 0)
                sub_1ACC33500(a1, v318, v23, v272, v273, v274, v275, v276);
              if (*(_BYTE *)(v23 + 63) == 1)
              {
                for (j = *(_QWORD **)(v23 + 80); j; j = (_QWORD *)j[5])
                {
                  if (*j == v12)
                    break;
                }
                sub_1ACC2DEBC((uint64_t *)a1, v23);
                sub_1ACBA86CC((uint64_t *)v322, 7, 1, (*(__int16 *)(v23 + 54) + 2), v317, (uint64_t)j, 4294967285, v279);
                v280 = *(_DWORD *)(v322 + 144);
                v281 = __OFSUB__(v280, 1);
                v282 = v280 - 1;
                if (v282 < 0 == v281)
                {
                  if (v319 == 11)
                    v283 = 2;
                  else
                    v283 = v319;
                  *(_WORD *)(*(_QWORD *)(v322 + 136) + 40 * v282 + 2) = v283;
                }
                v284 = *(_QWORD *)(a1 + 168);
                if (!v284)
                  v284 = a1;
                *(_BYTE *)(v284 + 33) = 1;
              }
              else
              {
                LODWORD(v332) = 0;
                v285 = v217;
                v286 = v340[1];
                v324 = v340[0];
                sub_1ACB95944(a1, v23, (uint64_t)v14, v340[1], v340[0], v317, 0, (v314 & 0x80000000) == 0, v277, v319, v285, (int *)&v332, 0, (uint64_t)v8);
                if ((*(_BYTE *)(v12 + 49) & 0x40) != 0)
                  sub_1ACB99378((uint64_t *)a1, v23, 0, v317, 0, 0, v287, v288);
                if ((_DWORD)v332)
                  v289 = *(_QWORD *)(v322 + 376) == 0;
                else
                  v289 = 1;
                sub_1ACB99CFC(a1, v23, v286, v324, v317, (uint64_t)v14, 0, v329, v289);
              }
              goto LABEL_347;
            }
            sub_1ACBFF554(v100, 75, 0, v218, v70, v71, v82, v75);
          }
          else
          {
            if ((v311 & 1) != 0)
            {
              if (!v10)
              {
                v256 = *(unsigned __int8 **)&v331[6 * v314 + 2];
                if (*v256 == 121 && *(_BYTE *)(v23 + 63) != 1)
                {
                  sub_1ACB683F4(v322, 127, v340[1], v218, v316, v71, v82, v75);
                  v329 = 1;
                  v8 = v320;
                  v217 = v327;
                  goto LABEL_327;
                }
                sub_1ACC08D80(a1, v256, v218);
                v8 = v320;
              }
            }
            else
            {
              sub_1ACB683F4(v100, 94, v309, v314, v218, v71, v82, v75);
            }
            if (*(_BYTE *)(v23 + 63) == 1)
            {
              v218 = v315;
              sub_1ACBFF554(v322, 50, v315, (*(_DWORD *)(v322 + 144) + 2), v70, v71, v82, v75);
              v267 = v322;
            }
            else
            {
              v330 = sub_1ACC08D28(v322, 51, v315, v255, v70, v71, v82, v75);
              sub_1ACB683F4(v322, 127, v340[1], v315, v316, v268, v269, v270);
              v267 = v322;
              if (*(_BYTE *)(*(_QWORD *)v322 + 103))
                v271 = &byte_1EECAD280;
              else
                v271 = (char *)(*(_QWORD *)(v322 + 136) + 40 * v330);
              *((_DWORD *)v271 + 2) = *(_DWORD *)(v322 + 144);
              v218 = v315;
            }
            v217 = v327;
            sub_1ACC08D28(v267, 13, v218, v262, v263, v264, v265, v266);
          }
          v329 = 0;
          goto LABEL_327;
        }
      }
      v131 = v130 + 1;
      LODWORD(v82) = v127;
      do
        v82 = v82 - ((*(_WORD *)(v129 + 16 * (v131-- - 2) + 14) & 0x60) != 0);
      while (v131 > 1);
      goto LABEL_165;
    }
    v313 = v82;
    v83 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v83;
    v308 = *(_DWORD *)(v322 + 144);
    v84 = v75;
    sub_1ACB683F4(v322, 11, v83, 0, (v308 + 1), v71, v82, v75);
    LOBYTE(v337) = 13;
    v310 = v83;
    *(_QWORD *)((char *)&v337 + 4) = v83;
    *((_QWORD *)&v338 + 1) = 0;
    v90 = v318;
    if (!v84)
      v90 = 0;
    v91 = *(__int16 *)(v23 + 54);
    HIDWORD(v337) = v90;
    LODWORD(v338) = v91;
    v14 = 0;
    if (sub_1ACB6EA04((_QWORD **)a1, v10, (uint64_t)&v337, v85, v86, v87, v88, v89))
      goto LABEL_42;
    if (!*(_DWORD *)(a1 + 48))
    {
      v98 = HIDWORD(v337);
      sub_1ACC0ED48(v322, v310, v92, v93, v94, v95, v96, v97);
      v100 = v322;
      if (*(_BYTE *)(*(_QWORD *)v322 + 103))
        v101 = &byte_1EECAD280;
      else
        v101 = (char *)(*(_QWORD *)(v322 + 136) + 40 * v308);
      *((_DWORD *)v101 + 2) = *(_DWORD *)(v322 + 144);
      v103 = **(unsigned int **)(v10 + 32);
      if (!v321)
      {
        v158 = sub_1ACC340D4((uint64_t *)a1, v35, v23, v99, v70, v71, v82, v75);
        v82 = v313;
        v100 = v322;
        if (!v158)
        {
          v309 = 0;
          v311 = 1;
          v105 = a2 + 8;
          goto LABEL_154;
        }
      }
      v306 = v98;
      v309 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v309 + 1;
      v159 = *(_BYTE *)(a1 + 31);
      if (v159)
      {
        *(_BYTE *)(a1 + 31) = v159 - 1;
        v160 = *(_DWORD *)(a1 + 4 * (v159 - 1) + 224);
        if (v159 != 1)
        {
          v301 = *(_DWORD *)(a1 + 4 * (v159 - 1) + 224);
          v161 = v103;
          v162 = v159 - 2;
          *(_BYTE *)(a1 + 31) = v162;
          v103 = *(unsigned int *)(a1 + 4 * v162 + 224);
LABEL_229:
          sub_1ACBFF554(v100, 118, v309, v161, v70, v71, v82, v75);
          v312 = sub_1ACC08D28(v322, 12, DWORD1(v337), v178, v179, v180, v181, v182);
          v303 = v161;
          sub_1ACB683F4(v322, 97, v306, v161, v301, v183, v184, v185);
          sub_1ACBFF554(v322, 127, v309, v103, v186, v187, v188, v189);
          sub_1ACB683F4(v322, 128, v309, v301, v103, v190, v191, v192);
          sub_1ACC08E48(v322, v312, v193, v194, v195, v196, v197, v198);
          v100 = v322;
          if (*(_BYTE *)(*(_QWORD *)v322 + 103))
            v199 = &byte_1EECAD280;
          else
            v199 = (char *)(*(_QWORD *)(v322 + 136) + 40 * (int)v312);
          v82 = v313;
          v105 = a2 + 8;
          *((_DWORD *)v199 + 2) = *(_DWORD *)(v322 + 144);
          v98 = v306;
          if (v301)
          {
            v200 = *(unsigned __int8 *)(a1 + 31);
            if (v200 <= 7)
            {
              *(_BYTE *)(a1 + 31) = v200 + 1;
              *(_DWORD *)(a1 + 4 * v200 + 224) = v301;
            }
          }
          if ((_DWORD)v103 && (v201 = *(unsigned __int8 *)(a1 + 31), v201 <= 7))
          {
            v311 = 0;
            *(_BYTE *)(a1 + 31) = v201 + 1;
            *(_DWORD *)(a1 + 4 * v201 + 224) = v103;
            LODWORD(v103) = v303;
          }
          else
          {
            v311 = 0;
            LODWORD(v103) = v303;
          }
          goto LABEL_154;
        }
        v161 = v103;
        v163 = *(_DWORD *)(a1 + 56);
      }
      else
      {
        v161 = v103;
        v163 = *(_DWORD *)(a1 + 56) + 1;
        v160 = v163;
      }
      v301 = v160;
      v103 = (v163 + 1);
      *(_DWORD *)(a1 + 56) = v103;
      goto LABEL_229;
    }
LABEL_41:
    v14 = 0;
    goto LABEL_42;
  }
  if ((_DWORD)v76 == 1)
  {
    v77 = 0;
    goto LABEL_108;
  }
  v77 = v76 & 0xFFFFFFFE;
  v106 = a4 + 8;
  v107 = v77;
  do
  {
    *(v106 - 4) = -1;
    *v106 = -1;
    v106 += 8;
    v107 -= 2;
  }
  while (v107);
  if (v77 != v76)
  {
LABEL_108:
    v108 = &a4[4 * v77 + 4];
    v109 = v76 - v77;
    do
    {
      *v108 = -1;
      v108 += 4;
      --v109;
    }
    while (v109);
  }
  v110 = 0;
  v82 = 0xFFFFFFFFLL;
  v111 = *(_WORD *)(v23 + 54);
  while (2)
  {
    v112 = v111;
    if ((int)v112 < 1)
      goto LABEL_130;
    v113 = 0;
    v114 = *(_BYTE **)&a4[4 * v110 + 2];
LABEL_114:
    v68 = 0;
    v69 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 16 * v113);
LABEL_117:
    v70 = v114[v68];
    v71 = *(unsigned __int8 *)(v69 + v68);
    if ((_DWORD)v70 == (_DWORD)v71)
    {
      if (!v114[v68])
      {
        a4[4 * v110 + 4] = v113;
        v115 = *(_QWORD *)(v23 + 8);
        if ((*(_WORD *)(v115 + 16 * v113 + 14) & 0x60) != 0)
        {
          sub_1ACBCB308(a1, "cannot INSERT into generated column \"%s\"", v68, v69, v70, v71, v82, v75, *(_QWORD *)(v115 + 16 * v113));
          goto LABEL_41;
        }
        if ((_DWORD)v113 == *(__int16 *)(v23 + 52))
          v82 = v110;
        else
          v82 = v82;
        if (v110 == v113)
          v75 = v75;
        else
          v75 = 0;
        v111 = *(_WORD *)(v23 + 54);
        if ((int)v113 >= v111)
        {
LABEL_130:
          v114 = *(_BYTE **)&a4[4 * v110 + 2];
          goto LABEL_131;
        }
LABEL_111:
        if (++v110 == v76)
          goto LABEL_92;
        continue;
      }
      goto LABEL_116;
    }
    break;
  }
  v70 = byte_1ACCB6333[v70];
  v71 = byte_1ACCB6333[v71];
  if ((_DWORD)v70 == (_DWORD)v71)
  {
LABEL_116:
    ++v68;
    goto LABEL_117;
  }
  if (++v113 != v112)
    goto LABEL_114;
LABEL_131:
  v116 = 0;
  while (2)
  {
    v117 = v114[v116];
    v118 = aRowid_6[v116];
    if ((_DWORD)v117 != (_DWORD)v118)
    {
      if (byte_1ACCB6333[v117] != byte_1ACCB6333[v118])
      {
        v119 = v114;
        for (k = "ROWID"; ; ++k)
        {
          v121 = *v119;
          v122 = *(unsigned __int8 *)k;
          if ((_DWORD)v121 == (_DWORD)v122)
          {
            if (!*v119)
              goto LABEL_146;
          }
          else if (byte_1ACCB6333[v121] != byte_1ACCB6333[v122])
          {
            v123 = v114;
            for (m = "OID"; ; ++m)
            {
              v125 = *v123;
              v126 = *(unsigned __int8 *)m;
              if ((_DWORD)v125 == (_DWORD)v126)
              {
                if (!*v123)
                  goto LABEL_146;
              }
              else if (byte_1ACCB6333[v125] != byte_1ACCB6333[v126])
              {
                goto LABEL_148;
              }
              ++v123;
            }
          }
          ++v119;
        }
      }
      goto LABEL_133;
    }
    if (v114[v116])
    {
LABEL_133:
      ++v116;
      continue;
    }
    break;
  }
LABEL_146:
  if ((v328 & 0x80) == 0)
  {
    v75 = 0;
    v82 = v110;
    goto LABEL_111;
  }
LABEL_148:
  sub_1ACBCB308(a1, "table %S has no column named %s", v68, v69, v70, v71, v82, v75, a2 + 8);
LABEL_22:
  v14 = 0;
  *(_BYTE *)(a1 + 29) = 1;
LABEL_42:
  result = sub_1ACB7E8B0((_QWORD *)v12, (_QWORD *)a2);
  v48 = v331;
  if (v331)
LABEL_43:
    result = sub_1ACC010B0((_QWORD *)v12, v48);
LABEL_44:
  if (v8)
    result = sub_1ACC01018((_QWORD *)v12, v8);
  if (v10)
    result = sub_1ACB7E704((_QWORD *)v12, v10, 1);
  if (a4)
  {
    v49 = *a4;
    if ((int)*a4 >= 1)
    {
      v50 = 0;
      v51 = 2;
      do
      {
        v52 = *(_QWORD **)&a4[v51];
        if (v52)
        {
          sub_1ACBE0F9C((_QWORD *)v12, v52);
          v49 = *a4;
        }
        ++v50;
        v51 += 4;
      }
      while (v50 < v49);
    }
    result = sub_1ACBF0674((_QWORD *)v12, a4);
  }
  if (v14)
    return sub_1ACBF0674((_QWORD *)v12, v14);
  return result;
}

uint64_t sub_1ACB956A8(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, _BYTE *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  _DWORD *v36;
  uint64_t v37;

  if (*(_BYTE *)(a2 + 63) == 1)
  {
    v10 = 0;
    *a8 = -999;
    *a7 = -999;
    return v10;
  }
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a2 + 96);
  if (v17)
  {
    v18 = (uint64_t *)(*(_QWORD *)(v16 + 32) + 24);
    LODWORD(v19) = -1;
    do
    {
      v20 = *v18;
      v18 += 4;
      v19 = (v19 + 1);
    }
    while (v20 != v17);
    if ((a5 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v19 = 4294934528;
    if ((a5 & 0x80000000) == 0)
      goto LABEL_7;
  }
  a5 = *(unsigned int *)(a1 + 52);
LABEL_7:
  v21 = *(_QWORD *)(a1 + 16);
  v22 = (a5 + 1);
  *a7 = a5;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0 || a6 && !*a6)
  {
    if (!*(_BYTE *)(v16 + 111)
      && (_DWORD)v19 != 1
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32 * (int)v19 + 8) + 17))
    {
      sub_1ACC08F44(a1, v19, *(_DWORD *)(a2 + 40), a3 == 113, *(_QWORD *)a2);
    }
  }
  else
  {
    sub_1ACB7A514((_QWORD *)a1, a5, v19, a2, a3, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  }
  *a8 = v22;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
  {
    v36 = a7;
    v37 = a2;
    v10 = 0;
    do
    {
      v24 = v22 + v10;
      if ((*(_WORD *)(v23 + 99) & 3) == 2 && (*(_BYTE *)(v37 + 48) & 0x80) != 0)
      {
        a4 = 0;
        *v36 = v24;
      }
      if (!a6 || a6[v10 + 1])
      {
        v25 = *(unsigned int *)(v23 + 88);
        v26 = *(_DWORD *)(v21 + 144);
        if (*(_DWORD *)(v21 + 148) <= v26)
        {
          sub_1ACBFF5AC(v21, a3, v24, v25, v19, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
        }
        else
        {
          *(_DWORD *)(v21 + 144) = v26 + 1;
          v27 = *(_QWORD *)(v21 + 136) + 40 * v26;
          *(_BYTE *)v27 = a3;
          *(_WORD *)(v27 + 2) = 0;
          *(_DWORD *)(v27 + 4) = v24;
          *(_DWORD *)(v27 + 8) = v25;
          *(_DWORD *)(v27 + 12) = v19;
          *(_BYTE *)(v27 + 1) = 0;
          *(_QWORD *)(v27 + 24) = 0;
          *(_QWORD *)(v27 + 32) = 0;
          *(_QWORD *)(v27 + 16) = 0;
        }
        v28 = *(_QWORD *)(a1 + 16);
        v29 = sub_1ACC09130((_DWORD *)a1, v23);
        if (v29)
        {
          if (*(_BYTE *)(*(_QWORD *)v28 + 103))
          {
            if (!*(_QWORD *)(*(_QWORD *)v28 + 816) && (*(_DWORD *)v29)-- == 1)
              sub_1ACBF0674(*(_QWORD **)(v29 + 16), (_QWORD *)v29);
          }
          else
          {
            v31 = *(_QWORD *)(v28 + 136) + 40 * *(int *)(v28 + 144);
            *(_BYTE *)(v31 - 39) = -8;
            *(_QWORD *)(v31 - 24) = v29;
          }
        }
        v32 = *(_DWORD *)(v21 + 144);
        v33 = __OFSUB__(v32, 1);
        v34 = v32 - 1;
        if (v34 < 0 == v33)
          *(_WORD *)(*(_QWORD *)(v21 + 136) + 40 * v34 + 2) = a4;
      }
      ++v10;
      v23 = *(_QWORD *)(v23 + 40);
    }
    while (v23);
    LODWORD(v22) = v22 + v10;
  }
  else
  {
    v10 = 0;
  }
  if ((int)v22 > *(_DWORD *)(a1 + 52))
    *(_DWORD *)(a1 + 52) = v22;
  return v10;
}

void sub_1ACB95944(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, unsigned __int8 a10, unsigned int a11, int *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int16x8_t v66;
  unsigned __int16 *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  char *v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned __int8 *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  int v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  char *v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned __int8 *v158;
  __int16 v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned __int16 v169;
  uint64_t v170;
  uint64_t v171;
  int16x8_t v172;
  unint64_t v173;
  int16x8_t v174;
  int8x16_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  int8x16_t v178;
  int16x8_t v179;
  int16x8_t v180;
  unint64_t v181;
  unsigned __int16 *v182;
  unsigned int v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t *v194;
  unsigned int v195;
  unsigned __int8 v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  int v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int8x16_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int16 v226;
  uint64_t v227;
  uint64_t v228;
  int16x8_t v229;
  uint64_t v230;
  int16x8_t v231;
  int8x16_t v232;
  uint16x8_t v233;
  uint16x8_t v234;
  int8x16_t v235;
  int16x8_t v236;
  int16x8_t v237;
  uint64_t v238;
  unsigned __int16 *v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  int16x8_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  unsigned int *v252;
  _QWORD *v253;
  int v254;
  uint64_t v255;
  char *v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  char *v273;
  uint64_t v274;
  __int16 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  char *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  char *v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  unsigned __int8 *v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  unsigned __int8 *v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t *v309;
  _DWORD *v310;
  _DWORD *v311;
  int v312;
  _BYTE *v313;
  unsigned __int8 *j;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _BYTE *v320;
  unsigned __int8 *i;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  unsigned int *v326;
  int v327;
  int v328;
  unsigned int v329;
  unsigned __int8 *v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  uint64_t *v344;
  unsigned int v345;
  unsigned int v346;
  int v347;
  int v348;
  char v349;
  unsigned int v350;
  int v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int v365;
  unsigned int v366;
  int v368;
  unsigned int v369;
  int v370;
  uint64_t v371;
  _QWORD v372[2];
  __int128 v373;
  uint64_t v374;
  uint64_t v375;
  int8x16x2_t v376;
  int8x16x2_t v377;
  int8x16x2_t v378;

  v348 = a8;
  v350 = a7;
  v14 = a6;
  v337 = a5;
  v359 = a3;
  v15 = a2;
  v16 = a1;
  v17 = a13;
  v357 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_DWORD *)(a2 + 48);
  if ((v19 & 0x80) != 0)
  {
    v21 = a2 + 16;
    do
    {
      v22 = *(_QWORD *)v21;
      v23 = *(_WORD *)(*(_QWORD *)v21 + 99) & 3;
      v21 = *(_QWORD *)v21 + 40;
    }
    while (v23 != 2);
    v356 = v22;
    v20 = *(unsigned __int16 *)(v22 + 94);
  }
  else
  {
    v356 = 0;
    v20 = 1;
  }
  v339 = v20;
  v331 = a4;
  v365 = a10;
  v355 = a2;
  v366 = a6;
  if ((v19 & 0x800) != 0)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v360 = a6 + 1;
    v354 = *(__int16 *)(a2 + 54);
    v45 = (int8x16_t)xmmword_1ACCBDDB0;
    v46 = (int8x16_t)xmmword_1ACCBDDC0;
    v47 = (int8x16_t)xmmword_1ACCBDDD0;
    v48.i64[0] = 0x1000100010001;
    v48.i64[1] = 0x1000100010001;
    v49 = 1;
    while (1)
    {
      v370 = v43;
      if (v354 >= 1)
        break;
LABEL_133:
      v43 = v370;
      v16 = a1;
      if (v42 & 1 | ((v44 | v370) == 0))
        goto LABEL_7;
      v49 = 0;
      v42 = 1;
      if (v370 >= 1)
      {
        v49 = 0;
        if ((*(_BYTE *)(v15 + 48) & 0x60) != 0)
        {
          sub_1ACC33500(a1, v360, v15, a4, a5, a6, a7, a8);
          v48.i64[0] = 0x1000100010001;
          v48.i64[1] = 0x1000100010001;
          v47 = (int8x16_t)xmmword_1ACCBDDD0;
          v46 = (int8x16_t)xmmword_1ACCBDDC0;
          v45 = (int8x16_t)xmmword_1ACCBDDB0;
          v17 = a13;
          v49 = 0;
        }
      }
    }
    v50 = 0;
    v362 = v49;
    while (1)
    {
      v51 = *(_QWORD *)(v15 + 8);
      v52 = v51 + 16 * v50;
      v53 = *(_BYTE *)(v52 + 8) & 0xF;
      if ((*(_BYTE *)(v52 + 8) & 0xF) == 0 || v50 == *(__int16 *)(v15 + 52))
        goto LABEL_61;
      if (v42 & 1 | ((*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0))
      {
        if (v17 && (*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0 && (*(_DWORD *)(v17 + 4 * v50) & 0x80000000) != 0)
          goto LABEL_61;
        if (v53 == 11)
          v53 = 2;
        if (a10 == 11)
          v54 = v53;
        else
          v54 = a10;
        if ((_DWORD)v54 == 5)
        {
          if ((v42 & 1) != 0 || !*(_WORD *)(v51 + 16 * v50 + 12))
            v54 = 2;
          else
            v54 = 5;
        }
        else if ((((*(_WORD *)(v51 + 16 * v50 + 14) & 0x60) == 0) & ~v49) != 0)
        {
          goto LABEL_61;
        }
        v55 = v50;
        if ((v50 & 0x8000) == 0 && (*(_DWORD *)(v15 + 48) & 0x20) != 0)
        {
          if ((_WORD)v50)
          {
            if (v50 >= 0x11)
            {
              v58 = 16;
              if ((v50 & 0xF) != 0)
                v58 = v50 & 0xF;
              v56 = v50 - v58;
              v59 = v51 + 142;
              v60 = 0uLL;
              v61 = 0uLL;
              do
              {
                v62 = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 64), v46);
                v62.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 32), v45).i32[3];
                v63.i32[0] = vzip1q_s16(*(int16x8_t *)(v59 - 128), *(int16x8_t *)(v59 - 112)).u32[0];
                v63.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v59 - 96), v47).i32[1];
                v63.i64[1] = v62.i64[1];
                v376 = *(int8x16x2_t *)(v59 + 32);
                v64 = vqtbl2q_s8(*(int8x16x2_t *)(v59 + 64), v46);
                v64.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v59 + 96), v45).i32[3];
                v66 = *(int16x8_t *)v59;
                v65 = *(int16x8_t *)(v59 + 16);
                v59 += 256;
                v65.i32[0] = vzip1q_s16(v66, v65).u32[0];
                v65.i32[1] = vqtbl2q_s8(v376, v47).i32[1];
                v65.i64[1] = v64.i64[1];
                v60 = vaddq_s16((int16x8_t)vbicq_s8(v48, (int8x16_t)vshrq_n_u16(v63, 5uLL)), v60);
                v61 = vaddq_s16((int16x8_t)vbicq_s8(v48, (int8x16_t)vshrq_n_u16((uint16x8_t)v65, 5uLL)), v61);
                v58 += 16;
              }
              while (v50 != v58);
              a9 = vaddq_s16(v61, v60);
              a9.i16[0] = vaddvq_s16(a9);
              v57 = a9.i16[0];
            }
            else
            {
              v56 = 0;
              v57 = 0;
            }
            v67 = (unsigned __int16 *)(v51 + 16 * v56 + 14);
            do
            {
              v68 = *v67;
              v67 += 8;
              v57 += ((v68 >> 5) & 1) == 0;
              ++v56;
            }
            while (v50 != v56);
          }
          else
          {
            v57 = 0;
          }
          if ((*(_WORD *)(v51 + 16 * ((uint64_t)(v50 << 16) >> 16) + 14) & 0x20) != 0)
            v55 = v50 - v57 + *(_WORD *)(v15 + 56);
          else
            v55 = v57;
        }
        v69 = v360 + v55;
        switch((int)v54)
        {
          case 1:
          case 3:
            goto LABEL_100;
          case 2:
            v70 = *(_QWORD *)(a1 + 168);
            if (!v70)
              v70 = a1;
            *(_BYTE *)(v70 + 33) = 1;
LABEL_100:
            v71 = sub_1ACB6DDD0(v357, "%s.%s", a3, a4, a5, a6, a7, a8, *(_QWORD *)v15);
            v72 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v72)
            {
              sub_1ACBFF5AC(v18, 69, 1299, v54, v69, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v72 + 1;
              v73 = *(_QWORD *)(v18 + 136) + 40 * v72;
              *(_QWORD *)v73 = 0x51300000045;
              *(_DWORD *)(v73 + 8) = v54;
              *(_DWORD *)(v73 + 12) = v69;
              *(_QWORD *)(v73 + 24) = 0;
              *(_QWORD *)(v73 + 32) = 0;
              *(_QWORD *)(v73 + 16) = 0;
            }
            v14 = v366;
            v46 = (int8x16_t)xmmword_1ACCBDDC0;
            v45 = (int8x16_t)xmmword_1ACCBDDB0;
            v47 = (int8x16_t)xmmword_1ACCBDDD0;
            v48.i64[0] = 0x1000100010001;
            v48.i64[1] = 0x1000100010001;
            if (*(_BYTE *)(*(_QWORD *)v18 + 103))
            {
              if (v71)
              {
                sub_1ACBF0674(*(_QWORD **)v18, v71);
                v48.i64[0] = 0x1000100010001;
                v48.i64[1] = 0x1000100010001;
                v47 = (int8x16_t)xmmword_1ACCBDDD0;
                v46 = (int8x16_t)xmmword_1ACCBDDC0;
                v45 = (int8x16_t)xmmword_1ACCBDDB0;
              }
            }
            else
            {
              v74 = *(_QWORD *)(v18 + 136) + 40 * *(int *)(v18 + 144);
              *(_BYTE *)(v74 - 39) = -6;
              *(_QWORD *)(v74 - 24) = v71;
            }
            v75 = *(_DWORD *)(v18 + 144);
            v39 = __OFSUB__(v75, 1);
            v76 = v75 - 1;
            if (v76 < 0 == v39)
              *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * v76 + 2) = 1;
            v17 = a13;
            v49 = v362;
            break;
          case 5:
            v79 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v79)
            {
              v79 = sub_1ACBFF5AC(v18, 51, v69, 0, 0, a6, a7, a8);
              v17 = a13;
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v79 + 1;
              v80 = *(_QWORD *)(v18 + 136) + 40 * v79;
              *(_DWORD *)v80 = 51;
              *(_DWORD *)(v80 + 4) = v69;
              a9 = 0uLL;
              *(_OWORD *)(v80 + 8) = 0u;
              *(_OWORD *)(v80 + 24) = 0u;
            }
            v81 = *(unsigned __int16 *)(v51 + 16 * v50 + 12);
            if (*(_WORD *)(v51 + 16 * v50 + 12)
              && !*(_BYTE *)(v15 + 63)
              && (v85 = *(_DWORD **)(v15 + 80)) != 0
              && *v85 >= v81)
            {
              a2 = *(_QWORD *)&v85[6 * (v81 - 1) + 2];
              v83 = *(_QWORD *)a1;
              if (a2)
              {
                v82 = (unsigned __int8 *)sub_1ACB8B290(*(_QWORD *)a1, (unsigned __int8 *)a2, 0, 0);
                v17 = a13;
              }
              else
              {
                v82 = 0;
              }
            }
            else
            {
              v82 = 0;
              v83 = *(_QWORD *)a1;
            }
            if (*(_BYTE *)(v83 + 103))
            {
              if (!v82)
                goto LABEL_123;
LABEL_122:
              sub_1ACBF8348((_QWORD *)v83, v82);
              v17 = a13;
              goto LABEL_123;
            }
            sub_1ACC08D80(a1, v82, v69);
            v17 = a13;
            if (v82)
              goto LABEL_122;
LABEL_123:
            v84 = &byte_1EECAD280;
            v14 = v366;
            if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
              v84 = (char *)(*(_QWORD *)(v18 + 136) + 40 * v79);
            ++v370;
            *((_DWORD *)v84 + 2) = *(_DWORD *)(v18 + 144);
            v15 = v355;
            v46 = (int8x16_t)xmmword_1ACCBDDC0;
            v45 = (int8x16_t)xmmword_1ACCBDDB0;
            v47 = (int8x16_t)xmmword_1ACCBDDD0;
            v48.i64[0] = 0x1000100010001;
            v48.i64[1] = 0x1000100010001;
            v49 = v362;
            break;
          default:
            v77 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v77)
            {
              sub_1ACBFF5AC(v18, 50, v69, a11, 0, a6, a7, a8);
              v49 = v362;
              v48.i64[0] = 0x1000100010001;
              v48.i64[1] = 0x1000100010001;
              v47 = (int8x16_t)xmmword_1ACCBDDD0;
              v46 = (int8x16_t)xmmword_1ACCBDDC0;
              v45 = (int8x16_t)xmmword_1ACCBDDB0;
              v17 = a13;
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v77 + 1;
              v78 = *(_QWORD *)(v18 + 136) + 40 * v77;
              *(_DWORD *)v78 = 50;
              *(_DWORD *)(v78 + 4) = v69;
              *(_DWORD *)(v78 + 8) = a11;
              *(_QWORD *)(v78 + 12) = 0;
              *(_QWORD *)(v78 + 28) = 0;
              *(_QWORD *)(v78 + 20) = 0;
              *(_DWORD *)(v78 + 36) = 0;
            }
            v14 = v366;
            break;
        }
      }
      else
      {
        ++v44;
      }
LABEL_61:
      if (++v50 == v354)
        goto LABEL_133;
    }
  }
LABEL_7:
  v24 = *(int **)(v15 + 32);
  if (!v24)
  {
    v353 = 0;
    v33 = a14;
LABEL_141:
    v25 = v357;
    goto LABEL_142;
  }
  v25 = v357;
  if ((*(_BYTE *)(v357 + 49) & 2) == 0)
  {
    *(_DWORD *)(v16 + 64) = ~(_DWORD)v14;
    if (*v24 >= 1)
    {
      v26 = 0;
      v353 = 0;
      v369 = v14 + 1;
      if (a10 == 11)
        LODWORD(v27) = 2;
      else
        LODWORD(v27) = a10;
      v28 = (uint64_t *)(v24 + 4);
      while (1)
      {
        v29 = (unsigned __int8 *)*(v28 - 1);
        if (!v17)
          break;
        a9 = 0uLL;
        v372[0] = 0;
        v373 = 0u;
        v374 = 0;
        v375 = v17;
        v372[1] = sub_1ACC338C0;
        if (v29)
        {
          sub_1ACC0B714((uint64_t)v372, (uint64_t)v29);
          v17 = a13;
          v30 = WORD2(v374);
        }
        else
        {
          v30 = 0;
        }
        if (!v348)
          v30 &= ~2u;
        if (v30)
          break;
        v33 = a14;
LABEL_16:
        ++v26;
        v28 += 3;
        if (v26 >= *v24)
          goto LABEL_140;
      }
      if (!v353)
      {
        sub_1ACC0EDC4((_QWORD **)v18, v15, v369, a4, a5, a6, a7, a8);
        v353 = 1;
      }
      v31 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v31 - 1;
      if (v29)
      {
        v29 = (unsigned __int8 *)sub_1ACB8B290(v357, v29, 0, 0);
        if (*(_BYTE *)(v357 + 103))
          goto LABEL_29;
      }
      else if (*(_BYTE *)(v357 + 103))
      {
LABEL_29:
        if (v29)
          sub_1ACBF8348((_QWORD *)v357, v29);
        if ((_DWORD)v27 == 4)
        {
          v32 = *(_DWORD *)(v18 + 144);
          v14 = v366;
          v33 = a14;
          if (*(_DWORD *)(v18 + 148) <= v32)
          {
            sub_1ACBFF5AC(v18, 9, 0, a11, 0, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v32 + 1;
            v34 = *(_QWORD *)(v18 + 136) + 40 * v32;
            *(_QWORD *)v34 = 9;
            *(_DWORD *)(v34 + 8) = a11;
            *(_QWORD *)(v34 + 12) = 0;
            *(_QWORD *)(v34 + 28) = 0;
            *(_QWORD *)(v34 + 20) = 0;
            *(_DWORD *)(v34 + 36) = 0;
          }
          LODWORD(v27) = 4;
LABEL_50:
          v41 = *(_QWORD *)(v18 + 24);
          a3 = -v31;
          if (*(_DWORD *)(v41 + 68) + *(_DWORD *)(v41 + 72) >= 0)
            *(_DWORD *)(*(_QWORD *)(v41 + 80) + 4 * (int)a3) = *(_DWORD *)(v18 + 144);
          else
            sub_1ACC0D5D4(v41, v18, a3);
          v15 = v355;
          v17 = a13;
          goto LABEL_16;
        }
        v35 = *v28;
        if ((_DWORD)v27 == 5)
          v27 = 2;
        else
          v27 = v27;
        v36 = *(_QWORD *)(a1 + 16);
        if (v36)
        {
          if ((_DWORD)v27 != 2)
          {
LABEL_42:
            sub_1ACBA86CC((uint64_t *)v36, 70, 275, v27, 0, v35, 0, a8);
            v38 = *(_DWORD *)(v36 + 144);
            v39 = __OFSUB__(v38, 1);
            v40 = v38 - 1;
            if (v40 < 0 == v39)
              *(_WORD *)(*(_QWORD *)(v36 + 136) + 40 * v40 + 2) = 3;
            v14 = v366;
            v33 = a14;
            goto LABEL_50;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
            *(_BYTE *)(a1 + 35) = 1;
          v36 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)v27 != 2)
            goto LABEL_42;
        }
        v37 = *(_QWORD *)(a1 + 168);
        if (!v37)
          v37 = a1;
        *(_BYTE *)(v37 + 33) = 1;
        goto LABEL_42;
      }
      sub_1ACBACA00(a1, v29, (v31 - 1), 16, a5, a6, a7, a8);
      goto LABEL_29;
    }
    v353 = 0;
    v33 = a14;
LABEL_140:
    v16 = a1;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_141;
  }
  v353 = 0;
  v33 = a14;
LABEL_142:
  v86 = *(_QWORD *)(v15 + 16);
  v371 = v86;
  if (!v33)
    goto LABEL_150;
  if (!*(_QWORD *)v33)
  {
    v90 = 0;
    if (*(_BYTE *)(v33 + 40))
    {
      v91 = 6;
    }
    else
    {
      v33 = 0;
      v91 = 4;
    }
    v365 = v91;
    goto LABEL_155;
  }
  if (!v86)
  {
LABEL_150:
    v90 = 0;
LABEL_155:
    v349 = 1;
    goto LABEL_156;
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  do
  {
    v86 = *(_QWORD *)(v86 + 40);
    ++v89;
    v88 += 16;
    v87 += 18;
  }
  while (v86);
  LODWORD(v371) = v89;
  if (v25)
  {
    v90 = (uint64_t *)sub_1ACBE1124(v25, v87);
    if (!v90)
      return;
  }
  else
  {
    v90 = (uint64_t *)sub_1ACB5D828(v87);
    if (!v90)
      return;
  }
  bzero(v90, v87);
  v108 = 0;
  *(_QWORD *)(v33 + 48) = v90;
  v109 = (_QWORD *)v33;
  do
  {
    if (!*v109)
      break;
    v110 = v109[7];
    if (v110)
    {
      v111 = *(_QWORD *)(v15 + 16);
      v112 = 0;
      if (v111)
        v113 = v111 == v110;
      else
        v113 = 1;
      if (!v113)
      {
        do
        {
          ++v112;
          v111 = *(_QWORD *)(v111 + 40);
          if (v111)
            v114 = v111 == v110;
          else
            v114 = 1;
        }
        while (!v114);
      }
      if (!*((_BYTE *)v90 + v112 + v88))
      {
        *((_BYTE *)v90 + v112 + v88) = 1;
        v115 = &v90[2 * v108];
        *v115 = v111;
        *((_DWORD *)v115 + 2) = v112;
        ++v108;
      }
    }
    v109 = (_QWORD *)v109[4];
  }
  while (v109);
  v116 = *(_QWORD *)(v15 + 16);
  if (v116)
  {
    v117 = 0;
    do
    {
      if (!*((_BYTE *)v90 + v117 + v88))
      {
        v118 = &v90[2 * v108];
        *v118 = v116;
        *((_DWORD *)v118 + 2) = v117;
        ++v108;
      }
      ++v117;
      v116 = *(_QWORD *)(v116 + 40);
    }
    while (v116);
  }
  v349 = 0;
LABEL_156:
  v92 = *(_QWORD *)(v25 + 48);
  if ((v92 & 0x6000) == 0)
    goto LABEL_173;
  if ((v92 & 0x2000) != 0)
  {
    if ((*(_QWORD *)(v15 + 88)
       || (v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 32) + 56)) != 0 && *(_QWORD *)(v100 + 64))
      && !*(_BYTE *)(v16 + 221))
    {
      v330 = sub_1ACC2E0D4((_QWORD *)v16, (unsigned __int8 **)v15, 128, 0, 0, a6, a7, a8);
      if (v330)
        goto LABEL_598;
    }
    if ((*(_BYTE *)(*(_QWORD *)v16 + 49) & 0x40) != 0 && !*(_BYTE *)(v15 + 63))
    {
      v300 = *(_QWORD *)(v15 + 96);
      v301 = *(unsigned __int8 **)v15;
      v302 = *(_QWORD *)(v300 + 96);
      if (v302)
      {
        v303 = *v301;
        if (*v301)
        {
          v304 = 0;
          v305 = v301 + 1;
          do
          {
            v304 = -1640531535 * (v304 + byte_1ACCB6333[v303]);
            v306 = *v305++;
            v303 = v306;
          }
          while (v306);
        }
        else
        {
          v304 = 0;
        }
        v311 = (_DWORD *)(v302 + 16 * (v304 % *(_DWORD *)(v300 + 80)));
        v309 = (uint64_t *)(v311 + 2);
      }
      else
      {
        v309 = (uint64_t *)(v300 + 88);
        v311 = (_DWORD *)(v300 + 84);
      }
      v319 = *v311;
      if (!v319)
        goto LABEL_594;
LABEL_586:
      v309 = (uint64_t *)*v309;
      v320 = (_BYTE *)v309[3];
      for (i = *(unsigned __int8 **)v15; ; ++i)
      {
        v322 = *v320;
        v323 = *i;
        if ((_DWORD)v322 == (_DWORD)v323)
        {
          if (!*v320)
            goto LABEL_595;
        }
        else if (byte_1ACCB6333[v322] != byte_1ACCB6333[v323])
        {
          if (!--v319)
            goto LABEL_593;
          goto LABEL_586;
        }
        ++v320;
      }
    }
LABEL_173:
    v332 = 0;
    v330 = 0;
    goto LABEL_174;
  }
  if ((*(_BYTE *)(*(_QWORD *)v16 + 49) & 0x40) == 0 || *(_BYTE *)(v15 + 63))
    goto LABEL_173;
  v93 = *(_QWORD *)(v15 + 96);
  v94 = *(unsigned __int8 **)v15;
  v95 = *(_QWORD *)(v93 + 96);
  if (v95)
  {
    v96 = *v94;
    if (*v94)
    {
      v97 = 0;
      v98 = v94 + 1;
      do
      {
        v97 = -1640531535 * (v97 + byte_1ACCB6333[v96]);
        v99 = *v98++;
        v96 = v99;
      }
      while (v99);
    }
    else
    {
      v97 = 0;
    }
    v310 = (_DWORD *)(v95 + 16 * (v97 % *(_DWORD *)(v93 + 80)));
    v309 = (uint64_t *)(v310 + 2);
  }
  else
  {
    v309 = (uint64_t *)(v93 + 88);
    v310 = (_DWORD *)(v93 + 84);
  }
  v312 = *v310;
  if (v312)
  {
    while (1)
    {
      v309 = (uint64_t *)*v309;
      v313 = (_BYTE *)v309[3];
      for (j = *(unsigned __int8 **)v15; ; ++j)
      {
        v315 = *v313;
        v316 = *j;
        if ((_DWORD)v315 != (_DWORD)v316)
          break;
        if (!*v313)
          goto LABEL_595;
LABEL_570:
        ++v313;
      }
      if (byte_1ACCB6333[v315] == byte_1ACCB6333[v316])
        goto LABEL_570;
      if (!--v312)
      {
LABEL_593:
        v309 = &qword_1EECAD260;
        goto LABEL_595;
      }
    }
  }
LABEL_594:
  v309 = &qword_1EECAD260;
LABEL_595:
  if (v309[2])
  {
    v330 = 0;
  }
  else
  {
    v330 = 0;
    if (!*(_QWORD *)(v15 + 72))
    {
      v332 = 0;
      goto LABEL_174;
    }
  }
LABEL_598:
  a4 = (*(_DWORD *)(v16 + 56) + 1);
  *(_DWORD *)(v16 + 56) = a4;
  v324 = *(_DWORD *)(v18 + 144);
  HIDWORD(v332) = a4;
  if (*(_DWORD *)(v18 + 148) <= v324)
  {
    sub_1ACBFF5AC(v18, 71, 0, a4, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v18 + 144) = v324 + 1;
    v325 = *(_QWORD *)(v18 + 136) + 40 * v324;
    *(_QWORD *)v325 = 71;
    *(_DWORD *)(v325 + 8) = a4;
    *(_QWORD *)(v325 + 12) = 0;
    *(_QWORD *)(v325 + 28) = 0;
    *(_QWORD *)(v325 + 20) = 0;
    *(_DWORD *)(v325 + 36) = 0;
  }
  LODWORD(v332) = *(_DWORD *)(v16 + 68) - 1;
  *(_DWORD *)(v16 + 68) = v332;
LABEL_174:
  v101 = 0;
  v334 = 0;
  if (v348)
  {
    v340 = 0;
    v343 = 0;
    v335 = 0;
    v336 = 0;
    v102 = 0;
    if (!v356)
    {
      v103 = *(_DWORD *)(v16 + 68);
      v104 = v103 - 1;
      *(_DWORD *)(v16 + 68) = v103 - 1;
      v105 = v365;
      if (v365 == 11)
      {
        if (*(_BYTE *)(v15 + 62) == 11)
          v105 = 2;
        else
          v105 = *(unsigned __int8 *)(v15 + 62);
      }
      if (v33)
      {
        v101 = v33;
        while (*(_QWORD *)v101 && *(_QWORD *)(v101 + 56))
        {
          v101 = *(_QWORD *)(v101 + 32);
          if (!v101)
            goto LABEL_185;
        }
        if (*(_BYTE *)(v101 + 40))
          v105 = 6;
        else
          v105 = 4;
        if (v101 == v33)
        {
          v343 = 0;
          v101 = v33;
          goto LABEL_217;
        }
LABEL_185:
        v106 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v106)
        {
          v343 = sub_1ACBFF5AC(v18, 9, 0, 0, 0, a6, a7, a8);
        }
        else
        {
          v343 = *(_DWORD *)(v18 + 144);
          *(_DWORD *)(v18 + 144) = v106 + 1;
          v107 = *(_QWORD *)(v18 + 136) + 40 * v106;
          *(_BYTE *)v107 = 9;
          a9 = 0uLL;
          *(_OWORD *)(v107 + 1) = 0u;
          *(_OWORD *)(v107 + 17) = 0u;
          *(_QWORD *)(v107 + 32) = 0;
        }
      }
      else
      {
        v101 = 0;
        v343 = 0;
      }
LABEL_217:
      if ((_DWORD)v105 != 5 || v365 == 5)
      {
        v335 = 0;
      }
      else
      {
        v335 = 0;
        if (*(_QWORD *)(v15 + 16) && !v343)
        {
          v122 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v122)
          {
            v335 = sub_1ACBFF5AC(v18, 9, 0, 0, 0, a6, a7, a8) + 1;
          }
          else
          {
            v335 = v122 + 1;
            *(_DWORD *)(v18 + 144) = v122 + 1;
            v123 = *(_QWORD *)(v18 + 136) + 40 * v122;
            *(_BYTE *)v123 = 9;
            a9 = 0uLL;
            *(_OWORD *)(v123 + 1) = 0u;
            *(_OWORD *)(v123 + 17) = 0u;
            *(_QWORD *)(v123 + 32) = 0;
          }
        }
      }
      v120 = *(_DWORD *)(v18 + 144);
      if (v350)
      {
        if (*(_DWORD *)(v18 + 148) <= v120)
        {
          sub_1ACBFF5AC(v18, 53, v14, (v103 - 1), v350, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v120 + 1;
          v121 = *(_QWORD *)(v18 + 136) + 40 * v120;
          *(_DWORD *)v121 = 53;
          *(_DWORD *)(v121 + 4) = v14;
          *(_DWORD *)(v121 + 8) = v104;
          *(_DWORD *)(v121 + 12) = v350;
          *(_QWORD *)(v121 + 24) = 0;
          *(_QWORD *)(v121 + 32) = 0;
          *(_QWORD *)(v121 + 16) = 0;
        }
        v120 = *(_DWORD *)(v18 + 144);
        if (v120 >= 1)
          *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * (v120 - 1) + 2) = 144;
      }
      if (*(_DWORD *)(v18 + 148) <= v120)
      {
        sub_1ACBFF5AC(v18, 31, v331, (v103 - 1), v14, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v18 + 144) = v120 + 1;
        v124 = *(_QWORD *)(v18 + 136) + 40 * v120;
        *(_DWORD *)v124 = 31;
        *(_DWORD *)(v124 + 4) = v331;
        *(_DWORD *)(v124 + 8) = v104;
        *(_DWORD *)(v124 + 12) = v14;
        *(_QWORD *)(v124 + 24) = 0;
        *(_QWORD *)(v124 + 32) = 0;
        *(_QWORD *)(v124 + 16) = 0;
      }
      switch((int)v105)
      {
        case 1:
        case 2:
        case 3:
          goto LABEL_243;
        case 4:
          goto LABEL_245;
        case 5:
          if (HIDWORD(v332))
          {
            v125 = *(_QWORD *)(v16 + 168);
            if (!v125)
              v125 = v16;
            *(_BYTE *)(v125 + 32) = 1;
            sub_1ACB9823C(v16, v15, (uint64_t)v330, v331, v337, v14, 1, 0, a9, 5u, 1u, 0xFFFFFFFF);
            v126 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v126)
            {
              v334 = 1;
              sub_1ACBFF5AC(v18, 86, HIDWORD(v332), 1, 0, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v126 + 1;
              v127 = *(_QWORD *)(v18 + 136) + 40 * v126;
              *(_DWORD *)v127 = 86;
              *(_DWORD *)(v127 + 4) = HIDWORD(v332);
              v334 = 1;
              *(_DWORD *)(v127 + 8) = 1;
              *(_QWORD *)(v127 + 12) = 0;
              *(_QWORD *)(v127 + 28) = 0;
              *(_QWORD *)(v127 + 20) = 0;
              *(_DWORD *)(v127 + 36) = 0;
            }
            v336 = 1;
            goto LABEL_250;
          }
          v307 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v307)
          {
            sub_1ACBFF5AC(v18, 130, v331, 64, 0, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v307 + 1;
            v308 = *(_QWORD *)(v18 + 136) + 40 * v307;
            *(_DWORD *)v308 = 130;
            *(_DWORD *)(v308 + 4) = v331;
            *(_DWORD *)(v308 + 8) = 64;
            *(_QWORD *)(v308 + 12) = 0;
            *(_QWORD *)(v308 + 28) = 0;
            *(_QWORD *)(v308 + 20) = 0;
            *(_DWORD *)(v308 + 36) = 0;
          }
          if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
          {
            v317 = *(_QWORD *)(v18 + 136) + 40 * *(int *)(v18 + 144);
            *(_BYTE *)(v317 - 39) = -5;
            *(_QWORD *)(v317 - 24) = v15;
          }
          v334 = 1;
          if (*(_QWORD *)(v15 + 16))
          {
            v318 = *(_QWORD *)(v16 + 168);
            if (!v318)
              v318 = v16;
            *(_BYTE *)(v318 + 32) = 1;
            sub_1ACC2EAE0(v16, v15, v331, v337, 0, -1, a9);
          }
          goto LABEL_249;
        case 6:
          sub_1ACC33A60(v16, v33, v15, 0, v331, a6, a7, a8);
LABEL_245:
          v128 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v128)
          {
            sub_1ACBFF5AC(v18, 9, 0, a11, 0, a6, a7, a8);
LABEL_248:
            v334 = 0;
LABEL_249:
            v336 = 0;
          }
          else
          {
            v334 = 0;
            v336 = 0;
            *(_DWORD *)(v18 + 144) = v128 + 1;
            v129 = *(_QWORD *)(v18 + 136) + 40 * v128;
            *(_QWORD *)v129 = 9;
            *(_DWORD *)(v129 + 8) = a11;
            *(_QWORD *)(v129 + 12) = 0;
            *(_QWORD *)(v129 + 28) = 0;
            *(_QWORD *)(v129 + 20) = 0;
            *(_DWORD *)(v129 + 36) = 0;
          }
LABEL_250:
          v130 = *(_QWORD *)(v18 + 24);
          v131 = -v103;
          if (*(_DWORD *)(v130 + 68) + *(_DWORD *)(v130 + 72) < 0)
          {
            sub_1ACC0D5D4(v130, v18, v131);
            if (!v33)
              goto LABEL_257;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v130 + 80) + 4 * v131) = *(_DWORD *)(v18 + 144);
            if (!v33)
              goto LABEL_257;
          }
          if (v101 != v33)
          {
            v132 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v132)
            {
              v340 = sub_1ACBFF5AC(v18, 9, 0, 0, 0, a6, a7, a8);
              v102 = 0;
            }
            else
            {
              v102 = 0;
              v340 = *(_DWORD *)(v18 + 144);
              *(_DWORD *)(v18 + 144) = v132 + 1;
              v133 = *(_QWORD *)(v18 + 136) + 40 * v132;
              *(_BYTE *)v133 = 9;
              a9 = 0uLL;
              *(_OWORD *)(v133 + 1) = 0u;
              *(_OWORD *)(v133 + 17) = 0u;
              *(_QWORD *)(v133 + 32) = 0;
            }
            break;
          }
LABEL_257:
          if (v335)
          {
            v102 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v102)
            {
              v102 = sub_1ACBFF5AC(v18, 9, 0, 0, 0, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v102 + 1;
              v134 = *(_QWORD *)(v18 + 136) + 40 * v102;
              *(_BYTE *)v134 = 9;
              a9 = 0uLL;
              *(_OWORD *)(v134 + 1) = 0u;
              *(_OWORD *)(v134 + 17) = 0u;
              *(_QWORD *)(v134 + 32) = 0;
            }
            if (*(_BYTE *)(*(_QWORD *)v18 + 103))
              v135 = &byte_1EECAD280;
            else
              v135 = (char *)(*(_QWORD *)(v18 + 136) + 40 * (int)(v335 - 1));
            v340 = 0;
            *((_DWORD *)v135 + 2) = *(_DWORD *)(v18 + 144);
          }
          else
          {
            v340 = 0;
            v335 = 0;
            v102 = 0;
          }
          break;
        default:
          v105 = 2;
LABEL_243:
          sub_1ACC33938((uint64_t *)v16, v105, v15, a4, a5, a6, a7, a8);
          goto LABEL_248;
      }
    }
  }
  else
  {
    v340 = 0;
    v343 = 0;
    v335 = 0;
    v336 = 0;
    v102 = 0;
  }
  v328 = v102;
  v344 = v90;
  if ((v349 & 1) == 0)
  {
    LODWORD(v136) = *((_DWORD *)v90 + 2);
    v137 = *v90;
    if (v137)
      goto LABEL_270;
LABEL_514:
    v341 = v332;
LABEL_515:
    v283 = v334;
    v282 = v335;
    if (v335)
      goto LABEL_516;
    goto LABEL_523;
  }
  LODWORD(v136) = 0;
  v137 = v371;
  if (!v371)
    goto LABEL_514;
LABEL_270:
  v358 = 0;
  v363 = v14 + 1;
  v368 = ~(_DWORD)v14;
  v326 = (unsigned int *)(v16 + 44);
  if (v350)
    v138 = v330 == 0;
  else
    v138 = 1;
  v139 = !v138;
  v327 = v139;
  v329 = v343 + 1;
  v140 = (int8x16_t)xmmword_1ACCBDDB0;
  v141 = (int8x16_t)xmmword_1ACCBDDC0;
  v142 = (int8x16_t)xmmword_1ACCBDDD0;
  v143.i64[0] = 0x1000100010001;
  v143.i64[1] = 0x1000100010001;
  v341 = v332;
  v352 = v33;
  while (1)
  {
    while (1)
    {
      v364 = (int)v136;
      if (!*(_DWORD *)(v359 + 4 * (int)v136))
        goto LABEL_364;
      if (v33)
      {
        v101 = v33;
        do
        {
          if (!*(_QWORD *)v101)
            break;
          if (*(_QWORD *)(v101 + 56) == v137)
            break;
          v101 = *(_QWORD *)(v101 + 32);
        }
        while (v101);
        if (v343 && v101 == v33)
        {
          v144 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
            v144 = (char *)(*(_QWORD *)(v18 + 136) + 40 * v343);
          *((_DWORD *)v144 + 2) = *(_DWORD *)(v18 + 144);
          v101 = v33;
        }
      }
      v145 = *(_DWORD *)(v16 + 68);
      v361 = v145 - 1;
      *(_DWORD *)(v16 + 68) = v145 - 1;
      if (!v353)
      {
        sub_1ACC0EDC4((_QWORD **)v18, v15, v363, a4, a5, a6, a7, a8);
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        v353 = 1;
        if (!*(_QWORD *)(v137 + 72))
          goto LABEL_303;
LABEL_293:
        v146 = *(unsigned int *)(v359 + 4 * v364);
        v147 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v147)
        {
          sub_1ACBFF5AC(v18, 75, 0, v146, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v147 + 1;
          v148 = *(_QWORD *)(v18 + 136) + 40 * v147;
          *(_QWORD *)v148 = 75;
          *(_DWORD *)(v148 + 8) = v146;
          *(_QWORD *)(v148 + 12) = 0;
          *(_QWORD *)(v148 + 28) = 0;
          *(_QWORD *)(v148 + 20) = 0;
          *(_DWORD *)(v148 + 36) = 0;
        }
        *(_DWORD *)(v16 + 64) = v368;
        v149 = *(unsigned __int8 **)(v137 + 72);
        v150 = *(_QWORD *)v16;
        if (v149)
          v151 = sub_1ACB8B290(*(_QWORD *)v16, v149, 0, 0);
        else
          v151 = 0;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        if (*(_BYTE *)(v150 + 103))
        {
          if (!v151)
          {
LABEL_302:
            *(_DWORD *)(v16 + 64) = 0;
            goto LABEL_303;
          }
        }
        else
        {
          sub_1ACB9F1D0(v16, (unsigned __int8 **)v151, v361, 16, a5, a6, a7, a8);
          v143.i64[0] = 0x1000100010001;
          v143.i64[1] = 0x1000100010001;
          v142 = (int8x16_t)xmmword_1ACCBDDD0;
          v141 = (int8x16_t)xmmword_1ACCBDDC0;
          v140 = (int8x16_t)xmmword_1ACCBDDB0;
          if (!v151)
            goto LABEL_302;
        }
        sub_1ACBF8348((_QWORD *)v150, (unsigned __int8 *)v151);
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        goto LABEL_302;
      }
      if (*(_QWORD *)(v137 + 72))
        goto LABEL_293;
LABEL_303:
      a5 = *(unsigned int *)(v359 + 4 * v364);
      v152 = (a5 + 1);
      v351 = v145;
      v346 = *(_DWORD *)(v359 + 4 * v364);
      if (*(_WORD *)(v137 + 96))
      {
        v153 = 0;
        while (1)
        {
          v154 = *(unsigned __int16 *)(*(_QWORD *)(v137 + 8) + 2 * v153);
          if (v154 == 0xFFFF)
            goto LABEL_315;
          if (v154 == 65534)
          {
            *(_DWORD *)(v16 + 64) = v368;
            v155 = *(unsigned __int8 **)(*(_QWORD *)(v137 + 80) + 24 * v153 + 8);
            v156 = *(_QWORD *)v16;
            if (v155)
            {
              v157 = sub_1ACB8B290(*(_QWORD *)v16, v155, 0, 0);
              v143.i64[0] = 0x1000100010001;
              v143.i64[1] = 0x1000100010001;
              v142 = (int8x16_t)xmmword_1ACCBDDD0;
              v141 = (int8x16_t)xmmword_1ACCBDDC0;
              v140 = (int8x16_t)xmmword_1ACCBDDB0;
              v158 = (unsigned __int8 *)v157;
              if (!*(_BYTE *)(v156 + 103))
                goto LABEL_311;
            }
            else
            {
              v158 = 0;
              if (!*(_BYTE *)(v156 + 103))
              {
LABEL_311:
                sub_1ACC08D80(v16, v158, (v152 + v153));
                v143.i64[0] = 0x1000100010001;
                v143.i64[1] = 0x1000100010001;
                v142 = (int8x16_t)xmmword_1ACCBDDD0;
                v141 = (int8x16_t)xmmword_1ACCBDDC0;
                v140 = (int8x16_t)xmmword_1ACCBDDB0;
              }
            }
            if (v158)
            {
              sub_1ACBF8348((_QWORD *)v156, v158);
              v143.i64[0] = 0x1000100010001;
              v143.i64[1] = 0x1000100010001;
              v142 = (int8x16_t)xmmword_1ACCBDDD0;
              v141 = (int8x16_t)xmmword_1ACCBDDC0;
              v140 = (int8x16_t)xmmword_1ACCBDDB0;
            }
            *(_DWORD *)(v16 + 64) = 0;
            goto LABEL_306;
          }
          v159 = *(_WORD *)(*(_QWORD *)(v137 + 8) + 2 * v153);
          if (*(unsigned __int16 *)(v15 + 52) == (unsigned __int16)v154)
          {
LABEL_315:
            v160 = (v152 + v153);
            v161 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v161)
            {
              v163 = v18;
              v164 = 82;
              v165 = v14;
LABEL_340:
              sub_1ACBFF5AC(v163, v164, v165, v160, 0, a6, a7, a8);
              v143.i64[0] = 0x1000100010001;
              v143.i64[1] = 0x1000100010001;
              v142 = (int8x16_t)xmmword_1ACCBDDD0;
              v141 = (int8x16_t)xmmword_1ACCBDDC0;
              v140 = (int8x16_t)xmmword_1ACCBDDB0;
              goto LABEL_306;
            }
            *(_DWORD *)(v18 + 144) = v161 + 1;
            v162 = *(_QWORD *)(v18 + 136) + 40 * v161;
            *(_DWORD *)v162 = 82;
            *(_DWORD *)(v162 + 4) = v14;
          }
          else
          {
            if (((__int16)v154 & 0x80000000) == 0 && (*(_DWORD *)(v15 + 48) & 0x20) != 0)
            {
              v166 = *(_QWORD *)(v15 + 8);
              if ((_WORD)v154)
              {
                v167 = (__int16)v154 & 0xFFFFFFFFLL;
                if (v167 >= 0x11)
                {
                  v170 = *(_WORD *)(*(_QWORD *)(v137 + 8) + 2 * v153) & 0xF;
                  if ((*(_WORD *)(*(_QWORD *)(v137 + 8) + 2 * v153) & 0xF) == 0)
                    v170 = 16;
                  v168 = v167 - v170;
                  v171 = v166 + 142;
                  v172 = 0uLL;
                  v173 = v168;
                  v174 = 0uLL;
                  do
                  {
                    v175 = vqtbl2q_s8(*(int8x16x2_t *)(v171 - 64), v141);
                    v175.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v171 - 32), v140).i32[3];
                    v176.i32[0] = vzip1q_s16(*(int16x8_t *)(v171 - 128), *(int16x8_t *)(v171 - 112)).u32[0];
                    v176.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v171 - 96), v142).i32[1];
                    v176.i64[1] = v175.i64[1];
                    v177 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v171 + 96), v140);
                    v377 = *(int8x16x2_t *)(v171 + 32);
                    v178 = vqtbl2q_s8(*(int8x16x2_t *)(v171 + 64), v141);
                    v180 = *(int16x8_t *)v171;
                    v179 = *(int16x8_t *)(v171 + 16);
                    v171 += 256;
                    v178.i32[3] = v177.i32[3];
                    v177.i32[0] = vzip1q_s16(v180, v179).u32[0];
                    v177.i32[1] = vqtbl2q_s8(v377, v142).i32[1];
                    v177.i64[1] = v178.i64[1];
                    v172 = vaddq_s16((int16x8_t)vbicq_s8(v143, (int8x16_t)vshrq_n_u16(v176, 5uLL)), v172);
                    v174 = vaddq_s16((int16x8_t)vbicq_s8(v143, (int8x16_t)vshrq_n_u16(v177, 5uLL)), v174);
                    v173 -= 16;
                  }
                  while (v173);
                  a9 = vaddq_s16(v174, v172);
                  a9.i16[0] = vaddvq_s16(a9);
                  v169 = a9.i16[0];
                }
                else
                {
                  v168 = 0;
                  v169 = 0;
                }
                v181 = v167 - v168;
                v182 = (unsigned __int16 *)(v166 + 16 * v168 + 14);
                do
                {
                  v183 = *v182;
                  v182 += 8;
                  v169 += ((v183 >> 5) & 1) == 0;
                  --v181;
                }
                while (v181);
              }
              else
              {
                v167 = 0;
                v169 = 0;
              }
              if ((*(_WORD *)(v166 + 16 * v167 + 14) & 0x20) != 0)
                v159 = v159 - v169 + *(_WORD *)(v15 + 56);
              else
                v159 = v169;
            }
            v165 = v363 + v159;
            v160 = (v152 + v153);
            v184 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v184)
            {
              v163 = v18;
              v164 = 81;
              goto LABEL_340;
            }
            *(_DWORD *)(v18 + 144) = v184 + 1;
            v162 = *(_QWORD *)(v18 + 136) + 40 * v184;
            *(_DWORD *)v162 = 81;
            *(_DWORD *)(v162 + 4) = v165;
          }
          *(_DWORD *)(v162 + 8) = v160;
          *(_QWORD *)(v162 + 12) = 0;
          *(_QWORD *)(v162 + 28) = 0;
          *(_QWORD *)(v162 + 20) = 0;
          *(_DWORD *)(v162 + 36) = 0;
LABEL_306:
          ++v153;
          a4 = *(unsigned __int16 *)(v137 + 96);
          if (v153 >= a4)
          {
            a5 = *(unsigned int *)(v359 + 4 * v364);
            v145 = v351;
            goto LABEL_343;
          }
        }
      }
      a4 = 0;
LABEL_343:
      v185 = *(_DWORD *)(v18 + 144);
      if (*(_DWORD *)(v18 + 148) <= v185)
      {
        sub_1ACBFF5AC(v18, 97, v152, a4, a5, a6, a7, a8);
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        if (!v350)
          goto LABEL_349;
      }
      else
      {
        *(_DWORD *)(v18 + 144) = v185 + 1;
        v186 = *(_QWORD *)(v18 + 136) + 40 * v185;
        *(_DWORD *)v186 = 97;
        *(_DWORD *)(v186 + 4) = v152;
        *(_DWORD *)(v186 + 8) = a4;
        *(_DWORD *)(v186 + 12) = a5;
        *(_QWORD *)(v186 + 24) = 0;
        *(_QWORD *)(v186 + 32) = 0;
        *(_QWORD *)(v186 + 16) = 0;
        if (!v350)
          goto LABEL_349;
      }
      if (!v348 && v356 == v137)
      {
LABEL_360:
        v191 = *(_QWORD *)(v18 + 24);
        v192 = -v145;
        if (*(_DWORD *)(v191 + 68) + *(_DWORD *)(v191 + 72) < 0)
        {
          sub_1ACC0D5D4(v191, v18, v192);
          v143.i64[0] = 0x1000100010001;
          v143.i64[1] = 0x1000100010001;
          v142 = (int8x16_t)xmmword_1ACCBDDD0;
          v141 = (int8x16_t)xmmword_1ACCBDDC0;
          v140 = (int8x16_t)xmmword_1ACCBDDB0;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v191 + 80) + 4 * v192) = *(_DWORD *)(v18 + 144);
        }
        v33 = v352;
LABEL_364:
        v193 = v358;
        goto LABEL_365;
      }
LABEL_349:
      v187 = *(unsigned __int8 *)(v137 + 98);
      if (!*(_BYTE *)(v137 + 98))
        goto LABEL_360;
      if (v187 == 11)
        v187 = 2;
      if (v365 != 11)
        v187 = v365;
      if (v101)
      {
        if (*(_BYTE *)(v101 + 40))
          v187 = 6;
        else
          v187 = 4;
      }
      v342 = v187;
      v188 = v364 + v337;
      a6 = *(unsigned __int16 *)(v137 + 94);
      v189 = *(_DWORD *)(v18 + 144);
      if (*(_DWORD *)(v18 + 148) <= v189)
      {
        v189 = sub_1ACBFF7F0(v18, 27, v364 + v337, v361, v152, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v18 + 144) = v189 + 1;
        v190 = *(_QWORD *)(v18 + 136) + 40 * v189;
        *(_DWORD *)v190 = 64795;
        *(_DWORD *)(v190 + 4) = v188;
        *(_DWORD *)(v190 + 8) = v361;
        *(_DWORD *)(v190 + 12) = v152;
        *(_DWORD *)(v190 + 16) = a6;
        *(_QWORD *)(v190 + 24) = 0;
        *(_QWORD *)(v190 + 32) = 0;
      }
      v195 = v152;
      if (v356 != v137)
      {
        if (v339 == 1)
        {
          if (*(_BYTE *)(v16 + 31))
          {
            v196 = *(_BYTE *)(v16 + 31) - 1;
            *(_BYTE *)(v16 + 31) = v196;
            v195 = *(_DWORD *)(v16 + 4 * v196 + 224);
          }
          else
          {
            v195 = *(_DWORD *)(v16 + 56) + 1;
            *(_DWORD *)(v16 + 56) = v195;
          }
        }
        else
        {
          v197 = *(_DWORD *)(v16 + 40);
          v39 = __OFSUB__(v197, v339);
          v198 = v197 - v339;
          if (v198 < 0 != v39)
          {
            v199 = *(_DWORD *)(v16 + 56);
            v195 = v199 + 1;
            *(_DWORD *)(v16 + 56) = v199 + v339;
          }
          else
          {
            v195 = *(_DWORD *)(v16 + 44);
            *(_DWORD *)(v16 + 40) = v198;
            *(_DWORD *)(v16 + 44) = v195 + v339;
          }
        }
      }
      v338 = v364 + v337;
      v333 = v189;
      v345 = v195;
      v200 = v356;
      if (v350 || v342 == 5)
      {
        if ((*(_BYTE *)(v15 + 48) & 0x80) != 0)
        {
          if (v356 != v137 && *(_WORD *)(v356 + 94))
          {
            v205 = 0;
            do
            {
              if (*(_WORD *)(v137 + 96))
              {
                v207 = 0;
                while (*(unsigned __int16 *)(*(_QWORD *)(v137 + 8) + 2 * v207) != *(unsigned __int16 *)(*(_QWORD *)(v356 + 8) + 2 * v205))
                {
                  if (*(unsigned __int16 *)(v137 + 96) == ++v207)
                    goto LABEL_402;
                }
              }
              else
              {
LABEL_402:
                LOWORD(v207) = -1;
              }
              a4 = (__int16)v207;
              a5 = v345 + v205;
              v208 = *(_DWORD *)(v18 + 144);
              if (*(_DWORD *)(v18 + 148) > v208)
              {
                *(_DWORD *)(v18 + 144) = v208 + 1;
                v206 = *(_QWORD *)(v18 + 136) + 40 * v208;
                *(_DWORD *)v206 = 94;
                *(_DWORD *)(v206 + 4) = v188;
                *(_DWORD *)(v206 + 8) = a4;
                *(_DWORD *)(v206 + 12) = a5;
                *(_QWORD *)(v206 + 24) = 0;
                *(_QWORD *)(v206 + 32) = 0;
                *(_QWORD *)(v206 + 16) = 0;
              }
              else
              {
                sub_1ACBFF5AC(v18, 94, v188, a4, a5, a6, a7, a8);
              }
              ++v205;
            }
            while (v205 < *(unsigned __int16 *)(v356 + 94));
          }
          if (v350)
          {
            v209 = v345;
            if ((*(_WORD *)(v137 + 99) & 3) == 2)
              v209 = v152;
            v347 = v209;
            if (*(_WORD *)(v356 + 94))
            {
              v210 = 0;
              LODWORD(v211) = *(_DWORD *)(v18 + 144) + *(unsigned __int16 *)(v356 + 94);
              LODWORD(v212) = 52;
              do
              {
                v213 = *(char **)(*(_QWORD *)(v200 + 64) + 8 * v210);
                v214 = *(unsigned __int8 *)(*(_QWORD *)a1 + 100);
                v215 = *(unsigned __int8 *)(*(_QWORD *)a1 + 197);
                v216 = sub_1ACBFC650(*(_QWORD *)a1, *(unsigned __int8 *)(*(_QWORD *)a1 + 100), v213, v215);
                v220 = (uint64_t)v216;
                if (!v215 && (!v216 || !v216[3]))
                  v220 = sub_1ACC01130(a1, v214, (uint64_t)v216, v213, v217, (uint64_t)v216, v218, v219);
                v15 = v355;
                v200 = v356;
                v14 = v366;
                v221 = *(__int16 *)(*(_QWORD *)(v356 + 8) + 2 * v210);
                if (v210 == *(unsigned __int16 *)(v356 + 94) - 1)
                  v211 = v361;
                else
                  v211 = v211;
                if (v210 == *(unsigned __int16 *)(v356 + 94) - 1)
                  v212 = 53;
                else
                  v212 = v212;
                v222.i64[0] = 0x1000100010001;
                v222.i64[1] = 0x1000100010001;
                if ((v221 & 0x8000000000000000) == 0 && (*(_DWORD *)(v355 + 48) & 0x20) != 0)
                {
                  v223 = *(_QWORD *)(v355 + 8);
                  if (*(_WORD *)(*(_QWORD *)(v356 + 8) + 2 * v210))
                  {
                    v224 = v221;
                    if (v221 >= 0x11uLL)
                    {
                      v227 = v221 & 0xF;
                      if ((v221 & 0xF) == 0)
                        v227 = 16;
                      v225 = v221 - v227;
                      v228 = v223 + 142;
                      v229 = 0uLL;
                      v230 = v225;
                      v231 = 0uLL;
                      do
                      {
                        v232 = vqtbl2q_s8(*(int8x16x2_t *)(v228 - 64), (int8x16_t)xmmword_1ACCBDDC0);
                        v232.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v228 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
                        v233.i32[0] = vzip1q_s16(*(int16x8_t *)(v228 - 128), *(int16x8_t *)(v228 - 112)).u32[0];
                        v233.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v228 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                        v233.i64[1] = v232.i64[1];
                        v234 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v228 + 96), (int8x16_t)xmmword_1ACCBDDB0);
                        v378 = *(int8x16x2_t *)(v228 + 32);
                        v235 = vqtbl2q_s8(*(int8x16x2_t *)(v228 + 64), (int8x16_t)xmmword_1ACCBDDC0);
                        v237 = *(int16x8_t *)v228;
                        v236 = *(int16x8_t *)(v228 + 16);
                        v228 += 256;
                        v235.i32[3] = v234.i32[3];
                        v234.i32[0] = vzip1q_s16(v237, v236).u32[0];
                        v234.i32[1] = vqtbl2q_s8(v378, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                        v234.i64[1] = v235.i64[1];
                        v229 = vaddq_s16((int16x8_t)vbicq_s8(v222, (int8x16_t)vshrq_n_u16(v233, 5uLL)), v229);
                        v231 = vaddq_s16((int16x8_t)vbicq_s8(v222, (int8x16_t)vshrq_n_u16(v234, 5uLL)), v231);
                        v230 -= 16;
                      }
                      while (v230);
                      v226 = vaddvq_s16(vaddq_s16(v231, v229));
                    }
                    else
                    {
                      v225 = 0;
                      v226 = 0;
                    }
                    v238 = v221 - v225;
                    v239 = (unsigned __int16 *)(v223 + 16 * v225 + 14);
                    do
                    {
                      v240 = *v239;
                      v239 += 8;
                      v226 += ((v240 >> 5) & 1) == 0;
                      --v238;
                    }
                    while (v238);
                  }
                  else
                  {
                    v224 = 0;
                    v226 = 0;
                  }
                  if ((*(_WORD *)(v223 + 16 * v224 + 14) & 0x20) != 0)
                    LOWORD(v221) = v221 - v226 + *(_WORD *)(v355 + 56);
                  else
                    LOWORD(v221) = v226;
                }
                sub_1ACBA86CC((uint64_t *)v18, v212, v350 + 1 + (__int16)v221, v211, (v347 + v210), v220, 4294967294, v219);
                v241 = *(_DWORD *)(v18 + 144);
                v39 = __OFSUB__(v241, 1);
                v242 = v241 - 1;
                if (v242 < 0 == v39)
                  *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * v242 + 2) = 144;
                ++v210;
              }
              while (v210 < *(unsigned __int16 *)(v356 + 94));
            }
          }
        }
        else
        {
          v201 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v201)
          {
            sub_1ACBFF5AC(v18, 142, v188, v195, 0, a6, a7, a8);
            if (!v350)
              goto LABEL_382;
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v201 + 1;
            v202 = *(_QWORD *)(v18 + 136) + 40 * v201;
            *(_DWORD *)v202 = 142;
            *(_DWORD *)(v202 + 4) = v188;
            *(_DWORD *)(v202 + 8) = v195;
            *(_QWORD *)(v202 + 12) = 0;
            *(_QWORD *)(v202 + 28) = 0;
            *(_QWORD *)(v202 + 20) = 0;
            *(_DWORD *)(v202 + 36) = 0;
            if (!v350)
              goto LABEL_382;
          }
          v257 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v257)
          {
            sub_1ACBFF5AC(v18, 53, v345, v361, v350, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v257 + 1;
            v258 = *(_QWORD *)(v18 + 136) + 40 * v257;
            *(_DWORD *)v258 = 53;
            *(_DWORD *)(v258 + 4) = v345;
            *(_DWORD *)(v258 + 8) = v361;
            *(_DWORD *)(v258 + 12) = v350;
            *(_QWORD *)(v258 + 24) = 0;
            *(_QWORD *)(v258 + 32) = 0;
            *(_QWORD *)(v258 + 16) = 0;
          }
          v261 = *(_DWORD *)(v18 + 144);
          v39 = __OFSUB__(v261, 1);
          v262 = v261 - 1;
          if (v262 < 0 == v39)
            *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * v262 + 2) = 144;
        }
      }
LABEL_382:
      if (v342 - 1 < 3)
      {
        v16 = a1;
        sub_1ACC13BFC((uint64_t *)a1, v342, v137, a4, a5, a6, a7, a8);
        goto LABEL_447;
      }
      v16 = a1;
      if (v342 == 4)
        goto LABEL_391;
      if (v342 == 6)
      {
        sub_1ACC33A60(a1, v352, v15, v137, v338, a6, a7, a8);
LABEL_391:
        v203 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v203)
        {
          sub_1ACBFF5AC(v18, 9, 0, a11, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v203 + 1;
          v204 = *(_QWORD *)(v18 + 136) + 40 * v203;
          *(_QWORD *)v204 = 9;
          *(_DWORD *)(v204 + 8) = a11;
          *(_QWORD *)(v204 + 12) = 0;
          *(_QWORD *)(v204 + 28) = 0;
          *(_QWORD *)(v204 + 20) = 0;
          *(_DWORD *)(v204 + 36) = 0;
        }
LABEL_447:
        v193 = v358;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v245 = v345;
        goto LABEL_448;
      }
      v243 = *(_DWORD *)(v18 + 144);
      if (HIDWORD(v332))
      {
        v244 = *(_QWORD *)(a1 + 168);
        if (!v244)
          v244 = a1;
        *(_BYTE *)(v244 + 32) = 1;
        ++v336;
      }
      v245 = v345;
      if (v327)
      {
        if (*(_DWORD *)(v18 + 148) <= v243)
        {
          v247 = v331;
          sub_1ACBFF5AC(v18, 167, v331, 0, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v243 + 1;
          v246 = *(_QWORD *)(v18 + 136) + 40 * v243;
          v247 = v331;
          *(_DWORD *)v246 = 167;
          *(_DWORD *)(v246 + 4) = v331;
          v248 = 0uLL;
          *(_OWORD *)(v246 + 8) = 0u;
          *(_OWORD *)(v246 + 24) = 0u;
        }
        sub_1ACB9823C(a1, v15, (uint64_t)v330, v247, v337, v345, (__int16)v339, 0, v248, 5u, v356 == v137, v338);
        v267 = *(_DWORD *)(v18 + 144);
        if (*(_DWORD *)(v18 + 148) <= v267)
        {
          sub_1ACBFF5AC(v18, 168, v247, 0, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v267 + 1;
          v268 = *(_QWORD *)(v18 + 136) + 40 * v267;
          *(_DWORD *)v268 = 168;
          *(_DWORD *)(v268 + 4) = v247;
          a9 = 0uLL;
          *(_OWORD *)(v268 + 8) = 0u;
          *(_OWORD *)(v268 + 24) = 0u;
        }
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v245 = v345;
        if (HIDWORD(v332))
        {
LABEL_474:
          v259 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v259)
          {
            sub_1ACBFF5AC(v18, 86, HIDWORD(v332), 1, 0, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v259 + 1;
            v260 = *(_QWORD *)(v18 + 136) + 40 * v259;
            *(_DWORD *)v260 = 86;
            *(_DWORD *)(v260 + 4) = HIDWORD(v332);
            *(_DWORD *)(v260 + 8) = 1;
            *(_QWORD *)(v260 + 12) = 0;
            *(_QWORD *)(v260 + 28) = 0;
            *(_QWORD *)(v260 + 20) = 0;
            *(_DWORD *)(v260 + 36) = 0;
          }
          v263 = *(_DWORD *)(v18 + 144);
          if (*(_DWORD *)(v18 + 148) <= v263)
          {
            v263 = sub_1ACBFF5AC(v18, 9, 0, 0, 0, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v18 + 144) = v263 + 1;
            v264 = *(_QWORD *)(v18 + 136) + 40 * v263;
            *(_BYTE *)v264 = 9;
            *(_OWORD *)(v264 + 1) = 0u;
            *(_OWORD *)(v264 + 17) = 0u;
            *(_QWORD *)(v264 + 32) = 0;
          }
          v265 = *(_QWORD *)(v18 + 24);
          v266 = ~v341;
          if (*(_DWORD *)(v265 + 68) + *(_DWORD *)(v265 + 72) < 0)
            sub_1ACC0D5D4(v265, v18, v266);
          else
            *(_DWORD *)(*(_QWORD *)(v265 + 80) + 4 * v266) = *(_DWORD *)(v18 + 144);
          v341 = *(_DWORD *)(a1 + 68) - 1;
          *(_DWORD *)(a1 + 68) = v341;
          if (*(_QWORD *)(v137 + 72))
          {
            v269 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v269)
            {
              sub_1ACBFF5AC(v18, 50, v346, v341, 0, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v269 + 1;
              v270 = *(_QWORD *)(v18 + 136) + 40 * v269;
              *(_DWORD *)v270 = 50;
              *(_DWORD *)(v270 + 4) = v346;
              *(_DWORD *)(v270 + 8) = v341;
              *(_QWORD *)(v270 + 12) = 0;
              *(_QWORD *)(v270 + 28) = 0;
              *(_QWORD *)(v270 + 20) = 0;
              *(_DWORD *)(v270 + 36) = 0;
            }
          }
          if (v243 - v333 >= 1)
          {
            v271 = 40 * v333;
            v272 = v243 - v333 + 1;
            do
            {
              v273 = &byte_1EECAD280;
              if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
                v273 = (char *)(*(_QWORD *)(v18 + 136) + v271);
              v274 = *v273;
              if ((_DWORD)v274 != 142)
              {
                v275 = *((_WORD *)v273 + 1);
                v276 = v273[1];
                v277 = (byte_1ACCB6485[*v273] & 1) != 0 ? v341 : *((unsigned int *)v273 + 2);
                v278 = (_DWORD)v276 == -3 ? (int)*((_QWORD *)v273 + 2) : *((_QWORD *)v273 + 2);
                sub_1ACBA86CC((uint64_t *)v18, v274, *((unsigned int *)v273 + 1), v277, *((unsigned int *)v273 + 3), v278, v276, a8);
                v279 = *(_DWORD *)(v18 + 144);
                v39 = __OFSUB__(v279, 1);
                v280 = v279 - 1;
                if (v280 < 0 == v39)
                  *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * v280 + 2) = v275;
              }
              v271 += 40;
              --v272;
            }
            while (v272 > 1);
          }
          sub_1ACC13BFC((uint64_t *)a1, 2, v137, a4, a5, a6, a7, a8);
          v281 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
            v281 = (char *)(*(_QWORD *)(v18 + 136) + 40 * v263);
          *((_DWORD *)v281 + 2) = *(_DWORD *)(v18 + 144);
          v334 = 1;
          v14 = v366;
          goto LABEL_447;
        }
      }
      else
      {
        sub_1ACB9823C(a1, v15, (uint64_t)v330, v331, v337, v345, (__int16)v339, 0, a9, 5u, v356 == v137, v338);
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        if (HIDWORD(v332))
          goto LABEL_474;
      }
      v334 = 1;
      v193 = v358;
LABEL_448:
      v249 = *(_QWORD *)(v18 + 24);
      v250 = -v351;
      if (*(_DWORD *)(v249 + 68) + *(_DWORD *)(v249 + 72) < 0)
      {
        sub_1ACC0D5D4(v249, v18, v250);
        v143.i64[0] = 0x1000100010001;
        v143.i64[1] = 0x1000100010001;
        v142 = (int8x16_t)xmmword_1ACCBDDD0;
        v141 = (int8x16_t)xmmword_1ACCBDDC0;
        v140 = (int8x16_t)xmmword_1ACCBDDB0;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v249 + 80) + 4 * v250) = *(_DWORD *)(v18 + 144);
      }
      v113 = v245 == (_DWORD)v152;
      v33 = v352;
      if (!v113)
      {
        if (v339 == 1)
        {
          if (v245)
          {
            v251 = *(unsigned __int8 *)(v16 + 31);
            if (v251 <= 7)
            {
              *(_BYTE *)(v16 + 31) = v251 + 1;
              v252 = (unsigned int *)(v16 + 4 * v251 + 224);
LABEL_458:
              *v252 = v245;
            }
          }
        }
        else if (*(_DWORD *)(v16 + 40) < v339)
        {
          *(_DWORD *)(v16 + 40) = v339;
          v252 = v326;
          goto LABEL_458;
        }
      }
      if (v101)
      {
        if (v340)
        {
          v253 = *(_QWORD **)(v101 + 32);
          if (!v253 || !*v253 || !v253[7])
          {
            v254 = *(_DWORD *)(v18 + 144);
            if (*(_DWORD *)(v18 + 148) <= v254)
            {
              sub_1ACBFF5AC(v18, 9, 0, v329, 0, a6, a7, a8);
              v143.i64[0] = 0x1000100010001;
              v143.i64[1] = 0x1000100010001;
              v142 = (int8x16_t)xmmword_1ACCBDDD0;
              v141 = (int8x16_t)xmmword_1ACCBDDC0;
              v140 = (int8x16_t)xmmword_1ACCBDDB0;
            }
            else
            {
              *(_DWORD *)(v18 + 144) = v254 + 1;
              v255 = *(_QWORD *)(v18 + 136) + 40 * v254;
              *(_QWORD *)v255 = 9;
              *(_DWORD *)(v255 + 8) = v329;
              *(_QWORD *)(v255 + 12) = 0;
              *(_QWORD *)(v255 + 28) = 0;
              *(_QWORD *)(v255 + 20) = 0;
              *(_DWORD *)(v255 + 36) = 0;
            }
            v256 = &byte_1EECAD280;
            if (!*(_BYTE *)(*(_QWORD *)v18 + 103))
              v256 = (char *)(*(_QWORD *)(v18 + 136) + 40 * v340);
            v340 = 0;
            *((_DWORD *)v256 + 2) = *(_DWORD *)(v18 + 144);
          }
        }
      }
LABEL_365:
      if ((v349 & 1) == 0)
        break;
      LODWORD(v136) = v364 + 1;
      v137 = *(_QWORD *)(v371 + 40);
      v371 = v137;
      if (!v137)
        goto LABEL_515;
    }
    v136 = v193 + 1;
    if ((int)v136 >= (int)v371)
      break;
    v358 = v136;
    v194 = &v344[2 * v136];
    LODWORD(v136) = *((_DWORD *)v194 + 2);
    v137 = *v194;
    if (!*v194)
      goto LABEL_515;
  }
  v283 = v334;
  v282 = v335;
  if (!v335)
    goto LABEL_523;
LABEL_516:
  v284 = *(_DWORD *)(v18 + 144);
  if (*(_DWORD *)(v18 + 148) <= v284)
  {
    sub_1ACBFF5AC(v18, 9, 0, v282, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v18 + 144) = v284 + 1;
    v285 = *(_QWORD *)(v18 + 136) + 40 * v284;
    *(_QWORD *)v285 = 9;
    *(_DWORD *)(v285 + 8) = v282;
    *(_QWORD *)(v285 + 12) = 0;
    *(_QWORD *)(v285 + 28) = 0;
    *(_QWORD *)(v285 + 20) = 0;
    *(_DWORD *)(v285 + 36) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)v18 + 103))
    v286 = &byte_1EECAD280;
  else
    v286 = (char *)(*(_QWORD *)(v18 + 136) + 40 * v328);
  *((_DWORD *)v286 + 2) = *(_DWORD *)(v18 + 144);
LABEL_523:
  if (v336)
  {
    v287 = *(_DWORD *)(v18 + 144);
    if (*(_DWORD *)(v18 + 148) <= v287)
    {
      sub_1ACBFF5AC(v18, 17, HIDWORD(v332), v341, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v18 + 144) = v287 + 1;
      v288 = *(_QWORD *)(v18 + 136) + 40 * v287;
      *(_DWORD *)v288 = 17;
      *(_DWORD *)(v288 + 4) = HIDWORD(v332);
      *(_DWORD *)(v288 + 8) = v341;
      *(_QWORD *)(v288 + 12) = 0;
      *(_QWORD *)(v288 + 28) = 0;
      *(_QWORD *)(v288 + 20) = 0;
      *(_DWORD *)(v288 + 36) = 0;
    }
    v289 = *(_DWORD *)(v18 + 144);
    if (v356)
    {
      if (*(_DWORD *)(v18 + 148) <= v289)
      {
        sub_1ACBFF5AC(v18, 9, 0, v332, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v18 + 144) = v289 + 1;
        v290 = *(_QWORD *)(v18 + 136) + 40 * v289;
        *(_QWORD *)v290 = 9;
        *(_DWORD *)(v290 + 8) = v332;
        *(_QWORD *)(v290 + 12) = 0;
        *(_QWORD *)(v290 + 28) = 0;
        *(_QWORD *)(v290 + 20) = 0;
        *(_DWORD *)(v290 + 36) = 0;
      }
    }
    else
    {
      if (v350)
      {
        if (*(_DWORD *)(v18 + 148) <= v289)
        {
          sub_1ACBFF5AC(v18, 53, v14, v332, v350, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v18 + 144) = v289 + 1;
          v291 = *(_QWORD *)(v18 + 136) + 40 * v289;
          *(_DWORD *)v291 = 53;
          *(_DWORD *)(v291 + 4) = v14;
          *(_DWORD *)(v291 + 8) = v332;
          *(_DWORD *)(v291 + 12) = v350;
          *(_QWORD *)(v291 + 24) = 0;
          *(_QWORD *)(v291 + 32) = 0;
          *(_QWORD *)(v291 + 16) = 0;
        }
        v289 = *(_DWORD *)(v18 + 144);
        if (v289 >= 1)
          *(_WORD *)(*(_QWORD *)(v18 + 136) + 40 * (v289 - 1) + 2) = 144;
      }
      if (*(_DWORD *)(v18 + 148) <= v289)
      {
        sub_1ACBFF5AC(v18, 31, v331, v332, v14, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v18 + 144) = v289 + 1;
        v292 = *(_QWORD *)(v18 + 136) + 40 * v289;
        *(_DWORD *)v292 = 31;
        *(_DWORD *)(v292 + 4) = v331;
        *(_DWORD *)(v292 + 8) = v332;
        *(_DWORD *)(v292 + 12) = v14;
        *(_QWORD *)(v292 + 24) = 0;
        *(_QWORD *)(v292 + 32) = 0;
        *(_QWORD *)(v292 + 16) = 0;
      }
      sub_1ACC33938((uint64_t *)v16, 2, v15, v282, a5, a6, a7, a8);
    }
    v293 = *(_QWORD *)(v18 + 24);
    v294 = ~v341;
    if (*(_DWORD *)(v293 + 68) + *(_DWORD *)(v293 + 72) >= 0)
    {
      *(_DWORD *)(*(_QWORD *)(v293 + 80) + 4 * v294) = *(_DWORD *)(v18 + 144);
      goto LABEL_545;
    }
    sub_1ACC0D5D4(v293, v18, v294);
    if ((*(_BYTE *)(v15 + 48) & 0x80) != 0)
      goto LABEL_552;
  }
  else
  {
LABEL_545:
    if ((*(_BYTE *)(v15 + 48) & 0x80) != 0)
      goto LABEL_552;
  }
  v295 = *(unsigned int *)(v359 + 4 * (int)v136);
  v296 = (v14 + 1);
  v297 = *(__int16 *)(v15 + 56);
  v298 = *(_DWORD *)(v18 + 144);
  if (*(_DWORD *)(v18 + 148) <= v298)
  {
    sub_1ACBFF5AC(v18, 97, v296, v297, v295, a6, a7, a8);
    if (v353)
      goto LABEL_552;
  }
  else
  {
    *(_DWORD *)(v18 + 144) = v298 + 1;
    v299 = *(_QWORD *)(v18 + 136) + 40 * v298;
    *(_DWORD *)v299 = 97;
    *(_DWORD *)(v299 + 4) = v296;
    *(_DWORD *)(v299 + 8) = v297;
    *(_DWORD *)(v299 + 12) = v295;
    *(_QWORD *)(v299 + 24) = 0;
    *(_QWORD *)(v299 + 32) = 0;
    *(_QWORD *)(v299 + 16) = 0;
    if (v353)
      goto LABEL_552;
  }
  sub_1ACC0EDC4((_QWORD **)v18, v15, 0, v297, v295, a6, a7, a8);
LABEL_552:
  *a12 = v283;
}

uint64_t sub_1ACB9823C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned int a12)
{
  int v12;
  uint64_t v14;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int16x8_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __int16 v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  _BOOL8 v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  const char *j;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t *v92;
  int v93;
  uint64_t m;
  uint64_t result;
  int v96;
  uint64_t *v97;
  _DWORD *v98;
  _BYTE *v99;
  unsigned __int8 *k;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  _BYTE *v109;
  unsigned __int8 *i;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  _BOOL4 v120;
  unsigned int v121;
  int8x16x2_t v123;

  v12 = a8;
  v119 = a7;
  v121 = a6;
  v116 = a5;
  v14 = a3;
  v17 = a11;
  v18 = a10;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a1 + 68);
  v21 = (v20 - 1);
  *(_DWORD *)(a1 + 68) = v21;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0)
    v22 = 28;
  else
    v22 = 31;
  v118 = v22;
  if (!a11)
  {
    v23 = *(_DWORD *)(v19 + 144);
    if (*(_DWORD *)(v19 + 148) <= v23)
    {
      sub_1ACBFF7F0(v19, v118, a4, (v20 - 1), a6, a7, a7, a8);
    }
    else
    {
      *(_DWORD *)(v19 + 144) = v23 + 1;
      v24 = *(_QWORD *)(v19 + 136) + 40 * v23;
      *(_BYTE *)v24 = v118;
      *(_WORD *)(v24 + 2) = 0;
      *(_DWORD *)(v24 + 4) = a4;
      *(_DWORD *)(v24 + 8) = v21;
      *(_DWORD *)(v24 + 12) = a6;
      *(_DWORD *)(v24 + 16) = a7;
      *(_BYTE *)(v24 + 1) = -3;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
    }
  }
  v117 = v12;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x40) == 0 || *(_BYTE *)(a2 + 63))
    goto LABEL_10;
  v63 = *(_QWORD *)(a2 + 96);
  v64 = *(unsigned __int8 **)a2;
  v65 = *(_QWORD *)(v63 + 96);
  if (v65)
  {
    v66 = *v64;
    if (*v64)
    {
      v67 = 0;
      v68 = v64 + 1;
      do
      {
        v67 = -1640531535 * (v67 + byte_1ACCB6333[v66]);
        v69 = *v68++;
        v66 = v69;
      }
      while (v69);
    }
    else
    {
      v67 = 0;
    }
    v108 = (_DWORD *)(v65 + 16 * (v67 % *(_DWORD *)(v63 + 80)));
    v103 = (uint64_t *)(v108 + 2);
    v104 = *v108;
    if (v104)
    {
      while (1)
      {
LABEL_143:
        v103 = (uint64_t *)*v103;
        v109 = (_BYTE *)v103[3];
        for (i = *(unsigned __int8 **)a2; ; ++i)
        {
          v111 = *v109;
          v112 = *i;
          if ((_DWORD)v111 != (_DWORD)v112)
            break;
          if (!*v109)
            goto LABEL_122;
LABEL_145:
          ++v109;
        }
        if (byte_1ACCB6333[v111] == byte_1ACCB6333[v112])
          goto LABEL_145;
        if (!--v104)
        {
          v103 = &qword_1EECAD260;
          goto LABEL_122;
        }
      }
    }
  }
  else
  {
    v103 = (uint64_t *)(v63 + 88);
    v104 = *(_DWORD *)(v63 + 84);
    if (v104)
      goto LABEL_143;
  }
  v103 = &qword_1EECAD260;
LABEL_122:
  if (v103[2] || *(_QWORD *)(a2 + 72))
  {
    v115 = v20;
    v114 = v20 - 1;
    v120 = v14 != 0;
    if (v14)
      goto LABEL_125;
    v113 = a11;
    v25 = 0;
    goto LABEL_14;
  }
LABEL_10:
  if (!v14)
  {
    v120 = 0;
    v32 = 0;
    goto LABEL_63;
  }
  v115 = v20;
  v114 = v20 - 1;
  if (*(_BYTE *)(a2 + 63) != 2)
  {
    v120 = 1;
LABEL_125:
    v113 = a11;
    v25 = 0;
    v105 = v14;
    while (1)
    {
      if (*(unsigned __int8 *)(v105 + 16) != 128 || (*(_BYTE *)(v105 + 17) & 3) == 0)
        goto LABEL_127;
      if (*(_BYTE *)(v105 + 18))
      {
        v25 = -1;
      }
      else
      {
        v106 = *(_QWORD *)(a1 + 168);
        if (!v106)
          v106 = a1;
        v107 = *(_QWORD *)(v106 + 184);
        if (v107)
        {
          while (*(_QWORD *)v107 != v105 || *(_DWORD *)(v107 + 24) != a10)
          {
            v107 = *(_QWORD *)(v107 + 8);
            if (!v107)
              goto LABEL_134;
          }
        }
        else
        {
LABEL_134:
          v107 = sub_1ACBAD260(a1, (uint64_t *)v105, a2, a10);
          *(_DWORD *)(*(_QWORD *)a1 + 84) = -1;
          if (!v107)
            goto LABEL_127;
        }
        v25 |= *(_DWORD *)(v107 + 28);
      }
LABEL_127:
      v105 = *(_QWORD *)(v105 + 64);
      if (!v105)
        goto LABEL_14;
    }
  }
  v120 = 1;
  v113 = a11;
  v25 = -1;
LABEL_14:
  v29 = sub_1ACC2E574((_QWORD **)a1, a2, a3, a4, a5, a6, a7, a8);
  v31 = *(_DWORD *)(a1 + 56);
  v32 = (v31 + 1);
  *(_DWORD *)(a1 + 56) = v32 + *(__int16 *)(a2 + 54);
  v33 = *(_DWORD *)(v19 + 144);
  if (*(_DWORD *)(v19 + 148) <= v33)
  {
    sub_1ACBFF5AC(v19, 80, v121, (v31 + 1), 0, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)(v19 + 144) = v33 + 1;
    v34 = *(_QWORD *)(v19 + 136) + 40 * v33;
    *(_DWORD *)v34 = 80;
    *(_DWORD *)(v34 + 4) = v121;
    *(_DWORD *)(v34 + 8) = v32;
    *(_QWORD *)(v34 + 12) = 0;
    *(_QWORD *)(v34 + 28) = 0;
    *(_QWORD *)(v34 + 20) = 0;
    *(_DWORD *)(v34 + 36) = 0;
  }
  v35 = *(__int16 *)(a2 + 54);
  if (v35 >= 1)
  {
    v36 = 0;
    v37 = v29 | v25;
    v38 = v31 + 2;
    v39 = (int8x16_t)xmmword_1ACCBDDB0;
    v40 = (int8x16_t)xmmword_1ACCBDDC0;
    v41 = (int8x16_t)xmmword_1ACCBDDD0;
    v42.i64[0] = 0x1000100010001;
    v42.i64[1] = 0x1000100010001;
    do
    {
      if (v37 == -1 || v36 <= 0x1F && ((v37 >> v36) & 1) != 0)
      {
        v43 = v36;
        if ((v36 & 0x8000) == 0 && (*(_DWORD *)(a2 + 48) & 0x20) != 0)
        {
          v44 = *(_QWORD *)(a2 + 8);
          if ((_WORD)v36)
          {
            if (v36 >= 0x11)
            {
              v47 = 16;
              if ((v36 & 0xF) != 0)
                v47 = v36 & 0xF;
              v45 = v36 - v47;
              v48 = v44 + 142;
              v49 = 0uLL;
              v50 = 0uLL;
              do
              {
                v51 = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 64), v40);
                v51.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 32), v39).i32[3];
                v52.i32[0] = vzip1q_s16(*(int16x8_t *)(v48 - 128), *(int16x8_t *)(v48 - 112)).u32[0];
                v52.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v48 - 96), v41).i32[1];
                v52.i64[1] = v51.i64[1];
                v123 = *(int8x16x2_t *)(v48 + 32);
                v53 = vqtbl2q_s8(*(int8x16x2_t *)(v48 + 64), v40);
                v53.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v48 + 96), v39).i32[3];
                v55 = *(int16x8_t *)v48;
                v54 = *(int16x8_t *)(v48 + 16);
                v48 += 256;
                v54.i32[0] = vzip1q_s16(v55, v54).u32[0];
                v54.i32[1] = vqtbl2q_s8(v123, v41).i32[1];
                v54.i64[1] = v53.i64[1];
                v49 = vaddq_s16((int16x8_t)vbicq_s8(v42, (int8x16_t)vshrq_n_u16(v52, 5uLL)), v49);
                v50 = vaddq_s16((int16x8_t)vbicq_s8(v42, (int8x16_t)vshrq_n_u16((uint16x8_t)v54, 5uLL)), v50);
                v47 += 16;
              }
              while (v36 != v47);
              v30 = vaddq_s16(v50, v49);
              v30.i16[0] = vaddvq_s16(v30);
              v46 = v30.i16[0];
            }
            else
            {
              v45 = 0;
              v46 = 0;
            }
            v56 = (unsigned __int16 *)(v44 + 16 * v45 + 14);
            do
            {
              v57 = *v56;
              v56 += 8;
              v46 += ((v57 >> 5) & 1) == 0;
              ++v45;
            }
            while (v36 != v45);
          }
          else
          {
            v46 = 0;
          }
          if ((*(_WORD *)(v44 + 16 * ((uint64_t)(v36 << 16) >> 16) + 14) & 0x20) != 0)
            v43 = v36 - v46 + *(_WORD *)(a2 + 56);
          else
            v43 = v46;
        }
        *(double *)v30.i64 = sub_1ACC0B288(v19, a2, a4, v36, (v38 + v43), v26, v27, v28, v30);
        LOWORD(v35) = *(_WORD *)(a2 + 54);
        v40 = (int8x16_t)xmmword_1ACCBDDC0;
        v39 = (int8x16_t)xmmword_1ACCBDDB0;
        v41 = (int8x16_t)xmmword_1ACCBDDD0;
        v42.i64[0] = 0x1000100010001;
        v42.i64[1] = 0x1000100010001;
      }
      ++v36;
    }
    while ((uint64_t)v36 < (__int16)v35);
  }
  if (v14)
  {
    v58 = *(_DWORD *)(v19 + 144);
    v59 = v14;
    v21 = v114;
    v18 = a10;
    do
    {
      if (*(unsigned __int8 *)(v59 + 16) == 128 && *(_BYTE *)(v59 + 17) == 1)
      {
        if (*(_BYTE *)(v59 + 18))
        {
          if (!*(_QWORD *)(a1 + 168))
            sub_1ACC2F5F8(a1, v59, a2, v32);
        }
        else
        {
          sub_1ACBAD96C(a1, (uint64_t *)v59, a2, v32, a10, v114, v27, v28);
        }
      }
      v59 = *(_QWORD *)(v59 + 64);
    }
    while (v59);
    v60 = *(_DWORD *)(v19 + 144);
    v61 = v58 < v60;
    v20 = v115;
    v17 = v113;
    if (v61)
    {
      if (*(_DWORD *)(v19 + 148) <= v60)
      {
        sub_1ACBFF7F0(v19, v118, a4, v114, v121, v119, v27, v28);
      }
      else
      {
        *(_DWORD *)(v19 + 144) = v60 + 1;
        v62 = *(_QWORD *)(v19 + 136) + 40 * v60;
        *(_BYTE *)v62 = v118;
        *(_WORD *)(v62 + 2) = 0;
        *(_DWORD *)(v62 + 4) = a4;
        *(_DWORD *)(v62 + 8) = v114;
        *(_DWORD *)(v62 + 12) = v121;
        *(_DWORD *)(v62 + 16) = v119;
        *(_BYTE *)(v62 + 1) = -3;
        *(_QWORD *)(v62 + 24) = 0;
        *(_QWORD *)(v62 + 32) = 0;
      }
      a12 = -1;
    }
  }
  else
  {
    v18 = a10;
    v20 = v115;
    v17 = v113;
    v21 = v114;
  }
  sub_1ACB99378((uint64_t *)a1, a2, v32, 0, 0, 0, v27, v28);
LABEL_63:
  if (*(_BYTE *)(a2 + 63) == 2)
    goto LABEL_86;
  sub_1ACC2EAE0(a1, a2, a4, v116, 0, a12, a9);
  v70 = v117 != 0;
  v71 = *(_DWORD *)(v19 + 144);
  if (*(_DWORD *)(v19 + 148) <= v71)
  {
    sub_1ACBFF5AC(v19, 130, a4, v70, 0, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 30))
      goto LABEL_74;
LABEL_68:
    v73 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2)
    {
      for (j = "sqlite_stat1"; ; ++j)
      {
        v75 = *v73;
        v76 = *(unsigned __int8 *)j;
        if ((_DWORD)v75 == (_DWORD)v76)
        {
          if (!*v73)
            goto LABEL_74;
        }
        else if (byte_1ACCB6333[v75] != byte_1ACCB6333[v76])
        {
          goto LABEL_76;
        }
        ++v73;
      }
    }
    goto LABEL_76;
  }
  *(_DWORD *)(v19 + 144) = v71 + 1;
  v72 = *(_QWORD *)(v19 + 136) + 40 * v71;
  *(_DWORD *)v72 = 130;
  *(_DWORD *)(v72 + 4) = a4;
  *(_DWORD *)(v72 + 8) = v70;
  *(_QWORD *)(v72 + 12) = 0;
  *(_QWORD *)(v72 + 28) = 0;
  *(_QWORD *)(v72 + 20) = 0;
  *(_DWORD *)(v72 + 36) = 0;
  if (*(_BYTE *)(a1 + 30))
    goto LABEL_68;
LABEL_74:
  if (!*(_BYTE *)(*(_QWORD *)v19 + 103))
  {
    v77 = *(_QWORD *)(v19 + 136) + 40 * *(int *)(v19 + 144);
    *(_BYTE *)(v77 - 39) = -5;
    *(_QWORD *)(v77 - 24) = a2;
  }
LABEL_76:
  if (v17)
  {
    v78 = *(_DWORD *)(v19 + 144);
    v79 = __OFSUB__(v78, 1);
    v80 = v78 - 1;
    if (v80 < 0 == v79)
      *(_WORD *)(*(_QWORD *)(v19 + 136) + 40 * v80 + 2) = 4;
  }
  if ((a12 & 0x80000000) == 0 && a12 != (_DWORD)a4)
  {
    v81 = *(_DWORD *)(v19 + 144);
    if (*(_DWORD *)(v19 + 148) <= v81)
    {
      sub_1ACBFF5AC(v19, 130, a12, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v19 + 144) = v81 + 1;
      v82 = *(_QWORD *)(v19 + 136) + 40 * v81;
      *(_DWORD *)v82 = 130;
      *(_DWORD *)(v82 + 4) = a12;
      *(_OWORD *)(v82 + 8) = 0u;
      *(_OWORD *)(v82 + 24) = 0u;
    }
  }
  v83 = *(_DWORD *)(v19 + 144);
  v79 = __OFSUB__(v83, 1);
  v84 = v83 - 1;
  if (v84 < 0 == v79)
    *(_WORD *)(*(_QWORD *)(v19 + 136) + 40 * v84 + 2) = 2 * (v17 == 2);
LABEL_86:
  if ((*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x40) != 0)
  {
    v85 = *(_QWORD *)(a2 + 96);
    v86 = *(unsigned __int8 **)a2;
    v87 = *(_QWORD *)(v85 + 96);
    if (v87)
    {
      v88 = *v86;
      if (*v86)
      {
        v89 = 0;
        v90 = v86 + 1;
        do
        {
          v89 = -1640531535 * (v89 + byte_1ACCB6333[v88]);
          v91 = *v90++;
          v88 = v91;
        }
        while (v91);
      }
      else
      {
        v89 = 0;
      }
      v98 = (_DWORD *)(v87 + 16 * (v89 % *(_DWORD *)(v85 + 80)));
      v92 = (uint64_t *)(v98 + 2);
      v93 = *v98;
      if (v93)
      {
        while (1)
        {
LABEL_112:
          v92 = (uint64_t *)*v92;
          v99 = (_BYTE *)v92[3];
          for (k = *(unsigned __int8 **)a2; ; ++k)
          {
            v101 = *v99;
            v102 = *k;
            if ((_DWORD)v101 != (_DWORD)v102)
              break;
            if (!*v99)
              goto LABEL_94;
LABEL_114:
            ++v99;
          }
          if (byte_1ACCB6333[v101] == byte_1ACCB6333[v102])
            goto LABEL_114;
          if (!--v93)
          {
            v92 = &qword_1EECAD260;
            goto LABEL_94;
          }
        }
      }
    }
    else
    {
      v92 = (uint64_t *)(v85 + 88);
      v93 = *(_DWORD *)(v85 + 84);
      if (v93)
        goto LABEL_112;
    }
    v92 = &qword_1EECAD260;
LABEL_94:
    for (m = v92[2]; m; m = *(_QWORD *)(m + 24))
    {
      v97 = sub_1ACC31534((uint64_t *)a1, a2, m, 0, a5, a6, a7, a8);
      if (v97)
        sub_1ACBAD96C(a1, v97, a2, v32, 2, 0, a7, a8);
    }
  }
  if (v120 && v14)
  {
    do
    {
      if (*(unsigned __int8 *)(v14 + 16) == 128 && *(_BYTE *)(v14 + 17) == 2)
      {
        if (*(_BYTE *)(v14 + 18))
        {
          if (!*(_QWORD *)(a1 + 168))
            sub_1ACC2F5F8(a1, v14, a2, v32);
        }
        else
        {
          sub_1ACBAD96C(a1, (uint64_t *)v14, a2, v32, v18, v21, a7, a8);
        }
      }
      v14 = *(_QWORD *)(v14 + 64);
    }
    while (v14);
  }
  result = *(_QWORD *)(v19 + 24);
  v96 = -v20;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
    return sub_1ACC0D5D4(result, v19, v96);
  *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v96) = *(_DWORD *)(v19 + 144);
  return result;
}

uint64_t sub_1ACB98C40(uint64_t a1, unsigned __int8 **a2, uint64_t a3, int a4)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t *v30;
  int v31;
  uint64_t k;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned __int8 *m;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _BYTE *v42;
  unsigned __int8 *j;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _DWORD *v47;
  int v48;
  _BYTE *v49;
  unsigned __int8 *i;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x40) == 0 || *((_BYTE *)a2 + 63))
    return 0;
  if (!a3)
  {
    v23 = a2[12];
    v24 = *a2;
    v25 = *((_QWORD *)v23 + 12);
    if (v25)
    {
      v26 = *v24;
      if (*v24)
      {
        v27 = 0;
        v28 = v24 + 1;
        do
        {
          v27 = -1640531535 * (v27 + byte_1ACCB6333[v26]);
          v29 = *v28++;
          v26 = v29;
        }
        while (v29);
      }
      else
      {
        v27 = 0;
      }
      v47 = (_DWORD *)(v25 + 16 * (v27 % *((_DWORD *)v23 + 20)));
      v46 = (uint64_t *)(v47 + 2);
    }
    else
    {
      v46 = (uint64_t *)(v23 + 88);
      v47 = v23 + 84;
    }
    v48 = *v47;
    if (!v48)
    {
      v46 = &qword_1EECAD260;
LABEL_88:
      if (v46[2])
        return 1;
      result = 1;
      if (!a2[9])
        return 0;
      return result;
    }
LABEL_79:
    v46 = (uint64_t *)*v46;
    v49 = (_BYTE *)v46[3];
    for (i = *a2; ; ++i)
    {
      v51 = *v49;
      v52 = *i;
      if ((_DWORD)v51 == (_DWORD)v52)
      {
        if (!*v49)
          goto LABEL_88;
      }
      else if (byte_1ACCB6333[v51] != byte_1ACCB6333[v52])
      {
        if (!--v48)
        {
          v46 = &qword_1EECAD260;
          goto LABEL_88;
        }
        goto LABEL_79;
      }
      ++v49;
    }
  }
  v5 = a2[9];
  v6 = 0;
  result = 1;
  while (v5)
  {
    v14 = *((unsigned int *)v5 + 10);
    if ((int)v14 >= 1)
    {
      v15 = (int *)(v5 + 64);
      while (1)
      {
        v17 = *v15;
        v15 += 4;
        v16 = v17;
        if ((*(_DWORD *)(a3 + 4 * v17) & 0x80000000) == 0 || a4 && v16 == *((__int16 *)a2 + 26))
          break;
        if (!--v14)
          goto LABEL_13;
      }
      v18 = *a2;
      v19 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
      if (*a2)
      {
        if (v19)
        {
          while (1)
          {
            v21 = *v18;
            v22 = *v19;
            if ((_DWORD)v21 == (_DWORD)v22)
            {
              if (!*v18)
                goto LABEL_32;
            }
            else
            {
              v20 = byte_1ACCB6333[v21] - byte_1ACCB6333[v22];
              if (v20)
                goto LABEL_31;
            }
            ++v18;
            ++v19;
          }
        }
      }
      else
      {
        if (v19)
          v20 = -1;
        else
          v20 = 0;
LABEL_31:
        if (!v20)
        {
LABEL_32:
          v6 = 1;
          result = 2;
          goto LABEL_13;
        }
      }
      v6 = 1;
    }
LABEL_13:
    v5 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  }
  v7 = a2[12];
  v8 = *a2;
  v9 = *((_QWORD *)v7 + 12);
  if (!v9)
  {
    v30 = (uint64_t *)(v7 + 88);
    v31 = *((_DWORD *)v7 + 21);
    if (v31)
      goto LABEL_67;
LABEL_39:
    v30 = &qword_1EECAD260;
    goto LABEL_40;
  }
  v10 = *v8;
  if (*v8)
  {
    v11 = 0;
    v12 = v8 + 1;
    do
    {
      v11 = -1640531535 * (v11 + byte_1ACCB6333[v10]);
      v13 = *v12++;
      v10 = v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  v41 = (_DWORD *)(v9 + 16 * (v11 % *((_DWORD *)v7 + 20)));
  v30 = (uint64_t *)(v41 + 2);
  v31 = *v41;
  if (!v31)
    goto LABEL_39;
  do
  {
LABEL_67:
    v30 = (uint64_t *)*v30;
    v42 = (_BYTE *)v30[3];
    for (j = *a2; ; ++j)
    {
      v44 = *v42;
      v45 = *j;
      if ((_DWORD)v44 != (_DWORD)v45)
        break;
      if (!*v42)
        goto LABEL_40;
LABEL_69:
      ++v42;
    }
    if (byte_1ACCB6333[v44] == byte_1ACCB6333[v45])
      goto LABEL_69;
    --v31;
  }
  while (v31);
  v30 = &qword_1EECAD260;
LABEL_40:
  for (k = v30[2]; k; k = *(_QWORD *)(k + 24))
  {
    v33 = *(unsigned int *)(k + 40);
    if ((int)v33 >= 1)
    {
      v34 = 0;
      while (*((__int16 *)a2 + 27) < 1)
      {
LABEL_60:
        if (++v34 == v33)
          goto LABEL_43;
      }
      v35 = 0;
      while (1)
      {
        if ((*(_DWORD *)(a3 + 4 * v35) & 0x80000000) == 0 || a4 && v35 == *((__int16 *)a2 + 26))
        {
          v36 = a2[1];
          if (*(_QWORD *)(k + 16 * v34 + 72))
          {
            v37 = *(_BYTE **)&v36[16 * v35];
            for (m = *(unsigned __int8 **)(k + 16 * v34 + 72); ; ++m)
            {
              v39 = *v37;
              v40 = *m;
              if ((_DWORD)v39 == (_DWORD)v40)
              {
                if (!*v37)
                  goto LABEL_62;
              }
              else if (byte_1ACCB6333[v39] != byte_1ACCB6333[v40])
              {
                goto LABEL_49;
              }
              ++v37;
            }
          }
          if ((*(_WORD *)&v36[16 * v35 + 14] & 1) != 0)
            break;
        }
LABEL_49:
        if (++v35 == *((__int16 *)a2 + 27))
          goto LABEL_60;
      }
LABEL_62:
      if (*(_BYTE *)(k + 46))
        return 2;
      v6 = 1;
    }
LABEL_43:
    ;
  }
  if (!v6)
    return 0;
  return result;
}

uint64_t sub_1ACB98FD8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int *a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v50;
  unsigned int v51;

  v9 = a8;
  v10 = a7;
  v15 = *(_QWORD *)(a1 + 16);
  if (!a6)
    goto LABEL_8;
  v16 = *(unsigned __int8 **)(a2 + 72);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 68) - 1;
    *(_DWORD *)(a1 + 68) = v17;
    *a6 = v17;
    *(_DWORD *)(a1 + 64) = a3 + 1;
    v18 = *a6;
    v19 = *(_QWORD *)a1;
    v21 = sub_1ACB8B290(*(_QWORD *)a1, v16, 0, 0);
    if (!*(_BYTE *)(v19 + 103))
      sub_1ACB9F1D0(a1, (unsigned __int8 **)v21, v18, 16, v20, (uint64_t)a6, a7, a8);
    if (v21)
      sub_1ACBF8348((_QWORD *)v19, (unsigned __int8 *)v21);
    v10 = 0;
    *(_DWORD *)(a1 + 64) = 0;
LABEL_8:
    if (!a5)
      goto LABEL_12;
    goto LABEL_9;
  }
  *a6 = 0;
  if (!a5)
    goto LABEL_12;
LABEL_9:
  if ((*(_WORD *)(a2 + 99) & 8) != 0)
  {
    v22 = (unsigned __int16 *)(a2 + 94);
    goto LABEL_13;
  }
LABEL_12:
  v22 = (unsigned __int16 *)(a2 + 96);
LABEL_13:
  v23 = *v22;
  if ((_DWORD)v23 == 1)
  {
    if (*(_BYTE *)(a1 + 31))
    {
      v24 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v24;
      v25 = *(_DWORD *)(a1 + 4 * v24 + 224);
      v50 = a4;
      v51 = v25;
      if (!v10)
        goto LABEL_27;
    }
    else
    {
      v25 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v25;
      v50 = a4;
      v51 = v25;
      if (!v10)
        goto LABEL_27;
    }
  }
  else
  {
    v26 = *(_DWORD *)(a1 + 40);
    v27 = __OFSUB__(v26, (_DWORD)v23);
    v28 = v26 - v23;
    if (v28 < 0 != v27)
    {
      v29 = *(_DWORD *)(a1 + 56);
      v25 = v29 + 1;
      *(_DWORD *)(a1 + 56) = v29 + v23;
      v50 = a4;
      v51 = v29 + 1;
      if (!v10)
        goto LABEL_27;
    }
    else
    {
      v25 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v28;
      *(_DWORD *)(a1 + 44) = v25 + v23;
      v50 = a4;
      v51 = v25;
      if (!v10)
        goto LABEL_27;
    }
  }
  if (v25 != v9 || *(_QWORD *)(v10 + 72))
    v10 = 0;
LABEL_27:
  if ((_DWORD)v23)
  {
    v30 = 0;
    v31 = 8;
    while (1)
    {
      v32 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
        v33 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 8) + 2 * v30);
        v34 = *(unsigned __int16 *)(v32 + 2 * v30);
        if (v33 != 65534 && v33 == v34)
          goto LABEL_29;
      }
      else
      {
        v34 = *(unsigned __int16 *)(v32 + 2 * v30);
      }
      if (v34 == 65534)
        break;
      *(double *)a9.i64 = sub_1ACC0B288(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), a3, (__int16)v34, v51 + v30, (uint64_t)a6, a7, a8, a9);
LABEL_45:
      if ((*(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v30) & 0x80000000) == 0)
      {
        v40 = *(_DWORD *)(v15 + 144);
        v27 = __OFSUB__(v40, 1);
        v41 = v40 - 1;
        if (v41 < 0 == v27)
        {
          v42 = *(_QWORD *)(v15 + 136);
          v43 = (_BYTE *)(v42 + 40 * v41);
          if (*v43 == 87 && !*(_BYTE *)(*(_QWORD *)v15 + 103))
          {
            v44 = v42 + 40 * v41;
            sub_1ACB693B4(*(_QWORD **)v15, *(char *)(v44 + 1), *(_QWORD *)(v44 + 16));
            *(_BYTE *)(v44 + 1) = 0;
            *(_QWORD *)(v44 + 16) = 0;
            *v43 = -72;
          }
        }
      }
LABEL_29:
      ++v30;
      v31 += 24;
      if (v23 == v30)
        goto LABEL_52;
    }
    v36 = v15;
    *(_DWORD *)(a1 + 64) = a3 + 1;
    v37 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 80) + v31);
    v38 = *(_QWORD *)a1;
    if (v37)
    {
      v39 = (unsigned __int8 *)sub_1ACB8B290(*(_QWORD *)a1, v37, 0, 0);
      if (*(_BYTE *)(v38 + 103))
      {
LABEL_41:
        if (v39)
          sub_1ACBF8348((_QWORD *)v38, v39);
        *(_DWORD *)(a1 + 64) = 0;
        v15 = v36;
        goto LABEL_45;
      }
    }
    else
    {
      v39 = 0;
      if (*(_BYTE *)(v38 + 103))
        goto LABEL_41;
    }
    sub_1ACC08D80(a1, v39, v51 + v30);
    goto LABEL_41;
  }
LABEL_52:
  if (v50)
  {
    v45 = *(_DWORD *)(v15 + 144);
    if (*(_DWORD *)(v15 + 148) <= v45)
    {
      sub_1ACBFF5AC(v15, 97, v51, v23, v50, (uint64_t)a6, a7, a8);
      if ((_DWORD)v23 == 1)
        goto LABEL_56;
      goto LABEL_60;
    }
    *(_DWORD *)(v15 + 144) = v45 + 1;
    v46 = *(_QWORD *)(v15 + 136) + 40 * v45;
    *(_DWORD *)v46 = 97;
    *(_DWORD *)(v46 + 4) = v51;
    *(_DWORD *)(v46 + 8) = v23;
    *(_DWORD *)(v46 + 12) = v50;
    *(_QWORD *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = 0;
    *(_QWORD *)(v46 + 16) = 0;
  }
  if ((_DWORD)v23 == 1)
  {
LABEL_56:
    if (v51)
    {
      v47 = *(unsigned __int8 *)(a1 + 31);
      if (v47 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v47 + 1;
        v48 = (unsigned int *)(a1 + 4 * v47 + 224);
LABEL_62:
        *v48 = v51;
        return v51;
      }
    }
    return v51;
  }
LABEL_60:
  if (*(_DWORD *)(a1 + 40) < (int)v23)
  {
    *(_DWORD *)(a1 + 40) = v23;
    v48 = (unsigned int *)(a1 + 44);
    goto LABEL_62;
  }
  return v51;
}

void sub_1ACB99378(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  int16x8_t v52;
  uint64_t v53;
  int16x8_t v54;
  int8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  int v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  unsigned __int8 *j;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  _DWORD *v98;
  _BYTE *v99;
  unsigned __int8 *i;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v105;
  unsigned int v106;
  _BYTE *v107;
  int v108;
  uint64_t v109;
  int v111;
  uint64_t v113;
  int v114;
  int *v115;
  uint64_t v116[2];
  int8x16x2_t v117;

  v113 = *a1;
  if ((*(_BYTE *)(*a1 + 49) & 0x40) == 0)
    return;
  v8 = a2;
  if (*(_BYTE *)(a2 + 63))
    return;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(v113 + 32);
  if (v13)
  {
    v15 = (uint64_t *)(v14 + 24);
    v16 = -1;
    v17 = a1;
    do
    {
      v18 = *v15;
      v15 += 4;
      ++v16;
    }
    while (v18 != v13);
  }
  else
  {
    v16 = -32768;
    v17 = a1;
  }
  v108 = *((unsigned __int8 *)v17 + 221);
  v19 = *(_QWORD *)(a2 + 72);
  if (v19)
  {
    v109 = v16;
    v20 = *(_BYTE **)(v14 + 32 * v16);
    v106 = a3;
    v111 = a3 + 1;
    v107 = v20;
    v105 = a6;
    v103 = a4;
    while (1)
    {
      v115 = 0;
      v116[0] = 0;
      v114 = 0;
      if (v10)
      {
        v22 = *(unsigned __int8 **)v8;
        v23 = *(unsigned __int8 **)(v19 + 16);
        if (*(_QWORD *)v8)
        {
          if (v23)
          {
            while (1)
            {
              v24 = *v22;
              v25 = *v23;
              if ((_DWORD)v24 == (_DWORD)v25)
              {
                if (!*v22)
                  goto LABEL_29;
              }
              else if (byte_1ACCB6333[v24] != byte_1ACCB6333[v25])
              {
                break;
              }
              ++v22;
              ++v23;
            }
          }
        }
        else if (!v23)
        {
          goto LABEL_29;
        }
        v26 = *(unsigned int *)(v19 + 40);
        if ((int)v26 < 1)
          goto LABEL_12;
        v27 = (int *)(v19 + 64);
        while (1)
        {
          v29 = *v27;
          v27 += 4;
          v28 = v29;
          if ((*(_DWORD *)(v10 + 4 * v29) & 0x80000000) == 0 || v9 && v28 == *(__int16 *)(v8 + 52))
            break;
          if (!--v26)
            goto LABEL_12;
        }
      }
LABEL_29:
      if (*((_BYTE *)v17 + 221))
      {
        v33 = sub_1ACBD1B0C(v113, *(char **)(v19 + 16), v20);
        if (!v33)
          goto LABEL_34;
      }
      else
      {
        v33 = sub_1ACB8D488((uint64_t)v17, 0, *(char **)(v19 + 16), v20, a5, a6, a7, a8);
        if (!v33)
          goto LABEL_34;
      }
      if (sub_1ACC2F2B4((_QWORD **)v17, v33, v19, v116, (uint64_t *)&v115, a6, a7, a8))
      {
LABEL_34:
        if (!v108 || *(_BYTE *)(v113 + 103))
          return;
        v35 = (int8x16_t)xmmword_1ACCBDDC0;
        v34 = (int8x16_t)xmmword_1ACCBDDB0;
        v36 = (int8x16_t)xmmword_1ACCBDDD0;
        v37.i64[0] = 0x1000100010001;
        v37.i64[1] = 0x1000100010001;
        if (!v33)
        {
          v38 = v17[2];
          if (!v38)
          {
            if (!v17[21] && (*(_BYTE *)(*v17 + 96) & 8) == 0)
              *((_BYTE *)v17 + 35) = 1;
            v38 = sub_1ACBCB4C8(v17, v30, v31, v32, a5, a6, a7, a8);
            v35 = (int8x16_t)xmmword_1ACCBDDC0;
            v34 = (int8x16_t)xmmword_1ACCBDDB0;
            v36 = (int8x16_t)xmmword_1ACCBDDD0;
            v37.i64[0] = 0x1000100010001;
            v37.i64[1] = 0x1000100010001;
          }
          v39 = *(_DWORD *)(v38 + 144);
          v40 = *(_DWORD *)(v19 + 40);
          if (v40 >= 1)
          {
            v41 = 0;
            v42 = (v39 + v40 + 1);
            do
            {
              v44 = *(_DWORD *)(v19 + 16 * v41 + 64);
              v45 = (__int16)v44;
              if ((v44 & 0x8000) == 0)
              {
                v46 = *(_QWORD *)v19;
                if ((*(_DWORD *)(*(_QWORD *)v19 + 48) & 0x20) != 0)
                {
                  v47 = *(_QWORD *)(v46 + 8);
                  if ((unsigned __int16)*(_DWORD *)(v19 + 16 * v41 + 64))
                  {
                    if ((v44 << 16) >= 0x110000)
                    {
                      v50 = v44 & 0xF;
                      if ((v44 & 0xF) == 0)
                        v50 = 16;
                      v48 = v45 - v50;
                      v51 = v47 + 142;
                      v52 = 0uLL;
                      v53 = v48;
                      v54 = 0uLL;
                      do
                      {
                        v55 = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 64), v35);
                        v55.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 32), v34).i32[3];
                        v56.i32[0] = vzip1q_s16(*(int16x8_t *)(v51 - 128), *(int16x8_t *)(v51 - 112)).u32[0];
                        v56.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v51 - 96), v36).i32[1];
                        v56.i64[1] = v55.i64[1];
                        v57 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v51 + 96), v34);
                        v117 = *(int8x16x2_t *)(v51 + 32);
                        v58 = vqtbl2q_s8(*(int8x16x2_t *)(v51 + 64), v35);
                        v60 = *(int16x8_t *)v51;
                        v59 = *(int16x8_t *)(v51 + 16);
                        v51 += 256;
                        v58.i32[3] = v57.i32[3];
                        v57.i32[0] = vzip1q_s16(v60, v59).u32[0];
                        v57.i32[1] = vqtbl2q_s8(v117, v36).i32[1];
                        v57.i64[1] = v58.i64[1];
                        v52 = vaddq_s16((int16x8_t)vbicq_s8(v37, (int8x16_t)vshrq_n_u16(v56, 5uLL)), v52);
                        v54 = vaddq_s16((int16x8_t)vbicq_s8(v37, (int8x16_t)vshrq_n_u16(v57, 5uLL)), v54);
                        v53 -= 16;
                      }
                      while (v53);
                      v49 = vaddvq_s16(vaddq_s16(v54, v52));
                    }
                    else
                    {
                      v48 = 0;
                      v49 = 0;
                    }
                    v61 = v45 - v48;
                    v62 = (unsigned __int16 *)(v47 + 16 * v48 + 14);
                    do
                    {
                      v63 = *v62;
                      v62 += 8;
                      v49 += ((v63 >> 5) & 1) == 0;
                      --v61;
                    }
                    while (v61);
                  }
                  else
                  {
                    v49 = 0;
                  }
                  if ((*(_WORD *)(v47 + 16 * v45 + 14) & 0x20) != 0)
                    LOWORD(v45) = v44 - v49 + *(_WORD *)(v46 + 56);
                  else
                    LOWORD(v45) = v49;
                }
              }
              v64 = (v111 + (__int16)v45);
              v65 = *(_DWORD *)(v38 + 144);
              if (*(_DWORD *)(v38 + 148) > v65)
              {
                *(_DWORD *)(v38 + 144) = v65 + 1;
                v43 = *(_QWORD *)(v38 + 136) + 40 * v65;
                *(_DWORD *)v43 = 50;
                *(_DWORD *)(v43 + 4) = v64;
                *(_DWORD *)(v43 + 8) = v42;
                *(_QWORD *)(v43 + 12) = 0;
                *(_QWORD *)(v43 + 28) = 0;
                *(_QWORD *)(v43 + 20) = 0;
                *(_DWORD *)(v43 + 36) = 0;
              }
              else
              {
                sub_1ACBFF5AC(v38, 50, v64, v42, 0, a6, a7, a8);
                v37.i64[0] = 0x1000100010001;
                v37.i64[1] = 0x1000100010001;
                v36 = (int8x16_t)xmmword_1ACCBDDD0;
                v35 = (int8x16_t)xmmword_1ACCBDDC0;
                v34 = (int8x16_t)xmmword_1ACCBDDB0;
              }
              ++v41;
            }
            while (v41 < *(int *)(v19 + 40));
            v39 = *(_DWORD *)(v38 + 144);
            v8 = a2;
            v20 = v107;
          }
          v72 = *(unsigned __int8 *)(v19 + 44);
          if (*(_DWORD *)(v38 + 148) > v39)
          {
            *(_DWORD *)(v38 + 144) = v39 + 1;
            v21 = *(_QWORD *)(v38 + 136) + 40 * v39;
            *(_DWORD *)v21 = 158;
            *(_DWORD *)(v21 + 4) = v72;
            *(_DWORD *)(v21 + 8) = -1;
            *(_QWORD *)(v21 + 12) = 0;
            *(_QWORD *)(v21 + 28) = 0;
            *(_QWORD *)(v21 + 20) = 0;
            *(_DWORD *)(v21 + 36) = 0;
          }
          else
          {
            sub_1ACBFF5AC(v38, 158, v72, 0xFFFFFFFFLL, 0, a6, a7, a8);
          }
        }
        goto LABEL_12;
      }
      v66 = v115;
      if (!v115)
      {
        v114 = *(_DWORD *)(v19 + 64);
        v66 = &v114;
      }
      if (*(int *)(v19 + 40) < 1)
      {
        v69 = 0;
      }
      else
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = v116[0];
        do
        {
          if (v66[v68] == *(__int16 *)(a2 + 52))
            v66[v68] = -1;
          if (*(_QWORD *)(v113 + 528))
          {
            v71 = (__int16 *)(v33 + 52);
            if (v70)
              v71 = (__int16 *)(*(_QWORD *)(v70 + 8) + v67);
            v69 = sub_1ACBA07A4((uint64_t)a1, *(const char **)v33, *(const char **)(*(_QWORD *)(v33 + 8) + 16 * *v71), v109) == 2;
          }
          ++v68;
          v67 += 2;
        }
        while (v68 < *(int *)(v19 + 40));
      }
      v17 = a1;
      if ((_DWORD)v109 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 32 * v109 + 8) + 17))
        sub_1ACC08F44((uint64_t)a1, v109, *(_DWORD *)(v33 + 40), 0, *(_QWORD *)v33);
      ++*((_DWORD *)a1 + 13);
      v9 = v105;
      a7 = v106;
      v10 = a5;
      v11 = v103;
      if (v106)
        sub_1ACC2FC58(a1, v109, v33, v116[0], v19, (uint64_t)v66, v106, 0xFFFFFFFFLL, v69);
      if ((_DWORD)v11)
      {
        v73 = (uint64_t *)a1[21];
        if (!v73)
          v73 = a1;
        v74 = (uint64_t *)v73[23];
        if (!v74
          || ((v75 = *v74, v75 != *(_QWORD *)(v19 + 48)) || *(_BYTE *)(v19 + 45) != 8)
          && (v75 != *(_QWORD *)(v19 + 56) || *(_BYTE *)(v19 + 46) != 8))
        {
          sub_1ACC2FC58(a1, v109, v33, v116[0], v19, (uint64_t)v66, v11, 1, v69);
        }
      }
      v8 = a2;
      v20 = v107;
      if (v115)
        sub_1ACBE0F9C((_QWORD *)v113, v115);
LABEL_12:
      v19 = *(_QWORD *)(v19 + 8);
      if (!v19)
      {
        v13 = *(_QWORD *)(v8 + 96);
        v12 = v106;
        break;
      }
    }
  }
  v76 = *(unsigned __int8 **)v8;
  v77 = *(_QWORD *)(v13 + 96);
  if (!v77)
  {
    v82 = (uint64_t *)(v13 + 88);
    v83 = *(_DWORD *)(v13 + 84);
    if (v83)
      goto LABEL_147;
LABEL_102:
    v82 = &qword_1EECAD260;
    goto LABEL_103;
  }
  v78 = *v76;
  if (*v76)
  {
    v79 = 0;
    v80 = v76 + 1;
    do
    {
      v79 = -1640531535 * (v79 + byte_1ACCB6333[v78]);
      v81 = *v80++;
      v78 = v81;
    }
    while (v81);
  }
  else
  {
    v79 = 0;
  }
  v98 = (_DWORD *)(v77 + 16 * (v79 % *(_DWORD *)(v13 + 80)));
  v82 = (uint64_t *)(v98 + 2);
  v83 = *v98;
  if (!v83)
    goto LABEL_102;
  do
  {
LABEL_147:
    v82 = (uint64_t *)*v82;
    v99 = (_BYTE *)v82[3];
    for (i = *(unsigned __int8 **)v8; ; ++i)
    {
      v101 = *v99;
      v102 = *i;
      if ((_DWORD)v101 != (_DWORD)v102)
        break;
      if (!*v99)
        goto LABEL_103;
LABEL_149:
      ++v99;
    }
    if (byte_1ACCB6333[v101] == byte_1ACCB6333[v102])
      goto LABEL_149;
    --v83;
  }
  while (v83);
  v82 = &qword_1EECAD260;
LABEL_103:
  v84 = v82[2];
  if (v84)
  {
    while (2)
    {
      v115 = 0;
      v116[0] = 0;
      if (v10)
      {
        v85 = *(unsigned int *)(v84 + 40);
        if ((int)v85 >= 1)
        {
          v86 = 0;
          while (*(__int16 *)(v8 + 54) < 1)
          {
LABEL_123:
            if (++v86 == v85)
              goto LABEL_105;
          }
          v87 = 0;
          while (1)
          {
            if ((*(_DWORD *)(v10 + 4 * v87) & 0x80000000) == 0 || v9 && v87 == *(__int16 *)(v8 + 52))
            {
              v88 = *(_QWORD *)(v8 + 8);
              if (*(_QWORD *)(v84 + 16 * v86 + 72))
              {
                v89 = *(_BYTE **)(v88 + 16 * v87);
                for (j = *(unsigned __int8 **)(v84 + 16 * v86 + 72); ; ++j)
                {
                  v91 = *v89;
                  v92 = *j;
                  if ((_DWORD)v91 == (_DWORD)v92)
                  {
                    if (!*v89)
                      goto LABEL_125;
                  }
                  else if (byte_1ACCB6333[v91] != byte_1ACCB6333[v92])
                  {
                    goto LABEL_112;
                  }
                  ++v89;
                }
              }
              if ((*(_WORD *)(v88 + 16 * v87 + 14) & 1) != 0)
                goto LABEL_125;
            }
LABEL_112:
            if (++v87 == *(__int16 *)(v8 + 54))
              goto LABEL_123;
          }
        }
      }
      else
      {
LABEL_125:
        if (*(_BYTE *)(v84 + 44) || (*(_BYTE *)(v113 + 50) & 8) != 0 || a1[21] || *((_BYTE *)a1 + 32))
        {
          if (sub_1ACC2F2B4((_QWORD **)a1, v8, v84, v116, (uint64_t *)&v115, a6, a7, a8))
          {
            if (!v108 || *(_BYTE *)(v113 + 103))
              return;
          }
          else
          {
            v93 = sub_1ACBE1124(*a1, 0x70uLL);
            if (v93)
            {
              v94 = (_QWORD *)v93;
              *(_QWORD *)v93 = 0x100000001;
              *(_OWORD *)(v93 + 8) = 0u;
              *(_OWORD *)(v93 + 24) = 0u;
              *(_OWORD *)(v93 + 56) = 0u;
              *(_OWORD *)(v93 + 72) = 0u;
              *(_OWORD *)(v93 + 88) = 0u;
              *(_QWORD *)(v93 + 104) = 0;
              *(_OWORD *)(v93 + 40) = 0u;
              *(_QWORD *)(v93 + 16) = 0;
              *(_QWORD *)(v93 + 24) = 0;
              v95 = *(_QWORD *)v84;
              *(_QWORD *)(v93 + 40) = *(_QWORD *)v84;
              *(_QWORD *)(v93 + 24) = *(_QWORD *)v95;
              ++*(_DWORD *)(v95 + 44);
              LODWORD(v95) = *((_DWORD *)a1 + 13);
              *((_DWORD *)a1 + 13) = v95 + 1;
              *(_DWORD *)(v93 + 72) = v95;
              if ((_DWORD)v11)
                sub_1ACC30D08((uint64_t)a1, v93, v8, v116[0], v84, (uint64_t)v115, v11, 0xFFFFFFFFLL);
              if ((_DWORD)v12)
              {
                v96 = *(unsigned __int8 *)(v84 + (v10 != 0) + 45);
                sub_1ACC30D08((uint64_t)a1, (uint64_t)v94, a2, v116[0], v84, (uint64_t)v115, v12, 1);
                if (!*(_BYTE *)(v84 + 44) && (v96 | 2) != 0xA)
                {
                  v97 = (uint64_t *)a1[21];
                  if (!v97)
                    v97 = a1;
                  *((_BYTE *)v97 + 33) = 1;
                }
              }
              v94[3] = 0;
              sub_1ACB7E8B0((_QWORD *)v113, v94);
              v8 = a2;
            }
            if (v115)
              sub_1ACBE0F9C((_QWORD *)v113, v115);
          }
        }
      }
LABEL_105:
      v84 = *(_QWORD *)(v84 + 24);
      if (!v84)
        return;
      continue;
    }
  }
}

uint64_t sub_1ACB99CFC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;

  v9 = a6;
  v11 = a9;
  v46 = result;
  v12 = *(_QWORD *)(result + 16);
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
  {
    v33 = 0;
    if ((*(_BYTE *)(a2 + 48) & 0x80) != 0)
      return result;
    goto LABEL_27;
  }
  v43 = a8;
  v44 = a3;
  v45 = a5;
  v14 = 0;
  v47 = a7;
  v15 = a7 & 2 | (16 * (a9 != 0)) | 1;
  v16 = a4;
  do
  {
    v17 = *(unsigned int *)(v9 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (*(_QWORD *)(v13 + 72))
      {
        v18 = *(_DWORD *)(v12 + 144);
        v19 = (v18 + 2);
        if (*(_DWORD *)(v12 + 148) <= v18)
        {
          result = sub_1ACBFF5AC(v12, 50, v17, v19, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v18 + 1;
          v20 = *(_QWORD *)(v12 + 136) + 40 * v18;
          *(_DWORD *)v20 = 50;
          *(_DWORD *)(v20 + 4) = v17;
          *(_DWORD *)(v20 + 8) = v19;
          *(_QWORD *)(v20 + 12) = 0;
          *(_QWORD *)(v20 + 28) = 0;
          *(_QWORD *)(v20 + 20) = 0;
          *(_DWORD *)(v20 + 36) = 0;
        }
      }
      v21 = *(_WORD *)(v13 + 99);
      if ((v21 & 3) == 2)
      {
        v22 = *(_DWORD *)(a2 + 48);
        if ((v22 & 0x80) != 0)
          v23 = v15;
        else
          v23 = 16 * (a9 != 0);
        if ((v22 & 0x80) != 0 && !v47)
        {
          result = sub_1ACC33E98(v46, a2, (v16 + v14), *(unsigned int *)(v9 + 4 * v14), a5, a6, a7, a8);
          v21 = *(_WORD *)(v13 + 99);
          v23 = v15;
        }
      }
      else
      {
        v23 = 16 * (a9 != 0);
      }
      v24 = v16 + v14;
      v25 = *(unsigned int *)(v9 + 4 * v14);
      a5 = (v25 + 1);
      v26 = (v21 & 8) == 0;
      v27 = 94;
      if (v26)
        v27 = 96;
      a6 = *(unsigned __int16 *)(v13 + v27);
      v28 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v28)
      {
        result = sub_1ACBFF7F0(v12, 138, v24, v25, a5, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v28 + 1;
        v29 = *(_QWORD *)(v12 + 136) + 40 * v28;
        *(_DWORD *)v29 = 64906;
        *(_DWORD *)(v29 + 4) = v24;
        *(_DWORD *)(v29 + 8) = v25;
        *(_DWORD *)(v29 + 12) = a5;
        *(_DWORD *)(v29 + 16) = a6;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0;
      }
      v30 = *(_DWORD *)(v12 + 144);
      v31 = __OFSUB__(v30, 1);
      v32 = v30 - 1;
      if (v32 < 0 == v31)
        *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v32 + 2) = v23;
    }
    ++v14;
    v13 = *(_QWORD *)(v13 + 40);
  }
  while (v13);
  v33 = v14;
  a3 = v44;
  a5 = v45;
  v11 = a9;
  a8 = v43;
  a7 = v47;
  if ((*(_BYTE *)(a2 + 48) & 0x80) == 0)
  {
LABEL_27:
    v34 = a7 | 1;
    if (!(_DWORD)a7)
      v34 = 33;
    if (*(_BYTE *)(v46 + 30))
      v35 = 0;
    else
      v35 = v34;
    if ((_DWORD)a8)
      v35 |= 8u;
    if (v11)
      v36 = v35 | 0x10;
    else
      v36 = v35;
    v37 = *(unsigned int *)(v9 + 4 * v33);
    v38 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v38)
    {
      result = sub_1ACBFF5AC(v12, 128, a3, v37, a5, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v38 + 1;
      v39 = *(_QWORD *)(v12 + 136) + 40 * v38;
      *(_DWORD *)v39 = 128;
      *(_DWORD *)(v39 + 4) = a3;
      *(_DWORD *)(v39 + 8) = v37;
      *(_DWORD *)(v39 + 12) = a5;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 16) = 0;
    }
    if (!*(_BYTE *)(v46 + 30) && !*(_BYTE *)(*(_QWORD *)v12 + 103))
    {
      v40 = *(_QWORD *)(v12 + 136) + 40 * *(int *)(v12 + 144);
      *(_BYTE *)(v40 - 39) = -5;
      *(_QWORD *)(v40 - 24) = a2;
    }
    v41 = *(_DWORD *)(v12 + 144);
    v31 = __OFSUB__(v41, 1);
    v42 = v41 - 1;
    if (v42 < 0 == v31)
      *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v42 + 2) = v36;
  }
  return result;
}

void sub_1ACB99FCC(uint64_t a1, __int128 *a2, __int16 a3)
{
  __int128 v3;

  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF79C0(a1, a2, a3);
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v3;
    if ((*((_BYTE *)a2 + 21) & 0x20) == 0)
      *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0x8FFF | a3;
  }
}

void sub_1ACB9A00C(uint64_t a1, int a2, int a3)
{
  __int16 v4;
  double v5;
  __int16 v9;
  __int16 v10;
  void *v12;

  if (a2 < 67)
  {
    if (a2 != 66)
      return;
    v10 = *(_WORD *)(a1 + 20);
    if ((v10 & 2) != 0 || (v10 & 0x2C) == 0)
      goto LABEL_30;
    if (*(int *)(a1 + 32) >= 32)
    {
      v12 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 20) = v10 & 0x2D;
    }
    else
    {
      if (sub_1ACB7E454(a1, 32, 0))
      {
        *(_BYTE *)(a1 + 22) = 0;
LABEL_30:
        v9 = *(_WORD *)(a1 + 20) & 0xFFD3;
        goto LABEL_31;
      }
      v12 = *(void **)(a1 + 8);
    }
    sub_1ACBF2E10(v12, a1);
    *(_BYTE *)(a1 + 22) = 1;
    *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xFDD1 | 0x202;
    if (a3 != 1)
      sub_1ACBB0FEC((int *)a1, a3);
    goto LABEL_30;
  }
  v4 = *(_WORD *)(a1 + 20);
  if ((v4 & 4) != 0)
    return;
  if ((v4 & 0x28) != 0)
  {
    if (a2 > 0x45)
      return;
    if ((v4 & 0x20) != 0)
      goto LABEL_17;
    v5 = *(double *)a1;
    if (*(double *)a1 >= -9.22337204e18
      && v5 <= 9.22337204e18
      && v5 == (double)(uint64_t)v5
      && (unint64_t)((uint64_t)v5 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      *(_QWORD *)a1 = (uint64_t)v5;
LABEL_17:
      v9 = v4 & 0xF240 | 4;
LABEL_31:
      *(_WORD *)(a1 + 20) = v9;
    }
  }
  else if ((v4 & 2) != 0)
  {
    sub_1ACBCA9CC(a1, 1);
  }
}

uint64_t sub_1ACB9A164(uint64_t a1)
{
  __int16 v1;
  double v3;

  if (!a1)
  {
    sub_1ACBBE20C(89699);
    return 0;
  }
  v1 = *(_WORD *)(a1 + 20);
  if ((v1 & 0x24) != 0)
    return *(_QWORD *)a1;
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *(_QWORD *)(a1 + 8))
      return sub_1ACBF2FC0(a1);
    return 0;
  }
  v3 = *(double *)a1;
  if (*(double *)a1 < -9.22337204e18)
    return 0x8000000000000000;
  if (v3 <= 9.22337204e18)
    return (uint64_t)v3;
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1ACB9A20C(unsigned __int8 *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  _DWORD *v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  uint64_t v50;
  unsigned int v51;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(v4 + 8);
  if (*a1)
  {
    if (*a1 < 3u)
      return sub_1ACBEB08C(86530);
    result = sub_1ACBF7EA8((uint64_t)a1);
    v51 = result;
    if ((_DWORD)result)
      return result;
    if (*a1)
      return 0;
  }
  v8 = (uint64_t *)(a1 + 136);
  v7 = *((_QWORD *)a1 + 17);
  v9 = *((unsigned __int16 *)a1 + 43);
  v10 = *(unsigned __int16 *)(v7 + 24);
  if (v10 <= v9)
  {
    v19 = 9;
    return sub_1ACBEB08C(v19 | 0x15202u);
  }
  v11 = (char)a1[84];
  v49[0] = 0;
  v49[1] = 0;
  v50 = 0;
  v12 = *(_QWORD *)(v7 + 80);
  v13 = *(unsigned __int16 *)(v7 + 26);
  v14 = *(_QWORD *)(v7 + 96);
  v15 = (unsigned __int8 *)(v14 + 2 * v9);
  v16 = *v15;
  v17 = v15[1];
  if ((*(_DWORD *)(v7 + 20) & 0x80000000) == 0)
    goto LABEL_8;
  v46 = v11;
  v48 = v9;
  if (sub_1ACBF949C(v7))
  {
    v19 = 13;
    return sub_1ACBEB08C(v19 | 0x15202u);
  }
  v14 = *(_QWORD *)(v7 + 96);
  v10 = *(unsigned __int16 *)(v7 + 24);
  LODWORD(v9) = v48;
  v11 = v46;
LABEL_8:
  v18 = v12 + ((v17 | (v16 << 8)) & v13);
  if (v18 < v14 + (unint64_t)v10)
    return sub_1ACBEB08C(86546);
  v20 = v11;
  v47 = v9;
  v21 = a2;
  if ((a2 & 2) != 0)
  {
    if (*(_BYTE *)(v7 + 8))
    {
      v22 = *(_DWORD *)(v7 + 20);
      if ((int)(v22 + (*(uint64_t (**)(uint64_t, unint64_t))(v7 + 120))(v7, v18) + 2) <= (int)(2 * *(_DWORD *)(v5 + 56) / 3u)
        && *(_WORD *)(v7 + 24) != 1)
      {
        v23 = 1;
        if (*(_BYTE *)(v7 + 8))
          goto LABEL_19;
        goto LABEL_43;
      }
    }
    result = sub_1ACBEF068((uint64_t)a1);
    if ((_DWORD)result)
      return result;
  }
  v23 = 0;
  if (*(_BYTE *)(v7 + 8))
    goto LABEL_19;
LABEL_43:
  a1[1] &= 0xF1u;
  *((_WORD *)a1 + 35) = 0;
  if (!*a1 && *((_WORD *)a1 + 43) && *(_BYTE *)(*v8 + 8))
  {
    --*((_WORD *)a1 + 43);
  }
  else
  {
    result = sub_1ACBF9260(a1);
    if ((_DWORD)result)
      return result;
  }
LABEL_19:
  if ((a1[1] & 0x20) != 0)
  {
    v24 = *(_QWORD *)(v5 + 16);
    if (v24)
    {
      v25 = *((_DWORD *)a1 + 20);
      while ((unsigned __int8 *)v24 == a1 || v25 && *(_DWORD *)(v24 + 80) != v25)
      {
        v24 = *(_QWORD *)(v24 + 40);
        if (!v24)
          goto LABEL_31;
      }
      result = sub_1ACBEEE90((unsigned __int8 *)v24, v25, a1);
      v51 = result;
      if ((_DWORD)result)
        return result;
    }
    else
    {
LABEL_31:
      a1[1] &= ~0x20u;
      v51 = 0;
    }
  }
  if (!*((_QWORD *)a1 + 16) && *(_BYTE *)(v4 + 19))
    sub_1ACBF865C(v4, *((_DWORD *)a1 + 20), *((_QWORD *)a1 + 6), 0);
  v26 = *(_QWORD *)(v7 + 112);
  v27 = *(_DWORD **)(v26 + 40);
  if ((*(_WORD *)(v26 + 52) & 4) == 0 || v27[8] < *(_DWORD *)(v26 + 48))
  {
    result = v27[12];
    if ((_DWORD)result)
      return result;
    v28 = *(_QWORD *)(v7 + 112);
    if (v27[46] <= v27[50])
      result = sub_1ACB9A818(v28);
    else
      result = sub_1ACBEDEA4(v28);
LABEL_50:
    if ((_DWORD)result)
      return result;
    goto LABEL_51;
  }
  if (v27[32])
  {
    result = sub_1ACBEA110(*(_QWORD *)(v7 + 112));
    goto LABEL_50;
  }
LABEL_51:
  (*(void (**)(uint64_t, unint64_t, _QWORD *))(v7 + 128))(v7, v18, v49);
  if ((_DWORD)v50 == WORD2(v50))
    v29 = 0;
  else
    v29 = sub_1ACBF86B0(v7, v18, (uint64_t)v49);
  v51 = v29;
  sub_1ACB9AC70(v7, v47, HIWORD(v50), &v51);
  result = v51;
  if (!v51)
  {
    if (*(_BYTE *)(v7 + 8))
      goto LABEL_92;
    v35 = *v8;
    if ((*(_DWORD *)(*v8 + 20) & 0x80000000) == 0 || (result = sub_1ACBF949C(*v8), !(_DWORD)result))
    {
      if ((char)a1[84] - 1 <= v20)
        v36 = (uint64_t)(a1 + 136);
      else
        v36 = (uint64_t)&a1[8 * v20 + 152];
      v37 = *(_QWORD *)(v35 + 96) + 2 * *(unsigned __int16 *)(v35 + 24);
      v38 = (*(unsigned __int8 *)(v37 - 1) | (*(unsigned __int8 *)(v37 - 2) << 8)) & (unint64_t)*(unsigned __int16 *)(v35 + 26);
      if (v38 <= 3)
        return sub_1ACBEB08C(86637);
      v41 = v20;
      v42 = *(_DWORD *)(*(_QWORD *)v36 + 4);
      v43 = *(_QWORD *)(v35 + 80) + v38;
      v44 = (*(uint64_t (**)(uint64_t, unint64_t))(v35 + 120))(v35, v43);
      v45 = *(_DWORD **)(v5 + 136);
      v51 = sub_1ACB9A7C8(*(_QWORD *)(v35 + 112));
      if (!v51)
        v51 = sub_1ACB9E6A8(v7, v47, (char *)(v43 - 4), v44 + 4, v45, v42);
      sub_1ACB9AC70(v35, *(unsigned __int16 *)(v35 + 24) - 1, v44, &v51);
      result = v51;
      v20 = v41;
      if (!v51)
      {
LABEL_92:
        if (3 * *(_DWORD *)(*((_QWORD *)a1 + 17) + 20) <= 2 * *(_DWORD *)(*((_QWORD *)a1 + 4) + 56)
          || (result = sub_1ACB9AD9C((uint64_t)a1), !(_DWORD)result))
        {
          if ((char)a1[84] <= v20)
            goto LABEL_75;
          sub_1ACBEF1D8(*((_QWORD *)a1 + 17));
          v30 = (char)--a1[84];
          if (v30 > v20)
          {
            v31 = v20;
            do
            {
              a1[84] = v30 - 1;
              v32 = *(_QWORD *)&a1[8 * (char)v30 + 144];
              if (v32)
              {
                v33 = *(_QWORD *)(v32 + 112);
                if ((*(_WORD *)(v33 + 52) & 0x20) != 0)
                {
                  v34 = *(_QWORD *)(v33 + 40);
                  --*(_DWORD *)(v34 + 152);
                  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 168);
                  *(_QWORD *)(v34 + 168) = v33;
                  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v34 + 72) + 144))(*(_QWORD *)(v34 + 72), *(_QWORD *)(v34 + 200) * (*(_DWORD *)(v33 + 48) - 1), *(_QWORD *)(v33 + 8));
                }
                else
                {
                  sub_1ACBE906C(v33);
                }
                v31 = v20;
              }
              v30 = (char)a1[84];
            }
            while (v30 > v31);
          }
          *((_QWORD *)a1 + 17) = *(_QWORD *)&a1[8 * v30 + 144];
          result = sub_1ACB9AD9C((uint64_t)a1);
          if (!(_DWORD)result)
          {
LABEL_75:
            if (v23)
            {
              *a1 = 2;
              v39 = *(unsigned __int16 *)(v7 + 24);
              result = 0;
              if (v47 >= v39)
              {
                *((_DWORD *)a1 + 1) = -1;
                *((_WORD *)a1 + 43) = v39 - 1;
              }
              else
              {
                *((_DWORD *)a1 + 1) = 1;
              }
            }
            else
            {
              v40 = sub_1ACB8A058(a1);
              if ((v21 & 2) != 0)
              {
                sub_1ACBEEF5C((uint64_t)a1);
                *a1 = 3;
              }
              if (v40 == 16)
                return 0;
              else
                return v40;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACB9A7C8(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  v1 = *(_DWORD **)(a1 + 40);
  if ((*(_WORD *)(a1 + 52) & 4) != 0 && v1[8] >= *(_DWORD *)(a1 + 48))
  {
    v2 = v1[32];
    if (!(_DWORD)v2)
      return v2;
    return sub_1ACBEA110(a1);
  }
  else
  {
    v2 = v1[12];
    if ((_DWORD)v2)
      return v2;
    if (v1[46] <= v1[50])
      return sub_1ACB9A818(a1);
    else
      return sub_1ACBEDEA4(a1);
  }
}

uint64_t sub_1ACB9A818(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(v2 + 21);
  if (v3 == 2)
  {
    v4 = *(unsigned int *)(v2 + 48);
    if ((_DWORD)v4)
      return v4;
    if (*(_QWORD *)(v2 + 344) || *(_BYTE *)(v2 + 9) == 2)
      goto LABEL_5;
    v20 = *(_QWORD *)v2;
    v21 = *(_DWORD *)(v2 + 32);
    v22 = (_OWORD *)sub_1ACB5D828(512);
    if (!v22)
    {
      *(_QWORD *)(v2 + 64) = 0;
      return 7;
    }
    v22[30] = 0u;
    v22[31] = 0u;
    v22[28] = 0u;
    v22[29] = 0u;
    v22[26] = 0u;
    v22[27] = 0u;
    v22[24] = 0u;
    v22[25] = 0u;
    v22[22] = 0u;
    v22[23] = 0u;
    v22[20] = 0u;
    v22[21] = 0u;
    v22[18] = 0u;
    v22[19] = 0u;
    v22[16] = 0u;
    v22[17] = 0u;
    v22[14] = 0u;
    v22[15] = 0u;
    v22[12] = 0u;
    v22[13] = 0u;
    v22[10] = 0u;
    v22[11] = 0u;
    v22[8] = 0u;
    v22[9] = 0u;
    v22[6] = 0u;
    v22[7] = 0u;
    v22[4] = 0u;
    v22[5] = 0u;
    v22[2] = 0u;
    v22[3] = 0u;
    *v22 = 0u;
    v22[1] = 0u;
    *(_DWORD *)v22 = v21;
    *(_QWORD *)(v2 + 64) = v22;
    v23 = *(_QWORD *)(v2 + 80);
    if (!*(_QWORD *)v23)
    {
      if (*(_BYTE *)(v2 + 9) == 4)
      {
        *(_OWORD *)(v23 + 48) = 0uLL;
        *(_OWORD *)(v23 + 64) = 0uLL;
        *(_OWORD *)(v23 + 16) = 0uLL;
        *(_OWORD *)(v23 + 32) = 0uLL;
        *(_OWORD *)v23 = 0uLL;
        *(_QWORD *)v23 = &unk_1E5C732E0;
        *(_QWORD *)(v23 + 8) = -4294966280;
        *(_DWORD *)(v23 + 56) = 0;
        *(_QWORD *)(v23 + 64) = 0;
        *(_QWORD *)(v23 + 72) = 0;
      }
      else
      {
        v24 = *(_DWORD *)(v2 + 180);
        v25 = *(unsigned __int8 *)(v2 + 16);
        v26 = dword_1ECD3B15C;
        v4 = sub_1ACBECE74(v2);
        if (!(_DWORD)v4)
        {
          if (v25)
            v27 = v26;
          else
            v27 = 0;
          if (v25)
            v28 = 4126;
          else
            v28 = 2054;
          v4 = sub_1ACBEAF04(v20, *(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 80), v28 | v24 & 0x1700000u, v27);
        }
        if ((_DWORD)v4)
          goto LABEL_56;
      }
    }
    *(_DWORD *)(v2 + 52) = 0;
    *(_BYTE *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 104) = 0;
    v4 = sub_1ACBA767C(v2);
    if (!(_DWORD)v4)
    {
LABEL_5:
      v3 = 3;
      *(_BYTE *)(v2 + 21) = 3;
      goto LABEL_6;
    }
LABEL_56:
    sub_1ACBAF4D0(*(_QWORD *)(v2 + 64));
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    return v4;
  }
LABEL_6:
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x11) != 0)
  {
    v6 = v5 & 0xFFEF;
    *(_WORD *)(a1 + 52) = v5 & 0xFFEF;
    if ((v5 & 1) != 0)
    {
      v6 ^= 3u;
      *(_WORD *)(a1 + 52) = v6;
      v7 = *(uint64_t **)(a1 + 24);
      v8 = *v7;
      *(_QWORD *)(a1 + 64) = *v7;
      *(_QWORD *)(a1 + 72) = 0;
      if (v8)
      {
        *(_QWORD *)(v8 + 72) = a1;
      }
      else
      {
        v7[1] = a1;
        if (*((_BYTE *)v7 + 48))
          *((_BYTE *)v7 + 49) = 1;
      }
      *v7 = a1;
      if ((v5 & 8) == 0 && !v7[2])
        v7[2] = a1;
    }
  }
  else
  {
    v6 = *(_WORD *)(a1 + 52);
  }
  v9 = *(_DWORD **)(v2 + 64);
  if (!v9)
    goto LABEL_27;
  v10 = *(_DWORD *)(a1 + 48);
  v11 = v10 - 1;
  if (v10 - 1 >= *v9)
  {
LABEL_20:
    if (v10 <= *(_DWORD *)(v2 + 36))
    {
      v4 = sub_1ACBEE2CC(a1);
      if ((_DWORD)v4)
        return v4;
      v6 = *(_WORD *)(a1 + 52);
    }
    else if (v3 != 4)
    {
      v6 |= 8u;
    }
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v9[2];
    if (!v12)
      break;
    v13 = v11 / v12;
    v11 %= v12;
    v9 = *(_DWORD **)&v9[2 * v13 + 4];
    if (!v9)
      goto LABEL_20;
  }
  if (*v9 >= 0xF81u)
  {
    v16 = v11 % 0x7C;
    v17 = v9 + 4;
    v18 = v17[v11 % 0x7C];
    if (v18)
    {
      v19 = v11 + 1;
      while (v18 != v19)
      {
        if (v16 == 123)
          v16 = 0;
        else
          ++v16;
        v18 = v17[v16];
        if (!v18)
          goto LABEL_20;
      }
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if (((*((unsigned __int8 *)v9 + ((unint64_t)v11 >> 3) + 16) >> (v11 & 7)) & 1) == 0)
    goto LABEL_20;
LABEL_27:
  *(_WORD *)(a1 + 52) = v6 | 4;
  if (*(int *)(v2 + 128) < 1)
    v4 = 0;
  else
    v4 = sub_1ACBEA110(a1);
  v14 = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(v2 + 32) < v14)
    *(_DWORD *)(v2 + 32) = v14;
  return v4;
}

uint64_t sub_1ACB9AB44(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  __int16 v3;
  int v4;
  __int16 v5;
  unsigned int v6;
  unsigned int v7;

  v2 = a2[4];
  if (((char)a2[4] & 0x80000000) == 0)
  {
    v3 = 4;
    goto LABEL_10;
  }
  v4 = a2[5] & 0x7F | ((v2 & 0x7F) << 7);
  if ((a2[5] & 0x80) == 0)
  {
    v3 = 5;
LABEL_5:
    v2 = v4;
    goto LABEL_10;
  }
  v2 = a2[6] & 0x7F | (v4 << 7);
  if ((a2[6] & 0x80) != 0)
  {
    v2 = a2[7] & 0x7F | (v2 << 7);
    if ((a2[7] & 0x80) != 0)
    {
      v4 = a2[8] & 0x7F | (v2 << 7);
      if ((a2[8] & 0x80) == 0)
      {
        v3 = 8;
        goto LABEL_5;
      }
      v2 = a2[9] & 0x7F | (v4 << 7);
      if ((a2[9] & 0x80) != 0)
      {
        v4 = a2[10] & 0x7F | (v2 << 7);
        if ((a2[10] & 0x80) == 0)
        {
          v3 = 10;
          goto LABEL_5;
        }
        v2 = a2[11] & 0x7F | (v4 << 7);
        if ((a2[11] & 0x80) != 0)
        {
          v4 = a2[12] & 0x7F | (v2 << 7);
          v3 = 12;
          goto LABEL_5;
        }
        v3 = 11;
      }
      else
      {
        v3 = 9;
      }
    }
    else
    {
      v3 = 7;
    }
  }
  else
  {
    v3 = 6;
  }
LABEL_10:
  v5 = (_WORD)a2 + v3 + 1;
  v6 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v6)
    return (unsigned __int16)(v2 + v5 - (_WORD)a2);
  v7 = (v2 - *(unsigned __int16 *)(a1 + 16)) % (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 56) - 4)
     + *(unsigned __int16 *)(a1 + 16);
  if (v7 > v6)
    LOWORD(v7) = *(_WORD *)(a1 + 16);
  return (unsigned __int16)(v7 + v5 - (_WORD)a2 + 4);
}

uint64_t sub_1ACB9AC70(uint64_t result, int a2, int a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (!*a4)
  {
    v6 = result;
    v7 = (unsigned __int16 *)(*(_QWORD *)(result + 96) + 2 * a2);
    v8 = __rev16(*v7);
    if (v8 + a3 <= *(_DWORD *)(*(_QWORD *)(result + 72) + 56))
    {
      v9 = *(_QWORD *)(result + 80);
      v10 = *(unsigned __int8 *)(result + 9);
      result = sub_1ACBF9924(result, v8, (unsigned __int16)a3);
      if ((_DWORD)result)
      {
        *a4 = result;
      }
      else
      {
        v11 = *(_WORD *)(v6 + 24) - 1;
        *(_WORD *)(v6 + 24) = v11;
        if (v11)
        {
          result = (uint64_t)memmove(v7, v7 + 1, 2 * (v11 - a2));
          v12 = v10 + v9;
          *(_BYTE *)(v12 + 3) = *(_BYTE *)(v6 + 25);
          *(_BYTE *)(v12 + 4) = *(_BYTE *)(v6 + 24);
          v13 = *(_DWORD *)(v6 + 20) + 2;
        }
        else
        {
          v14 = v10 + v9;
          *(_DWORD *)(v14 + 1) = 0;
          *(_BYTE *)(v14 + 7) = 0;
          *(_BYTE *)(v14 + 5) = BYTE1(*(_DWORD *)(*(_QWORD *)(v6 + 72) + 56));
          *(_BYTE *)(v14 + 6) = *(_DWORD *)(*(_QWORD *)(v6 + 72) + 56);
          v13 = *(_DWORD *)(*(_QWORD *)(v6 + 72) + 56)
              - (*(unsigned __int8 *)(v6 + 9)
               + *(unsigned __int8 *)(v6 + 10))
              - 8;
        }
        *(_DWORD *)(v6 + 20) = v13;
      }
    }
    else
    {
      result = sub_1ACBEB08C(83973);
      *a4 = result;
    }
  }
  return result;
}

uint64_t sub_1ACB9AD9C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  signed int v28;
  unint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  unsigned __int8 *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  int64x2_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  const char *v75;
  uint16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint16x8_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint16x8_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x8_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x8_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  uint64_t v116;
  int8x16_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned __int8 *v121;
  _QWORD *v122;
  unsigned __int16 v123;
  char *v124;
  unsigned __int16 v125;
  _BYTE *v126;
  unsigned int v127;
  __int128 *v128;
  _OWORD *v129;
  uint64_t v130;
  __int128 v131;
  int64x2_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t *v141;
  unint64_t v142;
  const char *v143;
  uint16x8_t v144;
  int8x16_t v145;
  int8x16_t v146;
  uint16x8_t v147;
  int8x16_t v148;
  int8x16_t v149;
  uint16x8_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x8_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x8_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int32x4_t v161;
  int64x2_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int64x2_t v165;
  int64x2_t v166;
  const char *v167;
  unint64_t v168;
  int64x2_t *v169;
  uint16x8_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x8_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int32x4_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  int64_t v198;
  int v199;
  int64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int64_t v205;
  int v206;
  int v207;
  int v208;
  int64_t v209;
  uint64_t v210;
  _WORD *v211;
  int64_t v212;
  int v213;
  int v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  _DWORD *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _DWORD *v247;
  uint64_t v248;
  int v249;
  BOOL v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  unsigned int *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int *v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  int *v280;
  __int128 *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  int v288;
  int v289;
  _DWORD *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  int8x8_t *v294;
  char v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  unint64_t v324;
  int v325;
  _WORD *v326;
  _WORD *v327;
  int v328;
  unsigned __int8 v329;
  uint64_t v330;
  int v331;
  int v332;
  uint64_t v333;
  _WORD *v334;
  int v335;
  int v336;
  _QWORD *v337;
  int v338;
  _WORD *v339;
  uint64_t v340;
  uint64_t v341;
  BOOL v342;
  int v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  int v349;
  int v350;
  uint64_t v351;
  _DWORD *v352;
  char *v353;
  int v354;
  uint64_t v355;
  char *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int16 v370;
  __int16 v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  int v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v387;
  uint64_t v388;
  int v389;
  int v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  unsigned int *v399;
  _BOOL4 v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int64x2_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  int v424;
  unsigned int *v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429[2];
  int v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  int v434;
  unint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  uint64_t v447;
  int v448;
  char v449;
  unsigned int v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  char __src[17];
  _BYTE v456[16];
  _WORD v457[10];
  unsigned int v458[5];
  _DWORD v459[5];
  _QWORD v460[2];
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD v465[4];
  int8x16_t v466;
  int8x16x2_t v467;
  int8x16x2_t v468;

  v1 = a1;
  v2 = 0;
  v465[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 136);
  v406 = vdupq_n_s64(8uLL);
  while (1)
  {
    if ((*(_DWORD *)(v3 + 20) & 0x80000000) != 0 && sub_1ACBF949C(v3))
    {
LABEL_499:
      v11 = 0;
      goto LABEL_502;
    }
    if (*(_BYTE *)(v3 + 12))
      break;
    if (3 * *(_DWORD *)(v3 + 20) <= 2 * *(_DWORD *)(*(_QWORD *)(v1 + 32) + 56))
      goto LABEL_499;
    v6 = *(unsigned __int8 *)(v1 + 84);
    if (!*(_BYTE *)(v1 + 84))
      goto LABEL_499;
LABEL_23:
    if (*(int *)(*(_QWORD *)(v3 + 112) + 56) >= 2)
    {
      v385 = 85842;
LABEL_501:
      v11 = sub_1ACBEB08C(v385);
      goto LABEL_502;
    }
    v12 = (char)v6 - 1;
    v13 = *(_QWORD *)(v1 + 8 * v12 + 144);
    v14 = *(unsigned __int16 *)(v1 + 2 * v12 + 88);
    v15 = *(_QWORD *)(v13 + 112);
    v16 = *(_DWORD **)(v15 + 40);
    if ((*(_WORD *)(v15 + 52) & 4) != 0 && v16[8] >= *(_DWORD *)(v15 + 48))
    {
      if (v16[32])
      {
        v11 = sub_1ACBEA110(v15);
        if ((_DWORD)v11)
          goto LABEL_201;
      }
    }
    else
    {
      v11 = v16[12];
      if ((_DWORD)v11)
        goto LABEL_201;
      if (v16[46] <= v16[50])
      {
        v11 = sub_1ACB9A818(v15);
        if ((_DWORD)v11)
          goto LABEL_201;
      }
      else
      {
        v11 = sub_1ACBEDEA4(v15);
        if ((_DWORD)v11)
          goto LABEL_201;
      }
    }
    if ((*(_DWORD *)(v13 + 20) & 0x80000000) != 0)
    {
      v27 = sub_1ACBF949C(v13);
      if ((_DWORD)v27)
      {
        v11 = v27;
        goto LABEL_201;
      }
    }
    if (*(_BYTE *)(v3 + 2)
      && *(_BYTE *)(v3 + 12) == 1
      && *(unsigned __int16 *)(v3 + 28) == *(unsigned __int16 *)(v3 + 24)
      && *(_DWORD *)(v13 + 4) != 1
      && *(unsigned __int16 *)(v13 + 24) == v14)
    {
      if (!*(_WORD *)(v3 + 28))
      {
        v11 = sub_1ACBEB08C(84694);
        goto LABEL_201;
      }
      v17 = *(_QWORD *)(v3 + 72);
      v452 = 0;
      v458[0] = 0;
      v11 = sub_1ACBA3368(v17, &v452, (int *)v458, 0, 0);
      if ((_DWORD)v11)
        goto LABEL_201;
      v464 = *(_QWORD *)(v3 + 40);
      v457[0] = (*(uint64_t (**)(uint64_t))(v3 + 120))(v3);
      v447 = 0;
      v445 = 0u;
      v446 = 0u;
      v443 = 0u;
      v444 = 0u;
      v441 = 0u;
      v442 = 0u;
      v18 = (unsigned __int16 *)v452;
      sub_1ACBA3288(v452, 13);
      LODWORD(v441) = 1;
      *((_QWORD *)&v441 + 1) = v3;
      *(_QWORD *)&v442 = &v464;
      v19 = *(_QWORD *)(v3 + 88);
      *((_QWORD *)&v442 + 1) = v457;
      *(_QWORD *)&v443 = v19;
      LODWORD(v446) = 2;
      v20 = sub_1ACBF9CEC((uint64_t)&v441, 0, 1, (uint64_t)v18);
      v459[0] = v20;
      if ((_DWORD)v20)
      {
        v11 = v20;
        if (!v18)
          goto LABEL_201;
      }
      else
      {
        *((_DWORD *)v18 + 5) = *(_DWORD *)(v17 + 56) - (v18[9] + v457[0]) - 2;
        if (*(_BYTE *)(v17 + 33))
        {
          sub_1ACBAF160((_DWORD *)v17, v458[0], 5, *(_DWORD *)(v13 + 4), v459);
          if (v457[0] > v18[8] && !v459[0])
          {
            v235 = v464;
            v461 = 0uLL;
            *(_QWORD *)&v462 = 0;
            (*((void (**)(unsigned __int16 *, uint64_t, __int128 *))v18 + 16))(v18, v464, &v461);
            if (v462 > WORD2(v462))
            {
              v236 = *((_QWORD *)v18 + 11);
              if (v236 <= v235 || v235 + WORD2(v462) <= v236)
                sub_1ACBAF160(*((_DWORD **)v18 + 9), bswap32(*(_DWORD *)(WORD3(v462) + v235 - 4)), 3, *((_DWORD *)v18 + 1), v459);
              else
                v459[0] = sub_1ACBEB08C(78386);
            }
          }
        }
        v374 = 0;
        v375 = *(_QWORD *)(v3 + 96) + 2 * *(unsigned __int16 *)(v3 + 24);
        v376 = *(_QWORD *)(v3 + 80)
             + ((*(unsigned __int8 *)(v375 - 1) | (*(unsigned __int8 *)(v375 - 2) << 8)) & (unint64_t)*(unsigned __int16 *)(v3 + 26));
        do
        {
          v377 = v374 + 1;
          v464 = v376 + v374 + 1;
          if (v374 > 7)
            break;
          v378 = *(char *)(v376 + v374++);
        }
        while (v378 < 0);
        v379 = 0;
        v380 = v376 + v377;
        do
        {
          v381 = &__src[v379];
          v464 = v380 + v379 + 1;
          v382 = *(char *)(v380 + v379++);
          v381[4] = v382;
        }
        while (v382 < 0 && v379 + v380 < v380 + 9);
        v11 = v459[0];
        if (!v459[0])
          v11 = sub_1ACB9E6A8(v13, *(unsigned __int16 *)(v13 + 24), __src, (int)v379 + 4, 0, *(_DWORD *)(v3 + 4));
        *(_DWORD *)(*(unsigned __int8 *)(v13 + 9) + *(_QWORD *)(v13 + 80) + 8) = bswap32(v458[0]);
        if (!v18)
          goto LABEL_201;
      }
      v383 = *((_QWORD *)v18 + 14);
      if ((*(_WORD *)(v383 + 52) & 0x20) != 0)
      {
        v384 = *(_QWORD *)(v383 + 40);
        --*(_DWORD *)(v384 + 152);
        *(_QWORD *)(v383 + 32) = *(_QWORD *)(v384 + 168);
        *(_QWORD *)(v384 + 168) = v383;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v384 + 72) + 144))(*(_QWORD *)(v384 + 72), *(_QWORD *)(v384 + 200) * (*(_DWORD *)(v383 + 48) - 1), *(_QWORD *)(v383 + 8));
      }
      else
      {
        sub_1ACBE906C(v383);
      }
      goto LABEL_201;
    }
    v21 = sub_1ACBECD04(*(_DWORD *)(*(_QWORD *)(v1 + 32) + 52));
    v22 = *(_BYTE *)(v1 + 3);
    v463 = 0;
    v461 = 0u;
    v462 = 0u;
    v460[0] = 0;
    v460[1] = 0;
    v448 = 0;
    v449 = 0;
    v447 = 0;
    v445 = 0u;
    v446 = 0u;
    v441 = 0u;
    v442 = 0u;
    v443 = 0u;
    v444 = 0u;
    v435 = v21;
    if (!v21)
    {
      v11 = 7;
      if (v2)
        goto LABEL_199;
      goto LABEL_200;
    }
    v411 = v22 & 1;
    v23 = *(unsigned __int8 *)(v13 + 12);
    v24 = *(unsigned __int16 *)(v13 + 24);
    v25 = v24 + v23;
    if ((v24 + v23) >= 2)
    {
      if (v14)
      {
        if (v25 == v14)
          v26 = v14 + v411 - 2;
        else
          v26 = v14 - 1;
      }
      else
      {
        v26 = 0;
      }
      v25 = 2 - v411;
    }
    else
    {
      v26 = 0;
    }
    v440 = *(_QWORD *)(v13 + 72);
    v464 = 0;
    v465[0] = 0;
    v465[1] = 0;
    v28 = v26 - v23 + v25;
    v431 = v3;
    v407 = v2;
    v408 = v1;
    v398 = v6;
    v401 = v14;
    if (v28 == v24)
    {
      v29 = *(unsigned __int8 *)(v13 + 9) + 8;
    }
    else
    {
      v30 = (unsigned __int8 *)(*(_QWORD *)(v13 + 96) + 2 * v28);
      v29 = (v30[1] | (*v30 << 8)) & (unint64_t)*(unsigned __int16 *)(v13 + 26);
    }
    v31 = 0;
    v32 = v25 + 1;
    v399 = (unsigned int *)(*(_QWORD *)(v13 + 80) + v29);
    v33 = bswap32(*v399);
    v34 = v25;
    v403 = v25;
    v35 = v25;
    v428 = v26;
    v436 = v13;
    v437 = v26 - 1;
    v419 = v25;
    while (1)
    {
      v36 = sub_1ACBF81EC((_DWORD *)v440, v33, &v465[v35 - 1]);
      v451 = v36;
      if ((_DWORD)v36)
      {
        v11 = v36;
        goto LABEL_85;
      }
      v37 = v465[v34 - 1];
      if ((*(_DWORD *)(v37 + 20) & 0x80000000) != 0)
      {
        v38 = sub_1ACBF949C(v465[v34 - 1]);
        v451 = v38;
        if ((_DWORD)v38)
        {
          v11 = v38;
LABEL_85:
          __memset_chk();
          v47 = 0;
          v1 = v408;
          goto LABEL_86;
        }
      }
      v31 += *(unsigned __int16 *)(v37 + 24) + 4;
      if (!v34)
        break;
      if (!*(_BYTE *)(v13 + 12))
      {
        v40 = v437 + v34;
        goto LABEL_81;
      }
      if (v437 + (_DWORD)v34 != *(unsigned __int16 *)(v13 + 28))
      {
        v40 = v428 + v34 - 1;
LABEL_81:
        v41 = (unsigned __int8 *)(*(_QWORD *)(v13 + 96) + 2 * (v40 - *(unsigned __int8 *)(v13 + 12)));
        v42 = (unsigned int *)(*(_QWORD *)(v13 + 80)
                             + ((v41[1] | (*v41 << 8)) & (unint64_t)*(unsigned __int16 *)(v13 + 26)));
        *(_QWORD *)&v459[2 * v34 + 3] = v42;
        v43 = *v42;
        v44 = (*(uint64_t (**)(uint64_t, unsigned int *))(v13 + 120))(v13, v42);
        v45 = v44;
        *(_DWORD *)&v456[4 * v34 + 12] = v44;
        if ((*(_BYTE *)(v440 + 40) & 0xC) != 0)
        {
          v46 = (_DWORD)v42 - *(_DWORD *)(v13 + 80);
          if ((signed int)(v46 + v44) <= *(_DWORD *)(v440 + 56))
          {
            memcpy((void *)(v435 + v46), v42, v44);
            v13 = v436;
            *(_QWORD *)&v459[2 * v34 + 3] = (char *)v42 + v435 - *(_QWORD *)(v436 + 80);
          }
        }
        v33 = bswap32(v43);
        sub_1ACB9AC70(v13, v40 - *(unsigned __int8 *)(v13 + 12), v45, &v451);
        v11 = v451;
        goto LABEL_71;
      }
      v39 = *(unsigned int **)(v13 + 40);
      *(_QWORD *)&v459[2 * v34 + 3] = v39;
      v33 = bswap32(*v39);
      v11 = 0;
      *(_DWORD *)&v456[4 * v34 + 12] = (*(uint64_t (**)(uint64_t))(v13 + 120))(v13);
      *(_BYTE *)(v13 + 12) = 0;
LABEL_71:
      --v35;
      --v34;
      if ((_DWORD)v11)
        goto LABEL_85;
    }
    v450 = v33;
    v50 = (v31 + 3);
    v51 = v50 & 0x7FFFFFFC;
    v52 = sub_1ACB5D828((int)(*(_DWORD *)(v440 + 52) + 10 * (v50 & 0x7FFFFFFC)));
    *(_QWORD *)&v442 = v52;
    if (!v52)
    {
      v47 = 0;
      v11 = 7;
      v1 = v408;
      v3 = v431;
      goto LABEL_185;
    }
    v53 = v52;
    v54 = 0;
    v55 = 0;
    LODWORD(v56) = 0;
    v57 = v52 + 8 * v51;
    v414 = v57 + 2 * v51;
    *((_QWORD *)&v442 + 1) = v57;
    *((_QWORD *)&v441 + 1) = v464;
    v391 = *(unsigned __int8 *)(v464 + 8);
    v404 = 4 * *(unsigned __int8 *)(v464 + 8);
    v438 = *(unsigned __int8 *)(v464 + 2);
    v409 = v52 + 8;
    v392 = v52 + 16;
    v394 = v52 + 40 * ((v50 >> 2) & 0x1FFFFFFF);
    v421 = v57;
    while (2)
    {
      v58 = v465[v54 - 1];
      v59 = *(unsigned __int8 **)(v58 + 80);
      if (*v59 != **(unsigned __int8 **)(v464 + 80))
      {
        v187 = 85115;
        goto LABEL_275;
      }
      v432 = v54;
      v60 = *(unsigned __int16 *)(v58 + 24);
      v61 = *(unsigned __int16 *)(v58 + 26);
      v62 = *(unsigned __int16 *)(v58 + 18);
      v63 = (unint64_t)&v59[v62];
      bzero((void *)(v57 + 2 * (int)v56), 2 * (*(unsigned __int8 *)(v58 + 12) + v60));
      LODWORD(v64) = *(unsigned __int8 *)(v58 + 12);
      v65 = vdupq_n_s64((unint64_t)v59);
      if (!*(_BYTE *)(v58 + 12))
      {
        v68.i64[0] = 0x100000001;
        v68.i64[1] = 0x100000001;
        v57 = v421;
        goto LABEL_128;
      }
      v66 = *(unsigned __int16 *)(v58 + 28);
      if (v60 < v66)
      {
        v187 = 85139;
        goto LABEL_275;
      }
      v67 = (int)v56;
      if (*(_WORD *)(v58 + 28))
      {
        v68.i64[0] = 0x100000001;
        v68.i64[1] = 0x100000001;
        v57 = v421;
        if (v66 < 0x10
          || ((v69 = (int64x2_t *)(v53 + 8 * (int)v56),
               v70 = (v66 - 1),
               v69 < (int64x2_t *)&v59[2 * v70 + 2 + v62])
            ? (v71 = v63 >= v409 + 8 * ((int)v56 + v70))
            : (v71 = 1),
              !v71))
        {
          LODWORD(v72) = 0;
          goto LABEL_115;
        }
        v72 = (unsigned __int16)v66 & 0xFFF0;
        v67 = v72 + (int)v56;
        v63 += 2 * v72;
        v73 = (int8x16_t)vdupq_n_s64(v61);
        v74 = v72;
        do
        {
          v75 = (const char *)&v59[v62];
          v467 = vld2q_s8(v75);
          v76 = vmovl_u8(*(uint8x8_t *)v467.val[0].i8);
          v77 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v76.i8);
          v78 = (int8x16_t)vmovl_high_u16(v76);
          v79 = vmovl_high_u8((uint8x16_t)v467.val[0]);
          v80 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v79.i8);
          v81 = (int8x16_t)vmovl_high_u16(v79);
          v82 = vmovl_high_u8((uint8x16_t)v467.val[1]);
          v83 = (int8x16_t)vmovl_high_u16(v82);
          v84 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.i8);
          v467.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v467.val[1].i8);
          v467.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v467.val[0]);
          v467.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v467.val[0].i8);
          v85 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v467.val[0], v467.val[0], 8uLL));
          v86.i64[0] = v85.u32[0];
          v86.i64[1] = v85.u32[1];
          v87 = v86;
          *(int8x8_t *)v467.val[0].i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v77.i8, 8uLL), *(int8x8_t *)v467.val[0].i8);
          v86.i64[0] = v467.val[0].u32[0];
          v86.i64[1] = v467.val[0].u32[1];
          v467.val[0] = v86;
          *(int8x8_t *)v77.i8 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v467.val[1], v467.val[1], 8uLL));
          v86.i64[0] = v77.u32[0];
          v86.i64[1] = v77.u32[1];
          v88 = v86;
          v89 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
          v86.i64[0] = v89.u32[0];
          v86.i64[1] = v89.u32[1];
          v90 = v86;
          *(int8x8_t *)v467.val[1].i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v78.i8, 8uLL), *(int8x8_t *)v467.val[1].i8);
          v86.i64[0] = v467.val[1].u32[0];
          v86.i64[1] = v467.val[1].u32[1];
          v467.val[1] = v86;
          *(int8x8_t *)v78.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v80.i8, 8uLL), *(int8x8_t *)v84.i8);
          v86.i64[0] = v78.u32[0];
          v86.i64[1] = v78.u32[1];
          v91 = v86;
          *(int8x8_t *)v80.i8 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL));
          v86.i64[0] = v80.u32[0];
          v86.i64[1] = v80.u32[1];
          v92 = v86;
          *(int8x8_t *)v81.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v81.i8, 8uLL), *(int8x8_t *)v83.i8);
          v86.i64[0] = v81.u32[0];
          v86.i64[1] = v81.u32[1];
          v69[6] = vaddq_s64(v65, (int64x2_t)vandq_s8(v86, v73));
          v69[7] = vaddq_s64(v65, (int64x2_t)vandq_s8(v92, v73));
          v69[4] = vaddq_s64(v65, (int64x2_t)vandq_s8(v91, v73));
          v69[5] = vaddq_s64(v65, (int64x2_t)vandq_s8(v90, v73));
          v69[2] = vaddq_s64(v65, (int64x2_t)vandq_s8(v467.val[1], v73));
          v69[3] = vaddq_s64(v65, (int64x2_t)vandq_s8(v88, v73));
          *v69 = vaddq_s64(v65, (int64x2_t)vandq_s8(v467.val[0], v73));
          v69[1] = vaddq_s64(v65, (int64x2_t)vandq_s8(v87, v73));
          v69 += 8;
          v62 += 32;
          v74 -= 16;
        }
        while (v74);
        if (v72 != v66)
        {
LABEL_115:
          v93 = v66 - v72;
          do
          {
            *(_QWORD *)(v53 + 8 * v67) = &v59[(*(unsigned __int8 *)(v63 + 1) | (*(unsigned __int8 *)v63 << 8)) & v61];
            v63 += 2;
            ++v67;
            --v93;
          }
          while (v93);
        }
        v67 = (int)v67;
      }
      else
      {
        v68.i64[0] = 0x100000001;
        v68.i64[1] = 0x100000001;
        v57 = v421;
      }
      if (v64 <= 1)
        v64 = 1;
      else
        v64 = v64;
      if (v64 < 8 || (v94 = 8 * v67, (unint64_t)(8 * v67 + v53 - v58 - 40) < 0x20))
      {
        v95 = 0;
        goto LABEL_125;
      }
      v95 = v64 & 0xFC;
      v67 += v95;
      v128 = (__int128 *)(v58 + 56);
      v129 = (_OWORD *)(v392 + v94);
      v130 = v95;
      do
      {
        v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      if (v95 != v64)
      {
LABEL_125:
        v96 = v64 - v95;
        v97 = (uint64_t *)(v58 + 8 * v95 + 40);
        do
        {
          v98 = *v97++;
          *(_QWORD *)(v53 + 8 * v67++) = v98;
          --v96;
        }
        while (v96);
      }
      LODWORD(v441) = v67;
      LODWORD(v56) = v67;
LABEL_128:
      v99 = *(unsigned __int16 *)(v58 + 18);
      v100 = 2 * *(unsigned __int16 *)(v58 + 24);
      v101 = &v59[v99 + v100];
      if (v63 >= (unint64_t)v101)
      {
        v120 = v432;
        goto LABEL_161;
      }
      v102 = (int)v56;
      v103 = (unint64_t)&v59[v100 + v99];
      v104 = v63 + 2;
      if (v103 <= v63 + 2)
        v105 = v63 + 2;
      else
        v105 = v103;
      v106 = v105 + ~v63;
      if (v106 < 0xE)
        goto LABEL_157;
      v107 = v53 + 8 * (int)v56;
      if (v103 <= v104)
        v103 = v63 + 2;
      v108 = v103 + ~v63;
      v109 = v409 + 8 * ((int)v56 + (v108 >> 1));
      v110 = v104 + (v108 & 0xFFFFFFFFFFFFFFFELL);
      v111 = v107 >= v110 || v63 >= v109;
      v112 = !v111;
      v113 = (unint64_t)&v441 >= v110 || v63 >= (unint64_t)&v441 + 4;
      v114 = !v113;
      v115 = (unint64_t)&v441 >= v109 || v107 >= (unint64_t)&v441 + 4;
      if (!v115 || v112 || v114)
      {
LABEL_157:
        v56 = (int)v56;
        v121 = (unsigned __int8 *)v63;
        goto LABEL_158;
      }
      v116 = (v106 >> 1) + 1;
      v117 = (int8x16_t)vdupq_n_s64(v61);
      if (v106 >= 0x1E)
      {
        v132 = vdupq_n_s64((int)v56);
        v133 = (int32x4_t)vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD40);
        v118 = v116 & 0xFFFFFFFFFFFFFFF0;
        v134 = (int32x4_t)vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD50);
        v135 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD60);
        v136 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD70);
        v137 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD80);
        v138 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDD90);
        v139 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDDA0);
        v140 = vaddq_s64(v132, (int64x2_t)xmmword_1ACCBDC40);
        v119 = (v116 & 0xFFFFFFFFFFFFFFF0) + (int)v56;
        v141 = (int64x2_t *)(v53 + 8 * (int)v56);
        v142 = v116 & 0xFFFFFFFFFFFFFFF0;
        v143 = (const char *)v63;
        do
        {
          v468 = vld2q_s8(v143);
          v143 += 32;
          v144 = vmovl_u8(*(uint8x8_t *)v468.val[0].i8);
          v145 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v144.i8);
          v146 = (int8x16_t)vmovl_high_u16(v144);
          v147 = vmovl_high_u8((uint8x16_t)v468.val[0]);
          v148 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          v149 = (int8x16_t)vmovl_high_u16(v147);
          v150 = vmovl_high_u8((uint8x16_t)v468.val[1]);
          v151 = (int8x16_t)vmovl_high_u16(v150);
          v152 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v150.i8);
          v468.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v468.val[1].i8);
          v468.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v468.val[0]);
          v468.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v468.val[0].i8);
          v153 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v468.val[0], v468.val[0], 8uLL));
          v154.i64[0] = v153.u32[0];
          v154.i64[1] = v153.u32[1];
          v155 = v154;
          *(int8x8_t *)v468.val[0].i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v145.i8, 8uLL), *(int8x8_t *)v468.val[0].i8);
          v154.i64[0] = v468.val[0].u32[0];
          v154.i64[1] = v468.val[0].u32[1];
          v468.val[0] = v154;
          *(int8x8_t *)v145.i8 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v468.val[1], v468.val[1], 8uLL));
          v154.i64[0] = v145.u32[0];
          v154.i64[1] = v145.u32[1];
          v156 = v154;
          v157 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
          v154.i64[0] = v157.u32[0];
          v154.i64[1] = v157.u32[1];
          v158 = v154;
          *(int8x8_t *)v468.val[1].i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v146.i8, 8uLL), *(int8x8_t *)v468.val[1].i8);
          v154.i64[0] = v468.val[1].u32[0];
          v154.i64[1] = v468.val[1].u32[1];
          v468.val[1] = v154;
          *(int8x8_t *)v146.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v148.i8, 8uLL), *(int8x8_t *)v152.i8);
          v154.i64[0] = v146.u32[0];
          v154.i64[1] = v146.u32[1];
          v159 = v154;
          *(int8x8_t *)v148.i8 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
          v154.i64[0] = v148.u32[0];
          v154.i64[1] = v148.u32[1];
          v160 = v154;
          *(int8x8_t *)v149.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v149.i8, 8uLL), *(int8x8_t *)v151.i8);
          v154.i64[0] = v149.u32[0];
          v154.i64[1] = v149.u32[1];
          v141[6] = vaddq_s64(v65, (int64x2_t)vandq_s8(v154, v117));
          v141[7] = vaddq_s64(v65, (int64x2_t)vandq_s8(v160, v117));
          v141[4] = vaddq_s64(v65, (int64x2_t)vandq_s8(v159, v117));
          v141[5] = vaddq_s64(v65, (int64x2_t)vandq_s8(v158, v117));
          v141[2] = vaddq_s64(v65, (int64x2_t)vandq_s8(v468.val[1], v117));
          v141[3] = vaddq_s64(v65, (int64x2_t)vandq_s8(v156, v117));
          *v141 = vaddq_s64(v65, (int64x2_t)vandq_s8(v468.val[0], v117));
          v141[1] = vaddq_s64(v65, (int64x2_t)vandq_s8(v155, v117));
          v141 += 8;
          v161 = vaddq_s32(vuzp1q_s32(v134, v133), v68);
          LODWORD(v441) = v161.i32[3];
          v468.val[1] = (int8x16_t)vdupq_n_s64(0x10uLL);
          v138 = vaddq_s64(v138, (int64x2_t)v468.val[1]);
          v139 = vaddq_s64(v139, (int64x2_t)v468.val[1]);
          v140 = vaddq_s64(v140, (int64x2_t)v468.val[1]);
          v137 = vaddq_s64(v137, (int64x2_t)v468.val[1]);
          v136 = vaddq_s64(v136, (int64x2_t)v468.val[1]);
          v135 = vaddq_s64(v135, (int64x2_t)v468.val[1]);
          v134 = (int32x4_t)vaddq_s64((int64x2_t)v134, (int64x2_t)v468.val[1]);
          v133 = (int32x4_t)vaddq_s64((int64x2_t)v133, (int64x2_t)v468.val[1]);
          v142 -= 16;
        }
        while (v142);
        if (v116 == v118)
        {
          LODWORD(v56) = v161.i32[3];
          v120 = v432;
          goto LABEL_161;
        }
        if ((v116 & 8) != 0)
          goto LABEL_178;
        v121 = (unsigned __int8 *)(v63 + 2 * v118);
        v56 = v118 + (int)v56;
LABEL_158:
        v120 = v432;
        goto LABEL_159;
      }
      v118 = 0;
      v119 = (int)v56;
LABEL_178:
      v56 = (v116 & 0xFFFFFFFFFFFFFFF8) + (int)v56;
      v121 = (unsigned __int8 *)(v63 + 2 * (v116 & 0xFFFFFFFFFFFFFFF8));
      v162 = vdupq_n_s64(v119);
      v163 = (int32x4_t)vaddq_s64(v162, (int64x2_t)xmmword_1ACCBDD80);
      v164 = (int32x4_t)vaddq_s64(v162, (int64x2_t)xmmword_1ACCBDD90);
      v165 = vaddq_s64(v162, (int64x2_t)xmmword_1ACCBDDA0);
      v166 = vaddq_s64(v162, (int64x2_t)xmmword_1ACCBDC40);
      v167 = (const char *)(v63 + 2 * v118);
      v168 = v118 - (v116 & 0xFFFFFFFFFFFFFFF8);
      v169 = (int64x2_t *)(v53 + 8 * (v118 + v102));
      do
      {
        v466 = (int8x16_t)vld2_s8(v167);
        v167 += 16;
        v170 = vmovl_u8(*(uint8x8_t *)v466.i8);
        v171 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v170.i8);
        v172 = (int8x16_t)vmovl_high_u16(v170);
        v466 = (int8x16_t)vmovl_u8((uint8x8_t)v466.u64[1]);
        *(uint32x4_t *)((char *)&v466 + 8) = vmovl_high_u16((uint16x8_t)v466);
        v466 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v466.i8);
        v173 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v466, v466, 8uLL));
        v174.i64[0] = v173.u32[0];
        v174.i64[1] = v173.u32[1];
        v175 = v174;
        *(int8x8_t *)v466.i8 = vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v171.i8, 8uLL), *(int8x8_t *)v466.i8);
        v174.i64[0] = v466.u32[0];
        v174.i64[1] = v466.u32[1];
        v466 = v174;
        *(int8x8_t *)v171.i8 = vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL), 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)((char *)&v466 + 8), *(int8x16_t *)((char *)&v466 + 8), 8uLL));
        v174.i64[0] = v171.u32[0];
        v174.i64[1] = v171.u32[1];
        v176 = v174;
        v466.u64[1] = (unint64_t)vorr_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v172.i8, 8uLL), (int8x8_t)v466.u64[1]);
        v174.i64[0] = v466.u32[2];
        v174.i64[1] = v466.u32[3];
        v169[2] = vaddq_s64(v65, (int64x2_t)vandq_s8(v174, v117));
        v169[3] = vaddq_s64(v65, (int64x2_t)vandq_s8(v176, v117));
        *v169 = vaddq_s64(v65, (int64x2_t)vandq_s8(v466, v117));
        v169[1] = vaddq_s64(v65, (int64x2_t)vandq_s8(v175, v117));
        v169 += 4;
        v177 = vaddq_s32(vuzp1q_s32(v164, v163), v68);
        LODWORD(v441) = v177.i32[3];
        v164 = (int32x4_t)vaddq_s64((int64x2_t)v164, v406);
        v165 = vaddq_s64(v165, v406);
        v166 = vaddq_s64(v166, v406);
        v163 = (int32x4_t)vaddq_s64((int64x2_t)v163, v406);
        v168 += 8;
      }
      while (v168);
      v120 = v432;
      if (v116 == (v116 & 0xFFFFFFFFFFFFFFF8))
      {
        LODWORD(v56) = v177.i32[3];
        goto LABEL_161;
      }
LABEL_159:
      v122 = (_QWORD *)(v53 + 8 * v56);
      do
      {
        *v122++ = &v59[(v121[1] | (*v121 << 8)) & v61];
        LODWORD(v56) = v56 + 1;
        LODWORD(v441) = v56;
        v121 += 2;
      }
      while (v121 < v101);
LABEL_161:
      v458[v120] = v56;
      if (v120 < v419 && !(_DWORD)v438)
      {
        v123 = *(_DWORD *)&v457[2 * v120];
        *(_WORD *)(v57 + 2 * (int)v56) = v123;
        v124 = (char *)(v414 + v55);
        v55 += v123;
        memcpy(v124, (const void *)v460[v120], v123);
        v57 = v421;
        *(_QWORD *)(v53 + 8 * (int)v56) = &v124[v404];
        v125 = *(_WORD *)(v421 + 2 * (int)v56) - 4 * v391;
        *(_WORD *)(v421 + 2 * (int)v56) = v125;
        if (*(_BYTE *)(v58 + 8))
        {
          if (v125 <= 3u)
          {
            v126 = (_BYTE *)(v394 + v55);
            do
            {
              *v126++ = 0;
              v127 = (unsigned __int16)++*(_WORD *)(v421 + 2 * (int)v56);
              ++v55;
            }
            while (v127 < 4);
          }
        }
        else
        {
          *(_DWORD *)&v124[v404] = *(_DWORD *)(*(_QWORD *)(v58 + 80) + 8);
        }
        LODWORD(v56) = v56 + 1;
        LODWORD(v441) = v56;
      }
      v54 = v120 + 1;
      if (v54 != v32)
        continue;
      break;
    }
    v188 = 0;
    v189 = 0;
    v190 = v404 + *(_DWORD *)(v440 + 56) - 12;
    v410 = v190;
    while (2)
    {
      v191 = v465[v188 - 1];
      *((_QWORD *)&v443 + v189) = *(_QWORD *)(v191 + 88);
      v192 = v458[v188];
      *((_DWORD *)&v446 + v189) = v192;
      if (v189)
      {
        if (v192 == *((_DWORD *)&v446 + v189 - 1))
          LODWORD(v193) = v189 - 1;
        else
          LODWORD(v193) = v189;
        v194 = v436;
        if (!(_DWORD)v438)
        {
LABEL_211:
          v193 = (int)v193 + 1;
          *((_QWORD *)&v443 + v193) = *(_QWORD *)(v194 + 88);
          *((_DWORD *)&v446 + v193) = v192 + 1;
        }
      }
      else
      {
        LODWORD(v193) = 0;
        v194 = v436;
        if (!(_DWORD)v438)
          goto LABEL_211;
      }
      v195 = v190 - *(_DWORD *)(v191 + 20);
      *(_DWORD *)&v457[2 * v188] = v195;
      if (*(_BYTE *)(v191 + 12))
      {
        v196 = 0;
        do
        {
          v195 += (*(uint64_t (**)(uint64_t, _QWORD))(v191 + 120))(v191, *(_QWORD *)(v191 + 8 * v196 + 40)) + 2;
          *(_DWORD *)&v457[2 * v188] = v195;
          ++v196;
        }
        while (v196 < *(unsigned __int8 *)(v191 + 12));
      }
      v459[v188++] = v192;
      v189 = v193 + 1;
      v190 = v410;
      if (v188 != v32)
        continue;
      break;
    }
    v197 = 0;
    v422 = v441;
    v415 = (int)v441;
    v433 = *((_QWORD *)&v442 + 1);
    v395 = *((_QWORD *)&v442 + 1) + 2;
    v198 = v32;
    v3 = v431;
    while (2)
    {
      v199 = *(_DWORD *)&v457[2 * v197];
      if (v199 <= v410)
      {
        v203 = v459[v197];
        v200 = v197 + 1;
        goto LABEL_235;
      }
      v200 = v197 + 1;
      while (2)
      {
        if (v200 >= (int)v198)
        {
          if (v197 < 4)
          {
            *(_DWORD *)&v457[2 * v200] = 0;
            v459[v200] = v422;
            v198 = (v197 + 2);
            goto LABEL_226;
          }
          *(_DWORD *)&v457[2 * v197] = v199;
          v187 = 85240;
LABEL_275:
          v11 = sub_1ACBEB08C(v187);
          v47 = 0;
          v1 = v408;
LABEL_86:
          v3 = v431;
          goto LABEL_87;
        }
LABEL_226:
        v202 = (int)v459[v197];
        v203 = v202 - 1;
        v204 = *(unsigned __int16 *)(v433 + 2 * (v202 - 1));
        if (!*(_WORD *)(v433 + 2 * (v202 - 1)))
        {
          v205 = v198;
          v204 = sub_1ACBF9F38((uint64_t)&v441, (int)v202 - 1);
          v198 = v205;
        }
        v206 = v204 + 2;
        v201 = v204 + 2;
        if (!(_DWORD)v438)
        {
          if ((int)v202 >= v422)
          {
            v201 = 0;
          }
          else
          {
            v207 = *(unsigned __int16 *)(v433 + 2 * v202);
            if (!*(_WORD *)(v433 + 2 * v202))
            {
              v208 = v202;
              v209 = v198;
              v207 = sub_1ACBF9F38((uint64_t)&v441, v208);
              v198 = v209;
            }
            v201 = v207 + 2;
          }
        }
        v199 -= v206;
        *(_DWORD *)&v457[2 * v200] += v201;
        v459[v197] = v203;
        if (v199 > v410)
          continue;
        break;
      }
      v3 = v431;
LABEL_235:
      *(_DWORD *)&v457[2 * v197] = v199;
      if (v203 >= v422)
      {
LABEL_247:
        v198 = v200;
      }
      else
      {
        v210 = v203;
        v211 = (_WORD *)(v395 + 2 * v203);
        v212 = v198;
        while (1)
        {
          v214 = (unsigned __int16)*(v211 - 1);
          if (!*(v211 - 1))
          {
            v214 = sub_1ACBF9F38((uint64_t)&v441, v210);
            v198 = v212;
          }
          v213 = v214 + 2;
          v199 += v214 + 2;
          if (v199 > v410)
            break;
          v215 = 4 * v197;
          *(_DWORD *)&v457[v215 / 2] = v199;
          v216 = v210 + 1;
          v459[v215 / 4] = v210 + 1;
          if (!(_DWORD)v438)
          {
            if (v216 >= v415)
            {
              v213 = 0;
            }
            else
            {
              v217 = (unsigned __int16)*v211;
              if (!*v211)
              {
                v217 = sub_1ACBF9F38((uint64_t)&v441, (int)v210 + 1);
                v198 = v212;
              }
              v213 = v217 + 2;
            }
          }
          *(_DWORD *)&v457[2 * v200] -= v213;
          ++v211;
          ++v210;
          v250 = v415 == v216;
          v3 = v431;
          if (v250)
            goto LABEL_247;
        }
        if (v197)
          v218 = v459[(v197 - 1)];
        else
          v218 = 0;
        if (v218 >= (int)v210)
        {
          v11 = sub_1ACBEB08C(85273);
          v47 = 0;
          v1 = v408;
          goto LABEL_87;
        }
      }
      v197 = v200;
      if (v200 < (int)v198)
        continue;
      break;
    }
    v219 = v433 - 2 * v438;
    v220 = v433 - 2;
    v416 = (v198 - 1);
    v221 = v416;
    v222 = v428;
    v223 = v198;
LABEL_256:
    if ((int)v221 >= 1)
    {
      v225 = *(_DWORD *)&v457[2 * v221];
      v226 = v221 - 1;
      v227 = 4 * (v221 - 1);
      v228 = *(_DWORD *)&v457[v227 / 2];
      v229 = (int)v459[v227 / 4];
      if (!*(_WORD *)(v433 + 2 * ((int)v229 - (int)v438)))
      {
        sub_1ACBF9F38((uint64_t)&v441, v229 - v438);
        v219 = v433 - 2 * v438;
        LODWORD(v198) = v223;
      }
      v423 = v221;
      if (v221 == v416)
        v230 = 0;
      else
        v230 = -2;
      while (1)
      {
        v232 = v229 - 1;
        v233 = *(unsigned __int16 *)(v220 + 2 * v229);
        if (*(_WORD *)(v220 + 2 * v229))
        {
          v234 = *(unsigned __int16 *)(v219 + 2 * v229);
          if (!v225)
            goto LABEL_262;
        }
        else
        {
          v233 = sub_1ACBF9F38((uint64_t)&v441, (int)v229 - 1);
          v219 = v433 - 2 * v438;
          LODWORD(v198) = v223;
          v234 = *(unsigned __int16 *)(v219 + 2 * v229);
          if (!v225)
          {
LABEL_262:
            v231 = v234 + 2;
            goto LABEL_263;
          }
        }
        if (v411 || (v231 = v225 + v234 + 2, v231 > v228 + v230 - v233))
        {
          v231 = v225;
LABEL_271:
          v222 = v428;
          *(_DWORD *)&v457[2 * v423] = v231;
          *(_DWORD *)&v457[2 * v226] = v228;
          if ((int)v423 >= 2)
            v224 = v459[(v423 - 2)];
          else
            v224 = 0;
          v221 = v226;
          if ((int)v229 <= v224)
          {
            v11 = sub_1ACBEB08C(85317);
            v47 = 0;
            v1 = v408;
            v3 = v431;
            goto LABEL_87;
          }
          goto LABEL_256;
        }
LABEL_263:
        --v229;
        v228 = v228 - v233 - 2;
        v459[v226] = v232;
        v225 = v231;
        if (v229 + 1 <= 1)
          goto LABEL_271;
      }
    }
    v424 = **(unsigned __int8 **)(v464 + 80);
    if ((int)v198 < 1)
    {
      v251 = 0;
      goto LABEL_317;
    }
    v237 = 0;
    v434 = 0;
    v238 = (v401 - v222);
    v239 = v441;
    v240 = v198;
    v1 = v408;
    while (1)
    {
      v452 = 0;
      if (v237 <= v419)
      {
        v244 = v237;
        v245 = v465[v237 - 1];
        *(_QWORD *)((char *)&v461 + v244 * 8) = v245;
        v465[v244 - 1] = 0;
        v246 = *(_QWORD *)(v245 + 112);
        v247 = *(_DWORD **)(v246 + 40);
        if ((*(_BYTE *)(v246 + 52) & 4) != 0 && v247[8] >= *(_DWORD *)(v246 + 48))
        {
          if (v247[32])
          {
            v248 = sub_1ACBEA110(v246);
            goto LABEL_303;
          }
          v11 = 0;
        }
        else
        {
          v11 = v247[12];
          if (!(_DWORD)v11)
          {
            if (v247[46] <= v247[50])
              v248 = sub_1ACB9A818(v246);
            else
              v248 = sub_1ACBEDEA4(v246);
LABEL_303:
            v11 = v248;
          }
        }
        v451 = v11;
        ++v434;
        if (v238 == v237)
          v249 = 2;
        else
          v249 = 1;
        v250 = v249 != *(_DWORD *)(*(_QWORD *)(v245 + 112) + 56) && (_DWORD)v11 == 0;
        if (v250)
        {
          v11 = sub_1ACBEB08C(85350);
          goto LABEL_497;
        }
        if ((_DWORD)v11)
          goto LABEL_497;
        goto LABEL_286;
      }
      v241 = v411 ? 1 : v450;
      v242 = sub_1ACBA3368(v440, &v452, (int *)&v450, v241, 0);
      v451 = v242;
      if ((_DWORD)v242)
        break;
      v243 = (_DWORD *)v452;
      sub_1ACBA3288(v452, v424);
      *((_QWORD *)&v461 + v237) = v243;
      ++v434;
      v458[v237] = v239;
      if (*(_BYTE *)(v440 + 33))
      {
        sub_1ACBAF160((_DWORD *)v440, v243[1], 5, *(_DWORD *)(v436 + 4), &v451);
        v11 = v451;
        if (v451)
          goto LABEL_497;
      }
LABEL_286:
      ++v237;
      v222 = v428;
      if (v240 == v237)
      {
        v251 = v434;
        if (v434 < 1)
        {
LABEL_317:
          v3 = v431;
          v412 = 0;
          v390 = 0;
          LODWORD(v252) = v251 - 1;
        }
        else
        {
          v252 = (v434 - 1);
          v3 = v431;
          if (v434 == 1)
          {
            v347 = 0;
            goto LABEL_462;
          }
          v347 = v434 & 0xFFFFFFFE;
          v351 = v347;
          v352 = v456;
          v353 = (char *)&v461 + 8;
          do
          {
            v354 = *(_DWORD *)(*(_QWORD *)v353 + 4);
            *(v352 - 1) = *(_DWORD *)(*((_QWORD *)v353 - 1) + 4);
            *v352 = v354;
            v353 += 16;
            v352 += 2;
            v351 -= 2;
          }
          while (v351);
          if (v347 != v434)
          {
LABEL_462:
            v355 = v434 - v347;
            v356 = &__src[4 * v347 + 13];
            v357 = (uint64_t *)&v461 + v347;
            do
            {
              v358 = *v357++;
              *(_DWORD *)v356 = *(_DWORD *)(v358 + 4);
              v356 += 4;
              --v355;
            }
            while (v355);
          }
          if (v434 < 2)
          {
            v412 = 0;
            v390 = 1;
          }
          else
          {
            v359 = 0;
            v360 = 1;
            do
            {
              v361 = v359 + 1;
              if (v359 + 1 >= (unint64_t)v434)
              {
                v363 = v359;
              }
              else
              {
                v362 = v360;
                v363 = v359;
                do
                {
                  if (*(_DWORD *)(*((_QWORD *)&v461 + v362) + 4) < *(_DWORD *)(*((_QWORD *)&v461 + v363) + 4))
                    v363 = v362;
                  ++v362;
                }
                while (v434 != v362);
              }
              if (v359 != v363)
              {
                v364 = *((_QWORD *)&v461 + v359);
                v365 = *(unsigned int *)(v364 + 4);
                v366 = *((_QWORD *)&v461 + v363);
                v367 = *(unsigned int *)(v366 + 4);
                v368 = dword_1EECAC650 / *(_DWORD *)(v440 + 52) + 1;
                v369 = *(_QWORD *)(v364 + 112);
                v370 = *(_WORD *)(v369 + 52);
                v371 = *(_WORD *)(*(_QWORD *)(v366 + 112) + 52);
                *(_WORD *)(v369 + 52) = v371;
                sub_1ACBEFEF0(v369, v368);
                v372 = *(_QWORD *)(v366 + 112);
                *(_WORD *)(v372 + 52) = v370;
                sub_1ACBEFEF0(v372, v365);
                v373 = *(_QWORD *)(v364 + 112);
                *(_WORD *)(v373 + 52) = v371;
                sub_1ACBEFEF0(v373, v367);
                *(_DWORD *)(v364 + 4) = v367;
                v252 = (v434 - 1);
                *(_DWORD *)(v366 + 4) = v365;
                v222 = v428;
              }
              ++v360;
              v359 = v361;
            }
            while (v361 != v252);
            v412 = 1;
            v390 = 1;
            v3 = v431;
            v251 = v434;
          }
        }
        v417 = v252;
        v253 = *((_QWORD *)&v461 + (int)v252);
        *v399 = bswap32(*(_DWORD *)(v253 + 4));
        if ((v424 & 8) == 0 && (_DWORD)v32 != v251)
        {
          if (v251 <= (int)v32)
            v254 = &v464;
          else
            v254 = (uint64_t *)&v461;
          *(_DWORD *)(*(_QWORD *)(v253 + 80) + 8) = *(_DWORD *)(*(_QWORD *)(v254[v419] + 80) + 8);
        }
        v434 = v251;
        if (*(_BYTE *)(v440 + 33))
        {
          v255 = v441;
          if ((int)v441 >= 1)
          {
            v256 = 0;
            v257 = 0;
            v258 = 0;
            v259 = v461;
            LODWORD(v260) = *(unsigned __int16 *)(v461 + 24) + *(unsigned __int8 *)(v461 + 12);
            v261 = v461;
            do
            {
              if (v256 == v260)
              {
                v262 = v257;
                v263 = &v465[v262];
                v264 = (char *)&v461 + v262 * 8 + 8;
                v265 = v257 + 1;
                do
                {
                  if (v265 >= v434)
                    v266 = v263;
                  else
                    v266 = v264;
                  v261 = *v266;
                  v260 = (_DWORD)v260
                       + ((_DWORD)v438 == 0)
                       + *(unsigned __int16 *)(*v266 + 24)
                       + *(unsigned __int8 *)(*v266 + 12);
                  ++v257;
                  ++v263;
                  v264 += 8;
                  ++v265;
                }
                while (v256 == v260);
              }
              v267 = *(unsigned int **)(v442 + 8 * v256);
              if (v256 != v459[(int)v258]
                || (v259 = *((_QWORD *)&v461 + (int)v258 + 1), v258 = (int)v258 + 1, (_DWORD)v438))
              {
                if (v257 >= v434
                  || *(_DWORD *)(v259 + 4) != *(_DWORD *)&__src[4 * v257 + 13]
                  || (unint64_t)v267 < *(_QWORD *)(v261 + 80)
                  || (unint64_t)v267 >= *(_QWORD *)(v261 + 88))
                {
                  if (!v391)
                  {
                    v425 = *(unsigned int **)(v442 + 8 * v256);
                    v268 = v259;
                    sub_1ACBAF160((_DWORD *)v440, bswap32(*v267), 5, *(_DWORD *)(v259 + 4), &v451);
                    v267 = v425;
                    v259 = v268;
                  }
                  v426 = v258;
                  v269 = *(unsigned __int16 *)(*((_QWORD *)&v442 + 1) + 2 * v256);
                  if (!*(_WORD *)(*((_QWORD *)&v442 + 1) + 2 * v256))
                  {
                    v270 = v267;
                    v271 = v259;
                    v269 = sub_1ACBF9F38((uint64_t)&v441, v256);
                    v267 = v270;
                    v259 = v271;
                  }
                  v11 = v451;
                  if (v269 > *(unsigned __int16 *)(v259 + 16))
                  {
                    if (!v451)
                    {
                      v453 = 0;
                      v452 = 0;
                      v454 = 0;
                      v272 = v267;
                      v273 = v259;
                      (*(void (**)(uint64_t, unsigned int *, uint64_t *))(v259 + 128))(v259, v267, &v452);
                      v259 = v273;
                      if (v454 > WORD2(v454))
                      {
                        v274 = *(_QWORD *)(v261 + 88);
                        if (v274 <= (unint64_t)v272 || (unint64_t)v272 + WORD2(v454) <= v274)
                        {
                          sub_1ACBAF160(*(_DWORD **)(v273 + 72), bswap32(*(unsigned int *)((char *)v272 + HIWORD(v454) - 4)), 3, *(_DWORD *)(v273 + 4), &v451);
                          v259 = v273;
                        }
                        else
                        {
                          v275 = sub_1ACBEB08C(78386);
                          v259 = v273;
                          v451 = v275;
                        }
                      }
                    }
                    v11 = v451;
                  }
                  if ((_DWORD)v11)
                  {
LABEL_458:
                    v1 = v408;
                    goto LABEL_498;
                  }
                  v255 = v441;
                  v258 = v426;
                  v222 = v428;
                }
              }
              ++v256;
            }
            while (v256 < v255);
          }
        }
        if (v412)
        {
          v276 = 0;
          *(_QWORD *)v429 = *((_QWORD *)&v442 + 1);
          v277 = v442;
          v278 = v417;
          v279 = v446;
          v280 = v459;
          v281 = &v461;
          v282 = v447;
          v396 = v442;
          while (1)
          {
            v283 = v222;
            v285 = *v280++;
            v284 = v285;
            v286 = *(char **)(v277 + 8 * v285);
            v287 = *(_QWORD *)v281;
            v288 = *(unsigned __int16 *)(*(_QWORD *)v429 + 2 * v285);
            v289 = v288 + v404;
            v290 = (_DWORD *)(v435 + v276);
            if (*(_BYTE *)(*(_QWORD *)v281 + 8))
            {
              if ((_DWORD)v438)
              {
                v453 = 0;
                v452 = 0;
                v454 = 0;
                v291 = *(_QWORD *)(v277 + 8 * --v284);
                v292 = v287;
                v293 = v435 + v276;
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(v287 + 128))(v287, v291, &v452);
                v286 = (char *)v293;
                v294 = (int8x8_t *)(v293 + 4);
                v295 = v452;
                if ((unint64_t)v452 > 0x7F)
                {
                  if ((unint64_t)v452 >> 14)
                  {
                    v296 = sub_1ACBF8034(v294, v452);
                    v286 = (char *)(v435 + v276);
                  }
                  else
                  {
                    *(_BYTE *)(v293 + 4) = (v452 >> 7) | 0x80;
                    *(_BYTE *)(v293 + 5) = v295 & 0x7F;
                    v296 = 2;
                  }
                }
                else
                {
                  v294->i8[0] = v452;
                  v296 = 1;
                }
                v287 = v292;
                v289 = v296 + 4;
                v290 = 0;
                v277 = v396;
              }
              else
              {
                v286 -= 4;
                if (v288 == 4)
                {
                  v297 = *(_QWORD *)v281;
                  v298 = (*(uint64_t (**)(uint64_t, char *))(v436 + 120))(v436, v286);
                  v287 = v297;
                  v277 = v396;
                  v290 = (_DWORD *)(v435 + v276);
                  v289 = v298;
                }
              }
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(v287 + 80) + 8) = *(_DWORD *)v286;
            }
            v299 = 5;
            if (SHIDWORD(v282) <= v284)
              v299 = 6;
            if ((int)v282 > v284)
              v299 = 4;
            if (SHIDWORD(v279) > v284)
              v299 = 3;
            if (SDWORD2(v279) > v284)
              v299 = 2;
            if (SDWORD1(v279) > v284)
              v299 = 1;
            if ((int)v279 > v284)
              v299 = 0;
            v300 = *((_QWORD *)&v443 + v299);
            if ((unint64_t)v286 < v300 && (unint64_t)&v286[v289] > v300)
              break;
            v302 = sub_1ACB9E6A8(v436, v283, v286, v289, v290, *(_DWORD *)(v287 + 4));
            v3 = v431;
            if ((_DWORD)v302)
            {
              v11 = v302;
              goto LABEL_458;
            }
            v276 += v289;
            v281 = (__int128 *)((char *)v281 + 8);
            --v278;
            v222 = v283 + 1;
            if (!v278)
              goto LABEL_385;
          }
          v350 = 85550;
LABEL_495:
          v306 = sub_1ACBEB08C(v350);
LABEL_496:
          v11 = v306;
          v1 = v408;
          goto LABEL_497;
        }
LABEL_385:
        v303 = 1 - v434;
        v304 = v403;
        if (1 - v434 >= v434)
        {
LABEL_433:
          v451 = 0;
          if (v398 == 1
            && !*(_WORD *)(v436 + 24)
            && (v341 = v461, *(_DWORD *)(v461 + 20) >= (int)*(unsigned __int8 *)(v436 + 9)))
          {
            v451 = sub_1ACBAEDE4(v461, -1);
            sub_1ACBA69AC(v341, v436, &v451);
            v11 = v451;
            v1 = v408;
            v47 = v434;
            if (!v451)
              v11 = sub_1ACBB0704(*(_QWORD *)(v341 + 72), v341, *(unsigned int *)(v341 + 4));
          }
          else
          {
            if (*(_BYTE *)(v440 + 33))
              v342 = v391 == 0;
            else
              v342 = 0;
            v343 = v390;
            if (!v342)
              v343 = 0;
            v1 = v408;
            v47 = v434;
            if (v343 == 1)
            {
              v344 = v434;
              v345 = (uint64_t *)&v461;
              do
              {
                v346 = *v345++;
                sub_1ACBAF160((_DWORD *)v440, bswap32(*(_DWORD *)(*(_QWORD *)(v346 + 80) + 8)), 5, *(_DWORD *)(v346 + 4), &v451);
                --v344;
              }
              while (v344);
              v11 = v451;
            }
            else
            {
              v11 = 0;
            }
          }
          if (v47 <= v403)
          {
            v348 = &v465[v47 - 1];
            v349 = v32;
            do
            {
              if (!(_DWORD)v11)
                v11 = sub_1ACBB0704(*(_QWORD *)(*v348 + 72), *v348, *(unsigned int *)(*v348 + 4));
              ++v348;
              --v349;
            }
            while (v47 != v349);
          }
          goto LABEL_87;
        }
        v400 = v438 == 0;
        v393 = v441;
        v389 = v459[0];
        v418 = *((_QWORD *)&v442 + 1);
        v305 = *((_QWORD *)&v441 + 1);
        v397 = v442;
        while (2)
        {
          if (v303 >= 0)
            v309 = v303;
          else
            v309 = -v303;
          if (!*((_BYTE *)&v448 + v309))
          {
            if (v303 < 0)
            {
              v310 = (int)v309 - 1;
              if ((signed int)v458[v310] >= v459[v310])
              {
LABEL_398:
                v311 = v393;
                if ((int)v309 <= v304)
                  v311 = v458[v310] + v400;
                v312 = v459[v310] + v400;
                v313 = v459[v309] - v312;
                goto LABEL_402;
              }
            }
            else
            {
              if (v303)
              {
                v310 = (int)v309 - 1;
                goto LABEL_398;
              }
              v312 = 0;
              v311 = 0;
              v313 = v389;
LABEL_402:
              v314 = *((_QWORD *)&v461 + v309);
              v413 = *(_QWORD *)(v314 + 80);
              v405 = *(unsigned __int8 *)(v314 + 9);
              v315 = *(_QWORD *)(v314 + 96);
              v316 = *(unsigned __int16 *)(v314 + 24);
              v317 = *(unsigned __int8 *)(v314 + 12);
              v318 = v311 - v312;
              v439 = v313;
              v430 = v312;
              v427 = v311;
              if (v311 >= v312)
              {
                v320 = *(unsigned __int16 *)(v314 + 24);
              }
              else
              {
                v319 = sub_1ACBF9F74(v314, v311, v312 - v311, (uint64_t)&v441);
                v320 = v316 - v319;
                if ((int)v316 < v319)
                {
                  v350 = 84580;
                  goto LABEL_495;
                }
                memmove(*(void **)(v314 + 96), (const void *)(*(_QWORD *)(v314 + 96) + 2 * v319), 2 * v316);
                v313 = v439;
                v312 = v430;
                v311 = v427;
              }
              v321 = v311 + v316 + v317;
              if (v321 > v313 + v312)
              {
                v322 = sub_1ACBF9F74(v314, v313 + v312, v321 - (v313 + v312), (uint64_t)&v441);
                v311 = v427;
                v320 -= v322;
              }
              v308 = v410;
              v323 = v439;
              v324 = v413 + __rev16(*(unsigned __int16 *)(v405 + v413 + 5));
              v452 = v324;
              v420 = v315 + 2 * v439;
              if (v324 < v420 || v324 > *(_QWORD *)(v314 + 88))
                goto LABEL_427;
              v325 = v430;
              v402 = v314;
              if (v430 >= v311)
                goto LABEL_415;
              if (v318 >= v439)
                v318 = v439;
              v326 = *(_WORD **)(v314 + 96);
              memmove(&v326[v318], *(const void **)(v402 + 96), 2 * v320);
              v327 = v326;
              v314 = v402;
              v328 = sub_1ACBFA16C(v402, v420, (void **)&v452, v327, v430, v318, (uint64_t)&v441);
              v311 = v427;
              v323 = v439;
              if (v328)
                goto LABEL_427;
              v320 += v318;
              v325 = v430;
LABEL_415:
              v329 = *(_BYTE *)(v314 + 12);
              if (v329)
              {
                v330 = 0;
                do
                {
                  v331 = v311 + *(unsigned __int16 *)(v314 + 2 * v330 + 28);
                  v332 = v331 - v325;
                  if (v331 - v325 >= 0 && v332 < v323)
                  {
                    v333 = *(_QWORD *)(v314 + 96) + (2 * v332);
                    if (v320 > v332)
                      memmove((void *)(v333 + 2), (const void *)v333, 2 * (v320 - v332));
                    if (!*(_WORD *)(v418 + 2 * v331))
                      sub_1ACBF9F38((uint64_t)&v441, v331);
                    v334 = (_WORD *)v333;
                    v314 = v402;
                    v335 = sub_1ACBFA16C(v402, v420, (void **)&v452, v334, v331, 1, (uint64_t)&v441);
                    v323 = v439;
                    v311 = v427;
                    if (v335)
                      goto LABEL_427;
                    ++v320;
                    v329 = *(_BYTE *)(v402 + 12);
                    v325 = v430;
                  }
                }
                while (++v330 < (unint64_t)v329);
              }
              v336 = sub_1ACBFA16C(v314, v420, (void **)&v452, (_WORD *)(*(_QWORD *)(v314 + 96) + 2 * v320), v320 + v325, v323 - v320, (uint64_t)&v441);
              v323 = v439;
              if (v336)
              {
LABEL_427:
                if (v323 < 1)
                {
                  v350 = 84654;
                  goto LABEL_495;
                }
                v337 = (_QWORD *)(v397 + 8 * v430);
                v338 = v323 + 1;
                v339 = (_WORD *)(v418 + 2 * v430);
                do
                {
                  if (!*v339)
                    *v339 = (*(uint64_t (**)(uint64_t, _QWORD))(v305 + 120))(v305, *v337);
                  ++v337;
                  ++v339;
                  --v338;
                }
                while (v338 > 1);
                v306 = sub_1ACBF9CEC((uint64_t)&v441, v430, v439, v314);
                v307 = v314;
                v308 = v410;
                if ((_DWORD)v306)
                  goto LABEL_496;
              }
              else
              {
                *(_WORD *)(v314 + 24) = v439;
                *(_BYTE *)(v314 + 12) = 0;
                v340 = v405 + v413;
                *(_BYTE *)(v340 + 3) = BYTE1(v439);
                *(_BYTE *)(v340 + 4) = *(_BYTE *)(v314 + 24);
                *(_WORD *)(v405 + v413 + 5) = bswap32(v452 - v413) >> 16;
                v307 = v314;
              }
              *((_BYTE *)&v448 + v309) = 1;
              *(_DWORD *)(v307 + 20) = v308 - *(_DWORD *)&v457[2 * v309];
              v3 = v431;
              v304 = v403;
            }
          }
          if (++v303 == v434)
            goto LABEL_433;
          continue;
        }
      }
    }
    v11 = v242;
LABEL_497:
    v3 = v431;
LABEL_498:
    v47 = v434;
LABEL_87:
    v48 = v442;
    if ((_QWORD)v442)
    {
      v49 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_182;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v48);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v48);
      v48 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v49 = &xmmword_1ECD3B1D0;
LABEL_182:
        (*v49)(v48);
      }
    }
LABEL_185:
    v178 = &v464;
    do
    {
      if (*v178)
      {
        v179 = *(_QWORD *)(*v178 + 112);
        if ((*(_WORD *)(v179 + 52) & 0x20) != 0)
        {
          v180 = *(_QWORD *)(v179 + 40);
          --*(_DWORD *)(v180 + 152);
          *(_QWORD *)(v179 + 32) = *(_QWORD *)(v180 + 168);
          *(_QWORD *)(v180 + 168) = v179;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v180 + 72) + 144))(*(_QWORD *)(v180 + 72), *(_QWORD *)(v180 + 200) * (*(_DWORD *)(v179 + 48) - 1), *(_QWORD *)(v179 + 8));
        }
        else
        {
          sub_1ACBE906C(v179);
        }
      }
      ++v178;
      --v32;
    }
    while (v32);
    if (v47 >= 1)
    {
      v181 = v47;
      v182 = &v461;
      do
      {
        if (*(_QWORD *)v182)
        {
          v183 = *(_QWORD *)(*(_QWORD *)v182 + 112);
          if ((*(_WORD *)(v183 + 52) & 0x20) != 0)
          {
            v184 = *(_QWORD *)(v183 + 40);
            --*(_DWORD *)(v184 + 152);
            *(_QWORD *)(v183 + 32) = *(_QWORD *)(v184 + 168);
            *(_QWORD *)(v184 + 168) = v183;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v184 + 72) + 144))(*(_QWORD *)(v184 + 72), *(_QWORD *)(v184 + 200) * (*(_DWORD *)(v183 + 48) - 1), *(_QWORD *)(v183 + 8));
          }
          else
          {
            sub_1ACBE906C(v183);
          }
        }
        v182 = (__int128 *)((char *)v182 + 8);
        --v181;
      }
      while (v181);
    }
    v2 = v407;
    if (v407)
LABEL_199:
      sub_1ACBEBAB0(v2);
LABEL_200:
    v2 = v435;
LABEL_201:
    *(_BYTE *)(v3 + 12) = 0;
    v185 = *(_QWORD *)(v3 + 112);
    if ((*(_WORD *)(v185 + 52) & 0x20) != 0)
    {
      v186 = *(_QWORD *)(v185 + 40);
      --*(_DWORD *)(v186 + 152);
      *(_QWORD *)(v185 + 32) = *(_QWORD *)(v186 + 168);
      *(_QWORD *)(v186 + 168) = v185;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v186 + 72) + 144))(*(_QWORD *)(v186 + 72), *(_QWORD *)(v186 + 200) * (*(_DWORD *)(v185 + 48) - 1), *(_QWORD *)(v185 + 8));
    }
    else
    {
      sub_1ACBE906C(v185);
    }
    v4 = *(_BYTE *)(v1 + 84) - 1;
    *(_BYTE *)(v1 + 84) = v4;
    v5 = *(_QWORD *)(v1 + 8 * v4 + 144);
LABEL_4:
    *(_QWORD *)(v1 + 136) = v5;
    v3 = v5;
    if ((_DWORD)v11)
      goto LABEL_502;
  }
  v6 = *(unsigned __int8 *)(v1 + 84);
  if (*(_BYTE *)(v1 + 84))
    goto LABEL_23;
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16);
  if (v7)
  {
    while (v7 == v1 || *(_BYTE *)v7 || *(_QWORD *)(v7 + 136) != *(_QWORD *)(v1 + 136))
    {
      v7 = *(_QWORD *)(v7 + 40);
      if (!v7)
        goto LABEL_10;
    }
    v385 = 85782;
    goto LABEL_501;
  }
LABEL_10:
  *(_QWORD *)&v441 = 0;
  LODWORD(v452) = 0;
  v8 = *(_QWORD *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 112);
  v10 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v10[8] >= *(_DWORD *)(v9 + 48))
  {
    if (v10[32])
    {
      v11 = sub_1ACBEA110(v9);
      if ((_DWORD)v11)
        goto LABEL_505;
    }
  }
  else
  {
    v11 = v10[12];
    if ((_DWORD)v11)
    {
LABEL_505:
      *(_QWORD *)(v1 + 152) = 0;
      goto LABEL_502;
    }
    if (v10[46] <= v10[50])
    {
      v11 = sub_1ACB9A818(v9);
      if ((_DWORD)v11)
        goto LABEL_505;
    }
    else
    {
      v11 = sub_1ACBEDEA4(v9);
      if ((_DWORD)v11)
        goto LABEL_505;
    }
  }
  LODWORD(v461) = sub_1ACBA3368(v8, (uint64_t *)&v441, (int *)&v452, *(_DWORD *)(v3 + 4), 0);
  v5 = v441;
  sub_1ACBA69AC(v3, v441, &v461);
  if (*(_BYTE *)(v8 + 33))
    sub_1ACBAF160((_DWORD *)v8, v452, 5, *(_DWORD *)(v3 + 4), &v461);
  v11 = v461;
  if (!(_DWORD)v461)
  {
    memcpy((void *)(v5 + 28), (const void *)(v3 + 28), 2 * *(unsigned __int8 *)(v3 + 12));
    memcpy((void *)(v5 + 40), (const void *)(v3 + 40), 8 * *(unsigned __int8 *)(v3 + 12));
    *(_BYTE *)(v5 + 12) = *(_BYTE *)(v3 + 12);
    sub_1ACBA3288(v3, **(_BYTE **)(v5 + 80) & 0xF7);
    *(_DWORD *)(*(unsigned __int8 *)(v3 + 9) + *(_QWORD *)(v3 + 80) + 8) = bswap32(v452);
    *(_BYTE *)(v1 + 84) = 1;
    *(_DWORD *)(v1 + 86) = 0;
    *(_QWORD *)(v1 + 144) = v3;
    *(_QWORD *)(v1 + 152) = v5;
    goto LABEL_4;
  }
  *(_QWORD *)(v1 + 152) = 0;
  if (v5)
  {
    v387 = *(_QWORD *)(v5 + 112);
    if ((*(_WORD *)(v387 + 52) & 0x20) != 0)
    {
      v388 = *(_QWORD *)(v387 + 40);
      --*(_DWORD *)(v388 + 152);
      *(_QWORD *)(v387 + 32) = *(_QWORD *)(v388 + 168);
      *(_QWORD *)(v388 + 168) = v387;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v388 + 72) + 144))(*(_QWORD *)(v388 + 72), *(_QWORD *)(v388 + 200) * (*(_DWORD *)(v387 + 48) - 1), *(_QWORD *)(v387 + 8));
    }
    else
    {
      sub_1ACBE906C(v387);
    }
  }
LABEL_502:
  if (v2)
    sub_1ACBEBAB0(v2);
  return v11;
}

uint64_t sub_1ACB9D4C4(unsigned __int8 *a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int8x8_t *v40;
  int8x8_t *v41;
  uint64_t v42;
  int8x8_t *v43;
  unint64_t v44;
  int v45;
  _DWORD *v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned __int16 *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _WORD *v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  _DWORD *v93;
  unsigned int v94;
  int v95;
  _BYTE *v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;

  v118 = a4;
  v119 = 0;
  v8 = *((_QWORD *)a1 + 1);
  v9 = a1[1];
  if ((v9 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
    if (v10)
    {
      v11 = *((_DWORD *)a1 + 20);
      while ((unsigned __int8 *)v10 == a1 || v11 && *(_DWORD *)(v10 + 80) != v11)
      {
        v10 = *(_QWORD *)(v10 + 40);
        if (!v10)
        {
          if (!a1)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      v12 = sub_1ACBEEE90((unsigned __int8 *)v10, v11, a1);
      v119 = v12;
      if ((_DWORD)v12)
        return v12;
      if (a4)
        goto LABEL_14;
    }
    else
    {
LABEL_12:
      a1[1] = v9 & 0xDF;
LABEL_13:
      v119 = 0;
      if (a4)
      {
LABEL_14:
        if ((char)a1[84] < 0)
          return sub_1ACBEB08C(86115);
      }
    }
  }
  if (*a1 >= 3u)
  {
    v12 = sub_1ACB8A058(a1);
    v119 = v12;
    if ((v12 & 0xFFFFFFEF) != 0)
      return v12;
  }
  v13 = *((_QWORD *)a1 + 16);
  if (v13)
  {
    if (a3 & 2 | a4)
    {
      if (a4)
        goto LABEL_46;
    }
    else
    {
      v23 = *(_WORD *)(a2 + 32);
      if (v23)
      {
        *(_QWORD *)&v117 = 0;
        v24 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)&v115 = v13;
        *((_QWORD *)&v115 + 1) = v24;
        v116 = 0uLL;
        WORD6(v116) = v23;
        v25 = sub_1ACBF514C((uint64_t)a1, (uint64_t *)&v115, &v118);
      }
      else
      {
        v25 = sub_1ACB9E38C((uint64_t)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (a3 & 8) != 0, &v118);
      }
      v12 = v25;
      v119 = v25;
      if ((_DWORD)v25)
        return v12;
      if (v118)
        goto LABEL_46;
    }
    sub_1ACBEF184((uint64_t)a1);
    v14 = *((_QWORD *)a1 + 6);
    if (v14 == *(_QWORD *)(a2 + 8))
    {
      v116 = 0u;
      v117 = 0u;
      v115 = 0u;
      *(_QWORD *)&v116 = *(_QWORD *)a2;
      DWORD1(v117) = v14;
      v15 = *((_QWORD *)a1 + 17);
      v16 = (_BYTE *)*((_QWORD *)a1 + 7);
      v17 = *((unsigned __int16 *)a1 + 34);
      if ((unint64_t)&v16[v17] <= *(_QWORD *)(v15 + 88)
        && (unint64_t)v16 >= *(_QWORD *)(v15 + 80) + (unint64_t)*(unsigned __int16 *)(v15 + 18))
      {
        if ((_DWORD)v14 == (_DWORD)v17)
          return sub_1ACBF95A8(v15, v16, (uint64_t)&v115, 0, v14);
        else
          return sub_1ACBF974C((uint64_t)a1, (uint64_t)&v115);
      }
      v18 = 86034;
      return sub_1ACBEB08C(v18);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 19))
    {
      v19 = *((_DWORD *)a1 + 20);
      v20 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(v8 + 19) = 0;
      for (i = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16); i; i = *(_QWORD *)(i + 40))
      {
        if ((*(_BYTE *)(i + 1) & 0x10) != 0)
        {
          *(_BYTE *)(v8 + 19) = 1;
          if (*(_DWORD *)(i + 80) == v19 && *(_QWORD *)(i + 48) == v20)
            *(_BYTE *)i = 1;
        }
      }
    }
    if ((a1[1] & 2) != 0 && *(_QWORD *)(a2 + 8) == *((_QWORD *)a1 + 6))
    {
      if (*((_WORD *)a1 + 35) && *((_DWORD *)a1 + 16) == *(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 36))
        return sub_1ACBF9434((uint64_t)a1, a2);
    }
    else if (!a4)
    {
      v12 = sub_1ACBF4EEC((uint64_t)a1, *(_QWORD *)(a2 + 8), (a3 & 8) != 0, &v118);
      v119 = v12;
      if ((_DWORD)v12)
        return v12;
    }
  }
LABEL_46:
  v26 = *((_QWORD *)a1 + 17);
  if ((*(_DWORD *)(v26 + 20) & 0x80000000) != 0)
  {
    if (*a1 >= 2u)
    {
      v18 = 86238;
      return sub_1ACBEB08C(v18);
    }
    v12 = sub_1ACBF949C(*((_QWORD *)a1 + 17));
    v119 = v12;
    if ((_DWORD)v12)
      return v12;
  }
  v27 = *(_QWORD *)(v8 + 8);
  v28 = *(_DWORD **)(v27 + 136);
  if (a3 < 0)
  {
    v119 = 0;
    if (*(int *)(v27 + 144) <= 4)
      v36 = 4;
    else
      v36 = *(_DWORD *)(v27 + 144);
    v114 = v36;
    if (*(_BYTE *)(v27 + 33) && v36 > *(unsigned __int16 *)(v26 + 14))
    {
      v115 = 0uLL;
      *(_QWORD *)&v116 = 0;
      (*(void (**)(uint64_t, _DWORD *, __int128 *))(v26 + 128))(v26, v28, &v115);
      v37 = v28;
      if ((_DWORD)v116 != WORD2(v116))
      {
        sub_1ACBAF160(*(_DWORD **)(v8 + 8), bswap32(*(_DWORD *)((char *)v28 + v36 - 4)), 3, *(_DWORD *)(v26 + 4), &v119);
        v12 = v119;
        if (v119)
          return v12;
      }
      v28 = v37;
    }
LABEL_131:
    v69 = *((unsigned __int16 *)a1 + 43);
    *((_WORD *)a1 + 35) = 0;
    if (v118)
    {
      v70 = v28;
      v71 = v114;
      if (v118 < 0 && *(_WORD *)(v26 + 24))
      {
        *((_WORD *)a1 + 43) = v69 + 1;
        LODWORD(v69) = (unsigned __int16)(v69 + 1);
        a1[1] &= ~2u;
      }
      goto LABEL_135;
    }
    v115 = 0uLL;
    *(_QWORD *)&v116 = 0;
    if (v69 >= *(unsigned __int16 *)(v26 + 24))
    {
      v18 = 86277;
      return sub_1ACBEB08C(v18);
    }
    v70 = v28;
    v74 = *(_QWORD *)(v26 + 112);
    v75 = *(_DWORD **)(v74 + 40);
    if ((*(_WORD *)(v74 + 52) & 4) != 0 && v75[8] >= *(_DWORD *)(v74 + 48))
    {
      if (!v75[32])
      {
LABEL_172:
        v93 = (_DWORD *)(*(_QWORD *)(v26 + 80)
                       + ((*(unsigned __int8 *)(*(_QWORD *)(v26 + 96) + 2 * v69 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(v26 + 96) + 2 * v69) << 8)) & (unint64_t)*(unsigned __int16 *)(v26 + 26)));
        if (!*(_BYTE *)(v26 + 8))
          *v70 = *v93;
        (*(void (**)(uint64_t, _DWORD *, __int128 *))(v26 + 128))(v26, v93, &v115);
        if ((_DWORD)v116 == WORD2(v116))
          v94 = 0;
        else
          v94 = sub_1ACBF86B0(v26, (uint64_t)v93, (uint64_t)&v115);
        v119 = v94;
        a1[1] &= ~4u;
        if (v114 == WORD3(v116)
          && (_DWORD)v116 == WORD2(v116)
          && (!*(_BYTE *)(*(_QWORD *)(v8 + 8) + 33) || v114 < *(unsigned __int16 *)(v26 + 16)))
        {
          if ((unint64_t)v93 >= *(_QWORD *)(v26 + 80) + (unint64_t)*(unsigned __int8 *)(v26 + 9) + 10)
          {
            if ((unint64_t)v93 + v114 <= *(_QWORD *)(v26 + 88))
            {
              memcpy(v93, v70, v114);
              return 0;
            }
            v18 = 86307;
          }
          else
          {
            v18 = 86304;
          }
          return sub_1ACBEB08C(v18);
        }
        sub_1ACB9AC70(v26, v69, WORD3(v116), &v119);
        v12 = v119;
        v71 = v114;
        if (v119)
          return v12;
LABEL_135:
        v72 = v71 + 2;
        if (v71 + 2 > *(_DWORD *)(v26 + 20))
        {
          v12 = 0;
          v73 = *(unsigned __int8 *)(v26 + 12);
          *(_BYTE *)(v26 + 12) = v73 + 1;
          *(_QWORD *)(v26 + 8 * v73 + 40) = v70;
          *(_WORD *)(v26 + 2 * v73 + 28) = v69;
LABEL_209:
          if (!*(_BYTE *)(v26 + 12))
            return v12;
          a1[1] &= ~2u;
          v101 = sub_1ACB9AD9C((uint64_t)a1);
          v12 = v101;
          *(_BYTE *)(*((_QWORD *)a1 + 17) + 12) = 0;
          *a1 = 1;
          if ((a3 & 2) == 0 || (_DWORD)v101)
            return v12;
          sub_1ACBEEF5C((uint64_t)a1);
          if (*((_QWORD *)a1 + 16))
          {
            v102 = (void *)sub_1ACB5D828(*(_QWORD *)(a2 + 8));
            *((_QWORD *)a1 + 3) = v102;
            if (!v102)
            {
              v12 = 7;
              goto LABEL_217;
            }
            memcpy(v102, *(const void **)a2, *(_QWORD *)(a2 + 8));
          }
          v12 = 0;
LABEL_217:
          *a1 = 3;
          *((_QWORD *)a1 + 9) = *(_QWORD *)(a2 + 8);
          return v12;
        }
        v77 = *(_QWORD *)(v26 + 112);
        v78 = *(_DWORD **)(v77 + 40);
        if ((*(_WORD *)(v77 + 52) & 4) != 0 && v78[8] >= *(_DWORD *)(v77 + 48))
        {
          if (!v78[32])
            goto LABEL_156;
          v79 = sub_1ACBEA110(v77);
        }
        else
        {
          v12 = v78[12];
          if ((_DWORD)v12)
            goto LABEL_209;
          if (v78[46] <= v78[50])
            v79 = sub_1ACB9A818(v77);
          else
            v79 = sub_1ACBEDEA4(v77);
        }
        v12 = v79;
        if ((_DWORD)v79)
          goto LABEL_209;
LABEL_156:
        v111 = a3;
        v80 = 78644;
        v81 = *(_QWORD *)(v26 + 80);
        v82 = *(unsigned __int8 *)(v26 + 9);
        LODWORD(v115) = 0;
        v83 = *(unsigned __int16 *)(v26 + 18) + 2 * *(unsigned __int16 *)(v26 + 24);
        v84 = v26;
        v85 = (unsigned __int16 *)(v82 + v81 + 5);
        v86 = __rev16(*v85);
        if (v83 <= v86)
        {
          v87 = v84;
          if (v86 <= *(_DWORD *)(*(_QWORD *)(v84 + 72) + 56))
            goto LABEL_164;
          v80 = 78647;
        }
        else
        {
          v87 = v84;
          if (!v86 && *(_DWORD *)(*(_QWORD *)(v84 + 72) + 56) == 0x10000)
          {
            v86 = 0x10000;
LABEL_164:
            v113 = v81;
            v88 = v82 + v81;
            if (!*(_BYTE *)(v88 + 2) && !*(_BYTE *)(v88 + 1) || v83 + 2 > v86)
              goto LABEL_186;
            v89 = sub_1ACBF9BD4(v87, v114, &v115);
            if (v89)
            {
              v90 = (unint64_t)v89 - v113;
              if (v83 >= (int)v89 - (int)v113)
              {
                v26 = v87;
                v12 = sub_1ACBEC69C(78664, v87);
LABEL_208:
                a3 = v111;
                goto LABEL_209;
              }
              v91 = v90 >> 8;
              v26 = v87;
              v92 = v114;
LABEL_193:
              *(_DWORD *)(v26 + 20) -= (unsigned __int16)v72;
              memcpy((void *)(v113 + (int)v90), v70, v92);
              v96 = (_BYTE *)(*(_QWORD *)(v26 + 96) + 2 * v69);
              memmove(v96 + 2, v96, 2 * (*(unsigned __int16 *)(v26 + 24) - (int)v69));
              *v96 = v91;
              v96[1] = v90;
              ++*(_WORD *)(v26 + 24);
              v97 = *(unsigned __int8 *)(v26 + 9) + v113;
              v98 = (*(_BYTE *)(v97 + 4))++ + 1;
              if ((v98 & 0x100) != 0)
                ++*(_BYTE *)(*(unsigned __int8 *)(v26 + 9) + v113 + 3);
              if (*(_BYTE *)(*(_QWORD *)(v26 + 72) + 33)
                && (v121 = 0,
                    v115 = 0uLL,
                    *(_QWORD *)&v116 = 0,
                    (*(void (**)(uint64_t, _DWORD *, __int128 *))(v26 + 128))(v26, v70, &v115),
                    v116 > WORD2(v116)))
              {
                v99 = *(_QWORD *)(v26 + 88);
                if (v99 <= (unint64_t)v70 || (unint64_t)v70 + WORD2(v116) <= v99)
                {
                  sub_1ACBAF160(*(_DWORD **)(v26 + 72), bswap32(*(_DWORD *)((char *)v70 + WORD3(v116) - 4)), 3, *(_DWORD *)(v26 + 4), &v121);
                  v12 = v121;
                }
                else
                {
                  v12 = sub_1ACBEB08C(78386);
                }
              }
              else
              {
                v12 = 0;
              }
              goto LABEL_208;
            }
            v12 = v115;
            if (!(_DWORD)v115)
            {
LABEL_186:
              if (v83 + v72 <= v86)
              {
LABEL_192:
                v92 = v114;
                LODWORD(v90) = v86 - v114;
                LODWORD(v91) = v90 >> 8;
                *v85 = bswap32(v90) >> 16;
                v26 = v87;
                goto LABEL_193;
              }
              if (*(_DWORD *)(v87 + 20) - v72 >= 4)
                v95 = 4;
              else
                v95 = *(_DWORD *)(v87 + 20) - v72;
              v12 = sub_1ACBAEDE4(v87, v95);
              if (!(_DWORD)v12)
              {
                v86 = (unsigned __int16)(_byteswap_ushort(*v85) - 1) + 1;
                goto LABEL_192;
              }
            }
LABEL_163:
            a3 = v111;
            v26 = v87;
            goto LABEL_209;
          }
        }
        v12 = sub_1ACBEC69C(v80, v87);
        goto LABEL_163;
      }
      v76 = sub_1ACBEA110(v74);
    }
    else
    {
      v12 = v75[12];
      if ((_DWORD)v12)
        return v12;
      if (v75[46] <= v75[50])
        v76 = sub_1ACB9A818(v74);
      else
        v76 = sub_1ACBEDEA4(v74);
    }
    v12 = v76;
    if ((_DWORD)v76)
      return v12;
    goto LABEL_172;
  }
  v110 = a3;
  v121 = 0;
  v29 = v26;
  v30 = *(unsigned __int8 *)(v26 + 10);
  v112 = v29;
  if (*(_BYTE *)(v29 + 1))
  {
    v32 = *(int *)(a2 + 36);
    v31 = *(int *)(a2 + 40);
    v33 = v31 + v32;
    v34 = *(char **)(a2 + 16);
    if ((v31 + v32) > 0x7F)
    {
      v40 = (int8x8_t *)((char *)v28 + v30);
      if (v33 >> 14)
      {
        v35 = sub_1ACBF8034(v40, v33);
      }
      else
      {
        v40->i8[0] = (v33 >> 7) | 0x80;
        v40->i8[1] = v33 & 0x7F;
        v35 = 2;
      }
    }
    else
    {
      *((_BYTE *)v28 + v30) = v33;
      v35 = 1;
    }
    v42 = (v35 + v30);
    v43 = (int8x8_t *)((char *)v28 + v42);
    v44 = *(_QWORD *)(a2 + 8);
    if (v44 > 0x7F)
    {
      v26 = v112;
      if (v44 >> 14)
      {
        v45 = sub_1ACBF8034(v43, v44) + v42;
      }
      else
      {
        v43->i8[0] = (v44 >> 7) | 0x80;
        v43->i8[1] = v44 & 0x7F;
        v45 = v42 + 2;
      }
    }
    else
    {
      v43->i8[0] = v44;
      v26 = v112;
      v45 = v42 + 1;
    }
  }
  else
  {
    v34 = *(char **)a2;
    v38 = *(_QWORD *)(a2 + 8);
    LODWORD(v33) = v38;
    if (v38 > 0x7F)
    {
      v41 = (int8x8_t *)((char *)v28 + v30);
      if (v38 >> 7)
      {
        if ((unint64_t)v38 >> 14)
        {
          v39 = sub_1ACBF8034(v41, (int)v38);
        }
        else
        {
          v41->i8[0] = (v38 >> 7) | 0x80;
          v41->i8[1] = v38 & 0x7F;
          v39 = 2;
        }
      }
      else
      {
        v41->i8[0] = v38;
        v39 = 1;
      }
    }
    else
    {
      *((_BYTE *)v28 + v30) = v38;
      v39 = 1;
    }
    v45 = v39 + v30;
    LODWORD(v32) = v33;
    v26 = v112;
  }
  v46 = v28;
  v47 = (char *)v28 + v45;
  v48 = *(unsigned __int16 *)(v26 + 14);
  if ((int)v33 <= v48)
  {
    v66 = v45 + v33;
    if (v66 <= 4)
      v66 = 4;
    v114 = v66;
    memcpy(v47, v34, (int)v32);
    bzero(&v47[(int)v32], (int)v33 - (int)v32);
    v28 = v46;
    goto LABEL_130;
  }
  v106 = v46;
  v107 = a2;
  v49 = *(unsigned __int16 *)(v26 + 16);
  v50 = *(_QWORD *)(v26 + 72);
  if ((int)(((int)v33 - v49) % (*(_DWORD *)(v50 + 56) - 4) + v49) <= v48)
    v51 = ((int)v33 - v49) % (*(_DWORD *)(v50 + 56) - 4) + v49;
  else
    v51 = *(unsigned __int16 *)(v26 + 16);
  v52 = v45 + (uint64_t)v51;
  v114 = v52 + 4;
  v108 = (_DWORD *)((char *)v46 + v52);
  v109 = 0;
  v120 = 0;
  while (1)
  {
    do
    {
      if ((int)v33 >= v51)
        v53 = v51;
      else
        v53 = v33;
      if ((int)v32 >= v53)
      {
        memcpy(v47, v34, v53);
      }
      else if ((int)v32 < 1)
      {
        bzero(v47, v53);
      }
      else
      {
        memcpy(v47, v34, v32);
        v53 = v32;
      }
      LODWORD(v33) = v33 - v53;
      if ((int)v33 < 1)
      {
        if (v109)
        {
          v67 = *(_QWORD *)(v109 + 112);
          v28 = v106;
          a2 = v107;
          a3 = v110;
          v26 = v112;
          if ((*(_WORD *)(v67 + 52) & 0x20) != 0)
          {
            v68 = *(_QWORD *)(v67 + 40);
            --*(_DWORD *)(v68 + 152);
            *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 168);
            *(_QWORD *)(v68 + 168) = v67;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v68 + 72) + 144))(*(_QWORD *)(v68 + 72), *(_QWORD *)(v68 + 200) * (*(_DWORD *)(v67 + 48) - 1), *(_QWORD *)(v67 + 8));
          }
          else
          {
            sub_1ACBE906C(v67);
          }
        }
        else
        {
          v28 = v106;
          a2 = v107;
          a3 = v110;
          v26 = v112;
        }
LABEL_130:
        v119 = 0;
        goto LABEL_131;
      }
      v47 += v53;
      v34 += v53;
      LODWORD(v32) = v32 - v53;
      v51 -= v53;
    }
    while (v51);
    *(_QWORD *)&v115 = 0;
    v54 = v120;
    v55 = v120;
    if (*(_BYTE *)(v50 + 33))
    {
      v56 = v120;
      while (1)
      {
        while (1)
        {
          v57 = v56++;
          if (v56 < 2)
            break;
          v58 = (v57 - 1) / (*(_DWORD *)(v50 + 56) / 5u + 1) * (*(_DWORD *)(v50 + 56) / 5u + 1);
          if (v58 + 1 == dword_1EECAC650 / *(_DWORD *)(v50 + 52))
            v59 = 3;
          else
            v59 = 2;
          if (v56 != v59 + v58)
            goto LABEL_106;
        }
        if (v56)
        {
LABEL_106:
          if (v57 != dword_1EECAC650 / *(_DWORD *)(v50 + 52))
          {
            v55 = v57 + 1;
            v120 = v57 + 1;
            break;
          }
        }
      }
    }
    v60 = sub_1ACBA3368(v50, (uint64_t *)&v115, (int *)&v120, v55, 0);
    v12 = v60;
    v121 = v60;
    if (*(_BYTE *)(v50 + 33))
    {
      if (!(_DWORD)v60)
        break;
    }
    if ((_DWORD)v60)
      goto LABEL_221;
    v61 = v120;
LABEL_117:
    *v108 = bswap32(v61);
    if (v109)
    {
      v63 = *(_QWORD *)(v109 + 112);
      if ((*(_WORD *)(v63 + 52) & 0x20) != 0)
      {
        v64 = *(_QWORD *)(v63 + 40);
        --*(_DWORD *)(v64 + 152);
        *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 168);
        *(_QWORD *)(v64 + 168) = v63;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v64 + 72) + 144))(*(_QWORD *)(v64 + 72), *(_QWORD *)(v64 + 200) * (*(_DWORD *)(v63 + 48) - 1), *(_QWORD *)(v63 + 8));
      }
      else
      {
        sub_1ACBE906C(v63);
      }
    }
    v65 = v115;
    v108 = *(_DWORD **)(v115 + 80);
    v109 = v115;
    *v108 = 0;
    v47 = (char *)(*(_QWORD *)(v65 + 80) + 4);
    v51 = *(_DWORD *)(v50 + 56) - 4;
  }
  v61 = v120;
  if (v54)
    v62 = 4;
  else
    v62 = 3;
  sub_1ACBAF160((_DWORD *)v50, v120, v62, v54, &v121);
  v12 = v121;
  if (!v121)
    goto LABEL_117;
  if ((_QWORD)v115)
  {
    v100 = *(_QWORD *)(v115 + 112);
    if ((*(_WORD *)(v100 + 52) & 0x20) != 0)
    {
      v103 = *(_QWORD *)(v100 + 40);
      --*(_DWORD *)(v103 + 152);
      *(_QWORD *)(v100 + 32) = *(_QWORD *)(v103 + 168);
      *(_QWORD *)(v103 + 168) = v100;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v103 + 72) + 144))(*(_QWORD *)(v103 + 72), *(_QWORD *)(v103 + 200) * (*(_DWORD *)(v100 + 48) - 1), *(_QWORD *)(v100 + 8));
    }
    else
    {
      sub_1ACBE906C(v100);
    }
  }
LABEL_221:
  if (v109)
  {
    v104 = *(_QWORD *)(v109 + 112);
    if ((*(_WORD *)(v104 + 52) & 0x20) != 0)
    {
      v105 = *(_QWORD *)(v104 + 40);
      --*(_DWORD *)(v105 + 152);
      *(_QWORD *)(v104 + 32) = *(_QWORD *)(v105 + 168);
      *(_QWORD *)(v105 + 168) = v104;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v105 + 72) + 144))(*(_QWORD *)(v105 + 72), *(_QWORD *)(v105 + 200) * (*(_DWORD *)(v104 + 48) - 1), *(_QWORD *)(v104 + 8));
    }
    else
    {
      sub_1ACBE906C(v104);
    }
  }
  return v12;
}

uint64_t sub_1ACB9E38C(uint64_t a1, char *a2, int64_t a3, char a4, int *a5)
{
  unsigned int v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = a3;
  if (!a2)
    return sub_1ACBF4EEC(a1, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = (unint64_t)*(unsigned __int16 *)(v9 + 6) << 6;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = sub_1ACBE1124(v11, v10 + 104);
    if (v12)
      goto LABEL_4;
  }
  else
  {
    v12 = sub_1ACB5D828(v10 + 104);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)v12 = v9;
      *(_QWORD *)(v12 + 8) = v12 + 40;
      *(_WORD *)(v12 + 28) = *(_WORD *)(v9 + 6) + 1;
      sub_1ACB9E49C(v9, v6, a2, v12);
      if (*(_WORD *)(v12 + 28) && *(unsigned __int16 *)(v12 + 28) <= *(unsigned __int16 *)(v9 + 8))
        v13 = sub_1ACBF514C(a1, (uint64_t *)v12, a5);
      else
        v13 = sub_1ACBEB08C(77677);
      v15 = v13;
      sub_1ACBE0F9C(*(_QWORD **)(*(_QWORD *)(a1 + 128) + 16), (_QWORD *)v12);
      return v15;
    }
  }
  return 7;
}

void sub_1ACB9E49C(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v21;

  v7 = *(_QWORD *)(a4 + 8);
  *(_BYTE *)(a4 + 30) = 0;
  v8 = *a3;
  if ((v8 & 0x80) != 0)
  {
    v10 = a3[1];
    if (a3[1] < 0)
    {
      v11 = a3[2];
      if (v11 < 0)
      {
        v21 = 0;
        v9 = sub_1ACB8A6CC(a3, &v21);
        if (HIDWORD(v21))
          v8 = -1;
        else
          v8 = v21;
      }
      else
      {
        v8 = v11 & 0x7F | (v8 << 14) & 0x1FC07F | ((v10 & 0x7F) << 7);
        v9 = 3;
      }
    }
    else
    {
      v8 = ((v8 & 0x7F) << 7) | v10;
      v9 = 2;
    }
  }
  else
  {
    v9 = 1;
  }
  v12 = 0;
  v13 = v8;
  do
  {
    if (v9 >= v8 || v13 > a2)
      break;
    v15 = &a3[v9];
    v16 = *v15;
    if ((v16 & 0x80) != 0)
    {
      v18 = v15[1];
      if (v15[1] < 0)
      {
        v19 = v15[2];
        if (v19 < 0)
        {
          v21 = 0;
          v17 = sub_1ACB8A6CC(v15, &v21);
          v16 = HIDWORD(v21) ? -1 : v21;
        }
        else
        {
          v16 = v19 & 0x7F | (v16 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
          v17 = 3;
        }
      }
      else
      {
        v16 = ((v16 & 0x7F) << 7) | v18;
        v17 = 2;
      }
    }
    else
    {
      v17 = 1;
    }
    *(_BYTE *)(v7 + 22) = *(_BYTE *)(a1 + 4);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    sub_1ACB8A864(&a3[v13], v16, v7);
    v14 = v16 < 0x80 ? byte_1ACCB6D60[v16] : (v16 - 12) >> 1;
    v9 += v17;
    v13 += v14;
    v7 += 64;
    ++v12;
  }
  while (v12 < *(unsigned __int16 *)(a4 + 28));
  if (v13 > a2 && v12)
  {
    if ((*(_WORD *)(v7 - 44) & 0x9000) != 0)
      sub_1ACBF2A54((int *)(v7 - 64));
    else
      *(_WORD *)(v7 - 44) = 1;
  }
  *(_WORD *)(a4 + 28) = v12;
}

uint64_t sub_1ACB9E6A8(uint64_t a1, int a2, char *__src, int a4, _DWORD *__dst, unsigned int a6)
{
  _DWORD *v7;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  size_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v7 = __dst;
  if (*(_BYTE *)(a1 + 12) || (v12 = a4 + 2, a4 + 2 > *(_DWORD *)(a1 + 20)))
  {
    if (__dst)
      memcpy(__dst, __src, a4);
    else
      v7 = __src;
    result = 0;
    *v7 = bswap32(a6);
    v14 = *(unsigned __int8 *)(a1 + 12);
    *(_BYTE *)(a1 + 12) = v14 + 1;
    *(_QWORD *)(a1 + 8 * v14 + 40) = v7;
    *(_WORD *)(a1 + 2 * v14 + 28) = a2;
    return result;
  }
  v15 = *(_QWORD *)(a1 + 112);
  v16 = *(_DWORD **)(v15 + 40);
  if ((*(_WORD *)(v15 + 52) & 4) != 0 && v16[8] >= *(_DWORD *)(v15 + 48))
  {
    if (!v16[32])
      goto LABEL_17;
    result = sub_1ACBEA110(*(_QWORD *)(a1 + 112));
  }
  else
  {
    result = v16[12];
    if ((_DWORD)result)
      return result;
    v17 = *(_QWORD *)(a1 + 112);
    if (v16[46] <= v16[50])
      result = sub_1ACB9A818(v17);
    else
      result = sub_1ACBEDEA4(v17);
  }
  if ((_DWORD)result)
    return result;
LABEL_17:
  v18 = 78644;
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(unsigned __int8 *)(a1 + 9);
  v39 = 0;
  v21 = *(unsigned __int16 *)(a1 + 18) + 2 * *(unsigned __int16 *)(a1 + 24);
  v22 = (unsigned __int16 *)(v20 + v19 + 5);
  v23 = __rev16(*v22);
  if (v21 > v23)
  {
    if (!v23 && *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56) == 0x10000)
    {
      v23 = 0x10000;
      goto LABEL_25;
    }
LABEL_23:
    v24 = v18;
    return sub_1ACBEC69C(v24, a1);
  }
  if (v23 > *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56))
  {
    v18 = 78647;
    goto LABEL_23;
  }
LABEL_25:
  v25 = v20 + v19;
  if ((*(_BYTE *)(v25 + 2) || *(_BYTE *)(v25 + 1)) && v21 + 2 <= v23)
  {
    v37 = v19;
    v26 = sub_1ACBF9BD4(a1, a4, &v39);
    if (v26)
    {
      v19 = v37;
      v27 = (unint64_t)v26 - v37;
      if (v21 < (int)v26 - (int)v37)
      {
        v28 = v27 >> 8;
        goto LABEL_39;
      }
      v24 = 78664;
      return sub_1ACBEC69C(v24, a1);
    }
    result = v39;
    v19 = v37;
    if (v39)
      return result;
  }
  if (v12 + v21 > v23)
  {
    if (*(_DWORD *)(a1 + 20) - v12 >= 4)
      v29 = 4;
    else
      v29 = *(_DWORD *)(a1 + 20) - v12;
    v30 = v19;
    result = sub_1ACBAEDE4(a1, v29);
    if ((_DWORD)result)
      return result;
    v19 = v30;
    v23 = (unsigned __int16)(_byteswap_ushort(*v22) - 1) + 1;
  }
  LODWORD(v27) = v23 - a4;
  LODWORD(v28) = v27 >> 8;
  *v22 = bswap32(v27) >> 16;
LABEL_39:
  *(_DWORD *)(a1 + 20) -= (unsigned __int16)v12;
  v31 = (_DWORD *)(v19 + (int)v27);
  v32 = a4 - 4;
  v33 = v19;
  memcpy(v31 + 1, __src + 4, v32);
  *v31 = bswap32(a6);
  v34 = (_BYTE *)(*(_QWORD *)(a1 + 96) + 2 * a2);
  memmove(v34 + 2, v34, 2 * (*(unsigned __int16 *)(a1 + 24) - a2));
  *v34 = v28;
  v34[1] = v27;
  ++*(_WORD *)(a1 + 24);
  v35 = *(unsigned __int8 *)(a1 + 9) + v33;
  v36 = (*(_BYTE *)(v35 + 4))++ + 1;
  if ((v36 & 0x100) != 0)
    ++*(_BYTE *)(*(unsigned __int8 *)(a1 + 9) + v33 + 3);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 72) + 33))
    return 0;
  v38 = 0;
  sub_1ACBF0240((_DWORD *)a1, a1, (unint64_t)__src, &v38);
  return v38;
}

uint64_t sub_1ACB9E9C0(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)v3)
  {
    if (off_1ECD3B2E0 && off_1ECD3B2E0(400))
      return 10;
    if (*(unsigned __int8 *)(a1 + 21) < 3u)
      return 0;
    if (*(_BYTE *)(a1 + 16))
    {
      if (!**(_QWORD **)(a1 + 72))
        goto LABEL_18;
      v7 = *(uint64_t **)(a1 + 336);
      LODWORD(v8) = *((_DWORD *)v7 + 8);
      if ((v8 & 0x80000000) != 0)
      {
        v8 = -1024 * (int)v8 / (*((int *)v7 + 11) + (uint64_t)*((int *)v7 + 10));
        if (v8 >= 1000000000)
          LODWORD(v8) = 1000000000;
      }
      v9 = *v7;
      if (*v7)
      {
        v10 = 0;
        do
        {
          v9 = *(_QWORD *)(v9 + 64);
          v10 += 100;
        }
        while (v9);
        if (!(_DWORD)v8)
        {
LABEL_18:
          for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
            *(_DWORD *)(i + 24) = 1;
LABEL_39:
          if (!*(_QWORD *)(a1 + 344))
          {
            v3 = 0;
            *(_BYTE *)(a1 + 21) = 5;
            return v3;
          }
          return 0;
        }
      }
      else
      {
        v10 = 0;
        if (!(_DWORD)v8)
          goto LABEL_18;
      }
      if ((int)(v10 / (int)v8) <= 24)
        goto LABEL_18;
    }
    if (*(_QWORD *)(a1 + 344))
    {
      v18 = 0;
      v12 = sub_1ACBEE4FC(*(uint64_t **)(a1 + 336));
      if (!v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(a1 + 288))(a1, 1, &v18, 0);
        v12 = v18;
        *(_QWORD *)(v18 + 32) = 0;
      }
      v3 = sub_1ACBEA460(a1, v12, *(_DWORD *)(a1 + 32), 1);
      v13 = v18;
      if (v18)
      {
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          v16 = *(_QWORD *)(v18 + 40);
          --*(_DWORD *)(v16 + 152);
          *(_QWORD *)(v13 + 32) = *(_QWORD *)(v16 + 168);
          *(_QWORD *)(v16 + 168) = v13;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v16 + 72) + 144))(*(_QWORD *)(v16 + 72), *(_QWORD *)(v16 + 200) * (*(_DWORD *)(v13 + 48) - 1), *(_QWORD *)(v13 + 8));
        }
        else
        {
          sub_1ACBE906C(v18);
        }
      }
      if (!(_DWORD)v3)
        sub_1ACBEC42C(*(uint64_t **)(a1 + 336));
      goto LABEL_38;
    }
    v3 = sub_1ACBEE770(a1);
    if (!(_DWORD)v3)
    {
      v3 = sub_1ACBEE8D8(a1, a2);
      if (!(_DWORD)v3)
      {
        v3 = sub_1ACBA7C60(a1, 0);
        if (!(_DWORD)v3)
        {
          v14 = sub_1ACBEE4FC(*(uint64_t **)(a1 + 336));
          v3 = sub_1ACBA7EF0((_QWORD *)a1, v14);
          if (!(_DWORD)v3)
          {
            sub_1ACBEC42C(*(uint64_t **)(a1 + 336));
            v15 = *(_DWORD *)(a1 + 32);
            if (v15 <= *(_DWORD *)(a1 + 40)
              || (v3 = sub_1ACBB7A78(a1, v15 - (v15 == *(_DWORD *)(a1 + 192))), !(_DWORD)v3))
            {
              if (a3)
                goto LABEL_39;
              v3 = sub_1ACBC51FC(a1, (uint64_t)a2);
LABEL_38:
              if ((_DWORD)v3)
                return v3;
              goto LABEL_39;
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t sub_1ACB9EC40(uint64_t result, int a2, int a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  _BOOL8 v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  *(_BYTE *)a5 = HIBYTE(a2);
  *(_BYTE *)(a5 + 1) = BYTE2(a2);
  *(_BYTE *)(a5 + 2) = BYTE1(a2);
  *(_BYTE *)(a5 + 3) = a2;
  *(_BYTE *)(a5 + 4) = HIBYTE(a3);
  *(_BYTE *)(a5 + 5) = BYTE2(a3);
  *(_BYTE *)(a5 + 6) = BYTE1(a3);
  *(_BYTE *)(a5 + 7) = a3;
  if (*(_DWORD *)(result + 124))
  {
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    v6 = result;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)(result + 104);
    v7 = (int *)(result + 96);
    v8 = *(_DWORD *)(result + 96);
    v9 = *(unsigned __int8 *)(result + 85);
    v10 = *(_BYTE *)(result + 85) == 0;
    v11 = v7[1];
    v12 = v11 + v8;
    v13 = *(_DWORD *)a5;
    if (v9)
    {
      v13 = bswap32(v13);
      v14 = bswap32(*(_DWORD *)(a5 + 4));
    }
    else
    {
      v14 = *(_DWORD *)(a5 + 4);
    }
    v15 = v12 + v13;
    *(_DWORD *)(v6 + 96) = v15;
    *(_DWORD *)(v6 + 100) = v14 + v11 + v15;
    result = sub_1ACBEAF64(v10, a4, *(_DWORD *)(v6 + 56), v7, v7);
    *(_DWORD *)(a5 + 16) = bswap32(*(_DWORD *)(v6 + 96));
    *(_DWORD *)(a5 + 20) = bswap32(*(_DWORD *)(v6 + 100));
  }
  return result;
}

uint64_t sub_1ACB9ED20(uint64_t a1, char *__buf, uint64_t a3, off_t a4)
{
  uint64_t v5;
  off_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  const char *v14;
  const char *v15;
  char __strerrbuf[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 160)
    || (v7 = a4, LODWORD(v8) = a3, v9 = __buf, (v10 = *(_QWORD *)(a1 + 64)) != 0) && *(_DWORD *)(*(_QWORD *)v10 + 168))
  {
    sqlite3_log(27, "denying write to invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    v11 = sub_1ACBE24EC(a1, a4, __buf, a3);
    v12 = v11 < (int)v8;
    if (v11 < (int)v8 && v11 >= 1)
    {
      do
      {
        v8 = (v8 - v11);
        v7 += v11;
        v9 += v11;
        v11 = sub_1ACBE24EC(a1, v7, v9, v8);
        v12 = v11 < (int)v8;
      }
      while (v11 < (int)v8 && v11 > 0);
    }
    if (v12)
    {
      if (*(_DWORD *)(a1 + 32) == 28)
      {
        v14 = *(const char **)(a1 + 56);
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(28, __strerrbuf, 0x4FuLL);
        v15 = &byte_1ACCBEAEE;
        if (v14)
          v15 = v14;
        v5 = 13;
        sqlite3_log(13, "os_unix.c:%d: (%d) %s(%s) - %s", 44377, 28, "unixWrite", v15, __strerrbuf);
      }
      else
      {
        return 778;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_1ACB9EEA8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  char __strerrbuf[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 160) || (v5 = *(_QWORD *)(a1 + 64)) != 0 && *(_DWORD *)(*(_QWORD *)v5 + 168))
  {
    sqlite3_log(27, "denying sync of invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    if ((a2 & 0xF) == 3)
      v6 = 85;
    else
      v6 = 0;
    if ((*(_BYTE *)(a1 + 128) & 2) != 0)
      v7 = 51;
    else
      v7 = v6;
    v8 = *(_DWORD *)(a1 + 24);
    if ((!v7 || fcntl(v8, v7, 0)) && fsync(v8))
    {
      *(_DWORD *)(a1 + 32) = *__error();
      v9 = *(const char **)(a1 + 56);
      v10 = *__error();
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v10, __strerrbuf, 0x4FuLL);
      v11 = &byte_1ACCBEAEE;
      if (v9)
        v11 = v9;
      v3 = 1034;
      sqlite3_log(1034, "os_unix.c:%d: (%d) %s(%s) - %s", 44634, v10, "full_fsync", v11, __strerrbuf);
    }
    else if ((*(_WORD *)(a1 + 30) & 8) != 0)
    {
      v15 = 0;
      if (!off_1EECACA60(*(const char **)(a1 + 56), &v15))
      {
        fsync(v15);
        if ((v15 & 0x80000000) == 0)
        {
          if (off_1EECAC8E0(v15))
          {
            v12 = *(const char **)(a1 + 56);
            v13 = *__error();
            v19 = 0u;
            v20 = 0u;
            v17 = 0u;
            v18 = 0u;
            *(_OWORD *)__strerrbuf = 0u;
            strerror_r(v13, __strerrbuf, 0x4FuLL);
            v14 = &byte_1ACCBEAEE;
            if (v12)
              v14 = v12;
            sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 44654, v13, "close", v14, __strerrbuf);
          }
        }
      }
      v3 = 0;
      *(_WORD *)(a1 + 30) &= ~8u;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

unint64_t sub_1ACB9F0C8(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;

  if (*(_DWORD *)(result + 120) >= a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 32);
    if ((_DWORD)v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * i);
        v9 = v6;
        if (v6)
        {
          do
          {
            v7 = *(_DWORD *)(v6 + 16);
            v6 = *(_QWORD *)(v6 + 24);
            if (v7 >= a2)
              result = sub_1ACC4DDE0((int *)v3, &v9);
            v9 = v6;
          }
          while (v6);
          v4 = *(unsigned int *)(v3 + 32);
        }
      }
    }
    v8 = a2 - 1;
    if (!a2)
      v8 = 0;
    *(_DWORD *)(v3 + 120) = v8;
  }
  return result;
}

uint64_t sub_1ACB9F16C(uint64_t a1, sqlite3 *db, char *zDb, int a4)
{
  uint64_t v6;

  if ((int)a1 <= a4)
  {
    if (off_1EECAD248)
      off_1EECAD248(a1);
    v6 = sqlite3_wal_checkpoint_v2(db, zDb, 0, 0, 0);
    if (off_1EECAD250)
      off_1EECAD250(v6);
  }
  return 0;
}

void sub_1ACB9F1D0(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _BOOL8 v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  BOOL v39;
  _BOOL4 v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = *(_QWORD *)(a1 + 16);
  v53 = 0;
  if (!a2 || !v8)
    return;
  v9 = a4;
  v13 = *(unsigned __int8 *)a2;
  v14 = v13 ^ 1u;
  switch(*(_BYTE *)a2)
  {
    case 0x13:
      sub_1ACBACA00(a1, a2[2], a3, a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 0x2B:
    case 0x2C:
      v15 = sub_1ACC0D84C((unsigned __int8 *)a2);
      if ((unsigned __int8 **)v15 != a2)
      {
        v20 = v15;
LABEL_43:
        sub_1ACB9F1D0(a1, v20);
        goto LABEL_54;
      }
      if (v13 == 44)
      {
        sub_1ACB9F1D0(a1, a2[2]);
        v20 = (uint64_t)a2[3];
        goto LABEL_43;
      }
      v52 = (*(_DWORD *)(a1 + 68) - 1);
      *(_DWORD *)(a1 + 68) = v52;
      sub_1ACBACA00(a1, a2[2], v52, v9 ^ 0x10, v16, v17, v18, v19);
      sub_1ACB9F1D0(a1, a2[3]);
      sub_1ACC0A574(v8, v52);
      goto LABEL_54;
    case 0x2D:
    case 0xAB:
      if (v13 == 45)
        v14 = 52;
      else
        v14 = 53;
      v9 = 128;
      goto LABEL_10;
    case 0x30:
      sub_1ACC0A5A4((unsigned int *)a1, (uint64_t)a2, a3, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1ACB9F1D0, a4, a6, a7, a8);
      goto LABEL_54;
    case 0x31:
      if ((_DWORD)a4)
      {
        sub_1ACBA1164((_QWORD **)a1, (uint64_t)a2, a3, a3, a5, a6, a7, a8);
      }
      else
      {
        v51 = (*(_DWORD *)(a1 + 68) - 1);
        *(_DWORD *)(a1 + 68) = v51;
        sub_1ACBA1164((_QWORD **)a1, (uint64_t)a2, a3, v51, a5, a6, a7, a8);
        sub_1ACC0A574(v8, v51);
      }
      goto LABEL_54;
    case 0x32:
    case 0x33:
      v29 = sub_1ACC09A28(a1, a2[2], (_DWORD *)&v53 + 1);
      v30 = v29;
      if (*(_BYTE *)(*(_QWORD *)v8 + 103))
        v31 = &byte_1EECAD280;
      else
        v31 = (char *)(*(_QWORD *)(v8 + 136) + 40 * *(int *)(v8 + 144) - 40);
      if (*((_DWORD *)v31 + 3) == (_DWORD)v29 && *v31 == 94)
        *((_WORD *)v31 + 1) |= 0x80u;
      v45 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v45)
      {
        *(_DWORD *)(v8 + 144) = v45 + 1;
        v28 = *(_QWORD *)(v8 + 136) + 40 * v45;
        *(_BYTE *)v28 = v13 ^ 1;
        *(_WORD *)(v28 + 2) = 0;
        *(_DWORD *)(v28 + 4) = v29;
        *(_DWORD *)(v28 + 8) = a3;
        *(_BYTE *)(v28 + 1) = 0;
        goto LABEL_50;
      }
      v43 = v8;
      v44 = v13 ^ 1u;
      goto LABEL_52;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
LABEL_10:
      v21 = a2[2];
      v22 = *v21;
      if (v22 == 176)
        v22 = v21[2];
      if (v22 == 138)
      {
        v23 = (int **)(*((_QWORD *)v21 + 4) + 32);
      }
      else
      {
        if (v22 != 177)
        {
LABEL_17:
          v24 = sub_1ACC09A28(a1, v21, (_DWORD *)&v53 + 1);
          v25 = sub_1ACC09A28(a1, a2[3], &v53);
          sub_1ACB9F66C(a1, a2[2], a2[3], v14, v24, v25, a3, v9, (*((_DWORD *)a2 + 1) >> 10) & 1);
          goto LABEL_54;
        }
        v23 = (int **)(v21 + 32);
      }
      if (**v23 <= 1)
        goto LABEL_17;
LABEL_18:
      v26 = *((_DWORD *)a2 + 1);
      if ((v26 & 0x20000001) != 0x20000000)
      {
        if ((v26 & 0x10000001) == 0x10000000)
          goto LABEL_54;
        v32 = sub_1ACC09A28(a1, (unsigned __int8 *)a2, (_DWORD *)&v53 + 1);
        v30 = v32;
        v33 = (_DWORD)v9 != 0;
        v34 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v34)
        {
          *(_DWORD *)(v8 + 144) = v34 + 1;
          v35 = *(_QWORD *)(v8 + 136) + 40 * v34;
          *(_DWORD *)v35 = 17;
          *(_DWORD *)(v35 + 4) = v32;
          *(_DWORD *)(v35 + 8) = a3;
          *(_DWORD *)(v35 + 12) = v33;
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v35 + 32) = 0;
          *(_QWORD *)(v35 + 16) = 0;
          goto LABEL_54;
        }
        v43 = v8;
        v44 = 17;
        v46 = a3;
        goto LABEL_53;
      }
      v27 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v27)
      {
        v43 = v8;
        v44 = 9;
        v30 = 0;
LABEL_52:
        v46 = a3;
        v33 = 0;
LABEL_53:
        sub_1ACBFF5AC(v43, v44, v30, v46, v33, a6, a7, a8);
        goto LABEL_54;
      }
      *(_DWORD *)(v8 + 144) = v27 + 1;
      v28 = *(_QWORD *)(v8 + 136) + 40 * v27;
      *(_QWORD *)v28 = 9;
      *(_DWORD *)(v28 + 8) = a3;
LABEL_50:
      *(_QWORD *)(v28 + 12) = 0;
      *(_QWORD *)(v28 + 28) = 0;
      *(_QWORD *)(v28 + 20) = 0;
      *(_DWORD *)(v28 + 36) = 0;
LABEL_54:
      v47 = HIDWORD(v53);
      if (HIDWORD(v53))
      {
        v48 = *(unsigned __int8 *)(a1 + 31);
        if (v48 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v48 + 1;
          *(_DWORD *)(a1 + 4 * v48 + 224) = v47;
        }
      }
      v49 = v53;
      if ((_DWORD)v53)
      {
        v50 = *(unsigned __int8 *)(a1 + 31);
        if (v50 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v50 + 1;
          *(_DWORD *)(a1 + 4 * v50 + 224) = v49;
        }
      }
      return;
    case 0xAF:
      v36 = *((unsigned __int8 *)a2 + 2);
      v37 = a2[3];
      while (1)
      {
        v38 = *((_DWORD *)v37 + 1);
        if ((v38 & 0x82000) == 0)
          break;
        if ((v38 & 0x80000) != 0)
          v37 = *(unsigned __int8 **)(*((_QWORD *)v37 + 4) + 8);
        else
          v37 = (unsigned __int8 *)*((_QWORD *)v37 + 2);
      }
      v39 = v36 == 171;
      v40 = v36 != 171;
      v41 = v39;
      v42 = a2[2];
      if (((v41 ^ (*(_BYTE *)(*((_QWORD *)v37 + 1) + 4) != 0)) & 1) != 0)
        sub_1ACBACA00(a1, v42, a3, (16 * v40), a5, a6, a7, a8);
      else
        sub_1ACB9F1D0(a1, v42);
      goto LABEL_54;
    default:
      goto LABEL_18;
  }
}

uint64_t sub_1ACB9F66C(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  char v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;

  if (*(_DWORD *)(result + 48))
    return result;
  v9 = a8;
  v16 = result;
  if (a9)
  {
    if ((a3[5] & 2) == 0)
    {
      if (a2 && (a2[5] & 2) != 0)
        goto LABEL_13;
      v17 = sub_1ACB78620(result, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_13;
      goto LABEL_15;
    }
LABEL_12:
    v18 = v16;
    v19 = a3;
LABEL_14:
    v17 = sub_1ACB78620(v18, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_15;
  }
  if ((a2[5] & 2) != 0)
  {
LABEL_13:
    v18 = v16;
    v19 = a2;
    goto LABEL_14;
  }
  if (a3 && (a3[5] & 2) != 0)
    goto LABEL_12;
  v17 = sub_1ACB78620(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v17)
    goto LABEL_12;
LABEL_15:
  v20 = sub_1ACB92644(a3);
  v21 = sub_1ACB92644(a2);
  if (v20 < 65 || v21 < 65)
  {
    if (v21 >= 65)
      v25 = v21;
    else
      v25 = v20;
    v24 = v25 | 0x40;
  }
  else if (v21 > 0x42 || v20 > 0x42)
  {
    v24 = 67;
  }
  else
  {
    v24 = 65;
  }
  result = sub_1ACBA86CC(*(uint64_t **)(v16 + 16), a4, a6, a7, a5, v17, 4294967294, v22);
  v26 = *(_QWORD *)(v16 + 16);
  v27 = *(_DWORD *)(v26 + 144);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v29 < 0 == v28)
    *(_WORD *)(*(_QWORD *)(v26 + 136) + 40 * v29 + 2) = (v24 | v9);
  return result;
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  uint64_t v5;

  return sub_1ACB5C66C((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, 128, 0, ppStmt, pzTail, v5);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_8;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
LABEL_8:
    v6 = &qword_1ACCB6E80;
    goto LABEL_9;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
LABEL_9:
  v8 = *((unsigned __int16 *)v6 + 10);
  if ((~v8 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 1)
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      if (!a1)
        return v9;
    }
    else
    {
      v9 = (const unsigned __int8 *)sub_1ACBF2B64((int *)v6, 1);
      if (!a1)
        return v9;
    }
  }
  else
  {
    v9 = (const unsigned __int8 *)v6[1];
    if (!a1)
      return v9;
  }
  v10 = *(_QWORD *)a1;
  v11 = *((_DWORD *)a1 + 13);
  if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    v12 = sub_1ACBF2990(v10, v11);
    v10 = *(_QWORD *)a1;
  }
  *((_DWORD *)a1 + 13) = v12;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
    xmmword_1ECD3B1D0(v13);
  return v9;
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;
  sqlite3_int64 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  double v15;

  if (a1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v4)
      xmmword_1ECD3B1C0(v4);
    v5 = *((_QWORD *)a1 + 20);
    if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
    {
      v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
      goto LABEL_9;
    }
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
  }
  v6 = &qword_1ACCB6E80;
LABEL_9:
  v8 = *((_WORD *)v6 + 10);
  if ((v8 & 0x24) != 0)
  {
    v9 = *v6;
  }
  else if ((v8 & 8) != 0)
  {
    v15 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v15 <= 9.22337204e18)
        v9 = (uint64_t)v15;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v9 = 0x8000000000000000;
    }
  }
  else if ((v8 & 0x12) != 0 && v6[1])
  {
    v9 = sub_1ACBF2FC0((uint64_t)v6);
  }
  else
  {
    v9 = 0;
  }
  if (a1)
  {
    v10 = *(_QWORD *)a1;
    v11 = *((_DWORD *)a1 + 13);
    if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      v12 = sub_1ACBF2990(v10, v11);
      v10 = *(_QWORD *)a1;
    }
    *((_DWORD *)a1 + 13) = v12;
    v13 = *(_QWORD *)(v10 + 24);
    if (v13)
      xmmword_1ECD3B1D0(v13);
  }
  return v9;
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  sqlite3_stmt *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v1 = pStmt;
  if (pStmt)
  {
    v2 = *(_QWORD *)pStmt;
    v3 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    if (v3)
      xmmword_1ECD3B1C0(v3);
    sub_1ACBC594C(v2, (uint64_t)v1);
    v4 = sub_1ACB68B58((_QWORD **)v1);
    *((_BYTE *)v1 + 267) = 1;
    *((_DWORD *)v1 + 13) = 0;
    *((_WORD *)v1 + 132) = -254;
    *((_QWORD *)v1 + 7) = 0;
    *(_QWORD *)((char *)v1 + 44) = 0xFFFFFFFF00000001;
    *((_DWORD *)v1 + 16) = 0;
    *((_QWORD *)v1 + 10) = 0;
    if (v4 || (LODWORD(v1) = 0, *(_BYTE *)(v2 + 103)))
      LODWORD(v1) = sub_1ACBF2990(v2, v4);
    v5 = *(_QWORD *)(v2 + 24);
    if (v5)
      xmmword_1ECD3B1D0(v5);
  }
  return (int)v1;
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v2)
      xmmword_1ECD3B1C0(*(_QWORD *)(*(_QWORD *)a1 + 24));
    v3 = *((_DWORD *)a1 + 8);
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      v6 = *((_QWORD *)a1 + 16);
      do
      {
        v7 = v6 + v4;
        if ((*(_WORD *)(v6 + v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32))
        {
          sub_1ACBF2A04(v7);
          v6 = *((_QWORD *)a1 + 16);
          v3 = *((_DWORD *)a1 + 8);
        }
        *(_WORD *)(v6 + v4 + 20) = 1;
        ++v5;
        v4 += 64;
      }
      while (v5 < v3);
    }
    if (*((_DWORD *)a1 + 93))
      *((_WORD *)a1 + 134) = *((_WORD *)a1 + 134) & 0xFFFC | 1;
    if (v2)
      xmmword_1ECD3B1D0(v2);
  }
  return 0;
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return sub_1ACB55484((char *)filename, (uint64_t *)ppDb, 6u, 0);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  int v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_14;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(189491);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
  {
    xmmword_1ECD3B1C0(v6);
    v7 = *((_QWORD *)a1 + 3);
    if (onoff)
      v8 = -1;
    else
      v8 = 255;
    *((_DWORD *)a1 + 22) = v8;
    if (v7)
      xmmword_1ECD3B1D0(v7);
  }
  else
  {
    if (onoff)
      v10 = -1;
    else
      v10 = 255;
    *((_DWORD *)a1 + 22) = v10;
  }
  return 0;
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  int v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_13;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(187086);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (ms < 1)
  {
    if (v6)
    {
      xmmword_1ECD3B1C0(v6);
      v9 = *((_QWORD *)a1 + 3);
      *(_OWORD *)((char *)a1 + 664) = 0u;
      *((_QWORD *)a1 + 85) = a1;
      *((_DWORD *)a1 + 172) = 0;
      if (v9)
        xmmword_1ECD3B1D0(v9);
    }
    else
    {
      *(_OWORD *)((char *)a1 + 664) = 0u;
      *((_QWORD *)a1 + 85) = a1;
      *((_DWORD *)a1 + 172) = 0;
    }
    *((_DWORD *)a1 + 193) = 0;
  }
  else if (v6)
  {
    xmmword_1ECD3B1C0(v6);
    v7 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 83) = sub_1ACBCF6E8;
    *((_QWORD *)a1 + 84) = a1;
    *((_QWORD *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    if (v7)
      xmmword_1ECD3B1D0(v7);
    *((_DWORD *)a1 + 193) = ms;
  }
  else
  {
    *((_QWORD *)a1 + 83) = sub_1ACBCF6E8;
    *((_QWORD *)a1 + 84) = a1;
    *((_QWORD *)a1 + 85) = a1;
    *((_DWORD *)a1 + 172) = 0;
    *((_DWORD *)a1 + 193) = ms;
  }
  return 0;
}

int sqlite3_changes(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_DWORD *)a1 + 30);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186273);
  return 0;
}

int sqlite3_set_authorizer(sqlite3 *a1, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_16;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(127440);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  *((_QWORD *)a1 + 66) = xAuth;
  *((_QWORD *)a1 + 67) = pUserData;
  if (xAuth)
  {
    for (i = *((_QWORD *)a1 + 1); i; i = *(_QWORD *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 2;
  }
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return 0;
}

uint64_t sub_1ACB9FF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  int v9;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v8 = (char *)a3;
  v9 = a2;
  v11 = *(_DWORD *)(a1 + 144);
  if (v11 + (int)a2 > *(_DWORD *)(a1 + 148))
  {
    if (sub_1ACBFF63C(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    v11 = *(_DWORD *)(a1 + 144);
  }
  v13 = *(_QWORD *)(a1 + 136);
  result = v13 + 40 * v11;
  if (v9 >= 1)
  {
    v14 = v13 + 40 * v11 + 8;
    v15 = v9;
    do
    {
      v16 = *v8;
      *(_BYTE *)(v14 - 8) = v16;
      *(_DWORD *)(v14 - 4) = v8[1];
      v17 = v8[2];
      *(_DWORD *)v14 = v17;
      if ((byte_1ACCB6485[v16] & 1) != 0 && v17 >= 1)
        *(_DWORD *)v14 = *(_DWORD *)(a1 + 144) + v17;
      *(_DWORD *)(v14 + 4) = v8[3];
      *(_BYTE *)(v14 - 7) = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_WORD *)(v14 - 6) = 0;
      v14 += 40;
      v8 += 4;
      --v15;
    }
    while (v15);
    v11 = *(_DWORD *)(a1 + 144);
  }
  *(_DWORD *)(a1 + 144) = v11 + v9;
  return result;
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)pStmt;
  if (pStmt)
  {
    if (*(_QWORD *)(*(_QWORD *)pStmt + 24))
    {
      xmmword_1ECD3B1C0();
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
      LODWORD(v1) = v1[130];
      if (v2)
        xmmword_1ECD3B1D0();
    }
    else
    {
      LODWORD(v1) = *((unsigned __int16 *)pStmt + 130);
    }
  }
  return (int)v1;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  double v15;

  if (a1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v4)
      xmmword_1ECD3B1C0(v4);
    v5 = *((_QWORD *)a1 + 20);
    if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
    {
      v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
      goto LABEL_9;
    }
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
  }
  v6 = &qword_1ACCB6E80;
LABEL_9:
  v8 = *((_WORD *)v6 + 10);
  if ((v8 & 0x24) != 0)
  {
    v9 = *(double *)v6;
  }
  else if ((v8 & 8) != 0)
  {
    v15 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v15 <= 9.22337204e18)
        *(_QWORD *)&v9 = (uint64_t)v15;
      else
        LODWORD(v9) = -1;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else if ((v8 & 0x12) != 0 && v6[1])
  {
    LODWORD(v9) = sub_1ACBF2FC0((uint64_t)v6);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (a1)
  {
    v10 = *(_QWORD *)a1;
    v11 = *((_DWORD *)a1 + 13);
    if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      v12 = sub_1ACBF2990(v10, v11);
      v10 = *(_QWORD *)a1;
    }
    *((_DWORD *)a1 + 13) = v12;
    v13 = *(_QWORD *)(v10 + 24);
    if (v13)
      xmmword_1ECD3B1D0(v13);
  }
  return LODWORD(v9);
}

uint64_t sub_1ACBA01F4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112))
    return *(unsigned int *)(a1 + 116);
  if ((*(_WORD *)(a1 + 30) & 0x10) != 0)
    *(_DWORD *)(a1 + 116) |= 0x1000u;
  *(_DWORD *)(a1 + 112) = 4096;
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1ACBA0228(uint64_t a1, signed int a2)
{
  return sub_1ACBE28AC(a1, a2, 0);
}

uint64_t sub_1ACBA0230(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

_QWORD *sub_1ACBA0238(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  __int16 v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  const char **v20;
  size_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int i;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  const void *v49;
  size_t v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t k;
  uint64_t v60;
  unsigned int v61;
  char v62;
  __int16 v63;
  int v64;
  int v65;
  uint64_t v66;

  v10 = (_QWORD *)*result;
  v11 = result[43];
  if (!v11)
    goto LABEL_3;
  v12 = (uint64_t)result;
  if (*((_BYTE *)result + 302) == 1)
    goto LABEL_3;
  v66 = *result;
  if (!a2)
  {
    v15 = *(__int16 *)(v11 + 54);
    if (v15 < 1)
      goto LABEL_5;
    if (a4)
    {
      v14 = *(_DWORD *)a4;
      if (*(_DWORD *)a4 != 1)
      {
        sub_1ACBCB308((uint64_t)result, "foreign key on %s should reference only one column of table %T", a3, (uint64_t)a4, a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(v11 + 8) + 16 * (v15 - 1)));
        return sub_1ACC010B0(v10, a4);
      }
      goto LABEL_15;
    }
    v16 = a5;
    v14 = 1;
LABEL_26:
    v64 = 0;
    v65 = v14;
    v17 = (int *)(a3 + 8);
    v18 = *(unsigned int *)(a3 + 8) + 16 * (v14 - 1) + 81;
    if (!v10)
      goto LABEL_22;
    goto LABEL_27;
  }
  v14 = *(_DWORD *)a2;
  if (!a4)
  {
    v16 = a5;
    goto LABEL_26;
  }
  if (*(_DWORD *)a4 != v14)
  {
    sub_1ACBCB308((uint64_t)result, "number of columns in foreign key does not match the number of columns in the referenced table", a3, (uint64_t)a4, a5, a6, a7, a8, v62);
LABEL_4:
    result = sub_1ACC010B0(v10, a2);
    goto LABEL_5;
  }
LABEL_15:
  v16 = a5;
  v65 = v14;
  v17 = (int *)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 8) + 16 * (v14 - 1) + 81;
  v19 = *(unsigned int *)a4;
  if ((int)v19 >= 1)
  {
    v20 = (const char **)(a4 + 2);
    do
    {
      if (*v20)
        v21 = strlen(*v20) & 0x3FFFFFFF;
      else
        v21 = 0;
      v18 += v21 + 1;
      v20 += 3;
      --v19;
    }
    while (v19);
  }
  v64 = 1;
  v10 = (_QWORD *)v66;
  if (!v66)
  {
LABEL_22:
    result = (_QWORD *)sub_1ACB5D828(v18);
    v22 = result;
    if (!result)
      goto LABEL_3;
    goto LABEL_28;
  }
LABEL_27:
  result = (_QWORD *)sub_1ACBE1124((uint64_t)v10, v18);
  v22 = result;
  if (!result)
    goto LABEL_3;
LABEL_28:
  v63 = v16;
  bzero(v22, v18);
  *v22 = v11;
  v23 = (unsigned __int8 *)&v22[2 * v65 + 8];
  v22[1] = *(_QWORD *)(v11 + 72);
  v22[2] = v23;
  v24 = *(unsigned __int8 *)(v12 + 302);
  if (v24 > 3 || v24 == 2)
  {
    v60 = *(_QWORD *)v12 ? sub_1ACBE1124(*(_QWORD *)v12, 0x20uLL) : sub_1ACB5D828(32);
    if (v60)
    {
      *(_OWORD *)v60 = 0u;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_QWORD *)v60 = v23;
      *(_OWORD *)(v60 + 8) = *(_OWORD *)a3;
      *(_QWORD *)(v60 + 24) = *(_QWORD *)(v12 + 408);
      *(_QWORD *)(v12 + 408) = v60;
    }
  }
  memcpy(v23, *(const void **)a3, *(unsigned int *)(a3 + 8));
  v23[*(unsigned int *)(a3 + 8)] = 0;
  v30 = *v23;
  if ((char)byte_1ACCB6548[*v23] < 0)
  {
    v31 = 0;
    if (v30 == 91)
      v30 = 93;
    for (i = 1; ; ++i)
    {
      v33 = i;
      v34 = v23[i];
      if (v34 == v30)
      {
        ++i;
        LOBYTE(v34) = v30;
        if (v23[v33 + 1] != v30)
          break;
      }
      v23[v31++] = v34;
    }
    v23[v31] = 0;
  }
  v35 = *v17;
  *((_DWORD *)v22 + 10) = v65;
  if (a2)
  {
    if (v65 >= 1)
    {
      v36 = 0;
      v37 = *(__int16 *)(v11 + 54);
      v10 = (_QWORD *)v66;
      while (1)
      {
        if (v37 < 1)
        {
          v61 = 0;
          v10 = (_QWORD *)v66;
LABEL_89:
          sub_1ACBCB308(v12, "unknown column \"%s\" in foreign key definition", v25, v26, v65, v27, v28, v29, a2[3 * v61 + 2]);
LABEL_90:
          result = sub_1ACBE0F9C(v10, v22);
          goto LABEL_3;
        }
        v38 = 0;
        v39 = a2[3 * v36 + 2];
LABEL_45:
        for (j = 0; ; ++j)
        {
          v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 16 * v38) + j);
          v26 = *(unsigned __int8 *)(v39 + j);
          if ((_DWORD)v25 == (_DWORD)v26)
            break;
          v25 = byte_1ACCB6333[v25];
          v26 = byte_1ACCB6333[v26];
          if ((_DWORD)v25 != (_DWORD)v26)
          {
            if (++v38 != v37)
              goto LABEL_45;
            v61 = v36;
            goto LABEL_89;
          }
LABEL_47:
          ;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 16 * v38) + j))
          goto LABEL_47;
        v41 = &v22[2 * v36];
        *((_DWORD *)v41 + 16) = v38;
        v42 = v41 + 8;
        if (*(unsigned __int8 *)(v12 + 302) >= 2u)
        {
          v43 = *(_QWORD **)(v12 + 408);
          if (v43)
          {
            while (*v43 != v39)
            {
              v43 = (_QWORD *)v43[3];
              if (!v43)
                goto LABEL_42;
            }
            *v43 = v42;
          }
        }
LABEL_42:
        if (++v36 == v65)
          goto LABEL_59;
      }
    }
  }
  else
  {
    *((_DWORD *)v22 + 16) = *(__int16 *)(v11 + 54) - 1;
LABEL_59:
    v44 = v64;
    if (v65 <= 0)
      v44 = 0;
    if (v44 == 1)
    {
      v45 = 0;
      v46 = &v23[v35 + 1];
      do
      {
        v48 = &a4[3 * v45];
        v49 = (const void *)v48[2];
        if (v49)
          v50 = strlen((const char *)v48[2]) & 0x3FFFFFFF;
        else
          v50 = 0;
        v22[2 * v45 + 9] = v46;
        if (*(unsigned __int8 *)(v12 + 302) >= 2u)
        {
          v51 = *(const void ***)(v12 + 408);
          if (v51)
          {
            while (*v51 != v49)
            {
              v51 = (const void **)v51[3];
              if (!v51)
                goto LABEL_64;
            }
            *v51 = v46;
          }
        }
LABEL_64:
        memcpy(v46, v49, v50);
        v47 = &v46[v50];
        *v47 = 0;
        v46 = v47 + 1;
        ++v45;
      }
      while (v45 != v65);
    }
  }
  *((_BYTE *)v22 + 44) = 0;
  *(_WORD *)((char *)v22 + 45) = v63;
  result = (_QWORD *)sub_1ACB57390(*(_QWORD *)(v11 + 96) + 80, (unsigned __int8 *)v22[2], (uint64_t)v22);
  if (result == v22)
  {
    v10 = (_QWORD *)v66;
    if (!*(_BYTE *)(v66 + 103) && !*(_BYTE *)(v66 + 104))
    {
      *(_BYTE *)(v66 + 103) = 1;
      if (*(int *)(v66 + 220) >= 1)
        *(_DWORD *)(v66 + 424) = 1;
      ++*(_DWORD *)(v66 + 432);
      *(_WORD *)(v66 + 436) = 0;
      v58 = *(_QWORD *)(v66 + 344);
      if (v58)
      {
        sub_1ACBCB308(v58, "out of memory", v52, v53, v54, v55, v56, v57, v62);
        for (k = *(_QWORD *)(v66 + 344); ; ++*(_DWORD *)(k + 48))
        {
          *(_DWORD *)(k + 24) = 7;
          k = *(_QWORD *)(k + 256);
          if (!k)
            break;
        }
      }
    }
    goto LABEL_90;
  }
  if (result)
  {
    v22[3] = result;
    result[4] = v22;
  }
  *(_QWORD *)(v11 + 72) = v22;
  v10 = (_QWORD *)v66;
LABEL_3:
  if (a2)
    goto LABEL_4;
LABEL_5:
  if (a4)
    return sub_1ACC010B0(v10, a4);
  return result;
}

uint64_t sub_1ACBA07A4(uint64_t a1, const char *a2, const char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v27;

  v4 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 197))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 32 * a4);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, const char *, const char *, uint64_t, _QWORD))(v4 + 528))(*(_QWORD *)(v4 + 536), 20, a2, a3, v10, *(_QWORD *)(a1 + 368));
    if ((_DWORD)v11 == 1)
    {
      v18 = sqlite3_mprintf("%s.%s", a2, a3);
      if (a4 || *(int *)(v4 + 40) >= 3)
        LOBYTE(v18) = sqlite3_mprintf("%s.%z", v10, v18);
      sub_1ACBCB308(a1, "access to %z is prohibited", v19, v20, v21, v22, v23, v24, (char)v18);
      v5 = 1;
      v25 = 23;
    }
    else
    {
      v5 = v11;
      if ((v11 & 0xFFFFFFFD) == 0)
        return v5;
      sub_1ACBCB308(a1, "authorizer malfunction", v12, v13, v14, v15, v16, v17, v27);
      v25 = 1;
    }
    *(_DWORD *)(a1 + 24) = v25;
    return v5;
  }
  return 0;
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return sub_1ACBC7DC0((uint64_t *)a1, N, 0, 0);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int16 v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_10;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v9 = *(_QWORD *)a1;
    *(_DWORD *)(v9 + 80) = 25;
    sub_1ACBE938C(v9, 25);
LABEL_10:
    v6 = &qword_1ACCB6E80;
    LOBYTE(v7) = 1;
    goto LABEL_11;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  v7 = *((_WORD *)v6 + 10);
  if ((v7 & 8) != 0)
  {
    v8 = *(double *)v6;
    if (!a1)
      return v8;
    goto LABEL_18;
  }
LABEL_11:
  if ((v7 & 0x24) != 0)
  {
    v8 = (double)*v6;
    if (!a1)
      return v8;
  }
  else if ((v7 & 0x12) != 0)
  {
    v8 = sub_1ACBF2F88((uint64_t)v6);
    if (!a1)
      return v8;
  }
  else
  {
    v8 = 0.0;
    if (!a1)
      return v8;
  }
LABEL_18:
  v10 = *(_QWORD *)a1;
  v11 = *((_DWORD *)a1 + 13);
  if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    v12 = sub_1ACBF2990(v10, v11);
    v10 = *(_QWORD *)a1;
  }
  *((_DWORD *)a1 + 13) = v12;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
    xmmword_1ECD3B1D0(v13);
  return v8;
}

void sub_1ACBA09CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  _DWORD *v35;
  char v36;
  uint64_t v37;

  if (a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(char *)(v11 + 1);
    if (!*(_BYTE *)(v11 + 1))
    {
      LODWORD(v14) = *(_DWORD *)(a1 + 296) + 1;
      *(_DWORD *)(a1 + 296) = v14;
LABEL_43:
      *(_DWORD *)(v8 + 48) = v14;
      if ((int)v14 <= *(_DWORD *)(v10 + 172))
        return;
      sub_1ACBCB308(a1, "too many SQL variables", a3, a4, a5, a6, a7, a8, v36);
      v22 = *(_QWORD *)a1;
      while (1)
      {
        if ((*(_BYTE *)(v8 + 4) & 3) == 0)
        {
          v23 = *(_DWORD *)(v8 + 56);
          if (v23 > 0)
            break;
        }
        v8 = *(_QWORD *)(v8 + 16);
        if (!v8)
          return;
      }
      goto LABEL_48;
    }
    v13 = a3;
    if (*(_BYTE *)v11 != 63)
    {
      v16 = *(int **)(a1 + 320);
      if (v16)
      {
        v17 = v16[1];
        v18 = 2;
        while (1)
        {
          v19 = v18;
          v20 = (const char *)&v16[v18 + 2];
          if (!strncmp(v20, (const char *)v11, v13) && !v20[v13])
            break;
          v18 = v16[v19 + 1] + v19;
          if (v18 >= v17)
            goto LABEL_13;
        }
        LODWORD(v14) = v16[v19];
        if ((_DWORD)v14)
          goto LABEL_43;
      }
LABEL_13:
      LODWORD(v14) = *(_DWORD *)(a1 + 296) + 1;
      *(_DWORD *)(a1 + 296) = v14;
      goto LABEL_28;
    }
    v37 = 0;
    if ((_DWORD)a3 == 2)
    {
      v14 = v12 - 48;
      v15 = *(_DWORD *)(v10 + 172);
    }
    else
    {
      v21 = sub_1ACBF2FF8((unsigned __int8 *)(v11 + 1), &v37, (int)a3 - 1, 1) != 0;
      v14 = v37;
      v15 = *(_DWORD *)(v10 + 172);
      if (v21)
        goto LABEL_19;
    }
    if (v14 >= 1 && v14 <= v15)
    {
      if (*(_DWORD *)(a1 + 296) >= (int)v14)
      {
        v16 = *(int **)(a1 + 320);
        if (v16)
        {
          v24 = 2;
          while (v16[v24] != (_DWORD)v14)
          {
            v24 += v16[v24 + 1];
            if (v24 >= v16[1])
              goto LABEL_28;
          }
          goto LABEL_43;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 296) = v14;
        v16 = *(int **)(a1 + 320);
      }
LABEL_28:
      v25 = v13 / 4;
      v26 = v13 / 4 + 3;
      if (v16)
      {
        v27 = v16[1];
        v28 = *v16;
        v29 = v27 + v26;
        if (v27 + v26 <= (int)v28)
        {
LABEL_41:
          v34 = &v16[v27];
          *v34 = v14;
          v34[1] = v26;
          v35 = v34 + 2;
          v16[1] = v29;
          memcpy(v34 + 2, (const void *)v11, v13);
          *((_BYTE *)v35 + v13) = 0;
          goto LABEL_42;
        }
        v30 = 2 * v28 + v26;
        v31 = 4 * v30;
        if (*(_QWORD *)(v10 + 512) > (unint64_t)v16)
        {
          if (*(_QWORD *)(v10 + 496) <= (unint64_t)v16)
          {
            if (v31 < 0x81)
            {
LABEL_34:
              *v16 = v30;
              goto LABEL_41;
            }
          }
          else if (*(_QWORD *)(v10 + 504) <= (unint64_t)v16 && v31 <= *(unsigned __int16 *)(v10 + 438))
          {
            goto LABEL_34;
          }
        }
        v33 = sub_1ACBE11D0(v10, v16, v31);
        if (v33)
        {
          v27 = *(_DWORD *)(v33 + 4);
          v16 = (int *)v33;
          goto LABEL_40;
        }
      }
      else
      {
        LODWORD(v30) = v25 + 13;
        v32 = sub_1ACBE1124(v10, 4 * (v25 + 13));
        v16 = (int *)v32;
        if (v32)
        {
          v27 = 2;
          *(_DWORD *)(v32 + 4) = 2;
LABEL_40:
          *v16 = v30;
          v29 = v27 + v26;
          goto LABEL_41;
        }
      }
LABEL_42:
      *(_QWORD *)(a1 + 320) = v16;
      goto LABEL_43;
    }
LABEL_19:
    sub_1ACBCB308(a1, "variable number must be between ?1 and ?%d", a3, a4, a5, a6, a7, a8, v15);
    v22 = *(_QWORD *)a1;
    while (1)
    {
      if ((*(_BYTE *)(v8 + 4) & 3) == 0)
      {
        v23 = *(_DWORD *)(v8 + 56);
        if (v23 > 0)
          break;
      }
      v8 = *(_QWORD *)(v8 + 16);
      if (!v8)
        return;
    }
LABEL_48:
    *(_DWORD *)(v22 + 84) = v23;
  }
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return sub_1ACBA0CE0((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, 1u);
}

uint64_t sub_1ACBA0CE0(uint64_t *a1, int a2, char *a3, uint64_t a4, uint64_t (*a5)(uint64_t result), unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2 <= 0)
  {
    if (a1)
    {
      v20 = *a1;
      if (*a1)
      {
        v12 = 25;
        *(_DWORD *)(v20 + 80) = 25;
        sub_1ACBE938C(v20, 25);
        goto LABEL_14;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    v12 = 25;
  }
  else
  {
    v11 = (a2 - 1);
    v12 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
    if (!(_DWORD)v12)
    {
      if (a3)
      {
        v13 = a1[16];
        v14 = sub_1ACB57870(v13 + (v11 << 6), a3, a4, a6, a5);
        v15 = v14;
        if (a6 && !v14)
        {
          v16 = *(unsigned __int8 *)(*a1 + 100);
          v17 = v13 + (v11 << 6);
          v18 = *(_WORD *)(v17 + 20);
          v19 = (_BYTE *)(v17 + 22);
          if ((v18 & 2) == 0)
          {
            v12 = 0;
            *v19 = v16;
            goto LABEL_21;
          }
          if (*v19 == v16)
            goto LABEL_20;
          v15 = sub_1ACBB0FEC((int *)(v13 + (v11 << 6)), v16);
        }
        if (v15)
        {
          v21 = *a1;
          *(_DWORD *)(v21 + 80) = v15;
          sub_1ACBE938C(v21, v15);
          v12 = sub_1ACBF2990(*a1, v15);
          goto LABEL_21;
        }
      }
LABEL_20:
      v12 = 0;
LABEL_21:
      v22 = *(_QWORD *)(*a1 + 24);
      if (v22)
        xmmword_1ECD3B1D0(v22);
      return v12;
    }
  }
LABEL_14:
  if ((unint64_t)a5 + 1 >= 2)
    a5((uint64_t)a3);
  return v12;
}

uint64_t sub_1ACBA0E50(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
  {
    sqlite3_log(21, "API called with NULL prepared statement");
LABEL_17:
    v10 = 98627;
    return sub_1ACBBE20C(v10);
  }
  if (!*(_QWORD *)a1)
  {
    sqlite3_log(21, "API called with finalized prepared statement");
    goto LABEL_17;
  }
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (*(_BYTE *)(a1 + 267) != 1)
  {
    v11 = *(_QWORD *)a1;
    *(_DWORD *)(v11 + 80) = 21;
    sub_1ACBE938C(v11, 21);
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v12)
      xmmword_1ECD3B1D0(v12);
    sqlite3_log(21, "bind on a busy prepared statement: [%s]", *(const char **)(a1 + 320));
    v10 = 98635;
    return sub_1ACBBE20C(v10);
  }
  if (*(_DWORD *)(a1 + 32) <= a2)
  {
    v14 = *(_QWORD *)a1;
    v9 = 25;
    *(_DWORD *)(v14 + 80) = 25;
    sub_1ACBE938C(v14, 25);
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v15)
      xmmword_1ECD3B1D0(v15);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 128) + ((unint64_t)a2 << 6);
    v6 = (_WORD *)(v5 + 20);
    if ((*(_WORD *)(v5 + 20) & 0x9000) != 0 || *(_DWORD *)(v5 + 32))
      sub_1ACBF2A04(v5);
    *v6 = 1;
    *(_DWORD *)(*(_QWORD *)a1 + 80) = 0;
    v7 = *(_DWORD *)(a1 + 372);
    if (!v7)
      return 0;
    v8 = 1 << a2;
    if (a2 > 0x1E)
      v8 = 0x80000000;
    if ((v7 & v8) != 0)
    {
      v9 = 0;
      *(_WORD *)(a1 + 268) = *(_WORD *)(a1 + 268) & 0xFFFC | 1;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

int sqlite3_expired(sqlite3_stmt *a1)
{
  uint64_t v2;
  _BOOL4 v3;

  if (!a1)
    return 1;
  if (!*(_QWORD *)(*(_QWORD *)a1 + 24))
    return (*((_WORD *)a1 + 134) & 3) != 0;
  xmmword_1ECD3B1C0();
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = (*((_WORD *)a1 + 134) & 3) != 0;
  if (v2)
    xmmword_1ECD3B1D0();
  return v3;
}

void sqlite3_progress_handler(sqlite3 *a1, int a2, int (__cdecl *a3)(void *), void *a4)
{
  int v5;
  const char *v6;
  uint64_t v10;
  int (__cdecl *v11)(void *);
  void *v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = "NULL";
    goto LABEL_18;
  }
  v5 = *((unsigned __int8 *)a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1ACBBE20C(187061);
    return;
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    xmmword_1ECD3B1C0(v10);
  if (a2 <= 0)
    v11 = 0;
  else
    v11 = a3;
  if (a2 <= 0)
    v12 = 0;
  else
    v12 = a4;
  *((_QWORD *)a1 + 68) = v11;
  *((_DWORD *)a1 + 140) = a2 & ~(a2 >> 31);
  *((_QWORD *)a1 + 69) = v12;
  v13 = *((_QWORD *)a1 + 3);
  if (v13)
    xmmword_1ECD3B1D0(v13);
}

void sub_1ACBA1164(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int **v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  unsigned __int8 **v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  int v127;
  int v128;
  int **v129;
  unsigned __int8 *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  _QWORD *v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned __int8 *v159;
  _QWORD *v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;

  v8 = a4;
  v9 = a3;
  v166 = 0;
  v164 = 0;
  v12 = *((_BYTE *)a1 + 35);
  v13 = *(unsigned __int8 **)(a2 + 16);
  if (sub_1ACC0C25C(a1, a2, a3, a4, a5, a6, a7, a8))
    return;
  v160 = (_QWORD *)sub_1ACC0C364((uint64_t *)a1, a2);
  v14 = *(unsigned __int8 **)(a2 + 16);
  v15 = *v14;
  if (v15 == 176)
    v15 = v14[2];
  v159 = v13;
  if (v15 == 138)
  {
    v14 = (unsigned __int8 *)*((_QWORD *)v14 + 4);
  }
  else if (v15 != 177)
  {
    v16 = 1;
    goto LABEL_9;
  }
  v16 = **((unsigned int **)v14 + 4);
LABEL_9:
  v17 = 5 * (int)v16;
  v18 = v17 + 1;
  v161 = v9;
  v162 = v8;
  if (*a1)
    v19 = (void *)sub_1ACBE1124((uint64_t)*a1, v17 + 1);
  else
    v19 = (void *)sub_1ACB5D828(v17 + 1);
  v22 = (uint64_t)v19;
  v154 = v16;
  if (v19)
    bzero(v19, v18);
  v155 = (_QWORD *)v22;
  if (!*((_BYTE *)*a1 + 103))
  {
    v23 = (uint64_t)a1[2];
    if (v161 == v162)
      v24 = 0;
    else
      v24 = &v166;
    v25 = sub_1ACBA1EF4((uint64_t)a1, a2, 3, (uint64_t)v24, v22, &v164, v20, v21);
    v32 = v25;
    *((_BYTE *)a1 + 35) = 0;
    v33 = *v159;
    v34 = v33;
    if (v33 == 176)
      v34 = v159[2];
    v165 = 0;
    if (v34 == 138)
    {
      v35 = (unsigned int **)(*((_QWORD *)v159 + 4) + 32);
    }
    else
    {
      if (v34 != 177)
        goto LABEL_30;
      v35 = (unsigned int **)(v159 + 32);
    }
    v36 = **v35;
    if ((_DWORD)v36 != 1)
    {
      if (v33 == 138)
      {
        v37 = sub_1ACBA2944(a1, v159, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        v38 = *((_DWORD *)a1 + 14);
        v37 = (v38 + 1);
        *((_DWORD *)a1 + 14) = v38 + v36;
        if ((int)v36 >= 1)
        {
          v156 = v25;
          v39 = 0;
          v40 = 24 * v36;
          v41 = (v38 + 1);
          do
          {
            sub_1ACC0D760(a1, *(_QWORD *)(*((_QWORD *)v159 + 4) + v39 + 8), v41);
            v39 += 24;
            v41 = (v41 + 1);
          }
          while (v40 != v39);
          v32 = v156;
        }
      }
LABEL_37:
      *((_BYTE *)a1 + 35) = v12;
      v153 = v37;
      if ((int)v154 < 1)
      {
        LODWORD(v42) = 0;
      }
      else
      {
        v42 = 0;
        while (v42 == *((_DWORD *)v155 + v42))
        {
          if (v154 == ++v42)
            goto LABEL_58;
        }
      }
      if ((_DWORD)v42 != (_DWORD)v154)
      {
        if ((_DWORD)v154 == 1)
        {
          if (*((_BYTE *)a1 + 31))
          {
            v43 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v43;
            v37 = *((unsigned int *)a1 + v43 + 56);
          }
          else
          {
            v37 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v37;
          }
        }
        else
        {
          v44 = *((_DWORD *)a1 + 10);
          v45 = __OFSUB__(v44, (_DWORD)v154);
          v46 = v44 - v154;
          if (v46 < 0 != v45)
          {
            v47 = *((_DWORD *)a1 + 14);
            v37 = (v47 + 1);
            *((_DWORD *)a1 + 14) = v47 + v154;
          }
          else
          {
            v37 = *((unsigned int *)a1 + 11);
            *((_DWORD *)a1 + 10) = v46;
            *((_DWORD *)a1 + 11) = v37 + v154;
          }
          if ((int)v154 < 1)
            goto LABEL_58;
        }
        v48 = (int *)v155;
        v49 = v153;
        v50 = v154;
        do
        {
          v52 = *v48++;
          v27 = (v52 + v37);
          v53 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) > v53)
          {
            *(_DWORD *)(v23 + 144) = v53 + 1;
            v51 = *(_QWORD *)(v23 + 136) + 40 * v53;
            *(_DWORD *)v51 = 80;
            *(_DWORD *)(v51 + 4) = v49;
            *(_DWORD *)(v51 + 8) = v27;
            *(_QWORD *)(v51 + 12) = 0;
            *(_QWORD *)(v51 + 28) = 0;
            *(_QWORD *)(v51 + 20) = 0;
            *(_DWORD *)(v51 + 36) = 0;
          }
          else
          {
            sub_1ACBFF5AC(v23, 80, v49, v27, 0, v29, v30, v31);
          }
          v49 = (v49 + 1);
          --v50;
        }
        while (v50);
      }
LABEL_58:
      if (v32 == 5)
      {
        v157 = *((_DWORD *)a1 + 17);
        *((_DWORD *)a1 + 17) = v157 - 1;
        v163 = 0;
        v54 = *(int **)(a2 + 32);
        v58 = sub_1ACB78620((uint64_t)a1, *(unsigned __int8 **)(a2 + 16), v26, v27, v28, v29, v30, v31);
        v59 = 0;
        v60 = v161;
        if (v161 != v162)
        {
          if (*((_BYTE *)a1 + 31))
          {
            v61 = *((_BYTE *)a1 + 31) - 1;
            *((_BYTE *)a1 + 31) = v61;
            v59 = *((unsigned int *)a1 + v61 + 56);
          }
          else
          {
            v59 = (*((_DWORD *)a1 + 14) + 1);
            *((_DWORD *)a1 + 14) = v59;
          }
          v84 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) <= v84)
          {
            sub_1ACBFF5AC(v23, 102, v37, v37, v59, v55, v56, v57);
          }
          else
          {
            *(_DWORD *)(v23 + 144) = v84 + 1;
            v85 = *(_QWORD *)(v23 + 136) + 40 * v84;
            *(_DWORD *)v85 = 102;
            *(int32x2_t *)(v85 + 4) = vdup_n_s32(v37);
            *(_DWORD *)(v85 + 12) = v59;
            *(_QWORD *)(v85 + 24) = 0;
            *(_QWORD *)(v85 + 32) = 0;
            *(_QWORD *)(v85 + 16) = 0;
          }
        }
        if (*v54 < 1)
        {
LABEL_141:
          if ((_DWORD)v59)
          {
            v108 = *(_DWORD *)(v23 + 144);
            if (*(_DWORD *)(v23 + 148) <= v108)
            {
              sub_1ACBFF5AC(v23, 50, v59, v162, 0, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)(v23 + 144) = v108 + 1;
              v109 = *(_QWORD *)(v23 + 136) + 40 * v108;
              *(_DWORD *)v109 = 50;
              *(_DWORD *)(v109 + 4) = v59;
              *(_DWORD *)(v109 + 8) = v162;
              *(_QWORD *)(v109 + 12) = 0;
              *(_QWORD *)(v109 + 28) = 0;
              *(_QWORD *)(v109 + 20) = 0;
              *(_DWORD *)(v109 + 36) = 0;
            }
            v110 = *(_DWORD *)(v23 + 144);
            if (*(_DWORD *)(v23 + 148) <= v110)
            {
              sub_1ACBFF5AC(v23, 9, 0, v60, 0, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)(v23 + 144) = v110 + 1;
              v111 = *(_QWORD *)(v23 + 136) + 40 * v110;
              *(_QWORD *)v111 = 9;
              *(_DWORD *)(v111 + 8) = v60;
              *(_QWORD *)(v111 + 12) = 0;
              *(_QWORD *)(v111 + 28) = 0;
              *(_QWORD *)(v111 + 20) = 0;
              *(_DWORD *)(v111 + 36) = 0;
            }
          }
          v112 = *(_QWORD *)(v23 + 24);
          v113 = -v157;
          if (*(_DWORD *)(v112 + 68) + *(_DWORD *)(v112 + 72) < 0)
          {
            sub_1ACC0D5D4(v112, v23, v113);
            if (!(_DWORD)v59)
              goto LABEL_206;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v112 + 80) + 4 * v113) = *(_DWORD *)(v23 + 144);
            if (!(_DWORD)v59)
              goto LABEL_206;
          }
          v114 = *((unsigned __int8 *)a1 + 31);
          if (v114 <= 7)
          {
            *((_BYTE *)a1 + 31) = v114 + 1;
            *((_DWORD *)a1 + v114 + 56) = v59;
          }
LABEL_206:
          if ((_DWORD)v37 != v153)
          {
            if ((_DWORD)v37)
            {
              v150 = *((unsigned __int8 *)a1 + 31);
              if (v150 <= 7)
              {
                *((_BYTE *)a1 + 31) = v150 + 1;
                *((_DWORD *)a1 + v150 + 56) = v37;
              }
            }
          }
          goto LABEL_15;
        }
        v86 = 0;
        while (1)
        {
          v87 = &v54[6 * v86];
          v89 = (unsigned __int8 *)*((_QWORD *)v87 + 1);
          v88 = (unsigned __int8 **)(v87 + 2);
          v90 = sub_1ACC09A28((uint64_t)a1, v89, &v163);
          v94 = v90;
          if (!(_DWORD)v59)
            goto LABEL_124;
          while (1)
          {
            v95 = (uint64_t)*v88;
            v96 = **v88;
            if ((v96 - 173) >= 2)
              break;
            v88 = (unsigned __int8 **)(v95 + 16);
          }
          if (v96 == 176)
            v96 = *(unsigned __int8 *)(v95 + 2);
          if ((v96 - 153) < 3)
            goto LABEL_124;
          if (v96 == 117)
            goto LABEL_124;
          if (v96 == 167 && (*(_BYTE *)(v95 + 6) & 0x20) == 0)
          {
            v97 = *(_QWORD *)(v95 + 72);
            if (v97)
            {
              v98 = *(unsigned int *)(v95 + 48);
              if ((v98 & 0x80000000) != 0)
                goto LABEL_124;
              v99 = *(_QWORD *)(v97 + 8);
              if (!v99 || (*(_BYTE *)(v99 + 16 * v98 + 8) & 0xF) != 0)
                goto LABEL_124;
            }
          }
          v100 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) > v100)
            break;
          sub_1ACBFF5AC(v23, 102, v59, v90, v59, v91, v92, v93);
          v102 = v163;
          if (!v163)
            goto LABEL_127;
LABEL_125:
          v103 = *((unsigned __int8 *)a1 + 31);
          if (v103 <= 7)
          {
            *((_BYTE *)a1 + 31) = v103 + 1;
            *((_DWORD *)a1 + v103 + 56) = v102;
          }
LABEL_127:
          v60 = v161;
          if (v161 == v162 && v86 >= *v54 - 1)
          {
            if ((_DWORD)v37 == (_DWORD)v94)
              v104 = 50;
            else
              v104 = 52;
            sub_1ACBA86CC((uint64_t *)v23, v104, v37, v161, v94, v58, 4294967294, v93);
            v105 = *(_DWORD *)(v23 + 144);
            if (v105 < 1)
              goto LABEL_108;
            v106 = *(_BYTE *)v160 | 0x10;
          }
          else
          {
            if ((_DWORD)v37 == (_DWORD)v94)
              v107 = 51;
            else
              v107 = 53;
            sub_1ACBA86CC((uint64_t *)v23, v107, v37, (v157 - 1), v94, v58, 4294967294, v93);
            v105 = *(_DWORD *)(v23 + 144);
            if (v105 < 1)
              goto LABEL_108;
            v106 = *(_BYTE *)v160;
          }
          *(_WORD *)(*(_QWORD *)(v23 + 136) + 40 * (v105 - 1) + 2) = v106;
LABEL_108:
          if (++v86 >= *v54)
            goto LABEL_141;
        }
        *(_DWORD *)(v23 + 144) = v100 + 1;
        v101 = *(_QWORD *)(v23 + 136) + 40 * v100;
        *(_DWORD *)v101 = 102;
        *(_DWORD *)(v101 + 4) = v59;
        *(_DWORD *)(v101 + 8) = v90;
        *(_DWORD *)(v101 + 12) = v59;
        *(_QWORD *)(v101 + 24) = 0;
        *(_QWORD *)(v101 + 32) = 0;
        *(_QWORD *)(v101 + 16) = 0;
LABEL_124:
        v102 = v163;
        if (!v163)
          goto LABEL_127;
        goto LABEL_125;
      }
      v62 = v161;
      if (v161 == v162)
      {
        v63 = 0;
      }
      else
      {
        v62 = (*((_DWORD *)a1 + 17) - 1);
        *((_DWORD *)a1 + 17) = v62;
        v63 = v62;
      }
      if ((int)v154 >= 1)
      {
        v64 = 0;
        while (1)
        {
          v66 = *(unsigned __int8 **)(a2 + 16);
          v67 = *v66;
          v68 = v67;
          if (v67 == 176)
            v68 = v66[2];
          if (v68 == 138)
            break;
          if (v68 == 177)
          {
            v69 = (int **)(v66 + 32);
            goto LABEL_75;
          }
LABEL_80:
          if (*((_DWORD *)a1 + 12))
            goto LABEL_15;
          while (1)
          {
            v70 = *v66;
            if ((v70 - 173) >= 2)
              break;
            v66 = (unsigned __int8 *)*((_QWORD *)v66 + 2);
          }
          if (v70 == 176)
            v70 = v66[2];
          if ((v70 - 153) >= 3 && v70 != 117)
          {
            if (v70 != 167
              || (v66[6] & 0x20) != 0
              || (v71 = *((_QWORD *)v66 + 9)) == 0
              || (v72 = *((unsigned int *)v66 + 12), (v72 & 0x80000000) == 0)
              && (v73 = *(_QWORD *)(v71 + 8)) != 0
              && (*(_BYTE *)(v73 + 16 * v72 + 8) & 0xF) == 0)
            {
              v26 = (v37 + v64);
              v74 = *(_DWORD *)(v23 + 144);
              if (*(_DWORD *)(v23 + 148) > v74)
              {
                *(_DWORD *)(v23 + 144) = v74 + 1;
                v65 = *(_QWORD *)(v23 + 136) + 40 * v74;
                *(_DWORD *)v65 = 50;
                *(_DWORD *)(v65 + 4) = v26;
                *(_DWORD *)(v65 + 8) = v62;
                *(_QWORD *)(v65 + 12) = 0;
                *(_QWORD *)(v65 + 28) = 0;
                *(_QWORD *)(v65 + 20) = 0;
                *(_DWORD *)(v65 + 36) = 0;
              }
              else
              {
                sub_1ACBFF5AC(v23, 50, v26, v62, 0, v29, v30, v31);
              }
            }
          }
          if (++v64 == v154)
            goto LABEL_96;
        }
        v69 = (int **)(*((_QWORD *)v66 + 4) + 32);
LABEL_75:
        if (**v69 >= 2)
        {
          if (v67 == 138 || v66[2] == 138)
            v66 = (unsigned __int8 *)*((_QWORD *)v66 + 4);
          v66 = *(unsigned __int8 **)(*((_QWORD *)v66 + 4) + 24 * v64 + 8);
        }
        goto LABEL_80;
      }
LABEL_96:
      if (v32 == 1)
      {
        v75 = v164;
        v76 = *(_DWORD *)(v23 + 144);
        if (*(_DWORD *)(v23 + 148) <= v76)
        {
          v78 = v161;
          sub_1ACBFF5AC(v23, 30, v164, v161, v37, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)(v23 + 144) = v76 + 1;
          v77 = *(_QWORD *)(v23 + 136) + 40 * v76;
          *(_DWORD *)v77 = 30;
          *(_DWORD *)(v77 + 4) = v75;
          v78 = v161;
          *(_DWORD *)(v77 + 8) = v161;
          *(_DWORD *)(v77 + 12) = v37;
          *(_QWORD *)(v77 + 24) = 0;
          *(_QWORD *)(v77 + 32) = 0;
          *(_QWORD *)(v77 + 16) = 0;
        }
        v82 = v162;
        v115 = *(_DWORD *)(v23 + 144);
        v79 = v154;
        if (*(_DWORD *)(v23 + 148) > v115)
        {
          v151 = *(_DWORD *)(v23 + 144);
          *(_DWORD *)(v23 + 144) = v115 + 1;
          v116 = *(_QWORD *)(v23 + 136) + 40 * v115;
          *(_BYTE *)v116 = 9;
          *(_OWORD *)(v116 + 1) = 0u;
          *(_OWORD *)(v116 + 17) = 0u;
          *(_QWORD *)(v116 + 32) = 0;
          goto LABEL_160;
        }
        v83 = sub_1ACBFF5AC(v23, 9, 0, 0, 0, v29, v30, v31);
      }
      else
      {
        v79 = v154;
        sub_1ACBA86CC((uint64_t *)v23, 96, v37, v154, 0, (uint64_t)v160, v154, v31);
        v75 = v164;
        v78 = v161;
        v82 = v162;
        if (v161 == v162)
        {
          sub_1ACBCB640(v23, 28, v164, v161, v37, v154, v80, v81);
          goto LABEL_206;
        }
        v83 = sub_1ACBCB640(v23, 29, v164, 0, v37, v154, v80, v81);
      }
      v151 = v83;
LABEL_160:
      if (v79 == 1)
      {
        v26 = v166;
        if (v166)
          sub_1ACBFF554(v23, 51, v166, v78, v28, v29, v30, v31);
      }
      if ((_DWORD)v78 == v82)
        sub_1ACC08E48(v23, v78, v26, v27, v28, v29, v30, v31);
      v117 = v159;
      if (v63)
      {
        v118 = *(_QWORD *)(v23 + 24);
        v26 = ~v63;
        if (*(_DWORD *)(v118 + 68) + *(_DWORD *)(v118 + 72) < 0)
          sub_1ACC0D5D4(v118, v23, v26);
        else
          *(_DWORD *)(*(_QWORD *)(v118 + 80) + 4 * (int)v26) = *(_DWORD *)(v23 + 144);
      }
      v119 = *(_DWORD *)(v23 + 144);
      if (*(_DWORD *)(v23 + 148) <= v119)
      {
        v152 = sub_1ACBFF5AC(v23, 36, v75, v78, 0, v29, v30, v31);
      }
      else
      {
        v152 = *(_DWORD *)(v23 + 144);
        *(_DWORD *)(v23 + 144) = v119 + 1;
        v120 = *(_QWORD *)(v23 + 136) + 40 * v119;
        *(_DWORD *)v120 = 36;
        *(_DWORD *)(v120 + 4) = v75;
        *(_DWORD *)(v120 + 8) = v78;
        *(_QWORD *)(v120 + 12) = 0;
        *(_QWORD *)(v120 + 28) = 0;
        *(_QWORD *)(v120 + 20) = 0;
        *(_DWORD *)(v120 + 36) = 0;
      }
      if (v79 <= 1)
      {
        v158 = v78;
        if (v79 < 1)
          goto LABEL_197;
      }
      else
      {
        v158 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v158;
      }
      v121 = v37;
      v37 = v75;
      v122 = 0;
      v123 = v159 + 32;
      v124 = 8;
      while (1)
      {
        if (*((_BYTE *)a1 + 31))
        {
          v125 = *((_BYTE *)a1 + 31) - 1;
          *((_BYTE *)a1 + 31) = v125;
          v126 = *((unsigned int *)a1 + v125 + 56);
        }
        else
        {
          v126 = (*((_DWORD *)a1 + 14) + 1);
          *((_DWORD *)a1 + 14) = v126;
        }
        v127 = *v117;
        v128 = v127;
        if (v127 == 176)
          v128 = v117[2];
        v129 = (int **)(v159 + 32);
        if (v128 == 177)
          goto LABEL_185;
        v130 = v117;
        if (v128 == 138)
          break;
LABEL_190:
        v135 = sub_1ACB78620((uint64_t)a1, v130, v26, v27, v28, v29, v30, v31);
        v136 = *(_DWORD *)(v23 + 144);
        if (*(_DWORD *)(v23 + 148) <= v136)
        {
          sub_1ACBFF5AC(v23, 94, v37, v122, v126, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)(v23 + 144) = v136 + 1;
          v137 = *(_QWORD *)(v23 + 136) + 40 * v136;
          *(_DWORD *)v137 = 94;
          *(_DWORD *)(v137 + 4) = v37;
          *(_DWORD *)(v137 + 8) = v122;
          *(_DWORD *)(v137 + 12) = v126;
          *(_QWORD *)(v137 + 24) = 0;
          *(_QWORD *)(v137 + 32) = 0;
          *(_QWORD *)(v137 + 16) = 0;
        }
        sub_1ACBA86CC((uint64_t *)v23, 52, (v122 + v121), v158, v126, v135, 4294967294, v134);
        if ((_DWORD)v126)
        {
          v138 = *((unsigned __int8 *)a1 + 31);
          if (v138 <= 7)
          {
            *((_BYTE *)a1 + 31) = v138 + 1;
            *((_DWORD *)a1 + v138 + 56) = v126;
          }
        }
        ++v122;
        v124 += 24;
        v117 = v159;
        if (v79 == v122)
        {
          v78 = v161;
          v79 = v154;
          v75 = v37;
          LODWORD(v37) = v121;
LABEL_197:
          v139 = *(_DWORD *)(v23 + 144);
          if (*(_DWORD *)(v23 + 148) <= v139)
          {
            sub_1ACBFF5AC(v23, 9, 0, v162, 0, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)(v23 + 144) = v139 + 1;
            v140 = *(_QWORD *)(v23 + 136) + 40 * v139;
            *(_QWORD *)v140 = 9;
            *(_DWORD *)(v140 + 8) = v162;
            *(_QWORD *)(v140 + 12) = 0;
            *(_QWORD *)(v140 + 28) = 0;
            *(_QWORD *)(v140 + 20) = 0;
            *(_DWORD *)(v140 + 36) = 0;
          }
          if (v79 >= 2)
          {
            sub_1ACC0A574(v23, v158);
            sub_1ACBFF554(v23, 39, v75, (v152 + 1), v141, v142, v143, v144);
            sub_1ACBFF554(v23, 9, 0, v78, v145, v146, v147, v148);
          }
          if (*(_BYTE *)(*(_QWORD *)v23 + 103))
            v149 = &byte_1EECAD280;
          else
            v149 = (char *)(*(_QWORD *)(v23 + 136) + 40 * v151);
          *((_DWORD *)v149 + 2) = *(_DWORD *)(v23 + 144);
          goto LABEL_206;
        }
      }
      v129 = (int **)(*v123 + 32);
LABEL_185:
      v130 = v117;
      if (**v129 >= 2)
      {
        if (v127 == 138 || (v131 = v159 + 32, v117[2] == 138))
          v131 = (_QWORD *)(*v123 + 32);
        v130 = *(unsigned __int8 **)(*v131 + v124);
      }
      goto LABEL_190;
    }
LABEL_30:
    v37 = sub_1ACC09A28((uint64_t)a1, v159, &v165);
    goto LABEL_37;
  }
LABEL_15:
  if (v155)
    sub_1ACBE0F9C(*a1, v155);
  if (v160)
    sub_1ACBE0F9C(*a1, v160);
}

uint64_t sub_1ACBA1EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  char v11;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **i;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t result;
  __int16 v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  unint64_t v66;
  _BOOL4 v68;
  BOOL v69;
  int v70;
  int **v71;
  unsigned __int8 *v72;
  int **v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  int **v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  _BYTE **v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  unsigned __int8 *j;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  unsigned int *v127;
  int **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];
  __int128 v133;

  v10 = (_DWORD *)a4;
  v11 = a3;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v14 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  }
  v15 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v15 + 1;
  if (v10 && (*(_BYTE *)(a2 + 5) & 0x10) != 0)
  {
    v16 = *(_DWORD **)(*(_QWORD *)(a2 + 32) + 32);
    v17 = *v16;
    if ((int)v17 < 1)
    {
      LODWORD(v18) = 0;
    }
    else
    {
      v18 = 0;
      while (1)
      {
        for (i = (unsigned __int8 **)&v16[6 * v18 + 2]; ; i = (unsigned __int8 **)(v20 + 16))
        {
          v20 = *i;
          v21 = *v20;
          if ((v21 - 173) >= 2)
            break;
        }
        if (v21 == 176)
          v21 = v20[2];
        if ((v21 - 153) >= 3 && v21 != 117)
        {
          if (v21 != 167)
            break;
          if ((v20[6] & 0x20) != 0)
            break;
          v22 = *((_QWORD *)v20 + 9);
          if (!v22)
            break;
          v23 = *((unsigned int *)v20 + 12);
          if ((v23 & 0x80000000) == 0)
          {
            v24 = *(_QWORD *)(v22 + 8);
            if (v24)
            {
              if ((*(_BYTE *)(v24 + 16 * v23 + 8) & 0xF) == 0)
                break;
            }
          }
        }
        if (++v18 == v17)
        {
          LODWORD(v18) = *v16;
          break;
        }
      }
    }
    if ((_DWORD)v18 == (_DWORD)v17)
      v10 = 0;
  }
  if (*(_DWORD *)(a1 + 48))
    goto LABEL_38;
  if ((*(_DWORD *)(a2 + 4) & 0x1040) != 0x1000)
    goto LABEL_38;
  v25 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v25 + 80))
    goto LABEL_38;
  if ((*(_BYTE *)(v25 + 4) & 9) != 0)
    goto LABEL_38;
  if (*(_QWORD *)(v25 + 96))
    goto LABEL_38;
  if (*(_QWORD *)(v25 + 48))
    goto LABEL_38;
  v26 = *(_QWORD *)(v25 + 40);
  if (*(_DWORD *)v26 != 1)
    goto LABEL_38;
  if (*(_QWORD *)(v26 + 48))
    goto LABEL_38;
  v27 = *(_QWORD *)(v26 + 40);
  if (*(_BYTE *)(v27 + 63) == 1)
    goto LABEL_38;
  v127 = *(unsigned int **)(v25 + 32);
  LODWORD(v50) = *v127;
  if ((int)*v127 >= 1)
  {
    v51 = (unsigned __int8 **)(v127 + 2);
    v52 = *v127;
    do
    {
      if (**v51 != 167)
        goto LABEL_38;
      v51 += 3;
      --v52;
    }
    while (v52);
    if (!v25)
    {
LABEL_38:
      if ((v11 & 1) != 0 && (*(_BYTE *)(a2 + 5) & 0x10) == 0)
      {
        v28 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        v132[3] = 0;
        v133 = 0u;
        v132[0] = 0;
        WORD2(v133) = 1;
        v132[1] = sub_1ACB8B0F4;
        v132[2] = sub_1ACC0B708;
        sub_1ACC0B714((uint64_t)v132, a2);
        v29 = WORD2(v133);
        *(_QWORD *)(a2 + 16) = v28;
        if (!v29 || **(int **)(a2 + 32) <= 2)
        {
          --*(_DWORD *)(a1 + 52);
          result = 5;
          LODWORD(v15) = -1;
          goto LABEL_50;
        }
      }
      v31 = *(_WORD *)(a1 + 216);
      if ((v11 & 4) != 0)
      {
        *(_WORD *)(a1 + 216) = 0;
      }
      else if (v10)
      {
        v32 = *(_DWORD *)(a1 + 56);
        v33 = (v32 + 1);
        v34 = v32 == -1;
        *(_DWORD *)(a1 + 56) = v33;
        *v10 = v33;
        sub_1ACC0C730((uint64_t *)a1, a2, v15, a4, a5, (uint64_t)a6, a7, a8);
        if (!v34)
          sub_1ACC0C5B4(v14, v15, v33, v35, v36, v37, v38, v39);
        goto LABEL_49;
      }
      sub_1ACC0C730((uint64_t *)a1, a2, v15, a4, a5, (uint64_t)a6, a7, a8);
LABEL_49:
      *(_WORD *)(a1 + 216) = v31;
      result = 2;
      goto LABEL_50;
    }
  }
  v53 = *(_QWORD *)(v27 + 96);
  if (v53)
  {
    v54 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 24);
    LODWORD(v55) = -1;
    do
    {
      v56 = *v54;
      v54 += 4;
      v55 = (v55 + 1);
    }
    while (v56 != v53);
  }
  else
  {
    v55 = 4294934528;
  }
  if (*(_QWORD *)(a1 + 168))
    v57 = *(_QWORD *)(a1 + 168);
  else
    v57 = a1;
  v58 = *(_DWORD *)(v57 + 124);
  v124 = *v127;
  if ((v58 & (1 << v55)) != 0)
  {
    if ((_DWORD)v55 == 1)
      goto LABEL_87;
  }
  else
  {
    *(_DWORD *)(v57 + 124) = v58 | (1 << v55);
    if ((_DWORD)v55 == 1)
    {
      sub_1ACBE9418(v57);
LABEL_86:
      LODWORD(v50) = v124;
      goto LABEL_87;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)v55 + 8) + 17))
  {
    sub_1ACC08F44(a1, v55, *(_DWORD *)(v27 + 40), 0, *(_QWORD *)v27);
    goto LABEL_86;
  }
LABEL_87:
  v120 = v55;
  v122 = v27;
  if ((_DWORD)v50 == 1)
  {
    if ((*(_DWORD *)(*((_QWORD *)v127 + 1) + 48) & 0x80000000) != 0)
    {
      v59 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v59)
      {
        v59 = sub_1ACBFF5AC(v14, 15, 0, 0, 0, (uint64_t)a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v59 + 1;
        v60 = *(_QWORD *)(v14 + 136) + 40 * v59;
        *(_BYTE *)v60 = 15;
        *(_OWORD *)(v60 + 1) = 0u;
        *(_OWORD *)(v60 + 17) = 0u;
        *(_QWORD *)(v60 + 32) = 0;
      }
      sub_1ACB7A514((_QWORD *)a1, v15, v55, v27, 112, (uint64_t)a6, a7, a8);
      sub_1ACC0BE9C((uint64_t *)a1, 0, "USING ROWID SEARCH ON TABLE %s FOR IN-OPERATOR", v96, v97, v98, v99, v100, *(_QWORD *)v27);
      if (*(_BYTE *)(*(_QWORD *)v14 + 103))
        v101 = &byte_1EECAD280;
      else
        v101 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v59);
      *((_DWORD *)v101 + 2) = *(_DWORD *)(v14 + 144);
      result = 1;
      goto LABEL_50;
    }
  }
  else if ((int)v50 < 1)
  {
    goto LABEL_131;
  }
  v61 = *(unsigned __int8 **)(a2 + 16);
  v125 = *v61;
  v128 = (int **)(v61 + 32);
  v62 = 2;
  v63 = 1;
  v121 = v61;
  do
  {
    v70 = v125;
    if (v125 == 176)
      v70 = v61[2];
    v71 = v128;
    if (v70 != 177)
    {
      v72 = v61;
      if (v70 != 138)
        goto LABEL_117;
      v71 = (int **)(*v128 + 8);
    }
    v72 = v61;
    if (**v71 >= 2)
    {
      if (v125 == 138 || (v73 = v128, v61[2] == 138))
        v73 = (int **)(*v128 + 8);
      v72 = *(unsigned __int8 **)&(*v73)[v62];
    }
LABEL_117:
    v74 = *(unsigned int *)(*(_QWORD *)&v127[v62] + 48);
    v130 = v63;
    if ((v74 & 0x80000000) != 0 || (int)v74 >= *(__int16 *)(v27 + 54))
      v75 = 68;
    else
      v75 = *(unsigned __int8 *)(*(_QWORD *)(v27 + 8) + 16 * v74 + 9);
    v76 = sub_1ACB92644(v72);
    if ((char)v75 < 65 || v76 < 65)
    {
      if (v76 >= 65)
        v64 = v76;
      else
        v64 = v75;
      v65 = v64 | 0x40;
      v50 = v124;
      v61 = v121;
      v66 = v130;
    }
    else
    {
      if (v76 > 0x42 || v75 > 0x42)
        v65 = 67;
      else
        v65 = 65;
      v50 = v124;
      v61 = v121;
      v66 = v130;
    }
    v68 = (v65 - 65) < 2 || (char)v75 > 66;
    v62 += 6;
    v69 = !v68 || v66 >= v50;
    v63 = v66 + 1;
    v27 = v122;
  }
  while (!v69);
  if (!v68)
    goto LABEL_38;
LABEL_131:
  v78 = *(_QWORD *)(v27 + 16);
  if (!v78)
    goto LABEL_38;
  v123 = ~(-1 << v50);
  while (1)
  {
    v80 = *(unsigned __int16 *)(v78 + 96);
    if ((int)v50 <= v80)
    {
      v81 = v80 <= 0x3E && *(_QWORD *)(v78 + 72) == 0;
      if (v81
        && ((v11 & 4) == 0 || (int)v50 >= *(unsigned __int16 *)(v78 + 94) && ((int)v50 >= v80 || *(_BYTE *)(v78 + 98))))
      {
        v126 = v78;
        if ((int)v50 >= 1)
        {
          v82 = 0;
          v79 = 0;
          while (1)
          {
            v83 = *(unsigned __int8 **)(a2 + 16);
            v84 = *v83;
            v85 = v84;
            if (v84 == 176)
              v85 = v83[2];
            v131 = v79;
            if (v85 == 138)
            {
              v86 = (int **)(*((_QWORD *)v83 + 4) + 32);
            }
            else
            {
              if (v85 != 177)
                goto LABEL_161;
              v86 = (int **)(v83 + 32);
            }
            if (**v86 >= 2)
            {
              if (v84 == 138 || v83[2] == 138)
                v87 = (_QWORD *)(*((_QWORD *)v83 + 4) + 32);
              else
                v87 = v83 + 32;
              v83 = *(unsigned __int8 **)(*v87 + 24 * v82 + 8);
            }
LABEL_161:
            v88 = *(unsigned __int8 **)&v127[6 * v82 + 2];
            v129 = v82;
            if ((v83[5] & 2) != 0)
            {
              v90 = a1;
              goto LABEL_167;
            }
            if (v88 && (v88[5] & 2) != 0
              || (v89 = (_BYTE **)sub_1ACB78620(a1, v83, a3, a4, a5, (uint64_t)a6, a7, a8)) == 0)
            {
              v90 = a1;
              v83 = v88;
LABEL_167:
              v89 = (_BYTE **)sub_1ACB78620(v90, v83, a3, a4, a5, (uint64_t)a6, a7, a8);
            }
            v91 = 0;
            LODWORD(v50) = v124;
            v78 = v126;
            v79 = v131;
            while (*((_DWORD *)v88 + 12) != *(__int16 *)(*(_QWORD *)(v126 + 8) + 2 * v91))
            {
LABEL_169:
              if (++v91 == v124)
                goto LABEL_134;
            }
            if (v89)
            {
              v92 = *v89;
              for (j = *(unsigned __int8 **)(*(_QWORD *)(v126 + 64) + 8 * v91); ; ++j)
              {
                v94 = *v92;
                v95 = *j;
                if ((_DWORD)v94 == (_DWORD)v95)
                {
                  if (!*v92)
                    break;
                }
                else if (byte_1ACCB6333[v94] != byte_1ACCB6333[v95])
                {
                  goto LABEL_169;
                }
                ++v92;
              }
            }
            if ((_DWORD)v124 != (_DWORD)v91 && ((1 << v91) & v131) == 0)
            {
              if (a5)
                *(_DWORD *)(a5 + 4 * v129) = v91;
              v79 = (1 << v91) | v131;
              v82 = v129 + 1;
              if (v129 + 1 != v124)
                continue;
            }
            goto LABEL_134;
          }
        }
        v79 = 0;
LABEL_134:
        if (v79 == v123)
          break;
      }
    }
    v78 = *(_QWORD *)(v78 + 40);
    if (!v78)
      goto LABEL_38;
  }
  v102 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v102)
  {
    v102 = sub_1ACBFF5AC(v14, 15, 0, 0, 0, (uint64_t)a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v102 + 1;
    v103 = *(_QWORD *)(v14 + 136) + 40 * v102;
    *(_BYTE *)v103 = 15;
    *(_OWORD *)(v103 + 1) = 0u;
    *(_OWORD *)(v103 + 17) = 0u;
    *(_QWORD *)(v103 + 32) = 0;
  }
  sub_1ACC0BE9C((uint64_t *)a1, 0, "USING INDEX %s FOR IN-OPERATOR", a4, a5, (uint64_t)a6, a7, a8, *(_QWORD *)v126);
  v107 = *(unsigned int *)(v126 + 88);
  v108 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v108)
  {
    sub_1ACBFF5AC(v14, 112, v15, v107, v120, v104, v105, v106);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v108 + 1;
    v109 = *(_QWORD *)(v14 + 136) + 40 * v108;
    *(_DWORD *)v109 = 112;
    *(_DWORD *)(v109 + 4) = v15;
    *(_DWORD *)(v109 + 8) = v107;
    *(_DWORD *)(v109 + 12) = v120;
    *(_QWORD *)(v109 + 24) = 0;
    *(_QWORD *)(v109 + 32) = 0;
    *(_QWORD *)(v109 + 16) = 0;
  }
  v110 = *(_QWORD *)(a1 + 16);
  v111 = sub_1ACC09130((_DWORD *)a1, v126);
  if (v111)
  {
    if (*(_BYTE *)(*(_QWORD *)v110 + 103))
    {
      if (!*(_QWORD *)(*(_QWORD *)v110 + 816))
      {
        v81 = (*(_DWORD *)v111)-- == 1;
        if (v81)
          sub_1ACBF0674(*(_QWORD **)(v111 + 16), (_QWORD *)v111);
      }
    }
    else
    {
      v117 = *(_QWORD *)(v110 + 136) + 40 * *(int *)(v110 + 144);
      *(_BYTE *)(v117 - 39) = -8;
      *(_QWORD *)(v117 - 24) = v111;
    }
  }
  v118 = **(unsigned __int8 **)(v126 + 56);
  if (v10)
  {
    v119 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v119;
    *v10 = v119;
    if ((_DWORD)v124 == 1)
      sub_1ACC0C5B4(v14, v15, v119, v112, v113, v114, v115, v116);
  }
  result = (v118 + 3);
  if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    dword_1EECAD288 = *(_DWORD *)(v14 + 144);
  else
    *(_DWORD *)(*(_QWORD *)(v14 + 136) + 40 * v102 + 8) = *(_DWORD *)(v14 + 144);
LABEL_50:
  if (a5 && (result - 5) <= 0xFFFFFFFD)
  {
    v40 = *(unsigned __int8 **)(a2 + 16);
    v41 = *v40;
    if (v41 == 176)
      v41 = v40[2];
    if (v41 == 138)
    {
      v40 = (unsigned __int8 *)*((_QWORD *)v40 + 4);
    }
    else if (v41 != 177)
    {
      v42 = 1;
      goto LABEL_59;
    }
    v42 = **((_DWORD **)v40 + 4);
    if (v42 >= 1)
    {
LABEL_59:
      v43 = v42;
      if (v42 < 8)
      {
        v44 = 0;
        goto LABEL_64;
      }
      v44 = v42 & 0x7FFFFFF8;
      v45 = (int32x4_t)xmmword_1ACCBDDF0;
      v46 = (int32x4_t *)(a5 + 16);
      v47.i64[0] = 0x400000004;
      v47.i64[1] = 0x400000004;
      v48.i64[0] = 0x800000008;
      v48.i64[1] = 0x800000008;
      v49 = v43 & 0xFFFFFFF8;
      do
      {
        v46[-1] = v45;
        *v46 = vaddq_s32(v45, v47);
        v45 = vaddq_s32(v45, v48);
        v46 += 2;
        v49 -= 8;
      }
      while (v49);
      for (; v43 != v44; ++v44)
LABEL_64:
        *(_DWORD *)(a5 + 4 * v44) = v44;
    }
  }
  *a6 = v15;
  return result;
}

uint64_t sub_1ACBA2944(_QWORD **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int *v73;
  int *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;

  if (*((_DWORD *)a1 + 12))
    return 0;
  v12 = (uint64_t)a1[2];
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((_DWORD *)a2 + 1);
  if ((v14 & 0x2000000) != 0)
  {
    sub_1ACC0BE9C((uint64_t *)a1, 0, "REUSE SUBQUERY %d", a4, a5, a6, a7, a8, *(_DWORD *)(v13 + 16));
    v23 = *((unsigned int *)a2 + 18);
    v22 = *((unsigned int *)a2 + 19);
    v24 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v24)
    {
      sub_1ACBFF5AC(v12, 10, v22, v23, 0, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v24 + 1;
      v25 = *(_QWORD *)(v12 + 136) + 40 * v24;
      *(_DWORD *)v25 = 10;
      *(_DWORD *)(v25 + 4) = v22;
      *(_DWORD *)(v25 + 8) = v23;
      *(_QWORD *)(v25 + 12) = 0;
      *(_QWORD *)(v25 + 28) = 0;
      *(_QWORD *)(v25 + 20) = 0;
      *(_DWORD *)(v25 + 36) = 0;
    }
    return *((unsigned int *)a2 + 11);
  }
  *((_DWORD *)a2 + 1) = v14 | 0x2000000;
  v15 = (*((_DWORD *)a1 + 14) + 1);
  *((_DWORD *)a1 + 14) = v15;
  *((_DWORD *)a2 + 19) = v15;
  v16 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v16)
  {
    v17 = sub_1ACBFF5AC(v12, 74, 0, v15, 0, a6, a7, a8) + 1;
  }
  else
  {
    v17 = v16 + 1;
    *(_DWORD *)(v12 + 144) = v16 + 1;
    v18 = *(_QWORD *)(v12 + 136) + 40 * v16;
    *(_QWORD *)v18 = 74;
    *(_DWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 12) = 0;
    *(_QWORD *)(v18 + 28) = 0;
    *(_QWORD *)(v18 + 20) = 0;
    *(_DWORD *)(v18 + 36) = 0;
  }
  *((_DWORD *)a2 + 18) = v17;
  if ((a2[4] & 0x40) != 0)
  {
    v26 = 0;
  }
  else
  {
    v26 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v26)
    {
      v26 = sub_1ACBFF5AC(v12, 15, 0, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v26 + 1;
      v27 = *(_QWORD *)(v12 + 136) + 40 * v26;
      *(_BYTE *)v27 = 15;
      *(_OWORD *)(v27 + 1) = 0u;
      *(_OWORD *)(v27 + 17) = 0u;
      *(_QWORD *)(v27 + 32) = 0;
    }
  }
  v28 = &byte_1ACCBEAEE;
  if (!v26)
    v28 = "CORRELATED ";
  v29 = sub_1ACC0BE9C((uint64_t *)a1, 1, "%sSCALAR SUBQUERY %d", v15, a5, a6, a7, a8, (char)v28);
  v33 = v29;
  if ((*(_BYTE *)(*(_QWORD *)v12 + 49) & 4) != 0)
  {
    v34 = *(unsigned int *)(v12 + 392);
    v35 = 56 * v34;
    v36 = v34 + 1;
    while (--v36 >= 1)
    {
      v37 = v35 - 56;
      v38 = *(_QWORD *)(v12 + 400);
      v39 = *(_DWORD *)(v38 + v35 - 56);
      v35 -= 56;
      if (v39 == v29)
      {
        if (v29 >= 1)
          *(_DWORD *)(v38 + v37 + 28) = v29;
        break;
      }
    }
  }
  v40 = *a2;
  if (v40 == 138)
    v41 = **(_DWORD **)(v13 + 32);
  else
    v41 = 1;
  v42 = *((_DWORD *)a1 + 14);
  v43 = (v42 + 1);
  *((_QWORD *)&v82 + 1) = 0;
  DWORD1(v81) = v42 + 1;
  *((_QWORD *)&v81 + 1) = 0;
  LODWORD(v82) = 0;
  v44 = (v42 + v41);
  *((_DWORD *)a1 + 14) = v44;
  if (v40 == 138)
  {
    LOBYTE(v81) = 10;
    HIDWORD(v81) = v42 + 1;
    LODWORD(v82) = v41;
    v45 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v45)
    {
      *(_DWORD *)(v12 + 144) = v45 + 1;
      v46 = *(_QWORD *)(v12 + 136) + 40 * v45;
      *(_QWORD *)v46 = 75;
      *(_DWORD *)(v46 + 8) = v43;
      *(_DWORD *)(v46 + 12) = v44;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0;
      *(_QWORD *)(v46 + 16) = 0;
      goto LABEL_36;
    }
    v49 = v12;
    v50 = 75;
  }
  else
  {
    LOBYTE(v81) = 3;
    v47 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v47)
    {
      *(_DWORD *)(v12 + 144) = v47 + 1;
      v48 = *(_QWORD *)(v12 + 136) + 40 * v47;
      *(_QWORD *)v48 = 71;
      *(_DWORD *)(v48 + 8) = v43;
      *(_QWORD *)(v48 + 12) = 0;
      *(_QWORD *)(v48 + 28) = 0;
      *(_QWORD *)(v48 + 20) = 0;
      *(_DWORD *)(v48 + 36) = 0;
      goto LABEL_36;
    }
    v49 = v12;
    v50 = 71;
    v44 = 0;
  }
  sub_1ACBFF5AC(v49, v50, 0, v43, v44, v30, v31, v32);
LABEL_36:
  v51 = (uint64_t)*a1;
  if (!*(_QWORD *)(v13 + 96))
  {
    v84 = "1";
    v85 = 1;
    v56 = sub_1ACB6DDF8(v51, 155, (uint64_t)&v84, 0);
    *(_QWORD *)(v13 + 96) = sub_1ACC0241C((uint64_t *)a1, 148, v56, 0);
    goto LABEL_51;
  }
  v84 = "0";
  v85 = 1;
  v52 = sub_1ACB6DDF8(v51, 155, (uint64_t)&v84, 0);
  if (v52)
  {
    v53 = v52;
    *(_BYTE *)(v52 + 1) = 67;
    v54 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 96) + 16);
    if (v54)
      v55 = sub_1ACB8B290(v51, v54, 0, 0);
    else
      v55 = 0;
    v57 = sub_1ACC0241C((uint64_t *)a1, 52, (uint64_t)v55, v53);
  }
  else
  {
    v57 = 0;
  }
  v58 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 96) + 16);
  if (!*a1)
  {
    v59 = (_QWORD *)sub_1ACB5D828(24);
    if (v59)
      goto LABEL_46;
LABEL_48:
    if (v58)
      sub_1ACBF8348(*a1, v58);
    goto LABEL_50;
  }
  v59 = (_QWORD *)sub_1ACBE1124((uint64_t)*a1, 0x18uLL);
  if (!v59)
    goto LABEL_48;
LABEL_46:
  *v59 = a1[24];
  a1[24] = v59;
  v59[1] = v58;
  v59[2] = sub_1ACB782D4;
LABEL_50:
  *(_QWORD *)(*(_QWORD *)(v13 + 96) + 16) = v57;
LABEL_51:
  *(_DWORD *)(v13 + 8) = 0;
  if (sub_1ACB6EA04(a1, v13, &v81))
  {
    v8 = 0;
    a2[2] = *a2;
    *a2 = -74;
  }
  else
  {
    v8 = DWORD1(v81);
    *((_DWORD *)a2 + 11) = DWORD1(v81);
    v63 = *(_QWORD *)v12;
    if (v26)
    {
      if (*(_BYTE *)(v63 + 103))
        v64 = &byte_1EECAD280;
      else
        v64 = (char *)(*(_QWORD *)(v12 + 136) + 40 * v26);
      *((_DWORD *)v64 + 2) = *(_DWORD *)(v12 + 144);
    }
    if ((*(_BYTE *)(v63 + 49) & 4) != 0)
    {
      v65 = *(_DWORD *)(v12 + 392);
      v66 = 56 * v65 + 20;
      v67 = v65 + 1;
      while ((int)--v67 >= 1)
      {
        v68 = v66 - 56;
        v69 = *(_QWORD *)(v12 + 400);
        v70 = *(_DWORD *)(v69 + v66 - 76);
        v66 -= 56;
        if (v70 == v33)
        {
          v71 = *(_DWORD *)(v12 + 144);
          v72 = v69 + v68;
          v73 = (int *)(v69 + v68 - 16);
          if (*v73)
          {
            v75 = *(_DWORD *)(v72 - 8);
            v74 = (int *)(v72 - 8);
            if (v75)
            {
              v73 = (int *)(v69 + v68);
              if (*(_DWORD *)(v69 + v68))
                break;
              v76 = 5;
            }
            else
            {
              v76 = 3;
              v73 = v74;
            }
          }
          else
          {
            v76 = 1;
          }
          *v73 = v33;
          *(_DWORD *)(v69 + 4 * v76 + v68 - 16) = v71 - 1;
          break;
        }
      }
    }
    v78 = *((unsigned int *)a2 + 18);
    v77 = *((unsigned int *)a2 + 19);
    v79 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v79)
    {
      sub_1ACBFF5AC(v12, 67, v77, v78, 1, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v79 + 1;
      v80 = *(_QWORD *)(v12 + 136) + 40 * v79;
      *(_DWORD *)v80 = 67;
      *(_DWORD *)(v80 + 4) = v77;
      *(_DWORD *)(v80 + 8) = v78;
      *(_DWORD *)(v80 + 12) = 1;
      *(_QWORD *)(v80 + 24) = 0;
      *(_QWORD *)(v80 + 32) = 0;
      *(_QWORD *)(v80 + 16) = 0;
    }
    *((_BYTE *)a1 + 31) = 0;
    *((_DWORD *)a1 + 10) = 0;
  }
  return v8;
}

void sub_1ACBA2F1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v10 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a2 + 5) & 8) != 0)
  {
    v25 = *(_DWORD *)(a2 + 8);
    if (a3)
      v26 = -v25;
    else
      v26 = v25;
    v27 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v27)
    {
      sub_1ACBFF5AC(*(_QWORD *)(a1 + 16), 71, v26, a4, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v27 + 1;
      v28 = *(_QWORD *)(v10 + 136) + 40 * v27;
      *(_DWORD *)v28 = 71;
      *(_DWORD *)(v28 + 4) = v26;
      *(_DWORD *)(v28 + 8) = a4;
      *(_QWORD *)(v28 + 12) = 0;
      *(_QWORD *)(v28 + 28) = 0;
      *(_QWORD *)(v28 + 20) = 0;
      *(_DWORD *)(v28 + 36) = 0;
    }
  }
  else
  {
    v33 = 0;
    v12 = *(char **)(a2 + 8);
    v13 = sub_1ACBD3BF4(v12, (unint64_t *)&v33);
    if (a3)
      v20 = 0;
    else
      v20 = v13 == 3;
    v21 = !v20;
    v22 = v13 == 2 || v21 == 0;
    if (v22 || a3 && v33 == 0x8000000000000000)
    {
      if (!v12)
        goto LABEL_40;
      v23 = *v12;
      v24 = "0x";
      if (*v12)
      {
        if (v23 != 48)
        {
LABEL_20:
          v23 = byte_1ACCB6333[v23];
          goto LABEL_36;
        }
        v23 = v12[1];
        if (v12[1])
        {
          if ((v23 & 0xFFFFFFDF) == 0x58)
          {
LABEL_37:
            v32 = &byte_1ACCBEAEE;
            if (a3)
              v32 = "-";
            sub_1ACBCB308(a1, "hex literal too big: %s%#T", v14, v15, v16, v17, v18, v19, (char)v32);
            return;
          }
          v24 = "x";
          goto LABEL_20;
        }
        v24 = "x";
      }
LABEL_36:
      if (v23 == byte_1ACCB6333[*v24])
        goto LABEL_37;
LABEL_40:
      sub_1ACC09984((uint64_t *)v10, v12, a3, a4);
      return;
    }
    if (a3)
    {
      if (v13 == 3)
        v29 = 0x8000000000000000;
      else
        v29 = -v33;
      v33 = v29;
    }
    v30 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)v10, 8uLL);
    if (v30)
      *v30 = v33;
    sub_1ACBA86CC((uint64_t *)v10, 72, 0, a4, 0, (uint64_t)v30, 4294967283, v31);
  }
}

int *sub_1ACBA3114(int *result, uint64_t a2)
{
  _WORD *v2;
  __int16 v3;
  int v4;
  int v5;
  BOOL v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = (_WORD *)(a2 + 18);
  v3 = *(_WORD *)(a2 + 18);
  if ((v3 & 4) == 0)
  {
    v4 = 0;
    v5 = *result;
    do
    {
      if (v5 && (*(_BYTE *)(*(_QWORD *)a2 + 4) & 1) == 0)
        break;
      if ((*(_QWORD *)(a2 + 48) & *((_QWORD *)result + 13)) != 0)
        break;
      v6 = (v3 & 0x400) == 0 || v4 == 0;
      v7 = v6 ? 4 : 512;
      *v2 = v7 | v3;
      v8 = *(_DWORD *)(a2 + 24);
      if ((v8 & 0x80000000) != 0)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32);
      v10 = v9 + 56 * v8;
      v11 = *(_BYTE *)(v10 + 22) - 1;
      *(_BYTE *)(v10 + 22) = v11;
      if (v11)
        break;
      a2 = v9 + 56 * v8;
      v2 = (_WORD *)(a2 + 18);
      v3 = *(_WORD *)(a2 + 18);
      --v4;
    }
    while ((v3 & 4) == 0);
  }
  return result;
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 <= 0)
  {
    if (a1)
    {
      v8 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v6 = 25;
        *(_DWORD *)(v8 + 80) = 25;
        sub_1ACBE938C(v8, 25);
        return v6;
      }
      sqlite3_log(21, "API called with finalized prepared statement", a3);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3);
    }
    return 25;
  }
  v5 = (a2 - 1);
  v6 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    v7 = *((_QWORD *)a1 + 16) + (v5 << 6);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v7, a3);
    }
    else
    {
      *(_QWORD *)v7 = a3;
      *(_WORD *)(v7 + 20) = 4;
    }
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v9)
      xmmword_1ECD3B1D0(v9);
    return 0;
  }
  return v6;
}

uint64_t sub_1ACBA3288(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v6 = *(unsigned __int8 *)(a1 + 9);
  if ((*(_WORD *)(v5 + 40) & 0xC) != 0)
    bzero((void *)(v4 + v6), (*(_DWORD *)(v5 + 56) - v6));
  *(_BYTE *)(v4 + v6) = a2;
  if ((a2 & 8) != 0)
    v7 = 8;
  else
    v7 = 12;
  v8 = (v7 + v6);
  v9 = v4 + v6;
  *(_DWORD *)(v9 + 1) = 0;
  *(_BYTE *)(v9 + 7) = 0;
  *(_BYTE *)(v9 + 5) = BYTE1(*(_DWORD *)(v5 + 56));
  *(_BYTE *)(v9 + 6) = *(_DWORD *)(v5 + 56);
  *(_DWORD *)(a1 + 20) = (unsigned __int16)(*(_DWORD *)(v5 + 56) - v8);
  result = sub_1ACBEC580(a1, a2);
  *(_WORD *)(a1 + 18) = v8;
  v11 = *(unsigned int *)(v5 + 52);
  *(_QWORD *)(a1 + 88) = v4 + v11;
  *(_QWORD *)(a1 + 96) = v4 + v8;
  *(_QWORD *)(a1 + 104) = v4 + *(unsigned __int8 *)(a1 + 10);
  *(_BYTE *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 26) = v11 - 1;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t sub_1ACBA3368(uint64_t a1, uint64_t *a2, int *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v12;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  BOOL v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t i;
  int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t *v112;
  int v113;
  unsigned int *v114;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 64);
  v7 = bswap32(*(_DWORD *)(*(_QWORD *)(v5 + 80) + 36));
  if (v7 >= v6)
    return sub_1ACBEB08C(83225);
  if (v7)
  {
    if (a5 == 2)
    {
      v12 = 1;
    }
    else if (a5 == 1 && v6 >= a4)
    {
      LOBYTE(v118) = 0;
      v16 = sub_1ACBEF22C((_DWORD *)a1, a4, &v118, 0);
      v12 = v118 == 2;
      if ((_DWORD)v16)
        return v16;
    }
    else
    {
      v12 = 0;
    }
    v18 = *(_QWORD *)(v5 + 112);
    v19 = *(_DWORD **)(v18 + 40);
    if ((*(_WORD *)(v18 + 52) & 4) != 0 && v19[8] >= *(_DWORD *)(v18 + 48))
    {
      if (v19[32])
      {
        v16 = sub_1ACBEA110(v18);
        if ((_DWORD)v16)
          return v16;
      }
    }
    else
    {
      v16 = v19[12];
      if ((_DWORD)v16)
        return v16;
      if (v19[46] <= v19[50])
      {
        v16 = sub_1ACB9A818(v18);
        if ((_DWORD)v16)
          return v16;
      }
      else
      {
        v16 = sub_1ACBEDEA4(v18);
        if ((_DWORD)v16)
          return v16;
      }
    }
    v113 = a5;
    v20 = 0;
    v21 = 0;
    *(_DWORD *)(*(_QWORD *)(v5 + 80) + 36) = bswap32(v7 - 1);
    v114 = (unsigned int *)a3;
    v112 = a2;
    v116 = v6;
    while (1)
    {
      v22 = v20;
      if (v20)
      {
        v23 = *(unsigned __int8 **)(v20 + 80);
        v24 = (*v23 << 24) | (v23[1] << 16) | (v23[2] << 8);
        v25 = v23 + 3;
      }
      else
      {
        v26 = *(unsigned __int8 **)(v5 + 80);
        v24 = (v26[32] << 24) | (v26[33] << 16) | (v26[34] << 8);
        v25 = v26 + 35;
      }
      v27 = *v25;
      v28 = v24 | v27;
      if ((v24 | v27) > v6 || v21 > v7)
      {
        v16 = sub_1ACBEB08C(83281);
        goto LABEL_220;
      }
      v30 = sub_1ACBEFA50(a1, v24 | v27, &v119);
      if ((_DWORD)v30)
      {
        v16 = v30;
        goto LABEL_220;
      }
      v117 = v22;
      v20 = v119;
      v31 = *(_DWORD **)(v119 + 80);
      v32 = bswap32(v31[1]);
      if (!v12 && !(_DWORD)v32)
      {
        v33 = *(_QWORD *)(v119 + 112);
        v34 = *(_DWORD **)(v33 + 40);
        if ((*(_WORD *)(v33 + 52) & 4) != 0 && v34[8] >= *(_DWORD *)(v33 + 48))
        {
          v6 = v116;
          if (v34[32])
          {
            v35 = v119;
            v36 = sub_1ACBEA110(v33);
            goto LABEL_70;
          }
        }
        else
        {
          v16 = v34[12];
          v6 = v116;
          if ((_DWORD)v16)
            goto LABEL_216;
          v35 = v119;
          if (v34[46] <= v34[50])
            v36 = sub_1ACB9A818(v33);
          else
            v36 = sub_1ACBEDEA4(v33);
LABEL_70:
          v16 = v36;
          v20 = v35;
          if ((_DWORD)v36)
            goto LABEL_216;
          v31 = *(_DWORD **)(v35 + 80);
        }
        v16 = 0;
        v12 = 0;
        *v114 = v28;
        *(_DWORD *)(*(_QWORD *)(v5 + 80) + 32) = *v31;
        *a2 = v20;
        v119 = 0;
        v20 = 0;
        v22 = v117;
        if (v117)
          goto LABEL_182;
        goto LABEL_31;
      }
      if (v32 > (*(_DWORD *)(a1 + 56) >> 2) - 2)
      {
        v101 = v119;
        v102 = sub_1ACBEB08C(83310);
        v20 = v101;
        v16 = v102;
        goto LABEL_216;
      }
      if (v12)
      {
        v37 = v113 == 2;
        if (v28 >= a4)
          v37 = 0;
        v38 = v28 != a4 && !v37;
        if (!v38)
        {
          *v114 = v28;
          *a2 = v20;
          v39 = *(_QWORD *)(v20 + 112);
          v40 = *(_DWORD **)(v39 + 40);
          if ((*(_WORD *)(v39 + 52) & 4) == 0 || v40[8] < *(_DWORD *)(v39 + 48))
          {
            v16 = v40[12];
            v22 = v117;
            if ((_DWORD)v16)
              goto LABEL_217;
            v41 = v20;
            if (v40[46] <= v40[50])
              v42 = sub_1ACB9A818(v39);
            else
              v42 = sub_1ACBEDEA4(v39);
            goto LABEL_118;
          }
          v22 = v117;
          if (v40[32])
          {
            v41 = v20;
            v42 = sub_1ACBEA110(v39);
LABEL_118:
            v16 = v42;
            v20 = v41;
            if ((_DWORD)v42)
              goto LABEL_217;
          }
          if ((_DWORD)v32)
          {
            v118 = 0;
            v111 = v20;
            v61 = *(unsigned __int8 **)(v20 + 80);
            v62 = v61[8];
            v63 = v61[9];
            v64 = v61[11];
            v65 = (v62 << 24) | (v63 << 16) | (v61[10] << 8) | v64;
            if (v65 > v116)
            {
              v66 = sub_1ACBEB08C(83344);
LABEL_214:
              v16 = v66;
LABEL_215:
              v20 = v111;
LABEL_216:
              v22 = v117;
              goto LABEL_217;
            }
            v110 = v61[10];
            v66 = sub_1ACBEFA50(a1, v65, &v118);
            if ((_DWORD)v66)
              goto LABEL_214;
            v109 = v64;
            v67 = v118;
            v68 = *(_QWORD *)(v118 + 112);
            v69 = *(_DWORD **)(v68 + 40);
            v70 = v111;
            if ((*(_WORD *)(v68 + 52) & 4) == 0 || v69[8] < *(_DWORD *)(v68 + 48))
            {
              v16 = v69[12];
              if ((_DWORD)v16)
                goto LABEL_212;
              if (v69[46] <= v69[50])
                v71 = sub_1ACB9A818(v68);
              else
                v71 = sub_1ACBEDEA4(v68);
              goto LABEL_150;
            }
            if (v69[32])
            {
              v71 = sub_1ACBEA110(v68);
LABEL_150:
              v16 = v71;
              v70 = v111;
              if ((_DWORD)v71)
              {
LABEL_212:
                sub_1ACBEF3E0(v67);
                goto LABEL_215;
              }
            }
            **(_DWORD **)(v67 + 80) = **(_DWORD **)(v70 + 80);
            *(_DWORD *)(*(_QWORD *)(v67 + 80) + 4) = bswap32(v32 - 1);
            memcpy((void *)(*(_QWORD *)(v67 + 80) + 8), (const void *)(*(_QWORD *)(v70 + 80) + 12), (4 * (v32 - 1)));
            sub_1ACBEF3E0(v67);
            if (v117)
            {
              v66 = sub_1ACB9A7C8(*(_QWORD *)(v117 + 112));
              v6 = v116;
              if ((_DWORD)v66)
                goto LABEL_214;
              v82 = *(_BYTE **)(v117 + 80);
              *v82 = v62;
              v82[1] = v63;
              v82[2] = v110;
              v83 = v82 + 3;
            }
            else
            {
              v84 = *(_BYTE **)(v5 + 80);
              v84[32] = v62;
              v84[33] = v63;
              v84[34] = v110;
              v83 = v84 + 35;
              v6 = v116;
            }
            *v83 = v109;
            v22 = v117;
          }
          else if (v22)
          {
            v72 = *(_QWORD *)(v22 + 112);
            v73 = *(_DWORD **)(v72 + 40);
            if ((*(_WORD *)(v72 + 52) & 4) != 0 && v73[8] >= *(_DWORD *)(v72 + 48))
            {
              v6 = v116;
              if (v73[32])
              {
                v85 = v20;
                v16 = sub_1ACBEA110(v72);
                v20 = v85;
                if ((_DWORD)v16)
                  goto LABEL_217;
              }
            }
            else
            {
              v16 = v73[12];
              if ((_DWORD)v16)
                goto LABEL_217;
              v74 = v20;
              v75 = v73[46] <= v73[50] ? sub_1ACB9A818(v72) : sub_1ACBEDEA4(v72);
              v16 = v75;
              v6 = v116;
              v20 = v74;
              if ((_DWORD)v75)
                goto LABEL_217;
            }
            **(_DWORD **)(v22 + 80) = **(_DWORD **)(v20 + 80);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v5 + 80) + 32) = **(_DWORD **)(v20 + 80);
            v6 = v116;
          }
          v20 = 0;
          v16 = 0;
          v12 = 0;
          v119 = 0;
          if (v22)
            goto LABEL_182;
          goto LABEL_31;
        }
      }
      if (!(_DWORD)v32)
      {
        v16 = 0;
        goto LABEL_113;
      }
      if (!a4)
        break;
      if (v113 == 2)
      {
        v43 = 0;
        v44 = 8;
        while (bswap32(*(_DWORD *)((char *)v31 + (v44 & 0xFFFFFFFC))) > a4)
        {
          ++v43;
          v44 += 4;
          if (v32 == v43)
            goto LABEL_91;
        }
      }
      else
      {
        if (v32 < 2)
          break;
        LODWORD(v43) = 0;
        v45 = bswap32(v31[2]) - a4;
        if (v45 == 0x80000000)
          v46 = 0x7FFFFFFF;
        else
          v46 = -v45;
        if (v45 < 0)
          v45 = v46;
        v47 = 12;
        for (i = 1; i != v32; ++i)
        {
          v49 = bswap32(*(_DWORD *)((char *)v31 + (v47 & 0xFFFFFFFC))) - a4;
          if (v49 == 0x80000000)
            v50 = 0x7FFFFFFF;
          else
            v50 = -v49;
          if (v49 < 0)
            v49 = v50;
          if (v49 < v45)
          {
            LODWORD(v43) = i;
            v45 = v49;
          }
          v47 += 4;
        }
      }
LABEL_92:
      v51 = (_DWORD *)((char *)v31 + (4 * v43 + 8));
      v52 = bswap32(*v51);
      if (v52 > v116 || v52 <= 1)
      {
        v103 = v119;
        v104 = sub_1ACBEB08C(83409);
        v20 = v103;
        v16 = v104;
        v22 = v117;
        if (!v20)
        {
LABEL_220:
          if (v22)
          {
            v107 = *(_QWORD *)(v22 + 112);
            if ((*(_WORD *)(v107 + 52) & 0x20) != 0)
            {
              v108 = *(_QWORD *)(v107 + 40);
              --*(_DWORD *)(v108 + 152);
              *(_QWORD *)(v107 + 32) = *(_QWORD *)(v108 + 168);
              *(_QWORD *)(v108 + 168) = v107;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v108 + 72) + 144))(*(_QWORD *)(v108 + 72), *(_QWORD *)(v108 + 200) * (*(_DWORD *)(v107 + 48) - 1), *(_QWORD *)(v107 + 8));
            }
            else
            {
              sub_1ACBE906C(v107);
            }
          }
          return v16;
        }
LABEL_217:
        v105 = *(_QWORD *)(v20 + 112);
        if ((*(_WORD *)(v105 + 52) & 0x20) != 0)
        {
          v106 = *(_QWORD *)(v105 + 40);
          --*(_DWORD *)(v106 + 152);
          *(_QWORD *)(v105 + 32) = *(_QWORD *)(v106 + 168);
          *(_QWORD *)(v106 + 168) = v105;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v106 + 72) + 144))(*(_QWORD *)(v106 + 72), *(_QWORD *)(v106 + 200) * (*(_DWORD *)(v105 + 48) - 1), *(_QWORD *)(v105 + 8));
        }
        else
        {
          sub_1ACBE906C(v105);
        }
        goto LABEL_220;
      }
      if ((v52 >= a4 || v113 != 2) && v12 && v52 != a4)
      {
        v16 = 0;
        v12 = 1;
        a2 = v112;
LABEL_113:
        v6 = v116;
        v22 = v117;
        if (v117)
          goto LABEL_182;
        goto LABEL_31;
      }
      *v114 = v52;
      v57 = *(_QWORD *)(v20 + 112);
      v58 = *(_DWORD **)(v57 + 40);
      if ((*(_WORD *)(v57 + 52) & 4) == 0 || v58[8] < *(_DWORD *)(v57 + 48))
      {
        v16 = v58[12];
        if ((_DWORD)v16)
          goto LABEL_216;
        v59 = v20;
        if (v58[46] <= v58[50])
          v60 = sub_1ACB9A818(v57);
        else
          v60 = sub_1ACBEDEA4(v57);
LABEL_137:
        v16 = v60;
        v20 = v59;
        if ((_DWORD)v60)
          goto LABEL_216;
        goto LABEL_138;
      }
      if (v58[32])
      {
        v59 = v20;
        v60 = sub_1ACBEA110(v57);
        goto LABEL_137;
      }
LABEL_138:
      if (v43 < (int)v32 - 1)
        *v51 = *(_DWORD *)((char *)v31 + (4 * v32 + 4));
      v31[1] = bswap32(v32 - 1);
      v76 = *v114;
      v77 = *(unsigned int **)(a1 + 96);
      if (!v77)
      {
        v78 = v20;
        a2 = v112;
        v6 = v116;
        v22 = v117;
        goto LABEL_176;
      }
      a2 = v112;
      v6 = v116;
      v22 = v117;
      if (*v77 < v76)
      {
        v78 = v20;
        goto LABEL_176;
      }
      v79 = v76 - 1;
      if (v76 - 1 >= *v77)
        goto LABEL_175;
      while (1)
      {
        v80 = v77[2];
        if (!v80)
          break;
        v81 = v79 / v80;
        v79 %= v80;
        v77 = *(unsigned int **)&v77[2 * v81 + 4];
        if (!v77)
        {
          v78 = v20;
          goto LABEL_176;
        }
      }
      if (*v77 <= 0xF80)
      {
        v78 = v20;
        goto LABEL_176;
      }
      v86 = v79 % 0x7C;
      v87 = v77[v79 % 0x7C + 4];
      if (v87)
      {
        v78 = v20;
        v88 = v79 + 1;
        do
        {
          if (v87 == v88)
            break;
          if (v86 == 123)
            v86 = 0;
          else
            ++v86;
          v87 = v77[v86 + 4];
        }
        while (v87);
      }
      else
      {
LABEL_175:
        v78 = v20;
      }
LABEL_176:
      v89 = sub_1ACBEFA50(a1, v76, a2);
      if ((_DWORD)v89)
      {
        v16 = v89;
LABEL_178:
        v12 = 0;
        v20 = v78;
        if (v22)
          goto LABEL_182;
        goto LABEL_31;
      }
      v16 = sub_1ACB9A7C8(*(_QWORD *)(*a2 + 112));
      if (!(_DWORD)v16)
        goto LABEL_178;
      sub_1ACBEF3E0(*a2);
      v12 = 0;
      *a2 = 0;
      v20 = v78;
      if (v22)
      {
LABEL_182:
        v90 = v20;
        v91 = *(_QWORD *)(v22 + 112);
        if ((*(_WORD *)(v91 + 52) & 0x20) != 0)
        {
          v92 = *(_QWORD *)(v91 + 40);
          --*(_DWORD *)(v92 + 152);
          *(_QWORD *)(v91 + 32) = *(_QWORD *)(v92 + 168);
          *(_QWORD *)(v92 + 168) = v91;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v92 + 72) + 144))(*(_QWORD *)(v92 + 72), *(_QWORD *)(v92 + 200) * (*(_DWORD *)(v91 + 48) - 1), *(_QWORD *)(v91 + 8));
        }
        else
        {
          sub_1ACBE906C(v91);
        }
        v20 = v90;
      }
LABEL_31:
      ++v21;
      v38 = !v12;
      v12 = 1;
      if (v38)
      {
        v22 = 0;
        if (!v20)
          goto LABEL_220;
        goto LABEL_217;
      }
    }
LABEL_91:
    LODWORD(v43) = 0;
    goto LABEL_92;
  }
  v14 = *(_QWORD *)(v5 + 112);
  v15 = *(_DWORD **)(v14 + 40);
  if ((*(_WORD *)(v14 + 52) & 4) != 0 && v15[8] >= *(_DWORD *)(v14 + 48))
  {
    if (!v15[32])
      goto LABEL_188;
    v17 = sub_1ACBEA110(v14);
  }
  else
  {
    v16 = v15[12];
    if ((_DWORD)v16)
      return v16;
    if (v15[46] <= v15[50])
      v17 = sub_1ACB9A818(v14);
    else
      v17 = sub_1ACBEDEA4(v14);
  }
  v16 = v17;
  if ((_DWORD)v17)
    return v16;
  v6 = *(_DWORD *)(a1 + 64);
LABEL_188:
  v93 = v6 + 1;
  *(_DWORD *)(a1 + 64) = v6 + 1;
  v94 = dword_1EECAC650 / *(_DWORD *)(a1 + 52);
  if (v6 == v94)
  {
    v93 = v6 + 2;
    *(_DWORD *)(a1 + 64) = v6 + 2;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    if (v93 >= 2)
    {
      v96 = (v93 - 2) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
      v97 = v96 + 1 == v94 ? 3 : 2;
      v95 = v97 + v96;
    }
    else
    {
      v95 = 0;
    }
    if (v95 == v93)
    {
      v118 = 0;
      v16 = sub_1ACBEFA50(a1, v93, &v118);
      if ((_DWORD)v16)
        return v16;
      v98 = v118;
      v16 = sub_1ACB9A7C8(*(_QWORD *)(v118 + 112));
      sub_1ACBEF3E0(v98);
      if ((_DWORD)v16)
        return v16;
      v99 = *(_DWORD *)(a1 + 64);
      v93 = v99 + 1;
      *(_DWORD *)(a1 + 64) = v99 + 1;
      if (v99 == dword_1EECAC650 / *(_DWORD *)(a1 + 52))
      {
        v93 = v99 + 2;
        *(_DWORD *)(a1 + 64) = v99 + 2;
      }
    }
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) + 28) = bswap32(v93);
  v100 = *(_DWORD *)(a1 + 64);
  *a3 = v100;
  v16 = sub_1ACBEFA50(a1, v100, a2);
  if (!(_DWORD)v16)
  {
    v16 = sub_1ACB9A7C8(*(_QWORD *)(*a2 + 112));
    if ((_DWORD)v16)
    {
      sub_1ACBEF3E0(*a2);
      *a2 = 0;
    }
  }
  return v16;
}

uint64_t sub_1ACBA3F80(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t v15;
  uint64_t (**v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);
  uint64_t result;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  sub_1ACBA4298(v2, 0, 0, a2);
  if (!*(_BYTE *)(v2 + 17))
    goto LABEL_23;
  v4 = *(_DWORD *)(v2 + 20) - 1;
  *(_DWORD *)(v2 + 20) = v4;
  if (!v4)
  {
    sub_1ACBED048(v2);
    if (!*(_BYTE *)(v2 + 17))
      goto LABEL_23;
  }
  if ((_BYTE)word_1ECD3B144)
  {
    v5 = qword_1ECD3B1B0(2);
    v6 = v5;
    if (v5)
    {
      xmmword_1ECD3B1C0(v5);
      v7 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
LABEL_12:
  v8 = *(_DWORD *)(v3 + 104);
  *(_DWORD *)(v3 + 104) = v8 - 1;
  if (v8 <= 1)
  {
    v9 = &qword_1EECAD240;
    v10 = qword_1EECAD240;
    if (qword_1EECAD240 == v3)
    {
LABEL_17:
      *v9 = *(_QWORD *)(v3 + 112);
    }
    else
    {
      while (v10)
      {
        v11 = v10;
        v10 = *(_QWORD *)(v10 + 112);
        if (v10 == v3)
        {
          v9 = (uint64_t *)(v11 + 112);
          goto LABEL_17;
        }
      }
    }
    if (*(_QWORD *)(v3 + 88))
      off_1ECD3B1B8();
  }
  if ((v7 & 1) == 0)
    xmmword_1ECD3B1D0(v6);
  if (v8 > 1)
    goto LABEL_41;
LABEL_23:
  sub_1ACBA4510(*(_QWORD *)v3, *(_QWORD *)v2);
  v12 = *(void (**)(void))(v3 + 80);
  if (v12 && *(_QWORD *)(v3 + 72))
    v12();
  v13 = *(_QWORD *)(v3 + 72);
  if (!v13)
    goto LABEL_33;
  v14 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v13);
    v13 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_33;
    v14 = &xmmword_1ECD3B1D0;
  }
  (*v14)(v13);
LABEL_33:
  v15 = *(_QWORD *)(v3 + 136);
  if (v15)
  {
    *(_QWORD *)(v3 + 136) = v15 - 4;
    sub_1ACBEBAB0(v15 - 4);
    *(_QWORD *)(v3 + 136) = 0;
  }
  v16 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_40;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v3);
  v3 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = &xmmword_1ECD3B1D0;
LABEL_40:
    (*v16)(v3);
  }
LABEL_41:
  v17 = *(_QWORD *)(v2 + 40);
  if (v17)
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v2 + 32);
  v18 = *(_QWORD *)(v2 + 32);
  if (v18)
    *(_QWORD *)(v18 + 40) = v17;
  v19 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v19)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v2);
  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v19 = &xmmword_1ECD3B1D0;
    return (*v19)(v2);
  }
  return result;
}

uint64_t sub_1ACBA4298(uint64_t a1, int a2, int a3, double a4)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  int v14;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1ACBECF6C(a1);
    if (v5)
      goto LABEL_4;
  }
  else if (a2)
  {
LABEL_4:
    sub_1ACBF02F4(a1, v5, a3);
    goto LABEL_5;
  }
  v10 = *(unsigned __int8 **)(v7 + 16);
  if (v10)
  {
    v11 = sub_1ACBEEE90(v10, 0, 0);
    if (v11)
    {
      v5 = v11;
      a3 = 0;
      goto LABEL_4;
    }
  }
LABEL_5:
  if (*(_BYTE *)(a1 + 16) == 2)
  {
    sub_1ACBA43F8(*(_QWORD *)v7, a4);
    if (!(*(unsigned int (**)(void))(*(_QWORD *)v7 + 288))())
    {
      v8 = MEMORY[0x10];
      if (*(_DWORD *)(MEMORY[0x10] + 4) == 1)
      {
        v9 = *(_QWORD *)(MEMORY[0x10] + 80);
      }
      else
      {
        v9 = MEMORY[8];
        *(_QWORD *)(MEMORY[0x10] + 112) = 0;
        *(_QWORD *)(v8 + 72) = v7;
        *(_QWORD *)(v8 + 80) = v9;
        *(_DWORD *)(v8 + 4) = 1;
        *(_BYTE *)(v8 + 9) = 100;
      }
      v12 = bswap32(*(_DWORD *)(v9 + 28));
      if (!v12)
        v12 = *(_DWORD *)(*(_QWORD *)v7 + 32);
      *(_DWORD *)(v7 + 64) = v12;
      sub_1ACBE097C(*(_QWORD *)(v8 + 112));
    }
    *(_BYTE *)(v7 + 36) = 1;
    sub_1ACBAF4D0(*(_QWORD *)(v7 + 96));
    *(_QWORD *)(v7 + 96) = 0;
  }
  result = sub_1ACB8FB54(a1);
  if (*(_BYTE *)(a1 + 17))
  {
    v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14)
      return sub_1ACBED048(a1);
  }
  return result;
}

uint64_t sub_1ACBA43F8(uint64_t a1, double a2)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  uint64_t (*v8)();

  v3 = *(unsigned __int8 *)(a1 + 21);
  if (v3 == 6)
    return *(unsigned int *)(a1 + 48);
  if (v3 < 2)
    return 0;
  if (*(_QWORD *)(a1 + 344))
  {
    v5 = sub_1ACBF2298(a1, 2, -1, a2);
    LODWORD(result) = sub_1ACB8FD38(a1, *(unsigned __int8 *)(a1 + 24), 0);
    if (v5)
      result = v5;
    else
      result = result;
  }
  else if (v3 == 2 || **(_QWORD **)(a1 + 80) == 0)
  {
    result = sub_1ACB8FD38(a1, 0, 0);
    if (v3 >= 3 && !*(_BYTE *)(a1 + 19))
    {
      *(_DWORD *)(a1 + 48) = 4;
      *(_BYTE *)(a1 + 21) = 6;
      goto LABEL_23;
    }
  }
  else
  {
    result = sub_1ACBB6FE4(a1, 0);
  }
  if (result == 13 || result == 10)
  {
    *(_DWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 21) = 6;
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 27) && !*(_QWORD *)(a1 + 296))
        v8 = sub_1ACBEBC58;
      else
        v8 = sub_1ACBEBEA8;
      goto LABEL_28;
    }
LABEL_23:
    v8 = (uint64_t (*)())sub_1ACBEBC4C;
LABEL_28:
    *(_QWORD *)(a1 + 288) = v8;
  }
  return result;
}

uint64_t sub_1ACBA4510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  int v10;
  uint64_t i;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  uint64_t (**v17)(uint64_t);
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  void *v22;
  int v23;
  uint64_t v24;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 328);
  if (off_1EECAD248)
    off_1EECAD248(a1);
  v5 = *(_QWORD *)(v3 + 168);
  if (v5)
  {
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v5);
        v5 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_9;
        v8 = &xmmword_1ECD3B1D0;
      }
      (*v8)(v5);
LABEL_9:
      v5 = v7;
    }
    while (v7);
  }
  *(_BYTE *)(v3 + 8) = 0;
  if (!a2
    || (*(_BYTE *)(a2 + 49) & 8) != 0
    || !*(_BYTE *)(v3 + 16)
    && *(_DWORD *)(v3 + 32)
    && (v9 = **(_QWORD **)(v3 + 72)) != 0
    && (v10 = (*(uint64_t (**)(void))(v9 + 80))(), v10 != 12)
    && v10)
  {
    v6 = 0;
  }
  else
  {
    v6 = v4;
  }
  sub_1ACBA488C(*(_QWORD *)(v3 + 344), a2, *(unsigned __int8 *)(v3 + 15), *(_DWORD *)(v3 + 200), v6);
  *(_QWORD *)(v3 + 344) = 0;
  ++*(_DWORD *)(v3 + 132);
  for (i = *(_QWORD *)(v3 + 112); i; i = *(_QWORD *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  sub_1ACB5AD68(*(_QWORD **)(v3 + 336), 0);
  if (!*(_BYTE *)(v3 + 19))
  {
    v19 = *(uint64_t **)(v3 + 80);
    v20 = *v19;
    if (!*v19)
    {
LABEL_55:
      v23 = *(unsigned __int8 *)(v3 + 21);
      if (*(_BYTE *)(v3 + 21))
      {
        if (v23 == 1)
        {
          if (!*(_BYTE *)(v3 + 8))
            sub_1ACB8FD38(v3, 0, 0);
        }
        else if (v23 != 6)
        {
          if (off_1EECAD248)
            v12 = off_1EECAD248(v19);
          v24 = sub_1ACBA43F8(v3, v12);
          if (off_1EECAD250)
            off_1EECAD250(v24);
        }
      }
      goto LABEL_23;
    }
    if (!*(_BYTE *)(v3 + 11))
    {
      v19 = (uint64_t *)(*(uint64_t (**)(void))(v20 + 40))();
      if ((_DWORD)v19)
      {
LABEL_42:
        if (v19 == 13 || v19 == 10)
        {
          *(_DWORD *)(v3 + 48) = (_DWORD)v19;
          *(_BYTE *)(v3 + 21) = 6;
          if ((_DWORD)v19)
          {
            v22 = sub_1ACBEBC4C;
          }
          else if (*(_BYTE *)(v3 + 27) && !*(_QWORD *)(v3 + 296))
          {
            v22 = sub_1ACBEBC58;
          }
          else
          {
            v22 = sub_1ACBEBEA8;
          }
          *(_QWORD *)(v3 + 288) = v22;
        }
        goto LABEL_55;
      }
      v20 = **(_QWORD **)(v3 + 80);
    }
    v19 = (uint64_t *)(*(uint64_t (**)(void))(v20 + 48))();
    goto LABEL_42;
  }
LABEL_23:
  v13 = sub_1ACB90304(v3);
  if (off_1EECAD250)
    off_1EECAD250(v13);
  v14 = *(_QWORD *)(v3 + 80);
  if (*(_QWORD *)v14)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v14 + 8))(*(_QWORD *)(v3 + 80));
    *(_QWORD *)v14 = 0;
  }
  v15 = *(_QWORD *)(v3 + 72);
  if (*(_QWORD *)v15)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15 + 8))(*(_QWORD *)(v3 + 72));
    *(_QWORD *)v15 = 0;
  }
  sub_1ACBEBAB0(v4);
  ((void (*)(_QWORD))*(&xmmword_1ECD3B238 + 1))(*(_QWORD *)(*(_QWORD *)(v3 + 336) + 72));
  v16 = *(void (**)(_QWORD))(v3 + 312);
  if (v16)
    v16(*(_QWORD *)(v3 + 320));
  v17 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v17)(v3);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v3);
  v3 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v17 = &xmmword_1ECD3B1D0;
    return (*v17)(v3);
  }
  return result;
}

uint64_t sub_1ACBA488C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(__n128);
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  void (**v22)(uint64_t);

  if (!a1)
    return 0;
  v9 = a1;
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v10)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 80))(v10, 106, 0);
  v11 = **(_QWORD **)(v9 + 16);
  if (v11)
    (*(void (**)(void))(v11 + 80))();
  if (a5)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 8) + 56))(*(_QWORD *)(v9 + 8), 4);
    if ((_DWORD)v12)
      goto LABEL_11;
    if (!*(_BYTE *)(v9 + 63))
      *(_BYTE *)(v9 + 63) = 1;
    v12 = sub_1ACBAF5B4(v9, a2, 0, 0, 0, a3, a4, a5, 0, 0);
    if ((_DWORD)v12)
    {
LABEL_11:
      v13 = v12;
      a5 = 0;
      goto LABEL_17;
    }
    v14 = **(_QWORD **)(v9 + 8);
    if (v14)
      (*(void (**)(void))(v14 + 80))();
    a5 = 1;
  }
  v13 = 0;
LABEL_17:
  v15 = sub_1ACBEB4DC(v9, a5);
  v17 = *(_QWORD *)(v9 + 16);
  if (*(_QWORD *)v17)
  {
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 8))(*(_QWORD *)(v9 + 16));
    *(_QWORD *)v17 = 0;
  }
  if ((_DWORD)a5)
  {
    if (off_1EECAD248)
      v16.n128_f64[0] = off_1EECAD248(v15);
    v18 = *(_QWORD *)v9;
    v19 = *(uint64_t (**)(__n128))(*(_QWORD *)v9 + 48);
    if (v19)
      v18 = v19(v16);
    if (off_1EECAD250)
      off_1EECAD250(v18);
  }
  v20 = *(_QWORD *)(v9 + 48);
  if (!v20)
    goto LABEL_33;
  v21 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v20);
    v20 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_33;
    v21 = &xmmword_1ECD3B1D0;
  }
  (*v21)(v20);
LABEL_33:
  v22 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_38:
    (*v22)(v9);
    return v13;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v9);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v9);
  v9 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v22 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_38;
  }
  return v13;
}

uint64_t sub_1ACBA4B2C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  unint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t (**v7)(uint64_t);
  uint64_t result;
  unint64_t v9;

  v1 = a1;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * i);
      v9 = v4;
      if (v4)
      {
        do
        {
          v4 = *(_QWORD *)(v4 + 24);
          sub_1ACC4DDE0((int *)v1, &v9);
          v9 = v4;
        }
        while (v4);
        v2 = *(unsigned int *)(v1 + 32);
      }
    }
  }
  *(_DWORD *)(v1 + 120) = 0;
  while (*(_QWORD *)(v1 + 144))
    sub_1ACC4DAF8(v1, *(_QWORD *)(v1 + 136));
  while (*(_QWORD *)(v1 + 160))
    sub_1ACC4DAF8(v1, *(_QWORD *)(v1 + 152));
  v5 = *(_QWORD *)(v1 + 40);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v6)(v5);
      goto LABEL_19;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
LABEL_19:
  v7 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v7)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v7 = &xmmword_1ECD3B1D0;
    return (*v7)(v1);
  }
  return result;
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  sqlite3_value *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  if (!a1)
    return sqlite3_value_blob((sqlite3_value *)&qword_1ACCB6E80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
  {
    v6 = (sqlite3_value *)(v5 + ((unint64_t)iCol << 6));
  }
  else
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
    v6 = (sqlite3_value *)&qword_1ACCB6E80;
  }
  v8 = sqlite3_value_blob(v6);
  v9 = *(_QWORD *)a1;
  v10 = *((_DWORD *)a1 + 13);
  if (v10 || (v11 = *(unsigned __int8 *)(v9 + 103), *(_BYTE *)(v9 + 103)))
  {
    v11 = sub_1ACBF2990(v9, v10);
    v9 = *(_QWORD *)a1;
  }
  *((_DWORD *)a1 + 13) = v11;
  v12 = *(_QWORD *)(v9 + 24);
  if (v12)
    xmmword_1ECD3B1D0(v12);
  return v8;
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  if (!a1)
    return 5;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (v5 && *((unsigned __int16 *)a1 + 130) > iCol)
  {
    v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  }
  else
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
    v6 = &qword_1ACCB6E80;
  }
  v8 = byte_1ACCB6445[*((_WORD *)v6 + 10) & 0x3F];
  v9 = *(_QWORD *)a1;
  v10 = *((_DWORD *)a1 + 13);
  if (v10 || (v11 = *(unsigned __int8 *)(v9 + 103), *(_BYTE *)(v9 + 103)))
  {
    v11 = sub_1ACBF2990(v9, v10);
    v9 = *(_QWORD *)a1;
  }
  *((_DWORD *)a1 + 13) = v11;
  v12 = *(_QWORD *)(v9 + 24);
  if (v12)
    xmmword_1ECD3B1D0(v12);
  return v8;
}

uint64_t sub_1ACBA4E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;

  v8 = a3;
  v11 = *(_QWORD *)(a2 + 80);
  if (!v11 || (result = sub_1ACBA4E80(a1, v11, a3)) == 0)
  {
    v13 = *(_DWORD **)(a2 + 32);
    if (*v13 <= v8)
      return 0;
    else
      return sub_1ACB78620(a1, *(unsigned __int8 **)&v13[6 * v8 + 2], a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1ACBA4EF8(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v14;
  char v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  int *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char *v106;
  int v107;
  int v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  char *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v130;

  v8 = a7;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *((_BYTE *)a2 + 36);
  v16 = *a2;
  if ((v15 & 1) != 0)
    v17 = a6;
  else
    v17 = a6 + 1;
  v128 = *v16;
  v18 = v17 + *v16;
  v130 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 12) = *(_DWORD *)(v14 + 144);
  if ((_DWORD)a7)
  {
    v19 = (a4 - a7);
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 56);
    v19 = (v20 + 1);
    *(_DWORD *)(a1 + 56) = v20 + v18;
  }
  v21 = *(_DWORD *)(a3 + 12);
  if (v21)
    v22 = v21 + 1;
  else
    v22 = *(_DWORD *)(a3 + 8);
  v127 = v22;
  v23 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v23;
  *((_DWORD *)a2 + 7) = v23;
  if (a5)
    v24 = 5;
  else
    v24 = 1;
  result = sub_1ACC0A21C(a1, v16, v19, a5, v24, a6, a7, a8);
  if ((v15 & 1) == 0)
  {
    v29 = *((unsigned int *)a2 + 3);
    v30 = (v19 + v128);
    v31 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v31)
    {
      result = sub_1ACBFF5AC(v14, 126, v29, v30, 0, v26, v27, v28);
      if ((int)a6 < 1)
        goto LABEL_23;
      goto LABEL_17;
    }
    *(_DWORD *)(v14 + 144) = v31 + 1;
    v32 = *(_QWORD *)(v14 + 136) + 40 * v31;
    *(_DWORD *)v32 = 126;
    *(_DWORD *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 8) = v30;
    *(_QWORD *)(v32 + 12) = 0;
    *(_QWORD *)(v32 + 28) = 0;
    *(_QWORD *)(v32 + 20) = 0;
    *(_DWORD *)(v32 + 36) = 0;
  }
  if ((int)a6 < 1)
    goto LABEL_23;
LABEL_17:
  if (!v8)
  {
    v33 = v128 + ((v15 & 1) == 0) + v19;
    result = *(_QWORD *)(a1 + 16);
    v34 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v34)
    {
      result = sub_1ACBFF5AC(result, 79, a4, v33, a6, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)(result + 144) = v34 + 1;
      v35 = *(_QWORD *)(result + 136) + 40 * v34;
      *(_DWORD *)v35 = 79;
      *(_DWORD *)(v35 + 4) = a4;
      *(_DWORD *)(v35 + 8) = v33;
      *(_DWORD *)(v35 + 12) = a6;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 16) = 0;
    }
  }
LABEL_23:
  v36 = a3;
  if (v130 < 1)
  {
    v45 = 0;
    v46 = v127;
    if (!v127)
      goto LABEL_96;
    goto LABEL_29;
  }
  v126 = v18;
  v37 = *((_DWORD *)a2 + 2);
  v38 = *(_QWORD *)(a1 + 16);
  v39 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v39;
  v40 = a2[5];
  if (v40)
    result = sub_1ACC0A21C(a1, *(_DWORD **)(a3 + 32), *v40, 0, *((_BYTE *)v40 + 4), v26, v27, v28);
  v41 = (v37 + v19);
  v42 = (v126 - v37);
  v43 = *(_DWORD *)(v38 + 144);
  if (*(_DWORD *)(v38 + 148) <= v43)
  {
    result = sub_1ACBFF5AC(v38, 97, v41, v42, v39, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)(v38 + 144) = v43 + 1;
    v44 = *(_QWORD *)(v38 + 136) + 40 * v43;
    *(_DWORD *)v44 = 97;
    *(_DWORD *)(v44 + 4) = v41;
    *(_DWORD *)(v44 + 8) = v42;
    *(_DWORD *)(v44 + 12) = v39;
    *(_QWORD *)(v44 + 24) = 0;
    *(_QWORD *)(v44 + 32) = 0;
    *(_QWORD *)(v44 + 16) = 0;
  }
  v51 = *(_DWORD *)(a1 + 56);
  v52 = (v51 + 1);
  v53 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(a1 + 56) = v53 + v51;
  if ((v15 & 1) != 0)
  {
    v54 = *((unsigned int *)a2 + 3);
    v57 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v57)
    {
      *(_DWORD *)(v14 + 144) = v57 + 1;
      v58 = *(_QWORD *)(v14 + 136) + 40 * v57;
      *(_DWORD *)v58 = 120;
      *(_DWORD *)(v58 + 4) = v54;
      *(_OWORD *)(v58 + 8) = 0u;
      *(_OWORD *)(v58 + 24) = 0u;
      v55 = v57;
      goto LABEL_52;
    }
    v66 = v14;
    v67 = 120;
  }
  else
  {
    v54 = (v19 + v128);
    v55 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v55)
    {
      *(_DWORD *)(v14 + 144) = v55 + 1;
      v56 = *(_QWORD *)(v14 + 136) + 40 * v55;
      *(_DWORD *)v56 = 17;
      *(_DWORD *)(v56 + 4) = v54;
      *(_OWORD *)(v56 + 8) = 0u;
      *(_OWORD *)(v56 + 24) = 0u;
      goto LABEL_52;
    }
    v66 = v14;
    v67 = 17;
  }
  result = sub_1ACBFF5AC(v66, v67, v54, 0, 0, v26, v27, v28);
  v55 = result;
LABEL_52:
  v68 = *((unsigned int *)a2 + 2);
  v69 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v69)
  {
    result = sub_1ACBFF5AC(v14, 90, v52, v19, v68, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v69 + 1;
    v70 = *(_QWORD *)(v14 + 136) + 40 * v69;
    *(_DWORD *)v70 = 90;
    *(_DWORD *)(v70 + 4) = v52;
    *(_DWORD *)(v70 + 8) = v19;
    *(_DWORD *)(v70 + 12) = v68;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    *(_QWORD *)(v70 + 16) = 0;
  }
  v125 = v39;
  if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    v71 = &byte_1EECAD280;
  else
    v71 = (char *)(*(_QWORD *)(v14 + 136) + 40 * *((int *)a2 + 6));
  if (!*(_BYTE *)(*(_QWORD *)a1 + 103))
  {
    v123 = v55;
    *((_DWORD *)v71 + 2) = v126 - v53;
    v72 = *((_QWORD *)v71 + 2);
    bzero(*(void **)(v72 + 24), *(unsigned __int16 *)(v72 + 6));
    v124 = v52;
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    {
      if (!*(_QWORD *)(*(_QWORD *)v14 + 816) && (*(_DWORD *)v72)-- == 1)
        sub_1ACBF0674(*(_QWORD **)(v72 + 16), (_QWORD *)v72);
    }
    else
    {
      v74 = *(int *)(v14 + 144) - 1;
      v75 = *(_QWORD *)(v14 + 136);
      v76 = v75 + 40 * v74;
      v78 = *(unsigned __int8 *)(v76 + 1);
      v77 = (_BYTE *)(v76 + 1);
      if (v78)
      {
        sub_1ACBFF884((uint64_t *)v14, v75 + 40 * v74, (char *)v72, 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)(v75 + 40 * v74 + 16) = v72;
        *v77 = -8;
      }
    }
    v79 = *a2;
    v80 = **a2;
    v81 = sub_1ACC092C0(*(_QWORD *)a1, v80 - v130, *(unsigned __int16 *)(v72 + 8) - *(unsigned __int16 *)(v72 + 6));
    v85 = v81;
    if (v80 > v130 && v81)
    {
      v86 = 0;
      v87 = (uint64_t)&v79[6 * v130 + 2];
      do
      {
        v88 = sub_1ACB78620(a1, *(unsigned __int8 **)v87, v82, v83, v84, v26, v27, v28);
        if (!v88)
          v88 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        *(_QWORD *)(v85 + 32 + 8 * v86) = v88;
        *(_BYTE *)(*(_QWORD *)(v85 + 24) + v86++) = *(_BYTE *)(v87 + 16);
        v87 += 24;
      }
      while (v80 - v130 != (_DWORD)v86);
    }
    *((_QWORD *)v71 + 2) = v85;
    v89 = *(_DWORD *)(v14 + 144);
    v90 = (v89 + 1);
    if (*(_DWORD *)(v14 + 148) <= v89)
    {
      sub_1ACBFF5AC(v14, 14, v90, 0, (v89 + 1), v26, v27, v28);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v90;
      v91 = *(_QWORD *)(v14 + 136) + 40 * v89;
      *(_DWORD *)v91 = 14;
      *(_QWORD *)(v91 + 4) = v90;
      *(_DWORD *)(v91 + 12) = v90;
      *(_QWORD *)(v91 + 24) = 0;
      *(_QWORD *)(v91 + 32) = 0;
      *(_QWORD *)(v91 + 16) = 0;
    }
    v45 = v125;
    v18 = v126;
    v46 = v127;
    v92 = (*(_DWORD *)(a1 + 68) - 1);
    *(_DWORD *)(a1 + 68) = v92;
    v93 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v93;
    *((_DWORD *)a2 + 4) = v93;
    *((_DWORD *)a2 + 5) = v92;
    v94 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v94)
    {
      sub_1ACBFF5AC(v14, 10, v93, v92, 0, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v94 + 1;
      v95 = *(_QWORD *)(v14 + 136) + 40 * v94;
      *(_DWORD *)v95 = 10;
      *(_DWORD *)(v95 + 4) = v93;
      *(_DWORD *)(v95 + 8) = v92;
      *(_QWORD *)(v95 + 12) = 0;
      *(_QWORD *)(v95 + 28) = 0;
      *(_QWORD *)(v95 + 20) = 0;
      *(_DWORD *)(v95 + 36) = 0;
    }
    v96 = *((unsigned int *)a2 + 3);
    v97 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v97)
    {
      sub_1ACBFF5AC(v14, 146, v96, 0, 0, v26, v27, v28);
      if (!v127)
        goto LABEL_86;
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v97 + 1;
      v98 = *(_QWORD *)(v14 + 136) + 40 * v97;
      *(_DWORD *)v98 = 146;
      *(_DWORD *)(v98 + 4) = v96;
      *(_OWORD *)(v98 + 8) = 0u;
      *(_OWORD *)(v98 + 24) = 0u;
      if (!v127)
      {
LABEL_86:
        if (*(_BYTE *)(*(_QWORD *)v14 + 103))
          v102 = &byte_1EECAD280;
        else
          v102 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v123);
        *((_DWORD *)v102 + 2) = *(_DWORD *)(v14 + 144);
        v103 = *((unsigned int *)a2 + 2);
        result = *(_QWORD *)(a1 + 16);
        v104 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v104)
        {
          result = sub_1ACBFF5AC(result, 79, v19, v124, v103, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)(result + 144) = v104 + 1;
          v105 = *(_QWORD *)(result + 136) + 40 * v104;
          *(_DWORD *)v105 = 79;
          *(_DWORD *)(v105 + 4) = v19;
          *(_DWORD *)(v105 + 8) = v124;
          *(_DWORD *)(v105 + 12) = v103;
          *(_QWORD *)(v105 + 24) = 0;
          *(_QWORD *)(v105 + 32) = 0;
          *(_QWORD *)(v105 + 16) = 0;
        }
        v36 = a3;
        if (*(_BYTE *)(*(_QWORD *)v14 + 103))
          v106 = &byte_1EECAD280;
        else
          v106 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v89);
        *((_DWORD *)v106 + 2) = *(_DWORD *)(v14 + 144);
        if (!v127)
        {
LABEL_96:
          v62 = 0;
          if ((_DWORD)v45)
            goto LABEL_102;
LABEL_97:
          v107 = v18;
          v108 = *((_DWORD *)a2 + 2);
          v109 = *(_QWORD *)(a1 + 16);
          v45 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v45;
          v110 = a2[5];
          if (v110)
            result = sub_1ACC0A21C(a1, *(_DWORD **)(v36 + 32), *v110, 0, *((_BYTE *)v110 + 4), v26, v27, v28);
          v111 = (v108 + v19);
          v112 = (v107 - v108);
          v18 = v107;
          v113 = *(_DWORD *)(v109 + 144);
          if (*(_DWORD *)(v109 + 148) <= v113)
          {
            result = sub_1ACBFF5AC(v109, 97, v111, v112, v45, v26, v27, v28);
          }
          else
          {
            *(_DWORD *)(v109 + 144) = v113 + 1;
            v114 = *(_QWORD *)(v109 + 136) + 40 * v113;
            *(_DWORD *)v114 = 97;
            *(_DWORD *)(v114 + 4) = v111;
            *(_DWORD *)(v114 + 8) = v112;
            *(_DWORD *)(v114 + 12) = v45;
            *(_QWORD *)(v114 + 24) = 0;
            *(_QWORD *)(v114 + 32) = 0;
            *(_QWORD *)(v114 + 16) = 0;
          }
LABEL_102:
          if ((*((_BYTE *)a2 + 36) & 1) != 0)
            v115 = 139;
          else
            v115 = 138;
          v116 = *((unsigned int *)a2 + 3);
          v117 = (v19 + v130);
          v118 = (v18 - v130);
          v119 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v119)
          {
            result = sub_1ACBFF7F0(v14, v115, v116, v45, v117, v118, v27, v28);
            if (!v62)
            {
LABEL_115:
              *((_DWORD *)a2 + 13) = *(_DWORD *)(v14 + 144) - 1;
              return result;
            }
          }
          else
          {
            *(_DWORD *)(v14 + 144) = v119 + 1;
            v120 = *(_QWORD *)(v14 + 136) + 40 * v119;
            *(_BYTE *)v120 = v115;
            *(_WORD *)(v120 + 2) = 0;
            *(_DWORD *)(v120 + 4) = v116;
            *(_DWORD *)(v120 + 8) = v45;
            *(_DWORD *)(v120 + 12) = v117;
            *(_DWORD *)(v120 + 16) = v118;
            *(_BYTE *)(v120 + 1) = -3;
            *(_QWORD *)(v120 + 24) = 0;
            *(_QWORD *)(v120 + 32) = 0;
            if (!v62)
              goto LABEL_115;
          }
          v121 = *((_DWORD *)a2 + 8);
          if (!v121)
            v121 = *(_DWORD *)(v14 + 144);
          if (*(_BYTE *)(*(_QWORD *)v14 + 103))
            v122 = &byte_1EECAD280;
          else
            v122 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v62);
          *((_DWORD *)v122 + 2) = v121;
          goto LABEL_115;
        }
LABEL_29:
        v47 = *((unsigned int *)a2 + 3);
        v48 = *(_DWORD *)(v14 + 144);
        v49 = (v48 + 4);
        if (*(_DWORD *)(v14 + 148) <= v48)
        {
          result = sub_1ACBFF5AC(v14, 60, v46, v49, 0, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)(v14 + 144) = v48 + 1;
          v50 = *(_QWORD *)(v14 + 136) + 40 * v48;
          *(_DWORD *)v50 = 60;
          *(_DWORD *)(v50 + 4) = v46;
          *(_DWORD *)(v50 + 8) = v49;
          *(_QWORD *)(v50 + 12) = 0;
          *(_QWORD *)(v50 + 28) = 0;
          *(_QWORD *)(v50 + 20) = 0;
          *(_DWORD *)(v50 + 36) = 0;
        }
        v59 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v59)
        {
          result = sub_1ACBFF5AC(v14, 32, v47, 0, 0, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)(v14 + 144) = v59 + 1;
          v60 = *(_QWORD *)(v14 + 136) + 40 * v59;
          *(_DWORD *)v60 = 32;
          *(_DWORD *)(v60 + 4) = v47;
          *(_OWORD *)(v60 + 8) = 0u;
          *(_OWORD *)(v60 + 24) = 0u;
        }
        v61 = (v19 + v130);
        v26 = (v128 - v130);
        v62 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v62)
        {
          result = sub_1ACBFF7F0(v14, 40, v47, 0, v61, v26, v27, v28);
          v62 = result;
        }
        else
        {
          *(_DWORD *)(v14 + 144) = v62 + 1;
          v63 = *(_QWORD *)(v14 + 136) + 40 * v62;
          *(_DWORD *)v63 = 64808;
          *(_DWORD *)(v63 + 4) = v47;
          *(_DWORD *)(v63 + 8) = 0;
          *(_DWORD *)(v63 + 12) = v61;
          *(_DWORD *)(v63 + 16) = v26;
          *(_QWORD *)(v63 + 24) = 0;
          *(_QWORD *)(v63 + 32) = 0;
        }
        v64 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v64)
        {
          result = sub_1ACBFF5AC(v14, 130, v47, 0, 0, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)(v14 + 144) = v64 + 1;
          v65 = *(_QWORD *)(v14 + 136) + 40 * v64;
          *(_DWORD *)v65 = 130;
          *(_DWORD *)(v65 + 4) = v47;
          *(_OWORD *)(v65 + 8) = 0u;
          *(_OWORD *)(v65 + 24) = 0u;
        }
        v36 = a3;
        if ((_DWORD)v45)
          goto LABEL_102;
        goto LABEL_97;
      }
    }
    v99 = *((unsigned int *)a2 + 7);
    v100 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v100)
    {
      sub_1ACBFF5AC(v14, 17, v127, v99, 0, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v100 + 1;
      v101 = *(_QWORD *)(v14 + 136) + 40 * v100;
      *(_DWORD *)v101 = 17;
      *(_DWORD *)(v101 + 4) = v127;
      *(_DWORD *)(v101 + 8) = v99;
      *(_QWORD *)(v101 + 12) = 0;
      *(_QWORD *)(v101 + 28) = 0;
      *(_QWORD *)(v101 + 20) = 0;
      *(_DWORD *)(v101 + 36) = 0;
    }
    goto LABEL_86;
  }
  return result;
}

uint64_t sub_1ACBA58F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unsigned __int8 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int32x4_t v84;
  int32x4_t v85;
  __int16 *v86;
  int8x16_t v87;
  uint64_t v88;
  int16x4_t v89;
  int16x4_t v90;
  unsigned __int16 *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int *v111;
  int *v112;
  int v113;
  uint64_t v114;
  unsigned __int8 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int *v167;
  int *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t result;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  unsigned int v193;
  unsigned int v194;

  v8 = a4;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned int *)(a3 + 28);
  v14 = *(_DWORD *)(a1 + 68);
  v191 = v14 - 1;
  *(_DWORD *)(a1 + 68) = v14 - 1;
  v15 = *(_DWORD **)a3;
  v16 = *a5;
  v179 = *((_DWORD *)a5 + 1);
  v180 = *(_QWORD *)(a2 + 32);
  if (*(int *)(a3 + 8) <= 0)
    v17 = &byte_1ACCBEAEE;
  else
    v17 = "RIGHT PART OF ";
  v18 = sub_1ACC0BE9C((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %sORDER BY", a4, (uint64_t)a5, a6, a7, a8, (char)v17);
  v22 = v18;
  if ((*(_BYTE *)(*(_QWORD *)v12 + 49) & 4) != 0)
  {
    v23 = *(_DWORD *)(a3 + 48);
    v24 = *(_DWORD *)(a3 + 52);
    v25 = *(unsigned int *)(v12 + 392);
    v26 = 56 * v25 + 20;
    v27 = v25 + 1;
    while (--v27 >= 1)
    {
      v28 = v26 - 56;
      v29 = *(_QWORD *)(v12 + 400);
      v30 = *(_DWORD *)(v29 + v26 - 76);
      v26 -= 56;
      if (v30 == v18)
      {
        if (v24 < 0)
          v24 = *(_DWORD *)(v12 + 144) - 1;
        v31 = v29 + v28;
        v32 = (int *)(v29 + v28 - 16);
        if (*v32)
        {
          v34 = *(_DWORD *)(v31 - 8);
          v33 = (int *)(v31 - 8);
          if (v34)
          {
            v32 = (int *)(v29 + v28);
            if (*(_DWORD *)(v29 + v28))
              break;
            v35 = 5;
          }
          else
          {
            v35 = 3;
            v32 = v33;
          }
        }
        else
        {
          v35 = 1;
        }
        *v32 = v23;
        *(_DWORD *)(v29 + 4 * v35 + v28 - 16) = v24;
        v23 = *(_DWORD *)(a3 + 48);
        v25 = *(unsigned int *)(v12 + 392);
        break;
      }
    }
    v36 = 56 * v25;
    v37 = v25 + 1;
    while (--v37 >= 1)
    {
      v38 = v36 - 56;
      v39 = *(_QWORD *)(v12 + 400);
      v40 = *(_DWORD *)(v39 + v36 - 56);
      v36 -= 56;
      if (v40 == v18)
      {
        if (v18 >= 1)
          *(_DWORD *)(v39 + v38 + 28) = v18;
        if (v23 >= 1)
          *(_DWORD *)(v39 + v38 + 32) = v23;
        break;
      }
    }
  }
  v41 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v41)
  {
    v42 = *(unsigned int *)(a3 + 16);
    v43 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v43)
    {
      sub_1ACBFF5AC(v12, 10, v42, v41, 0, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v43 + 1;
      v44 = *(_QWORD *)(v12 + 136) + 40 * v43;
      *(_DWORD *)v44 = 10;
      *(_DWORD *)(v44 + 4) = v42;
      *(_DWORD *)(v44 + 8) = v41;
      *(_QWORD *)(v44 + 12) = 0;
      *(_QWORD *)(v44 + 28) = 0;
      *(_QWORD *)(v44 + 20) = 0;
      *(_DWORD *)(v44 + 36) = 0;
    }
    v45 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v45)
    {
      sub_1ACBFF5AC(v12, 9, 0, v13, 0, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v45 + 1;
      v46 = *(_QWORD *)(v12 + 136) + 40 * v45;
      *(_QWORD *)v46 = 9;
      *(_DWORD *)(v46 + 8) = v13;
      *(_QWORD *)(v46 + 12) = 0;
      *(_QWORD *)(v46 + 28) = 0;
      *(_QWORD *)(v46 + 20) = 0;
      *(_DWORD *)(v46 + 36) = 0;
    }
    v47 = *(_QWORD *)(v12 + 24);
    v48 = ~*(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(v47 + 68) + *(_DWORD *)(v47 + 72) < 0)
      sub_1ACC0D5D4(v47, v12, v48);
    else
      *(_DWORD *)(*(_QWORD *)(v47 + 80) + 4 * v48) = *(_DWORD *)(v12 + 144);
  }
  v194 = *(_DWORD *)(a3 + 12);
  v184 = v16 - 9;
  v187 = v14;
  v188 = v22;
  if (v16 == 9 || v16 == 13)
    goto LABEL_47;
  if (v16 == 10)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      v49 = *((unsigned int *)a5 + 3);
      v50 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v50)
      {
        sub_1ACBFF5AC(v12, 75, 0, v49, 0, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v50 + 1;
        v51 = *(_QWORD *)(v12 + 136) + 40 * v50;
        *(_QWORD *)v51 = 75;
        *(_DWORD *)(v51 + 8) = v49;
        *(_QWORD *)(v51 + 12) = 0;
        *(_QWORD *)(v51 + 28) = 0;
        *(_QWORD *)(v51 + 20) = 0;
        *(_DWORD *)(v51 + 36) = 0;
      }
    }
LABEL_47:
    v183 = 0;
    v193 = *((_DWORD *)a5 + 3);
    v53 = v8;
    goto LABEL_48;
  }
  v52 = *(_BYTE *)(a1 + 31);
  if (v52)
  {
    *(_BYTE *)(a1 + 31) = v52 - 1;
    v183 = *(_DWORD *)(a1 + 4 * (v52 - 1) + 224);
    if ((v16 & 0xFFFFFFFD) == 0xC)
    {
      if (v52 != 1)
      {
        v53 = 0;
        v54 = v52 - 2;
        *(_BYTE *)(a1 + 31) = v54;
        v193 = *(_DWORD *)(a1 + 4 * v54 + 224);
        goto LABEL_48;
      }
      goto LABEL_45;
    }
    if (v8 == 1)
    {
      if (v52 != 1)
      {
        v115 = v52 - 2;
        *(_BYTE *)(a1 + 31) = v115;
        v193 = *(_DWORD *)(a1 + 4 * v115 + 224);
        v53 = 1;
        goto LABEL_48;
      }
      goto LABEL_148;
    }
    v53 = v8;
  }
  else
  {
    v183 = *(_DWORD *)(a1 + 56) + 1;
    *(_DWORD *)(a1 + 56) = v183;
    if ((v16 & 0xFFFFFFFD) == 0xC)
    {
LABEL_45:
      v53 = 0;
      v55 = *(_DWORD *)(a1 + 56) + 1;
      v193 = v55;
      goto LABEL_195;
    }
    v53 = v8;
    if (v8 == 1)
    {
LABEL_148:
      v193 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v193;
      v53 = 1;
      goto LABEL_48;
    }
  }
  v176 = *(_DWORD *)(a1 + 40);
  v133 = __OFSUB__(v176, v53);
  v177 = v176 - v53;
  if (v177 < 0 == v133)
  {
    v193 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 40) = v177;
    *(_DWORD *)(a1 + 44) = v193 + v53;
    goto LABEL_48;
  }
  v178 = *(_DWORD *)(a1 + 56);
  v193 = v178 + 1;
  v55 = v178 + v53;
LABEL_195:
  *(_DWORD *)(a1 + 56) = v55;
LABEL_48:
  v56 = *v15 - *(_DWORD *)(a3 + 8);
  v190 = v13;
  v189 = a3;
  v186 = a1;
  v185 = v16;
  if ((*(_BYTE *)(a3 + 36) & 1) != 0)
  {
    v60 = *(unsigned int *)(a1 + 52);
    v61 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 52) = v60 + 1;
    *(_DWORD *)(a1 + 56) = v61;
    if (*(_DWORD *)(a3 + 20))
    {
      v62 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v62)
      {
        v62 = sub_1ACBFF5AC(v12, 15, 0, 0, 0, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v62 + 1;
        v63 = *(_QWORD *)(v12 + 136) + 40 * v62;
        *(_BYTE *)v63 = 15;
        *(_OWORD *)(v63 + 1) = 0u;
        *(_OWORD *)(v63 + 17) = 0u;
        *(_QWORD *)(v63 + 32) = 0;
      }
    }
    else
    {
      v62 = 0;
    }
    v67 = v53 + v56 + 1;
    v68 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v68)
    {
      sub_1ACBFF5AC(v12, 121, v60, v61, v67, v19, v20, v21);
      v70 = *(_DWORD *)(v12 + 144);
      if (!v62)
      {
LABEL_72:
        if (*(_DWORD *)(v12 + 148) <= v70)
        {
          v182 = sub_1ACBFF5AC(v12, 34, v194, v13, 0, v19, v20, v21);
        }
        else
        {
          v182 = v70;
          *(_DWORD *)(v12 + 144) = v70 + 1;
          v75 = *(_QWORD *)(v12 + 136) + 40 * v70;
          *(_DWORD *)v75 = 34;
          *(_DWORD *)(v75 + 4) = v194;
          *(_DWORD *)(v75 + 8) = v13;
          *(_QWORD *)(v75 + 12) = 0;
          *(_QWORD *)(v75 + 28) = 0;
          *(_QWORD *)(v75 + 20) = 0;
          *(_DWORD *)(v75 + 36) = 0;
        }
        v76 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v76)
        {
          sub_1ACBFF5AC(v12, 133, v194, v61, v60, v19, v20, v21);
          v77 = 0;
        }
        else
        {
          v77 = 0;
          *(_DWORD *)(v12 + 144) = v76 + 1;
          v78 = *(_QWORD *)(v12 + 136) + 40 * v76;
          *(_DWORD *)v78 = 133;
          *(_DWORD *)(v78 + 4) = v194;
          *(_DWORD *)(v78 + 8) = v61;
          *(_DWORD *)(v78 + 12) = v60;
          *(_QWORD *)(v78 + 24) = 0;
          *(_QWORD *)(v78 + 32) = 0;
          *(_QWORD *)(v78 + 16) = 0;
        }
        goto LABEL_80;
      }
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v68 + 1;
      v69 = *(_QWORD *)(v12 + 136) + 40 * v68;
      *(_DWORD *)v69 = 121;
      *(_DWORD *)(v69 + 4) = v60;
      *(_DWORD *)(v69 + 8) = v61;
      *(_DWORD *)(v69 + 12) = v67;
      *(_QWORD *)(v69 + 24) = 0;
      *(_QWORD *)(v69 + 32) = 0;
      *(_QWORD *)(v69 + 16) = 0;
      v70 = *(_DWORD *)(v12 + 144);
      if (!v62)
        goto LABEL_72;
    }
    if (*(_BYTE *)(*(_QWORD *)v12 + 103))
      v71 = &byte_1EECAD280;
    else
      v71 = (char *)(*(_QWORD *)(v12 + 136) + 40 * v62);
    *((_DWORD *)v71 + 2) = v70;
    goto LABEL_72;
  }
  v57 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v57)
  {
    v59 = sub_1ACBFF5AC(v12, 35, v194, v13, 0, v19, v20, v21);
  }
  else
  {
    *(_DWORD *)(v12 + 144) = v57 + 1;
    v58 = *(_QWORD *)(v12 + 136) + 40 * v57;
    *(_DWORD *)v58 = 35;
    *(_DWORD *)(v58 + 4) = v194;
    *(_DWORD *)(v58 + 8) = v13;
    *(_QWORD *)(v58 + 12) = 0;
    *(_QWORD *)(v58 + 28) = 0;
    *(_QWORD *)(v58 + 20) = 0;
    *(_DWORD *)(v58 + 36) = 0;
    v59 = v57;
  }
  v64 = *(unsigned int *)(a2 + 12);
  v182 = v59;
  if ((int)v64 >= 1)
  {
    v65 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v65)
    {
      sub_1ACBFF5AC(v12, 59, v64, v191, 1, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v65 + 1;
      v66 = *(_QWORD *)(v12 + 136) + 40 * v65;
      *(_DWORD *)v66 = 59;
      *(_DWORD *)(v66 + 4) = v64;
      *(_DWORD *)(v66 + 8) = v191;
      *(_DWORD *)(v66 + 12) = 1;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0;
      *(_QWORD *)(v66 + 16) = 0;
    }
    if (*(int *)(a2 + 12) >= 1)
    {
      v72 = *(unsigned int *)(a2 + 8);
      v73 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v73)
      {
        sub_1ACBFF5AC(v12, 86, v72, 0xFFFFFFFFLL, 0, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v73 + 1;
        v74 = *(_QWORD *)(v12 + 136) + 40 * v73;
        *(_DWORD *)v74 = 86;
        *(_DWORD *)(v74 + 4) = v72;
        *(_DWORD *)(v74 + 8) = -1;
        *(_QWORD *)(v74 + 12) = 0;
        *(_QWORD *)(v74 + 28) = 0;
        *(_QWORD *)(v74 + 20) = 0;
        *(_DWORD *)(v74 + 36) = 0;
      }
    }
  }
  v77 = 1;
  v60 = v194;
LABEL_80:
  v181 = v77 + v56;
  if ((int)v53 < 1)
    goto LABEL_98;
  v79 = v181 - 1;
  v80 = v53;
  if (v53 < 8)
  {
    v81 = 0;
    v82 = v193;
    v83 = v180;
    goto LABEL_86;
  }
  v81 = v53 & 0xFFFFFFF8;
  v84 = 0uLL;
  v85 = (int32x4_t)(v181 - 1);
  v83 = v180;
  v86 = (__int16 *)(v180 + 100);
  v87.i64[0] = 0x100000001;
  v87.i64[1] = 0x100000001;
  v88 = v81;
  do
  {
    v89.i16[0] = *(v86 - 36);
    v89.i16[1] = *(v86 - 24);
    v89.i16[2] = *(v86 - 12);
    v89.i16[3] = *v86;
    v90.i16[0] = v86[12];
    v90.i16[1] = v86[24];
    v90.i16[2] = v86[36];
    v90.i16[3] = v86[48];
    v85 = vaddq_s32(v85, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16(v89)), v87));
    v84 = vaddq_s32(v84, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vceqz_s16(v90)), v87));
    v86 += 96;
    v88 -= 8;
  }
  while (v88);
  v79 = vaddvq_s32(vaddq_s32(v84, v85));
  v82 = v193;
  if (v81 != v53)
  {
LABEL_86:
    v91 = (unsigned __int16 *)(v83 + 24 * v81 + 28);
    v92 = v53 - v81;
    do
    {
      v93 = *v91;
      v91 += 12;
      if (!v93)
        ++v79;
      --v92;
    }
    while (v92);
  }
  v94 = v83 + 8;
  v95 = v82 - 1;
  do
  {
    v97 = v80 - 1;
    v98 = *(_WORD *)(v94 + 24 * (v80 - 1) + 20) == 0;
    if (*(_WORD *)(v94 + 24 * (v80 - 1) + 20))
      v99 = *(unsigned __int16 *)(v94 + 24 * (v80 - 1) + 20) - 1;
    else
      v99 = v79;
    v100 = v95 + v80;
    v101 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) > v101)
    {
      *(_DWORD *)(v12 + 144) = v101 + 1;
      v96 = *(_QWORD *)(v12 + 136) + 40 * v101;
      *(_DWORD *)v96 = 94;
      *(_DWORD *)(v96 + 4) = v60;
      *(_DWORD *)(v96 + 8) = v99;
      *(_DWORD *)(v96 + 12) = v100;
      *(_QWORD *)(v96 + 24) = 0;
      *(_QWORD *)(v96 + 32) = 0;
      *(_QWORD *)(v96 + 16) = 0;
    }
    else
    {
      sub_1ACBFF5AC(v12, 94, v60, v99, v100, v19, v20, v21);
    }
    v79 -= v98;
    v80 = v97;
  }
  while ((unint64_t)(v97 + 1) > 1);
LABEL_98:
  v102 = v193;
  if ((*(_BYTE *)(*(_QWORD *)v12 + 49) & 4) != 0)
  {
    v103 = *(_DWORD *)(v12 + 392);
    v104 = 56 * v103 + 20;
    v105 = v103 + 1;
    while ((int)--v105 >= 1)
    {
      v106 = v104 - 56;
      v107 = *(_QWORD *)(v12 + 400);
      v108 = *(_DWORD *)(v107 + v104 - 76);
      v104 -= 56;
      if (v108 == v188)
      {
        v109 = *(_DWORD *)(v12 + 144);
        v110 = v107 + v106;
        v111 = (int *)(v107 + v106 - 16);
        if (*v111)
        {
          v113 = *(_DWORD *)(v110 - 8);
          v112 = (int *)(v110 - 8);
          if (v113)
          {
            v111 = (int *)(v107 + v106);
            if (*(_DWORD *)(v107 + v106))
              break;
            v114 = 5;
          }
          else
          {
            v114 = 3;
            v111 = v112;
          }
        }
        else
        {
          v114 = 1;
        }
        *v111 = v188;
        *(_DWORD *)(v107 + 4 * v114 + v106 - 16) = v109 - 1;
        break;
      }
    }
  }
  switch(v184)
  {
    case 0:
      v118 = *((unsigned int *)a5 + 3);
      v119 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v119)
      {
        v135 = v12;
        v136 = 84;
        v137 = v53;
        goto LABEL_135;
      }
      *(_DWORD *)(v12 + 144) = v119 + 1;
      v120 = *(_QWORD *)(v12 + 136) + 40 * v119;
      *(_DWORD *)v120 = 84;
      *(_DWORD *)(v120 + 4) = v118;
      *(_DWORD *)(v120 + 8) = v53;
      *(_QWORD *)(v120 + 12) = 0;
      *(_QWORD *)(v120 + 28) = 0;
      *(_QWORD *)(v120 + 20) = 0;
      *(_DWORD *)(v120 + 36) = 0;
      break;
    case 1:
      break;
    case 2:
      sub_1ACBA86CC((uint64_t *)v12, 97, v193, v53, v183, *((_QWORD *)a5 + 3), v53, v21);
      v121 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) > v121)
      {
        *(_DWORD *)(v12 + 144) = v121 + 1;
        v122 = *(_QWORD *)(v12 + 136) + 40 * v121;
        *(_DWORD *)v122 = 64906;
        *(_DWORD *)(v122 + 4) = v179;
        *(_DWORD *)(v122 + 8) = v183;
        *(_DWORD *)(v122 + 12) = v193;
        *(_DWORD *)(v122 + 16) = v53;
        goto LABEL_144;
      }
      sub_1ACBFF7F0(v12, 138, v179, v183, v193, v53, v20, v21);
      break;
    case 3:
    case 5:
      v116 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v116)
      {
        sub_1ACBFF5AC(v12, 94, v60, v181, v193, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v116 + 1;
        v117 = *(_QWORD *)(v12 + 136) + 40 * v116;
        *(_DWORD *)v117 = 94;
        *(_DWORD *)(v117 + 4) = v60;
        *(_DWORD *)(v117 + 8) = v181;
        *(_DWORD *)(v117 + 12) = v193;
        *(_QWORD *)(v117 + 24) = 0;
        *(_QWORD *)(v117 + 32) = 0;
        *(_QWORD *)(v117 + 16) = 0;
      }
      v128 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v128)
      {
        sub_1ACBFF5AC(v12, 127, v179, v183, 0, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v128 + 1;
        v129 = *(_QWORD *)(v12 + 136) + 40 * v128;
        *(_DWORD *)v129 = 127;
        *(_DWORD *)(v129 + 4) = v179;
        *(_DWORD *)(v129 + 8) = v183;
        *(_QWORD *)(v129 + 12) = 0;
        *(_QWORD *)(v129 + 28) = 0;
        *(_QWORD *)(v129 + 20) = 0;
        *(_DWORD *)(v129 + 36) = 0;
      }
      v130 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v130)
      {
        sub_1ACBFF5AC(v12, 128, v179, v193, v183, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v130 + 1;
        v131 = *(_QWORD *)(v12 + 136) + 40 * v130;
        *(_DWORD *)v131 = 128;
        *(_DWORD *)(v131 + 4) = v179;
        *(_DWORD *)(v131 + 8) = v193;
        *(_DWORD *)(v131 + 12) = v183;
        *(_QWORD *)(v131 + 24) = 0;
        *(_QWORD *)(v131 + 32) = 0;
        *(_QWORD *)(v131 + 16) = 0;
      }
      v132 = *(_DWORD *)(v12 + 144);
      v133 = __OFSUB__(v132, 1);
      v134 = v132 - 1;
      if (v134 < 0 == v133)
        *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v134 + 2) = 8;
      break;
    case 6:
      v125 = *((unsigned int *)a5 + 2);
      if (*(_BYTE *)(v186 + 31))
      {
        v126 = *(_BYTE *)(v186 + 31) - 1;
        *(_BYTE *)(v186 + 31) = v126;
        v127 = *(unsigned int *)(v186 + 4 * v126 + 224);
      }
      else
      {
        v127 = (*(_DWORD *)(v186 + 56) + 1);
        *(_DWORD *)(v186 + 56) = v127;
      }
      v139 = (v125 >> 31) + v193;
      v140 = v53 - (v125 >> 31);
      v141 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v141)
      {
        sub_1ACBFF5AC(v12, 97, v139, v140, v127, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v141 + 1;
        v142 = *(_QWORD *)(v12 + 136) + 40 * v141;
        *(_DWORD *)v142 = 97;
        *(_DWORD *)(v142 + 4) = v139;
        *(_DWORD *)(v142 + 8) = v140;
        *(_DWORD *)(v142 + 12) = v127;
        *(_QWORD *)(v142 + 24) = 0;
        *(_QWORD *)(v142 + 32) = 0;
        *(_QWORD *)(v142 + 16) = 0;
      }
      v143 = *(_DWORD *)(v12 + 148);
      v144 = *(_DWORD *)(v12 + 144);
      if ((v125 & 0x80000000) != 0)
      {
        if (v143 <= v144)
        {
          v135 = v12;
          v136 = 128;
          v118 = v179;
          v137 = v127;
          v102 = v193;
          v138 = v193;
          goto LABEL_136;
        }
        *(_DWORD *)(v12 + 144) = v144 + 1;
        v145 = *(_QWORD *)(v12 + 136) + 40 * v144;
        *(_DWORD *)v145 = 128;
        *(_DWORD *)(v145 + 4) = v179;
        v102 = v193;
        *(_DWORD *)(v145 + 8) = v127;
        *(_DWORD *)(v145 + 12) = v193;
        *(_QWORD *)(v145 + 24) = 0;
        *(_QWORD *)(v145 + 32) = 0;
        *(_QWORD *)(v145 + 16) = 0;
      }
      else if (v143 <= v144)
      {
        v146 = v125;
        v102 = v193;
        sub_1ACBFF7F0(v12, 138, v179, v127, v193, v146, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v144 + 1;
        v122 = *(_QWORD *)(v12 + 136) + 40 * v144;
        *(_DWORD *)v122 = 64906;
        *(_DWORD *)(v122 + 4) = v179;
        *(_DWORD *)(v122 + 8) = v127;
        *(_DWORD *)(v122 + 12) = v193;
        *(_DWORD *)(v122 + 16) = v125;
        v102 = v193;
LABEL_144:
        *(_QWORD *)(v122 + 24) = 0;
        *(_QWORD *)(v122 + 32) = 0;
      }
      break;
    default:
      v118 = *((unsigned int *)a5 + 1);
      v123 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v123)
      {
        v135 = v12;
        v136 = 12;
        v137 = 0;
LABEL_135:
        v138 = 0;
LABEL_136:
        sub_1ACBFF5AC(v135, v136, v118, v137, v138, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v123 + 1;
        v124 = *(_QWORD *)(v12 + 136) + 40 * v123;
        *(_DWORD *)v124 = 12;
        *(_DWORD *)(v124 + 4) = v118;
        *(_OWORD *)(v124 + 8) = 0u;
        *(_OWORD *)(v124 + 24) = 0u;
      }
      break;
  }
  if (v183)
  {
    if (v185 == 11 && v53 != 1)
    {
      if (*(_DWORD *)(v186 + 40) >= (signed int)v53)
        goto LABEL_159;
      *(_DWORD *)(v186 + 40) = v53;
      v148 = (unsigned int *)(v186 + 44);
    }
    else
    {
      if (!v102 || (v147 = *(unsigned __int8 *)(v186 + 31), v147 > 7))
      {
LABEL_159:
        v149 = *(unsigned __int8 *)(v186 + 31);
        if (v149 <= 7)
        {
          *(_BYTE *)(v186 + 31) = v149 + 1;
          *(_DWORD *)(v186 + 4 * v149 + 224) = v183;
        }
        goto LABEL_161;
      }
      *(_BYTE *)(v186 + 31) = v147 + 1;
      v148 = (unsigned int *)(v186 + 4 * v147 + 224);
    }
    *v148 = v102;
    goto LABEL_159;
  }
LABEL_161:
  v150 = (v182 + 1);
  v151 = *(_QWORD *)(v12 + 24);
  v152 = -v187;
  if (*(_DWORD *)(v151 + 68) + *(_DWORD *)(v151 + 72) < 0)
    sub_1ACC0D5D4(v151, v12, v152);
  else
    *(_DWORD *)(*(_QWORD *)(v151 + 80) + 4 * v152) = *(_DWORD *)(v12 + 144);
  v153 = *(_DWORD *)(v12 + 148);
  v154 = *(_DWORD *)(v12 + 144);
  if ((*(_BYTE *)(v189 + 36) & 1) != 0)
  {
    if (v153 > v154)
    {
      *(_DWORD *)(v12 + 144) = v154 + 1;
      v155 = *(_QWORD *)(v12 + 136) + 40 * v154;
      v156 = 37;
      goto LABEL_169;
    }
    v157 = v12;
    v158 = 37;
  }
  else
  {
    if (v153 > v154)
    {
      *(_DWORD *)(v12 + 144) = v154 + 1;
      v155 = *(_QWORD *)(v12 + 136) + 40 * v154;
      v156 = 39;
LABEL_169:
      *(_DWORD *)v155 = v156;
      *(_DWORD *)(v155 + 4) = v194;
      *(_DWORD *)(v155 + 8) = v150;
      *(_QWORD *)(v155 + 12) = 0;
      *(_QWORD *)(v155 + 28) = 0;
      *(_QWORD *)(v155 + 20) = 0;
      *(_DWORD *)(v155 + 36) = 0;
      goto LABEL_173;
    }
    v157 = v12;
    v158 = 39;
  }
  sub_1ACBFF5AC(v157, v158, v194, v150, 0, v19, v20, v21);
LABEL_173:
  if ((*(_BYTE *)(*(_QWORD *)v12 + 49) & 4) != 0)
  {
    v159 = *(_DWORD *)(v12 + 144) - 1;
    v160 = *(_DWORD *)(v12 + 392);
    v161 = 56 * v160 + 20;
    v162 = v160 + 1;
    while ((int)--v162 >= 1)
    {
      v163 = v161 - 56;
      v164 = *(_QWORD *)(v12 + 400);
      v165 = *(_DWORD *)(v164 + v161 - 76);
      v161 -= 56;
      if (v165 == v188)
      {
        v166 = v164 + v163;
        v167 = (int *)(v164 + v163 - 16);
        if (*v167)
        {
          v169 = *(_DWORD *)(v166 - 8);
          v168 = (int *)(v166 - 8);
          if (v169)
          {
            v167 = (int *)(v164 + v163);
            if (*(_DWORD *)(v164 + v163))
              break;
            v170 = 5;
          }
          else
          {
            v170 = 3;
            v167 = v168;
          }
        }
        else
        {
          v170 = 1;
        }
        *v167 = v159;
        *(_DWORD *)(v164 + 4 * v170 + v163 - 16) = v159;
        break;
      }
    }
  }
  v171 = *(unsigned int *)(v189 + 16);
  if ((_DWORD)v171)
  {
    v172 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v172)
    {
      sub_1ACBFF5AC(v12, 67, v171, 0, 0, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v172 + 1;
      v173 = *(_QWORD *)(v12 + 136) + 40 * v172;
      *(_DWORD *)v173 = 67;
      *(_DWORD *)(v173 + 4) = v171;
      *(_OWORD *)(v173 + 8) = 0u;
      *(_OWORD *)(v173 + 24) = 0u;
    }
  }
  result = *(_QWORD *)(v12 + 24);
  v175 = ~v190;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
    return sub_1ACC0D5D4(result, v12, v175);
  *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v175) = *(_DWORD *)(v12 + 144);
  return result;
}

uint64_t sub_1ACBA6920(int *a1)
{
  int v2;
  signed int v3;
  uint64_t result;

  v2 = a1[4];
  v3 = *a1 + v2;
  if ((v3 < 0) ^ __OFADD__(*a1, v2) | (v3 == 0))
  {
    if ((a1[5] & 0x10) == 0)
      return 0;
    v3 = 1;
  }
  if (sub_1ACB7E454((uint64_t)a1, v3, 1))
    return 7;
  bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
  result = 0;
  a1[4] += *a1;
  *((_WORD *)a1 + 10) &= 0xF9FFu;
  return result;
}

uint64_t sub_1ACBA69AC(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;

  if (!*a3)
  {
    v5 = result;
    v7 = *(_QWORD *)(result + 72);
    v6 = *(_QWORD *)(result + 80);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = *(unsigned __int8 *)(result + 9);
    if (*(_DWORD *)(a2 + 4) == 1)
      v10 = 100;
    else
      v10 = 0;
    v11 = (const void *)(v6 + v9);
    v12 = __rev16(*(unsigned __int16 *)(v6 + v9 + 5));
    memcpy((void *)(v8 + v12), (const void *)(v6 + v12), (*(_DWORD *)(v7 + 56) - v12));
    memcpy((void *)(v8 + v10), v11, *(unsigned __int16 *)(v5 + 18) + 2 * *(unsigned __int16 *)(v5 + 24));
    *(_BYTE *)a2 = 0;
    result = sub_1ACB8A2CC(a2);
    if (!(_DWORD)result)
    {
      result = sub_1ACBF949C(a2);
      if (!(_DWORD)result)
      {
        if (!*(_BYTE *)(v7 + 33))
          return result;
        result = sub_1ACBEFB5C(a2);
      }
    }
    *a3 = result;
  }
  return result;
}

uint64_t sub_1ACBA6A74(uint64_t a1, int a2, _BYTE *a3, int a4, unsigned __int8 *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v5 = (a2 - a4);
  if (a2 >= a4)
    v6 = a4;
  else
    v6 = a2;
  if (v6 < 0)
  {
    sub_1ACBBE20C(35843);
    return v5;
  }
  if (!a3)
  {
    if (a5)
      result = 0xFFFFFFFFLL;
    else
      result = 0;
    if ((_DWORD)result)
      return result;
    return v5;
  }
  if (!a5)
    return 1;
  if (!v6)
    return v5;
  v7 = v6 + 1;
  while (1)
  {
    v8 = *a3;
    if (!*a3)
      break;
    LODWORD(v8) = byte_1ACCB6333[v8];
    v9 = byte_1ACCB6333[*a5];
    if ((_DWORD)v8 != v9)
      goto LABEL_21;
    ++a3;
    ++a5;
    if (--v7 <= 1)
      return v5;
  }
  v9 = byte_1ACCB6333[*a5];
LABEL_21:
  result = (v8 - v9);
  if (!(_DWORD)result)
    return v5;
  return result;
}

uint64_t sub_1ACBA6B1C(unsigned __int8 *a1, double *a2, int a3, int a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v28;
  unint64_t v29;
  double v30;
  BOOL v31;
  unsigned int v32;
  double v33;
  unsigned int v34;
  double v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unsigned int v43;
  double v44;
  double v45;
  int v46;
  int v47;
  double v48;
  double v49;
  int v50;
  int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;

  *a2 = 0.0;
  if (!a3)
    return 0;
  if (a4 == 1)
  {
    v5 = 1;
    v6 = a1;
    result = 1;
  }
  else
  {
    LODWORD(v8) = 3 - a4;
    if (3 - a4 >= (int)(a3 & 0xFFFFFFFE))
    {
      result = 1;
    }
    else
    {
      v8 = (int)v8;
      while (!a1[v8])
      {
        v8 += 2;
        if (v8 >= (int)(a3 & 0xFFFFFFFE))
        {
          result = 1;
          goto LABEL_11;
        }
      }
      result = 4294967196;
    }
LABEL_11:
    a3 = v8 ^ 1;
    v6 = &a1[a4 & 1];
    v5 = 2;
  }
  v9 = &a1[a3];
  if (v6 >= v9)
    return 0;
  while (1)
  {
    v10 = *v6;
    if ((byte_1ACCB6548[*v6] & 1) == 0)
      break;
    v6 += v5;
    if (v6 >= v9)
      return 0;
  }
  if (v10 == 43 || v10 == 45)
    v12 = v5;
  else
    v12 = 0;
  v13 = &v6[v12];
  if (v13 >= v9)
  {
    v14 = 0;
    v19 = 1;
    goto LABEL_65;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  while (1)
  {
    v17 = *v13;
    if ((unint64_t)(v17 - 58) < 0xFFFFFFFFFFFFFFF6)
      break;
    v16 = (char)v17 + 10 * v16 - 48;
    v13 += v5;
    v18 = v16 <= 0x1999999999999997 || v13 >= v9;
    if (!v18)
    {
      do
      {
        if ((unint64_t)*v13 - 58 < 0xFFFFFFFFFFFFFFF6)
          break;
        v13 += v5;
        ++v15;
      }
      while (v13 < v9);
    }
    ++v14;
    if (v13 >= v9)
      goto LABEL_52;
  }
  if ((char)v17 == 46)
  {
    result = (result + 1);
    for (v13 += v5; v13 < v9; v13 += v5)
    {
      v20 = *v13;
      if ((unint64_t)(v20 - 58) < 0xFFFFFFFFFFFFFFF6)
        break;
      if (v16 < 0x1999999999999998)
      {
        v16 = (char)v20 + 10 * v16 - 48;
        --v15;
        ++v14;
      }
    }
  }
  if (v13 >= v9)
  {
LABEL_52:
    v25 = 0;
    v23 = 1;
    v19 = 1;
    goto LABEL_53;
  }
  if ((*v13 | 0x20) != 0x65)
  {
    v25 = 0;
    v23 = 1;
LABEL_114:
    v19 = 1;
    goto LABEL_117;
  }
  v13 += v5;
  result = (result + 1);
  if (v13 >= v9)
  {
    v25 = 0;
    v19 = 0;
    v23 = 1;
    goto LABEL_53;
  }
  v21 = *v13;
  v22 = &v13[v5];
  if (v21 == 45)
  {
    v13 += v5;
    v23 = -1;
  }
  else
  {
    v23 = 1;
  }
  if (v21 == 43)
  {
    v13 = v22;
    v23 = 1;
  }
  if (v13 < v9)
  {
    v24 = *v13;
    if ((unint64_t)(v24 - 58) >= 0xFFFFFFFFFFFFFFF6)
    {
      v25 = (char)v24 - 48;
      for (v13 += v5; v13 < v9; v13 += v5)
      {
        v56 = *v13;
        if ((unint64_t)(v56 - 58) < 0xFFFFFFFFFFFFFFF6)
          break;
        v57 = (char)v56 + 10 * v25 - 48;
        v25 = v25 >= 10000 ? 10000 : v57;
      }
      goto LABEL_114;
    }
  }
  v25 = 0;
  v19 = 0;
LABEL_117:
  while (v13 < v9 && (byte_1ACCB6548[*v13] & 1) != 0)
    v13 += v5;
LABEL_53:
  if (!v16)
  {
LABEL_65:
    v30 = -0.0;
    if (v10 != 45)
      v30 = 0.0;
    goto LABEL_67;
  }
  v26 = v15 + v25 * v23;
  if ((int)v26 < 1 || v16 >= 0x1999999999999999)
  {
    if ((v26 & 0x80000000) == 0 || v16 % 0xA)
    {
      v29 = v16;
    }
    else
    {
      v28 = -v26;
      v29 = v16;
      do
      {
        v29 /= 0xAuLL;
        --v28;
      }
      while (v28 && v29 == 10 * ((v29 * (unsigned __int128)0x199999999999999AuLL) >> 64));
      v26 = -v28;
    }
  }
  else
  {
    do
    {
      v32 = v26;
      v29 = 10 * v16;
      --v26;
      if (v32 < 2)
        break;
      v18 = v16 >= 0x28F5C28F5C28F5DLL;
      v16 *= 10;
    }
    while (!v18);
  }
  if (v26)
  {
    if (byte_1ECD3B14A)
    {
      v33 = (double)v29;
      if ((int)v26 <= 0)
      {
        if (v26 > 0xFFFFFF9C)
        {
          v46 = v26;
        }
        else
        {
          do
          {
            v46 = v26 + 100;
            v33 = v33 * 1.0e-100;
            v18 = __CFADD__(v26, 199);
            v26 += 100;
          }
          while (!v18);
        }
        if (v46 > -10)
        {
          v50 = v46;
        }
        else
        {
          do
          {
            v50 = v46 + 10;
            v33 = v33 * 1.0e-10;
            v18 = __CFADD__(v46, 19);
            v46 += 10;
          }
          while (!v18);
        }
        if (v50 < 0)
        {
          do
          {
            v33 = v33 * 0.1;
            v18 = __CFADD__(v50++, 1);
          }
          while (!v18);
        }
      }
      else
      {
        if (v26 >= 0x64)
        {
          do
          {
            v26 -= 100;
            v33 = v33 * 1.0e100;
          }
          while (v26 > 0x63);
        }
        if (v26 >= 0xA)
        {
          do
          {
            v26 -= 10;
            v33 = v33 * 1.0e10;
          }
          while (v26 > 9);
        }
        if (v26)
        {
          v34 = v26 + 1;
          do
          {
            v33 = v33 * 10.0;
            --v34;
          }
          while (v34 > 1);
        }
      }
      if (v33 > 1.79769313e308)
        v33 = INFINITY;
    }
    else
    {
      v35 = (double)v29;
      v36 = (unint64_t)(double)v29;
      v37 = -(double)(v36 - v29);
      v18 = v29 >= v36;
      v38 = v29 - v36;
      if (v18)
        v37 = (double)v38;
      v58 = v37;
      v59 = (double)v29;
      if ((int)v26 <= 0)
      {
        if (v26 > 0xFFFFFF9C)
        {
          v47 = v26;
        }
        else
        {
          do
          {
            v47 = v26 + 100;
            *(_QWORD *)&v48 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v69 = (v59 - v48) * 9.99999999e-101 + v48 * 1.18108707e-109;
            v63 = v48 * 9.99999999e-101
                - (v48 * 9.99999999e-101
                 + v69)
                + v69
                + (v59 - v48) * 1.18108707e-109
                + v58 * 1.0e-100
                + v59 * -1.99918998e-117;
            v59 = v48 * 9.99999999e-101 + v69 + v63;
            v49 = v48 * 9.99999999e-101 + v69;
            v35 = v59;
            v37 = v63 + v49 - v59;
            v58 = v37;
            v18 = __CFADD__(v26, 199);
            v26 += 100;
          }
          while (!v18);
        }
        if (v47 > -10)
        {
          v51 = v47;
        }
        else
        {
          do
          {
            v51 = v47 + 10;
            *(_QWORD *)&v52 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v70 = (v59 - v52) * 9.99999996e-11 + v52 * 3.99580284e-19;
            v64 = v52 * 9.99999996e-11
                - (v52 * 9.99999996e-11
                 + v70)
                + v70
                + (v59 - v52) * 3.99580284e-19
                + v58 * 1.0e-10
                + v59 * -3.64321973e-27;
            v59 = v52 * 9.99999996e-11 + v70 + v64;
            v53 = v52 * 9.99999996e-11 + v70;
            v35 = v59;
            v37 = v64 + v53 - v59;
            v58 = v37;
            v18 = __CFADD__(v47, 19);
            v47 += 10;
          }
          while (!v18);
        }
        if (v51 < 0)
        {
          do
          {
            *(_QWORD *)&v54 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v71 = (v59 - v54) * 0.0999999996 + v54 * 3.72529035e-10;
            v65 = v54 * 0.0999999996
                - (v54 * 0.0999999996
                 + v71)
                + v71
                + (v59 - v54) * 3.72529035e-10
                + v58 * 0.1
                + v59 * -5.55111512e-18;
            v59 = v54 * 0.0999999996 + v71 + v65;
            v55 = v54 * 0.0999999996 + v71;
            v35 = v59;
            v37 = v65 + v55 - v59;
            v58 = v37;
            v18 = __CFADD__(v51++, 1);
          }
          while (!v18);
        }
      }
      else
      {
        if (v26 >= 0x64)
        {
          do
          {
            v26 -= 100;
            *(_QWORD *)&v39 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v66 = (v59 - v39) * 9.99999995e99 + v39 * 5.15323793e91;
            v60 = v39 * 9.99999995e99
                - (v39 * 9.99999995e99
                 + v66)
                + v66
                + (v59 - v39) * 5.15323793e91
                + v58 * 1.0e100
                + v59 * -1.59028911e83;
            v59 = v39 * 9.99999995e99 + v66 + v60;
            v40 = v39 * 9.99999995e99 + v66;
            v35 = v59;
            v37 = v60 + v40 - v59;
            v58 = v37;
          }
          while (v26 > 0x63);
        }
        if (v26 >= 0xA)
        {
          do
          {
            v26 -= 10;
            *(_QWORD *)&v41 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v67 = (v59 - v41) * 1.0e10 + v41 * 0.0;
            v61 = v41 * 1.0e10 - (v41 * 1.0e10 + v67) + v67 + (v59 - v41) * 0.0 + v58 * 1.0e10 + v59 * 0.0;
            v59 = v41 * 1.0e10 + v67 + v61;
            v42 = v41 * 1.0e10 + v67;
            v35 = v59;
            v37 = v61 + v42 - v59;
            v58 = v37;
          }
          while (v26 > 9);
        }
        if (v26)
        {
          v43 = v26 + 1;
          do
          {
            *(_QWORD *)&v44 = *(_QWORD *)&v35 & 0xFFFFFFFFFC000000;
            v68 = (v59 - v44) * 10.0 + v44 * 0.0;
            v62 = v44 * 10.0 - (v44 * 10.0 + v68) + v68 + (v59 - v44) * 0.0 + v58 * 10.0 + v59 * 0.0;
            v59 = v44 * 10.0 + v68 + v62;
            v45 = v44 * 10.0 + v68;
            v35 = v59;
            v37 = v62 + v45 - v59;
            v58 = v37;
            --v43;
          }
          while (v43 > 1);
        }
      }
      v33 = v35 + v37;
    }
  }
  else
  {
    v33 = (double)v29;
  }
  *a2 = v33;
  if (v10 == 45)
  {
    v30 = -v33;
LABEL_67:
    *a2 = v30;
  }
  if (!v19 || v13 != v9 || v14 < 1 || (int)result <= 0)
  {
    if ((int)result > 1)
    {
      v31 = (_DWORD)result != 3 && v19 == 0;
      if (!v31 && v14 > 0)
        return 0xFFFFFFFFLL;
    }
    return 0;
  }
  return result;
}

int sqlite3_create_collation(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  return sqlite3_create_collation_v2(a1, zName, eTextRep, pArg, xCompare, 0);
}

uint64_t sub_1ACBA767C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 328);
  v3 = *(_DWORD *)(a1 + 200);
  v4 = *(unsigned int *)(a1 + 184);
  if (v4 >= v3)
    v5 = v3;
  else
    v5 = v4;
  v6 = *(unsigned int *)(a1 + 128);
  if ((int)v6 >= 1)
  {
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
    do
    {
      if (!*v7)
        *v7 = *(_QWORD *)(a1 + 96);
      v7 += 7;
      --v6;
    }
    while (v6);
  }
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
    v9 = v4 + v4 * ((v8 - 1) / v4);
  else
    v9 = 0;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v9;
  if (*(_BYTE *)(a1 + 11)
    || *(_BYTE *)(a1 + 9) == 4
    || (v10 = **(_QWORD **)(a1 + 72)) != 0 && ((*(uint64_t (**)(void))(v10 + 96))() & 0x200) != 0)
  {
    *(_QWORD *)v2 = 0xD763A120F905D5D9;
    *(_DWORD *)(v2 + 8) = -1;
  }
  else
  {
    *(_DWORD *)(v2 + 8) = 0;
    *(_QWORD *)v2 = 0;
  }
  sqlite3_initialize();
  arc4random_buf((void *)(a1 + 56), 4uLL);
  *(_DWORD *)(v2 + 12) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(v2 + 16) = bswap32(*(_DWORD *)(a1 + 36));
  *(_DWORD *)(v2 + 20) = bswap32(*(_DWORD *)(a1 + 184));
  *(_DWORD *)(v2 + 24) = bswap32(*(_DWORD *)(a1 + 200));
  bzero((void *)(v2 + 28), v5 - 28);
  v11 = -(int)v5;
  while (1)
  {
    v11 += v5;
    if (v11 >= *(_DWORD *)(a1 + 184))
      break;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), v2, v5, *(_QWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 96) += v5;
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

void sqlite3_randomness(int N, void *P)
{
  sqlite3_initialize();
  if (N >= 1)
  {
    if (P)
      arc4random_buf(P, N);
  }
}

uint64_t sub_1ACBA783C(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char __strerrbuf[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  v5 = (int)a2;
  bzero(a3, (int)a2);
  dword_1ECD3EA90 = getpid();
  v6 = sub_1ACBE1D30("/dev/urandom", 0, 0, 0);
  if ((v6 & 0x80000000) != 0)
  {
    *(_QWORD *)__strerrbuf = 0;
    time((time_t *)__strerrbuf);
    *a3 = *(_QWORD *)__strerrbuf;
    *((_DWORD *)a3 + 2) = dword_1ECD3EA90;
    return 12;
  }
  else
  {
    v7 = v6;
    while ((off_1EECAC988(v7, a3, v5) & 0x80000000) != 0 && *__error() == 4)
      ;
    if (off_1EECAC8E0(v7))
    {
      v8 = *__error();
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v8, __strerrbuf, 0x4FuLL);
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50039, v8, "close", &byte_1ACCBEAEE, __strerrbuf);
    }
  }
  return v4;
}

uint64_t sub_1ACBA79A4(unsigned int *a1, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t (**v19)(void *);

  if (!a1)
    return 0;
  v2 = a1;
  v3 = a2 - 1;
  if (*a1 < 0xF81)
  {
LABEL_3:
    v4 = 0;
    *((_BYTE *)v2 + ((unint64_t)v3 >> 3) + 16) |= 1 << (v3 & 7);
    return v4;
  }
  while (1)
  {
    v5 = v2[2];
    v6 = v2 + 4;
    if (!v5)
      break;
    v7 = v3 / v5;
    v2 = (unsigned int *)*((_QWORD *)v6 + v7);
    if (!v2)
    {
      v8 = (unsigned int *)sub_1ACB5D828(512);
      if (!v8)
      {
        *((_QWORD *)v6 + v7) = 0;
        return 7;
      }
      v2 = v8;
      *((_OWORD *)v8 + 30) = 0u;
      *((_OWORD *)v8 + 31) = 0u;
      *((_OWORD *)v8 + 28) = 0u;
      *((_OWORD *)v8 + 29) = 0u;
      *((_OWORD *)v8 + 26) = 0u;
      *((_OWORD *)v8 + 27) = 0u;
      *((_OWORD *)v8 + 24) = 0u;
      *((_OWORD *)v8 + 25) = 0u;
      *((_OWORD *)v8 + 22) = 0u;
      *((_OWORD *)v8 + 23) = 0u;
      *((_OWORD *)v8 + 20) = 0u;
      *((_OWORD *)v8 + 21) = 0u;
      *((_OWORD *)v8 + 18) = 0u;
      *((_OWORD *)v8 + 19) = 0u;
      *((_OWORD *)v8 + 16) = 0u;
      *((_OWORD *)v8 + 17) = 0u;
      *((_OWORD *)v8 + 14) = 0u;
      *((_OWORD *)v8 + 15) = 0u;
      *((_OWORD *)v8 + 12) = 0u;
      *((_OWORD *)v8 + 13) = 0u;
      *((_OWORD *)v8 + 10) = 0u;
      *((_OWORD *)v8 + 11) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *v8 = v5;
      *((_QWORD *)v6 + v7) = v8;
    }
    v3 %= v5;
    if (*v2 <= 0xF80)
      goto LABEL_3;
  }
  v9 = v3 + 1;
  v10 = v3 % 0x7C;
  v11 = *((_DWORD *)v6 + v10);
  if (v11)
  {
    while (v11 != (_DWORD)v9)
    {
      if ((v10 + 1) <= 0x7B)
        v10 = (v10 + 1);
      else
        v10 = 0;
      v11 = *((_DWORD *)v6 + v10);
      if (!v11)
      {
        v12 = v2[1];
        if (v12 >= 0x3E)
          goto LABEL_20;
        goto LABEL_16;
      }
    }
    return 0;
  }
  v12 = v2[1];
  if (v12 < 0x7B)
  {
LABEL_16:
    v4 = 0;
    v2[1] = v12 + 1;
    *((_DWORD *)v6 + v10) = v9;
    return v4;
  }
LABEL_20:
  v14 = (char *)sub_1ACB5D828(496);
  if (!v14)
    return 7;
  v15 = v14;
  memcpy(v14, v2 + 4, 0x1F0uLL);
  *v6 = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  v16 = *v2 + 61;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  v2[2] = ((unint64_t)v16 * (unsigned __int128)0x421084210842109uLL) >> 64;
  v4 = sub_1ACBA79A4(v2, v9);
  for (i = 0; i != 496; i += 4)
  {
    v18 = *(unsigned int *)&v15[i];
    if ((_DWORD)v18)
      v4 = sub_1ACBA79A4(v2, v18) | v4;
  }
  v19 = (uint64_t (**)(void *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_31:
    (*v19)(v15);
    return v4;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v15);
  v15 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v19 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
    goto LABEL_31;
  }
  return v4;
}

uint64_t sub_1ACBA7C60(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t *v7;
  uint64_t i;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  result = *(unsigned int *)(a1 + 48);
  if ((_DWORD)result)
    return result;
  if (!*(_QWORD *)(a1 + 344))
  {
    while (1)
    {
      v5 = *(unsigned __int8 *)(a1 + 22);
      if (v5 >= 4 && v5 != 5)
        break;
      if (*(_BYTE *)(a1 + 17))
        goto LABEL_13;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 4);
      if ((_DWORD)result != 5)
      {
        if ((_DWORD)result)
          return result;
LABEL_13:
        *(_BYTE *)(a1 + 22) = 4;
        break;
      }
      if (!(*(unsigned int (**)(_QWORD))(a1 + 232))(*(_QWORD *)(a1 + 240)))
        return 5;
    }
  }
  if (*(_BYTE *)(a1 + 11))
    goto LABEL_18;
  if (**(_QWORD **)(a1 + 80) && *(_BYTE *)(a1 + 9) != 4)
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
      if ((v10 & 0x200) != 0)
      {
        v11 = 1;
LABEL_43:
        if ((v10 & 0x400) == 0)
        {
          if (*(unsigned __int8 *)(a1 + 14) | (16 * (*(_BYTE *)(a1 + 14) == 3)))
          {
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
            if ((_DWORD)result)
              return result;
          }
        }
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        v15 = a2 ? v11 : 1;
        if ((v15 & 1) == 0)
        {
          *(_DWORD *)(a1 + 52) = 0;
          result = sub_1ACBA767C(a1);
          if ((_DWORD)result)
            return result;
        }
        goto LABEL_18;
      }
    }
    else
    {
      v10 = 0;
    }
    v16 = 0xD763A120F905D5D9;
    v17 = bswap32(*(_DWORD *)(a1 + 52));
    v12 = *(_QWORD *)(a1 + 96);
    if (v12)
      v13 = *(unsigned int *)(a1 + 184) + *(unsigned int *)(a1 + 184) * ((v12 - 1) / *(unsigned int *)(a1 + 184));
    else
      v13 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v18, 8, v13);
    if (!(_DWORD)result)
    {
      if (v18[0] != 0xD763A120F905D5D9)
      {
LABEL_37:
        if ((v10 & 0x400) == 0)
        {
          if (*(_BYTE *)(a1 + 12))
          {
            if (*(_BYTE *)(a1 + 14))
            {
              result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80));
              if ((_DWORD)result)
                return result;
            }
          }
        }
        result = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), &v16, 12, *(_QWORD *)(a1 + 104));
        if ((_DWORD)result)
          return result;
        v11 = 0;
        goto LABEL_43;
      }
      result = (*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), &unk_1ACCB6CD9, 1, v13);
    }
    if ((_DWORD)result != 522 && (_DWORD)result != 0)
      return result;
    goto LABEL_37;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
LABEL_18:
  v7 = *(uint64_t **)(a1 + 336);
  for (i = *v7; i; i = *(_QWORD *)(i + 64))
    *(_WORD *)(i + 52) &= ~8u;
  result = 0;
  v7[2] = v7[1];
  *(_BYTE *)(a1 + 21) = 4;
  return result;
}

uint64_t sub_1ACBA7EF0(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)a1[9] || (v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0), !(_DWORD)v14))
  {
    v4 = *((_DWORD *)a1 + 11);
    v5 = *((unsigned int *)a1 + 8);
    if (v4 < v5 && (*(_QWORD *)(a2 + 32) || *(_DWORD *)(a2 + 48) > v4))
    {
      v15 = a1[25] * v5;
      v6 = a1[9];
      if (*(_QWORD *)v6)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 80))(v6, 5, &v15);
        LODWORD(v5) = *((_DWORD *)a1 + 8);
      }
      *((_DWORD *)a1 + 11) = v5;
    }
    if (!a2)
      return 0;
    while (1)
    {
      v7 = *(unsigned int *)(a2 + 48);
      if (v7 > *((_DWORD *)a1 + 8) || (*(_WORD *)(a2 + 52) & 0x10) != 0)
      {
        v14 = 0;
      }
      else
      {
        v8 = a1[25];
        if ((_DWORD)v7 == 1)
        {
          v9 = bswap32(bswap32(*(_DWORD *)(*(_QWORD *)(a2 + 40) + 136)) + 1);
          *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24) = v9;
          *(_DWORD *)(*(_QWORD *)(a2 + 8) + 92) = v9;
          *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96) = -1167184384;
        }
        v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))a1[37];
        if (v10)
        {
          v11 = v10(a1[40], *(_QWORD *)(a2 + 8), v7, 6);
          if (!v11)
            return 7;
        }
        else
        {
          v11 = *(_QWORD *)(a2 + 8);
        }
        v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1[9] + 24))(a1[9], v11, *((unsigned int *)a1 + 50), v8 * (v7 - 1));
        if ((_DWORD)v7 == 1)
          *(_OWORD *)(a1 + 17) = *(_OWORD *)(v11 + 24);
        if (v7 > *((_DWORD *)a1 + 10))
          *((_DWORD *)a1 + 10) = v7;
        ++*((_DWORD *)a1 + 64);
        ++*((_DWORD *)a1 + 68);
        v12 = a1[14];
        if (v12)
          sub_1ACBEB96C(v12, v7, *(_QWORD *)(a2 + 8));
      }
      if (!(_DWORD)v14)
      {
        a2 = *(_QWORD *)(a2 + 32);
        if (a2)
          continue;
      }
      return v14;
    }
  }
  return v14;
}

uint64_t sub_1ACBA80EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(NSObject **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28))
    {
      v4 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v4;
      *(_DWORD *)(a1 + 24) = -1;
      *(_QWORD *)(a1 + 48) = 0;
    }
    sub_1ACBE1A3C(a1);
  }
  sub_1ACBA8198(a1);
  if (qword_1ECD3E950)
    xmmword_1ECD3B1D0(qword_1ECD3E950);
  return 0;
}

double sub_1ACBA8198(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  double result;
  char __strerrbuf[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    off_1EECACAF0(v3, *(_QWORD *)(a1 + 88));
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 0x80000000) == 0)
  {
    if (off_1EECAC8E0(v4))
    {
      v5 = *(const char **)(a1 + 56);
      v6 = *__error();
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v6, __strerrbuf, 0x4FuLL);
      v7 = &byte_1ACCBEAEE;
      if (v5)
        v7 = v5;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 42797, v6, "close", v7, __strerrbuf);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v9)(v8);
      goto LABEL_19;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
LABEL_19:
  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_9;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v8 = *(_QWORD *)a1;
    *(_DWORD *)(v8 + 80) = 25;
    sub_1ACBE938C(v8, 25);
LABEL_9:
    v6 = &qword_1ACCB6E80;
    v7 = 1;
    goto LABEL_13;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) == 1)
  {
    v9 = *((_DWORD *)v6 + 4);
    if (!a1)
      return v9;
    goto LABEL_20;
  }
LABEL_13:
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) != 0)
    {
      v9 = 0;
      if (!a1)
        return v9;
    }
    else
    {
      v9 = sub_1ACBF2B3C((uint64_t)v6, 1);
      if (!a1)
        return v9;
    }
    goto LABEL_20;
  }
  v9 = *((_DWORD *)v6 + 4);
  if ((v7 & 0x400) != 0)
    v9 += *(_DWORD *)v6;
  if (a1)
  {
LABEL_20:
    v10 = *(_QWORD *)a1;
    v11 = *((_DWORD *)a1 + 13);
    if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      v12 = sub_1ACBF2990(v10, v11);
      v10 = *(_QWORD *)a1;
    }
    *((_DWORD *)a1 + 13) = v12;
    v13 = *(_QWORD *)(v10 + 24);
    if (v13)
      xmmword_1ECD3B1D0(v13);
  }
  return v9;
}

uint64_t sub_1ACBA847C(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  char __strerrbuf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (off_1EECACA48(a2) == -1)
  {
    if (*__error() == 2)
      return 5898;
    v9 = *__error();
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v9, __strerrbuf, 0x4FuLL);
    v5 = 2570;
    sqlite3_log(2570, "os_unix.c:%d: (%d) %s(%s) - %s");
    return v5;
  }
  if ((a3 & 1) == 0)
    return 0;
  v13 = 0;
  v5 = 0;
  if (off_1EECACA60(a2, &v13))
    return v5;
  if (!fsync(v13))
  {
    v5 = 0;
    v8 = v13;
    if (v13 < 0)
      return v5;
    goto LABEL_16;
  }
  v6 = *__error();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v6, __strerrbuf, 0x4FuLL);
  if (a2)
    v7 = a2;
  else
    v7 = &byte_1ACCBEAEE;
  v12 = v6;
  v5 = 1290;
  sqlite3_log(1290, "os_unix.c:%d: (%d) %s(%s) - %s", 49762, v12, "fsync", v7, __strerrbuf);
  v8 = v13;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_16:
    if (off_1EECAC8E0(v8))
    {
      v11 = *__error();
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v11, __strerrbuf, 0x4FuLL);
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
  }
  return v5;
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return sqlite3_bind_int64(a1, a2, a3);
}

uint64_t sub_1ACBA8698(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[2])
    return a1[2];
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  return sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1ACBA86CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;

  v8 = a7;
  v11 = *((unsigned int *)a1 + 36);
  if (*((_DWORD *)a1 + 37) <= (int)v11)
  {
    v11 = sub_1ACBFF5AC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *((_DWORD *)a1 + 36) = v11 + 1;
    v12 = a1[17] + 40 * (int)v11;
    *(_BYTE *)v12 = a2;
    *(_WORD *)(v12 + 2) = 0;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = a4;
    *(_DWORD *)(v12 + 12) = a5;
    *(_BYTE *)(v12 + 1) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  if (*(_BYTE *)(*a1 + 103))
  {
    if (v8 != -11)
      sub_1ACB693B4((_QWORD *)*a1, v8, a6);
    return v11;
  }
  v13 = v11;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = *((_DWORD *)a1 + 36) - 1;
    v14 = a1[17];
    if ((v8 & 0x80000000) != 0)
      goto LABEL_11;
LABEL_12:
    sub_1ACBFF884(a1, v14 + 40 * v13, (char *)a6, v8);
    return v11;
  }
  v14 = a1[17];
  if ((v8 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = v14 + 40 * v13;
  v17 = *(unsigned __int8 *)(v15 + 1);
  v16 = (_BYTE *)(v15 + 1);
  if (v17)
    goto LABEL_12;
  if (v8 == -3)
  {
    *(_DWORD *)(v14 + 40 * v13 + 16) = a6;
    *v16 = -3;
  }
  else if (a6)
  {
    *(_QWORD *)(v14 + 40 * v13 + 16) = a6;
    *v16 = v8;
    if (v8 == -11)
      ++*(_DWORD *)(a6 + 24);
  }
  return v11;
}

_QWORD *sub_1ACBA880C(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned __int8 *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char v76;
  _DWORD *v77;
  uint64_t v78;
  char v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int *v91;
  _BYTE *v92;
  _QWORD *v93;
  _BYTE *v94;
  int v95;
  unsigned __int8 v96;
  unsigned __int8 *v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t j;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  const char *k;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  const char *m;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  const char *n;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t (*v122)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, uint64_t);
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  BOOL v144;
  BOOL v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  __int16 v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  _DWORD *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int16x8_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t *v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  int v212;
  uint64_t v213;
  const char *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int16x8_t v237;
  uint64_t v238;
  char v239;
  unint64_t v240;
  int v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  uint64_t v246;
  __int16 v247;
  unint64_t v248;
  __int16 v249;
  uint64_t v250;
  uint64_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int8x16_t v254;
  uint16x8_t v255;
  int8x16_t v256;
  int16x8_t v257;
  int16x8_t v258;
  unsigned __int16 *v259;
  unsigned int v260;
  uint64_t v261;
  __int16 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int16x8_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int16x8_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int16x8_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  BOOL v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  BOOL v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  int v329;
  int v330;
  unint64_t v331;
  uint64_t **v332;
  unsigned int v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  __int16 v337;
  unsigned int v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  size_t __len;
  unsigned __int8 v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  _BOOL4 v354;
  int v355;
  int v356;
  _DWORD *v357;
  uint64_t v358;
  unsigned __int8 *v359;
  char v360;
  uint64_t *v361;
  uint64_t v362;
  _BYTE *__b;
  unsigned int __ba;
  _QWORD *v365;
  unsigned __int8 *v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned __int8 *v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  int v375;
  char v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned __int8 *v380;
  char v381;
  unsigned int v382;
  uint64_t v383;
  int v384;
  _BOOL8 v385;
  _OWORD v386[4];
  uint64_t v387;
  uint64_t (*v388)(uint64_t, unsigned __int8 *);
  __int128 v389;
  uint64_t v390;
  _QWORD *v391;
  int8x16x2_t v392;

  v8 = (unsigned __int8 *)a7;
  v9 = (_QWORD *)a6;
  v10 = (unsigned __int8 *)a4;
  v12 = a2;
  memset(v386, 0, 56);
  v385 = 0;
  v13 = *(_QWORD **)a1;
  if (*(_DWORD *)(a1 + 48))
    goto LABEL_2;
  v16 = a5;
  v17 = (uint64_t *)a1;
  v24 = (_QWORD *)sub_1ACC10E6C(a1, 0, a2 + 8, a4, a5, a6, a7, a8);
  v25 = *(_QWORD *)(v12 + 40);
  if (v25)
  {
    v26 = (_QWORD *)*v17;
    if (*(_QWORD *)(*v17 + 816) || (v27 = *(_DWORD *)(v25 + 44) - 1, (*(_DWORD *)(v25 + 44) = v27) == 0))
      sub_1ACC00BE8(v26, (_QWORD *)v25);
  }
  *(_QWORD *)(v12 + 40) = v24;
  *(_WORD *)(v12 + 69) |= 0x200u;
  if (!v24)
    goto LABEL_2;
  ++*((_DWORD *)v24 + 11);
  if ((*(_WORD *)(v12 + 69) & 2) != 0)
  {
    v28 = v24[2];
    if (!v28)
    {
LABEL_25:
      sub_1ACBCB308((uint64_t)v17, "no such index: %s", v18, v19, v20, v21, v22, v23, *(_QWORD *)(v12 + 96));
      *((_BYTE *)v17 + 29) = 1;
      goto LABEL_2;
    }
LABEL_18:
    v29 = *(_BYTE **)v28;
    for (i = *(unsigned __int8 **)(v12 + 96); ; ++i)
    {
      v31 = *v29;
      v32 = *i;
      if ((_DWORD)v31 == (_DWORD)v32)
      {
        if (!*v29)
        {
          *(_QWORD *)(v12 + 104) = v28;
          break;
        }
      }
      else if (byte_1ACCB6333[v31] != byte_1ACCB6333[v32])
      {
        v28 = *(_QWORD *)(v28 + 40);
        if (!v28)
          goto LABEL_25;
        goto LABEL_18;
      }
      ++v29;
    }
  }
  v378 = v16;
  v33 = *v17;
  v34 = v24[12];
  if (v34)
  {
    v35 = (uint64_t *)(*(_QWORD *)(v33 + 32) + 24);
    v36 = -1;
    do
    {
      v37 = *v35;
      v35 += 4;
      ++v36;
    }
    while (v37 != v34);
    if (v24[11])
      goto LABEL_34;
  }
  else
  {
    v36 = -32768;
    if (v24[11])
      goto LABEL_34;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 56);
  if (!v38 || !*(_QWORD *)(v38 + 64))
    goto LABEL_35;
LABEL_34:
  if (*((_BYTE *)v17 + 221))
  {
LABEL_35:
    v380 = 0;
    HIDWORD(v385) = 0;
    goto LABEL_37;
  }
  v380 = sub_1ACC2E0D4(v17, (unsigned __int8 **)v24, 129, a3, (_DWORD *)&v385 + 1, v21, v22, v23);
LABEL_37:
  v39 = *((unsigned __int8 *)v24 + 63);
  if (*(int *)v12 < 2)
    v40 = 0;
  else
    v40 = *a3;
  v379 = v40;
  v375 = *((unsigned __int8 *)v24 + 63);
  if (v39 == 2 || v40)
  {
    if (v39 == 1)
      goto LABEL_46;
LABEL_45:
    if (*((__int16 *)v24 + 27) > 0)
      goto LABEL_47;
    goto LABEL_46;
  }
  v10 = sub_1ACC2D5C8(v17, v12, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)"UPDATE", v22, v23);
  v9 = 0;
  v8 = 0;
  if (*((_BYTE *)v24 + 63) != 1)
    goto LABEL_45;
LABEL_46:
  if (sub_1ACC114E0((uint64_t)v17, (uint64_t)v24, v18, v19, v20, v21, v22, v23))
    goto LABEL_2;
LABEL_47:
  if (sub_1ACC2DB0C((uint64_t)v17, (uint64_t)v24, (uint64_t)v380, v19, v20, v21, v22, v23))
    goto LABEL_2;
  v41 = *((_DWORD *)v17 + 13);
  v42 = v41 + 1;
  *((_DWORD *)v17 + 13) = v41 + 1;
  v43 = v24[2];
  v366 = v10;
  if ((v24[6] & 0x80) != 0)
  {
    if (!v43)
    {
      v44 = 0;
      goto LABEL_61;
    }
    v44 = v24[2];
    do
    {
      if ((*(_WORD *)(v44 + 99) & 3) == 2)
        break;
      v44 = *(_QWORD *)(v44 + 40);
    }
    while (v44);
  }
  else
  {
    v44 = 0;
  }
  if (!v43)
  {
LABEL_61:
    v45 = 0;
    v46 = v41;
    goto LABEL_62;
  }
  v45 = 0;
  v46 = v41;
  do
  {
    if (v44 == v43)
      v46 = v42 + v45;
    ++v45;
    v43 = *(_QWORD *)(v43 + 40);
  }
  while (v43);
  *((_DWORD *)v17 + 13) = v42 + v45;
LABEL_62:
  v383 = v44;
  v365 = v9;
  v362 = a8;
  v351 = v41;
  if (a8)
  {
    v46 = *(_DWORD *)(a8 + 76);
    v353 = *(_DWORD *)(a8 + 80);
    *((_DWORD *)v17 + 13) = v41;
  }
  else
  {
    v353 = v41 + 1;
  }
  v372 = v12;
  v368 = v46;
  *(_DWORD *)(v12 + 72) = v46;
  v47 = v45 + 1;
  v367 = (uint64_t)v13;
  v48 = sub_1ACBE1124((uint64_t)v13, v45 + 4 * ((int)v47 + *((__int16 *)v24 + 27)) + 2);
  if (!v48)
  {
    v10 = v366;
    goto LABEL_473;
  }
  v49 = (_QWORD *)v48;
  v357 = (_DWORD *)(v48 + 4 * *((__int16 *)v24 + 27));
  memset(&v357[v45 + 1], 1, v45 + 1);
  *((_BYTE *)&v357[v45 + 1] + v47) = 0;
  if (*((__int16 *)v24 + 27) >= 1)
    memset(v49, 255, 4 * *((unsigned __int16 *)v24 + 27));
  *(_OWORD *)((char *)&v386[2] + 8) = 0u;
  *(_OWORD *)((char *)&v386[1] + 8) = 0u;
  *(_QWORD *)&v386[0] = v17;
  *((_QWORD *)&v386[0] + 1) = v372;
  *(_QWORD *)&v386[1] = v362;
  DWORD2(v386[2]) = 512;
  v57 = v17[2];
  if (!v57)
  {
    if (!v17[21] && (*(_BYTE *)(*v17 + 96) & 8) == 0)
      *((_BYTE *)v17 + 35) = 1;
    v57 = sub_1ACBCB4C8(v17, v50, v51, (uint64_t)v52, v53, v54, v55, v56);
    if (!v57)
    {
      v10 = v366;
      goto LABEL_472;
    }
  }
  v373 = v57;
  v374 = (int *)a3;
  v358 = (uint64_t)v8;
  __b = &v357[v45 + 1];
  v361 = v17;
  if ((int)*a3 < 1)
  {
    v360 = 0;
    LOBYTE(v59) = 0;
    v371 = 0;
    v370 = -1;
LABEL_77:
    v349 = v59 + v360;
    v381 = v59;
    if ((v24[6] & 0x60) != 0)
    {
      LOWORD(v62) = *((_WORD *)v24 + 27);
      do
      {
        if ((__int16)v62 < 1)
          break;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        do
        {
          if ((*((_DWORD *)v49 + v64) & 0x80000000) != 0)
          {
            v66 = v24[1] + v63;
            if ((*(_WORD *)(v66 + 14) & 0x60) != 0)
            {
              v67 = *(unsigned __int16 *)(v66 + 12);
              if (v67
                && !*((_BYTE *)v24 + 63)
                && (v69 = (_DWORD *)v24[10]) != 0
                && *v69 >= v67
                && (v70 = *(_QWORD *)&v69[6 * (v67 - 1) + 2],
                    v387 = 0,
                    v389 = 0u,
                    v390 = 0,
                    v391 = v49,
                    v388 = sub_1ACC338C0,
                    v70))
              {
                sub_1ACC0B714((uint64_t)&v387, v70);
                LOBYTE(v59) = v381;
                v68 = WORD2(v390);
              }
              else
              {
                v68 = 0;
              }
              if (!(_BYTE)v59)
                v68 &= ~2u;
              if (v68)
              {
                *((_DWORD *)v49 + v64) = 99999;
                v65 = 1;
              }
            }
          }
          ++v64;
          v62 = *((__int16 *)v24 + 27);
          v63 += 16;
        }
        while (v64 < v62);
      }
      while (v65);
    }
    if (*((_BYTE *)v24 + 63) == 1)
      v71 = -1;
    else
      v71 = 0;
    *(_QWORD *)(v372 + 88) = v71;
    v72 = sub_1ACB98C40((uint64_t)v17, (unsigned __int8 **)v24, (uint64_t)v49, v349);
    v354 = v378 == 5;
    v73 = v24[2];
    v350 = v72;
    if (v73)
    {
      v74 = 0;
      if (v349)
        v75 = 0;
      else
        v75 = v72 <= 1;
      v76 = !v75;
      v376 = v76;
      v77 = v357;
      v78 = v383;
      v79 = v381;
      v80 = &v357[v45 + 1];
      while (1)
      {
        v83 = v376;
        if (v73 == v78)
          v83 = 1;
        if ((v83 & 1) != 0)
          goto LABEL_107;
        v84 = *(_QWORD *)(v73 + 72);
        if (v84)
        {
          v387 = 0;
          v389 = 0u;
          v390 = 0;
          v391 = v49;
          v388 = sub_1ACC338C0;
          sub_1ACC0B714((uint64_t)&v387, v84);
          v79 = v381;
          v85 = WORD2(v390);
          if (!v381)
            v85 = WORD2(v390) & 0xFFFD;
          if (v85)
          {
LABEL_107:
            v81 = *((_DWORD *)v17 + 14) + 1;
            *((_DWORD *)v17 + 14) = v81 + *(unsigned __int16 *)(v73 + 96);
            if (v81)
              goto LABEL_108;
LABEL_133:
            v78 = v383;
LABEL_134:
            v81 = 0;
            v82 = v74 + 1;
            v80[v74 + 1] = 0;
            goto LABEL_109;
          }
        }
        if (!*(_WORD *)(v73 + 94))
          goto LABEL_133;
        v86 = 0;
        v87 = 8;
        while ((*(__int16 *)(*(_QWORD *)(v73 + 8) + 2 * v86) & 0x80000000) == 0)
        {
          if ((*((_DWORD *)v49 + *(unsigned __int16 *)(*(_QWORD *)(v73 + 8) + 2 * v86)) & 0x80000000) == 0)
            goto LABEL_128;
LABEL_120:
          ++v86;
          v87 += 24;
          if (v86 >= *(unsigned __int16 *)(v73 + 94))
          {
            v78 = v383;
            v80 = &v357[v45 + 1];
            goto LABEL_134;
          }
        }
        v88 = *(_QWORD *)(*(_QWORD *)(v73 + 80) + v87);
        v387 = 0;
        v389 = 0u;
        v390 = 0;
        v391 = v49;
        v388 = sub_1ACC338C0;
        if (v88)
        {
          sub_1ACC0B714((uint64_t)&v387, v88);
          v79 = v381;
          v89 = WORD2(v390);
        }
        else
        {
          v89 = 0;
        }
        if (!v79)
          v89 &= ~2u;
        if (!v89)
          goto LABEL_120;
LABEL_128:
        v81 = *((_DWORD *)v17 + 14) + 1;
        *((_DWORD *)v17 + 14) = v81 + *(unsigned __int16 *)(v73 + 96);
        if (v378 == 11)
        {
          v90 = v354;
          if (*(_BYTE *)(v73 + 98) == 5)
            v90 = 1;
          v354 = v90;
        }
        v80 = &v357[v45 + 1];
        if (!v81)
          goto LABEL_133;
LABEL_108:
        v82 = v74 + 1;
        v78 = v383;
LABEL_109:
        v357[v74] = v81;
        v73 = *(_QWORD *)(v73 + 40);
        v74 = v82;
        if (!v73)
          goto LABEL_191;
      }
    }
    LODWORD(v82) = 0;
    v77 = v357;
    v80 = &v357[v45 + 1];
LABEL_191:
    LODWORD(v385) = v354;
    v126 = *((_DWORD *)v17 + 14) + 1;
    *((_DWORD *)v17 + 14) = v126;
    v77[v82] = v126;
    if (v354)
      memset(v80, 1, v45 + 1);
    v127 = v82;
    v8 = (unsigned __int8 *)v358;
    a3 = (unsigned int *)v374;
    if (!*((_BYTE *)v17 + 30))
      *(_WORD *)(v373 + 268) |= 0x10u;
    v128 = (uint64_t)v380;
    if (v380)
      v129 = 0;
    else
      v129 = v350 == 0;
    v130 = !v129;
    sub_1ACC0DDF0((uint64_t)v17, v130, v36);
    v138 = *((unsigned __int8 *)v24 + 63);
    v340 = v127;
    if (v138 == 1)
    {
      v139 = 0;
      v347 = 0;
      v377 = 0;
      v341 = 0;
      v140 = v383;
      v141 = v379;
    }
    else
    {
      v341 = v357[v127];
      v142 = *((_DWORD *)v17 + 14);
      v139 = (v142 + 1);
      if (v380 || v360 || v350)
      {
        v377 = v142 + 2;
        v143 = v139 + *((__int16 *)v24 + 27);
      }
      else
      {
        v377 = 0;
        v143 = v142 + 1;
      }
      v140 = v383;
      v141 = v379;
      if (v349)
        v144 = 0;
      else
        v144 = v380 == 0;
      v145 = v144 && v350 == 0;
      if (v145)
        v146 = v143;
      else
        v146 = v143 + 1;
      if (v145)
        v147 = v139;
      else
        v147 = v143 + 1;
      HIDWORD(v347) = v147;
      LODWORD(v347) = v146 + 1;
      *((_DWORD *)v17 + 14) = v146 + *((__int16 *)v24 + 27);
    }
    v148 = v375;
    if (v375 == 2)
    {
      v346 = v17[46];
      v17[46] = *v24;
      if (v141)
      {
        __len = (size_t)v17;
        goto LABEL_231;
      }
      sub_1ACC2DC70(v17, (uint64_t)v24, v366, (uint64_t)v365, v358, v368);
      v8 = 0;
      v365 = 0;
      __len = (size_t)v17;
    }
    else
    {
      v346 = 0;
      __len = 0;
      if (v141)
        goto LABEL_231;
    }
    if (sub_1ACC0F790((uint64_t)v386, (uint64_t)v366, v132, v133, v134, v135, v136, v137))
    {
LABEL_229:
      v10 = v366;
      goto LABEL_470;
    }
    v138 = *((unsigned __int8 *)v24 + 63);
    v140 = v383;
    v141 = v379;
LABEL_231:
    if (v138 == 1)
    {
      v10 = v366;
      sub_1ACC322C0((_QWORD **)v17, (int *)v372, (uint64_t)v24, (uint64_t)v374, v371, (uint64_t)v49, v366, v378);
LABEL_470:
      if (__len)
        *(_QWORD *)(__len + 368) = v346;
      goto LABEL_472;
    }
    v344 = *((_DWORD *)v17 + 17) - 1;
    *((_DWORD *)v17 + 17) = v344;
    if ((*(_BYTE *)(v367 + 52) & 1) == 0 || v17[22] || *((_BYTE *)v17 + 30))
    {
      v336 = 0;
    }
    else
    {
      v336 = 0;
      if (!v362 && !*((_BYTE *)v17 + 219))
      {
        v212 = *((_DWORD *)v17 + 14);
        v213 = (v212 + 1);
        *((_DWORD *)v17 + 14) = v213;
        v336 = v212 + 1;
        sub_1ACBFF554(v373, 71, 0, v213, v134, v135, v136, v137);
        v141 = v379;
        v140 = v383;
      }
    }
    v345 = v139;
    if (!v141 && (v24[6] & 0x80) == 0)
    {
      sub_1ACB683F4(v373, 75, 0, v341, v139, v135, v136, v137);
      v149 = *((unsigned int *)v17 + 13);
      *((_DWORD *)v17 + 13) = v149 + 1;
      v343 = v149;
      v154 = sub_1ACB683F4(v373, 118, v149, 0, v341, v150, v151, v152);
      v333 = 0;
      v155 = 0;
      v338 = 0;
      if (!v362)
      {
LABEL_279:
        v184 = 4;
        if (!v380 && !*((_BYTE *)v17 + 30) && !v350 && !v349 && !v354 && (!v366 || (v366[6] & 0x40) == 0))
          v184 = 12;
        v167 = sub_1ACB78E3C((uint64_t)v17, (int *)v372, (uint64_t)v366, 0, 0, 0, v184, v353);
        if (!v167)
          goto LABEL_229;
        v331 = *(_QWORD *)(v167 + 40);
        v165 = HIDWORD(v331);
        v185 = *(unsigned __int8 *)(v167 + 66);
        v339 = *(_BYTE *)(v167 + 68) & 1;
        v168 = 1;
        if (v185 != 1)
        {
          v186 = (uint64_t *)v17[21];
          if (!v186)
            v186 = v17;
          *((_BYTE *)v186 + 32) = 1;
          if (v185 == 2)
          {
            v168 = 2;
            if ((v331 & 0x8000000000000000) == 0 && v368 != HIDWORD(v331))
              v168 = 2 * (__b[HIDWORD(v331) - v351] == 0);
          }
          else
          {
            v168 = v185;
          }
        }
        goto LABEL_252;
      }
LABEL_251:
      sub_1ACB9F1D0((uint64_t)v17, (unsigned __int8 **)v366, v344, 16, v153, v135, v136, v137);
      v167 = 0;
      v339 = 0;
      v168 = 1;
      LODWORD(v331) = v169;
LABEL_252:
      v330 = v165;
      v355 = v168;
      v332 = (uint64_t **)v167;
      v337 = v155;
      if ((v24[6] & 0x80) != 0)
      {
        v328 = v154;
        v136 = v155;
        v171 = v383;
        if ((int)v136 >= 1)
        {
          v172 = 0;
          do
          {
            v173 = v136;
            *(double *)v166.i64 = sub_1ACC0B288(v373, (uint64_t)v24, v368, *(__int16 *)(*(_QWORD *)(v171 + 8) + 2 * v172), v333 + v172, v135, v136, v137, v166);
            v136 = v173;
            v171 = v383;
            ++v172;
          }
          while (v173 != v172);
        }
        v170 = v355;
        v335 = v136;
        if (v355)
        {
          v161 = (_DWORD *)v373;
          v139 = v345;
          v131 = v328;
          if (v328)
          {
            sub_1ACB7A700(v373, v328);
            v170 = v355;
          }
          v342 = 0;
          v158 = v333;
          v338 = v333;
        }
        else
        {
          v188 = *(_QWORD *)(v171 + 32);
          v139 = v345;
          if (!v188)
          {
            v189 = v136;
            v190 = sub_1ACC27860(v367, v383);
            v136 = v189;
            v188 = v190;
          }
          sub_1ACBA86CC((uint64_t *)v373, 97, v333, v136, v338, v188, v136, v137);
          v161 = (_DWORD *)v373;
          sub_1ACBCB640(v373, 138, v343, v338, v333, v335, v191, v192);
          v158 = v333;
          v342 = 0;
          v170 = 0;
          v335 = 0;
        }
        v128 = (uint64_t)v380;
        v156 = v368;
        v148 = v375;
        v141 = v379;
        v159 = v381;
        v160 = v351;
      }
      else
      {
        v161 = (_DWORD *)v373;
        sub_1ACBFF554(v373, 135, v368, v139, v163, v135, v164, v137);
        v170 = v355;
        if (v355)
        {
          if (v154)
          {
            sub_1ACB7A700(v373, v154);
            v170 = v355;
          }
          v342 = 0;
        }
        else
        {
          v187 = *((_DWORD *)v17 + 14) + 1;
          *((_DWORD *)v17 + 14) = v187;
          v357[v340] = v187;
          sub_1ACB683F4(v373, 128, v343, v341, v139, v135, v136, v137);
          v342 = 0;
          v170 = 0;
        }
        v335 = 0;
        v156 = v368;
        v148 = v375;
        v141 = v379;
        v159 = v381;
        v160 = v351;
        v158 = v333;
      }
      goto LABEL_301;
    }
    if (v140)
      v155 = *(_WORD *)(v140 + 94);
    else
      v155 = 0;
    v156 = v368;
    v157 = *((_DWORD *)v17 + 14);
    v158 = (v157 + 1);
    v153 = (v157 + v155);
    v338 = v141 + v153 + 1;
    *((_DWORD *)v17 + 14) = v338;
    if (v362)
    {
      v343 = 0;
      if (!v141)
      {
        v333 = v157 + 1;
        v154 = 0;
        goto LABEL_251;
      }
      v335 = v155;
      v337 = v155;
      v159 = v381;
      v160 = v351;
      v161 = (_DWORD *)v373;
    }
    else
    {
      v337 = v155;
      v335 = v155;
      if (v375 == 2)
        v162 = *((__int16 *)v24 + 27);
      else
        v162 = 0;
      v174 = v141 + v155 + v162;
      v175 = *((unsigned int *)v17 + 13);
      *((_DWORD *)v17 + 13) = v175 + 1;
      v343 = v175;
      v333 = v157 + 1;
      if (v140)
      {
        v176 = v140;
        sub_1ACB683F4(v373, 75, 0, v158, v153, v135, v136, v137);
        v329 = sub_1ACBFF554(v373, 118, v175, v174, v177, v178, v179, v180);
        v181 = sub_1ACC09130(v17, v176);
        if (v181)
        {
          *(_WORD *)(v181 + 8) = v174;
          sub_1ACC09284((_QWORD *)v373, v181, -8);
        }
        v139 = v345;
        v161 = (_DWORD *)v373;
      }
      else
      {
        v161 = (_DWORD *)v373;
        v329 = sub_1ACBFF554(v373, 118, v175, v174, v153, v135, v136, v137);
        v139 = v345;
      }
      if (!v379)
      {
        v354 = v385;
        v155 = v337;
        v154 = v329;
        goto LABEL_279;
      }
      sub_1ACC32ED0(v17, v175, v383, v374, v372, v366, v365, v8, v327);
      v141 = v379;
      v182 = v175;
      v148 = v375;
      v156 = v368;
      if (v375 == 2)
        v156 = v182;
      v159 = v381;
      v160 = v351;
      v158 = v333;
    }
    v170 = 0;
    v183 = (uint64_t *)v17[21];
    if (!v183)
      v183 = v17;
    v342 = 1;
    *((_BYTE *)v183 + 32) = 1;
    v330 = (int)v183;
    LODWORD(v331) = (_DWORD)v183;
    v332 = 0;
    v338 = v158;
    v339 = 1;
LABEL_301:
    v359 = v8;
    v369 = v156;
    v356 = v170;
    if (v362)
    {
      v352 = 0;
      __ba = v344;
      v193 = HIDWORD(v347);
    }
    else
    {
      if (!v141 && v170 != 2)
      {
        v194 = v160;
        v380 = (unsigned __int8 *)v128;
        v195 = v139;
        v196 = v161;
        v197 = v158;
        sub_1ACB7D270(v332, v131, v132, v158, v160, v135, v136, v137);
        v158 = v197;
        v161 = v196;
        v139 = v195;
        v128 = (uint64_t)v380;
        v170 = v356;
        v160 = v194;
        v156 = v369;
      }
      v198 = v383;
      if (v148 != 2)
      {
        LODWORD(v387) = 0;
        v384 = 0;
        if (!v170)
          goto LABEL_317;
        if ((v331 & 0x80000000) == 0)
          __b[(int)v331 - (int)v160] = 0;
        if ((v330 & 0x80000000) == 0)
          __b[v330 - (int)v160] = 0;
        if (v170 == 2 && (int)(v45 + (~v330 >> 31)) > 0)
        {
          v199 = v160;
          v200 = v158;
          v201 = sub_1ACC08CD4((uint64_t)v161, 15, v132, v158, v160, v135, v136, v137);
          sub_1ACB956A8((uint64_t)v17, (uint64_t)v24, 113, 0, v199, __b, &v387, &v384);
          LODWORD(v158) = v200;
          v198 = v383;
          v156 = v369;
          if (v201)
          {
            v202 = v161[36];
            if (v202 - 1 == v201)
            {
              v161[36] = v201;
            }
            else
            {
              if (*(_BYTE *)(*(_QWORD *)v161 + 103))
                v323 = &byte_1EECAD280;
              else
                v323 = (char *)(*(_QWORD *)(v373 + 136) + 40 * v201);
              *((_DWORD *)v323 + 2) = v202;
              v161 = (_DWORD *)v373;
              a3 = (unsigned int *)v374;
              v128 = (uint64_t)v380;
              v156 = v369;
              v198 = v383;
              LODWORD(v158) = v200;
              v17 = v361;
            }
          }
        }
        else
        {
LABEL_317:
          v203 = v158;
          sub_1ACB956A8((uint64_t)v17, (uint64_t)v24, 113, 0, v160, __b, &v387, &v384);
          LODWORD(v158) = v203;
          v198 = v383;
          v156 = v369;
        }
        v139 = v345;
        v170 = v356;
      }
      if (v170)
      {
        if ((_DWORD)v331 != v156 && v330 != v156)
        {
          sub_1ACBCB640((uint64_t)v161, 28, v369, v344, v338, v335, v136, v137);
          v170 = v356;
          v198 = v383;
        }
        __ba = v344;
        if (v170 != 1)
        {
          __ba = *((_DWORD *)v17 + 17) - 1;
          *((_DWORD *)v17 + 17) = __ba;
        }
        if (v198)
          v204 = v338;
        else
          v204 = v139;
        sub_1ACBFF554((uint64_t)v161, 50, v204, v344, v160, v135, v136, v137);
        v352 = 0;
        v141 = v379;
        v159 = v381;
        v193 = HIDWORD(v347);
      }
      else
      {
        v205 = v148;
        v206 = v342 ^ 1;
        if (v198)
          v206 = 0;
        if ((v206 & 1) != 0)
        {
          sub_1ACBFF554((uint64_t)v161, 36, v343, v344, v160, v135, v136, v137);
          v216 = (*((_DWORD *)v17 + 17) - 1);
          *((_DWORD *)v17 + 17) = v216;
          v352 = sub_1ACBFF554((uint64_t)v161, 135, v343, v139, v217, v218, v219, v220);
          __ba = v216;
          sub_1ACB683F4((uint64_t)v161, 31, v369, v216, v139, v221, v222, v223);
          v148 = v205;
          v141 = v379;
          v159 = v381;
          v193 = HIDWORD(v347);
        }
        else
        {
          v334 = v158;
          v207 = (*((_DWORD *)v17 + 17) - 1);
          *((_DWORD *)v17 + 17) = v207;
          sub_1ACBFF554((uint64_t)v161, 36, v343, v344, v160, v135, v136, v137);
          __ba = v207;
          v352 = v161[36];
          if (v342)
          {
            if (v148 != 2)
            {
              if (v383)
              {
                v208 = v337;
                if ((int)v208 >= 1)
                {
                  v209 = 0;
                  do
                  {
                    sub_1ACB683F4((uint64_t)v161, 94, v343, v209, v334 + v209, v135, v136, v137);
                    v209 = (v209 + 1);
                  }
                  while ((_DWORD)v208 != (_DWORD)v209);
                }
                sub_1ACBCB640((uint64_t)v161, 28, v369, __ba, v334, v208, v136, v137);
                a3 = (unsigned int *)v374;
                v128 = (uint64_t)v380;
                v148 = v205;
                v210 = v378;
                v141 = v379;
                v211 = v381;
                v193 = HIDWORD(v347);
              }
              else
              {
                sub_1ACBFF554((uint64_t)v161, 135, v343, v345, v160, v135, v136, v137);
                sub_1ACB683F4((uint64_t)v161, 31, v369, v207, v345, v324, v325, v326);
                a3 = (unsigned int *)v374;
                v128 = (uint64_t)v380;
                v210 = v378;
                v141 = v379;
                v211 = v381;
                v193 = HIDWORD(v347);
              }
              v17 = v361;
              if (!v211)
              {
LABEL_353:
                if (v128 || v360 || v350)
                {
                  if (v350)
                    v231 = sub_1ACC2E574((_QWORD **)v17, (uint64_t)v24, v132, v158, v160, v135, v136, v137);
                  else
                    v231 = 0;
                  v232 = sub_1ACC2E3A0(v17, v128, a3, 0, 3u, (uint64_t)v24, v210);
                  v238 = v383;
                  v239 = v381;
                  if (*((__int16 *)v24 + 27) >= 1)
                  {
                    v240 = 0;
                    v241 = v232 | v231;
                    v242 = (int8x16_t)xmmword_1ACCBDDB0;
                    v243 = (int8x16_t)xmmword_1ACCBDDC0;
                    v244 = (int8x16_t)xmmword_1ACCBDDD0;
                    v245.i64[0] = 0x1000100010001;
                    v245.i64[1] = 0x1000100010001;
                    do
                    {
                      v246 = v24[1];
                      v247 = v240;
                      if ((v240 & 0x8000) == 0 && (v24[6] & 0x20) != 0)
                      {
                        if ((_WORD)v240)
                        {
                          if (v240 >= 0x11)
                          {
                            if ((v240 & 0xF) != 0)
                              v250 = v240 & 0xF;
                            else
                              v250 = 16;
                            v248 = v240 - v250;
                            v251 = v246 + 142;
                            v252 = 0uLL;
                            v253 = 0uLL;
                            do
                            {
                              v254 = vqtbl2q_s8(*(int8x16x2_t *)(v251 - 64), v243);
                              v254.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v251 - 32), v242).i32[3];
                              v255.i32[0] = vzip1q_s16(*(int16x8_t *)(v251 - 128), *(int16x8_t *)(v251 - 112)).u32[0];
                              v255.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v251 - 96), v244).i32[1];
                              v255.i64[1] = v254.i64[1];
                              v392 = *(int8x16x2_t *)(v251 + 32);
                              v256 = vqtbl2q_s8(*(int8x16x2_t *)(v251 + 64), v243);
                              v256.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v251 + 96), v242).i32[3];
                              v258 = *(int16x8_t *)v251;
                              v257 = *(int16x8_t *)(v251 + 16);
                              v251 += 256;
                              v257.i32[0] = vzip1q_s16(v258, v257).u32[0];
                              v257.i32[1] = vqtbl2q_s8(v392, v244).i32[1];
                              v257.i64[1] = v256.i64[1];
                              v252 = vaddq_s16((int16x8_t)vbicq_s8(v245, (int8x16_t)vshrq_n_u16(v255, 5uLL)), v252);
                              v253 = vaddq_s16((int16x8_t)vbicq_s8(v245, (int8x16_t)vshrq_n_u16((uint16x8_t)v257, 5uLL)), v253);
                              v250 += 16;
                            }
                            while (v240 != v250);
                            v237 = vaddq_s16(v253, v252);
                            v237.i16[0] = vaddvq_s16(v237);
                            v249 = v237.i16[0];
                          }
                          else
                          {
                            v248 = 0;
                            v249 = 0;
                          }
                          v259 = (unsigned __int16 *)(v246 + 16 * v248 + 14);
                          do
                          {
                            v260 = *v259;
                            v259 += 8;
                            v249 += ((v260 >> 5) & 1) == 0;
                            ++v248;
                          }
                          while (v240 != v248);
                        }
                        else
                        {
                          v249 = 0;
                        }
                        if ((*(_WORD *)(v246 + 16 * ((uint64_t)(v240 << 16) >> 16) + 14) & 0x20) != 0)
                          v247 = v240 - v249 + *((_WORD *)v24 + 28);
                        else
                          v247 = v249;
                      }
                      v261 = (v377 + v247);
                      if (v241 != -1)
                      {
                        v262 = *(_WORD *)(v246 + 16 * v240 + 14);
                        if (v240 > 0x1F)
                        {
                          if ((v262 & 1) == 0)
                          {
LABEL_385:
                            sub_1ACBFF554(v373, 75, 0, (v377 + v247), v261, v234, v235, v236);
                            goto LABEL_362;
                          }
                        }
                        else if (!((1 << v240) & v241 | v262 & 1))
                        {
                          goto LABEL_385;
                        }
                      }
                      *(double *)v237.i64 = sub_1ACC0B288(v373, (uint64_t)v24, v369, v240, v261, v234, v235, v236, v237);
LABEL_362:
                      ++v240;
                      v238 = v383;
                      v239 = v381;
                      v242 = (int8x16_t)xmmword_1ACCBDDB0;
                      v243 = (int8x16_t)xmmword_1ACCBDDC0;
                      v244 = (int8x16_t)xmmword_1ACCBDDD0;
                      v245.i64[0] = 0x1000100010001;
                      v245.i64[1] = 0x1000100010001;
                    }
                    while ((uint64_t)v240 < *((__int16 *)v24 + 27));
                  }
                  v210 = v378;
                  if (!v238 && !v239)
                    sub_1ACBFF554(v373, 80, v345, HIDWORD(v347), v233, v234, v235, v236);
                }
                v382 = sub_1ACC2E3A0(v17, v128, a3, 1u, 1u, (uint64_t)v24, v210);
                v269 = *((__int16 *)v24 + 27);
                if (v269 >= 1)
                {
                  v270 = 0;
                  v271 = 14;
                  v272 = v347;
                  do
                  {
                    if (v270 == *((__int16 *)v24 + 26))
                    {
                      v273 = *(_DWORD *)(v373 + 144);
                      if (*(_DWORD *)(v373 + 148) <= v273)
                      {
                        sub_1ACBFF5AC(v373, 75, 0, v272, 0, v265, v266, v267);
                      }
                      else
                      {
                        *(_DWORD *)(v373 + 144) = v273 + 1;
                        v274 = *(_QWORD *)(v373 + 136) + 40 * v273;
                        *(_QWORD *)v274 = 75;
                        *(_DWORD *)(v274 + 8) = v272;
                        *(_QWORD *)(v274 + 12) = 0;
                        *(_QWORD *)(v274 + 28) = 0;
                        *(_QWORD *)(v274 + 20) = 0;
                        *(_DWORD *)(v274 + 36) = 0;
                      }
                    }
                    else
                    {
                      v275 = *(unsigned __int16 *)(v24[1] + v271);
                      if ((v275 & 0x60) != 0)
                      {
                        LODWORD(v272) = v272 + (v275 << 26 >> 31);
                      }
                      else
                      {
                        v276 = *((_DWORD *)v49 + v270);
                        if (v276 < 0)
                        {
                          if ((unint64_t)v270 <= 0x1F
                            && (v385 & 0x100000000) != 0
                            && ((v382 >> v270) & 1) == 0)
                          {
                            sub_1ACBFF554(v373, 75, 0, v272, v264, v265, v266, v267);
                          }
                          else
                          {
                            *(double *)v268.i64 = sub_1ACC0B288(v373, (uint64_t)v24, v369, v270, v272, v265, v266, v267, v268);
                            v339 = 0;
                          }
                        }
                        else if (v342)
                        {
                          if (v148 != 2)
                            LOWORD(v269) = v337;
                          sub_1ACB683F4(v373, 94, v343, (v276 + (__int16)v269), v272, v265, v266, v267);
                        }
                        else
                        {
                          sub_1ACC08D80((uint64_t)v17, *(unsigned __int8 **)&a3[6 * v276 + 2], v272);
                        }
                      }
                    }
                    ++v270;
                    v272 = (v272 + 1);
                    LOWORD(v269) = *((_WORD *)v24 + 27);
                    v271 += 16;
                  }
                  while (v270 < (__int16)v269);
                }
                v277 = v345;
                if ((v24[6] & 0x60) != 0)
                  sub_1ACC33500((uint64_t)v17, v347, (uint64_t)v24, v263, v264, v265, v266, v267);
                v8 = v359;
                v10 = v366;
                v278 = (uint64_t)v380;
                v279 = __ba;
                if ((v385 & 0x100000000) != 0)
                {
                  sub_1ACC0EDC4((_QWORD **)v373, (uint64_t)v24, v347, v263, v264, v265, v266, v267);
                  sub_1ACC2E8C0((uint64_t)v17, (uint64_t)v380, 129, a3, 1, (uint64_t)v24, v345, v378, __ba);
                  if (v148 == 2)
                  {
LABEL_456:
                    if (v336)
                      sub_1ACBFF554(v373, 86, v336, 1, v264, v265, v266, v267);
                    if (v278)
                      sub_1ACC2E8C0((uint64_t)v17, v278, 129, a3, 2, (uint64_t)v24, v277, v378, v279);
                    if (v356 != 1)
                    {
                      sub_1ACC0A574(v373, __ba);
                      if (v356 == 2)
                        sub_1ACB7D270(v332, v309, v310, v311, v312, v313, v314, v315);
                      else
                        sub_1ACBFF554(v373, 39, v343, v352, v312, v313, v314, v315);
                    }
                    sub_1ACC0A574(v373, v344);
                    if (!*((_BYTE *)v17 + 30) && !(v362 | v17[22]) && v17[20])
                      sub_1ACC32090(v17, v316, v317, v318, v319, v320, v321, v322);
                    if (v336)
                      sub_1ACC2DFB4(v373, v336, "rows updated", v318, v319, v320, v321, v322);
                    goto LABEL_470;
                  }
                  if (v383)
                    sub_1ACBCB640(v373, 28, v369, __ba, v338, v335, v266, v267);
                  else
                    sub_1ACB683F4(v373, 31, v369, __ba, v345, v265, v266, v267);
                  v282 = *((__int16 *)v24 + 27);
                  if (v282 >= 1)
                  {
                    v283 = 0;
                    v284 = 14;
                    v285 = v347;
                    do
                    {
                      v286 = *(unsigned __int16 *)(v24[1] + v284);
                      if ((v286 & 0x60) != 0)
                      {
                        LODWORD(v285) = v285 + (v286 << 26 >> 31);
                      }
                      else if ((*((_DWORD *)v49 + v283) & 0x80000000) != 0 && v283 != *((__int16 *)v24 + 26))
                      {
                        *(double *)v281.i64 = sub_1ACC0B288(v373, (uint64_t)v24, v369, v283, v285, v265, v266, v267, v281);
                        LOWORD(v282) = *((_WORD *)v24 + 27);
                      }
                      ++v283;
                      v285 = (v285 + 1);
                      v284 += 16;
                    }
                    while (v283 < (__int16)v282);
                  }
                  v10 = v366;
                  v278 = (uint64_t)v380;
                  v277 = v345;
                  v279 = __ba;
                  if ((v24[6] & 0x60) != 0)
                    sub_1ACC33500((uint64_t)v17, v347, (uint64_t)v24, v280, v264, v265, v266, v267);
                }
                if (v148 != 2)
                {
                  HIDWORD(v327) = v279;
                  LOBYTE(v327) = v378;
                  sub_1ACB95944(v17, v24, v357, v369, v353, HIDWORD(v347), v277, v349, v327, &v385, v49, 0);
                  if (v385 || v349)
                  {
                    if (v383)
                      sub_1ACBCB640(v373, 28, v369, v279, v338, v335, v288, v289);
                    else
                      sub_1ACB683F4(v373, 31, v369, v279, v277, v287, v288, v289);
                  }
                  if (v350)
                    sub_1ACB99378(v17, (uint64_t)v24, v277, 0, (uint64_t)v49, v349, v288, v289);
                  sub_1ACC2EAE0((uint64_t)v17, (uint64_t)v24, v369, v353, v357, -1, v290);
                  if (v339)
                    sub_1ACC08D28(v373, 143, v369, v291, v292, v293, v294, v295);
                  if (v349)
                    v296 = 0;
                  else
                    v296 = v350 <= 1;
                  if (v296)
                    v297 = 68;
                  else
                    v297 = 4;
                  sub_1ACB683F4(v373, 130, v369, v297, HIDWORD(v347), v293, v294, v295);
                  v300 = v356;
                  if (v356 == 2)
                  {
                    v301 = *(_DWORD *)(v373 + 144);
                    v302 = __OFSUB__(v301, 1);
                    v303 = v301 - 1;
                    if (v303 < 0 == v302)
                      *(_WORD *)(*(_QWORD *)(v373 + 136) + 40 * v303 + 2) = 2;
                  }
                  if (!*((_BYTE *)v17 + 30))
                  {
                    sub_1ACC09284((_QWORD *)v373, (uint64_t)v24, -5);
                    v300 = v356;
                  }
                  if (v350)
                  {
                    v304 = v300;
                    sub_1ACB99378(v17, (uint64_t)v24, 0, HIDWORD(v347), (uint64_t)v49, v349, v298, v299);
                    v129 = v304 == 2;
                    LODWORD(v279) = __ba;
                    if (v129)
                      v305 = 6;
                    else
                      v305 = 4;
                    sub_1ACB99CFC((uint64_t)v17, (uint64_t)v24, v369, v353, HIDWORD(v347), (uint64_t)v357, v305, 0, 0);
                    v277 = v345;
                    sub_1ACC2EC9C(v17, (uint64_t)v24, (uint64_t)a3, v345, (uint64_t)v49, v349, v306, v307);
                  }
                  else
                  {
                    if (v300 == 2)
                      v308 = 6;
                    else
                      v308 = 4;
                    sub_1ACB99CFC((uint64_t)v17, (uint64_t)v24, v369, v353, HIDWORD(v347), (uint64_t)v357, v308, 0, 0);
                    v277 = v345;
                  }
                }
                goto LABEL_456;
              }
LABEL_349:
              if (v141)
                sub_1ACB683F4((uint64_t)v161, 94, v343, v370, v193, v135, v136, v137);
              else
                sub_1ACC08D80((uint64_t)v17, v371, v193);
              sub_1ACC08D28((uint64_t)v161, 13, v193, v226, v227, v228, v229, v230);
              goto LABEL_353;
            }
          }
          else
          {
            sub_1ACBFF554((uint64_t)v161, 134, v343, v338, v160, v135, v136, v137);
            sub_1ACBCB640((uint64_t)v161, 28, v369, v207, v338, 0, v224, v225);
          }
          v141 = v379;
          v159 = v381;
          v193 = HIDWORD(v347);
        }
      }
    }
    v210 = v378;
    if (!v159)
      goto LABEL_353;
    goto LABEL_349;
  }
  v58 = 0;
  v371 = 0;
  v59 = 0;
  v360 = 0;
  v370 = -1;
  v60 = v383;
  v61 = v379;
  while (2)
  {
    v91 = &a3[6 * v58];
    v94 = (_BYTE *)*((_QWORD *)v91 + 2);
    v93 = v91 + 4;
    v92 = v94;
    if (v94)
    {
      v95 = *v92;
      if (*v92)
      {
        v96 = 0;
        v97 = v92 + 1;
        do
        {
          v96 += byte_1ACCB6333[v95];
          v98 = *v97++;
          v95 = v98;
        }
        while (v98);
        v99 = v93 - 1;
        if (!v61)
        {
LABEL_146:
          v100 = v59;
          v101 = v99;
          v102 = sub_1ACC0F790((uint64_t)v386, *v99, (uint64_t)v99, (uint64_t)v52, v53, v54, v55, v56);
          v99 = v101;
          v17 = v361;
          v59 = v100;
          v61 = v379;
          v60 = v383;
          if (v102)
          {
            v8 = (unsigned __int8 *)v358;
            v10 = v366;
            a3 = (unsigned int *)v374;
            goto LABEL_472;
          }
        }
      }
      else
      {
        v96 = 0;
        v99 = v93 - 1;
        if (!v61)
          goto LABEL_146;
      }
    }
    else
    {
      v96 = 0;
      v99 = v93 - 1;
      if (!v61)
        goto LABEL_146;
    }
    if (*((__int16 *)v24 + 27) >= 1)
    {
      v103 = 0;
      v104 = v24[1];
      do
      {
        if (*(unsigned __int8 *)(v104 + 16 * v103 + 11) == v96)
        {
          for (j = 0; ; ++j)
          {
            v106 = *(unsigned __int8 *)(*(_QWORD *)(v104 + 16 * v103) + j);
            v107 = *(unsigned __int8 *)(*v93 + j);
            if ((_DWORD)v106 == (_DWORD)v107)
            {
              if (!*(_BYTE *)(*(_QWORD *)(v104 + 16 * v103) + j))
              {
                if ((_DWORD)v103 == *((__int16 *)v24 + 26))
                {
                  v371 = (unsigned __int8 *)*v99;
                  v59 = 1;
                  v370 = v58;
                  a3 = (unsigned int *)v374;
                }
                else
                {
                  v120 = *(_WORD *)(v104 + 16 * v103 + 14);
                  a3 = (unsigned int *)v374;
                  if (v60 && (v120 & 1) != 0)
                  {
                    v360 = 1;
                  }
                  else if ((v120 & 0x60) != 0)
                  {
                    sub_1ACBCB308((uint64_t)v17, "cannot UPDATE generated column \"%s\"", (uint64_t)v99, (uint64_t)v52, v53, v54, v55, v56, *(_QWORD *)(v104 + 16 * v103));
                    goto LABEL_189;
                  }
                }
                *((_DWORD *)v49 + v103) = v58;
                v52 = *(const char **)(v104 + 16 * v103);
                goto LABEL_180;
              }
            }
            else if (byte_1ACCB6333[v106] != byte_1ACCB6333[v107])
            {
              break;
            }
          }
        }
        ++v103;
      }
      while (v103 != *((unsigned __int16 *)v24 + 27));
    }
    a3 = (unsigned int *)v374;
    if (v60)
    {
LABEL_188:
      sub_1ACBCB308((uint64_t)v17, "no such column: %s", (uint64_t)v99, (uint64_t)v52, v53, v54, v55, v56, *v93);
      *((_BYTE *)v17 + 29) = 1;
      goto LABEL_189;
    }
    v108 = (_BYTE *)*v93;
    for (k = "_ROWID_"; ; ++k)
    {
      v110 = *v108;
      v111 = *(unsigned __int8 *)k;
      if ((_DWORD)v110 == (_DWORD)v111)
        break;
      if (byte_1ACCB6333[v110] != byte_1ACCB6333[v111])
      {
        v112 = (_BYTE *)*v93;
        for (m = "ROWID"; ; ++m)
        {
          v114 = *v112;
          v115 = *(unsigned __int8 *)m;
          if ((_DWORD)v114 == (_DWORD)v115)
          {
            if (!*v112)
              goto LABEL_174;
          }
          else if (byte_1ACCB6333[v114] != byte_1ACCB6333[v115])
          {
            v116 = (_BYTE *)*v93;
            for (n = "OID"; ; ++n)
            {
              v118 = *v116;
              v119 = *(unsigned __int8 *)n;
              if ((_DWORD)v118 == (_DWORD)v119)
              {
                if (!*v116)
                  goto LABEL_174;
              }
              else if (byte_1ACCB6333[v118] != byte_1ACCB6333[v119])
              {
                goto LABEL_188;
              }
              ++v116;
            }
          }
          ++v112;
        }
      }
LABEL_161:
      ++v108;
    }
    if (*v108)
      goto LABEL_161;
LABEL_174:
    v371 = (unsigned __int8 *)*v99;
    LODWORD(v103) = -1;
    v59 = 1;
    v370 = v58;
    v52 = "ROWID";
LABEL_180:
    v121 = *v17;
    v122 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, uint64_t))(*v17 + 528);
    if (!v122 || *(_BYTE *)(v121 + 197) || *((_BYTE *)v17 + 302))
    {
LABEL_136:
      if (++v58 >= (int)*a3)
        goto LABEL_77;
      continue;
    }
    break;
  }
  v123 = v59;
  v124 = v122(*(_QWORD *)(v121 + 536), 23, *v24, v52, *(_QWORD *)(*(_QWORD *)(v367 + 32) + 32 * v36), v17[46]);
  if (v124 == 1)
  {
    v214 = "not authorized";
    v215 = 23;
  }
  else
  {
    if ((v124 & 0xFFFFFFFD) == 0)
    {
      if (v124 == 2)
        *((_DWORD *)v49 + (int)v103) = -1;
      v60 = v383;
      v61 = v379;
      v59 = v123;
      goto LABEL_136;
    }
    v215 = 1;
    v214 = "authorizer malfunction";
  }
  sub_1ACBCB308((uint64_t)v17, v214, v125, (uint64_t)v52, v53, v54, v55, v56, v327);
  *((_DWORD *)v17 + 6) = v215;
LABEL_189:
  v8 = (unsigned __int8 *)v358;
  v10 = v366;
LABEL_472:
  v13 = (_QWORD *)v367;
  sub_1ACBE0F9C((_QWORD *)v367, v49);
LABEL_473:
  v9 = v365;
  v12 = v372;
LABEL_2:
  result = sub_1ACB7E8B0(v13, (_QWORD *)v12);
  if (a3)
    result = sub_1ACC010B0(v13, a3);
  if (v10)
    result = sub_1ACBF8348(v13, v10);
  if (v9)
    result = sub_1ACC010B0(v13, v9);
  if (v8)
    return sub_1ACBF8348(v13, v8);
  return result;
}

_QWORD *sub_1ACBAA7B4(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned __int8 *i;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  _BYTE *v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _BYTE *v66;
  unsigned __int8 *j;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  BOOL v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int16x8_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char *v172;
  int v173;
  uint64_t v174;
  _QWORD *k;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char v198;
  __int16 v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t **v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  _BYTE *v211;
  int v212;
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned int v217;
  unsigned int v218;
  _BYTE *v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  unsigned int v231[4];

  v8 = (unsigned __int8 *)a5;
  *(_QWORD *)v231 = 0;
  v230 = 0;
  v228 = 0u;
  v229 = 0u;
  v227 = 0u;
  v12 = *(_QWORD *)a1;
  if (*((_DWORD *)a1 + 12))
    goto LABEL_2;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v12 + 32);
    v18 = (uint64_t *)(v17 + 24);
    v19 = 0xFFFFFFFF00000000;
    do
    {
      v20 = *v18;
      v18 += 4;
      v19 += 0x100000000;
    }
    while (v20 != v16);
    v21 = (_BYTE **)(v17 + (v19 >> 27));
  }
  else
  {
    v21 = (_BYTE **)(a2 + 16);
  }
  v28 = (_QWORD *)sub_1ACB8D488((uint64_t)a1, 0, *(char **)(a2 + 24), *v21, a5, a6, a7, a8);
  v29 = *(_QWORD *)(a2 + 40);
  if (v29)
  {
    v30 = *(_QWORD **)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 816) || (v31 = *(_DWORD *)(v29 + 44) - 1, (*(_DWORD *)(v29 + 44) = v31) == 0))
      sub_1ACC00BE8(v30, (_QWORD *)v29);
  }
  *(_QWORD *)(a2 + 40) = v28;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (!v28)
    goto LABEL_2;
  ++*((_DWORD *)v28 + 11);
  if ((*(_WORD *)(a2 + 69) & 2) == 0)
    goto LABEL_32;
  v32 = v28[2];
  if (!v32)
  {
LABEL_31:
    sub_1ACBCB308((uint64_t)a1, "no such index: %s", v22, v23, v24, v25, v26, v27, *(_QWORD *)(a2 + 96));
    v13 = 0;
    a1[29] = 1;
    goto LABEL_3;
  }
LABEL_24:
  v33 = *(_BYTE **)v32;
  for (i = *(unsigned __int8 **)(a2 + 96); ; ++i)
  {
    v35 = *v33;
    v36 = *i;
    if ((_DWORD)v35 == (_DWORD)v36)
      break;
    if (byte_1ACCB6333[v35] != byte_1ACCB6333[v36])
    {
      v32 = *(_QWORD *)(v32 + 40);
      if (!v32)
        goto LABEL_31;
      goto LABEL_24;
    }
LABEL_26:
    ++v33;
  }
  if (*v33)
    goto LABEL_26;
  *(_QWORD *)(a2 + 104) = v32;
LABEL_32:
  if (!v28[11] && ((v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56)) == 0 || !*(_QWORD *)(v43 + 64))
    || a1[221])
  {
    v39 = (char *)v28 + 63;
    v38 = *((unsigned __int8 *)v28 + 63);
    v40 = v38 == 2;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x40) == 0 || v38)
      goto LABEL_54;
LABEL_40:
    v44 = v28[12];
    v45 = (unsigned __int8 *)*v28;
    v46 = *(_QWORD *)(v44 + 96);
    if (v46)
    {
      v47 = *v45;
      if (*v45)
      {
        v48 = 0;
        v49 = v45 + 1;
        do
        {
          v48 = -1640531535 * (v48 + byte_1ACCB6333[v47]);
          v50 = *v49++;
          v47 = v50;
        }
        while (v50);
      }
      else
      {
        v48 = 0;
      }
      v65 = (_DWORD *)(v46 + 16 * (v48 % *(_DWORD *)(v44 + 80)));
      v51 = (uint64_t *)(v65 + 2);
      v52 = *v65;
      if (v52)
      {
        while (1)
        {
LABEL_65:
          v51 = (uint64_t *)*v51;
          v66 = (_BYTE *)v51[3];
          for (j = (unsigned __int8 *)*v28; ; ++j)
          {
            v68 = *v66;
            v69 = *j;
            if ((_DWORD)v68 != (_DWORD)v69)
              break;
            if (!*v66)
              goto LABEL_49;
LABEL_67:
            ++v66;
          }
          if (byte_1ACCB6333[v68] == byte_1ACCB6333[v69])
            goto LABEL_67;
          if (!--v52)
          {
            v51 = &qword_1EECAD260;
            goto LABEL_49;
          }
        }
      }
    }
    else
    {
      v51 = (uint64_t *)(v44 + 88);
      v52 = *(_DWORD *)(v44 + 84);
      if (v52)
        goto LABEL_65;
    }
    v51 = &qword_1EECAD260;
LABEL_49:
    if (v51[2] || v28[9])
    {
      v225 = 1;
      v41 = 0;
      if (!v40)
        goto LABEL_52;
    }
    else
    {
LABEL_54:
      v225 = 0;
      v41 = 0;
      if (!v40)
        goto LABEL_52;
    }
    v42 = 1;
    if (v38 == 1)
      goto LABEL_57;
    goto LABEL_56;
  }
  v37 = sub_1ACC2E0D4(a1, (unsigned __int8 **)v28, 128, 0, 0, v25, v26, v27);
  v39 = (char *)v28 + 63;
  v38 = *((unsigned __int8 *)v28 + 63);
  v40 = v38 == 2;
  if (!v37)
    goto LABEL_40;
  v41 = (uint64_t)v37;
  v225 = 1;
  if (v38 == 2)
  {
    v42 = 1;
    goto LABEL_56;
  }
LABEL_52:
  a3 = sub_1ACC2D5C8((uint64_t *)a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v8, (uint64_t)"DELETE", v26, v27);
  v42 = 0;
  a4 = 0;
  v8 = 0;
  if (*v39 == 1)
  {
LABEL_57:
    if (!sub_1ACC114E0((uint64_t)a1, (uint64_t)v28, v22, v23, v24, v25, v26, v27))
      goto LABEL_58;
    goto LABEL_2;
  }
LABEL_56:
  if (*((__int16 *)v28 + 27) <= 0)
    goto LABEL_57;
LABEL_58:
  if (sub_1ACC2DB0C((uint64_t)a1, (uint64_t)v28, v41, v23, v24, v25, v26, v27))
  {
LABEL_2:
    v13 = 0;
    goto LABEL_3;
  }
  v221 = v42;
  v220 = (uint64_t)a4;
  v60 = v28[12];
  v61 = *(_QWORD *)(v12 + 32);
  if (v60)
  {
    v62 = (uint64_t *)(v61 + 24);
    LODWORD(v63) = -1;
    do
    {
      v64 = *v62;
      v62 += 4;
      v63 = (v63 + 1);
    }
    while (v64 != v60);
  }
  else
  {
    v63 = 4294934528;
  }
  v70 = *(_QWORD *)a1;
  v71 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
  if (!v71 || *(_BYTE *)(v70 + 197) || a1[302])
  {
    v212 = 0;
    goto LABEL_78;
  }
  v113 = v71(*(_QWORD *)(v70 + 536), 9, *v28, 0, *(_QWORD *)(v61 + 32 * (int)v63), *((_QWORD *)a1 + 46));
  if (v113 == 1)
  {
    v114 = 23;
    v115 = "not authorized";
    goto LABEL_159;
  }
  if ((v113 & 0xFFFFFFFD) == 0)
  {
    v212 = v113;
LABEL_78:
    v211 = v39;
    v72 = *((_DWORD *)a1 + 13);
    v73 = v72 + 1;
    *((_DWORD *)a1 + 13) = v72 + 1;
    v218 = v72;
    *(_DWORD *)(a2 + 72) = v72;
    v75 = (uint64_t)(v28 + 2);
    v74 = v28[2];
    if (v74)
    {
      v76 = 0;
      do
      {
        ++v76;
        v74 = *(_QWORD *)(v74 + 40);
      }
      while (v74);
      *((_DWORD *)a1 + 13) = v73 + v76;
    }
    else
    {
      v76 = 0;
    }
    v209 = v73;
    if (v221)
    {
      v214 = *((_QWORD *)a1 + 46);
      *((_QWORD *)a1 + 46) = *v28;
      v219 = a1;
    }
    else
    {
      v214 = 0;
      v219 = 0;
    }
    v224 = *((_QWORD *)a1 + 2);
    if (!v224)
    {
      if (!*((_QWORD *)a1 + 21) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
        a1[35] = 1;
      v224 = sub_1ACBCB4C8((uint64_t *)a1, v53, v54, v55, v56, v57, v58, v59);
      if (!v224)
        goto LABEL_103;
    }
    v207 = v41;
    v215 = (uint64_t)v8;
    if (!a1[30])
      *(_WORD *)(v224 + 268) |= 0x10u;
    if (*((_QWORD *)a1 + 21))
      v77 = *((_QWORD *)a1 + 21);
    else
      v77 = (uint64_t)a1;
    v78 = *(_DWORD *)(v77 + 124);
    v79 = 1 << v63;
    if ((v78 & (1 << v63)) == 0)
    {
      *(_DWORD *)(v77 + 124) = v78 | v79;
      if ((_DWORD)v63 == 1)
        sub_1ACBE9418(v77);
    }
    *(_DWORD *)(v77 + 120) |= v79;
    *(_BYTE *)(v77 + 32) |= v225;
    if (v221)
    {
      sub_1ACC2DC70((uint64_t *)a1, (uint64_t)v28, a3, v220, v215, v218);
      v220 = 0;
      v8 = 0;
      v231[0] = v218;
      v231[1] = v218;
    }
    else
    {
      v8 = (unsigned __int8 *)v215;
    }
    v230 = 0;
    v228 = 0u;
    v229 = 0u;
    *(_QWORD *)&v227 = a1;
    *((_QWORD *)&v227 + 1) = a2;
    if (sub_1ACC0F790((uint64_t)&v227, (uint64_t)a3, v54, v55, v56, v57, v58, v59))
    {
LABEL_103:
      v13 = 0;
LABEL_104:
      v84 = v219;
      a4 = (_QWORD *)v220;
LABEL_105:
      if (v84)
        *((_QWORD *)v84 + 46) = v214;
      goto LABEL_3;
    }
    if ((*(_BYTE *)(v12 + 52) & 1) == 0 || a1[30] || *((_QWORD *)a1 + 22) || a1[219])
    {
      v208 = 0;
    }
    else
    {
      v173 = *((_DWORD *)a1 + 14);
      v174 = (v173 + 1);
      *((_DWORD *)a1 + 14) = v174;
      v208 = v173 + 1;
      sub_1ACBFF554(v224, 71, 0, v174, v80, v81, v82, v83);
    }
    if (v212)
      v85 = 0;
    else
      v85 = a3 == 0;
    v86 = v225;
    if (!v85)
      v86 = 1;
    if ((v86 & 1) == 0 && *v211 != 1 && !*(_QWORD *)(v12 + 360))
    {
      sub_1ACC08EA0((uint64_t)a1, v63, *((_DWORD *)v28 + 10), 1, *v28);
      if ((v28[6] & 0x80) == 0)
      {
        if (v208)
          v159 = v208;
        else
          v159 = 0xFFFFFFFFLL;
        sub_1ACBA86CC((uint64_t *)v224, 145, *((unsigned int *)v28 + 10), v63, v159, *v28, 0xFFFFFFFFLL, v158);
      }
      v160 = *(_QWORD *)v75;
      if (v160)
      {
        if (v208)
          v161 = v208;
        else
          v161 = 0xFFFFFFFFLL;
        do
        {
          while ((*(_WORD *)(v160 + 99) & 3) != 2 || (v28[6] & 0x80) == 0)
          {
            sub_1ACBFF554(v224, 145, *(unsigned int *)(v160 + 88), v63, v155, v156, v157, v158);
            v160 = *(_QWORD *)(v160 + 40);
            if (!v160)
              goto LABEL_177;
          }
          sub_1ACB683F4(v224, 145, *(unsigned int *)(v160 + 88), v63, v161, v156, v157, v158);
          v160 = *(_QWORD *)(v160 + 40);
        }
        while (v160);
      }
LABEL_177:
      v13 = 0;
      v84 = v219;
      a4 = (_QWORD *)v220;
      v112 = v208;
      goto LABEL_221;
    }
    if (BYTE8(v229) & 0x40 | v225)
      v87 = 20;
    else
      v87 = 28;
    if ((v28[6] & 0x80) != 0)
    {
      do
      {
        v91 = *(_QWORD *)v75;
        v92 = *(_WORD *)(*(_QWORD *)v75 + 99) & 3;
        v75 = *(_QWORD *)v75 + 40;
      }
      while (v92 != 2);
      v93 = *(__int16 *)(v91 + 94);
      v213 = *(_WORD *)(v91 + 94);
      v94 = *((unsigned int *)a1 + 13);
      v95 = *((_DWORD *)a1 + 14);
      LODWORD(v206) = v95 + 1;
      HIDWORD(v206) = v94;
      *((_DWORD *)a1 + 13) = v94 + 1;
      *((_DWORD *)a1 + 14) = v95 + v93;
      v90 = v224;
      v204 = sub_1ACBFF554(v224, 118, v94, v93, v80, v81, v82, v83);
      v226 = v91;
      sub_1ACC08ECC((uint64_t)a1, v91);
      v203 = 0;
    }
    else
    {
      v88 = *((_DWORD *)a1 + 14);
      v89 = (v88 + 1);
      *((_DWORD *)a1 + 14) = v89;
      v90 = v224;
      v203 = v88 + 1;
      sub_1ACBFF554(v224, 75, 0, v89, v80, v81, v82, v83);
      v226 = 0;
      v206 = 0;
      v204 = 0;
      v213 = 1;
    }
    v96 = sub_1ACB78E3C((uint64_t)a1, (int *)a2, (uint64_t)a3, 0, 0, 0, v87, v209);
    v13 = (uint64_t **)v96;
    if (!v96)
      goto LABEL_104;
    v103 = *(_QWORD *)(v96 + 40);
    v210 = *(unsigned __int8 *)(v96 + 66);
    if (v210 != 1)
    {
      v104 = (_BYTE *)*((_QWORD *)a1 + 21);
      if (!v104)
        v104 = a1;
      v104[32] = 1;
    }
    if ((*(_BYTE *)(v96 + 68) & 1) != 0)
    {
      v105 = v90;
      v224 = v90;
      v106 = v103;
      sub_1ACC08D28(v105, 143, v218, v97, v98, v99, v100, v101);
      v103 = v106;
      v90 = v224;
    }
    v200 = v103;
    v201 = HIDWORD(v103);
    if (v208)
      sub_1ACBFF554(v90, 86, v208, 1, v98, v99, v100, v101);
    v107 = v226;
    v202 = v13;
    if (v226)
    {
      v216 = v8;
      v108 = v213;
      if ((int)v108 >= 1)
      {
        v109 = v90;
        v110 = 0;
        do
        {
          v111 = v108;
          *(double *)v102.i64 = sub_1ACC0B288(v109, (uint64_t)v28, v218, *(__int16 *)(*(_QWORD *)(v107 + 8) + 2 * v110), (v206 + v110), v99, v100, v101, v102);
          v108 = v111;
          v107 = v226;
          ++v110;
        }
        while (v111 != v110);
      }
      if (v210)
      {
        v205 = v206;
        v90 = v224;
        v112 = v208;
        v8 = v216;
LABEL_146:
        v121 = (uint64_t **)sub_1ACBE1124(v12, v76 + 2);
        v13 = v121;
        if (!v121)
        {
          sub_1ACB7D270(v202, v122, v123, v124, v125, v126, v127, v128);
          goto LABEL_104;
        }
        v129 = v76 + 1;
        memset(v121, 1, v129);
        *((_BYTE *)v13 + v129) = 0;
        if ((v200 & 0x80000000) == 0)
          *((_BYTE *)v13 + (int)(v200 - v218)) = 0;
        v136 = v211;
        if ((v200 & 0x8000000000000000) == 0)
          *((_BYTE *)v13 + (int)(v201 - v218)) = 0;
        if (v204)
          sub_1ACB7A700(v90, v204);
        v217 = *((_DWORD *)a1 + 17) - 1;
        *((_DWORD *)a1 + 17) = v217;
        if ((v221 & 1) == 0)
        {
          if (v210 == 2)
          {
            v222 = sub_1ACC08CD4(v90, 15, v130, v131, v132, v133, v134, v135);
            sub_1ACB956A8((uint64_t)a1, (uint64_t)v28, 113, 8, v218, v13, &v231[1], v231);
            v137 = *(_DWORD *)(v90 + 144);
            if (v137 - 1 == v222)
            {
              *(_DWORD *)(v90 + 144) = v222;
            }
            else
            {
              if (*(_BYTE *)(*(_QWORD *)v90 + 103))
                v172 = &byte_1EECAD280;
              else
                v172 = (char *)(*(_QWORD *)(v90 + 136) + 40 * v222);
              *((_DWORD *)v172 + 2) = v137;
            }
          }
          else
          {
            sub_1ACB956A8((uint64_t)a1, (uint64_t)v28, 113, 8, v218, v13, &v231[1], v231);
          }
        }
        if (*v211 == 1)
        {
          v223 = 0;
          v171 = 0;
          goto LABEL_200;
        }
        if (*((_BYTE *)v13 + (int)(v231[1] - v218)))
          sub_1ACBCB640(v90, 28, v231[1], v217, v205, v213, v134, v135);
        v171 = 0;
        v223 = 0;
LABEL_199:
        if (*v136 != 1)
        {
          HIBYTE(v199) = v210;
          LOBYTE(v199) = 11;
          sub_1ACB9823C(a1, v28, v207, v231[1], v231[0], v205, v213, a1[30] == 0, v199);
          v84 = v219;
LABEL_212:
          if ((v171 & 1) != 0)
          {
            if (v226)
              sub_1ACBFF554(v224, 39, HIDWORD(v206), v223 + 1, v183, v184, v185, v186);
            else
              sub_1ACC08E48(v224, v223, HIDWORD(v206), v182, v183, v184, v185, v186);
            if (*(_BYTE *)(*(_QWORD *)v224 + 103))
              v197 = &byte_1EECAD280;
            else
              v197 = (char *)(*(_QWORD *)(v224 + 136) + 40 * (int)v223);
            a4 = (_QWORD *)v220;
            *((_DWORD *)v197 + 2) = *(_DWORD *)(v224 + 144);
          }
          else
          {
            sub_1ACC0A574(v224, v217);
            sub_1ACB7D270(v202, v190, v191, v192, v193, v194, v195, v196);
            a4 = (_QWORD *)v220;
          }
LABEL_221:
          if (!a1[30] && !*((_QWORD *)a1 + 22) && *((_QWORD *)a1 + 20))
            sub_1ACC32090((uint64_t *)a1, v152, v153, v154, v155, v156, v157, v158);
          if ((_DWORD)v112)
            sub_1ACC2DFB4(v224, v112, "rows deleted", v154, v155, v156, v157, v158);
          goto LABEL_105;
        }
LABEL_200:
        for (k = (_QWORD *)v28[10]; k; k = (_QWORD *)k[5])
        {
          if (*k == v12)
            break;
        }
        sub_1ACC2DEBC((uint64_t *)a1, (uint64_t)v28);
        v181 = (_BYTE *)*((_QWORD *)a1 + 21);
        if (!v181)
          v181 = a1;
        v181[33] = 1;
        if (v210 == 1)
        {
          sub_1ACC08D28(v224, 122, v218, v176, v177, v178, v179, v180);
          if (!*((_QWORD *)a1 + 21))
            a1[32] = 0;
        }
        sub_1ACBA86CC((uint64_t *)v224, 7, 0, 1, v205, (uint64_t)k, 4294967285, v180);
        v187 = *(_DWORD *)(v224 + 144);
        v188 = __OFSUB__(v187, 1);
        v189 = v187 - 1;
        v84 = v219;
        if (v189 < 0 == v188)
          *(_WORD *)(*(_QWORD *)(v224 + 136) + 40 * v189 + 2) = 2;
        v112 = v208;
        goto LABEL_212;
      }
      v138 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v138;
      v139 = *(_QWORD *)(v107 + 32);
      v90 = v224;
      v8 = v216;
      if (!v139)
      {
        v140 = v108;
        v141 = sub_1ACC27860(*(_QWORD *)a1, v226);
        v108 = v140;
        v8 = v216;
        v139 = v141;
      }
      v142 = v108;
      sub_1ACBA86CC((uint64_t *)v224, 97, v206, v108, v138, v139, v108, v101);
      v205 = v138;
      sub_1ACBCB640(v224, 138, HIDWORD(v206), v138, v206, v142, v143, v144);
      v213 = 0;
      v136 = v211;
    }
    else
    {
      v116 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v116;
      sub_1ACC0B288(v90, (uint64_t)v28, v218, 0xFFFFFFFFLL, v116, v99, v100, v101, v102);
      v205 = v116;
      if (v210)
      {
        v112 = v208;
        goto LABEL_146;
      }
      sub_1ACBFF554(v90, 156, v203, v116, v117, v118, v119, v120);
      v213 = 1;
      v136 = v211;
    }
    v112 = v208;
    sub_1ACB7D270(v13, v145, v146, v147, v148, v149, v150, v151);
    if ((v221 & 1) == 0)
      sub_1ACB956A8((uint64_t)a1, (uint64_t)v28, 113, 8, v218, 0, &v231[1], v231);
    if (v226)
    {
      v223 = sub_1ACC08D28(v90, 36, HIDWORD(v206), v162, v163, v164, v165, v166);
      if (*v136 == 1)
        sub_1ACB683F4(v90, 94, HIDWORD(v206), 0, v205, v168, v169, v170);
      else
        sub_1ACBFF554(v90, 134, HIDWORD(v206), v205, v167, v168, v169, v170);
      v13 = 0;
      v217 = 0;
      v171 = 1;
      v112 = v208;
    }
    else
    {
      v223 = sub_1ACB683F4(v90, 46, v203, 0, v205, v164, v165, v166);
      v13 = 0;
      v217 = 0;
      v171 = 1;
    }
    goto LABEL_199;
  }
  v114 = 1;
  v115 = "authorizer malfunction";
LABEL_159:
  sub_1ACBCB308((uint64_t)a1, v115, v54, v55, v56, v57, v58, v59, v198);
  v13 = 0;
  *((_DWORD *)a1 + 6) = v114;
LABEL_3:
  result = sub_1ACB7E8B0((_QWORD *)v12, (_QWORD *)a2);
  if (a3)
    result = sub_1ACBF8348((_QWORD *)v12, a3);
  if (a4)
    result = sub_1ACC010B0((_QWORD *)v12, a4);
  if (v8)
    result = sub_1ACBF8348((_QWORD *)v12, v8);
  if (v13)
    return sub_1ACBF0674((_QWORD *)v12, v13);
  return result;
}

uint64_t sub_1ACBAB64C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  __int16 v27;
  _OWORD v28[2];
  _BYTE v29[32];
  __int128 v30;

  v3 = *(uint64_t **)(a1 + 40);
  v4 = *v3;
  v5 = (int *)v3[1];
  v6 = v3[2];
  switch(*(_BYTE *)a2)
  {
    case 0xA7:
    case 0xA9:
    case 0xB3:
      if (!v5)
        return 0;
      v7 = *v5;
      if (*v5 < 1)
        return 0;
      v8 = v5 + 18;
      while (1)
      {
        v9 = *v8;
        v8 += 26;
        if (*(_DWORD *)(a2 + 44) == v9)
          break;
        if (!--v7)
          return 0;
      }
      sub_1ACC2D2A4((uint64_t *)v4, v6, (unsigned __int8 *)a2);
      return 0;
    case 0xA8:
      if ((*((_BYTE *)v3 + 42) & 2) != 0 || *(_DWORD *)(a1 + 32) != *(unsigned __int8 *)(a2 + 2))
        return 0;
      v10 = *(_DWORD *)(v6 + 48);
      if (v10 < 1 || (v11 = *(unsigned __int8 ***)(v6 + 40), v12 = *v11, *v11 == (unsigned __int8 *)a2))
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        v14 = v11 + 3;
        do
        {
          v15 = sub_1ACC0ABAC(0, v12, (unsigned __int8 *)a2, 0xFFFFFFFFLL);
          v10 = *(_DWORD *)(v6 + 48);
          if (!v15)
            break;
          if ((int)++v13 >= v10)
            break;
          v16 = *v14;
          v14 += 3;
          v12 = v16;
        }
        while (v16 != (unsigned __int8 *)a2);
      }
      if ((int)v13 >= v10)
      {
        v20 = *(_QWORD *)v4;
        v21 = *(unsigned __int8 *)(*(_QWORD *)v4 + 100);
        LODWORD(v28[0]) = 0;
        v22 = sub_1ACB8ECA0(v20, *(_QWORD **)(v6 + 40), (int *)(v6 + 48), v28);
        *(_QWORD *)(v6 + 40) = v22;
        v13 = v28[0];
        if ((v28[0] & 0x80000000) == 0)
        {
          v23 = v22;
          *(_QWORD *)(v22 + 24 * LODWORD(v28[0])) = a2;
          v24 = *(int **)(a2 + 32);
          if (v24)
            v25 = *v24;
          else
            v25 = 0;
          *(_QWORD *)(v22 + 24 * v13 + 8) = sub_1ACB5B284(*(_QWORD *)v4, *(char **)(a2 + 8), v25, v21, 0);
          if ((*(_BYTE *)(a2 + 4) & 4) != 0)
          {
            v26 = *(_DWORD *)(v4 + 52);
            *(_DWORD *)(v4 + 52) = v26 + 1;
          }
          else
          {
            v26 = -1;
          }
          *(_DWORD *)(v23 + 24 * v13 + 16) = v26;
        }
      }
      *(_WORD *)(a2 + 52) = v13;
      *(_QWORD *)(a2 + 64) = v6;
      return 1;
    default:
      if ((*((_BYTE *)v3 + 42) & 2) == 0)
        return 0;
      v17 = *(_QWORD *)(v4 + 96);
      if (!v17)
        return 0;
      break;
  }
  while (1)
  {
    v18 = *(unsigned int *)(v17 + 8);
    if ((v18 & 0x80000000) == 0
      && !sub_1ACC0ABAC(0, (unsigned __int8 *)a2, *(unsigned __int8 **)v17, v18))
    {
      break;
    }
    v17 = *(_QWORD *)(v17 + 24);
    if (!v17)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 7) & 3) != 0 || *v5 < 1 || v5[18] != *(_DWORD *)(v17 + 8) || *(_QWORD *)(a2 + 64))
    return 0;
  if (*(_DWORD *)(v4 + 48))
    return 2;
  *(_OWORD *)&v29[16] = 0u;
  v30 = 0u;
  *(_OWORD *)v29 = 0u;
  memset(v28, 0, sizeof(v28));
  LOBYTE(v28[0]) = -87;
  *(_QWORD *)&v29[12] = *(_QWORD *)(v17 + 12);
  sub_1ACC2D2A4((uint64_t *)v4, v6, (unsigned __int8 *)v28);
  if (*(_DWORD *)(v4 + 48))
    return 2;
  v27 = *(_WORD *)&v29[20];
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 24 * *(__int16 *)&v29[20] + 8) = a2;
  *(_QWORD *)(a2 + 64) = v6;
  *(_WORD *)(a2 + 52) = v27;
  return 1;
}

void sub_1ACBAB8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v8 = *(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 48);
  if (v8 && !*(_DWORD *)(a1 + 48))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(unsigned int *)(a2 + 12);
    v13 = (v8 + v12 - 1);
    v14 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v14)
    {
      sub_1ACBFF5AC(*(_QWORD *)(a1 + 16), 75, 0, v12, v13, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v14 + 1;
      v15 = *(_QWORD *)(v11 + 136) + 40 * v14;
      *(_QWORD *)v15 = 75;
      *(_DWORD *)(v15 + 8) = v12;
      *(_DWORD *)(v15 + 12) = v13;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 16) = 0;
    }
    if (*(int *)(a2 + 48) >= 1)
    {
      v16 = 0;
      v17 = (unsigned int *)(*(_QWORD *)(a2 + 40) + 16);
      do
      {
        if ((*v17 & 0x80000000) == 0)
        {
          v18 = *(_QWORD *)(*((_QWORD *)v17 - 2) + 32);
          if (v18 && *(_DWORD *)v18 == 1)
          {
            v25 = sub_1ACC092C0(*(_QWORD *)a1, 1, 1);
            if (v25)
            {
              v26 = sub_1ACB78620(a1, *(unsigned __int8 **)(v18 + 8), v19, v20, v21, v22, v23, v24);
              if (!v26)
                v26 = *(_QWORD *)(*(_QWORD *)a1 + 16);
              *(_QWORD *)(v25 + 32) = v26;
              **(_BYTE **)(v25 + 24) = *(_BYTE *)(v18 + 24);
            }
            v17[1] = sub_1ACBA86CC((uint64_t *)v11, 118, *v17, 0, 0, v25, 4294967288, v24);
            sub_1ACC0BE9C((uint64_t *)a1, 0, "USE TEMP B-TREE FOR %s(DISTINCT)", v27, v28, v29, v30, v31, *(_QWORD *)(*((_QWORD *)v17 - 1) + 56));
          }
          else
          {
            sub_1ACBCB308(a1, "DISTINCT aggregates must have exactly one argument", a3, v12, v13, a6, a7, a8, v32);
            *v17 = -1;
          }
        }
        ++v16;
        v17 += 6;
      }
      while (v16 < *(_DWORD *)(a2 + 48));
    }
  }
}

uint64_t sub_1ACBABAA8(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned __int8 **v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned __int8 **v50;
  unsigned __int8 *v51;
  int v52;
  char *v53;
  _DWORD *v55;
  unsigned int v57;
  unsigned int v58;

  if (*(_DWORD *)(result + 48))
    return result;
  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)(result + 16);
  *(_BYTE *)a3 = 1;
  if (*(int *)(a3 + 48) < 1)
  {
LABEL_66:
    v47 = 0;
    if (a2)
    {
      v58 = a2;
      if (*(_DWORD *)(v8 + 36))
        goto LABEL_68;
    }
    goto LABEL_71;
  }
  v57 = a2;
  v58 = 0;
  v11 = 0;
  v12 = *(uint64_t **)(a3 + 40);
  v55 = (_DWORD *)(result + 44);
  do
  {
    v13 = *(_DWORD **)(*v12 + 32);
    if ((*(_BYTE *)(*v12 + 7) & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*v12 + 72) + 72);
      if (*(_DWORD *)(v8 + 36) && v57 && (*(_DWORD *)(v12[1] + 4) & 0x20) != 0)
      {
        v19 = v58;
        if (!v58)
        {
          v19 = *(_DWORD *)(v9 + 56) + 1;
          *(_DWORD *)(v9 + 56) = v19;
        }
        v58 = v19;
        v20 = *(_DWORD *)(v10 + 144);
        if (*(_DWORD *)(v10 + 148) <= v20)
        {
          sub_1ACBFF5AC(v10, 80, v57, v58, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v10 + 144) = v20 + 1;
          v21 = *(_QWORD *)(v10 + 136) + 40 * v20;
          *(_DWORD *)v21 = 80;
          *(_DWORD *)(v21 + 4) = v57;
          *(_DWORD *)(v21 + 8) = v58;
          *(_QWORD *)(v21 + 12) = 0;
          *(_QWORD *)(v21 + 28) = 0;
          *(_QWORD *)(v21 + 20) = 0;
          *(_DWORD *)(v21 + 36) = 0;
        }
      }
      v14 = (*(_DWORD *)(v9 + 68) - 1);
      *(_DWORD *)(v9 + 68) = v14;
      sub_1ACB9F1D0(v9, v18);
      if (!v13)
      {
LABEL_39:
        v15 = 0;
        v29 = v12 + 1;
        v17 = 0;
        if ((*(_BYTE *)(v12[1] + 4) & 0x20) == 0)
        {
          v17 = 0;
          goto LABEL_46;
        }
        goto LABEL_41;
      }
    }
    else
    {
      v14 = 0;
      if (!v13)
        goto LABEL_39;
    }
    v15 = *v13;
    if (*v13 == 1)
    {
      if (*(_BYTE *)(v9 + 31))
      {
        v16 = *(_BYTE *)(v9 + 31) - 1;
        *(_BYTE *)(v9 + 31) = v16;
        v17 = *(unsigned int *)(v9 + 4 * v16 + 224);
      }
      else
      {
        v17 = (*(_DWORD *)(v9 + 56) + 1);
        *(_DWORD *)(v9 + 56) = v17;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v9 + 40);
      v23 = __OFSUB__(v22, v15);
      v24 = v22 - v15;
      if (v24 < 0 != v23)
      {
        v25 = *(_DWORD *)(v9 + 56);
        v17 = (v25 + 1);
        *(_DWORD *)(v9 + 56) = v25 + v15;
      }
      else
      {
        v17 = *(unsigned int *)(v9 + 44);
        *(_DWORD *)(v9 + 40) = v24;
        *(_DWORD *)(v9 + 44) = v17 + v15;
      }
    }
    sub_1ACC0A21C(v9, v13, v17, 0, 1, a6, a7, a8);
    v28 = *((unsigned int *)v12 + 4);
    if ((v28 & 0x80000000) == 0)
    {
      if (!(_DWORD)v14)
      {
        v14 = (*(_DWORD *)(v9 + 68) - 1);
        *(_DWORD *)(v9 + 68) = v14;
      }
      *((_DWORD *)v12 + 4) = sub_1ACC2C898(v9, a4, v28, v14, v13, v17, a7, a8);
    }
    v29 = v12 + 1;
    if ((*(_BYTE *)(v12[1] + 4) & 0x20) != 0)
    {
      if (v15 >= 1)
      {
        v30 = (unsigned __int8 **)(v13 + 2);
        v31 = 1;
        do
        {
          v32 = *v30;
          v30 += 3;
          v33 = sub_1ACB78620(v9, v32, v28, v26, v27, a6, a7, a8);
          if (v33)
            v34 = 0;
          else
            v34 = v31 < v15;
          ++v31;
        }
        while (v34);
        v35 = v33;
        v8 = a3;
        if (v33)
        {
          v36 = v58;
          if (!v58)
          {
LABEL_42:
            if (*(_DWORD *)(v8 + 36))
            {
              v36 = (*(_DWORD *)(v9 + 56) + 1);
              *(_DWORD *)(v9 + 56) = v36;
            }
            else
            {
              v36 = 0;
            }
          }
LABEL_45:
          v58 = v36;
          sub_1ACBA86CC((uint64_t *)v10, 85, v36, 0, 0, v35, 4294967294, a8);
          goto LABEL_46;
        }
      }
LABEL_41:
      v35 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      v36 = v58;
      if (!v58)
        goto LABEL_42;
      goto LABEL_45;
    }
LABEL_46:
    v37 = (*(_DWORD *)(v8 + 12) + v11 + *(_DWORD *)(v8 + 32));
    v38 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v38)
    {
      sub_1ACBFF5AC(v10, 162, 0, v17, v37, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v38 + 1;
      v39 = *(_QWORD *)(v10 + 136) + 40 * v38;
      *(_QWORD *)v39 = 162;
      *(_DWORD *)(v39 + 8) = v17;
      *(_DWORD *)(v39 + 12) = v37;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 16) = 0;
    }
    v40 = *v29;
    result = *(_QWORD *)v10;
    if (*(_BYTE *)(*(_QWORD *)v10 + 103))
    {
      if ((*(_BYTE *)(v40 + 4) & 0x10) != 0)
        result = (uint64_t)sub_1ACBF0674((_QWORD *)result, (_QWORD *)v40);
    }
    else
    {
      v41 = *(_QWORD *)(v10 + 136) + 40 * *(int *)(v10 + 144);
      *(_BYTE *)(v41 - 39) = -7;
      *(_QWORD *)(v41 - 24) = v40;
    }
    v42 = *(_DWORD *)(v10 + 144);
    v23 = __OFSUB__(v42, 1);
    v43 = v42 - 1;
    if (v43 < 0 == v23)
      *(_WORD *)(*(_QWORD *)(v10 + 136) + 40 * v43 + 2) = v15;
    if (v15 != 1)
    {
      if (*(_DWORD *)(v9 + 40) >= v15)
        goto LABEL_62;
      *(_DWORD *)(v9 + 40) = v15;
      v45 = v55;
      goto LABEL_61;
    }
    if ((_DWORD)v17)
    {
      v44 = *(unsigned __int8 *)(v9 + 31);
      if (v44 <= 7)
      {
        *(_BYTE *)(v9 + 31) = v44 + 1;
        v45 = (_DWORD *)(v9 + 4 * v44 + 224);
LABEL_61:
        *v45 = v17;
      }
    }
LABEL_62:
    if ((_DWORD)v14)
    {
      result = *(_QWORD *)(v10 + 24);
      v46 = ~(_DWORD)v14;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) >= 0)
        *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v46) = *(_DWORD *)(v10 + 144);
      else
        result = sub_1ACC0D5D4(result, v10, v46);
    }
    ++v11;
    v12 += 3;
  }
  while (v11 < *(_DWORD *)(v8 + 48));
  a2 = v57;
  if (!v58)
    goto LABEL_66;
LABEL_68:
  v47 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v47)
  {
    result = sub_1ACBFF5AC(v10, 16, v58, 0, 0, a6, a7, a8);
    v47 = result;
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v47 + 1;
    v48 = *(_QWORD *)(v10 + 136) + 40 * v47;
    *(_DWORD *)v48 = 16;
    *(_DWORD *)(v48 + 4) = v58;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
  }
LABEL_71:
  if (*(int *)(v8 + 36) >= 1)
  {
    v49 = 0;
    v50 = (unsigned __int8 **)(*(_QWORD *)(v8 + 24) + 8);
    do
    {
      v51 = *v50;
      v50 += 3;
      result = sub_1ACC08D80(v9, v51, (v49 + *(_DWORD *)(v8 + 12)));
      ++v49;
    }
    while (v49 < *(_DWORD *)(v8 + 36));
  }
  *(_BYTE *)v8 = 0;
  if (v47)
  {
    v52 = *(_DWORD *)(v10 + 144);
    if (v52 - 1 == v47)
    {
      *(_DWORD *)(v10 + 144) = v47;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v10 + 103))
        v53 = &byte_1EECAD280;
      else
        v53 = (char *)(*(_QWORD *)(v10 + 136) + 40 * v47);
      *((_DWORD *)v53 + 2) = v52;
    }
  }
  return result;
}

uint64_t sub_1ACBABFB4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;

  v11 = 0u;
  v12 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  WORD2(v7) = 1;
  *((_QWORD *)&v7 + 1) = *(_QWORD *)(a1 + 24);
  v10[1] = a2;
  v10[2] = a1;
  v10[0] = &v6;
  LOBYTE(v12) = *(_BYTE *)(*((_QWORD *)&v7 + 1) + 100);
  (*(void (**)(_QWORD *))(a2 + 32))(v10);
  if (*(int *)(a1 + 32) >= 1)
    sub_1ACBE0F9C(*(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 40));
  v3 = v7;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v4;
  return HIDWORD(v11);
}

void sub_1ACBAC044(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
  {
    sub_1ACBBE20C(98105);
    sub_1ACBBE20C(97423);
    return;
  }
  v2 = a1[1];
  if (!v2 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    goto LABEL_8;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(uint64_t **)(v3 + 8);
    if (v4)
      goto LABEL_11;
LABEL_8:
    v5 = 0;
    goto LABEL_12;
  }
  v4 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 0);
  if (!v4)
    goto LABEL_8;
LABEL_11:
  v5 = *v4;
LABEL_12:
  v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v6, v5);
  }
  else
  {
    *(_QWORD *)v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 && (v2 = *((_QWORD *)a1 + 1)) != 0 && *(_QWORD *)(v2 + 32))
  {
    v3 = *((_QWORD *)a1 + 2);
    if (*(__int16 *)(v3 + 20) < 0)
      return *(void **)(v3 + 8);
    else
      return sub_1ACBC794C((uint64_t)a1, nBytes);
  }
  else
  {
    sub_1ACBBE20C(98105);
    return 0;
  }
}

uint64_t sub_1ACBAC158(uint64_t result, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  if (!result || (v5 = *(_QWORD *)(result + 8)) == 0 || !*(_QWORD *)(v5 + 32))
  {
    result = sub_1ACBBE20C(98105);
    if (!a2)
      return result;
    v7 = 0;
    v8 = *a3;
    if (*a3)
      goto LABEL_7;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(result + 16);
  if ((*(__int16 *)(v6 + 20) & 0x80000000) == 0)
  {
    result = (uint64_t)sub_1ACBC794C(result, 8);
    v7 = (_QWORD *)result;
    if (a2)
      goto LABEL_6;
LABEL_18:
    if (!v7)
      return result;
    goto LABEL_15;
  }
  v7 = *(_QWORD **)(v6 + 8);
  if (!a2)
    goto LABEL_18;
LABEL_6:
  v8 = *a3;
  if (*a3)
  {
LABEL_7:
    v9 = (0x5555555555555555uLL >> *(_WORD *)(v8 + 20)) & 1;
    goto LABEL_11;
  }
LABEL_10:
  result = sub_1ACBBE20C(97202);
  LODWORD(v9) = 1;
LABEL_11:
  if ((_DWORD)v9)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10)
LABEL_15:
    ++*v7;
  return result;
}

uint64_t sub_1ACBAC224(uint64_t result, int *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;

  if (a2)
  {
    v3 = *a2;
    if (*a2 >= 1)
    {
      v4 = result;
      v5 = 0;
      v6 = a2 + 18;
      do
      {
        if ((*v6 & 0x80000000) != 0)
        {
          v7 = *(_DWORD *)(v4 + 52);
          *(_DWORD *)(v4 + 52) = v7 + 1;
          *v6 = v7;
          v8 = *((_QWORD *)v6 - 3);
          if (v8)
          {
            result = sub_1ACBAC224(v4, *(_QWORD *)(v8 + 40));
            v3 = *a2;
          }
        }
        ++v5;
        v6 += 26;
      }
      while (v5 < v3);
    }
  }
  return result;
}

uint64_t *sub_1ACBAC2AC(uint64_t *result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;

  v7 = result;
  v8 = *(unsigned __int8 **)(a2 + 24 * a3 + 8);
  v9 = *result;
  if (!v8)
  {
    if (*(_BYTE *)(v9 + 103))
      return result;
    v10 = 0;
LABEL_7:
    if (a5 >= 1)
    {
      v26 = 0uLL;
      v27 = 0uLL;
      v25[0] = 0;
      v25[1] = sub_1ACC10440;
      DWORD2(v27) = a5;
      if (v10)
        sub_1ACC0B714((uint64_t)v25, v10);
    }
    if (*(_BYTE *)a4 == 113)
    {
      v11 = *(const void **)(a4 + 8);
      if (v11)
      {
        v12 = strlen(*(const char **)(a4 + 8)) & 0x3FFFFFFF;
        if (v12)
        {
          v13 = sub_1ACBE1124(*v7, v12 + 81);
          if (v13)
          {
            v14 = v13;
            *(_OWORD *)(v13 + 48) = 0u;
            *(_OWORD *)(v13 + 64) = 0u;
            *(_OWORD *)(v13 + 16) = 0u;
            *(_OWORD *)(v13 + 32) = 0u;
            *(_OWORD *)v13 = 0u;
            *(_BYTE *)v13 = 113;
            *(_WORD *)(v13 + 52) = -1;
            v15 = v13 + 80;
            *(_QWORD *)(v13 + 8) = v13 + 80;
            memcpy((void *)(v13 + 80), v11, v12);
            *(_BYTE *)(v15 + v12) = 0;
            *(_DWORD *)(v14 + 40) = 1;
            *(_QWORD *)(v14 + 16) = v10;
            *(_DWORD *)(v14 + 4) |= 0x2200u;
            v10 = v14;
          }
        }
      }
    }
    v20 = *(_OWORD *)v10;
    v23 = *(_OWORD *)(v10 + 48);
    v24 = *(_OWORD *)(v10 + 64);
    v21 = *(_OWORD *)(v10 + 16);
    v22 = *(_OWORD *)(v10 + 32);
    v16 = *(_OWORD *)(a4 + 64);
    v18 = *(_OWORD *)(a4 + 16);
    v17 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v10 + 64) = v16;
    *(_OWORD *)(v10 + 16) = v18;
    *(_OWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v22;
    *(_OWORD *)(a4 + 48) = v23;
    *(_OWORD *)(a4 + 64) = v24;
    if ((*(_BYTE *)(a4 + 7) & 1) != 0)
    {
      v19 = *(_QWORD *)(a4 + 72);
      if (v19)
        *(_QWORD *)(v19 + 112) = a4;
    }
    if (*v7)
    {
      result = (uint64_t *)sub_1ACBE1124(*v7, 0x18uLL);
      if (result)
      {
LABEL_20:
        *result = v7[24];
        v7[24] = (uint64_t)result;
        result[1] = v10;
        result[2] = (uint64_t)sub_1ACB782D4;
        return result;
      }
    }
    else
    {
      result = (uint64_t *)sub_1ACB5D828(24);
      if (result)
        goto LABEL_20;
    }
    return sub_1ACBF8348((_QWORD *)*v7, (unsigned __int8 *)v10);
  }
  result = (uint64_t *)sub_1ACB8B290(*result, v8, 0, 0);
  v10 = (uint64_t)result;
  if (!*(_BYTE *)(v9 + 103))
    goto LABEL_7;
  if (result)
    return sub_1ACBF8348((_QWORD *)v9, (unsigned __int8 *)result);
  return result;
}

unsigned __int8 *sub_1ACBAC4CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int **v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  char *v48;
  int v49;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v8 = a2;
  if (!a2)
    return v8;
  v10 = *((_DWORD *)a2 + 1);
  if ((v10 & 3) != 0 && *((_DWORD *)a2 + 14) == *(_DWORD *)(a1 + 8))
    *((_DWORD *)a2 + 14) = *(_DWORD *)(a1 + 12);
  v11 = *a2;
  if (v11 == 179)
  {
    if (*((_DWORD *)a2 + 11) == *(_DWORD *)(a1 + 8))
      *((_DWORD *)a2 + 11) = *(_DWORD *)(a1 + 12);
    goto LABEL_16;
  }
  if (v11 != 167 || (v10 & 0x20) != 0 || *((_DWORD *)a2 + 11) != *(_DWORD *)(a1 + 8))
  {
LABEL_16:
    *((_QWORD *)a2 + 2) = sub_1ACBAC4CC(a1, *((_QWORD *)a2 + 2));
    *((_QWORD *)v8 + 3) = sub_1ACBAC4CC(a1, *((_QWORD *)v8 + 3));
    v17 = (int *)*((_QWORD *)v8 + 4);
    if ((v8[5] & 0x10) != 0)
    {
      sub_1ACC18AD8(a1, *((_QWORD **)v8 + 4), 1);
    }
    else if (v17 && *v17 >= 1)
    {
      v18 = 0;
      v19 = 2;
      do
      {
        *(_QWORD *)&v17[v19] = sub_1ACBAC4CC(a1, *(_QWORD *)&v17[v19]);
        ++v18;
        v19 += 6;
      }
      while (v18 < *v17);
    }
    if ((v8[7] & 1) != 0)
    {
      v20 = (_QWORD *)*((_QWORD *)v8 + 9);
      v20[9] = sub_1ACBAC4CC(a1, v20[9]);
      v21 = (int *)v20[2];
      if (v21 && *v21 >= 1)
      {
        v22 = 0;
        v23 = 2;
        do
        {
          *(_QWORD *)&v21[v23] = sub_1ACBAC4CC(a1, *(_QWORD *)&v21[v23]);
          ++v22;
          v23 += 6;
        }
        while (v22 < *v21);
      }
      v24 = (int *)v20[3];
      if (v24 && *v24 >= 1)
      {
        v25 = 0;
        v26 = 2;
        do
        {
          *(_QWORD *)&v24[v26] = sub_1ACBAC4CC(a1, *(_QWORD *)&v24[v26]);
          ++v25;
          v26 += 6;
        }
        while (v25 < *v24);
      }
    }
    return v8;
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v52 = 0u;
  v12 = *((_DWORD *)a2 + 12);
  v13 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 24) + 24 * v12 + 8);
  v14 = *v13;
  v15 = v14;
  if (v14 == 176)
    v15 = v13[2];
  if (v15 == 138)
  {
    v16 = (int **)(*((_QWORD *)v13 + 4) + 32);
  }
  else
  {
    if (v15 != 177)
      goto LABEL_35;
    v16 = (int **)(v13 + 32);
  }
  if (**v16 < 2)
  {
LABEL_35:
    v27 = **(_QWORD **)a1;
    if (!*(_DWORD *)(a1 + 16))
      goto LABEL_43;
    if (v14 == 167)
    {
      v28 = *(_DWORD *)(a1 + 12);
      if (*((_DWORD *)v13 + 11) == v28)
      {
LABEL_43:
        v30 = sub_1ACB8B290(v27, v13, 0, 0);
        v31 = (unsigned __int8 *)v30;
        if (*(_BYTE *)(v27 + 103))
        {
          if (v30)
            sub_1ACBF8348((_QWORD *)v27, (unsigned __int8 *)v30);
        }
        else
        {
          if (*(_DWORD *)(a1 + 16))
            v30[1] |= 0x200000u;
          v32 = *((_DWORD *)v8 + 1);
          if ((v32 & 3) != 0)
            sub_1ACC12384((uint64_t)v30, *((unsigned int *)v8 + 14), v32 & 3);
          sub_1ACBF8348((_QWORD *)v27, v8);
          if (*v31 == 170)
          {
            v39 = sub_1ACC09940((uint64_t)v31);
            *v31 = -101;
            *((_DWORD *)v31 + 1) |= 0x800u;
            *((_DWORD *)v31 + 2) = v39;
          }
          v40 = sub_1ACB78620(*(_QWORD *)a1, v31, v33, v34, v35, v36, v37, v38);
          v47 = (char **)sub_1ACB78620(*(_QWORD *)a1, *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 24 * v12 + 8), v41, v42, v43, v44, v45, v46);
          if ((char **)v40 != v47 || (v49 = *v31, v49 != 113) && v49 != 167)
          {
            if (v47)
              v48 = *v47;
            else
              v48 = "BINARY";
            v31 = (unsigned __int8 *)sub_1ACC10384(*(uint64_t **)a1, (uint64_t)v31, v48);
          }
          *((_DWORD *)v31 + 1) &= ~0x200u;
          return v31;
        }
        return v8;
      }
    }
    else
    {
      v28 = *(_DWORD *)(a1 + 12);
    }
    LOBYTE(v52) = -77;
    *(_QWORD *)&v53 = v13;
    HIDWORD(v54) = v28;
    LODWORD(v55) = -99;
    v13 = (unsigned __int8 *)&v52;
    DWORD1(v52) = 0x40000;
    goto LABEL_43;
  }
  v29 = *(_QWORD *)a1;
  if ((v13[5] & 0x10) != 0)
  {
    if (!*(_DWORD *)(v29 + 48))
      sub_1ACBCB308(v29, "sub-select returns %d columns - expected %d", a3, a4, a5, a6, a7, a8, **(_DWORD **)(*((_QWORD *)v13 + 4) + 32));
  }
  else
  {
    sub_1ACBCB308(v29, "row value misused", a3, a4, a5, a6, a7, a8, v51);
  }
  return v8;
}

__int128 *sub_1ACBAC89C(uint64_t a1, __int128 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v5;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int (*v11)(void);
  const char *v12;
  size_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  const char *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  if (!a4)
    return a2;
  if (*a4 != 167)
    return a2;
  v5 = *((_QWORD *)a4 + 9);
  if (!v5)
    return a2;
  if (*(_BYTE *)(v5 + 63) != 1)
    return a2;
  v7 = (uint64_t **)(v5 + 80);
  do
  {
    v8 = *v7;
    v9 = *v7;
    v10 = *v9;
    v7 = (uint64_t **)(v9 + 5);
  }
  while (v10 != a1);
  v11 = *(unsigned int (**)(void))(*(_QWORD *)v8[2] + 144);
  if (!v11 || !v11())
    return a2;
  v12 = (const char *)*((_QWORD *)a2 + 7);
  if (v12)
  {
    v13 = (strlen(v12) & 0x3FFFFFFF) + 73;
    if (a1)
      goto LABEL_11;
LABEL_15:
    v14 = (_OWORD *)sub_1ACB5D828(v13);
    if (v14)
      goto LABEL_12;
    return a2;
  }
  v13 = 73;
  if (!a1)
    goto LABEL_15;
LABEL_11:
  v14 = (_OWORD *)sub_1ACBE1124(a1, v13);
  if (!v14)
    return a2;
LABEL_12:
  bzero(v14, v13);
  v15 = a2[1];
  v16 = a2[2];
  v17 = *((_QWORD *)a2 + 8);
  v14[3] = a2[3];
  v18 = *a2;
  v14[1] = v15;
  v14[2] = v16;
  *v14 = v18;
  *((_QWORD *)v14 + 7) = (char *)v14 + 72;
  *((_QWORD *)v14 + 8) = v17;
  v19 = (const char *)*((_QWORD *)a2 + 7);
  if (v19)
    v20 = (strlen(v19) & 0x3FFFFFFF) + 1;
  else
    v20 = 1;
  memcpy((char *)v14 + 72, v19, v20);
  *((_QWORD *)v14 + 3) = v23;
  *((_QWORD *)v14 + 1) = v22;
  *((_DWORD *)v14 + 1) |= 0x10u;
  return v14;
}

uint64_t sub_1ACBACA00(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BOOL8 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(result + 16);
  v51 = 0;
  if (!a2 || !v8)
    return result;
  v9 = a4;
  v12 = result;
  v13 = *a2;
  switch(*a2)
  {
    case 0x13u:
      v30 = *((_QWORD *)a2 + 2);
      goto LABEL_41;
    case 0x2Bu:
    case 0x2Cu:
      v14 = sub_1ACC0D84C(a2);
      if ((unsigned __int8 *)v14 != a2)
      {
        v15 = v14;
LABEL_65:
        result = sub_1ACBACA00(v12, v15, a3, v9);
        goto LABEL_69;
      }
      if ((_DWORD)v13 != 44)
      {
        sub_1ACBACA00(v12, *((_QWORD *)a2 + 2), a3, v9);
        v15 = *((_QWORD *)a2 + 3);
        goto LABEL_65;
      }
      v44 = *(_DWORD *)(v12 + 68) - 1;
      *(_DWORD *)(v12 + 68) = v44;
      sub_1ACB9F1D0(v12, *((_QWORD *)a2 + 2));
      sub_1ACBACA00(v12, *((_QWORD *)a2 + 3), a3, v9);
      result = sub_1ACC0A574(v8, v44);
      v21 = HIDWORD(v51);
      if (HIDWORD(v51))
        goto LABEL_67;
      goto LABEL_69;
    case 0x2Du:
    case 0xABu:
      if ((_DWORD)v13 == 45)
        v13 = 53;
      else
        v13 = 52;
      v9 = 128;
      goto LABEL_10;
    case 0x30u:
      result = (uint64_t)sub_1ACC0A5A4((unsigned int *)result, (uint64_t)a2, a3, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1ACBACA00, a4, a6, a7, a8);
      goto LABEL_69;
    case 0x31u:
      v31 = *(_DWORD *)(result + 68);
      v32 = (v31 - 1);
      *(_DWORD *)(result + 68) = v32;
      if ((_DWORD)a4)
        v33 = a3;
      else
        v33 = v32;
      sub_1ACBA1164((_QWORD **)result, (uint64_t)a2, v32, v33, a5, a6, a7, a8);
      v37 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v37)
      {
        sub_1ACBFF5AC(v8, 9, 0, a3, 0, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v37 + 1;
        v38 = *(_QWORD *)(v8 + 136) + 40 * v37;
        *(_QWORD *)v38 = 9;
        *(_DWORD *)(v38 + 8) = a3;
        *(_QWORD *)(v38 + 12) = 0;
        *(_QWORD *)(v38 + 28) = 0;
        *(_QWORD *)(v38 + 20) = 0;
        *(_DWORD *)(v38 + 36) = 0;
      }
      result = *(_QWORD *)(v8 + 24);
      v47 = -v31;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
      {
        result = sub_1ACC0D5D4(result, v8, v47);
        v21 = HIDWORD(v51);
        if (HIDWORD(v51))
          goto LABEL_67;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v47) = *(_DWORD *)(v8 + 144);
        v21 = HIDWORD(v51);
        if (HIDWORD(v51))
          goto LABEL_67;
      }
      goto LABEL_69;
    case 0x32u:
    case 0x33u:
      result = sub_1ACC09A28(result, *((unsigned __int8 **)a2 + 2), (_DWORD *)&v51 + 1);
      v25 = result;
      if (*(_BYTE *)(*(_QWORD *)v8 + 103))
        v26 = &byte_1EECAD280;
      else
        v26 = (char *)(*(_QWORD *)(v8 + 136) + 40 * *(int *)(v8 + 144) - 40);
      if (*((_DWORD *)v26 + 3) == (_DWORD)result && *v26 == 94)
        *((_WORD *)v26 + 1) |= 0x80u;
      v45 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v45)
      {
        *(_DWORD *)(v8 + 144) = v45 + 1;
        v24 = *(_QWORD *)(v8 + 136) + 40 * v45;
        *(_BYTE *)v24 = v13;
        *(_WORD *)(v24 + 2) = 0;
        *(_DWORD *)(v24 + 4) = result;
        *(_DWORD *)(v24 + 8) = a3;
        *(_BYTE *)(v24 + 1) = 0;
        goto LABEL_52;
      }
      v42 = v8;
      v43 = v13;
      goto LABEL_55;
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
LABEL_10:
      v16 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v17 = *v16;
      if (v17 == 176)
        v17 = v16[2];
      if (v17 == 138)
      {
        v18 = (int **)(*((_QWORD *)v16 + 4) + 32);
      }
      else
      {
        if (v17 != 177)
          goto LABEL_17;
        v18 = (int **)(v16 + 32);
      }
      if (**v18 <= 1)
      {
LABEL_17:
        v19 = sub_1ACC09A28(result, v16, (_DWORD *)&v51 + 1);
        v20 = sub_1ACC09A28(v12, *((unsigned __int8 **)a2 + 3), &v51);
        result = sub_1ACB9F66C(v12, *((unsigned __int8 **)a2 + 2), *((unsigned __int8 **)a2 + 3), v13, v19, v20, a3, v9, (*((_DWORD *)a2 + 1) >> 10) & 1);
        v21 = HIDWORD(v51);
        if (!HIDWORD(v51))
          goto LABEL_69;
        goto LABEL_67;
      }
LABEL_19:
      v22 = *((_DWORD *)a2 + 1);
      if ((v22 & 0x10000001) != 0x10000000)
      {
        if ((v22 & 0x20000001) == 0x20000000)
          goto LABEL_69;
        result = sub_1ACC09A28(result, a2, (_DWORD *)&v51 + 1);
        v25 = result;
        v27 = (_DWORD)v9 != 0;
        v28 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v28)
        {
          *(_DWORD *)(v8 + 144) = v28 + 1;
          v29 = *(_QWORD *)(v8 + 136) + 40 * v28;
          *(_DWORD *)v29 = 16;
          *(_DWORD *)(v29 + 4) = result;
          *(_DWORD *)(v29 + 8) = a3;
          *(_DWORD *)(v29 + 12) = v27;
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          v21 = HIDWORD(v51);
          if (!HIDWORD(v51))
            goto LABEL_69;
          goto LABEL_67;
        }
        v42 = v8;
        v43 = 16;
        v46 = a3;
LABEL_56:
        result = sub_1ACBFF5AC(v42, v43, v25, v46, v27, a6, a7, a8);
        v21 = HIDWORD(v51);
        if (!HIDWORD(v51))
          goto LABEL_69;
        goto LABEL_67;
      }
      v23 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v23)
      {
        v42 = v8;
        v43 = 9;
        v25 = 0;
LABEL_55:
        v46 = a3;
        v27 = 0;
        goto LABEL_56;
      }
      *(_DWORD *)(v8 + 144) = v23 + 1;
      v24 = *(_QWORD *)(v8 + 136) + 40 * v23;
      *(_QWORD *)v24 = 9;
      *(_DWORD *)(v24 + 8) = a3;
LABEL_52:
      *(_QWORD *)(v24 + 12) = 0;
      *(_QWORD *)(v24 + 28) = 0;
      *(_QWORD *)(v24 + 20) = 0;
      *(_DWORD *)(v24 + 36) = 0;
      v21 = HIDWORD(v51);
      if (HIDWORD(v51))
      {
LABEL_67:
        v48 = *(unsigned __int8 *)(v12 + 31);
        if (v48 <= 7)
        {
          *(_BYTE *)(v12 + 31) = v48 + 1;
          *(_DWORD *)(v12 + 4 * v48 + 224) = v21;
        }
      }
LABEL_69:
      v49 = v51;
      if ((_DWORD)v51)
      {
        v50 = *(unsigned __int8 *)(v12 + 31);
        if (v50 <= 7)
        {
          *(_BYTE *)(v12 + 31) = v50 + 1;
          *(_DWORD *)(v12 + 4 * v50 + 224) = v49;
        }
      }
      return result;
    case 0xAFu:
      v39 = a2[2];
      v40 = *((_QWORD *)a2 + 3);
      while (1)
      {
        v41 = *(_DWORD *)(v40 + 4);
        if ((v41 & 0x82000) == 0)
          break;
        if ((v41 & 0x80000) != 0)
          v40 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8);
        else
          v40 = *(_QWORD *)(v40 + 16);
      }
      v30 = *((_QWORD *)a2 + 2);
      if ((v39 == 171) != (*(_BYTE *)(*(_QWORD *)(v40 + 8) + 4) != 0))
LABEL_41:
        result = sub_1ACB9F1D0(result, v30);
      else
        result = ((uint64_t (*)(void))sub_1ACBACA00)();
      goto LABEL_69;
    default:
      goto LABEL_19;
  }
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  const char *v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v2 = zName;
  if (zName)
  {
    v4 = strlen(zName);
    if (a1)
    {
      v5 = v4;
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v6)
        xmmword_1ECD3B1C0(v6);
      v7 = *((_QWORD *)a1 + 22);
      if (v7)
      {
        v8 = v5 & 0x3FFFFFFF;
        v9 = *(_DWORD *)(v7 + 4);
        v10 = 2;
        while (1)
        {
          v11 = v10;
          v12 = (const char *)(v7 + 4 * v10 + 8);
          if (!strncmp(v12, v2, v8) && !v12[v8])
            break;
          v10 = *(_DWORD *)(v7 + 4 * v11 + 4) + v11;
          if (v10 >= v9)
            goto LABEL_11;
        }
        LODWORD(v2) = *(_DWORD *)(v7 + 4 * v11);
      }
      else
      {
LABEL_11:
        LODWORD(v2) = 0;
      }
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v13)
        xmmword_1ECD3B1D0(v13);
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  return (int)v2;
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 <= 0)
  {
    if (a1)
    {
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v6 = 25;
        *(_DWORD *)(v10 + 80) = 25;
        sub_1ACBE938C(v10, 25);
        return v6;
      }
      sqlite3_log(21, "API called with finalized prepared statement", a3);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3);
    }
    return 25;
  }
  v5 = (a2 - 1);
  v6 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    v7 = *((_QWORD *)a1 + 16) + (v5 << 6);
    v8 = (_WORD *)(v7 + 20);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v7);
    else
      *v8 = 1;
    *(double *)v7 = a3;
    *v8 = 8;
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v9)
      xmmword_1ECD3B1D0(v9);
    return 0;
  }
  return v6;
}

void sub_1ACBAD120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1ACB93348(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 136) + 40 * *(int *)(a1 + 32) - 24)))sqlite3_result_value((sqlite3_context *)a1, *(sqlite3_value **)a3);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  __int16 v1;
  uint64_t v2;
  double v3;

  if (!a1)
  {
    sub_1ACBBE20C(89699);
LABEL_5:
    LODWORD(v2) = 0;
    return v2;
  }
  v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0)
    return *(_QWORD *)a1;
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *((_QWORD *)a1 + 1))
    {
      LODWORD(v2) = sub_1ACBF2FC0((uint64_t)a1);
      return v2;
    }
    goto LABEL_5;
  }
  v3 = *(double *)a1;
  if (*(double *)a1 >= -9.22337204e18)
  {
    if (v3 <= 9.22337204e18)
      return (uint64_t)v3;
    else
      LODWORD(v2) = -1;
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v2;
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v2, a2);
    }
    else
    {
      *(_QWORD *)v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }
  else
  {
    sub_1ACBBE20C(97413);
  }
}

uint64_t sub_1ACBAD260(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned int *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 v35;
  void *v36;
  uint64_t v37;
  int v38;
  int *v39;
  unsigned int *v40;
  unsigned __int8 *v41;
  unsigned int *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  int v69;
  int v70;
  int v71;
  char v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[16];
  __int128 v80;
  _OWORD v81[9];
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  uint64_t v87;

  if (*(_QWORD *)(a1 + 168))
    v8 = *(_QWORD *)(a1 + 168);
  else
    v8 = a1;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v10 = sub_1ACBE1124(*(_QWORD *)a1, 0x28uLL);
    if (!v10)
      return v10;
  }
  else
  {
    v10 = sub_1ACB5D828(40);
    if (!v10)
      return v10;
  }
  v80 = 0u;
  memset(v81, 0, sizeof(v81));
  memset(v79, 0, sizeof(v79));
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 184);
  *(_QWORD *)(v8 + 184) = v10;
  if (v9)
  {
    v18 = sub_1ACBE1124(v9, 0x30uLL);
    if (v18)
      goto LABEL_10;
  }
  else
  {
    v18 = sub_1ACB5D828(48);
    if (v18)
    {
LABEL_10:
      v19 = 0uLL;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)v18 = 0u;
      *(_QWORD *)(v10 + 16) = v18;
      v20 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v18 + 40) = *(_QWORD *)(v20 + 376);
      *(_QWORD *)(v20 + 376) = v18;
      *(_QWORD *)v10 = a2;
      *(_DWORD *)(v10 + 24) = a4;
      *(_QWORD *)(v10 + 28) = -1;
      memset((char *)v79 + 8, 0, 216);
      memset((char *)v81 + 8, 0, 136);
      *(_QWORD *)&v80 = *(_QWORD *)(v9 + 344);
      *(_QWORD *)(v9 + 344) = v79;
      *(_QWORD *)&v79[0] = v9;
      if (*(_BYTE *)(v9 + 103))
      {
        sub_1ACBCB308((uint64_t)v79, "out of memory", (uint64_t)v12, v13, v14, v15, v16, v17, v72);
        v19 = 0uLL;
        v21 = *(uint64_t **)&v79[1];
      }
      else
      {
        v21 = 0;
      }
      v85 = v19;
      v84 = v19;
      v83 = v19;
      v82 = v79;
      *((_QWORD *)&v79[10] + 1) = v8;
      *(_QWORD *)&v79[11] = a3;
      v22 = *a2;
      *(_QWORD *)&v81[6] = *a2;
      BYTE10(v79[13]) = *((_BYTE *)a2 + 16);
      WORD4(v79[13]) = *(_WORD *)(a1 + 216);
      BYTE5(v79[2]) = *(_BYTE *)(a1 + 37);
      v23 = v21;
      if (v21)
      {
        if (!v22)
          goto LABEL_30;
      }
      else
      {
        v24 = sub_1ACBCB4C8((uint64_t *)v79, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        if (!v24)
        {
          if (*(_DWORD *)(a1 + 48))
          {
            if (*((_QWORD *)&v79[0] + 1))
              sub_1ACBE0F9C(*(_QWORD **)&v79[0], *((_QWORD **)&v79[0] + 1));
          }
          else
          {
            *(_QWORD *)(a1 + 8) = *((_QWORD *)&v79[0] + 1);
            v71 = DWORD2(v79[1]);
            *(_DWORD *)(a1 + 48) = v79[3];
            *(_DWORD *)(a1 + 24) = v71;
          }
          goto LABEL_72;
        }
        v23 = (uint64_t *)v24;
        v22 = *a2;
        if (!*a2)
        {
LABEL_30:
          v30 = (unsigned __int8 *)a2[3];
          v77 = v8;
          v78 = a1;
          v75 = (uint64_t)v23;
          v76 = v18;
          if (v30)
          {
            v31 = sub_1ACB8B290(v9, v30, 0, 0);
            if (*(_BYTE *)(v9 + 103)
              || sub_1ACC0F790((uint64_t)&v82, (uint64_t)v31, (uint64_t)v12, v13, v14, v15, v16, v17))
            {
              v74 = 0;
              if (!v31)
                goto LABEL_36;
              goto LABEL_34;
            }
            v70 = --DWORD1(v79[4]);
            sub_1ACB9F1D0((uint64_t)v79, (unsigned __int8 **)v31, DWORD1(v79[4]), 16, v14, v15, v16, v17);
            v74 = v70;
            if (v31)
LABEL_34:
              sub_1ACBF8348((_QWORD *)v9, (unsigned __int8 *)v31);
          }
          else
          {
            v74 = 0;
          }
LABEL_36:
          v73 = a2;
          v32 = (unsigned __int8 *)a2[7];
          if (v32)
          {
            v33 = *(_QWORD *)&v79[1];
            v34 = *(_QWORD **)&v79[0];
            do
            {
              v35 = a4;
              if (a4 == 11)
                v35 = v32[1];
              BYTE12(v79[13]) = v35;
              if (*((_QWORD *)v32 + 9))
              {
                v36 = sub_1ACB6DDD0((uint64_t)v34, "-- %s", (uint64_t)v12, v13, v14, v15, v16, v17, *((_QWORD *)v32 + 9));
                sub_1ACBA86CC((uint64_t *)v33, 181, 0x7FFFFFFFLL, 1, 0, (uint64_t)v36, 4294967290, v37);
              }
              v38 = *v32;
              switch(v38)
              {
                case 127:
                  v43 = sub_1ACC2EFD4((uint64_t *)v79, (uint64_t)v32);
                  v44 = sub_1ACB8DFB8((uint64_t)v34, *((_QWORD *)v32 + 2), 0);
                  v45 = sub_1ACB8DA48((uint64_t)v34, *((int **)v32 + 7));
                  v46 = BYTE12(v79[13]);
                  v47 = sub_1ACC2F1E8(v34, *((_QWORD *)v32 + 8));
                  sub_1ACB93F7C(v79, v43, v44, v45, v46, v47);
                  break;
                case 128:
                  v51 = sub_1ACC2EFD4((uint64_t *)v79, (uint64_t)v32);
                  v52 = (unsigned __int8 *)*((_QWORD *)v32 + 5);
                  if (v52)
                    v53 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v34, v52, 0, 0);
                  else
                    v53 = 0;
                  sub_1ACBAA7B4(v79, (uint64_t)v51, v53, 0, 0, v48, v49, v50);
                  break;
                case 129:
                  v39 = sub_1ACC2EFD4((uint64_t *)v79, (uint64_t)v32);
                  v40 = (unsigned int *)sub_1ACB8B6B8((uint64_t)v34, *((_QWORD **)v32 + 6), 0);
                  v41 = (unsigned __int8 *)*((_QWORD *)v32 + 5);
                  if (v41)
                    v42 = sub_1ACB8B290((uint64_t)v34, v41, 0, 0);
                  else
                    v42 = 0;
                  sub_1ACBA880C((uint64_t)v79, (uint64_t)v39, v40, (uint64_t)v42, BYTE12(v79[13]), 0, 0, 0);
                  break;
                default:
                  v87 = 0;
                  memset(v86, 0, sizeof(v86));
                  v54 = sub_1ACB8DFB8((uint64_t)v34, *((_QWORD *)v32 + 2), 0);
                  LOBYTE(v86[0]) = 4;
                  *((_QWORD *)&v86[1] + 1) = 0;
                  *(_OWORD *)((char *)v86 + 4) = 0uLL;
                  sub_1ACB6EA04((_QWORD **)v79, v54, (uint64_t)v86, v55, v56, v57, v58, v59);
                  if (v54)
                    sub_1ACB7E704(v34, v54, 1);
                  goto LABEL_39;
              }
              v60 = *(_DWORD *)(v33 + 144);
              if (*(_DWORD *)(v33 + 148) <= v60)
              {
                sub_1ACBFF5AC(v33, 131, 0, 0, 0, v15, v16, v17);
              }
              else
              {
                *(_DWORD *)(v33 + 144) = v60 + 1;
                v61 = *(_QWORD *)(v33 + 136) + 40 * v60;
                *(_BYTE *)v61 = -125;
                *(_OWORD *)(v61 + 1) = 0u;
                *(_OWORD *)(v61 + 17) = 0u;
                *(_QWORD *)(v61 + 32) = 0;
              }
LABEL_39:
              v32 = (unsigned __int8 *)*((_QWORD *)v32 + 10);
            }
            while (v32);
          }
          if (v74)
          {
            v62 = *(_QWORD *)(v75 + 24);
            v63 = ~v74;
            if (*(_DWORD *)(v62 + 68) + *(_DWORD *)(v62 + 72) < 0)
              sub_1ACC0D5D4(v62, v75, v63);
            else
              *(_DWORD *)(*(_QWORD *)(v62 + 80) + 4 * v63) = *(_DWORD *)(v75 + 144);
          }
          v64 = *(_DWORD *)(v75 + 144);
          if (*(_DWORD *)(v75 + 148) <= v64)
          {
            sub_1ACBFF5AC(v75, 70, 0, 0, 0, v15, v16, v17);
          }
          else
          {
            *(_DWORD *)(v75 + 144) = v64 + 1;
            v65 = *(_QWORD *)(v75 + 136) + 40 * v64;
            *(_BYTE *)v65 = 70;
            *(_OWORD *)(v65 + 1) = 0u;
            *(_OWORD *)(v65 + 17) = 0u;
            *(_QWORD *)(v65 + 32) = 0;
          }
          if (*(_DWORD *)(v78 + 48))
          {
            if (!*((_QWORD *)&v79[0] + 1))
              goto LABEL_71;
            sub_1ACBE0F9C(*(_QWORD **)&v79[0], *((_QWORD **)&v79[0] + 1));
            if (*(_DWORD *)(v78 + 48))
              goto LABEL_71;
          }
          else
          {
            *(_QWORD *)(v78 + 8) = *((_QWORD *)&v79[0] + 1);
            v68 = v79[3];
            v69 = DWORD2(v79[1]);
            *(_DWORD *)(v78 + 48) = v79[3];
            *(_DWORD *)(v78 + 24) = v69;
            if (v68)
              goto LABEL_71;
          }
          v66 = *(_QWORD *)(v75 + 136);
          sub_1ACBFFA0C((_QWORD *)v75, (int *)(v77 + 136));
          *(_DWORD *)(v76 + 8) = *(_DWORD *)(v75 + 144);
          *(_QWORD *)(v75 + 136) = 0;
          *(_QWORD *)v76 = v66;
LABEL_71:
          *(int32x2_t *)(v76 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v79[3] + 4));
          *(_QWORD *)(v76 + 32) = v73;
          *(_QWORD *)(v10 + 28) = *(_QWORD *)&v79[13];
          sub_1ACBBE904(v75);
LABEL_72:
          sub_1ACBCB8D0(v79);
          return v10;
        }
      }
      v12 = (char *)sub_1ACB6DDD0(v9, "-- TRIGGER %s", (uint64_t)v12, v13, v14, v15, v16, v17, v22);
      if (*(_BYTE *)(*v23 + 103))
      {
        if (v12)
          sub_1ACBF0674((_QWORD *)*v23, v12);
      }
      else
      {
        v25 = *((int *)v23 + 36) - 1;
        v26 = v23[17];
        v27 = v26 + 40 * v25;
        v29 = *(unsigned __int8 *)(v27 + 1);
        v28 = (_BYTE *)(v27 + 1);
        if (v29)
        {
          sub_1ACBFF884(v23, v26 + 40 * v25, v12, 0xFFFFFFFA);
        }
        else if (v12)
        {
          *(_QWORD *)(v26 + 40 * v25 + 16) = v12;
          *v28 = -6;
        }
      }
      goto LABEL_30;
    }
  }
  *(_QWORD *)(v10 + 16) = 0;
  return 0;
}

uint64_t sub_1ACBAD96C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int16 v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;

  v9 = a5;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v14 = sub_1ACBCB4C8((uint64_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 168);
  if (!v15)
    v15 = a1;
  result = *(_QWORD *)(v15 + 184);
  if (result)
  {
    while (*(uint64_t **)result != a2 || *(_DWORD *)(result + 24) != v9)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    result = sub_1ACBAD260(a1, a2, a3, v9);
    *(_DWORD *)(*(_QWORD *)a1 + 84) = -1;
    if (!result)
      return result;
  }
  if (*a2)
    v17 = (*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x20) == 0;
  else
    v17 = 0;
  v18 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v18;
  result = sub_1ACBA86CC((uint64_t *)v14, 48, a4, a6, v18, *(_QWORD *)(result + 16), 4294967292, a8);
  v19 = *(_DWORD *)(v14 + 144);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v21 < 0 == v20)
    *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * v21 + 2) = v17;
  return result;
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 <= 0)
  {
    if (a1)
    {
      v5 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v3 = 25;
        *(_DWORD *)(v5 + 80) = 25;
        sub_1ACBE938C(v5, 25);
        return v3;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    return 25;
  }
  v3 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if (!v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v4)
      xmmword_1ECD3B1D0(v4);
    return 0;
  }
  return v3;
}

