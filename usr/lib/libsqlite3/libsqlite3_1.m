void sub_1ACBADB40(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  int v39;
  int v40;

  if (!a1)
  {
    sub_1ACBBE20C(97935);
    v6 = 0;
    goto LABEL_6;
  }
  if (!*(_QWORD *)a1)
  {
    sub_1ACBBE20C(97935);
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
      goto LABEL_8;
LABEL_6:
    sub_1ACBBE20C(97914);
    v8 = 0;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_6;
LABEL_8:
  v8 = *(unsigned __int8 **)(v7 + 8);
LABEL_9:
  v40 = 0;
  v9 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(91120);
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    v11 = *(_DWORD *)(v9 + 16);
    goto LABEL_18;
  }
  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 1) == 0)
    {
      v11 = sub_1ACBF2B3C(v9, 1);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v11 = *(_DWORD *)(v9 + 16);
  if ((*(_WORD *)(v9 + 20) & 0x400) != 0)
    v11 += *(_DWORD *)v9;
LABEL_18:
  if (v11 > *(_DWORD *)(v6 + 168))
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      v12 = "LIKE or GLOB pattern too complex";
LABEL_21:
      sub_1ACB57870(*(_QWORD *)a1, v12, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
LABEL_66:
    sub_1ACBBE20C(97389);
    return;
  }
  if (a2 == 3)
  {
    v13 = a3[2];
    if (!v13)
      return;
    v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
    {
      if ((v14 & 1) != 0)
        return;
      v15 = (unsigned __int8 *)sub_1ACBF2B64((int *)v13, 1);
      if (!v15)
        return;
    }
    else
    {
      v15 = *(unsigned __int8 **)(v13 + 8);
      if (!v15)
        return;
    }
    if (v15 == (unsigned __int8 *)-1)
      goto LABEL_64;
    v16 = *v15;
    if (!*v15)
      goto LABEL_64;
    v26 = 0;
    v27 = *v15;
    v28 = v15;
    do
    {
      v31 = v26;
      if (v27 < 0xC0)
      {
        v29 = *++v28;
        v27 = v29;
      }
      else
      {
        do
        {
          v32 = *++v28;
          v27 = v32;
        }
        while ((v32 & 0xC0) == 0x80);
      }
      ++v26;
      if (v27)
        v30 = v28 + 1 == 0;
      else
        v30 = 1;
    }
    while (!v30);
    if (v31)
    {
LABEL_64:
      if (a1)
      {
        *(_DWORD *)(a1 + 36) = 1;
        v12 = "ESCAPE expression must be a single character";
        goto LABEL_21;
      }
      goto LABEL_66;
    }
    if (v16 >= 0xC0)
    {
      v33 = byte_1ACCB6CF6[(v16 - 192)];
      v34 = v15[1];
      if ((v34 & 0xC0) == 0x80)
      {
        v35 = v15 + 2;
        do
        {
          v33 = v34 & 0x3F | (v33 << 6);
          v36 = *v35++;
          v34 = v36;
        }
        while ((v36 & 0xC0) == 0x80);
      }
      if (v33 >> 11 == 27 || v33 < 0x80 || v33 >> 1 == 0x7FFF)
        v16 = 65533;
      else
        v16 = v33;
    }
    if ((_DWORD)v16 == *v8 || (_DWORD)v16 == v8[1])
    {
      v39 = *(_DWORD *)v8;
      v40 = v39;
      if ((_DWORD)v16 == v39)
        LOBYTE(v40) = 0;
      if ((_DWORD)v16 == BYTE1(v39))
        BYTE1(v40) = 0;
      v8 = (unsigned __int8 *)&v40;
    }
  }
  else
  {
    v16 = v8[2];
  }
  v17 = *a3;
  if (!*a3)
    goto LABEL_39;
  v18 = *(unsigned __int16 *)(v17 + 20);
  if ((~v18 & 0x202) != 0 || *(_BYTE *)(v17 + 22) != 1)
  {
    if ((v18 & 1) == 0)
    {
      v19 = (unsigned __int8 *)sub_1ACBF2B64((int *)v17, 1);
      v20 = a3[1];
      if (!v20)
        return;
      goto LABEL_40;
    }
LABEL_39:
    v19 = 0;
    v20 = a3[1];
    if (!v20)
      return;
    goto LABEL_40;
  }
  v19 = *(unsigned __int8 **)(v17 + 8);
  v20 = a3[1];
  if (!v20)
    return;
LABEL_40:
  v21 = *(unsigned __int16 *)(v20 + 20);
  if ((~v21 & 0x202) != 0 || *(_BYTE *)(v20 + 22) != 1)
  {
    if ((v21 & 1) != 0)
      return;
    v22 = (const char *)sub_1ACBF2B64((int *)v20, 1);
  }
  else
  {
    v22 = *(const char **)(v20 + 8);
  }
  if (v22 && v19)
  {
    v23 = sub_1ACBADEF0(v19, v22, v8, v16);
    if (a1)
    {
      v24 = v23 == 0;
      v25 = *(_QWORD *)a1;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v25, v24);
      }
      else
      {
        *(_QWORD *)v25 = v24;
        *(_WORD *)(v25 + 20) = 4;
      }
    }
    else
    {
      sub_1ACBBE20C(97413);
    }
  }
}

uint64_t sub_1ACBADEF0(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, uint64_t a4)
{
  const char *v4;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  char v22;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned int v44;
  unsigned int v47;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned int v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  BOOL v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  char v68;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  BOOL v80;
  _BOOL4 v81;
  unsigned int v83;
  unsigned int v84;
  char i;
  char v86;
  unsigned __int8 *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned __int8 *v93;
  int v94;
  unsigned int v95;
  char v96;
  char v97;
  unsigned __int8 *v100;
  const char *v101;
  char __charset[3];
  unsigned __int8 *v103;

  v103 = a1;
  if (!a1 || (v4 = a2) == 0)
  {
    sub_1ACBBE20C(135648);
    return 1;
  }
  v7 = 0;
  v8 = a3[1];
  v9 = *a3;
  v10 = a3[3];
  while (1)
  {
    v12 = (char)*a1;
    v11 = a1 + 1;
    v13 = v12;
    v14 = v11;
    v103 = v11;
    if ((v12 & 0x80000000) == 0)
      break;
    if (v13 < 0xC0)
      goto LABEL_14;
    v13 = byte_1ACCB6CF6[v13 - 192];
    v15 = *v11;
    if ((*v11 & 0xC0) == 0x80)
    {
      do
      {
        v16 = *++v14;
        v13 = v15 & 0x3F | (v13 << 6);
        v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      v103 = v14;
    }
    v17 = 65533;
    if (v13 >> 1 != 0x7FFF && v13 >= 0x80 && (v13 & 0xFFFFF800) != 0xD800)
      goto LABEL_14;
LABEL_16:
    if (v17 == (_DWORD)a4)
    {
      if (a3[2])
      {
        v19 = *(unsigned __int8 *)v4++;
        v18 = v19;
        v20 = v19 - 192;
        if (v19 < 0xC0)
        {
          if (!v18)
            return 1;
        }
        else
        {
          v18 = byte_1ACCB6CF6[v20];
          v21 = *v4;
          if ((*v4 & 0xC0) == 0x80)
          {
            do
            {
              v22 = *++v4;
              v18 = v21 & 0x3F | (v18 << 6);
              v21 = v22;
            }
            while ((v22 & 0xC0) == 0x80);
          }
          if (v18 >> 11 == 27 || v18 < 0x80 || v18 >> 1 == 0x7FFF)
            v18 = 65533;
        }
        a1 = v14 + 1;
        v103 = v14 + 1;
        v25 = *v14;
        if (v25 >= 0xC0)
        {
          v26 = byte_1ACCB6CF6[v25 - 192];
          v27 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              v28 = *++a1;
              v26 = v27 & 0x3F | (v26 << 6);
              v27 = v28;
            }
            while ((v28 & 0xC0) == 0x80);
            v103 = a1;
          }
          v29 = 0;
          v30 = 0;
          if (v26 >> 11 == 27 || v26 < 0x80 || v26 >> 1 == 0x7FFF)
            v25 = 65533;
          else
            v25 = v26;
          goto LABEL_76;
        }
        if (v25 == 94)
        {
          a1 = v14 + 2;
          v103 = v14 + 2;
          v25 = v14[1];
          if (v25 >= 0xC0)
          {
            v33 = byte_1ACCB6CF6[v25 - 192];
            v34 = *a1;
            if ((*a1 & 0xC0) == 0x80)
            {
              do
              {
                v35 = *++a1;
                v33 = v34 & 0x3F | (v33 << 6);
                v34 = v35;
              }
              while ((v35 & 0xC0) == 0x80);
              v103 = a1;
            }
            v30 = 0;
            if (v33 >> 11 == 27 || v33 < 0x80 || v33 >> 1 == 0x7FFF)
              v25 = 65533;
            else
              v25 = v33;
            v29 = 1;
            goto LABEL_76;
          }
          v29 = 1;
          if (v25 != 93)
          {
LABEL_75:
            v30 = 0;
            goto LABEL_76;
          }
        }
        else
        {
          v29 = 0;
          if (v25 != 93)
            goto LABEL_75;
        }
        v30 = v18 == 93;
        v38 = a1 + 1;
        v103 = a1 + 1;
        v25 = *a1;
        if (v25 >= 0xC0)
        {
          v39 = byte_1ACCB6CF6[v25 - 192];
          v40 = *v38;
          if ((*v38 & 0xC0) == 0x80)
          {
            do
            {
              v41 = *++v38;
              v39 = v40 & 0x3F | (v39 << 6);
              v40 = v41;
            }
            while ((v41 & 0xC0) == 0x80);
            v103 = v38;
          }
          if (v39 >> 11 == 27 || v39 < 0x80 || v39 >> 1 == 0x7FFF)
            v25 = 65533;
          else
            v25 = v39;
        }
        a1 = v38;
LABEL_76:
        v44 = 0;
LABEL_85:
        switch(v25)
        {
          case 0x2Du:
            v47 = *a1;
            if (v47 == 93 || v44 == 0 || v47 == 0)
              goto LABEL_97;
            ++a1;
            if (v47 >= 0xC0)
            {
              v54 = byte_1ACCB6CF6[v47 - 192];
              v55 = *a1;
              if ((*a1 & 0xC0) == 0x80)
              {
                do
                {
                  v56 = *++a1;
                  v54 = v55 & 0x3F | (v54 << 6);
                  v55 = v56;
                }
                while ((v56 & 0xC0) == 0x80);
              }
              if (v54 >> 11 == 27 || v54 < 0x80 || v54 >> 1 == 0x7FFF)
                v47 = 65533;
              else
                v47 = v54;
            }
            v59 = v18 <= v47 && v18 >= v44;
            v44 = 0;
            if (v59)
              v30 = 1;
            break;
          case 0u:
            return 1;
          case 0x5Du:
            v103 = a1;
            v90 = 1;
            if (v30 == v29)
              return v90;
            continue;
          default:
LABEL_97:
            if (v18 == v25)
              v30 = 1;
            v44 = v25;
            break;
        }
        v50 = *a1++;
        v25 = v50;
        v51 = v50 - 192;
        if (v50 >= 0xC0)
        {
          v25 = byte_1ACCB6CF6[v51];
          v52 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              v53 = *++a1;
              v25 = v52 & 0x3F | (v25 << 6);
              v52 = v53;
            }
            while ((v53 & 0xC0) == 0x80);
          }
          if (v25 >> 11 == 27 || v25 < 0x80 || v25 >> 1 == 0x7FFF)
            v25 = 65533;
        }
        goto LABEL_85;
      }
      a1 = v14 + 1;
      v103 = v14 + 1;
      v17 = *v14;
      if (v17 < 0xC0)
      {
        v7 = v14 + 1;
        if (!*v14)
          return 1;
      }
      else
      {
        v17 = byte_1ACCB6CF6[v17 - 192];
        v60 = *a1;
        if ((*a1 & 0xC0) == 0x80)
        {
          do
          {
            v61 = *++a1;
            v17 = v60 & 0x3F | (v17 << 6);
            v60 = v61;
          }
          while ((v61 & 0xC0) == 0x80);
          v103 = a1;
        }
        if (v17 >> 11 == 27 || v17 < 0x80 || v17 >> 1 == 0x7FFF)
          v17 = 65533;
        v7 = a1;
      }
    }
    else
    {
      a1 = v14;
    }
    v65 = *(unsigned __int8 *)v4++;
    v64 = v65;
    v66 = v65 - 192;
    if (v65 >= 0xC0)
    {
      v64 = byte_1ACCB6CF6[v66];
      v67 = *v4;
      if ((*v4 & 0xC0) == 0x80)
      {
        do
        {
          v68 = *++v4;
          v64 = v67 & 0x3F | (v64 << 6);
          v67 = v68;
        }
        while ((v68 & 0xC0) == 0x80);
      }
      if (v64 >> 11 == 27 || v64 < 0x80 || v64 >> 1 == 0x7FFF)
        v64 = 65533;
    }
    if (v17 != v64
      && (!v10 || (v64 | v17) > 0x7F || byte_1ACCB6333[v17] != byte_1ACCB6333[v64]))
    {
      if (v17 != v8)
        return 1;
      v90 = 1;
      if (!v64 || a1 == v7)
        return v90;
    }
  }
  if (!v13)
    return *v4 != 0;
LABEL_14:
  if (v13 != v9)
  {
    v17 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    v73 = *v14++;
    v72 = v73;
    v103 = v14;
    v74 = v73 - 192;
    if (v73 >= 0xC0)
    {
      v75 = byte_1ACCB6CF6[v74];
      v76 = *v14;
      if ((*v14 & 0xC0) == 0x80)
      {
        do
        {
          v77 = *++v14;
          v75 = v76 & 0x3F | (v75 << 6);
          v76 = v77;
        }
        while ((v77 & 0xC0) == 0x80);
        v103 = v14;
      }
      if (v75 >> 11 == 27 || v75 < 0x80 || v75 >> 1 == 0x7FFF)
        v72 = 65533;
      else
        v72 = v75;
    }
    v80 = v8 && v72 == v8;
    v81 = v80;
    if (v72 != v9 && !v81)
      break;
    if (v72 == v8)
    {
      v84 = *(unsigned __int8 *)v4++;
      v83 = v84;
      if (v84 < 0xC0)
      {
        v90 = 2;
        if (!v83)
          return v90;
      }
      else
      {
        for (i = *v4; (i & 0xC0) == 0x80; i = v86)
          v86 = *++v4;
      }
    }
  }
  if (!v72)
    return 0;
  if (v72 == (_DWORD)a4)
  {
    if (a3[2])
    {
      if (*v4)
      {
        v87 = v14 - 1;
        while (1)
        {
          v88 = sub_1ACBADEF0(v87, v4, a3, a4);
          if ((_DWORD)v88 != 1)
            break;
          if (*(unsigned __int8 *)v4 < 0xC0u)
          {
            ++v4;
          }
          else
          {
            do
              v89 = *++v4;
            while ((v89 & 0xC0) == 0x80);
          }
          v90 = 2;
          if (!*v4)
            return v90;
        }
        return v88;
      }
      return 2;
    }
    v72 = sub_1ACC00F34(&v103);
    if (!v72)
      return 2;
  }
  if (v72 < 0x80)
  {
    if (v10)
    {
      v91 = v72;
      LOBYTE(v72) = v72 & (~byte_1ACCB6548[v72] | 0xDF);
      v92 = byte_1ACCB6333[v91];
      __charset[2] = 0;
    }
    else
    {
      v92 = 0;
    }
    __charset[0] = v72;
    __charset[1] = v92;
    v100 = v103;
    while (1)
    {
      v101 = &v4[strcspn(v4, __charset)];
      if (!*v101)
        break;
      v4 = v101 + 1;
      v88 = sub_1ACBADEF0(v100, v101 + 1, a3, a4);
      if ((_DWORD)v88 != 1)
        return v88;
    }
    return 2;
  }
  v93 = v103;
  while (1)
  {
    v94 = *v4++;
    v95 = v94;
    if (v94 < 0)
    {
      if (v95 >= 0xC0)
      {
        v95 = byte_1ACCB6CF6[v95 - 192];
        v96 = *v4;
        if ((*v4 & 0xC0) == 0x80)
        {
          do
          {
            v97 = *++v4;
            v95 = v96 & 0x3F | (v95 << 6);
            v96 = v97;
          }
          while ((v97 & 0xC0) == 0x80);
        }
        if (v95 >> 11 == 27 || v95 < 0x80 || v95 >> 1 == 0x7FFF)
          v95 = 65533;
      }
    }
    else if (!v95)
    {
      return 2;
    }
    if (v95 == v72)
    {
      v90 = sub_1ACBADEF0(v93, v4, a3, a4);
      if ((_DWORD)v90 != 1)
        break;
    }
  }
  return v90;
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  if (n < 0)
    return sub_1ACBBE20C(98722);
  else
    return sub_1ACBA0CE0((uint64_t *)a1, a2, (char *)a3, n, (uint64_t (*)(uint64_t))a5, 0);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  int v3;
  const char *v4;
  int v6;
  sqlite3_stmt *v7;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt **v11;
  sqlite3_stmt **v12;

  if (!pDb)
  {
    v4 = "NULL";
    goto LABEL_11;
  }
  v3 = *((unsigned __int8 *)pDb + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    v6 = 99144;
    goto LABEL_12;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if (pStmt && *(sqlite3 **)pStmt != pDb)
  {
    v6 = 99149;
LABEL_12:
    sub_1ACBBE20C(v6);
    return 0;
  }
  v9 = *((_QWORD *)pDb + 3);
  if (v9)
  {
    xmmword_1ECD3B1C0(v9);
    v10 = *((_QWORD *)pDb + 3);
    v11 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt)
      v11 = (sqlite3_stmt **)((char *)pStmt + 16);
    v7 = *v11;
    if (v10)
      xmmword_1ECD3B1D0(v10);
  }
  else
  {
    v12 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt)
      v12 = (sqlite3_stmt **)((char *)pStmt + 16);
    return *v12;
  }
  return v7;
}

int sqlite3_close(sqlite3 *a1)
{
  return sub_1ACBCF268((uint64_t)a1, 0);
}

uint64_t sub_1ACBAE7CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1ACBE1928(a1);
  sub_1ACBE28AC(a1, 0, 0);
  v3 = *(NSObject **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v3);
    }
  }
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (*(_DWORD *)(v2 + 28))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v6;
    *(_DWORD *)(a1 + 24) = -1;
    *(_QWORD *)(a1 + 48) = 0;
  }
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
    xmmword_1ECD3B1D0(v7);
  sub_1ACBE1A3C(a1);
  sub_1ACBA8198(a1);
  if (qword_1ECD3E950)
    xmmword_1ECD3B1D0(qword_1ECD3E950);
  return 0;
}

uint64_t sub_1ACBAE8B4(uint64_t result)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);

  v1 = *(_DWORD *)(result + 32);
  v2 = __OFSUB__(v1--, 1);
  *(_DWORD *)(result + 32) = v1;
  if (!((v1 < 0) ^ v2 | (v1 == 0)))
    return result;
  v3 = result;
  sub_1ACC4F9D0(result);
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v4)(v3);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v3);
  v3 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    return (*v4)(v3);
  }
  return result;
}

uint64_t sub_1ACBAE978(uint64_t a1, unsigned int a2, unsigned int a3, char *a4, int a5)
{
  uint64_t v5;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  signed int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  unsigned int v32;
  int v34;
  unsigned int v35;

  v5 = *(_QWORD *)(a1 + 136);
  if (*(unsigned __int16 *)(a1 + 86) >= *(unsigned __int16 *)(v5 + 24))
  {
    v14 = 81884;
    return sub_1ACBEC69C(v14, v5);
  }
  v11 = *(_DWORD **)(a1 + 32);
  sub_1ACBEF184(a1);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(unsigned __int16 *)(a1 + 68);
  if (v12 - *(_QWORD *)(v5 + 80) > (unint64_t)(v11[14] - v13))
  {
    v14 = 81899;
    return sub_1ACBEC69C(v14, v5);
  }
  if (v13 <= a2)
  {
    v17 = 0;
    v18 = a2 - v13;
    if (!a3)
      goto LABEL_43;
  }
  else
  {
    if (a3 + a2 <= v13)
      v16 = a3;
    else
      v16 = v13 - a2;
    v17 = sub_1ACBAECF4((const void *)(v12 + a2), a4, v16, a5, *(_QWORD *)(v5 + 112));
    v18 = 0;
    a3 -= v16;
    a4 += (int)v16;
    if (!a3)
      goto LABEL_43;
  }
  if ((_DWORD)v17)
  {
LABEL_43:
    if ((_DWORD)v17 || !a3)
      return v17;
    return sub_1ACBEC69C(82046, v5);
  }
  v34 = a5;
  v19 = v11[14];
  v20 = v19 - 4;
  v21 = *(unsigned __int16 *)(a1 + 68);
  v17 = bswap32(*(_DWORD *)(v12 + v21));
  v35 = v17;
  if ((*(_BYTE *)(a1 + 1) & 4) != 0)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = v18 / v20;
    if (*(_DWORD *)(v26 + 4 * (v18 / v20)))
    {
      v25 = v27;
      v17 = *(unsigned int *)(v26 + 4 * v27);
      v35 = v17;
      v18 %= v20;
      if ((_DWORD)v17)
        goto LABEL_25;
    }
    else
    {
      v25 = 0;
      if ((_DWORD)v17)
        goto LABEL_25;
    }
    goto LABEL_43;
  }
  v22 = *(void **)(a1 + 16);
  v23 = (v19 - (int)v21 + *(_DWORD *)(a1 + 64) - 5) / v20;
  if (!v22 || (v24 = off_1ECD3B178(v22), v22 = *(void **)(a1 + 16), v24 < 4 * v23))
  {
    v22 = (void *)sub_1ACB6BB48((uint64_t)v22, 8 * v23);
    if (!v22)
      return 7;
    *(_QWORD *)(a1 + 16) = v22;
  }
  bzero(v22, 4 * v23);
  v25 = 0;
  *(_BYTE *)(a1 + 1) |= 4u;
  if (!(_DWORD)v17)
    goto LABEL_43;
LABEL_25:
  v28 = 4 * v25;
  while (v17 <= v11[16])
  {
    v29 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v29 + v28) = v17;
    if (v18 >= v20)
    {
      v32 = *(_DWORD *)(v29 + v28 + 4);
      if (v32)
      {
        v17 = 0;
        v35 = v32;
      }
      else
      {
        v17 = sub_1ACBF88E8((uint64_t)v11, v17, 0, &v35);
      }
      v18 -= v20;
    }
    else
    {
      if (a3 + v18 <= v20)
        v30 = a3;
      else
        v30 = v20 - v18;
      v31 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 288))();
      if ((_DWORD)v31)
      {
        v17 = v31;
        a3 -= v30;
        if (!a3)
          return v17;
      }
      else
      {
        v35 = bswap32(*MEMORY[8]);
        v17 = sub_1ACBAECF4((const void *)(MEMORY[8] + v18 + 4), a4, v30, v34, 0);
        v18 = 0;
        a3 -= v30;
        if (!a3)
          return v17;
      }
      a4 += (int)v30;
    }
    if (!(_DWORD)v17)
    {
      v17 = v35;
      v28 += 4;
      if (v35)
        continue;
    }
    goto LABEL_43;
  }
  return sub_1ACBEB08C(81961);
}

uint64_t sub_1ACBAECF4(const void *a1, void *a2, size_t a3, int a4, uint64_t a5)
{
  int v5;
  _DWORD *v8;
  uint64_t result;
  void *v10;
  const void *v11;

  v5 = a3;
  if (!a4)
  {
    a3 = (int)a3;
    v10 = a2;
    v11 = a1;
LABEL_14:
    memcpy(v10, v11, a3);
    return 0;
  }
  v8 = *(_DWORD **)(a5 + 40);
  if ((*(_WORD *)(a5 + 52) & 4) == 0 || v8[8] < *(_DWORD *)(a5 + 48))
  {
    result = v8[12];
    if ((_DWORD)result)
      return result;
    if (v8[46] <= v8[50])
    {
      result = sub_1ACB9A818(a5);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = sub_1ACBEDEA4(a5);
      if ((_DWORD)result)
        return result;
    }
    goto LABEL_13;
  }
  if (!v8[32] || (result = sub_1ACBEA110(a5), !(_DWORD)result))
  {
LABEL_13:
    a3 = v5;
    v10 = (void *)a1;
    v11 = a2;
    goto LABEL_14;
  }
  return result;
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = *((_QWORD *)a1 + 1);
    if (v1)
      return *(void **)(v1 + 8);
  }
  sub_1ACBBE20C(97914);
  return 0;
}

uint64_t sub_1ACBAEDE4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;

  v2 = a1;
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = *(unsigned __int16 *)(a1 + 18);
  v5 = *(unsigned __int16 *)(a1 + 24);
  v6 = (v4 + 2 * v5);
  v7 = *(_DWORD **)(a1 + 72);
  v8 = *(char **)(a1 + 80);
  LODWORD(v9) = v7[14];
  v10 = v3 + 7;
  if (v8[v3 + 7] > a2)
  {
    v11 = v9 - 4;
LABEL_3:
    v37 = v3 + 7;
    v38 = v4 + 2 * v5;
    v36 = *(unsigned __int8 *)(a1 + 9);
    if (*(_WORD *)(a1 + 24))
    {
      v39 = v11;
      v12 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
      v13 = *(char **)(*(_QWORD *)v7 + 328);
      memcpy(v13, v8, (int)v9);
      v2 = a1;
      v15 = v8;
      v16 = (uint64_t)&v8[v4 + 1];
      v17 = v9;
      while (1)
      {
        v18 = __rev16(*(unsigned __int16 *)(v16 - 1));
        if ((int)v18 > v39)
          break;
        v19 = (*(uint64_t (**)(uint64_t, char *))(v2 + 120))(v2, &v13[v18]);
        LODWORD(v9) = v9 - v19;
        if ((int)v9 < v12 || (int)(v18 + v19) > v17)
        {
          v25 = 78503;
          v26 = a1;
          return sub_1ACBEC69C(v25, v26);
        }
        *(_WORD *)(v16 - 1) = bswap32(v9) >> 16;
        memcpy(&v15[v9], &v13[v18], v19);
        v16 += 2;
        --v5;
        v2 = a1;
        if (!v5)
          goto LABEL_19;
      }
      v25 = 78497;
      goto LABEL_24;
    }
    v15 = *(char **)(a1 + 80);
LABEL_19:
    v8 = v15;
    v10 = v37;
    LODWORD(v6) = v38;
    v8[v37] = 0;
    goto LABEL_20;
  }
  v21 = __rev16(*(unsigned __int16 *)&v8[v3 + 1]);
  v11 = v9 - 4;
  if ((int)v21 > (int)v9 - 4)
  {
    v25 = 78444;
    goto LABEL_24;
  }
  if (!(_DWORD)v21)
    goto LABEL_3;
  v22 = __rev16(*(unsigned __int16 *)&v8[v21]);
  if ((int)v22 > v11)
  {
    v25 = 78447;
    goto LABEL_24;
  }
  if ((_DWORD)v22 && (v8[v22] || v8[v22 + 1]))
    goto LABEL_3;
  v27 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
  v28 = v21 - v27;
  if (v21 <= v27)
  {
    v25 = 78455;
    goto LABEL_24;
  }
  v29 = __rev16(*(unsigned __int16 *)&v8[v21 + 2]);
  v30 = v29 + v21;
  if ((_DWORD)v22)
  {
    if (v22 < v30)
    {
      v25 = 78458;
      goto LABEL_24;
    }
    v31 = __rev16(*(unsigned __int16 *)&v8[v22 + 2]);
    if ((int)(v31 + v22) > (int)v9)
    {
      v25 = 78460;
      goto LABEL_24;
    }
    v32 = a1;
    v40 = v22;
    v36 = *(unsigned __int8 *)(a1 + 9);
    memmove(&v8[v31 + v30], &v8[v30], (int)(v22 - v30));
    v28 = v21 - v27;
    v29 += v31;
  }
  else
  {
    if ((int)v30 > (int)v9)
    {
      v25 = 78464;
      goto LABEL_24;
    }
    v32 = a1;
    v40 = v22;
    v36 = *(unsigned __int8 *)(a1 + 9);
    v31 = 0;
  }
  v9 = v29 + v27;
  memmove(&v8[v9], &v8[v27], v28);
  if (v4 >= v6)
  {
    v2 = v32;
  }
  else
  {
    v33 = &v8[v4];
    v2 = v32;
    do
    {
      v34 = __rev16(*(unsigned __int16 *)v33);
      v35 = v29;
      if (v34 < v21 || (v35 = v31, v34 < v40))
        *(_WORD *)v33 = bswap32(v34 + v35) >> 16;
      v33 += 2;
    }
    while (v33 < &v8[v6]);
  }
LABEL_20:
  if ((_DWORD)v9 - (_DWORD)v6 + v8[v10] == *(_DWORD *)(v2 + 20))
  {
    v23 = &v8[v36];
    *(_WORD *)(v23 + 5) = bswap32(v9) >> 16;
    v23[1] = 0;
    v23[2] = 0;
    bzero(&v8[v6], (int)v9 - (int)v6);
    return 0;
  }
  v25 = 78517;
LABEL_24:
  v26 = v2;
  return sub_1ACBEC69C(v25, v26);
}

_DWORD *sub_1ACBAF160(_DWORD *result, int a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;

  if (!*a5)
  {
    if (a2 == 1)
    {
      v9 = 0;
    }
    else
    {
      if (!a2)
      {
        result = (_DWORD *)sub_1ACBEB08C(77875);
LABEL_11:
        *a5 = (_DWORD)result;
        return result;
      }
      v10 = (a2 - 2) / (result[14] / 5u + 1) * (result[14] / 5u + 1);
      if (v10 + 1 == dword_1EECAC650 / result[13])
        v11 = 3;
      else
        v11 = 2;
      v9 = v11 + v10;
    }
    result = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)result + 288))();
    if ((_DWORD)result)
      goto LABEL_11;
    if (*MEMORY[0x10])
    {
      v12 = 77888;
    }
    else
    {
      v13 = ~v9 + a2;
      v14 = (5 * v13);
      if (5 * v13 >= 0)
      {
        v15 = MEMORY[8];
        if (*(unsigned __int8 *)(MEMORY[8] + v14) != a3
          || bswap32(*(_DWORD *)(MEMORY[8] + v14 + 1)) != a4)
        {
          v16 = sub_1ACB9A7C8(0);
          *a5 = v16;
          if (!v16)
          {
            *(_BYTE *)(v15 + v14) = a3;
            v17 = (_BYTE *)(v15 + v14);
            v17[1] = HIBYTE(a4);
            v17[2] = BYTE2(a4);
            v17[3] = BYTE1(a4);
            v17[4] = a4;
          }
        }
        return 0;
      }
      v12 = 77893;
    }
    *a5 = sub_1ACBEB08C(v12);
    return 0;
  }
  return result;
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_QWORD *)a1 + 7);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186245);
  return 0;
}

uint64_t sub_1ACBAF3B4(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v11;
  int v12;

  if (!a1 || *(_BYTE *)(a1 + 16) != 2)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1ACBECF6C(a1);
    if (a2 != 2)
      goto LABEL_12;
  }
  else if (a2 != 2)
  {
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 **)(v7 + 16);
  if (!v8 || (v9 = sub_1ACBEEE90(v8, 0, 0), !(_DWORD)v9))
  {
LABEL_12:
    v9 = sub_1ACBF2298(*(_QWORD *)v7, a2, a3, a4);
    if (!(_DWORD)v9)
    {
      if (a3 < 0 && (*(_WORD *)(v7 + 40) & 0x10) != 0)
        *(_DWORD *)(v7 + 64) = 0;
      v9 = sub_1ACB93E30(v7);
      v11 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 80) + 28));
      if (!v11)
        v11 = *(_DWORD *)(*(_QWORD *)v7 + 32);
      *(_DWORD *)(v7 + 64) = v11;
    }
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v12 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v12;
    if (!v12)
      sub_1ACBED048(a1);
  }
  return v9;
}

uint64_t sub_1ACBAF4D0(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t (**v3)(void);

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 8))
    {
      for (i = 16; i != 512; i += 8)
        sub_1ACBAF4D0(*(_QWORD *)(v1 + i));
    }
    v3 = (uint64_t (**)(void))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      return ((uint64_t (*)(uint64_t))*v3)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0();
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      return ((uint64_t (*)(uint64_t))*v3)(v1);
    }
  }
  return result;
}

int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
{
  return sqlite3_wal_checkpoint_v2(db, zDb, 0, 0, 0);
}

uint64_t sub_1ACBAF5B4(uint64_t a1, uint64_t a2, int a3, unsigned int (*a4)(uint64_t), uint64_t a5, unsigned int a6, int a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  unsigned int (*v15)(uint64_t);
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  int v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  int16x8_t v56;
  int16x8_t v57;
  unsigned int *v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int v71;
  unsigned int v72;
  int16x8_t *v73;
  uint64_t v74;
  int16x8_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __int128 *v80;
  unsigned int v81;
  char *v82;
  __int128 *v83;
  int v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  __int128 *v96;
  unsigned __int16 *v97;
  int v98;
  BOOL v99;
  BOOL v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t (**v109)(unsigned int *);
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t (**v115)(unsigned int *);
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v122;
  unsigned int *v123;
  _DWORD *v124;
  signed int v125;
  signed int v126;
  uint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  _DWORD *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  uint64_t __buf;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v151 = 0;
  if (*(_BYTE *)(a1 + 66))
    return 8;
  v15 = a4;
  *(_QWORD *)(a1 + 152) = a2;
  if (a2)
  {
    if (a4)
    {
      LODWORD(v155) = *(_DWORD *)(a2 + 772);
      if ((_DWORD)v155)
      {
        v19 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)v19)
          (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v19 + 80))(v19, 34, &v155);
      }
    }
  }
  v147 = a6;
  if (*(_BYTE *)(a1 + 63)
    || (v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 1, 1, 10), v22 = a3, !v21))
  {
    *(_BYTE *)(a1 + 65) = 1;
    if (a3)
    {
      while (!*(_BYTE *)(a1 + 63))
      {
        v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 10);
        v21 = v20;
        if (!v15 || v20 != 5)
        {
          if (v20)
          {
            if (v20 != 5)
            {
              v22 = a3;
              if (v20 != 773)
                goto LABEL_35;
              LODWORD(v155) = 0;
              v23 = *(_QWORD *)(a1 + 8);
              if (*(_QWORD *)v23)
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v23 + 80))(v23, 34, &v155);
            }
LABEL_23:
            v15 = 0;
            v22 = 0;
            goto LABEL_25;
          }
          break;
        }
        if (!v15(a5))
          goto LABEL_23;
      }
      *(_BYTE *)(a1 + 64) = 1;
      v22 = a3;
    }
    else
    {
      v22 = 0;
    }
LABEL_25:
    LODWORD(v155) = 0;
    v24 = **(_QWORD **)(a1 + 8);
    if (v24)
      (*(void (**)(void))(v24 + 80))();
    v21 = sub_1ACB6B0B0(a1, &v151);
    if (v22)
    {
      v25 = *(_QWORD *)(a1 + 152);
      if (v25)
      {
        LODWORD(v155) = *(_DWORD *)(v25 + 772);
        if ((_DWORD)v155)
        {
          v26 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)v26)
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v26 + 80))(v26, 34, &v155);
        }
      }
    }
    if (v151)
    {
      v27 = *(_QWORD *)(a1 + 8);
      if (**(int **)v27 >= 3)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 144))(v27, 0, 0);
    }
LABEL_35:
    if (!v21)
    {
      v31 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v31 && ((*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00) != a7)
      {
        v21 = sub_1ACBEB08C(76194);
        goto LABEL_203;
      }
      v143 = a2;
      v32 = **(_QWORD **)(a1 + 48);
      if (*(_DWORD *)(v32 + 96) >= v31)
      {
        v40 = 0;
        goto LABEL_88;
      }
      v146 = v22;
      v138 = a8;
      v21 = 0;
      v139 = *(_DWORD *)(a1 + 92);
      v140 = (*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00;
      v145 = **(_QWORD **)(a1 + 48);
      v33 = v32 + 100;
      for (i = 1; i != 5; ++i)
      {
        v36 = *(unsigned int *)(v33 + 4 * i);
        if (v31 > v36)
        {
          v37 = v31;
          while (1)
          {
            if (*(_BYTE *)(a1 + 63))
              goto LABEL_62;
            v38 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), (i + 3), 1, 10);
            v21 = v38;
            if (!v15 || v38 != 5)
              break;
            if (!v15(a5))
              goto LABEL_75;
          }
          if (v38)
          {
            if (v38 == 5)
            {
              v15 = 0;
              v31 = v36;
            }
            else
            {
              if (v38 != 773)
              {
                v22 = v146;
                goto LABEL_203;
              }
              LODWORD(v155) = 0;
              v39 = *(_QWORD *)(a1 + 8);
              if (*(_QWORD *)v39)
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v39 + 80))(v39, 34, &v155);
LABEL_75:
              v15 = 0;
              v21 = 5;
              v31 = v36;
            }
          }
          else
          {
LABEL_62:
            if (i == 1)
              v35 = v37;
            else
              v35 = -1;
            *(_DWORD *)(v33 + 4 * i) = v35;
            if (!*(_BYTE *)(a1 + 63))
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), (i + 3), 1, 9);
            v31 = v37;
            v21 = 0;
          }
        }
      }
      v32 = v145;
      if (*(_DWORD *)(v145 + 96) >= v31)
      {
        v40 = 0;
        v22 = v146;
        goto LABEL_87;
      }
      v134 = v31;
      v41 = *(_DWORD *)(v145 + 96);
      v42 = *(unsigned int *)(a1 + 88);
      v22 = v146;
      if (sqlite3_initialize())
      {
        v21 = 7;
        goto LABEL_36;
      }
      v44 = ((unint64_t)(v42 + 4096) + 0xFFFFFFFF021) >> 12;
      v45 = v44 << 32;
      v46 = 2 * v42 + 32 * (int)v44 + 40;
      v137 = v42;
      if (v42 >= 0x1000)
        v47 = 4096;
      else
        v47 = v42;
      v48 = (unsigned int *)sub_1ACB5D828(v46 + (2 * v47));
      if (!v48)
      {
        v21 = 7;
        v22 = v146;
        goto LABEL_36;
      }
      v49 = v48;
      bzero(v48, v46);
      v49[1] = v44 + 1;
      v50 = ((unint64_t)(v41 + 4097) + 0xFFFFFFFF021) >> 12;
      v40 = v49;
      v144 = v49;
      if ((int)v50 > (int)v44)
      {
LABEL_106:
        v22 = v146;
        v32 = v145;
        while (1)
        {
          if (*(_BYTE *)(a1 + 63))
            goto LABEL_213;
          v51 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 3, 1, 10);
          v21 = v51;
          if (!v15 || v51 != 5)
            break;
          if (!v15(a5))
            goto LABEL_88;
        }
        if (v51)
        {
          if (v51 != 773)
            goto LABEL_87;
          LODWORD(v155) = 0;
          v110 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)v110)
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v110 + 80))(v110, 34, &v155);
          goto LABEL_88;
        }
LABEL_213:
        v150 = *(_DWORD *)(v145 + 96);
        *(_DWORD *)(v145 + 128) = v134;
        v111 = (v147 >> 2) & 3;
        if ((_DWORD)v111
          && (v112 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), (v147 >> 2) & 3)) != 0)
        {
          v21 = v112;
        }
        else
        {
          v113 = v139;
          *(_QWORD *)&v155 = v139 * (unint64_t)v140;
          __buf = 0;
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), 39, 0);
          v21 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), &__buf);
          if (!v21)
          {
            if (__buf < (uint64_t)v155)
            {
              if ((uint64_t)(__buf + *(unsigned int *)(a1 + 88) * (unint64_t)v140 + 0x10000) < (uint64_t)v155)
              {
                v21 = sub_1ACBEB08C(74112);
                goto LABEL_217;
              }
              v116 = *(_QWORD *)(a1 + 8);
              if (*(_QWORD *)v116)
                (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v116 + 80))(v116, 5, &v155);
            }
            v117 = v40[1];
            if ((int)v117 >= 1)
            {
              v118 = 0;
              while (1)
              {
                v119 = *v40;
                v120 = -1;
                do
                {
                  v122 = (v117 - 1);
                  v123 = &v144[8 * v122];
                  v124 = v123 + 2;
                  v125 = v123[2];
                  v126 = v123[8];
                  if (v125 < v126)
                  {
                    v127 = *((_QWORD *)v123 + 3);
                    v128 = (unsigned __int16 *)(*((_QWORD *)v123 + 2) + 2 * v125);
                    while (1)
                    {
                      v130 = *v128++;
                      v129 = v130;
                      v131 = *(_DWORD *)(v127 + 4 * v130);
                      if (v131 > v119)
                        break;
                      *v124 = ++v125;
                      if (v126 == v125)
                        goto LABEL_248;
                    }
                    if (v131 < v120)
                    {
                      v118 = v144[8 * v122 + 9] + v129;
                      v120 = v131;
                    }
                  }
LABEL_248:
                  ;
                }
                while (v117-- > 1);
                *v144 = v120;
                if (v120 == -1)
                {
                  v21 = 0;
                  goto LABEL_269;
                }
                if (*(_DWORD *)(v143 + 424))
                  break;
                if (v118 > v150 && v118 <= v134 && v120 <= v113)
                {
                  v132 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16)
                                                                                               + 16))(*(_QWORD *)(a1 + 16), v138, v140, (v140 | 0x18) * (unint64_t)(v118 - 1) + 56);
                  if (v132
                    || (v132 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v138, v140, v140 * (unint64_t)(v120 - 1)), v113 = v139, v132))
                  {
                    v21 = v132;
                    goto LABEL_269;
                  }
                }
                v40 = v144;
                v117 = v144[1];
                if ((int)v117 <= 0)
                  goto LABEL_264;
              }
              if (*(_BYTE *)(v143 + 103))
                v21 = 7;
              else
                v21 = 9;
LABEL_269:
              v22 = v146;
              v40 = v144;
              v32 = v145;
              goto LABEL_218;
            }
LABEL_264:
            v21 = 0;
            *v40 = -1;
            v22 = v146;
          }
        }
LABEL_217:
        v32 = v145;
LABEL_218:
        v114 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)v114)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v114 + 80))(v114, 37, 0);
        if (!v21
          && (v134 != *(_DWORD *)(**(_QWORD **)(a1 + 48) + 16)
           || (v21 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v140 * (unint64_t)*(unsigned int *)(a1 + 92))) == 0&& (!(_DWORD)v111|| (v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v111)) == 0)))
        {
          v21 = 0;
          *(_DWORD *)(v32 + 96) = v134;
        }
        if (!*(_BYTE *)(a1 + 63))
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 3, 1, 9);
        goto LABEL_87;
      }
      v53 = (_WORD *)((char *)v49 + v46);
      v54 = (int)v50;
      v55 = v45 >> 32;
      v136 = v45 >> 32;
      if (v54 > v45 >> 32)
        v55 = v54;
      v135 = v55;
      v133 = v49 + 6;
      v56.i64[0] = 0x8000800080008;
      v56.i64[1] = 0x8000800080008;
      v57.i64[0] = 0x10001000100010;
      v57.i64[1] = 0x10001000100010;
LABEL_123:
      __buf = 0;
      v153 = 0;
      v154 = 0;
      if (v54 < *(int *)(a1 + 40))
      {
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v54);
        v153 = v59;
        if (v59)
        {
          v60 = v54 == 0;
          v61 = 34;
          if (v54)
            v61 = 0;
          v62 = v59 + 4 * v61;
          goto LABEL_133;
        }
      }
      v63 = sub_1ACBEB628(a1, v54, &v153);
      v21 = v63;
      if (v153)
      {
        v60 = v54 == 0;
        v61 = 34;
        if (v54)
          v61 = 0;
        if (v63)
          goto LABEL_231;
        v62 = v153 + 4 * v61;
        v56.i64[0] = 0x8000800080008;
        v56.i64[1] = 0x8000800080008;
        v57.i64[0] = 0x10001000100010;
        v57.i64[1] = 0x10001000100010;
LABEL_133:
        if (v60)
          v64 = 0;
        else
          v64 = (((_DWORD)v54 << 12) - 34);
        v65 = (unint64_t)(0x4000 - 4 * v61) >> 2;
        if (v54 == v136)
          v66 = (v137 - v64);
        else
          v66 = v65;
        v67 = (int)v40[1];
        v148 = (uint64_t)&v40[8 * v67 + 2] + 2 * v64;
        v149 = v66;
        LODWORD(v154) = v64 | 1;
        v142 = v54;
        v141 = v64 | 1;
        if ((int)v66 <= 0)
        {
          v70 = 0;
          v71 = 0;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          v160 = 0u;
          v161 = 0u;
          v158 = 0u;
          v159 = 0u;
          v156 = 0u;
          v157 = 0u;
          v72 = 1;
          v155 = 0u;
          goto LABEL_171;
        }
        v68 = 32 * v67;
        if (v66 >= 0x10)
        {
          v69 = v66 & 0x7FFFFFF0;
          v73 = (int16x8_t *)((char *)v133 + 2 * v64 + v68);
          v74 = v69;
          v75 = (int16x8_t)xmmword_1ACCBDCB0;
          do
          {
            v73[-1] = v75;
            *v73 = vaddq_s16(v75, v56);
            v75 = vaddq_s16(v75, v57);
            v73 += 2;
            v74 -= 16;
          }
          while (v74);
          v66 = v149;
          if (v69 == v149)
            goto LABEL_148;
        }
        else
        {
          v69 = 0;
        }
        v76 = -v66;
        v77 = v69 + 4;
        v78 = (char *)v40 + 2 * v64 + v68;
        do
        {
          *(_WORD *)&v78[2 * v77] = v77 - 4;
          ++v77;
        }
        while (v76 + v77 != 4);
LABEL_148:
        v79 = 0;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v155 = 0u;
        while (1)
        {
          v70 = (char *)(v148 + 2 * v79);
          v81 = 0;
          v71 = 1;
          if ((v79 & 1) != 0)
            break;
LABEL_149:
          v80 = &v155 + v81;
          *((_QWORD *)v80 + 1) = v70;
          *(_DWORD *)v80 = v71;
          ++v79;
          LODWORD(v66) = v149;
          if (v79 == v149)
          {
            v72 = v81 + 1;
            if (v81 + 1 > 0xC)
              goto LABEL_122;
LABEL_171:
            v95 = v72;
            while (2)
            {
              if (((v66 >> v95) & 1) == 0)
                goto LABEL_173;
              v96 = &v155 + v95;
              v97 = (unsigned __int16 *)*((_QWORD *)v96 + 1);
              v98 = *(_DWORD *)v96;
              v99 = v98 > 0;
              v100 = v71 > 0;
              if (v71 <= 0 && v98 < 1)
              {
                v71 = 0;
                goto LABEL_172;
              }
              v101 = 0;
              v102 = 0;
              v103 = 0;
              while (2)
              {
                if (!v99)
                {
                  v106 = v102;
LABEL_184:
                  ++v102;
                  v105 = (unsigned __int16 *)&v70[2 * v106];
                  goto LABEL_185;
                }
                v104 = v103;
                if (v100
                  && *(_DWORD *)(v62 + 4 * v97[v103]) >= *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v102]))
                {
                  v106 = v102;
                  goto LABEL_184;
                }
                ++v103;
                v105 = &v97[v104];
LABEL_185:
                v107 = *v105;
                v108 = *(_DWORD *)(v62 + 4 * v107);
                v53[v101] = v107;
                if (v103 < v98 && *(_DWORD *)(v62 + 4 * v97[v103]) == v108)
                  ++v103;
                v99 = v103 < v98;
                ++v101;
                v100 = v102 < v71;
                if (v102 < v71 || v103 < v98)
                  continue;
                break;
              }
              v71 = v101;
LABEL_172:
              memcpy(v97, v53, (2 * v71));
              v70 = (char *)v97;
              v56.i64[0] = 0x8000800080008;
              v56.i64[1] = 0x8000800080008;
              v57.i64[0] = 0x10001000100010;
              v57.i64[1] = 0x10001000100010;
              LODWORD(v66) = v149;
LABEL_173:
              if ((_DWORD)++v95 != 13)
                continue;
              break;
            }
LABEL_122:
            v40 = v144;
            v58 = &v144[8 * v142];
            v58[8] = v71;
            v58[9] = v141;
            *((_QWORD *)v58 + 2) = v148;
            *((_QWORD *)v58 + 3) = v62;
            v54 = v142 + 1;
            if (v142 == v135)
              goto LABEL_106;
            goto LABEL_123;
          }
        }
        v82 = (char *)(v148 + 2 * v79);
LABEL_153:
        v83 = &v155 + v81;
        v70 = (char *)*((_QWORD *)v83 + 1);
        v84 = *(_DWORD *)v83;
        v85 = v84 > 0;
        v86 = v71 > 0;
        if (v71 <= 0 && v84 < 1)
        {
          v71 = 0;
          goto LABEL_152;
        }
        v87 = 0;
        v88 = 0;
        v89 = 0;
        while (1)
        {
          if (v85)
          {
            v90 = v89;
            if (!v86
              || *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v89]) < *(_DWORD *)(v62
                                                                                         + 4
                                                                                         * *(unsigned __int16 *)&v82[2 * v88]))
            {
              ++v89;
              v91 = &v70[2 * v90];
              goto LABEL_163;
            }
            v92 = v88;
          }
          else
          {
            v92 = v88;
          }
          ++v88;
          v91 = &v82[2 * v92];
LABEL_163:
          v93 = *(unsigned __int16 *)v91;
          v94 = *(_DWORD *)(v62 + 4 * v93);
          v53[v87] = v93;
          if (v89 < v84 && *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v89]) == v94)
            ++v89;
          v85 = v89 < v84;
          ++v87;
          v86 = v88 < v71;
          if (v88 >= v71 && v89 >= v84)
          {
            v71 = v87;
LABEL_152:
            memcpy(v70, v53, (2 * v71));
            ++v81;
            v82 = v70;
            v56.i64[0] = 0x8000800080008;
            v56.i64[1] = 0x8000800080008;
            v57.i64[0] = 0x10001000100010;
            v57.i64[1] = 0x10001000100010;
            if (((v79 >> v81) & 1) == 0)
              goto LABEL_149;
            goto LABEL_153;
          }
        }
      }
      if (v63 <= 1)
        v21 = 1;
      else
        v21 = v63;
LABEL_231:
      v115 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        v22 = v146;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v40);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v40);
        v40 = (unsigned int *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
        {
          v32 = v145;
LABEL_87:
          if (v21 != 5)
          {
LABEL_89:
            if (v22 && !v21)
            {
              if (*(_DWORD *)(v32 + 96) < *(_DWORD *)(a1 + 88))
              {
LABEL_92:
                v21 = 5;
                goto LABEL_196;
              }
              if (v22 >= 2)
              {
                LODWORD(__buf) = 0;
                sqlite3_initialize();
                arc4random_buf(&__buf, 4uLL);
                while (1)
                {
                  if (*(_BYTE *)(a1 + 63))
                    goto LABEL_117;
                  v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 4, 4, 10);
                  v21 = v43;
                  if (!v15 || v43 != 5)
                    break;
                  if (!v15(a5))
                    goto LABEL_92;
                }
                if (!v43)
                {
LABEL_117:
                  if (v22 == 3)
                  {
                    sub_1ACBEB460(a1, __buf);
                    v21 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 0);
                  }
                  else
                  {
                    v21 = 0;
                  }
                  if (!*(_BYTE *)(a1 + 63))
                    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 4, 4, 9);
                  goto LABEL_196;
                }
                if (v43 != 773)
                  goto LABEL_196;
                LODWORD(v155) = 0;
                v52 = *(_QWORD *)(a1 + 8);
                if (*(_QWORD *)v52)
                  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v52 + 80))(v52, 34, &v155);
                goto LABEL_92;
              }
              v21 = 0;
            }
LABEL_196:
            if (v40)
            {
              v109 = (uint64_t (**)(unsigned int *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888 -= (int)off_1ECD3B178(v40);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v40);
                v40 = (unsigned int *)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_203;
                v109 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
              }
              (*v109)(v40);
            }
LABEL_203:
            if (v21 == 5 || !v21)
            {
              if (a9)
                *a9 = *(_DWORD *)(a1 + 88);
              if (a10)
                *a10 = *(_DWORD *)(**(_QWORD **)(a1 + 48) + 96);
            }
            goto LABEL_36;
          }
LABEL_88:
          v21 = 0;
          goto LABEL_89;
        }
        v115 = (uint64_t (**)(unsigned int *))&xmmword_1ECD3B1D0;
      }
      else
      {
        v22 = v146;
      }
      v32 = v145;
      (*v115)(v40);
      v40 = 0;
      goto LABEL_87;
    }
  }
LABEL_36:
  if (v151)
  {
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
  }
  LODWORD(v155) = 0;
  v28 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v28)
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v28 + 80))(v28, 34, &v155);
  *(_QWORD *)(a1 + 152) = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    if (!*(_BYTE *)(a1 + 63))
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 0, 1, 9);
    *(_BYTE *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_BYTE *)(a1 + 67) = 0;
  }
  if (*(_BYTE *)(a1 + 65))
  {
    if (!*(_BYTE *)(a1 + 63))
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), 1, 1, 9);
    *(_BYTE *)(a1 + 65) = 0;
  }
  if (v21 == 773)
    v29 = 5;
  else
    v29 = v21;
  if (v29)
    v30 = 1;
  else
    v30 = v22 == a3;
  if (v30)
    return v29;
  else
    return 5;
}

uint64_t sub_1ACBB0580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  char __strerrbuf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 160) || (v5 = a2, (v6 = *(_QWORD *)(a1 + 64)) != 0) && *(_DWORD *)(*(_QWORD *)v6 + 168))
  {
    sqlite3_log(27, "denying truncate of invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 72);
    if ((int)v7 >= 1)
      v5 = (a2 + v7 - 1) / v7 * v7;
    v8 = *(unsigned int *)(a1 + 24);
    while (1)
    {
      v9 = off_1EECAC958(v8, v5);
      if ((v9 & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_13;
    }
    if (v9)
    {
LABEL_13:
      *(_DWORD *)(a1 + 32) = *__error();
      v10 = *(const char **)(a1 + 56);
      v11 = *__error();
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v11, __strerrbuf, 0x4FuLL);
      v12 = &byte_1ACCBEAEE;
      if (v10)
        v12 = v10;
      v3 = 1546;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44693, v11, "ftruncate", v12, __strerrbuf);
      return v3;
    }
    v3 = 0;
    if (v5 < *(_QWORD *)(a1 + 80))
      *(_QWORD *)(a1 + 80) = v5;
  }
  return v3;
}

uint64_t sub_1ACBB0704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 0;
  if (a3 < 2)
    return sub_1ACBEB08C(83536);
  v3 = a3;
  if (*(_DWORD *)(a1 + 64) < a3)
    return sub_1ACBEB08C(83536);
  v6 = a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (!a2)
  {
    v9 = *(_QWORD *)a1;
    v10 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 336) + 72), a3, 0);
    if (v10)
    {
      v11 = (uint64_t *)v10;
      v12 = *(_QWORD **)(v10 + 8);
      if (*v12)
      {
        ++*(_QWORD *)(*(_QWORD *)(v9 + 336) + 24);
        ++v12[7];
        goto LABEL_10;
      }
      v12 = (_QWORD *)sub_1ACBEC2A8(*(_QWORD *)(v9 + 336), v3, v11);
      if (v12)
      {
LABEL_10:
        v6 = v12[2];
        if (*(_DWORD *)(v6 + 4) != v3)
        {
          v13 = v12[1];
          *(_QWORD *)(v6 + 112) = v12;
          *(_QWORD *)(v6 + 72) = a1;
          *(_QWORD *)(v6 + 80) = v13;
          *(_DWORD *)(v6 + 4) = v3;
          *(_BYTE *)(v6 + 9) = 0;
        }
        goto LABEL_13;
      }
    }
    v6 = 0;
LABEL_13:
    v36 = v6;
    goto LABEL_14;
  }
  v36 = a2;
  v8 = *(_QWORD *)(a2 + 112);
  ++*(_QWORD *)(v8 + 56);
  ++*(_QWORD *)(*(_QWORD *)(v8 + 24) + 24);
LABEL_14:
  v14 = *(_QWORD *)(v7 + 112);
  v15 = *(_DWORD **)(v14 + 40);
  if ((*(_WORD *)(v14 + 52) & 4) != 0 && v15[8] >= *(_DWORD *)(v14 + 48))
  {
    if (!v15[32])
    {
      v35 = 0;
      goto LABEL_34;
    }
    v17 = sub_1ACBEA110(v14);
  }
  else
  {
    v16 = v15[12];
    if ((_DWORD)v16)
      goto LABEL_23;
    if (v15[46] <= v15[50])
      v17 = sub_1ACB9A818(v14);
    else
      v17 = sub_1ACBEDEA4(v14);
  }
  v16 = v17;
  v35 = v17;
  if ((_DWORD)v17)
    goto LABEL_23;
LABEL_34:
  v23 = *(_QWORD *)(v7 + 80);
  v24 = bswap32(*(_DWORD *)(v23 + 36));
  *(_DWORD *)(v23 + 36) = bswap32(v24 + 1);
  if ((*(_WORD *)(a1 + 40) & 4) == 0)
  {
    if (*(_BYTE *)(a1 + 33))
      goto LABEL_36;
    goto LABEL_53;
  }
  if (!v6)
  {
    v16 = sub_1ACBED8B0(a1, v3, &v36);
    v6 = v36;
    if ((_DWORD)v16)
      goto LABEL_23;
  }
  v25 = *(_QWORD *)(v6 + 112);
  v26 = *(_DWORD **)(v25 + 40);
  if ((*(_WORD *)(v25 + 52) & 4) != 0 && v26[8] >= *(_DWORD *)(v25 + 48))
  {
    if (!v26[32])
    {
      v35 = 0;
      goto LABEL_52;
    }
    v27 = sub_1ACBEA110(v25);
  }
  else
  {
    v16 = v26[12];
    if ((_DWORD)v16)
      goto LABEL_24;
    if (v26[46] <= v26[50])
      v27 = sub_1ACB9A818(v25);
    else
      v27 = sub_1ACBEDEA4(v25);
  }
  v16 = v27;
  v35 = v27;
  if ((_DWORD)v27)
    goto LABEL_24;
LABEL_52:
  bzero(*(void **)(v6 + 80), *(unsigned int *)(*(_QWORD *)(v6 + 72) + 52));
  if (*(_BYTE *)(a1 + 33))
  {
LABEL_36:
    sub_1ACBAF160((_DWORD *)a1, v3, 2, 0, &v35);
    v16 = v35;
    if (v35)
      goto LABEL_23;
  }
LABEL_53:
  if (v24)
  {
    v24 = bswap32(*(_DWORD *)(*(_QWORD *)(v7 + 80) + 32));
    if (v24 > *(_DWORD *)(a1 + 64))
    {
      v28 = sub_1ACBEB08C(83583);
LABEL_68:
      v16 = v28;
      goto LABEL_23;
    }
    v28 = sub_1ACBED8B0(a1, v24, &v37);
    if ((_DWORD)v28)
      goto LABEL_68;
    v29 = v37;
    v30 = bswap32(*(_DWORD *)(*(_QWORD *)(v37 + 80) + 4));
    v31 = *(_DWORD *)(a1 + 56) >> 2;
    if (v30 > v31 - 2)
    {
      v28 = sub_1ACBEB08C(83594);
      goto LABEL_68;
    }
    if (v30 < v31 - 8)
    {
      v28 = sub_1ACB9A7C8(*(_QWORD *)(v37 + 112));
      if (!(_DWORD)v28)
      {
        *(_DWORD *)(*(_QWORD *)(v29 + 80) + 4) = bswap32(v30 + 1);
        *(_DWORD *)(*(_QWORD *)(v29 + 80) + 4 * v30 + 8) = bswap32(v3);
        if (v6)
        {
          if ((*(_WORD *)(a1 + 40) & 4) == 0)
          {
            v32 = *(_QWORD *)(v6 + 112);
            v33 = *(_QWORD *)(v32 + 40);
            if (!*(_BYTE *)(v33 + 16))
            {
              v34 = *(_WORD *)(v32 + 52);
              if ((v34 & 2) != 0 && !*(_DWORD *)(v33 + 128))
                *(_WORD *)(v32 + 52) = v34 & 0xFFEB | 0x10;
            }
          }
        }
        v28 = sub_1ACBF8B04(a1, v3);
      }
      goto LABEL_68;
    }
  }
  if (v6 || (v16 = sub_1ACBED8B0(a1, v3, &v36), v6 = v36, !(_DWORD)v16))
  {
    v16 = sub_1ACB9A7C8(*(_QWORD *)(v6 + 112));
    if (!(_DWORD)v16)
    {
      **(_DWORD **)(v6 + 80) = bswap32(v24);
      *(_DWORD *)(*(_QWORD *)(v6 + 80) + 4) = 0;
      *(_DWORD *)(*(_QWORD *)(v7 + 80) + 32) = bswap32(v3);
    }
    goto LABEL_24;
  }
LABEL_23:
  if (!v6)
    goto LABEL_26;
LABEL_24:
  *(_BYTE *)v6 = 0;
  v18 = *(_QWORD *)(v6 + 112);
  if ((*(_WORD *)(v18 + 52) & 0x20) == 0)
  {
    sub_1ACBE906C(v18);
LABEL_26:
    v19 = v37;
    if (!v37)
      return v16;
LABEL_29:
    v21 = *(_QWORD *)(v19 + 112);
    if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
    {
      v22 = *(_QWORD *)(v21 + 40);
      --*(_DWORD *)(v22 + 152);
      *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 168);
      *(_QWORD *)(v22 + 168) = v21;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v22 + 72) + 144))(*(_QWORD *)(v22 + 72), *(_QWORD *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1), *(_QWORD *)(v21 + 8));
    }
    else
    {
      sub_1ACBE906C(v21);
    }
    return v16;
  }
  v20 = *(_QWORD *)(v18 + 40);
  --*(_DWORD *)(v20 + 152);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v20 + 168);
  *(_QWORD *)(v20 + 168) = v18;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v20 + 72) + 144))(*(_QWORD *)(v20 + 72), *(_QWORD *)(v20 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(_QWORD *)(v18 + 8));
  v19 = v37;
  if (v37)
    goto LABEL_29;
  return v16;
}

const char *__cdecl sqlite3_bind_parameter_name(sqlite3_stmt *a1, int a2)
{
  uint64_t v4;
  int v5;
  const char *v6;

  if (!a1)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    xmmword_1ECD3B1C0();
  v4 = *((_QWORD *)a1 + 22);
  if (v4)
  {
    v5 = 2;
    while (*(_DWORD *)(v4 + 4 * v5) != a2)
    {
      v5 += *(_DWORD *)(v4 + 4 * v5 + 4);
      if (v5 >= *(_DWORD *)(v4 + 4))
        goto LABEL_8;
    }
    v6 = (const char *)(v4 + 4 * v5 + 8);
  }
  else
  {
LABEL_8:
    v6 = 0;
  }
  if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    xmmword_1ECD3B1D0();
  return v6;
}

uint64_t sub_1ACBB0C74(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  result = sub_1ACB8A058((unsigned __int8 *)a2);
  if ((_DWORD)result == 16)
  {
    result = 0;
    *a3 = 0;
  }
  else if (!(_DWORD)result)
  {
    v7 = 0;
    while (1)
    {
      if (*(_DWORD *)(a1 + 424))
        return 0;
      v8 = *(_QWORD *)(a2 + 136);
      if (*(_BYTE *)(v8 + 8))
        break;
      v10 = *(unsigned __int16 *)(v8 + 24);
      if (!*(_BYTE *)(v8 + 1))
        v7 += v10;
LABEL_16:
      v15 = *(unsigned __int16 *)(a2 + 86);
      if ((_DWORD)v15 == (_DWORD)v10)
        v16 = (unsigned int *)(*(unsigned __int8 *)(v8 + 9) + *(_QWORD *)(v8 + 80) + 8);
      else
        v16 = (unsigned int *)(*(_QWORD *)(v8 + 80)
                             + ((*(unsigned __int8 *)(*(_QWORD *)(v8 + 96) + 2 * v15 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(v8 + 96) + 2 * v15) << 8)) & (unint64_t)*(unsigned __int16 *)(v8 + 26)));
      result = sub_1ACB8A3D0(a2, bswap32(*v16));
      if ((_DWORD)result)
        return result;
    }
    v7 += *(unsigned __int16 *)(v8 + 24);
    while (1)
    {
      v11 = *(char *)(a2 + 84);
      if (!*(_BYTE *)(a2 + 84))
        break;
      *(_WORD *)(a2 + 70) = 0;
      *(_BYTE *)(a2 + 1) &= 0xF9u;
      *(_WORD *)(a2 + 86) = *(_WORD *)(a2 + 2 * v11 + 86);
      v12 = v11 - 1;
      *(_BYTE *)(a2 + 84) = v12;
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a2 + 8 * v12 + 144);
      v13 = *(_QWORD *)(v8 + 112);
      if ((*(_BYTE *)(v13 + 52) & 0x20) != 0)
      {
        v14 = *(_QWORD *)(v13 + 40);
        --*(_DWORD *)(v14 + 152);
        *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 168);
        *(_QWORD *)(v14 + 168) = v13;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v14 + 72) + 144))(*(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1), *(_QWORD *)(v13 + 8));
      }
      else
      {
        sub_1ACBE906C(v13);
      }
      v9 = *(unsigned __int16 *)(a2 + 86);
      v8 = *(_QWORD *)(a2 + 136);
      LODWORD(v10) = *(unsigned __int16 *)(v8 + 24);
      if (v9 < v10)
      {
        *(_WORD *)(a2 + 86) = v9 + 1;
        goto LABEL_16;
      }
    }
    *a3 = v7;
    return sub_1ACB8A058((unsigned __int8 *)a2);
  }
  return result;
}

_QWORD *sub_1ACBB0E20(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;

  if (a2)
  {
    v3 = result;
    v4 = (_QWORD *)a2[7];
    v5 = (unsigned __int8 *)v4[5];
    if (v5)
      sub_1ACBF8348(result, v5);
    v6 = (_QWORD *)v4[6];
    if (v6)
      sub_1ACC010B0(v3, v6);
    v7 = v4[2];
    if (v7)
      sub_1ACB7E704(v3, v7, 1);
    v8 = (unsigned __int8 *)a2[3];
    if (v8)
      sub_1ACBF8348(v3, v8);
    return sub_1ACBE0F9C(v3, a2);
  }
  return result;
}

int sqlite3_open16(const void *filename, sqlite3 **ppDb)
{
  int result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;

  if (!ppDb)
    return sub_1ACBBE20C(189104);
  *ppDb = 0;
  result = sqlite3_initialize();
  if (!result)
  {
    v5 = sub_1ACB5D828(64);
    if (!v5)
      return 7;
    v6 = v5;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    if (filename)
      v7 = (char *)filename;
    else
      v7 = (char *)&unk_1ACCB6C04;
    *(_OWORD *)v5 = 0uLL;
    *(_OWORD *)(v5 + 16) = 0uLL;
    *(_WORD *)(v5 + 20) = 1;
    *(_QWORD *)(v5 + 24) = 0;
    sub_1ACB57870(v5, v7, -1, 2u, 0);
    v8 = *(unsigned __int16 *)(v6 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
    {
      if ((v8 & 1) != 0)
        goto LABEL_18;
      v9 = (char *)sub_1ACBF2B64((int *)v6, 1);
      if (!v9)
        goto LABEL_18;
    }
    else
    {
      v9 = *(char **)(v6 + 8);
      if (!v9)
      {
LABEL_18:
        v11 = 7;
LABEL_19:
        if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32))
          sub_1ACBF2A04(v6);
        sub_1ACBE0F9C(*(_QWORD **)(v6 + 24), (_QWORD *)v6);
        return v11;
      }
    }
    v10 = sub_1ACB55484(v9, (uint64_t *)ppDb, 6u, 0);
    v11 = v10;
    if (!v10)
    {
      v12 = *(_QWORD *)(*((_QWORD *)*ppDb + 4) + 24);
      v11 = 0;
      if ((*(_WORD *)(v12 + 114) & 1) == 0)
      {
        *((_BYTE *)*ppDb + 100) = 2;
        *(_BYTE *)(v12 + 113) = 2;
      }
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1ACBB0FEC(int *a1, int a2)
{
  __int16 v4;
  int v5;
  signed int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  _BYTE *v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  char v33;
  uint64_t result;
  _BYTE *v35;
  unsigned __int8 *v36;
  __int16 v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 v41;
  int v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  unsigned int v49;
  char v51;
  unsigned __int8 *v52;
  __int16 v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  char *v63;
  unint64_t v64;
  char *v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  unint64_t v69;
  int8x8_t v70;
  char v71;
  int8x8x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;

  if (a2 == 1 || *((_BYTE *)a1 + 22) == 1)
  {
    v15 = a1[4];
    v16 = v15;
    if (a2 == 1)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      a1[4] = v16;
      v17 = (4 * (v16 >> 1)) | 1;
      v15 &= ~1u;
    }
    else
    {
      v17 = 2 * v15 + 2;
    }
    v18 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
    v19 = *((_QWORD *)a1 + 3);
    if (v19)
    {
      v20 = sub_1ACBE1124(v19, v17);
      if (!v20)
        return 7;
    }
    else
    {
      v20 = sub_1ACB5D828(v17);
      if (!v20)
        return 7;
    }
    v21 = &v18[v16];
    v22 = *((unsigned __int8 *)a1 + 22);
    if (v22 != 1)
    {
      if (v22 == 2)
      {
        v23 = (_BYTE *)v20;
        if (v15 >= 1)
        {
          v23 = (_BYTE *)v20;
          do
          {
            v28 = *v18;
            v29 = v18 + 2;
            v30 = v18[1];
            v31 = v28 | (v30 << 8);
            if ((v30 & 0xF8) != 0xD8 || v29 >= v21)
            {
              if (v31 > 0x7F)
              {
                v33 = v28 & 0x3F | 0x80;
                if (v31 > 0x7FF)
                {
                  *v23 = (v18[1] >> 4) | 0xE0;
                  v23[1] = (v31 >> 6) & 0x3F | 0x80;
                  v23[2] = v33;
                  v23 += 3;
                }
                else
                {
                  *v23 = (v31 >> 6) | 0xC0;
                  v23[1] = v33;
                  v23 += 2;
                }
              }
              else
              {
                *v23++ = v28;
              }
            }
            else
            {
              v24 = v18[2];
              v29 = v18 + 4;
              v25 = v24 & 0x3F | 0x80;
              v26 = v24 & 0xFFFC00FF | ((v18[3] & 3) << 8) & 0x3FF | (*v18 << 10);
              v27 = ((v31 << 10) & 0xF0000) + 0x10000;
              *v23 = (v27 >> 18) | 0xF0;
              v23[1] = ((v27 & 0xFFFF0000 | (unsigned __int16)((_WORD)v28 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v26 >> 6) & 0x3F | 0x80;
              v23[3] = v25;
              v23 += 4;
            }
            v18 = v29;
          }
          while (v29 < v21);
        }
      }
      else
      {
        v23 = (_BYTE *)v20;
        if (v15 >= 1)
        {
          v23 = (_BYTE *)v20;
          do
          {
            v46 = *v18;
            v47 = v18 + 2;
            v48 = v18[1];
            v49 = v48 | (v46 << 8);
            if ((v46 & 0xF8) != 0xD8 || v47 >= v21)
            {
              if (v49 > 0x7F)
              {
                v51 = v48 & 0x3F | 0x80;
                if (v49 > 0x7FF)
                {
                  *v23 = (*v18 >> 4) | 0xE0;
                  v23[1] = (v49 >> 6) & 0x3F | 0x80;
                  v23[2] = v51;
                  v23 += 3;
                }
                else
                {
                  *v23 = (v49 >> 6) | 0xC0;
                  v23[1] = v51;
                  v23 += 2;
                }
              }
              else
              {
                *v23++ = v48;
              }
            }
            else
            {
              v47 = v18 + 4;
              v42 = v18[3];
              v43 = v42 & 0x3F | 0x80;
              v44 = v42 & 0xFFFC00FF | ((v18[2] & 3) << 8) & 0x3FF | (v18[1] << 10);
              v45 = ((v49 << 10) & 0xF0000) + 0x10000;
              *v23 = (v45 >> 18) | 0xF0;
              v23[1] = ((v45 & 0xFFFF0000 | (unsigned __int16)((_WORD)v48 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v44 >> 6) & 0x3F | 0x80;
              v23[3] = v43;
              v23 += 4;
            }
            v18 = v47;
          }
          while (v47 < v21);
        }
      }
      a1[4] = (_DWORD)v23 - v20;
LABEL_91:
      *v23 = 0;
      v60 = a1[5] & 0x83D | 0x202;
      if ((a1[5] & 0x9000) != 0 || a1[8])
        sub_1ACBF2A04((uint64_t)a1);
      *((_WORD *)a1 + 10) = v60;
      *((_BYTE *)a1 + 22) = a2;
      *((_QWORD *)a1 + 1) = v20;
      *((_QWORD *)a1 + 5) = v20;
      v61 = *((_QWORD *)a1 + 3);
      if (v61 && *(_QWORD *)(v61 + 520) > v20)
      {
        if (*(_QWORD *)(v61 + 496) <= v20)
        {
          v62 = 128;
          goto LABEL_99;
        }
        if (*(_QWORD *)(v61 + 504) <= v20)
        {
          v62 = *(unsigned __int16 *)(v61 + 438);
          goto LABEL_99;
        }
      }
      v62 = off_1ECD3B178(v20);
LABEL_99:
      result = 0;
      a1[8] = v62;
      return result;
    }
    v35 = (_BYTE *)v20;
    if (a2 == 2)
    {
      if (v15 >= 1)
      {
        v36 = &v18[v16];
        v35 = (_BYTE *)v20;
        while (1)
        {
          v38 = *v18++;
          v37 = v38;
          v39 = v38 - 192;
          if (v38 < 0xC0)
            goto LABEL_47;
          v40 = byte_1ACCB6CF6[v39];
          if (v18 == v21)
          {
            v18 = v21;
          }
          else
          {
            while (1)
            {
              v41 = *v18;
              if ((*v18 & 0xC0) != 0x80)
                break;
              ++v18;
              v40 = v41 & 0x3F | (v40 << 6);
              if (v18 == v21)
              {
                v18 = v36;
                break;
              }
            }
          }
          v37 = -3;
          if (v40 >> 1 == 0x7FFF || v40 < 0x80 || (v40 & 0xFFFFF800) == 0xD800)
            goto LABEL_47;
          if (HIWORD(v40))
          {
            *v35 = ((v40 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v40 >> 10);
            v35[1] = ((v40 - 0x10000) >> 18) & 3 | 0xD8;
            v35[2] = v40;
            v35[3] = BYTE1(v40) & 3 | 0xDC;
            v35 += 4;
            if (v18 >= v21)
              break;
          }
          else
          {
            v37 = v40;
LABEL_47:
            *(_WORD *)v35 = v37;
            v35 += 2;
            if (v18 >= v21)
              break;
          }
        }
      }
LABEL_90:
      a1[4] = (_DWORD)v35 - v20;
      *v35 = 0;
      v23 = v35 + 1;
      goto LABEL_91;
    }
    if (v15 < 1)
      goto LABEL_90;
    v52 = &v18[v16];
    v35 = (_BYTE *)v20;
    while (1)
    {
      v57 = *v18++;
      v53 = v57;
      v58 = v57 - 192;
      if (v57 >= 0xC0)
      {
        v55 = byte_1ACCB6CF6[v58];
        if (v18 == v21)
        {
          v18 = v21;
        }
        else
        {
          while (1)
          {
            v59 = *v18;
            if ((*v18 & 0xC0) != 0x80)
              break;
            ++v18;
            v55 = v59 & 0x3F | (v55 << 6);
            if (v18 == v21)
            {
              v18 = v52;
              break;
            }
          }
        }
        v53 = -3;
        if (v55 >> 1 != 0x7FFF && v55 >= 0x80 && (v55 & 0xFFFFF800) != 0xD800)
        {
          if (HIWORD(v55))
          {
            *v35 = ((v55 - 0x10000) >> 18) & 3 | 0xD8;
            v35[1] = ((v55 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v55 >> 10);
            v54 = v35 + 3;
            v35[2] = BYTE1(v55) & 3 | 0xDC;
            v56 = 4;
            goto LABEL_78;
          }
          v53 = v55;
        }
      }
      *v35 = HIBYTE(v53);
      v54 = v35 + 1;
      LOBYTE(v55) = v53;
      v56 = 2;
LABEL_78:
      v35 += v56;
      *v54 = v55;
      if (v18 >= v21)
        goto LABEL_90;
    }
  }
  v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) == 0)
    goto LABEL_15;
  if ((a1[5] & 0x400) != 0)
  {
    v5 = a1[4];
    v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0)
        goto LABEL_11;
      v6 = 1;
    }
    if (sub_1ACB7E454((uint64_t)a1, v6, 1))
      return 7;
    bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    v4 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v4;
  }
LABEL_11:
  if (!a1[8] || *((_QWORD *)a1 + 1) != *((_QWORD *)a1 + 5))
  {
    if (!sub_1ACBF2D6C((uint64_t)a1))
    {
      v4 = *((_WORD *)a1 + 10);
      goto LABEL_15;
    }
    return 7;
  }
LABEL_15:
  *((_WORD *)a1 + 10) = v4 & 0xBFFF;
  v7 = a1[4] & 0xFFFFFFFFFFFFFFFELL;
  if ((int)v7 >= 1)
  {
    v8 = *((_QWORD *)a1 + 1);
    v9 = v8 + v7;
    v10 = v8 + 2;
    if (v9 > v8 + 2)
      v10 = v9;
    v11 = v10 + ~v8;
    v12 = (char *)*((_QWORD *)a1 + 1);
    if (v11 >= 0xE)
    {
      v13 = (v11 >> 1) + 1;
      if (v11 < 0x3E)
      {
        v14 = 0;
        goto LABEL_105;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFE0;
      v63 = (char *)(v8 + 32);
      v64 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = v63 - 32;
        v73 = vld2q_s8(v65);
        v74 = vld2q_s8(v63);
        v66 = v73.val[0];
        v67 = v74.val[0];
        vst2q_s8(v65, *(int8x16x2_t *)((char *)&v73 + 16));
        vst2q_s8(v63, *(int8x16x2_t *)((char *)&v74 + 16));
        v63 += 64;
        v64 -= 32;
      }
      while (v64);
      if (v13 == v14)
        goto LABEL_112;
      if ((v13 & 0x18) != 0)
      {
LABEL_105:
        v12 = (char *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF8));
        v68 = (char *)(v8 + 2 * v14);
        v69 = v14 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v72 = vld2_s8(v68);
          v70 = v72.val[0];
          vst2_s8(v68, *(int8x8x2_t *)((char *)&v72 + 8));
          v68 += 16;
          v69 += 8;
        }
        while (v69);
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_112;
        goto LABEL_111;
      }
      v12 = (char *)(v8 + 2 * v14);
    }
    do
    {
LABEL_111:
      v71 = *v12;
      *v12 = v12[1];
      v12[1] = v71;
      v12 += 2;
    }
    while ((unint64_t)v12 < v9);
  }
LABEL_112:
  result = 0;
  *((_BYTE *)a1 + 22) = a2;
  return result;
}

int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1ACBB16CC((uint64_t)db, (char *)zSql, nByte, 128, ppStmt, pzTail);
}

uint64_t sub_1ACBB16CC(uint64_t a1, char *__s, int a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  int v9;
  int v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  int v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v9 = a3;
  v35 = 0;
  if (a6)
    *a6 = 0;
  if (!a5)
    return sub_1ACBBE20C(148808);
  *a5 = 0;
  if (!a1)
  {
    v13 = "NULL";
    goto LABEL_24;
  }
  v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 == 186)
  {
LABEL_8:
    v13 = "unopened";
LABEL_24:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1ACBBE20C(148812);
  }
  if (v12 != 118)
  {
    if (v12 != 109)
    {
      v13 = "invalid";
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  if (!__s)
    return sub_1ACBBE20C(148812);
  if ((a3 & 0x80000000) == 0 && a3)
  {
    v15 = 0;
    do
    {
      if (!__s[v15] && !__s[v15 + 1])
        break;
      v15 += 2;
    }
    while ((int)v15 < a3);
    v9 = v15;
  }
  v16 = *(_QWORD *)(a1 + 24);
  if (v16)
    xmmword_1ECD3B1C0(v16);
  v39 = 0u;
  v40 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = a1;
  sub_1ACB57870((uint64_t)&v36, __s, v9, 2u, 0);
  if ((v37 & 0x200000000) != 0)
  {
    if (BYTE6(v37) != 1)
      sub_1ACBB0FEC((int *)&v36, 1);
  }
  else
  {
    BYTE6(v37) = 1;
  }
  if (*(_BYTE *)(a1 + 103))
  {
    if (WORD2(v37) & 0x9000 | v39)
      sub_1ACBF2A04((uint64_t)&v36);
    goto LABEL_47;
  }
  v18 = (_QWORD *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_47:
    v19 = 0;
    goto LABEL_51;
  }
  v19 = sub_1ACB5C66C(a1, *((unsigned __int8 **)&v36 + 1), 0xFFFFFFFFLL, a4, 0, a5, &v35, v17);
  if (a6 && v35)
  {
    v20 = (unint64_t)v18 + (v35 - (_DWORD)v18);
    if ((int)v35 - (int)v18 < 0)
      v20 = -1;
    v21 = *(unsigned __int8 *)v18;
    if (*(_BYTE *)v18 && v20 > (unint64_t)v18)
    {
      v22 = 1;
      v23 = v18;
      do
      {
        v26 = v22;
        if (v21 < 0xC0)
        {
          v24 = *((unsigned __int8 *)v23 + 1);
          v23 = (_QWORD *)((char *)v23 + 1);
          v21 = v24;
        }
        else
        {
          do
          {
            v27 = *((unsigned __int8 *)v23 + 1);
            v23 = (_QWORD *)((char *)v23 + 1);
            v21 = v27;
          }
          while ((v27 & 0xC0) == 0x80);
        }
        ++v22;
        if (v21)
          v25 = (unint64_t)v23 >= v20;
        else
          v25 = 1;
      }
      while (!v25);
      v31 = __s + 1;
      v28 = __s + 1;
      do
      {
        v32 = *v28;
        v28 += 2;
        if ((v32 & 0xFC) == 0xD8)
        {
          v33 = v31[2] & 0xFC;
          v34 = v31 + 4;
          if (v33 == 220)
            v28 = v34;
        }
        v31 = v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      LODWORD(v28) = (_DWORD)__s + 1;
    }
    *a6 = &__s[(int)v28 + ~(_DWORD)__s];
  }
  sub_1ACBE0F9C((_QWORD *)a1, v18);
  if (v19)
    goto LABEL_53;
LABEL_51:
  if (*(_BYTE *)(a1 + 103))
  {
LABEL_53:
    v29 = sub_1ACBF2990(a1, v19);
    goto LABEL_54;
  }
  v29 = 0;
LABEL_54:
  v30 = *(_QWORD *)(a1 + 24);
  if (v30)
    xmmword_1ECD3B1D0(v30);
  return v29;
}

int sqlite3_data_count(sqlite3_stmt *pStmt)
{
  int v2;

  if (!pStmt)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)pStmt + 24))
    xmmword_1ECD3B1C0();
  if (*((_QWORD *)pStmt + 20))
    v2 = *((unsigned __int16 *)pStmt + 130);
  else
    v2 = 0;
  if (*(_QWORD *)(*(_QWORD *)pStmt + 24))
    xmmword_1ECD3B1D0();
  return v2;
}

const void *__cdecl sqlite3_column_text16(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_8;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
LABEL_8:
    v6 = &qword_1ACCB6E80;
    goto LABEL_9;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
LABEL_9:
  v8 = *((unsigned __int16 *)v6 + 10);
  if ((~v8 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 2)
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      if (!a1)
        return v9;
    }
    else
    {
      v9 = (const void *)sub_1ACBF2B64((int *)v6, 2);
      if (!a1)
        return v9;
    }
  }
  else
  {
    v9 = (const void *)v6[1];
    if (!a1)
      return v9;
  }
  v10 = *(_QWORD *)a1;
  v11 = *((_DWORD *)a1 + 13);
  if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
  {
    v12 = sub_1ACBF2990(v10, v11);
    v10 = *(_QWORD *)a1;
  }
  *((_DWORD *)a1 + 13) = v12;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
    xmmword_1ECD3B1D0(v13);
  return v9;
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sub_1ACBA0CE0((uint64_t *)a1, a2, (char *)a3, (int)(a4 & 0xFFFFFFFE), (uint64_t (*)(uint64_t))a5, 2u);
}

uint64_t sub_1ACBB1B34(uint64_t a1, char *__src, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t (**v35)(_QWORD);
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v4 = a4;
  v5 = a3;
  v6 = __src;
  v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 < 1 || a4 + (int)a3 <= v8)
  {
    if (a4 < 1)
    {
      if (!a4)
      {
        v36 = *(_QWORD *)(a1 + 16);
        if (v36)
        {
          memcpy((void *)(v36 + 8), __src, (int)a3);
          return 0;
        }
      }
    }
    else if (*(_QWORD *)(a1 + 24) != a4)
    {
      sub_1ACBB1EB0(a1, a4);
    }
    if ((int)v5 >= 1)
    {
      v20 = *(_QWORD *)(a1 + 24);
      v19 = 3082;
      while (1)
      {
        v22 = *(_QWORD **)(a1 + 32);
        v24 = *(int *)(a1 + 8);
        v25 = v20 % v24;
        v26 = v24 - v20 % v24;
        if ((int)v5 >= v26)
          v27 = v26;
        else
          v27 = v5;
        if (!(_DWORD)v25)
        {
          v28 = (v24 + 8);
          v29 = sqlite3_initialize();
          if ((int)v28 < 1 || v29)
            return v19;
          v30 = (_QWORD *)sub_1ACB5D828(v28);
          if (!v30)
            return 3082;
          *v30 = 0;
          if (v22)
            v21 = v22;
          else
            v21 = (_QWORD *)(a1 + 16);
          *v21 = v30;
          *(_QWORD *)(a1 + 32) = v30;
          v22 = v30;
        }
        memcpy((char *)v22 + v25 + 8, v6, v27);
        v6 += v27;
        v20 = *(_QWORD *)(a1 + 24) + v27;
        *(_QWORD *)(a1 + 24) = v20;
        v23 = __OFSUB__((_DWORD)v5, v27);
        LODWORD(v5) = v5 - v27;
        if (((int)v5 < 0) ^ v23 | ((_DWORD)v5 == 0))
          return 0;
      }
    }
    return 0;
  }
  v10 = *(_QWORD *)a1;
  LODWORD(v11) = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 32);
  v45 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v43 = v15;
  v44 = v14;
  v41 = v17;
  v42 = v16;
  v18 = (*(uint64_t (**)(void))(v16 + 40))();
  v19 = v18;
  if ((_DWORD)v18)
  {
LABEL_10:
    if (*(_QWORD *)a1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    *(_QWORD *)a1 = v10;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v8;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 32) = v44;
    *(_QWORD *)(a1 + 48) = v45;
    *(_QWORD *)(a1 + 56) = v43;
    *(_QWORD *)(a1 + 64) = v42;
    *(_QWORD *)(a1 + 72) = v41;
    return v19;
  }
  if (v12)
  {
    v40 = v10;
    v38 = v4;
    v31 = 0;
    v32 = v12;
    v39 = v11;
    do
    {
      if (v31 + (int)v11 <= v13)
        v11 = v11;
      else
        v11 = (v13 - v31);
      v33 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v32 + 1, v11, v31);
      if ((_DWORD)v33)
      {
        v19 = v33;
        v10 = v40;
        LODWORD(v11) = v39;
        goto LABEL_10;
      }
      v31 += (int)v11;
      v32 = (_QWORD *)*v32;
    }
    while (v32);
    v4 = v38;
    do
    {
      v34 = (_QWORD *)*v12;
      v35 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v12);
        v12 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_38;
        v35 = &xmmword_1ECD3B1D0;
      }
      (*v35)(v12);
LABEL_38:
      v12 = v34;
    }
    while (v34);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v6, v5, v4);
}

uint64_t sub_1ACBB1EB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (**v9)(void);
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (**v13)(void);

  if (*(_QWORD *)(a1 + 24) > a2)
  {
    if (a2)
    {
      v4 = (_QWORD *)(a1 + 16);
      v5 = *(int *)(a1 + 8);
      do
      {
        v4 = (_QWORD *)*v4;
        if (v4)
          v6 = v5 < a2;
        else
          v6 = 0;
        v5 += *(int *)(a1 + 8);
      }
      while (v6);
      if (!v4)
      {
        v10 = 0;
        goto LABEL_31;
      }
      v7 = (_QWORD *)*v4;
      if (*v4)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          v9 = (uint64_t (**)(void))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0();
            qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v7);
            v7 = (_QWORD *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_12;
            v9 = &xmmword_1ECD3B1D0;
          }
          ((void (*)(_QWORD *))*v9)(v7);
LABEL_12:
          v7 = v8;
        }
        while (v8);
      }
      v10 = v4;
LABEL_29:
      *v4 = 0;
LABEL_31:
      *(_QWORD *)(a1 + 24) = a2;
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      return 0;
    }
    v4 = (_QWORD *)(a1 + 16);
    v11 = *(_QWORD **)(a1 + 16);
    if (!v11)
    {
LABEL_28:
      v10 = 0;
      goto LABEL_29;
    }
    while (1)
    {
      v12 = (_QWORD *)*v11;
      v13 = (uint64_t (**)(void))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0();
        qword_1ECD3E888 -= (int)off_1ECD3B178(v11);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v11);
        v11 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_22;
        v13 = &xmmword_1ECD3B1D0;
      }
      ((void (*)(_QWORD *))*v13)(v11);
LABEL_22:
      v11 = v12;
      if (!v12)
        goto LABEL_28;
    }
  }
  return 0;
}

uint64_t sub_1ACBB208C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (**v3)(void);

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t (**)(void))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0();
        qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v1);
        v1 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v3 = &xmmword_1ECD3B1D0;
      }
      ((void (*)(_QWORD *))*v3)(v1);
LABEL_4:
      v1 = v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1ACBB2160(uint64_t a1, int a2, char *__s1)
{
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  const char *v35;
  int v36;
  const char *v37;
  const char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  off_t v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  const char *v57;
  BOOL v58;
  NSObject *v59;
  int v60;
  int v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  const char *v74;
  int v75;
  BOOL v76;
  const char *v77;
  int v78;
  const char *v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  void (**v82)(const char *);
  size_t v83;
  void *v84;
  void *v85;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  int v101;
  char v102;
  int v103;
  int v104;
  int *v105;
  const char *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  char *v123;
  char *v124;
  char v125;
  int v126;
  sqlite3 *v127;
  void (**v128)(char *);
  int v129;
  int v130;
  BOOL v131;
  sqlite3 *v132;
  int v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  const char *v137;
  const char *v138;
  char *v139;
  int v140;
  size_t v141;
  char *v142;
  char *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  unsigned __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned __int8 *v163;
  uint64_t v164;
  int v165;
  BOOL v166;
  const char *v167;
  int v168;
  int v169;
  int v170;
  unsigned int __fd;
  char *v172;
  char *v173;
  unsigned int v174;
  char *__dst;
  int v176;
  unsigned int v177;
  uint64_t v178;
  int v179;
  char v180;
  int v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  sqlite3_stmt *pStmt;
  stat v187;
  sqlite3 *v188;
  char *errmsg;
  sqlite3 *__buf[129];
  char __strerrbuf[96];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      if (*(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(_QWORD *)a1 + 16) == sub_1ACB5AEB4
        && a2 != 106
        && *(_DWORD *)(a1 + 128) <= 3u
        && (*(_DWORD *)(a1 + 160) || (v34 = *(_QWORD *)(a1 + 64)) != 0 && *(_DWORD *)(*(_QWORD *)v34 + 168)))
      {
        if (a2 != 101 || !__s1 || (v7 = *(_DWORD *)__s1, (*(_DWORD *)__s1 & 0x80) == 0))
        {
          sqlite3_log(27, "denying fcntl on invalidated fd %d", *(_DWORD *)(a1 + 24));
          return 6922;
        }
        v26 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = 0;
LABEL_91:
        *(_QWORD *)&v187.st_dev = 0;
        if (*(_UNKNOWN **)a1 == &unk_1E5C730D8)
          v36 = *(_DWORD *)(a1 + 124) | 0x20;
        else
          v36 = *(_DWORD *)(a1 + 124);
        if ((v7 & 0x7F) != 0)
        {
          v37 = (const char *)sub_1ACBE3224();
          if (!v37 || (v38 = v37, v39 = strlen(v37), v39 <= 0))
          {
            sqlite3_log(1, "Truncate database failed because TMPDIR is not set correctly\n");
            v5 = 3;
            goto LABEL_302;
          }
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
        v40 = v7 & 1;
        v182 = v36;
        v41 = sub_1ACBE573C(a1, v36, (uint64_t *)&v187.st_dev);
        if (!(_DWORD)v41)
        {
          LODWORD(v42) = 0;
          if ((v7 & 1) != 0)
          {
            v184 = 0;
          }
          else
          {
            v184 = 0;
            if (*(_QWORD *)&v187.st_dev)
            {
              LODWORD(v42) = 0;
              v184 = 0;
              v40 = *(_DWORD *)(*(_QWORD *)&v187.st_dev + 8);
            }
          }
LABEL_235:
          if ((v7 & 0x7F) == 0)
          {
            v91 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_DWORD *)(a1 + 128) & 1);
            v92 = 0;
LABEL_259:
            if ((v7 & 0x80) != 0 || (v5 = v91, !(_DWORD)v91))
            {
              sub_1ACBE5E6C(a1, 0);
              v5 = 0;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, 3);
            if (v184)
            {
              v96 = *(unsigned __int8 *)(a1 + 28);
              if (v42 < v96)
              {
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
                v96 = *(unsigned __int8 *)(a1 + 28);
              }
              if (v96 > v42)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
            }
            else if (*(_QWORD *)&v187.st_dev)
            {
              sub_1ACBE61A8(*(uint64_t *)&v187.st_dev);
            }
            if ((v7 & 0x80) == 0 || !(v92 | v91))
              goto LABEL_298;
            __strlcpy_chk();
            __strlcat_chk();
            __strlcpy_chk();
            __strlcat_chk();
            if (ftruncate(*(_DWORD *)(a1 + 24), 0))
            {
              v97 = *__error();
              if (v97)
              {
                *(_DWORD *)(a1 + 32) = v97;
                v5 = 10;
                v98 = 1;
                goto LABEL_277;
              }
              v98 = 0;
            }
            else
            {
              v98 = 0;
              v97 = 0;
            }
            v5 = 0;
LABEL_277:
            v99 = sub_1ACBE1D30(__strerrbuf, 2, 0, 0);
            v100 = v99;
            if (v99 < 0)
            {
              if (*__error() != 2)
              {
LABEL_279:
                v101 = *__error();
                if (v101)
                  v102 = v98;
                else
                  v102 = 1;
                if ((v102 & 1) == 0)
                {
                  *(_DWORD *)(a1 + 32) = v101;
                  v5 = 10;
                }
LABEL_286:
                v103 = sub_1ACBE1D30((char *)__buf, 2, 0, 0);
                v104 = v103;
                if (v103 < 0)
                {
                  if (*__error() == 2)
                  {
LABEL_295:
                    if ((v100 & 0x80000000) == 0)
                    {
                      fsync(v100);
                      off_1EECAC8E0(v100);
                    }
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, 3);
LABEL_298:
                    if ((_DWORD)v5)
                    {
                      v106 = *(const char **)(a1 + 56);
                      if (!v106)
                        v106 = "<dst path null>";
                      sqlite3_log(1, "unixTruncateDatabase() failed with %d for replacing '%s' with flags %x\n", v5, v106, v182);
                    }
                    goto LABEL_302;
                  }
                }
                else if (!ftruncate(v103, 0))
                {
LABEL_294:
                  fsync(v104);
                  off_1EECAC8E0(v104);
                  goto LABEL_295;
                }
                v105 = __error();
                if (!(v101 | v97) && *v105)
                {
                  *(_DWORD *)(a1 + 32) = 0;
                  v5 = 10;
                }
                if (v104 < 0)
                  goto LABEL_295;
                goto LABEL_294;
              }
            }
            else if (ftruncate(v99, 0))
            {
              goto LABEL_279;
            }
            v101 = 0;
            goto LABEL_286;
          }
          v87 = (char *)malloc_type_calloc(1uLL, (v39 + 26), 0x6B43FFCDuLL);
          strlcpy(v87, v38, (v39 + 26));
          if (v87[v39 - 1] != 47)
            strlcat(v87, "/", (v39 + 26));
          strlcat(v87, "tmpsqlitetruncatedbXXXXXX", (v39 + 26));
          v88 = mkstemp(v87);
          if ((_DWORD)v88 == -1)
          {
            *(_DWORD *)(a1 + 32) = *__error();
            v92 = 1;
            v91 = 10;
LABEL_258:
            free(v87);
            goto LABEL_259;
          }
          v89 = v88;
          __buf[0] = 0;
          v90 = sub_1ACB55484(v87, (uint64_t *)__buf, 0x26u, 0);
          if ((_DWORD)v90)
          {
            v91 = v90;
            errmsg = 0;
          }
          else
          {
            v93 = *(_DWORD *)(a1 + 168);
            if (v93 >= 1)
              sqlite3_key_v2((uint64_t)__buf[0], "main", *(_BYTE **)(a1 + 176), v93);
            errmsg = 0;
            if ((v7 & 0x70) != 0
              && (strcpy(&__strerrbuf[44], "pragma page_size=4096"),
                  strcpy(&__strerrbuf[66], "pragma page_size=8192"),
                  strcpy(__strerrbuf, "pragma page_size=1024"),
                  strcpy(&__strerrbuf[22], "pragma page_size=2048"),
                  v94 = sqlite3_exec(__buf[0], &__strerrbuf[22 * ((v7 & 0x70) >> 4) - 22], 0, 0, &errmsg), (_DWORD)v94))
            {
              v91 = v94;
            }
            else
            {
              v107 = ((v7 & 0xC) >> 2) - 1;
              strcpy(__strerrbuf, "pragma auto_vacuum=0");
              strcpy(&__strerrbuf[21], "pragma auto_vacuum=1");
              strcpy(&__strerrbuf[42], "pragma auto_vacuum=2");
              if ((v7 & 0xC) == 0)
                v107 = 2;
              v91 = sqlite3_exec(__buf[0], &__strerrbuf[21 * v107], 0, 0, &errmsg);
              if (!(_DWORD)v91 && v40)
                v91 = sqlite3_exec(__buf[0], "pragma journal_mode=wal", 0, 0, &errmsg);
              if (!(_DWORD)v91)
                goto LABEL_251;
            }
          }
          if (__buf[0])
            sqlite3_log(1, "failed to set '%s' on truncated database %s, %d: %s\n");
          else
            sqlite3_log(1, "failed to open temp database '%s' to reset truncated database %s with flags %x: %d\n");
LABEL_251:
          if (__buf[0])
          {
            *(_DWORD *)__strerrbuf = 0;
            sqlite3_file_control(__buf[0], 0, 10, __strerrbuf);
            sub_1ACBCF268((uint64_t)__buf[0], 0);
          }
          lseek(v89, 0, 0);
          lseek(*(_DWORD *)(a1 + 24), 0, 0);
          if (sub_1ACBE5C60(v89, *(_DWORD *)(a1 + 24)))
          {
            v95 = *__error();
            if (v95 == 12)
            {
              v91 = 7;
            }
            else
            {
              *(_DWORD *)(a1 + 32) = v95;
              v91 = 10;
            }
          }
          fsync(*(_DWORD *)(a1 + 24));
          close(v89);
          unlink(v87);
          v92 = v91 != 0;
          goto LABEL_258;
        }
        v5 = v41;
        if ((_DWORD)v41 == 26 || (_DWORD)v41 == 11)
        {
          v42 = *(unsigned __int8 *)(a1 + 28);
          if (v42 > 3
            || (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 1), !(_DWORD)v5))
          {
            v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 4);
            if (!(_DWORD)v5)
            {
              v43 = 1;
LABEL_156:
              v184 = v43;
              if ((v7 & 1) != 0)
                v40 = 1;
              else
                v40 = !(*(unsigned int (**)(uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, __strerrbuf, 20, 0)&& (*(_QWORD *)__strerrbuf == 0x66206574694C5153? (v58 = *(_QWORD *)&__strerrbuf[7] == 0x332074616D726F66): (v58 = 0), v58)&& __strerrbuf[18] == 2&& __strerrbuf[19] == 2;
              goto LABEL_235;
            }
          }
          if (*(unsigned __int8 *)(a1 + 28) > v42)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v42);
          v43 = 1;
        }
        else
        {
          v43 = 0;
        }
        LODWORD(v42) = 0;
        if ((v7 & 0x80) == 0 && (_DWORD)v5)
        {
LABEL_302:
          if (v26)
            *(_QWORD *)(a1 + 152) = v26;
          return v5;
        }
        goto LABEL_156;
      }
    }
  }
  v5 = 12;
  switch(a2)
  {
    case 1:
      v5 = 0;
      *(_DWORD *)__s1 = *(unsigned __int8 *)(a1 + 28);
      return v5;
    case 2:
    case 3:
      if (a2 != 3)
      {
        if (a2 != 2)
          return 1;
        if (*(_UNKNOWN **)a1 == &unk_1E5C730D8)
        {
          v45 = *(_QWORD *)(a1 + 40);
          sub_1ACBE33A4(a1);
          v6 = *(const char **)(v45 + 24);
          if (!v6)
            v6 = ":auto: (not held)";
        }
        else
        {
          v6 = 0;
        }
        v5 = 0;
        *(_QWORD *)__s1 = v6;
        return v5;
      }
      if (!__s1)
        return *(_QWORD *)a1 == (_QWORD)&unk_1E5C730D8;
      if (*(_UNKNOWN **)a1 != &unk_1E5C730D8)
        return sub_1ACBE3AB0(a1, __s1);
      if (strcmp(__s1, ":auto:"))
      {
        v56 = *(_QWORD *)(a1 + 40);
        v57 = *(const char **)(v56 + 24);
        if (!v57 || strncmp(*(const char **)(v56 + 24), __s1, 0x400uLL))
        {
          if (*(_BYTE *)(a1 + 28))
            return 5;
          if (*__s1 && (!v57 || strncmp(v57, __s1, 0x400uLL)))
          {
            v80 = *(_QWORD *)(v56 + 16);
            *(_QWORD *)(v56 + 16) = 0;
            *(_DWORD *)(v56 + 40) = 0;
            if (!v80)
              goto LABEL_218;
            v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
            if ((_DWORD)v5)
              return v5;
            v81 = &off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888 -= (int)off_1ECD3B178(v80);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v80);
              v80 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
              {
LABEL_218:
                if (v57)
                {
                  v82 = (void (**)(const char *))&off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888 -= (int)off_1ECD3B178(v57);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v57);
                    v57 = (const char *)xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                      goto LABEL_225;
                    v82 = (void (**)(const char *))&xmmword_1ECD3B1D0;
                  }
                  (*v82)(v57);
                }
LABEL_225:
                v83 = strlen(__s1) + 1;
                v84 = (void *)sub_1ACB5D828(v83);
                v85 = v84;
                if (v84)
                  memcpy(v84, __s1, v83);
                v5 = 0;
                *(_QWORD *)(v56 + 24) = v85;
                return v5;
              }
              v81 = &xmmword_1ECD3B1D0;
            }
            (*v81)(v80);
            goto LABEL_218;
          }
        }
      }
      return 0;
    case 4:
      v5 = 0;
      *(_DWORD *)__s1 = *(_DWORD *)(a1 + 32);
      return v5;
    case 5:
      *(_QWORD *)(a1 + 136) = *(_QWORD *)__s1;
      v8 = *(_QWORD *)__s1;
      if (*(int *)(a1 + 72) < 1)
        goto LABEL_122;
      v194 = 0u;
      v193 = 0u;
      v192 = 0u;
      memset(__strerrbuf, 0, sizeof(__strerrbuf));
      if (off_1EECAC940(*(unsigned int *)(a1 + 24), __strerrbuf))
      {
        *(_DWORD *)(a1 + 32) = *__error();
        return 1802;
      }
      v46 = (v8 + *(int *)(a1 + 72) - 1) / *(int *)(a1 + 72) * *(int *)(a1 + 72);
      if (v46 <= (uint64_t)v192)
        goto LABEL_122;
      v47 = (int)v193;
      v48 = v192 + (int)v193 + ~((uint64_t)v192 % (int)v193);
      v49 = v46 - 1 + (int)v193;
      if (v48 >= v49)
        goto LABEL_122;
      do
      {
        if (v48 >= v46)
          v50 = v46 - 1;
        else
          v50 = v48;
        if (sub_1ACBE24EC(a1, v50, &byte_1ACCBEAEE, 1) != 1)
          return 778;
        v48 = v50 + v47;
      }
      while (v50 + v47 < v49);
LABEL_122:
      if (*(uint64_t *)(a1 + 96) < 1 || *(_QWORD *)(a1 + 80) >= v8)
        return 0;
      if (*(int *)(a1 + 72) > 0)
        return sub_1ACBE2EAC(a1, v8);
      v68 = *(unsigned int *)(a1 + 24);
      while (1)
      {
        v69 = off_1EECAC958(v68, v8);
        if ((v69 & 0x80000000) == 0)
          break;
        if (*__error() != 4)
          goto LABEL_203;
      }
      if (!v69)
        return sub_1ACBE2EAC(a1, v8);
LABEL_203:
      *(_DWORD *)(a1 + 32) = *__error();
      v77 = *(const char **)(a1 + 56);
      v78 = *__error();
      memset(__strerrbuf, 0, 80);
      strerror_r(v78, __strerrbuf, 0x4FuLL);
      v79 = &byte_1ACCBEAEE;
      if (v77)
        v79 = v77;
      v5 = 1546;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44826, v78, "ftruncate", v79, __strerrbuf);
      return v5;
    case 6:
      v5 = 0;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)__s1;
      return v5;
    case 10:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        v5 = 0;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 2) & 1;
      }
      else
      {
        v9 = *(_WORD *)(a1 + 30);
        v5 = 0;
        if (*(_DWORD *)__s1)
          *(_WORD *)(a1 + 30) = v9 | 4;
        else
          *(_WORD *)(a1 + 30) = v9 & 0xFFFB;
      }
      return v5;
    case 12:
      v5 = 0;
      *(_QWORD *)__s1 = sqlite3_mprintf("%s", *(const char **)(*(_QWORD *)(a1 + 8) + 24));
      return v5;
    case 13:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        v5 = 0;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 4) & 1;
      }
      else
      {
        v10 = *(_WORD *)(a1 + 30);
        v5 = 0;
        if (*(_DWORD *)__s1)
          *(_WORD *)(a1 + 30) = v10 | 0x10;
        else
          *(_WORD *)(a1 + 30) = v10 & 0xFFEF;
      }
      return v5;
    case 16:
      v11 = *(int *)(*(_QWORD *)(a1 + 8) + 8);
      if (sqlite3_initialize())
        return 0;
      v12 = (char *)sub_1ACB5D828(v11);
      if (!v12)
        return 0;
      v13 = v12;
      sub_1ACBE2D68(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8), v12);
      v5 = 0;
      *(_QWORD *)__s1 = v13;
      return v5;
    case 18:
      v14 = *(_QWORD *)__s1;
      if (*(_QWORD *)__s1 >= qword_1ECD3B270)
        v14 = qword_1ECD3B270;
      *(_QWORD *)__s1 = *(_QWORD *)(a1 + 96);
      if (v14 < 0)
        return 0;
      if (v14 == *(_QWORD *)(a1 + 96))
        return 0;
      if (*(_DWORD *)(a1 + 76))
        return 0;
      v16 = (_QWORD *)(a1 + 80);
      v15 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 96) = v14;
      if (v15 < 1)
        return 0;
      v17 = *(_QWORD *)(a1 + 104);
      if (v17)
      {
        off_1EECACAF0(v17, *(_QWORD *)(a1 + 88));
        *(_QWORD *)(a1 + 104) = 0;
        *v16 = 0;
        *(_QWORD *)(a1 + 88) = 0;
      }
      return sub_1ACBE2EAC(a1, -1);
    case 20:
      v19 = *(_QWORD *)(a1 + 16);
      if (v19)
      {
        v194 = 0u;
        v193 = 0u;
        v192 = 0u;
        memset(__strerrbuf, 0, sizeof(__strerrbuf));
        if (off_1EECAC928(*(_QWORD *)(a1 + 56), __strerrbuf))
          LODWORD(v19) = 1;
        else
          LODWORD(v19) = *(_QWORD *)&__strerrbuf[8] != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      }
      v5 = 0;
      *(_DWORD *)__s1 = v19;
      return v5;
    case 34:
      v5 = 0;
      v20 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)__s1;
      *(_DWORD *)__s1 = v20;
      return v5;
    case 40:
      *(_DWORD *)__s1 = 0;
      v21 = *(uint64_t **)(a1 + 64);
      if (!v21)
        return 0;
      v22 = *v21;
      *(_QWORD *)&__strerrbuf[16] = 0x300000000;
      *(_OWORD *)__strerrbuf = xmmword_1ACCBDC60;
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
        xmmword_1ECD3B1C0(v23);
      v24 = *(unsigned int *)(v22 + 24);
      v25 = off_1EECAC970(v24, 92);
      if (v25 != -1)
        goto LABEL_52;
      if (*__error() != 45 && *__error() != 25)
        goto LABEL_108;
      v25 = off_1EECAC970(v24, 7);
LABEL_52:
      if ((v25 & 0x80000000) == 0)
      {
        v5 = 0;
        *(_DWORD *)__s1 = *(unsigned __int16 *)&__strerrbuf[20] != 2;
      }
      else
      {
LABEL_108:
        v5 = 3850;
      }
      v44 = *(_QWORD *)(v22 + 8);
      if (v44)
        xmmword_1ECD3B1D0(v44);
      return v5;
    case 101:
      v26 = 0;
      if (__s1)
        v7 = *(_DWORD *)__s1;
      else
        LOBYTE(v7) = 0;
      goto LABEL_91;
    case 102:
      if (!__s1)
      {
        v35 = "NULL";
LABEL_154:
        v5 = 21;
        sqlite3_log(21, "API call with %s database connection pointer", v35);
        return v5;
      }
      v27 = __s1[113];
      switch(v27)
      {
        case 186:
          goto LABEL_60;
        case 118:
          v51 = *(unsigned __int8 **)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)__s1 + 4) + 8) + 8) + 320);
          if (v51 && (v53 = *v51, v51 += 2, (v52 = v53) != 0))
          {
            v54 = *(_DWORD *)(a1 + 168);
          }
          else
          {
            v54 = *(_DWORD *)(a1 + 168);
            if (v54 < 1)
            {
LABEL_186:
              v188 = 0;
              errmsg = 0;
              goto LABEL_187;
            }
            v52 = 0;
          }
          if (v52 != v54 || memcmp(v51, *(const void **)(a1 + 176), v54))
          {
            sqlite3_log(21, "Replacement SPI only supports encrypted databases when keys match");
            return sub_1ACBBE20C(45971);
          }
          goto LABEL_186;
        case 109:
LABEL_60:
          v28 = "unopened";
          break;
        default:
          v28 = "invalid";
          break;
      }
      sqlite3_log(21, "API call with %s database connection pointer", v28);
      v55 = __s1[113];
      v188 = 0;
      errmsg = 0;
      if (v55 == 186)
      {
LABEL_147:
        v35 = "unopened";
        goto LABEL_154;
      }
      if (v55 != 118)
      {
        if (v55 != 109)
        {
          v35 = "invalid";
          goto LABEL_154;
        }
        goto LABEL_147;
      }
LABEL_187:
      memset(&v187, 0, sizeof(v187));
      v70 = *(_QWORD *)(*((_QWORD *)__s1 + 4) + 8);
      if (v70)
      {
        v71 = **(_QWORD **)(v70 + 8);
        if (*(_BYTE *)(v71 + 19) || *(_UNKNOWN **)v71 == &unk_1ECD3BD38)
          v72 = (const char *)&unk_1ACCB6CCD;
        else
          v72 = *(const char **)(v71 + 216);
      }
      else
      {
        v72 = 0;
      }
      v73 = (const char *)sub_1ACBE3224();
      if (v73 && (v74 = v73, v75 = strlen(v73), v75 > 0))
      {
        if (stat(*(const char **)(a1 + 56), &v187))
          v76 = *__error() == 2;
        else
          v76 = v187.st_size == 0;
        v108 = v76;
        if (*(_UNKNOWN **)a1 == &unk_1E5C730D8)
          v109 = *(_DWORD *)(a1 + 124) | 0x20;
        else
          v109 = *(_DWORD *)(a1 + 124);
        v110 = sub_1ACBE573C(a1, v109, (uint64_t *)&errmsg);
        if (!(_DWORD)v110)
        {
          v181 = v109;
          LODWORD(v111) = 0;
          v112 = 0;
          v179 = *((_DWORD *)errmsg + 2) != 0;
          LOBYTE(v5) = 1;
          goto LABEL_329;
        }
        v5 = v110;
        if ((_DWORD)v110 == 26 || (_DWORD)v110 == 11)
        {
          v111 = *(unsigned __int8 *)(a1 + 28);
          if (v111 <= 3
            && (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 1), (_DWORD)v5)
            || (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 4), (_DWORD)v5))
          {
            if (*(unsigned __int8 *)(a1 + 28) > v111)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v111);
            return v5;
          }
          v181 = v109;
          v179 = -1;
          v112 = 1;
LABEL_329:
          v113 = *((_QWORD *)__s1 + 3);
          if (v113)
            xmmword_1ECD3B1C0(v113);
          v180 = v5;
          if (*((int *)__s1 + 10) < 1 || (v114 = *(_QWORD *)(*((_QWORD *)__s1 + 4) + 8)) == 0)
          {
            v122 = 0;
            v123 = 0;
            v124 = 0;
            v183 = 0;
            v185 = 0;
            v125 = 1;
            goto LABEL_387;
          }
          v185 = *(_QWORD *)(*((_QWORD *)__s1 + 4) + 8);
          if (*(_BYTE *)(v114 + 17))
          {
            ++*(_DWORD *)(v114 + 20);
            if (!*(_BYTE *)(v114 + 18))
            {
              sub_1ACBECF6C(v114);
              v114 = v185;
            }
          }
          v115 = *(_QWORD *)(**(_QWORD **)(v114 + 8) + 72);
          if (!*(_QWORD *)v115)
          {
            v122 = 0;
            v123 = 0;
            v124 = 0;
            v183 = 0;
LABEL_386:
            v125 = 0;
LABEL_387:
            v126 = -1;
            v5 = 2;
            v127 = v188;
            if (!v188)
            {
LABEL_389:
              if (v124)
              {
                unlink(v124);
                free(v124);
              }
              if (v123)
              {
                unlink(v123);
                free(v123);
              }
              if (v122)
              {
                unlink(v122);
                free(v122);
              }
              if ((v125 & 1) == 0)
              {
                if (*(_BYTE *)(v185 + 17))
                {
                  v134 = *(_DWORD *)(v185 + 20) - 1;
                  *(_DWORD *)(v185 + 20) = v134;
                  if (!v134)
                    sub_1ACBED048(v185);
                }
              }
              v135 = *((_QWORD *)__s1 + 3);
              if (v135)
                xmmword_1ECD3B1D0(v135);
              if ((v180 & 1) != 0)
              {
                sub_1ACBE61A8((uint64_t)errmsg);
              }
              else
              {
                v136 = *(unsigned __int8 *)(a1 + 28);
                if (v111 < v136)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
                  v136 = *(unsigned __int8 *)(a1 + 28);
                }
                if (v136 > v111)
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0);
              }
              if (!(v183 | v5) && (v126 & 0x80000000) == 0)
              {
                __buf[0] = 0;
                if (!sub_1ACB55484(*(char **)(a1 + 56), (uint64_t *)__buf, v181 | 6u, 0))
                {
                  sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
                  sqlite3_exec(__buf[0], "PRAGMA schema_version", 0, 0, 0);
                }
                if (__buf[0])
                  sub_1ACBCF268((uint64_t)__buf[0], 0);
              }
              if ((_DWORD)v5)
              {
                v137 = *(const char **)(a1 + 56);
                if (!v137)
                  v137 = "<dst path null>";
                v138 = "<src path null>";
                if (v72)
                  v138 = v72;
                sqlite3_log(1, "unixReplaceDatabase() failed with error %d for replacing '%s' with '%s' \n", v5, v137, v138);
              }
              return v5;
            }
LABEL_388:
            sub_1ACBCF268((uint64_t)v127, 0);
            v188 = 0;
            goto LABEL_389;
          }
          if ((*(_DWORD *)(v115 + 120) & 2) != 0)
            v116 = 2;
          else
            v116 = 1;
          v117 = v116 | *(_DWORD *)(v115 + 124);
          if (*(_UNKNOWN **)v115 == &unk_1E5C730D8)
            v118 = v117 | 0x20;
          else
            v118 = v117;
          v178 = v115;
          v177 = v118;
          v119 = sub_1ACB55484(*(char **)(v115 + 56), (uint64_t *)&v188, v118, 0);
          if ((_DWORD)v119)
          {
            v5 = v119;
            LODWORD(v120) = 0;
            v183 = 0;
            v121 = 0;
            v176 = -1;
          }
          else
          {
            __buf[0] = 0;
            v130 = sqlite3_file_control(v188, 0, 7, __buf);
            if (__buf[0])
              v131 = v130 == 0;
            else
              v131 = 0;
            if (v131)
              v132 = __buf[0];
            else
              v132 = (sqlite3 *)v178;
            v133 = sub_1ACBE5BAC((uint64_t)v132);
            v176 = v133 == 1;
            sqlite3_busy_timeout(v188, *((_DWORD *)__s1 + 193));
            v5 = sqlite3_exec(v188, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
            if ((_DWORD)v5 == 14 && v133 == 1)
            {
              sub_1ACBCF268((uint64_t)v188, 0);
              v188 = 0;
              v5 = sub_1ACB55484(*(char **)(v178 + 56), (uint64_t *)&v188, v177 & 0xFFFFFFFC | 2, 0);
              if (!(_DWORD)v5)
              {
                sqlite3_busy_timeout(v188, *((_DWORD *)__s1 + 193));
                v5 = sqlite3_exec(v188, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
              }
            }
            if (v133 == 1 && (_DWORD)v5 == 14)
            {
              if (v188)
              {
                sub_1ACBCF268((uint64_t)v188, 0);
                LODWORD(v120) = 0;
                v5 = 0;
                v183 = 0;
                v188 = 0;
              }
              else
              {
                LODWORD(v120) = 0;
                v5 = 0;
                v183 = 0;
              }
              v121 = 1;
              goto LABEL_345;
            }
            if (v179 == v176)
              v145 = 1;
            else
              v145 = v112;
            v121 = (v108 | v145) ^ 1;
            if ((_DWORD)v5 == 26 || (_DWORD)v5 == 11)
            {
              v120 = *(unsigned __int8 *)(v178 + 28);
              if (*(_BYTE *)(v178 + 28))
              {
                v5 = 0;
              }
              else
              {
                v183 = 1;
                v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 56))(v178, 1);
                if (!(_DWORD)v5)
                {
                  LODWORD(v120) = 0;
                  goto LABEL_345;
                }
                if (*(_BYTE *)(v178 + 28))
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v178 + 64))(v178, v120);
                LODWORD(v120) = 0;
              }
              v183 = 1;
            }
            else
            {
              LODWORD(v120) = 0;
              v183 = 0;
            }
          }
LABEL_345:
          if ((*(_DWORD *)(v178 + 24) & 0x80000000) == 0)
          {
            if ((_DWORD)v5)
            {
              v122 = 0;
              v123 = 0;
              v124 = 0;
              v125 = 0;
              v126 = -1;
              v127 = v188;
              if (!v188)
                goto LABEL_389;
              goto LABEL_388;
            }
            v170 = v120;
            __fd = *(_DWORD *)(v178 + 24);
            if (!v121)
            {
              LODWORD(v5) = 0;
              __dst = 0;
              v172 = 0;
              v173 = 0;
              v174 = -1;
              v140 = -1;
              goto LABEL_453;
            }
            __buf[0] = 0;
            v139 = (char *)malloc_type_calloc(1uLL, (v75 + 25), 0xA1B01061uLL);
            strlcpy(v139, v74, (v75 + 25));
            __dst = v139;
            if (v139[v75 - 1] != 47)
              strlcat(v139, "/", (v75 + 25));
            strlcat(v139, "tmpsqlitereplacedbXXXXXX", (v75 + 25));
            v140 = mkstemp(v139);
            if (v140 == -1)
            {
              v172 = 0;
              v173 = 0;
              *(_DWORD *)(a1 + 32) = *__error();
              LODWORD(v5) = 10;
              v174 = -1;
              goto LABEL_453;
            }
            v141 = (v75 + 30);
            v142 = (char *)malloc_type_calloc(1uLL, v141, 0x52B10A63uLL);
            strlcpy(v142, v139, v141);
            v173 = v142;
            strlcat(v142, "-wal", v141);
            v143 = (char *)malloc_type_calloc(1uLL, v141, 0x396322A9uLL);
            strlcpy(v143, v139, v141);
            v172 = v143;
            strlcat(v143, "-shm", v141);
            lseek(__fd, 0, 0);
            lseek(v140, 0, 0);
            if (fcopyfile(__fd, v140, 0, 8u))
            {
              v144 = *__error();
              if (v144 == 12)
              {
                LODWORD(v5) = 7;
              }
              else
              {
                *(_DWORD *)(a1 + 32) = v144;
                LODWORD(v5) = 10;
              }
              fsync(v140);
              goto LABEL_450;
            }
            fsync(v140);
            __strlcpy_chk();
            __strlcat_chk();
            v146 = sub_1ACBE1D30(__strerrbuf, 0, 0, 0);
            if ((v146 & 0x80000000) == 0)
            {
              v147 = v146;
              v174 = sub_1ACBE1D30(v173, 1538, 0, 0);
              if ((v174 & 0x80000000) != 0)
              {
                if (*__error() == 2)
                {
                  off_1EECAC8E0(v147);
                  goto LABEL_493;
                }
                *(_DWORD *)(a1 + 32) = *__error();
                off_1EECAC8E0(v147);
                LODWORD(v5) = 10;
              }
              else
              {
                lseek(v174, 0, 0);
                lseek(v147, 0, 0);
                v148 = sub_1ACBE5C60(v147, v174);
                if (v148)
                {
                  v149 = *__error();
                  if (v149 == 12)
                  {
                    LODWORD(v5) = 7;
                  }
                  else
                  {
                    *(_DWORD *)(a1 + 32) = v149;
                    LODWORD(v5) = 10;
                  }
                }
                else
                {
                  LODWORD(v5) = 0;
                }
                fsync(v174);
                off_1EECAC8E0(v147);
                if (!v148)
                  goto LABEL_493;
              }
LABEL_451:
              if (__buf[0])
                sub_1ACBCF268((uint64_t)__buf[0], 0);
              goto LABEL_453;
            }
            if (*__error() != 2)
            {
              *(_DWORD *)(a1 + 32) = *__error();
              LODWORD(v5) = 10;
LABEL_450:
              v174 = -1;
              goto LABEL_451;
            }
            v174 = -1;
LABEL_493:
            v156 = sub_1ACB55484(__dst, (uint64_t *)__buf, v177 & 0xFFFFFFFC | 2, 0);
            if (v156)
            {
              LODWORD(v5) = v156;
              goto LABEL_451;
            }
            pStmt = 0;
            sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
            if (!sub_1ACB5C66C((uint64_t)__s1, "PRAGMA main.cache_size", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v157))
            {
              v168 = sqlite3_step(pStmt);
              if (v168 == 100)
              {
                v158 = sqlite3_column_int(pStmt, 0);
                sqlite3_finalize(pStmt);
                if (v158 < 1)
                  goto LABEL_500;
                goto LABEL_497;
              }
              sqlite3_finalize(pStmt);
              if (!v168)
                goto LABEL_500;
            }
            v158 = 256;
LABEL_497:
            v159 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_size=%d", v158);
            sub_1ACB5C66C((uint64_t)__buf[0], v159, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v160);
            while (sqlite3_step(pStmt) == 100)
              ;
            sqlite3_finalize(pStmt);
            sqlite3_free(v159);
LABEL_500:
            v162 = 0;
            if (sub_1ACB5C66C((uint64_t)__s1, "PRAGMA main.cache_spill", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v161))goto LABEL_501;
            v169 = sqlite3_step(pStmt);
            if (v169 == 100)
            {
              v162 = sqlite3_column_int(pStmt, 0);
              sqlite3_finalize(pStmt);
              if (v162 < 0)
                goto LABEL_504;
            }
            else
            {
              sqlite3_finalize(pStmt);
              if (!v169)
              {
LABEL_504:
                v165 = sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version; COMMIT;", 0, 0, 0);
                if (v176 == v179)
                {
                  LODWORD(v5) = v165;
                  v166 = 1;
                }
                else
                {
                  v166 = v179 != 0;
                  if (v179)
                    v167 = "PRAGMA journal_mode=WAL";
                  else
                    v167 = "PRAGMA journal_mode=DELETE";
                  LODWORD(v5) = sqlite3_exec(__buf[0], v167, 0, 0, 0);
                }
                if (v188)
                {
                  sub_1ACBCF268((uint64_t)__buf[0], 0);
                  __buf[0] = 0;
                }
                else
                {
                  v188 = __buf[0];
                  sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version;", 0, 0, 0);
                }
                if (!v166)
                {
                  if ((v174 & 0x80000000) == 0)
                  {
                    off_1EECAC8E0(v174);
                    v174 = -1;
                  }
                  unlink(v173);
                  free(v173);
                  unlink(v172);
                  free(v172);
                  v172 = 0;
                  v173 = 0;
                }
                if (!(_DWORD)v5)
                  __fd = v140;
LABEL_453:
                if (v188)
                  v5 = v5;
                else
                  v5 = 2;
                if ((_DWORD)v5)
                  goto LABEL_485;
                __strlcpy_chk();
                __strlcat_chk();
                if ((v174 & 0x80000000) != 0
                  && (v174 = sub_1ACBE1D30(__strerrbuf, 0, 0, 0), (v174 & 0x80000000) != 0))
                {
                  v151 = 0;
                }
                else
                {
                  LODWORD(pStmt) = -1;
                  __strlcpy_chk();
                  __strlcat_chk();
                  v150 = sub_1ACBE62E8((char *)__buf, *(unsigned int *)(a1 + 124), &pStmt);
                  if ((_DWORD)v150)
                  {
                    v5 = v150;
                    off_1EECAC8E0(v174);
                    v151 = 1;
                    goto LABEL_480;
                  }
                  lseek(v174, 0, 0);
                  v152 = (int)pStmt;
                  lseek((int)pStmt, 0, 0);
                  v153 = sub_1ACBE5C60(v174, v152);
                  if (v153)
                  {
                    v154 = *__error();
                    if (v154 == 12)
                    {
                      v5 = 7;
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 32) = v154;
                      v5 = 10;
                    }
                  }
                  else
                  {
                    v5 = 0;
                  }
                  fsync(v152);
                  off_1EECAC8E0(v152);
                  off_1EECAC8E0(v174);
                  v151 = 1;
                  if (v153)
                  {
LABEL_480:
                    if (v183)
                      sub_1ACBE6140((unsigned __int8 *)v178, v170);
                    else
                      sqlite3_exec(v188, "COMMIT", 0, 0, 0);
                    if (!(_DWORD)v5)
                    {
                      sub_1ACBE5E6C(a1, v151);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, 3);
                    }
LABEL_485:
                    if ((v140 & 0x80000000) == 0)
                      close(v140);
                    v125 = 0;
                    v124 = __dst;
                    v122 = v172;
                    v123 = v173;
                    v126 = v174;
                    v127 = v188;
                    if (!v188)
                      goto LABEL_389;
                    goto LABEL_388;
                  }
                }
                LODWORD(__buf[0]) = 0;
                LODWORD(pStmt) = 0;
                pread(__fd, __buf, 4uLL, 24);
                pread(*(_DWORD *)(a1 + 24), &pStmt, 4uLL, 24);
                lseek(__fd, 0, 0);
                lseek(*(_DWORD *)(a1 + 24), 0, 0);
                if (sub_1ACBE5C60(__fd, *(_DWORD *)(a1 + 24)))
                {
                  v155 = *__error();
                  if (v155 == 12)
                  {
                    v5 = 7;
                  }
                  else
                  {
                    *(_DWORD *)(a1 + 32) = v155;
                    v5 = 10;
                  }
                }
                else
                {
                  v5 = 0;
                }
                if (LODWORD(__buf[0]) == (_DWORD)pStmt)
                {
                  LODWORD(pStmt) = LODWORD(__buf[0]) + 1;
                  off_1EECAC9E8(*(_DWORD *)(a1 + 24), &pStmt, 4uLL, 24);
                }
                goto LABEL_480;
              }
              v162 = 0;
            }
LABEL_501:
            v163 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_spill=%d", v162);
            sub_1ACB5C66C((uint64_t)__buf[0], v163, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v164);
            while (sqlite3_step(pStmt) == 100)
              ;
            sqlite3_finalize(pStmt);
            sqlite3_free(v163);
            goto LABEL_504;
          }
          v122 = 0;
          v123 = 0;
          v124 = 0;
          goto LABEL_386;
        }
      }
      else
      {
        sqlite3_log(1, "Replace database failed because TMPDIR is not set correctly\n");
        return 3;
      }
      return v5;
    case 103:
      if (!__s1)
        return 21;
      v29 = *(unsigned int *)(a1 + 24);
      if ((v29 & 0x80000000) != 0)
      {
        v5 = 1;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }
      v30 = *(_DWORD *)__s1;
      v31 = off_1EECAC9A0(*(unsigned int *)(a1 + 24), __strerrbuf, 100, 0);
      v32 = v31;
      if (v31)
      {
        if (v31 != 100
          || (*(_QWORD *)__strerrbuf == 0x66206574694C5153
            ? (v33 = *(_QWORD *)&__strerrbuf[8] == 0x332074616D726FLL)
            : (v33 = 0),
              !v33))
        {
          v5 = 26;
          *((_DWORD *)__s1 + 1) = 2;
          return v5;
        }
      }
      if (sub_1ACBE6834(v30, v29, 1, dword_1EECAC650 + 2, 0x1FEu))
      {
        v5 = 0;
        *((_DWORD *)__s1 + 1) = 1;
        return v5;
      }
      if (v32 != 100 || __strerrbuf[18] != 2)
      {
        v67 = sub_1ACBE6834(v30, v29, 1, dword_1EECAC650, 1u);
        if (!v67)
        {
          v67 = sub_1ACBE6834(v30, v29, 1, dword_1EECAC650 + 1, 1u);
          if (!v67)
            v67 = sub_1ACBE6834(v30, v29, 3, dword_1EECAC650 + 2, 0x1FEu);
        }
        goto LABEL_359;
      }
      v60 = strlen(*(const char **)(a1 + 56));
      v61 = sqlite3_initialize();
      v5 = 7;
      v62 = -1;
      if (v60 < -99 || v61)
      {
LABEL_368:
        *((_DWORD *)__s1 + 1) = v62;
        return v5;
      }
      v63 = (char *)sub_1ACB5D828((v60 + 100));
      if (!v63)
      {
        v5 = 7;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }
      v64 = v63;
      memcpy(v63, *(const void **)(a1 + 56), v60);
      strcpy(&v64[v60], "-shm");
      v65 = open(v64, 0, 0);
      if ((v65 & 0x80000000) != 0)
      {
        if (*__error() != 2)
        {
          v5 = 14;
          sub_1ACBE2298(14, "open", v64, 47694);
          sqlite3_free(v64);
          *((_DWORD *)__s1 + 1) = -1;
          return v5;
        }
        v67 = 0;
      }
      else
      {
        v66 = v65;
        v67 = sub_1ACBE6834(v30, v65, 1, 0x7Au, 1u);
        if (!v67)
        {
          v67 = sub_1ACBE6834(v30, v66, 1, 0x79u, 1u);
          if (!v67)
            v67 = sub_1ACBE6834(v30, v66, 1, 0x78u, 1u);
        }
        close(v66);
      }
      v128 = (void (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_358;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v64);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v64);
      v64 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v128 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_358:
        (*v128)(v64);
      }
LABEL_359:
      if (v32)
        v129 = 0;
      else
        v129 = 3;
      if (v67)
        v62 = (v67 >> 31) | 1;
      else
        v62 = v129;
      if (v67)
        v5 = v67 >> 31;
      else
        v5 = 0;
      goto LABEL_368;
    case 104:
      sub_1ACBE30F4();
      return 12;
    case 106:
      if (!a1
        || !*(_QWORD *)a1
        || *(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(_QWORD *)a1 + 16) != sub_1ACB5AEB4
        || *(_DWORD *)(a1 + 128) > 3u)
      {
        return 1;
      }
      v59 = *(NSObject **)(a1 + 152);
      if (!v59)
        return 0;
      *(_QWORD *)(a1 + 152) = 0;
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) != 0)
        return 0;
      dispatch_source_cancel_and_wait();
      dispatch_release(v59);
      return 0;
    case 107:
      v5 = 0;
      *(_DWORD *)(a1 + 168) = *(_DWORD *)__s1;
      return v5;
    case 108:
      v5 = 0;
      *(_QWORD *)(a1 + 176) = __s1;
      return v5;
    case 204:
      v5 = 0;
      *(_DWORD *)__s1 = HIBYTE(*(unsigned __int16 *)(a1 + 30)) & 1;
      return v5;
    default:
      return v5;
  }
}

void sub_1ACBB451C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACC4487C(a1, 0, 0, a4, a5, a6, a7, a8);
}

BOOL sub_1ACBB4528(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  __int16 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _BOOL8 result;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  int v37;
  uint64_t v38;
  unsigned int (*v39)(void);
  int v40;
  int v41;
  double v42;
  int v43;
  int v44;
  const char *v45;
  unsigned __int8 *j;
  uint64_t v47;
  uint64_t v48;
  const char *k;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  __int16 v61;
  int v62;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  const char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  __int16 v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  const char *v84;
  int v85;
  uint64_t v86;
  double v87;
  unsigned __int8 *v88;
  const char *v89;
  int v90;
  uint64_t v91;
  unsigned __int8 *v92;
  const char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  int v100;
  const char *v101;
  int v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  char *v106;
  int v107;
  uint64_t v108;
  double v109;
  double v110;
  const char *v111;
  float v112;
  double v113;
  double v114;
  uint64_t v116;
  uint64_t v117;
  int v118;
  const char *kk;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  __int16 v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  const char *ii;
  uint64_t v140;
  uint64_t v141;
  const char *jj;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  int v147;
  const char *m;
  int v149;
  uint64_t v150;
  const char *n;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[48];
  double v159[2];

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (!a2)
  {
    if (!sub_1ACC458B0((uint64_t)a1))
      return 1;
    v15 = a1[3];
    v18 = *(_QWORD *)(v15 + 72);
    v17 = (uint64_t *)(v15 + 72);
    v16 = v18;
    if (v18)
      goto LABEL_9;
    v38 = **(_QWORD **)(*a1 + 24);
    if (*(int *)v38 >= 2 && (v39 = *(unsigned int (**)(void))(v38 + 136)) != 0)
    {
      if (!v39())
      {
LABEL_49:
        v16 = *v17;
LABEL_9:
        *(_QWORD *)a4 = v16;
        result = 1;
        if (v16 >= 1)
        {
          *(_BYTE *)(a4 + 40) = 1;
          return 0;
        }
        return result;
      }
    }
    else
    {
      *(_QWORD *)v158 = 0;
      v40 = (*(uint64_t (**)(uint64_t, _BYTE *))(v38 + 120))(v38, v158);
      *v17 = (uint64_t)(*(double *)v158 * 86400000.0);
      if (!v40)
        goto LABEL_49;
    }
    *v17 = 0;
    goto LABEL_52;
  }
  v12 = *a3;
  if (*a3)
  {
    v13 = *(_WORD *)(v12 + 20);
    if (byte_1ACCB6445[v13 & 0x3F] - 1 <= 1)
    {
      if ((v13 & 8) != 0)
      {
        v14 = *(double *)v12;
      }
      else if ((v13 & 0x24) != 0)
      {
        v14 = (double)*(uint64_t *)v12;
      }
      else if ((v13 & 0x12) != 0)
      {
        v14 = sub_1ACBF2F88(v12);
      }
      else
      {
        v14 = 0.0;
      }
      v154 = (uint64_t)a1;
      *(double *)(a4 + 32) = v14;
      *(_BYTE *)(a4 + 41) = 1;
      if (v14 >= 0.0 && v14 < 5373484.5)
      {
        *(_QWORD *)a4 = (uint64_t)(v14 * 86400000.0 + 0.5);
        *(_BYTE *)(a4 + 40) = 1;
        if (a2 >= 2)
          goto LABEL_91;
        goto LABEL_356;
      }
LABEL_64:
      if (a2 >= 2)
        goto LABEL_91;
LABEL_356:
      sub_1ACC4571C(a4);
      if (*(_BYTE *)(a4 + 46))
        return 1;
      return *(_QWORD *)a4 > 0x1A6401072FDFFuLL;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v12 = *a3;
    if (!*a3)
      return 1;
  }
  v20 = *(unsigned __int16 *)(v12 + 20);
  if ((~v20 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v20 & 1) != 0)
      return 1;
    v21 = (unsigned __int8 *)sub_1ACBF2B64((int *)v12, 1);
    if (!v21)
      return 1;
  }
  else
  {
    v21 = *(unsigned __int8 **)(v12 + 8);
    if (!v21)
      return 1;
  }
  *(_DWORD *)v158 = 0;
  v157 = 0;
  v22 = *v21;
  if (v22 == 45)
    v23 = v21 + 1;
  else
    v23 = v21;
  if (sub_1ACC45BE0(v23, "40f-21a-21d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v158) != 3)
    goto LABEL_30;
  v24 = &v21[(v22 == 45) + 9];
  do
  {
    v25 = *++v24;
    v26 = byte_1ACCB6548[v25] & 1;
  }
  while (v25 == 84 || v26 != 0);
  if (!sub_1ACC459F8(v24, a4, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_60:
    *(_BYTE *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 42) = 1;
    v44 = HIDWORD(v157);
    v43 = *(_DWORD *)v158;
    if (v22 == 45)
      v43 = -*(_DWORD *)v158;
    *(_DWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 12) = v44;
    *(_DWORD *)(a4 + 16) = v157;
    if (!*(_BYTE *)(a4 + 44))
      goto LABEL_90;
    sub_1ACC4571C(a4);
    v154 = (uint64_t)a1;
    goto LABEL_64;
  }
  if (!*v24)
  {
    *(_BYTE *)(a4 + 43) = 0;
    goto LABEL_60;
  }
LABEL_30:
  if (!sub_1ACC459F8(v21, a4, (uint64_t)a3, a4, a5, a6, a7, a8))
    goto LABEL_90;
  for (i = 0; ; ++i)
  {
    v29 = v21[i];
    v30 = aNow[i];
    if ((_DWORD)v29 == (_DWORD)v30)
      break;
    if (byte_1ACCB6333[v29] != byte_1ACCB6333[v30])
      goto LABEL_53;
LABEL_33:
    ;
  }
  if (v21[i])
    goto LABEL_33;
  if (sub_1ACC458B0((uint64_t)a1))
  {
    v31 = a1[3];
    v34 = *(_QWORD *)(v31 + 72);
    v33 = (uint64_t *)(v31 + 72);
    v32 = v34;
    if (!v34)
    {
      v35 = **(_QWORD **)(*a1 + 24);
      if (*(int *)v35 >= 2 && (v36 = *(uint64_t (**)(void))(v35 + 136)) != 0)
      {
        v37 = v36();
      }
      else
      {
        *(_QWORD *)v158 = 0;
        v37 = (*(uint64_t (**)(uint64_t, _BYTE *))(v35 + 120))(v35, v158);
        *v33 = (uint64_t)(*(double *)v158 * 86400000.0);
      }
      if (!v37)
        goto LABEL_87;
      goto LABEL_84;
    }
LABEL_88:
    *(_QWORD *)a4 = v32;
    if (v32 < 1)
      return 1;
    goto LABEL_89;
  }
LABEL_53:
  v159[0] = 0.0;
  v41 = strlen((const char *)v21);
  if ((int)sub_1ACBA6B1C(v21, v159, v41 & 0x3FFFFFFF, 1) <= 0)
  {
    v45 = "subsec";
    for (j = v21; ; ++j)
    {
      v47 = *j;
      v48 = *(unsigned __int8 *)v45;
      if ((_DWORD)v47 == (_DWORD)v48)
      {
        if (!*j)
        {
LABEL_76:
          if (!sub_1ACC458B0((uint64_t)a1))
            return 1;
          *(_BYTE *)(a4 + 47) = 1;
          v52 = a1[3];
          v53 = *(_QWORD *)(v52 + 72);
          v33 = (uint64_t *)(v52 + 72);
          v32 = v53;
          if (v53)
            goto LABEL_88;
          v54 = **(_QWORD **)(*a1 + 24);
          if (*(int *)v54 >= 2 && (v55 = *(uint64_t (**)(void))(v54 + 136)) != 0)
          {
            v56 = v55();
          }
          else
          {
            *(_QWORD *)v158 = 0;
            v56 = (*(uint64_t (**)(uint64_t, _BYTE *))(v54 + 120))(v54, v158);
            *v33 = (uint64_t)(*(double *)v158 * 86400000.0);
          }
          if (!v56)
          {
LABEL_87:
            v32 = *v33;
            goto LABEL_88;
          }
LABEL_84:
          *v33 = 0;
LABEL_52:
          *(_QWORD *)a4 = 0;
          return 1;
        }
      }
      else if (byte_1ACCB6333[v47] != byte_1ACCB6333[v48])
      {
        for (k = "subsecond"; ; ++k)
        {
          v50 = *v21;
          v51 = *(unsigned __int8 *)k;
          if ((_DWORD)v50 == (_DWORD)v51)
          {
            if (!*v21)
              goto LABEL_76;
          }
          else if (byte_1ACCB6333[v50] != byte_1ACCB6333[v51])
          {
            return 1;
          }
          ++v21;
        }
      }
      ++v45;
    }
  }
  v42 = v159[0];
  *(double *)(a4 + 32) = v159[0];
  *(_BYTE *)(a4 + 41) = 1;
  if (v42 >= 0.0 && v42 < 5373484.5)
  {
    *(_QWORD *)a4 = (uint64_t)(v42 * 86400000.0 + 0.5);
LABEL_89:
    *(_BYTE *)(a4 + 40) = 1;
  }
LABEL_90:
  v154 = (uint64_t)a1;
  if (a2 < 2)
    goto LABEL_356;
LABEL_91:
  v155 = a2;
  v57 = 1;
  while (2)
  {
    v58 = a3[v57];
    if (!v58)
    {
      v60 = 0;
      goto LABEL_103;
    }
    v59 = *(unsigned __int16 *)(v58 + 20);
    if ((~v59 & 0x202) != 0 || *(_BYTE *)(v58 + 22) != 1)
    {
      if ((v59 & 1) != 0)
      {
        v60 = 0;
        v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0)
          goto LABEL_105;
LABEL_100:
        if ((v61 & 0x11) == 0)
          goto LABEL_110;
        goto LABEL_111;
      }
      v60 = (unsigned __int8 *)sub_1ACBF2B64((int *)v58, 1);
      v58 = a3[v57];
      if (v58)
      {
        v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0)
          goto LABEL_105;
        goto LABEL_100;
      }
LABEL_103:
      sub_1ACBBE20C(91120);
      goto LABEL_111;
    }
    v60 = *(unsigned __int8 **)(v58 + 8);
    v61 = *(_WORD *)(v58 + 20);
    if ((v61 & 2) == 0)
      goto LABEL_100;
LABEL_105:
    v62 = v61 & 0x11;
    if (*(_BYTE *)(v58 + 22) == 1 || v62 != 0)
      goto LABEL_111;
LABEL_110:
    sub_1ACBF2B3C(v58, 1);
LABEL_111:
    if (!v60)
      return 1;
    v159[0] = 0.0;
    v64 = *v60;
    switch(byte_1ACCB6333[*v60])
    {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v156 = 0;
        v157 = 0;
        v65 = 1;
        while (2)
        {
          v67 = v60[v65];
          if (!v60[v65] || (_DWORD)v67 == 58 || (byte_1ACCB6548[v67] & 1) != 0)
            break;
          if ((_DWORD)v67 != 45)
            goto LABEL_116;
          if ((_DWORD)v65 == 6)
          {
            v66 = sub_1ACC45BE0(v60 + 1, "50f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
            goto LABEL_115;
          }
          if ((_DWORD)v65 != 5)
            goto LABEL_116;
          v66 = sub_1ACC45BE0(v60 + 1, "40f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
LABEL_115:
          if (v66 != 1)
          {
LABEL_116:
            ++v65;
            continue;
          }
          break;
        }
        v68 = 1;
        if ((int)sub_1ACBA6B1C(v60, v159, v65, 1) < 1)
          goto LABEL_286;
        if (v60[v65] != 45)
        {
          v69 = v60;
          goto LABEL_132;
        }
        if (v64 != 45 && v64 != 43)
          goto LABEL_286;
        if ((_DWORD)v65 == 5)
        {
          if (sub_1ACC45BE0(v60 + 1, "40f-20a-20d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4) != 3)
            goto LABEL_286;
        }
        else
        {
          v76 = sub_1ACC45BE0(++v60, "50f-20a-20d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
          if (v76 != 3)
            goto LABEL_286;
        }
        if ((int)v157 > 11 || SHIDWORD(v156) > 30)
          goto LABEL_286;
        sub_1ACBB5C44(a4);
        if (!*(_BYTE *)(a4 + 43))
        {
          sub_1ACC4571C(a4);
          v77 = (*(_QWORD *)a4 + 43200000) % 86400000;
          *(double *)(a4 + 32) = (double)(v77 % 60000) / 1000.0;
          v78 = (34953 * (__int16)(v77 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v77 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v77 / 60000
                                         - 60 * ((v78 >> 5) + ((unsigned __int16)(v78 & 0x8000) >> 15)));
          *(_BYTE *)(a4 + 41) = 0;
          *(_BYTE *)(a4 + 43) = 1;
        }
        *(_BYTE *)(a4 + 40) = 0;
        v80 = *(_DWORD *)(a4 + 8);
        v79 = *(_DWORD *)(a4 + 12);
        if (v64 == 45)
        {
          v81 = v80 - HIDWORD(v157);
          v82 = v79 - v157;
          HIDWORD(v156) = -HIDWORD(v156);
        }
        else
        {
          v81 = v80 + HIDWORD(v157);
          v82 = v79 + v157;
        }
        if (v82 < 1)
          v124 = -((12 - v82) / 0xCu);
        else
          v124 = (v82 - 1) / 0xCu;
        *(_DWORD *)(a4 + 8) = v124 + v81;
        *(_DWORD *)(a4 + 12) = v82 - 12 * v124;
        sub_1ACC4571C(a4);
        *(_WORD *)(a4 + 42) = 0;
        *(_QWORD *)a4 += 86400000 * SHIDWORD(v156);
        if (!v60[11])
        {
          v68 = 0;
          goto LABEL_286;
        }
        if ((byte_1ACCB6548[v60[11]] & 1) == 0)
          goto LABEL_286;
        v69 = v60 + 12;
        if (sub_1ACC45BE0(v60 + 12, "20c:20e", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v156) != 2)
          goto LABEL_144;
        LODWORD(v65) = 2;
LABEL_132:
        if (v69[v65] == 58)
        {
          v70 = *v69 - 58;
          memset(&v158[16], 0, 32);
          if (v70 < 0xFFFFFFFFFFFFFFF6)
            v71 = v69 + 1;
          else
            v71 = v69;
          *(_OWORD *)v158 = 0uLL;
          if (!sub_1ACC459F8(v71, (uint64_t)v158, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            sub_1ACC4571C((uint64_t)v158);
            if (v64 == 45)
              v72 = -((*(_QWORD *)v158 - 43200000) % 86400000);
            else
              v72 = (*(_QWORD *)v158 - 43200000) % 86400000;
            sub_1ACC4571C(a4);
            v68 = 0;
            *(_WORD *)(a4 + 42) = 0;
            *(_BYTE *)(a4 + 44) = 0;
            *(_QWORD *)a4 += v72;
            goto LABEL_286;
          }
LABEL_144:
          v68 = 1;
          goto LABEL_286;
        }
        v73 = (const char *)&v60[v65 - 1];
        do
          v74 = *(unsigned __int8 *)++v73;
        while ((byte_1ACCB6548[v74] & 1) != 0);
        v75 = strlen(v73) & 0x3FFFFFFF;
        if ((v75 - 11) < 0xFFFFFFF8)
          goto LABEL_144;
        if ((v73[v75 - 1] & 0xDF) == 0x53)
          v107 = v75 - 1;
        else
          v107 = v75;
        sub_1ACC4571C(a4);
        v108 = 0;
        v109 = v159[0];
        if (v159[0] >= 0.0)
          v110 = 0.5;
        else
          v110 = -0.5;
        v111 = "second";
        while (1)
        {
          if (v107 == *((unsigned __int8 *)&unk_1ACCBA7C4 + 16 * v108))
          {
            v116 = 0;
            while (1)
            {
              v117 = v111[v116];
              if (!v111[v116])
                break;
              LODWORD(v117) = byte_1ACCB6333[v117];
              v118 = byte_1ACCB6333[v73[v116]];
              if ((_DWORD)v117 != v118)
                goto LABEL_242;
              if ((v107 - 1) + 1 == ++v116)
                goto LABEL_230;
            }
            v118 = byte_1ACCB6333[v73[v116]];
LABEL_242:
            if ((_DWORD)v117 != v118)
              goto LABEL_234;
LABEL_230:
            v112 = *((float *)&unk_1ACCBA7C4 + 4 * v108 + 2);
            v113 = (float)-v112;
            v114 = v112;
            if (v159[0] > v113 && v159[0] < v114)
              break;
          }
LABEL_234:
          ++v108;
          v111 += 16;
          if (v108 == 6)
          {
            v68 = 1;
            goto LABEL_285;
          }
        }
        if ((_DWORD)v108 != 5)
        {
          if ((_DWORD)v108 == 4)
          {
            sub_1ACBB5B50(a4);
            v125 = (int)v109;
            v126 = *(_DWORD *)(a4 + 12) + (int)v109;
            if (v126 < 1)
              v127 = -((12 - v126) / 0xCu);
            else
              v127 = (v126 - 1) / 0xCu;
            *(_DWORD *)(a4 + 8) += v127;
            *(_DWORD *)(a4 + 12) = v126 - 12 * v127;
LABEL_283:
            *(_BYTE *)(a4 + 40) = 0;
            v109 = v109 - (double)v125;
          }
          sub_1ACC4571C(a4);
          v68 = 0;
          *(_QWORD *)a4 += (uint64_t)(v110 + v109 * 1000.0 * *((float *)&unk_1ACCBA7C4 + 4 * v108 + 3));
LABEL_285:
          *(_WORD *)(a4 + 42) = 0;
          *(_BYTE *)(a4 + 44) = 0;
LABEL_286:
          if (!v68)
            goto LABEL_287;
          return 1;
        }
        v125 = (int)v159[0];
        sub_1ACBB5B50(a4);
        *(_DWORD *)(a4 + 8) += v125;
        goto LABEL_283;
      case 'a':
        v83 = v60 + 1;
        v84 = "auto";
        while (2)
        {
          v86 = *(unsigned __int8 *)v84;
          if (v64 != (_DWORD)v86)
          {
            if (byte_1ACCB6333[v64] != byte_1ACCB6333[v86])
              return 1;
LABEL_154:
            ++v84;
            v85 = *v83++;
            v64 = v85;
            continue;
          }
          break;
        }
        if (v64)
          goto LABEL_154;
        if (v57 > 1)
          return 1;
        if (!*(_BYTE *)(a4 + 41) || *(_BYTE *)(a4 + 40))
          goto LABEL_171;
        v87 = *(double *)(a4 + 32);
        if (v87 >= -2.1086676e11 && v87 <= 2.53402301e11)
        {
          *(_WORD *)(a4 + 42) = 0;
          *(_BYTE *)(a4 + 44) = 0;
          *(_QWORD *)a4 = (uint64_t)(v87 * 1000.0 + 2.1086676e14 + 0.5);
          *(_BYTE *)(a4 + 40) = 1;
          goto LABEL_171;
        }
LABEL_287:
        if (++v57 == v155)
          goto LABEL_356;
        continue;
      case 'j':
        v88 = v60 + 1;
        v89 = "julianday";
        while (2)
        {
          v91 = *(unsigned __int8 *)v89;
          if (v64 == (_DWORD)v91)
          {
            if (!v64)
            {
              if (v57 > 1 || !*(_BYTE *)(a4 + 40) || !*(_BYTE *)(a4 + 41))
                return 1;
LABEL_171:
              *(_BYTE *)(a4 + 41) = 0;
              goto LABEL_287;
            }
          }
          else if (byte_1ACCB6333[v64] != byte_1ACCB6333[v91])
          {
            return 1;
          }
          ++v89;
          v90 = *v88++;
          v64 = v90;
          continue;
        }
      case 'l':
        v92 = v60 + 1;
        v93 = "localtime";
        while (2)
        {
          v95 = *(unsigned __int8 *)v93;
          if (v64 == (_DWORD)v95)
          {
            if (!v64)
            {
              if (!sub_1ACC458B0(v154))
                return 1;
              v68 = sub_1ACC45CD0(a4, v154);
              goto LABEL_286;
            }
          }
          else if (byte_1ACCB6333[v64] != byte_1ACCB6333[v95])
          {
            return 1;
          }
          ++v93;
          v94 = *v92++;
          v64 = v94;
          continue;
        }
      case 's':
        if (*v60)
        {
          v96 = v60[1];
          if (v60[1])
          {
            if ((v96 & 0xFFFFFFDF) == 0x54)
            {
              v96 = v60[2];
              if (v60[2])
              {
                if ((v96 & 0xFFFFFFDF) == 0x41)
                {
                  v96 = v60[3];
                  if (v60[3])
                  {
                    if ((v96 & 0xFFFFFFDF) == 0x52)
                    {
                      v96 = v60[4];
                      if (v60[4])
                      {
                        if ((v96 & 0xFFFFFFDF) == 0x54)
                        {
                          v96 = v60[5];
                          if (v60[5])
                          {
                            if ((_DWORD)v96 == 32)
                            {
                              v96 = v60[6];
                              if (v60[6])
                              {
                                if ((v96 & 0xFFFFFFDF) == 0x4F)
                                {
                                  v96 = v60[7];
                                  if (v60[7])
                                  {
                                    if ((v96 & 0xFFFFFFDF) == 0x46)
                                    {
                                      v96 = v60[8];
                                      if (v60[8])
                                      {
                                        if ((_DWORD)v96 == 32)
                                          goto LABEL_324;
                                        v97 = " ";
                                        LODWORD(v96) = byte_1ACCB6333[v96];
                                      }
                                      else
                                      {
                                        v97 = " ";
                                      }
                                    }
                                    else
                                    {
                                      v97 = "f ";
                                      LODWORD(v96) = byte_1ACCB6333[v96];
                                    }
                                  }
                                  else
                                  {
                                    v97 = "f ";
                                  }
                                }
                                else
                                {
                                  v97 = "of ";
                                  LODWORD(v96) = byte_1ACCB6333[v96];
                                }
                              }
                              else
                              {
                                v97 = "of ";
                              }
                            }
                            else
                            {
                              v97 = " of ";
                              LODWORD(v96) = byte_1ACCB6333[v96];
                            }
                          }
                          else
                          {
                            v97 = " of ";
                          }
                        }
                        else
                        {
                          v97 = "t of ";
                          LODWORD(v96) = byte_1ACCB6333[v96];
                        }
                      }
                      else
                      {
                        v97 = "t of ";
                      }
                    }
                    else
                    {
                      v97 = "rt of ";
                      LODWORD(v96) = byte_1ACCB6333[v96];
                    }
                  }
                  else
                  {
                    v97 = "rt of ";
                  }
                }
                else
                {
                  v97 = "art of ";
                  LODWORD(v96) = byte_1ACCB6333[v96];
                }
              }
              else
              {
                v97 = "art of ";
              }
            }
            else
            {
              v97 = "tart of ";
              LODWORD(v96) = byte_1ACCB6333[v96];
            }
          }
          else
          {
            v97 = "tart of ";
          }
        }
        else
        {
          LODWORD(v96) = 0;
          v97 = "start of ";
        }
        if ((_DWORD)v96 != byte_1ACCB6333[*v97])
        {
          v145 = v60 + 1;
          v146 = v60 + 1;
          v147 = *v60;
          for (m = "subsec"; ; ++m)
          {
            v150 = *(unsigned __int8 *)m;
            if (v147 == (_DWORD)v150)
            {
              if (!v147)
              {
LABEL_353:
                *(_BYTE *)(a4 + 47) = 1;
                goto LABEL_287;
              }
            }
            else if (byte_1ACCB6333[v147] != byte_1ACCB6333[v150])
            {
              for (n = "subsecond"; ; ++n)
              {
                v153 = *(unsigned __int8 *)n;
                if (v64 == (_DWORD)v153)
                {
                  if (!v64)
                    goto LABEL_353;
                }
                else if (byte_1ACCB6333[v64] != byte_1ACCB6333[v153])
                {
                  return 1;
                }
                v152 = *v145++;
                v64 = v152;
              }
            }
            v149 = *v146++;
            v147 = v149;
          }
        }
LABEL_324:
        if (*(_BYTE *)(a4 + 40) || *(_BYTE *)(a4 + 42) || *(_BYTE *)(a4 + 43))
        {
          v133 = v60 + 9;
          sub_1ACBB5C44(a4);
          *(_WORD *)(a4 + 43) = 1;
          *(_DWORD *)(a4 + 20) = 0;
          *(_DWORD *)(a4 + 24) = 0;
          *(_QWORD *)(a4 + 32) = 0;
          v134 = v60 + 9;
          v135 = "month";
          *(_WORD *)(a4 + 40) = 0;
          while (1)
          {
            v136 = *v134;
            v137 = *(unsigned __int8 *)v135;
            if ((_DWORD)v136 == (_DWORD)v137)
            {
              if (!*v134)
              {
                *(_DWORD *)(a4 + 16) = 1;
                goto LABEL_287;
              }
            }
            else if (byte_1ACCB6333[v136] != byte_1ACCB6333[v137])
            {
              v138 = v60 + 9;
              for (ii = "year"; ; ++ii)
              {
                v140 = *v138;
                v141 = *(unsigned __int8 *)ii;
                if ((_DWORD)v140 == (_DWORD)v141)
                {
                  if (!*v138)
                  {
                    *(_QWORD *)(a4 + 12) = 0x100000001;
                    goto LABEL_287;
                  }
                }
                else if (byte_1ACCB6333[v140] != byte_1ACCB6333[v141])
                {
                  for (jj = "day"; ; ++jj)
                  {
                    v143 = *v133;
                    v144 = *(unsigned __int8 *)jj;
                    if ((_DWORD)v143 == (_DWORD)v144)
                    {
                      if (!*v133)
                        goto LABEL_287;
                    }
                    else if (byte_1ACCB6333[v143] != byte_1ACCB6333[v144])
                    {
                      return 1;
                    }
                    ++v133;
                  }
                }
                ++v138;
              }
            }
            ++v134;
            ++v135;
          }
        }
        return 1;
      case 'u':
        v98 = v60 + 1;
        v99 = v60 + 1;
        v100 = *v60;
        v101 = "unixepoch";
        while (2)
        {
          v103 = *(unsigned __int8 *)v101;
          if (v100 == (_DWORD)v103)
          {
            if (!v100)
            {
              if (*(_BYTE *)(a4 + 41))
              {
                if (v57 <= 1)
                {
                  v104 = *(double *)(a4 + 32) * 1000.0 + 2.1086676e14;
                  if (v104 >= 0.0 && v104 < 4.64269061e14)
                  {
                    *(_BYTE *)(a4 + 44) = 0;
                    *(_QWORD *)a4 = (uint64_t)(v104 + 0.5);
                    *(_DWORD *)(a4 + 40) = 1;
                    goto LABEL_287;
                  }
                }
                return 1;
              }
              goto LABEL_245;
            }
LABEL_199:
            ++v101;
            v102 = *v99++;
            v100 = v102;
            continue;
          }
          break;
        }
        if (byte_1ACCB6333[v100] == byte_1ACCB6333[v103])
          goto LABEL_199;
LABEL_245:
        for (kk = "utc"; ; ++kk)
        {
          v121 = *(unsigned __int8 *)kk;
          if (v64 == (_DWORD)v121)
            break;
          if (byte_1ACCB6333[v64] != byte_1ACCB6333[v121])
            return 1;
LABEL_247:
          v120 = *v98++;
          v64 = v120;
        }
        if (v64)
          goto LABEL_247;
        if (sub_1ACC458B0(v154))
        {
          if (*(_BYTE *)(a4 + 45))
            goto LABEL_287;
          sub_1ACC4571C(a4);
          v122 = *(_QWORD *)a4;
          *(_QWORD *)&v158[40] = 1;
          memset(&v158[8], 0, 32);
          *(_QWORD *)v158 = v122;
          if (!sub_1ACC45CD0((uint64_t)v158, v154))
          {
            sub_1ACC4571C((uint64_t)v158);
            v123 = v122;
            if (v122 == *(_QWORD *)v158)
              goto LABEL_260;
            v123 = v122 - *(_QWORD *)v158 + v122;
            *(_QWORD *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(_QWORD *)v158 = v123;
            if (sub_1ACC45CD0((uint64_t)v158, v154))
              return 1;
            sub_1ACC4571C((uint64_t)v158);
            if (v122 == *(_QWORD *)v158)
              goto LABEL_260;
            v123 += v122 - *(_QWORD *)v158;
            *(_QWORD *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(_QWORD *)v158 = v123;
            if (sub_1ACC45CD0((uint64_t)v158, v154))
              return 1;
            sub_1ACC4571C((uint64_t)v158);
            if (v122 == *(_QWORD *)v158)
            {
LABEL_260:
              *(_OWORD *)(a4 + 16) = 0u;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)a4 = 0u;
              *(_QWORD *)a4 = v123;
              *(_BYTE *)(a4 + 40) = 1;
              *(_BYTE *)(a4 + 45) = 1;
              goto LABEL_287;
            }
            v123 += v122 - *(_QWORD *)v158;
            *(_QWORD *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(_QWORD *)v158 = v123;
            if (!sub_1ACC45CD0((uint64_t)v158, v154))
            {
              sub_1ACC4571C((uint64_t)v158);
              goto LABEL_260;
            }
          }
        }
        return 1;
      case 'w':
        if (*v60)
        {
          v105 = v60[1];
          if (v60[1])
          {
            if ((v105 & 0xFFFFFFDF) == 0x45)
            {
              v105 = v60[2];
              if (v60[2])
              {
                if ((v105 & 0xFFFFFFDF) == 0x45)
                {
                  v105 = v60[3];
                  if (v60[3])
                  {
                    if ((v105 & 0xFFFFFFDF) == 0x4B)
                    {
                      v105 = v60[4];
                      if (v60[4])
                      {
                        if ((v105 & 0xFFFFFFDF) == 0x44)
                        {
                          v105 = v60[5];
                          if (v60[5])
                          {
                            if ((v105 & 0xFFFFFFDF) == 0x41)
                            {
                              v105 = v60[6];
                              if (v60[6])
                              {
                                if ((v105 & 0xFFFFFFDF) == 0x59)
                                {
                                  v105 = v60[7];
                                  if (v60[7])
                                  {
                                    if ((_DWORD)v105 == 32)
                                      goto LABEL_312;
                                    v106 = " ";
                                    LODWORD(v105) = byte_1ACCB6333[v105];
                                  }
                                  else
                                  {
                                    v106 = " ";
                                  }
                                }
                                else
                                {
                                  v106 = "y ";
                                  LODWORD(v105) = byte_1ACCB6333[v105];
                                }
                              }
                              else
                              {
                                v106 = "y ";
                              }
                            }
                            else
                            {
                              v106 = "ay ";
                              LODWORD(v105) = byte_1ACCB6333[v105];
                            }
                          }
                          else
                          {
                            v106 = "ay ";
                          }
                        }
                        else
                        {
                          v106 = "day ";
                          LODWORD(v105) = byte_1ACCB6333[v105];
                        }
                      }
                      else
                      {
                        v106 = "day ";
                      }
                    }
                    else
                    {
                      v106 = "kday ";
                      LODWORD(v105) = byte_1ACCB6333[v105];
                    }
                  }
                  else
                  {
                    v106 = "kday ";
                  }
                }
                else
                {
                  v106 = "ekday ";
                  LODWORD(v105) = byte_1ACCB6333[v105];
                }
              }
              else
              {
                v106 = "ekday ";
              }
            }
            else
            {
              v106 = "eekday ";
              LODWORD(v105) = byte_1ACCB6333[v105];
            }
          }
          else
          {
            v106 = "eekday ";
          }
        }
        else
        {
          LODWORD(v105) = 0;
          v106 = "weekday ";
        }
        if ((_DWORD)v105 != byte_1ACCB6333[*v106])
          return 1;
LABEL_312:
        v128 = strlen((const char *)v60 + 8);
        if ((int)sub_1ACBA6B1C(v60 + 8, v159, v128 & 0x3FFFFFFF, 1) < 1)
          return 1;
        if (v159[0] < 0.0)
          return 1;
        if (v159[0] >= 7.0)
          return 1;
        v129 = (int)v159[0];
        if (v159[0] != (double)(int)v159[0])
          return 1;
        sub_1ACBB5C44(a4);
        if (!*(_BYTE *)(a4 + 43))
        {
          sub_1ACC4571C(a4);
          v130 = (*(_QWORD *)a4 + 43200000) % 86400000;
          *(double *)(a4 + 32) = (double)(v130 % 60000) / 1000.0;
          v131 = (34953 * (__int16)(v130 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v130 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v130 / 60000
                                         - 60 * ((v131 >> 5) + ((unsigned __int16)(v131 & 0x8000) >> 15)));
          *(_BYTE *)(a4 + 41) = 0;
          *(_BYTE *)(a4 + 43) = 1;
        }
        *(_BYTE *)(a4 + 44) = 0;
        *(_BYTE *)(a4 + 40) = 0;
        sub_1ACC4571C(a4);
        v132 = (*(_QWORD *)a4 + 129600000) / 86400000 % 7;
        if (v132 > v129)
          v132 -= 7;
        *(_QWORD *)a4 += 86400000 * (v129 - v132);
        *(_WORD *)(a4 + 42) = 0;
        *(_BYTE *)(a4 + 44) = 0;
        goto LABEL_287;
      default:
        return 1;
    }
  }
}

uint64_t sub_1ACBB5AD8(uint64_t a1, _QWORD *a2)
{
  timeval v4;

  v4.tv_sec = 0;
  *(_QWORD *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *a2 = 1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000;
  return 0;
}

double sub_1ACBB5B50(uint64_t a1)
{
  double result;
  int v3;
  __int16 v4;

  sub_1ACBB5C44(a1);
  if (!*(_BYTE *)(a1 + 43))
  {
    sub_1ACC4571C(a1);
    v3 = (*(_DWORD *)a1 + 43200000) % 86400000;
    result = (double)(v3 % 60000) / 1000.0;
    *(double *)(a1 + 32) = result;
    v4 = (34953 * (__int16)(v3 / 60000)) >> 16;
    *(_DWORD *)(a1 + 20) = v3 / 3600000;
    *(_DWORD *)(a1 + 24) = (__int16)(v3 / 60000
                                   - 60 * ((v4 >> 5) + ((unsigned __int16)(v4 & 0x8000) >> 15)));
    *(_BYTE *)(a1 + 41) = 0;
    *(_BYTE *)(a1 + 43) = 1;
  }
  return result;
}

uint64_t sub_1ACBB5C44(uint64_t result)
{
  _BYTE *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v1 = (_BYTE *)(result + 42);
  if (!*(_BYTE *)(result + 42))
  {
    if (*(_BYTE *)(result + 40))
    {
      if (*(_QWORD *)result < 0x1A6401072FE00uLL)
      {
        v2 = (*(_QWORD *)result + 43200000) / 0x5265C00uLL
           + (int)(((double)(int)((*(_QWORD *)result + 43200000) / 0x5265C00uLL) + -1867216.25) / 36524.25)
           - (int)(((double)(int)((*(_QWORD *)result + 43200000) / 0x5265C00uLL) + -1867216.25) / 36524.25) / 4
           + 1525;
        v3 = (int)(((double)v2 + -122.1) / 365.25);
        v4 = v2 - 36525 * (v3 & 0x7FFFu) / 0x64;
        v5 = (int)((double)v4 / 30.6001);
        *(_DWORD *)(result + 16) = v4 - (int)((double)v5 * 30.6001);
        if (v5 < 14)
          v6 = -1;
        else
          v6 = -13;
        v7 = v6 + v5;
        if (v7 > 2)
          v8 = -4716;
        else
          v8 = -4715;
        *(_DWORD *)(result + 8) = v8 + v3;
        *(_DWORD *)(result + 12) = v7;
      }
      else
      {
        *(_OWORD *)(result + 16) = 0u;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)result = 0u;
        v1 = (_BYTE *)(result + 46);
      }
    }
    else
    {
      *(_QWORD *)(result + 8) = 0x1000007D0;
      *(_DWORD *)(result + 16) = 1;
    }
    *v1 = 1;
  }
  return result;
}

_QWORD **sub_1ACBB5DA0(_QWORD **result, _QWORD *a2, char *__s)
{
  _QWORD **v4;
  size_t v6;
  unint64_t v7;
  void *v8;

  v4 = result;
  if (!__s)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v6 = strlen(__s);
  v7 = v6 + 1;
  if (!a2)
  {
    result = (_QWORD **)sub_1ACB5D828(v6 + 1);
    v8 = result;
    if (!result)
      goto LABEL_8;
    goto LABEL_7;
  }
  result = (_QWORD **)sub_1ACBE1124((uint64_t)a2, v7);
  v8 = result;
  if (result)
LABEL_7:
    result = (_QWORD **)memcpy(v8, __s, v7);
LABEL_8:
  if (*v4)
    result = (_QWORD **)sub_1ACBE0F9C(a2, *v4);
  *v4 = v8;
  return result;
}

uint64_t sub_1ACBB5E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  char *v8;
  unsigned __int8 *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int8 *v14;
  int v15;
  _OWORD v17[5];
  __int128 v18;
  __int128 v19;

  if (!a3)
    return 0;
  if (!*(_QWORD *)a3)
    return 0;
  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v5 = sub_1ACBD1B0C(*(_QWORD *)a1, *(char **)a3, *(_BYTE **)(a1 + 8));
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(unsigned __int8 **)(a3 + 8);
  if (!v7)
    goto LABEL_15;
  v8 = *(char **)a3;
  if (!*(_QWORD *)a3)
  {
LABEL_16:
    v12 = sub_1ACBFCA9C(*(_QWORD *)a1, v7, *(unsigned __int8 **)(a1 + 8));
    v14 = *(unsigned __int8 **)(a3 + 16);
    if (v12)
    {
      v13 = *(_WORD *)(v12 + 99);
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  for (i = *(unsigned __int8 **)(a3 + 8); ; ++i)
  {
    v10 = *v8;
    v11 = *i;
    if ((_DWORD)v10 == (_DWORD)v11)
      break;
    if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
      goto LABEL_16;
LABEL_9:
    ++v8;
  }
  if (*v8)
    goto LABEL_9;
  v12 = *(_QWORD *)(v5 + 16);
  if (v12)
  {
    while (1)
    {
      v13 = *(_WORD *)(v12 + 99);
      if ((v13 & 3) == 2)
        break;
      v12 = *(_QWORD *)(v12 + 40);
      if (!v12)
        goto LABEL_15;
    }
    v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_18:
    v15 = *(unsigned __int16 *)(v12 + 94) + 1;
    *(_WORD *)(v12 + 99) = v13 & 0xFFFB;
    sub_1ACBFCDC8(v14, v15, *(_QWORD *)(v12 + 16), v12);
    *(_WORD *)(v12 + 99) |= 0x80u;
    if (!*(_QWORD *)(v12 + 72))
    {
      *(_WORD *)(v6 + 58) = **(_WORD **)(v12 + 16);
      goto LABEL_21;
    }
    return 0;
  }
LABEL_15:
  v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_20:
  v18 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  WORD6(v18) = *(_WORD *)(v6 + 60);
  sub_1ACBFCDC8(v14, 1, v6 + 58, (uint64_t)v17);
  *(_WORD *)(v6 + 60) = WORD6(v18);
LABEL_21:
  *(_DWORD *)(v6 + 48) |= 0x10u;
  return 0;
}

uint64_t sub_1ACBB5FAC(uint64_t a1, int a2, int a3, int a4, int8x8_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  uint8x8_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v9 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v10 = *(_DWORD *)(v9 + 52);
  *(_BYTE *)(v9 + 38) = a3;
  v11 = v10 - *(_DWORD *)(v9 + 56);
  if (v11 > a3)
    a3 = v11;
  if ((*(_WORD *)(v9 + 40) & 2) != 0)
  {
    if (!*(_BYTE *)(a1 + 17))
      return 8;
    v17 = *(_DWORD *)(a1 + 20);
    v16 = 8;
    goto LABEL_23;
  }
  if ((a2 - 512) <= 0xFE00)
  {
    a5.i32[0] = a2;
    v12 = (uint8x8_t)vcnt_s8(a5);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.i32[0] <= 1u)
    {
      v13 = a3 > 32 && a2 == 512;
      v14 = v13 ? 1024 : a2;
      *(_DWORD *)(v9 + 52) = v14;
      v15 = *(_QWORD *)(v9 + 136);
      if (v15)
      {
        *(_QWORD *)(v9 + 136) = v15 - 4;
        sub_1ACBEBAB0(v15 - 4);
        *(_QWORD *)(v9 + 136) = 0;
      }
    }
  }
  v16 = sub_1ACB5AAC0(*(_QWORD *)v9, (_DWORD *)(v9 + 52), a3);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v9 + 52) - (unsigned __int16)a3;
  if (a4)
    *(_WORD *)(v9 + 40) |= 2u;
  if (*(_BYTE *)(a1 + 17))
  {
    v17 = *(_DWORD *)(a1 + 20);
LABEL_23:
    v18 = v17 - 1;
    *(_DWORD *)(a1 + 20) = v18;
    if (!v18)
      sub_1ACBED048(a1);
  }
  return v16;
}

uint64_t *sub_1ACBB60F8(uint64_t *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (!*((_DWORD *)result + 12))
  {
    v9 = result;
    if (!*((_BYTE *)result + 302))
    {
      v10 = *result;
      v11 = *(_DWORD *)(*result + 44);
      result = (uint64_t *)sub_1ACBE9258(*result, a2, &a9);
      if (result)
      {
        v12 = result;
        ++*((_BYTE *)v9 + 30);
        v21 = v9[51];
        v19 = *(_OWORD *)(v9 + 47);
        v20 = *(_OWORD *)(v9 + 49);
        v15 = *(_OWORD *)(v9 + 39);
        v16 = *(_OWORD *)(v9 + 41);
        v17 = *(_OWORD *)(v9 + 43);
        v18 = *(_OWORD *)(v9 + 45);
        v13 = *(_OWORD *)(v9 + 35);
        v14 = *(_OWORD *)(v9 + 37);
        v9[51] = 0;
        *(_OWORD *)(v9 + 47) = 0u;
        *(_OWORD *)(v9 + 49) = 0u;
        *(_OWORD *)(v9 + 43) = 0u;
        *(_OWORD *)(v9 + 45) = 0u;
        *(_OWORD *)(v9 + 39) = 0u;
        *(_OWORD *)(v9 + 41) = 0u;
        *(_OWORD *)(v9 + 35) = 0u;
        *(_OWORD *)(v9 + 37) = 0u;
        *(_DWORD *)(v10 + 44) |= 2u;
        sub_1ACB5CFD8(v9, result);
        *(_DWORD *)(v10 + 44) = v11;
        result = sub_1ACBE0F9C((_QWORD *)v10, v12);
        *(_OWORD *)(v9 + 47) = v19;
        *(_OWORD *)(v9 + 49) = v20;
        v9[51] = v21;
        *(_OWORD *)(v9 + 39) = v15;
        *(_OWORD *)(v9 + 41) = v16;
        *(_OWORD *)(v9 + 43) = v17;
        *(_OWORD *)(v9 + 45) = v18;
        *(_OWORD *)(v9 + 35) = v13;
        *(_OWORD *)(v9 + 37) = v14;
        --*((_BYTE *)v9 + 30);
      }
      else
      {
        if (!*(_BYTE *)(v10 + 103))
          *((_DWORD *)v9 + 6) = 18;
        ++*((_DWORD *)v9 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBB6258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 *v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  __int16 v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;
  const char *v41;
  uint64_t v42;
  int v45;
  uint64_t v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t i;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __int16 v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  const char *j;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;

  if (*(_QWORD *)(a1 + 400) || *(_QWORD *)(a3 + 104) || *(_BYTE *)(a2 + 63) == 1)
    return 0;
  v8 = *(_QWORD *)a1;
  if ((_DWORD)a4 == 11)
  {
    if (*(__int16 *)(a2 + 52) < 0 || (a4 = *(unsigned __int8 *)(a2 + 62), (_DWORD)a4 == 11))
      a4 = 2;
  }
  v9 = *(_QWORD *)(a3 + 40);
  if (*(_DWORD *)v9 != 1)
    return 0;
  if (*(_QWORD *)(v9 + 48))
    return 0;
  if (*(_QWORD *)(a3 + 48))
    return 0;
  if (*(_QWORD *)(a3 + 72))
    return 0;
  if (*(_QWORD *)(a3 + 56))
    return 0;
  if (*(_QWORD *)(a3 + 96))
    return 0;
  if (*(_QWORD *)(a3 + 80))
    return 0;
  v203 = a5;
  if ((*(_BYTE *)(a3 + 4) & 1) != 0)
    return 0;
  v10 = *(_QWORD *)(a3 + 32);
  if (*(_DWORD *)v10 != 1 || **(unsigned __int8 **)(v10 + 8) != 180)
    return 0;
  v11 = a4;
  result = sub_1ACC10E6C(a1, 0, v9 + 8, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v19 = result;
  if (*(_DWORD *)(result + 40) == *(_DWORD *)(a2 + 40) && *(_QWORD *)(result + 96) == *(_QWORD *)(a2 + 96))
    return 0;
  v20 = *(_DWORD *)(a2 + 48);
  v21 = *(_DWORD *)(result + 48);
  if (((v21 ^ v20) & 0x80) != 0)
    return 0;
  if (*(_BYTE *)(result + 63))
    return 0;
  v22 = *(unsigned __int16 *)(a2 + 54);
  if (v22 != *(unsigned __int16 *)(result + 54)
    || *(unsigned __int16 *)(a2 + 52) != *(unsigned __int16 *)(result + 52)
    || (v20 & 0x10000) != 0 && (v21 & 0x10000) == 0)
  {
    return 0;
  }
  if ((__int16)v22 >= 1)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(a2 + 8);
      v201 = *(_QWORD *)(v19 + 8);
      v25 = v24 + 16 * v23;
      v27 = *(_WORD *)(v25 + 14);
      v26 = (__int16 *)(v25 + 14);
      v28 = v27 & 0x60;
      v29 = v201 + 16 * v23;
      v31 = *(_WORD *)(v29 + 14);
      v30 = (_WORD *)(v29 + 14);
      if (v28 != (v31 & 0x60))
        return 0;
      if (v28)
      {
        v32 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(_BYTE *)(v19 + 63)
          && (v50 = *(_DWORD **)(v19 + 80)) != 0
          && *v50 >= v32)
        {
          v33 = *(unsigned __int8 **)&v50[6 * (v32 - 1) + 2];
        }
        else
        {
          v33 = 0;
        }
        v34 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(_BYTE *)(a2 + 63)
          && (v51 = *(_DWORD **)(a2 + 80)) != 0
          && *v51 >= v34)
        {
          v35 = *(unsigned __int8 **)&v51[6 * (v34 - 1) + 2];
        }
        else
        {
          v35 = 0;
        }
        if (sub_1ACC0ABAC(0, v33, v35, 0xFFFFFFFFLL))
          return 0;
      }
      if (*(unsigned __int8 *)(v24 + 16 * v23 + 9) != *(unsigned __int8 *)(v201 + 16 * v23 + 9))
        return 0;
      v36 = *v26;
      if ((*v26 & 0x200) != 0)
      {
        v38 = *(_QWORD *)(v24 + 16 * v23) - 1;
        while (*(unsigned __int8 *)++v38)
          ;
        if ((v36 & 4) != 0)
        {
          while (*(unsigned __int8 *)++v38)
            ;
        }
        v37 = (const char *)(v38 + 1);
      }
      else
      {
        v37 = 0;
      }
      if ((*v30 & 0x200) != 0)
      {
        v42 = *(_QWORD *)(v201 + 16 * v23) - 1;
        while (*(unsigned __int8 *)++v42)
          ;
        if ((*v30 & 4) != 0)
        {
          while (*(unsigned __int8 *)++v42)
            ;
        }
        v41 = (const char *)(v42 + 1);
      }
      else
      {
        v41 = 0;
      }
      if (sqlite3_stricmp(v37, v41)
        || (*(_BYTE *)(v24 + 16 * v23 + 8) & 0xF) != 0 && (*(_BYTE *)(v201 + 16 * v23 + 8) & 0xF) == 0)
      {
        return 0;
      }
      if (v23 && (v36 & 0x60) == 0)
      {
        v45 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(_BYTE *)(a2 + 63)
          && (v52 = *(_DWORD **)(a2 + 80)) != 0
          && *v52 >= v45)
        {
          v46 = *(_QWORD *)&v52[6 * (v45 - 1) + 2];
        }
        else
        {
          v46 = 0;
        }
        v47 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(_BYTE *)(v19 + 63)
          && (v48 = *(_DWORD **)(v19 + 80)) != 0
          && *v48 >= v47)
        {
          v49 = *(_QWORD *)&v48[6 * (v47 - 1) + 2];
          if ((v46 != 0) == (v49 == 0) || v46 && strcmp(*(const char **)(v46 + 8), *(const char **)(v49 + 8)))
            return 0;
        }
        else if (v46)
        {
          return 0;
        }
      }
    }
    while (++v23 < *(__int16 *)(a2 + 54));
  }
  v53 = *(_QWORD *)(a2 + 16);
  if (v53)
  {
    v54 = 0;
    while (1)
    {
      if (*(_BYTE *)(v53 + 98))
        v54 = 1;
      v55 = *(_QWORD *)(v19 + 16);
      if (!v55)
        return 0;
      while (1)
      {
        result = sub_1ACC34520(v53, v55);
        if ((_DWORD)result)
          break;
        v55 = *(_QWORD *)(v55 + 40);
        if (!v55)
          return result;
      }
      if (*(_DWORD *)(v55 + 88) == *(_DWORD *)(v53 + 88) && *(_QWORD *)(v19 + 96) == *(_QWORD *)(a2 + 96))
      {
        if (!off_1ECD3B2E0)
          return 0;
        result = off_1ECD3B2E0(411);
        if (!(_DWORD)result)
          return result;
      }
      v53 = *(_QWORD *)(v53 + 40);
      if (!v53)
        goto LABEL_97;
    }
  }
  v54 = 0;
LABEL_97:
  v56 = *(_QWORD *)(a2 + 32);
  if (v56 && sub_1ACC0B0F4(*(_QWORD *)(v19 + 32), v56, 0xFFFFFFFFLL))
    return 0;
  v57 = *(_QWORD *)(v8 + 48);
  if ((v57 & 0x4000) == 0)
  {
    if ((v57 & 0x100000000) == 0)
    {
LABEL_104:
      v58 = *(_QWORD *)(v19 + 96);
      if (v58)
      {
        v59 = (uint64_t *)(*(_QWORD *)(v8 + 32) + 24);
        LODWORD(v60) = -1;
        do
        {
          v61 = *v59;
          v59 += 4;
          v60 = (v60 + 1);
        }
        while (v61 != v58);
      }
      else
      {
        v60 = 4294934528;
      }
      v62 = sub_1ACBA8698((uint64_t *)a1, v56, v13, v14, v15, v16, v17, v18);
      sub_1ACB7A4DC(a1, v60);
      v63 = *(unsigned int *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v63 + 2;
      v68 = sub_1ACC33FB8(a1, v203, a2);
      v69 = *(_BYTE *)(a1 + 31);
      if (v69)
      {
        v70 = v69 - 1;
        *(_BYTE *)(a1 + 31) = v70;
        v202 = *(_DWORD *)(a1 + 4 * v70 + 224);
      }
      else
      {
        v202 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v202;
      }
      sub_1ACBFF554(v62, 75, 0, v202, v64, v65, v66, v67);
      if (*(_BYTE *)(a1 + 31))
      {
        v74 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v74;
        v200 = *(_DWORD *)(a1 + 4 * v74 + 224);
      }
      else
      {
        v200 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v200;
      }
      sub_1ACB7A514((_QWORD *)a1, (v63 + 1), v203, a2, 113, v71, v72, v73);
      if ((*(_BYTE *)(v8 + 44) & 4) == 0
        && (*(__int16 *)(a2 + 52) < 0 && *(_QWORD *)(a2 + 16) || v54 || (v11 - 3) <= 0xFFFFFFFD))
      {
        v79 = sub_1ACBFF554(v62, 36, (v63 + 1), 0, v75, v76, v77, v78);
        v198 = sub_1ACC08CD4(v62, 9, v80, v81, v82, v83, v84, v85);
        if (*(_BYTE *)(*(_QWORD *)v62 + 103))
          v86 = &byte_1EECAD280;
        else
          v86 = (char *)(*(_QWORD *)(v62 + 136) + 40 * v79);
        *((_DWORD *)v86 + 2) = *(_DWORD *)(v62 + 144);
      }
      else
      {
        v198 = 0;
      }
      if ((*(_BYTE *)(v19 + 48) & 0x80) != 0)
      {
        sub_1ACC08EA0(a1, v203, *(_DWORD *)(a2 + 40), 1, *(_QWORD *)a2);
        sub_1ACC08EA0(a1, v60, *(_DWORD *)(v19 + 40), 0, *(_QWORD *)v19);
        v199 = 0;
      }
      else
      {
        sub_1ACB7A514((_QWORD *)a1, v63, v60, v19, 112, v76, v77, v78);
        v199 = sub_1ACBFF554(v62, 36, v63, 0, v87, v88, v89, v90);
        if (*(__int16 *)(a2 + 52) < 0)
        {
          if (*(_QWORD *)(a2 + 16) || (*(_BYTE *)(v8 + 44) & 8) != 0)
          {
            v115 = v62;
            v116 = 135;
            v117 = v63;
          }
          else
          {
            v115 = v62;
            v116 = 127;
            v117 = (v63 + 1);
          }
          v100 = sub_1ACBFF554(v115, v116, v117, v200, v91, v92, v93, v94);
        }
        else
        {
          v100 = sub_1ACBFF554(v62, 135, v63, v200, v91, v92, v93, v94);
          if ((*(_BYTE *)(v8 + 44) & 4) == 0)
          {
            v101 = sub_1ACB683F4(v62, 31, (v63 + 1), 0, v200, v97, v98, v99);
            sub_1ACC33938((uint64_t *)a1, v11, a2, v102, v103, v104, v105, v106);
            if (*(_BYTE *)(*(_QWORD *)v62 + 103))
              v107 = &byte_1EECAD280;
            else
              v107 = (char *)(*(_QWORD *)(v62 + 136) + 40 * v101);
            *((_DWORD *)v107 + 2) = *(_DWORD *)(v62 + 144);
          }
          sub_1ACC344BC(a1, v68, v200, v95, v96, v97, v98, v99);
        }
        v123 = *(_DWORD *)(v8 + 44);
        if ((v123 & 4) != 0)
        {
          sub_1ACC08D28(v62, 137, (v63 + 1), v118, v119, v120, v121, v122);
          v123 = *(_DWORD *)(v8 + 44);
          v124 = 152;
        }
        else
        {
          v124 = 169;
        }
        if ((v123 & 4) != 0)
        {
          sub_1ACB683F4(v62, 129, (v63 + 1), v63, v200, v120, v121, v122);
        }
        else
        {
          sub_1ACB683F4(v62, 134, v63, v202, 1, v120, v121, v122);
          v124 &= 0x39u;
        }
        sub_1ACB683F4(v62, 128, (v63 + 1), v202, v200, v125, v126, v127);
        if ((*(_BYTE *)(v8 + 44) & 4) == 0)
          sub_1ACB788AC((uint64_t *)v62, -1, a2, 0xFFFFFFFB);
        v132 = *(_DWORD *)(v62 + 144);
        v133 = __OFSUB__(v132, 1);
        v134 = v132 - 1;
        if (v134 < 0 == v133)
          *(_WORD *)(*(_QWORD *)(v62 + 136) + 40 * v134 + 2) = v124;
        sub_1ACBFF554(v62, 39, v63, v100, v128, v129, v130, v131);
        sub_1ACBFF554(v62, 122, v63, 0, v135, v136, v137, v138);
        sub_1ACBFF554(v62, 122, (v63 + 1), 0, v139, v140, v141, v142);
      }
      v143 = *(_QWORD *)(a2 + 16);
      if (!v143)
      {
LABEL_185:
        if (v199)
        {
          if (*(_BYTE *)(*(_QWORD *)v62 + 103))
            v190 = &byte_1EECAD280;
          else
            v190 = (char *)(*(_QWORD *)(v62 + 136) + 40 * v199);
          *((_DWORD *)v190 + 2) = *(_DWORD *)(v62 + 144);
        }
        if (v200)
        {
          v191 = *(unsigned __int8 *)(a1 + 31);
          if (v191 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v191 + 1;
            *(_DWORD *)(a1 + 4 * v191 + 224) = v200;
          }
        }
        if (v202)
        {
          v192 = *(unsigned __int8 *)(a1 + 31);
          if (v192 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v192 + 1;
            *(_DWORD *)(a1 + 4 * v192 + 224) = v202;
          }
        }
        if (!v198)
          return 1;
        if (*(_QWORD *)(a1 + 160))
          sub_1ACC32090((uint64_t *)a1, v108, v109, v110, v111, v112, v113, v114);
        sub_1ACBFF554(v62, 70, 0, 0, v111, v112, v113, v114);
        if (*(_BYTE *)(*(_QWORD *)v62 + 103))
          v197 = &byte_1EECAD280;
        else
          v197 = (char *)(*(_QWORD *)(v62 + 136) + 40 * v198);
        *((_DWORD *)v197 + 2) = *(_DWORD *)(v62 + 144);
        sub_1ACBFF554(v62, 122, (v63 + 1), 0, v193, v194, v195, v196);
        return 0;
      }
      while (1)
      {
        for (i = *(_QWORD *)(v19 + 16); i; i = *(_QWORD *)(i + 40))
        {
          if (sub_1ACC34520(v143, i))
            break;
        }
        sub_1ACB683F4(v62, 112, v63, *(unsigned int *)(i + 88), v60, v112, v113, v114);
        sub_1ACC08ECC(a1, i);
        sub_1ACB683F4(v62, 113, (v63 + 1), *(unsigned int *)(v143 + 88), v203, v149, v150, v151);
        sub_1ACC08ECC(a1, v143);
        v156 = *(_DWORD *)(v62 + 144);
        v133 = __OFSUB__(v156, 1);
        v157 = v156 - 1;
        if (v157 < 0 == v133)
          *(_WORD *)(*(_QWORD *)(v62 + 136) + 40 * v157 + 2) = 1;
        v163 = sub_1ACBFF554(v62, 36, v63, 0, v152, v153, v154, v155);
        if ((*(_BYTE *)(v8 + 44) & 4) != 0)
          break;
        if ((*(_BYTE *)(v19 + 48) & 0x80) != 0)
        {
          if ((*(_WORD *)(v143 + 99) & 3) == 2)
            v164 = 9;
          else
            v164 = 8;
          goto LABEL_177;
        }
LABEL_176:
        v164 = 8;
LABEL_177:
        sub_1ACB683F4(v62, 134, v63, v202, 1, v160, v161, v162);
        if ((*(_BYTE *)(v8 + 44) & 4) == 0 && (*(_BYTE *)(a2 + 48) & 0x80) != 0 && (*(_WORD *)(v143 + 99) & 3) == 2)
          sub_1ACC33E98(a1, a2, (v63 + 1), v202, v175, v176, v177, v178);
LABEL_181:
        sub_1ACBFF554(v62, 138, (v63 + 1), v202, v175, v176, v177, v178);
        v183 = *(_DWORD *)(v62 + 144);
        v133 = __OFSUB__(v183, 1);
        v184 = v183 - 1;
        if (v184 < 0 == v133)
          *(_WORD *)(*(_QWORD *)(v62 + 136) + 40 * v184 + 2) = v164;
        sub_1ACBFF554(v62, 39, v63, (v163 + 1), v179, v180, v181, v182);
        v189 = &byte_1EECAD280;
        if (!*(_BYTE *)(*(_QWORD *)v62 + 103))
          v189 = (char *)(*(_QWORD *)(v62 + 136) + 40 * v163);
        *((_DWORD *)v189 + 2) = *(_DWORD *)(v62 + 144);
        sub_1ACBFF554(v62, 122, v63, 0, v185, v186, v187, v188);
        sub_1ACBFF554(v62, 122, (v63 + 1), 0, v144, v145, v146, v147);
        v143 = *(_QWORD *)(v143 + 40);
        if (!v143)
          goto LABEL_185;
      }
      v165 = *(unsigned __int16 *)(i + 96);
      if (!*(_WORD *)(i + 96))
      {
        LODWORD(v166) = 0;
LABEL_174:
        if ((_DWORD)v166 == (_DWORD)v165)
          goto LABEL_175;
        goto LABEL_176;
      }
      v166 = 0;
LABEL_165:
      v167 = *(unsigned __int8 **)(*(_QWORD *)(i + 64) + 8 * v166);
      if (!v167)
        goto LABEL_174;
      for (j = "BINARY"; ; ++j)
      {
        v169 = *(unsigned __int8 *)j;
        v170 = *v167;
        if ((_DWORD)v169 == (_DWORD)v170)
        {
          if (!*j)
          {
            if (++v166 == v165)
            {
LABEL_175:
              sub_1ACC08D28(v62, 137, (v63 + 1), v158, v159, v160, v161, v162);
              sub_1ACBFF554(v62, 129, (v63 + 1), v63, v171, v172, v173, v174);
              v164 = 152;
              goto LABEL_181;
            }
            goto LABEL_165;
          }
        }
        else if (byte_1ACCB6333[v169] != byte_1ACCB6333[v170])
        {
          goto LABEL_174;
        }
        ++v167;
      }
    }
    return 0;
  }
  result = 0;
  if ((v57 & 0x100000000) == 0 && !*(_QWORD *)(a2 + 72))
    goto LABEL_104;
  return result;
}

uint64_t sub_1ACBB6E64(uint64_t a1, int a2, double a3)
{
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t i;
  uint64_t (*v13)(_QWORD);

  if (off_1EECAD248)
    a3 = off_1EECAD248(a1);
  if (*(_BYTE *)(a1 + 111))
  {
    if ((*(_BYTE *)(a1 + 44) & 1) == 0)
    {
LABEL_5:
      v5 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_1ACBE9148(a1);
    if ((*(_BYTE *)(a1 + 44) & 1) == 0)
      goto LABEL_5;
  }
  v5 = *(_BYTE *)(a1 + 197) == 0;
LABEL_8:
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 8;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v9);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 2)
          v8 = 1;
        sub_1ACBA4298(v10, a2, !v5, a3);
        v6 = *(_DWORD *)(a1 + 40);
      }
      ++v7;
      v9 += 32;
    }
    while (v7 < v6);
  }
  result = (uint64_t)sub_1ACB90524((int *)a1, 0x88u);
  if (off_1EECAD250)
    result = off_1EECAD250(result);
  if (v5)
  {
    for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    result = (uint64_t)sub_1ACBC4F54(a1);
  }
  if (!*(_BYTE *)(a1 + 111))
    result = sub_1ACBE91DC(a1);
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 48) &= 0xFFFFFFFDFFF7FFFFLL;
  v13 = *(uint64_t (**)(_QWORD))(a1 + 296);
  if (v13 && (v8 || !*(_BYTE *)(a1 + 101)))
    return v13(*(_QWORD *)(a1 + 288));
  return result;
}

uint64_t sub_1ACBB6FE4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t *v6;
  double v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t (*v11)(void);
  int v12;
  int v13;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _DWORD *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, int8x8_t *, _QWORD);
  uint64_t (**v41)(_QWORD);
  uint64_t (**v42)(void *);
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  char *__s1;
  int8x8_t *__s1a;
  const char *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;

  v4 = *(_QWORD *)a1;
  v51 = 0;
  v52 = 0;
  v49 = *(_QWORD *)(a1 + 200);
  v50 = 1;
  v5 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), &v52);
  if ((_DWORD)v5
    || (v6 = *(int8x8_t **)(a1 + 328),
        v5 = sub_1ACCB2128(*(_QWORD *)(a1 + 80), v6, *(_DWORD *)(*(_QWORD *)a1 + 8) + 1),
        (_DWORD)v5))
  {
    v8 = v5;
    v9 = 0;
LABEL_4:
    v10 = (_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    goto LABEL_5;
  }
  if (v6->i8[0])
  {
    v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, _QWORD, int *))(v4 + 56))(v4, v6, 0, &v50);
    v9 = 0;
    if ((_DWORD)v8)
      goto LABEL_48;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v50)
  {
    v9 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v15 = (uint64_t *)(a1 + 96);
    v16 = a2;
LABEL_26:
    while (1)
    {
      *(float *)&v7 = sub_1ACBB7848(a1, a2, v52, (_DWORD *)&v51 + 1, &v51, v7);
      if ((_DWORD)v17)
        break;
      LODWORD(v18) = HIDWORD(v51);
      v19 = *(unsigned int *)(a1 + 184);
      if (HIDWORD(v51) == -1)
      {
        v18 = (v52 - v19) / (*(_QWORD *)(a1 + 200) + 8);
        HIDWORD(v51) = v18;
      }
      v20 = *v15;
      if (!(v18 | a2) && *(_QWORD *)(a1 + 104) + v19 == v20)
      {
        v18 = (v52 - v20) / (*(_QWORD *)(a1 + 200) + 8);
        HIDWORD(v51) = v18;
      }
      if (v20 == v19)
      {
        v21 = v51;
        v22 = sub_1ACBB7A78(a1, v51);
        if ((_DWORD)v22)
        {
          v8 = v22;
          goto LABEL_4;
        }
        *(_DWORD *)(a1 + 32) = v21;
        if (*(_DWORD *)(a1 + 188) < v21)
          *(_DWORD *)(a1 + 188) = v21;
      }
      if ((_DWORD)v18)
      {
        v23 = 0;
        v24 = v9 + v18;
        while (1)
        {
          if (v16)
          {
            ++*(_DWORD *)(a1 + 132);
            for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
              *(_DWORD *)(i + 24) = 1;
            sub_1ACB5AD68(*(_QWORD **)(a1 + 336), 0);
          }
          v26 = sub_1ACBB7B7C(a1, (_QWORD *)(a1 + 96), 0, 1, 0);
          if ((_DWORD)v26)
            break;
          v16 = 0;
          ++v9;
          if (++v23 == (_DWORD)v18)
          {
            v9 = v24;
            goto LABEL_26;
          }
        }
        v8 = v26;
        if ((_DWORD)v26 != 101)
        {
          if ((_DWORD)v26 == 522)
            goto LABEL_49;
          goto LABEL_48;
        }
        v16 = 0;
        *v15 = v52;
      }
    }
    v8 = v17;
    if ((_DWORD)v17 != 101)
      goto LABEL_4;
    goto LABEL_49;
  }
LABEL_48:
  if ((_DWORD)v8)
    goto LABEL_4;
LABEL_49:
  v27 = sub_1ACB5AAC0(a1, &v49, 0xFFFFFFFFLL);
  v10 = (_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  if ((_DWORD)v27
    || (v28 = (int8x8_t *)(*(_QWORD *)(a1 + 328) + 4),
        v27 = sub_1ACCB2128(*(_QWORD *)(a1 + 80), v28, *(_DWORD *)(*(_QWORD *)a1 + 8) + 1),
        (_DWORD)v27)
    || *(unsigned __int8 *)(a1 + 21) - 4 <= 0xFFFFFFFC
    && ((v29 = *(_QWORD *)(a1 + 72), *(_QWORD *)v29)
     && ((v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 80))(v29, 21, 0),
          (_DWORD)v27 != 12)
       ? (v30 = (_DWORD)v27 == 0)
       : (v30 = 1),
         !v30)
     || !*(_BYTE *)(a1 + 11)
     && *(_BYTE *)(a1 + 14)
     && (v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72)), (_DWORD)v27)))
  {
    v8 = v27;
    goto LABEL_5;
  }
  v8 = sub_1ACB8FD38(a1, v28->i8[0] != 0, 0);
  if ((_DWORD)v8 || !v28->i8[0] || !v50)
    goto LABEL_5;
  **(_DWORD **)(a1 + 328) = 0;
  v31 = *(_QWORD *)a1;
  v54 = 0;
  v32 = 2 * *(int *)(v31 + 4);
  v33 = (void *)sub_1ACB5D828(v32);
  if (!v33)
  {
    v8 = 7;
    goto LABEL_5;
  }
  v34 = v33;
  bzero(v33, v32);
  v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, void *, _QWORD, _QWORD))(v31 + 40))(v31, v28, v34, *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u, 0);
  if (!(_DWORD)v8)
  {
    v35 = *(int *)(v31 + 4);
    v8 = (*(uint64_t (**)(void *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v54);
    if (!(_DWORD)v8)
    {
      v43 = *(int *)(v31 + 8) + 1;
      v36 = (_DWORD *)sub_1ACB5D828(v54 + v43 + 6);
      if (v36)
      {
        v44 = v36;
        *v36 = 0;
        __s1 = (char *)v54;
        v48 = (const char *)(v36 + 1);
        v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        if (!(_DWORD)v8)
        {
          v48[v54] = 0;
          v48[v54 + 1] = 0;
          if (v54 < 1)
          {
LABEL_88:
            if (*(_QWORD *)v34)
            {
              (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
              *(_QWORD *)v34 = 0;
            }
            v40 = *(uint64_t (**)(uint64_t, int8x8_t *, _QWORD))(v31 + 48);
            if (v40)
              v8 = v40(v31, v28, 0);
            else
              v8 = 0;
          }
          else
          {
            v45 = (uint64_t)v34 + v35;
            v37 = v48;
            __s1a = (int8x8_t *)&v48[(_QWORD)__s1 + 2];
            while (1)
            {
              v53 = 0;
              v8 = (*(uint64_t (**)(uint64_t, const char *, _QWORD, int *))(v31 + 56))(v31, v37, 0, &v53);
              if ((_DWORD)v8)
                break;
              if (v53)
              {
                v38 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD, _QWORD))(v31 + 40))(v31, v37, v45, *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u, 0);
                if ((_DWORD)v38)
                {
                  v39 = v38;
LABEL_94:
                  v8 = v39;
                  break;
                }
                v39 = sub_1ACCB2128(v45, __s1a, v43);
                if (*(_QWORD *)v45)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
                  *(_QWORD *)v45 = 0;
                }
                if ((_DWORD)v39)
                  goto LABEL_94;
                if (__s1a->i8[0] && !strcmp((const char *)__s1a, (const char *)v28))
                  break;
              }
              v37 += (strlen(v37) & 0x3FFFFFFF) + 1;
              if (v37 - v48 >= v54)
                goto LABEL_88;
            }
          }
        }
        v41 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v44);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v44);
          v44 = (_DWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_101;
          v41 = &xmmword_1ECD3B1D0;
        }
        (*v41)(v44);
      }
      else
      {
        v8 = 7;
      }
    }
  }
LABEL_101:
  if (*(_QWORD *)v34)
  {
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
    *(_QWORD *)v34 = 0;
  }
  v42 = (uint64_t (**)(void *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_108;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v34);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v34);
  v34 = (void *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v42 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
LABEL_108:
    (*v42)(v34);
  }
LABEL_5:
  if (a2 && v9)
    sqlite3_log(539, "recovered %d pages from %s", v9, *(const char **)(a1 + 224));
  if (*v10 || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72)) & 0x1000) != 0)
  {
    v13 = 512;
  }
  else
  {
    v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 72) + 88);
    if (v11)
    {
      v12 = v11();
      if (v12 >= 0x10000)
        v13 = 0x10000;
      else
        v13 = v12;
      if (v12 < 32)
        v13 = 512;
    }
    else
    {
      v13 = 4096;
    }
  }
  *(_DWORD *)(a1 + 184) = v13;
  return v8;
}

uint64_t sub_1ACBB771C(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 24);
  return 0;
}

uint64_t sub_1ACBB772C(uint64_t a1, char *__dst, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = a4 + a3;
  if (v4 > *(_QWORD *)(a1 + 24))
    return 522;
  if (a4 && *(_QWORD *)(a1 + 40) == a4)
  {
    v8 = *(_QWORD **)(a1 + 48);
  }
  else
  {
    v9 = 0;
    v8 = (_QWORD *)(a1 + 16);
    do
    {
      v8 = (_QWORD *)*v8;
      if (!v8)
        break;
      v9 += *(int *)(a1 + 8);
    }
    while (v9 <= a4);
  }
  v10 = *(int *)(a1 + 8);
  v11 = a4 % v10;
  v12 = v10 - a4 % v10;
  v13 = a3 - v12;
  if (a3 < v12)
    v12 = a3;
  v14 = v12;
  memcpy(__dst, (char *)v8 + v11 + 8, v12);
  if ((v13 & 0x80000000) == 0)
  {
    v8 = (_QWORD *)*v8;
    if (v13 && v8 != 0)
    {
      v16 = &__dst[v14];
      do
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = v13 - v17;
        if (v13 < v17)
          v17 = v13;
        v19 = v17;
        memcpy(v16, v8 + 1, v17);
        if (v18 < 0)
          break;
        v16 += v19;
        v8 = (_QWORD *)*v8;
        v20 = !v18 || v8 == 0;
        v13 = v18;
      }
      while (!v20);
    }
  }
  result = 0;
  if (v8)
    v21 = v4;
  else
    v21 = 0;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = v8;
  return result;
}

float sub_1ACBB7848(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(unsigned int *)(a1 + 184);
    v12 = v11 + v11 * (v10 / v11);
  }
  else
  {
    v12 = 0;
    v11 = *(unsigned int *)(a1 + 184);
  }
  *(_QWORD *)(a1 + 96) = v12;
  if (v12 + v11 <= a3
    && (!a2 && v12 == *(_QWORD *)(a1 + 104)
     || !(*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v18, 8, v12)&& v18[0] == 0xD763A120F905D5D9)&& !(*(unsigned int (**)(_QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 8))
  {
    *a4 = bswap32(HIDWORD(v17));
    if (!(*(unsigned int (**)(_QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 12))
    {
      *(_DWORD *)(a1 + 56) = bswap32(HIDWORD(v17));
      if (!(*(unsigned int (**)(_QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 16))
      {
        *a5 = bswap32(HIDWORD(v17));
        v13 = *(_QWORD *)(a1 + 96);
        if (v13)
        {
          v14 = *(_DWORD *)(a1 + 184);
LABEL_15:
          *(_QWORD *)(a1 + 96) = v13 + v14;
          return *(float *)&a6;
        }
        v17 = 0;
        if (!sub_1ACBF2944(*(_QWORD *)(a1 + 80), v12 + 20, &v17)
          && !sub_1ACBF2944(*(_QWORD *)(a1 + 80), v12 + 24, (_DWORD *)&v17 + 1))
        {
          v15 = HIDWORD(v17);
          if (!HIDWORD(v17))
          {
            v15 = *(_DWORD *)(a1 + 200);
            HIDWORD(v17) = v15;
          }
          if (v15 - 512 <= 0xFE00)
          {
            v14 = v17;
            if (v17 >= 0x20 && v17 <= 0x10000)
            {
              a6 = COERCE_DOUBLE(vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v15, v17), (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v15, v17), (int32x2_t)-1))));
              if ((BYTE4(a6) & 1) != 0 && (LOBYTE(a6) & 1) != 0)
              {
                sub_1ACB5AAC0(a1, (char *)&v17 + 4, 0xFFFFFFFFLL);
                *(_DWORD *)(a1 + 184) = v14;
                v13 = *(_QWORD *)(a1 + 96);
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return *(float *)&a6;
}

uint64_t sub_1ACBB7A78(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  void *v8;
  int64_t v9;
  int64_t v10;

  v3 = **(_QWORD **)(a1 + 72);
  if (!v3 || *(unsigned __int8 *)(a1 + 21) - 4 > 0xFFFFFFFC)
    return 0;
  v10 = 0;
  v5 = *(_QWORD *)(a1 + 200);
  result = (*(uint64_t (**)(void))(v3 + 48))();
  v7 = (int)v5 * (unint64_t)a2;
  v9 = v7;
  if ((_DWORD)result)
    return result;
  if (v10 == v7)
    return 0;
  if (v10 <= v7)
  {
    if (v10 + (int)v5 > v7)
      goto LABEL_12;
    v8 = *(void **)(a1 + 328);
    bzero(v8, (int)v5);
    (*(void (**)(_QWORD, uint64_t, int64_t *))(**(_QWORD **)(a1 + 72) + 80))(*(_QWORD *)(a1 + 72), 5, &v9);
    result = (*(uint64_t (**)(_QWORD, void *, _QWORD, int64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), v8, (int)v5, v9 - (int)v5);
    if (!(_DWORD)result)
      goto LABEL_12;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
    if (!(_DWORD)result)
    {
LABEL_12:
      result = 0;
      *(_DWORD *)(a1 + 40) = a2;
    }
  }
  return result;
}

uint64_t sub_1ACBB7B7C(uint64_t a1, _QWORD *a2, unsigned int *a3, int a4, int a5)
{
  _BOOL4 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  void (*v38)(_QWORD, _QWORD);
  uint64_t *v39;
  _BOOL4 v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD, unsigned __int8 *, uint64_t, uint64_t);
  uint64_t (*v46)(_QWORD, unsigned __int8 *, uint64_t, uint64_t);
  uint64_t (*v47)(_QWORD, unsigned __int8 *, uint64_t, uint64_t);
  uint64_t (*v48)(_QWORD, unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t (*v50)(_QWORD, uint64_t, _QWORD, uint64_t);
  int v51;
  uint64_t *v52;

  if (a4)
    v10 = 1;
  else
    v10 = *(_BYTE *)(a1 + 26) == 0;
  v11 = *(unsigned __int8 **)(a1 + 328);
  v12 = 80;
  if (!a4)
    v12 = 88;
  v13 = *(_QWORD *)(a1 + v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, &v52, 4, *a2);
  if ((_DWORD)v14)
    return v14;
  v16 = v52;
  v15 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, *(unsigned int *)(a1 + 200), *a2 + 4);
  if ((_DWORD)v15)
    return v15;
  v17 = bswap32(v16);
  v18 = *(_QWORD *)(a1 + 200) + (4 * a4 + 4) + *a2;
  *a2 = v18;
  if (!(_DWORD)v17 || (_DWORD)v17 == *(_DWORD *)(a1 + 192))
    return 101;
  if (v17 > *(_DWORD *)(a1 + 32))
    return 0;
  if (a3)
  {
    v20 = v17 - 1;
    if ((int)v17 - 1 < *a3)
    {
      v21 = a3;
      while (1)
      {
        v22 = v21[2];
        if (!v22)
          break;
        v23 = v20 / v22;
        v20 %= v22;
        v21 = *(unsigned int **)&v21[2 * v23 + 4];
        if (!v21)
          goto LABEL_20;
      }
      if (*v21 >= 0xF81)
      {
        v28 = v20 % 0x7C;
        v29 = v21 + 4;
        v30 = v29[v20 % 0x7C];
        if (v30)
        {
          v31 = v20 + 1;
          while (v30 != v31)
          {
            if (v28 == 123)
              v28 = 0;
            else
              ++v28;
            v30 = v29[v28];
            if (!v30)
              goto LABEL_20;
          }
          return 0;
        }
      }
      else if (((*((unsigned __int8 *)v21 + ((unint64_t)v20 >> 3) + 16) >> (v20 & 7)) & 1) != 0)
      {
        return 0;
      }
    }
  }
LABEL_20:
  v51 = 0;
  if (a4)
  {
    v15 = sub_1ACBF2944(v13, v18 - 4, &v51);
    if ((_DWORD)v15)
      return v15;
    if (!a5)
    {
      v24 = *(_DWORD *)(a1 + 56);
      v25 = (*(_DWORD *)(a1 + 200) - 200);
      if ((int)v25 < 1)
        goto LABEL_43;
      v26 = v25 - 200;
      if (v25 < 0xC8)
        v26 = 0;
      if (v25 >= 0xC9)
      {
        v32 = 0;
        v33 = (((v26 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
        v27 = v25 - 200 * (v33 & 0x7FFFFFE);
        v34 = &v11[v25];
        v35 = v33 & 0x7FFFFFE;
        do
        {
          v24 += *v34;
          v32 += *(v34 - 200);
          v34 -= 400;
          v35 -= 2;
        }
        while (v35);
        v24 += v32;
        if (v33 == (v33 & 0x7FFFFFE))
        {
LABEL_43:
          if (v24 != v51)
            return 101;
          goto LABEL_44;
        }
      }
      else
      {
        v27 = (*(_DWORD *)(a1 + 200) - 200);
      }
      do
      {
        v24 += v11[v27];
        v36 = v27 > 0xC8;
        v27 -= 200;
      }
      while (v36);
      goto LABEL_43;
    }
  }
LABEL_44:
  if (a3)
  {
    v15 = sub_1ACBA79A4(a3, v17);
    if ((_DWORD)v15)
      return v15;
  }
  if ((_DWORD)v17 == 1)
  {
    v37 = v11[20];
    if (*(__int16 *)(a1 + 178) != v37)
    {
      *(_WORD *)(a1 + 178) = v37;
      v38 = *(void (**)(_QWORD, _QWORD))(a1 + 304);
      if (v38)
        v38(*(_QWORD *)(a1 + 320), *(unsigned int *)(a1 + 200));
    }
  }
  if (*(_QWORD *)(a1 + 344))
  {
    v39 = 0;
    v52 = 0;
    if (!a4)
      goto LABEL_55;
  }
  else
  {
    v39 = sub_1ACBEC22C(a1, v17);
    v52 = v39;
    if (!a4)
    {
      if (!v39)
        goto LABEL_55;
      v40 = (*((_WORD *)v39 + 26) & 8) == 0;
      goto LABEL_59;
    }
  }
  if (*(_BYTE *)(a1 + 11))
  {
LABEL_55:
    v40 = 1;
    goto LABEL_59;
  }
  v40 = *a2 <= *(_QWORD *)(a1 + 104);
LABEL_59:
  v41 = *(uint64_t **)(a1 + 72);
  v42 = *v41;
  if (!*v41)
    goto LABEL_62;
  if (*(unsigned __int8 *)(a1 + 21) <= 3u)
  {
    if (*(_BYTE *)(a1 + 21))
      LOBYTE(v40) = 0;
    if (v40)
      goto LABEL_69;
LABEL_62:
    v15 = 0;
    if (!a4 && !v39)
    {
      *(_BYTE *)(a1 + 25) |= 2u;
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(a1 + 288))(a1, v17, &v52, 1);
      *(_BYTE *)(a1 + 25) &= ~2u;
      if ((_DWORD)v15)
        return v15;
      sub_1ACBEE264((uint64_t)v52);
    }
    goto LABEL_92;
  }
  if (!v40)
    goto LABEL_62;
LABEL_69:
  v43 = *(_QWORD *)(a1 + 200);
  v44 = v43 * (v17 - 1);
  if (v10)
  {
    v15 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(v42 + 24))(*(_QWORD *)(a1 + 72), v11);
  }
  else
  {
    v45 = *(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v45)
    {
      v11 = (unsigned __int8 *)v45(*(_QWORD *)(a1 + 320), v11, v17, 7);
      v41 = *(uint64_t **)(a1 + 72);
      v43 = *(_QWORD *)(a1 + 200);
      v42 = *v41;
    }
    v15 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t))(v42 + 24))(v41, v11, v43, v44);
    v46 = *(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v46)
    {
      if (v46(*(_QWORD *)(a1 + 320), v11, v17, 3))
        v15 = v15;
      else
        v15 = 7;
    }
  }
  if (v17 > *(_DWORD *)(a1 + 40))
    *(_DWORD *)(a1 + 40) = v17;
  if (*(_QWORD *)(a1 + 112))
  {
    if (v10)
    {
      v47 = *(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (!v47
        || (v47(*(_QWORD *)(a1 + 320), v11, v17, 3) ? (v15 = v15) : (v15 = 7), *(_QWORD *)(a1 + 112)))
      {
        sub_1ACBEB96C();
      }
      v48 = *(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (v48)
      {
        v11 = (unsigned __int8 *)v48(*(_QWORD *)(a1 + 320), v11, v17, 7);
        if (v11)
          v15 = v15;
        else
          v15 = 7;
      }
    }
    else
    {
      sub_1ACBEB96C();
    }
  }
LABEL_92:
  if (v52)
  {
    v49 = v52[1];
    memcpy((void *)v49, v11, *(_QWORD *)(a1 + 200));
    (*(void (**)(uint64_t *))(a1 + 280))(v52);
    if ((_DWORD)v17 == 1)
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(v49 + 24);
    if (v10)
    {
      v50 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(a1 + 296);
      if (v50)
      {
        if (v50(*(_QWORD *)(a1 + 320), v49, *((unsigned int *)v52 + 12), 3))
          v15 = v15;
        else
          v15 = 7;
      }
    }
    sub_1ACBE906C((uint64_t)v52);
  }
  return v15;
}

_BYTE *sub_1ACBB80CC(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 16);
  if (*result)
  {
    *result = 0;
    if (*(int *)(a1 + 56) >= 2)
      return (_BYTE *)sub_1ACB8A2CC((uint64_t)result);
  }
  return result;
}

_QWORD *sub_1ACBB80F4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, _QWORD);
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _QWORD);
  unint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  const char *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  char *v80;
  int v81;
  char *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;

  v9 = *a1;
  if (*(_BYTE *)(*a1 + 103))
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  if (!*(_BYTE *)(v9 + 197))
  {
    v20 = *(_DWORD *)(v9 + 44);
    v21 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 24);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v21 + 113);
    if ((*(_BYTE *)(v21 + 114) & 1) != 0 || (v22 = sub_1ACB654E0(v9, 0, (char **)a1 + 1, 0, a5, a6, a7, a8)) == 0)
    {
      v23 = *(unsigned int *)(v9 + 40);
      if ((int)v23 < 2)
      {
LABEL_13:
        if ((v20 & 1) == 0)
          *(_DWORD *)(v9 + 44) &= ~1u;
        if (*(_BYTE *)(v9 + 111))
          *(_DWORD *)(v9 + 44) |= 0x10u;
        goto LABEL_4;
      }
      while (1)
      {
        v24 = v23 - 1;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * (v23 - 1) + 24) + 114) & 1) == 0)
        {
          v22 = sub_1ACB654E0(v9, (v23 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
          if (v22)
            break;
        }
        v23 = v24;
        if ((unint64_t)(v24 + 1) <= 2)
          goto LABEL_13;
      }
    }
    *((_DWORD *)a1 + 6) = v22;
    ++*((_DWORD *)a1 + 12);
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
LABEL_4:
  if (a4)
    ++*(_BYTE *)(v9 + 107);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(*a1 + 32);
    v16 = (uint64_t *)(v15 + 24);
    v17 = 0xFFFFFFFF00000000;
    do
    {
      v18 = *v16;
      v16 += 4;
      v17 += 0x100000000;
    }
    while (v18 != v14);
    v19 = (_BYTE **)(v15 + (v17 >> 27));
  }
  else
  {
    v19 = (_BYTE **)(a2 + 16);
  }
  v25 = sub_1ACB8D488((uint64_t)a1, a3, *(char **)(a2 + 24), *v19, a5, a6, a7, a8);
  v33 = v25;
  if (a4)
  {
    --*(_BYTE *)(v9 + 107);
    if (!v25)
    {
      v34 = *a1;
      v35 = *(_DWORD *)(*a1 + 40);
      if (v35 >= 1)
      {
        v36 = 0;
        v37 = *(_BYTE **)(a2 + 16);
        do
        {
          v40 = *(_QWORD *)(v34 + 32) + 32 * v36;
          if (*(_QWORD *)(v40 + 8))
          {
            if (v37)
            {
              v41 = *(unsigned __int8 **)v40;
              for (i = v37; ; ++i)
              {
                v43 = *i;
                v44 = *v41;
                if ((_DWORD)v43 == (_DWORD)v44)
                {
                  if (!*i)
                    break;
                }
                else if (byte_1ACCB6333[v43] != byte_1ACCB6333[v44])
                {
                  goto LABEL_30;
                }
                ++v41;
              }
            }
            if (a1[21])
              v38 = a1[21];
            else
              v38 = (uint64_t)a1;
            v39 = *(_DWORD *)(v38 + 124);
            if ((v39 & (1 << v36)) == 0)
            {
              *(_DWORD *)(v38 + 124) = v39 | (1 << v36);
              if (v36 == 1)
              {
                sub_1ACBE9418(v38);
                v35 = *(_DWORD *)(v34 + 40);
              }
            }
          }
LABEL_30:
          ++v36;
        }
        while (v36 < v35);
      }
      sub_1ACC0DD18(a1, v26, v27, v28, v29, v30, v31, v32);
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
    }
  }
  else if (!v25)
  {
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
  v45 = *(_QWORD *)(v25 + 96);
  if (v45)
  {
    v46 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 24);
    LODWORD(v47) = -1;
    do
    {
      v48 = *v46;
      v46 += 4;
      v47 = (v47 + 1);
    }
    while (v48 != v45);
  }
  else
  {
    v47 = 4294934528;
  }
  if (*(_BYTE *)(v25 + 63) == 1 && sub_1ACC114E0((uint64_t)a1, v25, v27, v28, v29, v30, v31, v32))
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  if ((_DWORD)v47 == 1)
    v49 = "sqlite_temp_master";
  else
    v49 = "sqlite_master";
  v50 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * (int)v47);
  v51 = *a1;
  v52 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, _QWORD))(*a1 + 528);
  if (v52 && !*(_BYTE *)(v51 + 197) && !*((_BYTE *)a1 + 302))
  {
    v67 = v52(*(_QWORD *)(v51 + 536), 9, v49, 0, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * (int)v47), a1[46]);
    if (v67 == 1)
      goto LABEL_99;
    if ((v67 & 0xFFFFFFFD) != 0)
      goto LABEL_103;
    if (v67)
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
  if ((_DWORD)a3)
  {
    v53 = 0;
    v54 = (_DWORD)v47 == 1;
    v55 = 17;
    v56 = 15;
    goto LABEL_63;
  }
  if (*(_BYTE *)(v33 + 63) != 1)
  {
    v53 = 0;
    v54 = (_DWORD)v47 == 1;
    v55 = 11;
    v56 = 13;
LABEL_63:
    if (v54)
      v61 = v56;
    else
      v61 = v55;
    goto LABEL_66;
  }
  v57 = (uint64_t **)(v33 + 80);
  do
  {
    v58 = *v57;
    v59 = *v57;
    v60 = *v59;
    v57 = (uint64_t **)(v59 + 5);
  }
  while (v60 != v9);
  v53 = *(_QWORD *)(v58[1] + 8);
  v61 = 30;
LABEL_66:
  v62 = *(unsigned __int8 **)v33;
  v63 = *a1;
  v64 = *(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _QWORD))(*a1 + 528);
  if (!v64)
    goto LABEL_71;
  if (!*(_BYTE *)(v63 + 197) && !*((_BYTE *)a1 + 302))
  {
    v69 = v64(*(_QWORD *)(v63 + 536), v61, v62, v53, v50, a1[46]);
    if (v69 != 1)
    {
      if ((v69 & 0xFFFFFFFD) != 0)
        goto LABEL_103;
      if (v69)
        return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
      v62 = *(unsigned __int8 **)v33;
      v63 = *a1;
      v64 = *(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, uint64_t, _QWORD))(*a1 + 528);
      if (!v64)
        goto LABEL_71;
      goto LABEL_69;
    }
LABEL_99:
    v71 = 23;
    v72 = "not authorized";
LABEL_104:
    sub_1ACBCB308((uint64_t)a1, v72, v68, v53, v29, v30, v31, v32, v94);
    *((_DWORD *)a1 + 6) = v71;
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
LABEL_69:
  if (*(_BYTE *)(v63 + 197) || *((_BYTE *)a1 + 302))
    goto LABEL_71;
  v70 = v64(*(_QWORD *)(v63 + 536), 9, v62, 0, v50, a1[46]);
  if (v70 == 1)
    goto LABEL_99;
  if ((v70 & 0xFFFFFFFD) != 0)
  {
LABEL_103:
    v71 = 1;
    v72 = "authorizer malfunction";
    goto LABEL_104;
  }
  if (v70)
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  v62 = *(unsigned __int8 **)v33;
LABEL_71:
  if (!v62)
    goto LABEL_126;
  v65 = *v62;
  if (!*v62)
  {
    v66 = "sqlite_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x53)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "sqlite_";
LABEL_115:
    LODWORD(v65) = *(unsigned __int8 *)v65;
    goto LABEL_116;
  }
  v65 = v62[1];
  if (!v62[1])
  {
    v66 = "qlite_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x51)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "qlite_";
    goto LABEL_115;
  }
  v65 = v62[2];
  if (!v62[2])
  {
    v66 = "lite_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x4C)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "lite_";
    goto LABEL_115;
  }
  v65 = v62[3];
  if (!v62[3])
  {
    v66 = "ite_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x49)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "ite_";
    goto LABEL_115;
  }
  v65 = v62[4];
  if (!v62[4])
  {
    v66 = "te_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x54)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "te_";
    goto LABEL_115;
  }
  v65 = v62[5];
  if (!v62[5])
  {
    v66 = "e_";
    goto LABEL_116;
  }
  if ((v65 & 0xFFFFFFDF) != 0x45)
  {
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "e_";
    goto LABEL_115;
  }
  v65 = v62[6];
  if (v62[6])
  {
    if ((_DWORD)v65 == 95)
      goto LABEL_117;
    v65 += (unint64_t)byte_1ACCB6333;
    v66 = "_";
    goto LABEL_115;
  }
  v66 = "_";
LABEL_116:
  if ((_DWORD)v65 != byte_1ACCB6333[*v66])
  {
LABEL_126:
    v81 = *(_DWORD *)(v33 + 48);
    if ((v81 & 0x1000) != 0 && (*(_BYTE *)(v9 + 51) & 0x10) != 0 && !*(_QWORD *)(v9 + 592) && !*(_DWORD *)(v9 + 220))
    {
      if (*(int *)(v9 + 564) >= 1 && (v81 & 0x8000) == 0 && !*(_QWORD *)(v9 + 600))
        goto LABEL_185;
      goto LABEL_188;
    }
    if ((v81 & 0x8000) != 0)
      goto LABEL_188;
    goto LABEL_185;
  }
LABEL_117:
  v73 = v62[7];
  if (!v62[7])
  {
    LODWORD(v74) = 0;
    v82 = "parameters";
    goto LABEL_184;
  }
  v74 = (unint64_t)&byte_1ACCB6333[v73];
  v75 = v73 & 0xFFFFFFDF;
  if (v75 != 83)
  {
    v80 = "stat";
    v79 = (unsigned __int8 *)v74;
LABEL_142:
    v83 = *v79;
    goto LABEL_143;
  }
  v76 = v62[8];
  if (!v62[8])
  {
    v83 = 0;
    v80 = "tat";
    goto LABEL_143;
  }
  if ((v76 & 0xFFFFFFDF) != 0x54)
  {
    v79 = &byte_1ACCB6333[v76];
    v80 = "tat";
    goto LABEL_142;
  }
  v77 = v62[9];
  if (!v62[9])
  {
    v83 = 0;
    v80 = "at";
    goto LABEL_143;
  }
  if ((v77 & 0xFFFFFFDF) != 0x41)
  {
    v79 = &byte_1ACCB6333[v77];
    v80 = "at";
    goto LABEL_142;
  }
  v78 = v62[10];
  if (v62[10])
  {
    if ((v78 & 0xFFFFFFDF) == 0x54)
      goto LABEL_185;
    v79 = &byte_1ACCB6333[v78];
    v80 = "t";
    goto LABEL_142;
  }
  v83 = 0;
  v80 = "t";
LABEL_143:
  if (v83 != byte_1ACCB6333[*v80])
  {
    if (v75 != 80)
    {
      v82 = "parameters";
      goto LABEL_183;
    }
    v74 = v62[8];
    if (!v62[8])
    {
      v82 = "arameters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "arameters";
      goto LABEL_183;
    }
    v74 = v62[9];
    if (!v62[9])
    {
      v82 = "rameters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "rameters";
      goto LABEL_183;
    }
    v74 = v62[10];
    if (!v62[10])
    {
      v82 = "ameters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "ameters";
      goto LABEL_183;
    }
    v74 = v62[11];
    if (!v62[11])
    {
      v82 = "meters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x4D)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "meters";
      goto LABEL_183;
    }
    v74 = v62[12];
    if (!v62[12])
    {
      v82 = "eters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "eters";
      goto LABEL_183;
    }
    v74 = v62[13];
    if (!v62[13])
    {
      v82 = "ters";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x54)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "ters";
      goto LABEL_183;
    }
    v74 = v62[14];
    if (!v62[14])
    {
      v82 = "ers";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "ers";
      goto LABEL_183;
    }
    v74 = v62[15];
    if (!v62[15])
    {
      v82 = "rs";
      goto LABEL_184;
    }
    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "rs";
      goto LABEL_183;
    }
    v74 = v62[16];
    if (!v62[16])
    {
      v82 = "s";
LABEL_184:
      if ((_DWORD)v74 == byte_1ACCB6333[*v82])
        goto LABEL_185;
LABEL_188:
      sub_1ACBCB308((uint64_t)a1, "table %s may not be dropped", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
    }
    if ((v74 & 0xFFFFFFDF) != 0x53)
    {
      v74 += (unint64_t)byte_1ACCB6333;
      v82 = "s";
LABEL_183:
      LODWORD(v74) = *(unsigned __int8 *)v74;
      goto LABEL_184;
    }
  }
LABEL_185:
  v84 = *(unsigned __int8 *)(v33 + 63);
  if ((_DWORD)a3)
  {
    if (v84 != 2)
    {
      sub_1ACBCB308((uint64_t)a1, "use DROP TABLE to delete table %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
    }
  }
  else if (v84 == 2)
  {
    sub_1ACBCB308((uint64_t)a1, "use DROP VIEW to delete view %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
  if (sub_1ACBA8698(a1, v61, (uint64_t)v62, v53, v29, v30, v31, v32))
  {
    sub_1ACC0DDF0((uint64_t)a1, 1, v47);
    if (!(_DWORD)a3)
    {
      sub_1ACC13FC0(a1, v47);
      sub_1ACC14168((uint64_t)a1, (int *)a2, v33, v89, v90, v91, v92, v93);
    }
    sub_1ACC144B8(a1, v33, v47, a3, v85, v86, v87, v88);
  }
  return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
}

uint64_t sub_1ACBB8A64(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t i;
  int v11;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
    {
      sub_1ACBECF6C(a1);
      v7 = *(unsigned __int8 **)(v6 + 16);
      if (v7)
        goto LABEL_4;
LABEL_13:
      if (*(_BYTE *)(a1 + 19))
      {
        *(_BYTE *)(a1 + 19) = 0;
        for (i = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16); i; i = *(_QWORD *)(i + 40))
        {
          if ((*(_BYTE *)(i + 1) & 0x10) != 0)
          {
            *(_BYTE *)(a1 + 19) = 1;
            if (*(_DWORD *)(i + 80) == a2)
              *(_BYTE *)i = 1;
          }
        }
      }
      v9 = sub_1ACBB8B90(v6, a2, 0, a3);
      goto LABEL_21;
    }
  }
  v7 = *(unsigned __int8 **)(v6 + 16);
  if (!v7)
    goto LABEL_13;
LABEL_4:
  v8 = v7;
  while (a2)
  {
    if (*((_DWORD *)v8 + 20) == a2)
    {
      v7 = v8;
      break;
    }
    v8 = (unsigned __int8 *)*((_QWORD *)v8 + 5);
    if (!v8)
      goto LABEL_13;
  }
  v9 = sub_1ACBEEE90(v7, a2, 0);
  if (!(_DWORD)v9)
    goto LABEL_13;
LABEL_21:
  if (*(_BYTE *)(a1 + 17))
  {
    v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11)
      sub_1ACBED048(a1);
  }
  return v9;
}

uint64_t sub_1ACBB8B90(uint64_t a1, unsigned int a2, int a3, _QWORD *a4)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(a1 + 64) < a2)
    return sub_1ACBEB08C(86891);
  v21 = 0;
  v22 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v9 = sub_1ACBF81EC((_DWORD *)a1, a2, &v22);
  if (!(_DWORD)v9)
  {
    v10 = v22;
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
    {
      v11 = a2 == 1 ? 2 : 1;
      if (v11 != *(_DWORD *)(*(_QWORD *)(v22 + 112) + 56))
      {
        v17 = sub_1ACBEB08C(86898);
LABEL_23:
        v9 = v17;
        goto LABEL_24;
      }
    }
    v12 = *(unsigned __int8 *)(v22 + 9);
    LODWORD(v13) = *(unsigned __int16 *)(v22 + 24);
    if (*(_WORD *)(v22 + 24))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = (unsigned int *)(*(_QWORD *)(v10 + 80)
                             + ((*(unsigned __int8 *)(*(_QWORD *)(v10 + 96) + v14 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(v10 + 96) + v14) << 8)) & (unint64_t)*(unsigned __int16 *)(v10 + 26)));
        if (!*(_BYTE *)(v10 + 8))
        {
          v17 = sub_1ACBB8B90(a1, bswap32(*v16), 1, a4);
          if ((_DWORD)v17)
            goto LABEL_23;
        }
        (*(void (**)(uint64_t, unsigned int *, _QWORD *))(v10 + 128))(v10, v16, v20);
        if ((_DWORD)v21 != WORD2(v21))
        {
          v17 = sub_1ACBF86B0(v10, (uint64_t)v16, (uint64_t)v20);
          if ((_DWORD)v17)
            goto LABEL_23;
        }
        ++v15;
        v13 = *(unsigned __int16 *)(v10 + 24);
        v14 += 2;
      }
      while (v15 < v13);
    }
    if (*(_BYTE *)(v10 + 8))
    {
      if (!a4)
      {
LABEL_20:
        if (!a3)
        {
          v9 = sub_1ACB9A7C8(*(_QWORD *)(v10 + 112));
          if (!(_DWORD)v9)
            sub_1ACBA3288(v10, *(unsigned __int8 *)(*(_QWORD *)(v10 + 80) + v12) | 8);
          goto LABEL_24;
        }
        v17 = sub_1ACBB0704(*(_QWORD *)(v10 + 72), v10, *(unsigned int *)(v10 + 4));
        goto LABEL_23;
      }
    }
    else
    {
      v9 = sub_1ACBB8B90(a1, bswap32(*(_DWORD *)(v12 + *(_QWORD *)(v10 + 80) + 8)), 1, a4);
      if ((_DWORD)v9)
      {
LABEL_24:
        v18 = *(_QWORD *)(v10 + 112);
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          v19 = *(_QWORD *)(v18 + 40);
          --*(_DWORD *)(v19 + 152);
          *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 168);
          *(_QWORD *)(v19 + 168) = v18;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v19 + 72) + 144))(*(_QWORD *)(v19 + 72), *(_QWORD *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(_QWORD *)(v18 + 8));
        }
        else
        {
          sub_1ACBE906C(v18);
        }
        return v9;
      }
      if (!a4 || *(_BYTE *)(v10 + 1))
        goto LABEL_20;
      LODWORD(v13) = *(unsigned __int16 *)(v10 + 24);
    }
    *a4 += v13;
    goto LABEL_20;
  }
  return v9;
}

uint64_t _sqlite3_apple_archive_type(const char *a1, int *a2, char **a3)
{
  int v6;
  int v7;
  ssize_t v8;
  uint64_t v10;
  int v11;
  int *v12;
  ssize_t v13;
  int *v14;
  uint64_t v15;
  BOOL v17;
  int *v19;
  _OWORD v21[3];
  _BYTE __buf[22];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *a2 = -1;
  v6 = open(a1, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    v8 = pread(v6, __buf, 0x16uLL, 0);
    if (v8 == 22)
    {
      if (*(_DWORD *)__buf != 1766609235 || *(_DWORD *)&__buf[3] != 543519849)
        goto LABEL_7;
      if (*(_QWORD *)__buf == 0x66206574694C5153 && *(_QWORD *)&__buf[7] == 0x332074616D726F66)
      {
        v10 = 0;
        v11 = 3;
        goto LABEL_8;
      }
      v17 = *(_QWORD *)__buf == 0x41206574694C5153 && *(_QWORD *)&__buf[8] == 0x415F455649484352;
      if (!v17 || *(_QWORD *)&__buf[14] != 0x315F454C5050415FLL)
      {
LABEL_7:
        v10 = 0;
        v11 = 1;
LABEL_8:
        *a2 = v11;
LABEL_30:
        close(v7);
        return v10;
      }
      memset(v21, 0, sizeof(v21));
      if (!sub_1ACBB904C(v7, (uint64_t)v21))
      {
        if (*((_QWORD *)&v21[0] + 1) == 2)
        {
          v10 = 0;
          v11 = 5;
        }
        else
        {
          if (*((_QWORD *)&v21[0] + 1) != 1)
          {
            v10 = 0;
            *a2 = 0;
            goto LABEL_30;
          }
          v10 = 0;
          v11 = 4;
        }
        goto LABEL_8;
      }
      if (a3)
      {
        v19 = __error();
        v10 = *v19;
        *a3 = sqlite3_mprintf("sql_read_archive_header('%s') failed with errno %d", a1, *v19);
        goto LABEL_30;
      }
    }
    else if (a3)
    {
      v13 = v8;
      v14 = __error();
      v15 = *v14;
      *a3 = sqlite3_mprintf("pread('%s') failed returning %ld bytes with errno %d", a1, v13, *v14);
      v10 = v15;
      goto LABEL_30;
    }
    v10 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  if (!a3)
    return 0xFFFFFFFFLL;
  v12 = __error();
  v10 = *v12;
  *a3 = sqlite3_mprintf("open('%s') failed with errno %d", a1, *v12);
  return v10;
}

uint64_t sub_1ACBB904C(int a1, uint64_t a2)
{
  char *v4;
  _BYTE *v6;
  char *v7;
  char *v8;
  char v9;

  v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x42524E37uLL);
  if (read(a1, v4, 0x16uLL) != 22 || strncmp("SQLite ARCHIVE_APPLE_1", v4, 0x16uLL))
    return 0xFFFFFFFFLL;
  v9 = 0;
  if (read(a1, &v9, 1uLL) >= 1)
  {
    v6 = v4 + 22;
    do
    {
      if (v9 == 10)
        break;
      *v6++ = v9;
    }
    while (read(a1, &v9, 1uLL) > 0);
  }
  v8 = 0;
  v7 = strchr(v4, 44);
  *(_DWORD *)a2 = strtol(v7 + 1, &v8, 0);
  *(_DWORD *)(a2 + 4) = strtol(v8 + 1, &v8, 0);
  *(_QWORD *)(a2 + 8) = strtoll(v8 + 1, &v8, 0);
  *(_QWORD *)(a2 + 16) = strtoll(v8 + 1, &v8, 0);
  *(_QWORD *)(a2 + 24) = strtoll(v8 + 1, &v8, 0);
  *(_QWORD *)(a2 + 32) = strtoll(v8 + 1, &v8, 0);
  *(_QWORD *)(a2 + 40) = strtoll(v8 + 1, &v8, 0);
  free(v4);
  return 0;
}

uint64_t _sqlite3_apple_archive(const char *a1, char *a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, _QWORD *a7, char **a8)
{
  uint64_t v15;
  int v17;
  uint64_t v18;
  char *v19;
  const char **v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  FILE **v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  char *v41;
  char *v42;
  const char *v43;
  char *v44;
  size_t v45;
  size_t v46;
  int v47;
  size_t v48;
  void *v49;
  sqlite3 *v50;
  int v51;
  int v52;
  _QWORD *v53;
  int v54;
  sqlite3 *v55;
  int v56;
  int v57;
  const char **v58;
  int v59;
  sqlite3 *v60;
  int v61;
  int v62;
  int v63;
  sqlite3 *v64;
  int v65;
  FILE **v66;
  int v67;
  int v68;
  char *v69;
  NSObject *v72;
  FILE *v73;
  int *v74;
  int v75;
  FILE *v76;
  int *v77;
  int v78;
  FILE **v79;
  int v80;
  void *v81;
  void *v82;
  int v83;
  int v84;
  unint64_t v85;
  ssize_t v86;
  ssize_t v87;
  FILE *v88;
  FILE *v89;
  ssize_t v90;
  int v91;
  unint64_t v92;
  ssize_t v93;
  ssize_t v94;
  FILE *v95;
  FILE *v96;
  unsigned int v97;
  unint64_t v98;
  ssize_t v99;
  ssize_t v100;
  FILE *v101;
  FILE *v102;
  FILE *v103;
  int *v104;
  FILE *v105;
  int *v106;
  int v107;
  int v108;
  void *v109;
  char *v110;
  unsigned int v111;
  size_t v112;
  FILE *v113;
  int *v114;
  FILE *v115;
  int *v116;
  int v117;
  int v118;
  NSObject *v119;
  void *v120;
  int v121;
  ssize_t v122;
  FILE **v123;
  unsigned int v124;
  uint64_t v125;
  ssize_t v126;
  ssize_t v127;
  FILE *v128;
  int *v129;
  FILE **v131;
  unsigned int v132;
  uint64_t v133;
  ssize_t v134;
  ssize_t v135;
  FILE *v136;
  int *v137;
  FILE *v138;
  int *v139;
  FILE *v140;
  int *v141;
  void *v142;
  unint64_t v143;
  void *v144;
  unint64_t v145;
  size_t v146;
  size_t v147;
  size_t v148;
  _QWORD *v149;
  char *v150;
  size_t v151;
  char *v152;
  size_t v153;
  char *v154;
  int v155;
  int v156;
  int v157;
  const char **v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  void *__buf;
  char *__s1;
  dispatch_queue_t queue;
  dispatch_queue_t queuea;
  dispatch_queue_t queueb;
  dispatch_queue_t queuec;
  int v168;
  int v169;
  stat v170;
  int v171;
  void *v172[2];
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  sqlite3 *v179;
  sqlite3 *ppDb;
  stat errmsg;
  _BYTE v182[32];
  uint64_t v183;
  uint64_t v184;
  int v185[2];
  stat ppStmt;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  sqlite3 *v194[2];
  __int128 v195;
  sqlite3 *db[2];
  __int128 v197;
  _OWORD v198[8];
  char filename[1024];
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  if (qword_1EECAD088 != -1)
    dispatch_once(&qword_1EECAD088, &unk_1E5C729A8);
  v171 = -1;
  v15 = _sqlite3_apple_archive_type(a1, &v171, a8);
  if (!(_DWORD)v15)
  {
    if (v171 == 3)
    {
      if (a4 <= 1)
        v17 = 1;
      else
        v17 = a4;
      if ((_DWORD)a4 != 3)
      {
        __s1 = a2;
        if (a5)
          v18 = a5;
        else
          v18 = 2049;
LABEL_18:
        v20 = (const char **)malloc_type_calloc(1uLL, 0x20uLL, 0x10040436913F5uLL);
        if (v17 == 3)
        {
          v15 = sub_1ACBBAB88(a1, __s1, a3);
          *v20 = strdup(__s1);
          memset(&v170, 0, sizeof(v170));
          v23 = sqlite3_mprintf("%s-wal", __s1);
          if (stat(v23, &v170) || v170.st_size < 1)
          {
            free(v23);
            v24 = 1;
          }
          else
          {
            *v20 = v23;
            v24 = 2;
          }
          memset(&v170, 0, sizeof(v170));
          v27 = sqlite3_mprintf("%s-journal", __s1);
          if (stat(v27, &v170) || v170.st_size < 1)
          {
            free(v27);
            if (!(_DWORD)v15)
              goto LABEL_256;
          }
          else
          {
            ++v24;
            *v20 = v27;
            if (!(_DWORD)v15)
              goto LABEL_256;
          }
          goto LABEL_265;
        }
        if (v17 != 2)
        {
          if (v17 != 1)
          {
            if (a8)
              *a8 = sqlite3_mprintf("Unknown operation type %ld", a4);
            v15 = 0xFFFFFFFFLL;
            goto LABEL_268;
          }
          memset(&errmsg, 0, sizeof(errmsg));
          v21 = sub_1ACBBBDA8();
          ppDb = 0;
          v22 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0);
          if (v22)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "sqlite3_open_v2 open failed with %d", v22);
          }
          else
          {
            sqlite3_db_config(ppDb, 1006, 1, 0);
            sqlite3_busy_timeout(ppDb, 60000);
            sqlite3_extended_result_codes(ppDb, 1);
          }
          v39 = mkstemp(v21);
          free(v21);
          if ((v39 & 0x80000000) == 0)
          {
            bzero(filename, 0x400uLL);
            fcntl(v39, 50, filename);
            v179 = 0;
            if (sqlite3_open_v2(filename, &v179, a3 | 6, 0)
              || (sqlite3_busy_timeout(ppDb, 60000),
                  sqlite3_extended_result_codes(ppDb, 1),
                  sqlite3_file_control(v179, 0, 102, ppDb)))
            {
              if (!v179)
                goto LABEL_95;
              sqlite3_close(v179);
            }
            else
            {
              if (ppDb)
                sqlite3_close(ppDb);
              ppDb = v179;
            }
            v179 = 0;
LABEL_95:
            memset((char *)&v198[6] + 5, 0, 27);
            *(_OWORD *)((char *)&v198[5] + 5) = 0u;
            *(_OWORD *)((char *)&v198[4] + 5) = 0u;
            *(_OWORD *)((char *)&v198[3] + 5) = 0u;
            memset((char *)v198 + 5, 0, 48);
            qmemcpy(v198, "UTF-8", 5);
            *(_OWORD *)db = xmmword_1ACCB4980;
            v197 = *(_OWORD *)algn_1ACCB4990;
            *(_OWORD *)v194 = *(_OWORD *)"delete";
            v195 = *(_OWORD *)&algn_1ACCB49A7[9];
            v50 = ppDb;
            *(_QWORD *)&ppStmt.st_dev = 0;
            do
              v51 = sqlite3_prepare(v50, "pragma legacy_file_format", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v51 == 5);
            v168 = v39;
            if (v51)
            {
              v53 = a7;
              v54 = 0;
            }
            else
            {
              do
                v52 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v52 == 5);
              v53 = a7;
              if (v52 == 100)
                v54 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              else
                v54 = 0;
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1ACBBB9F4(ppDb, "pragma encoding", (char *)v198, 0x80u);
            v55 = ppDb;
            *(_QWORD *)&ppStmt.st_dev = 0;
            do
              v56 = sqlite3_prepare(v55, "pragma page_size", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v56 == 5);
            queuea = (dispatch_queue_t)v18;
            if (v56)
            {
              v58 = v20;
              v59 = 4096;
            }
            else
            {
              do
                v57 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v57 == 5);
              v58 = v20;
              if (v57 == 100)
                v59 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              else
                v59 = 4096;
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1ACBBB9F4(ppDb, "pragma auto_vacuum", (char *)db, 0x20u);
            v60 = ppDb;
            *(_QWORD *)&ppStmt.st_dev = 0;
            do
              v61 = sqlite3_prepare(v60, "pragma application_id", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v61 == 5);
            if (v61)
            {
              v63 = 0;
            }
            else
            {
              do
                v62 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v62 == 5);
              if (v62 == 100)
                v63 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              else
                v63 = 0;
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            v64 = ppDb;
            *(_QWORD *)&ppStmt.st_dev = 0;
            do
              v65 = sqlite3_prepare(v64, "pragma user_version", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v65 == 5);
            if (v65)
            {
              v68 = 0;
              v66 = (FILE **)MEMORY[0x1E0C80C10];
            }
            else
            {
              v66 = (FILE **)MEMORY[0x1E0C80C10];
              do
                v67 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v67 == 5);
              if (v67 == 100)
                v68 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              else
                v68 = 0;
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1ACBBB9F4(ppDb, "pragma journal_mode", (char *)v194, 0x20u);
            v69 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x7D2F11EuLL);
            if (v54)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma legacy_file_format = %d;\n", v54);
              __strlcat_chk();
            }
            if (LODWORD(v198[0]) != 759583829 || BYTE4(v198[0]) != 56)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma encoding = %s;\n", (const char *)v198);
              __strlcat_chk();
            }
            a7 = v53;
            if (v59 != 4096)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma page_size = %d;\n", v59);
              __strlcat_chk();
            }
            if (LOBYTE(db[0]) != 48)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma auto_vacuum = %s;\n", (const char *)db);
              __strlcat_chk();
            }
            v20 = v58;
            if (v63)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma application_id = %d;\n", v63);
              __strlcat_chk();
            }
            if (v68)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma user_version = %d;\n", v68);
              __strlcat_chk();
            }
            if (LODWORD(v194[0]) != 1701602660 || WORD2(v194[0]) != 25972)
            {
              v192 = 0u;
              v193 = 0u;
              v190 = 0u;
              v191 = 0u;
              v188 = 0u;
              v189 = 0u;
              v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma journal_mode = %s;\n", (const char *)v194);
              __strlcat_chk();
            }
            __strlcat_chk();
            v72 = dispatch_queue_create("sql dump", 0);
            *(_QWORD *)v185 = -1;
            if (pipe(v185))
            {
              v73 = *v66;
              v74 = __error();
              fprintf(v73, "pipe failed for %d\n", *v74);
              v75 = v168;
            }
            else
            {
              v175 = 0;
              v176 = &v175;
              v177 = 0x2000000000;
              v178 = v185[1];
              fcntl(v185[0], 73, 1);
              fcntl(v185[1], 73, 1);
              *(_QWORD *)&ppStmt.st_dev = MEMORY[0x1E0C809B0];
              ppStmt.st_ino = 0x40000000;
              *(_QWORD *)&ppStmt.st_uid = sub_1ACBBBAA0;
              *(_QWORD *)&ppStmt.st_rdev = &unk_1E5C729D0;
              ppStmt.st_atimespec.tv_nsec = (uint64_t)ppDb;
              ppStmt.st_atimespec.tv_sec = (__darwin_time_t)&v175;
              dispatch_async(v72, &ppStmt);
              memset(&errmsg, 0, sizeof(errmsg));
              if (stat(a1, &errmsg) == -1)
              {
                v76 = (FILE *)*MEMORY[0x1E0C80C10];
                v77 = __error();
                fprintf(v76, "stat failed for %d\n", *v77);
              }
              v78 = open(__s1, 1538, errmsg.st_mode | 0x80u);
              v79 = (FILE **)MEMORY[0x1E0C80C10];
              if (v78 < 0)
              {
                v105 = (FILE *)*MEMORY[0x1E0C80C10];
                v106 = __error();
                fprintf(v105, "open destination failed for %d\n", *v106);
                close(v185[0]);
                v75 = v168;
              }
              else
              {
                v80 = v78;
                v158 = v20;
                *(_QWORD *)v182 = 1;
                *(_OWORD *)&v182[8] = xmmword_1ACCB4970;
                v184 = 0;
                *(_QWORD *)&v182[24] = (int)queuea;
                v183 = 0;
                sub_1ACBBBB34(v78, (uint64_t)v182);
                v81 = malloc_type_valloc(0x80000uLL, 0x69BB1DDuLL);
                v82 = malloc_type_valloc(0x80000uLL, 0x57D9A872uLL);
                v174 = 0;
                *(_OWORD *)v172 = 0u;
                v173 = 0u;
                v83 = off_1EECAD090(v172, 0, queuea);
                if (v83)
                  fprintf(*v79, "compression_stream_init failed for %d\n", v83);
                queueb = v72;
                v172[0] = v82;
                v172[1] = (void *)0x80000;
                *(_QWORD *)&v173 = v69;
                *((_QWORD *)&v173 + 1) = strlen(v69);
                v84 = off_1EECAD098(v172, 0);
                if (v84)
                  fprintf(*v79, "compression_stream_process failed for %d\n", v84);
                if (v172[1] != (void *)0x80000)
                {
                  v85 = 0x80000 - (unint64_t)v172[1];
                  v86 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                  if (v86 != v85)
                  {
                    v87 = v86;
                    v88 = (FILE *)*MEMORY[0x1E0C80C10];
                    v155 = *__error();
                    v89 = v88;
                    v79 = (FILE **)MEMORY[0x1E0C80C10];
                    fprintf(v89, "last write ended with return %ld expected %ld with errno %d\n", v87, v85, v155);
                  }
                }
                free(v69);
                v90 = read(v185[0], v81, 0x80000uLL);
                if (v90 >= 1)
                {
                  do
                  {
                    v172[0] = v82;
                    v172[1] = (void *)0x80000;
                    *(_QWORD *)&v173 = v81;
                    *((_QWORD *)&v173 + 1) = v90;
                    v91 = off_1EECAD098(v172, 0);
                    if (v91)
                      fprintf(*v79, "compression_stream_process failed for %d\n", v91);
                    if (v172[1] != (void *)0x80000)
                    {
                      v92 = 0x80000 - (unint64_t)v172[1];
                      v93 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                      if (v93 != v92)
                      {
                        v94 = v93;
                        v95 = (FILE *)*MEMORY[0x1E0C80C10];
                        v156 = *__error();
                        v96 = v95;
                        v79 = (FILE **)MEMORY[0x1E0C80C10];
                        fprintf(v96, "last write ended with return %ld expected %ld with errno %d\n", v94, v92, v156);
                      }
                    }
                    v90 = read(v185[0], v81, 0x80000uLL);
                  }
                  while (v90 > 0);
                }
                do
                {
                  v172[0] = v82;
                  v172[1] = (void *)0x80000;
                  v173 = (unint64_t)v81;
                  v97 = off_1EECAD098(v172, 1);
                  if (v97 >= 2)
                    fprintf(*v79, "compression_stream_process bravo failed for %d\n", v97);
                  if (v172[1] != (void *)0x80000)
                  {
                    v98 = 0x80000 - (unint64_t)v172[1];
                    v99 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                    v29 = v99 == v98;
                    v79 = (FILE **)MEMORY[0x1E0C80C10];
                    if (!v29)
                    {
                      v100 = v99;
                      v101 = (FILE *)*MEMORY[0x1E0C80C10];
                      v157 = *__error();
                      v102 = v101;
                      v79 = (FILE **)MEMORY[0x1E0C80C10];
                      fprintf(v102, "last write ended with return %ld expected %ld with errno %d\n", v100, v90, v157);
                    }
                  }
                }
                while (!v97);
                off_1EECAD0A0(v172);
                free(v81);
                free(v82);
                if (v90)
                {
                  v103 = *v79;
                  v104 = __error();
                  fprintf(v103, "last read ended with return %ld with errno %d\n", v90, *v104);
                }
                close(v80);
                close(v185[0]);
                v69 = 0;
                v20 = v158;
                a7 = v53;
                v75 = v168;
                v72 = queueb;
              }
              dispatch_sync(v72, &unk_1E5C72A10);
              dispatch_release(v72);
              v107 = *((_DWORD *)v176 + 6);
              if (v107 != -1)
                close(v107);
              _Block_object_dispose(&v175, 8);
            }
            if (v69)
              free(v69);
            if (ppDb)
              sqlite3_close(ppDb);
            sub_1ACBBBC5C(filename);
            v108 = v75;
LABEL_254:
            close(v108);
            v15 = 0;
LABEL_255:
            *v20 = strdup(__s1);
            v24 = 1;
            if (!(_DWORD)v15)
            {
LABEL_256:
              v146 = strlen(*v20);
              if (v24 == 1)
              {
                v147 = v146 + 9;
              }
              else
              {
                v147 = v146 + strlen(v20[1]) + 18;
                if (v24 != 2)
                  v147 += strlen(v20[2]) + 9;
              }
              v148 = v147 + 8;
              v149 = sqlite3_malloc(v148);
              bzero(v149, v148);
              v150 = (char *)&v149[v24 + 1];
              v151 = strlen(*v20);
              *v149 = v150;
              strcpy(v150, *v20);
              if (v24 != 1)
              {
                v152 = &v150[v151 + 1];
                v153 = strlen(v20[1]);
                v149[1] = v152;
                strcpy(v152, v20[1]);
                if (v24 != 2)
                {
                  v154 = &v152[v153 + 1];
                  v149[2] = v154;
                  strcpy(v154, v20[2]);
                }
              }
              v15 = 0;
              if (a7)
                *a7 = v149;
            }
LABEL_265:
            free((void *)*v20);
            if (v24 != 1)
            {
              free((void *)v20[1]);
              if (v24 != 2)
                free((void *)v20[2]);
            }
LABEL_268:
            free(v20);
            return v15;
          }
LABEL_68:
          v15 = 0xFFFFFFFFLL;
          goto LABEL_255;
        }
        v25 = sub_1ACBBBDA8();
        memset(&ppStmt, 0, sizeof(ppStmt));
        db[0] = 0;
        v26 = sqlite3_open_v2(a1, db, a3 | 1, 0);
        if (v26)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "sqlite3_open_v2 open failed with %d", v26);
        }
        else
        {
          sqlite3_db_config(db[0], 1006, 1, 0);
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
        }
        v28 = mkstemp(v25);
        free(v25);
        if (v28 < 0)
          goto LABEL_68;
        bzero(filename, 0x400uLL);
        fcntl(v28, 50, filename);
        *(_OWORD *)v182 = *(_OWORD *)"delete";
        *(_OWORD *)&v182[16] = *(_OWORD *)&algn_1ACCB49A7[9];
        sub_1ACBBB9F4(db[0], "pragma journal_mode", v182, 0x20u);
        v29 = *(unsigned __int16 *)v182 == 24951 && v182[2] == 108;
        v30 = !v29;
        v194[0] = 0;
        v172[0] = 0;
        v172[1] = 0;
        *(_QWORD *)&v173 = 0;
        v161 = v28;
        if (!sqlite3_open_v2(filename, v194, a3 | 6, 0))
        {
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
          if (!sqlite3_file_control(v194[0], 0, 102, db[0]))
          {
            v31 = v18;
            v32 = malloc_type_calloc(1uLL, 0x800uLL, 0x10040436913F5uLL);
            v33 = malloc_type_calloc(1uLL, 0x800uLL, 0x10040436913F5uLL);
            v172[0] = v32;
            v172[1] = v33;
            DWORD1(v173) = 256;
            sqlite3_exec(v194[0], "select name,sql from sqlite_master where type = 'index' and rootpage != 0", (int (__cdecl *)(void *, int, char **, char **))sub_1ACBBBE68, v172, 0);
            sqlite3_exec(v194[0], "BEGIN EXCLUSIVE", 0, 0, 0);
            v34 = v173;
            if ((_DWORD)v173)
            {
              v35 = 0;
              v36 = (FILE **)MEMORY[0x1E0C80C10];
              do
              {
                if (*((_QWORD *)v172[0] + v35) && *((_QWORD *)v172[1] + v35))
                {
                  v37 = sqlite3_mprintf("DROP INDEX IF EXISTS \"%w\"", *((_QWORD *)v172[0] + v35));
                  *(_QWORD *)&errmsg.st_dev = 0;
                  v38 = sqlite3_exec(v194[0], v37, 0, 0, (char **)&errmsg);
                  if (v38 && v38 != 101)
                  {
                    fprintf(*v36, "while executing statement ('%s') it failed with error code %d and reason:'%s'\n", v37, v38, *(const char **)&errmsg.st_dev);
                    *((_QWORD *)v172[0] + v35) = 0;
                  }
                  if (*(_QWORD *)&errmsg.st_dev)
                    sqlite3_free(*(void **)&errmsg.st_dev);
                  sqlite3_free(v37);
                  v34 = v173;
                }
                ++v35;
              }
              while (v35 < v34);
            }
            sqlite3_exec(v194[0], "COMMIT", 0, 0, 0);
            sqlite3_exec(v194[0], "VACUUM", 0, 0, 0);
            v18 = v31;
            v28 = v161;
            if (!v30)
            {
              sqlite3_exec(v194[0], "pragma journal_mode = wal", 0, 0, 0);
              sqlite3_exec(v194[0], "BEGIN EXCLUSIVE", 0, 0, 0);
              sqlite3_exec(v194[0], "COMMIT", 0, 0, 0);
            }
          }
        }
        if (v194[0])
          sqlite3_close(v194[0]);
        if (db[0])
          sqlite3_close(db[0]);
        queue = (dispatch_queue_t)v18;
        if (!(_DWORD)v173)
        {
          v48 = 0;
          __buf = 0;
LABEL_203:
          v169 = open(filename, 0, 0);
          memset(&ppStmt, 0, sizeof(ppStmt));
          if (stat(filename, &ppStmt) == -1)
          {
            v113 = (FILE *)*MEMORY[0x1E0C80C10];
            v114 = __error();
            fprintf(v113, "stat failed for %d\n", *v114);
          }
          memset(&ppStmt, 0, sizeof(ppStmt));
          if (stat(a1, &ppStmt) == -1)
          {
            v115 = (FILE *)*MEMORY[0x1E0C80C10];
            v116 = __error();
            fprintf(v115, "stat failed for %d\n", *v116);
          }
          v117 = open(__s1, 1538, ppStmt.st_mode | 0x80u);
          if (v117 < 0)
          {
            v140 = (FILE *)*MEMORY[0x1E0C80C10];
            v141 = __error();
            fprintf(v140, "open destination failed for %d\n", *v141);
            close(v169);
          }
          else
          {
            v118 = v117;
            *(_QWORD *)&errmsg.st_dev = 1;
            *(_OWORD *)&errmsg.st_ino = xmmword_1ACCB4960;
            *(_QWORD *)&errmsg.st_rdev = (int)queue;
            errmsg.st_atimespec = (timespec)v48;
            sub_1ACBBBB34(v117, (uint64_t)&errmsg);
            v160 = a7;
            if (v48)
            {
              write(v118, __buf, v48);
              free(__buf);
              __buf = 0;
            }
            v119 = malloc_type_valloc(0x80000uLL, 0x9CCE196uLL);
            v120 = malloc_type_valloc(0x80000uLL, 0x35BE4CFAuLL);
            memset(v198, 0, 40);
            v121 = off_1EECAD090(v198, 0, queue);
            if (v121)
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_init failed for %d\n", v121);
            v122 = read(v169, v119, 0x80000uLL);
            queuec = v119;
            if (v122 >= 1)
            {
              v123 = (FILE **)MEMORY[0x1E0C80C10];
              do
              {
                *(_QWORD *)&v198[0] = v120;
                *((_QWORD *)&v198[0] + 1) = 0x80000;
                *(_QWORD *)&v198[1] = v119;
                *((_QWORD *)&v198[1] + 1) = v122;
                do
                {
                  v124 = off_1EECAD098(v198, 0);
                  if (v124 >= 2)
                    fprintf(*v123, "compression_stream_process bravo failed for %d\n", v124);
                  if (*((_QWORD *)&v198[0] + 1) != 0x80000)
                  {
                    v125 = 0x80000 - *((_QWORD *)&v198[0] + 1);
                    v126 = write(v118, v120, 0x80000 - *((_QWORD *)&v198[0] + 1));
                    if (v126 != v125)
                    {
                      v127 = v126;
                      v128 = *v123;
                      v129 = __error();
                      fprintf(v128, "last write ended with return %ld expected %ld with errno %d\n", v127, v122, *v129);
                    }
                  }
                  if (v124 == 1)
                    break;
                }
                while (!v124 && *((_QWORD *)&v198[1] + 1) != 0);
                v119 = queuec;
                v122 = read(v169, queuec, 0x80000uLL);
              }
              while (v122 > 0);
            }
            *(_QWORD *)&v198[0] = v120;
            *((_QWORD *)&v198[0] + 1) = 0x80000;
            v198[1] = (unint64_t)v119;
            v131 = (FILE **)MEMORY[0x1E0C80C10];
            do
            {
              v132 = off_1EECAD098(v198, 1);
              if (v132 >= 2)
                fprintf(*v131, "compression_stream_process bravo failed for %d\n", v132);
              if (*((_QWORD *)&v198[0] + 1) != 0x80000)
              {
                v133 = 0x80000 - *((_QWORD *)&v198[0] + 1);
                v134 = write(v118, v120, 0x80000 - *((_QWORD *)&v198[0] + 1));
                if (v134 != v133)
                {
                  v135 = v134;
                  v136 = *v131;
                  v137 = __error();
                  fprintf(v136, "last write ended with return %ld expected %ld with errno %d\n", v135, v122, *v137);
                }
              }
            }
            while (!v132);
            off_1EECAD0A0(v198);
            free(queuec);
            free(v120);
            if (v122)
            {
              v138 = *v131;
              v139 = __error();
              fprintf(v138, "last read ended with return %ld with errno %d\n", v122, *v139);
            }
            close(v118);
            close(v169);
            a7 = v160;
            v28 = v161;
          }
          if (__buf)
            free(__buf);
          v142 = v172[0];
          if (v172[0])
          {
            if ((_DWORD)v173)
            {
              v143 = 0;
              do
                free(*((void **)v172[0] + v143++));
              while (v143 < v173);
              v142 = v172[0];
            }
            free(v142);
            v172[0] = 0;
          }
          v144 = v172[1];
          if (v172[1])
          {
            if ((_DWORD)v173)
            {
              v145 = 0;
              do
                free(*((void **)v172[1] + v145++));
              while (v145 < v173);
              v144 = v172[1];
            }
            free(v144);
            v172[1] = 0;
          }
          sub_1ACBBBC5C(filename);
          v108 = v28;
          goto LABEL_254;
        }
        v40 = 0;
        v41 = 0;
        do
        {
          v43 = (const char *)*((_QWORD *)v172[1] + v40);
          if (v43 && *((_QWORD *)v172[0] + v40))
          {
            if (v41)
            {
              v42 = sqlite3_mprintf("%s;\n%s", v41, v43);
              sqlite3_free(v41);
              v41 = v42;
            }
            else
            {
              v41 = sqlite3_mprintf("%s", *((const char **)v172[1] + v40));
            }
          }
          ++v40;
        }
        while (v40 < v173);
        if (v41)
        {
          v44 = sqlite3_mprintf("%s;\n", v41);
          sqlite3_free(v41);
          if (v44)
          {
            v45 = strlen(v44);
            if (v45)
            {
              v46 = v45;
              memset(&errmsg, 0, 40);
              v47 = off_1EECAD090(&errmsg, 0, v18);
              if (v47)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_init failed for %d\n", v47);
                v48 = 0;
                v49 = 0;
              }
              else
              {
                v159 = a7;
                v109 = malloc_type_valloc(0x80000uLL, 0xFEA5EDBDuLL);
                v48 = 0;
                v49 = 0;
                *(_QWORD *)&errmsg.st_uid = v44;
                *(_QWORD *)&errmsg.st_rdev = v46 + 1;
                do
                {
                  *(_QWORD *)&errmsg.st_dev = v109;
                  errmsg.st_ino = 0x80000;
                  v111 = off_1EECAD098(&errmsg, 1);
                  if (v111 >= 2)
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_process bravo failed for %d\n", v111);
                  v112 = 0x80000 - errmsg.st_ino;
                  if ((int64_t)(0x80000 - errmsg.st_ino) >= 1)
                  {
                    if (v49)
                      v110 = (char *)malloc_type_realloc(v49, v112 + v48, 0xC7B82C0AuLL);
                    else
                      v110 = (char *)malloc_type_malloc(v112 + v48, 0xD756F970uLL);
                    v49 = v110;
                    memcpy(&v110[v48], v109, v112);
                    v48 += v112;
                  }
                }
                while (!v111);
                off_1EECAD0A0(&errmsg);
                a7 = v159;
              }
              __buf = v49;
              goto LABEL_202;
            }
          }
        }
        else
        {
          v44 = 0;
        }
        v48 = 0;
        __buf = 0;
LABEL_202:
        sqlite3_free(v44);
        v28 = v161;
        goto LABEL_203;
      }
      if (a5 + 1 < 2)
      {
        __s1 = a2;
        v18 = 0xFFFFFFFFLL;
        goto LABEL_18;
      }
      if (a8)
      {
        v19 = sqlite3_mprintf("Compression method %ld not currently supported for operationType %ld");
        goto LABEL_14;
      }
    }
    else if (a8)
    {
      v19 = sqlite3_mprintf("Source file '%s' is not an SQLite database file, or is encrypted.  Type is %d");
LABEL_14:
      *a8 = v19;
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  return v15;
}

uint64_t sub_1ACBBAB88(const char *a1, const char *a2, int a3)
{
  uint64_t v5;
  sqlite3 *v7;
  sqlite3 *ppDb;

  v7 = 0;
  ppDb = 0;
  v5 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0);
  if (!(_DWORD)v5)
  {
    sqlite3_busy_timeout(ppDb, 60000);
    sqlite3_extended_result_codes(ppDb, 1);
    sqlite3_db_config(ppDb, 1006, 1, 0);
    v5 = sqlite3_open_v2(a2, &v7, a3 | 6, 0);
    if (!(_DWORD)v5)
    {
      sqlite3_busy_timeout(v7, 60000);
      sqlite3_extended_result_codes(v7, 1);
      v5 = sqlite3_file_control(v7, 0, 102, ppDb);
    }
  }
  if (ppDb)
    sqlite3_close_v2(ppDb);
  if (v7)
    sqlite3_close(v7);
  return v5;
}

uint64_t _sqlite3_apple_unarchive(const char *a1, const char *a2, int a3, uint64_t a4, _QWORD *a5, char **a6)
{
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  FILE *v14;
  int *v15;
  NSObject *v16;
  FILE *v17;
  int *v18;
  FILE *v19;
  int *v20;
  char *v21;
  int v22;
  FILE *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  size_t v30;
  int v31;
  char *v32;
  char *v33;
  FILE *v34;
  int *v35;
  _BYTE *v36;
  ssize_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  const char *v45;
  unsigned int v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  const char **v53;
  void *v54;
  uint64_t v55;
  void *v56;
  FILE **v57;
  char *v58;
  unsigned int v59;
  size_t v60;
  void *v61;
  int v62;
  ssize_t v63;
  FILE **v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  ssize_t v68;
  ssize_t v69;
  FILE *v70;
  FILE *v71;
  FILE **v72;
  unsigned int v73;
  uint64_t v74;
  ssize_t v75;
  ssize_t v76;
  FILE *v77;
  FILE *v78;
  int64_t v79;
  int64_t v80;
  char *v81;
  char *v82;
  char *v83;
  size_t v84;
  char *v85;
  int v86;
  size_t v87;
  size_t v88;
  size_t v89;
  _QWORD *v90;
  char *v91;
  size_t v92;
  char *v93;
  size_t v94;
  char *v95;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  char *v101;
  void *v102;
  const char **v103;
  _QWORD *v104;
  _QWORD *v105;
  char *filename;
  void *v107;
  int v108;
  int v109[2];
  int v110;
  _BYTE *v111;
  stat v112;
  unsigned int v113;
  char *errmsg;
  sqlite3 *ppDb;
  __int128 block;
  __int128 v117;
  __int128 v118;
  stat v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  sqlite3 *v123[3];

  v123[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  if (qword_1EECAD088 != -1)
    dispatch_once(&qword_1EECAD088, &unk_1E5C729A8);
  v113 = -1;
  v11 = _sqlite3_apple_archive_type(a1, (int *)&v113, a6);
  if (!(_DWORD)v11)
  {
    v12 = v113;
    if (v113 - 6 <= 0xFFFFFFFC)
    {
      if (a6)
        *a6 = sqlite3_mprintf("Source file '%s' is not an SQLite database file or backup archive, or is encrypted.  Type is %d", a1, v113);
      return 0xFFFFFFFFLL;
    }
    v13 = (const char **)malloc_type_calloc(1uLL, 0x20uLL, 0x10040436913F5uLL);
    if ((_DWORD)v12 != 3)
    {
      filename = (char *)a2;
      if ((_DWORD)v12 == 5)
      {
        memset(&v119, 0, sizeof(v119));
        if (stat(a1, &v119) == -1)
        {
          v23 = (FILE *)*MEMORY[0x1E0C80C10];
          v24 = __error();
          fprintf(v23, "stat failed for %d\n", *v24);
        }
        v25 = open(a2, 1538, v119.st_mode | 0x80u);
        v26 = open(a1, 0, 0);
        if (v26 < 0)
        {
          v34 = (FILE *)*MEMORY[0x1E0C80C10];
          v35 = __error();
          fprintf(v34, "open destination failed for %d\n", *v35);
          close(v25);
        }
        else
        {
          v27 = v26;
          v99 = a3;
          v28 = malloc_type_valloc(0x100000uLL, 0x873DDD66uLL);
          v117 = 0u;
          v118 = 0u;
          block = 0u;
          sub_1ACBB904C(v27, (uint64_t)&block);
          v29 = DWORD2(v117);
          v30 = v118;
          v110 = v25;
          v107 = v28;
          v104 = a5;
          v108 = v27;
          if ((_QWORD)v118)
          {
            v102 = malloc_type_calloc(1uLL, v118 + 1, 0x778FCE43uLL);
            if (read(v27, v102, v30))
            {
              v122 = 0;
              v120 = 0u;
              v121 = 0u;
              v31 = off_1EECAD090(&v120, 1, v29);
              if (v31)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_init failed for %d\n", v31);
                v32 = 0;
              }
              else
              {
                v100 = v29;
                v53 = v13;
                v54 = malloc_type_valloc(0x80000uLL, 0xCF95EE1DuLL);
                v55 = 0;
                v56 = 0;
                *(_QWORD *)&v121 = v102;
                *((_QWORD *)&v121 + 1) = v30;
                v57 = (FILE **)MEMORY[0x1E0C80C10];
                do
                {
                  *(_QWORD *)&v120 = v54;
                  *((_QWORD *)&v120 + 1) = 0x80000;
                  v59 = off_1EECAD098(&v120, 1);
                  if (v59 >= 2)
                    fprintf(*v57, "compression_stream_process bravo failed for %d\n", v59);
                  v60 = 0x80000 - *((_QWORD *)&v120 + 1);
                  if (0x80000 - *((_QWORD *)&v120 + 1) >= 1)
                  {
                    if (v56)
                      v58 = (char *)malloc_type_realloc(v56, v60 + v55, 0xFF3ABD19uLL);
                    else
                      v58 = (char *)malloc_type_malloc(v60 + v55, 0x5347FD6BuLL);
                    v56 = v58;
                    memcpy(&v58[v55], v54, v60);
                    v55 += v60;
                  }
                }
                while (!v59);
                off_1EECAD0A0(&v120);
                v32 = (char *)malloc_type_realloc(v56, v55 + 1, 0x3E12C364uLL);
                v32[v55] = 0;
                v13 = v53;
                v25 = v110;
                v28 = v107;
                v29 = v100;
              }
            }
            else
            {
              v32 = 0;
            }
            free(v102);
          }
          else
          {
            v32 = 0;
          }
          v61 = malloc_type_valloc(0x100000uLL, 0xFA5C8DA5uLL);
          v122 = 0;
          v120 = 0u;
          v121 = 0u;
          v62 = off_1EECAD090(&v120, 1, v29);
          if (v62)
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_init failed for %d\n", v62);
          v101 = v32;
          v63 = read(v27, v28, 0x100000uLL);
          if (v63 >= 1)
          {
            v64 = (FILE **)MEMORY[0x1E0C80C10];
            do
            {
              *(_QWORD *)&v121 = v28;
              *((_QWORD *)&v121 + 1) = v63;
              do
              {
                *(_QWORD *)&v120 = v61;
                *((_QWORD *)&v120 + 1) = 0x100000;
                v66 = off_1EECAD098(&v120, 0);
                if (v66 >= 2)
                  fprintf(*v64, "compression_stream_process alpha failed for %d\n", v66);
                if (*((_QWORD *)&v120 + 1) != 0x100000)
                {
                  v67 = 0x100000 - *((_QWORD *)&v120 + 1);
                  v68 = write(v25, v61, 0x100000 - *((_QWORD *)&v120 + 1));
                  if (v68 != v67)
                  {
                    v69 = v68;
                    v70 = *v64;
                    v97 = *__error();
                    v71 = v70;
                    v25 = v110;
                    fprintf(v71, "last write ended with return %ld expected %ld with errno %d\n", v69, v67, v97);
                  }
                }
                if (v66)
                  v65 = 1;
                else
                  v65 = *((_QWORD *)&v121 + 1) == 0;
              }
              while (!v65);
              v28 = v107;
              v63 = read(v108, v107, 0x100000uLL);
            }
            while (v63 > 0);
          }
          v121 = (unint64_t)v28;
          v72 = (FILE **)MEMORY[0x1E0C80C10];
          do
          {
            *(_QWORD *)&v120 = v61;
            *((_QWORD *)&v120 + 1) = 0x100000;
            v73 = off_1EECAD098(&v120, 1);
            if (v73 >= 2)
              fprintf(*v72, "compression_stream_process bravo failed for %d\n", v73);
            if (*((_QWORD *)&v120 + 1) != 0x100000)
            {
              v74 = 0x100000 - *((_QWORD *)&v120 + 1);
              v75 = write(v25, v61, 0x100000 - *((_QWORD *)&v120 + 1));
              if (v75 != v74)
              {
                v76 = v75;
                v77 = *v72;
                v98 = *__error();
                v78 = v77;
                v25 = v110;
                fprintf(v78, "last write ended with return %ld expected %ld with errno %d\n", v76, v74, v98);
              }
            }
          }
          while (!v73);
          off_1EECAD0A0(&v120);
          close(v25);
          close(v108);
          free(v107);
          free(v61);
          a5 = v104;
          a2 = filename;
          if (v101)
          {
            v123[0] = 0;
            if (!sqlite3_open_v2(filename, v123, v99 | 2, 0))
            {
              sqlite3_busy_timeout(v123[0], 60000);
              sqlite3_extended_result_codes(v123[0], 1);
              v79 = strlen(v101);
              if (v79 >= 1)
              {
                v80 = v79;
                v81 = v101;
                do
                {
                  v82 = strstr(v81, ";\n");
                  if (!v82)
                    break;
                  v83 = v82;
                  v84 = v82 - v81;
                  v85 = (char *)malloc_type_calloc(1uLL, v82 - v81 + 1, 0xC364306BuLL);
                  strncpy(v85, v81, v84);
                  sqlite3_exec(v123[0], v85, 0, 0, 0);
                  free(v85);
                  v81 = v83 + 2;
                }
                while (v83 + 2 - v101 < v80);
              }
            }
            if (v123[0])
              sqlite3_close(v123[0]);
            free(v101);
            a2 = filename;
          }
        }
      }
      else
      {
        if ((_DWORD)v12 != 4)
        {
          if (a6)
            *a6 = sqlite3_mprintf("Unknown source file type %ld", v12);
          v11 = 0xFFFFFFFFLL;
          goto LABEL_136;
        }
        v123[0] = (sqlite3 *)-1;
        if (truncate(a2, 0) && *__error() != 2)
        {
          v14 = (FILE *)*MEMORY[0x1E0C80C10];
          v15 = __error();
          fprintf(v14, "truncate failed on '%s' with errno %d\n", a2, *v15);
        }
        v16 = dispatch_queue_create("decompressor", 0);
        memset(&v119, 0, sizeof(v119));
        if (stat(a1, &v119) == -1)
        {
          v17 = (FILE *)*MEMORY[0x1E0C80C10];
          v18 = __error();
          fprintf(v17, "stat failed for %d\n", *v18);
        }
        if (pipe((int *)v123))
        {
          v19 = (FILE *)*MEMORY[0x1E0C80C10];
          v20 = __error();
          fprintf(v19, "pipe failed for %d\n", *v20);
        }
        else
        {
          *(_QWORD *)&v120 = 0;
          *((_QWORD *)&v120 + 1) = &v120;
          *(_QWORD *)&v121 = 0x2000000000;
          DWORD2(v121) = HIDWORD(v123[0]);
          fcntl((int)v123[0], 73, 1);
          fcntl(SHIDWORD(v123[0]), 73, 1);
          *(_QWORD *)&block = MEMORY[0x1E0C809B0];
          *((_QWORD *)&block + 1) = 0x40000000;
          *(_QWORD *)&v117 = sub_1ACBBBFD0;
          *((_QWORD *)&v117 + 1) = &unk_1E5C72A38;
          *(_QWORD *)&v118 = &v120;
          *((_QWORD *)&v118 + 1) = a1;
          dispatch_async(v16, &block);
          ppDb = 0;
          if (!sqlite3_open_v2(a2, &ppDb, a3 | 6, 0))
          {
            sqlite3_busy_timeout(ppDb, 60000);
            sqlite3_extended_result_codes(ppDb, 1);
            sub_1ACBBDA6C(ppDb);
            v36 = malloc_type_malloc(0x80001uLL, 0x7BABD825uLL);
            v36[0x80000] = 0;
            v37 = read((int)v123[0], v36, 0x80000uLL);
            if (!v37)
              goto LABEL_117;
            v103 = v13;
            v105 = a5;
            v38 = 0;
            v39 = 0x80000;
            v40 = v36;
            do
            {
              v38 += v37;
              v36[v38] = 0;
              if (v38 >= v39)
              {
                v41 = v40 - v36;
                if (v40 == v36)
                {
                  v36 = malloc_type_realloc(v36, v39 + 524289, 0x13C8CE99uLL);
                  v42 = v36 + 0x80000;
                  v39 += 0x80000;
                }
                else
                {
                  memmove(v36, v40, v39 - v41);
                  v38 -= v41;
                  v42 = &v36[v38];
                }
                *(_QWORD *)v109 = v39;
                *v42 = 0;
                v40 = v36;
              }
              else
              {
                *(_QWORD *)v109 = v39;
              }
              v43 = v36;
              v44 = strncmp(v40, "CREATE TRIGGER", 0xEuLL);
              if (v44)
                v45 = ";\n";
              else
                v45 = "END;\n";
              if (v44)
                v46 = 2;
              else
                v46 = 5;
              v111 = v43;
              v47 = &v43[v38];
              do
              {
                v49 = strstr(v40, v45);
                if (!v49)
                  break;
                v50 = v49;
                if (v49 >= v47)
                  break;
                v51 = v46 - 1;
                v49[v51] = 0;
                if (sqlite3_complete(v40))
                {
                  errmsg = 0;
                  v52 = sqlite3_exec(ppDb, v40, 0, 0, &errmsg);
                  if (v52 && v52 != 100)
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "executing sql '%s' returned error %x with message:'%s'\n", v40, v52, errmsg);
                  if (errmsg)
                    sqlite3_free(errmsg);
                  v50[v51] = 10;
                  v40 = &v50[v46];
                  v48 = strncmp(v40, "CREATE TRIGGER", 0xEuLL);
                  if (v48)
                    v45 = ";\n";
                  else
                    v45 = "END;\n";
                  if (v48)
                    v46 = 2;
                  else
                    v46 = 5;
                }
              }
              while (v40 < v47);
              v39 = *(_QWORD *)v109;
              v37 = read((int)v123[0], v47, *(_QWORD *)v109 - v38);
              a5 = v105;
              v36 = v111;
            }
            while (v37);
            v13 = v103;
            a2 = filename;
            if (v111)
LABEL_117:
              free(v36);
          }
          if (ppDb)
            sqlite3_close(ppDb);
          close((int)v123[0]);
          dispatch_sync(v16, &unk_1E5C72A78);
          dispatch_release(v16);
          v86 = *(_DWORD *)(*((_QWORD *)&v120 + 1) + 24);
          if (v86 != -1)
            close(v86);
          _Block_object_dispose(&v120, 8);
        }
      }
      *v13 = strdup(a2);
      v22 = 1;
      goto LABEL_124;
    }
    v11 = sub_1ACBBAB88(a1, a2, a3);
    *v13 = strdup(a2);
    memset(&v112, 0, sizeof(v112));
    v21 = sqlite3_mprintf("%s-wal", a2);
    if (stat(v21, &v112) || v112.st_size < 1)
    {
      free(v21);
      v22 = 1;
    }
    else
    {
      *v13 = v21;
      v22 = 2;
    }
    memset(&v112, 0, sizeof(v112));
    v33 = sqlite3_mprintf("%s-journal", a2);
    if (stat(v33, &v112) || v112.st_size < 1)
    {
      free(v33);
      if (!(_DWORD)v11)
        goto LABEL_124;
    }
    else
    {
      ++v22;
      *v13 = v33;
      if (!(_DWORD)v11)
      {
LABEL_124:
        v87 = strlen(*v13);
        if (v22 == 1)
        {
          v88 = v87 + 9;
        }
        else
        {
          v88 = v87 + strlen(v13[1]) + 18;
          if (v22 != 2)
            v88 += strlen(v13[2]) + 9;
        }
        v89 = v88 + 8;
        v90 = sqlite3_malloc(v89);
        bzero(v90, v89);
        v91 = (char *)&v90[v22 + 1];
        v92 = strlen(*v13);
        *v90 = v91;
        strcpy(v91, *v13);
        if (v22 != 1)
        {
          v93 = &v91[v92 + 1];
          v94 = strlen(v13[1]);
          v90[1] = v93;
          strcpy(v93, v13[1]);
          if (v22 != 2)
          {
            v95 = &v93[v94 + 1];
            v90[2] = v95;
            strcpy(v95, v13[2]);
          }
        }
        v11 = 0;
        if (a5)
          *a5 = v90;
      }
    }
    free((void *)*v13);
    if (v22 != 1)
    {
      free((void *)v13[1]);
      if (v22 != 2)
        free((void *)v13[2]);
    }
LABEL_136:
    free(v13);
  }
  return v11;
}

void *sub_1ACBBB980()
{
  void *result;
  void *v1;

  result = dlopen("/usr/lib/libcompression.dylib", 8);
  if (result)
  {
    v1 = result;
    off_1EECAD090 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(result, "compression_stream_init");
    off_1EECAD098 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "compression_stream_process");
    result = dlsym(v1, "compression_stream_destroy");
    off_1EECAD0A0 = (uint64_t (*)(_QWORD))result;
  }
  return result;
}

uint64_t sub_1ACBBB9F4(sqlite3 *db, char *zSql, char *a3, unsigned int a4)
{
  uint64_t result;
  int v9;
  const unsigned __int8 *v10;
  sqlite3_stmt *ppStmt;

  ppStmt = 0;
  do
    result = sqlite3_prepare(db, zSql, -1, &ppStmt, 0);
  while ((_DWORD)result == 5);
  if (!(_DWORD)result)
  {
    do
      v9 = sqlite3_step(ppStmt);
    while (v9 == 5);
    if (v9 == 100)
    {
      v10 = sqlite3_column_text(ppStmt, 0);
      if (v10)
      {
        if (a3)
        {
          if (*v10)
            strlcpy(a3, (const char *)v10, a4);
        }
      }
    }
    return sqlite3_finalize(ppStmt);
  }
  return result;
}

uint64_t sub_1ACBBBAA0(uint64_t a1)
{
  uint64_t result;

  sub_1ACBBC6A8(*(sqlite3 **)(a1 + 40), "main", 0, (void (*)(_QWORD, _QWORD))sub_1ACBBBB04, *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  result = close(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
  return result;
}

ssize_t sub_1ACBBBB04(const char *a1, int a2)
{
  size_t v4;

  v4 = strlen(a1);
  return write(a2, a1, v4);
}

void sub_1ACBBBB34(int a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;

  v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x37E09262uLL);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 > 516)
  {
    switch(v6)
    {
      case 517:
        v7 = "ZLIB";
        goto LABEL_15;
      case 774:
        v7 = "LZMA";
        goto LABEL_15;
      case 2049:
        v7 = "LZFSE";
        goto LABEL_15;
    }
LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  if (!v6)
  {
    v7 = "none";
    goto LABEL_15;
  }
  if (v6 == 256)
  {
    v7 = "LZ4";
    goto LABEL_15;
  }
  if (v6 != 257)
    goto LABEL_14;
  v7 = "LZ4_RAW";
LABEL_15:
  snprintf(v4, 0x400uLL, "%s,%u,%u,0x%llx,0x%llx,0x%llx,%lu,0x%llx,%s\n", "SQLite ARCHIVE_APPLE_1", *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v6, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v7);
  v8 = strlen(v5);
  write(a1, v5, v8);
  free(v5);
}

const char *sub_1ACBBBC5C(const char *result)
{
  const char *v1;
  char v2[1048];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (*result)
    {
      MEMORY[0x1E0C80A78]();
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      return (const char *)unlink(v1);
    }
  }
  return result;
}

char *sub_1ACBBBDA8()
{
  char *v0;
  size_t v1;
  size_t v2;
  char *v3;

  v0 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x12D23B98uLL);
  confstr(65537, v0, 0x400uLL);
  v1 = strlen(v0);
  v2 = v1 + 24;
  v3 = (char *)malloc_type_calloc(1uLL, v1 + 24, 0x85AA942BuLL);
  strlcpy(v3, v0, v1 + 24);
  if (v3[v1 - 1] != 47)
    strlcat(v3, "/", v2);
  strlcat(v3, "tmpsqlitearchiveXXXXXX", v2);
  free(v0);
  return v3;
}

uint64_t sub_1ACBBBE68(uint64_t result, int a2, const char **a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  const char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;

  if (a2 <= 1)
  {
    __break(1u);
    return result;
  }
  v4 = result;
  v5 = *(unsigned int *)(result + 16);
  v6 = *a3;
  if (*a3)
  {
    v7 = strlen(*a3);
    if (v7)
    {
      v8 = v7 + 1;
      v9 = (char *)malloc_type_calloc(1uLL, v7 + 1, 0x209A181uLL);
    }
    else
    {
      v9 = 0;
      v8 = 1;
    }
    strlcpy(v9, v6, v8);
    v10 = a3[1];
    if (v10)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    v10 = a3[1];
    if (v10)
    {
LABEL_9:
      v12 = strlen(v10);
      if (v12)
      {
        v13 = v12 + 1;
        v11 = (char *)malloc_type_calloc(1uLL, v12 + 1, 0x6FC8D12AuLL);
      }
      else
      {
        v11 = 0;
        v13 = 1;
      }
      strlcpy(v11, v10, v13);
      goto LABEL_13;
    }
  }
  v11 = 0;
LABEL_13:
  v14 = *(_DWORD *)(v4 + 20);
  if (v5 >= v14)
  {
    v15 = v14 + 512;
    v16 = 8 * (v14 + 512);
    *(_QWORD *)v4 = malloc_type_realloc(*(void **)v4, v16, 0x10040436913F5uLL);
    *(_QWORD *)(v4 + 8) = malloc_type_realloc(*(void **)(v4 + 8), v16, 0x10040436913F5uLL);
    *(_DWORD *)(v4 + 20) = v15;
  }
  v17 = 8 * v5;
  *(_QWORD *)(*(_QWORD *)v4 + v17) = v9;
  *(_QWORD *)(*(_QWORD *)(v4 + 8) + v17) = v11;
  ++*(_DWORD *)(v4 + 16);
  return 0;
}

void sub_1ACBBBFD0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  ssize_t v8;
  FILE **v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  ssize_t v13;
  ssize_t v14;
  FILE *v15;
  int *v16;
  FILE **v17;
  unsigned int v18;
  uint64_t v19;
  ssize_t v20;
  ssize_t v21;
  FILE *v22;
  int *v23;
  FILE *v24;
  int *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v2 = open(*(const char **)(a1 + 40), 0, 0);
  if (v2 < 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = __error();
    fprintf(v24, "open destination failed for %d\n", *v25);
  }
  else
  {
    v3 = v2;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    sub_1ACBB904C(v2, (uint64_t)&v30);
    v4 = DWORD2(v31);
    v5 = malloc_type_valloc(0x100000uLL, 0x800D2BCBuLL);
    v6 = malloc_type_valloc(0x100000uLL, 0x7DC0794EuLL);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v7 = off_1EECAD090(&v27, 1, v4);
    if (v7)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "compression_stream_init failed for %d\n", v7);
    v8 = read(v3, v5, 0x100000uLL);
    v26 = v5;
    if (v8 >= 1)
    {
      v9 = (FILE **)MEMORY[0x1E0C80C10];
      do
      {
        *(_QWORD *)&v28 = v5;
        *((_QWORD *)&v28 + 1) = v8;
        do
        {
          *(_QWORD *)&v27 = v6;
          *((_QWORD *)&v27 + 1) = 0x100000;
          v11 = off_1EECAD098(&v27, 0);
          if (v11 >= 2)
            fprintf(*v9, "compression_stream_process alpha failed for %d\n", v11);
          if (*((_QWORD *)&v27 + 1) != 0x100000)
          {
            v12 = 0x100000 - *((_QWORD *)&v27 + 1);
            v13 = write(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6, 0x100000 - *((_QWORD *)&v27 + 1));
            if (v13 != v12)
            {
              v14 = v13;
              v15 = *v9;
              v16 = __error();
              fprintf(v15, "last write ended with return %ld expected %ld with errno %d\n", v14, v8, *v16);
            }
          }
          if (v11)
            v10 = 1;
          else
            v10 = *((_QWORD *)&v28 + 1) == 0;
        }
        while (!v10);
        v5 = v26;
        v8 = read(v3, v26, 0x100000uLL);
      }
      while (v8 > 0);
    }
    v28 = (unint64_t)v5;
    v17 = (FILE **)MEMORY[0x1E0C80C10];
    do
    {
      *(_QWORD *)&v27 = v6;
      *((_QWORD *)&v27 + 1) = 0x100000;
      v18 = off_1EECAD098(&v27, 1);
      if (v18 >= 2)
        fprintf(*v17, "compression_stream_process bravo failed for %d\n", v18);
      if (*((_QWORD *)&v27 + 1) != 0x100000)
      {
        v19 = 0x100000 - *((_QWORD *)&v27 + 1);
        v20 = write(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6, 0x100000 - *((_QWORD *)&v27 + 1));
        if (v20 != v19)
        {
          v21 = v20;
          v22 = *v17;
          v23 = __error();
          fprintf(v22, "last write ended with return %ld expected %ld with errno %d\n", v21, v8, *v23);
        }
      }
    }
    while (!v18);
    off_1EECAD0A0(&v27);
    close(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
    close(v3);
    free(v26);
    free(v6);
  }
}

uint64_t sub_1ACBBC2DC()
{
  uint64_t result;

  qword_1ECD3B0A0 = (uint64_t)sqlite3_vfs_find(0);
  if (!qword_1ECD3B0A0)
    return 1;
  dword_1ECD3B084 = 40;
  LODWORD(result) = sqlite3_vfs_register((sqlite3_vfs *)&unk_1ECD3B080, 0);
  if ((_DWORD)result)
    return result;
  else
    return 256;
}

uint64_t sub_1ACBBC330(int a1, char *a2, uint64_t a3, __int16 a4)
{
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  sqlite3_int64 v8;
  uint64_t result;
  int v10;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a4 & 0x100) == 0)
    return 14;
  v6 = sqlite3_uri_int64(a2, "ptr", 0);
  *(_QWORD *)(a3 + 24) = v6;
  if (!v6)
    return 14;
  v7 = sqlite3_uri_int64(a2, "sz", 0);
  *(_QWORD *)(a3 + 8) = v7;
  if (v7 < 0)
    return 14;
  v8 = sqlite3_uri_int64(a2, "max", v7);
  *(_QWORD *)(a3 + 16) = v8;
  if (v8 < *(_QWORD *)(a3 + 8))
    return 14;
  v10 = sqlite3_uri_BOOLean(a2, "freeonclose", 0);
  result = 0;
  *(_DWORD *)(a3 + 32) = v10;
  *(_QWORD *)a3 = &unk_1E5C72A98;
  return result;
}

uint64_t sub_1ACBBC3F0()
{
  return 2570;
}

uint64_t sub_1ACBBC3F8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t sub_1ACBBC404(int a1, const char *a2, int a3, char *a4)
{
  sqlite3_snprintf(a3, a4, "%s", a2);
  return 0;
}

uint64_t sub_1ACBBC438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
}

uint64_t sub_1ACBBC444(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 80))();
}

uint64_t sub_1ACBBC450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 88))();
}

uint64_t sub_1ACBBC45C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 96))();
}

uint64_t sub_1ACBBC468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 104))();
}

uint64_t sub_1ACBBC474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 112))();
}

uint64_t sub_1ACBBC480(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 120))();
}

uint64_t sub_1ACBBC48C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 128))();
}

uint64_t sub_1ACBBC498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 136))();
}

uint64_t sub_1ACBBC4A4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32))
    sqlite3_free(*(void **)(a1 + 24));
  return 0;
}

uint64_t sub_1ACBBC4C8(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 24) + a4), a3);
  return 0;
}

uint64_t sub_1ACBBC4F4(_QWORD *a1, void *__src, int a3, uint64_t a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3;
  v8 = a3 + a4;
  v9 = a1[1];
  if (v8 > v9)
  {
    if (v8 > a1[2])
      return 13;
    if (a4 > v9)
      bzero((void *)(a1[3] + v9), a4 - v9);
    a1[1] = v8;
  }
  memcpy((void *)(a1[3] + a4), __src, v7);
  return 0;
}

uint64_t sub_1ACBBC580(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  size_t v6;
  uint64_t result;

  v4 = a1[1];
  v5 = a2 <= v4;
  v6 = a2 - v4;
  if (!v5)
  {
    if (a1[2] < a2)
      return 13;
    bzero((void *)(a1[3] + v4), v6);
  }
  result = 0;
  a1[1] = a2;
  return result;
}

uint64_t sub_1ACBBC5D4()
{
  return 0;
}

uint64_t sub_1ACBBC5DC(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1ACBBC5EC()
{
  return 0;
}

uint64_t sub_1ACBBC5F4()
{
  return 0;
}

uint64_t sub_1ACBBC5FC(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1ACBBC608(uint64_t a1, int a2, char **a3)
{
  char *v4;
  uint64_t result;

  if (a2 != 12)
    return 12;
  v4 = sqlite3_mprintf("mem(%p,%lld)", *(const void **)(a1 + 24), *(_QWORD *)(a1 + 8));
  result = 0;
  *a3 = v4;
  return result;
}

uint64_t sub_1ACBBC660()
{
  return 1024;
}

uint64_t sub_1ACBBC668()
{
  return 5633;
}

uint64_t sub_1ACBBC670()
{
  return 5386;
}

uint64_t sub_1ACBBC678()
{
  return 5130;
}

uint64_t sub_1ACBBC684()
{
  return 0;
}

uint64_t sub_1ACBBC68C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = *(_QWORD *)(a1 + 24) + a2;
  return 0;
}

uint64_t sub_1ACBBC6A0()
{
  return 0;
}

uint64_t sub_1ACBBC6A8(sqlite3 *a1, const char *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t result;
  const char *v11;
  sqlite3 *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD);
  uint64_t v17;

  v13 = 0;
  v15 = 0;
  result = sqlite3_exec(a1, "BEGIN", 0, 0, 0);
  v14 = result;
  if (!(_DWORD)result)
  {
    v12 = a1;
    v16 = a4;
    v17 = a5;
    if (!a2)
      a2 = "main";
    a4("PRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n", a5);
    if (a3)
    {
      sub_1ACBBC7F8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE tbl_name=%Q COLLATE nocase AND type=='table'  AND sql NOT NULL", a2, a3);
      sub_1ACBBC88C((uint64_t)&v12, "SELECT sql FROM \"%w\".sqlite_schema WHERE sql NOT NULL  AND type IN ('index','trigger','view')  AND tbl_name=%Q COLLATE nocase", a2, a3);
    }
    else
    {
      sub_1ACBBC7F8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'", a2);
      sub_1ACBBC7F8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE name=='sqlite_sequence'", a2);
      sub_1ACBBC88C((uint64_t)&v12, "SELECT sql FROM sqlite_schema WHERE sql NOT NULL AND type IN ('index','trigger','view')", 0);
    }
    if ((_DWORD)v15)
      a4("PRAGMA writable_schema=OFF;\n", a5);
    if (v13)
      v11 = "ROLLBACK; -- due to errors\n";
    else
      v11 = "COMMIT;\n";
    a4(v11, a5);
    sqlite3_exec(a1, "COMMIT", 0, 0, 0);
    return v14;
  }
  return result;
}

void sub_1ACBBC7F8(uint64_t a1, char *a2, ...)
{
  char *v3;
  char *errmsg;
  va_list va;

  va_start(va, a2);
  errmsg = 0;
  v3 = sqlite3_vmprintf(a2, va);
  sqlite3_exec(*(sqlite3 **)a1, v3, (int (__cdecl *)(void *, int, char **, char **))sub_1ACBBCA78, (void *)a1, &errmsg);
  sqlite3_free(v3);
  if (errmsg)
  {
    sub_1ACBBD668(a1, "/****** %s ******/\n", errmsg);
    sqlite3_free(errmsg);
    ++*(_DWORD *)(a1 + 8);
  }
}

void sub_1ACBBC88C(uint64_t a1, char *a2, ...)
{
  char *v3;
  char *v4;
  int v5;
  BOOL v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  const unsigned __int8 *v12;
  int i;
  void (*v14)(const unsigned __int8 *, _QWORD);
  const unsigned __int8 *v15;
  char *v16;
  int v17;
  int v18;
  const char *v19;
  sqlite3_stmt *ppStmt;
  va_list va;

  va_start(va, a2);
  ppStmt = 0;
  v3 = sqlite3_vmprintf(a2, va);
  if (!v3)
  {
    *(_DWORD *)(a1 + 12) = 7;
    goto LABEL_25;
  }
  v4 = v3;
  v5 = sqlite3_prepare_v2(*(sqlite3 **)a1, v3, -1, &ppStmt, 0);
  sqlite3_free(v4);
  if (v5)
    v6 = 1;
  else
    v6 = ppStmt == 0;
  if (v6)
  {
    v7 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1ACBBD668(a1, "/**** ERROR: (%d) %s *****/\n", v5, v7);
LABEL_25:
    ++*(_DWORD *)(a1 + 8);
    return;
  }
  v8 = sqlite3_step(ppStmt);
  v9 = sqlite3_column_count(ppStmt);
  if (v8 == 100)
  {
    v10 = v9;
    do
    {
      v12 = sqlite3_column_text(ppStmt, 0);
      (*(void (**)(const unsigned __int8 *, _QWORD))(a1 + 24))(v12, *(_QWORD *)(a1 + 32));
      if (v10 >= 2)
      {
        for (i = 1; i != v10; ++i)
        {
          (*(void (**)(const char *, _QWORD))(a1 + 24))(",", *(_QWORD *)(a1 + 32));
          v14 = *(void (**)(const unsigned __int8 *, _QWORD))(a1 + 24);
          v15 = sqlite3_column_text(ppStmt, i);
          v14(v15, *(_QWORD *)(a1 + 32));
        }
      }
      if (v12)
        v16 = (char *)v12;
      else
        v16 = &byte_1ACCBEAEE;
      do
      {
        while (*v16++ == 45)
        {
          if (*v16 == 45)
          {
            v11 = "\n;\n";
            goto LABEL_12;
          }
        }
      }
      while (*(v16 - 1));
      v11 = ";\n";
LABEL_12:
      (*(void (**)(const char *, _QWORD))(a1 + 24))(v11, *(_QWORD *)(a1 + 32));
    }
    while (sqlite3_step(ppStmt) == 100);
  }
  v17 = sqlite3_finalize(ppStmt);
  if (v17)
  {
    v18 = v17;
    v19 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1ACBBD668(a1, "/**** ERROR: (%d) %s *****/\n", v18, v19);
    if (v18 != 11)
      goto LABEL_25;
  }
}

uint64_t sub_1ACBBCA78(uint64_t a1, int a2, uint64_t a3)
{
  char *v4;
  const char *v5;
  const char *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  void (*v10)(const char *, uint64_t);
  const char *v11;
  const char *v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  const char **v20;
  const char **v21;
  const unsigned __int8 *v22;
  char *v23;
  const unsigned __int8 *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  char *v33;
  void **v34;
  char *v35;
  int v36;
  uint64_t v37;
  const char **v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unsigned int v42;
  _QWORD *v43;
  char *v44;
  unsigned int v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  int v52;
  int v53;
  void **v54;
  char *v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  sqlite3_int64 v60;
  double v61;
  const unsigned __int8 *v62;
  char *v63;
  const unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  const unsigned __int8 *v68;
  int v69;
  int v70;
  const char *v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char v77;
  double v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  char *v83;
  int v84;
  int v85;
  char *v86;
  void *v87;
  unsigned int v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  char *v92;
  const char **v93;
  uint64_t v94;
  const char **v95;
  uint64_t v96;
  int v97;
  void *v98;
  uint64_t v99;
  char *zSql;
  uint64_t v101;
  sqlite3_stmt *pStmt;
  char __s2[20];
  sqlite3_stmt *ppStmt[4];

  ppStmt[3] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  if (a2 != 3)
    return 1;
  v4 = *(char **)a3;
  v5 = *(const char **)(a3 + 8);
  v6 = *(const char **)(a3 + 16);
  if (!strcmp(*(const char **)a3, "sqlite_sequence"))
  {
    v12 = "DELETE FROM sqlite_sequence;\n";
  }
  else if (sqlite3_strglob("sqlite_stat?", v4))
  {
    result = strncmp(v4, "sqlite_", 7uLL);
    if (!(_DWORD)result)
      return result;
    if (!strncmp(v6, "CREATE VIRTUAL TABLE", 0x14uLL))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        (*(void (**)(const char *, _QWORD))(a1 + 24))("PRAGMA writable_schema=ON;\n", *(_QWORD *)(a1 + 32));
        *(_DWORD *)(a1 + 16) = 1;
      }
      sub_1ACBBD668(a1, "INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','%q','%q',0,'%q');",
        v4,
        v4,
        v6);
      return 0;
    }
    v8 = sqlite3_strglob("CREATE TABLE ['\"]*", v6);
    v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v11 = v6;
    }
    else
    {
      v10("CREATE TABLE IF NOT EXISTS ", v9);
      v11 = v6 + 13;
      v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
    }
    v10(v11, v9);
    v12 = ";\n";
  }
  else
  {
    v12 = "ANALYZE sqlite_schema;\n";
  }
  (*(void (**)(const char *, _QWORD))(a1 + 24))(v12, *(_QWORD *)(a1 + 32));
  if (strcmp(v5, "table"))
    return 0;
  zSql = 0;
  v101 = 0;
  v98 = 0;
  v99 = 0;
  ppStmt[0] = 0;
  v13 = sqlite3_mprintf("PRAGMA table_info=%Q", v4);
  if (!v13)
    return 0;
  v14 = v13;
  pStmt = 0;
  v15 = sqlite3_prepare_v2(*(sqlite3 **)a1, v13, -1, ppStmt, 0);
  sqlite3_free(v14);
  if (v15)
    return 0;
  if (sqlite3_step(ppStmt[0]) == 100)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      if (v16 >= v19 - 2)
      {
        v19 = v16 + 2 * v19 + 10;
        v21 = (const char **)sqlite3_realloc64(v20, 8 * v19);
        if (!v21)
          break;
        *v21 = 0;
        v20 = v21;
      }
      v22 = sqlite3_column_text(ppStmt[0], 1);
      v23 = sqlite3_mprintf("%s", (const char *)v22);
      v20[v16 + 1] = v23;
      if (!v23)
        break;
      if (sqlite3_column_int(ppStmt[0], 5))
      {
        if (v18 || (v24 = sqlite3_column_text(ppStmt[0], 2), sqlite3_stricmp((const char *)v24, "INTEGER")))
        {
          v17 = 0;
          ++v18;
        }
        else
        {
          v18 = 1;
          v17 = 1;
        }
      }
      ++v16;
      if (sqlite3_step(ppStmt[0]) != 100)
        goto LABEL_34;
    }
LABEL_41:
    sqlite3_finalize(ppStmt[0]);
    v33 = (char *)v20[1];
    if (v33)
    {
      v34 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v33);
        v35 = (char *)*v34++;
        v33 = v35;
      }
      while (v35);
    }
    sqlite3_free(v20);
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = 7;
    return 0;
  }
  v20 = 0;
  LODWORD(v16) = 0;
  v17 = 0;
LABEL_34:
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0;
  v25 = (v16 + 1);
  v20[v25] = 0;
  if (!v17)
    goto LABEL_46;
  v26 = sqlite3_mprintf("SELECT 1 FROM pragma_index_list(%Q) WHERE origin='pk'", v4);
  if (!v26)
    goto LABEL_41;
  v27 = v26;
  v28 = sqlite3_prepare_v2(*(sqlite3 **)a1, v26, -1, ppStmt, 0);
  sqlite3_free(v27);
  if (v28)
  {
    v29 = (char *)v20[1];
    if (v29)
    {
      v30 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v29);
        v31 = (char *)*v30++;
        v29 = v31;
      }
      while (v31);
    }
    v32 = (char *)v20;
    goto LABEL_158;
  }
  v36 = sqlite3_step(ppStmt[0]);
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0;
  if (v36 == 100)
  {
LABEL_46:
    if ((_DWORD)v16)
    {
      v37 = v25 - 1;
      v38 = v20 + 1;
      v39 = v25 - 1;
      while (sqlite3_stricmp("rowid", *v38))
      {
        ++v38;
        if (!--v39)
          goto LABEL_50;
      }
      v93 = v20 + 1;
      v40 = 1;
      v94 = v37;
      while (sqlite3_stricmp("_rowid_", *v93))
      {
        ++v93;
        if (!--v94)
          goto LABEL_51;
      }
      v95 = v20 + 1;
      v40 = 2;
      while (sqlite3_stricmp("oid", *v95))
      {
        ++v95;
        if (!--v37)
          goto LABEL_51;
      }
    }
    else
    {
LABEL_50:
      v40 = 0;
LABEL_51:
      v41 = off_1E5C72B30[v40];
      if (!sqlite3_table_column_metadata(*(sqlite3 **)a1, 0, v4, v41, 0, 0, 0, 0, 0))
        *v20 = v41;
    }
  }
  v98 = 0;
  v99 = 0;
  sub_1ACBBD6B8((uint64_t)&v98, "INSERT INTO ", 0);
  v42 = sub_1ACBBD980(v4);
  sub_1ACBBD6B8((uint64_t)&v98, v4, v42);
  if (*v20)
  {
    sub_1ACBBD6B8((uint64_t)&v98, "(", 0);
    sub_1ACBBD6B8((uint64_t)&v98, (char *)*v20, 0);
    if (v20[1])
    {
      v43 = v20 + 2;
      do
      {
        sub_1ACBBD6B8((uint64_t)&v98, ",", 0);
        v44 = (char *)*(v43 - 1);
        v45 = sub_1ACBBD980(v44);
        sub_1ACBBD6B8((uint64_t)&v98, v44, v45);
      }
      while (*v43++);
    }
    sub_1ACBBD6B8((uint64_t)&v98, ")", 0);
  }
  sub_1ACBBD6B8((uint64_t)&v98, " VALUES(", 0);
  zSql = 0;
  v101 = 0;
  sub_1ACBBD6B8((uint64_t)&zSql, "SELECT ", 0);
  if (*v20)
  {
    sub_1ACBBD6B8((uint64_t)&zSql, (char *)*v20, 0);
    sub_1ACBBD6B8((uint64_t)&zSql, ",", 0);
  }
  v47 = (char *)v20[1];
  if (v47)
  {
    v48 = 2;
    do
    {
      v49 = v48;
      v50 = sub_1ACBBD980(v47);
      sub_1ACBBD6B8((uint64_t)&zSql, v47, v50);
      if (!v20[v49])
        break;
      sub_1ACBBD6B8((uint64_t)&zSql, ",", 0);
      v47 = (char *)v20[v49];
      v48 = v49 + 1;
    }
    while (v47);
    v51 = (char *)v20[1];
    if (*v20)
      v52 = 0;
    else
      v52 = -1;
    v53 = v52 + v49;
    if (v51)
    {
      v54 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v51);
        v55 = (char *)*v54++;
        v51 = v55;
      }
      while (v55);
    }
  }
  else
  {
    v53 = *v20 != 0;
  }
  sqlite3_free(v20);
  sub_1ACBBD6B8((uint64_t)&zSql, " FROM ", 0);
  v56 = sub_1ACBBD980(v4);
  sub_1ACBBD6B8((uint64_t)&zSql, v4, v56);
  v57 = sqlite3_prepare_v2(*(sqlite3 **)a1, zSql, -1, &pStmt, 0);
  if (v57)
  {
    v58 = *(_DWORD *)(a1 + 12);
    ++*(_DWORD *)(a1 + 8);
    if (!v58)
      *(_DWORD *)(a1 + 12) = v57;
    goto LABEL_157;
  }
  if (sqlite3_step(pStmt) != 100)
    goto LABEL_157;
  v96 = a1;
  v97 = v53;
  while (2)
  {
    (*(void (**)(void *, _QWORD))(a1 + 24))(v98, *(_QWORD *)(a1 + 32));
    if (v53 < 1)
      goto LABEL_77;
    v59 = 0;
    while (2)
    {
      if (v59)
        (*(void (**)(const char *, _QWORD))(a1 + 24))(",", *(_QWORD *)(a1 + 32));
      switch(sqlite3_column_type(pStmt, v59))
      {
        case 1:
          v60 = sqlite3_column_int64(pStmt, v59);
          sub_1ACBBD668(a1, "%lld", v60);
          goto LABEL_81;
        case 2:
          v61 = sqlite3_column_double(pStmt, v59);
          if (v61 == -INFINITY)
          {
            (*(void (**)(const char *, _QWORD))(a1 + 24))("-1e999", *(_QWORD *)(a1 + 32));
          }
          else if (v61 == INFINITY)
          {
            (*(void (**)(const char *, _QWORD))(a1 + 24))("1e999", *(_QWORD *)(a1 + 32));
          }
          else
          {
            v78 = -v61;
            if (v61 >= 0.0)
              v78 = v61;
            if (v78 == 0.0)
            {
              v80 = 0;
              LODWORD(v79) = 0;
            }
            else
            {
              v79 = *(uint64_t *)&v78 >> 52;
              v80 = *(_QWORD *)&v78 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
              if ((LOBYTE(v78) & 1) == 0 && (int)v79 <= 1074)
              {
                do
                {
                  v81 = v80;
                  v82 = v79;
                  v80 >>= 1;
                  LODWORD(v79) = v79 + 1;
                }
                while (v82 <= 1073 && v81 >= 2 && (v81 & 2) == 0);
              }
              if (v61 < 0.0)
                v80 = -(uint64_t)v80;
            }
            v92 = sqlite3_mprintf("ieee754(%lld,%d)", v80, (int)v79 - 1075);
            sub_1ACBBD668(a1, "%s", v92);
            sqlite3_free(v92);
          }
          goto LABEL_81;
        case 3:
          v62 = sqlite3_column_text(pStmt, v59);
          v63 = (char *)v62;
          v64 = v62;
          while (2)
          {
            v65 = *v64++;
            switch(v65)
            {
              case 0:
                sub_1ACBBD668(a1, "'%s'", (const char *)v62);
                goto LABEL_81;
              case 10:
              case 13:
              case 39:
                v66 = 0;
                v67 = 0;
                v68 = v62;
                break;
              default:
                continue;
            }
            break;
          }
          break;
        case 4:
          LODWORD(v75) = sqlite3_column_bytes(pStmt, v59);
          v76 = (char *)sqlite3_column_blob(pStmt, v59);
          (*(void (**)(const char *, _QWORD))(a1 + 24))("x'", *(_QWORD *)(a1 + 32));
          if ((int)v75 >= 1)
          {
            v75 = v75;
            do
            {
              LOBYTE(ppStmt[0]) = a0123456789abcd[(unint64_t)*v76 >> 4];
              v77 = *v76++;
              *(_WORD *)((char *)ppStmt + 1) = a0123456789abcd[v77 & 0xF];
              (*(void (**)(sqlite3_stmt **, _QWORD))(a1 + 24))(ppStmt, *(_QWORD *)(a1 + 32));
              --v75;
            }
            while (v75);
          }
          (*(void (**)(const char *, _QWORD))(a1 + 24))("'", *(_QWORD *)(a1 + 32));
          goto LABEL_81;
        case 5:
          (*(void (**)(const char *, _QWORD))(a1 + 24))("NULL", *(_QWORD *)(a1 + 32));
          goto LABEL_81;
        default:
          goto LABEL_81;
      }
      while (1)
      {
        v70 = *v68++;
        v69 = v70;
        if (v70 != 10)
          break;
        ++v66;
LABEL_92:
        if (v69 == 13)
          ++v67;
      }
      if (v69)
        goto LABEL_92;
      if (v66)
      {
        (*(void (**)(const char *, _QWORD))(a1 + 24))("replace(", *(_QWORD *)(a1 + 32));
        if (strstr(v63, "\\n"))
        {
          v71 = "\\012";
          if (strstr(v63, "\\012"))
          {
            v72 = 0;
            do
            {
              v73 = v72 + 1;
              v71 = (const char *)ppStmt;
              sqlite3_snprintf(20, (char *)ppStmt, "(%s%u)", "\\n", v72);
              v74 = strstr(v63, (const char *)ppStmt);
              v72 = v73;
            }
            while (v74);
          }
        }
        else
        {
          v71 = "\\n";
        }
      }
      else
      {
        v71 = 0;
      }
      if (v67)
      {
        (*(void (**)(const char *, _QWORD))(a1 + 24))("replace(", *(_QWORD *)(a1 + 32));
        if (strstr(v63, "\\r"))
        {
          v83 = "\\015";
          if (strstr(v63, "\\015"))
          {
            v84 = 0;
            do
            {
              v85 = v84 + 1;
              v83 = __s2;
              sqlite3_snprintf(20, __s2, "(%s%u)", "\\r", v84);
              v86 = strstr(v63, __s2);
              v84 = v85;
            }
            while (v86);
            a1 = v96;
          }
        }
        else
        {
          v83 = "\\r";
        }
      }
      else
      {
        v83 = 0;
      }
      (*(void (**)(const char *, _QWORD))(a1 + 24))("'", *(_QWORD *)(a1 + 32));
      while (1)
      {
        v88 = *v63;
        if (!*v63)
          break;
        while (1)
        {
          v89 = 0;
          while (v88 > 0x27 || ((1 << v88) & 0x8000002401) == 0)
          {
            v90 = &v63[v89++];
            v88 = v90[1];
          }
          if (v88 == 39)
            v91 = v89 + 1;
          else
            v91 = v89;
          if (v91)
          {
            sub_1ACBBD668(a1, "%.*s", v91, v63);
            v63 += v91;
          }
          if (v88 != 39)
            break;
          (*(void (**)(const char *, _QWORD))(a1 + 24))("'", *(_QWORD *)(a1 + 32));
          v88 = *v63;
          if (!*v63)
            goto LABEL_150;
        }
        if (!v88)
          break;
        ++v63;
        if (v88 == 10)
          v87 = (void *)v71;
        else
          v87 = v83;
        (*(void (**)(void *, _QWORD))(a1 + 24))(v87, *(_QWORD *)(a1 + 32));
      }
LABEL_150:
      (*(void (**)(const char *, _QWORD))(a1 + 24))("'", *(_QWORD *)(a1 + 32));
      if (v67)
        sub_1ACBBD668(a1, ",'%s',char(13))", v83);
      v53 = v97;
      if (v66)
        sub_1ACBBD668(a1, ",'%s',char(10))", v71);
LABEL_81:
      if (++v59 != v53)
        continue;
      break;
    }
LABEL_77:
    (*(void (**)(const char *, _QWORD))(a1 + 24))(");\n", *(_QWORD *)(a1 + 32));
    if (sqlite3_step(pStmt) == 100)
      continue;
    break;
  }
LABEL_157:
  sqlite3_finalize(pStmt);
  sqlite3_free(v98);
  v98 = 0;
  v99 = 0;
  v32 = zSql;
LABEL_158:
  sqlite3_free(v32);
  return 0;
}

void sub_1ACBBD668(uint64_t a1, char *a2, ...)
{
  char *v3;
  va_list va;

  va_start(va, a2);
  v3 = sqlite3_vmprintf(a2, va);
  (*(void (**)(char *, _QWORD))(a1 + 24))(v3, *(_QWORD *)(a1 + 32));
  sqlite3_free(v3);
}

void sub_1ACBBD6B8(uint64_t a1, char *__s, unsigned int a3)
{
  char *v4;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t *v18;
  unint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x8_t *v32;
  unint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x8_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x8_t v39;
  uint16x8_t v40;
  char *v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  v4 = __s;
  v6 = strlen(__s);
  v7 = v6;
  v8 = v6 & 0x3FFFFFFF;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = (v6 & 0x3FFFFFFF) + v9;
  if (!a3)
  {
    v11 = v10 + 1;
    goto LABEL_19;
  }
  v11 = v10 + 3;
  if (!(_DWORD)v8)
    goto LABEL_19;
  v12 = v6 & 0x3FFFFFFF;
  if (v12 < 8)
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (v12 < 0x20)
  {
    v13 = 0;
LABEL_12:
    v32 = (int8x8_t *)&v4[v13];
    v33 = v13 + (v6 & 7);
    v13 = v12 - (v6 & 7);
    v34 = 0uLL;
    v35 = (int32x4_t)v11;
    v36 = vdup_n_s8(a3);
    v37 = v33 - v12;
    v38.i64[0] = 0x100000001;
    v38.i64[1] = 0x100000001;
    do
    {
      v39 = *v32++;
      v40 = vmovl_u8((uint8x8_t)vceq_s8(v39, v36));
      v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v40), v38));
      v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8), v38));
      v37 += 8;
    }
    while (v37);
    v11 = vaddvq_s32(vaddq_s32(v35, v34));
    if ((v6 & 7) == 0)
      goto LABEL_19;
    goto LABEL_15;
  }
  v14 = 0uLL;
  v15 = (int32x4_t)v11;
  v16 = vdupq_n_s8(a3);
  v13 = v12 - (v6 & 0x1F);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v18 = (int8x16_t *)(v4 + 16);
  v19 = v13;
  v20 = 0uLL;
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  v25 = 0uLL;
  do
  {
    v26 = (uint8x16_t)vceqq_s8(v18[-1], v16);
    v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
    v28 = vmovl_high_u8(v26);
    v29 = (uint8x16_t)vceqq_s8(*v18, v16);
    v30 = vmovl_u8(*(uint8x8_t *)v29.i8);
    v31 = vmovl_high_u8(v29);
    v21 = vaddq_s32(v21, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v17));
    v20 = vaddq_s32(v20, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v17));
    v14 = vaddq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v17));
    v15 = vaddq_s32(v15, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v17));
    v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v17));
    v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v17));
    v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v17));
    v22 = vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v17));
    v18 += 2;
    v19 -= 32;
  }
  while (v19);
  v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v22, v15), vaddq_s32(v24, v20)), vaddq_s32(vaddq_s32(v23, v14), vaddq_s32(v25, v21))));
  if ((v6 & 0x1F) == 0)
    goto LABEL_19;
  if ((v6 & 0x1Fu) >= 8uLL)
    goto LABEL_12;
LABEL_15:
  v41 = &v4[v13];
  v42 = v12 - v13;
  do
  {
    v43 = *v41++;
    if (v43 == a3)
      ++v11;
    --v42;
  }
  while (v42);
LABEL_19:
  v44 = v11 + v9;
  v45 = *(_DWORD *)(a1 + 12);
  if (v44 >= v45)
  {
    v46 = v11 + 2 * v45 + 20;
    *(_DWORD *)(a1 + 12) = v46;
    v47 = sqlite3_realloc(*(void **)a1, v46);
    if (!v47)
    {
      sqlite3_free(*(void **)a1);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    *(_QWORD *)a1 = v47;
  }
  v48 = (char *)(*(_QWORD *)a1 + *(int *)(a1 + 8));
  if (a3)
  {
    *v48 = a3;
    v49 = v48 + 1;
    if ((_DWORD)v8)
    {
      v50 = v7 & 0x3FFFFFFF;
      do
      {
        while (1)
        {
          *v49 = *v4;
          v51 = *v4++;
          if (v51 != a3)
            break;
          v49[1] = a3;
          v49 += 2;
          if (!--v50)
            goto LABEL_28;
        }
        ++v49;
        --v50;
      }
      while (v50);
    }
LABEL_28:
    *v49 = a3;
    *(_DWORD *)(a1 + 8) = (_DWORD)v49 + 1 - *(_DWORD *)a1;
    v49[1] = 0;
  }
  else
  {
    memcpy(v48, v4, v7 & 0x3FFFFFFF);
    v52 = *(int *)(a1 + 8) + v8;
    *(_DWORD *)(a1 + 8) = v52;
    *(_BYTE *)(*(_QWORD *)a1 + v52) = 0;
  }
}

uint64_t sub_1ACBBD980(const char *a1)
{
  uint64_t v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *(unsigned __int8 *)a1;
  if (*a1 < 0)
    v3 = __maskrune(*(unsigned __int8 *)a1, 0x100uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x100;
  if ((_DWORD)v2 != 95 && v3 == 0)
    return 34;
  v5 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    v6 = 0;
    v7 = MEMORY[0x1E0C80978];
    while (1)
    {
      if ((v5 & 0x80) != 0)
      {
        v8 = __maskrune(v5, 0x500uLL);
        if (v5 != 95)
          goto LABEL_11;
      }
      else
      {
        v8 = *(_DWORD *)(v7 + 4 * v5 + 60) & 0x500;
        if (v5 != 95)
        {
LABEL_11:
          if (!v8)
            return 34;
        }
      }
      v9 = v6 + 1;
      v5 = a1[++v6];
      if (!v5)
        goto LABEL_18;
    }
  }
  v9 = 0;
LABEL_18:
  if (sqlite3_keyword_check(a1, v9))
    return 34;
  else
    return 0;
}

uint64_t sub_1ACBBDA6C(sqlite3 *a1)
{
  uint64_t result;

  result = sqlite3_create_function(a1, "ieee754", 1, 2097153, &unk_1E5C72B54, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBDC10, 0, 0);
  if (!(_DWORD)result)
  {
    result = sqlite3_create_function(a1, "ieee754", 2, 2097153, &unk_1E5C72B6C, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBDC10, 0, 0);
    if (!(_DWORD)result)
    {
      result = sqlite3_create_function(a1, "ieee754_mantissa", 1, 2097153, &unk_1E5C72B84, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBDC10, 0, 0);
      if (!(_DWORD)result)
      {
        result = sqlite3_create_function(a1, "ieee754_exponent", 1, 2097153, &unk_1E5C72B9C, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBDC10, 0, 0);
        if (!(_DWORD)result)
        {
          result = sqlite3_create_function(a1, "ieee754_to_blob", 1, 2097153, &unk_1E5C72BB4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBDFA4, 0, 0);
          if (!(_DWORD)result)
          {
            result = sqlite3_create_function(a1, "ieee754_from_blob", 1, 2097153, &unk_1E5C72BCC, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBE040, 0, 0);
            if (!(_DWORD)result)
              return sqlite3_create_function(a1, "ieee754_inc", 2, 2097153, &unk_1E5C72BE4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1ACBBE0E4, 0, 0);
          }
        }
      }
    }
  }
  return result;
}

void sub_1ACBBDC10(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  sqlite3_int64 v5;
  sqlite3_int64 v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  unsigned __int8 *v10;
  double v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v18;
  int v19;
  sqlite3_int64 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[100];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    v5 = sqlite3_value_int64(*a3);
    v6 = sqlite3_value_int64(a3[1]);
    v7 = -10000;
    if (v6 > -10000)
      v7 = v6;
    if (v7 >= 10000)
      v7 = 10000;
    if (v5 < 0)
    {
      v8 = -v5;
    }
    else
    {
      if (v5)
      {
        v8 = v5;
        if (!((unint64_t)v5 >> 53))
          goto LABEL_17;
        goto LABEL_46;
      }
      v8 = 0;
      if ((unint64_t)(v7 + 999) <= 0x7CE)
      {
        v9 = 0.0;
LABEL_62:
        sqlite3_result_double(a1, v9);
        return;
      }
    }
    if (!(v8 >> 53))
    {
LABEL_17:
      v12 = v8;
LABEL_47:
      if (v12 - 1 <= 0xFFFFFFFFFFFFELL)
      {
        do
        {
          v12 *= 2;
          --v7;
        }
        while (v12 - 1 < 0xFFFFFFFFFFFFFLL);
      }
      v23 = 972;
      if (v7 < 972)
        v23 = v7;
      v24 = (v23 << 52) + 0x4330000000000000;
      v25 = v12 >> (-50 - v7);
      if ((unint64_t)v7 < 0xFFFFFFFFFFFFFB8FLL)
        v25 = 0;
      v26 = v7 <= -1075;
      if (v7 <= -1075)
        v27 = v25;
      else
        v27 = v12;
      if (v26)
        v28 = 0;
      else
        v28 = v24;
      v29 = v27 & 0xFFFFFFFFFFFFFLL | v28;
      if (v5 < 0)
        v29 |= 0x8000000000000000;
      v9 = *(double *)&v29;
      goto LABEL_62;
    }
    do
    {
LABEL_46:
      v12 = v8 >> 1;
      ++v7;
      v22 = v8 >> 54;
      v8 >>= 1;
    }
    while (v22);
    goto LABEL_47;
  }
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
    {
      v10 = (unsigned __int8 *)sqlite3_value_blob(*a3);
      *(_QWORD *)&v11 = v10[7] | ((((unint64_t)v10[5] << 8) | ((((unint64_t)((v10[1] << 8) | (*v10 << 16) | v10[2]) << 16) | ((unint64_t)v10[3] << 8) | v10[4]) << 16) | v10[6]) << 8);
    }
    else
    {
      v11 = sqlite3_value_double(*a3);
    }
    v13 = -v11;
    if (v11 >= 0.0)
      v13 = v11;
    if (v13 == 0.0)
    {
      v20 = 0;
      LODWORD(v14) = 0;
    }
    else
    {
      v14 = *(uint64_t *)&v13 >> 52;
      if ((*(uint64_t *)&v13 >> 52))
        v15 = *(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
      else
        v15 = 2 * (*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL);
      if ((int)v14 <= 1074 && v15 != 0 && (v15 & 1) == 0)
      {
        do
        {
          v18 = v15;
          v19 = v14;
          v15 >>= 1;
          LODWORD(v14) = v14 + 1;
        }
        while (v19 <= 1073 && v18 >= 2 && (v18 & 2) == 0);
      }
      if (v11 >= 0.0)
        v20 = v15;
      else
        v20 = -(uint64_t)v15;
    }
    v21 = *(_DWORD *)sqlite3_user_data(a1);
    switch(v21)
    {
      case 2:
        sqlite3_result_int(a1, v14 - 1075);
        break;
      case 1:
        sqlite3_result_int64(a1, v20);
        break;
      case 0:
        sqlite3_snprintf(100, v30, "ieee754(%lld,%d)", v20, v14 - 1075);
        sqlite3_result_text(a1, v30, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        break;
    }
  }
}

void sub_1ACBBDFA4(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (sqlite3_value_type(*a3) == 2 || sqlite3_value_type(*a3) == 1)
  {
    v5[0] = bswap64(COERCE_UNSIGNED_INT64(sqlite3_value_double(*a3)));
    sqlite3_result_blob(a1, v5, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1ACBBE040(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  unsigned __int8 *v5;

  if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
  {
    v5 = (unsigned __int8 *)sqlite3_value_blob(*a3);
    sqlite3_result_double(a1, COERCE_DOUBLE(v5[7] | ((((unint64_t)v5[5] << 8) | ((((unint64_t)((v5[1] << 8) | (*v5 << 16) | v5[2]) << 16) | ((unint64_t)v5[3] << 8) | v5[4]) << 16) | v5[6]) << 8)));
  }
}

void sub_1ACBBE0E4(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  double v5;
  double v6;

  v5 = sqlite3_value_double(*a3);
  *(_QWORD *)&v6 = sqlite3_value_int64(a3[1]) + *(_QWORD *)&v5;
  sqlite3_result_double(a1, v6);
}

int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
{
  int v4;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t *v11;
  sqlite3_int64 v12;
  sqlite3_int64 *v13;
  sqlite3_int64 v14;

  if (op >= 0xA)
  {
    v4 = 24422;
    return sub_1ACBBE20C(v4);
  }
  if (!pCurrent || !pHighwater)
  {
    v4 = 24425;
    return sub_1ACBBE20C(v4);
  }
  v8 = op;
  if (((0x379uLL >> op) & 1) != 0)
    v9 = &xmmword_1ECD3E930;
  else
    v9 = (__int128 *)((char *)&xmmword_1EECAD220 + 8);
  v10 = *(_QWORD *)v9;
  if (*(_QWORD *)v9)
    xmmword_1ECD3B1C0(v10);
  v11 = &qword_1ECD3E888[v8];
  v12 = *v11;
  *pCurrent = *v11;
  v14 = v11[10];
  v13 = v11 + 10;
  *pHighwater = v14;
  if (resetFlag)
    *v13 = v12;
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return 0;
}

uint64_t sub_1ACBBE20C(int a1)
{
  return sub_1ACBE1FD0(21, a1, "misuse");
}

void sqlite3_mutex_enter(sqlite3_mutex *a1)
{
  if (a1)
    xmmword_1ECD3B1C0();
}

void sqlite3_mutex_leave(sqlite3_mutex *a1)
{
  if (a1)
    xmmword_1ECD3B1D0();
}

int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
{
  int v5;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (!pCurrent || !pHighwater)
  {
    v5 = 24442;
    return sub_1ACBBE20C(v5);
  }
  if (op > 9)
  {
    v5 = 24422;
    return sub_1ACBBE20C(v5);
  }
  v9 = op;
  if (((0x379uLL >> op) & 1) != 0)
    v10 = &xmmword_1ECD3E930;
  else
    v10 = (__int128 *)((char *)&xmmword_1EECAD220 + 8);
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
    xmmword_1ECD3B1C0(v11);
  v12 = qword_1ECD3E888[v9];
  v13 = &qword_1ECD3E888[v9 + 10];
  v14 = *v13;
  if (resetFlag)
    *v13 = v12;
  if (v11)
    xmmword_1ECD3B1D0(v11);
  *pCurrent = v12;
  *pHighwater = v14;
  return 0;
}

int sqlite3_db_status(sqlite3 *a1, int op, int *pCur, int *pHiwtr, int resetFlg)
{
  int v6;
  const char *v7;
  uint64_t v12;
  char *v13;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *i;
  _QWORD *j;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  _QWORD *v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  int *v64;
  int v65;
  int v66;

  if (!a1)
  {
    v7 = "NULL";
    goto LABEL_15;
  }
  v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    v7 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1ACBBE20C(24491);
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      v7 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  if (!pCur || !pHiwtr)
    return sub_1ACBBE20C(24491);
  v12 = *((_QWORD *)a1 + 3);
  if (v12)
    xmmword_1ECD3B1C0(v12);
  switch(op)
  {
    case 0:
      v24 = *((_QWORD *)a1 + 58);
      if (v24)
      {
        v25 = 0;
        v26 = (_QWORD *)*((_QWORD *)a1 + 58);
        do
        {
          v26 = (_QWORD *)*v26;
          ++v25;
        }
        while (v26);
      }
      else
      {
        v25 = 0;
      }
      v49 = (_QWORD *)*((_QWORD *)a1 + 59);
      if (v49)
      {
        v50 = 0;
        v51 = (_QWORD *)*((_QWORD *)a1 + 59);
        do
        {
          v51 = (_QWORD *)*v51;
          --v50;
        }
        while (v51);
      }
      else
      {
        v50 = 0;
      }
      v53 = *((_QWORD *)a1 + 60);
      if (v53)
      {
        v54 = 0;
        v55 = (_QWORD *)*((_QWORD *)a1 + 60);
        do
        {
          v55 = (_QWORD *)*v55;
          ++v54;
        }
        while (v55);
      }
      else
      {
        v54 = 0;
      }
      v56 = v54 + v25;
      v57 = (_QWORD *)*((_QWORD *)a1 + 61);
      if (v57)
      {
        v58 = 0;
        v59 = (_QWORD *)*((_QWORD *)a1 + 61);
        do
        {
          v59 = (_QWORD *)*v59;
          --v58;
        }
        while (v59);
      }
      else
      {
        v58 = 0;
      }
      *pHiwtr = *((_DWORD *)a1 + 111) - v56;
      *pCur = v50 - v56 + v58 + *((_DWORD *)a1 + 111);
      if (resetFlg)
      {
        if (v49)
        {
          v60 = v49;
          do
          {
            v61 = v60;
            v60 = (_QWORD *)*v60;
          }
          while (v60);
          *v61 = v24;
          *((_QWORD *)a1 + 58) = v49;
          *((_QWORD *)a1 + 59) = 0;
        }
        if (v57)
        {
          v62 = v57;
          do
          {
            v63 = v62;
            v62 = (_QWORD *)*v62;
          }
          while (v62);
          resetFlg = 0;
          *v63 = v53;
          *((_QWORD *)a1 + 60) = v57;
          *((_QWORD *)a1 + 61) = 0;
        }
        else
        {
          resetFlg = 0;
        }
      }
      break;
    case 1:
    case 11:
      if (!*((_BYTE *)a1 + 111))
        sub_1ACBE9148((uint64_t)a1);
      v15 = *((_DWORD *)a1 + 10);
      v64 = pHiwtr;
      if (v15 < 1)
      {
        v17 = 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = 8;
        do
        {
          v19 = *(_QWORD *)(*((_QWORD *)a1 + 4) + v18);
          if (v19)
          {
            v20 = **(_QWORD **)(v19 + 8);
            v21 = *(_DWORD *)(v20 + 200) + *(unsigned __int16 *)(v20 + 176) + 120;
            v22 = xmmword_1ECD3B218(*(_QWORD *)(*(_QWORD *)(v20 + 336) + 72));
            v23 = off_1ECD3B178(v20) + v21 * v22 + *(_DWORD *)(v20 + 200);
            if (op == 11)
              v23 /= *(int *)(*(_QWORD *)(v19 + 8) + 104);
            v17 += v23;
            v15 = *((_DWORD *)a1 + 10);
          }
          ++v16;
          v18 += 32;
        }
        while (v16 < v15);
      }
      if (!*((_BYTE *)a1 + 111))
        sub_1ACBE91DC((uint64_t)a1);
      resetFlg = 0;
      *pCur = v17;
      *v64 = 0;
      break;
    case 2:
      v66 = 0;
      if (!*((_BYTE *)a1 + 111))
        sub_1ACBE9148((uint64_t)a1);
      *((_QWORD *)a1 + 102) = &v66;
      *((_QWORD *)a1 + 64) = *((_QWORD *)a1 + 63);
      if (*((int *)a1 + 10) >= 1)
      {
        v27 = 0;
        do
        {
          v28 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 32 * v27 + 24);
          if (v28)
          {
            v29 = v66
                + (*(_DWORD *)(v28 + 60) + *(_DWORD *)(v28 + 12) + *(_DWORD *)(v28 + 36) + *(_DWORD *)(v28 + 84))
                * unk_1ECD3B180(32);
            v66 = v29;
            v30 = *(_QWORD *)(v28 + 24);
            if (v30)
            {
              LODWORD(v30) = off_1ECD3B178(v30);
              v29 = v66;
            }
            v31 = v29 + v30;
            v66 = v31;
            v32 = *(_QWORD *)(v28 + 72);
            if (v32)
            {
              LODWORD(v32) = off_1ECD3B178(v32);
              v31 = v66;
            }
            v33 = v31 + v32;
            v66 = v33;
            v34 = *(_QWORD *)(v28 + 48);
            if (v34)
            {
              LODWORD(v34) = off_1ECD3B178(v34);
              v33 = v66;
            }
            v35 = v33 + v34;
            v66 = v35;
            v36 = *(_QWORD *)(v28 + 96);
            if (v36)
            {
              LODWORD(v36) = off_1ECD3B178(v36);
              v35 = v66;
            }
            v66 = v35 + v36;
            for (i = *(_QWORD **)(v28 + 64); i; i = (_QWORD *)*i)
              sub_1ACB689B8(a1, i[2]);
            for (j = *(_QWORD **)(v28 + 16); j; j = (_QWORD *)*j)
            {
              v39 = j[2];
              if (v39)
              {
                if (*((_QWORD *)a1 + 102) || (v40 = *(_DWORD *)(v39 + 44) - 1, (*(_DWORD *)(v39 + 44) = v40) == 0))
                  sub_1ACC00BE8(a1, (_QWORD *)v39);
              }
            }
          }
          ++v27;
        }
        while (v27 < *((int *)a1 + 10));
      }
      *((_QWORD *)a1 + 102) = 0;
      *((_QWORD *)a1 + 64) = *((_QWORD *)a1 + 65);
      if (!*((_BYTE *)a1 + 111))
        sub_1ACBE91DC((uint64_t)a1);
      resetFlg = 0;
      *pHiwtr = 0;
      v42 = v66;
      goto LABEL_85;
    case 3:
      v65 = 0;
      *((_QWORD *)a1 + 102) = &v65;
      *((_QWORD *)a1 + 64) = *((_QWORD *)a1 + 63);
      v41 = *((_QWORD *)a1 + 1);
      if (v41)
      {
        do
        {
          sub_1ACBBE904(v41);
          v41 = *(_QWORD *)(v41 + 16);
        }
        while (v41);
        v42 = v65;
      }
      else
      {
        v42 = 0;
      }
      resetFlg = 0;
      *((_QWORD *)a1 + 64) = *((_QWORD *)a1 + 65);
      *((_QWORD *)a1 + 102) = 0;
      *pHiwtr = 0;
      goto LABEL_85;
    case 4:
    case 5:
    case 6:
      *pCur = 0;
      v13 = (char *)a1 + 4 * (op - 4);
      *pHiwtr = *((_DWORD *)v13 + 112);
      if (resetFlg)
      {
        resetFlg = 0;
        *((_DWORD *)v13 + 112) = 0;
      }
      break;
    case 7:
    case 8:
    case 9:
      goto LABEL_61;
    case 10:
      *pHiwtr = 0;
      v42 = *((uint64_t *)a1 + 101) > 0 || *((_QWORD *)a1 + 100) > 0;
      resetFlg = 0;
      goto LABEL_85;
    case 12:
      op = 10;
LABEL_61:
      v43 = *((_DWORD *)a1 + 10);
      if (v43 < 1)
      {
        v42 = 0;
      }
      else
      {
        v44 = 0;
        v42 = 0;
        v45 = *((_QWORD *)a1 + 4) + 8;
        do
        {
          if (*(_QWORD *)v45)
          {
            v46 = **(_QWORD **)(*(_QWORD *)v45 + 8) + 4 * (op - 7);
            v48 = *(_DWORD *)(v46 + 248);
            v47 = (_DWORD *)(v46 + 248);
            v42 += v48;
            if (resetFlg)
            {
              *v47 = 0;
              v43 = *((_DWORD *)a1 + 10);
            }
          }
          ++v44;
          v45 += 32;
        }
        while (v44 < v43);
      }
      resetFlg = 0;
      *pHiwtr = 0;
LABEL_85:
      *pCur = v42;
      break;
    default:
      resetFlg = 1;
      break;
  }
  v52 = *((_QWORD *)a1 + 3);
  if (v52)
    xmmword_1ECD3B1D0(v52);
  return resetFlg;
}

sqlite3_uint64 sqlite3_msize(sqlite3_uint64 result)
{
  if (result)
    return (int)off_1ECD3B178(result);
  return result;
}

_QWORD *sub_1ACBBE904(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
  {
    if (*(_WORD *)(a1 + 262))
    {
      v4 = v3 + 320 * *(unsigned __int16 *)(a1 + 262);
      v5 = *(_QWORD **)(v3 + 24);
      if (!v5[102])
      {
        while (1)
        {
          if ((*(_WORD *)(v3 + 20) & 0x9000) != 0)
          {
            sub_1ACBF2A04(v3);
          }
          else
          {
            if (!*(_DWORD *)(v3 + 32))
              goto LABEL_11;
            sub_1ACBF0674(v5, *(_QWORD **)(v3 + 40));
            *(_DWORD *)(v3 + 32) = 0;
          }
          *(_WORD *)(v3 + 20) = 0;
LABEL_11:
          v3 += 64;
          if (v3 >= v4)
            goto LABEL_15;
        }
      }
      do
      {
        if (*(_DWORD *)(v3 + 32))
        {
          v6 = *(_QWORD **)(v3 + 40);
          if (v6)
            sub_1ACBE0F9C(v5, v6);
        }
        v3 += 64;
      }
      while (v3 < v4);
    }
LABEL_15:
    sub_1ACBF0674(v2, *(_QWORD **)(a1 + 152));
  }
  v7 = *(_QWORD *)(a1 + 376);
  if (v7)
  {
    do
    {
      v8 = *(_QWORD *)(v7 + 40);
      v9 = *(_QWORD **)v7;
      if (*(_QWORD *)v7)
      {
        v10 = 40 * *(int *)(v7 + 8) - 40;
        do
        {
          v11 = *((char *)v9 + v10 + 1);
          if (v11 <= -6)
            sub_1ACB693B4(v2, v11, *(_QWORD *)((char *)v9 + v10 + 16));
          v10 -= 40;
        }
        while (v10 != -40);
        sub_1ACBF0674(v2, v9);
      }
      sub_1ACBE0F9C(v2, (_QWORD *)v7);
      v7 = v8;
    }
    while (v8);
  }
  if (*(_BYTE *)(a1 + 267))
  {
    v12 = *(_QWORD *)(a1 + 128);
    if (v12)
    {
      v13 = *(_DWORD *)(a1 + 32);
      if (v13)
      {
        v14 = v12 + ((uint64_t)v13 << 6);
        v15 = *(_QWORD **)(v12 + 24);
        if (!v15[102])
        {
          while (1)
          {
            if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
            {
              sub_1ACBF2A04(v12);
            }
            else
            {
              if (!*(_DWORD *)(v12 + 32))
                goto LABEL_36;
              sub_1ACBF0674(v15, *(_QWORD **)(v12 + 40));
              *(_DWORD *)(v12 + 32) = 0;
            }
            *(_WORD *)(v12 + 20) = 0;
LABEL_36:
            v12 += 64;
            if (v12 >= v14)
              goto LABEL_40;
          }
        }
        do
        {
          if (*(_DWORD *)(v12 + 32))
          {
            v16 = *(_QWORD **)(v12 + 40);
            if (v16)
              sub_1ACBE0F9C(v15, v16);
          }
          v12 += 64;
        }
        while (v12 < v14);
      }
    }
LABEL_40:
    v17 = *(_QWORD **)(a1 + 176);
    if (v17)
      sub_1ACBF0674(v2, v17);
    v18 = *(_QWORD **)(a1 + 344);
    if (v18)
      sub_1ACBF0674(v2, v18);
  }
  v19 = *(_QWORD **)(a1 + 136);
  if (v19)
  {
    v20 = 40 * *(int *)(a1 + 144) - 40;
    do
    {
      v21 = *((char *)v19 + v20 + 1);
      if (v21 <= -6)
        sub_1ACB693B4(v2, v21, *(_QWORD *)((char *)v19 + v20 + 16));
      v20 -= 40;
    }
    while (v20 != -40);
    sub_1ACBF0674(v2, v19);
  }
  v22 = *(_QWORD **)(a1 + 320);
  if (v22)
    sub_1ACBF0674(v2, v22);
  v23 = *(_QWORD **)(a1 + 328);
  if (v23)
    sub_1ACBE0F9C(v2, v23);
  v24 = *(_QWORD **)(a1 + 336);
  if (v24)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      sub_1ACBE0F9C(v2, v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = *(_DWORD *)(a1 + 392);
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = 48;
    do
    {
      v29 = *(_QWORD **)(*(_QWORD *)(a1 + 400) + v28);
      if (v29)
      {
        sub_1ACBE0F9C(v2, v29);
        v26 = *(_DWORD *)(a1 + 392);
      }
      ++v27;
      v28 += 56;
    }
    while (v27 < v26);
  }
  v30 = *(_QWORD **)(a1 + 400);
  if (v30)
    sub_1ACBE0F9C(v2, v30);
  if (!v2[102])
  {
    **(_QWORD **)(a1 + 8) = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 16);
    if (v31)
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(a1 + 8);
  }
  return sub_1ACBF0674(v2, (_QWORD *)a1);
}

int sqlite3_vfs_unregister(sqlite3_vfs *a1)
{
  int result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *p_pNext;
  sqlite3_vfs *v7;
  sqlite3_vfs *v8;
  BOOL v9;

  result = sqlite3_initialize();
  if (result)
    return result;
  if (!(_BYTE)word_1ECD3B144)
  {
    v4 = 0;
LABEL_7:
    v5 = 1;
    if (!a1)
      goto LABEL_18;
    goto LABEL_8;
  }
  v3 = qword_1ECD3B1B0(2);
  v4 = v3;
  if (!v3)
    goto LABEL_7;
  xmmword_1ECD3B1C0(v3);
  v5 = 0;
  if (!a1)
    goto LABEL_18;
LABEL_8:
  p_pNext = &qword_1ECD3E928;
  v7 = (sqlite3_vfs *)qword_1ECD3E928;
  if ((sqlite3_vfs *)qword_1ECD3E928 != a1)
  {
    if (!qword_1ECD3E928)
      goto LABEL_18;
    do
    {
      v8 = v7;
      v7 = v7->pNext;
      if (v7)
        v9 = v7 == a1;
      else
        v9 = 1;
    }
    while (!v9);
    if (v7 != a1)
      goto LABEL_18;
    p_pNext = (uint64_t *)&v8->pNext;
  }
  *p_pNext = (uint64_t)a1->pNext;
LABEL_18:
  if ((v5 & 1) == 0)
    xmmword_1ECD3B1D0(v4);
  return 0;
}

sqlite3_mutex *__cdecl sqlite3_mutex_alloc(int a1)
{
  uint64_t v1;
  BOOL v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)(void);
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(_QWORD);
  void (*v9)(uint64_t);
  uint64_t (*v10)(_QWORD);
  int v11;

  v1 = *(_QWORD *)&a1;
  if (a1 > 1)
  {
    if (!qword_1ECD3B1B0)
    {
      v3 = word_1ECD3B144 == 0;
      if ((_BYTE)word_1ECD3B144)
        v4 = sub_1ACBE0A30;
      else
        v4 = sub_1ACBE0F70;
      xmmword_1ECD3B1A0 = v4;
      if ((_BYTE)word_1ECD3B144)
        v5 = sub_1ACBE0A38;
      else
        v5 = sub_1ACBE0F78;
      *(&xmmword_1ECD3B1A0 + 1) = v5;
      if ((_BYTE)word_1ECD3B144)
        v6 = (uint64_t (*)(void))sub_1ACBE0B68;
      else
        v6 = nullsub_4;
      off_1ECD3B1B8 = v6;
      if ((_BYTE)word_1ECD3B144)
        v7 = sub_1ACBE0CE8;
      else
        v7 = (uint64_t (*)(uint64_t))nullsub_5;
      xmmword_1ECD3B1C0 = v7;
      if ((_BYTE)word_1ECD3B144)
        v8 = sub_1ACBE0D64;
      else
        v8 = (uint64_t (*)(_QWORD))sub_1ACBE0F90;
      *(&xmmword_1ECD3B1C0 + 1) = v8;
      if ((_BYTE)word_1ECD3B144)
        v9 = sub_1ACBE0D9C;
      else
        v9 = (void (*)(uint64_t))nullsub_6;
      qword_1ECD3B1E0 = 0;
      *(_OWORD *)&xmmword_1ECD3B1D0 = (unint64_t)v9;
      __dmb(0xBu);
      v10 = (uint64_t (*)(_QWORD))sub_1ACBE0A40;
      if (v3)
        v10 = (uint64_t (*)(_QWORD))sub_1ACBE0F80;
      qword_1ECD3B1B0 = v10;
    }
    v11 = xmmword_1ECD3B1A0();
    __dmb(0xBu);
    if (v11)
      return 0;
  }
  else if (sqlite3_initialize())
  {
    return 0;
  }
  return (sqlite3_mutex *)qword_1ECD3B1B0(v1);
}

void sqlite3_mutex_free(sqlite3_mutex *a1)
{
  if (a1)
    off_1ECD3B1B8();
}

int sqlite3_mutex_try(sqlite3_mutex *a1)
{
  if (a1)
    LODWORD(a1) = (*(&xmmword_1ECD3B1C0 + 1))();
  return (int)a1;
}

int sqlite3_release_memory(int a1)
{
  return 0;
}

int sqlite3_memory_alarm(void (__cdecl *a1)(void *, sqlite3_int64, int), void *a2, sqlite3_int64 a3)
{
  return 0;
}

sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
{
  sqlite3_int64 v2;
  sqlite3_int64 v3;
  _BOOL4 v7;
  uint64_t v8;

  if (sqlite3_initialize())
    return -1;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  v2 = *((_QWORD *)&xmmword_1ECD3E930 + 1);
  if (N < 0)
  {
    v8 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      return v2;
LABEL_25:
    xmmword_1ECD3B1D0(v8);
    return v2;
  }
  v3 = qword_1ECD3E940;
  if (qword_1ECD3E940 >= N && N != 0 || qword_1ECD3E940 <= 0)
    v3 = N;
  *((_QWORD *)&xmmword_1ECD3E930 + 1) = v3;
  v7 = v3 > 0 && v3 <= qword_1ECD3E888;
  dword_1ECD3E948 = v7;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    xmmword_1ECD3B1D0(xmmword_1ECD3E930);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      goto LABEL_25;
    }
  }
  return v2;
}

sqlite3_int64 sqlite3_memory_used(void)
{
  uint64_t v0;
  sqlite3_int64 v1;

  v0 = xmmword_1ECD3E930;
  if (!(_QWORD)xmmword_1ECD3E930)
    return qword_1ECD3E888;
  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  v1 = qword_1ECD3E888;
  xmmword_1ECD3B1D0(v0);
  return v1;
}

void sqlite3_soft_heap_limit(int N)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v7;
  uint64_t v8;

  if (!sqlite3_initialize())
  {
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      v2 = xmmword_1ECD3E930;
    }
    v3 = qword_1ECD3E940;
    if (qword_1ECD3E940 >= (N & ~(N >> 31)) && N >= 1 || qword_1ECD3E940 <= 0)
      v3 = N & ~(N >> 31);
    *((_QWORD *)&xmmword_1ECD3E930 + 1) = v3;
    v7 = v3 > 0 && v3 <= qword_1ECD3E888[0];
    dword_1ECD3E948 = v7;
    if (v2)
    {
      xmmword_1ECD3B1D0(v2);
      v8 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        xmmword_1ECD3B1D0(v8);
      }
    }
  }
}

uint64_t sqlite3_hard_heap_limit64(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  _QWORD block[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (sqlite3_initialize())
    return -1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2000000000;
    v10 = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_1ACBBF198;
    block[3] = &unk_1E5C72BF8;
    block[4] = &v7;
    if (qword_1EECAD0A8 != -1)
      dispatch_once(&qword_1EECAD0A8, block);
    if (!*((_DWORD *)v8 + 6) || (v3 = getprogname(), strcmp("backupd", v3)))
    {
      sub_1ACBBE20C(30909);
      a1 = -1;
    }
    _Block_object_dispose(&v7, 8);
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  v2 = qword_1ECD3E940;
  if ((a1 & 0x8000000000000000) == 0)
  {
    qword_1ECD3E940 = a1;
    if (a1 < *((uint64_t *)&xmmword_1ECD3E930 + 1) || *((_QWORD *)&xmmword_1ECD3E930 + 1) == 0)
      *((_QWORD *)&xmmword_1ECD3E930 + 1) = a1;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1D0(xmmword_1ECD3E930);
  return v2;
}

uint64_t sub_1ACBBF198(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
{
  uint64_t v2;
  sqlite3_int64 v3;

  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  v3 = qword_1ECD3E8D8;
  if (resetFlag)
    qword_1ECD3E8D8 = qword_1ECD3E888;
  if (v2)
    xmmword_1ECD3B1D0(v2);
  return v3;
}

void *__cdecl sqlite3_malloc64(sqlite3_uint64 a1)
{
  if (sqlite3_initialize())
    return 0;
  else
    return (void *)sub_1ACB5D828(a1);
}

void *__cdecl sqlite3_realloc(void *a1, int a2)
{
  if (sqlite3_initialize())
    return 0;
  else
    return (void *)sub_1ACB6BB48((uint64_t)a1, a2 & ~(a2 >> 31));
}

void *__cdecl sqlite3_realloc64(void *a1, sqlite3_uint64 a2)
{
  if (sqlite3_initialize())
    return 0;
  else
    return (void *)sub_1ACB6BB48((uint64_t)a1, a2);
}

void sqlite3_str_vappendf(sqlite3_str *a1, const char *zFormat, va_list a3)
{
  unsigned __int8 *v3;
  sqlite3_str *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  _DWORD *v32;
  double v33;
  unsigned __int8 *v34;
  _DWORD *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  sqlite3_str *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  sqlite3_str *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  unsigned int v70;
  signed __int8 v71;
  int v72;
  double *v73;
  double v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  char **v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _DWORD **v91;
  unsigned int *v92;
  unsigned int v93;
  _QWORD *v94;
  size_t *v95;
  const void *v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  va_list v100;
  uint64_t v101;
  BOOL v102;
  const void *v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  char *v116;
  char v117;
  char v118;
  int i;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  _BYTE *v132;
  double v133;
  size_t v134;
  const void *v135;
  char v137;
  int v138;
  unsigned int v139;
  const char *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  _BOOL4 v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int *v157;
  unsigned int *v158;
  unint64_t v159;
  int v160;
  int v161;
  char v162;
  int v163;
  uint64_t v164;
  char *v165;
  char v166;
  char v167;
  int v168;
  int v169;
  char v170;
  int v171;
  int v172;
  int v173;
  sqlite3_str *v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  char v180;
  int v181;
  int v182;
  int v183;
  char v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  int v189;
  char *v190;
  char *v191;
  BOOL v192;
  unsigned int v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  sqlite3_str *v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  _BYTE *v212;
  unsigned __int8 *v213;
  char v214;
  char v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v232;
  const void *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int32x4_t v238;
  int32x4_t v239;
  uint64_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int8x16_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  char *v248;
  int8x16_t v249;
  int8x16_t v250;
  uint8x16_t v251;
  uint16x8_t v252;
  uint16x8_t v253;
  uint8x16_t v254;
  uint16x8_t v255;
  uint16x8_t v256;
  int32x4_t v257;
  int32x4_t v258;
  uint64_t v259;
  uint64_t v260;
  uint16x8_t v261;
  uint64_t v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  char *v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  _BOOL4 v279;
  int v280;
  BOOL v281;
  _BOOL4 v283;
  int v284;
  int v285;
  int64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  int v294;
  char *v295;
  char v296;
  char v297;
  uint64_t v298;
  BOOL v299;
  int v300;
  int v301;
  unsigned int v302;
  char v303;
  int v304;
  int v305;
  int v306;
  BOOL v307;
  int v308;
  char v309;
  _BYTE *v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char *v319;
  unint64_t v320;
  __int128 v321;
  char *v322;
  unint64_t v323;
  char *v324;
  uint64_t v325;
  int v326;
  unsigned int v327;
  uint64_t v328;
  double v329;
  double v330;
  int v331;
  uint64_t v332;
  size_t v333;
  size_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  char v349;
  _QWORD *v350;
  char v351;
  _QWORD *v352;
  uint64_t v353;
  char v354;
  _QWORD *v355;
  int v356;
  char *v357;
  char v358;
  char v359;
  int v360;
  char v361;
  sqlite3_str *v362;
  sqlite3_str *v363;
  unsigned int v364;
  int v365;
  int v366;
  char v367;
  double v368;
  BOOL v369;
  int v370;
  int v371;
  int v372;
  int v373;
  uint64_t v374;
  char *v375;
  char *v376;
  char v377;
  char v378;
  char v379;
  uint64_t v380;
  char v381;
  int v382;
  _BOOL4 v383;
  int v384;
  va_list v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  _OWORD v400[3];
  _DWORD __src[128];
  uint64_t v402;

  v402 = *MEMORY[0x1E0C80C00];
  v385 = a3;
  if (!a1 || (v3 = (unsigned __int8 *)zFormat) == 0)
  {
    sub_1ACBBE20C(31909);
    return;
  }
  v4 = a1;
  v381 = *((_BYTE *)a1 + 29);
  if ((v381 & 2) != 0)
  {
    v385 = a3 + 8;
    v5 = *(_QWORD *)a3;
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  *(double *)&v7 = 9.22337204e118;
  v8 = 10.0;
  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
  v10.i64[0] = 0x8080808080808080;
  v10.i64[1] = 0x8080808080808080;
  v380 = v5;
  while (2)
  {
    if (*v3 != 37)
    {
      if (!*v3)
        return;
      v11 = 0;
      do
        v12 = v3[++v11];
      while (v12 != 37 && v12 != 0);
      if ((int)v11 <= 0)
      {
        if ((_DWORD)v11)
        {
          sub_1ACBBE20C(32736);
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v5 = v380;
        }
      }
      else
      {
        v14 = *((unsigned int *)v4 + 6);
        if ((v14 + v11) >= *((_DWORD *)v4 + 4))
        {
          sub_1ACBC290C((uint64_t)v4, v3, v11);
        }
        else
        {
          *((_DWORD *)v4 + 6) = v14 + v11;
          memcpy((void *)(*((_QWORD *)v4 + 1) + v14), v3, v11);
        }
        v5 = v380;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
        v10.i64[0] = 0x8080808080808080;
        v10.i64[1] = 0x8080808080808080;
      }
      v6 = (char *)v3;
      v3 += v11;
      if (!*v3)
        return;
    }
    v17 = v3[1];
    v16 = v3 + 1;
    LOBYTE(v15) = v17;
    if (!v17)
    {
      v348 = *((unsigned int *)v4 + 6);
      if ((v348 + 1) >= *((_DWORD *)v4 + 4))
      {
        sub_1ACBC290C((uint64_t)v4, "%", 1u);
      }
      else
      {
        *((_DWORD *)v4 + 6) = v348 + 1;
        *(_BYTE *)(*((_QWORD *)v4 + 1) + v348) = 37;
      }
      return;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v382 = 0;
    v22 = 0;
    LODWORD(v23) = 0;
    v24 = 0xFFFFFFFFLL;
    while (2)
    {
      v27 = 0;
      v15 = (char)v15;
      v25 = 1;
      switch((char)v15)
      {
        case ' ':
          v382 = 32;
          goto LABEL_27;
        case '!':
          v20 = 1;
          goto LABEL_27;
        case '#':
          v21 = 1;
          goto LABEL_27;
        case '*':
          if ((v381 & 2) == 0)
          {
            v32 = v385;
            v385 += 8;
            LODWORD(v33) = *v32;
            goto LABEL_63;
          }
          v37 = *(int *)(v5 + 4);
          if (*(_DWORD *)v5 <= (int)v37)
            goto LABEL_62;
          v38 = *(_QWORD *)(v5 + 8);
          *(_DWORD *)(v5 + 4) = v37 + 1;
          v39 = *(_QWORD *)(v38 + 8 * v37);
          if (!v39)
          {
            v47 = v21;
            v48 = v20;
            v49 = v18;
            v50 = v19;
            v375 = v6;
            v51 = v4;
            v52 = v24;
            sub_1ACBBE20C(89699);
            v24 = v52;
            v4 = v51;
            v6 = v375;
            v19 = v50;
            v18 = v49;
            v20 = v48;
            v21 = v47;
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            v5 = v380;
LABEL_62:
            LODWORD(v33) = 0;
            goto LABEL_63;
          }
          v40 = *(_WORD *)(v39 + 20);
          if ((v40 & 0x24) != 0)
          {
            v33 = *(double *)v39;
            goto LABEL_63;
          }
          if ((v40 & 8) != 0)
          {
            v68 = *(double *)v39;
            if (*(double *)v39 >= -9.22337204e18)
            {
              if (v68 <= 9.22337204e18)
                *(_QWORD *)&v33 = (uint64_t)v68;
              else
                LODWORD(v33) = -1;
            }
            else
            {
              LODWORD(v33) = 0;
            }
          }
          else
          {
            if ((v40 & 0x12) == 0 || !*(_QWORD *)(v39 + 8))
              goto LABEL_62;
            v54 = v21;
            v55 = v20;
            v56 = v18;
            v57 = v19;
            v376 = v6;
            v58 = v4;
            v59 = v24;
            LODWORD(v33) = sub_1ACBF2FC0(v39);
            v24 = v59;
            v4 = v58;
            v6 = v376;
            v19 = v57;
            v18 = v56;
            v20 = v55;
            v21 = v54;
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            v5 = v380;
          }
LABEL_63:
          if (LODWORD(v33) == 0x80000000)
            v53 = 0;
          else
            v53 = -LODWORD(v33);
          if (SLODWORD(v33) < 0)
            v25 = 1;
          else
            v25 = v22;
          if (SLODWORD(v33) >= 0)
            LODWORD(v23) = LODWORD(v33);
          else
            LODWORD(v23) = v53;
          v15 = v16[1];
          if (v15 == 46 || v15 == 108)
            goto LABEL_28;
          v27 = 0;
          v15 = (char)v15;
          ++v16;
          LOBYTE(v22) = v25;
          goto LABEL_104;
        case '+':
          v382 = 43;
          goto LABEL_27;
        case ',':
          v18 = 44;
          goto LABEL_27;
        case '-':
          goto LABEL_28;
        case '.':
          v34 = v16 + 1;
          v15 = (char)v16[1];
          if (v15 == 42)
          {
            if ((v381 & 2) == 0)
            {
              v35 = v385;
              v385 += 8;
              LODWORD(v36) = *v35;
              goto LABEL_81;
            }
            v43 = *(int *)(v5 + 4);
            if (*(_DWORD *)v5 > (int)v43)
            {
              v44 = *(_QWORD *)(v5 + 8);
              *(_DWORD *)(v5 + 4) = v43 + 1;
              v45 = *(_QWORD *)(v44 + 8 * v43);
              if (v45)
              {
                v46 = *(_WORD *)(v45 + 20);
                if ((v46 & 0x24) != 0)
                {
                  v36 = *(double *)v45;
                  goto LABEL_81;
                }
                if ((v46 & 8) != 0)
                {
                  v69 = *(double *)v45;
                  if (*(double *)v45 >= -9.22337204e18)
                  {
                    if (v69 <= 9.22337204e18)
                      *(_QWORD *)&v36 = (uint64_t)v69;
                    else
                      LODWORD(v36) = -1;
                  }
                  else
                  {
                    LODWORD(v36) = 0;
                  }
LABEL_81:
                  if (LODWORD(v36) == 0x80000000)
                    v63 = -1;
                  else
                    v63 = -LODWORD(v36);
                  if (SLODWORD(v36) >= 0)
                    v24 = LODWORD(v36);
                  else
                    v24 = v63;
                  v64 = (char)v16[2];
                  v16 += 2;
                  v15 = v64;
                  goto LABEL_88;
                }
                if ((v46 & 0x12) != 0 && *(_QWORD *)(v45 + 8))
                {
                  v65 = v20;
                  v66 = v18;
                  v67 = v19;
                  LODWORD(v36) = sub_1ACBF2FC0(v45);
                  v19 = v67;
                  v18 = v66;
                  v20 = v65;
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  v5 = v380;
                  goto LABEL_81;
                }
              }
              else
              {
                v60 = v20;
                v61 = v18;
                v62 = v19;
                sub_1ACBBE20C(89699);
                v19 = v62;
                v18 = v61;
                v20 = v60;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v5 = v380;
              }
            }
            LODWORD(v36) = 0;
            goto LABEL_81;
          }
          if ((v15 - 48) > 9)
          {
            v41 = 0;
          }
          else
          {
            v41 = 0;
            do
            {
              v41 = v15 + 10 * v41 - 48;
              v42 = (char)*++v34;
              v15 = v42;
            }
            while ((v42 - 48) < 0xA);
          }
          v24 = v41 & 0x7FFFFFFF;
          v16 = v34;
LABEL_88:
          if (v15 == 108)
          {
            --v16;
LABEL_27:
            v25 = v22;
LABEL_28:
            v26 = *++v16;
            LOBYTE(v15) = v26;
            v22 = v25;
            if (!v26)
              return;
            continue;
          }
          v27 = 0;
LABEL_104:
          v70 = 0;
          switch(v15)
          {
            case '%':
              v70 = 18;
              goto LABEL_133;
            case 'E':
              v70 = 14;
              goto LABEL_133;
            case 'G':
              v70 = 15;
              goto LABEL_133;
            case 'Q':
              v70 = 5;
              goto LABEL_133;
            case 'T':
              v70 = 20;
              goto LABEL_133;
            case 'X':
              v70 = 11;
              goto LABEL_133;
            case 'c':
              v70 = 7;
              goto LABEL_133;
            case 'd':
              goto LABEL_133;
            case 'e':
              v70 = 13;
              goto LABEL_133;
            case 'f':
              v70 = 12;
              goto LABEL_133;
            case 'g':
              v70 = 2;
              goto LABEL_133;
            case 'i':
              v70 = 16;
              goto LABEL_133;
            case 'n':
              v70 = 17;
              goto LABEL_133;
            case 'o':
              v70 = 8;
              goto LABEL_133;
            case 'p':
              v70 = 19;
              goto LABEL_133;
            case 'q':
              v70 = 4;
              goto LABEL_133;
            case 's':
              v70 = 1;
              goto LABEL_133;
            case 'u':
              v70 = 9;
              goto LABEL_133;
            case 'w':
              v70 = 6;
              goto LABEL_133;
            case 'x':
              v70 = 10;
              goto LABEL_133;
            case 'z':
              v70 = 3;
              goto LABEL_133;
            default:
              if (v15 == 83)
              {
                v70 = 21;
              }
              else
              {
                if (v15 != 114)
                  return;
                v70 = 22;
              }
              break;
          }
          break;
        case '0':
          v19 = 1;
          goto LABEL_27;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          v28 = (char)v15 - 48;
          v29 = v16 + 1;
          v15 = (char)v16[1];
          if ((v15 - 48) > 9)
          {
            v31 = v16[1];
          }
          else
          {
            do
            {
              v28 = v15 + 10 * v28 - 48;
              v30 = (char)*++v29;
              v15 = v30;
            }
            while ((v30 - 48) < 0xA);
            v31 = v15;
            v16 = v29 - 1;
          }
          LODWORD(v23) = v28 & 0x7FFFFFFF;
          if (v31 == 46 || v31 == 108)
            goto LABEL_27;
          v27 = 0;
          v16 = v29;
          goto LABEL_104;
        case 'l':
          v15 = v16[1];
          if (v15 == 108)
          {
            v71 = v16[2];
            v16 += 2;
            v27 = 2;
            v15 = v71;
          }
          else
          {
            v27 = 1;
            ++v16;
            v15 = (char)v15;
          }
          goto LABEL_104;
        default:
          goto LABEL_104;
      }
      break;
    }
LABEL_133:
    v72 = byte_1ACCB62A2[6 * v70 + 3];
    switch(byte_1ACCB62A2[6 * v70 + 3])
    {
      case 0u:
      case 0xFu:
        goto LABEL_190;
      case 1u:
      case 2u:
      case 3u:
        v377 = v21;
        v368 = *(double *)&v7;
        memset(v400, 0, sizeof(v400));
        if ((v381 & 2) != 0)
        {
          v81 = *(int *)(v5 + 4);
          v74 = 0.0;
          if (*(_DWORD *)v5 > (int)v81)
          {
            v82 = *(_QWORD *)(v5 + 8);
            *(_DWORD *)(v5 + 4) = v81 + 1;
            v83 = *(_QWORD *)(v82 + 8 * v81);
            if (v83)
            {
              v84 = *(_WORD *)(v83 + 20);
              if ((v84 & 8) != 0)
              {
                v74 = *(double *)v83;
              }
              else if ((v84 & 0x24) != 0)
              {
                v74 = (double)*(uint64_t *)v83;
              }
              else if ((v84 & 0x12) != 0)
              {
                v359 = v20;
                v372 = v18;
                v271 = v19;
                v363 = v4;
                v366 = v72;
                v272 = v24;
                v273 = sub_1ACBF2F88(v83);
                LODWORD(v24) = v272;
                v4 = v363;
                v72 = v366;
                LODWORD(v19) = v271;
                LODWORD(v18) = v372;
                LOBYTE(v20) = v359;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v74 = v273;
              }
            }
            else
            {
              v358 = v20;
              v370 = v18;
              v160 = v19;
              v362 = v4;
              v365 = v72;
              v161 = v24;
              sub_1ACBBE20C(89734);
              LODWORD(v24) = v161;
              v4 = v362;
              v72 = v365;
              LODWORD(v19) = v160;
              LODWORD(v18) = v370;
              LOBYTE(v20) = v358;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            }
          }
        }
        else
        {
          v73 = (double *)v385;
          v385 += 8;
          v74 = *v73;
        }
        if ((int)v24 >= 100000000)
          v85 = 100000000;
        else
          v85 = v24;
        if ((int)v24 < 0)
          v85 = 6;
        if (v72 == 3)
        {
          v86 = v85;
        }
        else if (v72 == 1)
        {
          v86 = -v85;
        }
        else
        {
          v86 = v85 + 1;
        }
        if ((_BYTE)v20)
          v115 = 26;
        else
          v115 = 16;
        BYTE1(v400[0]) = 0;
        *(_QWORD *)&v400[1] = (char *)&v400[1] + 8;
        if (v74 >= 0.0)
        {
          LOBYTE(v400[0]) = 43;
          if (v74 == 0.0)
          {
            *(_QWORD *)((char *)v400 + 4) = 0x100000001;
            v116 = "0";
            *(_QWORD *)&v400[1] = "0";
            *(double *)&v7 = v368;
            goto LABEL_519;
          }
        }
        else
        {
          LOBYTE(v400[0]) = 45;
          v74 = -v74;
        }
        if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
        {
          if (v74 == INFINITY)
            v117 = 1;
          else
            v117 = 2;
          BYTE1(v400[0]) = v117;
          *(_QWORD *)((char *)v400 + 4) = 0;
          v116 = (char *)&v400[1] + 8;
          *(double *)&v7 = v368;
          v118 = v21;
LABEL_521:
          if (v117 == 2)
          {
            v80 = 0;
            if ((_DWORD)v19)
              v6 = "null";
            else
              v6 = "NaN";
            if ((_DWORD)v19)
              LODWORD(v90) = 4;
            else
              LODWORD(v90) = 3;
            goto LABEL_697;
          }
          if (!v117)
          {
            v276 = DWORD2(v400[0]);
            goto LABEL_532;
          }
          if ((_DWORD)v19)
          {
            *v116 = 57;
            *(_QWORD *)((char *)v400 + 4) = 0x3E800000001;
            v276 = 1000;
LABEL_532:
            if (LOBYTE(v400[0]) == 45)
              v277 = 45;
            else
              v277 = v382;
            v278 = v276 - 1;
            v279 = v70 == 2;
            if (v70 == 15)
              v279 = 1;
            if (v85 <= 0)
              v279 = 0;
            v280 = v85 - v279;
            if (v70 == 15 || (v281 = v20, v70 == 2))
            {
              v281 = v118 == 0;
              v283 = v276 < -3 || v278 > v280;
              if (v283)
                LOBYTE(v72) = 2;
              else
                LOBYTE(v72) = 1;
              if (v283)
                v284 = 0;
              else
                v284 = v276 - 1;
              v280 -= v284;
            }
            v364 = v70;
            v367 = v72;
            if (v72 == 2)
              v285 = 0;
            else
              v285 = v276 - 1;
            v286 = (int)v23;
            v287 = (int)v23
                 + (uint64_t)v280
                 + (v285 & ~(v285 >> 31))
                 + 15
                 + (v285 + 2) / 3uLL;
            if (v285 < 1)
              v287 = (int)v23 + (uint64_t)v280 + (v285 & ~(v285 >> 31)) + 15;
            if ((_DWORD)v18)
              v288 = v287;
            else
              v288 = (int)v23 + (uint64_t)v280 + (v285 & ~(v285 >> 31)) + 15;
            v384 = v277;
            v369 = v281;
            if (v288 < 513)
            {
              v292 = 0;
              v6 = (char *)__src;
            }
            else
            {
              if (*((_BYTE *)v4 + 28))
                return;
              if (v288 > (unint64_t)*((unsigned int *)v4 + 4))
              {
                v289 = *((unsigned int *)v4 + 5);
                if (v288 > v289)
                {
                  *((_BYTE *)v4 + 28) = 18;
                  if ((_DWORD)v289)
                  {
                    v354 = *((_BYTE *)v4 + 29);
                    if ((v354 & 4) != 0)
                    {
                      v355 = (_QWORD *)*((_QWORD *)v4 + 1);
                      if (v355)
                      {
                        sub_1ACBE0F9C(*(_QWORD **)v4, v355);
                        v354 = *((_BYTE *)v4 + 29);
                      }
                      *((_BYTE *)v4 + 29) = v354 & 0xFB;
                    }
LABEL_764:
                    *((_DWORD *)v4 + 4) = 0;
                    *((_DWORD *)v4 + 6) = 0;
                    *((_QWORD *)v4 + 1) = 0;
                  }
                  goto LABEL_765;
                }
              }
              v356 = v278;
              v360 = v19;
              v373 = v18;
              v290 = v20;
              if (*(_QWORD *)v4)
                v291 = sub_1ACBE1124(*(_QWORD *)v4, v288);
              else
                v291 = sub_1ACB5D828(v288);
              v6 = (char *)v291;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              LOBYTE(v20) = v290;
              LODWORD(v18) = v373;
              LODWORD(v19) = v360;
              v292 = v291;
              LOBYTE(v72) = v367;
              v277 = v384;
              v281 = v369;
              v278 = v356;
              if (!v291)
                goto LABEL_753;
            }
            v293 = v6;
            if (v277)
            {
              *v6 = v277;
              v293 = v6 + 1;
            }
            v374 = v292;
            v294 = 0;
            if (v285 < 0)
            {
              *v293++ = 48;
            }
            else
            {
              do
              {
                v295 = v293;
                if (v294 >= SDWORD1(v400[0]))
                  v296 = 48;
                else
                  v296 = *(_BYTE *)(*(_QWORD *)&v400[1] + v294++);
                *v293++ = v296;
                if ((_DWORD)v18 && v285 >= 2 && 3 * (v285 / 3u) == v285)
                {
                  v293 = v295 + 2;
                  v295[1] = 44;
                }
                v192 = v285-- <= 0;
              }
              while (!v192);
              v278 = -1;
            }
            v297 = v377 | v20 | (v280 > 0);
            if (v297)
              *v293++ = 46;
            if (v278 <= -2)
            {
              LODWORD(v298) = v280 - 1;
              if (v280 >= 1)
              {
                v379 = v297;
                v299 = v298 >= -2 - v278;
                v300 = v298 - (-2 - v278);
                if (v298 >= -2 - v278)
                  v298 = (-2 - v278);
                else
                  v298 = v298;
                v357 = &v293[v298 + 1];
                if (v299)
                  v280 = v300;
                else
                  v280 = 0;
                v361 = v20;
                v301 = v19;
                memset(v293, 48, v298 + 1);
                v297 = v379;
                v281 = v369;
                v277 = v384;
                LOBYTE(v72) = v367;
                LODWORD(v19) = v301;
                LOBYTE(v20) = v361;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v293 = v357;
              }
            }
            if (v280 >= 1)
            {
              v302 = v280 + 1;
              do
              {
                if (v294 < SDWORD1(v400[0]))
                  v303 = *(_BYTE *)(*(_QWORD *)&v400[1] + v294++);
                else
                  v303 = 48;
                *v293++ = v303;
                --v302;
              }
              while (v302 > 1);
            }
            if (v281)
            {
              v80 = v374;
              if (v297)
              {
                --v293;
                while (1)
                {
                  v304 = *v293;
                  if (v304 != 48)
                    break;
                  *v293-- = 0;
                }
                if (v304 == 46)
                {
                  if ((_BYTE)v20)
                  {
                    v293[1] = 48;
                    v293 += 2;
                  }
                  else
                  {
                    *v293 = 0;
                  }
                }
                else
                {
                  ++v293;
                }
              }
            }
            else
            {
              v80 = v374;
            }
            if (v72 == 2)
            {
              v305 = DWORD2(v400[0]);
              *v293 = a0123456789abcd_0[byte_1ACCB62A2[6 * v364 + 4]];
              v306 = 1 - v305;
              v307 = __OFSUB__(v305, 1);
              v308 = v305 - 1;
              if (v308 < 0 != v307)
                v309 = 45;
              else
                v309 = 43;
              if (v308 < 0 != v307)
                v308 = v306;
              v293[1] = v309;
              if (v308 < 0x64)
              {
                v310 = v293 + 2;
              }
              else
              {
                v310 = v293 + 3;
                v293[2] = v308 / 0x64u + 48;
                v308 %= 0x64u;
              }
              *v310 = (v308 / 0xAu) | 0x30;
              v293 = v310 + 2;
              v310[1] = (v308 % 0xAu) | 0x30;
            }
            *v293 = 0;
            LODWORD(v90) = (_DWORD)v293 - (_DWORD)v6;
            if ((_DWORD)v19)
            {
              if (!(_BYTE)v22)
              {
                v311 = (_DWORD)v23 - v90;
                if ((int)v23 > (int)v90)
                {
                  if ((v90 & 0x80000000) != 0)
                    goto LABEL_637;
                  if ((int)v23 >= (uint64_t)v311)
                    v312 = v311;
                  else
                    v312 = (int)v23;
                  v313 = (int)v23 - v312 + 1;
                  if (v313 >= 8)
                  {
                    v315 = (int)v23 >= (uint64_t)v311 ? v311 : (int)v23;
                    v316 = (int)v23 - v315;
                    if (&v6[(int)v23 - v316] <= &v6[(int)v23]
                      && &v6[(int)v23 - (uint64_t)v311 - v316] <= &v6[(int)v23 - (uint64_t)v311]
                      && (unint64_t)(v311 + 31) >= 0x20)
                    {
                      if (v313 >= 0x20)
                      {
                        v317 = v313 & 0xFFFFFFFFFFFFFFE0;
                        v319 = &v6[(int)v23 - 15];
                        v320 = v313 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v321 = *(_OWORD *)&v319[-v311];
                          *((_OWORD *)v319 - 1) = *(_OWORD *)&v319[-v311 - 16];
                          *(_OWORD *)v319 = v321;
                          v319 -= 32;
                          v320 -= 32;
                        }
                        while (v320);
                        if (v313 == v317)
                          goto LABEL_637;
                        if ((v313 & 0x18) != 0)
                          goto LABEL_660;
                        v286 = (int)v23 - v317;
                      }
                      else
                      {
                        v317 = 0;
LABEL_660:
                        v322 = &v6[(int)v23 - v317];
                        v323 = v317 - (v313 & 0xFFFFFFFFFFFFFFF8);
                        v324 = v322 - 7;
                        do
                        {
                          *(_QWORD *)v324 = *(_QWORD *)&v324[-v311];
                          v324 -= 8;
                          v323 += 8;
                        }
                        while (v323);
                        v286 = (int)v23 - (v313 & 0xFFFFFFFFFFFFFFF8);
                        if (v313 == (v313 & 0xFFFFFFFFFFFFFFF8))
                        {
LABEL_637:
                          if ((_DWORD)v23 == (_DWORD)v90)
                          {
                            LODWORD(v90) = (_DWORD)v23;
                          }
                          else
                          {
                            if (v277)
                              v314 = v6 + 1;
                            else
                              v314 = v6;
                            memset(v314, 48, (~(_DWORD)v293 + (_DWORD)v23 + (_DWORD)v6) + 1);
                            v10.i64[0] = 0x8080808080808080;
                            v10.i64[1] = 0x8080808080808080;
                            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                            LODWORD(v90) = (_DWORD)v23;
                          }
                          goto LABEL_697;
                        }
                      }
                    }
                  }
                  do
                  {
                    v6[v286] = v6[v286 - v311];
                    v192 = v286-- <= v311;
                  }
                  while (!v192);
                  goto LABEL_637;
                }
              }
            }
            goto LABEL_697;
          }
          strcpy((char *)__src, "-Inf");
          if (LOBYTE(v400[0]) != 45)
          {
            v6 = (char *)__src + 1;
            if (!v382)
              goto LABEL_573;
            LOBYTE(__src[0]) = v382;
          }
          v6 = (char *)__src;
LABEL_573:
          v80 = 0;
          LODWORD(v90) = strlen(v6) & 0x3FFFFFFF;
LABEL_674:
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          goto LABEL_697;
        }
        if (byte_1ECD3B14A)
        {
          if (v74 >= 1.0e19)
          {
            for (i = 0; v74 >= 1.0e119; v74 = v74 * 1.0e-100)
              i += 100;
            for (; v74 >= 1.0e29; v74 = v74 * 1.0e-10)
              i += 10;
            while (v74 >= 1.0e19)
            {
              ++i;
              v74 = v74 * 0.1;
            }
          }
          else
          {
            for (i = 0; v74 < 1.0e-97; v74 = v74 * 1.0e100)
              i -= 100;
            while (v74 < 10000000.0)
            {
              i -= 10;
              v74 = v74 * 1.0e10;
            }
            for (; v74 < 1.0e17; v74 = v74 * v8)
              --i;
          }
          v159 = (unint64_t)v74;
        }
        else
        {
          v387 = v74;
          v386 = 0.0;
          if (v74 <= 9.22337204e18)
          {
            i = 0;
            if (v74 >= 9.22337204e-83)
            {
              v133 = 0.0;
            }
            else
            {
              do
              {
                i -= 100;
                v395 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999995e99
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999995e99
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 5.15323793e91;
                v389 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999995e99
                     - v395
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999995e99
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 5.15323793e91
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 5.15323793e91
                     + v386 * 1.0e100
                     + v387 * -1.59028911e83;
                v387 = v395 + v389;
                v74 = v395 + v389;
                v133 = v389 + v395 - (v395 + v389);
                v386 = v133;
              }
              while (v395 + v389 < 9.22337204e-83);
            }
            if (v74 < 92233720.4)
            {
              do
              {
                i -= 10;
                v398 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 1.0e10
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 1.0e10
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0;
                v392 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 1.0e10
                     - v398
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 1.0e10
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 0.0
                     + v386 * 1.0e10
                     + v387 * 0.0;
                v387 = v398 + v392;
                v74 = v398 + v392;
                v133 = v392 + v398 - (v398 + v392);
                v386 = v133;
              }
              while (v398 + v392 < 92233720.4);
            }
            while (v74 < 9.22337204e17)
            {
              --i;
              v399 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 10.0
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 10.0
                   + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0;
              v8 = 10.0;
              v393 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 10.0
                   - v399
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 10.0
                   + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 0.0
                   + v386 * 10.0
                   + v387 * 0.0;
              v387 = v399 + v393;
              v74 = v399 + v393;
              v133 = v393 + v399 - (v399 + v393);
              v386 = v133;
            }
          }
          else
          {
            i = 0;
            if (v74 <= v368)
            {
              v133 = 0.0;
            }
            else
            {
              do
              {
                i += 100;
                v394 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999999e-101
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999999e-101
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 1.18108707e-109;
                v388 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999999e-101
                     - v394
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999999e-101
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 1.18108707e-109
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 1.18108707e-109
                     + v386 * 1.0e-100
                     + v387 * -1.99918998e-117;
                v387 = v394 + v388;
                v74 = v394 + v388;
                v133 = v388 + v394 - (v394 + v388);
                v386 = v133;
              }
              while (v394 + v388 > v368);
            }
            if (v74 > 9.22337204e28)
            {
              do
              {
                i += 10;
                v396 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999996e-11
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999996e-11
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 3.99580284e-19;
                v390 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 9.99999996e-11
                     - v396
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 9.99999996e-11
                     + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 3.99580284e-19
                     + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 3.99580284e-19
                     + v386 * 1.0e-10
                     + v387 * -3.64321973e-27;
                v387 = v396 + v390;
                v74 = v396 + v390;
                v133 = v390 + v396 - (v396 + v390);
                v386 = v133;
              }
              while (v396 + v390 > 9.22337204e28);
            }
            while (v74 > 9.22337204e18)
            {
              ++i;
              v397 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0999999996
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 0.0999999996
                   + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 3.72529035e-10;
              v391 = COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 0.0999999996
                   - v397
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 0.0999999996
                   + COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000) * 3.72529035e-10
                   + (v387 - COERCE_DOUBLE(*(_QWORD *)&v74 & 0xFFFFFFFFFC000000)) * 3.72529035e-10
                   + v386 * 0.1
                   + v387 * -5.55111512e-18;
              v387 = v397 + v391;
              v74 = v397 + v391;
              v133 = v391 + v397 - (v397 + v391);
              v386 = v133;
            }
          }
          v159 = (unint64_t)v74 - (unint64_t)-v133;
          if (v133 >= 0.0)
            v159 = (unint64_t)v133 + (unint64_t)v74;
        }
        *(double *)&v7 = v368;
        if (v159)
        {
          v262 = 47;
          do
          {
            *((_BYTE *)v400 + v262--) = (v159 % 0xA) | 0x30;
            v192 = v159 > 9;
            v159 /= 0xAuLL;
          }
          while (v192);
          v263 = v262 - 24;
        }
        else
        {
          v263 = 23;
        }
        v264 = 23 - v263;
        v265 = 23 - v263 + i;
        DWORD1(v400[0]) = 23 - v263;
        DWORD2(v400[0]) = v265;
        if (v86 < 0 && (v86 = v265 - v86) == 0)
        {
          v270 = v263;
          if (*((char *)&v400[1] + v263 + 9) < 53)
            goto LABEL_514;
          --v263;
          *((_BYTE *)&v400[1] + v270 + 8) = 48;
          *(int32x2_t *)((char *)v400 + 4) = vadd_s32(*(int32x2_t *)((char *)v400 + 4), (int32x2_t)0x100000001);
          v264 = DWORD1(v400[0]);
          v86 = 1;
          if (SDWORD1(v400[0]) > v115)
          {
LABEL_500:
            v266 = v263;
            v267 = (char *)&v400[1] + v263 + 9;
            if (v86 >= v115)
              v264 = v115;
            else
              v264 = v86;
            DWORD1(v400[0]) = v264;
            if (v267[v264] >= 53)
            {
              v268 = v264 - 1;
              while (1)
              {
                v269 = ++v267[v268];
                if (v269 < 58)
                  break;
                v267[v268--] = 48;
                if (v268 == -1)
                {
                  --v263;
                  *(_BYTE *)(*(_QWORD *)&v400[1] + v266) = 49;
                  *(int32x2_t *)((char *)v400 + 4) = vadd_s32(*(int32x2_t *)((char *)v400 + 4), (int32x2_t)0x100000001);
                  v264 = DWORD1(v400[0]);
                  goto LABEL_514;
                }
              }
              v264 = DWORD1(v400[0]);
            }
LABEL_514:
            v116 = (char *)&v400[1] + v263 + 9;
            *(_QWORD *)&v400[1] = v116;
            if (v264 >= 1)
            {
              v274 = v264;
              v118 = v21;
              do
              {
                v275 = v274 - 1;
                if (v116[(v274 - 1)] != 48)
                  break;
                DWORD1(v400[0]) = --v274;
              }
              while ((unint64_t)(v275 + 1) > 1);
              goto LABEL_520;
            }
LABEL_519:
            v118 = v21;
LABEL_520:
            v117 = BYTE1(v400[0]);
            goto LABEL_521;
          }
        }
        else
        {
          if (v86 < 1)
            goto LABEL_514;
          if (v264 > v115)
            goto LABEL_500;
        }
        if (v86 >= v264)
          goto LABEL_514;
        goto LABEL_500;
      case 4u:
        if ((v381 & 2) != 0)
          goto LABEL_694;
        v80 = 0;
        LODWORD(v23) = 0;
        LODWORD(v90) = 0;
        v91 = (_DWORD **)v385;
        v385 += 8;
        **v91 = *((_DWORD *)v4 + 6);
        goto LABEL_697;
      case 5u:
      case 6u:
        if ((v381 & 2) == 0)
        {
          v78 = (char **)v385;
          v385 += 8;
          v6 = *v78;
          goto LABEL_143;
        }
        v111 = *(int *)(v5 + 4);
        if (*(_DWORD *)v5 <= (int)v111)
          goto LABEL_320;
        v112 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v111 + 1;
        v113 = *(_QWORD *)(v112 + 8 * v111);
        if (!v113)
          goto LABEL_320;
        v114 = *(unsigned __int16 *)(v113 + 20);
        if ((~v114 & 0x202) != 0 || *(_BYTE *)(v113 + 22) != 1)
        {
          if ((v114 & 1) != 0)
          {
LABEL_320:
            v80 = 0;
            v6 = &byte_1ACCBEAEE;
            v79.i64[0] = 0x100000001;
            v79.i64[1] = 0x100000001;
LABEL_321:
            if ((v24 & 0x80000000) != 0)
            {
              v167 = v20;
              goto LABEL_332;
            }
            if (!(_BYTE)v20)
            {
              if (!(_DWORD)v24)
                goto LABEL_696;
              v90 = 0;
              do
              {
                if (!v6[v90])
                  goto LABEL_697;
                ++v90;
              }
              while (v24 != v90);
              LODWORD(v90) = v24;
              goto LABEL_697;
            }
            v165 = v6;
            if ((_DWORD)v24)
            {
              do
              {
                if (!*v165)
                  break;
                if (*v165 < 0xC0u)
                {
                  ++v165;
                }
                else
                {
                  do
                    v166 = *++v165;
                  while ((v166 & 0xC0) == 0x80);
                }
                v192 = (int)v24 <= 1;
                LODWORD(v24) = v24 - 1;
              }
              while (!v192);
            }
            LODWORD(v90) = (_DWORD)v165 - (_DWORD)v6;
LABEL_454:
            if ((int)v23 < 1 || (int)v90 < 1)
              goto LABEL_697;
            if (v90 < 8 || (v234 = v90 - 1, HIDWORD(v234)))
            {
              v236 = v90;
            }
            else
            {
              if (v90 < 0x20)
              {
                v235 = 0;
LABEL_470:
                v236 = v90 & 7;
                v257 = 0uLL;
                v258 = (int32x4_t)v23;
                v259 = ~v235 + v90;
                v260 = v235 - (v90 & 0xFFFFFFF8);
                do
                {
                  v261 = vmovl_u8((uint8x8_t)vceq_s8(vrev64_s8(vand_s8(*(int8x8_t *)&v6[v259 - 7], (int8x8_t)0xC0C0C0C0C0C0C0C0)), (int8x8_t)0x8080808080808080));
                  v257 = vaddq_s32(v257, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v261), v79));
                  v258 = vaddq_s32(v258, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v261.i8), v79));
                  v259 -= 8;
                  v260 += 8;
                }
                while (v260);
                LODWORD(v23) = vaddvq_s32(vaddq_s32(v258, v257));
                if ((v90 & 0xFFFFFFF8) == v90)
                  goto LABEL_697;
                goto LABEL_461;
              }
              v235 = v90 & 0xFFFFFFE0;
              v238 = 0uLL;
              v239 = (int32x4_t)v23;
              v240 = v235;
              v241 = 0uLL;
              v242 = 0uLL;
              v243 = 0uLL;
              v244.i64[0] = 0x100000001;
              v244.i64[1] = 0x100000001;
              v245 = 0uLL;
              v246 = 0uLL;
              v247 = 0uLL;
              do
              {
                v248 = &v6[v234];
                v249 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v248 - 15), v9));
                v250 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v248 - 31), v9));
                v251 = (uint8x16_t)vceqq_s8(vextq_s8(v249, v249, 8uLL), v10);
                v252 = vmovl_u8(*(uint8x8_t *)v251.i8);
                v253 = vmovl_high_u8(v251);
                v254 = (uint8x16_t)vceqq_s8(vextq_s8(v250, v250, 8uLL), v10);
                v255 = vmovl_u8(*(uint8x8_t *)v254.i8);
                v256 = vmovl_high_u8(v254);
                v242 = vaddq_s32(v242, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v253), v244));
                v241 = vaddq_s32(v241, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v253.i8), v244));
                v238 = vaddq_s32(v238, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v252), v244));
                v239 = vaddq_s32(v239, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v252.i8), v244));
                v247 = vaddq_s32(v247, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v256), v244));
                v246 = vaddq_s32(v246, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v256.i8), v244));
                v245 = vaddq_s32(v245, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v255), v244));
                v243 = vaddq_s32(v243, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v255.i8), v244));
                v234 -= 32;
                v240 -= 32;
              }
              while (v240);
              LODWORD(v23) = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v243, v239), vaddq_s32(v246, v241)), vaddq_s32(vaddq_s32(v245, v238), vaddq_s32(v247, v242))));
              if (v235 == v90)
                goto LABEL_697;
              v79.i64[0] = 0x100000001;
              v79.i64[1] = 0x100000001;
              if ((v90 & 0x18) != 0)
                goto LABEL_470;
              v236 = v90 & 0x1F;
            }
LABEL_461:
            v237 = v236 + 1;
            do
            {
              if ((v6[(v237 - 2)] & 0xC0) == 0x80)
                LODWORD(v23) = (_DWORD)v23 + 1;
              --v237;
            }
            while (v237 > 1);
            goto LABEL_697;
          }
          v162 = v20;
          v163 = v24;
          v164 = sub_1ACBF2B64((int *)v113, 1);
          LODWORD(v24) = v163;
          LOBYTE(v20) = v162;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v6 = (char *)v164;
          v72 = 5;
        }
        else
        {
          v6 = *(char **)(v113 + 8);
          v72 = 5;
        }
LABEL_143:
        v79.i64[0] = 0x100000001;
        v79.i64[1] = 0x100000001;
        if (v6)
        {
          if (v72 == 6)
          {
            if (!*((_DWORD *)v4 + 6) && *((_DWORD *)v4 + 5) && !(_DWORD)v23 && (v24 & 0x80000000) != 0)
            {
              if (*((_BYTE *)v4 + 28))
              {
                v167 = v20;
                v80 = (uint64_t)v6;
LABEL_332:
                LODWORD(v90) = strlen(v6) & 0x7FFFFFFF;
                v79.i64[0] = 0x100000001;
                v79.i64[1] = 0x100000001;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                if (v167)
                  goto LABEL_454;
                goto LABEL_697;
              }
              *((_QWORD *)v4 + 1) = v6;
              v346 = *(_QWORD *)v4;
              if (*(_QWORD *)v4 && *(_QWORD *)(v346 + 520) > (unint64_t)v6)
              {
                if (*(_QWORD *)(v346 + 496) <= (unint64_t)v6)
                {
                  v347 = 128;
                  goto LABEL_739;
                }
                if (*(_QWORD *)(v346 + 504) <= (unint64_t)v6)
                {
                  v347 = *(unsigned __int16 *)(v346 + 438);
                  goto LABEL_739;
                }
              }
              v347 = off_1ECD3B178(v6);
LABEL_739:
              *((_DWORD *)v4 + 4) = v347;
              v80 = 0;
              LODWORD(v23) = 0;
              LODWORD(v90) = 0;
              *((_DWORD *)v4 + 6) = strlen(v6) & 0x7FFFFFFF;
              *((_BYTE *)v4 + 29) |= 4u;
              goto LABEL_674;
            }
            v80 = (uint64_t)v6;
          }
          else
          {
            v80 = 0;
          }
        }
        else
        {
          v80 = 0;
          v6 = &byte_1ACCBEAEE;
        }
        goto LABEL_321;
      case 7u:
        v80 = 0;
        LOBYTE(__src[0]) = 37;
        v6 = (char *)__src;
        LODWORD(v90) = 1;
        goto LABEL_697;
      case 8u:
        if ((v381 & 2) == 0)
        {
          v92 = (unsigned int *)v385;
          v385 += 8;
          v93 = *v92;
          if (v93 <= 0x7F)
          {
            LOBYTE(__src[0]) = v93;
LABEL_421:
            LODWORD(v90) = 1;
            v79.i64[0] = 0x100000001;
            v79.i64[1] = 0x100000001;
            goto LABEL_422;
          }
          v79.i64[0] = 0x100000001;
          v79.i64[1] = 0x100000001;
          if (v93 <= 0x7FF)
          {
            LOBYTE(__src[0]) = (v93 >> 6) | 0xC0;
            BYTE1(__src[0]) = v93 & 0x3F | 0x80;
            LODWORD(v90) = 2;
            goto LABEL_422;
          }
          if (!HIWORD(v93))
          {
            LOBYTE(__src[0]) = (v93 >> 12) | 0xE0;
            BYTE1(__src[0]) = (v93 >> 6) & 0x3F | 0x80;
            BYTE2(__src[0]) = v93 & 0x3F | 0x80;
            LODWORD(v90) = 3;
            goto LABEL_422;
          }
          LOBYTE(__src[0]) = (v93 >> 18) & 7 | 0xF0;
          BYTE1(__src[0]) = (v93 >> 12) & 0x3F | 0x80;
          BYTE2(__src[0]) = (v93 >> 6) & 0x3F | 0x80;
          HIBYTE(__src[0]) = v93 & 0x3F | 0x80;
          goto LABEL_655;
        }
        v128 = *(int *)(v5 + 4);
        if (*(_DWORD *)v5 <= (int)v128)
          goto LABEL_420;
        v129 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v128 + 1;
        v130 = *(_QWORD *)(v129 + 8 * v128);
        if (!v130)
          goto LABEL_420;
        v131 = *(unsigned __int16 *)(v130 + 20);
        if ((~v131 & 0x202) != 0 || *(_BYTE *)(v130 + 22) != 1)
        {
          if ((v131 & 1) != 0)
            goto LABEL_420;
          v217 = v24;
          v132 = (_BYTE *)sub_1ACBF2B64((int *)v130, 1);
          LODWORD(v24) = v217;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
        }
        else
        {
          v132 = *(_BYTE **)(v130 + 8);
        }
        if (!v132)
        {
LABEL_420:
          LOBYTE(__src[0]) = 0;
          goto LABEL_421;
        }
        LOBYTE(__src[0]) = *v132;
        v79.i64[0] = 0x100000001;
        v79.i64[1] = 0x100000001;
        if (LOBYTE(__src[0]) >= 0xC0u && (v132[1] & 0xC0) == 0x80)
        {
          BYTE1(__src[0]) = v132[1];
          if ((v132[2] & 0xC0) == 0x80)
          {
            BYTE2(__src[0]) = v132[2];
            if ((v132[3] & 0xC0) == 0x80)
            {
              HIBYTE(__src[0]) = v132[3];
LABEL_655:
              LODWORD(v90) = 4;
              goto LABEL_422;
            }
            LODWORD(v90) = 3;
          }
          else
          {
            LODWORD(v90) = 2;
          }
        }
        else
        {
          LODWORD(v90) = 1;
        }
LABEL_422:
        if ((int)v24 >= 2)
        {
          v218 = v24 - 1;
          LODWORD(v23) = (_DWORD)v23 - (v24 - 1);
          if ((int)v23 >= 2 && !(_BYTE)v22)
          {
            v219 = ((_DWORD)v23 - 1);
            if ((unint64_t)*((unsigned int *)v4 + 6) + v219 < *((unsigned int *)v4 + 4)
              || (v220 = v24,
                  v221 = sub_1ACBC2594((_QWORD **)v4, v219),
                  LODWORD(v24) = v220,
                  LODWORD(v219) = v221,
                  v221 >= 1))
            {
              v222 = v219 + 1;
              do
              {
                v223 = *((_QWORD *)v4 + 1);
                v224 = *((unsigned int *)v4 + 6);
                *((_DWORD *)v4 + 6) = v224 + 1;
                *(_BYTE *)(v223 + v224) = 32;
                --v222;
              }
              while (v222 > 1);
            }
            LODWORD(v23) = 0;
          }
          v225 = v24;
          v226 = *((unsigned int *)v4 + 6);
          if ((v226 + v90) >= *((_DWORD *)v4 + 4))
          {
            sub_1ACBC290C((uint64_t)v4, __src, v90);
          }
          else
          {
            *((_DWORD *)v4 + 6) = v226 + v90;
            memcpy((void *)(*((_QWORD *)v4 + 1) + v226), __src, v90);
          }
          v79.i64[0] = 0x100000001;
          v79.i64[1] = 0x100000001;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          if (v225 >= 3)
          {
            v227 = 1;
            while (1)
            {
              if (v227 >= (v218 - 1))
                v228 = (v218 - 1);
              else
                v228 = v227;
              v229 = v228 * v90;
              if (v229 + *((unsigned int *)v4 + 6) >= *((unsigned int *)v4 + 4))
              {
                sub_1ACBC2594((_QWORD **)v4, v228 * v90);
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v79.i64[0] = 0x100000001;
                v79.i64[1] = 0x100000001;
              }
              if (*((_BYTE *)v4 + 28))
                break;
              v230 = *((_QWORD *)v4 + 1);
              if ((int)v229 < 1 || v230 == 0)
              {
                if ((_DWORD)v229)
                {
                  sub_1ACBBE20C(32736);
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  v79.i64[0] = 0x100000001;
                  v79.i64[1] = 0x100000001;
                }
              }
              else
              {
                v232 = *((unsigned int *)v4 + 6);
                v233 = (const void *)(v230 + v232 - v229);
                if ((v232 + v229) < *((_DWORD *)v4 + 4))
                {
                  *((_DWORD *)v4 + 6) = v232 + v229;
                  memcpy((void *)(v230 + v232), v233, v229);
                }
                else
                {
                  sub_1ACBC290C((uint64_t)v4, v233, v228 * v90);
                }
                v79.i64[0] = 0x100000001;
                v79.i64[1] = 0x100000001;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
              }
              v218 -= v228;
              v227 = 2 * v228;
              v6 = (char *)__src;
              if (v218 <= 1)
              {
                v80 = 0;
                goto LABEL_454;
              }
            }
          }
        }
        v80 = 0;
        v6 = (char *)__src;
        goto LABEL_454;
      case 9u:
      case 0xAu:
      case 0xEu:
        if (v70 == 6)
          v75 = 34;
        else
          v75 = 39;
        if ((v381 & 2) == 0)
        {
          v76 = (uint64_t *)v385;
          v385 += 8;
          v77 = *v76;
          goto LABEL_257;
        }
        v87 = *(int *)(v5 + 4);
        if (*(_DWORD *)v5 <= (int)v87)
          goto LABEL_256;
        v88 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v87 + 1;
        v77 = *(_QWORD *)(v88 + 8 * v87);
        if (v77)
        {
          v89 = *(unsigned __int16 *)(v77 + 20);
          if ((~v89 & 0x202) != 0 || *(_BYTE *)(v77 + 22) != 1)
          {
            if ((v89 & 1) != 0)
            {
LABEL_256:
              v77 = 0;
            }
            else
            {
              v137 = v20;
              v138 = v24;
              v77 = sub_1ACBF2B64((int *)v77, 1);
              LODWORD(v24) = v138;
              LOBYTE(v20) = v137;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            }
          }
          else
          {
            v77 = *(_QWORD *)(v77 + 8);
          }
        }
LABEL_257:
        v139 = v70;
        v140 = "(NULL)";
        if (v70 == 5)
          v140 = "NULL";
        if (v77)
          v141 = (unsigned __int8 *)v77;
        else
          v141 = (unsigned __int8 *)v140;
        if (!(_DWORD)v24)
        {
          v145 = 0;
          v142 = 0;
          goto LABEL_275;
        }
        v142 = 0;
        v143 = 0;
        v144 = (int)v24;
        while (1)
        {
          v146 = v141[v143];
          if (!v141[v143])
            break;
          if (v146 == v75)
            ++v142;
          if ((_BYTE)v20 && v146 >= 0xC0)
          {
            do
            {
              v145 = v143 + 1;
              v147 = v141[++v143] & 0xC0;
            }
            while (v147 == 128);
          }
          else
          {
            v145 = v143 + 1;
          }
          v143 = v145;
          if (!--v144)
            goto LABEL_275;
        }
        v145 = v143;
LABEL_275:
        v149 = v139 == 5 && v77 != 0;
        v150 = v145 + v142 + 3;
        if (v150 < 513)
        {
          v154 = 0;
          v6 = (char *)__src;
          v79.i64[0] = 0x100000001;
          v79.i64[1] = 0x100000001;
          goto LABEL_290;
        }
        if (*((_BYTE *)v4 + 28))
          return;
        if (v150 <= (unint64_t)*((unsigned int *)v4 + 4) || (v151 = *((unsigned int *)v4 + 5), v150 <= v151))
        {
          v383 = v149;
          v152 = v20;
          if (*(_QWORD *)v4)
            v153 = sub_1ACBE1124(*(_QWORD *)v4, v150);
          else
            v153 = sub_1ACB5D828(v150);
          v6 = (char *)v153;
          v79.i64[0] = 0x100000001;
          v79.i64[1] = 0x100000001;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          LOBYTE(v20) = v152;
          v154 = v153;
          v149 = v383;
          if (!v153)
            goto LABEL_753;
LABEL_290:
          if (v149)
          {
            *v6 = v75;
            v155 = 1;
            if (v145 < 1)
              goto LABEL_294;
          }
          else
          {
            v155 = 0;
            if (v145 < 1)
            {
LABEL_294:
              v90 = v155;
              goto LABEL_295;
            }
          }
          do
          {
            v156 = *v141++;
            v90 = v155 + 1;
            v6[v155] = v156;
            if (v156 == v75)
            {
              v6[v90] = v75;
              v90 = v155 + 2;
            }
            v155 = v90;
            --v145;
          }
          while (v145);
LABEL_295:
          if (v149)
            v6[v90++] = v75;
          v80 = v154;
          v6[v90] = 0;
          if ((_BYTE)v20)
            goto LABEL_454;
LABEL_697:
          v335 = ((_DWORD)v23 - v90);
          if ((int)v335 < 1)
          {
            if (!v6)
              goto LABEL_726;
            if ((int)v90 > 0)
            {
LABEL_712:
              v341 = *((unsigned int *)v4 + 6);
              if ((v341 + v90) >= *((_DWORD *)v4 + 4))
              {
                sub_1ACBC290C((uint64_t)v4, v6, v90);
              }
              else
              {
                *((_DWORD *)v4 + 6) = v341 + v90;
                memcpy((void *)(*((_QWORD *)v4 + 1) + v341), v6, v90);
              }
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              goto LABEL_726;
            }
          }
          else
          {
            if ((_BYTE)v22)
            {
              if ((int)v90 >= 1 && v6)
              {
                v336 = *((unsigned int *)v4 + 6);
                if ((v336 + v90) >= *((_DWORD *)v4 + 4))
                {
                  sub_1ACBC290C((uint64_t)v4, v6, v90);
                }
                else
                {
                  *((_DWORD *)v4 + 6) = v336 + v90;
                  memcpy((void *)(*((_QWORD *)v4 + 1) + v336), v6, v90);
                }
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
              }
              else if ((_DWORD)v90)
              {
                sub_1ACBBE20C(32736);
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              }
              if ((unint64_t)*((unsigned int *)v4 + 6) + v335 < *((unsigned int *)v4 + 4)
                || (v342 = sub_1ACBC2594((_QWORD **)v4, ((_DWORD)v23 - v90)),
                    v10.i64[0] = 0x8080808080808080,
                    v10.i64[1] = 0x8080808080808080,
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0,
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0,
                    LODWORD(v335) = v342,
                    v342 >= 1))
              {
                v343 = v335 + 1;
                do
                {
                  v344 = *((_QWORD *)v4 + 1);
                  v345 = *((unsigned int *)v4 + 6);
                  *((_DWORD *)v4 + 6) = v345 + 1;
                  *(_BYTE *)(v344 + v345) = 32;
                  --v343;
                }
                while (v343 > 1);
              }
              goto LABEL_726;
            }
            if ((unint64_t)*((unsigned int *)v4 + 6) + v335 < *((unsigned int *)v4 + 4)
              || (v337 = sub_1ACBC2594((_QWORD **)v4, ((_DWORD)v23 - v90)),
                  v10.i64[0] = 0x8080808080808080,
                  v10.i64[1] = 0x8080808080808080,
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0,
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0,
                  LODWORD(v335) = v337,
                  v337 >= 1))
            {
              v338 = v335 + 1;
              do
              {
                v339 = *((_QWORD *)v4 + 1);
                v340 = *((unsigned int *)v4 + 6);
                *((_DWORD *)v4 + 6) = v340 + 1;
                *(_BYTE *)(v339 + v340) = 32;
                --v338;
              }
              while (v338 > 1);
            }
            if ((int)v90 >= 1 && v6)
              goto LABEL_712;
          }
          if ((_DWORD)v90)
          {
            sub_1ACBBE20C(32736);
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          }
LABEL_726:
          if (v80)
          {
            sub_1ACBE0F9C(*(_QWORD **)v4, (_QWORD *)v80);
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          }
          v3 = v16 + 1;
          v5 = v380;
          continue;
        }
LABEL_759:
        *((_BYTE *)v4 + 28) = 18;
        if ((_DWORD)v151)
        {
          v351 = *((_BYTE *)v4 + 29);
          if ((v351 & 4) != 0)
          {
            v352 = (_QWORD *)*((_QWORD *)v4 + 1);
            if (v352)
            {
              sub_1ACBE0F9C(*(_QWORD **)v4, v352);
              v351 = *((_BYTE *)v4 + 29);
            }
            *((_BYTE *)v4 + 29) = v351 & 0xFB;
          }
          goto LABEL_764;
        }
LABEL_765:
        if (*(_QWORD *)v4)
        {
          v353 = *(_QWORD *)(*(_QWORD *)v4 + 344);
          if (v353)
          {
            *(_DWORD *)(v353 + 24) = 18;
            ++*(_DWORD *)(v353 + 48);
          }
        }
        return;
      case 0xBu:
        if ((*((_BYTE *)v4 + 29) & 1) == 0)
          return;
        v94 = v385;
        v385 += 8;
        v95 = (size_t *)*v94;
        if ((_BYTE)v21)
        {
          if (v95 && (*((_BYTE *)v95 + 5) & 8) == 0)
          {
            v96 = (const void *)v95[1];
            if (v96)
            {
              v97 = strlen((const char *)v95[1]);
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              v98 = v97 & 0x3FFFFFFF;
              if ((v97 & 0x3FFFFFFF) != 0)
              {
                v99 = *((unsigned int *)v4 + 6);
                if (v99 + v98 >= *((_DWORD *)v4 + 4))
                {
                  sub_1ACBC290C((uint64_t)v4, v96, v98);
                }
                else
                {
                  *((_DWORD *)v4 + 6) = v99 + v98;
                  memcpy((void *)(*((_QWORD *)v4 + 1) + v99), v96, v97 & 0x3FFFFFFF);
                }
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
              }
            }
            do
            {
              if ((*((_BYTE *)v95 + 4) & 3) == 0)
              {
                v331 = *((_DWORD *)v95 + 14);
                if (v331 > 0)
                {
                  v80 = 0;
                  LODWORD(v23) = 0;
                  LODWORD(v90) = 0;
                  *(_DWORD *)(*(_QWORD *)v4 + 84) = v331;
                  goto LABEL_697;
                }
              }
              v95 = (size_t *)v95[2];
            }
            while (v95);
          }
LABEL_694:
          v80 = 0;
LABEL_695:
          LODWORD(v23) = 0;
LABEL_696:
          LODWORD(v90) = 0;
          goto LABEL_697;
        }
        if (!v95)
          goto LABEL_694;
        v134 = *((unsigned int *)v95 + 2);
        if (!(_DWORD)v134)
          goto LABEL_694;
        v135 = (const void *)*v95;
        if ((int)v134 < 1 || v135 == 0)
        {
          sub_1ACBBE20C(32736);
        }
        else
        {
          v318 = *((unsigned int *)v4 + 6);
          if ((v318 + v134) >= *((_DWORD *)v4 + 4))
          {
            sub_1ACBC290C((uint64_t)v4, v135, v134);
          }
          else
          {
            *((_DWORD *)v4 + 6) = v318 + v134;
            memcpy((void *)(*((_QWORD *)v4 + 1) + v318), v135, v134);
          }
        }
        v80 = *(_QWORD *)v4;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
        v10.i64[0] = 0x8080808080808080;
        v10.i64[1] = 0x8080808080808080;
        if (!*(_QWORD *)v4)
          goto LABEL_695;
        if (*(_DWORD *)(v80 + 84) != -2)
          goto LABEL_694;
        v332 = *(_QWORD *)(v80 + 344);
        if (!v332)
          goto LABEL_694;
        v333 = *(_QWORD *)(v332 + 336);
        if (!v333)
          goto LABEL_694;
        v334 = *v95;
        if (v333 > v334)
          goto LABEL_694;
        if (v333 + strlen(*(const char **)(v332 + 336)) <= v334)
          goto LABEL_673;
        LODWORD(v23) = 0;
        LODWORD(v90) = 0;
        *(_DWORD *)(v80 + 84) = v334 - v333;
        v80 = 0;
        goto LABEL_674;
      case 0xCu:
        if ((*((_BYTE *)v4 + 29) & 1) == 0)
          return;
        v100 = v385;
        v385 += 8;
        v101 = *(_QWORD *)v100;
        v23 = *(const char **)(*(_QWORD *)v100 + 24);
        if (v23)
          v102 = v20 == 0;
        else
          v102 = 0;
        if (v102)
          goto LABEL_669;
        if (!*(_QWORD *)(v101 + 16))
        {
          if (v23)
          {
LABEL_669:
            v326 = strlen(v23);
            v327 = v326 & 0x3FFFFFFF;
            if ((v326 & 0x3FFFFFFF) != 0)
            {
              v328 = *((unsigned int *)v4 + 6);
              if (v328 + v327 >= *((_DWORD *)v4 + 4))
              {
                sub_1ACBC290C((uint64_t)v4, v23, v327);
              }
              else
              {
                *((_DWORD *)v4 + 6) = v328 + v327;
                memcpy((void *)(*((_QWORD *)v4 + 1) + v328), v23, v326 & 0x3FFFFFFF);
              }
            }
          }
          else
          {
            v176 = *(_QWORD *)(v101 + 40);
            v177 = *(_DWORD *)(v176 + 16);
            if ((*(_BYTE *)(v176 + 5) & 8) != 0)
              sqlite3_str_appendf(v4, "(join-%u)", v177);
            else
              sqlite3_str_appendf(v4, "(subquery-%u)", v177);
          }
LABEL_673:
          v80 = 0;
          LODWORD(v23) = 0;
          LODWORD(v90) = 0;
          goto LABEL_674;
        }
        v103 = *(const void **)(v101 + 8);
        if (v103)
        {
          v104 = strlen(*(const char **)(v101 + 8));
          v105 = v104 & 0x3FFFFFFF;
          if ((v104 & 0x3FFFFFFF) != 0)
          {
            v106 = *((unsigned int *)v4 + 6);
            if (v106 + v105 >= *((_DWORD *)v4 + 4))
            {
              sub_1ACBC290C((uint64_t)v4, v103, v105);
            }
            else
            {
              *((_DWORD *)v4 + 6) = v106 + v105;
              memcpy((void *)(*((_QWORD *)v4 + 1) + v106), v103, v104 & 0x3FFFFFFF);
            }
          }
          v325 = *((unsigned int *)v4 + 6);
          if ((v325 + 1) >= *((_DWORD *)v4 + 4))
          {
            sub_1ACBC290C((uint64_t)v4, ".", 1u);
          }
          else
          {
            *((_DWORD *)v4 + 6) = v325 + 1;
            *(_BYTE *)(*((_QWORD *)v4 + 1) + v325) = 46;
          }
        }
        v23 = *(const char **)(v101 + 16);
        if (v23)
          goto LABEL_669;
        v80 = 0;
        LODWORD(v90) = 0;
        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
        v10.i64[0] = 0x8080808080808080;
        v10.i64[1] = 0x8080808080808080;
        goto LABEL_697;
      case 0xDu:
        v27 = 2;
LABEL_190:
        LODWORD(v18) = 0;
        goto LABEL_191;
      case 0x10u:
LABEL_191:
        if (((0x3E0FFAuLL >> v70) & 1) != 0)
        {
          if ((v381 & 2) != 0)
          {
            v124 = *(int *)(v5 + 4);
            if (*(_DWORD *)v5 <= (int)v124)
              goto LABEL_369;
            v125 = *(_QWORD *)(v5 + 8);
            *(_DWORD *)(v5 + 4) = v124 + 1;
            v126 = *(_QWORD *)(v125 + 8 * v124);
            if (v126)
            {
              v127 = *(_WORD *)(v126 + 20);
              if ((v127 & 0x24) != 0)
              {
                v382 = 0;
                v110 = *(double *)v126;
                goto LABEL_347;
              }
              if ((v127 & 8) != 0)
              {
                v330 = *(double *)v126;
                if (*(double *)v126 >= -9.22337204e18)
                {
                  if (v330 <= 9.22337204e18)
                  {
                    v382 = 0;
                    *(_QWORD *)&v110 = (uint64_t)v330;
                    goto LABEL_347;
                  }
                  v382 = 0;
                  v110 = NAN;
                }
                else
                {
                  v382 = 0;
                  v110 = -0.0;
                }
LABEL_371:
                if ((_DWORD)v19 && (int)v24 <= (int)v23 - (v382 != 0))
                  LODWORD(v24) = (_DWORD)v23 - (v382 != 0);
                v371 = v18;
                v378 = v21;
                if ((int)v24 >= 332)
                {
                  v187 = v24 + 10;
                  if ((_DWORD)v18)
                    v187 += v24 / 3uLL;
                  if (*((_BYTE *)v4 + 28))
                    return;
                  if (v187 > *((unsigned int *)v4 + 4))
                  {
                    v151 = *((unsigned int *)v4 + 5);
                    if (v187 > v151)
                      goto LABEL_759;
                  }
                  v189 = v24;
                  if (*(_QWORD *)v4)
                    v188 = (_DWORD *)sub_1ACBE1124(*(_QWORD *)v4, v187);
                  else
                    v188 = (_DWORD *)sub_1ACB5D828(v187);
                  LODWORD(v18) = v371;
                  if (!v188)
                  {
LABEL_753:
                    *((_BYTE *)v4 + 28) = 7;
                    if (*((_DWORD *)v4 + 5))
                    {
                      v349 = *((_BYTE *)v4 + 29);
                      if ((v349 & 4) != 0)
                      {
                        v350 = (_QWORD *)*((_QWORD *)v4 + 1);
                        if (v350)
                        {
                          sub_1ACBE0F9C(*(_QWORD **)v4, v350);
                          v349 = *((_BYTE *)v4 + 29);
                        }
                        *((_BYTE *)v4 + 29) = v349 & 0xFB;
                      }
                      *((_DWORD *)v4 + 4) = 0;
                      *((_DWORD *)v4 + 6) = 0;
                      *((_QWORD *)v4 + 1) = 0;
                    }
                    return;
                  }
                  LODWORD(v24) = v189;
                  v80 = (uint64_t)v188;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                }
                else
                {
                  v80 = 0;
                  LODWORD(v187) = 512;
                  v188 = __src;
                }
                v190 = (char *)v188 + (int)v187 - 1;
                v191 = v190;
                if (v70 == 22)
                {
                  v192 = __ROR8__(0xCCCCCCCCCCCCCCCDLL * (*(_QWORD *)&v110 / 0xAuLL) + 0x3333333333333333, 1) < 0x199999999999999AuLL
                      || (*(_QWORD *)&v110 % 0xAuLL) > 3;
                  if (v192)
                    v193 = 0;
                  else
                    v193 = *(_QWORD *)&v110 % 0xAuLL;
                  v194 = 2 * v193;
                  v195 = aThstndrd[(v194 & 0xFFFFFFFE) + 1];
                  *(v190 - 2) = aThstndrd[v194];
                  v191 = v190 - 2;
                  *(v190 - 1) = v195;
                }
                v196 = 0;
                v197 = (char *)&byte_1ACCB62A2[6 * v70];
                v198 = &a0123456789abcd_0[v197[4]];
                v199 = v197[1];
                v200 = v187 + (_DWORD)v188;
                v201 = v24 + (_DWORD)v191 - (v187 + (_DWORD)v188);
                do
                {
                  v191[--v196] = v198[*(_QWORD *)&v110 % v199];
                  --v201;
                  v299 = *(_QWORD *)&v110 >= v199;
                  *(_QWORD *)&v110 /= v199;
                }
                while (v299);
                v202 = ~(_DWORD)v191 + v187 + (_DWORD)v188 - v196;
                if ((int)v24 <= v202)
                {
                  v6 = &v191[v196];
                }
                else
                {
                  v6 = &v191[v196 - v201 - 1];
                  v203 = (int)v190;
                  v204 = v70;
                  v205 = v80;
                  v206 = v4;
                  v207 = v24;
                  memset(v6, 48, (v24 + (_DWORD)v191 - v200 + v196) + 1);
                  LODWORD(v190) = v203;
                  v202 = v207;
                  v4 = v206;
                  v80 = v205;
                  v70 = v204;
                  LODWORD(v18) = v371;
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                }
                if ((_DWORD)v18)
                {
                  v208 = (v202 - 1) / 3;
                  v6 += (v202 - 1) / -3;
                  if (v202 >= 4)
                  {
                    v209 = 0;
                    v210 = (v202 - 1) % 3u + 1;
                    do
                    {
                      v211 = v209;
                      v6[v209] = v6[v209 + (uint64_t)v208];
                      if (!--v210)
                      {
                        ++v209;
                        v6[v211 + 1] = v18;
                        --v208;
                        v210 = 3;
                      }
                      ++v209;
                    }
                    while (v208 > 0);
                  }
                }
                if (v382)
                  *--v6 = v382;
                if (v378 && ((0x77F2FFuLL >> v70) & 1) == 0)
                {
                  v212 = (char *)&unk_1ACCB632C + byte_1ACCB62A2[6 * v70 + 5];
                  v215 = *v212;
                  v213 = v212 + 1;
                  v214 = v215;
                  do
                  {
                    *--v6 = v214;
                    v216 = *v213++;
                    v214 = v216;
                  }
                  while (v216);
                }
                LODWORD(v90) = (_DWORD)v190 - (_DWORD)v6;
                goto LABEL_697;
              }
              if ((v127 & 0x12) != 0 && *(_QWORD *)(v126 + 8))
              {
                v182 = v18;
                v183 = v19;
                v184 = v21;
                v21 = (uint64_t)v4;
                v185 = v24;
                v186 = sub_1ACBF2FC0(v126);
                LODWORD(v24) = v185;
                v4 = (sqlite3_str *)v21;
                LOBYTE(v21) = v184;
                LODWORD(v19) = v183;
                LODWORD(v18) = v182;
                v10.i64[0] = 0x8080808080808080;
                v10.i64[1] = 0x8080808080808080;
                v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                v110 = *(double *)&v186;
                v382 = 0;
                goto LABEL_347;
              }
LABEL_369:
              v382 = 0;
            }
            else
            {
              v172 = v18;
              v173 = v19;
              v174 = v4;
              v175 = v24;
              sub_1ACBBE20C(89699);
              LODWORD(v24) = v175;
              v4 = v174;
              LODWORD(v19) = v173;
              LODWORD(v18) = v172;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              v382 = 0;
            }
LABEL_370:
            v110 = 0.0;
            LOBYTE(v21) = 0;
            goto LABEL_371;
          }
          v382 = 0;
          if (v27)
          {
            v109 = v385;
            v385 += 8;
            v110 = *(double *)v109;
          }
          else
          {
            v158 = (unsigned int *)v385;
            v385 += 8;
            *(_QWORD *)&v110 = *v158;
          }
LABEL_347:
          if (v110 != 0.0)
            goto LABEL_371;
          goto LABEL_370;
        }
        if ((v381 & 2) == 0)
        {
          if (v27)
          {
            v107 = (uint64_t *)v385;
            v385 += 8;
            v108 = *v107;
          }
          else
          {
            v157 = (int *)v385;
            v385 += 8;
            v108 = *v157;
          }
LABEL_303:
          if ((v108 & 0x8000000000000000) == 0)
            goto LABEL_344;
          goto LABEL_304;
        }
        v120 = *(int *)(v5 + 4);
        if (*(_DWORD *)v5 <= (int)v120)
          goto LABEL_343;
        v121 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(v5 + 4) = v120 + 1;
        v122 = *(_QWORD *)(v121 + 8 * v120);
        if (v122)
        {
          v123 = *(_WORD *)(v122 + 20);
          if ((v123 & 0x24) != 0)
          {
            v108 = *(_QWORD *)v122;
            goto LABEL_303;
          }
          if ((v123 & 8) != 0)
          {
            v329 = *(double *)v122;
            if (*(double *)v122 < -9.22337204e18)
            {
              v108 = 0x8000000000000000;
LABEL_304:
              v382 = 45;
              goto LABEL_344;
            }
            if (v329 <= 9.22337204e18)
            {
              v108 = (uint64_t)v329;
              goto LABEL_303;
            }
            v108 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_344:
            if (v108 >= 0)
              v110 = *(double *)&v108;
            else
              *(_QWORD *)&v110 = -v108;
            goto LABEL_347;
          }
          if ((v123 & 0x12) != 0 && *(_QWORD *)(v122 + 8))
          {
            v178 = v18;
            v179 = v19;
            v180 = v21;
            v21 = (uint64_t)v4;
            v181 = v24;
            v108 = sub_1ACBF2FC0(v122);
            LODWORD(v24) = v181;
            v4 = (sqlite3_str *)v21;
            LOBYTE(v21) = v180;
            LODWORD(v19) = v179;
            LODWORD(v18) = v178;
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            goto LABEL_303;
          }
        }
        else
        {
          v168 = v18;
          v169 = v19;
          v170 = v21;
          v21 = (uint64_t)v4;
          v171 = v24;
          sub_1ACBBE20C(89699);
          LODWORD(v24) = v171;
          v4 = (sqlite3_str *)v21;
          LOBYTE(v21) = v170;
          LODWORD(v19) = v169;
          LODWORD(v18) = v168;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
        }
LABEL_343:
        v108 = 0;
        goto LABEL_344;
      default:
        return;
    }
  }
}

void sqlite3_str_append(sqlite3_str *a1, const char *zIn, int N)
{
  uint64_t v3;

  if (a1)
  {
    if (zIn && N > 0)
    {
      v3 = *((unsigned int *)a1 + 6);
      if ((v3 + N) >= *((_DWORD *)a1 + 4))
      {
        sub_1ACBC290C((uint64_t)a1, zIn, N);
      }
      else
      {
        *((_DWORD *)a1 + 6) = v3 + N;
        memcpy((void *)(*((_QWORD *)a1 + 1) + v3), zIn, N);
      }
    }
    else if (N)
    {
      sub_1ACBBE20C(32736);
    }
  }
  else
  {
    sub_1ACBBE20C(32732);
  }
}

void sqlite3_str_appendchar(sqlite3_str *a1, int N, char C)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1 || N < 0)
  {
    sub_1ACBBE20C(32698);
    return;
  }
  if (*((unsigned int *)a1 + 6) + (unint64_t)N >= *((unsigned int *)a1 + 4))
  {
    N = sub_1ACBC2594((_QWORD **)a1, N);
    if (N < 1)
      return;
  }
  else if (!N)
  {
    return;
  }
  v5 = N + 1;
  do
  {
    v6 = *((_QWORD *)a1 + 1);
    v7 = *((unsigned int *)a1 + 6);
    *((_DWORD *)a1 + 6) = v7 + 1;
    *(_BYTE *)(v6 + v7) = C;
    --v5;
  }
  while (v5 > 1);
}

uint64_t sub_1ACBC2594(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;

  if (*((_BYTE *)a1 + 28))
    return 0;
  v5 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v5)
  {
    v2 = a2;
    v6 = *((_BYTE *)a1 + 29);
    if ((v6 & 4) != 0)
      v7 = a1[1];
    else
      v7 = 0;
    v9 = *((unsigned int *)a1 + 6);
    v10 = a2 + v9;
    v11 = a2 + v9 + 1 + v9;
    if (v11 > v5)
      v11 = v10 + 1;
    if (v11 > v5)
    {
      if ((*((_BYTE *)a1 + 29) & 4) != 0)
      {
        v13 = a1[1];
        if (v13)
        {
          sub_1ACBE0F9C(*a1, v13);
          v6 = *((_BYTE *)a1 + 29);
          v14 = *((_DWORD *)a1 + 5) == 0;
        }
        else
        {
          v14 = 0;
        }
        v6 &= ~4u;
        *((_BYTE *)a1 + 29) = v6;
        *((_DWORD *)a1 + 4) = 0;
        *((_DWORD *)a1 + 6) = 0;
        a1[1] = 0;
        *((_BYTE *)a1 + 28) = 18;
        if (v14)
          goto LABEL_33;
      }
      else
      {
        *((_BYTE *)a1 + 28) = 18;
      }
      if ((v6 & 4) != 0)
        *((_BYTE *)a1 + 29) = v6 & 0xFB;
      *((_DWORD *)a1 + 4) = 0;
      *((_DWORD *)a1 + 6) = 0;
      a1[1] = 0;
LABEL_33:
      if (*a1)
      {
        v16 = (*a1)[43];
        if (v16)
        {
          v2 = 0;
          *(_DWORD *)(v16 + 24) = 18;
          ++*(_DWORD *)(v16 + 48);
          return v2;
        }
      }
      return 0;
    }
    *((_DWORD *)a1 + 4) = v11;
    v12 = (uint64_t)*a1;
    if (*a1)
    {
      if (v7)
      {
        if (*(_QWORD *)(v12 + 512) > (unint64_t)v7)
        {
          if (*(_QWORD *)(v12 + 496) <= (unint64_t)v7)
          {
            if (v11 < 0x81uLL)
              goto LABEL_39;
          }
          else if (*(_QWORD *)(v12 + 504) <= (unint64_t)v7
                 && v11 <= (unint64_t)*(unsigned __int16 *)(v12 + 438))
          {
LABEL_39:
            if ((v6 & 4) == 0)
            {
              v17 = *((unsigned int *)a1 + 6);
              if ((_DWORD)v17)
                memcpy(v7, a1[1], v17);
            }
            a1[1] = v7;
            v18 = (uint64_t)*a1;
            if (*a1 && *(_QWORD *)(v18 + 520) > (unint64_t)v7)
            {
              if (*(_QWORD *)(v18 + 496) <= (unint64_t)v7)
              {
                v19 = 128;
                goto LABEL_47;
              }
              if (*(_QWORD *)(v18 + 504) <= (unint64_t)v7)
              {
                v19 = *(unsigned __int16 *)(v18 + 438);
                goto LABEL_47;
              }
            }
            v19 = off_1ECD3B178(v7);
LABEL_47:
            *((_DWORD *)a1 + 4) = v19;
            *((_BYTE *)a1 + 29) |= 4u;
            return v2;
          }
        }
        v15 = sub_1ACBE11D0(v12, v7, v11);
      }
      else
      {
        v15 = sub_1ACBE1124(v12, v11);
      }
    }
    else
    {
      v15 = sub_1ACB6BB48((uint64_t)v7, v11);
    }
    v7 = (_QWORD *)v15;
    v6 = *((_BYTE *)a1 + 29);
    if (v15)
      goto LABEL_39;
    if ((*((_BYTE *)a1 + 29) & 4) != 0)
    {
      v20 = a1[1];
      if (v20)
      {
        sub_1ACBE0F9C(*a1, v20);
        v6 = *((_BYTE *)a1 + 29);
      }
      v6 &= ~4u;
      *((_BYTE *)a1 + 29) = v6;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0;
    *((_BYTE *)a1 + 28) = 7;
    if (!*((_DWORD *)a1 + 5))
      return 0;
    if ((v6 & 4) != 0)
      *((_BYTE *)a1 + 29) = v6 & 0xFB;
    v2 = 0;
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0;
  }
  else
  {
    *((_BYTE *)a1 + 28) = 18;
    if (*a1)
    {
      v8 = (*a1)[43];
      if (v8)
      {
        *(_DWORD *)(v8 + 24) = 18;
        ++*(_DWORD *)(v8 + 48);
      }
    }
    return (*((_DWORD *)a1 + 4) + ~*((_DWORD *)a1 + 6));
  }
  return v2;
}

void sqlite3_str_appendall(sqlite3_str *a1, const char *zIn)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  if (!zIn)
  {
    v4 = 0;
    if (a1)
      goto LABEL_3;
LABEL_8:
    v6 = 32732;
LABEL_11:
    sub_1ACBBE20C(v6);
    return;
  }
  v4 = strlen(zIn) & 0x3FFFFFFF;
  if (!a1)
    goto LABEL_8;
LABEL_3:
  if (!zIn || !v4)
  {
    if (!v4)
      return;
    v6 = 32736;
    goto LABEL_11;
  }
  v5 = *((unsigned int *)a1 + 6);
  if (v5 + v4 >= *((_DWORD *)a1 + 4))
  {
    sub_1ACBC290C((uint64_t)a1, zIn, v4);
  }
  else
  {
    *((_DWORD *)a1 + 6) = v5 + v4;
    memcpy((void *)(*((_QWORD *)a1 + 1) + v5), zIn, v4);
  }
}

void sqlite3_str_appendf(sqlite3_str *a1, const char *zFormat, ...)
{
  va_list va;

  va_start(va, zFormat);
  sqlite3_str_vappendf(a1, zFormat, va);
}

uint64_t sub_1ACBC290C(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result;
  int v6;

  result = sub_1ACBC2594((_QWORD **)a1, a3);
  if ((int)result >= 1)
  {
    v6 = result;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24)), a2, result);
    *(_DWORD *)(a1 + 24) += v6;
  }
  return result;
}

char *__cdecl sqlite3_str_finish(sqlite3_str *a1)
{
  char *v1;
  sqlite3_str *v2;
  uint64_t v3;
  void (**v4)(sqlite3_str *);

  v1 = 0;
  if (a1)
  {
    v2 = a1;
    if (a1 != (sqlite3_str *)&unk_1EECAC608)
    {
      v3 = *((_QWORD *)a1 + 1);
      if (v3 && (*(_BYTE *)(v3 + *((unsigned int *)a1 + 6)) = 0, *((_DWORD *)a1 + 5)) && (*((_BYTE *)a1 + 29) & 4) == 0)
        v1 = (char *)sub_1ACBE13A0((uint64_t *)a1);
      else
        v1 = (char *)*((_QWORD *)a1 + 1);
      v4 = (void (**)(sqlite3_str *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_13;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v2);
      v2 = (sqlite3_str *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v4 = (void (**)(sqlite3_str *))&xmmword_1ECD3B1D0;
LABEL_13:
        (*v4)(v2);
      }
    }
  }
  return v1;
}

int sqlite3_str_errcode(sqlite3_str *a1)
{
  if (a1)
    return *((unsigned __int8 *)a1 + 28);
  else
    return 7;
}

int sqlite3_str_length(sqlite3_str *a1)
{
  if (a1)
    LODWORD(a1) = *((_DWORD *)a1 + 6);
  return (int)a1;
}

char *__cdecl sqlite3_str_value(char *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *((unsigned int *)result + 6);
    if ((_DWORD)v1)
    {
      *(_BYTE *)(*((_QWORD *)result + 1) + v1) = 0;
      return (char *)*((_QWORD *)result + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sqlite3_str_reset(sqlite3_str *a1)
{
  char v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = *((_BYTE *)a1 + 29);
    if ((v2 & 4) != 0)
    {
      v3 = (_QWORD *)*((_QWORD *)a1 + 1);
      if (v3)
      {
        sub_1ACBE0F9C(*(_QWORD **)a1, v3);
        v2 = *((_BYTE *)a1 + 29);
      }
      *((_BYTE *)a1 + 29) = v2 & 0xFB;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    sub_1ACBBE20C(32851);
  }
}

sqlite3_str *__cdecl sqlite3_str_new(sqlite3 *a1)
{
  sqlite3_str *result;
  int v3;

  if (sqlite3_initialize())
    return (sqlite3_str *)&unk_1EECAC608;
  result = (sqlite3_str *)sub_1ACB5D828(32);
  if (!result)
    return (sqlite3_str *)&unk_1EECAC608;
  if (a1)
    v3 = *((_DWORD *)a1 + 34);
  else
    v3 = 2147483645;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 5) = v3;
  *((_DWORD *)result + 6) = 0;
  *((_WORD *)result + 14) = 0;
  return result;
}

char *__cdecl sqlite3_vsnprintf(int a1, char *a2, const char *a3, va_list a4)
{
  char *v5;
  _QWORD v7[2];
  int v8;
  uint64_t v9;
  int v10;

  if (a1 >= 1)
  {
    if (a2 && a3)
    {
      v7[0] = 0;
      v7[1] = a2;
      v8 = a1;
      v9 = 0;
      v10 = 0;
      sqlite3_str_vappendf((sqlite3_str *)v7, a3, a4);
      v5 = &a2[HIDWORD(v9)];
LABEL_6:
      *v5 = 0;
      return a2;
    }
    sub_1ACBBE20C(32991);
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  return a2;
}

int sqlite3_stricmp(const char *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    if (a2)
    {
      while (1)
      {
        v2 = *(unsigned __int8 *)a1;
        v3 = *(unsigned __int8 *)a2;
        if ((_DWORD)v2 == (_DWORD)v3)
        {
          if (!*a1)
            return v2;
        }
        else
        {
          LODWORD(v2) = byte_1ACCB6333[v2] - byte_1ACCB6333[v3];
          if ((_DWORD)v2)
            return v2;
        }
        ++a1;
        ++a2;
      }
    }
    return 1;
  }
  else if (a2)
  {
    return -1;
  }
  else
  {
    return 0;
  }
}

int sqlite3_strnicmp(const char *a1, const char *a2, int a3)
{
  int v3;
  uint64_t v4;

  if (a3 < 0)
  {
    sub_1ACBBE20C(35843);
    return 0;
  }
  if (!a1)
  {
    if (a2)
      return -1;
    else
      return 0;
  }
  if (!a2)
    return 1;
  if (!a3)
    return 0;
  v3 = a3 + 1;
  while (1)
  {
    v4 = *(unsigned __int8 *)a1;
    if (!*a1)
      break;
    LODWORD(v4) = byte_1ACCB6333[v4];
    if ((_DWORD)v4 != byte_1ACCB6333[*(unsigned __int8 *)a2])
      break;
    ++a1;
    ++a2;
    if (--v3 <= 1)
      return 0;
  }
  return v4 - byte_1ACCB6333[*(unsigned __int8 *)a2];
}

int sqlite3_os_init(void)
{
  uint64_t i;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  for (i = 0; i != 9; ++i)
  {
    if (sqlite3_initialize())
      continue;
    if ((_BYTE)word_1ECD3B144)
    {
      v1 = qword_1ECD3B1B0(2);
      v2 = v1;
      if (v1)
      {
        xmmword_1ECD3B1C0(v1);
        v3 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v2 = 0;
    }
    v3 = 1;
LABEL_9:
    v4 = (char *)&qword_1ECD3B328[21 * i];
    v5 = qword_1ECD3E928;
    if ((char *)qword_1ECD3E928 == v4)
    {
      v9 = &qword_1ECD3E928;
      goto LABEL_20;
    }
    if (!qword_1ECD3E928)
      goto LABEL_24;
    v6 = qword_1ECD3E928;
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
      if (v6)
        v8 = v6 == (_QWORD)v4;
      else
        v8 = 1;
    }
    while (!v8);
    if ((char *)v6 == v4)
    {
      v9 = (uint64_t *)(v7 + 16);
LABEL_20:
      *v9 = qword_1ECD3B328[21 * i + 2];
      v5 = qword_1ECD3E928;
    }
    if (i && v5)
    {
      v10 = (uint64_t *)(v5 + 16);
      v5 = *(_QWORD *)(v5 + 16);
      goto LABEL_25;
    }
LABEL_24:
    v10 = &qword_1ECD3E928;
LABEL_25:
    qword_1ECD3B328[21 * i + 2] = v5;
    *v10 = (uint64_t)v4;
    if ((v3 & 1) == 0)
      xmmword_1ECD3B1D0(v2);
  }
  if ((_BYTE)word_1ECD3B144)
    v11 = qword_1ECD3B1B0(11);
  else
    v11 = 0;
  qword_1ECD3E950 = v11;
  sub_1ACBBC2DC();
  qword_1ECD3BD00 = (uint64_t)getenv("SQLITE_TMPDIR");
  v12 = malloc_type_calloc(1uLL, 0x400uLL, 0x4A773900uLL);
  if (!confstr(65537, (char *)v12, 0x400uLL))
  {
    free(v12);
    v12 = 0;
  }
  qword_1ECD3BD08 = (uint64_t)v12;
  qword_1ECD3BD10 = (uint64_t)getenv("TMPDIR");
  if (qword_1ECD3E958 == -1)
  {
    if ((_BYTE)word_1ECD3B144)
      goto LABEL_34;
LABEL_36:
    v13 = 0;
  }
  else
  {
    dispatch_once(&qword_1ECD3E958, &unk_1E5C72C78);
    if (!(_BYTE)word_1ECD3B144)
      goto LABEL_36;
LABEL_34:
    v13 = qword_1ECD3B1B0(11);
  }
  qword_1ECD3E950 = v13;
  return 0;
}

uint64_t sub_1ACBC30B4(uint64_t a1, uint64_t a2)
{
  timespec v4;

  v4.tv_sec = (int)a2 / 1000000;
  v4.tv_nsec = 1000 * ((int)a2 % 1000000);
  nanosleep(&v4, 0);
  return a2;
}

uint64_t sub_1ACBC3120(uint64_t a1, double *a2)
{
  timeval v4;

  v4.tv_sec = 0;
  *(_QWORD *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *a2 = (double)(1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000) / 86400000.0;
  return 0;
}

uint64_t sub_1ACBC31AC()
{
  return *__error();
}

uint64_t sub_1ACBC31C4(int a1, char *__s1, char *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  char *v8;
  char **v9;
  char *v10;

  if (__s1)
  {
    v5 = 0;
    while (strcmp(__s1, (&off_1EECAC8C0)[v5]))
    {
      v5 += 3;
      if (v5 == 87)
        return 12;
    }
    v9 = &(&off_1EECAC8C0)[v5];
    v10 = (&off_1EECAC8C0)[v5 + 2];
    if (!v10)
    {
      v10 = v9[1];
      v9[2] = v10;
    }
    result = 0;
    if (a3)
      v10 = a3;
    v9[1] = v10;
  }
  else
  {
    for (i = 0; i != 87; i += 3)
    {
      v8 = (&off_1EECAC8C0)[i + 2];
      if (v8)
        (&off_1EECAC8C0)[i + 1] = v8;
    }
    return 0;
  }
  return result;
}

char *sub_1ACBC327C(int a1, char *__s1)
{
  uint64_t v3;

  v3 = 0;
  while (strcmp(__s1, (&off_1EECAC8C0)[v3]))
  {
    v3 += 3;
    if (v3 == 87)
      return 0;
  }
  return (&off_1EECAC8C0)[v3 + 1];
}

uint64_t sub_1ACBC32D8(int a1, char *__s1)
{
  uint64_t v3;
  const char **v4;
  uint64_t v5;
  char **v6;
  char **v8;
  char *v9;

  if (__s1)
  {
    v3 = 0;
    v4 = (const char **)&off_1EECAC8C0;
    do
    {
      if (!strcmp(__s1, *v4))
        break;
      ++v3;
      v4 += 3;
    }
    while (v3 != 28);
  }
  else
  {
    v3 = -1;
  }
  v5 = v3 - 29;
  v6 = &(&off_1EECAC8C0)[3 * v3 + 4];
  while (!__CFADD__(v5++, 1))
  {
    v8 = v6 + 3;
    v9 = *v6;
    v6 += 3;
    if (v9)
      return (uint64_t)*(v8 - 4);
  }
  return 0;
}

char *sub_1ACBC3370()
{
  char *result;

  xmmword_1ECD3E960 = *(_OWORD *)&MEMORY[0x1E0C83870];
  qword_1ECD3E970 = (uint64_t)MEMORY[0x1E0C83868];
  qword_1ECD3E978 = (uint64_t)MEMORY[0x1E0C83880];
  qword_1ECD3E980 = (uint64_t)MEMORY[0x1E0C83888];
  result = getenv("RC_XBS");
  if (result)
  {
    if (*result)
    {
      qword_1ECD3E978 = 0;
      qword_1ECD3E980 = 0;
    }
  }
  return result;
}

int sqlite3_os_end(void)
{
  qword_1ECD3E950 = 0;
  return 0;
}

unsigned __int8 *__cdecl sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
{
  int v5;
  const char *v6;
  char v7;
  const char *v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  _BYTE **v15;
  _BYTE *v16;
  const char *i;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  const char *v22;
  const char *j;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  size_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t (**v37)(unsigned __int8 *);
  sqlite3_int64 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  sqlite3_stmt *pStmt;
  uint64_t v50;

  pStmt = 0;
  if (!db)
  {
    v6 = "NULL";
    goto LABEL_32;
  }
  v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
LABEL_32:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1ACBBE20C(58671);
    return 0;
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_32;
    }
    goto LABEL_5;
  }
  v7 = mFlags;
  v9 = zSchema;
  if (!zSchema)
    v9 = (const char *)**((_QWORD **)db + 4);
  v50 = 0;
  v10 = sqlite3_file_control(db, v9, 7, &v50);
  v11 = 0;
  if (!v10)
  {
    if (*(_UNKNOWN **)v50 == &unk_1E5C73248)
    {
      v39 = *(_QWORD *)(v50 + 8);
      v40 = *(_QWORD *)(v39 + 32);
      if (v40)
        xmmword_1ECD3B1C0(v40);
      if (*(_QWORD *)(v39 + 64))
        v50 = 0;
      v41 = *(_QWORD *)(v39 + 32);
      if (v41)
        xmmword_1ECD3B1D0(v41);
      v11 = v50;
      if (!v9)
        goto LABEL_48;
    }
    else
    {
      v11 = 0;
      if (!v9)
        goto LABEL_48;
    }
LABEL_11:
    v12 = *((_DWORD *)db + 10);
    v13 = __OFSUB__(v12, 1);
    v14 = (v12 - 1);
    if ((int)v14 < 0 != v13)
    {
LABEL_35:
      v20 = v14;
    }
    else
    {
      v15 = (_BYTE **)(*((_QWORD *)db + 4) + 32 * v14);
      do
      {
        v16 = *v15;
        if (*v15)
        {
          for (i = v9; ; ++i)
          {
            v18 = *v16;
            v19 = *(unsigned __int8 *)i;
            if ((_DWORD)v18 == (_DWORD)v19)
            {
              if (!*v16)
                goto LABEL_35;
            }
            else if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
            {
              break;
            }
            ++v16;
          }
        }
        if (!(_DWORD)v14)
        {
          v22 = "main";
          for (j = v9; ; ++j)
          {
            v24 = *(unsigned __int8 *)v22;
            v25 = *(unsigned __int8 *)j;
            if ((_DWORD)v24 == (_DWORD)v25)
            {
              if (!*v22)
              {
                v20 = 0;
                if (!piSize)
                  goto LABEL_38;
LABEL_37:
                *piSize = -1;
                goto LABEL_38;
              }
            }
            else if (byte_1ACCB6333[v24] != byte_1ACCB6333[v25])
            {
              break;
            }
            ++v22;
          }
        }
        v15 -= 4;
        v20 = -1;
        v21 = (int)v14 <= 0;
        LODWORD(v14) = v14 - 1;
      }
      while (!v21);
    }
    if (!piSize)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (v9)
    goto LABEL_11;
LABEL_48:
  v20 = -1;
  if (piSize)
    goto LABEL_37;
LABEL_38:
  if ((v20 & 0x80000000) != 0)
    return 0;
  if (!v11)
  {
    v31 = *(_QWORD *)(*((_QWORD *)db + 4) + 32 * v20 + 8);
    if (!v31)
      return 0;
    v32 = *(int *)(*(_QWORD *)(v31 + 8) + 52);
    v33 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA \"%w\".page_count", v9);
    if (!v33)
      return 0;
    v35 = v33;
    v36 = sub_1ACB5C66C((uint64_t)db, v33, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v34);
    v37 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v35);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v35);
      v35 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_58;
      v37 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v37)(v35);
LABEL_58:
    if (v36)
      return 0;
    if (sqlite3_step(pStmt) != 100)
      goto LABEL_64;
    v38 = sqlite3_column_int64(pStmt, 0) * v32;
    if (piSize)
      *piSize = v38;
    if ((v7 & 1) != 0 || sqlite3_initialize())
    {
LABEL_64:
      v26 = 0;
LABEL_65:
      sqlite3_finalize(pStmt);
      return v26;
    }
    v26 = (unsigned __int8 *)sub_1ACB5D828(v38);
    if (!v26)
      goto LABEL_65;
    v42 = sqlite3_column_int(pStmt, 0);
    if (v42 < 1)
      goto LABEL_65;
    v43 = **(_QWORD **)(v31 + 8);
    v44 = (v42 + 1);
    v45 = 1;
    v46 = v26;
    while (1)
    {
      v50 = 0;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v43 + 288))(v43, v45, &v50, 0))
        break;
      bzero(v46, v32);
      v47 = v50;
      if (v50)
        goto LABEL_84;
LABEL_79:
      ++v45;
      v46 += v32;
      if (v44 == v45)
        goto LABEL_65;
    }
    v47 = v50;
    memcpy(v46, *(const void **)(v50 + 8), v32);
LABEL_84:
    if ((*(_WORD *)(v47 + 52) & 0x20) != 0)
    {
      v48 = *(_QWORD *)(v47 + 40);
      --*(_DWORD *)(v48 + 152);
      *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 168);
      *(_QWORD *)(v48 + 168) = v47;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v48 + 72) + 144))(*(_QWORD *)(v48 + 72), *(_QWORD *)(v48 + 200) * (*(_DWORD *)(v47 + 48) - 1), *(_QWORD *)(v47 + 8));
    }
    else
    {
      sub_1ACBE906C(v47);
    }
    goto LABEL_79;
  }
  v28 = *(_QWORD *)(v11 + 8);
  if (piSize)
    *piSize = *(_QWORD *)v28;
  if ((v7 & 1) != 0)
    return *(unsigned __int8 **)(v28 + 24);
  v29 = *(_QWORD *)v28;
  if (sqlite3_initialize())
    return 0;
  v30 = (unsigned __int8 *)sub_1ACB5D828(v29);
  v26 = v30;
  if (v30)
    memcpy(v30, *(const void **)(v28 + 24), *(_QWORD *)v28);
  return v26;
}

int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned __int8 *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
{
  int v7;
  const char *v8;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t (**v30)(unsigned __int8 *);
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  sqlite3_int64 v36;
  void (**v37)(unsigned __int8 *);
  uint64_t v38;
  sqlite3_stmt *pStmt;
  uint64_t v40;

  pStmt = 0;
  if (!db)
  {
    v8 = "NULL";
    goto LABEL_33;
  }
  v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    v8 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    return sub_1ACBBE20C(58750);
  }
  if (v7 != 118)
  {
    if (v7 != 109)
    {
      v8 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (szDb < 0)
    return sub_1ACBBE20C(58752);
  if (szBuf < 0)
    return sub_1ACBBE20C(58753);
  v14 = *((_QWORD *)db + 3);
  if (v14)
    xmmword_1ECD3B1C0(v14);
  if (!zSchema)
  {
    zSchema = (const char *)**((_QWORD **)db + 4);
    if (!zSchema)
      goto LABEL_36;
  }
  v15 = *((_DWORD *)db + 10);
  v16 = (v15 - 1);
  if (v15 >= 1)
  {
    v17 = (_QWORD *)(*((_QWORD *)db + 4) + 32 * v16);
    do
    {
      if (*v17)
      {
        for (i = 0; ; ++i)
        {
          v19 = *(unsigned __int8 *)(*v17 + i);
          v20 = zSchema[i];
          if ((_DWORD)v19 == (_DWORD)v20)
          {
            if (!*(_BYTE *)(*v17 + i))
              goto LABEL_37;
          }
          else if (byte_1ACCB6333[v19] != byte_1ACCB6333[v20])
          {
            break;
          }
        }
      }
      if (!(_DWORD)v16)
      {
        for (j = 0; ; ++j)
        {
          v23 = aMain[j];
          v24 = zSchema[j];
          if ((_DWORD)v23 == (_DWORD)v24)
          {
            if (!aMain[j])
            {
              LOBYTE(v16) = 0;
              goto LABEL_40;
            }
          }
          else if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
          {
            break;
          }
        }
      }
      v17 -= 4;
      v21 = (int)v16 <= 0;
      LODWORD(v16) = v16 - 1;
    }
    while (!v21);
LABEL_36:
    LODWORD(v16) = -1;
  }
LABEL_37:
  if ((int)v16 <= 1 && (_DWORD)v16)
  {
LABEL_39:
    v26 = 1;
    goto LABEL_62;
  }
LABEL_40:
  v27 = (unsigned __int8 *)sqlite3_mprintf("ATTACH x AS %Q", zSchema);
  if (!v27)
  {
    v26 = 7;
    goto LABEL_62;
  }
  v29 = v27;
  v26 = sub_1ACB5C66C((uint64_t)db, v27, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v28);
  v30 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_46;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v29);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v29);
  v29 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v30 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_46:
    (*v30)(v29);
  }
  if (v26)
    goto LABEL_62;
  *((_BYTE *)db + 196) = v16;
  *((_BYTE *)db + 198) |= 4u;
  v31 = sqlite3_step(pStmt);
  *((_BYTE *)db + 198) &= ~4u;
  if (v31 != 101)
    goto LABEL_39;
  v40 = 0;
  if (sqlite3_file_control(db, zSchema, 7, &v40) || *(_UNKNOWN **)v40 != &unk_1E5C73248)
    goto LABEL_39;
  v32 = *(_QWORD *)(v40 + 8);
  v33 = *(_QWORD *)(v32 + 32);
  if (v33)
    xmmword_1ECD3B1C0(v33);
  if (*(_QWORD *)(v32 + 64))
    v40 = 0;
  v34 = *(_QWORD *)(v32 + 32);
  if (v34)
    xmmword_1ECD3B1D0(v34);
  if (!v40)
    goto LABEL_39;
  v26 = 0;
  v35 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v35 + 24) = pData;
  *(_QWORD *)v35 = szDb;
  *(_QWORD *)(v35 + 8) = szBuf;
  v36 = qword_1ECD3B2D8;
  if (qword_1ECD3B2D8 <= szBuf)
    v36 = szBuf;
  *(_QWORD *)(v35 + 16) = v36;
  *(_DWORD *)(v35 + 44) = mFlags;
  pData = 0;
LABEL_62:
  sqlite3_finalize(pStmt);
  if ((mFlags & 1) != 0 && pData)
  {
    v37 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(pData);
      --qword_1ECD3E8D0;
      off_1ECD3B168(pData);
      pData = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_70;
      v37 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v37)(pData);
  }
LABEL_70:
  v38 = *((_QWORD *)db + 3);
  if (v38)
    xmmword_1ECD3B1D0(v38);
  return v26;
}

sqlite3_file *__cdecl sqlite3_database_file_object(sqlite3_file *result)
{
  char *i;

  if (result)
  {
    for (i = (char *)&result[-1].pMethods + 4; i[3] || i[2] || i[1] || *i; --i)
      ;
    return *(sqlite3_file **)(*((_QWORD *)i - 1) + 72);
  }
  return result;
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;

  if (p1 && p2)
  {
    v4 = *(_DWORD *)&p1->hidden[32];
    v5 = *(_DWORD *)&p2->hidden[32];
    if (v4 >= v5)
    {
      if (v4 > v5)
      {
        return 1;
      }
      else
      {
        v7 = *(_DWORD *)&p1->hidden[16];
        v8 = *(_DWORD *)&p2->hidden[16];
        v9 = v7 >= v8;
        v10 = v7 > v8;
        if (v9)
          return v10;
        else
          return -1;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    sub_1ACBBE20C(76367);
    return p1 != p2;
  }
}

int sqlite3_enable_shared_cache(int a1)
{
  return 21;
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  int v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  char v40;

  if (!pSource)
    goto LABEL_11;
  v9 = *((unsigned __int8 *)pSource + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1ACBBE20C(88386);
    return 0;
  }
  if (v9 != 118)
  {
    if (v9 == 109)
      goto LABEL_5;
LABEL_10:
    v10 = "invalid";
    goto LABEL_12;
  }
  if (!pDest)
  {
LABEL_11:
    v10 = "NULL";
    goto LABEL_12;
  }
  v12 = *((unsigned __int8 *)pDest + 113);
  if (v12 == 186)
    goto LABEL_5;
  if (v12 != 118)
  {
    if (v12 == 109)
      goto LABEL_5;
    goto LABEL_10;
  }
  v17 = *((_QWORD *)pSource + 3);
  if (v17)
    xmmword_1ECD3B1C0(v17);
  v18 = *((_QWORD *)pDest + 3);
  if (v18)
    xmmword_1ECD3B1C0(v18);
  if (pSource == pDest)
  {
    sub_1ACBC3FCC((uint64_t)pSource, 1, "source and destination must be distinct", (uint64_t)zSourceName, v4, v5, v6, v7, v40);
    v13 = 0;
  }
  else
  {
    v19 = sub_1ACB5D828(72);
    v13 = v19;
    if (v19)
    {
      *(_QWORD *)(v19 + 64) = 0;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_QWORD *)(v19 + 40) = sub_1ACBC40F0(pDest, (uint64_t)pSource, (uint64_t)zSourceName, v20, v21, v22, v23, v24);
      v30 = sub_1ACBC40F0(pDest, (uint64_t)pDest, (uint64_t)zDestName, v25, v26, v27, v28, v29);
      *(_QWORD *)v13 = pDest;
      *(_QWORD *)(v13 + 8) = v30;
      *(_QWORD *)(v13 + 32) = pSource;
      *(_DWORD *)(v13 + 24) = 1;
      *(_DWORD *)(v13 + 60) = 0;
      v36 = *(_QWORD *)(v13 + 40);
      if (v36 && v30)
      {
        if (!*(_BYTE *)(v30 + 16))
        {
          ++*(_DWORD *)(v36 + 24);
          goto LABEL_33;
        }
        sub_1ACBC3FCC((uint64_t)pDest, 1, "destination database is in use", v31, v32, v33, v34, v35, v40);
      }
      v37 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v13);
        v13 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_33;
        v37 = &xmmword_1ECD3B1D0;
      }
      (*v37)(v13);
      v13 = 0;
    }
    else
    {
      *((_DWORD *)pDest + 20) = 7;
      sub_1ACBE938C((uint64_t)pDest, 7);
    }
  }
LABEL_33:
  v38 = *((_QWORD *)pDest + 3);
  if (v38)
    xmmword_1ECD3B1D0(v38);
  v39 = *((_QWORD *)pSource + 3);
  if (v39)
    xmmword_1ECD3B1D0(v39);
  return (sqlite3_backup *)v13;
}

void sub_1ACBC3FCC(uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t (*v12)(void);
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  *(_DWORD *)(a1 + 80) = a2;
  if (a2 != 3082 && (a2 & 0xFB) == 0xA)
  {
    v12 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 128);
    if (v12)
      v13 = v12();
    else
      v13 = 0;
    *(_DWORD *)(a1 + 92) = v13;
  }
  if (a3)
  {
    if (!*(_QWORD *)(a1 + 416))
    {
      v14 = sub_1ACBE1124(a1, 0x40uLL);
      if (!v14)
      {
        *(_QWORD *)(a1 + 416) = 0;
        return;
      }
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_WORD *)(v14 + 20) = 1;
      *(_QWORD *)(v14 + 24) = a1;
      *(_QWORD *)(a1 + 416) = v14;
    }
    v15 = (char *)sub_1ACBE9258(a1, a3, &a9);
    v16 = *(_QWORD *)(a1 + 416);
    if (v16)
      sub_1ACB57870(v16, v15, -1, 1u, sub_1ACBD0E78);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    if (a2 || *(_QWORD *)(a1 + 416))
      sub_1ACBE938C(a1, a2);
    else
      *(_DWORD *)(a1 + 84) = -1;
  }
}

uint64_t sub_1ACBC40F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE **v13;
  _BYTE *v14;
  unsigned __int8 *j;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const char *v19;
  unsigned __int8 *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  if (!a3)
    goto LABEL_29;
  v10 = *(_DWORD *)(a2 + 40);
  v11 = (v10 - 1);
  if (v10 < 1)
    goto LABEL_29;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = (_BYTE **)(v12 + 32 * v11);
  while (1)
  {
    v14 = *v13;
    if (*v13)
      break;
LABEL_11:
    if (!(_DWORD)v11)
    {
      v19 = "main";
      for (i = (unsigned __int8 *)a3; ; ++i)
      {
        v21 = *(unsigned __int8 *)v19;
        v22 = *i;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*v19)
          {
            LODWORD(v11) = 0;
            return *(_QWORD *)(v12 + 32 * v11 + 8);
          }
        }
        else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
        {
          break;
        }
        ++v19;
      }
    }
    v13 -= 4;
    v18 = (int)v11 <= 0;
    LODWORD(v11) = v11 - 1;
    if (v18)
      goto LABEL_29;
  }
  for (j = (unsigned __int8 *)a3; ; ++j)
  {
    v16 = *v14;
    v17 = *j;
    if ((_DWORD)v16 == (_DWORD)v17)
      break;
    if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
      goto LABEL_11;
LABEL_7:
    ++v14;
  }
  if (*v14)
    goto LABEL_7;
  if ((_DWORD)v11 != 1)
  {
    if ((v11 & 0x80000000) == 0)
      return *(_QWORD *)(v12 + 32 * v11 + 8);
LABEL_29:
    sub_1ACBC3FCC((uint64_t)a1, 1, "unknown database %s", a4, a5, a6, a7, a8, a3);
    return 0;
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v23 = *(_QWORD *)(a2 + 344);
  v57 = 0;
  *((_QWORD *)&v47 + 1) = v23;
  *(_QWORD *)(a2 + 344) = &v31;
  v31 = a2;
  if (*(_BYTE *)(a2 + 103))
    sub_1ACBCB308((uint64_t)&v31, "out of memory", a3, a4, a5, a6, a7, a8, v30);
  if (!sub_1ACBE9418((uint64_t)&v31))
  {
    if ((_QWORD)v32)
      sub_1ACBE0F9C(a1, (_QWORD *)v32);
    sub_1ACBCB8D0(&v31);
    v12 = *(_QWORD *)(a2 + 32);
    LODWORD(v11) = 1;
    return *(_QWORD *)(v12 + 32 * v11 + 8);
  }
  sub_1ACBC3FCC((uint64_t)a1, v33, "%s", v24, v25, v26, v27, v28, v32);
  if ((_QWORD)v32)
    sub_1ACBE0F9C(a1, (_QWORD *)v32);
  sub_1ACBCB8D0(&v31);
  return 0;
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;

  if (!p)
    return sub_1ACBBE20C(88584);
  v5 = *(_QWORD *)(*((_QWORD *)p + 4) + 24);
  if (v5)
    xmmword_1ECD3B1C0(v5);
  v6 = *((_QWORD *)p + 5);
  if (*(_BYTE *)(v6 + 17))
  {
    ++*(_DWORD *)(v6 + 20);
    if (!*(_BYTE *)(v6 + 18))
      sub_1ACBECF6C(v6);
  }
  if (*(_QWORD *)p)
  {
    v7 = *(_QWORD *)(*(_QWORD *)p + 24);
    if (v7)
      xmmword_1ECD3B1C0(v7);
  }
  v8 = *((_DWORD *)p + 12);
  if (v8 <= 6 && ((1 << v8) & 0x61) != 0)
  {
    v9 = *((_QWORD *)p + 5);
    v10 = *(uint64_t **)(v9 + 8);
    v11 = *v10;
    v12 = **(_QWORD **)(*((_QWORD *)p + 1) + 8);
    if (*(_QWORD *)p && *((_BYTE *)v10 + 36) == 2)
    {
      v13 = 5;
      v14 = 1;
      goto LABEL_34;
    }
    v14 = *(_BYTE *)(v9 + 16) != 0;
    if (*(_BYTE *)(v9 + 16))
      v13 = 0;
    else
      v13 = sub_1ACBED080(v9, 0, 0);
    v16 = *((_DWORD *)p + 5);
    if (v16 | v13)
    {
      if (v13)
        goto LABEL_34;
      if (!v16)
      {
LABEL_26:
        v17 = *((_QWORD *)p + 1);
        v18 = (_DWORD *)((char *)p + 16);
        if (*(_BYTE *)(v17 + 17) || *(unsigned __int8 *)(v17 + 16) <= 1u)
        {
          v13 = sub_1ACBED080(v17, 2, v18);
          if (v13)
            goto LABEL_34;
        }
        else
        {
          v19 = *(uint64_t **)(v17 + 8);
          *v18 = bswap32(*(_DWORD *)(*(_QWORD *)(v19[3] + 80) + 40));
          v20 = *v19;
          v21 = *(_DWORD *)(*(_QWORD *)v17 + 788);
          if (*(_DWORD *)(v20 + 128) < v21)
          {
            if (*(_BYTE *)(v20 + 10))
            {
              v13 = sub_1ACBEDD40(v20, v21);
              if (v13)
              {
LABEL_34:
                v22 = *(_QWORD *)(*((_QWORD *)p + 5) + 8);
                v23 = *(int *)(v22 + 52);
                v24 = *(_DWORD **)(*((_QWORD *)p + 1) + 8);
                v25 = v24[13];
                if (v13)
                  goto LABEL_43;
                if (*(_BYTE *)(*(_QWORD *)v24 + 9) == 5)
                {
                  if ((_DWORD)v23 == v25)
                  {
                    v13 = 0;
                    goto LABEL_43;
                  }
                }
                else
                {
                  if (*(_BYTE *)(v12 + 16))
                  {
                    v13 = 0;
                  }
                  else
                  {
                    v13 = 0;
                    if (!*(_BYTE *)(v12 + 20))
                      goto LABEL_43;
                  }
                  if ((_DWORD)v23 == v25)
                  {
LABEL_43:
                    v26 = *(_DWORD *)(v22 + 64);
                    v60 = v24[13];
                    v61 = v14;
                    v59 = *(unsigned __int8 *)(*(_QWORD *)v24 + 9);
                    if (nPage)
                    {
                      v27 = *((unsigned int *)p + 6);
                      v28 = 1;
                      while (v27 <= v26 && !v13)
                      {
                        v29 = v28;
                        if ((_DWORD)v27 == dword_1EECAC650
                                          / *(_DWORD *)(*(_QWORD *)(*((_QWORD *)p + 5) + 8) + 52)
                                          + 1)
                        {
                          v13 = 0;
                        }
                        else
                        {
                          v62 = 0;
                          v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v11 + 288))(v11, v27, &v62, 2);
                          if (!v13)
                          {
                            v13 = sub_1ACBC4B20((uint64_t)p, v27, *(_QWORD *)(v62 + 8), 0);
                            v30 = v62;
                            if (v62)
                            {
                              if ((*(_WORD *)(v62 + 52) & 0x20) != 0)
                              {
                                v31 = *(_QWORD *)(v62 + 40);
                                --*(_DWORD *)(v31 + 152);
                                *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 168);
                                *(_QWORD *)(v31 + 168) = v30;
                                (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v31 + 72) + 144))(*(_QWORD *)(v31 + 72), *(_QWORD *)(v31 + 200) * (*(_DWORD *)(v30 + 48) - 1), *(_QWORD *)(v30 + 8));
                              }
                              else
                              {
                                sub_1ACBE906C(v62);
                              }
                            }
                          }
                          LODWORD(v27) = *((_DWORD *)p + 6);
                        }
                        v27 = (v27 + 1);
                        *((_DWORD *)p + 6) = v27;
                        v28 = v29 + 1;
                        if ((nPage & 0x80000000) == 0 && v29 >= nPage)
                          break;
                      }
                    }
                    v32 = v12;
                    if (v13 != 101)
                    {
                      if (v13)
                        goto LABEL_117;
                      v33 = *((_DWORD *)p + 6);
                      *((_DWORD *)p + 13) = v26 - v33 + 1;
                      *((_DWORD *)p + 14) = v26;
                      if (v26 >= v33)
                      {
                        v13 = 0;
                        if (!*((_DWORD *)p + 15))
                        {
                          v47 = **(_QWORD **)(*((_QWORD *)p + 5) + 8);
                          *((_QWORD *)p + 8) = *(_QWORD *)(v47 + 112);
                          *(_QWORD *)(v47 + 112) = p;
                          *((_DWORD *)p + 15) = 1;
                        }
                        goto LABEL_117;
                      }
                    }
                    if (!v26)
                    {
                      v34 = *((_QWORD *)p + 1);
                      if (*(_BYTE *)(v34 + 17))
                      {
                        ++*(_DWORD *)(v34 + 20);
                        if (!*(_BYTE *)(v34 + 18))
                          sub_1ACBECF6C(v34);
                      }
                      v35 = *(_QWORD *)(v34 + 8);
                      *(_DWORD *)(v35 + 64) = 0;
                      v13 = sub_1ACB93E30(v35);
                      if (*(_BYTE *)(v34 + 17))
                      {
                        v36 = *(_DWORD *)(v34 + 20) - 1;
                        *(_DWORD *)(v34 + 20) = v36;
                        if (!v36)
                          sub_1ACBED048(v34);
                      }
                      if (v13 != 101 && v13 != 0)
                        goto LABEL_117;
                      v26 = 1;
                    }
                    v13 = sub_1ACBC4E30(*((_QWORD *)p + 1), 1, *((_DWORD *)p + 4) + 1);
                    if (v13)
                      goto LABEL_117;
                    if (*(_QWORD *)p)
                      sub_1ACBC4F54(*(_QWORD *)p);
                    if (v59 == 5)
                    {
                      v13 = sub_1ACBC5028(*((_QWORD *)p + 1), 2);
                      if (v13)
                        goto LABEL_117;
                    }
                    if ((int)v23 >= v60)
                    {
                      *(_DWORD *)(v12 + 32) = (int)v23 / v60 * v26;
                      v13 = sub_1ACB9E9C0(v12, 0, 0);
                      if (v13)
                        goto LABEL_117;
                      goto LABEL_105;
                    }
                    v38 = (int)(v26 + v60 / (int)v23 - 1) / (v60 / (int)v23);
                    v39 = v38
                        - (v38 == dword_1EECAC650
                                              / *(_DWORD *)(*(_QWORD *)(*((_QWORD *)p + 1) + 8) + 52)
                                              + 1);
                    v40 = (int)v23 * (uint64_t)(int)v26;
                    v41 = *(_QWORD *)(v32 + 72);
                    v42 = *(_DWORD *)(v32 + 32);
                    if (v39 > v42)
                      goto LABEL_109;
                    while (1)
                    {
                      if ((_DWORD)v39 == dword_1EECAC650
                                        / *(_DWORD *)(*(_QWORD *)(*((_QWORD *)p + 1) + 8) + 52)
                                        + 1)
                      {
                        v13 = 0;
                        goto LABEL_84;
                      }
                      v62 = 0;
                      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v32 + 288))(v32, v39, &v62, 0);
                      if (!v13)
                      {
                        v43 = *(_DWORD **)(v62 + 40);
                        if ((*(_WORD *)(v62 + 52) & 4) == 0 || v43[8] < *(_DWORD *)(v62 + 48))
                        {
                          v13 = v43[12];
                          if (!v13)
                          {
                            if (v43[46] <= v43[50])
                              v44 = sub_1ACB9A818(v62);
                            else
                              v44 = sub_1ACBEDEA4(v62);
LABEL_95:
                            v13 = v44;
                          }
                          v45 = v62;
                          if (v62)
                            goto LABEL_97;
                          goto LABEL_84;
                        }
                        if (v43[32])
                        {
                          v44 = sub_1ACBEA110(v62);
                          goto LABEL_95;
                        }
                        v13 = 0;
                        v45 = v62;
                        if (v62)
                        {
LABEL_97:
                          if ((*(_WORD *)(v45 + 52) & 0x20) != 0)
                          {
                            v46 = *(_QWORD *)(v45 + 40);
                            --*(_DWORD *)(v46 + 152);
                            *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 168);
                            *(_QWORD *)(v46 + 168) = v45;
                            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v46 + 72) + 144))(*(_QWORD *)(v46 + 72), *(_QWORD *)(v46 + 200) * (*(_DWORD *)(v45 + 48) - 1), *(_QWORD *)(v45 + 8));
                          }
                          else
                          {
                            sub_1ACBE906C(v45);
                          }
                        }
                      }
LABEL_84:
                      if (!v13)
                      {
                        v39 = (v39 + 1);
                        if (v39 <= v42)
                          continue;
                      }
                      if (!v13)
LABEL_109:
                        v13 = sub_1ACB9E9C0(v32, 0, 1);
                      v49 = v40;
                      if (v40 >= dword_1EECAC650 + v60)
                        v40 = dword_1EECAC650 + v60;
                      v50 = v13 == 0;
                      if (!v13)
                      {
                        v51 = dword_1EECAC650 + (int)v23;
                        if (v40 > v51)
                        {
                          do
                          {
                            v62 = 0;
                            v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(v11 + 288))(v11, (v51 / v23) + 1, &v62, 0);
                            if (!v13)
                              v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, *(_QWORD *)(v62 + 8), v23, v51);
                            v57 = v62;
                            if (v62)
                            {
                              if ((*(_WORD *)(v62 + 52) & 0x20) != 0)
                              {
                                v58 = *(_QWORD *)(v62 + 40);
                                --*(_DWORD *)(v58 + 152);
                                *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 168);
                                *(_QWORD *)(v58 + 168) = v57;
                                (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v58 + 72) + 144))(*(_QWORD *)(v58 + 72), *(_QWORD *)(v58 + 200) * (*(_DWORD *)(v57 + 48) - 1), *(_QWORD *)(v57 + 8));
                              }
                              else
                              {
                                sub_1ACBE906C(v62);
                              }
                            }
                            v51 += v23;
                            v50 = v13 == 0;
                            if (v13)
                              v56 = 0;
                            else
                              v56 = v51 < v40;
                          }
                          while (v56);
                        }
                      }
                      if (!v50 || (v13 = sub_1ACBC5194(v41, v49)) != 0 || (v13 = sub_1ACBC51FC(v32, 0)) != 0)
                      {
LABEL_117:
                        if (!v61)
                        {
                          sub_1ACB8F578(*((_QWORD *)p + 5), 0, v2);
                          sub_1ACB8F9C8(*((_QWORD *)p + 5), 0);
                        }
                        if (v13 == 3082)
                          v8 = 7;
                        else
                          v8 = v13;
                        *((_DWORD *)p + 12) = v8;
                        goto LABEL_123;
                      }
LABEL_105:
                      v48 = sub_1ACB8F9C8(*((_QWORD *)p + 1), 0);
                      if (v48)
                        v13 = v48;
                      else
                        v13 = 101;
                      goto LABEL_117;
                    }
                  }
                }
                v13 = 8;
                goto LABEL_43;
              }
            }
          }
        }
        v13 = 0;
        *((_DWORD *)p + 5) = 1;
        goto LABEL_34;
      }
    }
    else
    {
      if (sub_1ACBB5FAC(*((_QWORD *)p + 1), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)p + 5) + 8) + 52), 0, 0, *(int8x8_t *)&v2) == 7)
      {
        v13 = 7;
        goto LABEL_34;
      }
      if (!*((_DWORD *)p + 5))
        goto LABEL_26;
    }
    v13 = 0;
    goto LABEL_34;
  }
LABEL_123:
  if (*(_QWORD *)p)
  {
    v52 = *(_QWORD *)(*(_QWORD *)p + 24);
    if (v52)
      xmmword_1ECD3B1D0(v52);
  }
  v53 = *((_QWORD *)p + 5);
  if (*(_BYTE *)(v53 + 17))
  {
    v54 = *(_DWORD *)(v53 + 20) - 1;
    *(_DWORD *)(v53 + 20) = v54;
    if (!v54)
      sub_1ACBED048(v53);
  }
  v55 = *(_QWORD *)(*((_QWORD *)p + 4) + 24);
  if (v55)
    xmmword_1ECD3B1D0(v55);
  return v8;
}

uint64_t sub_1ACBC4B20(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int64_t v23;
  int64_t v24;
  size_t v25;
  int64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v36;
  int v37;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(_DWORD *)(v6 + 52);
  v10 = *(_DWORD *)(v8 + 52);
  v11 = *(_DWORD *)(v8 + 56);
  if (v10 >= v9)
    v12 = *(_DWORD *)(v6 + 52);
  else
    v12 = *(_DWORD *)(v8 + 52);
  if (!*(_BYTE *)(v5 + 17))
  {
    v14 = *(unsigned __int8 *)(v6 + 38);
    v15 = *(_DWORD *)(v6 + 56);
    v16 = *(_DWORD *)(v6 + 52);
    goto LABEL_12;
  }
  v13 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = v13 + 1;
  if (*(_BYTE *)(v5 + 18))
  {
    v14 = *(unsigned __int8 *)(v6 + 38);
    v15 = *(_DWORD *)(v6 + 56);
    v16 = v9;
    *(_DWORD *)(v5 + 20) = v13;
    if (v13)
      goto LABEL_12;
    goto LABEL_11;
  }
  sub_1ACBECF6C(v5);
  v17 = *(_QWORD *)(v5 + 8);
  v14 = *(unsigned __int8 *)(v17 + 38);
  v16 = *(_DWORD *)(v17 + 52);
  v15 = *(_DWORD *)(v17 + 56);
  if (*(_BYTE *)(v5 + 17))
  {
    v18 = *(_DWORD *)(v5 + 20);
    *(_DWORD *)(v5 + 20) = v18 - 1;
    if (v18 == 1)
LABEL_11:
      sub_1ACBED048(v5);
  }
LABEL_12:
  v19 = v10 - v11;
  v20 = v16 - v15;
  if (v16 - v15 <= v14)
    v20 = v14;
  if (v10 == v9)
  {
    v21 = 0;
    if (v19 == v20)
      goto LABEL_21;
  }
  else
  {
    v21 = 8 * (*(_QWORD *)(v7 + 320) != 0);
    if (v19 == v20)
      goto LABEL_21;
  }
  v37 = v10;
  v22 = sub_1ACB5AAC0(v7, &v37, v19);
  if (v22)
    v21 = v22;
  else
    v21 = 8 * (v37 != v10);
LABEL_21:
  if (!(_DWORD)v21 && v10 >= 1)
  {
    v23 = v10 * (unint64_t)a2;
    v24 = v23 - v10;
    v25 = v12;
    do
    {
      v36 = 0;
      v26 = v24 / v9;
      if (dword_1EECAC650 / *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 52) == (_DWORD)v26)
      {
        v21 = 0;
        goto LABEL_45;
      }
      v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(v7 + 288))(v7, (v26 + 1), &v36, 0);
      if (!(_DWORD)v21)
      {
        v27 = v36;
        v28 = *(_DWORD **)(v36 + 40);
        if ((*(_WORD *)(v36 + 52) & 4) != 0 && v28[8] >= *(_DWORD *)(v36 + 48))
        {
          if (!v28[32])
            goto LABEL_38;
          v21 = sub_1ACBEA110(v36);
          if (!(_DWORD)v21)
          {
LABEL_37:
            v27 = v36;
LABEL_38:
            v29 = *(_QWORD *)(v27 + 8) - v9 * v26;
            memcpy((void *)(v29 + v24), (const void *)(a3 + v24 % v10), v25);
            v21 = 0;
            **(_BYTE **)(v36 + 16) = 0;
            if (!a4 && !v24)
            {
              v21 = 0;
              *(_DWORD *)(v29 + 28) = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 64));
            }
          }
        }
        else
        {
          v21 = v28[12];
          if (!(_DWORD)v21)
          {
            if (v28[46] <= v28[50])
            {
              v21 = sub_1ACB9A818(v36);
              if (!(_DWORD)v21)
                goto LABEL_37;
            }
            else
            {
              v21 = sub_1ACBEDEA4(v36);
              if (!(_DWORD)v21)
                goto LABEL_37;
            }
          }
        }
      }
      v30 = v36;
      if (!v36)
        goto LABEL_44;
      if ((*(_WORD *)(v36 + 52) & 0x20) == 0)
      {
        sub_1ACBE906C(v36);
LABEL_44:
        if ((_DWORD)v21)
          return v21;
        goto LABEL_45;
      }
      v31 = *(_QWORD *)(v36 + 40);
      --*(_DWORD *)(v31 + 152);
      *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 168);
      *(_QWORD *)(v31 + 168) = v30;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v31 + 72) + 144))(*(_QWORD *)(v31 + 72), *(_QWORD *)(v31 + 200) * (*(_DWORD *)(v30 + 48) - 1), *(_QWORD *)(v30 + 8));
      if ((_DWORD)v21)
        return v21;
LABEL_45:
      v24 += v9;
    }
    while (v24 < v23);
  }
  return v21;
}

uint64_t sub_1ACBC4E30(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 112);
  v10 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v10[8] >= *(_DWORD *)(v9 + 48))
  {
    if (v10[32])
    {
      v11 = sub_1ACBEA110(v9);
      if ((_DWORD)v11)
      {
LABEL_16:
        if (!*(_BYTE *)(a1 + 17))
          return v11;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v11 = v10[12];
    if ((_DWORD)v11)
      goto LABEL_16;
    if (v10[46] <= v10[50])
    {
      v11 = sub_1ACB9A818(v9);
      if ((_DWORD)v11)
        goto LABEL_16;
    }
    else
    {
      v11 = sub_1ACBEDEA4(v9);
      if ((_DWORD)v11)
        goto LABEL_16;
    }
  }
  *(_DWORD *)(v8 + 4 * a2 + 36) = bswap32(a3);
  if (a2 == 7)
  {
    v11 = 0;
    *(_BYTE *)(v6 + 34) = a3;
    goto LABEL_16;
  }
  v11 = 0;
  if (!*(_BYTE *)(a1 + 17))
    return v11;
LABEL_17:
  v12 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v12;
  if (!v12)
    sub_1ACBED048(a1);
  return v11;
}

_QWORD *sub_1ACBC4F54(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;

  if (!*(_BYTE *)(a1 + 111))
    sub_1ACBE9148(a1);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 24;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v4);
      if (v5)
      {
        if (*(_DWORD *)(a1 + 72))
        {
          *(_WORD *)(v5 + 114) |= 8u;
        }
        else
        {
          sub_1ACBF62B4(v5);
          v2 = *(_DWORD *)(a1 + 40);
        }
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v2);
  }
  *(_DWORD *)(a1 + 44) &= 0xFFFFFFEE;
  result = sub_1ACBFCC3C((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 111))
  {
    if (*(_DWORD *)(a1 + 72))
      return result;
    return sub_1ACC00AF8((_QWORD *)a1);
  }
  result = (_QWORD *)sub_1ACBE91DC(a1);
  if (!*(_DWORD *)(a1 + 72))
    return sub_1ACC00AF8((_QWORD *)a1);
  return result;
}

uint64_t sub_1ACBC5028(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(v4 + 40) = *(_WORD *)(v4 + 40) & 0xFFDF | (32 * (a2 == 1));
  if (!*(_BYTE *)(a1 + 17) && *(_BYTE *)(a1 + 16) || (result = sub_1ACBED080(a1, 0, 0), !(_DWORD)result))
  {
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v6 + 80);
    v8 = *(unsigned __int8 *)(v7 + 18);
    if (v8 == v2 && *(unsigned __int8 *)(v7 + 19) == v8)
    {
      result = 0;
      goto LABEL_26;
    }
    if (*(_BYTE *)(a1 + 17) || *(unsigned __int8 *)(a1 + 16) <= 1u)
    {
      result = sub_1ACBED080(a1, 2, 0);
      if ((_DWORD)result)
        goto LABEL_26;
    }
    else
    {
      v9 = **(_QWORD **)(a1 + 8);
      v10 = *(_DWORD *)(*(_QWORD *)a1 + 788);
      if (*(_DWORD *)(v9 + 128) >= v10 || !*(_BYTE *)(v9 + 10))
      {
LABEL_16:
        v11 = *(_QWORD *)(v6 + 112);
        v12 = *(_DWORD **)(v11 + 40);
        if ((*(_WORD *)(v11 + 52) & 4) != 0 && v12[8] >= *(_DWORD *)(v11 + 48))
        {
          if (!v12[32])
            goto LABEL_25;
          result = sub_1ACBEA110(v11);
        }
        else
        {
          result = v12[12];
          if ((_DWORD)result)
            goto LABEL_26;
          if (v12[46] <= v12[50])
            result = sub_1ACB9A818(v11);
          else
            result = sub_1ACBEDEA4(v11);
        }
        if ((_DWORD)result)
          goto LABEL_26;
LABEL_25:
        result = 0;
        *(_BYTE *)(v7 + 18) = v2;
        *(_BYTE *)(v7 + 19) = v2;
        goto LABEL_26;
      }
      result = sub_1ACBEDD40(v9, v10);
      if ((_DWORD)result)
        goto LABEL_26;
    }
    v6 = *(_QWORD *)(v4 + 24);
    goto LABEL_16;
  }
LABEL_26:
  *(_WORD *)(v4 + 40) &= ~0x20u;
  return result;
}

uint64_t sub_1ACBC5194(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5);
  if (!(_DWORD)result)
  {
    if (v5 <= a2)
      return 0;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
  }
  return result;
}

uint64_t sub_1ACBC51FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v3 = *(_QWORD *)(a1 + 72);
  if (!*(_QWORD *)v3
    || ((result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 80))(v3, 21, a2),
         (_DWORD)result != 12)
      ? (v5 = (_DWORD)result == 0)
      : (v5 = 1),
        v5))
  {
    if (*(_BYTE *)(a1 + 11) || !*(_BYTE *)(a1 + 14))
      return 0;
    else
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  }
  return result;
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  double v1;
  sqlite3_backup *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  sqlite3_backup *v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double (**v15)(sqlite3_backup *);

  if (!p)
    return 0;
  v2 = p;
  v3 = *((_QWORD *)p + 4);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)v2 + 5);
  if (*(_BYTE *)(v5 + 17))
  {
    ++*(_DWORD *)(v5 + 20);
    if (!*(_BYTE *)(v5 + 18))
      sub_1ACBECF6C(v5);
  }
  if (*(_QWORD *)v2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 24);
    if (!v6 || (xmmword_1ECD3B1C0(v6), *(_QWORD *)v2))
      --*(_DWORD *)(*((_QWORD *)v2 + 5) + 24);
  }
  if (*((_DWORD *)v2 + 15))
  {
    v7 = (_QWORD *)(**(_QWORD **)(*((_QWORD *)v2 + 5) + 8) + 112);
    do
    {
      v8 = v7;
      v9 = (sqlite3_backup *)*v7;
      v7 = (_QWORD *)(*v7 + 64);
    }
    while (v9 != v2);
    *v8 = *((_QWORD *)v2 + 8);
  }
  sub_1ACBA4298(*((_QWORD *)v2 + 1), 0, 0, v1);
  if (*((_DWORD *)v2 + 12) == 101)
    v11 = 0;
  else
    v11 = *((_DWORD *)v2 + 12);
  v12 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    *(_DWORD *)(v12 + 80) = v11;
    if (v11 || *(_QWORD *)(v12 + 416))
    {
      sub_1ACBE938C(v12, v11);
      v12 = *(_QWORD *)v2;
    }
    else
    {
      *(_DWORD *)(v12 + 84) = -1;
    }
    sub_1ACBC5444(v12, v10);
  }
  v13 = *((_QWORD *)v2 + 5);
  if (*(_BYTE *)(v13 + 17))
  {
    v14 = *(_DWORD *)(v13 + 20) - 1;
    *(_DWORD *)(v13 + 20) = v14;
    if (!v14)
      sub_1ACBED048(v13);
  }
  if (*(_QWORD *)v2)
  {
    v15 = (double (**)(sqlite3_backup *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v2);
      v2 = (sqlite3_backup *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_33;
      v15 = (double (**)(sqlite3_backup *))&xmmword_1ECD3B1D0;
    }
    v10 = (*v15)(v2);
  }
LABEL_33:
  sub_1ACBC5444(v3, v10);
  return v11;
}

uint64_t sub_1ACBC5444(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *j;
  _QWORD *k;
  _QWORD *m;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  void (*v26)(_QWORD);
  void (*v27)(_QWORD);
  void (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void (*v33)(_QWORD);
  _QWORD *v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t);

  v2 = result;
  if (*(unsigned __int8 *)(result + 113) != 167 || *(_QWORD *)(result + 8))
  {
LABEL_3:
    v2 = *(_QWORD *)(result + 24);
    if (!v2)
      return result;
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v2);
  }
  v4 = *(unsigned int *)(result + 40);
  if ((int)v4 >= 1)
  {
    v5 = *(_QWORD *)(result + 32) + 8;
    while (!*(_QWORD *)v5 || !*(_DWORD *)(*(_QWORD *)v5 + 24))
    {
      v5 += 32;
      if (!--v4)
        goto LABEL_12;
    }
    goto LABEL_3;
  }
LABEL_12:
  sub_1ACBB6E64(result, 0, a2);
  for (i = *(_QWORD **)(v2 + 760); i; i = *(_QWORD **)(v2 + 760))
  {
    *(_QWORD *)(v2 + 760) = i[3];
    sub_1ACBE0F9C((_QWORD *)v2, i);
  }
  *(_QWORD *)(v2 + 788) = 0;
  *(_BYTE *)(v2 + 109) = 0;
  if (*(int *)(v2 + 40) >= 1)
  {
    v8 = *(_QWORD *)(v2 + 32);
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      sub_1ACBA3F80(v9, v6);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 24) = 0;
    }
    if (*(int *)(v2 + 40) >= 2)
    {
      v10 = *(_QWORD *)(v2 + 32);
      v11 = *(_QWORD *)(v10 + 40);
      if (v11)
      {
        sub_1ACBA3F80(v11, v6);
        *(_QWORD *)(v10 + 40) = 0;
      }
      if (*(int *)(v2 + 40) >= 3)
      {
        v12 = 0;
        v13 = 2;
        do
        {
          v14 = *(_QWORD *)(v2 + 32) + v12;
          v15 = *(_QWORD *)(v14 + 72);
          if (v15)
          {
            sub_1ACBA3F80(v15, v6);
            *(_QWORD *)(v14 + 72) = 0;
            *(_QWORD *)(v14 + 88) = 0;
          }
          ++v13;
          v12 += 32;
        }
        while (v13 < *(int *)(v2 + 40));
      }
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 56);
  if (v16)
    sub_1ACBF62B4(v16);
  sub_1ACBFCC3C((_QWORD *)v2);
  sub_1ACC00AF8((_QWORD *)v2);
  for (j = *(_QWORD **)(v2 + 624); j; j = (_QWORD *)*j)
  {
    v21 = (_QWORD *)j[2];
    do
    {
      v23 = v21[8];
      if (v23)
      {
        if ((*(_DWORD *)v23)-- == 1)
        {
          (*(void (**)(_QWORD))(v23 + 8))(*(_QWORD *)(v23 + 16));
          sub_1ACBE0F9C((_QWORD *)v2, (_QWORD *)v23);
        }
      }
      v22 = (_QWORD *)v21[2];
      sub_1ACBE0F9C((_QWORD *)v2, v21);
      v21 = v22;
    }
    while (v22);
  }
  sub_1ACBFC410(v2 + 616);
  for (k = *(_QWORD **)(v2 + 648); k; k = (_QWORD *)*k)
  {
    v25 = (_QWORD *)k[2];
    v26 = (void (*)(_QWORD))v25[4];
    if (v26)
      v26(v25[2]);
    v27 = (void (*)(_QWORD))v25[9];
    if (v27)
      v27(v25[7]);
    v28 = (void (*)(_QWORD))v25[14];
    if (v28)
      v28(v25[12]);
    sub_1ACBE0F9C((_QWORD *)v2, v25);
  }
  sub_1ACBFC410(v2 + 640);
  for (m = *(_QWORD **)(v2 + 576); m; m = (_QWORD *)*m)
  {
    v29 = m[2];
    v30 = *(_QWORD *)(v29 + 40);
    if (v30)
    {
      *(_DWORD *)(v30 + 48) |= 0x4000u;
      if (*(_QWORD *)(v2 + 816) || (v31 = *(_DWORD *)(v30 + 44) - 1, (*(_DWORD *)(v30 + 44) = v31) == 0))
        sub_1ACC00BE8((_QWORD *)v2, (_QWORD *)v30);
      *(_QWORD *)(v29 + 40) = 0;
    }
    v32 = *(_DWORD *)(v29 + 16) - 1;
    *(_DWORD *)(v29 + 16) = v32;
    if (!v32)
    {
      v33 = *(void (**)(_QWORD))(v29 + 32);
      if (v33)
        v33(*(_QWORD *)(v29 + 24));
      sub_1ACBE0F9C((_QWORD *)v2, (_QWORD *)v29);
    }
  }
  sub_1ACBFC410(v2 + 568);
  *(_DWORD *)(v2 + 80) = 0;
  if (*(_QWORD *)(v2 + 416))
  {
    sub_1ACBE938C(v2, 0);
    v20 = *(_QWORD *)(v2 + 416);
    if (v20)
    {
      if ((*(_WORD *)(v20 + 20) & 0x9000) != 0 || *(_DWORD *)(v20 + 32))
        sub_1ACBF2A04(*(_QWORD *)(v2 + 416));
      sub_1ACBE0F9C(*(_QWORD **)(v20 + 24), (_QWORD *)v20);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 84) = -1;
  }
  *(_BYTE *)(v2 + 113) = -43;
  v34 = *(_QWORD **)(*(_QWORD *)(v2 + 32) + 56);
  if (v34)
    sub_1ACBE0F9C((_QWORD *)v2, v34);
  v35 = *(void (**)(_QWORD))(v2 + 328);
  if (v35)
    v35(*(_QWORD *)(v2 + 320));
  v36 = *(_QWORD *)(v2 + 24);
  if (v36)
  {
    xmmword_1ECD3B1D0(v36);
    v37 = *(_QWORD *)(v2 + 24);
    *(_BYTE *)(v2 + 113) = -50;
    if (v37)
      off_1ECD3B1B8();
  }
  else
  {
    *(_BYTE *)(v2 + 113) = -50;
  }
  if (*(_BYTE *)(v2 + 440))
  {
    v38 = *(_QWORD *)(v2 + 504);
    if (v38)
    {
      v39 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_76:
        (*v39)(v38);
        goto LABEL_77;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v38);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v38);
      v38 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v39 = &xmmword_1ECD3B1D0;
        goto LABEL_76;
      }
    }
  }
LABEL_77:
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v2);
  v2 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v2);
  }
  return result;
}

int sqlite3_backup_remaining(sqlite3_backup *p)
{
  if (p)
    return *((_DWORD *)p + 13);
  sub_1ACBBE20C(88891);
  return 0;
}

int sqlite3_backup_pagecount(sqlite3_backup *p)
{
  if (p)
    return *((_DWORD *)p + 14);
  sub_1ACBBE20C(88905);
  return 0;
}

void sub_1ACBC594C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  os_signpost_id_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  const char *v42;
  char *v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint8_t buf[4];
  _BYTE v61[28];
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 192))
  {
    if (qword_1ECD3EA78 != -1)
      dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
    v4 = qword_1ECD3EA60;
    v5 = qword_1ECD3EA58;
    v6 = *(char **)(a2 + 320);
    v7 = *(_DWORD *)(a2 + 224);
    v9 = *(_DWORD *)(a2 + 204);
    v8 = *(_DWORD *)(a2 + 208);
    v10 = *(_DWORD *)(a2 + 236);
    v11 = *(_DWORD *)(a2 + 212);
    v12 = *(_DWORD *)(a2 + 216);
    if (qword_1ECD3EAB8 != -1)
    {
      v56 = *(_DWORD *)(a2 + 212);
      v49 = *(_DWORD *)(a2 + 224);
      dispatch_once(&qword_1ECD3EAB8, &unk_1E5C733D8);
      v11 = v56;
      v7 = v49;
    }
    if ((dword_1ECD3B304 & 1) != 0)
    {
      v53 = v7;
      v54 = v8;
      v13 = *(unsigned int *)(a1 + 40);
      v58 = v9;
      v55 = v11;
      if ((int)v13 <= 0)
      {
        v24 = 0;
        v52 = -*(_DWORD *)(a2 + 240);
        v51 = -*(_DWORD *)(a2 + 244);
        v26 = -*(_DWORD *)(a2 + 248);
      }
      else
      {
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v15 + 8;
        v17 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(_QWORD *)v16)
            v14 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v16 + 8) + 248);
          v16 += 32;
          --v17;
        }
        while (v17);
        v18 = 0;
        v19 = v15 + 8;
        v20 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(_QWORD *)v19)
            v18 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v19 + 8) + 252);
          v19 += 32;
          --v20;
        }
        while (v20);
        v21 = 0;
        v22 = v15 + 8;
        v23 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(_QWORD *)v22)
            v21 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v22 + 8) + 256);
          v22 += 32;
          --v23;
        }
        while (v23);
        v24 = 0;
        v25 = v15 + 8;
        do
        {
          if (*(_QWORD *)v25)
            v24 += *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v25 + 8) + 260);
          v25 += 32;
          --v13;
        }
        while (v13);
        v52 = v14 - *(_DWORD *)(a2 + 240);
        v51 = v18 - *(_DWORD *)(a2 + 244);
        v26 = v21 - *(_DWORD *)(a2 + 248);
      }
      v50 = v26;
      v27 = *(_DWORD *)(a2 + 252);
      v57 = v24 - v27;
      v59 = v12;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v28 = 0;
        goto LABEL_34;
      }
      if (*(_DWORD *)(a2 + 52))
        goto LABEL_28;
      v28 = 0;
      if ((*(_WORD *)(a2 + 268) & 0x40) != 0 && v10 >= 1)
      {
        if (v58 <= 4 * v10 || strstr(v6, "/*scan*/") || v58 < 101)
        {
          if (v55 < 101)
          {
            if (v54 < 101 || strstr(v6, "/*sort*/") || strstr(v6, "/*scan*/"))
            {
LABEL_28:
              v28 = 0;
              goto LABEL_29;
            }
            if (strlen(v6) >= 0x81)
            {
              v48 = strndup(v6, 0x80uLL);
              v28 = v48;
              if (v48)
              {
                *(_WORD *)(v48 + 125) = 11822;
                v48[127] = 46;
                v6 = v48;
              }
            }
            else
            {
              v28 = 0;
            }
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)v61 = v6;
              v44 = "sort without index in [%s]";
              v45 = v4;
              v46 = 12;
              goto LABEL_113;
            }
          }
          else
          {
            if (strlen(v6) >= 0x81)
            {
              v43 = strndup(v6, 0x80uLL);
              v28 = v43;
              if (v43)
              {
                *(_WORD *)(v43 + 125) = 11822;
                v43[127] = 46;
                v6 = v43;
              }
            }
            else
            {
              v28 = 0;
            }
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)v61 = v55;
              *(_WORD *)&v61[4] = 2080;
              *(_QWORD *)&v61[6] = v6;
              v44 = "%d automatic index rows in [%s]";
              v45 = v4;
              v46 = 18;
LABEL_113:
              _os_log_impl(&dword_1ACB54000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
            }
          }
        }
        else
        {
          if (strlen(v6) >= 0x81)
          {
            v47 = strndup(v6, 0x80uLL);
            v28 = v47;
            if (v47)
            {
              *(_WORD *)(v47 + 125) = 11822;
              v47[127] = 46;
              v6 = v47;
            }
          }
          else
          {
            v28 = 0;
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)v61 = v58;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = v10;
            *(_WORD *)&v61[10] = 2080;
            *(_QWORD *)&v61[12] = v6;
            v44 = "%d scan steps for %d row steps in [%s]";
            v45 = v4;
            v46 = 24;
            goto LABEL_113;
          }
        }
      }
LABEL_29:
      if (v24 != v27)
      {
        v29 = v28;
        if (v28)
          goto LABEL_49;
        if (strlen(v6) >= 0x81)
        {
          v31 = strndup(v6, 0x80uLL);
          v28 = v31;
          if (v31)
          {
            *(_WORD *)(v31 + 125) = 11822;
            v31[127] = 46;
            v29 = v31;
            goto LABEL_49;
          }
        }
        else
        {
          v28 = 0;
        }
        v29 = v6;
LABEL_49:
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v61 = v57;
          *(_WORD *)&v61[4] = 2080;
          *(_QWORD *)&v61[6] = v29;
          _os_log_impl(&dword_1ACB54000, v4, OS_LOG_TYPE_DEFAULT, "spilled %d pages during execution of [%s]", buf, 0x12u);
        }
        v6 = v29;
        if ((dword_1ECD3B304 & 0x20) != 0)
          goto LABEL_52;
        goto LABEL_35;
      }
LABEL_34:
      if ((dword_1ECD3B304 & 0x20) != 0)
      {
LABEL_52:
        v32 = *(unsigned __int8 *)(a2 + 52);
        if (v32 == 11 || v32 == 26 || *(_DWORD *)(a2 + 256))
        {
          if (qword_1ECD3EA78 != -1)
            dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
          v5 = qword_1ECD3EA68;
          v30 = 1;
        }
        else
        {
          v30 = 0;
        }
        if (v10 <= 1)
          v33 = 1;
        else
          v33 = v10;
        if (qword_1ECD3EAB0)
          v34 = 0;
        else
          v34 = *(double *)&qword_1ECD3EAA8 <= 0.0;
        if (!v34)
        {
          v35 = (int)((double)(qword_1ECD3EAB0 / (unint64_t)v33) + (double)v33 * *(double *)&qword_1ECD3EAA8);
          if (v59 > v35)
          {
            if (qword_1ECD3EA78 != -1)
              dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
            v5 = qword_1ECD3EA68;
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)v61 = v10;
              *(_WORD *)&v61[4] = 1024;
              *(_DWORD *)&v61[6] = v35;
              *(_WORD *)&v61[10] = 1024;
              *(_DWORD *)&v61[12] = v59;
              *(_WORD *)&v61[16] = 2080;
              *(_QWORD *)&v61[18] = v6;
              _os_log_impl(&dword_1ACB54000, v4, OS_LOG_TYPE_DEFAULT, "flagged inefficient query yielding %d results (expected vdbe steps ≤ %d, actual: %d) [%s]", buf, 0x1Eu);
            }
            v30 = 1;
          }
        }
LABEL_71:
        if (!os_signpost_enabled(v5))
        {
          if (!v28)
            goto LABEL_77;
          goto LABEL_76;
        }
        v36 = os_signpost_id_make_with_pointer(v5, (const void *)a2);
        v37 = v28;
        if (!v28)
        {
          if (strlen(v6) >= 0x81)
          {
            v38 = strndup(v6, 0x80uLL);
            v28 = v38;
            if (v38)
            {
              *(_WORD *)(v38 + 125) = 11822;
              v38[127] = 46;
              v37 = v38;
              goto LABEL_83;
            }
          }
          else
          {
            v28 = 0;
          }
          v37 = v6;
        }
LABEL_83:
        if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          if (os_signpost_enabled(v5))
          {
            v39 = *(_QWORD *)(a2 + 192);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)v61 = v39;
            *(_WORD *)&v61[8] = 2050;
            *(_QWORD *)&v61[10] = a1;
            *(_WORD *)&v61[18] = 2082;
            *(_QWORD *)&v61[20] = v37;
            _os_signpost_emit_with_name_impl(&dword_1ACB54000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v36, "execute", "startTime=%{signpost.description:begin_time}llu db=%{public}p query=%{public,signpost.telemetry:string1,name=query}s", buf, 0x20u);
          }
          if (os_signpost_enabled(v5))
          {
            v40 = "NO";
            if (v30)
              v40 = "YES";
            v41 = *(_DWORD *)(a2 + 52);
            v42 = *(const char **)(a2 + 168);
            if (!v42)
            {
              switch(v41)
              {
                case 516:
                  v42 = "abort due to ROLLBACK";
                  break;
                case 101:
                  v42 = "no more rows available";
                  break;
                case 100:
                  v42 = "another row available";
                  break;
                default:
                  if (*(_DWORD *)(a2 + 52) > 0x1Cu || ((0x1410004uLL >> v41) & 1) != 0)
                    v42 = "unknown error";
                  else
                    v42 = off_1E5C74AE8[*(_DWORD *)(a2 + 52)];
                  break;
              }
            }
            *(_DWORD *)buf = 136318210;
            *(_QWORD *)v61 = v40;
            *(_WORD *)&v61[8] = 1026;
            *(_DWORD *)&v61[10] = v41;
            *(_WORD *)&v61[14] = 1026;
            *(_DWORD *)&v61[16] = v53;
            *(_WORD *)&v61[20] = 1026;
            *(_DWORD *)&v61[22] = v58;
            *(_WORD *)&v61[26] = 1026;
            v62 = v55;
            v63 = 1026;
            v64 = v54;
            v65 = 1026;
            v66 = v57;
            v67 = 1026;
            v68 = v10;
            v69 = 2082;
            v70 = v42;
            v71 = 1026;
            v72 = v59;
            v73 = 1026;
            v74 = v52;
            v75 = 1026;
            v76 = v51;
            v77 = 1026;
            v78 = v50;
            _os_signpost_emit_with_name_impl(&dword_1ACB54000, v5, OS_SIGNPOST_INTERVAL_END, v36, "execute", "enableTelemetry=%s rc=%{public,signpost.telemetry:number1,name=rc}d runCount=%{public}d nScan=%{public}d nAutoindex=%{public}d nSort=%{public}d nSpill=%{public}d nStep=%{public}d errMsg=%{public}s nVmStep=%{public,signpost.telemetry:number2,name=nVmStep}d hits=%{public}d misses=%{public}d writes=%{public}d", buf, 0x58u);
          }
        }
        *(_QWORD *)(a2 + 192) = 0;
        if (!v28)
          goto LABEL_77;
LABEL_76:
        free(v28);
        goto LABEL_77;
      }
LABEL_35:
      v30 = 0;
      goto LABEL_71;
    }
  }
LABEL_77:
  if (*(_QWORD *)(a2 + 184))
    sub_1ACBF089C((uint64_t *)a1, a2);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  int v2;
  int v3;
  signed int v4;

  if (!a1)
  {
    sub_1ACBBE20C(97056);
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 10);
  if ((v2 & 0x12) != 0)
  {
    v3 = *((_DWORD *)a1 + 4);
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    v4 = *(_DWORD *)a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*(_DWORD *)a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0)
        goto LABEL_10;
      v4 = 1;
    }
    if (!sub_1ACB7E454((uint64_t)a1, v4, 1))
    {
      bzero((void *)(*((_QWORD *)a1 + 1) + *((int *)a1 + 4)), *(int *)a1);
      v3 = *((_DWORD *)a1 + 4) + *(_DWORD *)a1;
      *((_DWORD *)a1 + 4) = v3;
      LOWORD(v2) = *((_WORD *)a1 + 10) & 0xF9FF;
LABEL_10:
      *((_WORD *)a1 + 10) = v2 | 0x10;
      if (!v3)
        return 0;
      return (const void *)*((_QWORD *)a1 + 1);
    }
    return 0;
  }
  if ((~v2 & 0x202) == 0 && *((_BYTE *)a1 + 22) == 1)
    return (const void *)*((_QWORD *)a1 + 1);
  if ((v2 & 1) != 0)
    return 0;
  return (const void *)sub_1ACBF2B64((int *)a1, 1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  __int16 v1;
  int v2;

  if (!a1)
  {
    sub_1ACBBE20C(91120);
    return 0;
  }
  v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) == 0 || *((_BYTE *)a1 + 22) != 1)
  {
    if ((v1 & 0x10) != 0)
    {
      v2 = *((_DWORD *)a1 + 4);
      if ((*((_WORD *)a1 + 10) & 0x400) != 0)
        v2 += *(_DWORD *)a1;
      return v2;
    }
    if ((v1 & 1) == 0)
      return sub_1ACBF2B3C((uint64_t)a1, 1);
    return 0;
  }
  return *((_DWORD *)a1 + 4);
}

int sqlite3_value_bytes16(sqlite3_value *a1)
{
  __int16 v1;
  int v2;

  if (!a1)
  {
    sub_1ACBBE20C(91120);
    return 0;
  }
  v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) == 0 || *((_BYTE *)a1 + 22) == 1)
  {
    if ((v1 & 0x10) != 0)
    {
      v2 = *((_DWORD *)a1 + 4);
      if ((*((_WORD *)a1 + 10) & 0x400) != 0)
        v2 += *(_DWORD *)a1;
      return v2;
    }
    if ((v1 & 1) == 0)
      return sub_1ACBF2B3C((uint64_t)a1, 2);
    return 0;
  }
  return *((_DWORD *)a1 + 4);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  __int16 v1;

  if (!a1)
  {
    sub_1ACBBE20C(89734);
    return 0.0;
  }
  v1 = *((_WORD *)a1 + 10);
  if ((v1 & 8) != 0)
    return *(double *)a1;
  if ((v1 & 0x24) != 0)
    return (double)*(uint64_t *)a1;
  if ((v1 & 0x12) == 0)
    return 0.0;
  return sub_1ACBF2F88((uint64_t)a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  __int16 v1;
  double v3;

  if (!a1)
  {
    sub_1ACBBE20C(89699);
    return 0;
  }
  v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0)
    return *(_QWORD *)a1;
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *((_QWORD *)a1 + 1))
      return sub_1ACBF2FC0((uint64_t)a1);
    return 0;
  }
  v3 = *(double *)a1;
  if (*(double *)a1 < -9.22337204e18)
    return 0x8000000000000000;
  if (v3 <= 9.22337204e18)
    return (uint64_t)v3;
  return 0x7FFFFFFFFFFFFFFFLL;
}

unsigned int sqlite3_value_subtype(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x800) != 0)
      return *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    sub_1ACBBE20C(97090);
  }
  return 0;
}

void *__cdecl sqlite3_value_pointer(sqlite3_value *a1, const char *a2)
{
  void *result;

  if (!a1)
  {
    sub_1ACBBE20C(97100);
    return 0;
  }
  result = 0;
  if (a2 && (*((_WORD *)a1 + 10) & 0xFBF) == 0xA01)
  {
    if (*((_BYTE *)a1 + 23) == 112 && !strcmp(*(const char **)a1, a2))
      return (void *)*((_QWORD *)a1 + 1);
    return 0;
  }
  return result;
}

const void *__cdecl sqlite3_value_text16(const void *result)
{
  int v1;

  if (result)
  {
    v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 2)
    {
      if ((v1 & 1) != 0)
        return 0;
      else
        return (const void *)sub_1ACBF2B64((int *)result, 2);
    }
    else
    {
      return (const void *)*((_QWORD *)result + 1);
    }
  }
  return result;
}

const void *__cdecl sqlite3_value_text16be(const void *result)
{
  int v1;

  if (result)
  {
    v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 3)
    {
      if ((v1 & 1) != 0)
        return 0;
      else
        return (const void *)sub_1ACBF2B64((int *)result, 3);
    }
    else
    {
      return (const void *)*((_QWORD *)result + 1);
    }
  }
  return result;
}

const void *__cdecl sqlite3_value_text16le(const void *result)
{
  int v1;

  if (result)
  {
    v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((_BYTE *)result + 22) != 2)
    {
      if ((v1 & 1) != 0)
        return 0;
      else
        return (const void *)sub_1ACBF2B64((int *)result, 2);
    }
    else
    {
      return (const void *)*((_QWORD *)result + 1);
    }
  }
  return result;
}

int sqlite3_value_type(sqlite3_value *a1)
{
  if (a1)
    return byte_1ACCB6445[*((_WORD *)a1 + 10) & 0x3F];
  sub_1ACBBE20C(97202);
  return 0;
}

uint64_t sqlite3_value_encoding(uint64_t a1)
{
  if (a1)
    return *(unsigned __int8 *)(a1 + 22);
  sub_1ACBBE20C(97226);
  return 0;
}

int sqlite3_value_nochange(sqlite3_value *a1)
{
  if (a1)
    return (~*((unsigned __int16 *)a1 + 10) & 0x401) == 0;
  sub_1ACBBE20C(97237);
  return 0;
}

int sqlite3_value_frombind(sqlite3_value *a1)
{
  if (a1)
    return (*((unsigned __int16 *)a1 + 10) >> 6) & 1;
  sub_1ACBBE20C(97248);
  return 0;
}

sqlite3_value *__cdecl sqlite3_value_dup(const sqlite3_value *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (!a1 || sqlite3_initialize())
    return 0;
  v4 = sub_1ACB5D828(64);
  v2 = v4;
  if (!v4)
    return (sqlite3_value *)v2;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  v5 = *((_QWORD *)a1 + 2);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = 0;
  *(_WORD *)(v4 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000) != 0)
  {
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0x8FFF | 0x4000;
    if (!sub_1ACBC6854((int *)v4))
      return (sqlite3_value *)v2;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0 || *(_DWORD *)(v2 + 32))
      sub_1ACBF2A04(v2);
    sub_1ACBE0F9C(*(_QWORD **)(v2 + 24), (_QWORD *)v2);
    return 0;
  }
  if ((v5 & 0x100000000) != 0)
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0xE5FF;
  return (sqlite3_value *)v2;
}

uint64_t sub_1ACBC6854(int *a1)
{
  __int16 v2;
  int v3;
  signed int v4;
  uint64_t result;

  v2 = *((_WORD *)a1 + 10);
  if ((v2 & 0x12) == 0)
    goto LABEL_14;
  if ((a1[5] & 0x400) != 0)
  {
    v3 = a1[4];
    v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0)
        goto LABEL_10;
      v4 = 1;
    }
    if (sub_1ACB7E454((uint64_t)a1, v4, 1))
      return 7;
    bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    v2 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v2;
  }
LABEL_10:
  if (!a1[8] || *((_QWORD *)a1 + 1) != *((_QWORD *)a1 + 5))
  {
    result = sub_1ACBF2D6C((uint64_t)a1);
    if ((_DWORD)result)
      return result;
    v2 = *((_WORD *)a1 + 10);
  }
LABEL_14:
  result = 0;
  *((_WORD *)a1 + 10) = v2 & 0xBFFF;
  return result;
}

_QWORD *sub_1ACBC6918(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    if ((*((_WORD *)result + 10) & 0x9000) != 0 || *((_DWORD *)result + 8))
      sub_1ACBF2A04((uint64_t)result);
    return sub_1ACBE0F9C((_QWORD *)v1[3], v1);
  }
  return result;
}

void sqlite3_value_free(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x9000) != 0 || *((_DWORD *)a1 + 8))
      sub_1ACBF2A04((uint64_t)a1);
    sub_1ACBE0F9C(*((_QWORD **)a1 + 3), a1);
  }
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (!a1 || a3 < 0)
    sub_1ACBBE20C(97348);
  else
    sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
}

void sub_1ACBC69D0(uint64_t a1, char *a2, int a3, unsigned int a4, uint64_t (*a5)(uint64_t result))
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  int v10;

  v6 = *(_QWORD *)a1;
  v7 = sub_1ACB57870(*(_QWORD *)a1, a2, a3, a4, a5);
  if (v7)
  {
    if (v7 != 18)
    {
      sqlite3_result_error_nomem((sqlite3_context *)a1);
      return;
    }
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(a1 + 40);
  v9 = *(_WORD *)(v6 + 20);
  if ((v9 & 2) != 0)
  {
    if (*(unsigned __int8 *)(v6 + 22) != v8)
    {
      sub_1ACBB0FEC((int *)v6, v8);
      v9 = *(_WORD *)(v6 + 20);
    }
  }
  else
  {
    *(_BYTE *)(v6 + 22) = v8;
  }
  if ((v9 & 0x12) != 0)
  {
    v10 = *(_DWORD *)(v6 + 16);
    if ((v9 & 0x400) != 0)
      v10 += *(_DWORD *)v6;
    if (v10 > *(_DWORD *)(*(_QWORD *)(v6 + 24) + 136))
    {
LABEL_12:
      *(_DWORD *)(a1 + 36) = 18;
      sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
    }
  }
}

void sqlite3_result_blob64(sqlite3_context *a1, const void *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    if (a3 >> 31)
    {
      if ((unint64_t)a4 + 1 >= 2)
        ((void (*)(const void *))a4)(a2);
      *((_DWORD *)a1 + 9) = 18;
      sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
    }
    else
    {
      sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
    }
  }
  else
  {
    sub_1ACBBE20C(97364);
  }
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  int *v3;

  if (a1)
  {
    v3 = *(int **)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
      sub_1ACBF2A54(*(int **)a1);
    else
      *((_WORD *)v3 + 10) = 1;
    *(double *)v3 = a2;
    *((_WORD *)v3 + 10) = 8;
  }
  else
  {
    sub_1ACBBE20C(97379);
  }
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_1ACB57870(*(_QWORD *)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1ACBBE20C(97389);
  }
}

void sqlite3_result_error16(sqlite3_context *a1, const void *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_1ACB57870(*(_QWORD *)a1, (char *)a2, a3, 2u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1ACBBE20C(97401);
  }
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v2, a2);
    }
    else
    {
      *(_QWORD *)v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }
  else
  {
    sub_1ACBBE20C(97423);
  }
}

void sqlite3_result_null(sqlite3_context *a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = *(_QWORD *)a1;
    if ((*(_WORD *)(v1 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v1);
    else
      *(_WORD *)(v1 + 20) = 1;
  }
  else
  {
    sub_1ACBBE20C(97433);
  }
}

void sqlite3_result_pointer(sqlite3_context *a1, void *a2, const char *a3, void (__cdecl *a4)(void *))
{
  uint64_t v7;
  const char *v8;
  void (__cdecl *v9)(void *);

  if (a1)
  {
    v7 = *(_QWORD *)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32))
      sub_1ACBF2A04(*(_QWORD *)a1);
    *(_WORD *)(v7 + 20) = 1;
    sub_1ACBF2A04(v7);
    v8 = &byte_1ACCBEAEE;
    if (a3)
      v8 = a3;
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 8) = a2;
    *(_WORD *)(v7 + 20) = 6657;
    *(_BYTE *)(v7 + 23) = 112;
    *(_BYTE *)(v7 + 56) = 0;
    v9 = (void (__cdecl *)(void *))nullsub_7;
    if (a4)
      v9 = a4;
    *(_QWORD *)(v7 + 48) = v9;
  }
  else
  {
    sub_1ACBBE20C(97449);
  }
}

void sqlite3_result_subtype(sqlite3_context *a1, unsigned int a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    *(_BYTE *)(v2 + 23) = a2;
    *(_WORD *)(v2 + 20) |= 0x800u;
  }
  else
  {
    sub_1ACBBE20C(97463);
  }
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1)
    sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))a4);
  else
    sub_1ACBBE20C(97480);
}

void sqlite3_result_text64(sqlite3_context *a1, const char *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *), unsigned __int8 encoding)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (__cdecl *v11)(void *);
  unsigned int v12;

  if (!a1)
  {
    sub_1ACBBE20C(97496);
    return;
  }
  if (encoding != 1)
    a3 &= ~1uLL;
  if (a3 >> 31)
  {
    if ((unint64_t)a4 + 1 >= 2)
      ((void (*)(const char *))a4)(a2);
    *((_DWORD *)a1 + 9) = 18;
    sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
    return;
  }
  if (encoding == 4)
    v7 = 2;
  else
    v7 = encoding;
  sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3, v7, (uint64_t (*)(uint64_t))a4);
  v8 = *(_QWORD *)a1;
  if ((*(_WORD *)(v8 + 20) & 0x6202) == 2 && *(_BYTE *)(v8 + 22) == 1)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(_WORD *)(v8 + 20) & 0x1000) == 0)
      {
        v10 = *(_DWORD *)(v8 + 16);
        if (*(_DWORD *)(v8 + 32) <= v10)
          return;
        goto LABEL_24;
      }
      v11 = *(void (__cdecl **)(void *))(v8 + 48);
      if (v11 == sqlite3_free)
      {
        v12 = off_1ECD3B178(v9);
        v10 = *(_DWORD *)(v8 + 16);
        if (v12 >= v10 + 1)
        {
          v9 = *(_QWORD *)(v8 + 8);
LABEL_24:
          *(_BYTE *)(v9 + v10) = 0;
LABEL_25:
          *(_WORD *)(v8 + 20) |= 0x200u;
          return;
        }
        v11 = *(void (__cdecl **)(void *))(v8 + 48);
      }
      if ((char *)v11 != (char *)sub_1ACBF1160)
        return;
      goto LABEL_25;
    }
  }
}

void sqlite3_result_text16(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1)
    sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  else
    sub_1ACBBE20C(97522);
}

void sqlite3_result_text16be(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1)
    sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 3u, (uint64_t (*)(uint64_t))a4);
  else
    sub_1ACBBE20C(97537);
}

void sqlite3_result_text16le(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1)
    sub_1ACBC69D0((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  else
    sub_1ACBBE20C(97552);
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
  int *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;

  if (a1)
  {
    v4 = *(int **)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
      sub_1ACBF2A54(*(int **)a1);
    v5 = *(_OWORD *)a2;
    v6 = *((_QWORD *)a2 + 2);
    *((_QWORD *)v4 + 2) = v6;
    *(_OWORD *)v4 = v5;
    LOWORD(v6) = WORD2(v6) & 0xEFFF;
    *((_WORD *)v4 + 10) = WORD2(v6) & 0xEFFF;
    if ((v6 & 0x1200000000) != 0 && (*((_WORD *)a2 + 10) & 0x2000) == 0)
    {
      *((_WORD *)v4 + 10) = WORD2(v6) & 0xAFFF | 0x4000;
      sub_1ACBC6854(v4);
      LOWORD(v6) = *((_WORD *)v4 + 10);
    }
    v7 = *((unsigned __int8 *)a1 + 40);
    if ((v6 & 2) != 0)
    {
      if (*((unsigned __int8 *)v4 + 22) != v7)
      {
        sub_1ACBB0FEC(v4, v7);
        LOWORD(v6) = *((_WORD *)v4 + 10);
      }
    }
    else
    {
      *((_BYTE *)v4 + 22) = v7;
    }
    if ((v6 & 0x12) != 0)
    {
      v8 = v4[4];
      if ((v6 & 0x400) != 0)
        v8 += *v4;
      if (v8 > *(_DWORD *)(*((_QWORD *)v4 + 3) + 136))
      {
        *((_DWORD *)a1 + 9) = 18;
        sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
      }
    }
  }
  else
  {
    sub_1ACBBE20C(97564);
  }
}

uint64_t sub_1ACBC701C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)a1);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)a1 = v4;
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000) == 0 || (*((_WORD *)a2 + 10) & 0x2000) != 0)
    return 0;
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xAFFF | 0x4000;
  return sub_1ACBC6854((int *)a1);
}

void sqlite3_result_error_toobig(sqlite3_context *a1)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 18;
    sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
  }
  else
  {
    sub_1ACBBE20C(97620);
  }
}

void sqlite3_result_zeroblob(sqlite3_context *a1, int n)
{
  unsigned int v2;
  uint64_t v3;

  if (a1)
  {
    v2 = n & ~(n >> 31);
    v3 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136) >= v2)
    {
      if ((*(_WORD *)(v3 + 20) & 0x9000) != 0 || *(_DWORD *)(v3 + 32))
        sub_1ACBF2A04(*(_QWORD *)a1);
      *(_WORD *)(v3 + 20) = 1040;
      *(_DWORD *)(v3 + 16) = 0;
      *(_DWORD *)v3 = v2;
      *(_BYTE *)(v3 + 22) = 1;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *((_DWORD *)a1 + 9) = 18;
      sub_1ACB57870(v3, "string or blob too big", -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97583);
  }
}

int sqlite3_result_zeroblob64(sqlite3_context *a1, sqlite3_uint64 n)
{
  int v2;
  uint64_t v3;
  int v4;

  if (!a1)
    return sub_1ACBBE20C(97583);
  v2 = n;
  v3 = *(_QWORD *)a1;
  if (*(int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136) >= n)
  {
    if ((*(_WORD *)(v3 + 20) & 0x9000) != 0 || *(_DWORD *)(v3 + 32))
      sub_1ACBF2A04(*(_QWORD *)a1);
    v4 = 0;
    *(_WORD *)(v3 + 20) = 1040;
    *(_DWORD *)(v3 + 16) = 0;
    *(_DWORD *)v3 = v2 & ~(v2 >> 31);
    *(_BYTE *)(v3 + 22) = 1;
    *(_QWORD *)(v3 + 8) = 0;
  }
  else
  {
    v4 = 18;
    *((_DWORD *)a1 + 9) = 18;
    sub_1ACB57870(v3, "string or blob too big", -1, 1u, 0);
  }
  return v4;
}

void sub_1ACBC723C(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32))
    sub_1ACBF2A04(a1);
  *(_WORD *)(a1 + 20) = 1040;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2 & ~(a2 >> 31);
  *(_BYTE *)(a1 + 22) = 1;
  *(_QWORD *)(a1 + 8) = 0;
}

void sqlite3_result_error_code(sqlite3_context *a1, int a2)
{
  int v2;
  char *v3;

  if (a1)
  {
    if (a2)
      v2 = a2;
    else
      v2 = -1;
    *((_DWORD *)a1 + 9) = v2;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
    {
      switch(a2)
      {
        case 516:
          v3 = "abort due to ROLLBACK";
          break;
        case 101:
          v3 = "no more rows available";
          break;
        case 100:
          v3 = "another row available";
          break;
        default:
          if (a2 > 0x1Cu || ((0x1410004uLL >> a2) & 1) != 0)
            v3 = "unknown error";
          else
            v3 = off_1E5C74AE8[a2];
          break;
      }
      sub_1ACBC69D0((uint64_t)a1, v3, -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97602);
  }
}

void sqlite3_result_error_nomem(sqlite3_context *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  char v12;

  if (a1)
  {
    v8 = *(_QWORD *)a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
    {
      sub_1ACBF2A54((int *)v8);
      v8 = *(_QWORD *)a1;
    }
    else
    {
      *(_WORD *)(v8 + 20) = 1;
    }
    *((_DWORD *)a1 + 9) = 7;
    v9 = *(_QWORD *)(v8 + 24);
    if (!*(_BYTE *)(v9 + 103) && !*(_BYTE *)(v9 + 104))
    {
      *(_BYTE *)(v9 + 103) = 1;
      if (*(int *)(v9 + 220) >= 1)
        *(_DWORD *)(v9 + 424) = 1;
      ++*(_DWORD *)(v9 + 432);
      *(_WORD *)(v9 + 436) = 0;
      v10 = *(_QWORD *)(v9 + 344);
      if (v10)
      {
        sub_1ACBCB308(v10, "out of memory", v1, v2, v3, v4, v5, v6, v12);
        for (i = *(_QWORD *)(v9 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
  }
  else
  {
    sub_1ACBBE20C(97634);
  }
}

void sub_1ACBC741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t i;
  char v11;

  if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v9 = *(_QWORD *)(a1 + 344);
    if (v9)
    {
      sub_1ACBCB308(v9, "out of memory", a3, a4, a5, a6, a7, a8, v11);
      for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
}

uint64_t sub_1ACBC74A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD **v28;
  uint64_t v30;
  uint64_t i;
  void *__src;
  _BYTE __dst[408];

  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v10)
  {
    xmmword_1ECD3B1C0(v10);
    v9 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v12 = *(unsigned __int8 **)(a1 + 320);
    if (v11)
    {
      xmmword_1ECD3B1D0(v11);
      v9 = *(_QWORD *)a1;
    }
  }
  else
  {
    v12 = *(unsigned __int8 **)(a1 + 320);
  }
  __src = 0;
  v13 = sub_1ACB5C66C(v9, v12, 0xFFFFFFFFLL, *(unsigned __int8 *)(a1 + 266), (unsigned __int16 *)a1, &__src, 0, a8);
  if ((_DWORD)v13)
  {
    v20 = v13;
    if ((_DWORD)v13 == 7)
    {
      if (*(_BYTE *)(v9 + 103) || *(_BYTE *)(v9 + 104))
      {
        return 7;
      }
      else
      {
        *(_BYTE *)(v9 + 103) = 1;
        if (*(int *)(v9 + 220) >= 1)
          *(_DWORD *)(v9 + 424) = 1;
        ++*(_DWORD *)(v9 + 432);
        *(_WORD *)(v9 + 436) = 0;
        v30 = *(_QWORD *)(v9 + 344);
        v20 = 7;
        if (v30)
        {
          sub_1ACBCB308(v30, "out of memory", v14, v15, v16, v17, v18, v19, (char)__src);
          for (i = *(_QWORD *)(v9 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            i = *(_QWORD *)(i + 256);
            if (!i)
              break;
          }
        }
      }
    }
  }
  else
  {
    v21 = __src;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(__src, (const void *)a1, 0x198uLL);
    memcpy((void *)a1, __dst, 0x198uLL);
    v22 = *(_OWORD *)((char *)v21 + 8);
    *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v22;
    v23 = v21[20];
    v21[20] = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 320) = v23;
    *(_DWORD *)(a1 + 372) = *((_DWORD *)v21 + 93);
    *(_BYTE *)(a1 + 266) = *((_BYTE *)v21 + 266);
    v25 = *(_OWORD *)((char *)v21 + 280);
    v24 = *(_OWORD *)((char *)v21 + 296);
    *(_DWORD *)(a1 + 312) = *((_DWORD *)v21 + 78);
    *(_OWORD *)(a1 + 280) = v25;
    *(_OWORD *)(a1 + 296) = v24;
    ++*(_DWORD *)(a1 + 300);
    v26 = *(_OWORD *)((char *)v21 + 200);
    v27 = *(_OWORD *)((char *)v21 + 216);
    *(_QWORD *)(a1 + 232) = *((_QWORD *)v21 + 29);
    *(_OWORD *)(a1 + 216) = v27;
    *(_OWORD *)(a1 + 200) = v26;
    ++*(_DWORD *)(a1 + 220);
    sub_1ACBC858C((uint64_t)v21, (_QWORD *)a1);
    v28 = (_QWORD **)__src;
    *((_DWORD *)__src + 13) = 0;
    if (*((_BYTE *)v28 + 267))
      sub_1ACB68B58(v28);
    sub_1ACBBE904((uint64_t)v28);
    return 0;
  }
  return v20;
}

sqlite3 *__cdecl sqlite3_context_db_handle(sqlite3_context *a1)
{
  if (a1 && *(_QWORD *)a1)
    return *(sqlite3 **)(*(_QWORD *)a1 + 24);
  sub_1ACBBE20C(97935);
  return 0;
}

int sqlite3_vtab_nochange(sqlite3_context *a1)
{
  int v2;

  if (a1)
  {
    if (*(_QWORD *)a1)
      return (~*(unsigned __int16 *)(*(_QWORD *)a1 + 20) & 0x401) == 0;
    v2 = 97237;
  }
  else
  {
    v2 = 97960;
  }
  sub_1ACBBE20C(v2);
  return 0;
}

int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1ACBC7734((uint64_t)pVal, (uint64_t *)ppOut, 0);
}

uint64_t sub_1ACBC7734(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (!a2)
    return sub_1ACBBE20C(97992);
  *a2 = 0;
  if (!a1)
    return 21;
  if ((*(_WORD *)(a1 + 20) & 0x1000) != 0 && *(uint64_t (**)(uint64_t))(a1 + 48) == sub_1ACBF78CC)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *v6;
    if (a3)
    {
      v4 = sub_1ACB8B8D4(*v6);
      goto LABEL_11;
    }
    v14 = sub_1ACB8A058((unsigned __int8 *)*v6);
    if ((_DWORD)v14 != 16)
    {
      v4 = v14;
      if ((_DWORD)v14)
        goto LABEL_23;
      while (1)
      {
        v15 = *(_QWORD *)(v7 + 136);
        if (*(_BYTE *)(v15 + 8))
          break;
        v16 = sub_1ACB8A3D0(v7, bswap32(*(_DWORD *)(*(_QWORD *)(v15 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v15 + 96)+ 2 * *(unsigned __int16 *)(v7 + 86))) & *(_WORD *)(v15 + 26)))));
        if ((_DWORD)v16)
        {
          v4 = v16;
          goto LABEL_23;
        }
      }
    }
    v4 = 0;
LABEL_23:
    if (*(_BYTE *)*v6)
      return 101;
LABEL_11:
    if ((_DWORD)v4)
      return v4;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v8 = *v6;
    sub_1ACBEF184(*v6);
    v9 = *(_DWORD *)(v8 + 64);
    v10 = *v6;
    v11 = *(unsigned __int16 *)(*v6 + 68);
    v12 = *(_QWORD *)(*v6 + 56);
    v13 = *(_DWORD *)(*(_QWORD *)(*v6 + 136) + 88) - v12;
    if (v11 > v13)
      v11 = v13 & ~(v13 >> 31);
    *((_QWORD *)&v21 + 1) = *(_QWORD *)(*v6 + 56);
    if (v11 >= v9)
    {
      WORD2(v22) = 16400;
      LODWORD(v22) = v9;
    }
    else
    {
      v4 = sub_1ACB934EC(v10, 0, v9, (uint64_t)&v21);
      if ((_DWORD)v4)
      {
LABEL_33:
        if (WORD2(v22) & 0x9000 | v23)
          sub_1ACBF2A04((uint64_t)&v21);
        return v4;
      }
      v12 = *((_QWORD *)&v21 + 1);
    }
    v20 = 0;
    v17 = v6[1];
    v18 = *(unsigned __int8 *)(v12 + 1);
    if ((v18 & 0x80) != 0)
    {
      v19 = (sub_1ACBF3F64((char *)(v12 + 1), &v20) + 1);
      v18 = v20;
    }
    else
    {
      v20 = *(unsigned __int8 *)(v12 + 1);
      v19 = 2;
    }
    sub_1ACB8A864((char *)(v12 + v19), v18, v17);
    *(_BYTE *)(v17 + 22) = *(_BYTE *)(*(_QWORD *)(v17 + 24) + 100);
    if ((*(_BYTE *)(v17 + 21) & 0x40) != 0 && sub_1ACBC6854((int *)v17))
    {
      v4 = 7;
    }
    else
    {
      v4 = 0;
      *a2 = v17;
    }
    goto LABEL_33;
  }
  return 1;
}

int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1ACBC7734((uint64_t)pVal, (uint64_t *)ppOut, 1);
}

void *sub_1ACBC794C(uint64_t a1, signed int a2)
{
  uint64_t v2;
  void *result;

  v2 = *(_QWORD *)(a1 + 16);
  if (a2 <= 0)
  {
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
      sub_1ACBF2A54(*(int **)(a1 + 16));
    else
      *(_WORD *)(v2 + 20) = 1;
    result = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  else
  {
    if (*(_DWORD *)(v2 + 32) >= a2)
    {
      result = *(void **)(v2 + 40);
      *(_QWORD *)(v2 + 8) = result;
    }
    else
    {
      sub_1ACB7E454(*(_QWORD *)(a1 + 16), a2, 0);
      result = *(void **)(v2 + 8);
    }
    *(_WORD *)(v2 + 20) = 0x8000;
    *(_QWORD *)v2 = *(_QWORD *)(a1 + 8);
    if (result)
    {
      bzero(result, a2);
      return *(void **)(v2 + 8);
    }
  }
  return result;
}

void *__cdecl sqlite3_get_auxdata(sqlite3_context *a1, int N)
{
  uint64_t v2;

  if (!a1)
  {
    sub_1ACBBE20C(98133);
    return 0;
  }
  v2 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 384);
  if (!v2)
    return 0;
  while (*(_DWORD *)(v2 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v2 != *((_DWORD *)a1 + 8))
  {
    v2 = *(_QWORD *)(v2 + 24);
    if (!v2)
      return 0;
  }
  return *(void **)(v2 + 8);
}

void sqlite3_set_auxdata(sqlite3_context *a1, int N, void *a3, void (__cdecl *a4)(void *))
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD);
  int v11;
  void (__cdecl *v12)(void *);

  if (!a1)
  {
    sub_1ACBBE20C(98172);
    return;
  }
  v7 = (uint64_t *)*((_QWORD *)a1 + 3);
  v8 = v7[48];
  v12 = a4;
  if (v8)
  {
    while (*(_DWORD *)(v8 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v8 != *((_DWORD *)a1 + 8))
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        goto LABEL_3;
    }
    v10 = *(void (**)(_QWORD))(v8 + 16);
    if (v10)
    {
      v10(*(_QWORD *)(v8 + 8));
      a4 = v12;
    }
    goto LABEL_16;
  }
LABEL_3:
  if (*v7)
    v9 = sub_1ACBE1124(*v7, 0x20uLL);
  else
    v9 = sub_1ACB5D828(32);
  v8 = v9;
  a4 = v12;
  if (v9)
  {
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    v11 = *((_DWORD *)a1 + 9);
    *(_DWORD *)v9 = *((_DWORD *)a1 + 8);
    *(_DWORD *)(v9 + 4) = N;
    *(_QWORD *)(v9 + 24) = v7[48];
    v7[48] = v9;
    if (!v11)
      *((_DWORD *)a1 + 9) = -1;
LABEL_16:
    *(_QWORD *)(v8 + 8) = a3;
    *(_QWORD *)(v8 + 16) = a4;
    return;
  }
  if (v12)
    ((void (*)(void *))v12)(a3);
}

int sqlite3_aggregate_count(sqlite3_context *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    v1 = *((_QWORD *)a1 + 2);
    if (v1)
    {
      v2 = *((_QWORD *)a1 + 1);
      if (v2)
      {
        if (*(_QWORD *)(v2 + 32))
          return *(_DWORD *)(v1 + 16);
      }
    }
  }
  sub_1ACBBE20C(98225);
  return 0;
}

int sqlite3_column_bytes16(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_9;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v8 = *(_QWORD *)a1;
    *(_DWORD *)(v8 + 80) = 25;
    sub_1ACBE938C(v8, 25);
LABEL_9:
    v6 = &qword_1ACCB6E80;
    v7 = 1;
    goto LABEL_13;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) != 1)
  {
    v9 = *((_DWORD *)v6 + 4);
    if (!a1)
      return v9;
    goto LABEL_20;
  }
LABEL_13:
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) != 0)
    {
      v9 = 0;
      if (!a1)
        return v9;
    }
    else
    {
      v9 = sub_1ACBF2B3C((uint64_t)v6, 2);
      if (!a1)
        return v9;
    }
    goto LABEL_20;
  }
  v9 = *((_DWORD *)v6 + 4);
  if ((v7 & 0x400) != 0)
    v9 += *(_DWORD *)v6;
  if (a1)
  {
LABEL_20:
    v10 = *(_QWORD *)a1;
    v11 = *((_DWORD *)a1 + 13);
    if (v11 || (v12 = *(unsigned __int8 *)(v10 + 103), *(_BYTE *)(v10 + 103)))
    {
      v12 = sub_1ACBF2990(v10, v11);
      v10 = *(_QWORD *)a1;
    }
    *((_DWORD *)a1 + 13) = v12;
    v13 = *(_QWORD *)(v10 + 24);
    if (v13)
      xmmword_1ECD3B1D0(v13);
  }
  return v9;
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;

  if (!a1)
    goto LABEL_9;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  v5 = *((_QWORD *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1ACBE938C(v7, 25);
LABEL_9:
    v6 = &qword_1ACCB6E80;
    goto LABEL_11;
  }
  v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  if ((*((_WORD *)v6 + 10) & 0x2000) != 0)
    *((_WORD *)v6 + 10) = *((_WORD *)v6 + 10) & 0x9FFF | 0x4000;
LABEL_11:
  if (a1)
  {
    v8 = *(_QWORD *)a1;
    v9 = *((_DWORD *)a1 + 13);
    if (v9 || (v10 = *(unsigned __int8 *)(v8 + 103), *(_BYTE *)(v8 + 103)))
    {
      v10 = sub_1ACBF2990(v8, v9);
      v8 = *(_QWORD *)a1;
    }
    *((_DWORD *)a1 + 13) = v10;
    v11 = *(_QWORD *)(v8 + 24);
    if (v11)
      xmmword_1ECD3B1D0(v11);
  }
  return (sqlite3_value *)v6;
}

char *sub_1ACBC7DC0(uint64_t *a1, unsigned int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v26;

  if (!a1)
  {
    sub_1ACBBE20C(98479);
    return 0;
  }
  if ((a2 & 0x80000000) != 0)
    return 0;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 24);
  if (v9)
    xmmword_1ECD3B1C0(v9);
  v10 = (*((unsigned __int16 *)a1 + 134) >> 2) & 3;
  if (v10)
  {
    if (a4 <= 0)
    {
      v11 = v10 == 1 ? 8 : 4;
      if (v11 > a2)
      {
        v12 = a2 + 8 * v10 - 8;
        if (a3)
        {
          v13 = (char *)&unk_1ACCB6E06 + 2 * byte_1ACCB6DFA[v12];
          v14 = *(_QWORD *)(v8 + 24);
          if (!v14)
            return v13;
        }
        else
        {
          v13 = off_1E5C73A80[v12];
          v14 = *(_QWORD *)(v8 + 24);
          if (!v14)
            return v13;
        }
        goto LABEL_37;
      }
    }
    goto LABEL_35;
  }
  v15 = *((unsigned __int16 *)a1 + 130);
  if (v15 > a2)
  {
    v16 = *(unsigned __int8 *)(v8 + 103);
    v17 = a2 + v15 * a4;
    v18 = a1[19];
    if (a3)
    {
      if (!v18)
        goto LABEL_32;
      v19 = v18 + (v17 << 6);
      v20 = *(unsigned __int16 *)(v19 + 20);
      if ((~v20 & 0x202) != 0 || *(_BYTE *)(v19 + 22) != 2)
      {
        if ((v20 & 1) == 0)
        {
          v21 = 2;
LABEL_31:
          v13 = (char *)sub_1ACBF2B64((int *)(v18 + (v17 << 6)), v21);
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      if (!v18)
        goto LABEL_32;
      v22 = v18 + (v17 << 6);
      v23 = *(unsigned __int16 *)(v22 + 20);
      if ((~v23 & 0x202) != 0 || *(_BYTE *)(v22 + 22) != 1)
      {
        if ((v23 & 1) == 0)
        {
          v21 = 1;
          goto LABEL_31;
        }
LABEL_32:
        v13 = 0;
        goto LABEL_33;
      }
    }
    v13 = *(char **)(v18 + (v17 << 6) + 8);
LABEL_33:
    if (*(unsigned __int8 *)(v8 + 103) <= v16)
      goto LABEL_36;
    v24 = *(_DWORD *)(v8 + 220);
    if (!v24)
    {
      *(_BYTE *)(v8 + 103) = 0;
      *(_DWORD *)(v8 + 424) = 0;
      v26 = *(_DWORD *)(v8 + 432) - 1;
      *(_DWORD *)(v8 + 432) = v26;
      if (!v26)
        LOWORD(v24) = *(_WORD *)(v8 + 438);
      v13 = 0;
      *(_WORD *)(v8 + 436) = v24;
      v14 = *(_QWORD *)(v8 + 24);
      if (v14)
        goto LABEL_37;
      return v13;
    }
  }
LABEL_35:
  v13 = 0;
LABEL_36:
  v14 = *(_QWORD *)(v8 + 24);
  if (v14)
LABEL_37:
    xmmword_1ECD3B1D0(v14);
  return v13;
}

const void *__cdecl sqlite3_column_name16(sqlite3_stmt *a1, int N)
{
  return sub_1ACBC7DC0((uint64_t *)a1, N, 1, 0);
}

const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 0, 1);
}

const void *__cdecl sqlite3_column_decltype16(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 1, 1);
}

const char *__cdecl sqlite3_column_database_name(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 0, 2);
}

const void *__cdecl sqlite3_column_database_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 1, 2);
}

const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 0, 3);
}

const void *__cdecl sqlite3_column_table_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 1, 3);
}

const char *__cdecl sqlite3_column_origin_name(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 0, 4);
}

const void *__cdecl sqlite3_column_origin_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1ACBC7DC0((uint64_t *)a1, a2, 1, 4);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return sub_1ACBA0CE0((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, 0);
}

int sqlite3_bind_pointer(sqlite3_stmt *a1, int a2, void *a3, const char *a4, void (__cdecl *a5)(void *))
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void (__cdecl *v15)(void *);
  uint64_t v16;

  if (a2 <= 0)
  {
    if (a1)
    {
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v11 = 25;
        *(_DWORD *)(v12 + 80) = 25;
        sub_1ACBE938C(v12, 25);
        return v11;
      }
      sqlite3_log(21, "API called with finalized prepared statement", a3, a4, a5);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3, a4, a5);
    }
    return 25;
  }
  v9 = (a2 - 1);
  v10 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if (v10)
  {
    v11 = v10;
    if (a5)
      ((void (*)(void *))a5)(a3);
  }
  else
  {
    v13 = *((_QWORD *)a1 + 16) + (v9 << 6);
    sub_1ACBF2A04(v13);
    v14 = &byte_1ACCBEAEE;
    if (a4)
      v14 = a4;
    *(_QWORD *)v13 = v14;
    *(_QWORD *)(v13 + 8) = a3;
    *(_WORD *)(v13 + 20) = 6657;
    *(_BYTE *)(v13 + 23) = 112;
    v15 = (void (__cdecl *)(void *))nullsub_7;
    *(_BYTE *)(v13 + 56) = 0;
    if (a5)
      v15 = a5;
    *(_QWORD *)(v13 + 48) = v15;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v16)
      xmmword_1ECD3B1D0(v16);
    return 0;
  }
  return v11;
}

int sqlite3_bind_text64(sqlite3_stmt *a1, int a2, const char *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *), unsigned __int8 encoding)
{
  unsigned int v6;

  if (encoding == 4)
    v6 = 2;
  else
    v6 = encoding;
  if (encoding != 1)
    a4 &= ~1uLL;
  return sub_1ACBA0CE0((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, v6);
}

int sqlite3_bind_value(sqlite3_stmt *a1, int a2, const sqlite3_value *a3)
{
  __int16 v5;
  int result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;

  if (!a3)
  {
    sub_1ACBBE20C(97202);
LABEL_5:
    if (a2 > 0)
    {
      v7 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
      if (!v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        if (v8)
          xmmword_1ECD3B1D0(v8);
        return 0;
      }
      return v7;
    }
    if (a1)
    {
      v9 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v7 = 25;
        *(_DWORD *)(v9 + 80) = 25;
        sub_1ACBE938C(v9, 25);
        return v7;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    return 25;
  }
  v5 = *((_WORD *)a3 + 10);
  switch(byte_1ACCB6445[v5 & 0x3F])
  {
    case 1u:
      return sqlite3_bind_int64(a1, a2, *(_QWORD *)a3);
    case 2u:
      if ((v5 & 8) != 0)
        v10 = *(double *)a3;
      else
        v10 = (double)*(uint64_t *)a3;
      return sqlite3_bind_double(a1, a2, v10);
    case 3u:
      v11 = *((int *)a3 + 4);
      v12 = *((unsigned __int8 *)a3 + 22);
      v13 = (char *)*((_QWORD *)a3 + 1);
      goto LABEL_19;
    case 4u:
      if ((*((_WORD *)a3 + 10) & 0x400) != 0)
      {
        result = sqlite3_bind_zeroblob(a1, a2, *(_DWORD *)a3);
      }
      else
      {
        v11 = *((unsigned int *)a3 + 4);
        if ((v11 & 0x80000000) != 0)
        {
          result = sub_1ACBBE20C(98722);
        }
        else
        {
          v13 = (char *)*((_QWORD *)a3 + 1);
          v12 = 0;
LABEL_19:
          result = sub_1ACBA0CE0((uint64_t *)a1, a2, v13, v11, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL, v12);
        }
      }
      break;
    default:
      goto LABEL_5;
  }
  return result;
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 <= 0)
  {
    if (a1)
    {
      v11 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v6 = 25;
        *(_DWORD *)(v11 + 80) = 25;
        sub_1ACBE938C(v11, 25);
        return v6;
      }
      sqlite3_log(21, "API called with finalized prepared statement", *(_QWORD *)&n);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", *(_QWORD *)&n);
    }
    return 25;
  }
  v5 = (a2 - 1);
  v6 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    v7 = *((_QWORD *)a1 + 16);
    v8 = v7 + (v5 << 6);
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32))
      sub_1ACBF2A04(v7 + (v5 << 6));
    *(_WORD *)(v8 + 20) = 1040;
    v9 = v7 + (v5 << 6);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)v8 = n & ~(n >> 31);
    *(_BYTE *)(v9 + 22) = 1;
    *(_QWORD *)(v9 + 8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v10)
      xmmword_1ECD3B1D0(v10);
    return 0;
  }
  return v6;
}

int sqlite3_bind_zeroblob64(sqlite3_stmt *a1, int a2, sqlite3_uint64 a3)
{
  uint64_t v6;
  unsigned int v7;
  int v9;
  uint64_t v10;

  if (!a1)
    return sub_1ACBBE20C(98937);
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)(v6 + 24))
  {
    xmmword_1ECD3B1C0(*(_QWORD *)(v6 + 24));
    v6 = *(_QWORD *)a1;
  }
  if (*(int *)(v6 + 136) >= a3)
  {
    v7 = sqlite3_bind_zeroblob(a1, a2, a3);
    v6 = *(_QWORD *)a1;
    if (!v7 && !*(_BYTE *)(v6 + 103))
    {
      v9 = 0;
      v10 = *(_QWORD *)(v6 + 24);
      if (!v10)
        return v9;
      goto LABEL_12;
    }
  }
  else
  {
    v7 = 18;
  }
  v9 = sub_1ACBF2990(v6, v7);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v10)
LABEL_12:
    xmmword_1ECD3B1D0(v10);
  return v9;
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  sqlite3_stmt *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v2)
    {
      xmmword_1ECD3B1C0(v2);
      v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
      LODWORD(v1) = *((_DWORD *)v1 + 8);
      if (v3)
        xmmword_1ECD3B1D0(v3);
    }
    else
    {
      LODWORD(v1) = *((_DWORD *)v1 + 8);
    }
  }
  return (int)v1;
}

int sqlite3_transfer_bindings(sqlite3_stmt *a1, sqlite3_stmt *a2)
{
  if (!a1 || !a2)
    return sub_1ACBBE20C(99031);
  if (*((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8))
    return 1;
  if (*((_DWORD *)a2 + 93))
    *((_WORD *)a2 + 134) = *((_WORD *)a2 + 134) & 0xFFFC | 1;
  if (*((_DWORD *)a1 + 93))
    *((_WORD *)a1 + 134) = *((_WORD *)a1 + 134) & 0xFFFC | 1;
  sub_1ACBC858C((uint64_t)a1, a2);
  return 0;
}

uint64_t sub_1ACBC858C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *(_QWORD *)(*a2 + 24);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (*(int *)(a1 + 32) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v11 = a2[16] + v5;
      v12 = *(_QWORD *)(a1 + 128);
      if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32))
        sub_1ACBF2A04(a2[16] + v5);
      v7 = *(_OWORD *)(v12 + v5);
      v8 = *(_OWORD *)(v12 + v5 + 16);
      v9 = *(_OWORD *)(v12 + v5 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + v5 + 32);
      *(_OWORD *)(v11 + 48) = v9;
      *(_OWORD *)v11 = v7;
      *(_OWORD *)(v11 + 16) = v8;
      v10 = v12 + v5;
      *(_WORD *)(v10 + 20) = 1;
      *(_DWORD *)(v10 + 32) = 0;
      ++v6;
      v5 += 64;
    }
    while (v6 < *(int *)(a1 + 32));
  }
  result = *(_QWORD *)(*a2 + 24);
  if (result)
    return xmmword_1ECD3B1D0(result);
  return result;
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  sqlite3 *v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v2 = *(sqlite3 **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v3)
  {
    xmmword_1ECD3B1C0(v3);
    v2 = *(sqlite3 **)a1;
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v4)
      xmmword_1ECD3B1D0(v4);
  }
  return v2;
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (!pStmt)
    return 1;
  v2 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
  if (!v2)
    return (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  xmmword_1ECD3B1C0(v2);
  v3 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
  v4 = (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  if (v3)
    xmmword_1ECD3B1D0(v3);
  return v4;
}

int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)pStmt;
  if (pStmt)
  {
    v2 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    if (v2)
    {
      xmmword_1ECD3B1C0(v2);
      v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
      LODWORD(v1) = (v1[134] >> 2) & 3;
      if (v3)
        xmmword_1ECD3B1D0(v3);
    }
    else
    {
      LODWORD(v1) = (v1[134] >> 2) & 3;
    }
  }
  return (int)v1;
}

uint64_t sqlite3_stmt_explain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v16;
  unsigned int v17;

  if (!a1)
    return sub_1ACBBE20C(99093);
  v8 = a2;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v10)
    xmmword_1ECD3B1C0(v10);
  v11 = *(unsigned __int16 *)(a1 + 268);
  if (((v11 >> 2) & 3) != v8)
  {
    if (v8 <= 2 && *(char *)(a1 + 266) < 0)
    {
      if (*(_BYTE *)(a1 + 267) == 1)
      {
        if (*(int *)(a1 + 36) >= 10 && (v8 != 2 || (v11 & 0x100) != 0))
        {
          v12 = 0;
          v17 = v11 & 0xFFFFFFF3 | (4 * (v8 & 3));
        }
        else
        {
          *(_WORD *)(a1 + 268) = v11 & 0xFFF3 | (4 * (v8 & 3));
          v12 = sub_1ACBC74A8(a1, a2, a3, a4, a5, a6, a7, a8);
          v17 = *(_WORD *)(a1 + 268) & 0xFEFF | ((v8 == 2) << 8);
        }
        *(_WORD *)(a1 + 268) = v17;
        v13 = (v17 >> 2) & 3;
        if (v13)
          goto LABEL_6;
      }
      else
      {
        v12 = 5;
        v13 = (v11 >> 2) & 3;
        if (v13)
          goto LABEL_6;
      }
    }
    else
    {
      v12 = 1;
      v13 = (v11 >> 2) & 3;
      if (v13)
        goto LABEL_6;
    }
LABEL_11:
    v14 = *(_WORD *)(a1 + 262);
    goto LABEL_12;
  }
  v12 = 0;
  v13 = (v11 >> 2) & 3;
  if (!v13)
    goto LABEL_11;
LABEL_6:
  v14 = (4 * v13) ^ 0xC;
LABEL_12:
  *(_WORD *)(a1 + 260) = v14;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v16)
    xmmword_1ECD3B1D0(v16);
  return v12;
}

int sqlite3_stmt_busy(sqlite3_stmt *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)a1;
  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v2)
    {
      xmmword_1ECD3B1C0(v2);
      v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
      LODWORD(v1) = v1[267] == 2;
      if (v3)
        xmmword_1ECD3B1D0(v3);
    }
    else
    {
      LODWORD(v1) = v1[267] == 2;
    }
  }
  return (int)v1;
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;

  if (!a1 || op != 99 && op >= 9)
  {
    sub_1ACBBE20C(99174);
    return 0;
  }
  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (op == 99)
  {
    if (v8)
      xmmword_1ECD3B1C0(v8);
    v11 = 0;
    v7[102] = &v11;
    v7[64] = v7[63];
    sub_1ACBBE904((uint64_t)a1);
    v7[102] = 0;
    v7[64] = v7[65];
    v9 = v7[3];
    if (!v9)
      return v11;
  }
  else
  {
    if (v8)
      xmmword_1ECD3B1C0(v8);
    v10 = (char *)a1 + 4 * op;
    v11 = *((_DWORD *)v10 + 70);
    if (resetFlg)
      *((_DWORD *)v10 + 70) = 0;
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (!v9)
      return v11;
  }
  xmmword_1ECD3B1D0(v9);
  return v11;
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  const char **v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (const char **)pStmt;
  if (pStmt)
  {
    v2 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    if (v2)
    {
      xmmword_1ECD3B1C0(v2);
      v3 = *((_QWORD *)*v1 + 3);
      v1 = (const char **)v1[40];
      if (v3)
        xmmword_1ECD3B1D0(v3);
    }
    else
    {
      return v1[40];
    }
  }
  return (const char *)v1;
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!pStmt)
    return 0;
  v2 = *(_QWORD *)pStmt;
  v3 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
  if (v3 && (xmmword_1ECD3B1C0(v3), v2 = *(_QWORD *)pStmt, (v4 = *(_QWORD *)(*(_QWORD *)pStmt + 24)) != 0))
  {
    xmmword_1ECD3B1C0(v4);
    v2 = *(_QWORD *)pStmt;
    v5 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    v6 = (char *)*((_QWORD *)pStmt + 40);
    if (v5)
    {
      xmmword_1ECD3B1D0(v5);
      v2 = *(_QWORD *)pStmt;
    }
  }
  else
  {
    v6 = (char *)*((_QWORD *)pStmt + 40);
  }
  if (v6)
  {
    v7 = *(_QWORD *)(v2 + 24);
    if (v7)
      xmmword_1ECD3B1C0(v7);
    v6 = (char *)sub_1ACBC8B98(pStmt, v6);
    v2 = *(_QWORD *)pStmt;
    v8 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
    if (v8)
    {
      xmmword_1ECD3B1D0(v8);
      v2 = *(_QWORD *)pStmt;
    }
  }
  v9 = *(_QWORD *)(v2 + 24);
  if (v9)
    xmmword_1ECD3B1D0(v9);
  return v6;
}

_QWORD *sub_1ACBC8B98(_QWORD *a1, char *__s)
{
  char *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v12;
  signed int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;

  v2 = __s;
  v61 = 0;
  v60 = 0;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 136);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = v4;
  if (*(int *)(v3 + 220) < 2)
  {
    if (!*((_DWORD *)a1 + 8))
    {
      if (__s)
      {
        v49 = strlen(__s) & 0x3FFFFFFF;
        if (v49)
          sub_1ACBC290C((uint64_t)&v56, v2, v49);
      }
      goto LABEL_97;
    }
    if (!*__s)
      goto LABEL_97;
    v12 = 1;
    while (1)
    {
      v13 = 0;
      v62 = 0;
      v14 = (unsigned __int8 *)v2;
      while (1)
      {
        v15 = sub_1ACB5D9FC(v14, &v62);
        v16 = v15;
        if (v62 == 156)
          break;
        v13 += v15;
        v14 += v15;
        if (!*v14)
        {
          v16 = 0;
          break;
        }
      }
      if (v13 <= 0)
      {
        if (v13)
          sub_1ACBBE20C(32736);
      }
      else
      {
        v17 = v60;
        if ((int)v60 + v13 >= v58)
        {
          sub_1ACBC290C((uint64_t)&v56, v2, v13);
        }
        else
        {
          LODWORD(v60) = v60 + v13;
          memcpy((char *)v57 + v17, v2, v13);
        }
      }
      if (!v16)
        goto LABEL_97;
      v18 = &v2[v13];
      if (*v18 == 63)
      {
        if (v16 < 2)
        {
          v61 = v12;
          LODWORD(v19) = v12;
        }
        else
        {
          sub_1ACBFD07C((unsigned __int8 *)v18 + 1, &v61);
          LODWORD(v19) = v61;
        }
      }
      else
      {
        v20 = *(_QWORD *)(*a1 + 24);
        if (v20)
          xmmword_1ECD3B1C0(v20);
        v19 = a1[22];
        if (v19)
        {
          v21 = *(_DWORD *)(v19 + 4);
          v22 = 2;
          do
          {
            v23 = v22;
            v24 = (const char *)(v19 + 4 * v22 + 8);
            if (!strncmp(v24, v18, v16) && !v24[v16])
            {
              LODWORD(v19) = *(_DWORD *)(v19 + 4 * v23);
              goto LABEL_45;
            }
            v22 = *(_DWORD *)(v19 + 4 * v23 + 4) + v23;
          }
          while (v22 < v21);
          LODWORD(v19) = 0;
        }
LABEL_45:
        v25 = *(_QWORD *)(*a1 + 24);
        if (v25)
          xmmword_1ECD3B1D0(v25);
        v61 = v19;
      }
      if ((int)v19 + 1 > v12)
        v12 = v19 + 1;
      v26 = a1[16];
      v27 = (int)v19 - 1;
      v28 = (__int128 *)(v26 + (v27 << 6));
      v29 = *((_WORD *)v28 + 10);
      if ((v29 & 1) != 0)
      {
        v30 = v60;
        if ((int)v60 + 4 >= v58)
        {
          sub_1ACBC290C((uint64_t)&v56, "NULL", 4u);
        }
        else
        {
          LODWORD(v60) = v60 + 4;
          *(_DWORD *)((char *)v57 + v30) = 1280070990;
        }
      }
      else if ((v29 & 0x24) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v56, "%lld");
      }
      else if ((v29 & 8) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v56, "%!.15g", *(_QWORD *)v28);
      }
      else
      {
        if ((v29 & 2) != 0)
        {
          v32 = *(unsigned __int8 *)(v3 + 100);
          if (v32 != 1)
          {
            v54 = 0u;
            v55 = 0u;
            v52 = 0u;
            *(_QWORD *)&v53 = 0;
            *((_QWORD *)&v53 + 1) = v3;
            sub_1ACB57870((uint64_t)&v52, *(char **)(v26 + (v27 << 6) + 8), *(int *)(v26 + (v27 << 6) + 16), v32, 0);
            if ((BYTE4(v53) & 2) == 0)
            {
              BYTE6(v53) = 1;
              goto LABEL_79;
            }
            if (BYTE6(v53) == 1)
            {
LABEL_79:
              v28 = &v52;
            }
            else
            {
              v28 = &v52;
              if (sub_1ACBB0FEC((int *)&v52, 1) == 7)
              {
                BYTE4(v60) = 7;
                v58 = 0;
                goto LABEL_79;
              }
            }
          }
          v42 = *((unsigned int *)v28 + 4);
          v43 = *((_QWORD *)v28 + 1);
          if ((int)v42 <= 2048)
          {
LABEL_84:
            v45 = *((unsigned int *)v28 + 4);
          }
          else
          {
            v44 = 2048;
            while ((*(_BYTE *)(v43 + v44) & 0xC0) == 0x80)
            {
              if (v42 == ++v44)
                goto LABEL_84;
            }
            v45 = v44;
          }
          sqlite3_str_appendf((sqlite3_str *)&v56, "'%.*q'", v45, v43);
          v46 = *((_DWORD *)v28 + 4);
          v47 = __OFSUB__(v46, (_DWORD)v45);
          v48 = v46 - v45;
          if (!((v48 < 0) ^ v47 | (v48 == 0)))
            sqlite3_str_appendf((sqlite3_str *)&v56, "/*+%d bytes*/", v48);
          if (v32 != 1 && WORD2(v53) & 0x9000 | v54)
            sub_1ACBF2A04((uint64_t)&v52);
          goto LABEL_20;
        }
        if ((*((_WORD *)v28 + 10) & 0x400) != 0)
        {
          sqlite3_str_appendf((sqlite3_str *)&v56, "zeroblob(%d)");
        }
        else
        {
          v31 = v60;
          if ((int)v60 + 2 >= v58)
          {
            sub_1ACBC290C((uint64_t)&v56, "x'", 2u);
          }
          else
          {
            LODWORD(v60) = v60 + 2;
            *(_WORD *)((char *)v57 + v31) = 10104;
          }
          v33 = v26 + (v27 << 6);
          v36 = *(_DWORD *)(v33 + 16);
          v35 = (int *)(v33 + 16);
          v34 = v36;
          if (v36 >= 2048)
            v37 = 2048;
          else
            v37 = v34;
          v51 = v37;
          if (v34 >= 1)
          {
            v38 = 0;
            v39 = (_QWORD *)(v26 + (v27 << 6) + 8);
            if (v37 <= 1)
              v40 = 1;
            else
              v40 = v37;
            do
              sqlite3_str_appendf((sqlite3_str *)&v56, "%02x", *(unsigned __int8 *)(*v39 + v38++));
            while (v40 != v38);
          }
          v41 = v60;
          if ((int)v60 + 1 >= v58)
          {
            sub_1ACBC290C((uint64_t)&v56, "'", 1u);
          }
          else
          {
            LODWORD(v60) = v60 + 1;
            *((_BYTE *)v57 + v41) = 39;
          }
          if (*v35 > v51)
            sqlite3_str_appendf((sqlite3_str *)&v56, "/*+%d bytes*/");
        }
      }
LABEL_20:
      v2 = &v18[v16];
      if (!*v2)
        goto LABEL_97;
    }
  }
  v5 = *__s;
  if (*__s)
  {
    do
    {
      v6 = 1;
      do
      {
        v7 = v6;
        if (v5 == 10)
          break;
        v5 = v2[v6++];
      }
      while (v2[v7]);
      v8 = v60;
      if ((int)v60 + 3 >= v58)
      {
        sub_1ACBC290C((uint64_t)&v56, "-- ", 3u);
        if ((int)v7 <= 0)
        {
LABEL_14:
          if ((_DWORD)v7)
            sub_1ACBBE20C(32736);
          goto LABEL_5;
        }
      }
      else
      {
        LODWORD(v60) = v60 + 3;
        v9 = (char *)v57 + v8;
        v9[2] = 32;
        *(_WORD *)v9 = 11565;
        if ((int)v7 <= 0)
          goto LABEL_14;
      }
      v10 = v60;
      if ((int)v60 + (int)v7 < v58)
      {
        LODWORD(v60) = v60 + v7;
        memcpy((char *)v57 + v10, v2, v7);
      }
      else
      {
        sub_1ACBC290C((uint64_t)&v56, v2, v7);
      }
LABEL_5:
      v2 += v7;
      v5 = *v2;
    }
    while (*v2);
  }
LABEL_97:
  if (BYTE4(v60))
  {
    if ((v60 & 0x40000000000) != 0)
    {
      if (v57)
        sub_1ACBE0F9C(v56, v57);
    }
    return 0;
  }
  if (!v57)
    return v57;
  *((_BYTE *)v57 + v60) = 0;
  if (!v59 || (v60 & 0x40000000000) != 0)
    return v57;
  return sub_1ACBE13A0((uint64_t *)&v56);
}

const char *__cdecl sqlite3_normalized_sql(sqlite3_stmt *pStmt)
{
  const char *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  int i;
  uint64_t v40;
  int v41;
  const char *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(void *);
  uint64_t v54;
  _QWORD *v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;

  if (!pStmt)
    return 0;
  v2 = (const char *)*((_QWORD *)pStmt + 41);
  if (v2)
    return v2;
  v3 = (unsigned __int8 *)*((_QWORD *)pStmt + 40);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)pStmt;
  v5 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
  if (v5)
  {
    xmmword_1ECD3B1C0(v5);
    v4 = *(_QWORD *)pStmt;
    v3 = (unsigned __int8 *)*((_QWORD *)pStmt + 40);
  }
  v60 = -1;
  v6 = (unsigned int *)&unk_1EECAC608;
  if (!sqlite3_initialize())
  {
    v7 = sub_1ACB5D828(32);
    if (v7)
    {
      v6 = (unsigned int *)v7;
      if (v4)
        v8 = *(_DWORD *)(v4 + 136);
      else
        v8 = 2147483645;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 20) = v8;
      *(_DWORD *)(v7 + 24) = 0;
      *(_WORD *)(v7 + 28) = 0;
    }
    else
    {
      v6 = (unsigned int *)&unk_1EECAC608;
    }
  }
  v10 = *v3;
  if (!*v3)
  {
LABEL_113:
    v51 = v6[6];
    if ((int)v51 + 1 < v6[4])
    {
      v6[6] = v51 + 1;
      *(_BYTE *)(*((_QWORD *)v6 + 1) + v51) = 59;
      goto LABEL_115;
    }
    sub_1ACBC290C((uint64_t)v6, ";", 1u);
    if (v6 == (unsigned int *)&unk_1EECAC608)
      goto LABEL_128;
LABEL_116:
    v52 = *((_QWORD *)v6 + 1);
    if (v52 && (*(_BYTE *)(v52 + v6[6]) = 0, v6[5]) && (*((_BYTE *)v6 + 29) & 4) == 0)
      v2 = (const char *)sub_1ACBE13A0((uint64_t *)v6);
    else
      v2 = (const char *)*((_QWORD *)v6 + 1);
    v53 = (void (**)(void *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v6);
      v6 = (unsigned int *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_129;
      v53 = (void (**)(void *))&xmmword_1ECD3B1D0;
    }
    (*v53)(v6);
    goto LABEL_129;
  }
  v55 = (_QWORD *)v4;
  v56 = 0;
  v11 = 0;
  v58 = 0;
  v12 = 0;
  v13 = 0;
  v14 = -1;
  v15 = v3;
  v57 = v3;
  do
  {
    if (*((_BYTE *)v6 + 28))
      break;
    if (v14 != 183)
      v12 = v14;
    v16 = sub_1ACB5D9FC(v15, &v60);
    v14 = v60;
    if (v16 < 1)
      break;
    v17 = v16;
    if (v60 > 116)
    {
      switch(v60)
      {
        case 117:
        case 153:
        case 154:
        case 155:
        case 156:
          goto LABEL_26;
        case 121:
          if (v12 == 45 || v12 == 19)
          {
            v25 = v6[6];
            if ((int)v25 + 5 >= v6[4])
            {
              sub_1ACBC290C((uint64_t)v6, " NULL", 5u);
            }
            else
            {
              v6[6] = v25 + 5;
              v26 = *((_QWORD *)v6 + 1) + v25;
              *(_BYTE *)(v26 + 4) = 76;
              *(_DWORD *)v26 = 1280658976;
            }
            goto LABEL_19;
          }
LABEL_26:
          v18 = v6[6];
          if ((int)v18 + 1 < v6[4])
          {
            v6[6] = v18 + 1;
            v19 = *((_QWORD *)v6 + 1);
            v20 = 63;
            goto LABEL_28;
          }
          v23 = (uint64_t)v6;
          v24 = "?";
          break;
        case 138:
          v11 = 0;
          goto LABEL_44;
        case 183:
          goto LABEL_19;
        default:
          goto LABEL_44;
      }
LABEL_38:
      sub_1ACBC290C(v23, v24, 1u);
      goto LABEL_19;
    }
    switch(v60)
    {
      case 22:
        v29 = v6[6];
        if (v12 == 49)
          v11 = v6[6];
        v30 = v56;
        if (v12 == 49)
          v30 = v58 + 1;
        v56 = v30;
        if ((int)v29 + 1 >= v6[4])
        {
          sub_1ACBC290C((uint64_t)v6, "(", 1u);
        }
        else
        {
          v6[6] = v29 + 1;
          *(_BYTE *)(*((_QWORD *)v6 + 1) + v29) = 40;
        }
        ++v58;
        goto LABEL_19;
      case 23:
        if (v11 < 1)
        {
          v31 = v58;
        }
        else
        {
          v31 = v58;
          if (v58 == v56)
          {
            v32 = v11 + 1;
            v6[6] = v11 + 1;
            v33 = v11 + 6;
            if (v11 + 6 >= v6[4])
            {
              sub_1ACBC290C((uint64_t)v6, "?,?,?", 5u);
              v11 = 0;
            }
            else
            {
              v11 = 0;
              v6[6] = v33;
              v34 = *((_QWORD *)v6 + 1) + v32;
              *(_BYTE *)(v34 + 4) = 63;
              *(_DWORD *)v34 = 742337599;
            }
          }
        }
        v58 = v31 - 1;
        v18 = v6[6];
        if ((int)v18 + 1 < v6[4])
        {
          v6[6] = v18 + 1;
          v19 = *((_QWORD *)v6 + 1);
          v20 = 41;
LABEL_28:
          *(_BYTE *)(v19 + v18) = v20;
          goto LABEL_19;
        }
        v23 = (uint64_t)v6;
        v24 = ")";
        goto LABEL_38;
      case 59:
        v21 = v6[6];
        if ((char)byte_1ACCB6548[v10] < 0)
        {
          v35 = (char *)sub_1ACBE1124((uint64_t)v55, v16 + 1);
          if (!v35)
          {
            v3 = v57;
            v11 = 0;
            goto LABEL_19;
          }
          v36 = v35;
          memcpy(v35, v15, v17);
          v36[v17] = 0;
          v59 = 0;
          v37 = *v36;
          if ((char)byte_1ACCB6548[*v36] < 0)
          {
            v38 = 0;
            if (v37 == 91)
              v37 = 93;
            for (i = 1; ; ++i)
            {
              v40 = i;
              v41 = v36[i];
              if (v41 == v37)
              {
                ++i;
                LOBYTE(v41) = v37;
                if (v36[v40 + 1] != v37)
                  break;
              }
              v36[v38++] = v41;
            }
            v36[v38] = 0;
          }
          if (*v15 == 34)
          {
            v42 = (const char *)*((_QWORD *)pStmt + 42);
            if (v42)
            {
              while (strcmp(v36, v42 + 8))
              {
                v42 = *(const char **)v42;
                if (!v42)
                  goto LABEL_74;
              }
              v49 = v6[6];
              if ((int)v49 + 1 >= v6[4])
              {
                sub_1ACBC290C((uint64_t)v6, "?", 1u);
              }
              else
              {
                v6[6] = v49 + 1;
                *(_BYTE *)(*((_QWORD *)v6 + 1) + v49) = 63;
              }
              v3 = v57;
              sub_1ACBE0F9C(v55, v36);
              v11 = 0;
              goto LABEL_19;
            }
          }
LABEL_74:
          v43 = strlen(v36);
          v44 = v43 & 0x3FFFFFFF;
          if (sub_1ACB5D9FC((unsigned __int8 *)v36, &v59) == (v43 & 0x3FFFFFFF) && v59 == 59)
          {
            v45 = v6[6];
            if ((_DWORD)v45)
            {
              v46 = *((_QWORD *)v6 + 1);
              if ((byte_1ACCB6548[*(unsigned __int8 *)(v46 + (v45 - 1))] & 0x46) != 0)
              {
                if ((int)v45 + 1 >= v6[4])
                {
                  sub_1ACBC290C((uint64_t)v6, " ", 1u);
                }
                else
                {
                  v6[6] = v45 + 1;
                  *(_BYTE *)(v46 + v45) = 32;
                }
              }
            }
            if (v44)
            {
              v50 = v6[6];
              if (v50 + v44 >= v6[4])
              {
                sub_1ACBC290C((uint64_t)v6, v36, v44);
              }
              else
              {
                v6[6] = v50 + v44;
                memcpy((void *)(*((_QWORD *)v6 + 1) + v50), v36, v43 & 0x3FFFFFFF);
              }
            }
          }
          else
          {
            sqlite3_str_appendf((sqlite3_str *)v6, "\"%w\"", v36);
          }
          sub_1ACBE0F9C(v55, v36);
        }
        else
        {
          if ((_DWORD)v21)
          {
            v22 = *((_QWORD *)v6 + 1);
            if ((byte_1ACCB6548[*(unsigned __int8 *)(v22 + (v21 - 1))] & 0x46) != 0)
            {
              if ((int)v21 + 1 >= v6[4])
              {
                sub_1ACBC290C((uint64_t)v6, " ", 1u);
              }
              else
              {
                v6[6] = v21 + 1;
                *(_BYTE *)(v22 + v21) = 32;
              }
            }
          }
          v48 = v6[6];
          if (v48 + v17 >= v6[4])
          {
            sub_1ACBC290C((uint64_t)v6, v15, v17);
          }
          else
          {
            v6[6] = v48 + v17;
            memcpy((void *)(*((_QWORD *)v6 + 1) + v48), v15, v17);
          }
        }
        if (v21 < v6[6])
        {
          do
          {
            *(_BYTE *)(*((_QWORD *)v6 + 1) + v21) = byte_1ACCB6333[*(unsigned __int8 *)(*((_QWORD *)v6 + 1) + v21)];
            ++v21;
          }
          while (v21 < v6[6]);
        }
        v11 = 0;
        break;
      default:
LABEL_44:
        if ((byte_1ACCB6548[v10] & 0x46) != 0)
        {
          v27 = v6[6];
          if ((_DWORD)v27)
          {
            v28 = *((_QWORD *)v6 + 1);
            if ((byte_1ACCB6548[*(unsigned __int8 *)(v28 + (v27 - 1))] & 0x46) != 0)
            {
              if ((int)v27 + 1 >= v6[4])
              {
                sub_1ACBC290C((uint64_t)v6, " ", 1u);
              }
              else
              {
                v6[6] = v27 + 1;
                *(_BYTE *)(v28 + v27) = 32;
              }
            }
          }
        }
        v47 = v6[6];
        if (v47 + v17 >= v6[4])
        {
          sub_1ACBC290C((uint64_t)v6, v15, v17);
        }
        else
        {
          v6[6] = v47 + v17;
          memcpy((void *)(*((_QWORD *)v6 + 1) + v47), v15, v17);
        }
        if (v47 < v6[6])
        {
          do
          {
            *(_BYTE *)(*((_QWORD *)v6 + 1) + v47) &= ~byte_1ACCB6548[*(unsigned __int8 *)(*((_QWORD *)v6 + 1) + v47)] | 0xDF;
            ++v47;
          }
          while (v47 < v6[6]);
        }
        break;
    }
    v3 = v57;
LABEL_19:
    v13 += v17;
    v15 = &v3[v13];
    v10 = *v15;
  }
  while (*v15);
  if (v14 != 1)
    goto LABEL_113;
LABEL_115:
  if (v6 != (unsigned int *)&unk_1EECAC608)
    goto LABEL_116;
LABEL_128:
  v2 = 0;
LABEL_129:
  *((_QWORD *)pStmt + 41) = v2;
  v54 = *(_QWORD *)(*(_QWORD *)pStmt + 24);
  if (v54)
  {
    xmmword_1ECD3B1D0(v54);
    return (const char *)*((_QWORD *)pStmt + 41);
  }
  return v2;
}

uint64_t sqlite3_preupdate_old(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;

  v4 = *(_QWORD *)(a1 + 368);
  if (!v4 || *(_DWORD *)(v4 + 16) == 18)
  {
    v5 = sub_1ACBBE20C(99287);
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }
  v8 = a2;
  v9 = *(_QWORD *)(v4 + 128);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(v9 + 96);
    if (!*(_WORD *)(v9 + 96))
    {
LABEL_12:
      v5 = 25;
      *(_DWORD *)(a1 + 80) = 25;
      goto LABEL_4;
    }
    v11 = 0;
    v12 = *(unsigned __int16 **)(v9 + 8);
    v13 = v10 << 16;
    while (1)
    {
      v14 = *v12++;
      if (v14 == (unsigned __int16)a2)
        break;
      v11 += 0x10000;
      if (v13 == v11)
        goto LABEL_12;
    }
    v8 = (int)v11 >> 16;
  }
  v5 = 25;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_31;
  v15 = *(_QWORD *)(v4 + 8);
  if ((int)v8 >= *(__int16 *)(v15 + 64))
    goto LABEL_31;
  v16 = *(_QWORD *)(v4 + 72);
  if (v16)
    goto LABEL_17;
  v21 = *(_QWORD *)(v15 + 40);
  sub_1ACBEF184(v21);
  v22 = *(_DWORD *)(v21 + 64);
  if (a1)
    v23 = (char *)sub_1ACBE1124(a1, *(unsigned int *)(v21 + 64));
  else
    v23 = (char *)sub_1ACB5D828(*(unsigned int *)(v21 + 64));
  v24 = v23;
  if (v23)
  {
    v5 = sub_1ACBAE978(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40), 0, v22, v23, 0);
    if (!v5)
    {
      v16 = sub_1ACBC9C98(v4 + 32, v22, v24);
      *(_QWORD *)(v4 + 72) = v16;
      if (v16)
      {
        *(_QWORD *)(v4 + 24) = v24;
LABEL_17:
        v17 = *(_QWORD *)(v16 + 8);
        v18 = v17 + ((unint64_t)v8 << 6);
        *a3 = v18;
        v19 = *(_QWORD *)(v4 + 120);
        if (v8 == *(__int16 *)(v19 + 52))
        {
          v20 = *(_QWORD *)(v4 + 96);
          if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v18, v20);
          }
          else
          {
            *(_QWORD *)v18 = v20;
            *(_WORD *)(v18 + 20) = 4;
          }
        }
        else if (v8 >= *(unsigned __int16 *)(*(_QWORD *)(v4 + 72) + 28))
        {
          *a3 = (uint64_t)&qword_1ACCB6E80;
        }
        else if (*(_BYTE *)(*(_QWORD *)(v19 + 8) + 16 * v8 + 9) == 69
               && (*(_WORD *)(v17 + ((unint64_t)v8 << 6) + 20) & 0x24) != 0)
        {
          sub_1ACBC9D30(v18);
        }
        goto LABEL_33;
      }
      v5 = 7;
    }
    sub_1ACBE0F9C((_QWORD *)a1, v24);
LABEL_31:
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }
LABEL_33:
  v5 = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_QWORD *)(a1 + 416))
  {
LABEL_4:
    sub_1ACBE938C(a1, v5);
    if (v5)
      return sub_1ACBF2990(a1, v5);
    goto LABEL_5;
  }
  v5 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_5:
  if (!*(_BYTE *)(a1 + 103))
    return 0;
  return sub_1ACBF2990(a1, v5);
}

uint64_t sub_1ACBC9C98(uint64_t a1, unsigned int a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (unint64_t)*(unsigned __int16 *)(a1 + 6) << 6;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v8 = sub_1ACB5D828(v6 + 104);
    if (!v8)
      return v8;
    goto LABEL_3;
  }
  v8 = sub_1ACBE1124(v7, v6 + 104);
  if (v8)
  {
LABEL_3:
    *(_QWORD *)v8 = a1;
    *(_QWORD *)(v8 + 8) = v8 + 40;
    v9 = *(unsigned __int16 *)(a1 + 6);
    *(_WORD *)(v8 + 28) = v9 + 1;
    bzero((void *)(v8 + 40), (v9 << 6) + 64);
    sub_1ACB9E49C(a1, a2, a3, v8);
  }
  return v8;
}

void sub_1ACBC9D30(uint64_t a1)
{
  __int16 v2;
  double v3;

  if (a1)
  {
    v2 = *(_WORD *)(a1 + 20);
    if ((v2 & 8) != 0)
    {
      v3 = *(double *)a1;
    }
    else if ((v2 & 0x24) != 0)
    {
      v3 = (double)*(uint64_t *)a1;
    }
    else if ((v2 & 0x12) != 0)
    {
      v3 = sub_1ACBF2F88(a1);
    }
    else
    {
      v3 = 0.0;
    }
  }
  else
  {
    sub_1ACBBE20C(89734);
    v3 = 0.0;
  }
  *(double *)a1 = v3;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 8;
}

uint64_t sqlite3_preupdate_count(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1)
    return *(unsigned __int16 *)(v1 + 38);
  else
    return 0;
}

uint64_t sqlite3_preupdate_depth(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)v1 + 368);
  else
    return 0;
}

uint64_t sqlite3_preupdate_blobwrite(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1)
    return *(unsigned int *)(v1 + 92);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sqlite3_preupdate_new(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _WORD *v21;
  char *v22;
  size_t v23;
  char *v24;

  v4 = *(_QWORD *)(a1 + 368);
  if (!v4 || (v5 = *(_DWORD *)(v4 + 16), v5 == 9))
  {
    v6 = sub_1ACBBE20C(99389);
    *(_DWORD *)(a1 + 80) = v6;
    goto LABEL_47;
  }
  v8 = a2;
  v9 = *(_QWORD *)(v4 + 128);
  if (v5 != 23 && v9 != 0)
  {
    v11 = *(unsigned __int16 *)(v9 + 96);
    if (*(_WORD *)(v9 + 96))
    {
      v12 = 0;
      v13 = *(unsigned __int16 **)(v9 + 8);
      v14 = v11 << 16;
      while (1)
      {
        v15 = *v13++;
        if (v15 == (unsigned __int16)a2)
          break;
        v12 += 0x10000;
        if (v14 == v12)
          goto LABEL_12;
      }
      v8 = (int)v12 >> 16;
      v6 = 25;
      if ((int)v12 >> 16 < 0)
        goto LABEL_46;
      goto LABEL_14;
    }
LABEL_12:
    v8 = -1;
  }
  v6 = 25;
  if ((v8 & 0x80000000) != 0)
    goto LABEL_46;
LABEL_14:
  if ((int)v8 >= *(__int16 *)(*(_QWORD *)(v4 + 8) + 64))
    goto LABEL_46;
  if (v5 == 18)
  {
    v16 = *(_QWORD *)(v4 + 80);
    if (v16)
    {
LABEL_21:
      v19 = (uint64_t *)(*(_QWORD *)(v16 + 8) + ((unint64_t)v8 << 6));
      if (v8 == *(__int16 *)(*(_QWORD *)(v4 + 120) + 52))
      {
        v20 = *(_QWORD *)(v4 + 104);
        v21 = (_WORD *)v19 + 10;
        if ((*((_WORD *)v19 + 10) & 0x9000) != 0)
        {
          sub_1ACBF327C(*(_QWORD *)(v16 + 8) + ((unint64_t)v8 << 6), v20);
          goto LABEL_40;
        }
        *v19 = v20;
        goto LABEL_39;
      }
      if (v8 >= *(unsigned __int16 *)(v16 + 28))
        v19 = &qword_1ACCB6E80;
      goto LABEL_40;
    }
    v17 = *(int *)(v4 + 88);
    v18 = *(_QWORD *)(*(_QWORD *)v4 + 104) + (v17 << 6);
    if ((*(_WORD *)(v18 + 20) & 0x400) == 0
      || (v6 = sub_1ACBA6920((int *)(*(_QWORD *)(*(_QWORD *)v4 + 104) + (v17 << 6)))) == 0)
    {
      v16 = sub_1ACBC9C98(v4 + 32, *(_DWORD *)(v18 + 16), *(char **)(v18 + 8));
      if (v16)
      {
        *(_QWORD *)(v4 + 80) = v16;
        goto LABEL_21;
      }
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  v22 = *(char **)(v4 + 112);
  if (!v22)
  {
    v23 = (uint64_t)*(__int16 *)(*(_QWORD *)(v4 + 8) + 64) << 6;
    if (a1)
      v24 = (char *)sub_1ACBE1124(a1, (uint64_t)*(__int16 *)(*(_QWORD *)(v4 + 8) + 64) << 6);
    else
      v24 = (char *)sub_1ACB5D828((uint64_t)*(__int16 *)(*(_QWORD *)(v4 + 8) + 64) << 6);
    v22 = v24;
    if (!v24)
    {
      *(_QWORD *)(v4 + 112) = 0;
LABEL_45:
      v6 = 7;
      goto LABEL_46;
    }
    bzero(v24, v23);
    *(_QWORD *)(v4 + 112) = v22;
  }
  v19 = (uint64_t *)&v22[64 * (unint64_t)v8];
  v21 = (_WORD *)v19 + 10;
  if (*((_WORD *)v19 + 10))
    goto LABEL_40;
  if (v8 == *(__int16 *)(*(_QWORD *)(v4 + 120) + 52))
  {
    *v19 = *(_QWORD *)(v4 + 104);
LABEL_39:
    *v21 = 4;
    goto LABEL_40;
  }
  v6 = sub_1ACBC701C((uint64_t)&v22[64 * (unint64_t)v8], (__int128 *)(*(_QWORD *)(*(_QWORD *)v4 + 104) + ((uint64_t)(int)(v8 + *(_DWORD *)(v4 + 88) + 1) << 6)));
  if (v6)
  {
LABEL_46:
    *(_DWORD *)(a1 + 80) = v6;
LABEL_47:
    sub_1ACBE938C(a1, v6);
    if (v6)
      return sub_1ACBF2990(a1, v6);
    goto LABEL_48;
  }
LABEL_40:
  v6 = 0;
  *a3 = v19;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_QWORD *)(a1 + 416))
    goto LABEL_47;
  v6 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_48:
  if (!*(_BYTE *)(a1 + 103))
    return 0;
  return sub_1ACBF2990(a1, v6);
}

uint64_t sqlite3_stmt_scanstatus_v2(uint64_t a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  double v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;

  v5 = 1;
  if (!a1 || !a5)
    return v5;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v11)
    xmmword_1ECD3B1C0(v11);
  v12 = *(_QWORD *)(a1 + 352);
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
    v14 = (unsigned __int8 **)(v13 + 16);
    v15 = (unsigned int *)(v13 + 80);
  }
  else
  {
    v14 = (unsigned __int8 **)(a1 + 136);
    v15 = (unsigned int *)(a1 + 144);
  }
  v16 = *v15;
  v17 = *v14;
  if (a2 < 0)
  {
    if (a3 != 7)
      goto LABEL_28;
    if ((int)v16 < 1)
    {
      v23 = 0;
    }
    else
    {
      if ((_DWORD)v16 == 1)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v22 = v16 & 0xFFFFFFFE;
        v30 = (uint64_t *)(v17 + 72);
        v31 = v22;
        do
        {
          v32 = *(v30 - 5);
          v33 = *v30;
          v30 += 10;
          v28 += v32;
          v29 += v33;
          v31 -= 2;
        }
        while (v31);
        v23 = v29 + v28;
        if (v22 == v16)
          goto LABEL_37;
      }
      v34 = &v17[40 * v22 + 32];
      v35 = v16 - v22;
      do
      {
        v36 = *(_QWORD *)v34;
        v34 += 40;
        v23 += v36;
        --v35;
      }
      while (v35);
    }
LABEL_37:
    v26 = 0;
    v5 = 0;
    *a5 = v23;
    goto LABEL_109;
  }
  v18 = *(unsigned int *)(a1 + 392);
  if ((a4 & 1) != 0)
  {
    if ((int)v18 <= a2)
      goto LABEL_28;
    v20 = (int *)(*(_QWORD *)(a1 + 400) + 56 * a2);
    goto LABEL_26;
  }
  if ((int)v18 >= 1)
  {
    v19 = 0;
    v20 = *(int **)(a1 + 400);
    while (1)
    {
      if (*((_QWORD *)v20 + 6))
      {
        v21 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v21)
          break;
      }
      ++v19;
      v20 += 14;
      if (v18 == v19)
        goto LABEL_28;
    }
    if ((int)v19 < (int)v18)
    {
LABEL_26:
      switch(a3)
      {
        case 0:
          v24 = v20[7];
          goto LABEL_39;
        case 1:
          v24 = v20[8];
LABEL_39:
          if (v24 < 1)
            v37 = -1;
          else
            v37 = *(_QWORD *)&v17[40 * v24 + 24];
          goto LABEL_57;
        case 2:
          v38 = *((__int16 *)v20 + 20);
          v39 = 1.0;
          if (v38 > 99)
          {
            v40 = *((_WORD *)v20 + 20);
          }
          else
          {
            do
            {
              v40 = v38 + 10;
              v41 = (__int16)v38;
              v39 = v39 * 0.5;
              v38 += 10;
            }
            while (v41 < 90);
          }
          *(double *)a5 = v39 * (double)(unint64_t)sub_1ACBCA648(v40);
          goto LABEL_108;
        case 3:
          v37 = *((_QWORD *)v20 + 6);
          goto LABEL_57;
        case 4:
          if (*v20)
          {
            v37 = *(_QWORD *)&v17[40 * *v20 + 16];
LABEL_57:
            *a5 = v37;
          }
          else
          {
            *a5 = 0;
          }
          goto LABEL_108;
        case 5:
          if (!*v20)
            goto LABEL_58;
          *(_DWORD *)a5 = *(_DWORD *)&v17[40 * *v20 + 4];
          goto LABEL_108;
        case 6:
          if (*v20)
            *(_DWORD *)a5 = *(_DWORD *)&v17[40 * *v20 + 8];
          else
LABEL_58:
            *(_DWORD *)a5 = -1;
          goto LABEL_108;
        case 7:
          v42 = v20[1];
          if (!(_DWORD)v42)
          {
            v44 = -1;
            goto LABEL_107;
          }
          v43 = v20[2];
          if ((int)v42 <= 0)
          {
            if ((int)v16 >= 1)
            {
              v44 = 0;
              v47 = v16;
              v48 = v17;
              do
              {
                if (*((_DWORD *)v48 + 1) == v43 && (byte_1ACCB6485[*v48] & 0x40) != 0)
                  v44 += *((_QWORD *)v48 + 4);
                v48 += 40;
                --v47;
              }
              while (v47);
              goto LABEL_75;
            }
          }
          else if (v43 >= (int)v42)
          {
            v44 = 0;
            v45 = (v43 - v42);
            if (v43 == (_DWORD)v42)
            {
              v46 = v20[1];
LABEL_73:
              v56 = &v17[40 * v46 + 32];
              v57 = v43 - v46 + 1;
              do
              {
                v58 = *(_QWORD *)v56;
                v56 += 40;
                v44 += v58;
                --v57;
              }
              while (v57);
              goto LABEL_75;
            }
            v49 = 0;
            v50 = v45 + 1;
            v51 = (v45 + 1) & 0x1FFFFFFFELL;
            v46 = v51 + v42;
            v52 = &v17[40 * v42 + 72];
            v53 = v51;
            do
            {
              v54 = *((_QWORD *)v52 - 5);
              v55 = *(_QWORD *)v52;
              v52 += 80;
              v44 += v54;
              v49 += v55;
              v53 -= 2;
            }
            while (v53);
            v44 += v49;
            if (v50 != v51)
              goto LABEL_73;
LABEL_75:
            v59 = v20[3];
            if (!(_DWORD)v59)
              goto LABEL_107;
            v60 = v20[4];
            if ((int)v59 <= 0)
            {
              if ((int)v16 >= 1)
              {
                v63 = v17;
                v64 = v16;
                do
                {
                  if (*((_DWORD *)v63 + 1) == v60 && (byte_1ACCB6485[*v63] & 0x40) != 0)
                    v44 += *((_QWORD *)v63 + 4);
                  v63 += 40;
                  --v64;
                }
                while (v64);
              }
            }
            else
            {
              if (v60 < (int)v59)
                goto LABEL_91;
              v61 = (v60 - v59);
              if (v60 == (_DWORD)v59)
              {
                v62 = v20[3];
LABEL_89:
                v72 = v60 - v62 + 1;
                v73 = &v17[40 * v62 + 32];
                do
                {
                  v74 = *(_QWORD *)v73;
                  v73 += 40;
                  v44 += v74;
                  --v72;
                }
                while (v72);
                goto LABEL_91;
              }
              v65 = 0;
              v66 = v61 + 1;
              v67 = (v61 + 1) & 0x1FFFFFFFELL;
              v62 = v67 + v59;
              v68 = &v17[40 * v59 + 72];
              v69 = v67;
              do
              {
                v70 = *((_QWORD *)v68 - 5);
                v71 = *(_QWORD *)v68;
                v68 += 80;
                v44 += v70;
                v65 += v71;
                v69 -= 2;
              }
              while (v69);
              v44 += v65;
              if (v66 != v67)
                goto LABEL_89;
            }
LABEL_91:
            v75 = v20[5];
            if (!(_DWORD)v75)
              goto LABEL_107;
            v76 = v20[6];
            if ((int)v75 <= 0)
            {
              if ((int)v16 >= 1)
              {
                do
                {
                  if (*((_DWORD *)v17 + 1) == v76 && (byte_1ACCB6485[*v17] & 0x40) != 0)
                    v44 += *((_QWORD *)v17 + 4);
                  v17 += 40;
                  --v16;
                }
                while (v16);
              }
            }
            else
            {
              if (v76 < (int)v75)
                goto LABEL_107;
              v77 = (v76 - v75);
              if (v76 == (_DWORD)v75)
              {
                v78 = v75;
LABEL_105:
                v86 = v76 - v78 + 1;
                v87 = &v17[40 * v78 + 32];
                do
                {
                  v88 = *(_QWORD *)v87;
                  v87 += 40;
                  v44 += v88;
                  --v86;
                }
                while (v86);
                goto LABEL_107;
              }
              v79 = 0;
              v80 = v77 + 1;
              v81 = (v77 + 1) & 0x1FFFFFFFELL;
              v78 = v81 + v75;
              v82 = &v17[40 * v75 + 72];
              v83 = v81;
              do
              {
                v84 = *((_QWORD *)v82 - 5);
                v85 = *(_QWORD *)v82;
                v82 += 80;
                v44 += v84;
                v79 += v85;
                v83 -= 2;
              }
              while (v83);
              v44 += v79;
              if (v80 != v81)
                goto LABEL_105;
            }
LABEL_107:
            *a5 = v44;
LABEL_108:
            v26 = 0;
            v5 = 0;
LABEL_109:
            v25 = *(_QWORD *)(*(_QWORD *)a1 + 24);
            if (!v25)
              return v5;
            goto LABEL_29;
          }
          v44 = 0;
          goto LABEL_75;
        default:
          break;
      }
    }
  }
LABEL_28:
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v26 = 1;
  v5 = 1;
  if (v25)
  {
LABEL_29:
    xmmword_1ECD3B1D0(v25);
    return v26;
  }
  return v5;
}

uint64_t sub_1ACBCA648(int a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a1 > 609)
    return 0x7FFFFFFFFFFFFFFFLL;
  v2 = ((26215 * a1) >> 18) + ((26215 * a1) >> 31);
  v3 = (__int16)a1 % 10;
  v4 = v3 - 2;
  v5 = v3 - 1;
  if (!((__int16)a1 % 10))
    v5 = 0;
  if ((unsigned __int16)((__int16)a1 % 10) <= 4u)
    v6 = v5;
  else
    v6 = v4;
  v7 = v6 + 8;
  if (a1 < 30)
    return v7 >> (3 - v2);
  else
    return v7 << (v2 - 3);
}

int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
{
  return sqlite3_stmt_scanstatus_v2((uint64_t)pStmt, idx, iScanStatusOp, 0, (uint64_t *)pOut);
}

void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v2)
      xmmword_1ECD3B1C0(v2);
    v3 = *((unsigned int *)a1 + 36);
    if ((int)v3 >= 1)
    {
      v4 = (_QWORD *)(*((_QWORD *)a1 + 17) + 24);
      do
      {
        *v4 = 0;
        v4[1] = 0;
        v4 += 5;
        --v3;
      }
      while (v3);
    }
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v5)
      xmmword_1ECD3B1D0(v5);
  }
  else
  {
    sub_1ACBBE20C(99641);
  }
}

uint64_t sqlite3_bind_blob_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  if ((a4 & 0x80000000) == 0)
    return sub_1ACBCA78C(a1, a2, a3, a4, a5, 0);
  if ((unint64_t)(a5 + 1) >= 2)
    (*(void (**)(uint64_t, char *))(a5 + 16))(a5, a3);
  return sub_1ACBBE20C(99746);
}

uint64_t sub_1ACBCA78C(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 <= 0)
  {
    if (a1)
    {
      v13 = *a1;
      if (*a1)
      {
        v12 = 25;
        *(_DWORD *)(v13 + 80) = 25;
        sub_1ACBE938C(v13, 25);
        goto LABEL_12;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    v12 = 25;
LABEL_12:
    if ((unint64_t)(a5 + 1) >= 2)
      (*(void (**)(uint64_t, char *))(a5 + 16))(a5, a3);
    return v12;
  }
  v11 = (a2 - 1);
  v12 = sub_1ACBA0E50((uint64_t)a1, a2 - 1);
  if ((_DWORD)v12)
    goto LABEL_12;
  if ((uint64_t (*)(uint64_t))a5 == sub_1ACBD0E78 || (unint64_t)(a5 + 1) <= 1)
  {
    v12 = sub_1ACBBE20C(99709);
    goto LABEL_12;
  }
  if (!a3)
  {
    (*(void (**)(uint64_t, _QWORD))(a5 + 16))(a5, 0);
LABEL_21:
    v12 = 0;
    goto LABEL_24;
  }
  v15 = a1[16];
  v16 = (uint64_t (*)(uint64_t))_Block_copy((const void *)a5);
  if (v16)
  {
    v17 = sub_1ACB57870(v15 + (v11 << 6), a3, a4, a6, v16);
    *(_BYTE *)(v15 + (v11 << 6) + 56) = 1;
    if (!v17)
    {
      v18 = *(unsigned __int8 *)(*a1 + 100);
      v19 = v15 + (v11 << 6);
      v20 = *(_WORD *)(v19 + 20);
      v21 = (_BYTE *)(v19 + 22);
      if ((v20 & 2) == 0)
      {
        v12 = 0;
        *v21 = v18;
        goto LABEL_24;
      }
      if (*v21 == v18)
        goto LABEL_21;
      v17 = sub_1ACBB0FEC((int *)(v15 + (v11 << 6)), v18);
      if (!v17)
        goto LABEL_21;
    }
  }
  else
  {
    v17 = 7;
  }
  v22 = *a1;
  *(_DWORD *)(v22 + 80) = v17;
  sub_1ACBE938C(v22, v17);
  v12 = sub_1ACBF2990(*a1, v17);
LABEL_24:
  v23 = *(_QWORD *)(*a1 + 24);
  if (v23)
    xmmword_1ECD3B1D0(v23);
  return v12;
}

uint64_t sqlite3_bind_text_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  return sub_1ACBCA78C(a1, a2, a3, a4, a5, 1u);
}

int sqlite3_value_numeric_type(sqlite3_value *a1)
{
  __int16 v2;

  if (a1)
  {
    v2 = *((_WORD *)a1 + 10);
    if (((0x4000000040004uLL >> v2) & 1) != 0)
    {
      sub_1ACBCA9CC((uint64_t)a1, 0);
      v2 = *((_WORD *)a1 + 10);
    }
    return byte_1ACCB6445[v2 & 0x3F];
  }
  else
  {
    sub_1ACBBE20C(97202);
    return 0;
  }
}

uint64_t sub_1ACBCA9CC(uint64_t a1, int a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  double v17;

  v17 = 0.0;
  v4 = *(unsigned __int8 *)(a1 + 22);
  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  result = sub_1ACBA6B1C(v5, &v17, v6, v4);
  if ((int)result >= 1)
  {
    v8 = v17;
    if ((_DWORD)result == 1)
    {
      v9 = 0x8000000000000000;
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v17 <= 9.22337204e18)
        v10 = (uint64_t)v17;
      if (v17 >= -9.22337204e18)
        v9 = v10;
      if (v17 == 0.0
        || (unint64_t)(v9 - 0x8000000000000) >> 52 == 4095 && *(_QWORD *)&v17 == COERCE__INT64((double)v9))
      {
        *(_QWORD *)a1 = v9;
        v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }
      result = sub_1ACBF2FF8(v5, (_QWORD *)a1, v6, v4);
      if (!(_DWORD)result)
      {
        v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }
    }
    *(double *)a1 = v8;
    v12 = *(_WORD *)(a1 + 20);
    v13 = v12 | 8;
    if (!a2)
    {
LABEL_27:
      *(_WORD *)(a1 + 20) = v13 & 0xFFFD;
      return result;
    }
    if ((v12 & 0x20) == 0)
    {
      if (v8 < -9.22337204e18
        || v8 > 9.22337204e18
        || v8 != (double)(uint64_t)v8
        || (unint64_t)((uint64_t)v8 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      {
        goto LABEL_27;
      }
      *(_QWORD *)a1 = (uint64_t)v8;
    }
    v11 = v12 & 0xF240;
LABEL_26:
    v13 = v11 | 4;
    goto LABEL_27;
  }
  return result;
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  int v8;
  const char *v9;
  int v10;
  char *v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  sqlite3_blob *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  const char *i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t j;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  double v58;
  int64x2_t v59;
  uint64_t *v60;
  unsigned int *v61;
  unsigned int **v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  __int16 *v66;
  int v67;
  int v68;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD *v77;
  const char *v78;
  uint64_t v79;
  _QWORD *v80;
  const char *v81;
  int v82;
  uint64_t v83;
  char v84;
  _BOOL4 v86;
  const char *v87;
  sqlite3_int64 v88;
  char *v89;
  uint64_t v90;
  int v92;
  unsigned int v93;
  unsigned int v94;
  sqlite3 *v95;
  __int128 v96;
  __int128 v97;
  _DWORD v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;

  v122 = 0;
  if (!ppBlob)
  {
    v10 = 109139;
    return sub_1ACBBE20C(v10);
  }
  *ppBlob = 0;
  if (!a1)
  {
    v9 = "NULL";
    goto LABEL_99;
  }
  v8 = *((unsigned __int8 *)a1 + 113);
  if (v8 == 186)
  {
LABEL_6:
    v9 = "unopened";
LABEL_99:
    sqlite3_log(21, "API call with %s database connection pointer", v9);
    goto LABEL_100;
  }
  if (v8 != 118)
  {
    if (v8 != 109)
    {
      v9 = "invalid";
      goto LABEL_99;
    }
    goto LABEL_6;
  }
  v11 = (char *)zTable;
  if (!zTable)
  {
LABEL_100:
    v10 = 109145;
    return sub_1ACBBE20C(v10);
  }
  v86 = flags != 0;
  v15 = *((_QWORD *)a1 + 3);
  if (v15)
    xmmword_1ECD3B1C0(v15);
  v92 = flags;
  v16 = sub_1ACBE1124((uint64_t)a1, 0x38uLL);
  v23 = (sqlite3_blob *)v16;
  if (v16)
  {
    *(_QWORD *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)v16 = 0u;
  }
  v94 = 0;
  v24 = 0;
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v109 = 0u;
  v87 = zDb;
  v88 = iRow;
  v89 = v11;
  v90 = v16;
  while (1)
  {
    v108 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v99 = 0u;
    v97 = 0u;
    memset(v98, 0, sizeof(v98));
    v96 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0;
    v25 = *((_QWORD *)a1 + 43);
    *((_QWORD *)a1 + 43) = &v95;
    *(_QWORD *)&v111 = v25;
    v95 = a1;
    if (*((_BYTE *)a1 + 103))
      sub_1ACBCB308((uint64_t)&v95, "out of memory", v17, (uint64_t)v18, v19, v20, v21, v22, v84);
    if (!v23)
      goto LABEL_103;
    if (v122)
      sub_1ACBE0F9C(a1, v122);
    v122 = 0;
    if (!*((_BYTE *)a1 + 111))
      sub_1ACBE9148((uint64_t)a1);
    v26 = sub_1ACB8D488((uint64_t)&v95, 0, v11, zDb, v19, v20, v21, v22);
    if (!v26)
      goto LABEL_111;
    v34 = v26;
    v35 = *(unsigned __int8 *)(v26 + 63);
    if (v35 == 1)
    {
      v78 = "cannot open virtual table: %s";
      goto LABEL_110;
    }
    if ((*(_BYTE *)(v26 + 48) & 0x80) != 0)
    {
      v78 = "cannot open table without rowid: %s";
      goto LABEL_110;
    }
    if (v35 == 2)
    {
      v78 = "cannot open view: %s";
LABEL_110:
      sub_1ACBCB308((uint64_t)&v95, v78, v28, v29, v30, v31, v32, v33, (char)v11);
LABEL_111:
      if ((_QWORD)v96)
      {
        v122 = (_QWORD *)v96;
        *(_QWORD *)&v96 = 0;
      }
      if (!*((_BYTE *)a1 + 111))
        sub_1ACBE91DC((uint64_t)a1);
      v74 = 1;
      goto LABEL_121;
    }
    *((_QWORD *)v23 + 6) = v26;
    v36 = *((_QWORD *)a1 + 4);
    v37 = *(_QWORD *)(v26 + 96);
    if (v37)
    {
      v38 = (uint64_t *)(v36 + 24);
      v39 = -1;
      v40 = zColumn;
      do
      {
        v41 = *v38;
        v38 += 4;
        ++v39;
      }
      while (v41 != v37);
    }
    else
    {
      v39 = -32768;
      v40 = zColumn;
    }
    *((_QWORD *)v23 + 5) = *(_QWORD *)(v36 + 32 * v39);
    v42 = *(__int16 *)(v26 + 54);
    if ((int)v42 >= 1)
    {
      v43 = 0;
      while (1)
      {
        v44 = *(_BYTE **)(*(_QWORD *)(v26 + 8) + 16 * v43);
        for (i = v40; ; ++i)
        {
          v46 = *v44;
          v47 = *(unsigned __int8 *)i;
          if ((_DWORD)v46 != (_DWORD)v47)
            break;
          if (!*v44)
            goto LABEL_42;
LABEL_35:
          ++v44;
        }
        if (byte_1ACCB6333[v46] == byte_1ACCB6333[v47])
          goto LABEL_35;
        if (++v43 == v42)
          goto LABEL_106;
      }
    }
    LODWORD(v43) = 0;
LABEL_42:
    if ((_DWORD)v43 == (_DWORD)v42)
    {
LABEL_106:
      v77 = sub_1ACB6DDD0((uint64_t)a1, "no such column: \"%s\"", v28, v29, v30, v31, v32, v33, (char)v40);
      goto LABEL_118;
    }
    v93 = v24;
    if (v92)
    {
      if ((*((_BYTE *)a1 + 49) & 0x40) != 0 && (v48 = *(_QWORD *)(v26 + 72)) != 0)
      {
        v49 = 0;
        do
        {
          v50 = *(unsigned int *)(v48 + 40);
          if ((int)v50 >= 1)
          {
            v51 = (int *)(v48 + 64);
            do
            {
              v52 = *v51;
              v51 += 4;
              if (v52 == (_DWORD)v43)
                v49 = "foreign key";
              --v50;
            }
            while (v50);
          }
          v48 = *(_QWORD *)(v48 + 8);
        }
        while (v48);
      }
      else
      {
        v49 = 0;
      }
      for (j = *(_QWORD *)(v26 + 16); j; j = *(_QWORD *)(j + 40))
      {
        v65 = *(unsigned __int16 *)(j + 94);
        if (*(_WORD *)(j + 94))
        {
          v66 = *(__int16 **)(j + 8);
          do
          {
            v68 = *v66++;
            v67 = v68;
            if ((_DWORD)v43 == v68 || v67 == -2)
              v49 = "indexed";
            --v65;
          }
          while (v65);
        }
      }
      if (v49)
        break;
    }
    v54 = sub_1ACBCB4C8((uint64_t *)&v95, v27, v28, v29, v30, v31, v32, v33);
    *((_QWORD *)v23 + 3) = v54;
    if (!v54)
      goto LABEL_92;
    v60 = (uint64_t *)v54;
    v61 = *(unsigned int **)(v34 + 96);
    if (v61)
    {
      v62 = (unsigned int **)(*((_QWORD *)a1 + 4) + 24);
      LODWORD(v63) = -1;
      do
      {
        v64 = *v62;
        v62 += 4;
        v63 = (v63 + 1);
      }
      while (v64 != v61);
    }
    else
    {
      v63 = 4294934528;
    }
    v19 = *v61;
    v20 = v61[1];
    v70 = *(_DWORD *)(v54 + 144);
    if (*(_DWORD *)(v54 + 148) <= v70)
    {
      sub_1ACBFF7F0(v54, 2, v63, v86, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)(v54 + 144) = v70 + 1;
      v71 = *(_QWORD *)(v54 + 136) + 40 * v70;
      *(_DWORD *)v71 = 64770;
      *(_DWORD *)(v71 + 4) = v63;
      *(_DWORD *)(v71 + 8) = v86;
      *(_DWORD *)(v71 + 12) = v19;
      *(_DWORD *)(v71 + 16) = v20;
      *(_QWORD *)(v71 + 24) = 0;
      *(_QWORD *)(v71 + 32) = 0;
    }
    v72 = *((_DWORD *)v60 + 36);
    if (v72 >= 1)
      *(_WORD *)(v60[17] + 40 * (v72 - 1) + 2) = 1;
    if (v72 + 6 > *((_DWORD *)v60 + 37))
    {
      if (sub_1ACBFF63C((uint64_t)v60, v55, v56, (uint64_t)v18, v19, v20, v21, v22))
      {
        v73 = 0;
        goto LABEL_83;
      }
      v72 = *((_DWORD *)v60 + 36);
    }
    v73 = v60[17] + 40 * v72;
    *(_BYTE *)v73 = -87;
    *(_QWORD *)(v73 + 9) = 0;
    *(_QWORD *)(v73 + 1) = 0;
    *(_QWORD *)(v73 + 16) = 0;
    *(_BYTE *)(v73 + 40) = 112;
    *(_QWORD *)(v73 + 49) = 0;
    *(_QWORD *)(v73 + 41) = 0;
    *(_QWORD *)(v73 + 56) = 0;
    *(_QWORD *)(v73 + 80) = 31;
    *(_DWORD *)(v73 + 88) = *((_DWORD *)v60 + 36) + 5;
    *(_DWORD *)(v73 + 92) = 1;
    *(_QWORD *)(v73 + 96) = 0;
    *(_BYTE *)(v73 + 120) = 94;
    *(_DWORD *)(v73 + 124) = 0;
    *(_DWORD *)(v73 + 128) = 0;
    *(_DWORD *)(v73 + 132) = 1;
    *(_BYTE *)(v73 + 121) = 0;
    *(_QWORD *)(v73 + 136) = 0;
    *(_WORD *)(v73 + 122) = 0;
    *(_BYTE *)(v73 + 160) = 84;
    *(_DWORD *)(v73 + 164) = 1;
    *(_BYTE *)(v73 + 161) = 0;
    *(_WORD *)(v73 + 162) = 0;
    *(_QWORD *)(v73 + 168) = 0;
    *(_QWORD *)(v73 + 176) = 0;
    *(_BYTE *)(v73 + 200) = 70;
    *(_QWORD *)(v73 + 216) = 0;
    *(_QWORD *)(v73 + 201) = 0;
    *(_QWORD *)(v73 + 209) = 0;
    *((_DWORD *)v60 + 36) += 6;
LABEL_83:
    *((_DWORD *)v60 + 68) |= 1 << v63;
    if ((_DWORD)v63 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v60 + 32) + 32 * (int)v63 + 8) + 17))
      *((_DWORD *)v60 + 69) |= 1 << v63;
    if (!*((_BYTE *)a1 + 103))
    {
      *(_DWORD *)(v73 + 4) = v63;
      *(_DWORD *)(v73 + 8) = *(_DWORD *)(v34 + 40);
      *(_DWORD *)(v73 + 12) = v86;
      if (*(_BYTE *)(*v60 + 103) || (sub_1ACBFF884(v60, v60[17] + 80, *(char **)v34, 0), !*((_BYTE *)a1 + 103)))
      {
        if (v92)
          *(_BYTE *)(v73 + 40) = 113;
        *(_DWORD *)(v73 + 48) = *(_DWORD *)(v34 + 40);
        *(_DWORD *)(v73 + 52) = v63;
        *(_BYTE *)(v73 + 41) = -3;
        *(_DWORD *)(v73 + 56) = *(__int16 *)(v34 + 54) + 1;
        *(_DWORD *)(v73 + 128) = *(__int16 *)(v34 + 54);
        LODWORD(v114) = 0;
        *(_QWORD *)&v98[3] = 0x100000001;
        *(double *)v57.i64 = sub_1ACB68444((uint64_t)v60, (uint64_t)&v95);
      }
    }
LABEL_92:
    v23 = (sqlite3_blob *)v90;
    *(_WORD *)(v90 + 8) = v43;
    *(_QWORD *)(v90 + 32) = a1;
    if (!*((_BYTE *)a1 + 111))
      sub_1ACBE91DC((uint64_t)a1);
    v74 = v93;
    v11 = v89;
    if (*((_BYTE *)a1 + 103)
      || (v75 = sub_1ACBCB6D8(v90, v88, &v122, v18, v19, v20, v21, v22, v57, v58, v59), v74 = v75, v94 > 0x30)
      || v75 != 17)
    {
      if (v74)
        goto LABEL_121;
LABEL_103:
      if (*((_BYTE *)a1 + 103))
      {
        v74 = 0;
        if (v23)
          goto LABEL_121;
      }
      else
      {
        v74 = 0;
        *ppBlob = v23;
      }
      goto LABEL_126;
    }
    ++v94;
    sub_1ACBCB8D0(&v95);
    v24 = 17;
    zDb = v87;
  }
  v77 = sub_1ACB6DDD0((uint64_t)a1, "cannot open %s column for writing", v28, v29, v30, v31, v32, v33, (char)v49);
LABEL_118:
  v122 = v77;
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE91DC((uint64_t)a1);
  v74 = 1;
LABEL_121:
  v79 = *((_QWORD *)v23 + 3);
  if (v79)
  {
    if (*(_BYTE *)(v79 + 267))
      sub_1ACB68B58(*((_QWORD ***)v23 + 3));
    sub_1ACBBE904(v79);
  }
  sub_1ACBE0F9C(a1, v23);
LABEL_126:
  v80 = v122;
  if (v122)
    v81 = "%s";
  else
    v81 = 0;
  sub_1ACBC3FCC((uint64_t)a1, v74, v81, (uint64_t)v18, v19, v20, v21, v22, (char)v122);
  if (v80)
    sub_1ACBE0F9C(a1, v80);
  sub_1ACBCB8D0(&v95);
  if (v74 || *((_BYTE *)a1 + 103))
    v82 = sub_1ACBF2990((uint64_t)a1, v74);
  else
    v82 = 0;
  v83 = *((_QWORD *)a1 + 3);
  if (v83)
    xmmword_1ECD3B1D0(v83);
  return v82;
}

void sub_1ACBCB308(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a1;
  *(_DWORD *)(v10 + 84) = -2;
  v16 = v10;
  v20 = 0;
  v11 = *(_DWORD *)(v10 + 136);
  v17 = &v21;
  v18 = 512;
  v19 = v11;
  WORD2(v20) = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, &a9);
  if (v17 && (v17[v20] = 0, v19) && (v20 & 0x40000000000) == 0)
    v12 = sub_1ACBE13A0(&v16);
  else
    v12 = v17;
  if (BYTE4(v20) == 7 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    if (*(int *)(v10 + 220) >= 1)
      *(_DWORD *)(v10 + 424) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    v14 = *(_QWORD *)(v10 + 344);
    if (v14)
    {
      sub_1ACBCB308(v14, "out of memory");
      for (i = *(_QWORD *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
  if (*(int *)(v10 + 84) <= -2)
    *(_DWORD *)(v10 + 84) = -1;
  if (*(_BYTE *)(v10 + 107))
  {
    if (v12)
      sub_1ACBE0F9C((_QWORD *)v10, v12);
    if (*(_BYTE *)(v10 + 103))
    {
      ++*(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = 7;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 48);
    v13 = *(_QWORD **)(a1 + 8);
    if (v13)
      sub_1ACBE0F9C((_QWORD *)v10, v13);
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 400) = 0;
  }
}

uint64_t sub_1ACBCB4C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v9 = *a1;
  if (*(unsigned __int16 *)(*a1 + 436) <= 0x197u)
  {
    if (*(_DWORD *)(v9 + 432))
    {
      if (*(_BYTE *)(v9 + 103))
        return 0;
    }
    else
    {
      ++*(_DWORD *)(v9 + 452);
    }
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v9 + 472);
  if (v10)
  {
    v11 = (_QWORD *)(v9 + 472);
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 464);
    if (!v10)
    {
      ++*(_DWORD *)(v9 + 456);
LABEL_12:
      v10 = sub_1ACBE1300(v9, 408);
      if (!v10)
        return v10;
      goto LABEL_13;
    }
    v11 = (_QWORD *)(v9 + 464);
  }
  *v11 = *(_QWORD *)v10;
  ++*(_DWORD *)(v9 + 448);
LABEL_13:
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_QWORD *)v10 = v9;
  v14 = *(_QWORD *)(v9 + 8);
  v13 = (uint64_t *)(v9 + 8);
  v12 = v14;
  if (v14)
    *(_QWORD *)(v12 + 8) = v10 + 16;
  *(_QWORD *)(v10 + 8) = v13;
  *(_QWORD *)(v10 + 16) = v12;
  *v13 = v10;
  *(_QWORD *)(v10 + 24) = a1;
  a1[2] = v10;
  v15 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v15)
  {
    sub_1ACBFF5AC(v10, 8, 0, 1, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v10 + 136) + 40 * v15;
    *(_DWORD *)v16 = 8;
    *(_QWORD *)(v16 + 4) = 0x100000000;
    *(_QWORD *)(v16 + 12) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_QWORD *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 36) = 0;
  }
  return v10;
}

uint64_t sub_1ACBCB640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
    return sub_1ACBFF7F0(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 144) = result + 1;
  v10 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
  *(_BYTE *)v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 12) = a5;
  *(_DWORD *)(v10 + 16) = a6;
  *(_BYTE *)(v10 + 1) = -3;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  return result;
}

_DWORD *sub_1ACBCB690(_DWORD *result, int a2)
{
  result[68] |= 1 << a2;
  if (a2 != 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 32) + 32 * a2 + 8) + 17))
      result[69] |= 1 << a2;
  }
  return result;
}

uint64_t sub_1ACBCB6D8(uint64_t a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int64x2_t a9, double a10, int64x2_t a11)
{
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  sqlite3_stmt *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  sqlite3 *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;

  v12 = a2;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(v14 + 104);
  if ((*(_WORD *)(v15 + 84) & 0x9000) != 0)
  {
    sub_1ACBF327C(v15 + 64, a2);
  }
  else
  {
    *(_QWORD *)(v15 + 64) = a2;
    *(_WORD *)(v15 + 84) = 4;
  }
  if (*(int *)(v14 + 48) < 5)
  {
    v16 = sqlite3_step(*(sqlite3_stmt **)(a1 + 24));
  }
  else
  {
    *(_DWORD *)(v14 + 48) = 4;
    v16 = sub_1ACB7F6A4((uint64_t *)v14, a9, a10, a11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v23 = v16;
  if ((_DWORD)v16 == 100)
  {
    v24 = **(_QWORD **)(v14 + 120);
    v25 = *(unsigned __int16 *)(a1 + 8);
    if (*(unsigned __int16 *)(v24 + 66) <= v25)
    {
      v27 = *(_QWORD *)(a1 + 32);
      goto LABEL_17;
    }
    v26 = *(_DWORD *)(v24 + 4 * v25 + 112);
    if (v26 <= 0xB)
    {
      v27 = *(_QWORD *)(a1 + 32);
      if (v26 == 7)
      {
        v28 = "real";
        goto LABEL_18;
      }
      if (v26)
      {
        v28 = "integer";
LABEL_18:
        v45 = sub_1ACB6DDD0(v27, "cannot open value of type %s", v17, v18, v19, v20, v21, v22, (char)v28);
        sqlite3_finalize(*(sqlite3_stmt **)(a1 + 24));
        *(_QWORD *)(a1 + 24) = 0;
        v23 = 1;
        goto LABEL_25;
      }
LABEL_17:
      v28 = "null";
      goto LABEL_18;
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v24 + 4 * (*(__int16 *)(v24 + 64) + v25) + 112);
    if (v26 < 0x80)
      v46 = byte_1ACCB6D60[v26];
    else
      v46 = (v26 - 12) >> 1;
    v23 = 0;
    v45 = 0;
    *(_DWORD *)a1 = v46;
    v47 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(a1 + 16) = v47;
    *(_BYTE *)(v47 + 1) |= 0x10u;
    *(_BYTE *)(*(_QWORD *)(v47 + 8) + 19) = 1;
  }
  else
  {
    v29 = *(sqlite3_stmt **)(a1 + 24);
    if (v29)
    {
      v30 = sqlite3_finalize(v29);
      *(_QWORD *)(a1 + 24) = 0;
      v37 = *(sqlite3 **)(a1 + 32);
      if ((_DWORD)v30)
      {
        v23 = v30;
        v38 = sqlite3_errmsg(v37);
        v45 = sub_1ACB6DDD0((uint64_t)v37, "%s", v39, v40, v41, v42, v43, v44, v38);
      }
      else
      {
        v45 = sub_1ACB6DDD0((uint64_t)v37, "no such rowid: %lld", v31, v32, v33, v34, v35, v36, v12);
        v23 = 1;
      }
    }
    else
    {
      v45 = 0;
    }
  }
LABEL_25:
  *a3 = v45;
  return v23;
}

_QWORD *sub_1ACBCB8D0(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  __int16 v10;

  v1 = result;
  v2 = (_QWORD *)*result;
  v3 = (_QWORD *)result[19];
  if (!v3)
    goto LABEL_5;
  v4 = (_QWORD *)*result;
  while (1)
  {
    result = sub_1ACBF0674(v4, v3);
LABEL_5:
    v6 = v1[24];
    if (!v6)
      break;
    v5 = *(_QWORD *)(v6 + 8);
    v1[24] = *(_QWORD *)v6;
    (*(void (**)(_QWORD *, uint64_t))(v6 + 16))(v2, v5);
    v4 = v2;
    v3 = (_QWORD *)v6;
  }
  v7 = (_QWORD *)v1[10];
  if (v7)
    result = sub_1ACBF0674(v2, v7);
  v8 = (_QWORD *)v1[11];
  if (v8)
    result = sub_1ACC010B0(v2, v8);
  v9 = *((_DWORD *)v2 + 108) - *((unsigned __int8 *)v1 + 36);
  *((_DWORD *)v2 + 108) = v9;
  if (v9)
    v10 = 0;
  else
    v10 = *((_WORD *)v2 + 219);
  *((_WORD *)v2 + 218) = v10;
  v2[43] = v1[32];
  *v1 = 0;
  *((_BYTE *)v1 + 36) = 0;
  return result;
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  sqlite3_blob *v1;
  sqlite3_stmt *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v1 = a1;
    v2 = (sqlite3_stmt *)*((_QWORD *)a1 + 3);
    v3 = (_QWORD *)*((_QWORD *)a1 + 4);
    v4 = v3[3];
    if (v4)
      xmmword_1ECD3B1C0(v4);
    sub_1ACBE0F9C(v3, v1);
    v5 = v3[3];
    if (v5)
      xmmword_1ECD3B1D0(v5);
    LODWORD(a1) = sqlite3_finalize(v2);
  }
  return (int)a1;
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return sub_1ACBCB9F8((int *)a1, (char *)Z, *(uint64_t *)&N, iOffset, sub_1ACBCBBE8);
}

uint64_t sub_1ACBCB9F8(int *a1, char *a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4))
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    return sub_1ACBBE20C(109388);
  v10 = *((_QWORD *)a1 + 4);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11)
    xmmword_1ECD3B1C0(v11);
  v12 = 1;
  if (((a4 | a3) & 0x80000000) != 0 || !a2 || (uint64_t)(a4 + (unint64_t)a3) > *a1)
    goto LABEL_22;
  v13 = *((_QWORD *)a1 + 3);
  if (!v13)
  {
LABEL_21:
    v12 = 4;
LABEL_22:
    *(_DWORD *)(v10 + 80) = v12;
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_BYTE *)(v14 + 17))
  {
    ++*(_DWORD *)(v14 + 20);
    if (!*(_BYTE *)(v14 + 18))
      sub_1ACBECF6C(v14);
  }
  if (a5 == sub_1ACBCBC08 && *(_QWORD *)(v10 + 360))
  {
    v15 = *((_QWORD *)a1 + 2);
    sub_1ACBEF184(v15);
    sub_1ACBF5874((uint64_t *)v13, **(_QWORD **)(v13 + 120), 9, *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), *(_QWORD *)(v15 + 48), 0xFFFFFFFF, *((unsigned __int16 *)a1 + 4));
  }
  v12 = a5(*((unsigned __int8 **)a1 + 2), a1[1] + a4, a3, a2);
  v16 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (*(_BYTE *)(v16 + 17))
  {
    v17 = *(_DWORD *)(v16 + 20) - 1;
    *(_DWORD *)(v16 + 20) = v17;
    if (!v17)
      sub_1ACBED048(v16);
  }
  if (v12 == 4)
  {
    if (*(_BYTE *)(v13 + 267))
      sub_1ACB68B58((_QWORD **)v13);
    sub_1ACBBE904(v13);
    *((_QWORD *)a1 + 3) = 0;
    goto LABEL_21;
  }
  *(_DWORD *)(v13 + 52) = v12;
  *(_DWORD *)(v10 + 80) = v12;
  if (v12)
  {
LABEL_23:
    sub_1ACBE938C(v10, v12);
    if (v12)
      goto LABEL_32;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v10 + 416))
  {
    v12 = 0;
    goto LABEL_23;
  }
  v12 = 0;
  *(_DWORD *)(v10 + 84) = -1;
LABEL_24:
  if (!*(_BYTE *)(v10 + 103))
  {
    v18 = 0;
    v19 = *(_QWORD *)(v10 + 24);
    if (!v19)
      return v18;
    goto LABEL_33;
  }
LABEL_32:
  v18 = sub_1ACBF2990(v10, v12);
  v19 = *(_QWORD *)(v10 + 24);
  if (v19)
LABEL_33:
    xmmword_1ECD3B1D0(v19);
  return v18;
}

uint64_t sub_1ACBCBBE8(_BYTE *a1, unsigned int a2, unsigned int a3, char *a4)
{
  if (*a1)
    return sub_1ACBFFB18(a1, a2, a3, a4);
  else
    return sub_1ACBAE978((uint64_t)a1, a2, a3, a4, 0);
}

int sqlite3_blob_write(sqlite3_blob *a1, const void *z, int n, int iOffset)
{
  return sub_1ACBCB9F8((int *)a1, (char *)z, *(uint64_t *)&n, iOffset, sub_1ACBCBC08);
}

uint64_t sub_1ACBCBC08(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;

  v8 = *a1;
  if (v8 >= 3)
  {
    result = sub_1ACBF7EA8((uint64_t)a1);
    if ((_DWORD)result)
      return result;
    v8 = *a1;
  }
  if (v8)
    return 4;
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16);
  if (v10)
  {
    v11 = *((_DWORD *)a1 + 20);
    while ((unsigned __int8 *)v10 == a1 || v11 && *(_DWORD *)(v10 + 80) != v11)
    {
      v10 = *(_QWORD *)(v10 + 40);
      if (!v10)
        goto LABEL_14;
    }
    sub_1ACBEEE90((unsigned __int8 *)v10, v11, a1);
    if ((a1[1] & 1) != 0)
      return sub_1ACBAE978((uint64_t)a1, a2, a3, a4, 1);
  }
  else
  {
LABEL_14:
    v12 = a1[1] & 0xDF;
    a1[1] = v12;
    if ((v12 & 1) != 0)
      return sub_1ACBAE978((uint64_t)a1, a2, a3, a4, 1);
  }
  return 8;
}

int sqlite3_blob_bytes(sqlite3_blob *a1)
{
  if (a1)
  {
    if (*((_QWORD *)a1 + 3))
      LODWORD(a1) = *(_DWORD *)a1;
    else
      LODWORD(a1) = 0;
  }
  return (int)a1;
}

int sqlite3_blob_reopen(sqlite3_blob *a1, sqlite3_int64 a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  double v8;
  int64x2_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  const char *v22;
  int v24;
  uint64_t v25;
  _QWORD *v26;

  if (!a1)
    return sub_1ACBBE20C(109488);
  v12 = *((_QWORD *)a1 + 4);
  v13 = *(_QWORD *)(v12 + 24);
  if (v13)
    xmmword_1ECD3B1C0(v13);
  v14 = *((_QWORD *)a1 + 3);
  if (!v14)
  {
    v20 = 4;
    goto LABEL_14;
  }
  v26 = 0;
  *(_DWORD *)(v14 + 52) = 0;
  v20 = sub_1ACBCB6D8((uint64_t)a1, a2, &v26, v2, v3, v4, v5, v6, v7, v8, v9);
  if (v20)
  {
    v21 = v26;
    if (v26)
      v22 = "%s";
    else
      v22 = 0;
    sub_1ACBC3FCC(v12, v20, v22, v15, v16, v17, v18, v19, (char)v26);
    if (v21)
      sub_1ACBE0F9C((_QWORD *)v12, v21);
    goto LABEL_14;
  }
  v24 = 0;
  if (*(_BYTE *)(v12 + 103))
LABEL_14:
    v24 = sub_1ACBF2990(v12, v20);
  v25 = *(_QWORD *)(v12 + 24);
  if (v25)
    xmmword_1ECD3B1D0(v25);
  return v24;
}

int sqlite3_strglob(const char *zGlob, const char *zStr)
{
  if (!zStr)
    return zGlob != 0;
  if (zGlob)
    return sub_1ACBADEF0((unsigned __int8 *)zGlob, zStr, byte_1ACCB6540, 91);
  return 1;
}

int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
{
  if (!zStr)
    return zGlob != 0;
  if (zGlob)
    return sub_1ACBADEF0((unsigned __int8 *)zGlob, zStr, byte_1ACCB6544, *(uint64_t *)&cEsc);
  return 1;
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (!a1)
    return "out of memory";
  v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return "bad parameter or other API misuse";
  }
  v3 = *((_QWORD *)a1 + 3);
  if (v3)
    xmmword_1ECD3B1C0(v3);
  if (*((_BYTE *)a1 + 103))
  {
    v4 = "out of memory";
    goto LABEL_9;
  }
  v6 = *((_DWORD *)a1 + 20);
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 52);
    if (!v7)
      goto LABEL_23;
    v8 = *(unsigned __int16 *)(v7 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
    {
      if ((v8 & 1) != 0)
        goto LABEL_23;
      v4 = (const char *)sub_1ACBF2B64((int *)v7, 1);
    }
    else
    {
      v4 = *(const char **)(v7 + 8);
    }
    if (v4)
      goto LABEL_9;
    v6 = *((_DWORD *)a1 + 20);
LABEL_23:
    switch(v6)
    {
      case 516:
        v4 = "abort due to ROLLBACK";
        goto LABEL_9;
      case 101:
        v4 = "no more rows available";
        goto LABEL_9;
      case 100:
        v4 = "another row available";
        goto LABEL_9;
    }
    v6 = v6;
    if (v6 > 0x1Cu)
      goto LABEL_32;
  }
  if (((0x1410004uLL >> v6) & 1) == 0)
  {
    v4 = off_1E5C74AE8[v6];
    goto LABEL_9;
  }
LABEL_32:
  v4 = "unknown error";
LABEL_9:
  v5 = *((_QWORD *)a1 + 3);
  if (v5)
    xmmword_1ECD3B1D0(v5);
  return v4;
}

uint64_t sqlite3_exec_b(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  const char *v10;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  sqlite3_stmt *v19;
  int v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  uint64_t v23;
  uint64_t v24;
  sqlite3_stmt *v25;
  unsigned __int8 *v26;

  v25 = 0;
  if (!a1)
  {
    v10 = "NULL";
    goto LABEL_15;
  }
  v9 = *(unsigned __int8 *)(a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(142397);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  if (a2)
    v12 = a2;
  else
    v12 = (unsigned __int8 *)&byte_1ACCBEAEE;
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
    xmmword_1ECD3B1C0(v13);
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_QWORD *)(a1 + 416))
    sub_1ACBE938C(a1, 0);
  else
    *(_DWORD *)(a1 + 84) = -1;
  v26 = 0;
  while (1)
  {
    if (!*v12)
    {
      v16 = 0;
      goto LABEL_38;
    }
    v25 = 0;
    v15 = sub_1ACB5C66C(a1, v12, 0xFFFFFFFFLL, 128, 0, &v25, &v26, a8);
    if (v15)
    {
      v16 = v15;
      goto LABEL_38;
    }
    if (v25)
      break;
    v16 = 0;
    v12 = v26;
LABEL_18:
    if (v16)
      goto LABEL_38;
  }
  while (1)
  {
    v17 = sqlite3_step(v25);
    v18 = v17;
    if (a3)
    {
      if (v17 != 100 && (v17 != 101 || (*(_BYTE *)(a1 + 49) & 1) == 0))
      {
LABEL_29:
        v19 = v25;
        if (*((_BYTE *)v25 + 267))
          v16 = sub_1ACB68B58((_QWORD **)v25);
        else
          v16 = 0;
        sub_1ACBBE904((uint64_t)v19);
        v25 = 0;
        v12 = v26 - 1;
        do
          v20 = *++v12;
        while ((byte_1ACCB6548[v20] & 1) != 0);
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(uint64_t, sqlite3_stmt *))(a3 + 16))(a3, v25))
        break;
    }
    if (v18 != 100)
      goto LABEL_29;
  }
  v21 = v25;
  if (*((_BYTE *)v25 + 267))
    sub_1ACB68B58((_QWORD **)v25);
  sub_1ACBBE904((uint64_t)v21);
  v25 = 0;
  v16 = 4;
  *(_DWORD *)(a1 + 80) = 4;
  sub_1ACBE938C(a1, 4);
LABEL_38:
  v22 = v25;
  if (v25)
  {
    if (*((_BYTE *)v25 + 267))
      sub_1ACB68B58((_QWORD **)v25);
    sub_1ACBBE904((uint64_t)v22);
  }
  if (!v16 && !*(_BYTE *)(a1 + 103))
  {
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 24);
    if (!v24)
      return v23;
    goto LABEL_47;
  }
  v23 = sub_1ACBF2990(a1, v16);
  v24 = *(_QWORD *)(a1 + 24);
  if (v24)
LABEL_47:
    xmmword_1ECD3B1D0(v24);
  return v23;
}

int sqlite3_auto_extension(void (*xEntryPoint)(void))
{
  return 21;
}

int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
{
  uint64_t v1;
  uint64_t v2;

  if ((_BYTE)word_1ECD3B144)
  {
    v1 = qword_1ECD3B1B0(2);
    if (v1)
    {
      v2 = v1;
      xmmword_1ECD3B1C0(v1);
      xmmword_1ECD3B1D0(v2);
    }
  }
  return 0;
}

void sqlite3_reset_auto_extension(void)
{
  uint64_t v0;
  uint64_t v1;

  if (!sqlite3_initialize() && (_BYTE)word_1ECD3B144)
  {
    v0 = qword_1ECD3B1B0(2);
    if (v0)
    {
      v1 = v0;
      xmmword_1ECD3B1C0(v0);
      xmmword_1ECD3B1D0(v1);
    }
  }
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  uint64_t v5;

  return sub_1ACB5C66C((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, 0, 0, ppStmt, pzTail, v5);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  uint64_t v6;

  return sub_1ACB5C66C((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, prepFlags & 0xF | 0x80, 0, ppStmt, pzTail, v6);
}

int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1ACBB16CC((uint64_t)db, (char *)zSql, nByte, 0, ppStmt, pzTail);
}

int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1ACBB16CC((uint64_t)db, (char *)zSql, nByte, prepFlags & 0xF | 0x80, ppStmt, pzTail);
}

int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
{
  int v4;
  const char *v5;

  if (!db)
  {
    v5 = "NULL";
    goto LABEL_10;
  }
  v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(161238);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  if (zName)
    return sub_1ACB5BDE4((uint64_t)db, (char *)zName, (uint64_t)p, (uint64_t)pClientData, 0);
  return sub_1ACBBE20C(161238);
}

int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  int v5;
  const char *v6;

  if (!db)
  {
    v6 = "NULL";
    goto LABEL_10;
  }
  v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1ACBBE20C(161254);
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  if (zName)
    return sub_1ACB5BDE4((uint64_t)db, (char *)zName, (uint64_t)p, (uint64_t)pClientData, (void (*)(uint64_t))xDestroy);
  return sub_1ACBBE20C(161254);
}

int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
{
  int v3;
  const char *v4;
  _QWORD *v5;
  const char **v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char **v11;
  const char *v12;

  if (!db)
  {
    v4 = "NULL";
    goto LABEL_18;
  }
  v3 = *((unsigned __int8 *)db + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(161266);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  v5 = (_QWORD *)*((_QWORD *)db + 72);
  if (v5)
  {
    v7 = azKeep + 1;
    do
    {
      v8 = v5[2];
      v5 = (_QWORD *)*v5;
      if (azKeep && (v9 = *azKeep) != 0)
      {
        v10 = *(const char **)(v8 + 8);
        v11 = v7;
        while (strcmp(v9, v10))
        {
          v12 = *v11++;
          v9 = v12;
          if (!v12)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        sub_1ACB5BDE4((uint64_t)db, *(char **)(v8 + 8), 0, 0, 0);
      }
    }
    while (v5);
  }
  return 0;
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  sqlite3 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  if (!a1)
  {
    v10 = "NULL";
    goto LABEL_16;
  }
  v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(161943);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  if (!zSQL)
    return sub_1ACBBE20C(161943);
  v12 = *((_QWORD *)a1 + 3);
  if (v12)
    xmmword_1ECD3B1C0(v12);
  v13 = *((_QWORD *)a1 + 74);
  if (v13 && (v58 = 0, v56 = 0u, v57 = 0u, v55 = 0u, !*(_DWORD *)(v13 + 24)))
  {
    v16 = *(_QWORD *)(v13 + 8);
    v53 = 0uLL;
    v52 = 0uLL;
    v51 = 0uLL;
    v50 = 0uLL;
    v49 = 0uLL;
    v48 = 0uLL;
    v47 = 0uLL;
    v46 = 0uLL;
    v45 = 0uLL;
    v44 = 0uLL;
    v43 = 0uLL;
    v42 = 0uLL;
    v41 = 0uLL;
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v66 = 0uLL;
    v67 = 0;
    v17 = *((_QWORD *)a1 + 43);
    v54 = 0;
    *(_QWORD *)&v57 = v17;
    *((_QWORD *)a1 + 43) = &v40;
    v40 = a1;
    if (*((_BYTE *)a1 + 103))
      sub_1ACBCB308((uint64_t)&v40, "out of memory", v2, v3, v4, v5, v6, v7, v39);
    BYTE6(v60) = 1;
    BYTE5(v54) = 1;
    v18 = *((_BYTE *)a1 + 197);
    *((_BYTE *)a1 + 197) = 0;
    LOWORD(v54) = 1;
    if (sub_1ACB5CFD8((uint64_t)&v40, (unsigned __int8 *)zSQL)
      || (v24 = v63) == 0
      || *((_BYTE *)a1 + 103)
      || *(_BYTE *)(v63 + 63))
    {
      if ((_QWORD)v41)
        v25 = "%s";
      else
        v25 = 0;
      v26 = 1;
      sub_1ACBC3FCC((uint64_t)a1, 1, v25, v19, v20, v21, v22, v23, v41);
      if ((_QWORD)v41)
        sub_1ACBE0F9C(a1, (_QWORD *)v41);
    }
    else
    {
      if (*(_QWORD *)(v16 + 8))
      {
        v26 = 0;
      }
      else
      {
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(v63 + 8);
        v33 = *(_QWORD **)(v24 + 80);
        if (v33)
          sub_1ACC010B0(a1, v33);
        v26 = 0;
        v34 = *(_WORD *)(v24 + 54);
        *(_WORD *)(v16 + 54) = v34;
        *(_WORD *)(v16 + 56) = v34;
        *(_DWORD *)(v16 + 48) |= *(_DWORD *)(v24 + 48) & 0x280;
        *(_WORD *)(v24 + 54) = 0;
        *(_QWORD *)(v24 + 8) = 0;
        if ((*(_BYTE *)(v24 + 48) & 0x80) != 0)
        {
          if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v13 + 8) + 104))
          {
            v35 = v24 + 16;
            do
            {
              v36 = *(_QWORD *)v35;
              v37 = *(_WORD *)(*(_QWORD *)v35 + 99) & 3;
              v35 = *(_QWORD *)v35 + 40;
            }
            while (v37 != 2);
            v26 = *(unsigned __int16 *)(v36 + 94) != 1;
          }
          else
          {
            v26 = 0;
          }
        }
        v38 = *(_QWORD *)(v24 + 16);
        if (v38)
        {
          *(_QWORD *)(v16 + 16) = v38;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)(v38 + 24) = v16;
        }
      }
      *(_DWORD *)(v13 + 24) = 1;
    }
    BYTE6(v60) = 0;
    v27 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      if (*(_BYTE *)(*((_QWORD *)&v41 + 1) + 267))
        sub_1ACB68B58(*((_QWORD ***)&v41 + 1));
      sub_1ACBBE904(v27);
    }
    v28 = (_QWORD *)v63;
    if ((_QWORD)v63)
    {
      if (*((_QWORD *)a1 + 102) || (v29 = *(_DWORD *)(v63 + 44) - 1, (*(_DWORD *)(v63 + 44) = v29) == 0))
        sub_1ACC00BE8(a1, v28);
    }
    sub_1ACBCB8D0(&v40);
    *((_BYTE *)a1 + 197) = v18;
    if (v26)
      v30 = 0;
    else
      v30 = *((_BYTE *)a1 + 103) == 0;
    if (v30)
      v31 = 0;
    else
      v31 = sub_1ACBF2990((uint64_t)a1, v26);
    v32 = *((_QWORD *)a1 + 3);
    if (v32)
      xmmword_1ECD3B1D0(v32);
    return v31;
  }
  else
  {
    *((_DWORD *)a1 + 20) = 21;
    sub_1ACBE938C((uint64_t)a1, 21);
    v14 = *((_QWORD *)a1 + 3);
    if (v14)
      xmmword_1ECD3B1D0(v14);
    return sub_1ACBBE20C(161951);
  }
}

int sqlite3_vtab_on_conflict(sqlite3 *a1)
{
  int v1;
  const char *v2;
  int v3;

  if (!a1)
  {
    v2 = "NULL";
    goto LABEL_10;
  }
  v1 = *((unsigned __int8 *)a1 + 113);
  if (v1 == 186)
  {
LABEL_5:
    v2 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v2);
    goto LABEL_11;
  }
  if (v1 != 118)
  {
    if (v1 != 109)
    {
      v2 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  v3 = *((unsigned __int8 *)a1 + 108);
  if ((v3 - 1) < 5)
    return byte_1ACCB6648[v3 - 1];
LABEL_11:
  sub_1ACBBE20C(162422);
  return 0;
}

int sqlite3_vtab_config(sqlite3 *a1, int op, ...)
{
  int v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, op);
  v12 = va_arg(va, _QWORD);
  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_13;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(162443);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
    xmmword_1ECD3B1C0(v6);
  v7 = *((_QWORD *)a1 + 74);
  if (v7)
  {
    switch(op)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)v7 + 28) = v12;
        break;
      case 2:
        *(_BYTE *)(*(_QWORD *)v7 + 30) = 0;
        break;
      case 3:
        *(_BYTE *)(*(_QWORD *)v7 + 30) = 2;
        break;
      case 4:
        *(_BYTE *)(*(_QWORD *)v7 + 29) = 1;
        break;
      default:
        v9 = 162470;
        goto LABEL_16;
    }
    v10 = 0;
    v11 = *((_QWORD *)a1 + 3);
    if (!v11)
      return v10;
  }
  else
  {
    v9 = 162448;
LABEL_16:
    v10 = sub_1ACBBE20C(v9);
    *((_DWORD *)a1 + 20) = v10;
    sub_1ACBE938C((uint64_t)a1, v10);
    v11 = *((_QWORD *)a1 + 3);
    if (!v11)
      return v10;
  }
  xmmword_1ECD3B1D0(v11);
  return v10;
}

const char *sqlite3_vtab_collation(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    sub_1ACBBE20C(171849);
    return 0;
  }
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (signed int)a2)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 56 * *(int *)(*(_QWORD *)(a1 + 8) + 12 * a2 + 8));
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_1ACBCCBB0(*(_QWORD *)(a1 + 104), v8, a3, a4, a5, a6, a7, a8)) != 0)
    return *(const char **)v9;
  else
    return "BINARY";
}

uint64_t sub_1ACBCCBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t result;

  v9 = a1;
  if ((*(_BYTE *)(a2 + 5) & 4) != 0)
  {
    v10 = *(unsigned __int8 **)(a2 + 24);
    if ((v10[5] & 2) != 0)
      return sub_1ACB78620(a1, v10, a3, a4, a5, a6, a7, a8);
    v11 = *(unsigned __int8 **)(a2 + 16);
    if (!v11)
      goto LABEL_8;
  }
  else
  {
    v10 = *(unsigned __int8 **)(a2 + 16);
    if ((v10[5] & 2) != 0)
      return sub_1ACB78620(a1, v10, a3, a4, a5, a6, a7, a8);
    v11 = *(unsigned __int8 **)(a2 + 24);
    if (!v11)
      goto LABEL_8;
  }
  if ((v11[5] & 2) != 0)
  {
LABEL_11:
    a1 = v9;
    v10 = v11;
    return sub_1ACB78620(a1, v10, a3, a4, a5, a6, a7, a8);
  }
LABEL_8:
  result = sub_1ACB78620(a1, v10, a3, a4, a5, a6, a7, a8);
  if (!result)
    goto LABEL_11;
  return result;
}

int sqlite3_vtab_in(sqlite3_index_info *a1, int iCons, int bHandle)
{
  int v3;
  int v4;

  if (!a1 || iCons < 0)
  {
    sub_1ACBBE20C(171876);
    return 0;
  }
  v3 = 1 << iCons;
  if (iCons >= 0x20)
    v3 = 0;
  if ((*(&a1[1].nOrderBy + 1) & v3) == 0)
    return 0;
  if (!bHandle)
  {
    v4 = (uint64_t)a1[1].aOrderBy & ~v3;
    goto LABEL_12;
  }
  if (bHandle >= 1)
  {
    v4 = LODWORD(a1[1].aOrderBy) | v3;
LABEL_12:
    LODWORD(a1[1].aOrderBy) = v4;
  }
  return 1;
}

int sqlite3_vtab_rhs_value(sqlite3_index_info *a1, int a2, sqlite3_value **ppVal)
{
  char *v4;
  sqlite3_value *v5;
  uint64_t *v6;
  sqlite3_value *v7;
  int result;
  BOOL v9;
  unsigned __int8 *v10;

  if (!a1)
    return sub_1ACBBE20C(171909);
  if (a2 < 0 || a1->nConstraint <= a2)
  {
    v5 = 0;
    result = 21;
  }
  else
  {
    v4 = (char *)a1 + 8 * a2;
    v7 = (sqlite3_value *)*((_QWORD *)v4 + 16);
    v6 = (uint64_t *)(v4 + 128);
    v5 = v7;
    if (v7)
    {
      result = 0;
    }
    else
    {
      v10 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].nConstraint + 32)
                                            + 56 * a1->aConstraint[a2].iTermOffset)
                                + 24);
      if (v10)
      {
        result = sub_1ACC015D4(*(_QWORD *)a1[1].aConstraint, v10, *(unsigned __int8 *)(*(_QWORD *)a1[1].aConstraint + 100), 65, v6);
        v5 = (sqlite3_value *)*v6;
      }
      else
      {
        v5 = 0;
        result = 0;
      }
    }
  }
  *ppVal = v5;
  if (v5)
    v9 = 0;
  else
    v9 = result == 0;
  if (v9)
    return 12;
  return result;
}

int sqlite3_vtab_distinct(sqlite3_index_info *a1)
{
  int result;

  if (!a1 || (result = a1[1].nOrderBy, result >= 4))
  {
    sub_1ACBBE20C(171945);
    return 0;
  }
  return result;
}

int sqlite3_keyword_name(int a1, const char **a2, int *a3)
{
  int result;
  uint64_t v5;

  if (!a2)
    return sub_1ACBBE20C(183870);
  *a2 = 0;
  if (!a3)
    return sub_1ACBBE20C(183870);
  if (a1 > 0x92)
    return 1;
  result = 0;
  v5 = a1 + 1;
  *a2 = &aReindexedescap[word_1ACCB68E8[v5]];
  *a3 = byte_1ACCB6A10[v5];
  return result;
}

int sqlite3_keyword_count(void)
{
  return 147;
}

int sqlite3_keyword_check(const char *a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;

  if (!a1 || a2 < 0)
  {
    sub_1ACBBE20C(183882);
  }
  else if (a2 >= 2)
  {
    v2 = ((3 * byte_1ACCB6333[a1[a2 - 1]]) ^ (4 * byte_1ACCB6333[*(unsigned __int8 *)a1]) ^ a2)
       % 0x7F;
    v3 = byte_1ACCB6FC0[v2];
    if (byte_1ACCB6FC0[v2])
    {
      do
      {
        if (byte_1ACCB6A10[v3] == a2)
        {
          v4 = word_1ACCB68E8[v3];
          if ((*a1 & 0xDF) == aReindexedescap[v4]
            && (a1[1] & 0xDF) == aReindexedescap[v4 + 1])
          {
            if (a2 < 3)
              return 1;
            v5 = &aReindexedescap[v4 + 2];
            v6 = a1 + 2;
            v7 = a2 - 2;
            while (1)
            {
              v8 = *(unsigned __int8 *)v6++;
              v9 = v8 & 0xFFFFFFDF;
              v10 = *v5++;
              if (v9 != v10)
                break;
              if (!--v7)
                return 1;
            }
          }
        }
        v3 = byte_1ACCB70D3[v3];
      }
      while (v3);
    }
  }
  return 0;
}

int sqlite3_complete(const char *sql)
{
  unsigned __int8 v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;

  if (!sql)
  {
    sub_1ACBBE20C(184738);
    return 0;
  }
  v1 = *sql;
  if (!*sql)
    return 0;
  v2 = 0;
  while (2)
  {
    v3 = 0;
    switch(v1)
    {
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
      case 0x20u:
        goto LABEL_4;
      case 0x22u:
      case 0x27u:
      case 0x60u:
        do
        {
          v6 = *(unsigned __int8 *)++sql;
          v5 = v6;
        }
        while (v6 && v5 != v1);
        if (!v5)
          return 0;
        goto LABEL_10;
      case 0x2Du:
        if (sql[1] != 45)
          goto LABEL_10;
        v21 = v1;
        if (!v1)
          return v2 == 1;
        while (v21 != 10)
        {
          v22 = *++sql;
          v21 = v22;
          if (!v22)
            return v2 == 1;
        }
        goto LABEL_4;
      case 0x2Fu:
        if (sql[1] != 42)
          goto LABEL_10;
        sql += 3;
LABEL_48:
        if (*(sql - 1) == 42)
        {
          if (*sql != 47)
            goto LABEL_47;
LABEL_4:
          v3 = 1;
LABEL_5:
          v2 = byte_1ACCB6AA4[8 * v2 + v3];
          v4 = *(unsigned __int8 *)++sql;
          v1 = v4;
          if (!v4)
            return v2 == 1;
          continue;
        }
        if (*(sql - 1))
        {
LABEL_47:
          ++sql;
          goto LABEL_48;
        }
        return 0;
      case 0x3Bu:
        goto LABEL_5;
      case 0x5Bu:
        do
        {
          v8 = *(unsigned __int8 *)++sql;
          v7 = v8;
          if (!v8)
            return 0;
        }
        while (v7 != 93);
LABEL_10:
        v3 = 2;
        goto LABEL_5;
      default:
        if ((byte_1ACCB6548[v1] & 0x46) == 0)
          goto LABEL_10;
        v9 = 0;
        v10 = 0xFFFFFFFF00000000;
        do
        {
          v11 = byte_1ACCB6548[sql[v9 + 1]];
          v10 += 0x100000000;
          ++v9;
        }
        while ((v11 & 0x46) != 0);
        v12 = (char)v1 - 67;
        if (v12 > 0x31)
          goto LABEL_200;
        if (((1 << v12) & 0x100000001) == 0)
        {
          if (((1 << v12) & 0x400000004) == 0)
          {
            v3 = 2;
            if (((1 << v12) & 0x2000000020000) == 0)
              goto LABEL_201;
            if ((_DWORD)v9 != 4)
            {
              if ((_DWORD)v9 != 9)
              {
                if ((_DWORD)v9 != 7)
                  goto LABEL_200;
                if (!v1)
                {
                  v54 = 0;
                  v20 = "trigger";
                  goto LABEL_188;
                }
                if ((v1 & 0xDF) == 0x54)
                {
                  v13 = *((unsigned __int8 *)sql + 1);
                  if (!sql[1])
                  {
                    v54 = 0;
                    v20 = "rigger";
                    goto LABEL_188;
                  }
                  if ((v13 & 0xFFFFFFDF) == 0x52)
                  {
                    v14 = *((unsigned __int8 *)sql + 2);
                    if (!sql[2])
                    {
                      v54 = 0;
                      v20 = "igger";
                      goto LABEL_188;
                    }
                    if ((v14 & 0xFFFFFFDF) == 0x49)
                    {
                      v15 = *((unsigned __int8 *)sql + 3);
                      if (!sql[3])
                      {
                        v54 = 0;
                        v20 = "gger";
                        goto LABEL_188;
                      }
                      if ((v15 & 0xFFFFFFDF) == 0x47)
                      {
                        v16 = *((unsigned __int8 *)sql + 4);
                        if (!sql[4])
                        {
                          v54 = 0;
                          v20 = "ger";
                          goto LABEL_188;
                        }
                        if ((v16 & 0xFFFFFFDF) == 0x47)
                        {
                          v17 = *((unsigned __int8 *)sql + 5);
                          if (!sql[5])
                          {
                            v54 = 0;
                            v20 = "er";
                            goto LABEL_188;
                          }
                          if ((v17 & 0xFFFFFFDF) == 0x45)
                          {
                            v18 = *((unsigned __int8 *)sql + 6);
                            if (!sql[6])
                            {
                              v54 = 0;
                              v20 = "r";
LABEL_188:
                              if (v54 == byte_1ACCB6333[*v20])
                              {
LABEL_189:
                                v3 = 6;
                                goto LABEL_201;
                              }
LABEL_200:
                              v3 = 2;
LABEL_201:
                              sql += v10 >> 32;
                              goto LABEL_5;
                            }
                            if ((v18 & 0xFFFFFFDF) == 0x52)
                              goto LABEL_189;
                            v19 = &byte_1ACCB6333[v18];
                            v20 = "r";
                          }
                          else
                          {
                            v19 = &byte_1ACCB6333[v17];
                            v20 = "er";
                          }
                        }
                        else
                        {
                          v19 = &byte_1ACCB6333[v16];
                          v20 = "ger";
                        }
                      }
                      else
                      {
                        v19 = &byte_1ACCB6333[v15];
                        v20 = "gger";
                      }
                    }
                    else
                    {
                      v19 = &byte_1ACCB6333[v14];
                      v20 = "igger";
                    }
                  }
                  else
                  {
                    v19 = &byte_1ACCB6333[v13];
                    v20 = "rigger";
                  }
                }
                else
                {
                  v19 = &byte_1ACCB6333[v1];
                  v20 = "trigger";
                }
                v54 = *v19;
                goto LABEL_188;
              }
              if (!v1)
              {
                v55 = 0;
                v51 = "temporary";
                goto LABEL_198;
              }
              if ((v1 & 0xDF) == 0x54)
              {
                v42 = *((unsigned __int8 *)sql + 1);
                if (!sql[1])
                {
                  v55 = 0;
                  v51 = "emporary";
                  goto LABEL_198;
                }
                if ((v42 & 0xFFFFFFDF) == 0x45)
                {
                  v43 = *((unsigned __int8 *)sql + 2);
                  if (!sql[2])
                  {
                    v55 = 0;
                    v51 = "mporary";
                    goto LABEL_198;
                  }
                  if ((v43 & 0xFFFFFFDF) == 0x4D)
                  {
                    v44 = *((unsigned __int8 *)sql + 3);
                    if (!sql[3])
                    {
                      v55 = 0;
                      v51 = "porary";
                      goto LABEL_198;
                    }
                    if ((v44 & 0xFFFFFFDF) == 0x50)
                    {
                      v45 = *((unsigned __int8 *)sql + 4);
                      if (!sql[4])
                      {
                        v55 = 0;
                        v51 = "orary";
                        goto LABEL_198;
                      }
                      if ((v45 & 0xFFFFFFDF) == 0x4F)
                      {
                        v46 = *((unsigned __int8 *)sql + 5);
                        if (!sql[5])
                        {
                          v55 = 0;
                          v51 = "rary";
                          goto LABEL_198;
                        }
                        if ((v46 & 0xFFFFFFDF) == 0x52)
                        {
                          v47 = *((unsigned __int8 *)sql + 6);
                          if (!sql[6])
                          {
                            v55 = 0;
                            v51 = "ary";
                            goto LABEL_198;
                          }
                          if ((v47 & 0xFFFFFFDF) == 0x41)
                          {
                            v48 = *((unsigned __int8 *)sql + 7);
                            if (!sql[7])
                            {
                              v55 = 0;
                              v51 = "ry";
                              goto LABEL_198;
                            }
                            if ((v48 & 0xFFFFFFDF) == 0x52)
                            {
                              v49 = *((unsigned __int8 *)sql + 8);
                              if (!sql[8])
                              {
                                v55 = 0;
                                v51 = "y";
LABEL_198:
                                if (v55 == byte_1ACCB6333[*v51])
                                {
LABEL_199:
                                  v3 = 5;
                                  goto LABEL_201;
                                }
                                goto LABEL_200;
                              }
                              if ((v49 & 0xFFFFFFDF) == 0x59)
                                goto LABEL_199;
                              v50 = &byte_1ACCB6333[v49];
                              v51 = "y";
                            }
                            else
                            {
                              v50 = &byte_1ACCB6333[v48];
                              v51 = "ry";
                            }
                          }
                          else
                          {
                            v50 = &byte_1ACCB6333[v47];
                            v51 = "ary";
                          }
                        }
                        else
                        {
                          v50 = &byte_1ACCB6333[v46];
                          v51 = "rary";
                        }
                      }
                      else
                      {
                        v50 = &byte_1ACCB6333[v45];
                        v51 = "orary";
                      }
                    }
                    else
                    {
                      v50 = &byte_1ACCB6333[v44];
                      v51 = "porary";
                    }
                  }
                  else
                  {
                    v50 = &byte_1ACCB6333[v43];
                    v51 = "mporary";
                  }
                }
                else
                {
                  v50 = &byte_1ACCB6333[v42];
                  v51 = "emporary";
                }
              }
              else
              {
                v50 = &byte_1ACCB6333[v1];
                v51 = "temporary";
              }
              v55 = *v50;
              goto LABEL_198;
            }
            if (!v1)
            {
              LODWORD(v40) = 0;
              v41 = "temp";
              goto LABEL_155;
            }
            if ((v1 & 0xDF) == 0x54)
            {
              v40 = *((unsigned __int8 *)sql + 1);
              if (!sql[1])
              {
                v41 = "emp";
                goto LABEL_155;
              }
              if ((v40 & 0xFFFFFFDF) == 0x45)
              {
                v40 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  v41 = "mp";
                  goto LABEL_155;
                }
                if ((v40 & 0xFFFFFFDF) == 0x4D)
                {
                  v40 = *((unsigned __int8 *)sql + 3);
                  if (!sql[3])
                  {
                    v41 = "p";
LABEL_155:
                    if ((_DWORD)v40 == byte_1ACCB6333[*v41])
                      goto LABEL_199;
                    goto LABEL_200;
                  }
                  if ((v40 & 0xFFFFFFDF) == 0x50)
                    goto LABEL_199;
                  v40 += (unint64_t)byte_1ACCB6333;
                  v41 = "p";
                }
                else
                {
                  v40 += (unint64_t)byte_1ACCB6333;
                  v41 = "mp";
                }
              }
              else
              {
                v40 += (unint64_t)byte_1ACCB6333;
                v41 = "emp";
              }
            }
            else
            {
              v40 = (unint64_t)&byte_1ACCB6333[v1];
              v41 = "temp";
            }
            LODWORD(v40) = *(unsigned __int8 *)v40;
            goto LABEL_155;
          }
          if ((_DWORD)v9 != 7)
          {
            if ((_DWORD)v9 != 3)
              goto LABEL_200;
            if (!v1)
            {
              LODWORD(v30) = 0;
              v31 = "end";
              goto LABEL_135;
            }
            if ((v1 & 0xDF) == 0x45)
            {
              v30 = *((unsigned __int8 *)sql + 1);
              if (!sql[1])
              {
                v31 = "nd";
                goto LABEL_135;
              }
              if ((v30 & 0xFFFFFFDF) == 0x4E)
              {
                v30 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  v31 = "d";
LABEL_135:
                  if ((_DWORD)v30 == byte_1ACCB6333[*v31])
                  {
LABEL_136:
                    v3 = 7;
                    goto LABEL_201;
                  }
                  goto LABEL_200;
                }
                if ((v30 & 0xFFFFFFDF) == 0x44)
                  goto LABEL_136;
                v30 += (unint64_t)byte_1ACCB6333;
                v31 = "d";
              }
              else
              {
                v30 += (unint64_t)byte_1ACCB6333;
                v31 = "nd";
              }
            }
            else
            {
              v30 = (unint64_t)&byte_1ACCB6333[v1];
              v31 = "end";
            }
            LODWORD(v30) = *(unsigned __int8 *)v30;
            goto LABEL_135;
          }
          if (!v1)
          {
            v53 = 0;
            v39 = "explain";
            goto LABEL_182;
          }
          if ((v1 & 0xDF) == 0x45)
          {
            v32 = *((unsigned __int8 *)sql + 1);
            if (!sql[1])
            {
              v53 = 0;
              v39 = "xplain";
              goto LABEL_182;
            }
            if ((v32 & 0xFFFFFFDF) == 0x58)
            {
              v33 = *((unsigned __int8 *)sql + 2);
              if (!sql[2])
              {
                v53 = 0;
                v39 = "plain";
                goto LABEL_182;
              }
              if ((v33 & 0xFFFFFFDF) == 0x50)
              {
                v34 = *((unsigned __int8 *)sql + 3);
                if (!sql[3])
                {
                  v53 = 0;
                  v39 = "lain";
                  goto LABEL_182;
                }
                if ((v34 & 0xFFFFFFDF) == 0x4C)
                {
                  v35 = *((unsigned __int8 *)sql + 4);
                  if (!sql[4])
                  {
                    v53 = 0;
                    v39 = "ain";
                    goto LABEL_182;
                  }
                  if ((v35 & 0xFFFFFFDF) == 0x41)
                  {
                    v36 = *((unsigned __int8 *)sql + 5);
                    if (!sql[5])
                    {
                      v53 = 0;
                      v39 = "in";
                      goto LABEL_182;
                    }
                    if ((v36 & 0xFFFFFFDF) == 0x49)
                    {
                      v37 = *((unsigned __int8 *)sql + 6);
                      if (!sql[6])
                      {
                        v53 = 0;
                        v39 = "n";
LABEL_182:
                        if (v53 == byte_1ACCB6333[*v39])
                        {
LABEL_183:
                          v3 = 3;
                          goto LABEL_201;
                        }
                        goto LABEL_200;
                      }
                      if ((v37 & 0xFFFFFFDF) == 0x4E)
                        goto LABEL_183;
                      v38 = &byte_1ACCB6333[v37];
                      v39 = "n";
                    }
                    else
                    {
                      v38 = &byte_1ACCB6333[v36];
                      v39 = "in";
                    }
                  }
                  else
                  {
                    v38 = &byte_1ACCB6333[v35];
                    v39 = "ain";
                  }
                }
                else
                {
                  v38 = &byte_1ACCB6333[v34];
                  v39 = "lain";
                }
              }
              else
              {
                v38 = &byte_1ACCB6333[v33];
                v39 = "plain";
              }
            }
            else
            {
              v38 = &byte_1ACCB6333[v32];
              v39 = "xplain";
            }
          }
          else
          {
            v38 = &byte_1ACCB6333[v1];
            v39 = "explain";
          }
          v53 = *v38;
          goto LABEL_182;
        }
        if ((_DWORD)v9 != 6)
          goto LABEL_200;
        if (!v1)
        {
          v52 = 0;
          v29 = "create";
          goto LABEL_170;
        }
        if ((v1 & 0xDF) == 0x43)
        {
          v23 = *((unsigned __int8 *)sql + 1);
          if (!sql[1])
          {
            v52 = 0;
            v29 = "reate";
            goto LABEL_170;
          }
          if ((v23 & 0xFFFFFFDF) == 0x52)
          {
            v24 = *((unsigned __int8 *)sql + 2);
            if (!sql[2])
            {
              v52 = 0;
              v29 = "eate";
              goto LABEL_170;
            }
            if ((v24 & 0xFFFFFFDF) == 0x45)
            {
              v25 = *((unsigned __int8 *)sql + 3);
              if (!sql[3])
              {
                v52 = 0;
                v29 = "ate";
                goto LABEL_170;
              }
              if ((v25 & 0xFFFFFFDF) == 0x41)
              {
                v26 = *((unsigned __int8 *)sql + 4);
                if (!sql[4])
                {
                  v52 = 0;
                  v29 = "te";
                  goto LABEL_170;
                }
                if ((v26 & 0xFFFFFFDF) == 0x54)
                {
                  v27 = *((unsigned __int8 *)sql + 5);
                  if (!sql[5])
                  {
                    v52 = 0;
                    v29 = "e";
LABEL_170:
                    if (v52 == byte_1ACCB6333[*v29])
                    {
LABEL_171:
                      v3 = 4;
                      goto LABEL_201;
                    }
                    goto LABEL_200;
                  }
                  if ((v27 & 0xFFFFFFDF) == 0x45)
                    goto LABEL_171;
                  v28 = &byte_1ACCB6333[v27];
                  v29 = "e";
                }
                else
                {
                  v28 = &byte_1ACCB6333[v26];
                  v29 = "te";
                }
              }
              else
              {
                v28 = &byte_1ACCB6333[v25];
                v29 = "ate";
              }
            }
            else
            {
              v28 = &byte_1ACCB6333[v24];
              v29 = "eate";
            }
          }
          else
          {
            v28 = &byte_1ACCB6333[v23];
            v29 = "reate";
          }
        }
        else
        {
          v28 = &byte_1ACCB6333[v1];
          v29 = "create";
        }
        v52 = *v28;
        goto LABEL_170;
    }
  }
}

int sqlite3_complete16(const void *sql)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;

  v2 = sqlite3_initialize();
  if (v2)
    return v2;
  v3 = sub_1ACB5D828(64);
  if (!v3)
    return 7;
  v4 = v3;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)(v3 + 20) = 1;
  *(_QWORD *)(v3 + 24) = 0;
  sub_1ACB57870(v3, (char *)sql, -1, 2u, 0);
  v5 = *(unsigned __int16 *)(v4 + 20);
  if ((~v5 & 0x202) != 0 || *(_BYTE *)(v4 + 22) != 1)
  {
    if ((v5 & 1) != 0)
      goto LABEL_11;
    v6 = (const char *)sub_1ACBF2B64((int *)v4, 1);
    if (!v6)
      goto LABEL_11;
LABEL_9:
    v2 = sqlite3_complete(v6);
    goto LABEL_12;
  }
  v6 = *(const char **)(v4 + 8);
  if (v6)
    goto LABEL_9;
LABEL_11:
  v2 = 7;
LABEL_12:
  if ((*(_WORD *)(v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v4 + 32))
    sub_1ACBF2A04(v4);
  sub_1ACBE0F9C(*(_QWORD **)(v4 + 24), (_QWORD *)v4);
  return v2;
}

uint64_t sub_1ACBCDA10(uint64_t a1)
{
  uint64_t result;

  if (a1)
  {
    result = sub_1ACBE1124(a1, 0x40uLL);
    if (!result)
      return result;
  }
  else
  {
    result = sub_1ACB5D828(64);
    if (!result)
      return result;
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_WORD *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

const char *sqlite3_libversion(void)
{
  return sqlite3_version;
}

int sqlite3_libversion_number(void)
{
  return 3043002;
}

int sqlite3_threadsafe(void)
{
  return 2;
}

void sub_1ACBCDA88()
{
  uint64_t i;
  char *v1;
  char *v2;
  char *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  unsigned __int8 *j;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE *v20;
  unsigned __int8 *m;
  uint64_t v22;
  uint64_t v23;
  uint64_t n;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _BYTE *v32;
  unsigned __int8 *ii;
  uint64_t v34;
  uint64_t v35;
  uint64_t jj;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _BYTE *v44;
  unsigned __int8 *kk;
  uint64_t v46;
  uint64_t v47;
  uint64_t mm;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _BYTE *v56;
  unsigned __int8 *nn;
  uint64_t v58;
  uint64_t v59;

  for (i = 0; i != 5; ++i)
  {
    v2 = (char *)&qword_1ECD3DA78[9 * i];
    v3 = (char *)*((_QWORD *)v2 + 7);
    if (v3)
      v4 = strlen(*((const char **)v2 + 7)) & 0x3FFFFFFF;
    else
      v4 = 0;
    v5 = (_QWORD *)&xmmword_1ECD3E990 + (v4 + *v3) % 23;
    v6 = (_QWORD *)*v5;
    if (!*v5)
    {
LABEL_2:
      v1 = (char *)&qword_1ECD3DA78[9 * i];
      *((_QWORD *)v1 + 2) = 0;
      *((_QWORD *)v1 + 8) = v6;
      goto LABEL_3;
    }
    v7 = (_QWORD *)*v5;
LABEL_9:
    v8 = (_BYTE *)v7[7];
    for (j = (unsigned __int8 *)*((_QWORD *)v2 + 7); ; ++j)
    {
      v10 = *v8;
      v11 = *j;
      if ((_DWORD)v10 == (_DWORD)v11)
        break;
      if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
      {
        v7 = (_QWORD *)v7[8];
        if (v7)
          goto LABEL_9;
        goto LABEL_2;
      }
LABEL_11:
      ++v8;
    }
    if (*v8)
      goto LABEL_11;
    if (!v7)
      goto LABEL_2;
    qword_1ECD3DA78[9 * i + 2] = v7[2];
    v5 = v7 + 2;
LABEL_3:
    *v5 = v2;
  }
  for (k = 0; k != 15; ++k)
  {
    v14 = (char *)&qword_1ECD3DBE0[9 * k];
    v15 = (char *)*((_QWORD *)v14 + 7);
    if (v15)
      v16 = strlen(*((const char **)v14 + 7)) & 0x3FFFFFFF;
    else
      v16 = 0;
    v17 = (_QWORD *)&xmmword_1ECD3E990 + (v16 + *v15) % 23;
    v18 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_20:
      v13 = (char *)&qword_1ECD3DBE0[9 * k];
      *((_QWORD *)v13 + 2) = 0;
      *((_QWORD *)v13 + 8) = v18;
      goto LABEL_21;
    }
    v19 = (_QWORD *)*v17;
LABEL_27:
    v20 = (_BYTE *)v19[7];
    for (m = (unsigned __int8 *)*((_QWORD *)v14 + 7); ; ++m)
    {
      v22 = *v20;
      v23 = *m;
      if ((_DWORD)v22 == (_DWORD)v23)
        break;
      if (byte_1ACCB6333[v22] != byte_1ACCB6333[v23])
      {
        v19 = (_QWORD *)v19[8];
        if (v19)
          goto LABEL_27;
        goto LABEL_20;
      }
LABEL_29:
      ++v20;
    }
    if (*v20)
      goto LABEL_29;
    if (!v19)
      goto LABEL_20;
    qword_1ECD3DBE0[9 * k + 2] = v19[2];
    v17 = v19 + 2;
LABEL_21:
    *v17 = v14;
  }
  for (n = 0; n != 10; ++n)
  {
    v26 = (char *)&qword_1ECD3E018[9 * n];
    v27 = (char *)*((_QWORD *)v26 + 7);
    if (v27)
      v28 = strlen(*((const char **)v26 + 7)) & 0x3FFFFFFF;
    else
      v28 = 0;
    v29 = (_QWORD *)&xmmword_1ECD3E990 + (v28 + *v27) % 23;
    v30 = (_QWORD *)*v29;
    if (!*v29)
    {
LABEL_38:
      v25 = (char *)&qword_1ECD3E018[9 * n];
      *((_QWORD *)v25 + 2) = 0;
      *((_QWORD *)v25 + 8) = v30;
      goto LABEL_39;
    }
    v31 = (_QWORD *)*v29;
LABEL_45:
    v32 = (_BYTE *)v31[7];
    for (ii = (unsigned __int8 *)*((_QWORD *)v26 + 7); ; ++ii)
    {
      v34 = *v32;
      v35 = *ii;
      if ((_DWORD)v34 == (_DWORD)v35)
        break;
      if (byte_1ACCB6333[v34] != byte_1ACCB6333[v35])
      {
        v31 = (_QWORD *)v31[8];
        if (v31)
          goto LABEL_45;
        goto LABEL_38;
      }
LABEL_47:
      ++v32;
    }
    if (*v32)
      goto LABEL_47;
    if (!v31)
      goto LABEL_38;
    qword_1ECD3E018[9 * n + 2] = v31[2];
    v29 = v31 + 2;
LABEL_39:
    *v29 = v26;
  }
  for (jj = 0; jj != 20; ++jj)
  {
    v38 = (char *)&qword_1ECD3E2E8[9 * jj];
    v39 = (char *)*((_QWORD *)v38 + 7);
    if (v39)
      v40 = strlen(*((const char **)v38 + 7)) & 0x3FFFFFFF;
    else
      v40 = 0;
    v41 = (_QWORD *)&xmmword_1ECD3E990 + (v40 + *v39) % 23;
    v42 = (_QWORD *)*v41;
    if (!*v41)
    {
LABEL_56:
      v37 = (char *)&qword_1ECD3E2E8[9 * jj];
      *((_QWORD *)v37 + 2) = 0;
      *((_QWORD *)v37 + 8) = v42;
      goto LABEL_57;
    }
    v43 = (_QWORD *)*v41;
LABEL_63:
    v44 = (_BYTE *)v43[7];
    for (kk = (unsigned __int8 *)*((_QWORD *)v38 + 7); ; ++kk)
    {
      v46 = *v44;
      v47 = *kk;
      if ((_DWORD)v46 == (_DWORD)v47)
        break;
      if (byte_1ACCB6333[v46] != byte_1ACCB6333[v47])
      {
        v43 = (_QWORD *)v43[8];
        if (v43)
          goto LABEL_63;
        goto LABEL_56;
      }
LABEL_65:
      ++v44;
    }
    if (*v44)
      goto LABEL_65;
    if (!v43)
      goto LABEL_56;
    qword_1ECD3E2E8[9 * jj + 2] = v43[2];
    v41 = v43 + 2;
LABEL_57:
    *v41 = v38;
  }
  for (mm = 0; mm != 101; ++mm)
  {
    v50 = (char *)&qword_1ECD3BE10[9 * mm];
    v51 = (char *)*((_QWORD *)v50 + 7);
    if (v51)
      v52 = strlen(*((const char **)v50 + 7)) & 0x3FFFFFFF;
    else
      v52 = 0;
    v53 = (_QWORD *)&xmmword_1ECD3E990 + (v52 + *v51) % 23;
    v54 = (_QWORD *)*v53;
    if (!*v53)
    {
LABEL_74:
      v49 = (char *)&qword_1ECD3BE10[9 * mm];
      *((_QWORD *)v49 + 2) = 0;
      *((_QWORD *)v49 + 8) = v54;
      goto LABEL_75;
    }
    v55 = (_QWORD *)*v53;
LABEL_81:
    v56 = (_BYTE *)v55[7];
    for (nn = (unsigned __int8 *)*((_QWORD *)v50 + 7); ; ++nn)
    {
      v58 = *v56;
      v59 = *nn;
      if ((_DWORD)v58 == (_DWORD)v59)
        break;
      if (byte_1ACCB6333[v58] != byte_1ACCB6333[v59])
      {
        v55 = (_QWORD *)v55[8];
        if (v55)
          goto LABEL_81;
        goto LABEL_74;
      }
LABEL_83:
      ++v56;
    }
    if (*v56)
      goto LABEL_83;
    if (!v55)
      goto LABEL_74;
    qword_1ECD3BE10[9 * mm + 2] = v55[2];
    v53 = v55 + 2;
LABEL_75:
    *v53 = v50;
  }
}

uint64_t sub_1ACBCDF6C()
{
  uint64_t (*v0)(_QWORD);
  BOOL v1;
  BOOL v2;
  void *v3;

  v0 = (uint64_t (*)(_QWORD))xmmword_1ECD3B1F8;
  if (!(_QWORD)xmmword_1ECD3B1F8)
  {
    if (dword_1ECD3B284)
      v1 = dword_1ECD3B280 == 0;
    else
      v1 = 1;
    v2 = v1 || qword_1ECD3B278 == 0;
    v3 = &unk_1E5C74A18;
    if (v2)
      v3 = &unk_1E5C74A80;
    sqlite3_config(18, v3);
    v0 = (uint64_t (*)(_QWORD))xmmword_1ECD3B1F8;
  }
  return v0(*((_QWORD *)&xmmword_1ECD3B1E8 + 1));
}

uint64_t sub_1ACBCDFE0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);

  if (sqlite3_initialize())
    return 7;
  v1 = sub_1ACB5D828(10);
  if (!v1)
    return 7;
  v2 = v1;
  v3 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_10;
    v3 = &xmmword_1ECD3B1D0;
  }
  (*v3)(v2);
LABEL_10:
  sqlite3_os_init();
  return 0;
}

uint64_t sub_1ACBCE0A8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (sqlite3_initialize())
    return 1;
  if ((_BYTE)word_1ECD3B144 && (v1 = qword_1ECD3B1B0(2)) != 0)
  {
    v2 = v1;
    xmmword_1ECD3B1C0(v1);
    v3 = qword_1ECD3E928;
    xmmword_1ECD3B1D0(v2);
    if (!v3)
      return 1;
  }
  else
  {
    v3 = qword_1ECD3E928;
    if (!qword_1ECD3E928)
      return 1;
  }
  v4 = *(_DWORD *)(v3 + 4);
  *(_QWORD *)algn_1ECD3BD58 = v3;
  if (v4 <= 0x18)
    v4 = 24;
  dword_1ECD3BD3C = v4;
  result = sqlite3_initialize();
  if (!(_DWORD)result)
  {
    if ((_BYTE)word_1ECD3B144)
    {
      v5 = qword_1ECD3B1B0(2);
      v6 = v5;
      if (v5)
      {
        xmmword_1ECD3B1C0(v5);
        v7 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = 1;
LABEL_17:
    v8 = &qword_1ECD3E928;
    v9 = qword_1ECD3E928;
    if ((_UNKNOWN *)qword_1ECD3E928 != &unk_1ECD3BD38)
    {
      if (!qword_1ECD3E928)
        goto LABEL_30;
      v10 = (_QWORD *)qword_1ECD3E928;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[2];
        if (v10)
          v12 = v10 == (_QWORD *)&unk_1ECD3BD38;
        else
          v12 = 1;
      }
      while (!v12);
      if (v10 != (_QWORD *)&unk_1ECD3BD38)
      {
LABEL_28:
        if (v9)
        {
          v15 = *(_QWORD *)(v9 + 16);
          v13 = (uint64_t *)(v9 + 16);
          v14 = v15;
LABEL_31:
          qword_1ECD3BD48 = v14;
          *v13 = (uint64_t)&unk_1ECD3BD38;
          if ((v7 & 1) == 0)
            xmmword_1ECD3B1D0(v6);
          return 0;
        }
LABEL_30:
        v14 = 0;
        v13 = &qword_1ECD3E928;
        goto LABEL_31;
      }
      v8 = v11 + 2;
    }
    *v8 = qword_1ECD3BD48;
    v9 = qword_1ECD3E928;
    goto LABEL_28;
  }
  return result;
}

_QWORD *sub_1ACBCE22C(_QWORD *result, int a2, int a3)
{
  int v3;
  BOOL v4;
  signed int v5;
  _QWORD *v6;

  if ((_DWORD)xmmword_1EECAD200)
  {
    if (result)
      v3 = a3;
    else
      v3 = 0;
    if (v3)
      v4 = result == 0;
    else
      v4 = 1;
    v5 = a2 & 0xFFFFFFF8;
    dword_1EECAD238 = v3;
    if (v4)
      v5 = 0;
    HIDWORD(xmmword_1EECAD200) = v5;
    dword_1EECAD210 = v3;
    if (v3 < 91)
    {
      dword_1EECAD214 = v3 / 10 + 1;
      qword_1EECAD218 = (uint64_t)result;
      qword_1EECAD230 = 0;
      dword_1EECAD23C = 0;
      if (!v3)
      {
LABEL_16:
        *(_QWORD *)&xmmword_1EECAD220 = result;
        return result;
      }
    }
    else
    {
      dword_1EECAD214 = 10;
      qword_1EECAD218 = (uint64_t)result;
      dword_1EECAD23C = 0;
    }
    v6 = 0;
    do
    {
      *result = v6;
      v6 = result;
      result = (_QWORD *)((char *)result + v5);
      --v3;
    }
    while (v3);
    qword_1EECAD230 = (uint64_t)result - v5;
    goto LABEL_16;
  }
  return result;
}

int sqlite3_shutdown(void)
{
  uint64_t v0;
  uint64_t v1;

  if ((_DWORD)qword_1ECD3B294)
  {
    os_unfair_recursive_lock_lock_with_options();
    HIDWORD(qword_1ECD3B294) = 1;
    if (!(_DWORD)qword_1ECD3B294)
    {
      qword_1ECD3B294 = 0;
      os_unfair_recursive_lock_unlock();
      return 0;
    }
    qword_1ECD3E950 = 0;
    if (!sqlite3_initialize())
    {
      if ((_BYTE)word_1ECD3B144)
      {
        v0 = qword_1ECD3B1B0(2);
        if (v0)
        {
          v1 = v0;
          xmmword_1ECD3B1C0(v0);
          xmmword_1ECD3B1D0(v1);
        }
      }
    }
    qword_1ECD3B294 = 0;
    os_unfair_recursive_lock_unlock();
  }
  if (dword_1ECD3B2A4)
  {
    if (*((_QWORD *)&xmmword_1ECD3B1F8 + 1))
      (*((void (**)(_QWORD))&xmmword_1ECD3B1F8 + 1))(*((_QWORD *)&xmmword_1ECD3B1E8 + 1));
    dword_1ECD3B2A4 = 0;
  }
  if (dword_1ECD3B2A0)
  {
    if (off_1ECD3B190)
      off_1ECD3B190(qword_1ECD3B198);
    xmmword_1ECD3E930 = 0u;
    *(_OWORD *)&qword_1ECD3E940 = 0u;
    dword_1ECD3B2A0 = 0;
    sqlite3_data_directory = 0;
    sqlite3_temp_directory = 0;
  }
  if (dword_1ECD3B29C)
  {
    if (*(&xmmword_1ECD3B1A0 + 1))
      ((void (*)(void))*(&xmmword_1ECD3B1A0 + 1))();
    dword_1ECD3B29C = 0;
  }
  return 0;
}

uint64_t sub_1ACBCE450()
{
  BOOL v0;
  BOOL v1;
  void *v2;

  if (dword_1ECD3B284)
    v0 = dword_1ECD3B280 == 0;
  else
    v0 = 1;
  v1 = v0 || qword_1ECD3B278 == 0;
  v2 = &unk_1E5C74A18;
  if (v1)
    v2 = &unk_1E5C74A80;
  return sqlite3_config(18, v2);
}

sqlite3_mutex *__cdecl sqlite3_db_mutex(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return (sqlite3_mutex *)*((_QWORD *)a1 + 3);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186006);
  return 0;
}

int sqlite3_db_release_memory(sqlite3 *a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (!a1)
  {
    v3 = "NULL";
    goto LABEL_18;
  }
  v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1ACBBE20C(186021);
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  v4 = *((_QWORD *)a1 + 3);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE9148((uint64_t)a1);
  v5 = *((_DWORD *)a1 + 10);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 8;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 4) + v7);
      if (v8 && off_1ECD3B248)
      {
        ((void (*)(_QWORD))off_1ECD3B248)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 8) + 336) + 72));
        v5 = *((_DWORD *)a1 + 10);
      }
      ++v6;
      v7 += 32;
    }
    while (v6 < v5);
  }
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE91DC((uint64_t)a1);
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return 0;
}

int sqlite3_db_cacheflush(sqlite3 *a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  BOOL v19;

  if (!a1)
  {
    v3 = "NULL";
    goto LABEL_34;
  }
  v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_34:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1ACBBE20C(186047);
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_34;
    }
    goto LABEL_5;
  }
  v4 = *((_QWORD *)a1 + 3);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE9148((uint64_t)a1);
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = v5;
    v8 = *((int *)a1 + 10);
    if (v5 >= v8)
      break;
    v9 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 32 * v5 + 8);
    if (v9 && *(_BYTE *)(v9 + 16) == 2)
    {
      v10 = **(_QWORD **)(v9 + 8);
      v11 = *(_DWORD *)(v10 + 48);
      if (!*(_BYTE *)(v10 + 19))
      {
        v12 = sub_1ACBEE4FC(*(uint64_t **)(v10 + 336));
        if (!v11 && v12 != 0)
        {
          v14 = v12;
          do
          {
            v15 = *(_QWORD *)(v14 + 32);
            if (*(_QWORD *)(v14 + 56))
            {
              v11 = 0;
            }
            else
            {
              v11 = sub_1ACBE9EDC(v10, v14);
              if (v11)
                break;
            }
            v14 = v15;
          }
          while (v15);
        }
      }
      if (v11 == 5)
        v16 = 0;
      else
        v16 = v11;
      if (v11 == 5)
        v6 = 1;
      v5 = v7 + 1;
      if (v16)
        goto LABEL_36;
    }
    else
    {
      v5 = v7 + 1;
    }
  }
  v16 = 0;
LABEL_36:
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE91DC((uint64_t)a1);
  v18 = *((_QWORD *)a1 + 3);
  if (v18)
    xmmword_1ECD3B1D0(v18);
  if (v6)
    v19 = v7 < v8;
  else
    v19 = 1;
  if (v19)
    return v16;
  else
    return 5;
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  int v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  va_list va;

  va_start(va, op);
  v14 = va_arg(va, _QWORD *);
  v15 = va_arg(va, int *);
  v16 = va_arg(va, _QWORD);
  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_12;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(186075);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
    xmmword_1ECD3B1C0(v6);
  v7 = 0;
  switch(op)
  {
    case 1000:
      v8 = 0;
      **((_QWORD **)a1 + 4) = v14;
      goto LABEL_43;
    case 1001:
      v8 = sub_1ACBCEB00((uint64_t)a1, v14, (int)v15, v16);
      goto LABEL_43;
    case 1002:
      goto LABEL_34;
    case 1003:
      v7 = 1;
      goto LABEL_34;
    case 1004:
      if ((dword_1ECD3B304 & 0x80) == 0)
      {
        v7 = 3;
LABEL_34:
        v10 = *((_QWORD *)a1 + 6);
        if ((int)v14 < 1)
        {
          if ((_DWORD)v14)
          {
LABEL_41:
            v8 = 0;
            if (v15)
              *v15 = (*((_QWORD *)a1 + 6) & *((unsigned int *)&unk_1ACCB6AE4 + 2 * v7 + 1)) != 0;
            goto LABEL_43;
          }
          v11 = v10 & ~(unint64_t)*((unsigned int *)&unk_1ACCB6AE4 + 2 * v7 + 1);
        }
        else
        {
          v11 = v10 | *((unsigned int *)&unk_1ACCB6AE4 + 2 * v7 + 1);
        }
        *((_QWORD *)a1 + 6) = v11;
        if (v10 != v11)
        {
          for (i = *((_QWORD *)a1 + 1); i; i = *(_QWORD *)(i + 16))
            *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
        }
        goto LABEL_41;
      }
      v8 = 0;
      if (v15)
        *v15 = (*((_DWORD *)a1 + 12) >> 22) & 1;
LABEL_43:
      v13 = *((_QWORD *)a1 + 3);
      if (v13)
        xmmword_1ECD3B1D0(v13);
      return v8;
    case 1005:
      v8 = sub_1ACBBE20C(186095);
      goto LABEL_43;
    case 1006:
      v7 = 5;
      goto LABEL_34;
    case 1007:
      v7 = 6;
      goto LABEL_34;
    case 1008:
      v7 = 7;
      goto LABEL_34;
    case 1009:
      v7 = 8;
      goto LABEL_34;
    case 1010:
      v7 = 9;
      goto LABEL_34;
    case 1011:
      v7 = 10;
      goto LABEL_34;
    case 1012:
      v7 = 11;
      goto LABEL_34;
    case 1013:
      v7 = 13;
      goto LABEL_34;
    case 1014:
      v7 = 12;
      goto LABEL_34;
    case 1015:
      v7 = 2;
      goto LABEL_34;
    case 1016:
      v7 = 14;
      goto LABEL_34;
    case 1017:
      v7 = 15;
      goto LABEL_34;
    case 1018:
      v7 = 16;
      goto LABEL_34;
    case 1019:
      v7 = 17;
      goto LABEL_34;
    default:
      v8 = 1;
      goto LABEL_43;
  }
}

uint64_t sub_1ACBCEB00(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  int v33;

  v7 = a1;
  v8 = *(_QWORD **)(a1 + 464);
  if (!v8)
  {
    v9 = 0;
    v10 = *(_QWORD **)(a1 + 472);
    if (v10)
      goto LABEL_5;
LABEL_15:
    v11 = 0;
    v12 = *(_QWORD **)(a1 + 480);
    if (v12)
      goto LABEL_8;
    goto LABEL_16;
  }
  v9 = 0;
  do
  {
    v8 = (_QWORD *)*v8;
    --v9;
  }
  while (v8);
  v10 = *(_QWORD **)(a1 + 472);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = 0;
  do
  {
    v10 = (_QWORD *)*v10;
    --v11;
  }
  while (v10);
  v12 = *(_QWORD **)(a1 + 480);
  if (v12)
  {
LABEL_8:
    v13 = 0;
    do
    {
      v12 = (_QWORD *)*v12;
      --v13;
    }
    while (v12);
    v14 = *(_QWORD **)(a1 + 488);
    if (v14)
      goto LABEL_11;
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
LABEL_16:
  v13 = 0;
  v14 = *(_QWORD **)(a1 + 488);
  if (!v14)
    goto LABEL_17;
LABEL_11:
  v15 = 0;
  do
  {
    v14 = (_QWORD *)*v14;
    --v15;
  }
  while (v14);
LABEL_18:
  if (v11 + v9 + v13 + v15 + *(_DWORD *)(a1 + 444) > 0)
    return 5;
  if (*(_BYTE *)(a1 + 440))
  {
    v17 = *(_QWORD *)(a1 + 504);
    if (v17)
    {
      v18 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_27:
        a1 = (*v18)(v17);
        goto LABEL_28;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v17);
      --qword_1ECD3E8D0;
      a1 = off_1ECD3B168(v17);
      v17 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v18 = &xmmword_1ECD3B1D0;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  v19 = (_QWORD *)(v7 + 464);
  v20 = (_QWORD *)(v7 + 480);
  v21 = a3 & 0xFFFFFFF8;
  if ((int)(a3 & 0xFFFFFFF8) >= 9)
    v22 = v21;
  else
    v22 = 0;
  if ((int)v21 < 9 || a4 <= 0)
  {
    *(_WORD *)(v7 + 438) = 0;
    *v19 = 0;
    *(_QWORD *)(v7 + 472) = 0;
  }
  else
  {
    v23 = a4 * (uint64_t)a3;
    if (a2)
    {
      v24 = a2;
    }
    else
    {
      if (off_1EECAD248)
        off_1EECAD248(a1);
      v25 = sub_1ACB5D828(v23);
      v24 = (_QWORD *)v25;
      if (off_1EECAD250)
        off_1EECAD250(v25);
      if (v24)
        v23 = (int)off_1ECD3B178(v24);
    }
    if (v22 < 0x180)
    {
      v26 = v23 / (v22 + 128);
      v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
      if (v22 < 0x100)
      {
        v21 = v22;
        LODWORD(v26) = v23 / v22;
        LODWORD(v27) = 0;
      }
    }
    else
    {
      v26 = v23 / (v22 + 384);
      v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
    }
    *(_QWORD *)(v7 + 504) = v24;
    *v19 = 0;
    *(_QWORD *)(v7 + 472) = 0;
    *(_WORD *)(v7 + 436) = v21;
    *(_WORD *)(v7 + 438) = v21;
    if (v24)
    {
      if ((int)v26 >= 1)
      {
        v28 = 0;
        v29 = v26;
        do
        {
          *v24 = v28;
          v28 = v24;
          v24 = (_QWORD *)((char *)v24 + v21);
          --v29;
        }
        while (v29);
        *v19 = (char *)v24 - v21;
      }
      *v20 = 0;
      *(_QWORD *)(v7 + 488) = 0;
      *(_QWORD *)(v7 + 496) = v24;
      if ((int)v27 >= 1)
      {
        v30 = 0;
        v31 = v27;
        do
        {
          v32 = v24;
          *v24 = v30;
          v24 += 16;
          v30 = v32;
          --v31;
        }
        while (v31);
        *v20 = v24 - 16;
      }
      *(_QWORD *)(v7 + 512) = v24;
      *(_DWORD *)(v7 + 432) = 0;
      *(_BYTE *)(v7 + 440) = a2 == 0;
      v33 = v27 + v26;
      goto LABEL_57;
    }
  }
  v24 = 0;
  v33 = 0;
  *(_QWORD *)(v7 + 504) = 0;
  *(_QWORD *)(v7 + 512) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  *(_QWORD *)(v7 + 496) = 0;
  *v20 = 0;
  *(_DWORD *)(v7 + 432) = 1;
  *(_WORD *)(v7 + 436) = 0;
  *(_BYTE *)(v7 + 440) = 0;
LABEL_57:
  result = 0;
  *(_DWORD *)(v7 + 444) = v33;
  *(_QWORD *)(v7 + 520) = v24;
  return result;
}

void sqlite3_set_last_insert_rowid(sqlite3 *a1, sqlite3_int64 a2)
{
  int v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_11;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1ACBBE20C(186258);
    return;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
  {
    xmmword_1ECD3B1C0(v6);
    v7 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 7) = a2;
    if (v7)
      xmmword_1ECD3B1D0(v7);
  }
  else
  {
    *((_QWORD *)a1 + 7) = a2;
  }
}

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_QWORD *)a1 + 15);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186273);
  return 0;
}

sqlite3_int64 sqlite3_total_changes64(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_QWORD *)a1 + 16);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186289);
  return 0;
}

int sqlite3_total_changes(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_DWORD *)a1 + 32);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(186289);
  return 0;
}

int sqlite3_txn_state(sqlite3 *a1, const char *zSchema)
{
  int v3;
  const char *v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  _BYTE **v10;
  int v11;
  _BYTE *v12;
  const char *j;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const char *v17;
  const char *i;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_30;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1ACBBE20C(186504);
    return -1;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  v6 = *((_QWORD *)a1 + 3);
  if (v6)
    xmmword_1ECD3B1C0(v6);
  v7 = *((_DWORD *)a1 + 10);
  v8 = __OFSUB__(v7, 1);
  v9 = (v7 - 1);
  if (zSchema)
  {
    if ((int)v9 < 0 != v8)
      goto LABEL_41;
    v10 = (_BYTE **)(*((_QWORD *)a1 + 4) + 32 * v9);
    v11 = -1;
    while (1)
    {
      v12 = *v10;
      if (*v10)
        break;
LABEL_19:
      if (!(_DWORD)v9)
      {
        v17 = "main";
        for (i = zSchema; ; ++i)
        {
          v19 = *(unsigned __int8 *)v17;
          v20 = *(unsigned __int8 *)i;
          if ((_DWORD)v19 == (_DWORD)v20)
          {
            if (!*v17)
            {
              LODWORD(v9) = 0;
              goto LABEL_33;
            }
          }
          else if (byte_1ACCB6333[v19] != byte_1ACCB6333[v20])
          {
            break;
          }
          ++v17;
        }
      }
      v10 -= 4;
      v16 = (int)v9 <= 0;
      LODWORD(v9) = v9 - 1;
      if (v16)
        goto LABEL_42;
    }
    for (j = zSchema; ; ++j)
    {
      v14 = *v12;
      v15 = *(unsigned __int8 *)j;
      if ((_DWORD)v14 == (_DWORD)v15)
      {
        if (!*v12)
        {
          v22 = v9;
          if ((v9 & 0x80000000) == 0)
            goto LABEL_35;
LABEL_41:
          v11 = -1;
          goto LABEL_42;
        }
      }
      else if (byte_1ACCB6333[v14] != byte_1ACCB6333[v15])
      {
        goto LABEL_19;
      }
      ++v12;
    }
  }
  if ((int)v9 < 0 != v8)
    goto LABEL_41;
LABEL_33:
  v22 = 0;
LABEL_35:
  v23 = (uint64_t *)(*((_QWORD *)a1 + 4) + 32 * v22 + 8);
  v24 = v9 - v22 + 1;
  v11 = -1;
  do
  {
    v25 = *v23;
    if (*v23)
      LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
    if ((int)v25 > v11)
      v11 = v25;
    v23 += 4;
    --v24;
  }
  while (v24);
LABEL_42:
  v26 = *((_QWORD *)a1 + 3);
  if (v26)
    xmmword_1ECD3B1D0(v26);
  return v11;
}

uint64_t sub_1ACBCF268(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_signpost_id_t v32;
  os_signpost_id_t v33;
  const char *v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = mach_continuous_time();
  if (a1)
  {
    v5 = v4;
    v6 = *(unsigned __int8 *)(a1 + 113);
    if (v6 != 109 && v6 != 118 && v6 != 186)
    {
      sqlite3_log(21, "API call with %s database connection pointer", "invalid");
      return sub_1ACBBE20C(186393);
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
      xmmword_1ECD3B1C0(v7);
    if ((*(_BYTE *)(a1 + 110) & 8) != 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 240))(8, *(_QWORD *)(a1 + 248), a1, 0);
    if (!*(_BYTE *)(a1 + 111))
      sub_1ACBE9148(a1);
    v8 = *(_DWORD *)(a1 + 40);
    if (v8 >= 1)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * i + 24);
        if (v10)
        {
          v11 = *(_QWORD **)(v10 + 16);
          if (v11)
          {
            do
            {
              v12 = v11[2];
              if (*(_BYTE *)(v12 + 63) == 1)
                sub_1ACC4EA28((_QWORD *)a1, v12);
              v11 = (_QWORD *)*v11;
            }
            while (v11);
            v8 = *(_DWORD *)(a1 + 40);
          }
        }
      }
    }
    for (j = *(_QWORD **)(a1 + 576); j; j = (_QWORD *)*j)
    {
      v25 = *(_QWORD *)(j[2] + 40);
      if (v25)
        sub_1ACC4EA28((_QWORD *)a1, v25);
    }
    sub_1ACBFCC3C((_QWORD *)a1);
    if (!*(_BYTE *)(a1 + 111))
      sub_1ACBE91DC(a1);
    sub_1ACB90524((int *)a1, 0x88u);
    v20 = *(_QWORD **)(a1 + 8);
    if (!v20)
    {
      v26 = *(unsigned int *)(a1 + 40);
      if ((int)v26 < 1)
      {
LABEL_52:
        if (off_1ECD3B2C8)
          off_1ECD3B2C8(qword_1ECD3B2D0, a1, 0, 2);
        *(_BYTE *)(a1 + 113) = -89;
        sub_1ACBC5444(a1, v19);
        if (v5)
        {
          if (qword_1ECD3EA78 != -1)
            dispatch_once(&qword_1ECD3EA78, &unk_1E5C72D40);
          v31 = qword_1ECD3EA70;
          v32 = os_signpost_id_make_with_pointer((os_log_t)qword_1ECD3EA70, (const void *)a1);
          if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v33 = v32;
            if (os_signpost_enabled(v31))
            {
              *(_DWORD *)buf = 134218240;
              v46 = v5;
              v47 = 2048;
              v48 = a1;
              _os_signpost_emit_with_name_impl(&dword_1ACB54000, v31, OS_SIGNPOST_INTERVAL_BEGIN, v33, "close", "startTime=%{signpost.description:begin_time}llu db=%p", buf, 0x16u);
            }
            if (os_signpost_enabled(v31))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1ACB54000, v31, OS_SIGNPOST_INTERVAL_END, v33, "close", (const char *)&unk_1ACCCA246, buf, 2u);
            }
          }
        }
        return 0;
      }
      v27 = *(_QWORD *)(a1 + 32) + 8;
      while (!*(_QWORD *)v27 || !*(_DWORD *)(*(_QWORD *)v27 + 24))
      {
        v27 += 32;
        if (!--v26)
          goto LABEL_52;
      }
    }
    if (a2)
    {
      v21 = 28;
      if (v20)
      {
LABEL_27:
        v22 = *(_QWORD *)(*v20 + 24);
        if (v22)
        {
          xmmword_1ECD3B1C0(v22);
          v23 = *(_QWORD *)(*v20 + 24);
          v24 = v20[40];
          if (v23)
            xmmword_1ECD3B1D0(v23);
          if (v24)
            goto LABEL_31;
        }
        else if (v20[40])
        {
LABEL_31:
          sqlite3_log(v21, "%s unfinalized statement: \"%s\"");
          goto LABEL_51;
        }
        sqlite3_log(v21, "%s unfinalized statement");
LABEL_51:
        if (!a2)
        {
          if ((dword_1ECD3B304 & 0x100) != 0
            && (v34 = getprogname(), strcmp(v34, "xctest"))
            && (v35 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT)))
          {
            sub_1ACCB3D80(v35, v36, v37, v38, v39, v40, v41, v42);
            v43 = *(_QWORD *)(a1 + 24);
            if (!v43)
              return v21;
          }
          else
          {
            v43 = *(_QWORD *)(a1 + 24);
            if (!v43)
              return v21;
          }
          xmmword_1ECD3B1D0(v43);
          return v21;
        }
        goto LABEL_52;
      }
    }
    else
    {
      v21 = 5;
      sub_1ACBC3FCC(a1, 5, "unable to close due to unfinalized statements or unfinished backups", v14, v15, v16, v17, v18, v44);
      v20 = *(_QWORD **)(a1 + 8);
      if (v20)
        goto LABEL_27;
    }
    v29 = *(unsigned int *)(a1 + 40);
    if ((int)v29 >= 1)
    {
      v30 = *(_QWORD *)(a1 + 32) + 8;
      while (!*(_QWORD *)v30 || !*(_DWORD *)(*(_QWORD *)v30 + 24))
      {
        v30 += 32;
        if (!--v29)
          goto LABEL_51;
      }
      sqlite3_log(v21, "%s unfinished backup");
    }
    goto LABEL_51;
  }
  return 0;
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return sub_1ACBCF268((uint64_t)a1, 1);
}

uint64_t sub_1ACBCF6E8(uint64_t *a1, int a2)
{
  int v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  double v13;

  v4 = *((_DWORD *)a1 + 193);
  v5 = *a1;
  if (*(int *)v5 >= 2 && (v6 = *(void (**)(void))(v5 + 136)) != 0)
  {
    v6();
    v7 = 0;
    if (!a2)
    {
LABEL_4:
      a1[97] = v7;
      goto LABEL_9;
    }
  }
  else
  {
    v13 = 0.0;
    (*(void (**)(uint64_t, double *))(v5 + 120))(v5, &v13);
    v7 = (uint64_t)(v13 * 86400000.0);
    if (!a2)
      goto LABEL_4;
  }
  v8 = v7 - *((_DWORD *)a1 + 194);
  if (v8 < 0)
    return 0;
  if (*((_DWORD *)a1 + 193) > v8)
  {
LABEL_12:
    (*(void (**)(void))(*a1 + 112))();
    return 1;
  }
  if (a2 > 46)
  {
    v10 = 1000;
    v11 = 1000 * a2 - 38773;
    goto LABEL_10;
  }
LABEL_9:
  v9 = 2 * a2;
  v10 = *(unsigned __int16 *)((char *)&unk_1ACCBAA44 + v9);
  v11 = *(unsigned __int16 *)((char *)&unk_1ACCBAAA2 + v9);
LABEL_10:
  if (v11 + v10 <= v4 || v4 - v11 >= 1)
    goto LABEL_12;
  return 0;
}

void sqlite3_interrupt(sqlite3 *a1)
{
  int v2;
  const char *v3;

  if (a1)
  {
    v2 = *((unsigned __int8 *)a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
LABEL_9:
        *((_DWORD *)a1 + 106) = 1;
        return;
      case 109:
LABEL_5:
        v3 = "unopened";
        break;
      default:
        v3 = "invalid";
        break;
    }
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    if (*((unsigned __int8 *)a1 + 113) == 167)
      goto LABEL_9;
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }
  sub_1ACBBE20C(187112);
}

BOOL sqlite3_is_interrupted(uint64_t a1)
{
  int v2;
  const char *v3;

  if (a1)
  {
    v2 = *(unsigned __int8 *)(a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *(_DWORD *)(a1 + 424) != 0;
      case 109:
LABEL_5:
        v3 = "unopened";
        break;
      default:
        v3 = "invalid";
        break;
    }
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    if (*(unsigned __int8 *)(a1 + 113) == 167)
      return *(_DWORD *)(a1 + 424) != 0;
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }
  sub_1ACBBE20C(187128);
  return 0;
}

uint64_t sub_1ACBCF994(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t))
{
  int v12;
  const char *v13;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t (**v31)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  char v37;

  if (!a1)
  {
    v13 = "NULL";
    goto LABEL_19;
  }
  v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 == 186)
  {
LABEL_5:
    v13 = "unopened";
LABEL_19:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    return sub_1ACBBE20C(187293);
  }
  if (v12 != 118)
  {
    if (v12 != 109)
    {
      v13 = "invalid";
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (v21)
    xmmword_1ECD3B1C0(v21);
  if (!a11)
  {
    v30 = sub_1ACB5B6C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
    goto LABEL_21;
  }
  v22 = sub_1ACB5D828(24);
  if (!v22)
  {
    if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 103) = 1;
      if (*(int *)(a1 + 220) >= 1)
        *(_DWORD *)(a1 + 424) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      v35 = *(_QWORD *)(a1 + 344);
      if (v35)
      {
        sub_1ACBCB308(v35, "out of memory", v23, v24, v25, v26, v27, v28, v37);
        for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
    a11(a5);
    v30 = 1;
    goto LABEL_28;
  }
  v29 = (_DWORD *)v22;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a11;
  *(_QWORD *)(v22 + 16) = a5;
  v30 = sub_1ACB5B6C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (_DWORD *)v22);
  if (!*v29)
  {
    a11(a5);
    v31 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_17:
      (*v31)(v29);
      goto LABEL_21;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v29);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v29);
    v29 = (_DWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v31 = &xmmword_1ECD3B1D0;
      goto LABEL_17;
    }
  }
LABEL_21:
  if (!v30 && !*(_BYTE *)(a1 + 103))
  {
    v33 = 0;
    v34 = *(_QWORD *)(a1 + 24);
    if (!v34)
      return v33;
    goto LABEL_29;
  }
LABEL_28:
  v33 = sub_1ACBF2990(a1, v30);
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
LABEL_29:
    xmmword_1ECD3B1D0(v34);
  return v33;
}

int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xValue)(sqlite3_context *), void (__cdecl *xInverse)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xDestroy)(void *))
{
  return sub_1ACBCF994((uint64_t)db, (char *)zFunctionName, *(uint64_t *)&nArg, eTextRep, (uint64_t)pApp, 0, (uint64_t)xStep, (uint64_t)xFinal, (uint64_t)xValue, (uint64_t)xInverse, (void (*)(uint64_t))xDestroy);
}

int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  int v9;
  const char *v10;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  sqlite3 *v26;
  __int128 v27;
  __int128 v28;

  if (!db)
  {
    v10 = "NULL";
    goto LABEL_13;
  }
  v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(187384);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (!zFunctionName)
    return sub_1ACBBE20C(187384);
  v17 = *(_QWORD *)&nArg;
  v18 = *((_QWORD *)db + 3);
  if (v18)
    xmmword_1ECD3B1C0(v18);
  v27 = 0u;
  v28 = 0u;
  v24 = 0u;
  v25 = 0;
  v26 = db;
  sub_1ACB57870((uint64_t)&v24, (char *)zFunctionName, -1, 2u, 0);
  if ((v25 & 0x200000000) != 0)
  {
    if (BYTE6(v25) != 1)
      sub_1ACBB0FEC((int *)&v24, 1);
  }
  else
  {
    BYTE6(v25) = 1;
  }
  if (*((_BYTE *)db + 103))
  {
    if (WORD2(v25) & 0x9000 | v27)
      sub_1ACBF2A04((uint64_t)&v24);
    v20 = sub_1ACB5B6C0((uint64_t)db, 0, v17, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, 0);
  }
  else
  {
    v21 = (_QWORD *)*((_QWORD *)&v24 + 1);
    v20 = sub_1ACB5B6C0((uint64_t)db, *((char **)&v24 + 1), v17, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, 0);
    if (v21)
      sub_1ACBE0F9C(db, v21);
  }
  if (v20 || *((_BYTE *)db + 103))
    v22 = sub_1ACBF2990((uint64_t)db, v20);
  else
    v22 = 0;
  v23 = *((_QWORD *)db + 3);
  if (v23)
    xmmword_1ECD3B1D0(v23);
  return v22;
}

uint64_t sub_1ACBCFEC4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t (**v5)(char *);

  if (a1 && (v2 = *(_QWORD *)(a1 + 8)) != 0)
  {
    v3 = sqlite3_mprintf("unable to use function %s in the requested context", *(const char **)(v2 + 8));
  }
  else
  {
    sub_1ACBBE20C(97914);
    v3 = sqlite3_mprintf("unable to use function %s in the requested context", 0);
    if (!a1)
    {
      result = sub_1ACBBE20C(97389);
      if (!v3)
        return result;
      goto LABEL_8;
    }
  }
  *(_DWORD *)(a1 + 36) = 1;
  result = sub_1ACB57870(*(_QWORD *)a1, v3, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  if (!v3)
    return result;
LABEL_8:
  v5 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v5)(v3);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v3);
  v3 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    return (*v5)(v3);
  }
  return result;
}

void *__cdecl sqlite3_trace(sqlite3 *a1, void (__cdecl *xTrace)(void *, const char *), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  void *v9;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_12;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187470);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v8 = *((_QWORD *)a1 + 3);
  }
  v9 = (void *)*((_QWORD *)a1 + 31);
  *((_BYTE *)a1 + 110) = (xTrace != 0) << 6;
  *((_QWORD *)a1 + 30) = xTrace;
  *((_QWORD *)a1 + 31) = a3;
  if (v8)
    xmmword_1ECD3B1D0(v8);
  return v9;
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  int v5;
  const char *v6;
  uint64_t v10;
  int (__cdecl *v11)(unsigned int, void *, void *, void *);
  char v12;

  if (!a1)
  {
    v6 = "NULL";
    goto LABEL_19;
  }
  v5 = *((unsigned __int8 *)a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
LABEL_19:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1ACBBE20C(187494);
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
  {
    xmmword_1ECD3B1C0(v10);
    v10 = *((_QWORD *)a1 + 3);
  }
  if (uMask)
    v11 = xCallback;
  else
    v11 = 0;
  if (v11)
    v12 = uMask;
  else
    v12 = 0;
  *((_BYTE *)a1 + 110) = v12;
  *((_QWORD *)a1 + 30) = v11;
  *((_QWORD *)a1 + 31) = pCtx;
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return 0;
}

void *__cdecl sqlite3_profile(sqlite3 *a1, void (__cdecl *xProfile)(void *, const char *, sqlite3_uint64), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  void *v9;
  char v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_15;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187525);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v8 = *((_QWORD *)a1 + 3);
  }
  v9 = (void *)*((_QWORD *)a1 + 33);
  *((_QWORD *)a1 + 32) = xProfile;
  *((_QWORD *)a1 + 33) = a3;
  if (xProfile)
    v10 = *((_BYTE *)a1 + 110) & 0xF | 0x80;
  else
    v10 = *((_BYTE *)a1 + 110) & 0xF;
  *((_BYTE *)a1 + 110) = v10;
  if (v8)
    xmmword_1ECD3B1D0(v8);
  return v9;
}

void *__cdecl sqlite3_commit_hook(sqlite3 *a1, int (__cdecl *a2)(void *), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187555);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    v10 = (void *)*((_QWORD *)a1 + 34);
    *((_QWORD *)a1 + 34) = a3;
    *((_QWORD *)a1 + 35) = a2;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    v10 = (void *)*((_QWORD *)a1 + 34);
    *((_QWORD *)a1 + 34) = a3;
    *((_QWORD *)a1 + 35) = a2;
  }
  return v10;
}

void *__cdecl sqlite3_update_hook(sqlite3 *a1, void (__cdecl *a2)(void *, int, const char *, const char *, sqlite3_int64), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187580);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    v10 = (void *)*((_QWORD *)a1 + 38);
    *((_QWORD *)a1 + 38) = a3;
    *((_QWORD *)a1 + 39) = a2;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    v10 = (void *)*((_QWORD *)a1 + 38);
    *((_QWORD *)a1 + 38) = a3;
    *((_QWORD *)a1 + 39) = a2;
  }
  return v10;
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187605);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    v10 = (void *)*((_QWORD *)a1 + 36);
    *((_QWORD *)a1 + 36) = a3;
    *((_QWORD *)a1 + 37) = a2;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    v10 = (void *)*((_QWORD *)a1 + 36);
    *((_QWORD *)a1 + 36) = a3;
    *((_QWORD *)a1 + 37) = a2;
  }
  return v10;
}

uint64_t sqlite3_preupdate_hook(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a1[3];
  if (v6)
  {
    xmmword_1ECD3B1C0(v6);
    v7 = a1[3];
    v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
    if (v7)
      xmmword_1ECD3B1D0(v7);
  }
  else
  {
    v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
  }
  return v8;
}

int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (__cdecl *a2)(void *, const char *, unsigned int, unsigned int, unsigned int), void *a3, void (__cdecl *a4)(void *))
{
  int v7;
  const char *v8;
  uint64_t v10;
  void (*v11)(_QWORD);
  uint64_t v12;

  if (!db)
  {
    v8 = "NULL";
    goto LABEL_15;
  }
  v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    v8 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    if (a4)
      ((void (*)(void *))a4)(a3);
    return sub_1ACBBE20C(187651);
  }
  if (v7 != 118)
  {
    if (v7 != 109)
    {
      v8 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  v10 = *((_QWORD *)db + 3);
  if (v10)
    xmmword_1ECD3B1C0(v10);
  v11 = (void (*)(_QWORD))*((_QWORD *)db + 41);
  if (v11)
    v11(*((_QWORD *)db + 40));
  *((_QWORD *)db + 41) = a4;
  *((_QWORD *)db + 42) = a2;
  *((_QWORD *)db + 40) = a3;
  v12 = *((_QWORD *)db + 3);
  if (v12)
    xmmword_1ECD3B1D0(v12);
  return 0;
}

int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
{
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (!db)
  {
    v4 = "NULL";
    goto LABEL_12;
  }
  v3 = *((unsigned __int8 *)db + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1ACBBE20C(187705);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  if (N >= 1)
  {
    v5 = N;
    v6 = *((_QWORD *)db + 3);
    if (!v6)
    {
      *((_QWORD *)db + 47) = sub_1ACB9F16C;
      *((_QWORD *)db + 48) = N;
      return 0;
    }
    xmmword_1ECD3B1C0(v6);
    v7 = *((_QWORD *)db + 3);
    *((_QWORD *)db + 47) = sub_1ACB9F16C;
    *((_QWORD *)db + 48) = v5;
    if (!v7)
      return 0;
    goto LABEL_15;
  }
  v9 = *((_QWORD *)db + 3);
  if (!v9)
  {
    *((_QWORD *)db + 47) = 0;
    *((_QWORD *)db + 48) = 0;
    return 0;
  }
  xmmword_1ECD3B1C0(v9);
  v7 = *((_QWORD *)db + 3);
  *((_QWORD *)db + 47) = 0;
  *((_QWORD *)db + 48) = 0;
  if (v7)
LABEL_15:
    xmmword_1ECD3B1D0(v7);
  return 0;
}

void *__cdecl sqlite3_wal_hook(sqlite3 *a1, int (__cdecl *a2)(void *, sqlite3 *, const char *, int), void *a3)
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1ACBBE20C(187729);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    v10 = (void *)*((_QWORD *)a1 + 48);
    *((_QWORD *)a1 + 47) = a2;
    *((_QWORD *)a1 + 48) = a3;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    v10 = (void *)*((_QWORD *)a1 + 48);
    *((_QWORD *)a1 + 47) = a2;
    *((_QWORD *)a1 + 48) = a3;
  }
  return v10;
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  int *v11;
  int *v12;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  const char *j;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  const char *v26;
  const char *i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;

  if (!db)
  {
    v10 = "NULL";
    goto LABEL_14;
  }
  v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(187761);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  v11 = pnCkpt;
  v12 = pnLog;
  if (pnLog)
    *pnLog = -1;
  if (pnCkpt)
    *pnCkpt = -1;
  if (eMode > 3)
    return 21;
  v17 = *((_QWORD *)db + 3);
  if (v17)
    xmmword_1ECD3B1C0(v17);
  if (!zDb || !*zDb)
  {
    LODWORD(v19) = 12;
    goto LABEL_39;
  }
  v18 = *((_DWORD *)db + 10);
  v19 = (v18 - 1);
  if (v18 < 1)
    goto LABEL_63;
  v20 = (_BYTE **)(*((_QWORD *)db + 4) + 32 * v19);
  while (1)
  {
    v21 = *v20;
    if (*v20)
      break;
LABEL_28:
    if (!(_DWORD)v19)
    {
      v26 = "main";
      for (i = zDb; ; ++i)
      {
        v28 = *(unsigned __int8 *)v26;
        v29 = *(unsigned __int8 *)i;
        if ((_DWORD)v28 == (_DWORD)v29)
        {
          if (!*v26)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        else if (byte_1ACCB6333[v28] != byte_1ACCB6333[v29])
        {
          break;
        }
        ++v26;
      }
    }
    v20 -= 4;
    v25 = (int)v19 <= 0;
    LODWORD(v19) = v19 - 1;
    if (v25)
    {
LABEL_63:
      v37 = 1;
      sub_1ACBC3FCC((uint64_t)db, 1, "unknown database: %s", (uint64_t)pnLog, (uint64_t)pnCkpt, v5, v6, v7, (char)zDb);
      goto LABEL_64;
    }
  }
  for (j = zDb; ; ++j)
  {
    v23 = *v21;
    v24 = *(unsigned __int8 *)j;
    if ((_DWORD)v23 == (_DWORD)v24)
      break;
    if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
      goto LABEL_28;
LABEL_24:
    ++v21;
  }
  if (*v21)
    goto LABEL_24;
  if ((v19 & 0x80000000) != 0)
    goto LABEL_63;
LABEL_39:
  *((_DWORD *)db + 172) = 0;
  v30 = *((_DWORD *)db + 10);
  if (v30 < 1)
  {
    v34 = 0;
    v32 = 0;
    v36 = 1;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v33 = 8;
    do
    {
      if ((_DWORD)v19 == 12 || v19 == v31)
      {
        v35 = sub_1ACC4EB48(*(_QWORD *)(*((_QWORD *)db + 4) + v33), eMode, v12, v11);
        v12 = 0;
        v11 = 0;
        if (v35 == 5)
          v34 = 0;
        else
          v34 = v35;
        if (v35 == 5)
          v32 = 1;
        v30 = *((_DWORD *)db + 10);
      }
      else
      {
        v34 = 0;
      }
      ++v31;
      v36 = v34 == 0;
      if (v31 >= v30)
        break;
      v33 += 32;
    }
    while (!v34);
  }
  if (v36 && v32 != 0)
    v37 = 5;
  else
    v37 = v34;
  *((_DWORD *)db + 20) = v37;
  if (v37 || *((_QWORD *)db + 52))
  {
    sub_1ACBE938C((uint64_t)db, v37);
    if (!v37)
      goto LABEL_60;
    goto LABEL_64;
  }
  *((_DWORD *)db + 21) = -1;
LABEL_60:
  if (*((_BYTE *)db + 103))
LABEL_64:
    v15 = sub_1ACBF2990((uint64_t)db, v37);
  else
    v15 = 0;
  if (!*((_DWORD *)db + 52))
    *((_DWORD *)db + 106) = 0;
  v38 = *((_QWORD *)db + 3);
  if (v38)
    xmmword_1ECD3B1D0(v38);
  return v15;
}

int sqlite3_error_offset(sqlite3 *db)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (!db)
    return -1;
  v2 = *((unsigned __int8 *)db + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return -1;
  }
  if (!*((_DWORD *)db + 20))
    return -1;
  v3 = *((_QWORD *)db + 3);
  if (!v3)
    return *((_DWORD *)db + 21);
  xmmword_1ECD3B1C0(v3);
  v4 = *((_QWORD *)db + 3);
  v5 = *((_DWORD *)db + 21);
  if (v4)
    xmmword_1ECD3B1D0(v4);
  return v5;
}

const void *__cdecl sqlite3_errmsg16(sqlite3 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  const __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char v20;

  if (!a1)
    return L"out of memory";
  v7 = *((unsigned __int8 *)a1 + 113);
  if (v7 != 109 && v7 != 118 && v7 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return L"bad parameter or other API misuse";
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (*((_BYTE *)a1 + 103))
  {
    v9 = L"out of memory";
    goto LABEL_9;
  }
  v11 = *((_QWORD *)a1 + 52);
  if (v11)
  {
    v12 = *(unsigned __int16 *)(v11 + 20);
    if ((~v12 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 2)
    {
      if ((v12 & 1) == 0)
      {
        v9 = (const __int16 *)sub_1ACBF2B64((int *)v11, 2);
        if (v9)
        {
LABEL_40:
          if (!*((_BYTE *)a1 + 103))
            goto LABEL_9;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v9 = *(const __int16 **)(v11 + 8);
      if (v9)
        goto LABEL_40;
    }
  }
  v14 = *((_DWORD *)a1 + 20);
  switch(v14)
  {
    case 516:
      v15 = "abort due to ROLLBACK";
      break;
    case 101:
      v15 = "no more rows available";
      break;
    case 100:
      v15 = "another row available";
      break;
    default:
      if (*((_DWORD *)a1 + 20) > 0x1Cu || ((0x1410004uLL >> v14) & 1) != 0)
        v15 = "unknown error";
      else
        v15 = off_1E5C74AE8[*((_DWORD *)a1 + 20)];
      break;
  }
  sub_1ACBC3FCC((uint64_t)a1, v14, v15, v1, v2, v3, v4, v5, v20);
  v16 = *((_QWORD *)a1 + 52);
  if (!v16)
  {
    v9 = 0;
    goto LABEL_40;
  }
  v17 = *(unsigned __int16 *)(v16 + 20);
  if ((~v17 & 0x202) == 0 && *(_BYTE *)(v16 + 22) == 2)
  {
    v9 = *(const __int16 **)(v16 + 8);
    if (!*((_BYTE *)a1 + 103))
      goto LABEL_9;
LABEL_41:
    v18 = *((_DWORD *)a1 + 55);
    if (!v18)
    {
      *((_BYTE *)a1 + 103) = 0;
      *((_DWORD *)a1 + 106) = 0;
      v19 = *((_DWORD *)a1 + 108) - 1;
      *((_DWORD *)a1 + 108) = v19;
      if (!v19)
        LOWORD(v18) = *((_WORD *)a1 + 219);
      *((_WORD *)a1 + 218) = v18;
    }
    goto LABEL_9;
  }
  if ((v17 & 1) != 0)
  {
    v9 = 0;
    if (*((_BYTE *)a1 + 103))
      goto LABEL_41;
  }
  else
  {
    v9 = (const __int16 *)sub_1ACBF2B64((int *)v16, 2);
    if (*((_BYTE *)a1 + 103))
      goto LABEL_41;
  }
LABEL_9:
  v10 = *((_QWORD *)a1 + 3);
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return v9;
}

uint64_t sub_1ACBD0E78(uint64_t result)
{
  int v1;

  if (*(_BYTE *)(result + 103) && !*(_DWORD *)(result + 220))
  {
    *(_BYTE *)(result + 103) = 0;
    *(_DWORD *)(result + 424) = 0;
    v1 = *(_DWORD *)(result + 432) - 1;
    *(_DWORD *)(result + 432) = v1;
    if (v1)
      *(_WORD *)(result + 436) = 0;
    else
      *(_WORD *)(result + 436) = *(_WORD *)(result + 438);
  }
  return result;
}

int sqlite3_errcode(sqlite3 *db)
{
  int v1;

  if (!db)
    return 7;
  v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((_BYTE *)db + 103))
      return 7;
    return *((_DWORD *)db + 22) & *((_DWORD *)db + 20);
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1ACBBE20C(187990);
  }
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  int v1;

  if (!db)
    return 7;
  v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((_BYTE *)db + 103))
      return 7;
    return *((_DWORD *)db + 20);
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1ACBBE20C(187999);
  }
}

int sqlite3_system_errno(sqlite3 *a1)
{
  if (a1)
    LODWORD(a1) = *((_DWORD *)a1 + 23);
  return (int)a1;
}

const char *__cdecl sqlite3_errstr(int a1)
{
  switch(a1)
  {
    case 516:
      return "abort due to ROLLBACK";
    case 101:
      return "no more rows available";
    case 100:
      return "another row available";
  }
  if (a1 > 0x1Cu || ((0x1410004uLL >> a1) & 1) != 0)
    return "unknown error";
  return off_1E5C74AE8[a1];
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  int v3;
  const char *v4;
  char *v5;
  int result;
  int *v7;
  int v8;
  int v9;
  int v10;

  if (!a1)
  {
    v4 = "NULL";
    goto LABEL_16;
  }
  v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1ACBBE20C(188168);
    return -1;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      v4 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  if (id > 0xB)
    return -1;
  v5 = (char *)a1 + 4 * id;
  v8 = *((_DWORD *)v5 + 34);
  v7 = (int *)(v5 + 136);
  result = v8;
  if ((newVal & 0x80000000) == 0)
  {
    v9 = *((_DWORD *)&xmmword_1ACCB6BD4 + id);
    if (newVal | id)
      v10 = newVal;
    else
      v10 = 1;
    if (v9 >= newVal)
      v9 = v10;
    *v7 = v9;
  }
  return result;
}

uint64_t _sqlite_auto_profile(uint64_t a1, const char *a2, unint64_t a3)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "Query: %s\n Execution Time: %llu ms\n", a2, a3 / 0xF4240);
}

uint64_t _sqlite_auto_trace(const void *a1, const char *a2)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "TraceSQL(%p): %s\n", a1, a2);
}

int sqlite3_create_collation_v2(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *), void (__cdecl *xDestroy)(void *))
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v20;

  if (!a1)
  {
    v10 = "NULL";
    goto LABEL_14;
  }
  v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(189158);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  if (!zName)
    return sub_1ACBBE20C(189158);
  v15 = eTextRep;
  v16 = *((_QWORD *)a1 + 3);
  if (v16)
    xmmword_1ECD3B1C0(v16);
  v17 = sub_1ACB56FB4((uint64_t)a1, (char *)zName, v15, (uint64_t)pArg, (uint64_t)xCompare, (uint64_t)xDestroy, v6, v7);
  if (v17 || *((_BYTE *)a1 + 103))
    v18 = sub_1ACBF2990((uint64_t)a1, v17);
  else
    v18 = 0;
  v20 = *((_QWORD *)a1 + 3);
  if (v20)
    xmmword_1ECD3B1D0(v20);
  return v18;
}

int sqlite3_create_collation16(sqlite3 *a1, const void *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  int v6;
  const char *v7;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  sqlite3 *v22;
  __int128 v23;
  __int128 v24;

  if (!a1)
  {
    v7 = "NULL";
    goto LABEL_13;
  }
  v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    v7 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1ACBBE20C(189183);
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      v7 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (!zName)
    return sub_1ACBBE20C(189183);
  v11 = eTextRep;
  v12 = *((_QWORD *)a1 + 3);
  if (v12)
    xmmword_1ECD3B1C0(v12);
  v23 = 0u;
  v24 = 0u;
  v20 = 0u;
  v21 = 0;
  v22 = a1;
  sub_1ACB57870((uint64_t)&v20, (char *)zName, -1, 2u, 0);
  if ((v21 & 0x200000000) != 0)
  {
    if (BYTE6(v21) != 1)
      sub_1ACBB0FEC((int *)&v20, 1);
  }
  else
  {
    BYTE6(v21) = 1;
  }
  if (*((_BYTE *)a1 + 103))
  {
    if (WORD2(v21) & 0x9000 | v23)
      sub_1ACBF2A04((uint64_t)&v20);
  }
  else
  {
    v16 = (_QWORD *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = sub_1ACB56FB4((uint64_t)a1, *((char **)&v20 + 1), v11, (uint64_t)pArg, (uint64_t)xCompare, 0, v13, v14);
      sub_1ACBE0F9C(a1, v16);
      goto LABEL_23;
    }
  }
  v17 = 0;
LABEL_23:
  if (v17 || *((_BYTE *)a1 + 103))
    v18 = sub_1ACBF2990((uint64_t)a1, v17);
  else
    v18 = 0;
  v19 = *((_QWORD *)a1 + 3);
  if (v19)
    xmmword_1ECD3B1D0(v19);
  return v18;
}

int sqlite3_collation_needed(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const char *))
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(189208);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 49) = a3;
    *((_QWORD *)a1 + 50) = 0;
    *((_QWORD *)a1 + 51) = a2;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    *((_QWORD *)a1 + 49) = a3;
    *((_QWORD *)a1 + 50) = 0;
    *((_QWORD *)a1 + 51) = a2;
  }
  return 0;
}

int sqlite3_collation_needed16(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const void *))
{
  int v4;
  const char *v5;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v5 = "NULL";
    goto LABEL_11;
  }
  v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(189229);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v9 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 49) = 0;
    *((_QWORD *)a1 + 50) = a3;
    *((_QWORD *)a1 + 51) = a2;
    if (v9)
      xmmword_1ECD3B1D0(v9);
  }
  else
  {
    *((_QWORD *)a1 + 49) = 0;
    *((_QWORD *)a1 + 50) = a3;
    *((_QWORD *)a1 + 51) = a2;
  }
  return 0;
}

int sqlite3_global_recover(void)
{
  return 0;
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((unsigned __int8 *)a1 + 101);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1ACBBE20C(189259);
  return 0;
}

int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
{
  int *v9;
  int *v10;
  char *v14;
  int *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  const char *v34;
  char v35;
  int v36;
  const char *v37;
  char *v38;
  const char *v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  const char *i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  unint64_t v52;
  const char *v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  unsigned int v59;
  int *v60;
  int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v9 = pPrimaryKey;
  v10 = pNotNull;
  v14 = (char *)zTableName;
  v17 = pAutoinc;
  v65 = 0;
  if (pzDataType)
    *pzDataType = 0;
  if (pzCollSeq)
    *pzCollSeq = 0;
  if (!db)
  {
    v19 = "NULL";
    goto LABEL_44;
  }
  v18 = *((unsigned __int8 *)db + 113);
  if (v18 == 186)
  {
LABEL_9:
    v19 = "unopened";
LABEL_44:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    return sub_1ACBBE20C(189380);
  }
  if (v18 != 118)
  {
    if (v18 != 109)
    {
      v19 = "invalid";
      goto LABEL_44;
    }
    goto LABEL_9;
  }
  if (!zTableName)
    return sub_1ACBBE20C(189380);
  v20 = *((_QWORD *)db + 3);
  if (v20)
    xmmword_1ECD3B1C0(v20);
  if (!*((_BYTE *)db + 111))
    sub_1ACBE9148((uint64_t)db);
  v27 = sub_1ACB6541C((uint64_t)db, &v65, (uint64_t)zTableName, (uint64_t)zColumnName, (uint64_t)pzDataType, (uint64_t)pzCollSeq, (uint64_t)pNotNull, (uint64_t)pPrimaryKey);
  if (v27)
    goto LABEL_17;
  v28 = sub_1ACBD1B0C((uint64_t)db, v14, zDbName);
  if (v28)
  {
    if (*(_BYTE *)(v28 + 63) != 2)
    {
      if (!zColumnName)
        goto LABEL_73;
      v43 = *(__int16 *)(v28 + 54);
      if ((int)v43 >= 1)
      {
        v44 = 0;
        v45 = *(_QWORD *)(v28 + 8);
        while (1)
        {
          v46 = *(_BYTE **)(v45 + 16 * v44);
          for (i = zColumnName; ; ++i)
          {
            v48 = *v46;
            v49 = *(unsigned __int8 *)i;
            if ((_DWORD)v48 != (_DWORD)v49)
              break;
            if (!*v46)
            {
              v33 = v45 + 16 * v44;
              goto LABEL_64;
            }
LABEL_57:
            ++v46;
          }
          if (byte_1ACCB6333[v48] == byte_1ACCB6333[v49])
            goto LABEL_57;
          if (++v44 == v43)
            goto LABEL_65;
        }
      }
      LODWORD(v44) = 0;
      v33 = 0;
LABEL_64:
      if ((_DWORD)v44 != (_DWORD)v43)
        goto LABEL_69;
LABEL_65:
      if ((*(_BYTE *)(v28 + 48) & 0x80) == 0)
      {
        v50 = v28;
        if (sub_1ACBD2384(zColumnName))
        {
          v28 = v50;
          if ((*(__int16 *)(v50 + 52) & 0x80000000) == 0)
          {
            LODWORD(v44) = *(unsigned __int16 *)(v50 + 52);
            v33 = *(_QWORD *)(v50 + 8) + 16 * *(unsigned __int16 *)(v50 + 52);
LABEL_69:
            if (v33)
            {
              v51 = *(_WORD *)(v33 + 14);
              if ((v51 & 4) != 0)
              {
                v62 = v44;
                v64 = v28;
                v54 = strlen(*(const char **)v33);
                v51 = *(_WORD *)(v33 + 14);
                v55 = *(_QWORD *)v33 + v54;
                LODWORD(v44) = v62;
                v28 = v64;
                v29 = (const char *)(v55 + 1);
              }
              else
              {
                v52 = *(unsigned __int8 *)(v33 + 8);
                if (v52 >= 0x10)
                  v29 = off_1EECACBA0[(v52 >> 4) - 1];
                else
                  v29 = 0;
              }
              if ((v51 & 0x200) != 0)
              {
                v56 = *(_QWORD *)v33 - 1;
                while (*(unsigned __int8 *)++v56)
                  ;
                if ((v51 & 4) != 0)
                {
                  while (*(unsigned __int8 *)++v56)
                    ;
                }
                v53 = (const char *)(v56 + 1);
              }
              else
              {
                v53 = 0;
              }
              v31 = (*(_BYTE *)(v33 + 8) & 0xF) != 0;
              v32 = v51 & 1;
              if ((_DWORD)v44 == *(__int16 *)(v28 + 52))
                LODWORD(v33) = (*(_DWORD *)(v28 + 48) >> 3) & 1;
              else
                LODWORD(v33) = 0;
LABEL_76:
              v30 = "BINARY";
              if (v53)
                v30 = v53;
              if (*((_BYTE *)db + 111))
                goto LABEL_20;
              goto LABEL_19;
            }
            v53 = 0;
            v31 = 0;
LABEL_75:
            v32 = 1;
            v29 = "INTEGER";
            goto LABEL_76;
          }
LABEL_73:
          v53 = 0;
          v31 = 0;
          LODWORD(v33) = 0;
          goto LABEL_75;
        }
      }
    }
LABEL_17:
    v28 = 0;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  LODWORD(v33) = 0;
  if (!*((_BYTE *)db + 111))
  {
LABEL_19:
    v59 = v27;
    v61 = v10;
    v63 = v28;
    v60 = v9;
    v34 = v29;
    v35 = (char)v14;
    LODWORD(v14) = v31;
    v36 = v32;
    v37 = v30;
    sub_1ACBE91DC((uint64_t)db);
    v30 = v37;
    v32 = v36;
    v31 = (int)v14;
    LOBYTE(v14) = v35;
    v29 = v34;
    v17 = pAutoinc;
    v9 = v60;
    v10 = v61;
    v28 = v63;
    v27 = v59;
  }
LABEL_20:
  if (pzDataType)
    *pzDataType = v29;
  if (pzCollSeq)
    *pzCollSeq = v30;
  if (v10)
    *v10 = v31;
  if (v9)
    *v9 = v32;
  if (v17)
    *v17 = v33;
  v38 = v65;
  if (!v27 && !v28)
  {
    if (v65)
      sub_1ACBE0F9C(db, v65);
    v38 = (char *)sub_1ACB6DDD0((uint64_t)db, "no such table column: %s.%s", v21, v22, v23, v24, v25, v26, (char)v14);
    v65 = v38;
    v27 = 1;
  }
  if (v38)
    v39 = "%s";
  else
    v39 = 0;
  sub_1ACBC3FCC((uint64_t)db, v27, v39, v22, v23, v24, v25, v26, (char)v38);
  if (v65)
    sub_1ACBE0F9C(db, v65);
  if (v27 || *((_BYTE *)db + 103))
    v40 = sub_1ACBF2990((uint64_t)db, v27);
  else
    v40 = 0;
  v42 = *((_QWORD *)db + 3);
  if (v42)
    xmmword_1ECD3B1D0(v42);
  return v40;
}

uint64_t sub_1ACBD1B0C(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  _BYTE *jj;
  uint64_t v10;
  uint64_t v11;
  const char *ii;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  char *v20;
  int v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  char *v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  char *v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  _DWORD *v49;
  _BYTE *v50;
  char *kk;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _BYTE *v55;
  char *i;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  char *v67;
  int v68;
  uint64_t *v69;
  int v70;
  _DWORD *v71;
  _BYTE *v72;
  char *k;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  char *v78;
  char *m;
  uint64_t v80;
  uint64_t v81;
  char *n;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  _BYTE *v86;
  char *j;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *nn;
  uint64_t v99;
  uint64_t v100;
  char *i1;
  uint64_t v102;
  uint64_t v103;
  char *mm;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t *v110;
  int v111;
  _BYTE *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;

  if (!a3)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD *)(v16 + 24);
    if (v17)
    {
      v18 = *a2;
      if (*a2)
      {
        v19 = 0;
        v20 = a2 + 1;
        do
        {
          v19 = -1640531535 * (v19 + byte_1ACCB6333[v18]);
          v21 = *v20++;
          v18 = v21;
        }
        while (v21);
      }
      else
      {
        v19 = 0;
      }
      v54 = (_DWORD *)(v17 + 16 * (v19 % *(_DWORD *)(v16 + 8)));
      v22 = (uint64_t *)(v54 + 2);
      v23 = *v54;
      if (v23)
      {
        do
        {
LABEL_67:
          v22 = (uint64_t *)*v22;
          v55 = (_BYTE *)v22[3];
          for (i = a2; ; ++i)
          {
            v57 = *v55;
            v58 = *i;
            if ((_DWORD)v57 != (_DWORD)v58)
              break;
            if (!*v55)
              goto LABEL_24;
LABEL_69:
            ++v55;
          }
          if (byte_1ACCB6333[v57] == byte_1ACCB6333[v58])
            goto LABEL_69;
          --v23;
        }
        while (v23);
        v22 = &qword_1EECAD260;
LABEL_24:
        v24 = v22[2];
        if (v24)
          return v24;
        v25 = *(_QWORD *)(v15 + 24);
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
        {
          v27 = *a2;
          if (*a2)
          {
            v28 = 0;
            v29 = a2 + 1;
            do
            {
              v28 = -1640531535 * (v28 + byte_1ACCB6333[v27]);
              v30 = *v29++;
              v27 = v30;
            }
            while (v30);
          }
          else
          {
            v28 = 0;
          }
          v85 = (_DWORD *)(v26 + 16 * (v28 % *(_DWORD *)(v25 + 8)));
          v59 = (uint64_t *)(v85 + 2);
          v60 = *v85;
          if (v60)
          {
            while (1)
            {
LABEL_116:
              v59 = (uint64_t *)*v59;
              v86 = (_BYTE *)v59[3];
              for (j = a2; ; ++j)
              {
                v88 = *v86;
                v89 = *j;
                if ((_DWORD)v88 != (_DWORD)v89)
                  break;
                if (!*v86)
                  goto LABEL_77;
LABEL_118:
                ++v86;
              }
              if (byte_1ACCB6333[v88] == byte_1ACCB6333[v89])
                goto LABEL_118;
              if (!--v60)
              {
                v59 = &qword_1EECAD260;
LABEL_77:
                v24 = v59[2];
                if (v24)
                  return v24;
                v61 = *(unsigned int *)(a1 + 40);
                if ((int)v61 >= 3)
                {
                  v62 = 2;
                  while (1)
                  {
                    v63 = *(_QWORD *)(v15 + 32 * v62 + 24);
                    v64 = *(_QWORD *)(v63 + 24);
                    if (v64)
                      break;
                    v69 = (uint64_t *)(v63 + 16);
                    v70 = *(_DWORD *)(v63 + 12);
                    if (v70)
                      goto LABEL_92;
LABEL_86:
                    v69 = &qword_1EECAD260;
LABEL_87:
                    v24 = v69[2];
                    if (v24)
                      return v24;
                    if (++v62 == v61)
                      goto LABEL_101;
                  }
                  v65 = *a2;
                  if (*a2)
                  {
                    v66 = 0;
                    v67 = a2 + 1;
                    do
                    {
                      v66 = -1640531535 * (v66 + byte_1ACCB6333[v65]);
                      v68 = *v67++;
                      v65 = v68;
                    }
                    while (v68);
                  }
                  else
                  {
                    v66 = 0;
                  }
                  v71 = (_DWORD *)(v64 + 16 * (v66 % *(_DWORD *)(v63 + 8)));
                  v69 = (uint64_t *)(v71 + 2);
                  v70 = *v71;
                  if (!v70)
                    goto LABEL_86;
LABEL_92:
                  v69 = (uint64_t *)*v69;
                  v72 = (_BYTE *)v69[3];
                  for (k = a2; ; ++k)
                  {
                    v74 = *v72;
                    v75 = *k;
                    if ((_DWORD)v74 == (_DWORD)v75)
                    {
                      if (!*v72)
                        goto LABEL_87;
                    }
                    else if (byte_1ACCB6333[v74] != byte_1ACCB6333[v75])
                    {
                      if (!--v70)
                        goto LABEL_86;
                      goto LABEL_92;
                    }
                    ++v72;
                  }
                }
LABEL_101:
                if (!sqlite3_strnicmp(a2, "sqlite_", 7))
                {
                  v77 = a2 + 7;
                  v78 = "schema";
                  for (m = a2 + 7; ; ++m)
                  {
                    v80 = *m;
                    v81 = *v78;
                    if ((_DWORD)v80 == (_DWORD)v81)
                    {
                      if (!*m)
                      {
                        v32 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8);
LABEL_127:
                        v90 = "sqlite_master";
                        return sub_1ACBFC8AC((uint64_t)v32, (unsigned __int8 *)v90);
                      }
                    }
                    else if (byte_1ACCB6333[v80] != byte_1ACCB6333[v81])
                    {
                      for (n = "temp_schema"; ; ++n)
                      {
                        v83 = *v77;
                        v84 = *n;
                        if ((_DWORD)v83 == (_DWORD)v84)
                        {
                          if (!*v77)
                          {
                            v32 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 8);
                            v90 = "sqlite_temp_master";
                            return sub_1ACBFC8AC((uint64_t)v32, (unsigned __int8 *)v90);
                          }
                        }
                        else if (byte_1ACCB6333[v83] != byte_1ACCB6333[v84])
                        {
                          return 0;
                        }
                        ++v77;
                      }
                    }
                    ++v78;
                  }
                }
                return 0;
              }
            }
          }
        }
        else
        {
          v59 = (uint64_t *)(v25 + 16);
          v60 = *(_DWORD *)(v25 + 12);
          if (v60)
            goto LABEL_116;
        }
        v59 = &qword_1EECAD260;
        goto LABEL_77;
      }
    }
    else
    {
      v22 = (uint64_t *)(v16 + 16);
      v23 = *(_DWORD *)(v16 + 12);
      if (v23)
        goto LABEL_67;
    }
    v22 = &qword_1EECAD260;
    goto LABEL_24;
  }
  v5 = *(unsigned int *)(a1 + 40);
  if ((int)v5 < 1)
  {
LABEL_11:
    for (ii = "main"; ; ++ii)
    {
      v13 = *a3;
      v14 = *(unsigned __int8 *)ii;
      if ((_DWORD)v13 == (_DWORD)v14)
      {
        if (!*a3)
        {
          LODWORD(v6) = 0;
          v7 = *(_QWORD *)(a1 + 32);
          goto LABEL_31;
        }
      }
      else if (byte_1ACCB6333[v13] != byte_1ACCB6333[v14])
      {
        return 0;
      }
      ++a3;
    }
  }
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 32);
LABEL_4:
  v8 = *(unsigned __int8 **)(v7 + 32 * v6);
  for (jj = a3; ; ++jj)
  {
    v10 = *jj;
    v11 = *v8;
    if ((_DWORD)v10 == (_DWORD)v11)
      break;
    if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
    {
      if (++v6 == v5)
        goto LABEL_11;
      goto LABEL_4;
    }
LABEL_6:
    ++v8;
  }
  if (*jj)
    goto LABEL_6;
LABEL_31:
  v31 = *(_QWORD *)(v7 + 32 * v6 + 24);
  v32 = (_DWORD *)(v31 + 8);
  v33 = *(_QWORD *)(v31 + 24);
  if (!v33)
  {
    v38 = (uint64_t *)(v31 + 16);
    v39 = *(_DWORD *)(v31 + 12);
    if (v39)
      goto LABEL_57;
LABEL_37:
    v38 = &qword_1EECAD260;
    goto LABEL_38;
  }
  v34 = *a2;
  if (*a2)
  {
    v35 = 0;
    v36 = a2 + 1;
    do
    {
      v35 = -1640531535 * (v35 + byte_1ACCB6333[v34]);
      v37 = *v36++;
      v34 = v37;
    }
    while (v37);
  }
  else
  {
    v35 = 0;
  }
  v49 = (_DWORD *)(v33 + 16 * (v35 % *v32));
  v38 = (uint64_t *)(v49 + 2);
  v39 = *v49;
  if (!v39)
    goto LABEL_37;
LABEL_57:
  while (2)
  {
    v38 = (uint64_t *)*v38;
    v50 = (_BYTE *)v38[3];
    for (kk = a2; ; ++kk)
    {
      v52 = *v50;
      v53 = *kk;
      if ((_DWORD)v52 != (_DWORD)v53)
        break;
      if (!*v50)
        goto LABEL_38;
LABEL_59:
      ++v50;
    }
    if (byte_1ACCB6333[v52] == byte_1ACCB6333[v53])
      goto LABEL_59;
    if (--v39)
      continue;
    break;
  }
  v38 = &qword_1EECAD260;
LABEL_38:
  v24 = v38[2];
  if (v24)
    return v24;
  if (!a2)
    return 0;
  v40 = *a2;
  if (!*a2)
  {
    v76 = 0;
    v48 = "sqlite_";
    goto LABEL_139;
  }
  if ((v40 & 0xFFFFFFDF) != 0x53)
  {
    v47 = &byte_1ACCB6333[v40];
    v48 = "sqlite_";
LABEL_138:
    v76 = *v47;
    goto LABEL_139;
  }
  v41 = a2[1];
  if (!a2[1])
  {
    v76 = 0;
    v48 = "qlite_";
    goto LABEL_139;
  }
  if ((v41 & 0xFFFFFFDF) != 0x51)
  {
    v47 = &byte_1ACCB6333[v41];
    v48 = "qlite_";
    goto LABEL_138;
  }
  v42 = a2[2];
  if (!a2[2])
  {
    v76 = 0;
    v48 = "lite_";
    goto LABEL_139;
  }
  if ((v42 & 0xFFFFFFDF) != 0x4C)
  {
    v47 = &byte_1ACCB6333[v42];
    v48 = "lite_";
    goto LABEL_138;
  }
  v43 = a2[3];
  if (!a2[3])
  {
    v76 = 0;
    v48 = "ite_";
    goto LABEL_139;
  }
  if ((v43 & 0xFFFFFFDF) != 0x49)
  {
    v47 = &byte_1ACCB6333[v43];
    v48 = "ite_";
    goto LABEL_138;
  }
  v44 = a2[4];
  if (!a2[4])
  {
    v76 = 0;
    v48 = "te_";
    goto LABEL_139;
  }
  if ((v44 & 0xFFFFFFDF) != 0x54)
  {
    v47 = &byte_1ACCB6333[v44];
    v48 = "te_";
    goto LABEL_138;
  }
  v45 = a2[5];
  if (!a2[5])
  {
    v76 = 0;
    v48 = "e_";
    goto LABEL_139;
  }
  if ((v45 & 0xFFFFFFDF) != 0x45)
  {
    v47 = &byte_1ACCB6333[v45];
    v48 = "e_";
    goto LABEL_138;
  }
  v46 = a2[6];
  if (!a2[6])
  {
    v76 = 0;
    v48 = "_";
LABEL_139:
    if (v76 == byte_1ACCB6333[*v48])
      goto LABEL_140;
    return 0;
  }
  if ((_DWORD)v46 != 95)
  {
    v47 = &byte_1ACCB6333[v46];
    v48 = "_";
    goto LABEL_138;
  }
LABEL_140:
  v92 = a2 + 7;
  if ((_DWORD)v6 != 1)
  {
    for (mm = "schema"; ; ++mm)
    {
      v105 = *v92;
      v106 = *mm;
      if ((_DWORD)v105 == (_DWORD)v106)
      {
        if (!*v92)
          goto LABEL_127;
      }
      else if (byte_1ACCB6333[v105] != byte_1ACCB6333[v106])
      {
        return 0;
      }
      ++v92;
    }
  }
  v93 = "temp_schema";
  v94 = a2 + 7;
  while (2)
  {
    v95 = *v94;
    v96 = *v93;
    if ((_DWORD)v95 != (_DWORD)v96)
    {
      if (byte_1ACCB6333[v95] != byte_1ACCB6333[v96])
      {
        v97 = "schema";
        for (nn = a2 + 7; ; ++nn)
        {
          v99 = *nn;
          v100 = *v97;
          if ((_DWORD)v99 == (_DWORD)v100)
          {
            if (!*nn)
              goto LABEL_164;
          }
          else if (byte_1ACCB6333[v99] != byte_1ACCB6333[v100])
          {
            for (i1 = "master"; ; ++i1)
            {
              v102 = *v92;
              v103 = *i1;
              if ((_DWORD)v102 == (_DWORD)v103)
              {
                if (!*v92)
                  goto LABEL_164;
              }
              else if (byte_1ACCB6333[v102] != byte_1ACCB6333[v103])
              {
                return 0;
              }
              ++v92;
            }
          }
          ++v97;
        }
      }
      goto LABEL_143;
    }
    if (*v94)
    {
LABEL_143:
      ++v94;
      ++v93;
      continue;
    }
    break;
  }
LABEL_164:
  v107 = *(_QWORD *)(v7 + 56);
  v108 = *(_QWORD *)(v107 + 24);
  if (v108)
  {
    v109 = (_DWORD *)(v108 + 16 * (0x55F9AA32u % *(_DWORD *)(v107 + 8)));
    v110 = (uint64_t *)(v109 + 2);
  }
  else
  {
    v110 = (uint64_t *)(v107 + 16);
    v109 = (_DWORD *)(v107 + 12);
  }
  v111 = *v109;
  if (!v111)
    return qword_1EECAD270;
  while (2)
  {
    v110 = (uint64_t *)*v110;
    v112 = (_BYTE *)v110[3];
    v113 = "sqlite_temp_master";
    while (2)
    {
      v114 = *v112;
      v115 = *(unsigned __int8 *)v113;
      if ((_DWORD)v114 == (_DWORD)v115)
      {
        if (!*v112)
          return v110[2];
        goto LABEL_170;
      }
      if (byte_1ACCB6333[v114] == byte_1ACCB6333[v115])
      {
LABEL_170:
        ++v112;
        ++v113;
        continue;
      }
      break;
    }
    if (--v111)
      continue;
    break;
  }
  v110 = &qword_1EECAD260;
  return v110[2];
}

uint64_t sub_1ACBD2384(_BYTE *a1)
{
  const char *v1;
  _BYTE *i;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  _BYTE *j;
  uint64_t v8;
  uint64_t v9;
  const char *k;
  uint64_t v11;
  uint64_t v12;

  v1 = "_ROWID_";
  for (i = a1; ; ++i)
  {
    v3 = *i;
    v4 = *(unsigned __int8 *)v1;
    if ((_DWORD)v3 != (_DWORD)v4)
      break;
    if (!*i)
      return 1;
LABEL_3:
    ++v1;
  }
  if (byte_1ACCB6333[v3] == byte_1ACCB6333[v4])
    goto LABEL_3;
  v6 = "ROWID";
  for (j = a1; ; ++j)
  {
    v8 = *j;
    v9 = *(unsigned __int8 *)v6;
    if ((_DWORD)v8 != (_DWORD)v9)
      break;
    if (!*j)
      return 1;
LABEL_9:
    ++v6;
  }
  if (byte_1ACCB6333[v8] == byte_1ACCB6333[v9])
    goto LABEL_9;
  for (k = "OID"; ; ++k)
  {
    v11 = *a1;
    v12 = *(unsigned __int8 *)k;
    if ((_DWORD)v11 != (_DWORD)v12)
      break;
    if (!*a1)
      return 1;
LABEL_15:
    ++a1;
  }
  if (byte_1ACCB6333[v11] == byte_1ACCB6333[v12])
    goto LABEL_15;
  return 0;
}

char *sub_1ACBD245C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if ((*(_WORD *)(a1 + 14) & 4) != 0)
    return (char *)(*(_QWORD *)a1 + strlen(*(const char **)a1) + 1);
  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 >= 0x10)
    return off_1EECACBA0[(v2 >> 4) - 1];
  return (char *)a2;
}

int sqlite3_sleep(int a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sqlite3_initialize())
    return 0;
  if ((_BYTE)word_1ECD3B144 && (v3 = qword_1ECD3B1B0(2)) != 0)
  {
    v4 = v3;
    xmmword_1ECD3B1C0(v3);
    v5 = qword_1ECD3E928;
    xmmword_1ECD3B1D0(v4);
    if (!v5)
      return 0;
  }
  else
  {
    v5 = qword_1ECD3E928;
    if (!qword_1ECD3E928)
      return 0;
  }
  if (a1 >= 0)
    v6 = (1000 * a1);
  else
    v6 = 0;
  return (*(int (**)(uint64_t, uint64_t))(v5 + 112))(v5, v6) / 1000;
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  int8x8_t v4;
  int v6;
  const char *v7;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE **v15;
  _BYTE *v16;
  const char *j;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  const char *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t k;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v49;
  uint64_t v50;
  int v51;

  if (!a1)
  {
    v7 = "NULL";
    goto LABEL_30;
  }
  v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    v7 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1ACBBE20C(189507);
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      v7 = "invalid";
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  v9 = *(_QWORD *)&op;
  v11 = *((_QWORD *)a1 + 3);
  if (v11)
    xmmword_1ECD3B1C0(v11);
  if (!zDbName)
  {
    LODWORD(v13) = 0;
    v14 = *((_QWORD *)a1 + 4);
    goto LABEL_33;
  }
  v12 = *((_DWORD *)a1 + 10);
  v13 = (v12 - 1);
  if (v12 < 1)
    goto LABEL_40;
  v14 = *((_QWORD *)a1 + 4);
  v15 = (_BYTE **)(v14 + 32 * v13);
  while (1)
  {
    v16 = *v15;
    if (*v15)
      break;
LABEL_19:
    if (!(_DWORD)v13)
    {
      v21 = "main";
      for (i = zDbName; ; ++i)
      {
        v23 = *(unsigned __int8 *)v21;
        v24 = *(unsigned __int8 *)i;
        if ((_DWORD)v23 == (_DWORD)v24)
        {
          if (!*v21)
          {
            LODWORD(v13) = 0;
            goto LABEL_33;
          }
        }
        else if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
        {
          break;
        }
        ++v21;
      }
    }
    v15 -= 4;
    v20 = (int)v13 <= 0;
    LODWORD(v13) = v13 - 1;
    if (v20)
      goto LABEL_40;
  }
  for (j = zDbName; ; ++j)
  {
    v18 = *v16;
    v19 = *(unsigned __int8 *)j;
    if ((_DWORD)v18 == (_DWORD)v19)
      break;
    if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
      goto LABEL_19;
LABEL_15:
    ++v16;
  }
  if (*v16)
    goto LABEL_15;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_33:
    v26 = *(_QWORD *)(v14 + 32 * v13 + 8);
    if (v26)
    {
      if (*(_BYTE *)(v26 + 17))
      {
        ++*(_DWORD *)(v26 + 20);
        if (!*(_BYTE *)(v26 + 18))
          sub_1ACBECF6C(v26);
      }
      v27 = *(uint64_t **)(v26 + 8);
      v28 = *v27;
      v29 = *(uint64_t **)(*v27 + 72);
      switch((int)v9)
      {
        case 7:
          v30 = 0;
          *(_QWORD *)a4 = v29;
          if (*(_BYTE *)(v26 + 17))
            goto LABEL_82;
          goto LABEL_84;
        case 27:
          v30 = 0;
          goto LABEL_48;
        case 28:
          v30 = 0;
          v37 = *(_QWORD *)(v28 + 344);
          v28 += 80;
          if (v37)
            v28 = v37 + 16;
LABEL_48:
          *(_QWORD *)a4 = *(_QWORD *)v28;
          if (!*(_BYTE *)(v26 + 17))
            goto LABEL_84;
          goto LABEL_82;
        case 35:
          v30 = 0;
          *(_DWORD *)a4 = *(_DWORD *)(v28 + 132);
          if (!*(_BYTE *)(v26 + 17))
            goto LABEL_84;
          goto LABEL_82;
        case 38:
          v38 = *(_DWORD *)a4;
          if (!*(_BYTE *)(v26 + 17))
          {
            v40 = *((unsigned __int8 *)v27 + 38);
            v41 = *((_DWORD *)v27 + 13);
            v42 = *((_DWORD *)v27 + 14);
            goto LABEL_65;
          }
          v39 = *(_DWORD *)(v26 + 20);
          *(_DWORD *)(v26 + 20) = v39 + 1;
          if (*(_BYTE *)(v26 + 18))
          {
            v40 = *((unsigned __int8 *)v27 + 38);
            v41 = *((_DWORD *)v27 + 13);
            v42 = *((_DWORD *)v27 + 14);
          }
          else
          {
            sub_1ACBECF6C(v26);
            v44 = *(_QWORD *)(v26 + 8);
            v40 = *(unsigned __int8 *)(v44 + 38);
            v41 = *(_DWORD *)(v44 + 52);
            v42 = *(_DWORD *)(v44 + 56);
            if (!*(_BYTE *)(v26 + 17))
              goto LABEL_65;
            v39 = *(_DWORD *)(v26 + 20) - 1;
          }
          *(_DWORD *)(v26 + 20) = v39;
          if (!v39)
            sub_1ACBED048(v26);
LABEL_65:
          v45 = v41 - v42;
          if (v41 - v42 <= v40)
            v45 = v40;
          *(_DWORD *)a4 = v45;
          if (v38 <= 0xFF)
            sub_1ACBB5FAC(v26, 0, v38, 0, v4);
          goto LABEL_80;
        case 42:
          if (!*((_BYTE *)v27 + 36) && !*(_BYTE *)(v28 + 16))
          {
            ++*(_DWORD *)(v28 + 132);
            for (k = *(_QWORD *)(v28 + 112); k; k = *(_QWORD *)(k + 64))
              *(_DWORD *)(k + 24) = 1;
            sub_1ACB5AD68(*(_QWORD **)(v28 + 336), 0);
          }
          goto LABEL_80;
        default:
          v31 = *((_DWORD *)a1 + 172);
          v32 = *v29;
          v33 = v9 - 101;
          if ((v9 - 101) <= 1 && v32)
          {
            v34 = *(unsigned __int8 **)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 8) + 320);
            if (v34)
            {
              v36 = *v34;
              v34 += 2;
              v35 = v36;
            }
            else
            {
              v35 = 0;
            }
            v51 = v35;
            (*(void (**)(uint64_t *, uint64_t, int *))(v32 + 80))(v29, 107, &v51);
            v32 = *v29;
            if (*v29)
            {
              (*(void (**)(uint64_t *, uint64_t, unsigned __int8 *))(v32 + 80))(v29, 108, v34);
              v32 = *v29;
            }
          }
          if (!v32)
          {
            *((_DWORD *)a1 + 172) = v31;
            v30 = 12;
            if (!*(_BYTE *)(v26 + 17))
              goto LABEL_84;
            goto LABEL_82;
          }
          v46 = (*(uint64_t (**)(uint64_t *, uint64_t, void *))(v32 + 80))(v29, v9, a4);
          v30 = v46;
          v47 = *v29;
          *((_DWORD *)a1 + 172) = v31;
          if (v33 <= 1 && v47 && v46 == 0)
          {
            sub_1ACBC4F54((uint64_t)a1);
LABEL_80:
            v30 = 0;
          }
          if (*(_BYTE *)(v26 + 17))
          {
LABEL_82:
            v49 = *(_DWORD *)(v26 + 20) - 1;
            *(_DWORD *)(v26 + 20) = v49;
            if (!v49)
              sub_1ACBED048(v26);
          }
LABEL_84:
          *((_DWORD *)a1 + 20) = v30;
          if (v30)
            goto LABEL_87;
          if (*((_QWORD *)a1 + 52))
          {
            v30 = 0;
            goto LABEL_87;
          }
          v30 = 0;
          *((_DWORD *)a1 + 21) = -1;
          v50 = *((_QWORD *)a1 + 3);
          if (!v50)
            return v30;
          goto LABEL_88;
      }
    }
  }
LABEL_40:
  v30 = 1;
  *((_DWORD *)a1 + 20) = 1;
LABEL_87:
  sub_1ACBE938C((uint64_t)a1, v30);
  v50 = *((_QWORD *)a1 + 3);
  if (v50)
LABEL_88:
    xmmword_1ECD3B1D0(v50);
  return v30;
}

uint64_t sub_1ACBD2A10(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (!*(_BYTE *)(a1 + 17))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v3 = *(unsigned __int8 *)(v6 + 38);
    v4 = *(_DWORD *)(v6 + 52);
    v5 = *(_DWORD *)(v6 + 56);
    goto LABEL_8;
  }
  ++*(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(a1 + 18))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(unsigned __int8 *)(v2 + 38);
    v4 = *(_DWORD *)(v2 + 52);
    v5 = *(_DWORD *)(v2 + 56);
  }
  else
  {
    sub_1ACBECF6C(a1);
    v7 = *(_QWORD *)(a1 + 8);
    v3 = *(unsigned __int8 *)(v7 + 38);
    v4 = *(_DWORD *)(v7 + 52);
    v5 = *(_DWORD *)(v7 + 56);
    if (!*(_BYTE *)(a1 + 17))
      goto LABEL_8;
  }
  v8 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v8;
  if (!v8)
    sub_1ACBED048(a1);
LABEL_8:
  if (v4 - v5 <= (int)v3)
    return v3;
  else
    return (v4 - v5);
}

int sqlite3_test_control(int op, ...)
{
  int v1;
  __int128 *v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _DWORD *v9;
  int v10;
  size_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  _BYTE **v18;
  _BYTE *v19;
  unsigned __int8 *j;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  const char *v24;
  unsigned __int8 *i;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  char v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  _DWORD *v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _DWORD *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  _DWORD *v68;
  int v69;
  unsigned int v70;
  BOOL v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void (**v85)(void *);
  uint64_t (**v86)(void *);
  unsigned int v88;
  _DWORD *v89;
  int v90;
  unsigned int v91;
  int __buf;
  unint64_t v93;
  uint64_t (*v94)(_QWORD);
  unint64_t *v95;
  _DWORD *v96;
  va_list va;

  va_start(va, op);
  *(double *)&v93 = va_arg(va, double);
  v94 = va_arg(va, uint64_t (*)(_QWORD));
  v95 = va_arg(va, unint64_t *);
  v96 = va_arg(va, _DWORD *);
  v1 = 0;
  switch(op)
  {
    case 5:
      v1 = 0;
      v2 = &xmmword_1ECD3EAD4;
      v3 = &xmmword_1EECAD2C0;
      goto LABEL_4;
    case 6:
      v1 = 0;
      v2 = &xmmword_1EECAD2C0;
      v3 = &xmmword_1ECD3EAD4;
LABEL_4:
      *((_DWORD *)v3 + 32) = *((_DWORD *)v2 + 32);
      v4 = v2[7];
      v3[6] = v2[6];
      v3[7] = v4;
      v5 = v2[3];
      v3[2] = v2[2];
      v3[3] = v5;
      v6 = v2[5];
      v3[4] = v2[4];
      v3[5] = v6;
      v7 = v2[1];
      *v3 = *v2;
      v3[1] = v7;
      return v1;
    case 8:
      __buf = 0;
      v8 = (_OWORD *)sub_1ACB5D828(512);
      v9 = v8;
      if (v8)
      {
        v8[30] = 0u;
        v8[31] = 0u;
        v8[28] = 0u;
        v8[29] = 0u;
        v8[26] = 0u;
        v8[27] = 0u;
        v8[24] = 0u;
        v8[25] = 0u;
        v8[22] = 0u;
        v8[23] = 0u;
        v8[20] = 0u;
        v8[21] = 0u;
        v8[18] = 0u;
        v8[19] = 0u;
        v8[16] = 0u;
        v8[17] = 0u;
        v8[14] = 0u;
        v8[15] = 0u;
        v8[12] = 0u;
        v8[13] = 0u;
        v8[10] = 0u;
        v8[11] = 0u;
        v8[8] = 0u;
        v8[9] = 0u;
        v8[6] = 0u;
        v8[7] = 0u;
        v8[4] = 0u;
        v8[5] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        *v8 = 0u;
        v8[1] = 0u;
        *(_DWORD *)v8 = v93;
      }
      v10 = v93 + 7;
      if ((int)v93 < -7)
        v10 = v93 + 14;
      v11 = (v10 >> 3) + 1;
      v12 = (_BYTE *)sub_1ACB5D828(v11);
      v13 = v12;
      if (v12)
        bzero(v12, v11);
      if (sqlite3_initialize())
      {
        v1 = -1;
        goto LABEL_173;
      }
      v31 = sub_1ACB5D828(512);
      v32 = (void *)v31;
      v1 = -1;
      if (!v9)
        goto LABEL_166;
      v33 = !v13 || v31 == 0;
      if (v33)
        goto LABEL_166;
      v34 = 0;
      __buf = 0;
      while (2)
      {
        v35 = *((_DWORD *)v94 + v34);
        if ((v35 - 1) < 2 || v35 == 5)
        {
          v37 = (char *)v94 + 4 * v34;
          v38 = *((_DWORD *)v37 + 2);
          v39 = v38 - 1;
          *((_DWORD *)v37 + 2) = *((_DWORD *)v37 + 3) + v38;
          v40 = 4;
          goto LABEL_81;
        }
        if (v35)
        {
          sqlite3_initialize();
          arc4random_buf(&__buf, 4uLL);
          v39 = __buf;
          v40 = 2;
LABEL_81:
          v41 = (4 * v34) | 4;
          v42 = *(_DWORD *)((char *)v94 + v41);
          v16 = __OFSUB__(v42, 1);
          v43 = v42 - 1;
          if (!((v43 < 0) ^ v16 | (v43 == 0)))
            v40 = 0;
          *(_DWORD *)((char *)v94 + v41) = v43;
          v34 += v40;
          __buf = (v39 & 0x7FFFFFFF) % (int)v93;
          v44 = 1 << ((__buf + 1) & 7);
          v45 = (unint64_t)(__buf + 1) >> 3;
          v46 = v13[v45];
          if ((v35 & 1) == 0)
          {
            v13[v45] = v46 & ~(_BYTE)v44;
            sub_1ACBF00EC(v9, __buf + 1, v32);
            continue;
          }
          v13[v45] = v46 | v44;
          if (v35 != 5 && sub_1ACBA79A4(v9, __buf + 1))
          {
            v1 = -1;
            goto LABEL_166;
          }
          continue;
        }
        break;
      }
      v55 = *v9;
      if (*v9 <= v93)
        goto LABEL_113;
      v56 = v9;
      v57 = v93;
      while (1)
      {
        v58 = v56[2];
        if (!v58)
          break;
        v59 = v57 / v58;
        v57 %= v58;
        v56 = *(_DWORD **)&v56[2 * v59 + 4];
        if (!v56)
          goto LABEL_113;
      }
      if (*v56 > 0xF80u)
      {
        v88 = v57 % 0x7C;
        v89 = v56 + 4;
        v90 = v89[v57 % 0x7C];
        if (v90)
        {
          v91 = v57 + 1;
          while (v90 != v91)
          {
            if (v88 == 123)
              v88 = 0;
            else
              ++v88;
            v90 = v89[v88];
            if (!v90)
              goto LABEL_113;
          }
          v60 = 1;
        }
        else
        {
LABEL_113:
          v60 = 0;
        }
      }
      else
      {
        v60 = (*((unsigned __int8 *)v56 + ((unint64_t)v57 >> 3) + 16) >> (v57 & 7)) & 1;
      }
      v1 = v60 - v93 + v55;
      v61 = 1;
      __buf = 1;
      if ((int)v93 < 1)
        goto LABEL_166;
      while (2)
      {
        v62 = v61 - 1;
        if (v61 - 1 >= v55)
          goto LABEL_119;
        v63 = v9;
        while (1)
        {
          v64 = v63[2];
          if (!v64)
            break;
          v65 = v62 / v64;
          v62 %= v64;
          v63 = *(_DWORD **)&v63[2 * v65 + 4];
          if (!v63)
            goto LABEL_119;
        }
        if (*v63 > 0xF80u)
        {
          v67 = v62 % 0x7C;
          v68 = v63 + 4;
          v69 = v68[v62 % 0x7C];
          if (v69)
          {
            v70 = v62 + 1;
            while (v69 != v70)
            {
              if (v67 == 123)
                v67 = 0;
              else
                ++v67;
              v69 = v68[v67];
              if (!v69)
                goto LABEL_119;
            }
            v66 = 1;
          }
          else
          {
LABEL_119:
            v66 = 0;
          }
        }
        else
        {
          v66 = (*((unsigned __int8 *)v63 + ((unint64_t)v62 >> 3) + 16) >> (v62 & 7)) & 1;
        }
        if (((v13[(unint64_t)v61 >> 3] >> (v61 & 7)) & 1) == v66)
        {
          __buf = v61 + 1;
          v33 = v61++ == (_DWORD)v93;
          if (v33)
            goto LABEL_166;
          continue;
        }
        break;
      }
      v1 = v61;
LABEL_166:
      if (v32)
      {
        v85 = (void (**)(void *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_172;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v32);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v32);
        v32 = (void *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v85 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_172:
          (*v85)(v32);
        }
      }
LABEL_173:
      if (v13)
      {
        v86 = (uint64_t (**)(void *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_179;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v13);
        v13 = (_BYTE *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v86 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
LABEL_179:
          (*v86)(v13);
        }
      }
      sub_1ACBAF4D0((uint64_t)v9);
      return v1;
    case 9:
      off_1ECD3B2E0 = (uint64_t (*)(_QWORD))v93;
      if (*(double *)&v93 == 0.0)
        return 0;
      return ((uint64_t (*)(_QWORD))v93)(0);
    case 10:
      v1 = 0;
      off_1EECAD248 = (double (*)(_QWORD))v93;
      off_1EECAD250 = v94;
      return v1;
    case 11:
      v1 = dword_1EECAC650;
      if ((_DWORD)v93)
        dword_1EECAC650 = v93;
      return v1;
    case 12:
      __buf = 0;
      return 0;
    case 13:
      return v93;
    case 15:
      v1 = 0;
      *(_DWORD *)(v93 + 96) = (_DWORD)v94;
      return v1;
    case 17:
      v1 = 0;
      *(_DWORD *)(v93 + 44) ^= 0x20u;
      return v1;
    case 18:
      dword_1ECD3B2E8 = v93;
      v1 = 0;
      if ((_DWORD)v93 == 2)
        off_1ECD3B2F0 = (uint64_t (*)(_QWORD, _QWORD, __n128))v94;
      else
        off_1ECD3B2F0 = 0;
      return v1;
    case 19:
      v1 = 0;
      dword_1ECD3B2F8 = v93;
      return v1;
    case 20:
      v1 = 0;
      dword_1ECD3B150 = v93;
      return v1;
    case 22:
      return 123410;
    case 23:
      return qword_1ECD3B294 == 0;
    case 24:
      v1 = 0;
      *(_DWORD *)(v93 + 184) = (_DWORD)v94;
      return v1;
    case 25:
      v14 = *(_QWORD *)(v93 + 24);
      if (v14)
        xmmword_1ECD3B1C0(v14);
      if (!v94)
        goto LABEL_94;
      v15 = *(_DWORD *)(v93 + 40);
      v16 = __OFSUB__(v15, 1);
      v17 = (v15 - 1);
      if ((int)v17 < 0 != v16)
        goto LABEL_94;
      v18 = (_BYTE **)(*(_QWORD *)(v93 + 32) + 32 * v17);
      while (1)
      {
        v19 = *v18;
        if (*v18)
          break;
LABEL_41:
        if (!(_DWORD)v17)
        {
          v24 = "main";
          for (i = (unsigned __int8 *)v94; ; ++i)
          {
            v26 = *(unsigned __int8 *)v24;
            v27 = *i;
            if ((_DWORD)v26 == (_DWORD)v27)
            {
              if (!*v24)
              {
                LOBYTE(v17) = 0;
LABEL_89:
                *(_BYTE *)(v93 + 196) = v17;
                *(_BYTE *)(v93 + 198) = *(_BYTE *)(v93 + 198) & 0xFD | (2 * (v95 & 1));
                *(_BYTE *)(v93 + 197) = v95 & 1;
                *(_DWORD *)(v93 + 192) = (_DWORD)v96;
                if ((v95 & 1) == 0 && (_DWORD)v96 != 0)
                  sub_1ACBC4F54(v93);
LABEL_94:
                v48 = *(_QWORD *)(v93 + 24);
                if (!v48)
                  return 0;
                xmmword_1ECD3B1D0(v48);
                return 0;
              }
            }
            else if (byte_1ACCB6333[v26] != byte_1ACCB6333[v27])
            {
              break;
            }
            ++v24;
          }
        }
        v18 -= 4;
        v23 = (int)v17 <= 0;
        LODWORD(v17) = v17 - 1;
        if (v23)
          goto LABEL_94;
      }
      for (j = (unsigned __int8 *)v94; ; ++j)
      {
        v21 = *v19;
        v22 = *j;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*v19)
          {
            if ((v17 & 0x80000000) == 0)
              goto LABEL_89;
            goto LABEL_94;
          }
        }
        else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
        {
          goto LABEL_41;
        }
        ++v19;
      }
    case 27:
      v28 = *(_WORD *)(*(_QWORD *)v93 + 20);
      if ((v28 & 4) == 0)
        return 0;
      v1 = 0;
      *(_WORD *)(*(_QWORD *)v93 + 20) = v28 & 0xFFDB | 0x20;
      return v1;
    case 28:
      return sub_1ACBBE20C(189627);
    case 29:
      v1 = 0;
      byte_1ECD3B149 = v93;
      return v1;
    case 30:
      v1 = 0;
      *(_QWORD *)v94 = 0;
      return v1;
    case 31:
      switch((int)v93)
      {
        case 0:
          v1 = 0;
          *(_DWORD *)v94 = dword_1EECAD0B0;
          break;
        case 1:
          v1 = 0;
          dword_1EECAD0B0 = *(_DWORD *)v94;
          break;
        case 2:
          v1 = 0;
          *(_DWORD *)v94 = dword_1EECAD0B4;
          break;
        case 3:
          v1 = 0;
          dword_1EECAD0B4 = *(_DWORD *)v94;
          break;
        default:
          return 0;
      }
      return v1;
    case 33:
      if (*(double *)&v93 <= 1.0)
        goto LABEL_99;
      if (*(double *)&v93 <= 2000000000.0)
      {
        v49 = (unint64_t)*(double *)&v93;
        if ((unint64_t)*(double *)&v93 >= 8)
        {
          v52 = 40;
          if (v49 >= 0x100)
          {
            v53 = (unint64_t)*(double *)&v93;
            do
            {
              v52 += 40;
              v49 = v53 >> 4;
              v23 = v53 > 0xFFF;
              v53 >>= 4;
            }
            while (v23);
          }
          if (v49 < 0x10)
          {
            LOBYTE(v54) = v49;
          }
          else
          {
            do
            {
              v52 += 10;
              v54 = v49 >> 1;
              v23 = v49 > 0x1F;
              v49 >>= 1;
            }
            while (v23);
          }
        }
        else
        {
          if (v49 < 2)
          {
LABEL_99:
            LOWORD(v29) = 0;
            v50 = v95;
            v51 = v96;
            *(_DWORD *)v94 = 0;
            goto LABEL_143;
          }
          v52 = 40;
          do
          {
            v52 -= 10;
            LOBYTE(v54) = 2 * v49;
            v71 = v49 >= 4;
            v49 *= 2;
          }
          while (!v71);
        }
        LOWORD(v29) = v52 + word_1ACCBD832[v54 & 7] - 10;
      }
      else
      {
        v29 = 10 * (v93 >> 52) - 10220;
      }
      v50 = v95;
      v51 = v96;
      *(_DWORD *)v94 = (__int16)v29;
      if ((__int16)v29 >= 610)
      {
        v72 = 0x7FFFFFFFFFFFFFFFLL;
        *v95 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_154;
      }
LABEL_143:
      v73 = (__int16)v29;
      v74 = ((26215 * v73) >> 18) + ((26215 * v73) >> 31);
      v75 = (__int16)v29 % 10;
      v76 = (__int16)v75 - 1;
      if (!v75)
        v76 = 0;
      if (v75 <= 4u)
        v77 = v76;
      else
        v77 = (__int16)v75 - 2;
      v78 = v77 + 8;
      v79 = v78 << (v74 - 3);
      v72 = v78 >> (3 - v74);
      if (v73 > 29)
        v72 = v79;
      *v50 = v72;
      if (v72 < 8)
      {
        if (v72 < 2)
        {
          v80 = 0;
          goto LABEL_164;
        }
        v81 = 40;
        do
        {
          v83 = v72;
          v81 -= 10;
          v72 *= 2;
        }
        while (v83 < 4);
LABEL_163:
        v80 = (__int16)(v81 + word_1ACCBD832[v72 & 7] - 10);
LABEL_164:
        v1 = 0;
        *v51 = v80;
        return v1;
      }
      if (v72 < 0x100)
      {
        v81 = 40;
        goto LABEL_161;
      }
LABEL_154:
      v81 = 40;
      do
      {
        v82 = v72;
        v81 += 40;
        v72 >>= 4;
      }
      while (v82 > 0xFFF);
LABEL_161:
      if (v72 >= 0x10)
      {
        do
        {
          v84 = v72;
          v81 += 10;
          v72 >>= 1;
        }
        while (v84 > 0x1F);
      }
      goto LABEL_163;
    case 34:
      v30 = v93;
      if ((_DWORD)v93 == 2)
        v30 = 0;
      if (v30 < 0)
        return byte_1ECD3B14A != 0;
      v1 = v30 != 0;
      byte_1ECD3B14A = v30 != 0;
      return v1;
    default:
      return v1;
  }
}

uint64_t sub_1ACBD36D0(unint64_t a1)
{
  __int16 v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  BOOL v6;

  if (a1 >= 8)
  {
    v2 = 40;
    if (a1 >= 0x100)
    {
      v3 = a1;
      do
      {
        v2 += 40;
        a1 = v3 >> 4;
        v4 = v3 > 0xFFF;
        v3 >>= 4;
      }
      while (v4);
    }
    if (a1 < 0x10)
    {
      LOBYTE(v5) = a1;
    }
    else
    {
      do
      {
        v2 += 10;
        v5 = a1 >> 1;
        v4 = a1 > 0x1F;
        a1 >>= 1;
      }
      while (v4);
    }
  }
  else
  {
    if (a1 < 2)
      return 0;
    v2 = 40;
    do
    {
      v2 -= 10;
      LOBYTE(v5) = 2 * a1;
      v6 = a1 >= 4;
      a1 *= 2;
    }
    while (!v6);
  }
  return (__int16)(v2 + word_1ACCBD832[v5 & 7] - 10);
}

char *__cdecl sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
{
  const char **v8;
  char *v10;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char **v17;
  const char *v18;
  char *v19;
  size_t v20;
  char *v21;
  char *v22;
  const char *v23;
  size_t v24;
  char *v25;
  size_t v26;
  char *v27;
  size_t v28;

  if (nParam < 0 || !zDatabase || !zJournal || !zWal || (v8 = azParam, nParam) && !azParam)
  {
    sub_1ACBBE20C(190158);
    return 0;
  }
  v12 = strlen(zDatabase);
  v13 = strlen(zJournal);
  v14 = v12 + v13 + strlen(zWal) + 10;
  LODWORD(v15) = 2 * nParam;
  if (nParam)
  {
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v17 = v8;
    do
    {
      v18 = *v17++;
      v14 += strlen(v18) + 1;
      --v16;
    }
    while (v16);
  }
  if (sqlite3_initialize())
    return 0;
  v19 = (char *)sub_1ACB5D828(v14);
  v10 = v19;
  if (v19)
  {
    *(_DWORD *)v19 = 0;
    v10 = v19 + 4;
    v20 = strlen(zDatabase);
    memcpy(v10, zDatabase, v20 + 1);
    v21 = &v10[v20];
    if (nParam)
    {
      v22 = v21 + 1;
      if (v15 <= 1)
        v15 = 1;
      else
        v15 = v15;
      do
      {
        v23 = *v8++;
        v24 = strlen(v23);
        memcpy(v22, v23, v24 + 1);
        v21 = &v22[v24];
        v22 += v24 + 1;
        --v15;
      }
      while (v15);
    }
    v25 = v21 + 2;
    v21[1] = 0;
    v26 = strlen(zJournal) + 1;
    memcpy(v25, zJournal, v26);
    v27 = &v25[v26];
    v28 = strlen(zWal);
    memcpy(v27, zWal, v28 + 1);
    *(_WORD *)&v27[v28 + 1] = 0;
  }
  return v10;
}

void sqlite3_free_filename(char *a1)
{
  char *i;
  void (**v2)(char *);

  if (a1)
  {
    for (i = a1 - 4; i[3] || i[2] || i[1] || *i; --i)
      ;
    v2 = (void (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_13;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(i);
    --qword_1ECD3E8D0;
    off_1ECD3B168(i);
    i = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_13:
      (*v2)(i);
    }
  }
}

const char *__cdecl sqlite3_uri_parameter(const char *zFilename, const char *zParam)
{
  const char *v2;
  const char *i;
  const char *v5;
  int v6;
  const char *v7;
  const char *v8;
  int v9;

  v2 = 0;
  if (zFilename && zParam)
  {
    for (i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    v5 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v5)
    {
      while (1)
      {
        v6 = strcmp(v5, zParam);
        v7 = &v5[strlen(v5) & 0x3FFFFFFF];
        v2 = v7 + 1;
        if (!v6)
          break;
        v8 = &v2[strlen(v7 + 1) & 0x3FFFFFFF];
        v9 = *((unsigned __int8 *)v8 + 1);
        v5 = v8 + 1;
        if (!v9)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

const char *__cdecl sqlite3_uri_key(const char *zFilename, int N)
{
  const char *result;
  int v4;
  const char *i;
  const char *v6;
  int v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  int v11;
  BOOL v12;

  result = 0;
  if (zFilename)
  {
    v4 = N;
    if ((N & 0x80000000) == 0)
    {
      for (i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
        ;
      v6 = &i[strlen(i - 1) & 0x3FFFFFFF];
      v7 = *(unsigned __int8 *)v6;
      if (*v6)
        v8 = v4 < 1;
      else
        v8 = 1;
      if (!v8)
      {
        do
        {
          v9 = &v6[(strlen(v6) & 0x3FFFFFFF) + 1];
          v10 = &v9[strlen(v9) & 0x3FFFFFFF];
          v11 = *((unsigned __int8 *)v10 + 1);
          v6 = v10 + 1;
          v7 = v11;
          if (v11)
            v12 = v4 > 1;
          else
            v12 = 0;
          --v4;
        }
        while (v12);
      }
      if (v7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

int sqlite3_uri_BOOLean(const char *zFile, const char *zParam, int bDefault)
{
  char *v4;
  int result;

  v4 = (char *)sqlite3_uri_parameter(zFile, zParam);
  result = bDefault != 0;
  if (v4)
    return sub_1ACC34DB4(v4, 1, bDefault != 0) != 0;
  return result;
}

sqlite3_int64 sqlite3_uri_int64(const char *a1, const char *a2, sqlite3_int64 a3)
{
  char *v4;
  sqlite3_int64 v6;

  v4 = (char *)sqlite3_uri_parameter(a1, a2);
  if (v4)
  {
    v6 = 0;
    if (!sub_1ACBD3BF4(v4, (unint64_t *)&v6))
      return v6;
  }
  return a3;
}

uint64_t sub_1ACBD3BF4(char *__s, unint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;

  if (*__s == 48 && (__s[1] | 0x20) == 0x78)
  {
    v4 = 1;
    do
      v5 = __s[++v4];
    while (v5 == 48);
    v6 = v4;
    v7 = __s[v4];
    if ((byte_1ACCB6548[v7] & 8) != 0)
    {
      v8 = 0;
      v13 = v4 + 1;
      do
      {
        v8 = ((((char)(2 * v7) >> 7) & 0xF9) + (_BYTE)v7) & 0xF | (16 * v8);
        v7 = __s[v13++];
      }
      while ((byte_1ACCB6548[v7] & 8) != 0);
      v6 = v13 - 1;
      v9 = v6;
    }
    else
    {
      v8 = 0;
      v9 = v4;
    }
    *a2 = v8;
    if (v9 - (int)v4 <= 16)
      return __s[v6] != 0;
    else
      return 2;
  }
  else
  {
    v10 = strspn(__s, "+- \n\t0123456789");
    if (__s[v10 & 0x3FFFFFFF])
      v11 = (v10 & 0x3FFFFFFF) + 1;
    else
      v11 = v10 & 0x3FFFFFFF;
    return sub_1ACBF2FF8((unsigned __int8 *)__s, a2, v11, 1);
  }
}

const char *__cdecl sqlite3_filename_database(const char *a1)
{
  const char *v1;

  if (!a1)
    return 0;
  do
  {
    do
      v1 = a1;
    while (*(unsigned __int8 *)--a1);
  }
  while (*(v1 - 2) || *(v1 - 3) || *(v1 - 4));
  return v1;
}

const char *__cdecl sqlite3_filename_journal(const char *result)
{
  const char *i;
  const char *v2;
  const char *v3;
  const char *v4;
  int v5;

  if (result)
  {
    for (i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        v5 = *((unsigned __int8 *)v4 + 1);
        v2 = v4 + 1;
      }
      while (v5);
    }
    return v2 + 1;
  }
  return result;
}

const char *__cdecl sqlite3_filename_wal(const char *result)
{
  const char *i;
  const char *v2;
  const char *v3;
  const char *v4;
  int v5;

  if (result)
  {
    for (i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        v5 = *((unsigned __int8 *)v4 + 1);
        v2 = v4 + 1;
      }
      while (v5);
    }
    return &v2[(strlen(v2 + 1) & 0x3FFFFFFF) + 2];
  }
  return result;
}

const char *__cdecl sqlite3_db_name(sqlite3 *db, int N)
{
  int v2;
  const char *v3;

  if (!db)
  {
    v3 = "NULL";
    goto LABEL_11;
  }
  v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1ACBBE20C(190300);
    return 0;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if ((N & 0x80000000) == 0 && *((_DWORD *)db + 10) > N)
    return *(const char **)(*((_QWORD *)db + 4) + 32 * N);
  return 0;
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  int v2;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE **v7;
  _BYTE *v8;
  const char *i;
  uint64_t v10;
  uint64_t v11;
  const char *result;
  BOOL v13;
  const char *v14;
  const char *j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!db)
  {
    v3 = "NULL";
    goto LABEL_28;
  }
  v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1ACBBE20C(190319);
    return 0;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_28;
    }
    goto LABEL_5;
  }
  if (!zDbName)
  {
    LODWORD(v5) = 0;
    v6 = *((_QWORD *)db + 4);
    goto LABEL_32;
  }
  v4 = *((_DWORD *)db + 10);
  v5 = (v4 - 1);
  if (v4 < 1)
    return 0;
  v6 = *((_QWORD *)db + 4);
  v7 = (_BYTE **)(v6 + 32 * v5);
  do
  {
    v8 = *v7;
    if (*v7)
    {
      for (i = zDbName; ; ++i)
      {
        v10 = *v8;
        v11 = *(unsigned __int8 *)i;
        if ((_DWORD)v10 == (_DWORD)v11)
        {
          if (!*v8)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              v18 = *(_QWORD *)(v6 + 32 * v5 + 8);
              if (v18)
              {
                v19 = **(_QWORD **)(v18 + 8);
                if (*(_BYTE *)(v19 + 19) || *(_UNKNOWN **)v19 == &unk_1ECD3BD38)
                  return (const char *)&unk_1ACCB6CCD;
                else
                  return *(const char **)(v19 + 216);
              }
            }
            return 0;
          }
        }
        else if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
        {
          break;
        }
        ++v8;
      }
    }
    if (!(_DWORD)v5)
    {
      v14 = "main";
      for (j = zDbName; ; ++j)
      {
        v16 = *(unsigned __int8 *)v14;
        v17 = *(unsigned __int8 *)j;
        if ((_DWORD)v16 == (_DWORD)v17)
        {
          if (!*v14)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }
        else if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
        {
          break;
        }
        ++v14;
      }
    }
    result = 0;
    v7 -= 4;
    v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }
  while (!v13);
  return result;
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  int v2;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE **v7;
  int result;
  _BYTE *v9;
  const char *i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  const char *j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!db)
  {
    v3 = "NULL";
    goto LABEL_28;
  }
  v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1ACBBE20C(190335);
    return -1;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_28;
    }
    goto LABEL_5;
  }
  if (!zDbName)
  {
    LODWORD(v5) = 0;
    v6 = *((_QWORD *)db + 4);
    goto LABEL_32;
  }
  v4 = *((_DWORD *)db + 10);
  v5 = (v4 - 1);
  if (v4 < 1)
    return -1;
  v6 = *((_QWORD *)db + 4);
  v7 = (_BYTE **)(v6 + 32 * v5);
  result = -1;
  do
  {
    v9 = *v7;
    if (*v7)
    {
      for (i = zDbName; ; ++i)
      {
        v11 = *v9;
        v12 = *(unsigned __int8 *)i;
        if ((_DWORD)v11 == (_DWORD)v12)
        {
          if (!*v9)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              v18 = *(_QWORD *)(v6 + 32 * v5 + 8);
              if (v18)
                return *(_WORD *)(*(_QWORD *)(v18 + 8) + 40) & 1;
            }
            return -1;
          }
        }
        else if (byte_1ACCB6333[v11] != byte_1ACCB6333[v12])
        {
          break;
        }
        ++v9;
      }
    }
    if (!(_DWORD)v5)
    {
      v14 = "main";
      for (j = zDbName; ; ++j)
      {
        v16 = *(unsigned __int8 *)v14;
        v17 = *(unsigned __int8 *)j;
        if ((_DWORD)v16 == (_DWORD)v17)
        {
          if (!*v14)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }
        else if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
        {
          break;
        }
        ++v14;
      }
    }
    v7 -= 4;
    v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }
  while (!v13);
  return result;
}

uint64_t _sqlite3_lockstate(char *a1, int a2)
{
  int v4;
  unsigned int v5;
  sqlite3 *v6;

  v6 = 0;
  if (sub_1ACB55484(a1, (uint64_t *)&v6, 1u, 0))
  {
    if (v6)
      sub_1ACBCF268((uint64_t)v6, 0);
    return 0xFFFFFFFFLL;
  }
  else
  {
    sqlite3_db_config(v6, 1006, 1, 0);
    v4 = a2;
    v5 = -1;
    sqlite3_file_control(v6, 0, 103, &v4);
    sub_1ACBCF268((uint64_t)v6, 0);
    return v5;
  }
}

uint64_t (*_sqlite3_system_busy_handler())(uint64_t *a1, int a2)
{
  return sub_1ACBD42C8;
}

uint64_t sub_1ACBD42C8(uint64_t *a1, int a2)
{
  uint64_t v4;
  void (*v5)(void);
  uint64_t result;
  int v7;
  uint64_t v8;
  double v9;

  LODWORD(v8) = 0;
  v4 = *a1;
  if (*(int *)v4 >= 2 && (v5 = *(void (**)(void))(v4 + 136)) != 0)
  {
    v5();
  }
  else
  {
    v9 = 0.0;
    (*(void (**)(uint64_t, double *))(v4 + 120))(v4, &v9);
    v8 = (uint64_t)(v9 * 86400000.0);
  }
  ++*((_BYTE *)a1 + 784);
  if (!a2)
    return 109;
  result = 0;
  v7 = v8 - *((_DWORD *)a1 + 194);
  if (*((_DWORD *)a1 + 193) >= v7 && (v7 & 0x80000000) == 0)
    return 109;
  return result;
}

uint64_t _sqlite3_db_clone(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v5;
  const char *v6;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE **v15;
  _BYTE *v16;
  const char *j;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  const char *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  sqlite3 *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (**v42)(const char *);
  char *v43;
  const char *v44;
  const char *v45;
  void (**v46)(char *);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t (**v50)(char *, __n128);
  uint64_t (**v51)(const char *, __n128);
  unint64_t v52;
  int v53;
  copyfile_flags_t flags;
  sqlite3 *v55;

  if (!a1)
  {
    v6 = "NULL";
    goto LABEL_32;
  }
  v5 = *(unsigned __int8 *)(a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
LABEL_32:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1ACBBE20C(190400);
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_32;
    }
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
    xmmword_1ECD3B1C0(v10);
  if (a2)
    v11 = a2;
  else
    v11 = "main";
  v12 = *(_DWORD *)(a1 + 40);
  v13 = (v12 - 1);
  if (v12 < 1)
    goto LABEL_40;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = (_BYTE **)(v14 + 32 * v13);
  while (1)
  {
    v16 = *v15;
    if (*v15)
      break;
LABEL_21:
    if (!(_DWORD)v13)
    {
      v21 = "main";
      for (i = v11; ; ++i)
      {
        v23 = *(unsigned __int8 *)v21;
        v24 = *(unsigned __int8 *)i;
        if ((_DWORD)v23 == (_DWORD)v24)
        {
          if (!*v21)
          {
            LODWORD(v13) = 0;
            goto LABEL_34;
          }
        }
        else if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
        {
          break;
        }
        ++v21;
      }
    }
    v15 -= 4;
    v20 = (int)v13 <= 0;
    LODWORD(v13) = v13 - 1;
    if (v20)
      goto LABEL_40;
  }
  for (j = v11; ; ++j)
  {
    v18 = *v16;
    v19 = *(unsigned __int8 *)j;
    if ((_DWORD)v18 == (_DWORD)v19)
      break;
    if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
      goto LABEL_21;
LABEL_17:
    ++v16;
  }
  if (*v16)
    goto LABEL_17;
  if ((v13 & 0x80000000) != 0)
  {
LABEL_40:
    v29 = 1;
    goto LABEL_41;
  }
LABEL_34:
  v26 = *(_QWORD *)(v14 + 32 * v13 + 8);
  if (!v26)
    goto LABEL_40;
  if (*(_BYTE *)(v26 + 17))
  {
    ++*(_DWORD *)(v26 + 20);
    if (!*(_BYTE *)(v26 + 18))
      sub_1ACBECF6C(v26);
  }
  v27 = **(_QWORD ***)(v26 + 8);
  v28 = v27[9];
  if (strncmp(*(const char **)(*v27 + 24), "unix", 4uLL))
  {
    v29 = sub_1ACBBE20C(190415);
    goto LABEL_127;
  }
  if (a3)
  {
    v32 = *(char **)(v28 + 56);
    if (v32)
    {
      v55 = 0;
      if (a4)
        v33 = a4;
      else
        v33 = 16777224;
      v34 = *(_DWORD *)(v28 + 124);
      if (*(_UNKNOWN **)v28 == &unk_1E5C730D8)
        v35 = 33;
      else
        v35 = 1;
      v36 = v35 | v34;
      v29 = sub_1ACB55484(v32, (uint64_t *)&v55, v35 | v34, 0);
      v37 = v55;
      if ((_DWORD)v29)
        goto LABEL_124;
      v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
      v29 = v38;
      if ((_DWORD)v38 != 14)
        goto LABEL_61;
      sub_1ACBCF268((uint64_t)v55, 0);
      v29 = sub_1ACB55484(*(char **)(v28 + 56), (uint64_t *)&v55, v36 & 0xFFFFFFFC | 2, 0);
      v37 = v55;
      if ((_DWORD)v29)
        goto LABEL_124;
      v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
      v29 = v38;
LABEL_61:
      if ((_DWORD)v29)
      {
LABEL_123:
        v37 = v55;
LABEL_124:
        sub_1ACBCF268((uint64_t)v37, 0);
        goto LABEL_125;
      }
      flags = v33;
      v40 = 0;
      v41 = 0x1EECAC000;
      while (2)
      {
        v43 = v32;
        v44 = a3;
        if (v40)
        {
          v45 = (const char *)*((_QWORD *)&off_1E5C754E0 + v40);
          v43 = sqlite3_mprintf("%s%s", v32, v45);
          v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, v45);
          v44 = (const char *)v38;
        }
        if (!v43 || !v44)
        {
          v29 = 7;
          goto LABEL_99;
        }
        if ((*(unsigned int (**)(char *, uint64_t))(v41 + 2296))(v43, 4) && *__error() == 2)
        {
          if (!v40)
          {
            v38 = (uint64_t)__error();
            v48 = *(_DWORD *)v38;
LABEL_96:
            *(_DWORD *)(v28 + 32) = v48;
            v29 = 10;
            goto LABEL_99;
          }
          goto LABEL_79;
        }
        v38 = (*(uint64_t (**)(const char *, _QWORD))(v41 + 2296))(v44, 0);
        if (!(_DWORD)v38)
        {
          v48 = 17;
          goto LABEL_96;
        }
        v38 = copyfile(v43, v44, 0, flags);
        if ((_DWORD)v38)
        {
          v38 = (uint64_t)__error();
          v47 = *(_DWORD *)v38;
          if (*(_DWORD *)v38)
          {
            if (v47 == 12)
            {
              v29 = 7;
              goto LABEL_99;
            }
          }
          else
          {
            sqlite3_log(28, "copyfile returned unsuccessfully without setting errno, assuming target path was inaccessible");
            v47 = 2;
          }
          *(_DWORD *)(v28 + 32) = v47;
          v29 = 10;
LABEL_99:
          if (off_1EECAD248)
            v39.n128_f64[0] = off_1EECAD248(v38);
          if (!(_DWORD)v40)
          {
LABEL_121:
            if (off_1EECAD250)
              off_1EECAD250(v38);
            goto LABEL_123;
          }
          v49 = v40 - 1;
          while (2)
          {
            if (v43)
            {
              v50 = (uint64_t (**)(char *, __n128))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_109;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v43);
              --qword_1ECD3E8D0;
              v38 = off_1ECD3B168(v43);
              v43 = (char *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v50 = (uint64_t (**)(char *, __n128))&xmmword_1ECD3B1D0;
LABEL_109:
                v38 = (*v50)(v43, v39);
              }
            }
            if (v44)
            {
              v51 = (uint64_t (**)(const char *, __n128))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_116;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v44);
              --qword_1ECD3E8D0;
              v38 = off_1ECD3B168(v44);
              v44 = (const char *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v51 = (uint64_t (**)(const char *, __n128))&xmmword_1ECD3B1D0;
LABEL_116:
                v38 = (*v51)(v44, v39);
              }
            }
            v44 = a3;
            if (v49)
            {
              v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, *((const char **)&off_1E5C754E0 + v49));
              v44 = (const char *)v38;
            }
            if (!v44)
              goto LABEL_121;
            v38 = off_1EECACA48(v44);
            v43 = 0;
            v52 = v49-- + 1;
            if (v52 <= 1)
              goto LABEL_121;
            continue;
          }
        }
        if (v40)
        {
LABEL_79:
          v46 = (void (**)(char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_84;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v43);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v43);
          v43 = (char *)xmmword_1ECD3E930;
          v41 = 0x1EECAC000;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v46 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_84:
            (*v46)(v43);
          }
          v42 = (uint64_t (**)(const char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v44);
            --qword_1ECD3E8D0;
            v38 = off_1ECD3B168(v44);
            v44 = (const char *)xmmword_1ECD3E930;
            v41 = 0x1EECAC000uLL;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_67;
            v42 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
          }
          v38 = (*v42)(v44);
        }
LABEL_67:
        if (++v40 == 3)
        {
          v29 = 0;
          goto LABEL_123;
        }
        continue;
      }
    }
    v29 = 10;
  }
  else
  {
    v29 = sub_1ACBBE20C(45084);
  }
LABEL_125:
  if (*(_QWORD *)v28)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 80))(v28, 4, a1 + 92);
LABEL_127:
  if (*(_BYTE *)(v26 + 17))
  {
    v53 = *(_DWORD *)(v26 + 20) - 1;
    *(_DWORD *)(v26 + 20) = v53;
    if (!v53)
      sub_1ACBED048(v26);
  }
LABEL_41:
  *(_DWORD *)(a1 + 80) = v29;
  v30 = *(_QWORD *)(a1 + 416);
  if (v30)
  {
    if ((*(_WORD *)(v30 + 20) & 0x9000) == 0)
    {
      *(_WORD *)(v30 + 20) = 1;
      v31 = *(_QWORD *)(a1 + 24);
      if (!v31)
        return v29;
      goto LABEL_45;
    }
    sub_1ACBF2A54((int *)v30);
  }
  v31 = *(_QWORD *)(a1 + 24);
  if (v31)
LABEL_45:
    xmmword_1ECD3B1D0(v31);
  return v29;
}

uint64_t _sqlite3_integrity_check(char *a1)
{
  uint64_t v1;
  int v2;
  const unsigned __int8 *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  const char *v8;
  sqlite3_stmt *pStmt;
  uint64_t v10;

  v10 = 0;
  v2 = sub_1ACB55484(a1, &v10, 6u, 0);
  pStmt = 0;
  if (!v2)
  {
    v2 = sub_1ACB5C66C(v10, "PRAGMA integrity_check", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v1);
    if (!v2)
    {
      v2 = sqlite3_step(pStmt);
      if (v2 == 100)
      {
        while (2)
        {
          v3 = sqlite3_column_text(pStmt, 0);
          v4 = (char *)v3;
          do
          {
            v5 = strchr(v4, 10);
            if (!v5)
              v5 = &v4[strlen(v4)];
            if (!strncmp("ok", v4, v5 - v4))
            {
              v2 = 0;
              goto LABEL_20;
            }
            if (strncmp("*** ", v4, 4uLL) && (v5 - v4 < 14 || strncmp(" is never used", v5 - 14, 0xEuLL)))
            {
              v8 = (const char *)v3;
              v2 = 11;
              sqlite3_log(11, "Integrity check failed: %s", v8);
              goto LABEL_20;
            }
            if (*v5)
              v4 = v5 + 1;
            else
              v4 = v5;
          }
          while (*v4);
          v2 = sqlite3_step(pStmt);
          if (v2 == 100)
            continue;
          break;
        }
      }
    }
LABEL_20:
    if (pStmt)
      sqlite3_finalize(pStmt);
  }
  if (v10)
    sub_1ACBCF268(v10, 0);
  if (v2 == 26)
    v6 = 11;
  else
    v6 = v2;
  if ((v2 & 0xFFFFFFFE) == 0x64)
    return 0;
  else
    return v6;
}

uint64_t _sqlite3_db_truncate(sqlite3 *a1, const char *a2)
{
  sqlite3_str *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(char *);
  const char *v11;
  void (**v12)(char *);
  uint64_t v13;
  const char *v14;

  if (a2)
  {
    if (sqlite3_initialize() || (v6 = sub_1ACB5D828(32)) == 0)
    {
      v4 = (sqlite3_str *)&unk_1EECAC608;
    }
    else
    {
      v4 = (sqlite3_str *)v6;
      if (a1)
        v7 = *((_DWORD *)a1 + 34);
      else
        v7 = 2147483645;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 20) = v7;
      *(_DWORD *)(v6 + 24) = 0;
      *(_WORD *)(v6 + 28) = 0;
    }
    sqlite3_str_appendf(v4, "VACUUM %s", a2);
    v5 = sqlite3_str_finish(v4);
    if (!v5)
      return 7;
  }
  else
  {
    v5 = 0;
  }
  sqlite3_exec(a1, "SELECT 1 FROM sqlite_master LIMIT 1", 0, 0, 0);
  v8 = sqlite3_db_config(a1, 1009, 1, 0);
  if ((_DWORD)v8)
  {
    v9 = v8;
    if (v5)
    {
      v10 = (void (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v5);
        v5 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return v9;
        v10 = (void (**)(char *))&xmmword_1ECD3B1D0;
      }
      (*v10)(v5);
    }
    return v9;
  }
  if (v5)
    v11 = v5;
  else
    v11 = "VACUUM";
  v9 = sqlite3_exec(a1, v11, 0, 0, 0);
  if (v5)
  {
    v12 = (void (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_28:
      (*v12)(v5);
      goto LABEL_29;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v12 = (void (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_28;
    }
  }
LABEL_29:
  v13 = sqlite3_db_config(a1, 1009, 0, 0);
  if ((_DWORD)v9)
    return v9;
  v9 = v13;
  if ((_DWORD)v13)
    return v9;
  if (a2)
    v14 = a2;
  else
    v14 = "main";
  return sqlite3_wal_checkpoint_v2(a1, v14, 0, 0, 0);
}

uint64_t _sqlite3_db_copy(char *a1, sqlite3 *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3 *v8;
  const char *v9;
  sqlite3_backup *v10;
  sqlite3_backup *v11;
  int v12;
  sqlite3 *pDest;

  v6 = _sqlite3_db_clone((uint64_t)a2, a3, a1, 0x2000000);
  v7 = v6;
  if ((_DWORD)v6 && v6 != 5)
  {
    pDest = 0;
    v7 = sub_1ACB55484(a1, (uint64_t *)&pDest, 6u, 0);
    v8 = pDest;
    if ((_DWORD)v7)
    {
LABEL_16:
      sub_1ACBCF268((uint64_t)v8, 0);
      return v7;
    }
    if (a3)
      v9 = a3;
    else
      v9 = "main";
    v10 = sqlite3_backup_init(pDest, "main", a2, v9);
    if (v10)
    {
      v11 = v10;
      sqlite3_backup_step(v10, -1);
      sqlite3_backup_finish(v11);
    }
    if (!pDest)
      goto LABEL_14;
    v12 = *((unsigned __int8 *)pDest + 113);
    if (v12 == 109 || v12 == 118 || v12 == 186)
    {
      if (*((_BYTE *)pDest + 103))
      {
LABEL_14:
        v7 = 7;
LABEL_15:
        v8 = pDest;
        goto LABEL_16;
      }
      v7 = (*((_DWORD *)pDest + 22) & *((_DWORD *)pDest + 20));
      if ((_DWORD)v7 == 26)
      {
LABEL_22:
        if (!a3 || !strcasecmp("main", a3))
          v7 = sqlite3_file_control(pDest, "main", 102, a2);
        else
          v7 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      sqlite3_log(21, "API call with %s database connection pointer", "invalid");
      v7 = sub_1ACBBE20C(187990);
      if ((_DWORD)v7 == 26)
        goto LABEL_22;
    }
    if ((_DWORD)v7 != 2)
      goto LABEL_15;
    goto LABEL_22;
  }
  return v7;
}

uint64_t _sqlite3_db_copy_compact(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  _BYTE **v15;
  _BYTE *v16;
  const char *j;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  const char *i;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  uint64_t v29;
  sqlite3 *v30;
  char v32;
  sqlite3 *v33;

  v33 = 0;
  v11 = *(_QWORD *)(a2 + 24);
  if (v11)
    xmmword_1ECD3B1C0(v11);
  v12 = "main";
  if (a3)
    v12 = (const char *)a3;
  v13 = *(_DWORD *)(a2 + 40);
  v14 = (v13 - 1);
  if (v13 < 1)
    goto LABEL_30;
  v15 = (_BYTE **)(*(_QWORD *)(a2 + 32) + 32 * v14);
  while (1)
  {
    v16 = *v15;
    if (*v15)
      break;
LABEL_14:
    if (!(_DWORD)v14)
    {
      v21 = "main";
      for (i = v12; ; ++i)
      {
        v23 = *(unsigned __int8 *)v21;
        v24 = *(unsigned __int8 *)i;
        if ((_DWORD)v23 == (_DWORD)v24)
        {
          if (!*v21)
          {
            LODWORD(v14) = 0;
            goto LABEL_25;
          }
        }
        else if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
        {
          break;
        }
        ++v21;
      }
    }
    v15 -= 4;
    v20 = (int)v14 <= 0;
    LODWORD(v14) = v14 - 1;
    if (v20)
      goto LABEL_30;
  }
  for (j = v12; ; ++j)
  {
    v18 = *v16;
    v19 = *(unsigned __int8 *)j;
    if ((_DWORD)v18 == (_DWORD)v19)
      break;
    if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
      goto LABEL_14;
LABEL_10:
    ++v16;
  }
  if (*v16)
    goto LABEL_10;
  if ((v14 & 0x80000000) != 0)
  {
LABEL_30:
    v32 = a3;
    v26 = 1;
    sub_1ACBC3FCC(a2, 1, "invalid database name \"%s\"", a4, a5, a6, a7, a8, v32);
    goto LABEL_31;
  }
LABEL_25:
  v25 = (char *)sub_1ACB6DDD0(a2, "VACUUM \"%w\" INTO '%q'", a3, a4, a5, a6, a7, a8, (char)v12);
  v26 = sqlite3_exec((sqlite3 *)a2, v25, 0, 0, 0);
  if (v25)
    sub_1ACBE0F9C((_QWORD *)a2, v25);
  if ((_DWORD)v26)
  {
LABEL_31:
    v28 = 0;
    v27 = 0;
    v29 = *(_QWORD *)(a2 + 24);
    if (!v29)
      goto LABEL_33;
    goto LABEL_32;
  }
  v27 = *(_DWORD *)(a2 + 76) & 0xFFFFFFFC | 2;
  v28 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v14 + 8) + 8) + 9) == 5;
  v29 = *(_QWORD *)(a2 + 24);
  if (v29)
LABEL_32:
    xmmword_1ECD3B1D0(v29);
LABEL_33:
  if (v28)
  {
    v26 = sub_1ACB55484(a1, (uint64_t *)&v33, v27, 0);
    v30 = v33;
    if (!(_DWORD)v26)
    {
      v26 = sqlite3_exec(v33, "PRAGMA journal_mode=wal", 0, 0, 0);
      sqlite3_exec(v33, "PRAGMA user_version", 0, 0, 0);
      v30 = v33;
    }
  }
  else
  {
    v30 = 0;
  }
  sub_1ACBCF268((uint64_t)v30, 0);
  return v26;
}

uint64_t _sqlite3_maintain_load_factor(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void (**v15)(unsigned __int8 *);
  int v16;
  const char *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  void (**v22)(const char *);
  int v23;
  char *v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  uint64_t v27;
  _QWORD v29[5];
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;

  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  v34 = 0;
  v4 = *(_DWORD *)(a1 + 140);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v4;
  sub_1ACBC290C((uint64_t)&v30, "PRAGMA ", 7u);
  if (a2)
    sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
  v10 = v34;
  if ((int)v34 + 11 >= v32)
  {
    sub_1ACBC290C((uint64_t)&v30, "auto_vacuum", 0xBu);
    v12 = v31;
    if (!v31)
      goto LABEL_10;
  }
  else
  {
    LODWORD(v34) = v34 + 11;
    v11 = &v31[v10];
    *(_QWORD *)v11 = *(_QWORD *)"auto_vacuum";
    *(_DWORD *)(v11 + 7) = 1836414307;
    v12 = v31;
    if (!v31)
      goto LABEL_10;
  }
  v12[v34] = 0;
  if (v33 && (v34 & 0x40000000000) == 0)
  {
    v13 = (unsigned __int8 *)sub_1ACBE13A0(&v30);
    goto LABEL_11;
  }
LABEL_10:
  v13 = v31;
LABEL_11:
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 0x40000000;
  v29[2] = sub_1ACBD57D8;
  v29[3] = &unk_1E5C72CA0;
  v29[4] = &v35;
  v14 = sqlite3_exec_b(a1, v13, (uint64_t)v29, v5, v6, v7, v8, v9);
  if (!v13)
    goto LABEL_18;
  v15 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_17;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v13);
  v13 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v15 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_17:
    (*v15)(v13);
  }
LABEL_18:
  if ((_DWORD)v14)
    goto LABEL_54;
  if (*((_DWORD *)v36 + 6) != 1)
  {
    v18 = *(_DWORD *)(a1 + 140);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = v18;
    LODWORD(v34) = 0;
    WORD2(v34) = 0;
    sub_1ACBC290C((uint64_t)&v30, "PRAGMA ", 7u);
    if (a2)
      sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
    v19 = v34;
    if ((int)v34 + 13 >= v32)
    {
      sub_1ACBC290C((uint64_t)&v30, "auto_vacuum=1", 0xDu);
      v20 = v31;
      if (!v31)
        goto LABEL_33;
    }
    else
    {
      LODWORD(v34) = v34 + 13;
      qmemcpy(&v31[v19], "auto_vacuum=1", 13);
      v20 = v31;
      if (!v31)
        goto LABEL_33;
    }
    v20[v34] = 0;
    if (v33 && (v34 & 0x40000000000) == 0)
    {
      v21 = (const char *)sub_1ACBE13A0(&v30);
      goto LABEL_34;
    }
LABEL_33:
    v21 = (const char *)v31;
LABEL_34:
    v14 = sqlite3_exec((sqlite3 *)a1, v21, 0, 0, 0);
    if (v21)
    {
      v22 = (void (**)(const char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_40:
        (*v22)(v21);
        goto LABEL_41;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v21);
      v21 = (const char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v22 = (void (**)(const char *))&xmmword_1ECD3B1D0;
        goto LABEL_40;
      }
    }
LABEL_41:
    if ((_DWORD)v14)
      goto LABEL_54;
    if (!*((_DWORD *)v36 + 6))
    {
      if (a2)
      {
        v23 = *(_DWORD *)(a1 + 140);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = v23;
        LODWORD(v34) = 0;
        WORD2(v34) = 0;
        sqlite3_str_appendall((sqlite3_str *)&v30, "VACUUM");
        sqlite3_str_appendf((sqlite3_str *)&v30, " %Q", a2);
        v24 = (char *)sub_1ACB591CC((uint64_t)&v30);
        v14 = sqlite3_exec((sqlite3 *)a1, v24, 0, 0, 0);
        sqlite3_free(v24);
      }
      else
      {
        v14 = sqlite3_exec((sqlite3 *)a1, "VACUUM", 0, 0, 0);
      }
      if ((_DWORD)v14)
        goto LABEL_54;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + 113);
  if (v16 == 186)
    goto LABEL_23;
  if (v16 != 118)
  {
    if (v16 != 109)
    {
      v17 = "invalid";
      goto LABEL_53;
    }
LABEL_23:
    v17 = "unopened";
LABEL_53:
    sqlite3_log(21, "API call with %s database connection pointer", v17);
    v14 = sub_1ACBBE20C(187651);
    goto LABEL_54;
  }
  v25 = *(_QWORD *)(a1 + 24);
  if (v25)
    xmmword_1ECD3B1C0(v25);
  v26 = *(void (**)(_QWORD))(a1 + 328);
  if (v26)
    v26(*(_QWORD *)(a1 + 320));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = sub_1ACBD5810;
  *(_QWORD *)(a1 + 320) = 0;
  v27 = *(_QWORD *)(a1 + 24);
  if (v27)
    xmmword_1ECD3B1D0(v27);
  v14 = 0;
LABEL_54:
  _Block_object_dispose(&v35, 8);
  return v14;
}

uint64_t sub_1ACBD57D8(uint64_t a1, sqlite3_stmt *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 0;
}

uint64_t sub_1ACBD5810(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  double v5;

  if (!a4)
    return 0;
  v5 = (double)(a3 - a4) / (double)a3;
  if (!((a5 * a4) >> 21) && v5 > 0.85)
    return 0;
  if (v5 <= 0.4)
    return a4 - (a3 - a4);
  return ((double)a4 * 0.2);
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  int v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE **v12;
  _BYTE *v13;
  const char *i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  const char *v19;
  const char *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  if (ppSnapshot)
    *ppSnapshot = 0;
  if (!db)
  {
    v7 = "NULL";
    goto LABEL_33;
  }
  v6 = *((unsigned __int8 *)db + 113);
  if (v6 == 186)
  {
LABEL_7:
    v7 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    return sub_1ACBBE20C(190720);
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      v7 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_7;
  }
  v8 = *((_QWORD *)db + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (*((_BYTE *)db + 101))
  {
LABEL_50:
    v25 = 1;
    v27 = *((_QWORD *)db + 3);
    if (v27)
      goto LABEL_57;
    return v25;
  }
  if (!zSchema)
  {
    v17 = -1;
    goto LABEL_36;
  }
  v9 = *((_DWORD *)db + 10);
  v10 = (v9 - 1);
  if (v9 < 1)
  {
LABEL_34:
    v17 = v10;
LABEL_36:
    if (!v17 || v17 >= 2)
    {
      v11 = *((_QWORD *)db + 4);
      goto LABEL_39;
    }
    goto LABEL_50;
  }
  v11 = *((_QWORD *)db + 4);
  v12 = (_BYTE **)(v11 + 32 * v10);
  while (1)
  {
    v13 = *v12;
    if (*v12)
    {
      for (i = zSchema; ; ++i)
      {
        v15 = *v13;
        v16 = *(unsigned __int8 *)i;
        if ((_DWORD)v15 == (_DWORD)v16)
        {
          if (!*v13)
            goto LABEL_34;
        }
        else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
        {
          break;
        }
        ++v13;
      }
    }
    if (!(_DWORD)v10)
      break;
LABEL_23:
    v12 -= 4;
    v17 = -1;
    v18 = (int)v10 <= 0;
    LODWORD(v10) = v10 - 1;
    if (v18)
      goto LABEL_36;
  }
  v19 = "main";
  for (j = zSchema; ; ++j)
  {
    v21 = *(unsigned __int8 *)v19;
    v22 = *(unsigned __int8 *)j;
    if ((_DWORD)v21 == (_DWORD)v22)
      break;
    if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
      goto LABEL_23;
LABEL_28:
    ++v19;
  }
  if (*v19)
    goto LABEL_28;
  v17 = 0;
LABEL_39:
  v24 = *(_QWORD *)(v11 + 32 * v17 + 8);
  if (v24 && *(_BYTE *)(v24 + 16) == 2)
    goto LABEL_50;
  if (*(_BYTE *)(v24 + 17) || !*(_BYTE *)(v24 + 16))
  {
    v25 = sub_1ACBED080(v24, 0, 0);
    if (v25)
      goto LABEL_56;
  }
  v26 = *(_OWORD **)(**(_QWORD **)(v24 + 8) + 344);
  if (!v26)
    goto LABEL_50;
  if (v26[6] == 0)
  {
    v28 = 0;
    v25 = 1;
    goto LABEL_55;
  }
  if (sqlite3_initialize() || (v28 = sub_1ACB5D828(48)) == 0)
  {
    v25 = 7;
    v27 = *((_QWORD *)db + 3);
    if (v27)
      goto LABEL_57;
  }
  else
  {
    v25 = 0;
    v29 = *(_OWORD *)((char *)v26 + 72);
    v30 = *(_OWORD *)((char *)v26 + 104);
    *(_OWORD *)(v28 + 16) = *(_OWORD *)((char *)v26 + 88);
    *(_OWORD *)(v28 + 32) = v30;
    *(_OWORD *)v28 = v29;
LABEL_55:
    *ppSnapshot = (sqlite3_snapshot *)v28;
LABEL_56:
    v27 = *((_QWORD *)db + 3);
    if (v27)
LABEL_57:
      xmmword_1ECD3B1D0(v27);
  }
  return v25;
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  int v4;
  const char *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE **v12;
  _BYTE *v13;
  const char *i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  const char *v19;
  const char *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  if (!db)
  {
    v5 = "NULL";
    goto LABEL_31;
  }
  v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_31:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(190756);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  v8 = *((_QWORD *)db + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (*((_BYTE *)db + 101))
    goto LABEL_50;
  if (zSchema)
  {
    v9 = *((_DWORD *)db + 10);
    v10 = (v9 - 1);
    if (v9 < 1)
    {
LABEL_32:
      v17 = v10;
    }
    else
    {
      v11 = *((_QWORD *)db + 4);
      v12 = (_BYTE **)(v11 + 32 * v10);
      do
      {
        v13 = *v12;
        if (*v12)
        {
          for (i = zSchema; ; ++i)
          {
            v15 = *v13;
            v16 = *(unsigned __int8 *)i;
            if ((_DWORD)v15 == (_DWORD)v16)
            {
              if (!*v13)
                goto LABEL_32;
            }
            else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
            {
              break;
            }
            ++v13;
          }
        }
        if (!(_DWORD)v10)
        {
          v19 = "main";
          for (j = zSchema; ; ++j)
          {
            v21 = *(unsigned __int8 *)v19;
            v22 = *(unsigned __int8 *)j;
            if ((_DWORD)v21 == (_DWORD)v22)
            {
              if (!*v19)
              {
                v17 = 0;
                goto LABEL_37;
              }
            }
            else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
            {
              break;
            }
            ++v19;
          }
        }
        v12 -= 4;
        v17 = -1;
        v18 = (int)v10 <= 0;
        LODWORD(v10) = v10 - 1;
      }
      while (!v18);
    }
  }
  else
  {
    v17 = -1;
  }
  if (v17 && v17 < 2)
    goto LABEL_50;
  v11 = *((_QWORD *)db + 4);
LABEL_37:
  v24 = *(_QWORD *)(v11 + 32 * v17 + 8);
  if (v24)
  {
    v25 = *(unsigned __int8 *)(v24 + 16);
    if (v25 == 2)
      goto LABEL_50;
  }
  else
  {
    v25 = MEMORY[0x10];
  }
  v26 = **(_QWORD **)(v24 + 8);
  if (!v25)
  {
    v30 = *(_QWORD *)(v26 + 344);
    if (v30)
      goto LABEL_47;
LABEL_50:
    v27 = 1;
    goto LABEL_51;
  }
  if (*((_DWORD *)db + 52))
    goto LABEL_50;
  v27 = sub_1ACBD5DA8(v26, (uint64_t)pSnapshot);
  if (v27)
    goto LABEL_51;
  v29 = sub_1ACBD5E58(v24, v28);
  v30 = *(_QWORD *)(v26 + 344);
  if (v29)
  {
    v27 = v29;
    goto LABEL_57;
  }
LABEL_47:
  v31 = (uint64_t *)(v26 + 344);
  *(_QWORD *)(v30 + 144) = pSnapshot;
  if (*(_BYTE *)(v24 + 17) || !*(_BYTE *)(v24 + 16))
  {
    v27 = sub_1ACBED080(v24, 0, 0);
    v30 = *v31;
    if (!*v31)
      goto LABEL_51;
  }
  else
  {
    v27 = 0;
  }
  *(_QWORD *)(v30 + 144) = 0;
  if (v25)
  {
LABEL_57:
    if (!*(_BYTE *)(v30 + 63))
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v30 + 8) + 112))(*(_QWORD *)(v30 + 8), 1, 1, 5);
  }
LABEL_51:
  v32 = *((_QWORD *)db + 3);
  if (v32)
    xmmword_1ECD3B1D0(v32);
  return v27;
}

uint64_t sub_1ACBD5DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 344);
  if (!v2)
    return 1;
  if (*(_BYTE *)(v2 + 63)
    || (result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 112))(*(_QWORD *)(v2 + 8), 1, 1, 6), !(_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(v2 + 104)
      && *(_DWORD *)(a2 + 16) >= *(_DWORD *)(**(_QWORD **)(v2 + 48) + 128))
    {
      return 0;
    }
    else
    {
      if (!*(_BYTE *)(v2 + 63))
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v2 + 8) + 112))(*(_QWORD *)(v2 + 8), 1, 1, 5);
      return 769;
    }
  }
  return result;
}

uint64_t sub_1ACBD5E58(uint64_t a1, double a2)
{
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v3 = sub_1ACB8F578(a1, 0, a2);
  if ((_DWORD)v3)
  {
    if (!*(_BYTE *)(a1 + 17))
      return v3;
  }
  else
  {
    v3 = sub_1ACB8F9C8(a1, 0);
    if (!*(_BYTE *)(a1 + 17))
      return v3;
  }
  v4 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v4;
  if (!v4)
    sub_1ACBED048(a1);
  return v3;
}

int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
{
  double v2;
  int v4;
  const char *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE **v11;
  _BYTE *v12;
  const char *i;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const char *v17;
  const char *j;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const void *v30;
  uint64_t v31;
  int v32;
  const void *v34;
  BOOL v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  size_t v44;
  int v45;
  void (**v46)(const void *);
  void (**v47)(const void *);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  if (!db)
  {
    v5 = "NULL";
    goto LABEL_30;
  }
  v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    v5 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1ACBBE20C(190809);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      v5 = "invalid";
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  v7 = *((_QWORD *)db + 3);
  if (v7)
    xmmword_1ECD3B1C0(v7);
  if (!zDb)
  {
    v22 = -1;
    goto LABEL_35;
  }
  v8 = *((_DWORD *)db + 10);
  v9 = (v8 - 1);
  if (v8 < 1)
  {
    v22 = v8 - 1;
LABEL_35:
    if (v22 < 2)
      goto LABEL_39;
LABEL_36:
    v10 = *((_QWORD *)db + 4);
    goto LABEL_37;
  }
  v10 = *((_QWORD *)db + 4);
  v11 = (_BYTE **)(v10 + 32 * v9);
  while (1)
  {
    v12 = *v11;
    if (*v11)
    {
      for (i = zDb; ; ++i)
      {
        v14 = *v12;
        v15 = *(unsigned __int8 *)i;
        if ((_DWORD)v14 == (_DWORD)v15)
        {
          if (!*v12)
          {
            v22 = v9;
            goto LABEL_32;
          }
        }
        else if (byte_1ACCB6333[v14] != byte_1ACCB6333[v15])
        {
          break;
        }
        ++v12;
      }
    }
    if (!(_DWORD)v9)
      break;
LABEL_20:
    v11 -= 4;
    v22 = -1;
    v16 = (int)v9 <= 0;
    LODWORD(v9) = v9 - 1;
    if (v16)
    {
LABEL_32:
      if (!v22)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  v17 = "main";
  for (j = zDb; ; ++j)
  {
    v19 = *(unsigned __int8 *)v17;
    v20 = *(unsigned __int8 *)j;
    if ((_DWORD)v19 == (_DWORD)v20)
      break;
    if (byte_1ACCB6333[v19] != byte_1ACCB6333[v20])
      goto LABEL_20;
LABEL_25:
    ++v17;
  }
  if (*v17)
    goto LABEL_25;
  v22 = 0;
LABEL_37:
  v23 = *(_QWORD *)(v10 + 32 * v22 + 8);
  if (v23 && *(_BYTE *)(v23 + 16))
  {
LABEL_39:
    v24 = 1;
    goto LABEL_40;
  }
  if (!*(_BYTE *)(v23 + 17) && *(_BYTE *)(v23 + 16) || (v24 = sub_1ACBED080(v23, 0, 0)) == 0)
  {
    v26 = *(_QWORD *)(**(_QWORD **)(v23 + 8) + 344);
    if (!v26)
    {
      v24 = 1;
      goto LABEL_105;
    }
    if (*(_BYTE *)(v26 + 63)
      || (v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v26 + 8) + 112))(*(_QWORD *)(v26 + 8), 1, 1, 10)) == 0)
    {
      v27 = *(unsigned int *)(v26 + 56);
      v28 = sqlite3_initialize();
      if ((int)v27 >= 1 && v28 == 0)
        v30 = (const void *)sub_1ACB5D828(v27);
      else
        v30 = 0;
      v31 = *(unsigned int *)(v26 + 56);
      v32 = sqlite3_initialize();
      if ((int)v31 < 1 || v32 != 0)
      {
        v24 = 7;
        if (v30)
        {
          v34 = 0;
          v35 = 1;
          goto LABEL_90;
        }
LABEL_103:
        if (!*(_BYTE *)(v26 + 63))
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v26 + 8) + 112))(*(_QWORD *)(v26 + 8), 1, 1, 9);
        goto LABEL_105;
      }
      v36 = sub_1ACB5D828(v31);
      v34 = (const void *)v36;
      v35 = v36 == 0;
      if (v30 && v36)
      {
        *(_BYTE *)(v26 + 65) = 1;
        v37 = *(int *)(v26 + 56);
        v52 = 0;
        v24 = (*(uint64_t (**)(_QWORD, int64_t *))(**(_QWORD **)(v26 + 8) + 48))(*(_QWORD *)(v26 + 8), &v52);
        if (!v24)
        {
          v38 = **(_QWORD **)(v26 + 48);
          LODWORD(v39) = *(_DWORD *)(v38 + 128);
          v49 = v38;
          if (v39 > *(_DWORD *)(v38 + 96))
          {
            while (1)
            {
              v50 = 0;
              v51 = 0;
              v40 = ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021) >> 12;
              if (*(_DWORD *)(v26 + 40) > (int)v40
                && (v41 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * (int)v40), (v50 = v41) != 0))
              {
                v24 = 0;
              }
              else
              {
                v42 = sub_1ACBEB628(v26, ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021) >> 12, &v50);
                v24 = v42;
                v41 = v50;
                if (!v50)
                {
                  if (v42 <= 1)
                    v24 = 1;
                  else
                    v24 = v42;
                  break;
                }
              }
              if ((_DWORD)v40)
              {
                v43 = ((_DWORD)v40 << 12) - 34;
              }
              else
              {
                v43 = 0;
                v41 += 136;
                v50 = v41;
              }
              LODWORD(v51) = v43;
              if (v24)
                break;
              v39 = (v39 - 1);
              v44 = (*(_DWORD *)(v41 + 4 * (v39 - v43)) - 1) * v37;
              if ((uint64_t)(v44 + v37) <= v52)
              {
                v45 = (*(uint64_t (**)(_QWORD, const void *, size_t, size_t))(**(_QWORD **)(v26 + 16) + 16))(*(_QWORD *)(v26 + 16), v30, v37, v39 * (v37 + 24) + 56);
                if (v45
                  || (v45 = (*(uint64_t (**)(_QWORD, const void *, size_t, size_t))(**(_QWORD **)(v26 + 8)
                                                                                            + 16))(*(_QWORD *)(v26 + 8), v34, v37, v44)) != 0)
                {
                  v24 = v45;
                  break;
                }
                if (!memcmp(v30, v34, v37))
                {
LABEL_82:
                  v24 = 0;
                  break;
                }
              }
              *(_DWORD *)(v49 + 128) = v39;
              if (v39 <= *(_DWORD *)(v49 + 96))
                goto LABEL_82;
            }
          }
        }
        v35 = 0;
        *(_BYTE *)(v26 + 65) = 0;
LABEL_90:
        v46 = (void (**)(const void *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v30);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v30);
          v30 = (const void *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v46 = (void (**)(const void *))&xmmword_1ECD3B1D0;
            goto LABEL_95;
          }
        }
        else
        {
LABEL_95:
          (*v46)(v30);
        }
      }
      else
      {
        v24 = 7;
        if (v30)
          goto LABEL_90;
      }
      if (v35)
        goto LABEL_103;
      v47 = (void (**)(const void *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v34);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v34);
        v34 = (const void *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_103;
        v47 = (void (**)(const void *))&xmmword_1ECD3B1D0;
      }
      (*v47)(v34);
      goto LABEL_103;
    }
LABEL_105:
    if (*(_BYTE *)(v23 + 17))
    {
      ++*(_DWORD *)(v23 + 20);
      if (!*(_BYTE *)(v23 + 18))
        sub_1ACBECF6C(v23);
    }
    if (!sub_1ACB8F578(v23, 0, v2))
      sub_1ACB8F9C8(v23, 0);
    if (*(_BYTE *)(v23 + 17))
    {
      v48 = *(_DWORD *)(v23 + 20) - 1;
      *(_DWORD *)(v23 + 20) = v48;
      if (!v48)
        sub_1ACBED048(v23);
    }
  }
LABEL_40:
  v25 = *((_QWORD *)db + 3);
  if (v25)
    xmmword_1ECD3B1D0(v25);
  return v24;
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  sqlite3_snapshot *v1;
  void (**v2)(sqlite3_snapshot *);

  if (a1)
  {
    v1 = a1;
    v2 = (void (**)(sqlite3_snapshot *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = (sqlite3_snapshot *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = (void (**)(sqlite3_snapshot *))&xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
}

int sqlite3_compileoption_used(const char *zOptName)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char *v10;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  int v22;

  if (zOptName)
  {
    v1 = zOptName;
    v2 = *(unsigned __int8 *)zOptName;
    if (!*zOptName)
    {
      v12 = 0;
      v10 = "SQLITE_";
      goto LABEL_32;
    }
    if ((v2 & 0xFFFFFFDF) == 0x53)
    {
      v3 = *((unsigned __int8 *)zOptName + 1);
      if (!zOptName[1])
      {
        v12 = 0;
        v10 = "QLITE_";
        goto LABEL_32;
      }
      if ((v3 & 0xFFFFFFDF) == 0x51)
      {
        v4 = *((unsigned __int8 *)zOptName + 2);
        if (!zOptName[2])
        {
          v12 = 0;
          v10 = "LITE_";
          goto LABEL_32;
        }
        if ((v4 & 0xFFFFFFDF) == 0x4C)
        {
          v5 = *((unsigned __int8 *)zOptName + 3);
          if (!zOptName[3])
          {
            v12 = 0;
            v10 = "ITE_";
            goto LABEL_32;
          }
          if ((v5 & 0xFFFFFFDF) == 0x49)
          {
            v6 = *((unsigned __int8 *)zOptName + 4);
            if (!zOptName[4])
            {
              v12 = 0;
              v10 = "TE_";
              goto LABEL_32;
            }
            if ((v6 & 0xFFFFFFDF) == 0x54)
            {
              v7 = *((unsigned __int8 *)zOptName + 5);
              if (!zOptName[5])
              {
                v12 = 0;
                v10 = "E_";
                goto LABEL_32;
              }
              if ((v7 & 0xFFFFFFDF) == 0x45)
              {
                v8 = *((unsigned __int8 *)zOptName + 6);
                if (!zOptName[6])
                {
                  v12 = 0;
                  v10 = "_";
LABEL_32:
                  if (v12 != byte_1ACCB6333[*v10])
                  {
LABEL_34:
                    v13 = strlen(v1);
                    v14 = 0;
                    v15 = v13 & 0x3FFFFFFF;
                    v16 = v13 & 0x3FFFFFFF;
                    while (1)
                    {
                      v17 = off_1E5C754F8[v14];
                      if (v17)
                      {
                        if (!v15)
                          goto LABEL_35;
                        v18 = v15 + 1;
                        v19 = off_1E5C754F8[v14];
                        v20 = v1;
                        while (1)
                        {
                          v21 = *(unsigned __int8 *)v20;
                          if (!*v20)
                            break;
                          LODWORD(v21) = byte_1ACCB6333[v21];
                          v22 = byte_1ACCB6333[*v19];
                          if ((_DWORD)v21 != v22)
                            goto LABEL_45;
                          ++v20;
                          ++v19;
                          if (--v18 <= 1)
                            goto LABEL_35;
                        }
                        v22 = byte_1ACCB6333[*v19];
LABEL_45:
                        if ((_DWORD)v21 == v22)
                        {
LABEL_35:
                          if ((byte_1ACCB6548[v17[v16]] & 0x46) == 0)
                            return 1;
                        }
                      }
                      if (++v14 == 69)
                        return 0;
                    }
                  }
LABEL_33:
                  v1 = zOptName + 7;
                  goto LABEL_34;
                }
                if ((_DWORD)v8 == 95)
                  goto LABEL_33;
                v9 = &byte_1ACCB6333[v8];
                v10 = "_";
              }
              else
              {
                v9 = &byte_1ACCB6333[v7];
                v10 = "E_";
              }
            }
            else
            {
              v9 = &byte_1ACCB6333[v6];
              v10 = "TE_";
            }
          }
          else
          {
            v9 = &byte_1ACCB6333[v5];
            v10 = "ITE_";
          }
        }
        else
        {
          v9 = &byte_1ACCB6333[v4];
          v10 = "LITE_";
        }
      }
      else
      {
        v9 = &byte_1ACCB6333[v3];
        v10 = "QLITE_";
      }
    }
    else
    {
      v9 = &byte_1ACCB6333[v2];
      v10 = "SQLITE_";
    }
    v12 = *v9;
    goto LABEL_32;
  }
  sub_1ACBBE20C(190853);
  return 0;
}

const char *__cdecl sqlite3_compileoption_get(int N)
{
  if (N > 0x44)
    return 0;
  else
    return off_1E5C754F8[N];
}

int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (__cdecl *xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
{
  _QWORD *v9;

  if (sqlite3_initialize())
    return 7;
  v9 = (_QWORD *)sub_1ACB5D828(32);
  if (!v9)
    return 7;
  *v9 = xGeom;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = pContext;
  return sub_1ACBCF994((uint64_t)db, (char *)zGeom, 0xFFFFFFFFLL, 5, (uint64_t)v9, (uint64_t)sub_1ACBD68D4, 0, 0, 0, 0, (void (*)(uint64_t))sub_1ACBD6AF4);
}

void sub_1ACBD68D4(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (!a1 || (v6 = *((_QWORD *)a1 + 1)) == 0)
  {
    sub_1ACBBE20C(97914);
    v7 = 0;
    if (!sqlite3_initialize())
      goto LABEL_6;
LABEL_21:
    sqlite3_result_error_nomem(a1);
    return;
  }
  v7 = *(__int128 **)(v6 + 8);
  if (sqlite3_initialize())
    goto LABEL_21;
LABEL_6:
  v8 = sub_1ACB5D828(8 * (a2 + (uint64_t)(a2 - 1)) + 64);
  if (!v8)
    goto LABEL_21;
  v9 = v8;
  *(_DWORD *)v8 = 8 * (a2 + a2 - 1) + 64;
  v10 = *v7;
  *(_OWORD *)(v8 + 24) = v7[1];
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 48) = v8 + 8 * a2 + 56;
  *(_DWORD *)(v8 + 40) = a2;
  if (a2 < 1)
    goto LABEL_24;
  v11 = 0;
  v12 = 0;
  v13 = 8 * a2;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v11) = sqlite3_value_dup(*(const sqlite3_value **)(a3 + v11));
    if (!*(_QWORD *)(*(_QWORD *)(v9 + 48) + v11))
      v12 = 1;
    v15 = *(_QWORD *)(a3 + v11);
    if (!v15)
    {
      sub_1ACBBE20C(89734);
LABEL_18:
      v14 = 0.0;
      goto LABEL_10;
    }
    v16 = *(_WORD *)(v15 + 20);
    if ((v16 & 8) != 0)
    {
      v14 = *(double *)v15;
      goto LABEL_10;
    }
    if ((v16 & 0x24) != 0)
    {
      v14 = (double)*(uint64_t *)v15;
      goto LABEL_10;
    }
    if ((v16 & 0x12) == 0)
      goto LABEL_18;
    v14 = sub_1ACBF2F88(v15);
LABEL_10:
    *(double *)(v9 + v11 + 56) = v14;
    v11 += 8;
  }
  while (v13 != v11);
  if (v12)
  {
    sqlite3_result_error_nomem(a1);
    sub_1ACCA87BC(v9);
    return;
  }
LABEL_24:
  if (a1)
  {
    v17 = *(_QWORD *)a1;
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32))
      sub_1ACBF2A04(v17);
    *(_WORD *)(v17 + 20) = 1;
    sub_1ACBF2A04(v17);
    *(_QWORD *)v17 = "RtreeMatchArg";
    *(_QWORD *)(v17 + 8) = v9;
    *(_WORD *)(v17 + 20) = 6657;
    *(_BYTE *)(v17 + 23) = 112;
    *(_BYTE *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 48) = sub_1ACCA87BC;
  }
  else
  {
    sub_1ACBBE20C(97449);
  }
}

uint64_t sub_1ACBD6AF4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD);
  uint64_t (**v3)(uint64_t);
  uint64_t result;

  v1 = a1;
  v2 = *(void (**)(_QWORD))(a1 + 16);
  if (v2)
    v2(*(_QWORD *)(a1 + 24));
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v1);
  }
  return result;
}

int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (__cdecl *xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (__cdecl *xDestructor)(void *))
{
  _QWORD *v11;

  if (sqlite3_initialize() || (v11 = (_QWORD *)sub_1ACB5D828(32)) == 0)
  {
    if (xDestructor)
      ((void (*)(void *))xDestructor)(pContext);
    return 7;
  }
  else
  {
    *v11 = 0;
    v11[1] = xQueryFunc;
    v11[2] = xDestructor;
    v11[3] = pContext;
    return sub_1ACBCF994((uint64_t)db, (char *)zQueryFunc, 0xFFFFFFFFLL, 5, (uint64_t)v11, (uint64_t)sub_1ACBD68D4, 0, 0, 0, 0, (void (*)(uint64_t))sub_1ACBD6AF4);
  }
}

uint64_t sqlite3_intarray_create(unsigned __int8 *a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v8;
  int v9;
  const char *v10;
  char *v11;
  void (**v12)(char *);

  if (sqlite3_initialize())
  {
    *a3 = 0;
    return 7;
  }
  v8 = (_QWORD *)sub_1ACB5D828(24);
  *a3 = v8;
  if (!v8)
    return 7;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (!a1)
  {
    v10 = "NULL";
    goto LABEL_22;
  }
  v9 = a1[113];
  if (v9 == 186)
  {
LABEL_10:
    v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1ACBBE20C(161254);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  if (a2)
  {
    v6 = sub_1ACB5BDE4((uint64_t)a1, a2, (uint64_t)&unk_1EECAC658, (uint64_t)v8, (void (*)(uint64_t))sub_1ACBD6E14);
    if (!(_DWORD)v6)
    {
      v11 = sqlite3_mprintf("CREATE VIRTUAL TABLE temp.%Q USING %Q", a2, a2);
      v6 = sqlite3_exec((sqlite3 *)a1, v11, 0, 0, 0);
      if (v11)
      {
        v12 = (void (**)(char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v11);
          v11 = (char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            return v6;
          v12 = (void (**)(char *))&xmmword_1ECD3B1D0;
        }
        (*v12)(v11);
      }
    }
    return v6;
  }
  return sub_1ACBBE20C(161254);
}

uint64_t sub_1ACBD6E14(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD);
  uint64_t (**v3)(uint64_t);
  uint64_t result;

  v1 = a1;
  v2 = *(void (**)(_QWORD))(a1 + 16);
  if (v2)
    v2(*(_QWORD *)(a1 + 8));
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v1);
  }
  return result;
}

uint64_t sqlite3_intarray_bind(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(_QWORD);

  v8 = *(void (**)(_QWORD))(a1 + 16);
  if (v8)
    v8(*(_QWORD *)(a1 + 8));
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  return 0;
}

uint64_t sqlite3session_diff(uint64_t a1, const char *a2, char *__s, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BOOL4 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  void (**v39)(char *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  sqlite3_int64 v68;
  uint64_t (**v69)(unsigned __int8 *);
  void (**v70)(char *);
  void (**v71)(char *);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  sqlite3_stmt *v79;

  v8 = *(unsigned int *)(a1 + 36);
  v78[0] = 0;
  v78[1] = 0;
  *(_QWORD *)(a1 + 96) = v78;
  *(_QWORD *)(a1 + 104) = sub_1ACCA8BA8;
  *(_QWORD *)(a1 + 112) = sub_1ACCA8BE4;
  *(_QWORD *)(a1 + 120) = sub_1ACCA8C1C;
  *(_QWORD *)(a1 + 128) = sub_1ACCA8C90;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)a1)
  {
    v12 = "NULL";
    goto LABEL_10;
  }
  v11 = *(unsigned __int8 *)(v9 + 113);
  if (v11 == 186)
  {
LABEL_5:
    v12 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1ACBBE20C(186006);
    goto LABEL_11;
  }
  if (v11 != 118)
  {
    if (v11 != 109)
    {
      v12 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  v13 = *(_QWORD *)(v9 + 24);
  if (v13)
    xmmword_1ECD3B1C0(v13);
LABEL_11:
  if (a4)
    *a4 = 0;
  v14 = *(unsigned __int8 **)a1;
  if (!(_DWORD)v8)
  {
    v77 = 0;
    v8 = sub_1ACBD7858(a1, __s, &v77);
    v15 = v77;
    if (!v77)
      goto LABEL_55;
    if (sub_1ACBD7988(a1, v77))
    {
      v8 = *(unsigned int *)(a1 + 36);
      goto LABEL_55;
    }
    if ((_DWORD)v8)
    {
LABEL_55:
      v14 = *(unsigned __int8 **)a1;
      goto LABEL_56;
    }
    v75 = 0;
    v76 = 0;
    v79 = 0;
    v16 = (_BOOL4 *)&v76;
    if (!*(_DWORD *)(a1 + 32))
      v16 = 0;
    LODWORD(v8) = sub_1ACBD7AF0(0, (sqlite3 *)v14, a2, __s, (_DWORD *)&v76 + 1, 0, &v75, &v79, v16);
    v17 = 0;
    v18 = 0;
    if (!(_DWORD)v8)
    {
      v19 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v19 == HIDWORD(v76))
      {
        if ((int)v19 >= 1)
        {
          v20 = 0;
          v18 = 0;
          v17 = 0;
          while (1)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v15 + 40) + v20) != *((unsigned __int8 *)v79 + v20))
              v18 = 1;
            v21 = *(_BYTE **)(v75 + 8 * v20);
            v22 = *(unsigned __int8 **)(*(_QWORD *)(v15 + 32) + 8 * v20);
            if (v21)
            {
              if (v22)
              {
                while (1)
                {
                  v24 = *v21;
                  v25 = *v22;
                  if ((_DWORD)v24 == (_DWORD)v25)
                  {
                    if (!*v21)
                      goto LABEL_25;
                  }
                  else
                  {
                    v23 = byte_1ACCB6333[v24] - byte_1ACCB6333[v25];
                    if (v23)
                      goto LABEL_41;
                  }
                  ++v21;
                  ++v22;
                }
              }
            }
            else
            {
              if (v22)
                v23 = -1;
              else
                v23 = 0;
LABEL_41:
              if (!v23)
                goto LABEL_25;
            }
            v18 = 1;
LABEL_25:
            if (*((_BYTE *)v79 + v20))
              v17 = 1;
            if (++v20 == v19)
              goto LABEL_45;
          }
        }
        v17 = 0;
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 1;
      }
    }
LABEL_45:
    v26 = v75;
    if (v75)
    {
      v27 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_51:
        (*v27)(v26);
        goto LABEL_52;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v26);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v26);
      v26 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v27 = &xmmword_1ECD3B1D0;
        goto LABEL_51;
      }
    }
LABEL_52:
    if (a4 && v18)
    {
      *a4 = sqlite3_mprintf("table schemas do not match");
      v8 = 17;
      goto LABEL_55;
    }
    if (v18)
      v8 = 17;
    else
      v8 = v8;
    if (v17 && !(_DWORD)v8)
    {
      v32 = *(unsigned int *)(v15 + 16);
      if ((int)v32 < 1)
      {
        v33 = 0;
        goto LABEL_80;
      }
      v33 = 0;
      v34 = *(_QWORD *)(v15 + 8);
      v35 = &byte_1ACCBEAEE;
      v37 = *(_QWORD **)(v15 + 32);
      v36 = *(unsigned __int8 **)(v15 + 40);
      while (1)
      {
        if (*v36++)
        {
          v33 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"=\"%w\".\"%w\".\"%w\"", v33, v35, v10, v34, *v37, a2, v34, *v37);
          if (!v33)
          {
LABEL_78:
            v15 = v77;
LABEL_80:
            v8 = sub_1ACBD802C(18, (uint64_t *)a1, v15, v10, (uint64_t)a2, (uint64_t)v33);
            if ((_DWORD)v8 || (v8 = sub_1ACBD802C(9, (uint64_t *)a1, v77, (uint64_t)a2, v10, (uint64_t)v33), (_DWORD)v8))
            {
LABEL_82:
              if (v33)
              {
                v39 = (void (**)(char *))&off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_88;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v33);
                v33 = (char *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v39 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_88:
                  (*v39)(v33);
                }
              }
              goto LABEL_55;
            }
            v40 = v77;
            v41 = *(unsigned int *)(v77 + 16);
            if ((int)v41 < 1)
              goto LABEL_99;
            v42 = 0;
            v43 = 0;
            v44 = *(_QWORD *)(a1 + 8);
            v45 = *(_QWORD *)(v77 + 8);
            v46 = v41 - 1;
            v47 = &byte_1ACCBEAEE;
            v48 = 1;
            v49 = *(_QWORD *)(v77 + 32);
            v50 = *(_QWORD *)(v77 + 40);
            v51 = "%z%s\"%w\".\"%w\".\"%w\" IS NOT \"%w\".\"%w\".\"%w\"";
            do
            {
              while (!*(_BYTE *)(v50 + v42))
              {
                v72 = v46;
                v73 = v49;
                v52 = v45;
                v53 = v44;
                v54 = v51;
                v43 = sqlite3_mprintf(v51, v43, v47, v44, v45, *(_QWORD *)(v49 + 8 * v42), a2, v45, *(_QWORD *)(v49 + 8 * v42));
                if (!v43)
                  goto LABEL_109;
                v48 = 0;
                v47 = " OR ";
                v46 = v72;
                v49 = v73;
                v55 = v72 == v42++;
                v44 = v53;
                v45 = v52;
                v51 = v54;
                if (v55)
                  goto LABEL_101;
              }
              ++v42;
            }
            while (v41 != v42);
            if ((v48 & 1) != 0)
LABEL_99:
              v43 = sqlite3_mprintf("0");
            if (!v43)
            {
LABEL_109:
              v8 = 7;
              goto LABEL_82;
            }
LABEL_101:
            if (*(int *)(v40 + 16) < 1)
            {
              v57 = 0;
              v61 = 0;
            }
            else
            {
              v74 = v43;
              v56 = 0;
              v57 = 0;
              v58 = *(_QWORD *)(a1 + 8);
              while (1)
              {
                v59 = v57 ? ", " : &byte_1ACCBEAEE;
                v57 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"", v57, v59, v58, *(_QWORD *)(v40 + 8), *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8 * v56));
                if (!v57)
                  break;
                ++v56;
                v60 = *(int *)(v40 + 16);
                if (v56 >= v60)
                  goto LABEL_112;
              }
              LODWORD(v60) = *(_DWORD *)(v40 + 16);
LABEL_112:
              if ((int)v60 < 1)
              {
                v61 = 0;
              }
              else
              {
                v62 = 0;
                v61 = 0;
                do
                {
                  if (v61)
                    v63 = ", ";
                  else
                    v63 = &byte_1ACCBEAEE;
                  v61 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"", v61, v63, a2, *(_QWORD *)(v40 + 8), *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8 * v62));
                  if (!v61)
                    break;
                  ++v62;
                }
                while (v62 < *(int *)(v40 + 16));
              }
              v43 = v74;
            }
            v64 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s,%s FROM \"%w\".\"%w\", \"%w\".\"%w\" WHERE %s AND (%z)", v57, v61, *(_QWORD *)(a1 + 8), *(_QWORD *)(v40 + 8), a2, *(_QWORD *)(v40 + 8), v33, v43);
            v66 = v64;
            v8 = 7;
            if (v61)
            {
              if (v57)
              {
                if (v64)
                {
                  v79 = 0;
                  v8 = sub_1ACB5C66C(*(_QWORD *)a1, v64, 0xFFFFFFFFLL, 0, 0, &v79, 0, v65);
                  if (!(_DWORD)v8)
                  {
                    v67 = *(_QWORD *)(a1 + 96);
                    *(_QWORD *)v67 = v79;
                    *(_DWORD *)(v67 + 12) = *(_DWORD *)(v40 + 16);
                    while (sqlite3_step(v79) == 100)
                    {
                      if (*(_DWORD *)(v40 + 24))
                        v68 = sqlite3_column_int64(v79, 0);
                      else
                        v68 = 0;
                      sub_1ACCA8C98(23, v68, a1, v40);
                    }
                    v8 = sqlite3_finalize(v79);
                  }
                }
              }
            }
            if (v66)
            {
              v69 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_139;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v66);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v66);
              v66 = (unsigned __int8 *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v69 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_139:
                (*v69)(v66);
              }
            }
            if (v57)
            {
              v70 = (void (**)(char *))&off_1ECD3B168;
              if (!dword_1ECD3B140)
                goto LABEL_146;
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v57);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v57);
              v57 = (char *)xmmword_1ECD3E930;
              if ((_QWORD)xmmword_1ECD3E930)
              {
                v70 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_146:
                (*v70)(v57);
              }
            }
            if (!v61)
              goto LABEL_82;
            v71 = (void (**)(char *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v61);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v61);
              v61 = (char *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_82;
              v71 = (void (**)(char *))&xmmword_1ECD3B1D0;
            }
            (*v71)(v61);
            goto LABEL_82;
          }
          v35 = " AND ";
        }
        ++v37;
        if (!--v32)
          goto LABEL_78;
      }
    }
    goto LABEL_55;
  }
LABEL_56:
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = j__sqlite3_preupdate_old;
  *(_QWORD *)(a1 + 112) = j__sqlite3_preupdate_new;
  *(_QWORD *)(a1 + 120) = sub_1ACCAA428;
  *(_QWORD *)(a1 + 128) = sub_1ACCAA440;
  if (!v14)
  {
    v29 = "NULL";
    goto LABEL_65;
  }
  v28 = v14[113];
  if (v28 == 186)
  {
LABEL_60:
    v29 = "unopened";
LABEL_65:
    sqlite3_log(21, "API call with %s database connection pointer", v29);
    sub_1ACBBE20C(186006);
    return v8;
  }
  if (v28 != 118)
  {
    if (v28 != 109)
    {
      v29 = "invalid";
      goto LABEL_65;
    }
    goto LABEL_60;
  }
  v30 = *((_QWORD *)v14 + 3);
  if (v30)
    xmmword_1ECD3B1D0(v30);
  return v8;
}

uint64_t sub_1ACBD7858(uint64_t a1, char *__s, _QWORD *a3)
{
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18)(_QWORD, char *);
  _QWORD *v19;

  if (__s)
    v6 = (strlen(__s) & 0x3FFFFFFF) + 1;
  else
    v6 = 1;
  if (__s)
    v7 = -1;
  else
    v7 = 0;
  v8 = v6 + 1;
  v9 = (_QWORD *)(a1 + 88);
  while (1)
  {
    v9 = (_QWORD *)*v9;
    if (!v9)
      break;
    v12 = (_BYTE *)v9[1];
    if (v12)
      v11 = 1;
    else
      v11 = v7;
    if (v12)
      v13 = __s == 0;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = v8;
      v15 = __s;
      while (1)
      {
        v16 = *v12;
        if (!*v12)
          break;
        LODWORD(v16) = byte_1ACCB6333[v16];
        v10 = byte_1ACCB6333[*v15];
        if ((_DWORD)v16 != v10)
          goto LABEL_9;
        ++v12;
        ++v15;
        if (--v14 <= 1)
          goto LABEL_23;
      }
      v10 = byte_1ACCB6333[*v15];
LABEL_9:
      v11 = v16 - v10;
    }
    if (!v11)
      goto LABEL_23;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    v18 = *(uint64_t (**)(_QWORD, char *))(a1 + 48);
    if (!v18 || (result = v18(*(_QWORD *)(a1 + 40), __s), (_DWORD)result))
    {
      result = sqlite3session_attach((uint64_t *)a1, (uint64_t)__s);
      if (!(_DWORD)result)
      {
        v19 = *(_QWORD **)(a1 + 88);
        while (1)
        {
          v9 = v19;
          if (!v19)
            break;
          v19 = (_QWORD *)*v19;
          if (!*v9)
            goto LABEL_24;
        }
LABEL_23:
        result = 0;
        goto LABEL_24;
      }
    }
    v9 = 0;
  }
  else
  {
    result = 0;
    v9 = 0;
  }
LABEL_24:
  *a3 = v9;
  return result;
}

BOOL sub_1ACBD7988(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  sqlite3 *v6;
  const char *v7;
  char *v8;
  _BOOL4 *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  unsigned __int8 *i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v21;

  v4 = (_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    v5 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v6 = *(sqlite3 **)a1;
    v7 = *(const char **)(a1 + 8);
    v8 = *(char **)(a2 + 8);
    if (*(_DWORD *)(a1 + 32))
      v9 = (_BOOL4 *)(a2 + 24);
    else
      v9 = 0;
    v21 = 0;
    v5 = sub_1ACBD7AF0(a1, v6, v7, v8, v4, 0, (_QWORD *)(a2 + 32), &v21, v9);
    *(_DWORD *)(a1 + 36) = v5;
    if (!v5)
    {
      v10 = *v4;
      if ((int)v10 >= 1)
      {
        v11 = 0;
        while (!*(_BYTE *)(v21 + v11))
        {
          if (v10 == ++v11)
            goto LABEL_13;
        }
        *(_QWORD *)(a2 + 40) = v21;
      }
LABEL_13:
      v12 = *(const char **)(a2 + 8);
      if (v12)
      {
        v13 = "sqlite_stat1";
        for (i = *(unsigned __int8 **)(a2 + 8); ; ++i)
        {
          v15 = *(unsigned __int8 *)v13;
          v16 = *i;
          if ((_DWORD)v15 == (_DWORD)v16)
          {
            if (!*v13)
            {
              *(_DWORD *)(a2 + 20) = 1;
              break;
            }
          }
          else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
          {
            break;
          }
          ++v13;
        }
      }
      if (*(_DWORD *)(a1 + 16))
      {
        v17 = (int)v10;
        v18 = 1;
        if (v10 >= 0x80)
        {
          do
          {
            v19 = v17 >> 14;
            v17 >>= 7;
            ++v18;
          }
          while (v19);
        }
        *(_QWORD *)(a1 + 64) += strlen(v12) + (int)v10 + v18 + 1 + 1;
      }
    }
  }
  return v5 || *(_QWORD *)(a2 + 40) == 0;
}

uint64_t sub_1ACBD7AF0(uint64_t a1, sqlite3 *a2, const char *a3, char *__s, _DWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _BOOL4 *a9)
{
  int v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  void (**v24)(unsigned __int8 *);
  _QWORD *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  int v42;
  const unsigned __int8 *v43;
  uint64_t v44;
  uint64_t (**v45)(_QWORD);
  _BOOL4 *v46;
  uint64_t v48;
  _BYTE *v49;
  size_t __n;
  _QWORD *v51;
  sqlite3_stmt *pStmt;

  if (!__s)
  {
    v17 = 0;
LABEL_10:
    v22 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA '%q'.table_info('%q')", a3, __s);
    if (!v22)
    {
LABEL_37:
      *a7 = 0;
      *a8 = 0;
      *a5 = 0;
      if (a6)
        *a6 = 0;
      return 7;
    }
LABEL_11:
    pStmt = 0;
    v23 = sub_1ACB5C66C((uint64_t)a2, v22, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v21);
    v24 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
    v51 = a7;
    v25 = a8;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v22);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v22);
      v22 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_17:
        if ((_DWORD)v23)
        {
          *v51 = 0;
          *a8 = 0;
          *a5 = 0;
          if (!a6)
            return v23;
LABEL_19:
          *a6 = 0;
          return v23;
        }
        v26 = (v17 + 1);
        __n = v26;
        v27 = 0;
        if (sqlite3_step(pStmt) == 100)
        {
          v28 = a9 != 0;
          v29 = v26;
          do
          {
            v29 += sqlite3_column_bytes(pStmt, 1);
            ++v27;
            if (sqlite3_column_int(pStmt, 5))
              v28 = 0;
          }
          while (sqlite3_step(pStmt) == 100);
        }
        else
        {
          v28 = 0;
          v29 = v26;
        }
        v32 = sqlite3_reset(pStmt);
        if ((_DWORD)v32)
        {
          v23 = v32;
          v33 = 0;
          goto LABEL_60;
        }
        v34 = v28 + v27;
        if (sqlite3_initialize())
        {
          v33 = 0;
          if (!a1)
            goto LABEL_52;
          v35 = 0;
        }
        else
        {
          v36 = sub_1ACB5D828(v29 + 10 * v34 + 7);
          v33 = (_QWORD *)v36;
          if (!a1)
            goto LABEL_47;
          if (v36)
            v35 = (int)off_1ECD3B178(v36);
          else
            v35 = 0;
        }
        *(_QWORD *)(a1 + 56) += v35;
LABEL_47:
        if (v33)
        {
          v37 = &v33[v34];
          v49 = v37;
          v38 = &v37[v34];
          if (a6)
          {
            memcpy(&v37[v34], __s, __n);
            *a6 = v38;
            v38 = (_QWORD *)((char *)v38 + __n);
          }
          v48 = a1;
          if (v28)
          {
            *v38 = 0x5F6469776F725FLL;
            *v33 = v38++;
            v39 = 1;
            *v49 = 1;
          }
          else
          {
            v39 = 0;
          }
          if (sqlite3_step(pStmt) == 100)
          {
            v40 = (char *)v33 + (v39 | (8 * v34));
            v41 = &v33[v39];
            do
            {
              v42 = sqlite3_column_bytes(pStmt, 1);
              v43 = sqlite3_column_text(pStmt, 1);
              if (!v43)
                break;
              memcpy(v38, v43, v42 + 1);
              *v41++ = v38;
              v38 = (_QWORD *)((char *)v38 + v42 + 1);
              *v40++ = sqlite3_column_int(pStmt, 5);
            }
            while (sqlite3_step(pStmt) == 100);
          }
          v23 = sqlite3_reset(pStmt);
          if (!(_DWORD)v23)
          {
            *v51 = v33;
            *v25 = v49;
            *a5 = v34;
            v46 = a9;
            if (!a9)
              goto LABEL_76;
            goto LABEL_75;
          }
          a1 = v48;
LABEL_60:
          *v51 = 0;
          *v25 = 0;
          *a5 = 0;
          if (a6)
            *a6 = 0;
          if (a1)
          {
            if (v33)
              v44 = (int)off_1ECD3B178(v33);
            else
              v44 = 0;
            *(_QWORD *)(a1 + 56) -= v44;
          }
          if (v33)
          {
            v45 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
            {
LABEL_73:
              (*v45)(v33);
              goto LABEL_74;
            }
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v33);
            v33 = (_QWORD *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v45 = &xmmword_1ECD3B1D0;
              goto LABEL_73;
            }
          }
LABEL_74:
          v46 = a9;
          if (!a9)
          {
LABEL_76:
            sqlite3_finalize(pStmt);
            return v23;
          }
LABEL_75:
          *v46 = v28;
          goto LABEL_76;
        }
LABEL_52:
        v23 = 7;
        goto LABEL_60;
      }
      v24 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v24)(v22);
    goto LABEL_17;
  }
  v17 = strlen(__s) & 0x3FFFFFFF;
  if (v17 != 12)
    goto LABEL_10;
  for (i = 0; ; ++i)
  {
    v19 = aSqliteStat1[i];
    v20 = __s[i];
    if ((_DWORD)v19 == (_DWORD)v20)
      break;
    if (byte_1ACCB6333[v19] != byte_1ACCB6333[v20])
    {
      v17 = 12;
      goto LABEL_10;
    }
LABEL_5:
    ;
  }
  if (aSqliteStat1[i])
    goto LABEL_5;
  v30 = sqlite3_table_column_metadata(a2, a3, __s, 0, 0, 0, 0, 0, 0);
  if ((_DWORD)v30 == 1)
  {
    v31 = sqlite3_mprintf(&byte_1ACCBEAEE);
LABEL_36:
    v22 = (unsigned __int8 *)v31;
    v17 = 12;
    if (!v31)
      goto LABEL_37;
    goto LABEL_11;
  }
  v23 = v30;
  if (!(_DWORD)v30)
  {
    v31 = sqlite3_mprintf("SELECT 0, 'tbl',  '', 0, '', 1     UNION ALL SELECT 1, 'idx',  '', 0, '', 2     UNION ALL SELECT 2, 'stat', '', 0, '', 0");
    goto LABEL_36;
  }
  *a7 = 0;
  *a8 = 0;
  *a5 = 0;
  if (a6)
    goto LABEL_19;
  return v23;
}

uint64_t sub_1ACBD802C(int a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  sqlite3_stmt **v14;
  sqlite3_int64 v15;
  uint64_t (**v16)(unsigned __int8 *);
  sqlite3_stmt *pStmt;

  if (*(_DWORD *)(a3 + 24))
    v9 = "_rowid_, *";
  else
    v9 = "*";
  v10 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s FROM \"%w\".\"%w\" WHERE NOT EXISTS( SELECT 1 FROM \"%w\".\"%w\" WHERE %s)", v9, a4, *(_QWORD *)(a3 + 8), a5, *(_QWORD *)(a3 + 8), a6);
  if (!v10)
    return 7;
  v12 = v10;
  pStmt = 0;
  v13 = sub_1ACB5C66C(*a2, v10, 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v11);
  if (!(_DWORD)v13)
  {
    v14 = (sqlite3_stmt **)a2[12];
    *v14 = pStmt;
    v14[1] = (sqlite3_stmt *)*(unsigned int *)(a3 + 24);
    while (sqlite3_step(pStmt) == 100)
    {
      if (*(_DWORD *)(a3 + 24))
        v15 = sqlite3_column_int64(pStmt, 0);
      else
        v15 = 0;
      sub_1ACCA8C98(a1, v15, (uint64_t)a2, a3);
    }
    v13 = sqlite3_finalize(pStmt);
  }
  v16 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_19;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v12);
  v12 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_19:
    (*v16)(v12);
  }
  return v13;
}

uint64_t sqlite3session_create(uint64_t a1, char *__s, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;

  if (__s)
    v6 = strlen(__s) & 0x3FFFFFFF;
  else
    v6 = 0;
  *a3 = 0;
  if (sqlite3_initialize())
    return 7;
  v8 = sub_1ACB5D828((v6 + 137));
  if (!v8)
    return 7;
  v9 = v8;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  v10 = (void *)(v8 + 136);
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = v10;
  *(_DWORD *)(v9 + 20) = 1;
  memcpy(v10, __s, (v6 + 1));
  *(_QWORD *)(v9 + 96) = a1;
  *(_QWORD *)(v9 + 104) = j__sqlite3_preupdate_old;
  *(_QWORD *)(v9 + 112) = j__sqlite3_preupdate_new;
  *(_QWORD *)(v9 + 120) = sub_1ACCAA428;
  *(_QWORD *)(v9 + 128) = sub_1ACCAA440;
  if (a1)
  {
    v11 = *(unsigned __int8 *)(a1 + 113);
    switch(v11)
    {
      case 186:
        goto LABEL_11;
      case 118:
        v13 = *(_QWORD *)(a1 + 24);
        if (v13)
          xmmword_1ECD3B1C0(v13);
        goto LABEL_17;
      case 109:
LABEL_11:
        v12 = "unopened";
        break;
      default:
        v12 = "invalid";
        break;
    }
  }
  else
  {
    v12 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v12);
  sub_1ACBBE20C(186006);
LABEL_17:
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    xmmword_1ECD3B1C0(v14);
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v9;
    *(_QWORD *)(a1 + 360) = sub_1ACBD83D4;
    if (v15)
      xmmword_1ECD3B1D0(v15);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v9;
    *(_QWORD *)(a1 + 360) = sub_1ACBD83D4;
  }
  *(_QWORD *)(v9 + 80) = v16;
  v17 = *(unsigned __int8 *)(a1 + 113);
  switch(v17)
  {
    case 186:
      goto LABEL_24;
    case 118:
      v19 = *(_QWORD *)(a1 + 24);
      if (v19)
        xmmword_1ECD3B1D0(v19);
      goto LABEL_29;
    case 109:
LABEL_24:
      v18 = "unopened";
      break;
    default:
      v18 = "invalid";
      break;
  }
  sqlite3_log(21, "API call with %s database connection pointer", v18);
  sub_1ACBBE20C(186006);
LABEL_29:
  result = 0;
  *a3 = v9;
  return result;
}

void sub_1ACBD83D4(uint64_t a1, int a2, int a3, char *__s, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v12 = a1;
  if (!__s)
  {
    v13 = 1;
    if (!a1)
      return;
    goto LABEL_5;
  }
  v13 = (strlen(__s) & 0x3FFFFFFF) + 1;
  if (v12)
  {
LABEL_5:
    v14 = v13 + 1;
    do
    {
      v22 = 0;
      if (*(_DWORD *)(v12 + 20) && !*(_DWORD *)(v12 + 36))
      {
        v15 = *(unsigned __int8 **)(v12 + 8);
        if (__s)
        {
          if (!v15)
            goto LABEL_6;
          v16 = v14;
          v17 = __s;
          do
          {
            v18 = *v17;
            if (!*v17)
              break;
            LODWORD(v18) = byte_1ACCB6333[v18];
            v19 = byte_1ACCB6333[*v15];
            if ((_DWORD)v18 != v19)
              goto LABEL_22;
            ++v17;
            ++v15;
            --v16;
          }
          while (v16 > 1);
          v19 = byte_1ACCB6333[*v15];
LABEL_22:
          if ((_DWORD)v18 != v19)
            goto LABEL_6;
        }
        else
        {
          if (v15)
            v20 = -1;
          else
            v20 = 0;
          if (v20)
            goto LABEL_6;
        }
        *(_DWORD *)(v12 + 36) = sub_1ACBD7858(v12, a5, &v22);
        v21 = v22;
        if (v22)
        {
          sub_1ACCA8C98(a3, a6, v12, v22);
          if (a3 == 23)
            sub_1ACCA8C98(18, a7, v12, v21);
        }
      }
LABEL_6:
      v12 = *(_QWORD *)(v12 + 80);
    }
    while (v12);
  }
}

uint64_t sqlite3session_delete(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  uint64_t result;
  uint64_t v20;

  v1 = (uint64_t)a1;
  v2 = *a1;
  if (!*a1)
  {
    v4 = "NULL";
    goto LABEL_15;
  }
  v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
    goto LABEL_15;
  }
  if (v3 != 118)
  {
    if (v3 == 109)
      goto LABEL_5;
    v4 = "invalid";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1ACBBE20C(186006);
    v6 = *(_QWORD *)(v2 + 24);
    if (!v6)
      goto LABEL_16;
LABEL_10:
    xmmword_1ECD3B1C0(v6);
    v7 = *(_QWORD *)(v2 + 24);
    v8 = *(_QWORD *)(v2 + 352);
    *(_QWORD *)(v2 + 352) = 0;
    *(_QWORD *)(v2 + 360) = 0;
    if (v7)
      xmmword_1ECD3B1D0(v7);
    v20 = v8;
    if (!v8)
      goto LABEL_29;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
    xmmword_1ECD3B1C0(v5);
  v6 = *(_QWORD *)(v2 + 24);
  if (v6)
    goto LABEL_10;
LABEL_16:
  v8 = *(_QWORD *)(v2 + 352);
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  v20 = v8;
  if (!v8)
    goto LABEL_29;
LABEL_17:
  if (v8 == v1)
  {
    v10 = &v20;
LABEL_22:
    *v10 = *(_QWORD *)(v1 + 80);
    v11 = v20;
    if (v20)
    {
      v12 = *(_QWORD *)(v2 + 24);
      if (v12)
      {
        xmmword_1ECD3B1C0(v12);
        v13 = *(_QWORD *)(v2 + 24);
        *(_QWORD *)(v2 + 352) = v11;
        *(_QWORD *)(v2 + 360) = sub_1ACBD83D4;
        if (v13)
          xmmword_1ECD3B1D0(v13);
      }
      else
      {
        *(_QWORD *)(v2 + 352) = v20;
        *(_QWORD *)(v2 + 360) = sub_1ACBD83D4;
      }
      goto LABEL_29;
    }
  }
  else
  {
    while (1)
    {
      v9 = v8;
      v8 = *(_QWORD *)(v8 + 80);
      if (!v8)
        break;
      if (v8 == v1)
      {
        v10 = (uint64_t *)(v9 + 80);
        goto LABEL_22;
      }
    }
  }
  if (!v2)
  {
    v14 = "NULL";
LABEL_36:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1ACBBE20C(186006);
    goto LABEL_37;
  }
LABEL_29:
  v15 = *(unsigned __int8 *)(v2 + 113);
  if (v15 == 186)
  {
LABEL_32:
    v14 = "unopened";
    goto LABEL_36;
  }
  if (v15 != 118)
  {
    if (v15 != 109)
    {
      v14 = "invalid";
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  v16 = *(_QWORD *)(v2 + 24);
  if (v16)
    xmmword_1ECD3B1D0(v16);
LABEL_37:
  v17 = *(_QWORD *)(v1 + 72);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32))
      sub_1ACBF2A04(*(_QWORD *)(v1 + 72));
    sub_1ACBE0F9C(*(_QWORD **)(v17 + 24), (_QWORD *)v17);
  }
  sub_1ACBD87F0(v1, *(uint64_t **)(v1 + 88));
  v18 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v18)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v18 = &xmmword_1ECD3B1D0;
    return (*v18)(v1);
  }
  return result;
}

uint64_t sub_1ACBD87F0(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t (**v15)(uint64_t *);
  uint64_t *v16;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v16 = (uint64_t *)*v2;
      v4 = *((_DWORD *)v2 + 13);
      if (v4 >= 1)
      {
        v5 = 0;
        while (1)
        {
          v6 = *(_QWORD *)(v2[7] + 8 * v5);
          if (v6)
            break;
LABEL_8:
          if (++v5 >= v4)
            goto LABEL_20;
        }
        while (2)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v3)
            *(_QWORD *)(v3 + 56) -= (int)off_1ECD3B178(v6);
          v8 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v6);
            v6 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v8 = &xmmword_1ECD3B1D0;
              goto LABEL_11;
            }
          }
          else
          {
LABEL_11:
            (*v8)(v6);
          }
          v6 = v7;
          if (!v7)
          {
            v4 = *((_DWORD *)v2 + 13);
            goto LABEL_8;
          }
          continue;
        }
      }
LABEL_20:
      v9 = v2[4];
      if (v3)
      {
        if (v9)
          v10 = (int)off_1ECD3B178(v2[4]);
        else
          v10 = 0;
        *(_QWORD *)(v3 + 56) -= v10;
      }
      if (!v9)
        goto LABEL_32;
      v11 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v9);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v9);
        v9 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_32;
        v11 = &xmmword_1ECD3B1D0;
      }
      (*v11)(v9);
LABEL_32:
      v12 = v2[7];
      if (v3)
      {
        if (v12)
          v13 = (int)off_1ECD3B178(v2[7]);
        else
          v13 = 0;
        *(_QWORD *)(v3 + 56) -= v13;
      }
      if (v12)
      {
        v14 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_43;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v12);
        v12 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v14 = &xmmword_1ECD3B1D0;
LABEL_43:
          (*v14)(v12);
        }
      }
      if (v3)
        *(_QWORD *)(v3 + 56) -= (int)off_1ECD3B178(v2);
      v15 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v2);
        v2 = (uint64_t *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v15 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
      }
      result = (*v15)(v2);
LABEL_4:
      v2 = v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sqlite3session_table_filter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 28) = 1;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sqlite3session_attach(uint64_t *a1, uint64_t __s)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned __int8 *)(v4 + 113);
    switch(v5)
    {
      case 186:
        goto LABEL_5;
      case 118:
        v7 = *(_QWORD *)(v4 + 24);
        if (v7)
          xmmword_1ECD3B1C0(v7);
        if (!__s)
          goto LABEL_23;
        goto LABEL_10;
      case 109:
LABEL_5:
        v6 = "unopened";
        break;
      default:
        v6 = "invalid";
        break;
    }
  }
  else
  {
    v6 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v6);
  sub_1ACBBE20C(186006);
  if (!__s)
  {
LABEL_23:
    *((_DWORD *)a1 + 7) = 1;
    goto LABEL_24;
  }
LABEL_10:
  v8 = strlen((const char *)__s) & 0x3FFFFFFF;
  v9 = a1 + 11;
  v10 = (v8 + 1);
  v11 = a1 + 11;
  do
  {
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
    {
      if (sqlite3_initialize() || (v22 = sub_1ACB5D828((v8 + 65))) == 0)
      {
        __s = 7;
      }
      else
      {
        v23 = v22;
        a1[7] += (int)off_1ECD3B178(v22);
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)v23 = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_QWORD *)(v23 + 8) = v23 + 64;
        memcpy((void *)(v23 + 64), (const void *)__s, v10);
        do
        {
          v24 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
        __s = 0;
        *v24 = v23;
      }
      goto LABEL_24;
    }
    v12 = (_BYTE *)v11[1];
  }
  while (!v12);
  v13 = v8 + 2;
  v14 = (unsigned __int8 *)__s;
  while (1)
  {
    v15 = *v12;
    if (!*v12)
      break;
    LODWORD(v15) = byte_1ACCB6333[v15];
    v16 = byte_1ACCB6333[*v14];
    if ((_DWORD)v15 != v16)
      goto LABEL_19;
    ++v12;
    ++v14;
    if (--v13 <= 1)
      goto LABEL_20;
  }
  v16 = byte_1ACCB6333[*v14];
LABEL_19:
  if ((_DWORD)v15 != v16)
    goto LABEL_11;
LABEL_20:
  __s = 0;
LABEL_24:
  v17 = *a1;
  if (!*a1)
  {
    v19 = "NULL";
    goto LABEL_33;
  }
  v18 = *(unsigned __int8 *)(v17 + 113);
  if (v18 == 186)
  {
LABEL_28:
    v19 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    sub_1ACBBE20C(186006);
    return __s;
  }
  if (v18 != 118)
  {
    if (v18 != 109)
    {
      v19 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v17 + 24);
  if (v20)
    xmmword_1ECD3B1D0(v20);
  return __s;
}

uint64_t sub_1ACBD8D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sqlite3_initialize())
  {
    v4 = 0;
    v5 = 0;
    if (!a1)
      return v4;
    goto LABEL_8;
  }
  v6 = sub_1ACB5D828(a2);
  v4 = v6;
  if (a1)
  {
    if (v6)
      v5 = (int)off_1ECD3B178(v6);
    else
      v5 = 0;
LABEL_8:
    *(_QWORD *)(a1 + 56) += v5;
  }
  return v4;
}

uint64_t sqlite3session_changeset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3)
    return sub_1ACCB23CC(a1, 0, a2, a3);
  else
    return 21;
}

uint64_t sub_1ACBD8DE8(uint64_t a1, int a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BOOL4 *v18;
  size_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int i;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  void (**v51)(uint64_t);
  uint64_t v52;
  uint64_t (**v53)(uint64_t);
  int v54;
  const char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t (*v62)(_QWORD, _QWORD);
  uint64_t v64;
  int v66;
  sqlite3_stmt *pStmt;
  uint64_t v68;
  void *__s1;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;

  v6 = a6;
  v7 = a5;
  v8 = a3;
  v9 = a1;
  v10 = *(_QWORD *)a1;
  v72 = 0;
  v73 = 0;
  if (a3)
  {
    result = *(unsigned int *)(a1 + 36);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    *a5 = 0;
    *a6 = 0;
    result = *(unsigned int *)(a1 + 36);
    if ((_DWORD)result)
      return result;
  }
  result = sqlite3_exec(*(sqlite3 **)v9, "SAVEPOINT changeset", 0, 0, 0);
  v71 = result;
  if (!(_DWORD)result)
  {
    if (v10)
    {
      v12 = *(unsigned __int8 *)(v10 + 113);
      switch(v12)
      {
        case 186:
          goto LABEL_10;
        case 118:
          v14 = *(_QWORD *)(v10 + 24);
          if (v14)
            xmmword_1ECD3B1C0(v14);
          goto LABEL_16;
        case 109:
LABEL_10:
          v13 = "unopened";
          break;
        default:
          v13 = "invalid";
          break;
      }
    }
    else
    {
      v13 = "NULL";
    }
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    sub_1ACBBE20C(186006);
LABEL_16:
    v15 = *(_QWORD *)(v9 + 88);
    if (!v15)
    {
      if (!v8)
      {
        LODWORD(v16) = 0;
        goto LABEL_114;
      }
LABEL_104:
      v52 = v72;
      goto LABEL_105;
    }
    v57 = v6;
    v58 = v9;
    v16 = 0;
    v62 = v8;
    v59 = v7;
    v60 = v10;
    while (1)
    {
      if (*(_DWORD *)(v15 + 48))
      {
        v17 = *(char **)(v15 + 8);
        v70 = 0;
        v68 = 0;
        __s1 = 0;
        pStmt = 0;
        v66 = 0;
        v18 = (_BOOL4 *)&v66;
        if (!*(_DWORD *)(v9 + 32))
          v18 = 0;
        v71 = sub_1ACBD7AF0(0, (sqlite3 *)v10, *(const char **)(v9 + 8), v17, &v70, 0, &v68, &__s1, v18);
        if (!v71)
        {
          v19 = *(int *)(v15 + 16);
          if ((_DWORD)v19 != v70 || *(_DWORD *)(v15 + 24) != v66 || memcmp(__s1, *(const void **)(v15 + 40), v19))
            v71 = 17;
        }
        sub_1ACCAA45C((uint64_t)&v72, a2, v15, &v71);
        v20 = v71;
        if (v71)
        {
          v21 = v73;
          v22 = v73;
          goto LABEL_87;
        }
        v23 = sub_1ACCAA588(v10, 0, *(_QWORD *)(v9 + 8), (unsigned __int8 *)v17, v66, v70, v68, (uint64_t)__s1, &pStmt);
        v20 = v23;
        v71 = v23;
        v22 = v73;
        v24 = *(_DWORD *)(v15 + 52);
        if (v24 >= 1 && !v23)
        {
          v64 = v15;
          v61 = v16;
          v25 = 0;
          v26 = v70;
          v27 = __s1;
          v28 = a2;
          while (1)
          {
            v29 = *(unsigned __int8 **)(*(_QWORD *)(v64 + 56) + 8 * v25);
            if (!v29)
            {
              v49 = 0;
              goto LABEL_83;
            }
            while (1)
            {
              v30 = sub_1ACCAAA04(pStmt, v26, (uint64_t)v27, (uint64_t)v29);
              v71 = v30;
              if (v30)
                break;
              v31 = sqlite3_step(pStmt);
              v32 = *v29;
              if (v31 == 100)
              {
                if (v32 == 18)
                {
                  LODWORD(v33) = HIDWORD(v73);
                  v34 = (int)v73;
                  if ((int)v73 < SHIDWORD(v73))
                  {
                    v35 = v72;
                    goto LABEL_38;
                  }
                  if (HIDWORD(v73))
                    v39 = HIDWORD(v73);
                  else
                    v39 = 128;
                  v33 = v39;
                  do
                  {
                    v40 = v33;
                    v33 *= 2;
                  }
                  while (v33 <= (int)v73);
                  if (v40 > 1073741695 && (v33 = 2147483391, (int)v73 > 2147483390)
                    || (v41 = v72, sqlite3_initialize())
                    || (v47 = sub_1ACB6BB48(v41, v33)) == 0)
                  {
                    v71 = 7;
                    if (v26 >= 1)
                      goto LABEL_65;
                  }
                  else
                  {
                    v35 = v47;
                    v72 = v47;
                    HIDWORD(v73) = v33;
LABEL_38:
                    v36 = v34 + 1;
                    LODWORD(v73) = v34 + 1;
                    *(_BYTE *)(v35 + v34) = 18;
                    v37 = v29[1];
                    if ((int)v34 + 1 >= (int)v33)
                    {
                      if ((_DWORD)v33)
                        v42 = v33;
                      else
                        v42 = 128;
                      v43 = v42;
                      do
                      {
                        v44 = v43;
                        v43 *= 2;
                      }
                      while (v43 <= v36);
                      if (v44 <= 1073741695 || (v43 = 2147483391, (int)v34 <= 2147483389))
                      {
                        if (!sqlite3_initialize())
                        {
                          v48 = sub_1ACB6BB48(v35, v43);
                          if (v48)
                          {
                            v35 = v48;
                            v72 = v48;
                            HIDWORD(v73) = v43;
                            goto LABEL_39;
                          }
                        }
                      }
                      v71 = 7;
                    }
                    else
                    {
LABEL_39:
                      LODWORD(v73) = v34 + 2;
                      *(_BYTE *)(v35 + v36) = v37;
                    }
                    v8 = v62;
                    v28 = a2;
                    if (v26 >= 1)
                    {
LABEL_65:
                      for (i = 0; i != v26; ++i)
                        sub_1ACCAAC70((uint64_t)&v72, pStmt, i, &v71);
                    }
                  }
LABEL_67:
                  v20 = v71;
                  if (v71)
                    goto LABEL_82;
                  goto LABEL_68;
                }
                v38 = sub_1ACCAAE9C((uint64_t)&v72, v28, (unsigned __int16 *)pStmt, (uint64_t)v29, (uint64_t)v27);
              }
              else
              {
                if (v32 == 18)
                  goto LABEL_67;
                v38 = sub_1ACCAB4D0((uint64_t)&v72, v28, (uint64_t)v29, v26, v27);
              }
              v20 = v38;
              v71 = v38;
              if (v38)
                goto LABEL_82;
LABEL_68:
              v46 = sqlite3_reset(pStmt);
              v20 = v46;
              v71 = v46;
              if (v8 && !v46 && (int)v73 > v22 && (int)v73 > dword_1EECAC718)
              {
                v20 = v8(a4, v72);
                v71 = v20;
                LODWORD(v73) = 0;
                v22 = -1;
              }
              if (!v20)
              {
                v29 = (unsigned __int8 *)*((_QWORD *)v29 + 3);
                if (v29)
                  continue;
              }
              goto LABEL_82;
            }
            v20 = v30;
LABEL_82:
            v24 = *(_DWORD *)(v64 + 52);
            v49 = v20;
LABEL_83:
            if (++v25 >= v24 || v49)
            {
              v21 = v73;
              v7 = v59;
              v10 = v60;
              v9 = v58;
              LODWORD(v16) = v61;
              v15 = v64;
              goto LABEL_87;
            }
          }
        }
        v21 = v73;
LABEL_87:
        sqlite3_finalize(pStmt);
        if (v21 == v22)
          v16 = v16;
        else
          v16 = v21;
        LODWORD(v73) = v16;
        v50 = v68;
        if (!v68)
          goto LABEL_97;
        v51 = (void (**)(uint64_t))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v50);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v50);
          v50 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_97;
          v51 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
        }
        (*v51)(v50);
      }
      else
      {
        v20 = 0;
      }
LABEL_97:
      if (!v20)
      {
        v15 = *(_QWORD *)v15;
        if (v15)
          continue;
      }
      if (!v20)
      {
        if (v8)
        {
          v52 = v72;
          if ((int)v16 >= 1)
            v71 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a4, v72, v16);
LABEL_105:
          if (v52)
          {
            v53 = &off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_111;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v52);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v52);
            v52 = xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v53 = &xmmword_1ECD3B1D0;
LABEL_111:
              (*v53)(v52);
            }
          }
LABEL_115:
          sqlite3_exec((sqlite3 *)v10, "RELEASE changeset", 0, 0, 0);
          if (!v10)
          {
            v55 = "NULL";
            goto LABEL_124;
          }
          v54 = *(unsigned __int8 *)(v10 + 113);
          if (v54 == 186)
            goto LABEL_119;
          if (v54 == 118)
          {
            v56 = *(_QWORD *)(v10 + 24);
            if (v56)
              xmmword_1ECD3B1D0(v56);
          }
          else
          {
            if (v54 == 109)
LABEL_119:
              v55 = "unopened";
            else
              v55 = "invalid";
LABEL_124:
            sqlite3_log(21, "API call with %s database connection pointer", v55);
            sub_1ACBBE20C(186006);
          }
          return v71;
        }
        v6 = v57;
LABEL_114:
        *v7 = v16;
        *v6 = v72;
        goto LABEL_115;
      }
      goto LABEL_104;
    }
  }
  return result;
}

uint64_t sqlite3session_changeset_strm(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  if (a2)
    return sub_1ACBD8DE8(a1, 0, a2, a3, 0, 0);
  else
    return 21;
}

uint64_t sqlite3session_patchset_strm(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  if (a2)
    return sub_1ACBD8DE8(a1, 1, a2, a3, 0, 0);
  else
    return 21;
}

uint64_t sqlite3session_patchset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3)
    return sub_1ACCB23CC(a1, 1, a2, a3);
  else
    return 21;
}

uint64_t sqlite3session_enable(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = *a1;
  if (!*a1)
  {
    v6 = "NULL";
    goto LABEL_16;
  }
  v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
    goto LABEL_16;
  }
  if (v5 != 118)
  {
    if (v5 == 109)
      goto LABEL_5;
    v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1ACBBE20C(186006);
    if ((a2 & 0x80000000) != 0)
      goto LABEL_17;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(v4 + 24);
  if (v7)
    xmmword_1ECD3B1C0(v7);
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 5);
    v8 = *a1;
    if (!*a1)
      goto LABEL_18;
    goto LABEL_11;
  }
LABEL_10:
  *((_DWORD *)a1 + 5) = a2;
  v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    v10 = "NULL";
    goto LABEL_22;
  }
LABEL_11:
  v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1ACBBE20C(186006);
    return a2;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v8 + 24);
  if (v11)
    xmmword_1ECD3B1D0(v11);
  return a2;
}

uint64_t sqlite3session_indirect(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = *a1;
  if (!*a1)
  {
    v6 = "NULL";
    goto LABEL_16;
  }
  v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    v6 = "unopened";
    goto LABEL_16;
  }
  if (v5 != 118)
  {
    if (v5 == 109)
      goto LABEL_5;
    v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1ACBBE20C(186006);
    if ((a2 & 0x80000000) != 0)
      goto LABEL_17;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(v4 + 24);
  if (v7)
    xmmword_1ECD3B1C0(v7);
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 6);
    v8 = *a1;
    if (!*a1)
      goto LABEL_18;
    goto LABEL_11;
  }
LABEL_10:
  *((_DWORD *)a1 + 6) = a2;
  v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    v10 = "NULL";
    goto LABEL_22;
  }
LABEL_11:
  v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1ACBBE20C(186006);
    return a2;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v8 + 24);
  if (v11)
    xmmword_1ECD3B1D0(v11);
  return a2;
}

BOOL sqlite3session_isempty(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v2 = *a1;
  if (!*a1)
  {
    v4 = "NULL";
    goto LABEL_12;
  }
  v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    v4 = "unopened";
    goto LABEL_12;
  }
  if (v3 != 118)
  {
    if (v3 == 109)
      goto LABEL_5;
    v4 = "invalid";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1ACBBE20C(186006);
    v6 = (uint64_t *)a1[11];
    if (v6)
      goto LABEL_13;
LABEL_22:
    v9 = 1;
    v10 = *a1;
    if (*a1)
      goto LABEL_18;
LABEL_23:
    v12 = "NULL";
    goto LABEL_27;
  }
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
    xmmword_1ECD3B1C0(v5);
  v6 = (uint64_t *)a1[11];
  if (!v6)
    goto LABEL_22;
  do
  {
LABEL_13:
    v7 = *((_DWORD *)v6 + 12);
    v6 = (uint64_t *)*v6;
    if (v6)
      v8 = v7 < 1;
    else
      v8 = 0;
  }
  while (v8);
  v9 = v7 < 1;
  v10 = *a1;
  if (!*a1)
    goto LABEL_23;
LABEL_18:
  v11 = *(unsigned __int8 *)(v10 + 113);
  if (v11 == 186)
  {
LABEL_21:
    v12 = "unopened";
LABEL_27:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1ACBBE20C(186006);
    return v9;
  }
  if (v11 != 118)
  {
    if (v11 != 109)
    {
      v12 = "invalid";
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
    xmmword_1ECD3B1D0(v13);
  return v9;
}

uint64_t sqlite3session_memory_used(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sqlite3session_object_config(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;

  if (a2 == 2)
  {
    if ((*a3 & 0x80000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 88);
      if (v3)
        v3 = 21;
      else
        *(_DWORD *)(a1 + 32) = *a3 != 0;
    }
    v4 = (_DWORD *)(a1 + 32);
  }
  else
  {
    if (a2 != 1)
      return 21;
    if ((*a3 & 0x80000000) != 0)
    {
      v3 = 0;
      v4 = (_DWORD *)(a1 + 16);
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 88);
      if (v3)
        v3 = 21;
      else
        *(_DWORD *)(a1 + 16) = *a3 != 0;
      v4 = (_DWORD *)(a1 + 16);
    }
  }
  *a3 = *v4;
  return v3;
}

uint64_t sqlite3session_changeset_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

double sqlite3changeset_start(uint64_t *a1, int a2, uint64_t a3)
{
  double result;
  uint64_t v7;

  *a1 = 0;
  if (!sqlite3_initialize())
  {
    v7 = sub_1ACB5D828(152);
    if (v7)
    {
      result = 0.0;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_QWORD *)(v7 + 16) = a3;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_QWORD *)(v7 + 144) = 0;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)v7 = 0u;
      *(_DWORD *)(v7 + 24) = a2;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 1;
      *(_DWORD *)(v7 + 92) = 0;
      *(_DWORD *)(v7 + 96) = 0;
      *a1 = v7;
    }
  }
  return result;
}

double sqlite3changeset_start_v2(uint64_t *a1, int a2, uint64_t a3, unsigned int a4)
{
  double result;
  uint64_t v9;

  *a1 = 0;
  if (!sqlite3_initialize())
  {
    v9 = sub_1ACB5D828(152);
    if (v9)
    {
      result = 0.0;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_QWORD *)(v9 + 16) = a3;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_QWORD *)(v9 + 144) = 0;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)v9 = 0u;
      *(_DWORD *)(v9 + 24) = a2;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 1;
      *(_QWORD *)(v9 + 92) = (a4 >> 1) & 1;
      *a1 = v9;
    }
  }
  return result;
}

uint64_t sqlite3changeset_start_strm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  if (sqlite3_initialize())
    return 7;
  v7 = sub_1ACB5D828(152);
  if (!v7)
    return 7;
  v8 = v7;
  result = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 64) = a2 == 0;
  *(_DWORD *)(v8 + 92) = 0;
  *(_DWORD *)(v8 + 96) = 0;
  *a1 = v8;
  return result;
}

uint64_t sqlite3changeset_start_v2_strm(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (sqlite3_initialize())
    return 7;
  v9 = sub_1ACB5D828(152);
  if (!v9)
    return 7;
  v10 = v9;
  result = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 144) = 0;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 64) = a2 == 0;
  *(_DWORD *)(v10 + 92) = (a4 >> 1) & 1;
  *(_DWORD *)(v10 + 96) = 0;
  *a1 = v10;
  return result;
}

uint64_t sqlite3changeset_next(uint64_t a1)
{
  return sub_1ACBD9C4C(a1, 0, 0, 0);
}

uint64_t sub_1ACBD9C4C(uint64_t a1, _QWORD *a2, int *a3, _DWORD *a4)
{
  uint64_t result;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unsigned int v24;
  size_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  size_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;
  int8x16_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int8x16_t *v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x8_t *v80;
  uint64_t v81;
  int8x16_t v82;
  int8x8_t v83;
  uint16x8_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v88;
  uint64_t j;
  uint64_t v90;
  uint64_t v91;
  int v94;
  int v95;
  unint64_t v96;

  while (2)
  {
    v94 = 0;
    result = *(unsigned int *)(a1 + 100);
    if ((_DWORD)result)
      break;
    v7 = *(void **)(a1 + 144);
    if (v7)
    {
      v8 = *(_DWORD *)(a1 + 120);
      if (v8 >= 1)
      {
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)(a1 + 144);
          v11 = *(_QWORD *)(v10 + 8 * v9);
          if (v11)
          {
            if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32))
              sub_1ACBF2A04(*(_QWORD *)(v10 + 8 * v9));
            sub_1ACBE0F9C(*(_QWORD **)(v11 + 24), (_QWORD *)v11);
            v8 = *(_DWORD *)(a1 + 120);
          }
          ++v9;
        }
        while (v9 < 2 * v8);
        v7 = *(void **)(a1 + 144);
      }
      bzero(v7, 16 * v8);
    }
    result = sub_1ACCABCE0(a1, 2);
    *(_DWORD *)(a1 + 100) = result;
    if ((_DWORD)result)
      break;
    v13 = *(unsigned int *)(a1 + 8);
    if ((int)v13 >= *(_DWORD *)(a1 + 24))
      return 101;
    if (*(_QWORD *)(a1 + 48) && (int)v13 >= dword_1EECAC718)
    {
      v14 = (*(_DWORD *)(a1 + 40) - v13);
      if ((int)v14 >= 1)
      {
        memmove(*(void **)(a1 + 32), (const void *)(*(_QWORD *)(a1 + 32) + v13), v14);
        LODWORD(v14) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8);
      }
      LODWORD(v13) = 0;
      *(_DWORD *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 24) = v14;
    }
    *(_DWORD *)(a1 + 4) = v13;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (int)v13 + 1;
      *(_DWORD *)(a1 + 8) = v16;
      v17 = *(unsigned __int8 *)(v15 + (int)v13);
      if ((v17 | 4) != 0x54)
        break;
      if (a4)
        *a4 = 1;
      *(_DWORD *)(a1 + 88) = v17 == 80;
      v95 = 0;
      result = sub_1ACCAC378(a1, &v95);
      if (!(_DWORD)result)
      {
        v21 = *(int *)(a1 + 8);
        v22 = (char *)(*(_QWORD *)(a1 + 16) + v21);
        v23 = *v22;
        if (*v22 < 0)
        {
          v33 = v22[1];
          if (v22[1] < 0)
          {
            v36 = v22[2];
            if (v36 < 0)
            {
              v96 = 0;
              v24 = sub_1ACB8A6CC(v22, &v96);
              if (HIDWORD(v96))
                v23 = -1;
              else
                v23 = v96;
              *(_DWORD *)(a1 + 120) = v23;
              if (v23 < 1)
              {
LABEL_55:
                result = sub_1ACBEB08C(233846);
                goto LABEL_33;
              }
            }
            else
            {
              v23 = v36 & 0x7F | (v23 << 14) & 0x1FC07F | ((v33 & 0x7F) << 7);
              *(_DWORD *)(a1 + 120) = v23;
              v24 = 3;
              if (v23 < 1)
                goto LABEL_55;
            }
          }
          else
          {
            v23 = ((v23 & 0x7F) << 7) | v33;
            *(_DWORD *)(a1 + 120) = v23;
            v24 = 2;
            if (v23 < 1)
              goto LABEL_55;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 120) = v23;
          v24 = 1;
          if (v23 < 1)
            goto LABEL_55;
        }
        v25 = v95 - (unint64_t)v24;
        *(_DWORD *)(a1 + 8) = v24 + v21;
        v26 = v25 + 16 * v23;
        *(_DWORD *)(a1 + 80) = 0;
        v27 = *(_DWORD *)(a1 + 84);
        if (v26 <= v27)
        {
          v34 = *(void **)(a1 + 72);
        }
        else
        {
          v28 = v26;
          if (v27)
            v29 = *(_DWORD *)(a1 + 84);
          else
            v29 = 128;
          v30 = v29;
          do
          {
            v31 = v30;
            v30 *= 2;
          }
          while (v30 < v28);
          if (v31 >= 1073741696)
          {
            if ((int)v28 > 2147483391)
              goto LABEL_47;
            v30 = 2147483391;
          }
          v32 = *(_QWORD *)(a1 + 72);
          if (sqlite3_initialize() || (v34 = (void *)sub_1ACB6BB48(v32, v30)) == 0)
          {
LABEL_47:
            result = 7;
            goto LABEL_33;
          }
          *(_QWORD *)(a1 + 72) = v34;
          *(_DWORD *)(a1 + 84) = v30;
          v23 = *(_DWORD *)(a1 + 120);
        }
        v35 = 16 * v23;
        bzero(v34, v35);
        memcpy((void *)(*(_QWORD *)(a1 + 72) + v35), (const void *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8)), v25);
        result = 0;
        *(_DWORD *)(a1 + 8) += v25;
      }
LABEL_33:
      v18 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 144) = v18;
      if (v18)
      {
        v19 = *(int *)(a1 + 120);
        v18 += 16 * v19;
        v20 = v18 + v19;
      }
      else
      {
        v20 = 0;
      }
      *(_QWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 112) = v20;
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result)
        goto LABEL_15;
      result = sub_1ACCABCE0(a1, 2);
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result)
        goto LABEL_15;
      LODWORD(v13) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 4) = v13;
      if ((int)v13 >= *(_DWORD *)(a1 + 24))
        return 101;
    }
    v37 = 233932;
    if (!*(_QWORD *)(a1 + 112) || (v38 = *(_DWORD *)(a1 + 88)) != 0 && *(_DWORD *)(a1 + 92))
    {
LABEL_104:
      result = sub_1ACBEB08C(v37);
      *(_DWORD *)(a1 + 100) = result;
      break;
    }
    *(_DWORD *)(a1 + 124) = v17;
    *(_DWORD *)(a1 + 8) = v13 + 2;
    *(_DWORD *)(a1 + 128) = *(unsigned __int8 *)(v15 + v16);
    if (v17 > 0x17 || ((1 << v17) & 0x840200) == 0)
    {
      v37 = 233938;
      goto LABEL_104;
    }
    if (a2)
    {
      if (v17 == 23 && v38 == 0)
      {
        v43 = 2 * *(_DWORD *)(a1 + 120);
        goto LABEL_106;
      }
      v41 = *(unsigned int *)(a1 + 120);
      v42 = v17 != 9 || v38 == 0;
      v43 = *(_DWORD *)(a1 + 120);
      if (!v42)
      {
        if ((int)v41 < 1)
        {
          v43 = 0;
          goto LABEL_106;
        }
        v44 = *(int8x16_t **)(a1 + 136);
        if (v41 >= 8)
        {
          if (v41 >= 0x20)
          {
            v60 = 0uLL;
            v45 = v41 & 0xFFFFFFE0;
            v61 = 0uLL;
            v62 = v44 + 1;
            v63 = v45;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = 0uLL;
            v69 = 0uLL;
            v70.i64[0] = 0x100000001;
            v70.i64[1] = 0x100000001;
            do
            {
              v71 = (uint8x16_t)vtstq_s8(v62[-1], v62[-1]);
              v72 = vmovl_u8(*(uint8x8_t *)v71.i8);
              v73 = vmovl_high_u8(v71);
              v74 = (uint8x16_t)vtstq_s8(*v62, *v62);
              v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
              v76 = vmovl_high_u8(v74);
              v65 = vaddq_s32(v65, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v73), v70));
              v64 = vaddq_s32(v64, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v73.i8), v70));
              v61 = vaddq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v70));
              v60 = vaddq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v70));
              v69 = vaddq_s32(v69, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v76), v70));
              v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v76.i8), v70));
              v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v75), v70));
              v66 = vaddq_s32(v66, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8), v70));
              v62 += 2;
              v63 -= 32;
            }
            while (v63);
            v43 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v66, v60), vaddq_s32(v68, v64)), vaddq_s32(vaddq_s32(v67, v61), vaddq_s32(v69, v65))));
            if (v45 == v41)
              goto LABEL_106;
            if ((v41 & 0x18) == 0)
              goto LABEL_139;
          }
          else
          {
            v43 = 0;
            v45 = 0;
          }
          v77 = v45;
          v45 = v41 & 0xFFFFFFF8;
          v78 = 0uLL;
          v79 = (int32x4_t)v43;
          v80 = (int8x8_t *)&v44->i8[v77];
          v81 = v77 - v45;
          v82.i64[0] = 0x100000001;
          v82.i64[1] = 0x100000001;
          do
          {
            v83 = *v80++;
            v84 = vmovl_u8((uint8x8_t)vtst_s8(v83, v83));
            v78 = vaddq_s32(v78, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v84), v82));
            v79 = vaddq_s32(v79, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v84.i8), v82));
            v81 += 8;
          }
          while (v81);
          v43 = vaddvq_s32(vaddq_s32(v79, v78));
          if (v45 != v41)
            goto LABEL_139;
        }
        else
        {
          v45 = 0;
          v43 = 0;
LABEL_139:
          v85 = v41 - v45;
          v86 = &v44->u8[v45];
          do
          {
            if (*v86++)
              ++v43;
            --v85;
          }
          while (v85);
        }
      }
LABEL_106:
      result = sub_1ACCABEA8(a1, v43, a3);
      *(_DWORD *)(a1 + 100) = result;
      if (!(_DWORD)result)
      {
        v54 = *(int *)(a1 + 8);
        *a2 = *(_QWORD *)(a1 + 16) + v54;
        *(_DWORD *)(a1 + 8) = *a3 + v54;
        goto LABEL_16;
      }
      break;
    }
    v46 = *(_DWORD *)(a1 + 92);
    v47 = *(_QWORD *)(a1 + 144);
    v48 = *(int *)(a1 + 120);
    if (v46)
      v49 = v47 + 8 * v48;
    else
      v49 = *(_QWORD *)(a1 + 144);
    if (v46)
      v50 = *(_QWORD *)(a1 + 144);
    else
      v50 = v47 + 8 * v48;
    v52 = v17 == 9 || v38 == 0;
    if (v17 != 18 && v52)
    {
      if (v38)
        v53 = *(_QWORD *)(a1 + 136);
      else
        v53 = 0;
      result = sub_1ACCABFFC(a1, v48, v53, v49, 0);
      *(_DWORD *)(a1 + 100) = result;
      if ((_DWORD)result)
        break;
      v17 = *(_DWORD *)(a1 + 124);
    }
    if (v17 == 9
      || (result = sub_1ACCABFFC(a1, *(_DWORD *)(a1 + 120), 0, v50, &v94), (*(_DWORD *)(a1 + 100) = result) == 0))
    {
      v55 = *(_DWORD *)(a1 + 88);
      if (v55)
      {
        v56 = *(_DWORD *)(a1 + 124);
        goto LABEL_116;
      }
      v56 = *(_DWORD *)(a1 + 124);
      if (!*(_DWORD *)(a1 + 92))
        goto LABEL_147;
LABEL_116:
      if (v56 == 23)
      {
        v57 = *(unsigned int *)(a1 + 120);
        if ((int)v57 >= 1)
        {
          for (i = 0; v57 != i; ++i)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + i))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * i) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * i + 8 * v57);
              v59 = *(_QWORD *)(a1 + 144);
              if (!*(_QWORD *)(v59 + 8 * i))
              {
                v37 = 233982;
                goto LABEL_104;
              }
              *(_QWORD *)(v59 + 8 * v57 + 8 * i) = 0;
            }
          }
        }
        v56 = 23;
      }
      else
      {
        if (!*(_DWORD *)(a1 + 92))
          goto LABEL_146;
        if (v56 == 18)
        {
          v56 = 9;
        }
        else
        {
          if (v56 != 9)
            goto LABEL_146;
          v56 = 18;
        }
        *(_DWORD *)(a1 + 124) = v56;
      }
LABEL_146:
      if (!v55)
      {
LABEL_147:
        if (v56 == 23)
        {
          v88 = *(_DWORD *)(a1 + 120);
          if (v88 >= 1)
          {
            for (j = 0; j < v88; ++j)
            {
              if (!*(_BYTE *)(*(_QWORD *)(a1 + 136) + j))
              {
                v90 = *(_QWORD *)(a1 + 144);
                if (!*(_QWORD *)(v90 + 8 * ((int)j + v88)))
                {
                  v91 = *(_QWORD *)(v90 + 8 * j);
                  if (v91)
                  {
                    if ((*(_WORD *)(v91 + 20) & 0x9000) != 0 || *(_DWORD *)(v91 + 32))
                      sub_1ACBF2A04(*(_QWORD *)(v90 + 8 * j));
                    sub_1ACBE0F9C(*(_QWORD **)(v91 + 24), (_QWORD *)v91);
                    v90 = *(_QWORD *)(a1 + 144);
                    v88 = *(_DWORD *)(a1 + 120);
                  }
                  *(_QWORD *)(v90 + 8 * j) = 0;
                }
              }
            }
          }
        }
      }
LABEL_16:
      if (*(_DWORD *)(a1 + 96))
        v12 = v94 == 0;
      else
        v12 = 1;
      if (v12)
        return 100;
      continue;
    }
    break;
  }
LABEL_15:
  if ((_DWORD)result == 100)
    goto LABEL_16;
  return result;
}

uint64_t sqlite3changeset_op(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = *(_DWORD *)(a1 + 124);
  *a3 = *(_DWORD *)(a1 + 120);
  *a2 = *(_QWORD *)(a1 + 112);
  if (a5)
    *a5 = *(_DWORD *)(a1 + 128);
  return 0;
}

uint64_t sqlite3changeset_pk(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  *a2 = *(_QWORD *)(a1 + 136);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 120);
  return 0;
}

uint64_t sqlite3changeset_old(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 9)
    return 21;
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 120) <= (signed int)a2)
    return 25;
  result = 0;
  *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a2);
  return result;
}

uint64_t sqlite3changeset_new(uint64_t a1, int a2, _QWORD *a3)
{
  int v3;
  int v6;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 18)
    return 21;
  if (a2 < 0)
    return 25;
  v6 = *(_DWORD *)(a1 + 120);
  if (v6 <= a2)
    return 25;
  result = 0;
  *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (v6 + a2));
  return result;
}

uint64_t sqlite3changeset_conflict(uint64_t a1, int a2, sqlite3_value **a3)
{
  sqlite3_stmt *v4;
  sqlite3_value *v6;
  uint64_t result;

  v4 = *(sqlite3_stmt **)(a1 + 104);
  if (!v4)
    return 21;
  if (a2 < 0 || *(_DWORD *)(a1 + 120) <= a2)
    return 25;
  v6 = sqlite3_column_value(v4, a2);
  result = 0;
  *a3 = v6;
  return result;
}

uint64_t sqlite3changeset_fk_conflicts(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 104))
    return 21;
  if (*(_QWORD *)(a1 + 144))
    return 21;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 120);
  return result;
}

uint64_t sqlite3changeset_finalize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  uint64_t (**v11)(uint64_t);

  if (!a1)
    return 0;
  v1 = a1;
  v2 = *(unsigned int *)(a1 + 100);
  if (*(_QWORD *)(a1 + 144))
  {
    v3 = *(_DWORD *)(a1 + 120);
    if (v3 >= 1)
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(v1 + 144);
        v6 = *(_QWORD *)(v5 + 8 * v4);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32))
            sub_1ACBF2A04(*(_QWORD *)(v5 + 8 * v4));
          sub_1ACBE0F9C(*(_QWORD **)(v6 + 24), (_QWORD *)v6);
          v3 = *(_DWORD *)(v1 + 120);
        }
        ++v4;
      }
      while (v4 < 2 * v3);
    }
  }
  v7 = *(_QWORD *)(v1 + 72);
  if (v7)
  {
    v8 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v8)(v7);
      goto LABEL_19;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v7);
    v7 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v8 = &xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
LABEL_19:
  v9 = *(_QWORD *)(v1 + 32);
  if (!v9)
    goto LABEL_26;
  v10 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_25;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v9);
  v9 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v10 = &xmmword_1ECD3B1D0;
LABEL_25:
    (*v10)(v9);
  }
LABEL_26:
  v11 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_31:
    (*v11)(v1);
    return v2;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = &xmmword_1ECD3B1D0;
    goto LABEL_31;
  }
  return v2;
}

uint64_t sqlite3changeset_invert(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v5 = 0u;
  v7 = a1;
  v6 = a2;
  return sub_1ACBDA7FC((uint64_t)&v5, 0, 0, a3, a4);
}

uint64_t sub_1ACBDA7FC(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  sqlite3_value **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  void (**v15)(void *);
  void (**v16)(void *);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  sqlite3_value **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  sqlite3_value **v68;
  sqlite3_value *v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (**v97)(void *);
  _DWORD *v98;
  uint64_t *v99;
  int v100;
  uint64_t (*v102)(_QWORD, _QWORD);
  sqlite3_value **v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;

  v108 = 0;
  v106 = 0;
  v107 = 0;
  if (a5)
  {
    *a5 = 0;
    *a4 = 0;
  }
  v9 = sub_1ACCABCE0(a1, 2);
  if (!(_DWORD)v9)
  {
    v98 = a4;
    v99 = a5;
    v12 = 0;
    v11 = 0;
    v100 = 0;
    v18 = 0;
    v102 = a2;
    while (1)
    {
      v20 = *(int *)(a1 + 8);
      if ((int)v20 >= *(_DWORD *)(a1 + 24))
      {
        if (v98 && v99)
        {
          v10 = 0;
          *v98 = v107;
          *v99 = v106;
          goto LABEL_12;
        }
        v10 = 0;
        if (!a2 || (int)v107 < 1)
          goto LABEL_5;
        v13 = v106;
        v10 = a2(a3, v106);
        if (v13)
          goto LABEL_6;
        goto LABEL_12;
      }
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(unsigned __int8 *)(v21 + v20);
      if (v22 > 0x16)
      {
        if (v22 != 23)
        {
          if (v22 != 84)
            goto LABEL_209;
          v105 = 0;
          *(_DWORD *)(a1 + 8) = v20 + 1;
          v19 = sub_1ACCAC378(a1, &v105);
          if ((_DWORD)v19)
            goto LABEL_210;
          v36 = *(_QWORD *)(a1 + 16);
          v37 = *(int *)(a1 + 8);
          v38 = v36 + v37;
          v18 = *(unsigned __int8 *)(v36 + v37);
          if ((v18 & 0x80) != 0)
          {
            v59 = *(unsigned __int8 *)(v38 + 1);
            if ((*(char *)(v38 + 1) & 0x80000000) == 0)
            {
              v18 = ((v18 & 0x7F) << 7) | v59;
              v39 = 2;
              goto LABEL_151;
            }
            v77 = *(char *)(v38 + 2);
            if ((v77 & 0x80000000) == 0)
            {
              v18 = v77 & 0x7F | (v18 << 14) & 0x1FC07F | ((v59 & 0x7F) << 7);
              v39 = 3;
              goto LABEL_151;
            }
            v109 = 0;
            v78 = sub_1ACB8A6CC((char *)v38, &v109);
            v18 = v109;
            if (!HIDWORD(v109))
            {
              v39 = v78;
              goto LABEL_151;
            }
            v18 = -1;
          }
          else
          {
            v39 = 1;
LABEL_151:
            if (v18 >= 1)
            {
              if (v18 > (uint64_t)v100)
              {
                if (v100)
                  v79 = v100;
                else
                  v79 = 128;
                do
                {
                  v80 = v79;
                  v79 *= 2;
                }
                while (v79 < v18);
                if (v80 > 1073741695 && (v79 = 2147483391, v18 > 0x7FFFFEFF)
                  || sqlite3_initialize()
                  || (v81 = sub_1ACB6BB48((uint64_t)v12, v79)) == 0)
                {
                  v10 = 7;
                  goto LABEL_5;
                }
                v12 = (unsigned __int8 *)v81;
                v100 = v79;
              }
              memcpy(v12, (const void *)(v36 + v37 + v39), v18);
            }
          }
          v82 = HIDWORD(v107);
          v83 = (int)v107;
          if ((int)v107 >= SHIDWORD(v107))
          {
            if (!HIDWORD(v107))
              v82 = 128;
            v85 = v82;
            do
            {
              v86 = v85;
              v85 *= 2;
            }
            while (v85 <= (int)v107);
            if (v86 > 1073741695)
            {
              v85 = 2147483391;
              if ((int)v107 > 2147483390)
                goto LABEL_213;
            }
            v87 = v106;
            if (sqlite3_initialize())
              goto LABEL_213;
            v84 = sub_1ACB6BB48(v87, v85);
            if (!v84)
              goto LABEL_213;
            v106 = v84;
            HIDWORD(v107) = v85;
          }
          else
          {
            v84 = v106;
          }
          LODWORD(v107) = v83 + 1;
          *(_BYTE *)(v84 + v83) = 84;
          v88 = v105;
          if (v105 >= 1)
          {
            v89 = *(_QWORD *)(a1 + 16);
            v90 = *(int *)(a1 + 8);
            v91 = (int)v107;
            v92 = (int)v107 + (unint64_t)v105;
            if (v92 <= SHIDWORD(v107))
            {
              v96 = v106;
            }
            else
            {
              if (HIDWORD(v107))
                v93 = SHIDWORD(v107);
              else
                v93 = 128;
              do
              {
                v94 = v93;
                v93 *= 2;
              }
              while (v93 < v92);
              if (v94 > 1073741695)
              {
                v93 = 2147483391;
                if (v92 > 2147483391)
                  goto LABEL_213;
              }
              v95 = v106;
              if (sqlite3_initialize())
                goto LABEL_213;
              v96 = sub_1ACB6BB48(v95, v93);
              if (!v96)
                goto LABEL_213;
              v106 = v96;
              HIDWORD(v107) = v93;
            }
            memcpy((void *)(v96 + v91), (const void *)(v89 + v90), v88);
            LODWORD(v107) = v91 + v88;
          }
          *(_DWORD *)(a1 + 8) += v88;
          a2 = v102;
          if (v11)
          {
            v97 = (void (**)(void *))&off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_193;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v11);
            v11 = (sqlite3_value **)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v97 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_193:
              (*v97)(v11);
            }
          }
          v11 = 0;
          if (!v102)
            goto LABEL_28;
LABEL_195:
          if ((int)v107 >= dword_1EECAC718)
          {
            v19 = a2(a3, v106);
            LODWORD(v107) = 0;
            if ((_DWORD)v19)
              goto LABEL_210;
          }
          goto LABEL_28;
        }
        if (!v11)
        {
          if (sqlite3_initialize())
          {
            v11 = 0;
LABEL_213:
            v10 = 7;
            goto LABEL_5;
          }
          v40 = (sqlite3_value **)sub_1ACB5D828(16 * v18);
          v11 = v40;
          if (!v40)
            goto LABEL_213;
          bzero(v40, 16 * v18);
        }
        LODWORD(v41) = HIDWORD(v107);
        v42 = (int)v107;
        v43 = v12;
        if ((int)v107 < SHIDWORD(v107))
        {
          v44 = v106;
          goto LABEL_64;
        }
        if (HIDWORD(v107))
          v53 = HIDWORD(v107);
        else
          v53 = 128;
        v41 = v53;
        do
        {
          v54 = v41;
          v41 *= 2;
        }
        while (v41 <= (int)v107);
        if (v54 <= 1073741695 || (v41 = 2147483391, (int)v107 <= 2147483390))
        {
          v55 = v106;
          if (!sqlite3_initialize())
          {
            v44 = sub_1ACB6BB48(v55, v41);
            if (v44)
            {
              v106 = v44;
              HIDWORD(v107) = v41;
LABEL_64:
              v45 = v42 + 1;
              *(_BYTE *)(v44 + v42) = 23;
              LODWORD(v107) = v42 + 1;
              v46 = *(_BYTE *)(*(int *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 1);
              if ((int)v42 + 1 < (int)v41)
              {
                v47 = v106;
                goto LABEL_66;
              }
              if ((_DWORD)v41)
                v60 = v41;
              else
                v60 = 128;
              v61 = v60;
              do
              {
                v62 = v61;
                v61 *= 2;
              }
              while (v61 <= v45);
              if (v62 <= 1073741695 || (v61 = 2147483391, (int)v42 <= 2147483389))
              {
                v63 = v106;
                if (!sqlite3_initialize())
                {
                  v47 = sub_1ACB6BB48(v63, v61);
                  if (v47)
                  {
                    v106 = v47;
                    HIDWORD(v107) = v61;
LABEL_66:
                    LODWORD(v107) = v42 + 2;
                    *(_BYTE *)(v47 + v45) = v46;
                  }
                }
              }
            }
          }
        }
        *(_DWORD *)(a1 + 8) += 2;
        v108 = sub_1ACCABFFC(a1, v18, 0, (uint64_t)v11, 0);
        if (!v108)
          v108 = sub_1ACCABFFC(a1, v18, 0, (uint64_t)&v11[v18], 0);
        v12 = v43;
        if (v18 >= 1)
        {
          v64 = 0;
          v65 = v18;
          do
          {
            if (v12[v64])
              v66 = 0;
            else
              v66 = v18;
            sub_1ACCAC4A4((uint64_t)&v106, *(&v11[v64++] + v66), &v108);
          }
          while (v18 != v64);
          v67 = v12;
          v68 = v11;
          do
          {
            if (*v67++)
              v69 = 0;
            else
              v69 = *v68;
            sub_1ACCAC4A4((uint64_t)&v106, v69, &v108);
            ++v68;
            --v65;
          }
          while (v65);
          if (2 * v18 <= 1)
            v71 = 1;
          else
            v71 = (2 * v18);
          v72 = (uint64_t *)v11;
          do
          {
            v73 = *v72;
            if (*v72)
            {
              if ((*(_WORD *)(v73 + 20) & 0x9000) != 0 || *(_DWORD *)(v73 + 32))
                sub_1ACBF2A04(*v72);
              sub_1ACBE0F9C(*(_QWORD **)(v73 + 24), (_QWORD *)v73);
            }
            ++v72;
            --v71;
          }
          while (v71);
        }
        bzero(v11, 16 * v18);
        v10 = v108;
        if (v108)
          goto LABEL_5;
        a2 = v102;
        if (!v102)
          goto LABEL_28;
        goto LABEL_195;
      }
      if (v22 != 9 && v22 != 18)
      {
LABEL_209:
        v19 = sub_1ACBEB08C(234347);
LABEL_210:
        v10 = v19;
        goto LABEL_5;
      }
      v103 = v11;
      LODWORD(v109) = 0;
      v24 = *(_BYTE *)(v20 + v21 + 1);
      *(_DWORD *)(a1 + 8) = v20 + 2;
      v25 = sub_1ACCABEA8(a1, v18, (int *)&v109);
      if (v22 == 9)
        v26 = 18;
      else
        v26 = 9;
      v27 = v107;
      v104 = v12;
      if ((_DWORD)v25)
      {
        v10 = v25;
        goto LABEL_41;
      }
      v48 = HIDWORD(v107);
      if ((int)v107 >= SHIDWORD(v107))
      {
        if (!HIDWORD(v107))
          v48 = 128;
        v56 = v48;
        do
        {
          v57 = v56;
          v56 *= 2;
        }
        while (v56 <= (int)v107);
        if (v57 > 1073741695 && (v56 = 2147483391, (int)v107 > 2147483390)
          || (v58 = v106, sqlite3_initialize())
          || (v49 = sub_1ACB6BB48(v58, v56)) == 0)
        {
          v10 = 7;
          v108 = 7;
          goto LABEL_41;
        }
        v106 = v49;
        HIDWORD(v107) = v56;
      }
      else
      {
        v49 = v106;
      }
      v50 = v27 + 1;
      LODWORD(v107) = v27 + 1;
      *(_BYTE *)(v49 + v27) = v26;
      v51 = HIDWORD(v107);
      if (v27 + 1 < SHIDWORD(v107))
      {
        v52 = v106;
LABEL_71:
        v10 = 0;
        v27 += 2;
        LODWORD(v107) = v27;
        *(_BYTE *)(v52 + v50) = v24;
        goto LABEL_41;
      }
      if (!HIDWORD(v107))
        v51 = 128;
      v74 = v51;
      do
      {
        v75 = v74;
        v74 *= 2;
      }
      while (v74 <= v50);
      if (v75 <= 1073741695 || (v74 = 2147483391, v27 <= 2147483389))
      {
        v76 = v106;
        if (!sqlite3_initialize())
        {
          v52 = sub_1ACB6BB48(v76, v74);
          if (v52)
          {
            v106 = v52;
            HIDWORD(v107) = v74;
            goto LABEL_71;
          }
        }
        v10 = 7;
        v108 = 7;
        ++v27;
      }
      else
      {
        v10 = 7;
        ++v27;
      }
LABEL_41:
      v28 = *(int *)(a1 + 8);
      v29 = v109;
      if ((int)v109 >= 1)
      {
        if ((_DWORD)v10)
          goto LABEL_208;
        v30 = *(_QWORD *)(a1 + 16);
        v31 = v27 + (unint64_t)v109;
        if (v31 <= SHIDWORD(v107))
        {
          v35 = v106;
        }
        else
        {
          if (HIDWORD(v107))
            v32 = SHIDWORD(v107);
          else
            v32 = 128;
          do
          {
            v33 = v32;
            v32 *= 2;
          }
          while (v32 < v31);
          if (v33 > 1073741695)
          {
            v32 = 2147483391;
            if (v31 > 2147483391)
              goto LABEL_207;
          }
          v34 = v106;
          if (sqlite3_initialize() || (v35 = sub_1ACB6BB48(v34, v32)) == 0)
          {
            LODWORD(v28) = *(_DWORD *)(a1 + 8);
LABEL_207:
            v10 = 7;
LABEL_208:
            *(_DWORD *)(a1 + 8) = v28 + v29;
            v11 = v103;
            v12 = v104;
            goto LABEL_5;
          }
          v106 = v35;
          HIDWORD(v107) = v32;
        }
        memcpy((void *)(v35 + v27), (const void *)(v30 + v28), v29);
        LODWORD(v107) = v27 + v29;
        LODWORD(v28) = *(_DWORD *)(a1 + 8);
        a2 = v102;
      }
      *(_DWORD *)(a1 + 8) = v28 + v29;
      v11 = v103;
      v12 = v104;
      if ((_DWORD)v10)
        goto LABEL_5;
      if (a2)
        goto LABEL_195;
LABEL_28:
      v19 = sub_1ACCABCE0(a1, 2);
      v108 = v19;
      if ((_DWORD)v19)
        goto LABEL_210;
    }
  }
  v10 = v9;
  v11 = 0;
  v12 = 0;
LABEL_5:
  v13 = v106;
  if (v106)
  {
LABEL_6:
    v14 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v13);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v13);
      v13 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_12;
      v14 = &xmmword_1ECD3B1D0;
    }
    (*v14)(v13);
  }
LABEL_12:
  if (v11)
  {
    v15 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v15)(v11);
      goto LABEL_19;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v11);
    v11 = (sqlite3_value **)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v15 = (void (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
LABEL_19:
  if (v12)
  {
    v16 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_25:
      (*v16)(v12);
      return v10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v12);
    v12 = (unsigned __int8 *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v16 = (void (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_25;
    }
  }
  return v10;
}

uint64_t sqlite3changeset_invert_strm(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0u;
  memset(v8, 0, sizeof(v8));
  v10 = a1;
  v11 = a2;
  v12 = 0;
  v4 = sub_1ACBDA7FC((uint64_t)v8, a3, a4, 0, 0);
  v5 = v9;
  if ((_QWORD)v9)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v6)(v5);
      return v4;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t sqlite3changeset_apply_v2(sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, _QWORD *a7, _DWORD *a8, unsigned int a9)
{
  uint64_t v18;

  if (sqlite3_initialize())
    return 7;
  v18 = sub_1ACB5D828(152);
  if (!v18)
    return 7;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_QWORD *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)(v18 + 16) = a3;
  *(_DWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  *(_DWORD *)(v18 + 64) = 1;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;
  return sub_1ACBDB54C(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1ACBDB54C(sqlite3 *a1, uint64_t a2, unsigned int (*a3)(uint64_t, char *), uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, _QWORD *a6, _DWORD *a7, unsigned int a8)
{
  char v8;
  BOOL v11;
  char v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t);
  const void *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  const char *i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)(uint64_t);
  uint64_t v44;
  uint64_t (**v45)(uint64_t);
  uint64_t v46;
  uint64_t (**v47)(uint64_t);
  int v48;
  const char *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  char v61;
  _OWORD v65[7];
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unsigned __int8 *v77;

  v8 = a8;
  v77 = 0;
  *(_DWORD *)a2 = 1;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  if (a6)
    v11 = a7 == 0;
  else
    v11 = 1;
  v12 = !v11;
  BYTE9(v76) = v12;
  LODWORD(v74) = (a8 >> 1) & 1;
  BYTE10(v76) = (a8 & 4) != 0;
  if (!a1)
  {
    v14 = "NULL";
    goto LABEL_18;
  }
  v13 = *((unsigned __int8 *)a1 + 113);
  if (v13 == 186)
  {
LABEL_11:
    v14 = "unopened";
    goto LABEL_18;
  }
  if (v13 != 118)
  {
    if (v13 == 109)
      goto LABEL_11;
    v14 = "invalid";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1ACBBE20C(186006);
    v61 = v8;
    if ((v8 & 1) == 0)
      goto LABEL_19;
    goto LABEL_20;
  }
  v15 = *((_QWORD *)a1 + 3);
  if (v15)
    xmmword_1ECD3B1C0(v15);
  v61 = v8;
  if ((v8 & 1) == 0)
  {
LABEL_19:
    v16 = sqlite3_exec(a1, "SAVEPOINT changeset_apply", 0, 0, 0);
    if ((_DWORD)v16)
      goto LABEL_21;
  }
LABEL_20:
  v16 = sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 1", 0, 0, 0);
  if ((_DWORD)v16)
    goto LABEL_21;
  v19 = 0;
  v20 = 0;
  while (1)
  {
    while (1)
    {
      if (sub_1ACBD9C4C(a2, 0, 0, 0) != 100)
      {
        v17 = *(_DWORD *)(a2 + 88);
        v52 = sqlite3changeset_finalize(a2);
        if ((_DWORD)v52)
        {
          v16 = v52;
          goto LABEL_22;
        }
        v53 = sub_1ACCAC5A8(a1, v17, (uint64_t)v77, (uint64_t)&v69, a4, a5);
        v18 = v61;
        if ((_DWORD)v53)
        {
          v16 = v53;
          goto LABEL_23;
        }
        if (a1)
        {
          v54 = *((unsigned __int8 *)a1 + 113);
          switch(v54)
          {
            case 186:
              goto LABEL_135;
            case 118:
              v56 = *((_QWORD *)a1 + 3);
              if (v56)
                xmmword_1ECD3B1C0(v56);
              v57 = *((uint64_t *)a1 + 101) > 0 || *((_QWORD *)a1 + 100) > 0;
              v58 = *((_QWORD *)a1 + 3);
              if (v58)
                xmmword_1ECD3B1D0(v58);
              if (v57)
              {
                v68 = 0;
                v66 = 0u;
                v67 = 0u;
                memset(v65, 0, sizeof(v65));
                DWORD2(v66) = v57;
                if (a4(a5, 5, (uint64_t)v65))
                  v16 = 19;
                else
                  v16 = 0;
              }
              else
              {
                v16 = 0;
              }
              goto LABEL_23;
            case 109:
LABEL_135:
              v55 = "unopened";
              break;
            default:
              v55 = "invalid";
              break;
          }
        }
        else
        {
          v55 = "NULL";
        }
        sqlite3_log(21, "API call with %s database connection pointer", v55);
        sub_1ACBBE20C(24491);
        v16 = 0;
        goto LABEL_23;
      }
      v21 = *(_DWORD *)(a2 + 120);
      v22 = *(char **)(a2 + 112);
      if (!v77)
        goto LABEL_45;
      if (v20 > -2)
        break;
      sub_1ACBBE20C(35843);
      if (!v19)
        goto LABEL_27;
LABEL_30:
      v19 = 1;
    }
    if (!v22)
      goto LABEL_45;
    if (v20 != -1)
      break;
    v20 = -1;
    if (v19)
      goto LABEL_30;
LABEL_27:
    v16 = sub_1ACCACFA4(a1, a2, (uint64_t)&v69, a4, a5);
    if ((_DWORD)v16)
      goto LABEL_21;
  }
  v23 = v20 + 2;
  v24 = v77;
  v25 = *(_BYTE **)(a2 + 112);
  while (1)
  {
    v26 = *v25;
    if (!*v25)
      break;
    LODWORD(v26) = byte_1ACCB6333[v26];
    v27 = byte_1ACCB6333[*v24];
    if ((_DWORD)v26 != v27)
      goto LABEL_44;
    ++v25;
    ++v24;
    if (--v23 <= 1)
      goto LABEL_73;
  }
  v27 = byte_1ACCB6333[*v24];
LABEL_44:
  if ((_DWORD)v26 == v27)
  {
LABEL_73:
    if (!v19)
      goto LABEL_27;
    goto LABEL_30;
  }
LABEL_45:
  v28 = sub_1ACCAC5A8(a1, *(_DWORD *)(a2 + 88), (uint64_t)v77, (uint64_t)&v69, a4, a5);
  if ((_DWORD)v28)
    goto LABEL_128;
  sub_1ACCAC848((uint64_t)&v69);
  v29 = *((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v30 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_52:
      (*v30)(v29);
      goto LABEL_53;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v29);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v29);
    v29 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v30 = &xmmword_1ECD3B1D0;
      goto LABEL_52;
    }
  }
LABEL_53:
  sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
  sqlite3_finalize((sqlite3_stmt *)v70);
  sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
  v69 = (unint64_t)a1;
  v70 = 0uLL;
  LODWORD(v71) = 0;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)&v73 + 1) = 0x100000000;
  BYTE8(v76) = 0;
  HIDWORD(v76) = 0;
  *((_QWORD *)&v74 + 1) = 0;
  *(_QWORD *)&v75 = 0;
  if (a3 && !a3(a5, v22))
  {
    v35 = (unsigned __int8 *)sqlite3_mprintf("%s", v22);
    v77 = v35;
    if (!v35)
    {
      v16 = 7;
      goto LABEL_21;
    }
    v36 = v35;
    v20 = strlen((const char *)v35);
    *((_QWORD *)&v71 + 1) = v36;
    goto LABEL_30;
  }
  v31 = *(const void **)(a2 + 136);
  v28 = sub_1ACBD7AF0(0, a1, "main", v22, &v71, &v77, (_QWORD *)&v71 + 1, &v72, (_BOOL4 *)&v76 + 3);
  if ((_DWORD)v28)
    goto LABEL_128;
  if ((int)v71 < 1)
  {
    v33 = 0;
    if (!(_DWORD)v71)
    {
      sqlite3_log(17, "sqlite3changeset_apply(): no such table: %s");
      goto LABEL_70;
    }
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if (*(unsigned __int8 *)(v72 + v32++))
        v33 = v32;
    }
    while (v71 != v32);
  }
  if ((int)v71 < v21)
  {
    sqlite3_log(17, "sqlite3changeset_apply(): table %s has %d columns, expected %d or more");
LABEL_70:
    v19 = 1;
    goto LABEL_71;
  }
  if (v21 < v33 || (v37 = v72, memcmp((const void *)v72, v31, v21)))
  {
    sqlite3_log(17, "sqlite3changeset_apply(): primary key mismatch for table %s");
    goto LABEL_70;
  }
  LODWORD(v71) = v21;
  if (!v77)
  {
LABEL_85:
    v28 = sub_1ACCAA588((uint64_t)a1, BYTE10(v76), (uint64_t)"main", v77, SHIDWORD(v76), v21, *((uint64_t *)&v71 + 1), v37, (_QWORD *)&v70 + 1);
    if ((_DWORD)v28)
      goto LABEL_128;
    v28 = sub_1ACCACA48((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if ((_DWORD)v28)
      goto LABEL_128;
    v28 = sub_1ACCACDA4((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if ((_DWORD)v28)
      goto LABEL_128;
    v19 = 0;
    DWORD2(v73) = 0;
LABEL_71:
    if (!v77)
    {
      v20 = 0;
      if (!v19)
        goto LABEL_27;
      goto LABEL_30;
    }
    v20 = strlen((const char *)v77) & 0x3FFFFFFF;
    goto LABEL_73;
  }
  v38 = v77;
  for (i = "sqlite_stat1"; ; ++i)
  {
    v40 = *v38;
    v41 = *(unsigned __int8 *)i;
    if ((_DWORD)v40 == (_DWORD)v41)
      break;
    if (byte_1ACCB6333[v40] != byte_1ACCB6333[v41])
      goto LABEL_85;
LABEL_80:
    ++v38;
  }
  if (*v38)
    goto LABEL_80;
  v28 = sub_1ACCAC998((uint64_t)a1, (uint64_t)&v69);
  if (!(_DWORD)v28)
  {
    v19 = 0;
    DWORD2(v73) = 1;
    goto LABEL_71;
  }
LABEL_128:
  v16 = v28;
LABEL_21:
  v17 = *(_DWORD *)(a2 + 88);
  sqlite3changeset_finalize(a2);
LABEL_22:
  v18 = v61;
LABEL_23:
  sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 0", 0, 0, 0);
  if ((v18 & 1) == 0)
  {
    if ((_DWORD)v16)
    {
      sqlite3_exec(a1, "ROLLBACK TO changeset_apply", 0, 0, 0);
      sqlite3_exec(a1, "RELEASE changeset_apply", 0, 0, 0);
      goto LABEL_94;
    }
    v16 = sqlite3_exec(a1, "RELEASE changeset_apply", 0, 0, 0);
  }
  if (!(_DWORD)v16 && !v17 && BYTE9(v76))
  {
    v16 = 0;
    *a6 = *((_QWORD *)&v75 + 1);
    *a7 = v76;
    *((_QWORD *)&v75 + 1) = 0;
  }
LABEL_94:
  sub_1ACCAC848((uint64_t)&v69);
  sqlite3_finalize((sqlite3_stmt *)v70);
  sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
  sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
  v42 = *((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v43 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_100;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v42);
    v42 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v43 = &xmmword_1ECD3B1D0;
LABEL_100:
      (*v43)(v42);
    }
  }
  v44 = *((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v45 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_107;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v44);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v44);
    v44 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v45 = &xmmword_1ECD3B1D0;
LABEL_107:
      (*v45)(v44);
    }
  }
  v46 = *((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v47 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_114;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v46);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v46);
    v46 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v47 = &xmmword_1ECD3B1D0;
LABEL_114:
      (*v47)(v46);
    }
  }
  if (!a1)
  {
    v49 = "NULL";
    goto LABEL_124;
  }
  v48 = *((unsigned __int8 *)a1 + 113);
  if (v48 == 186)
    goto LABEL_119;
  if (v48 == 118)
  {
    v50 = *((_QWORD *)a1 + 3);
    if (v50)
      xmmword_1ECD3B1D0(v50);
  }
  else
  {
    if (v48 == 109)
LABEL_119:
      v49 = "unopened";
    else
      v49 = "invalid";
LABEL_124:
    sqlite3_log(21, "API call with %s database connection pointer", v49);
    sub_1ACBBE20C(186006);
  }
  return v16;
}

uint64_t sqlite3changeset_apply(sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v13;

  if (sqlite3_initialize())
    return 7;
  v13 = sub_1ACB5D828(152);
  if (!v13)
    return 7;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_QWORD *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 64) = 1;
  *(_QWORD *)(v13 + 92) = 0x100000000;
  return sub_1ACBDB54C(a1, v13, a4, a5, a6, 0, 0, 0);
}

uint64_t sqlite3changeset_apply_v2_strm(sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, _QWORD *a7, _DWORD *a8, unsigned int a9)
{
  uint64_t v18;

  if (sqlite3_initialize())
    return 7;
  v18 = sub_1ACB5D828(152);
  if (!v18)
    return 7;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_QWORD *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 56) = a3;
  *(_QWORD *)(v18 + 16) = 0;
  *(_DWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 64) = a2 == 0;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;
  return sub_1ACBDB54C(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sqlite3changeset_apply_strm(sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v13;

  if (sqlite3_initialize())
    return 7;
  v13 = sub_1ACB5D828(152);
  if (!v13)
    return 7;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_QWORD *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = a3;
  *(_DWORD *)(v13 + 64) = a2 == 0;
  *(_QWORD *)(v13 + 92) = 0x100000000;
  return sub_1ACBDB54C(a1, v13, a4, a5, a6, 0, 0, 0);
}

uint64_t sqlite3changegroup_new(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (sqlite3_initialize())
  {
    v2 = 0;
  }
  else
  {
    v2 = (_QWORD *)sub_1ACB5D828(16);
    if (v2)
    {
      v3 = 0;
      *v2 = 0;
      v2[1] = 0;
      goto LABEL_6;
    }
  }
  v3 = 7;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3changegroup_add(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sqlite3_initialize())
  {
    v6 = 0;
  }
  else
  {
    v8 = sub_1ACB5D828(152);
    v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_QWORD *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_QWORD *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      v7 = sub_1ACBDC2A4(v8, a1, 0);
      goto LABEL_6;
    }
  }
  v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sub_1ACBDC2A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  unsigned __int8 *v10;
  _BYTE *i;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  int v17;
  int v18;
  int v19;
  _BYTE *v20;
  BOOL v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  char **v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  char **v33;
  char *v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char *v46;
  size_t v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  char *v52;
  BOOL v54;
  BOOL v55;
  void (**v56)(unsigned __int8 *);
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  _DWORD *v63;
  char *v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char *v83;
  _BYTE *v84;
  char v85;
  int v86;
  int v87;
  BOOL v88;
  size_t v89;
  void *v90;
  char *v91;
  int v92;
  int v93;
  _BYTE *v94;
  int v95;
  int v96;
  _BYTE *v97;
  char v98;
  uint64_t v99;
  void (**v100)(unsigned __int8 *);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t (**v122)(_QWORD);
  int v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  void (**v131)(unsigned __int8 *);
  uint64_t v132;
  void (**v133)(unsigned __int8 *);
  char *__src;
  _QWORD *__srca;
  int v137;
  char *v138;
  char *v139;
  uint64_t v140;
  int v142;
  int v143;
  uint64_t *v144;
  int v145;
  void *__s2;
  size_t v147;
  unint64_t v148;

  __s2 = 0;
  v145 = 0;
  if (sub_1ACBD9C4C(a1, &__s2, &v145, 0) != 100)
    return *(unsigned int *)(a1 + 100);
  v5 = 0;
  v144 = (uint64_t *)(a2 + 8);
  v140 = a2;
  while (1)
  {
    v6 = *(_DWORD *)(a1 + 88);
    if (!*v144)
    {
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_7;
    }
    if (v6 != *(_DWORD *)(a2 + 4))
      return 1;
LABEL_7:
    v8 = *(_DWORD *)(a1 + 120);
    v7 = *(_DWORD *)(a1 + 124);
    v9 = *(const char **)(a1 + 112);
    v143 = *(_DWORD *)(a1 + 128);
    if (v5)
    {
      v10 = *(unsigned __int8 **)(v5 + 8);
      if (v9)
      {
        if (v10)
        {
          for (i = *(_BYTE **)(a1 + 112); ; ++i)
          {
            v12 = *i;
            v13 = *v10;
            if ((_DWORD)v12 == (_DWORD)v13)
            {
              if (!*i)
                goto LABEL_40;
            }
            else if (byte_1ACCB6333[v12] != byte_1ACCB6333[v13])
            {
              break;
            }
            ++v10;
          }
        }
      }
      else if (!v10)
      {
        goto LABEL_40;
      }
    }
    v14 = strlen(v9);
    v15 = v14;
    v16 = *(const void **)(a1 + 136);
    if (v9)
      v17 = -1;
    else
      v17 = 0;
    v5 = (uint64_t)v144;
    while (1)
    {
      v5 = *(_QWORD *)v5;
      if (!v5)
      {
        if (!sqlite3_initialize())
        {
          v57 = v15 << 32;
          v58 = sub_1ACB5D828(v8 + (uint64_t)(int)v15 + 65);
          if (v58)
          {
            v5 = v58;
            *(_OWORD *)(v58 + 32) = 0u;
            *(_OWORD *)(v58 + 48) = 0u;
            *(_OWORD *)v58 = 0u;
            *(_OWORD *)(v58 + 16) = 0u;
            *(_DWORD *)(v58 + 16) = v8;
            v59 = v58 + 64;
            *(_QWORD *)(v58 + 40) = v58 + 64;
            memcpy((void *)(v58 + 64), v16, v8);
            *(_QWORD *)(v5 + 8) = v59 + v8;
            memcpy((void *)(v59 + v8), v9, (uint64_t)(v57 + 0x100000000) >> 32);
            v60 = v144;
            do
            {
              v61 = v60;
              v60 = (uint64_t *)*v60;
            }
            while (v60);
            *v61 = v5;
            a2 = v140;
            goto LABEL_40;
          }
        }
        return 7;
      }
      if ((int)v14 <= -2)
        break;
      v20 = *(_BYTE **)(v5 + 8);
      if (v20)
        v19 = 1;
      else
        v19 = v17;
      if (v20)
        v21 = v9 == 0;
      else
        v21 = 1;
      if (!v21)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_38;
        v22 = v14 + 2;
        v23 = *(unsigned __int8 **)(a1 + 112);
        while (1)
        {
          v24 = *v20;
          if (!*v20)
            break;
          LODWORD(v24) = byte_1ACCB6333[v24];
          v18 = byte_1ACCB6333[*v23];
          if ((_DWORD)v24 != v18)
            goto LABEL_22;
          ++v20;
          ++v23;
          if (--v22 <= 1)
            goto LABEL_38;
        }
        v18 = byte_1ACCB6333[*v23];
LABEL_22:
        v19 = v24 - v18;
      }
      if (!v19)
        goto LABEL_38;
    }
    sub_1ACBBE20C(35843);
LABEL_38:
    if (*(_DWORD *)(v5 + 16) != v8 || memcmp(*(const void **)(v5 + 40), v16, v8))
      return 17;
LABEL_40:
    if (sub_1ACCA9730(0, *(_DWORD *)(a1 + 88), v5))
      return 7;
    if (*(_DWORD *)(a1 + 88))
      v25 = v7 == 9;
    else
      v25 = 0;
    v26 = v25;
    v27 = sub_1ACCAA1E0(v5, v26, (unsigned __int8 *)__s2, *(_DWORD *)(v5 + 52));
    v28 = *(_QWORD *)(v5 + 56) + 8 * v27;
    v29 = *(char ***)v28;
    v142 = v27;
    if (!*(_QWORD *)v28)
    {
LABEL_53:
      v34 = (char *)__s2;
      v35 = v145;
      if (sqlite3_initialize())
        return 7;
      v36 = sub_1ACB5D828(v35 + 32);
      if (!v36)
        return 7;
      v33 = (char **)v36;
      *(_OWORD *)v36 = 0u;
      *(_OWORD *)(v36 + 16) = 0u;
      *(_BYTE *)v36 = v7;
      *(_BYTE *)(v36 + 1) = v143;
      v37 = (_BYTE *)(v36 + 32);
      *(_QWORD *)(v36 + 16) = v36 + 32;
      if (a3 && v143)
      {
        if (*(int *)(v5 + 16) < 1)
        {
          LODWORD(v52) = v36 + 32;
        }
        else
        {
          v38 = 0;
          do
          {
            v40 = *v34;
            if (*v34)
            {
              v39 = 1;
              if (v40 != 5 && v40 != 255)
              {
                if ((v40 - 1) < 2)
                {
                  v39 = 9;
                }
                else
                {
                  v41 = v34[1];
                  if ((v41 & 0x80) != 0)
                  {
                    v43 = v34[2];
                    if (v34[2] < 0)
                    {
                      v44 = v34[3];
                      if (v44 < 0)
                      {
                        v148 = 0;
                        v45 = sub_1ACB8A6CC(v34 + 1, &v148);
                        if (HIDWORD(v148))
                          v41 = -1;
                        else
                          v41 = v148;
                        v42 = (v45 + 1);
                      }
                      else
                      {
                        v41 = v44 & 0x7F | (v41 << 14) & 0x1FC07F | ((v43 & 0x7F) << 7);
                        v42 = 4;
                      }
                    }
                    else
                    {
                      v41 = ((v41 & 0x7F) << 7) | v43;
                      v42 = 3;
                    }
                  }
                  else
                  {
                    v42 = 2;
                  }
                  v39 = v42 + v41;
                }
              }
              if (*(_BYTE *)(*(_QWORD *)(v5 + 40) + v38))
              {
                memcpy(v37, v34, v39);
                v37 += v39;
              }
              else
              {
                *v37++ = -1;
              }
            }
            else
            {
              *v37++ = 0;
              v39 = 1;
            }
            v34 += v39;
            ++v38;
          }
          while (v38 < *(int *)(v5 + 16));
          v52 = v33[2];
        }
        *((_DWORD *)v33 + 2) = (_DWORD)v37 - (_DWORD)v52;
      }
      else
      {
        *(_DWORD *)(v36 + 8) = v35;
        memcpy((void *)(v36 + 32), v34, v35);
      }
      goto LABEL_189;
    }
    while (1)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        v30 = *(unsigned __int8 *)v29 == 9;
        v31 = v7 == 9;
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      v32 = sub_1ACCAE62C(v5, v30, v29[2], v31, (char *)__s2);
      v33 = *(char ***)v28;
      v29 = *(char ***)(*(_QWORD *)v28 + 24);
      if (v32)
        break;
      v28 = *(_QWORD *)v28 + 24;
      if (!v29)
        goto LABEL_53;
    }
    *(_QWORD *)v28 = v29;
    --*(_DWORD *)(v5 + 48);
    v46 = (char *)__s2;
    v47 = v145;
    v48 = *(unsigned __int8 *)v33;
    if (a3)
    {
      if (v48 != 9 || !*((_BYTE *)v33 + 1))
      {
        v49 = *((int *)v33 + 2);
        if (sqlite3_initialize())
        {
          v50 = 0;
          v51 = 0;
          v132 = 7;
          goto LABEL_181;
        }
        v62 = v49 + v47 + 32;
        v63 = (_DWORD *)sub_1ACB5D828(v62);
        v50 = v63;
        if (v63)
        {
          v64 = v33[2];
          bzero(v63, v62);
          v65 = v143;
          if (v143)
            v66 = 1;
          else
            v66 = *((_BYTE *)v33 + 1) != 0;
          a2 = v140;
          v73 = v46;
          *((_BYTE *)v50 + 1) = v66;
          *(_BYTE *)v50 = v7;
          v74 = v50 + 8;
          *((_QWORD *)v50 + 2) = v50 + 8;
          if (*(int *)(v5 + 16) >= 1)
          {
            __srca = v50;
            v75 = 0;
            while (1)
            {
              v76 = *v64;
              v77 = 1;
              if (*v64)
                v78 = v76 == 5;
              else
                v78 = 1;
              if (!v78 && v76 != 255)
              {
                if ((v76 - 1) >= 2)
                {
                  v79 = v64[1];
                  if ((v79 & 0x80) != 0)
                  {
                    v81 = v64[2];
                    if (v64[2] < 0)
                    {
                      v82 = v64[3];
                      if (v82 < 0)
                      {
                        v148 = 0;
                        v83 = v73;
                        v84 = v74;
                        v85 = sub_1ACB8A6CC(v64 + 1, &v148);
                        v74 = v84;
                        v73 = v83;
                        v65 = v143;
                        if (HIDWORD(v148))
                          v79 = -1;
                        else
                          v79 = v148;
                        v80 = (v85 + 1);
                      }
                      else
                      {
                        v79 = v82 & 0x7F | (v79 << 14) & 0x1FC07F | ((v81 & 0x7F) << 7);
                        v80 = 4;
                      }
                    }
                    else
                    {
                      v79 = ((v79 & 0x7F) << 7) | v81;
                      v80 = 3;
                    }
                  }
                  else
                  {
                    v80 = 2;
                  }
                  v77 = v80 + v79;
                }
                else
                {
                  v77 = 9;
                }
              }
              v86 = *v73;
              v87 = 1;
              if (*v73)
                v88 = v86 == 5;
              else
                v88 = 1;
              if (v88 || v86 == 255)
                goto LABEL_159;
              if ((v86 - 1) < 2)
                break;
              v92 = v73[1];
              if ((v92 & 0x80) != 0)
              {
                v95 = v73[2];
                if (v73[2] < 0)
                {
                  v96 = v73[3];
                  if (v96 < 0)
                  {
                    v148 = 0;
                    v139 = v73;
                    v97 = v74;
                    v98 = sub_1ACB8A6CC(v73 + 1, &v148);
                    v74 = v97;
                    v73 = v139;
                    v65 = v143;
                    if (HIDWORD(v148))
                      v92 = -1;
                    else
                      v92 = v148;
                    v93 = (v98 + 1);
                  }
                  else
                  {
                    v92 = v96 & 0x7F | (v92 << 14) & 0x1FC07F | ((v95 & 0x7F) << 7);
                    v93 = 4;
                  }
                }
                else
                {
                  v92 = ((v92 & 0x7F) << 7) | v95;
                  v93 = 3;
                }
              }
              else
              {
                v93 = 2;
              }
              v87 = v93 + v92;
              if (v76 == 255)
                goto LABEL_132;
LABEL_160:
              if (!v65 || *(_BYTE *)(*(_QWORD *)(v5 + 40) + v75))
              {
                v138 = v73;
                if (v86)
                {
                  v89 = v87;
                  v90 = v74;
                  v91 = v73;
                }
                else
                {
                  v89 = v77;
                  v90 = v74;
                  v91 = v64;
                }
                v94 = v74;
                memcpy(v90, v91, v89);
                v73 = v138;
                v74 = &v94[v89];
                v65 = v143;
                goto LABEL_133;
              }
LABEL_132:
              *v74++ = -1;
LABEL_133:
              v64 += v77;
              v73 += v87;
              ++v75;
              a2 = v140;
              if (v75 >= *(int *)(v5 + 16))
              {
                v50 = __srca;
                v99 = __srca[2];
                goto LABEL_180;
              }
            }
            v87 = 9;
LABEL_159:
            if (v76 == 255)
              goto LABEL_132;
            goto LABEL_160;
          }
          LODWORD(v99) = (_DWORD)v50 + 32;
LABEL_180:
          v132 = 0;
          v50[2] = (_DWORD)v74 - v99;
          v51 = 1;
        }
        else
        {
          v51 = 0;
          v132 = 7;
          a2 = v140;
        }
LABEL_181:
        v100 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v33);
          v33 = (char **)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v100 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
            goto LABEL_186;
          }
        }
        else
        {
LABEL_186:
          (*v100)((unsigned __int8 *)v33);
        }
        if (!v51)
          return v132;
LABEL_188:
        v33 = (char **)v50;
        if (v50)
        {
LABEL_189:
          v101 = *(_QWORD *)(v5 + 56);
          v102 = 8 * v142;
          v33[3] = *(char **)(v101 + v102);
          *(_QWORD *)(v101 + v102) = v33;
          ++*(_DWORD *)(v5 + 48);
        }
      }
      goto LABEL_190;
    }
    v54 = v48 == 18 || v48 == 23;
    if (v7 == 18 && v54)
      goto LABEL_189;
    v55 = v7 == 9 || v7 == 23;
    if (v55 && v48 == 9)
      goto LABEL_189;
    if (v7 != 9 || v48 != 18)
    {
      v137 = *(_DWORD *)(a1 + 88);
      __src = v33[2];
      v67 = *((int *)v33 + 2);
      if (!sqlite3_initialize())
      {
        v68 = sub_1ACB5D828(v47 + v67 + 32);
        if (v68)
        {
          v50 = (_DWORD *)v68;
          *(_OWORD *)v68 = 0u;
          *(_OWORD *)(v68 + 16) = 0u;
          v69 = v143;
          v70 = v137;
          if (v143)
            v69 = *((_BYTE *)v33 + 1) != 0;
          v71 = v46;
          *(_BYTE *)(v68 + 1) = v69;
          v72 = v68 + 32;
          *(_QWORD *)(v68 + 16) = v68 + 32;
          v147 = v68 + 32;
          if (v48 == 18)
          {
            *(_BYTE *)v68 = 18;
            if (v137)
            {
              a2 = v140;
            }
            else
            {
              v123 = *(_DWORD *)(v5 + 16);
              a2 = v140;
              if (v123 >= 1)
              {
                do
                {
                  while (1)
                  {
                    v125 = (unsigned __int8 *)(v71 + 1);
                    v124 = *v71;
                    if ((v124 - 3) <= 1)
                      break;
                    if ((v124 - 1) >= 2)
                      ++v71;
                    else
                      v71 += 9;
                    if (!--v123)
                      goto LABEL_128;
                  }
                  v126 = *v125;
                  if ((v126 & 0x80) != 0)
                  {
                    v128 = v71[2];
                    if (v71[2] < 0)
                    {
                      v129 = v71[3];
                      if (v129 < 0)
                      {
                        v148 = 0;
                        v130 = sub_1ACB8A6CC(v71 + 1, &v148);
                        if (HIDWORD(v148))
                          v126 = -1;
                        else
                          v126 = v148;
                        v127 = v130;
                      }
                      else
                      {
                        v126 = v129 & 0x7F | (v126 << 14) & 0x1FC07F | ((v128 & 0x7F) << 7);
                        v127 = 3;
                      }
                    }
                    else
                    {
                      v126 = ((v126 & 0x7F) << 7) | v128;
                      v127 = 2;
                    }
                  }
                  else
                  {
                    v127 = 1;
                  }
                  v71 = (char *)&v125[v127 + v126];
                  --v123;
                }
                while (v123);
              }
            }
LABEL_128:
            sub_1ACCAE9A0((void **)&v147, *(_DWORD *)(v5 + 16), __src, v71);
            goto LABEL_264;
          }
          if (v48 == 9)
          {
            *(_BYTE *)v68 = 23;
            if (!v137)
            {
              a2 = v140;
              if (sub_1ACCAEBAC((_BYTE **)&v147, v5, 0, __src, 0, v46, 0))
                goto LABEL_264;
LABEL_236:
              v122 = &off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v50);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v50);
                v50 = (_DWORD *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v122 = &xmmword_1ECD3B1D0;
                  goto LABEL_241;
                }
              }
              else
              {
LABEL_241:
                (*v122)(v50);
                v50 = 0;
              }
LABEL_265:
              v131 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v33);
                v33 = (char **)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_188;
                v131 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
              }
              (*v131)((unsigned __int8 *)v33);
              goto LABEL_188;
            }
            goto LABEL_262;
          }
          if (v7 == 23)
          {
            v103 = v46;
            v104 = __src;
            v105 = __src;
            a2 = v140;
            if (!v137)
            {
              v106 = *(_DWORD *)(v5 + 16);
              v103 = v46;
              v105 = __src;
              if (v106 >= 1)
              {
                v105 = __src;
                do
                {
                  while (1)
                  {
                    v108 = (unsigned __int8 *)(v105 + 1);
                    v107 = *v105;
                    if ((v107 - 3) <= 1)
                      break;
                    if ((v107 - 1) >= 2)
                      ++v105;
                    else
                      v105 += 9;
                    if (!--v106)
                      goto LABEL_216;
                  }
                  v109 = *v108;
                  if ((v109 & 0x80) != 0)
                  {
                    v111 = v105[2];
                    if (v105[2] < 0)
                    {
                      v112 = v105[3];
                      if (v112 < 0)
                      {
                        v148 = 0;
                        v113 = sub_1ACB8A6CC(v105 + 1, &v148);
                        v71 = v46;
                        if (HIDWORD(v148))
                          v109 = -1;
                        else
                          v109 = v148;
                        v110 = v113;
                      }
                      else
                      {
                        v109 = v112 & 0x7F | (v109 << 14) & 0x1FC07F | ((v111 & 0x7F) << 7);
                        v110 = 3;
                      }
                    }
                    else
                    {
                      v109 = ((v109 & 0x7F) << 7) | v111;
                      v110 = 2;
                    }
                  }
                  else
                  {
                    v110 = 1;
                  }
                  v105 = (char *)&v108[v110 + v109];
                  --v106;
                }
                while (v106);
LABEL_216:
                v114 = *(_DWORD *)(v5 + 16);
                v103 = v71;
                if (v114 >= 1)
                {
                  do
                  {
                    while (1)
                    {
                      v116 = (unsigned __int8 *)(v103 + 1);
                      v115 = *v103;
                      if ((v115 - 3) <= 1)
                        break;
                      if ((v115 - 1) >= 2)
                        ++v103;
                      else
                        v103 += 9;
                      if (!--v114)
                        goto LABEL_234;
                    }
                    v117 = *v116;
                    if ((v117 & 0x80) != 0)
                    {
                      v119 = v103[2];
                      if (v103[2] < 0)
                      {
                        v120 = v103[3];
                        if (v120 < 0)
                        {
                          v148 = 0;
                          v121 = sub_1ACB8A6CC(v103 + 1, &v148);
                          v71 = v46;
                          if (HIDWORD(v148))
                            v117 = -1;
                          else
                            v117 = v148;
                          v118 = v121;
                        }
                        else
                        {
                          v117 = v120 & 0x7F | (v117 << 14) & 0x1FC07F | ((v119 & 0x7F) << 7);
                          v118 = 3;
                        }
                      }
                      else
                      {
                        v117 = ((v117 & 0x7F) << 7) | v119;
                        v118 = 2;
                      }
                    }
                    else
                    {
                      v118 = 1;
                    }
                    v103 = (char *)&v116[v118 + v117];
                    --v114;
                  }
                  while (v114);
                }
LABEL_234:
                v104 = __src;
                v70 = v137;
              }
            }
            *(_BYTE *)v50 = 23;
            if (!sub_1ACCAEBAC((_BYTE **)&v147, v5, v70, v71, v104, v105, v103))
              goto LABEL_236;
LABEL_264:
            v50[2] = v147 - v50[4];
            goto LABEL_265;
          }
          *(_BYTE *)v68 = 9;
          if (v137)
          {
LABEL_262:
            memcpy((void *)(v68 + 32), v46, v47);
            v147 = v72 + v47;
          }
          else
          {
            sub_1ACCAE9A0((void **)&v147, *(_DWORD *)(v5 + 16), v46, __src);
          }
          a2 = v140;
          goto LABEL_264;
        }
      }
      v133 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v33);
        v33 = (char **)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v133 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
          goto LABEL_279;
        }
      }
      else
      {
LABEL_279:
        (*v133)((unsigned __int8 *)v33);
      }
      return 7;
    }
    v56 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v33);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v33);
      v33 = (char **)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_190;
      v56 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v56)((unsigned __int8 *)v33);
LABEL_190:
    if (sub_1ACBD9C4C(a1, &__s2, &v145, 0) != 100)
      return *(unsigned int *)(a1 + 100);
  }
}

uint64_t sqlite3changegroup_output(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  _DWORD *v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v36 = 0;
  v34 = 0;
  v35 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    if (a3)
    {
      v28 = 0;
      goto LABEL_55;
    }
    return 0;
  }
  v31 = a2;
  v32 = a3;
  do
  {
    if (*(_DWORD *)(v3 + 48))
    {
      sub_1ACCAA45C((uint64_t)&v34, *(_DWORD *)(a1 + 4), v3, &v36);
      v4 = *(_DWORD *)(v3 + 52);
      v5 = v36;
      if (v4 >= 1)
      {
        v6 = 0;
        v7 = v34;
        while (1)
        {
          v8 = *(char **)(*(_QWORD *)(v3 + 56) + 8 * v6);
          if (v8)
            break;
LABEL_7:
          v36 = v5;
          v34 = v7;
          if (++v6 >= v4)
            goto LABEL_48;
        }
        while (1)
        {
          if ((_DWORD)v5)
            goto LABEL_12;
          v9 = *v8;
          v10 = HIDWORD(v35);
          v11 = (int)v35;
          if ((int)v35 >= SHIDWORD(v35))
          {
            if (!HIDWORD(v35))
              v10 = 128;
            v22 = v10;
            do
            {
              v23 = v22;
              v22 *= 2;
            }
            while (v22 <= (int)v35);
            if (v23 > 1073741695)
            {
              v22 = 2147483391;
              if ((int)v35 > 2147483390)
                goto LABEL_11;
            }
            if (sqlite3_initialize())
              goto LABEL_11;
            v27 = sub_1ACB6BB48(v7, v22);
            if (!v27)
              goto LABEL_11;
            HIDWORD(v35) = v22;
            v7 = v27;
          }
          v12 = v11 + 1;
          LODWORD(v35) = v11 + 1;
          *(_BYTE *)(v7 + v11) = v9;
          v13 = v8[1];
          v14 = HIDWORD(v35);
          if ((int)v11 + 1 < SHIDWORD(v35))
            goto LABEL_16;
          if (!HIDWORD(v35))
            v14 = 128;
          v24 = v14;
          do
          {
            v25 = v24;
            v24 *= 2;
          }
          while (v24 <= v12);
          if (v25 <= 1073741695 || (v24 = 2147483391, (int)v11 <= 2147483389))
          {
            if (!sqlite3_initialize())
            {
              v26 = sub_1ACB6BB48(v7, v24);
              if (v26)
              {
                HIDWORD(v35) = v24;
                v7 = v26;
LABEL_16:
                LODWORD(v35) = v11 + 2;
                *(_BYTE *)(v7 + v12) = v13;
                v15 = *((unsigned int *)v8 + 2);
                if ((int)v15 < 1)
                {
                  v5 = 0;
                  goto LABEL_12;
                }
                v16 = (int)v35;
                v17 = (int)v35 + v15;
                v18 = (const void *)*((_QWORD *)v8 + 2);
                if (v17 <= SHIDWORD(v35))
                  goto LABEL_27;
                if (HIDWORD(v35))
                  v19 = SHIDWORD(v35);
                else
                  v19 = 128;
                do
                {
                  v20 = v19;
                  v19 *= 2;
                }
                while (v19 < v17);
                if (v20 <= 1073741695 || (v19 = 2147483391, v17 <= 2147483391))
                {
                  if (!sqlite3_initialize())
                  {
                    v21 = sub_1ACB6BB48(v7, v19);
                    if (v21)
                    {
                      HIDWORD(v35) = v19;
                      v7 = v21;
LABEL_27:
                      memcpy((void *)(v7 + v16), v18, v15);
                      v5 = 0;
                      LODWORD(v35) = v16 + v15;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
          }
LABEL_11:
          v5 = 7;
LABEL_12:
          v8 = (char *)*((_QWORD *)v8 + 3);
          if (!v8)
          {
            v4 = *(_DWORD *)(v3 + 52);
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      v5 = 0;
    }
LABEL_48:
    if ((_DWORD)v5)
      break;
    v3 = *(_QWORD *)v3;
  }
  while (v3);
  v28 = v34;
  a3 = v32;
  if (!v32 || (_DWORD)v5)
  {
    if (!v34)
      return v5;
    v29 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v28);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v28);
      v28 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return v5;
      v29 = &xmmword_1ECD3B1D0;
    }
    (*v29)(v28);
    return v5;
  }
  a2 = v31;
LABEL_55:
  *a3 = v28;
  v5 = 0;
  if (a2)
    *a2 = v35;
  return v5;
}

uint64_t sqlite3changegroup_add_strm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sqlite3_initialize())
  {
    v6 = 0;
  }
  else
  {
    v8 = sub_1ACB5D828(152);
    v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_QWORD *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 48) = a2;
      *(_QWORD *)(v8 + 56) = a3;
      *(_DWORD *)(v8 + 64) = a2 == 0;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      v7 = sub_1ACBDC2A4(v8, a1, 0);
      goto LABEL_6;
    }
  }
  v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3changegroup_output_strm(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  v35 = 0;
  v36 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      if (*(_DWORD *)(v3 + 48))
      {
        sub_1ACCAA45C((uint64_t)&v35, *(_DWORD *)(a1 + 4), v3, &v37);
        v5 = *(_DWORD *)(v3 + 52);
        v4 = v37;
        if (v5 >= 1)
        {
          v6 = 0;
          v7 = v35;
          while (1)
          {
            v9 = *(char **)(*(_QWORD *)(v3 + 56) + 8 * v6);
            if (v9)
              break;
LABEL_7:
            v37 = v4;
            v35 = v7;
            ++v6;
            v8 = v4;
            if (v6 >= v5)
              goto LABEL_51;
          }
          while (2)
          {
            if ((_DWORD)v4)
              goto LABEL_12;
            v10 = *v9;
            v11 = HIDWORD(v36);
            v12 = (int)v36;
            if ((int)v36 < SHIDWORD(v36))
              goto LABEL_15;
            if (!HIDWORD(v36))
              v11 = 128;
            v23 = v11;
            do
            {
              v24 = v23;
              v23 *= 2;
            }
            while (v23 <= (int)v36);
            if (v24 <= 1073741695 || (v23 = 2147483391, (int)v36 <= 2147483390))
            {
              if (!sqlite3_initialize())
              {
                v28 = sub_1ACB6BB48(v7, v23);
                if (v28)
                {
                  HIDWORD(v36) = v23;
                  v7 = v28;
LABEL_15:
                  v13 = v12 + 1;
                  LODWORD(v36) = v12 + 1;
                  *(_BYTE *)(v7 + v12) = v10;
                  v14 = v9[1];
                  v15 = HIDWORD(v36);
                  if ((int)v12 + 1 >= SHIDWORD(v36))
                  {
                    if (!HIDWORD(v36))
                      v15 = 128;
                    v25 = v15;
                    do
                    {
                      v26 = v25;
                      v25 *= 2;
                    }
                    while (v25 <= v13);
                    if (v26 <= 1073741695 || (v25 = 2147483391, (int)v12 <= 2147483389))
                    {
                      if (!sqlite3_initialize())
                      {
                        v27 = sub_1ACB6BB48(v7, v25);
                        if (v27)
                        {
                          HIDWORD(v36) = v25;
                          v7 = v27;
                          goto LABEL_16;
                        }
                      }
                    }
                  }
                  else
                  {
LABEL_16:
                    LODWORD(v36) = v12 + 2;
                    *(_BYTE *)(v7 + v13) = v14;
                    v16 = *((unsigned int *)v9 + 2);
                    if ((int)v16 < 1)
                      goto LABEL_28;
                    v17 = (int)v36;
                    v18 = (int)v36 + v16;
                    v19 = (const void *)*((_QWORD *)v9 + 2);
                    if (v18 <= SHIDWORD(v36))
                      goto LABEL_27;
                    if (HIDWORD(v36))
                      v20 = SHIDWORD(v36);
                    else
                      v20 = 128;
                    do
                    {
                      v21 = v20;
                      v20 *= 2;
                    }
                    while (v20 < v18);
                    if (v21 <= 1073741695 || (v20 = 2147483391, v18 <= 2147483391))
                    {
                      if (!sqlite3_initialize())
                      {
                        v22 = sub_1ACB6BB48(v7, v20);
                        if (v22)
                        {
                          HIDWORD(v36) = v20;
                          v7 = v22;
LABEL_27:
                          memcpy((void *)(v7 + v17), v19, v16);
                          LODWORD(v36) = v17 + v16;
LABEL_28:
                          if (a2 && (int)v36 >= dword_1EECAC718)
                          {
                            v4 = a2(a3, v7);
                            LODWORD(v36) = 0;
                          }
                          else
                          {
                            v4 = 0;
                          }
LABEL_12:
                          v9 = (char *)*((_QWORD *)v9 + 3);
                          if (!v9)
                          {
                            v5 = *(_DWORD *)(v3 + 52);
                            goto LABEL_7;
                          }
                          continue;
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
          }
          v4 = 7;
          goto LABEL_12;
        }
        v8 = v37;
        if (v37)
          goto LABEL_55;
      }
      else
      {
        v8 = 0;
LABEL_51:
        if (v8)
        {
LABEL_55:
          if (!v8 && a2)
            goto LABEL_57;
LABEL_60:
          v29 = v35;
          goto LABEL_61;
        }
      }
      v3 = *(_QWORD *)v3;
      if (!v3)
        goto LABEL_55;
    }
  }
  v4 = 0;
  if (!a2)
    goto LABEL_60;
LABEL_57:
  v29 = v35;
  if ((int)v36 >= 1)
    v4 = a2(a3, v35);
LABEL_61:
  if (v29)
  {
    v30 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_67:
      (*v30)(v29);
      return v4;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v29);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v29);
    v29 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v30 = &xmmword_1ECD3B1D0;
      goto LABEL_67;
    }
  }
  return v4;
}

uint64_t sqlite3changegroup_delete(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    sub_1ACBD87F0(0, *(uint64_t **)(result + 8));
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sqlite3changeset_concat(int a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  void (**v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (sqlite3_initialize())
    return 7;
  v14 = (_QWORD *)sub_1ACB5D828(16);
  if (!v14)
    return 7;
  v15 = (uint64_t)v14;
  *v14 = 0;
  v14[1] = 0;
  if (!sqlite3_initialize())
  {
    v17 = sub_1ACB5D828(152);
    if (v17)
    {
      v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_QWORD *)(v17 + 144) = 0;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_QWORD *)(v17 + 16) = a2;
      *(_DWORD *)(v17 + 24) = a1;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 1;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      v12 = sub_1ACBDC2A4(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if ((_DWORD)v12)
        goto LABEL_7;
      if (!sqlite3_initialize())
      {
        v19 = sub_1ACB5D828(152);
        if (v19)
        {
          v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(_QWORD *)(v19 + 144) = 0;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_QWORD *)(v19 + 16) = a4;
          *(_DWORD *)(v19 + 24) = a3;
          *(_QWORD *)(v19 + 48) = 0;
          *(_QWORD *)(v19 + 56) = 0;
          *(_DWORD *)(v19 + 64) = 1;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          v12 = sub_1ACBDC2A4(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!(_DWORD)v12)
            v12 = sqlite3changegroup_output(v15, a5, a6);
          goto LABEL_7;
        }
      }
    }
  }
  sqlite3changeset_finalize(0);
  v12 = 7;
LABEL_7:
  sub_1ACBD87F0(0, *(uint64_t **)(v15 + 8));
  v16 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v15);
  v15 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_12;
  }
  return v12;
}

uint64_t sqlite3changeset_concat_strm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  void (**v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (sqlite3_initialize())
    return 7;
  v14 = (_QWORD *)sub_1ACB5D828(16);
  if (!v14)
    return 7;
  v15 = (uint64_t)v14;
  *v14 = 0;
  v14[1] = 0;
  if (!sqlite3_initialize())
  {
    v17 = sub_1ACB5D828(152);
    if (v17)
    {
      v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_QWORD *)(v17 + 144) = 0;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_QWORD *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 48) = a1;
      *(_QWORD *)(v17 + 56) = a2;
      *(_DWORD *)(v17 + 64) = a1 == 0;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      v12 = sub_1ACBDC2A4(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if ((_DWORD)v12)
        goto LABEL_7;
      if (!sqlite3_initialize())
      {
        v19 = sub_1ACB5D828(152);
        if (v19)
        {
          v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(_QWORD *)(v19 + 144) = 0;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_QWORD *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 48) = a3;
          *(_QWORD *)(v19 + 56) = a4;
          *(_DWORD *)(v19 + 64) = a3 == 0;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          v12 = sub_1ACBDC2A4(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!(_DWORD)v12)
            v12 = sqlite3changegroup_output_strm(v15, a5, a6);
          goto LABEL_7;
        }
      }
    }
  }
  sqlite3changeset_finalize(0);
  v12 = 7;
LABEL_7:
  sub_1ACBD87F0(0, *(uint64_t **)(v15 + 8));
  v16 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v15);
  v15 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_12;
  }
  return v12;
}

uint64_t sqlite3rebaser_create(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (sqlite3_initialize())
  {
    v2 = 0;
  }
  else
  {
    v2 = (_QWORD *)sub_1ACB5D828(16);
    if (v2)
    {
      v3 = 0;
      *v2 = 0;
      v2[1] = 0;
      goto LABEL_6;
    }
  }
  v3 = 7;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3rebaser_configure(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sqlite3_initialize())
  {
    v6 = 0;
  }
  else
  {
    v8 = sub_1ACB5D828(152);
    v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_QWORD *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_QWORD *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      v7 = sub_1ACBDC2A4(v8, a1, 1);
      goto LABEL_6;
    }
  }
  v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3rebaser_rebase(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sqlite3_initialize())
    return 7;
  v11 = sub_1ACB5D828(152);
  if (!v11)
    return 7;
  v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 16) = a3;
  *(_DWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 64) = 1;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  v13 = sub_1ACBDDF4C(a1, v11, 0, 0, a4, a5);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sub_1ACBDDF4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  BOOL v15;
  unsigned __int8 *i;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  char *j;
  int v128;
  int v129;
  BOOL v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  BOOL v138;
  int v139;
  int v140;
  int v141;
  int v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _BYTE *v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  BOOL v155;
  int v156;
  int v157;
  int v158;
  int v159;
  char v160;
  int v161;
  BOOL v162;
  int v164;
  int v165;
  int v166;
  int v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  char *v173;
  int v174;
  char *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (**v192)(uint64_t);
  uint64_t (**v193)(uint64_t);
  uint64_t (*v195)(uint64_t, uint64_t);
  char *v196;
  int v199;
  uint64_t v201;
  _BYTE *__dst;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *__s1;
  unsigned int v207;
  unint64_t v208;

  v8 = 0;
  v207 = 0;
  v205 = 0;
  __s1 = 0;
  v9 = a1 + 8;
  v203 = 0;
  v204 = 0;
  v201 = a1 + 8;
  while (2)
  {
    if (sub_1ACBD9C4C(a2, &__s1, (int *)&v205 + 1, &v205) != 100)
    {
      if (a3)
      {
        v190 = v203;
        if ((int)v204 >= 1)
        {
          v207 = a3(a4, v203);
          v190 = v203;
        }
      }
      else
      {
        v190 = v203;
        if (a6)
        {
          *a6 = v203;
          *a5 = v204;
          return v207;
        }
      }
      if (!v190)
        return v207;
      v193 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v190);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v190);
        v190 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return v207;
        v193 = &xmmword_1ECD3B1D0;
      }
      (*v193)(v190);
      return v207;
    }
    if ((_DWORD)v205)
    {
      v11 = *(_QWORD *)(a2 + 112);
      if (v11)
        v12 = -1;
      else
        v12 = 0;
      v8 = v9;
      do
      {
        v8 = *(_QWORD *)v8;
        if (!v8)
          break;
        v13 = *(_BYTE **)(v8 + 8);
        if (v13)
          v14 = 1;
        else
          v14 = v12;
        if (v13)
          v15 = v11 == 0;
        else
          v15 = 1;
        if (!v15)
        {
          for (i = *(unsigned __int8 **)(a2 + 112); ; ++i)
          {
            v17 = *v13;
            v18 = *i;
            if ((_DWORD)v17 == (_DWORD)v18)
            {
              if (!*v13)
                goto LABEL_25;
            }
            else if (byte_1ACCB6333[v17] != byte_1ACCB6333[v18])
            {
              v14 = 1;
              break;
            }
            ++v13;
          }
        }
      }
      while (v14);
LABEL_25:
      LODWORD(v205) = 0;
      if (*(_DWORD *)(a2 + 88))
      {
        v207 = 1;
      }
      else
      {
        v20 = v204;
        v21 = HIDWORD(v204);
        v22 = (int)v204;
        if ((int)v204 >= SHIDWORD(v204))
        {
          if (!HIDWORD(v204))
            v21 = 128;
          v24 = v21;
          do
          {
            v25 = v24;
            v24 *= 2;
          }
          while (v24 <= (int)v204);
          if (v25 > 1073741695 && (v24 = 2147483391, (int)v204 > 2147483390)
            || (v26 = v203, sqlite3_initialize())
            || (v23 = sub_1ACB6BB48(v26, v24)) == 0)
          {
            v207 = 7;
            goto LABEL_39;
          }
          v203 = v23;
          HIDWORD(v204) = v24;
          v20 = v204;
          v22 = (int)v204;
        }
        else
        {
          v23 = v203;
        }
        LODWORD(v204) = v20 + 1;
        *(_BYTE *)(v23 + v22) = 84;
      }
LABEL_39:
      sub_1ACCAB778((uint64_t)&v203, *(_DWORD *)(a2 + 120), &v207);
      v27 = *(unsigned int *)(a2 + 120);
      v19 = v207;
      if ((int)v27 >= 1 && !v207)
      {
        v28 = *(const void **)(a2 + 136);
        v29 = (int)v204;
        v30 = (int)v204 + v27;
        if (v30 <= SHIDWORD(v204))
        {
          v34 = v203;
        }
        else
        {
          if (HIDWORD(v204))
            v31 = SHIDWORD(v204);
          else
            v31 = 128;
          do
          {
            v32 = v31;
            v31 *= 2;
          }
          while (v31 < v30);
          if (v32 > 1073741695 && (v31 = 2147483391, v30 > 2147483391)
            || (v33 = v203, sqlite3_initialize())
            || (v34 = sub_1ACB6BB48(v33, v31)) == 0)
          {
            v19 = 7;
            v207 = 7;
            goto LABEL_52;
          }
          v203 = v34;
          HIDWORD(v204) = v31;
          v29 = (int)v204;
        }
        memcpy((void *)(v34 + v29), v28, v27);
        v19 = 0;
        LODWORD(v204) = v204 + v27;
      }
LABEL_52:
      v35 = *(const char **)(a2 + 112);
      v36 = strlen(v35);
      if ((v36 & 0x80000000) == 0)
      {
        if (v19)
          goto LABEL_347;
        v37 = (v36 + 1);
        v38 = (int)v204;
        v39 = (int)v204 + v37;
        if (v39 <= SHIDWORD(v204))
        {
          v43 = v203;
        }
        else
        {
          if (HIDWORD(v204))
            v40 = SHIDWORD(v204);
          else
            v40 = 128;
          do
          {
            v41 = v40;
            v40 *= 2;
          }
          while (v40 < v39);
          if (v41 > 1073741695 && (v40 = 2147483391, v39 > 2147483391)
            || (v42 = v203, sqlite3_initialize())
            || (v43 = sub_1ACB6BB48(v42, v40)) == 0)
          {
            v207 = 7;
            goto LABEL_347;
          }
          v203 = v43;
          HIDWORD(v204) = v40;
          v38 = (int)v204;
        }
        memcpy((void *)(v43 + v38), v35, v37);
        v19 = 0;
        LODWORD(v204) = v204 + v37;
      }
      goto LABEL_65;
    }
    v19 = 0;
LABEL_65:
    if (!v8 || v19)
    {
LABEL_70:
      if (v19)
        goto LABEL_347;
LABEL_71:
      v45 = v204;
      v46 = HIDWORD(v204);
      v47 = *(_DWORD *)(a2 + 124);
      v48 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204))
          v46 = 128;
        v58 = v46;
        do
        {
          v59 = v58;
          v58 *= 2;
        }
        while (v58 <= (int)v204);
        if (v59 > 1073741695)
        {
          v58 = 2147483391;
          if ((int)v204 > 2147483390)
            goto LABEL_112;
        }
        v60 = v203;
        if (sqlite3_initialize())
          goto LABEL_112;
        v49 = sub_1ACB6BB48(v60, v58);
        if (!v49)
          goto LABEL_112;
        v203 = v49;
        HIDWORD(v204) = v58;
        v45 = v204;
        v48 = (int)v204;
      }
      else
      {
        v49 = v203;
      }
      LODWORD(v204) = v45 + 1;
      *(_BYTE *)(v49 + v48) = v47;
      v50 = *(_DWORD *)(a2 + 128);
      v51 = v204;
      v52 = HIDWORD(v204);
      v53 = (int)v204;
      if ((int)v204 < SHIDWORD(v204))
      {
        v54 = v203;
        goto LABEL_75;
      }
      if (!HIDWORD(v204))
        v52 = 128;
      v79 = v52;
      do
      {
        v80 = v79;
        v79 *= 2;
      }
      while (v79 <= (int)v204);
      if (v80 <= 1073741695 || (v79 = 2147483391, (int)v204 <= 2147483390))
      {
        v81 = v203;
        if (!sqlite3_initialize())
        {
          v54 = sub_1ACB6BB48(v81, v79);
          if (v54)
          {
            v203 = v54;
            HIDWORD(v204) = v79;
            v51 = v204;
            v53 = (int)v204;
LABEL_75:
            LODWORD(v204) = v51 + 1;
            *(_BYTE *)(v54 + v53) = v50;
            v55 = HIDWORD(v205);
            if (SHIDWORD(v205) < 1)
              goto LABEL_359;
            v56 = (int)v204;
            v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            v9 = v201;
            v82 = __s1;
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204))
                v83 = SHIDWORD(v204);
              else
                v83 = 128;
              do
              {
                v84 = v83;
                v83 *= 2;
              }
              while (v83 < v57);
              goto LABEL_119;
            }
LABEL_345:
            v113 = v203;
            goto LABEL_346;
          }
        }
      }
LABEL_112:
      v207 = 7;
      v9 = v201;
      goto LABEL_347;
    }
    v44 = *(_QWORD *)(*(_QWORD *)(v8 + 56)
                    + 8 * (int)sub_1ACCAA1E0(v8, 0, (unsigned __int8 *)__s1, *(_DWORD *)(v8 + 52)));
    if (!v44)
      goto LABEL_71;
    while (!sub_1ACCAE62C(v8, 0, (char *)__s1, 0, *(char **)(v44 + 16)))
    {
      v44 = *(_QWORD *)(v44 + 24);
      if (!v44)
        goto LABEL_70;
    }
    v61 = *(_DWORD *)(a2 + 124);
    if (v61 != 23)
    {
      if (v61 == 18)
      {
        if (*(_BYTE *)v44 == 18)
        {
          if (*(_BYTE *)(v44 + 1))
            goto LABEL_347;
          v62 = v204;
          v63 = HIDWORD(v204);
          v64 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204))
              v63 = 128;
            v177 = v63;
            do
            {
              v178 = v177;
              v177 *= 2;
            }
            while (v177 <= (int)v204);
            if (v178 > 1073741695)
            {
              v177 = 2147483391;
              if ((int)v204 > 2147483390)
                goto LABEL_297;
            }
            v179 = v203;
            if (sqlite3_initialize())
              goto LABEL_297;
            v65 = sub_1ACB6BB48(v179, v177);
            if (!v65)
              goto LABEL_297;
            v203 = v65;
            HIDWORD(v204) = v177;
            v62 = v204;
            v64 = (int)v204;
          }
          else
          {
            v65 = v203;
          }
          LODWORD(v204) = v62 + 1;
          *(_BYTE *)(v65 + v64) = 23;
          v66 = *(_DWORD *)(a2 + 128);
          v67 = v204;
          v68 = HIDWORD(v204);
          v69 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204))
              v68 = 128;
            v184 = v68;
            do
            {
              v185 = v184;
              v184 *= 2;
            }
            while (v184 <= (int)v204);
            if (v185 > 1073741695 && (v184 = 2147483391, (int)v204 > 2147483390)
              || (v186 = v203, sqlite3_initialize())
              || (v70 = sub_1ACB6BB48(v186, v184)) == 0)
            {
              v180 = 0;
              v207 = 7;
              v9 = v201;
              goto LABEL_337;
            }
            v203 = v70;
            HIDWORD(v204) = v184;
            v67 = v204;
            v69 = (int)v204;
          }
          else
          {
            v70 = v203;
          }
          LODWORD(v204) = v67 + 1;
          *(_BYTE *)(v70 + v69) = v66;
          v71 = *(unsigned int *)(v44 + 8);
          if ((int)v71 < 1)
          {
            v180 = 1;
            v9 = v201;
            goto LABEL_337;
          }
          v72 = *(const void **)(v44 + 16);
          v73 = (int)v204;
          v74 = (int)v204 + v71;
          v9 = v201;
          if (v74 <= SHIDWORD(v204))
          {
            v78 = v203;
            goto LABEL_336;
          }
          if (HIDWORD(v204))
            v75 = SHIDWORD(v204);
          else
            v75 = 128;
          do
          {
            v76 = v75;
            v75 *= 2;
          }
          while (v75 < v74);
          if (v76 <= 1073741695 || (v75 = 2147483391, v74 <= 2147483391))
          {
            v77 = v203;
            if (!sqlite3_initialize())
            {
              v78 = sub_1ACB6BB48(v77, v75);
              if (v78)
              {
                v203 = v78;
                HIDWORD(v204) = v75;
                v73 = (int)v204;
LABEL_336:
                memcpy((void *)(v78 + v73), v72, v71);
                LODWORD(v204) = v204 + v71;
                v180 = 1;
                goto LABEL_337;
              }
            }
          }
LABEL_297:
          v180 = 0;
          v207 = 7;
LABEL_337:
          v55 = HIDWORD(v205);
          if (SHIDWORD(v205) >= 1 && v180)
          {
            v82 = __s1;
            v56 = (int)v204;
            v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204))
                v83 = SHIDWORD(v204);
              else
                v83 = 128;
              do
              {
                v84 = v83;
                v83 *= 2;
              }
              while (v83 < v57);
LABEL_119:
              if (v84 <= 1073741695 || (v83 = 2147483391, v57 <= 2147483391))
              {
                v85 = v203;
                if (!sqlite3_initialize())
                {
                  v113 = sub_1ACB6BB48(v85, v83);
                  if (v113)
                  {
                    v203 = v113;
                    HIDWORD(v204) = v83;
                    v56 = (int)v204;
LABEL_346:
                    memcpy((void *)(v113 + v56), v82, v55);
                    LODWORD(v204) = v204 + v55;
                    goto LABEL_347;
                  }
                }
              }
LABEL_122:
              v207 = 7;
              v10 = 7;
              if (!a3)
                goto LABEL_3;
              goto LABEL_348;
            }
            goto LABEL_345;
          }
LABEL_347:
          v10 = v207;
          if (!a3)
            goto LABEL_3;
          goto LABEL_348;
        }
        goto LABEL_70;
      }
      if (*(_BYTE *)v44 != 18)
        goto LABEL_347;
      v104 = v204;
      v105 = HIDWORD(v204);
      v106 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204))
          v105 = 128;
        v122 = v105;
        do
        {
          v123 = v122;
          v122 *= 2;
        }
        while (v122 <= (int)v204);
        if (v123 > 1073741695 && (v122 = 2147483391, (int)v204 > 2147483390)
          || (v124 = v203, sqlite3_initialize())
          || (v107 = sub_1ACB6BB48(v124, v122)) == 0)
        {
          v207 = 7;
LABEL_287:
          v172 = *(_DWORD *)(a2 + 120);
          v173 = *(char **)(v44 + 16);
          v174 = *(_DWORD *)(v44 + 8);
          v175 = (char *)__s1;
          v176 = HIDWORD(v205);
          goto LABEL_326;
        }
        v203 = v107;
        HIDWORD(v204) = v122;
        v104 = v204;
        v106 = (int)v204;
      }
      else
      {
        v107 = v203;
      }
      LODWORD(v204) = v104 + 1;
      *(_BYTE *)(v107 + v106) = 9;
      v108 = *(_DWORD *)(a2 + 128);
      v109 = v204;
      v110 = HIDWORD(v204);
      v111 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204))
          v110 = 128;
        v169 = v110;
        do
        {
          v170 = v169;
          v169 *= 2;
        }
        while (v169 <= (int)v204);
        if (v170 > 1073741695 && (v169 = 2147483391, (int)v204 > 2147483390)
          || (v171 = v203, sqlite3_initialize())
          || (v112 = sub_1ACB6BB48(v171, v169)) == 0)
        {
          v207 = 7;
          goto LABEL_286;
        }
        v203 = v112;
        HIDWORD(v204) = v169;
        v109 = v204;
        v111 = (int)v204;
      }
      else
      {
        v112 = v203;
      }
      LODWORD(v204) = v109 + 1;
      *(_BYTE *)(v112 + v111) = v108;
LABEL_286:
      v9 = v201;
      goto LABEL_287;
    }
    if (*(_BYTE *)v44 == 9)
    {
      if (*(_BYTE *)(v44 + 1))
        goto LABEL_347;
      v86 = (unsigned __int8 *)__s1;
      v87 = *(_DWORD *)(a2 + 120);
      if (v87 >= 1)
      {
        do
        {
          while (1)
          {
            v89 = v86 + 1;
            v88 = *v86;
            if ((v88 - 3) <= 1)
              break;
            if ((v88 - 1) >= 2)
              ++v86;
            else
              v86 += 9;
            if (!--v87)
              goto LABEL_144;
          }
          v90 = *v89;
          if ((v90 & 0x80) != 0)
          {
            v92 = v86[2];
            if ((char)v86[2] < 0)
            {
              v93 = (char)v86[3];
              if (v93 < 0)
              {
                v208 = 0;
                v94 = sub_1ACB8A6CC((char *)v86 + 1, &v208);
                if (HIDWORD(v208))
                  v90 = -1;
                else
                  v90 = v208;
                v91 = v94;
              }
              else
              {
                v90 = v93 & 0x7F | (v90 << 14) & 0x1FC07F | ((v92 & 0x7F) << 7);
                v91 = 3;
              }
            }
            else
            {
              v90 = ((v90 & 0x7F) << 7) | v92;
              v91 = 2;
            }
          }
          else
          {
            v91 = 1;
          }
          v86 = &v89[v91 + v90];
          --v87;
        }
        while (v87);
      }
LABEL_144:
      v95 = v204;
      v96 = HIDWORD(v204);
      v97 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204))
          v96 = 128;
        v181 = v96;
        v9 = v201;
        do
        {
          v182 = v181;
          v181 *= 2;
        }
        while (v181 <= (int)v204);
        if (v182 > 1073741695 && (v181 = 2147483391, (int)v204 > 2147483390)
          || (v183 = v203, sqlite3_initialize())
          || (v98 = sub_1ACB6BB48(v183, v181)) == 0)
        {
          v207 = 7;
LABEL_325:
          v172 = *(_DWORD *)(a2 + 120);
          v174 = HIDWORD(v205) + (_DWORD)__s1 - (_DWORD)v86;
          v175 = *(char **)(v44 + 16);
          v176 = *(_DWORD *)(v44 + 8);
          v173 = (char *)v86;
LABEL_326:
          sub_1ACCAEF64((uint64_t)&v203, v172, v173, v174, v175, v176, &v207);
          v10 = v207;
          if (!a3)
            goto LABEL_3;
          goto LABEL_348;
        }
        v203 = v98;
        HIDWORD(v204) = v181;
        v95 = v204;
        v97 = (int)v204;
      }
      else
      {
        v98 = v203;
      }
      LODWORD(v204) = v95 + 1;
      *(_BYTE *)(v98 + v97) = 18;
      v99 = *(_DWORD *)(a2 + 128);
      v100 = v204;
      v101 = HIDWORD(v204);
      v102 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204))
          v101 = 128;
        v187 = v101;
        do
        {
          v188 = v187;
          v187 *= 2;
        }
        while (v187 <= (int)v204);
        if (v188 > 1073741695 && (v187 = 2147483391, (int)v204 > 2147483390)
          || (v189 = v203, sqlite3_initialize())
          || (v103 = sub_1ACB6BB48(v189, v187)) == 0)
        {
          v207 = 7;
          goto LABEL_324;
        }
        v203 = v103;
        HIDWORD(v204) = v187;
        v100 = v204;
        v102 = (int)v204;
      }
      else
      {
        v103 = v203;
      }
      LODWORD(v204) = v100 + 1;
      *(_BYTE *)(v103 + v102) = v99;
LABEL_324:
      v9 = v201;
      goto LABEL_325;
    }
    v114 = (char *)__s1;
    v196 = *(char **)(v44 + 16);
    v115 = (int)v204;
    v116 = SHIDWORD(v205) + (uint64_t)*(int *)(v44 + 8) + (int)v204 + 2;
    if (v116 <= SHIDWORD(v204))
    {
      v195 = a3;
      v121 = v203;
      v119 = *(char **)(v44 + 16);
    }
    else
    {
      if (HIDWORD(v204))
        v117 = SHIDWORD(v204);
      else
        v117 = 128;
      do
      {
        v118 = v117;
        v117 *= 2;
      }
      while (v117 < v116);
      v119 = *(char **)(v44 + 16);
      if (v118 > 1073741695)
      {
        v117 = 2147483391;
        if (v116 > 2147483391)
          goto LABEL_122;
      }
      v120 = v203;
      if (sqlite3_initialize())
        goto LABEL_122;
      v121 = sub_1ACB6BB48(v120, v117);
      if (!v121)
        goto LABEL_122;
      v195 = a3;
      v203 = v121;
      HIDWORD(v204) = v117;
      v115 = (int)v204;
    }
    v125 = (_BYTE *)(v121 + v115);
    *v125 = 23;
    v125[1] = *(_DWORD *)(a2 + 128);
    if (*(int *)(a2 + 120) < 1)
    {
      a3 = v195;
      v10 = v207;
      if (!v195)
        goto LABEL_3;
      goto LABEL_348;
    }
    v126 = 0;
    v199 = 0;
    __dst = v125 + 2;
    for (j = v119; ; j += v137)
    {
      while (1)
      {
        v128 = *v114;
        v129 = 1;
        if (*v114)
          v130 = v128 == 5;
        else
          v130 = 1;
        if (!v130 && v128 != 255)
        {
          if ((v128 - 1) >= 2)
          {
            v131 = v114[1];
            if ((v131 & 0x80) != 0)
            {
              v133 = v114[2];
              if (v114[2] < 0)
              {
                v134 = v114[3];
                if (v134 < 0)
                {
                  v208 = 0;
                  v135 = sub_1ACB8A6CC(v114 + 1, &v208);
                  v131 = v208;
                  if (HIDWORD(v208))
                    v131 = -1;
                  v132 = (v135 + 1);
                }
                else
                {
                  v131 = v134 & 0x7F | (v131 << 14) & 0x1FC07F | ((v133 & 0x7F) << 7);
                  v132 = 4;
                }
              }
              else
              {
                v131 = ((v131 & 0x7F) << 7) | v133;
                v132 = 3;
              }
            }
            else
            {
              v132 = 2;
            }
            v129 = v132 + v131;
          }
          else
          {
            v129 = 9;
          }
        }
        v136 = *j;
        v137 = 1;
        if (*j)
          v138 = v136 == 5;
        else
          v138 = 1;
        if (!v138 && v136 != 255)
        {
          if ((v136 - 1) >= 2)
          {
            v139 = j[1];
            if ((v139 & 0x80) != 0)
            {
              v141 = j[2];
              if (j[2] < 0)
              {
                v142 = j[3];
                if (v142 < 0)
                {
                  v208 = 0;
                  v143 = sub_1ACB8A6CC(j + 1, &v208);
                  v139 = v208;
                  if (HIDWORD(v208))
                    v139 = -1;
                  v140 = (v143 + 1);
                }
                else
                {
                  v139 = v142 & 0x7F | (v139 << 14) & 0x1FC07F | ((v141 & 0x7F) << 7);
                  v140 = 4;
                }
              }
              else
              {
                v139 = ((v139 & 0x7F) << 7) | v141;
                v140 = 3;
              }
            }
            else
            {
              v140 = 2;
            }
            v137 = v140 + v139;
          }
          else
          {
            v137 = 9;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 136) + v126))
          goto LABEL_221;
        if (v136 == 255)
          break;
        if (!v136)
        {
          v146 = v199;
          if (v128)
            v146 = 1;
          v199 = v146;
LABEL_221:
          v144 = v129;
          memcpy(__dst, v114, v129);
          __dst += v129;
          goto LABEL_222;
        }
        if (!v128)
          break;
        memcpy(__dst, j, v137);
        __dst += v137;
        v114 += v129;
        ++v126;
        v147 = *(int *)(a2 + 120);
        if (v126 >= v147)
        {
          if ((int)v147 < 1)
            goto LABEL_356;
LABEL_235:
          v148 = 0;
          v149 = v196;
          v150 = __dst;
          while (2)
          {
            v153 = *v114;
            v154 = 1;
            if (*v114)
              v155 = v153 == 5;
            else
              v155 = 1;
            if (!v155 && v153 != 255)
            {
              if ((v153 - 1) >= 2)
              {
                v156 = v114[1];
                if ((v156 & 0x80) != 0)
                {
                  v158 = v114[2];
                  if (v114[2] < 0)
                  {
                    v159 = v114[3];
                    if (v159 < 0)
                    {
                      v208 = 0;
                      v160 = sub_1ACB8A6CC(v114 + 1, &v208);
                      v156 = v208;
                      if (HIDWORD(v208))
                        v156 = -1;
                      v157 = (v160 + 1);
                    }
                    else
                    {
                      v156 = v159 & 0x7F | (v156 << 14) & 0x1FC07F | ((v158 & 0x7F) << 7);
                      v157 = 4;
                    }
                  }
                  else
                  {
                    v156 = ((v156 & 0x7F) << 7) | v158;
                    v157 = 3;
                  }
                }
                else
                {
                  v157 = 2;
                }
                v154 = v157 + v156;
              }
              else
              {
                v154 = 9;
              }
            }
            v161 = *v149;
            if (*v149)
              v162 = v161 == 5;
            else
              v162 = 1;
            if (v162 || v161 == 255)
            {
              if (v161 != 255 || *(_BYTE *)(*(_QWORD *)(a2 + 136) + v148) != 0)
              {
                v152 = 1;
                goto LABEL_277;
              }
              *v150++ = 0;
              v151 = v154;
              v152 = 1;
            }
            else
            {
              if ((v161 - 1) >= 2)
              {
                v164 = v149[1];
                if ((v164 & 0x80) != 0)
                {
                  v166 = v149[2];
                  if (v149[2] < 0)
                  {
                    v167 = v149[3];
                    if (v167 < 0)
                    {
                      v208 = 0;
                      v168 = sub_1ACB8A6CC(v149 + 1, &v208);
                      v164 = v208;
                      if (HIDWORD(v208))
                        v164 = -1;
                      v165 = (v168 + 1);
                    }
                    else
                    {
                      v164 = v167 & 0x7F | (v164 << 14) & 0x1FC07F | ((v166 & 0x7F) << 7);
                      v165 = 4;
                    }
                  }
                  else
                  {
                    v164 = ((v164 & 0x7F) << 7) | v166;
                    v165 = 3;
                  }
                }
                else
                {
                  v165 = 2;
                }
                v152 = v165 + v164;
              }
              else
              {
                v152 = 9;
              }
LABEL_277:
              v151 = v154;
              memcpy(v150, v114, v154);
              v150 += v154;
            }
            v114 += v151;
            v149 += v152;
            if (++v148 >= *(int *)(a2 + 120))
              goto LABEL_357;
            continue;
          }
        }
        v199 = 1;
        j += v137;
      }
      *__dst++ = 0;
      v144 = v129;
LABEL_222:
      v114 += v144;
      ++v126;
      v145 = *(int *)(a2 + 120);
      if (v126 >= v145)
        break;
    }
    if (v199)
    {
      if ((int)v145 >= 1)
        goto LABEL_235;
LABEL_356:
      LODWORD(v150) = (_DWORD)__dst;
LABEL_357:
      LODWORD(v204) = (_DWORD)v150 - v203;
    }
    a3 = v195;
LABEL_359:
    v9 = v201;
    v10 = v207;
    if (a3)
    {
LABEL_348:
      if (!v10)
      {
        if ((int)v204 > dword_1EECAC718)
        {
          v10 = a3(a4, v203);
          v207 = v10;
          LODWORD(v204) = 0;
        }
        else
        {
          v10 = 0;
        }
      }
    }
LABEL_3:
    if (!v10)
      continue;
    break;
  }
  v191 = v203;
  if (v203)
  {
    v192 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_370;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v191);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v191);
    v191 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v192 = &xmmword_1ECD3B1D0;
LABEL_370:
      (*v192)(v191);
    }
  }
  return v207;
}

uint64_t sqlite3rebaser_rebase_strm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sqlite3_initialize())
    return 7;
  v11 = sub_1ACB5D828(152);
  if (!v11)
    return 7;
  v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 48) = a2;
  *(_QWORD *)(v11 + 56) = a3;
  *(_DWORD *)(v11 + 64) = a2 == 0;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  v13 = sub_1ACBDDF4C(a1, v11, a4, a5, 0, 0);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sqlite3rebaser_delete(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    sub_1ACBD87F0(0, *(uint64_t **)(result + 8));
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sqlite3session_config(int a1, int *a2)
{
  int v2;
  uint64_t result;

  if (a1 != 1)
    return 21;
  v2 = *a2;
  if (*a2 <= 0)
    v2 = dword_1EECAC718;
  else
    dword_1EECAC718 = *a2;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t sqlite3_carray_bind(sqlite3_stmt *a1, int a2, _QWORD *a3, int a4, int a5, void (__cdecl *a6)(void *))
{
  uint64_t v8;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  const double *v24;
  uint64_t v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)(_QWORD);
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  const char *v38;
  char *v39;
  size_t *v40;
  size_t *v41;
  size_t v42;
  char *v43;

  LODWORD(v8) = a4;
  if (sqlite3_initialize() || (v13 = sub_1ACB5D828(24)) == 0)
  {
    if ((unint64_t)a6 + 1 >= 2)
      ((void (*)(_QWORD *))a6)(a3);
    return 7;
  }
  v14 = (_QWORD *)v13;
  *(_DWORD *)(v13 + 8) = v8;
  *(_DWORD *)(v13 + 12) = a5;
  if (a6 != (void (__cdecl *)(void *))-1)
  {
    *(_QWORD *)v13 = a3;
    goto LABEL_8;
  }
  v15 = a5 & 7;
  switch(a5 & 7)
  {
    case 0:
      v16 = 0;
      v17 = 4 * (int)v8;
      break;
    case 1:
    case 2:
      v16 = 0;
      v17 = 8 * (int)v8;
      break;
    case 3:
      v17 = 8 * (int)v8;
      if ((int)v8 >= 1)
      {
        v18 = v8;
        v19 = (const char **)a3;
        do
        {
          if (*v19)
            v17 += strlen(*v19) + 1;
          ++v19;
          --v18;
        }
        while (v18);
      }
      v16 = 1;
      break;
    case 4:
      v17 = 16 * (int)v8;
      if ((int)v8 >= 1)
      {
        if (v8 >= 5)
        {
          v21 = v8 & 3;
          if ((v8 & 3) == 0)
            v21 = 4;
          v20 = v8 - v21;
          v22 = 0uLL;
          v23 = (int64x2_t)(unint64_t)(16 * (int)v8);
          v24 = (const double *)(a3 + 5);
          v25 = v20;
          do
          {
            v26 = v24 - 4;
            v27 = (unsigned __int128)vld2q_f64(v26);
            v28 = (unsigned __int128)vld2q_f64(v24);
            v23 = vaddq_s64((int64x2_t)v27, v23);
            v22 = vaddq_s64((int64x2_t)v28, v22);
            v24 += 8;
            v25 -= 4;
          }
          while (v25);
          v17 = vaddvq_s64(vaddq_s64(v22, v23));
        }
        else
        {
          v20 = 0;
        }
        v29 = &a3[2 * v20 + 1];
        v30 = v8 - v20;
        do
        {
          v31 = *v29;
          v29 += 2;
          v17 += v31;
          --v30;
        }
        while (v30);
      }
      v16 = 0;
      break;
    default:
      v16 = 0;
      v17 = (int)v8;
      break;
  }
  if (sqlite3_initialize())
  {
    *v14 = 0;
LABEL_32:
    v32 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v14);
      v14 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return 7;
      v32 = &xmmword_1ECD3B1D0;
    }
    (*v32)(v14);
    return 7;
  }
  v33 = (_QWORD *)sub_1ACB5D828(v17);
  *v14 = v33;
  if (!v33)
    goto LABEL_32;
  v34 = v33;
  if (v16)
  {
    if ((int)v8 >= 1)
    {
      v35 = (char *)&v33[(int)v8];
      a6 = sqlite3_free;
      v36 = v8;
      do
      {
        v38 = (const char *)*a3;
        if (*a3)
        {
          *v34 = v35;
          v37 = strlen(v38) + 1;
          memcpy(v35, v38, v37);
          v35 += v37;
        }
        else
        {
          *v34 = 0;
        }
        ++v34;
        ++a3;
        --v36;
      }
      while (v36);
      goto LABEL_8;
    }
  }
  else if (v15 == 4)
  {
    if ((int)v8 >= 1)
    {
      v39 = (char *)&v33[2 * (int)v8];
      v40 = v34 + 1;
      v41 = a3 + 1;
      v8 = v8;
      a6 = sqlite3_free;
      do
      {
        v42 = *v41;
        *(v40 - 1) = (size_t)v39;
        *v40 = v42;
        v43 = &v39[v42];
        memcpy(v39, (const void *)*(v41 - 1), v42);
        v40 += 2;
        v41 += 2;
        v39 = v43;
        --v8;
      }
      while (v8);
      goto LABEL_8;
    }
  }
  else
  {
    memcpy(v33, a3, v17);
  }
  a6 = sqlite3_free;
LABEL_8:
  v14[2] = a6;
  return sqlite3_bind_pointer(a1, a2, v14, "carray-bind", (void (__cdecl *)(void *))sub_1ACBDF788);
}

uint64_t sub_1ACBDF788(_QWORD *a1)
{
  _QWORD *v1;
  void (*v2)(_QWORD);
  uint64_t (**v3)(_QWORD);
  uint64_t result;

  v1 = a1;
  v2 = (void (*)(_QWORD))a1[2];
  if (v2)
    v2(*a1);
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v1);
  }
  return result;
}

uint64_t sqlite3_carray_init(uint64_t a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_1ACB5BDE4(a1, "carray", (uint64_t)&unk_1EECAC720, 0, 0);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1ACBBE20C(161238);
}

uint64_t sqlite3_csv_init(uint64_t a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_1ACB5BDE4(a1, "csv", (uint64_t)&unk_1EECAC7E0, 0, 0);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1ACBBE20C(161238);
}

void sqlite3_activate_see(uint64_t a1)
{
  _QWORD block[5];

  if (!sqlite3_initialize())
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_1ACBDF9F8;
    block[3] = &unk_1E5C72CC0;
    block[4] = a1;
    if (qword_1EECAD0B8 != -1)
      dispatch_once(&qword_1EECAD0B8, block);
  }
}

void sub_1ACBDF9F8(uint64_t a1)
{
  void *v2;
  int v3;
  char *v4;
  const char *v5;

  if (dword_1EECAD0C0)
  {
    if (*(_QWORD *)(a1 + 32))
    {
LABEL_3:
      sqlite3_log(28, "This version of the encryption extension does not support an activation passphrase");
      return;
    }
  }
  else
  {
    v2 = (void *)xpc_copy_entitlement_for_self();
    if (v2)
    {
      xpc_release(v2);
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
    dword_1EECAD0C0 = v3;
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  if (os_variant_allows_internal_security_policies())
  {
    v4 = getenv("SQLITE_ENABLE_SEE");
    if (v4)
    {
      dword_1EECAD0C0 = strcmp(v4, "0") != 0;
    }
    else if (!dword_1EECAD0C0)
    {
      v5 = getprogname();
      if (!strcmp("xctest", v5))
        dword_1EECAD0C0 = 1;
      else
        sqlite3_log(1, "entitlement \"%s\" or environment variable \"SQLITE_ENABLE_SEE=1\" required to activate SEE");
    }
  }
  else
  {
    sqlite3_log(1, "entitlement \"%s\" required to activate SEE");
  }
}

uint64_t sqlite3_key_v2(uint64_t a1, _BYTE *a2, _BYTE *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _BYTE *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD block[5];

  if (!dword_1EECAD0C0)
  {
    if (sqlite3_initialize()
      || (block[0] = MEMORY[0x1E0C809B0],
          block[1] = 0x40000000,
          block[2] = sub_1ACBDF9F8,
          block[3] = &unk_1E5C72CC0,
          block[4] = 0,
          qword_1EECAD0B8 == -1))
    {
      if (dword_1EECAD0C0)
        goto LABEL_5;
      return 21;
    }
    dispatch_once(&qword_1EECAD0B8, block);
    if (!dword_1EECAD0C0)
      return 21;
  }
LABEL_5:
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (*(_BYTE *)(a1 + 111))
  {
    if (a2)
      goto LABEL_9;
LABEL_22:
    LODWORD(v10) = 0;
LABEL_23:
    v16 = sub_1ACBDFCC4(a1, v10, a3, a4);
    if (!*(_BYTE *)(a1 + 111))
      goto LABEL_24;
    goto LABEL_25;
  }
  sub_1ACBE9148(a1);
  if (!a2)
    goto LABEL_22;
LABEL_9:
  v9 = *(unsigned int *)(a1 + 40);
  if ((int)v9 < 1)
    goto LABEL_19;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 32);
  while (!*(_QWORD *)(v11 + 32 * v10 + 8))
  {
LABEL_11:
    if (++v10 == v9)
      goto LABEL_19;
  }
  v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (i = a2; ; ++i)
  {
    v14 = *i;
    v15 = *v12;
    if ((_DWORD)v14 == (_DWORD)v15)
      break;
    if (byte_1ACCB6333[v14] != byte_1ACCB6333[v15])
      goto LABEL_11;
LABEL_15:
    ++v12;
  }
  if (*i)
    goto LABEL_15;
  if ((v10 & 0x80000000) == 0)
    goto LABEL_23;
LABEL_19:
  v16 = 1;
  if (!*(_BYTE *)(a1 + 111))
LABEL_24:
    sub_1ACBE91DC(a1);
LABEL_25:
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
    xmmword_1ECD3B1D0(v17);
  return v16;
}

uint64_t sub_1ACBDFCC4(uint64_t a1, int a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _OWORD *v12;
  _OWORD *v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  __int128 v26;
  void (*v27)(_QWORD);
  uint64_t i;
  int8x16_t *(*v29)(uint64_t, int8x16_t *, int, int);
  int v30;
  void *v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned __int8 v35;
  _OWORD v36[2];
  _OWORD v37[14];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32) + 32 * a2;
  v7 = *(_QWORD *)(v4 + 8);
  v6 = (uint64_t *)(v4 + 8);
  v5 = v7;
  if (!v7)
    return 0;
  v8 = **(_QWORD **)(v5 + 8);
  if (!v8)
    return 0;
  if (sqlite3_initialize())
    return 7;
  v12 = (_OWORD *)sub_1ACB5D828(112);
  if (!v12)
    return 7;
  v13 = v12;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  *v12 = 0u;
  sub_1ACBB5FAC(*v6, 0, 12, 0, 0);
  LOBYTE(v14) = 0;
  v15 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      v36[0] = xmmword_1ACCBDB40;
      v36[1] = xmmword_1ACCBDB50;
      v37[5] = xmmword_1ACCBDBB0;
      v37[6] = xmmword_1ACCBDBC0;
      v37[7] = xmmword_1ACCBDBD0;
      v37[8] = xmmword_1ACCBDBE0;
      v37[9] = xmmword_1ACCBDBF0;
      v37[10] = xmmword_1ACCBDC00;
      v37[11] = xmmword_1ACCBDC10;
      v37[12] = xmmword_1ACCBDC20;
      v37[13] = xmmword_1ACCBDC30;
      if (*a3)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = *((_BYTE *)v36 + v17);
          v21 = a3[v18];
          v19 += v20 + v21;
          v22 = *((_BYTE *)v36 + v19);
          *((_BYTE *)v36 + v19) = v20;
          *((_BYTE *)v36 + v17++) = v22;
          if (v21)
            ++v18;
          else
            v18 = 0;
        }
        while (v17 != 256);
      }
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)v36 + v23 + 1);
        v24 += v25;
        *((_BYTE *)v36 + v23 + 1) = *((_BYTE *)v36 + v24);
        *((_BYTE *)v36 + v24) = v25;
        *((_BYTE *)v13 + v23 + 2) = *((_BYTE *)v36 + v23 + 1) + v25;
        ++v23;
      }
      while (v23 != 32);
      v15 = 0;
      LOBYTE(v14) = 32;
    }
    else
    {
      v16 = 0;
      if (a4 >= 32)
        v14 = 32;
      else
        v14 = a4;
      do
      {
        *((_BYTE *)v13 + v16 + 2) = a3[(int)v16 % v14];
        ++v16;
      }
      while (v16 != 32);
      v15 = 0;
    }
  }
  *(_BYTE *)v13 = v14;
  *((_BYTE *)v13 + 1) = v15;
  v26 = *v13;
  *(_OWORD *)((char *)v13 + 50) = v13[1];
  *((_WORD *)v13 + 33) = *((_WORD *)v13 + 16);
  *(_OWORD *)((char *)v13 + 34) = v26;
  v27 = *(void (**)(_QWORD))(v8 + 312);
  if (v27)
  {
    v27(*(_QWORD *)(v8 + 320));
  }
  else
  {
    ++*(_DWORD *)(v8 + 132);
    for (i = *(_QWORD *)(v8 + 112); i; i = *(_QWORD *)(i + 64))
      *(_DWORD *)(i + 24) = 1;
    sub_1ACB5AD68(*(_QWORD **)(v8 + 336), 0);
  }
  v29 = sub_1ACCB1864;
  v30 = *(unsigned __int8 *)(v8 + 19);
  if (*(_BYTE *)(v8 + 19))
    v29 = 0;
  *(_QWORD *)(v8 + 296) = v29;
  *(_QWORD *)(v8 + 304) = sub_1ACCB1E60;
  *(_QWORD *)(v8 + 312) = sub_1ACCB1E84;
  *(_QWORD *)(v8 + 320) = v13;
  if (*(_DWORD *)(v8 + 48))
  {
    v31 = sub_1ACBEBC4C;
  }
  else
  {
    if (v30)
      v32 = *(_BYTE *)(v8 + 27) == 0;
    else
      v32 = 1;
    v31 = sub_1ACBEBEA8;
    if (!v32)
      v31 = sub_1ACBEBC58;
  }
  result = 0;
  *(_QWORD *)(v8 + 288) = v31;
  v33 = *(_DWORD *)(v8 + 200);
  v34 = *(__int16 *)(v8 + 178);
  if (v34 >= 12)
    v35 = 12;
  else
    v35 = *(_WORD *)(v8 + 178);
  *((_BYTE *)v13 + 69) = v35;
  *((_DWORD *)v13 + 19) = v33;
  *((_DWORD *)v13 + 20) = v33 - v34;
  *((_DWORD *)v13 + 18) = 12 - v35;
  return result;
}

uint64_t sqlite3_key(uint64_t a1, _BYTE *a2, int a3)
{
  return sqlite3_key_v2(a1, 0, a2, a3);
}

uint64_t sqlite3_rekey_v2(sqlite3 *a1, _BYTE *a2, _BYTE *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _BYTE *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  char v32;
  int v33;
  char v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 block;
  __int128 v51;
  _OWORD v52[14];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  if (!dword_1EECAD0C0)
  {
    if (sqlite3_initialize())
    {
      if (dword_1EECAD0C0)
        goto LABEL_4;
LABEL_42:
      v16 = 21;
LABEL_43:
      *((_DWORD *)a1 + 20) = v16;
      return v16;
    }
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    *(_QWORD *)&v51 = sub_1ACBDF9F8;
    *((_QWORD *)&v51 + 1) = &unk_1E5C72CC0;
    *(_QWORD *)&v52[0] = 0;
    if (qword_1EECAD0B8 == -1)
    {
      if (!dword_1EECAD0C0)
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_1EECAD0B8, &block);
      if (!dword_1EECAD0C0)
        goto LABEL_42;
    }
  }
LABEL_4:
  sqlite3_exec(a1, "PRAGMA page_count", 0, 0, 0);
  v8 = *((_QWORD *)a1 + 3);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (!*((_BYTE *)a1 + 111))
  {
    sub_1ACBE9148((uint64_t)a1);
    if (a2)
      goto LABEL_8;
LABEL_20:
    LODWORD(v10) = 0;
    v11 = *((_QWORD *)a1 + 4);
    goto LABEL_21;
  }
  if (!a2)
    goto LABEL_20;
LABEL_8:
  v9 = *((unsigned int *)a1 + 10);
  if ((int)v9 < 1)
  {
LABEL_18:
    v16 = 1;
    goto LABEL_23;
  }
  v10 = 0;
  v11 = *((_QWORD *)a1 + 4);
  while (!*(_QWORD *)(v11 + 32 * v10 + 8))
  {
LABEL_10:
    if (++v10 == v9)
      goto LABEL_18;
  }
  v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (i = a2; ; ++i)
  {
    v14 = *i;
    v15 = *v12;
    if ((_DWORD)v14 == (_DWORD)v15)
      break;
    if (byte_1ACCB6333[v14] != byte_1ACCB6333[v15])
      goto LABEL_10;
LABEL_14:
    ++v12;
  }
  if (*i)
    goto LABEL_14;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_18;
LABEL_21:
  v17 = **(_QWORD **)(*(_QWORD *)(v11 + 32 * v10 + 8) + 8);
  if (*(_BYTE *)(v17 + 18))
  {
    v16 = 8;
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(v17 + 320);
  if (!v19)
  {
    sub_1ACBDFCC4((uint64_t)a1, 0, &byte_1ACCBEAEE, 0);
    v19 = *(_QWORD *)(v17 + 320);
    if (!v19)
    {
      v16 = 7;
      goto LABEL_23;
    }
  }
  v20 = *(unsigned __int8 *)(v17 + 21);
  if (!*(_BYTE *)(v17 + 21))
  {
    v16 = sub_1ACB69590(v17);
    if ((_DWORD)v16)
      goto LABEL_23;
  }
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v17 + 288))(v17, 1, &v49, 0);
  v22 = v21;
  if (v20 <= 1 && (_DWORD)v21 == 0)
  {
    v16 = sub_1ACBE063C(v17, 1, 0);
    if ((_DWORD)v16)
      goto LABEL_23;
    goto LABEL_46;
  }
  if (!(_DWORD)v21)
  {
LABEL_46:
    v24 = *(_DWORD *)(v17 + 32);
    goto LABEL_47;
  }
  v24 = 0;
LABEL_47:
  LOBYTE(v26) = 0;
  v27 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      block = xmmword_1ACCBDB40;
      v51 = xmmword_1ACCBDB50;
      v52[5] = xmmword_1ACCBDBB0;
      v52[6] = xmmword_1ACCBDBC0;
      v52[7] = xmmword_1ACCBDBD0;
      v52[8] = xmmword_1ACCBDBE0;
      v52[9] = xmmword_1ACCBDBF0;
      v52[10] = xmmword_1ACCBDC00;
      v52[11] = xmmword_1ACCBDC10;
      v52[12] = xmmword_1ACCBDC20;
      v52[13] = xmmword_1ACCBDC30;
      if (*a3)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v32 = *((_BYTE *)&block + v29);
          v33 = a3[v30];
          v31 += v32 + v33;
          v34 = *((_BYTE *)&block + v31);
          *((_BYTE *)&block + v31) = v32;
          *((_BYTE *)&block + v29++) = v34;
          if (v33)
            ++v30;
          else
            v30 = 0;
        }
        while (v29 != 256);
      }
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = *((_BYTE *)&block + v35 + 1);
        v36 += v37;
        *((_BYTE *)&block + v35 + 1) = *((_BYTE *)&block + v36);
        *((_BYTE *)&block + v36) = v37;
        *(_BYTE *)(v19 + 2 + v35) = *((_BYTE *)&block + v35 + 1) + v37;
        ++v35;
      }
      while (v35 != 32);
      v27 = 0;
      LOBYTE(v26) = 32;
    }
    else
    {
      v28 = 0;
      if (a4 >= 32)
        v26 = 32;
      else
        v26 = a4;
      do
      {
        *(_BYTE *)(v19 + 2 + v28) = a3[(int)v28 % v26];
        ++v28;
      }
      while (v28 != 32);
      v27 = 0;
    }
  }
  *(_BYTE *)v19 = v26;
  *(_BYTE *)(v19 + 1) = v27;
  if (v24 > 0 && !(_DWORD)v22)
  {
    v38 = dword_1EECAC650 / *(_DWORD *)(v19 + 76) + 1;
    v39 = 1;
    while (1)
    {
      if (v38 == (_DWORD)v39)
      {
        v22 = 0;
        goto LABEL_87;
      }
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v17 + 288))(v17, v39, &v48, 0);
      if ((_DWORD)v40)
      {
        v22 = v40;
        goto LABEL_93;
      }
      if (*((_DWORD *)a1 + 106))
      {
        *((_DWORD *)a1 + 106) = 0;
        v22 = 9;
LABEL_93:
        v45 = *(_OWORD *)(v19 + 34);
        v46 = *(_OWORD *)(v19 + 50);
        *(_OWORD *)v19 = v45;
        *(_OWORD *)(v19 + 16) = v46;
        *(_WORD *)(v19 + 32) = *(_WORD *)(v19 + 66);
        sub_1ACBA43F8(v17, *(double *)&v45);
        v16 = v22;
        goto LABEL_23;
      }
      v41 = *(_DWORD **)(v48 + 40);
      if ((*(_WORD *)(v48 + 52) & 4) == 0 || v41[8] < *(_DWORD *)(v48 + 48))
        break;
      if (v41[32])
      {
        v42 = sub_1ACBEA110(v48);
        goto LABEL_82;
      }
      v22 = 0;
      v43 = v48;
      if (v48)
      {
LABEL_84:
        if ((*(_WORD *)(v43 + 52) & 0x20) != 0)
        {
          v44 = *(_QWORD *)(v43 + 40);
          --*(_DWORD *)(v44 + 152);
          *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 168);
          *(_QWORD *)(v44 + 168) = v43;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v44 + 72) + 144))(*(_QWORD *)(v44 + 72), *(_QWORD *)(v44 + 200) * (*(_DWORD *)(v43 + 48) - 1), *(_QWORD *)(v43 + 8));
        }
        else
        {
          sub_1ACBE906C(v43);
        }
      }
LABEL_87:
      if ((int)v39 < v24)
      {
        v39 = (v39 + 1);
        if (!(_DWORD)v22)
          continue;
      }
      goto LABEL_92;
    }
    v22 = v41[12];
    if (!(_DWORD)v22)
    {
      if (v41[46] <= v41[50])
        v42 = sub_1ACB9A818(v48);
      else
        v42 = sub_1ACBEDEA4(v48);
LABEL_82:
      v22 = v42;
    }
    v43 = v48;
    if (v48)
      goto LABEL_84;
    goto LABEL_87;
  }
LABEL_92:
  if ((_DWORD)v22)
    goto LABEL_93;
  v47 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)(v19 + 34) = *(_OWORD *)v19;
  *(_OWORD *)(v19 + 50) = v47;
  *(_WORD *)(v19 + 66) = *(_WORD *)(v19 + 32);
  if (v20 > 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = sub_1ACB9E9C0(v17, 0, 0);
    if (!(_DWORD)v16)
      v16 = sub_1ACBE08BC(v17);
  }
LABEL_23:
  if (v49)
    sub_1ACBE097C(v49);
  if (!*((_BYTE *)a1 + 111))
    sub_1ACBE91DC((uint64_t)a1);
  v18 = *((_QWORD *)a1 + 3);
  if (v18)
    xmmword_1ECD3B1D0(v18);
  if ((_DWORD)v16)
    goto LABEL_43;
  return v16;
}

uint64_t sub_1ACBE063C(uint64_t a1, int a2, char a3)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v11;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = *(unsigned int *)(a1 + 48);
  if ((_DWORD)result)
    return result;
  *(_BYTE *)(a1 + 26) = a3;
  if (*(_BYTE *)(a1 + 21) != 1)
    return 0;
  v5 = *(_QWORD *)(a1 + 344);
  if (!v5)
  {
    v9 = *(unsigned __int8 *)(a1 + 22);
    if (v9 <= 5 && ((1 << v9) & 0x23) != 0)
    {
      if (*(_BYTE *)(a1 + 17))
      {
        if (v9 == 5)
          goto LABEL_17;
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 2);
        if ((_DWORD)result)
          return result;
        if (*(_BYTE *)(a1 + 22) == 5)
          goto LABEL_17;
      }
      *(_BYTE *)(a1 + 22) = 2;
    }
LABEL_17:
    if (a2)
    {
      while (1)
      {
        v11 = *(unsigned __int8 *)(a1 + 22);
        if (v11 >= 4 && v11 != 5)
          break;
        if (*(_BYTE *)(a1 + 17))
          goto LABEL_31;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 4);
        if ((_DWORD)result != 5)
        {
          if ((_DWORD)result)
            return result;
LABEL_31:
          *(_BYTE *)(a1 + 22) = 4;
          goto LABEL_39;
        }
        v13 = (*(uint64_t (**)(_QWORD))(a1 + 232))(*(_QWORD *)(a1 + 240));
        result = 5;
        if (!v13)
          return result;
      }
    }
    goto LABEL_39;
  }
  if (!*(_BYTE *)(a1 + 8))
    goto LABEL_38;
  v6 = (_BYTE *)(v5 + 63);
  if (*(_BYTE *)(v5 + 63))
    goto LABEL_38;
  v7 = *(unsigned __int8 *)(a1 + 22);
  if (v7 < 4 || v7 == 5)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      *(_BYTE *)(a1 + 22) = 4;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 4);
      if ((_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a1 + 344);
      v14 = *(unsigned __int8 *)(v5 + 63);
      v6 = (_BYTE *)(v5 + 63);
      *(_BYTE *)(a1 + 22) = 4;
      if (v14)
        goto LABEL_37;
    }
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 112))(*(_QWORD *)(v5 + 8), (*(__int16 *)(v5 + 60) + 3), 1, 5);
  v5 = *(_QWORD *)(a1 + 344);
LABEL_37:
  *v6 = 1;
LABEL_38:
  if (*(_BYTE *)(v5 + 64))
  {
LABEL_39:
    result = 0;
    *(_BYTE *)(a1 + 21) = 2;
    v15 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = v15;
    *(_DWORD *)(a1 + 44) = v15;
    *(_DWORD *)(a1 + 36) = v15;
    *(_QWORD *)(a1 + 96) = 0;
    return result;
  }
  if (*(_BYTE *)(v5 + 66))
    return 8;
  if (*(_BYTE *)(v5 + 63)
    || (result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 112))(*(_QWORD *)(v5 + 8), 0, 1, 10), !(_DWORD)result))
  {
    *(_BYTE *)(v5 + 64) = 1;
    v16 = **(uint64_t ***)(v5 + 48);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    v21 = v16[4];
    v22 = v16[5];
    if (*(_QWORD *)(v5 + 72) == v17
      && *(_QWORD *)(v5 + 80) == v18
      && *(_QWORD *)(v5 + 88) == v19
      && *(_QWORD *)(v5 + 96) == v20
      && *(_QWORD *)(v5 + 104) == v21
      && *(_QWORD *)(v5 + 112) == v22)
    {
      goto LABEL_39;
    }
    if (!*(_BYTE *)(v5 + 63))
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 112))(*(_QWORD *)(v5 + 8), 0, 1, 9);
    *(_BYTE *)(v5 + 64) = 0;
    return 517;
  }
  return result;
}

uint64_t sub_1ACBE08BC(uint64_t a1)
{
  uint64_t result;
  void *v4;

  result = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)result)
  {
    ++*(_DWORD *)(a1 + 132);
    if (*(_BYTE *)(a1 + 21) == 2 && *(_BYTE *)(a1 + 8) && *(_BYTE *)(a1 + 9) == 1)
    {
      result = 0;
      *(_BYTE *)(a1 + 21) = 1;
    }
    else
    {
      result = sub_1ACB8FD38(a1, *(unsigned __int8 *)(a1 + 24), 1);
      if (result == 13 || result == 10)
      {
        *(_DWORD *)(a1 + 48) = result;
        *(_BYTE *)(a1 + 21) = 6;
        if ((_DWORD)result)
        {
          v4 = sub_1ACBEBC4C;
        }
        else if (*(_BYTE *)(a1 + 27) && !*(_QWORD *)(a1 + 296))
        {
          v4 = sub_1ACBEBC58;
        }
        else
        {
          v4 = sub_1ACBEBEA8;
        }
        *(_QWORD *)(a1 + 288) = v4;
      }
    }
  }
  return result;
}

uint64_t sub_1ACBE097C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  double v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  result = sub_1ACBE906C(a1);
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 336) + 24))
  {
    v4 = *(unsigned __int8 *)(v1 + 21);
    if (*(_BYTE *)(v1 + 21))
    {
      if (v4 == 1)
      {
        if (!*(_BYTE *)(v1 + 8))
          sub_1ACB8FD38(v1, 0, 0);
      }
      else if (v4 != 6)
      {
        if (off_1EECAD248)
          v3 = off_1EECAD248(result);
        v5 = sub_1ACBA43F8(v1, v3);
        if (off_1EECAD250)
          off_1EECAD250(v5);
      }
    }
    return sub_1ACB90304(v1);
  }
  return result;
}

uint64_t sqlite3_rekey(sqlite3 *a1, _BYTE *a2, int a3)
{
  return sqlite3_rekey_v2(a1, 0, a2, a3);
}

const char *sqlite3_sourceid(void)
{
  return "2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl";
}

uint64_t sub_1ACBE0A30()
{
  return 0;
}

uint64_t sub_1ACBE0A38()
{
  return 0;
}

char *sub_1ACBE0A40(signed int a1)
{
  char *result;
  char *v3;
  char *v4;
  void (**v5)(char *);

  if (a1 <= 1)
  {
    result = (char *)sub_1ACB5D828(16);
    if (!result)
      return result;
    v3 = result;
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *(_DWORD *)result = a1;
    if (!*((_QWORD *)result + 1))
      goto LABEL_8;
    return v3;
  }
  if (a1 >= 0xE)
  {
    sub_1ACBBE20C(29126);
    return 0;
  }
  v3 = (char *)&unk_1ECD3BC40 + 16 * (a1 - 2);
  if (*((_QWORD *)v3 + 1))
    return v3;
LABEL_8:
  v4 = sub_1ACBE0DB4(a1);
  *((_QWORD *)v3 + 1) = v4;
  if (v4)
    result = v3;
  else
    result = 0;
  if (a1 <= 1 && !v4)
  {
    v5 = (void (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return 0;
      v5 = (void (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v5)(v3);
    return 0;
  }
  return result;
}

uint64_t sub_1ACBE0B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);
  uint64_t result;

  if (*(int *)a1 > 1)
    return sub_1ACBBE20C(29164);
  v1 = a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 8) <= 1u)
  {
    v3 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_9:
        v4 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          return (*v4)(v1);
        goto LABEL_13;
      }
      v3 = &xmmword_1ECD3B1D0;
    }
    (*v3)(v2);
    goto LABEL_9;
  }
  sub_1ACBBE20C(29570);
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v4)(v1);
LABEL_13:
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    return (*v4)(v1);
  }
  return result;
}

uint64_t sub_1ACBE0CE8(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t result;

  if (*(_DWORD *)a1 == -1)
  {
    v2 = *(os_unfair_lock_s **)(a1 + 8);
    if (v2[2]._os_unfair_lock_opaque == 1)
    {
      result = os_unfair_recursive_lock_trylock();
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      result = os_unfair_lock_trylock(v2);
      if ((result & 1) != 0)
        return result;
    }
    sub_1ACBE0E48();
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) == 1)
    return os_unfair_recursive_lock_lock_with_options();
  else
    return os_unfair_lock_lock_with_options();
}

uint64_t sub_1ACBE0D64(uint64_t a1)
{
  os_unfair_lock_s *v1;
  int v2;

  v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1)
    v2 = os_unfair_recursive_lock_trylock();
  else
    v2 = os_unfair_lock_trylock(v1);
  if (v2)
    return 0;
  else
    return 5;
}

void sub_1ACBE0D9C(uint64_t a1)
{
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1)
    os_unfair_recursive_lock_unlock();
  else
    os_unfair_lock_unlock(v1);
}

char *sub_1ACBE0DB4(unsigned int a1)
{
  char *result;
  int v2;

  if ((a1 & 0x80000000) != 0)
  {
    v2 = 29521;
    goto LABEL_11;
  }
  if (a1)
  {
    if (a1 == 1)
    {
      result = (char *)sub_1ACB5D828(12);
      if (result)
      {
        *(_QWORD *)result = 0;
        *((_DWORD *)result + 2) = 1;
      }
      return result;
    }
    if (a1 < 0xE)
      return (char *)&unk_1ECD3B940 + 64 * (unint64_t)(a1 - 2);
    v2 = 29549;
LABEL_11:
    sub_1ACBBE20C(v2);
    return 0;
  }
  result = (char *)sub_1ACB5D828(12);
  if (result)
  {
    *(_QWORD *)result = 0;
    *((_DWORD *)result + 2) = 0;
    *(_DWORD *)result = 0;
  }
  return result;
}

void sub_1ACBE0E48()
{
  sqlite3_log(1, "BUG IN CLIENT OF libsqlite3.dylib: illegal multi-threaded access to database connection");
  sqlite3_log(28, "Set a breakpoint in sqlite3MutexMisuseAssert to debug");
  if (qword_1EECAD0C8 != -1)
    dispatch_once(&qword_1EECAD0C8, &unk_1E5C72D00);
  if (byte_1EECAD0C4 != 1 || (dword_1ECD3B304 & 0x10) != 0)
  {
    qword_1EECAD050 = (uint64_t)"BUG IN CLIENT OF libsqlite3.dylib: illegal multi-threaded access to database connection";
    __break(1u);
  }
}

uint64_t sub_1ACBE0ED4()
{
  const char *v0;
  uint64_t result;

  v0 = getprogname();
  if (!strcmp(v0, "Paper"))
    byte_1EECAD0C4 = 1;
  if (!strcmp(v0, "GooglePhotos"))
    byte_1EECAD0C4 = 1;
  if (!strcmp(v0, "grindrx"))
    byte_1EECAD0C4 = 1;
  result = strcmp(v0, "AlipayWallet");
  if (!(_DWORD)result)
    byte_1EECAD0C4 = 1;
  return result;
}

uint64_t sub_1ACBE0F70()
{
  return 0;
}

uint64_t sub_1ACBE0F78()
{
  return 0;
}

uint64_t sub_1ACBE0F80()
{
  return 8;
}

uint64_t sub_1ACBE0F90()
{
  return 0;
}

_QWORD *sub_1ACBE0F9C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t (**v3)(_QWORD);

  v2 = a2;
  if (result)
  {
    if (result[64] > (unint64_t)a2)
    {
      if (result[62] <= (unint64_t)a2)
      {
        *a2 = result[61];
        result[61] = a2;
        return result;
      }
      if (result[63] <= (unint64_t)a2)
      {
        *a2 = result[59];
        result[59] = a2;
        return result;
      }
    }
    if (result[102])
      return (_QWORD *)sub_1ACBE10B0((uint64_t)result, (unint64_t)a2);
  }
  if (!a2)
    return result;
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (_QWORD *)(*v3)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = (_QWORD *)off_1ECD3B168(v2);
  v2 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (_QWORD *)(*v3)(v2);
  }
  return result;
}

uint64_t sub_1ACBE10B0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a1 && *(_QWORD *)(a1 + 520) > a2)
  {
    if (*(_QWORD *)(a1 + 496) <= a2)
    {
      result = 128;
      goto LABEL_6;
    }
    if (*(_QWORD *)(a1 + 504) <= a2)
    {
      result = *(unsigned __int16 *)(a1 + 438);
      goto LABEL_6;
    }
  }
  result = off_1ECD3B178(a2);
LABEL_6:
  **(_DWORD **)(a1 + 816) += result;
  return result;
}

uint64_t sub_1ACBE1124(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;

  if (*(unsigned __int16 *)(a1 + 436) < a2)
  {
    if (*(_DWORD *)(a1 + 432))
    {
      if (*(_BYTE *)(a1 + 103))
        return 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 452);
    }
    return sub_1ACBE1300(a1, a2);
  }
  if (a2 <= 0x80)
  {
    v3 = *(_QWORD **)(a1 + 488);
    if (v3)
    {
      *(_QWORD *)(a1 + 488) = *v3;
      goto LABEL_16;
    }
    v3 = *(_QWORD **)(a1 + 480);
    if (v3)
    {
      *(_QWORD *)(a1 + 480) = *v3;
      goto LABEL_16;
    }
  }
  v3 = *(_QWORD **)(a1 + 472);
  if (v3)
  {
    *(_QWORD *)(a1 + 472) = *v3;
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 464);
    if (!v3)
    {
      ++*(_DWORD *)(a1 + 456);
      return sub_1ACBE1300(a1, a2);
    }
    *(_QWORD *)(a1 + 464) = *v3;
  }
LABEL_16:
  ++*(_DWORD *)(a1 + 448);
  return (uint64_t)v3;
}

uint64_t sub_1ACBE11D0(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (*(_BYTE *)(a1 + 103))
    return 0;
  if (*(_QWORD *)(a1 + 504) > (unint64_t)a2 || *(_QWORD *)(a1 + 520) <= (unint64_t)a2)
  {
    v3 = sub_1ACB6BB48((uint64_t)a2, a3);
    if (v3)
      return v3;
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
      return 0;
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v15 = *(_QWORD *)(a1 + 344);
    if (!v15)
      return 0;
    sub_1ACBCB308(v15, "out of memory", v9, v10, v11, v12, v13, v14, v18);
    v16 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)(v16 + 24) = 7;
    v17 = *(_QWORD *)(v16 + 256);
    if (!v17)
      return 0;
    v3 = 0;
    do
    {
      ++*(_DWORD *)(v17 + 48);
      *(_DWORD *)(v17 + 24) = 7;
      v17 = *(_QWORD *)(v17 + 256);
    }
    while (v17);
  }
  else
  {
    v7 = (void *)sub_1ACBE1124(a1, a3);
    v3 = (uint64_t)v7;
    if (v7)
    {
      if (*(_QWORD *)(a1 + 496) <= (unint64_t)a2)
        v8 = 128;
      else
        v8 = *(unsigned __int16 *)(a1 + 438);
      memcpy(v7, a2, v8);
      if (a2)
        sub_1ACBE0F9C((_QWORD *)a1, a2);
    }
  }
  return v3;
}

uint64_t sub_1ACBE1300(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t i;
  char v13;

  v9 = sub_1ACB5D828(a2);
  if (!v9 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v11 = *(_QWORD *)(a1 + 344);
    if (v11)
    {
      sub_1ACBCB308(v11, "out of memory", v3, v4, v5, v6, v7, v8, v13);
      for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
  return v9;
}

void *sub_1ACBE13A0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  char v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 6);
  if (v2)
  {
    v4 = (void *)sub_1ACBE1124(v2, (v3 + 1));
    if (v4)
    {
LABEL_3:
      memcpy(v4, (const void *)a1[1], (*((_DWORD *)a1 + 6) + 1));
      *((_BYTE *)a1 + 29) |= 4u;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = (void *)sub_1ACB5D828((v3 + 1));
    if (v4)
      goto LABEL_3;
  }
  *((_BYTE *)a1 + 28) = 7;
  if (*((_DWORD *)a1 + 5))
  {
    v5 = *((_BYTE *)a1 + 29);
    if ((v5 & 4) != 0)
    {
      v6 = (_QWORD *)a1[1];
      if (v6)
      {
        sub_1ACBE0F9C((_QWORD *)*a1, v6);
        v5 = *((_BYTE *)a1 + 29);
      }
      *((_BYTE *)a1 + 29) = v5 & 0xFB;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
  }
LABEL_11:
  a1[1] = (uint64_t)v4;
  return v4;
}

os_log_t sub_1ACBE1450()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_t v3;
  uint64_t v4;
  os_log_t v5;
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  os_log_t v9;
  uint64_t v10;
  os_log_t result;
  uint64_t v12;

  v0 = os_log_create("com.apple.libsqlite3", "logging");
  v1 = MEMORY[0x1E0C81028];
  if (v0)
    v2 = (uint64_t)v0;
  else
    v2 = MEMORY[0x1E0C81028];
  qword_1ECD3EA48 = v2;
  v3 = os_log_create("com.apple.libsqlite3", "logging-persist");
  if (v3)
    v4 = (uint64_t)v3;
  else
    v4 = v1;
  qword_1ECD3EA50 = v4;
  v5 = os_log_create("com.apple.libsqlite3", "queries");
  if (v5)
    v6 = (uint64_t)v5;
  else
    v6 = v1;
  qword_1ECD3EA58 = v6;
  v7 = os_log_create("com.apple.libsqlite3", "queries_performance");
  if (v7)
    v8 = (uint64_t)v7;
  else
    v8 = v1;
  qword_1ECD3EA60 = v8;
  v9 = os_log_create("com.apple.libsqlite3", "queries_persist");
  if (v9)
    v10 = (uint64_t)v9;
  else
    v10 = v1;
  qword_1ECD3EA68 = v10;
  result = os_log_create("com.apple.libsqlite3", "connections");
  if (result)
    v12 = (uint64_t)result;
  else
    v12 = v1;
  qword_1ECD3EA70 = v12;
  return result;
}

uint64_t sub_1ACBE1538(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    xmmword_1ECD3B1C0(v5);
    v4 = *(_QWORD *)(a1 + 16);
  }
  if (*(unsigned __int8 *)(v4 + 32) <= 1u)
  {
    if (*(_BYTE *)(v4 + 33))
    {
      v6 = 0;
      v7 = 0;
      v8 = *(_QWORD *)(v4 + 16);
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
    v10 = *(unsigned int *)(a1 + 24);
    v11 = off_1EECAC970(v10, 92);
    if (v11 == -1)
    {
      if ((*__error() == 45 || *__error() == 25) && !off_1EECAC970(v10, 7))
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v6 = 0;
      v7 = 1;
LABEL_18:
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
    v7 = 0;
    *(_DWORD *)(a1 + 32) = *__error();
    v6 = 3594;
    goto LABEL_18;
  }
  v6 = 0;
  v7 = 1;
  v8 = *(_QWORD *)(v4 + 16);
  if (v8)
LABEL_8:
    xmmword_1ECD3B1D0(v8);
LABEL_9:
  *a2 = v7;
  return v6;
}

uint64_t sub_1ACBE1694(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (**v10)(_QWORD);
  uint64_t v11;
  int v12;

  v2 = *(_QWORD **)(a1 + 64);
  if (!v2)
    return 0;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 8);
  if (v6)
    xmmword_1ECD3B1C0(v6);
  v7 = (_QWORD *)(v5 + 56);
  do
  {
    v8 = v7;
    v9 = (_QWORD *)*v7;
    v7 = (_QWORD *)(*v7 + 8);
  }
  while (v9 != v2);
  *v8 = v2[1];
  v10 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = (_QWORD *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_12;
    v10 = &xmmword_1ECD3B1D0;
  }
  (*v10)(v2);
LABEL_12:
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_QWORD *)(v5 + 8);
  if (v11)
    xmmword_1ECD3B1D0(v11);
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v12 = *(_DWORD *)(v5 + 48) - 1;
  *(_DWORD *)(v5 + 48) = v12;
  if (!v12)
  {
    if (a2 == 1 && (*(_DWORD *)(v5 + 24) & 0x80000000) == 0)
      off_1EECACA48(*(_QWORD *)(v5 + 16));
    sub_1ACBE6B88(a1);
  }
  if (qword_1ECD3E950)
    xmmword_1ECD3B1D0(qword_1ECD3E950);
  return 0;
}

uint64_t sub_1ACBE1804(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 160) || (v9 = *(_QWORD *)(a1 + 64)) != 0 && *(_DWORD *)(*(_QWORD *)v9 + 168))
  {
    sqlite3_log(27, "denying read from invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    *a4 = 0;
    if (*(uint64_t *)(a1 + 96) < 1)
      return 0;
    if (*(_QWORD *)(a1 + 104) || (result = sub_1ACBE2EAC(a1, -1), !(_DWORD)result))
    {
      if (*(_QWORD *)(a1 + 80) < a2 + a3)
        return 0;
      result = 0;
      *a4 = *(_QWORD *)(a1 + 104) + a2;
      ++*(_DWORD *)(a1 + 76);
    }
  }
  return result;
}

uint64_t sub_1ACBE18D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    --*(_DWORD *)(a1 + 76);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 104);
    if (v4)
    {
      off_1EECACAF0(v4, *(_QWORD *)(a1 + 88));
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
  return 0;
}

void sub_1ACBE1928(uint64_t a1)
{
  _OWORD v2[9];
  _OWORD v3[9];

  if ((*(_WORD *)(a1 + 30) & 0x80) == 0)
  {
    memset(v2, 0, sizeof(v2));
    if (off_1EECAC940(*(unsigned int *)(a1 + 24), v2))
    {
      sqlite3_log(28, "cannot fstat db file %s");
    }
    else if (WORD3(v2[0]) == 1)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        memset(v3, 0, sizeof(v3));
        if (off_1EECAC928(*(_QWORD *)(a1 + 56), v3)
          || *((_QWORD *)&v3[0] + 1) != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
        {
          sqlite3_log(28, "file renamed while open: %s");
        }
      }
    }
    else if (WORD3(v2[0]))
    {
      sqlite3_log(28, "multiple links to file: %s");
    }
    else if ((*(_WORD *)(a1 + 30) & 0x20) == 0)
    {
      sqlite3_log(28, "file unlinked while open: %s");
    }
  }
}

uint64_t sub_1ACBE1A3C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return result;
  v2 = *(_DWORD *)(v1 + 48) - 1;
  *(_DWORD *)(v1 + 48) = v2;
  if (v2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
    xmmword_1ECD3B1C0(v4);
  sub_1ACBE2014(v3);
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
    xmmword_1ECD3B1D0(v5);
  v7 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  if (v6)
  {
    *(_QWORD *)(v6 + 64) = v7;
    v7 = *(_QWORD *)(v1 + 64);
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  qword_1ECD3EA80 = *(_QWORD *)(v1 + 64);
  if (v7)
LABEL_10:
    *(_QWORD *)(v7 + 72) = v6;
LABEL_11:
  if (*(_QWORD *)(v1 + 16))
    off_1ECD3B1B8();
  v8 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v8)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = &xmmword_1ECD3B1D0;
    return (*v8)(v1);
  }
  return result;
}

uint64_t sub_1ACBE1B6C(const char *a1, int a2, uint64_t a3)
{
  if (xmmword_1ECD3E960 == 0)
    return open(a1, a2, a3);
  else
    return guarded_open_np();
}

uint64_t sub_1ACBE1BC4(int a1)
{
  if (qword_1ECD3E970)
    return guarded_close_np();
  else
    return close(a1);
}

ssize_t sub_1ACBE1BE0(int a1, void *__buf, size_t __nbyte)
{
  if (qword_1ECD3E980)
    return guarded_write_np();
  else
    return write(a1, __buf, __nbyte);
}

ssize_t sub_1ACBE1C0C(int a1, void *__buf, size_t __nbyte, off_t a4)
{
  if (qword_1ECD3E978)
    return guarded_pwrite_np();
  else
    return pwrite(a1, __buf, __nbyte, a4);
}

uint64_t sub_1ACBE1C40()
{
  return sysconf(29);
}

uint64_t sub_1ACBE1C58(uint64_t a1, const char *a2, const char *a3, int __errnum, int a5)
{
  const char *v10;
  char __strerrbuf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(__errnum, __strerrbuf, 0x4FuLL);
  v10 = &byte_1ACCBEAEE;
  if (a3)
    v10 = a3;
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a5, __errnum, a2, v10, __strerrbuf);
  return a1;
}

uint64_t sub_1ACBE1D1C(int a1)
{
  return sub_1ACBE1FD0(14, a1, "cannot open file");
}

uint64_t sub_1ACBE1D30(char *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int *v12;
  char *v13;
  int v15;
  _OWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if ((_DWORD)a3)
    v7 = a3;
  else
    v7 = 420;
  v15 = a4 & (a2 << 22 >> 31);
  v8 = a2 & 0xA00;
  while (1)
  {
    while (off_1EECAC8C8 == sub_1ACBE1B6C)
    {
      if (xmmword_1ECD3E960 == 0)
      {
        v9 = open(a1, a2, v7);
        if ((v9 & 0x80000000) == 0)
          goto LABEL_15;
      }
      else
      {
        if (v15 && (_QWORD)xmmword_1ECD3E960)
        {
          v9 = guarded_open_dprotected_np();
          if ((v9 & 0x80000000) != 0)
            goto LABEL_19;
          goto LABEL_15;
        }
        v9 = guarded_open_np();
        if ((v9 & 0x80000000) == 0)
          goto LABEL_15;
      }
LABEL_19:
      if (*__error() != 4)
        return v9;
    }
    v9 = off_1EECAC8C8(a1, a2, v7);
    if ((v9 & 0x80000000) != 0)
      goto LABEL_19;
LABEL_15:
    if (v9 > 2)
      break;
    if (v8 == 2560)
      off_1EECACA48(a1);
    off_1EECAC8E0(v9);
    sqlite3_log(28, "attempt to open \"%s\" as file descriptor %d", a1, v9);
    if ((off_1EECAC8C8("/dev/null", 0, a3) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
  }
  if ((_DWORD)a3)
  {
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    memset(v16, 0, sizeof(v16));
    v10 = !off_1EECAC940(v9, v16) && (_QWORD)v17 == 0;
    if (v10 && (WORD2(v16[0]) & 0x1FF) != (_DWORD)a3)
      off_1EECACA18(v9, a3);
  }
  if (fcntl(v9, 95, 1) == -1)
  {
    v11 = *__error();
    v12 = __error();
    v13 = strerror(*v12);
    sqlite3_log(28, "Failed to confine fd %d for file %s (%d): %s", v9, a1, v11, v13);
  }
  return v9;
}

uint64_t sub_1ACBE1FD0(uint64_t a1, int a2, const char *a3)
{
  sqlite3_log(a1, "%s at line %d of [%.10s]", a3, a2, "1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl");
  return a1;
}

uint64_t sub_1ACBE2014(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  const char *v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  char __strerrbuf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(v8 + 40);
  if (v1)
  {
    v2 = result;
    do
    {
      v3 = *(_QWORD *)(v1 + 8);
      if ((*(_DWORD *)v1 & 0x80000000) == 0 && off_1EECAC8E0(*(_DWORD *)v1))
      {
        v4 = *(const char **)(v2 + 56);
        v5 = *__error();
        v12 = 0u;
        v13 = 0u;
        v10 = 0u;
        v11 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v5, __strerrbuf, 0x4FuLL);
        v6 = &byte_1ACCBEAEE;
        if (v4)
          v6 = v4;
        sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 41826, v5, "close", v6, __strerrbuf);
      }
      v7 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v1);
        v1 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v7 = &xmmword_1ECD3B1D0;
      }
      result = (*v7)(v1);
LABEL_4:
      v1 = v3;
    }
    while (v3);
  }
  *(_QWORD *)(v8 + 40) = 0;
  return result;
}

void sub_1ACBE21B4(uint64_t a1, int a2, int a3)
{
  const char *v5;
  int v6;
  const char *v7;
  char __strerrbuf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) == 0 && off_1EECAC8E0(a2))
  {
    if (a1)
      v5 = *(const char **)(a1 + 56);
    else
      v5 = 0;
    v6 = *__error();
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v6, __strerrbuf, 0x4FuLL);
    v7 = &byte_1ACCBEAEE;
    if (v5)
      v7 = v5;
    sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", a3, v6, "close", v7, __strerrbuf);
  }
}

uint64_t sub_1ACBE2298(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v8;
  const char *v9;
  char __strerrbuf[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *__error();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v8, __strerrbuf, 0x4FuLL);
  v9 = &byte_1ACCBEAEE;
  if (a3)
    v9 = a3;
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a4, v8, a2, v9, __strerrbuf);
  return a1;
}

uint64_t sub_1ACBE2360(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  char __strerrbuf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  v8 = off_1EECAC9A0(*(unsigned int *)(a1 + 24), a3, (int)a4, a2);
  if (v8 == v4)
  {
    v9 = 0;
    return v9 + v4;
  }
  v9 = 0;
  while ((v8 & 0x80000000) == 0)
  {
    if (!v8)
    {
      v4 = 0;
      return v9 + v4;
    }
    v4 -= v8;
    v6 += v8;
    v9 += v8;
    v5 += v8;
LABEL_5:
    v8 = off_1EECAC9A0(*(unsigned int *)(a1 + 24), v5, (int)v4, v6);
    if (v4 == v8)
      return v9 + v4;
  }
  if (*__error() == 4)
    goto LABEL_5;
  *(_DWORD *)(a1 + 32) = *__error();
  v10 = *(const char **)(a1 + 56);
  v11 = *__error();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v11, __strerrbuf, 0x4FuLL);
  v12 = &byte_1ACCBEAEE;
  if (v10)
    v12 = v10;
  sqlite3_log(266, "os_unix.c:%d: (%d) %s(%s) - %s", 44052, v11, "seekAndRead", v12, __strerrbuf);
  v9 = 0;
  v4 = v8;
  return v9 + v4;
}

ssize_t sub_1ACBE24EC(uint64_t a1, off_t a2, void *__buf, uint64_t a4)
{
  uint64_t v8;
  off_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ssize_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  size_t v27;
  int v28;
  const char *v29;
  const char *v30;
  char __strerrbuf[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 136);
  if (v8 < 1)
  {
    if (!v8 && *(_QWORD *)(a1 + 56))
    {
      v19 = *(_QWORD *)(a1 + 144);
      if ((uint64_t)(v19 + 10485760) < a2)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        if (off_1EECAC940(*(unsigned int *)(a1 + 24), __strerrbuf))
        {
          v19 = *(_QWORD *)(a1 + 144);
        }
        else
        {
          v19 = v38;
          *(_QWORD *)(a1 + 144) = v38;
        }
        if ((uint64_t)(v19 + 10485760) < a2)
        {
          if ((uint64_t)(v19 + (*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1)) < a2)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
              sub_1ACCB3E6C(a1 + 144, a2, a4, v20, v21, v22, v23, v24);
            goto LABEL_12;
          }
          v19 = *(_QWORD *)(a1 + 144);
        }
      }
      v25 = a2 + (int)a4;
      if (v19 > v25)
        v25 = v19;
      *(_QWORD *)(a1 + 144) = v25;
    }
  }
  else
  {
    v9 = v8 + 10485760;
    if (*(_QWORD *)(a1 + 56))
      v10 = v9 < a2;
    else
      v10 = 0;
    if (v10)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      v11 = off_1EECAC940(*(unsigned int *)(a1 + 24), __strerrbuf);
      v12 = *(_QWORD *)(a1 + 136);
      if (!v11)
      {
        sqlite3_log(1, "seekAndWrite: updated file size hint from %lld to actual size %lld", *(_QWORD *)(a1 + 136), (_QWORD)v38);
        v12 = v38;
        *(_QWORD *)(a1 + 136) = v38;
      }
      if (v12 + 10485760 < a2)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          sub_1ACCB3DE8(a2, a4, v12, v13, v14, v15, v16, v17);
LABEL_12:
        *(_DWORD *)(a1 + 32) = 22;
        return 0xFFFFFFFFLL;
      }
    }
  }
  v26 = *(_DWORD *)(a1 + 24);
  v27 = a4 & 0x1FFFF;
  while (1)
  {
    v18 = off_1EECAC9E8(v26, __buf, v27, a2);
    if ((v18 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
    {
      v28 = *__error();
      *(_DWORD *)(a1 + 32) = v28;
      v29 = *(const char **)(a1 + 56);
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v28, __strerrbuf, 0x4FuLL);
      v30 = &byte_1ACCBEAEE;
      if (v29)
        v30 = v29;
      sqlite3_log(778, "os_unix.c:%d: (%d) %s(%s) - %s", 44287, v28, "seekAndWrite", v30, __strerrbuf);
      return v18;
    }
  }
  return v18;
}

uint64_t sub_1ACBE2784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(_DWORD *)(a3 + 132))
  {
    result = off_1EECAC970(a1, 93);
    if ((_DWORD)result != -1)
      return result;
    if (*__error() == 45 || *__error() == 25)
      return off_1EECAC970(a1, 10);
    return 0xFFFFFFFFLL;
  }
  result = off_1EECAC970(a1, 90);
  if ((_DWORD)result != -1)
    return result;
  if (*__error() != 45 && *__error() != 25)
    return 0xFFFFFFFFLL;
  return off_1EECAC970(a1, 8);
}

uint64_t sub_1ACBE28AC(uint64_t a1, signed int a2, int a3)
{
  unsigned int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v3 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v3 <= a2)
    return 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v3 = *(unsigned __int8 *)(a1 + 28);
  }
  if (v3 < 2)
  {
LABEL_52:
    if (a2)
    {
      v13 = 0;
      goto LABEL_68;
    }
    v30 = *(_DWORD *)(v7 + 24) - 1;
    *(_DWORD *)(v7 + 24) = v30;
    if (v30)
    {
      v13 = 0;
      goto LABEL_66;
    }
    HIDWORD(v39) = 2;
    v37 = 0;
    v38 = 0;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(unsigned int *)(v31 + 88);
    if ((_DWORD)v32 == -1)
    {
      v32 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v31 + 88) = v32;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v31 + 33))
        goto LABEL_65;
      v40 = dword_1EECAC650 + 2;
      v41 = xmmword_1ACCBDC50;
      v33 = sub_1ACBE2784(v32, (uint64_t)&v40, a1);
      if (v33 < 0)
      {
LABEL_64:
        *(_DWORD *)(a1 + 32) = *__error();
        *(_BYTE *)(v7 + 32) = 0;
        *(_BYTE *)(a1 + 28) = 0;
        v13 = 2058;
        goto LABEL_66;
      }
      *(_BYTE *)(v31 + 33) = 1;
      ++*(_DWORD *)(v31 + 28);
    }
    else
    {
      v33 = sub_1ACBE2784(v32, (uint64_t)&v37, a1);
    }
    if (v33)
      goto LABEL_64;
LABEL_65:
    v13 = 0;
    *(_BYTE *)(v7 + 32) = 0;
LABEL_66:
    v34 = *(_DWORD *)(v7 + 28) - 1;
    *(_DWORD *)(v7 + 28) = v34;
    if (!v34)
    {
      *(_DWORD *)(v7 + 88) = -1;
      sub_1ACBE2014(a1);
    }
    goto LABEL_68;
  }
  if (a2 != 1)
    goto LABEL_42;
  if (a3)
  {
    HIDWORD(v39) = 2;
    v9 = dword_1EECAC650 + 2;
    v37 = v9;
    v38 = 509;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(unsigned int *)(v10 + 88);
    if ((_DWORD)v11 == -1)
    {
      v11 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v10 + 88) = v11;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v10 + 33))
        goto LABEL_22;
      v40 = v9;
      v41 = xmmword_1ACCBDC50;
      v12 = sub_1ACBE2784(v11, (uint64_t)&v40, a1);
      if ((v12 & 0x80000000) == 0)
      {
        *(_BYTE *)(v10 + 33) = 1;
        ++*(_DWORD *)(v10 + 28);
        goto LABEL_22;
      }
    }
    else
    {
      v12 = sub_1ACBE2784(v11, (uint64_t)&v37, a1);
    }
    if (v12 == -1)
      goto LABEL_50;
LABEL_22:
    HIDWORD(v39) = 1;
    v18 = dword_1EECAC650 + 2;
    v37 = v18;
    v38 = 509;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(unsigned int *)(v19 + 88);
    if ((_DWORD)v20 == -1)
    {
      v20 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v19 + 88) = v20;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(_BYTE *)(v19 + 33))
      {
LABEL_30:
        HIDWORD(v39) = 2;
        v22 = dword_1EECAC650;
        v37 = dword_1EECAC650 + 511;
        v38 = 1;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = *(unsigned int *)(v23 + 88);
        if ((_DWORD)v24 == -1)
        {
          v24 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v23 + 88) = v24;
        }
        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          v25 = sub_1ACBE2784(v24, (uint64_t)&v37, a1);
          goto LABEL_37;
        }
        if (!*(_BYTE *)(v23 + 33))
        {
          v40 = v22 + 2;
          v41 = xmmword_1ACCBDC50;
          v25 = sub_1ACBE2784(v24, (uint64_t)&v40, a1);
          if ((v25 & 0x80000000) == 0)
          {
            *(_BYTE *)(v23 + 33) = 1;
            ++*(_DWORD *)(v23 + 28);
            goto LABEL_42;
          }
LABEL_37:
          if (v25 == -1)
            goto LABEL_50;
        }
LABEL_42:
        HIDWORD(v39) = 2;
        v26 = dword_1EECAC650;
        v37 = dword_1EECAC650;
        v38 = 2;
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(unsigned int *)(v27 + 88);
        if ((_DWORD)v28 == -1)
        {
          v28 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v27 + 88) = v28;
        }
        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          v29 = sub_1ACBE2784(v28, (uint64_t)&v37, a1);
LABEL_49:
          if (v29)
            goto LABEL_50;
          goto LABEL_51;
        }
        if (*(_BYTE *)(v27 + 33))
        {
LABEL_51:
          *(_BYTE *)(v7 + 32) = 1;
          goto LABEL_52;
        }
        v40 = v26 + 2;
        v41 = xmmword_1ACCBDC50;
        v29 = sub_1ACBE2784(v28, (uint64_t)&v40, a1);
        if ((v29 & 0x80000000) == 0)
        {
          *(_BYTE *)(v27 + 33) = 1;
          ++*(_DWORD *)(v27 + 28);
          goto LABEL_49;
        }
LABEL_50:
        *(_DWORD *)(a1 + 32) = *__error();
        v13 = 2058;
        goto LABEL_68;
      }
      v40 = v18;
      v41 = xmmword_1ACCBDC50;
      v21 = sub_1ACBE2784(v20, (uint64_t)&v40, a1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_BYTE *)(v19 + 33) = 1;
        ++*(_DWORD *)(v19 + 28);
        goto LABEL_30;
      }
    }
    else
    {
      v21 = sub_1ACBE2784(v20, (uint64_t)&v37, a1);
    }
    if (v21 == -1)
      goto LABEL_50;
    goto LABEL_30;
  }
  HIDWORD(v39) = 1;
  v14 = dword_1EECAC650 + 2;
  v37 = v14;
  v38 = 510;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(unsigned int *)(v15 + 88);
  if ((_DWORD)v16 == -1)
  {
    v16 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(v15 + 88) = v16;
  }
  if ((*(_WORD *)(a1 + 30) & 3) != 1)
  {
    v17 = sub_1ACBE2784(v16, (uint64_t)&v37, a1);
LABEL_40:
    if (!v17)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (*(_BYTE *)(v15 + 33))
    goto LABEL_42;
  v40 = v14;
  v41 = xmmword_1ACCBDC50;
  v17 = sub_1ACBE2784(v16, (uint64_t)&v40, a1);
  if ((v17 & 0x80000000) == 0)
  {
    *(_BYTE *)(v15 + 33) = 1;
    ++*(_DWORD *)(v15 + 28);
    goto LABEL_40;
  }
LABEL_41:
  *(_DWORD *)(a1 + 32) = *__error();
  v13 = 2314;
LABEL_68:
  v35 = *(_QWORD *)(v7 + 16);
  if (v35)
    xmmword_1ECD3B1D0(v35);
  if (!(_DWORD)v13)
    *(_BYTE *)(a1 + 28) = a2;
  return v13;
}

uint64_t sub_1ACBE2D68(int a1, char *a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t __buf;

  *a2 = 0;
  if ((_BYTE)word_1ECD3B144)
  {
    v4 = qword_1ECD3B1B0(11);
    if (v4)
      xmmword_1ECD3B1C0(v4);
  }
  v5 = (const char *)sub_1ACBE3224();
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = a1 - 2;
    while (1)
    {
      __buf = 0;
      sqlite3_initialize();
      arc4random_buf(&__buf, 8uLL);
      a2[v8] = 0;
      sqlite3_snprintf(a1, a2, "%s/etilqs_%llx%c", v6, __buf, 0);
      if (a2[v8] || v7 > 0xA)
        break;
      ++v7;
      if (off_1EECAC8F8(a2, 0))
      {
        v10 = 0;
        if ((_BYTE)word_1ECD3B144)
          goto LABEL_16;
        return v10;
      }
    }
    v10 = 1;
    if (!(_BYTE)word_1ECD3B144)
      return v10;
  }
  else
  {
    v10 = 6410;
    if (!(_BYTE)word_1ECD3B144)
      return v10;
  }
LABEL_16:
  v11 = qword_1ECD3B1B0(11);
  if (v11)
    xmmword_1ECD3B1D0(v11);
  return v10;
}

uint64_t sub_1ACBE2EAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  char __strerrbuf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 76) > 0)
    return 0;
  if (a2 < 0)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    if (off_1EECAC940(*(unsigned int *)(a1 + 24), __strerrbuf))
      return 1802;
    a2 = v19;
  }
  v4 = a2 >= *(_QWORD *)(a1 + 96) ? *(_QWORD *)(a1 + 96) : a2;
  if (v4 == *(_QWORD *)(a1 + 80))
    return 0;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5)
    goto LABEL_21;
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 80) & (int)-off_1EECACB20();
  if (v6 != v7)
    off_1EECACAF0(v5 + v7, v6 - v7);
  v8 = off_1EECACAD8(v5 + v7, v4 - v7, 1, 1);
  if (v8 == -1)
  {
    v9 = -1;
  }
  else
  {
    v9 = v5;
    if (v8 != v5 + v7)
    {
      off_1EECACAF0(v8, v4 - v7);
      v9 = 0;
    }
  }
  if ((unint64_t)(v9 + 1) <= 1)
  {
    off_1EECACAF0(v5, v7);
    if (!v9)
LABEL_21:
      v9 = off_1EECACAD8(0, v4, 1, 1);
  }
  if (v9 == -1)
  {
    v10 = *(const char **)(a1 + 56);
    v11 = *__error();
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v11, __strerrbuf, 0x4FuLL);
    v12 = &byte_1ACCBEAEE;
    if (v10)
      v12 = v10;
    sqlite3_log(0, "os_unix.c:%d: (%d) %s(%s) - %s", 47829, v11, "mmap", v12, __strerrbuf);
    v9 = 0;
    v4 = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = v4;
  return result;
}

void sub_1ACBE30F4()
{
  char *v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  const char *v12;
  int *v13;
  _OWORD v14[9];

  memset(v14, 0, sizeof(v14));
  v0 = sqlite3_temp_directory;
  v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
  if (v1)
    sub_1ACCB3EF4(v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = 0;
  if (v0)
  {
LABEL_4:
    *__error() = 0;
    off_1EECAC928(v0, v14);
    v10 = *__error();
    if ((WORD2(v14[0]) & 0xF000) == 0x4000)
      v11 = &byte_1ACCBEAEE;
    else
      v11 = " is not a directory";
    if (v10)
      v12 = &byte_1ACCBEAEE;
    else
      v12 = v11;
    *__error() = 0;
    off_1EECAC8F8(v0, 3);
    v13 = __error();
    sqlite3_log(1, "\t Attempted temporary directory at path '%s' with stat() errno %d and access errno %d%s\n", v0, v10, *v13, v12);
  }
  while (v9 != 7)
  {
    v0 = (char *)qword_1ECD3BD00[v9++];
    if (v0)
      goto LABEL_4;
  }
}

void *sub_1ACBE3224()
{
  uint64_t v0;
  void *v1;
  void **v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v0 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  v1 = sqlite3_temp_directory;
  if (!sqlite3_temp_directory)
  {
LABEL_5:
    while (v0 != 7)
    {
      v2 = (void **)&qword_1ECD3BD00[v0++];
      v1 = *v2;
      if (*v2)
        goto LABEL_2;
    }
    if (qword_1ECD3BD08)
    {
      v1 = malloc_type_calloc(1uLL, 0x400uLL, 0x4A773900uLL);
      if (confstr(65537, (char *)v1, 0x400uLL))
      {
        if (v1)
        {
          qword_1ECD3BD08 = (uint64_t)v1;
          v12 = 0u;
          v13 = 0u;
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v17 = 0u;
          v18 = 0u;
          v19 = 0u;
          v20 = 0u;
          if (!off_1EECAC928(v1, &v12)
            && (WORD2(v12) & 0xF000) == 0x4000
            && !off_1EECAC8F8(v1, 3))
          {
            v3 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
            if (v3)
              sub_1ACCB3F28(v3, v4, v5, v6, v7, v8, v9, v10);
            return v1;
          }
        }
      }
      else
      {
        free(v1);
      }
    }
    sub_1ACBE30F4();
    return 0;
  }
LABEL_2:
  if (off_1EECAC928(v1, &v12) || (WORD2(v12) & 0xF000) != 0x4000 || off_1EECAC8F8(v1, 3))
    goto LABEL_5;
  return v1;
}

uint64_t sub_1ACBE33A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v11;
  char v12;
  _BOOL4 v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  CC_LONG v19;
  int v20;
  int v21;
  int8x16_t v22;
  uint8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  int8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  const char *v42;
  int v43;
  const char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _OWORD v53[4];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  CC_SHA256_CTX c;
  char v60[1024];
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64[1024];
  __int128 v65;
  unsigned __int8 md[16];
  uint8x16_t v67;
  uint64_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;

  v68 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v1 + 40))
    return 0;
  v4 = *(_QWORD *)v1;
  v65 = 0uLL;
  v5 = sub_1ACBE467C(a1, (uint64_t)&v65, 1);
  if (!(_DWORD)v5)
  {
    v9 = sub_1ACBE2360(v4, 0, (uint64_t)&v61, 0x411u);
    if ((v9 & 0x80000000) != 0)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v12 = 0;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v4 + 32);
      v2 = 266;
      goto LABEL_68;
    }
    if (v9 < 0x12 || v61 != 2)
    {
      v6 = 0;
      v8 = 0;
      v11 = 1;
      v7 = 1;
      goto LABEL_28;
    }
    v14 = v62 != (_QWORD)v65 || v63 != *((_QWORD *)&v65 + 1);
    if (*(_QWORD *)(v1 + 24))
    {
      if (!v14)
      {
        v11 = 0;
        v7 = 0;
        v6 = 0;
        v2 = 0;
        v12 = 0;
        v8 = 1;
        if (!strncmp(*(const char **)(v1 + 24), v64, v9 - 17))
          goto LABEL_68;
        goto LABEL_28;
      }
    }
    else if (!v14)
    {
      if (v9 - 17 >= 0x3FF)
        v15 = 1023;
      else
        v15 = v9 - 17;
      v6 = v60;
      __memcpy_chk();
      v2 = 0;
      v7 = 0;
      v60[v15] = 0;
      v8 = 1;
      v12 = 1;
      goto LABEL_68;
    }
    v11 = 0;
    v7 = 0;
    v6 = 0;
    v8 = 0;
    goto LABEL_28;
  }
  v2 = v5;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v12 = 0;
LABEL_68:
    if ((_DWORD)v2)
      goto LABEL_95;
    if (!*(_DWORD *)(a1 + 120))
      goto LABEL_77;
    v41 = *(_DWORD *)(a1 + 24);
    if ((v41 & 0x80000000) == 0 && off_1EECAC8E0(v41))
    {
      v42 = *(const char **)(a1 + 56);
      v43 = *__error();
      memset(&c, 0, 80);
      strerror_r(v43, (char *)&c, 0x4FuLL);
      v44 = &byte_1ACCBEAEE;
      if (v42)
        v44 = v42;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50975, v43, "close", v44, (const char *)&c);
    }
    *(_DWORD *)(a1 + 24) = -1;
    v45 = sub_1ACBE1D30(*(char **)(v1 + 32), *(_DWORD *)(a1 + 120), 0, 0);
    if (v45 < 0)
      break;
    *(_DWORD *)(a1 + 24) = v45;
LABEL_77:
    if (*(_QWORD *)(v1 + 16))
    {
      v2 = 0;
LABEL_85:
      if ((_DWORD)v2 || !v6)
      {
        if ((_DWORD)v2)
          goto LABEL_95;
        v51 = *(_QWORD *)(v1 + 16);
      }
      else
      {
        v48 = strlen(v6) + 1;
        v49 = (void *)sub_1ACB5D828(v48);
        if (!v49)
        {
          *(_QWORD *)(v1 + 24) = 0;
          *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56) = 0;
          v2 = 7;
          goto LABEL_95;
        }
        v50 = v49;
        memcpy(v49, v6, v48);
        *(_QWORD *)(v1 + 24) = v50;
        v51 = *(_QWORD *)(v1 + 16);
        *(_QWORD *)(v51 + 56) = v50;
      }
      *(_DWORD *)(v1 + 40) = 1;
      if (*(_UNKNOWN **)v51 == &unk_1E5C72E78)
      {
        v2 = 0;
        *(_QWORD *)(*(_QWORD *)(v51 + 40) + 8) = *(_QWORD *)(v1 + 24);
        return v2;
      }
      return 0;
    }
    v46 = v6;
    if (!v6)
      v46 = *(char **)(v1 + 24);
    v47 = sub_1ACBE4B6C(v46, (uint64_t *)(v1 + 16), 1);
    v2 = v47;
    if ((v12 & 1) == 0 || !(_DWORD)v47 || (_DWORD)v47 == 7)
      goto LABEL_85;
    v11 = v7 != 0;
LABEL_28:
    v2 = 5;
    if ((*(_BYTE *)(v4 + 120) & 2) != 0)
    {
      if (!*(_QWORD *)(v1 + 24))
      {
        v16 = *(char **)(v1 + 32);
        v6 = v60;
        if (confstr(65537, v60, 0x400uLL))
        {
          v17 = __strlcat_chk();
          if (v60[v17 - 1] != 47)
            v17 = __strlcat_chk();
          v18 = strlen(v16);
          v19 = v18;
          if (v18 > 248 || ((unint64_t)(v18 + v17) << 32) - 0x3F900000001 < 0xFFFFFBFFFFFFFFFFLL)
          {
            memset(&c, 0, sizeof(c));
            CC_SHA256_Init(&c);
            CC_SHA256_Update(&c, v16, v19);
            CC_SHA256_Final(md, &c);
            v22.i64[0] = 0x3030303030303030;
            v22.i64[1] = 0x3030303030303030;
            v23.i64[0] = 0x3030303030303030;
            v23.i64[1] = 0x3030303030303030;
            v24 = (int8x16_t)vsraq_n_u8(v23, *(uint8x16_t *)md, 4uLL);
            v25.i64[0] = 0x3030303030303030;
            v25.i64[1] = 0x3030303030303030;
            v26 = (int8x16_t)vsraq_n_u8(v25, v67, 4uLL);
            v27.i64[0] = 0x3939393939393939;
            v27.i64[1] = 0x3939393939393939;
            v28.i64[0] = 0x5757575757575757;
            v28.i64[1] = 0x5757575757575757;
            v29.i64[0] = 0x5757575757575757;
            v29.i64[1] = 0x5757575757575757;
            v30.i64[0] = 0x5757575757575757;
            v30.i64[1] = 0x5757575757575757;
            v70.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v24, v27), (int8x16_t)vsraq_n_u8(v29, *(uint8x16_t *)md, 4uLL), v24);
            v24.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v24.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            v31 = vandq_s8(*(int8x16_t *)md, v24);
            v32 = vorrq_s8(v31, v22);
            v70.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v27), vaddq_s8(v31, v28), v32);
            v69.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v26, v27), (int8x16_t)vsraq_n_u8(v30, v67, 4uLL), v26);
            v33 = vandq_s8((int8x16_t)v67, v24);
            v34 = vorrq_s8(v33, v22);
            v69.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v27), vaddq_s8(v33, v28), v34);
            v35 = (char *)v53;
            vst2q_s8(v35, v70);
            v35 += 32;
            vst2q_s8(v35, v69);
            LOWORD(v54) = 45;
            __strlcat_chk();
            strrchr(v16, 47);
            __strlcat_chk();
          }
          else
          {
            if (v18 >= 1)
            {
              v20 = 0;
              while (1)
              {
                v21 = v16[v20];
                if (v20 + 2 >= v18 || v21 != 46 || v16[v20 + 1] != 47)
                  break;
                if (v20)
                {
                  if (v16[v20 - 1] != 47)
                    break;
                  ++v20;
                }
                else
                {
                  v20 = 1;
                }
LABEL_40:
                if (++v20 >= v18)
                  goto LABEL_49;
              }
              if (v21 == 47)
                LOBYTE(v21) = 95;
              v60[v17++] = v21;
              goto LABEL_40;
            }
LABEL_49:
            v60[v17] = 0;
          }
          v6 = v60;
          __strlcat_chk();
        }
      }
      futimes(*(_DWORD *)(v4 + 24), 0);
      if (v8)
        v36 = v11;
      else
        v36 = 1;
      if ((v36 & 1) != 0 || (v37 = *(_QWORD *)(v4 + 16)) == 0 || (v2 = 5, *(int *)(v37 + 24) <= 1))
      {
        v2 = sub_1ACBE467C(a1, (uint64_t)&v65, 4);
        if (!(_DWORD)v2)
        {
          LOBYTE(c.count[0]) = 2;
          *(_OWORD *)((char *)c.count + 1) = v65;
          __strlcpy_chk();
          v38 = *(unsigned int *)(v4 + 24);
          v39 = (int)(strlen((const char *)&c.hash[2] + 1) + 17);
          while ((off_1EECAC958(v38, v39) & 0x80000000) != 0 && *__error() == 4)
            ;
          v2 = sub_1ACB9ED20(v4, (char *)&c, v39, 0);
          fsync(*(_DWORD *)(v4 + 24));
          v40 = !v11;
          if ((_DWORD)v2)
            v40 = 1;
          if ((v40 & 1) == 0)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v54 = 0u;
            memset(v53, 0, sizeof(v53));
            if (!off_1EECAC940(*(unsigned int *)(a1 + 24), v53))
              off_1EECACA18(*(unsigned int *)(v4 + 24), WORD2(v53[0]) & 0x1B6);
          }
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, 1);
    }
  }
  v2 = sub_1ACBE1D1C(50984);
LABEL_95:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 64))(v4, 0);
  return v2;
}

uint64_t sub_1ACBE3AB0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  const char *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void (**v13)(uint64_t);
  uint64_t v14;
  uint64_t (**v15)(uint64_t);
  uint64_t v16;
  uint64_t (**v17)(uint64_t);
  uint64_t (**v18)(uint64_t *);
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  char *v41;
  char v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  _OWORD v49[9];
  statfs v50;
  char __s[1025];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 28))
    return 5;
  if (*(_UNKNOWN **)a1 != &unk_1E5C72E78 && *(_UNKNOWN **)a1 == &unk_1E5C73040)
  {
    strlen(*(const char **)(a1 + 40));
    __memcpy_chk();
    if (!a2)
      goto LABEL_14;
  }
  else
  {
    __strlcpy_chk();
    if (!a2)
      goto LABEL_14;
  }
  if (*a2)
  {
    if (!strcmp(a2, ":auto:"))
      v5 = 0;
    else
      v5 = a2;
    if (sqlite3_initialize())
      return 7;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if (sqlite3_initialize())
    return 7;
LABEL_15:
  v6 = (uint64_t *)sub_1ACB5D828(64);
  if (!v6)
    return 7;
  v7 = v6;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v8 = v6 + 1;
  v9 = strlen(__s);
  v10 = sqlite3_initialize();
  v11 = v8;
  if (!v10)
  {
    v20 = (_BYTE *)sub_1ACB5D828((uint64_t)((v9 << 32) + 0x800000000) >> 32);
    *v8 = v20;
    if (!v20)
      goto LABEL_18;
    v21 = v20;
    memcpy(v20, __s, (uint64_t)((v9 << 32) + 0x100000000) >> 32);
    v22 = (v9 & ((int)v9 >> 31)) - 1;
    v23 = v9 - 1;
    v24 = v9;
    while (1)
    {
      v25 = __OFSUB__(v24--, 1);
      if (v24 < 0 != v25)
        break;
      v26 = v21[v23--];
      if (v26 == 47)
      {
        v22 = v24 + 1;
        break;
      }
    }
    v27 = v22;
    v21[v22] = 46;
    if (v22 >= (int)v9)
    {
LABEL_71:
      strcpy(&v21[v22 + 1], "-conch");
      v2 = sub_1ACBE4B6C((char *)v7[1], v7, 0);
      if ((_DWORD)v2 == 14)
      {
        if ((*(_BYTE *)(a1 + 120) & 2) != 0)
        {
          v2 = 14;
          goto LABEL_19;
        }
        memset(&v50, 0, 512);
        memset(v49, 0, sizeof(v49));
        if (off_1EECAC928(*v8, v49) == -1
          && *__error() == 2
          && statfs(__s, &v50) != -1
          && (v50.f_flags & 1) != 0)
        {
          v2 = 0;
          *((_DWORD *)v7 + 10) = -1;
          if (!v5)
            goto LABEL_85;
          goto LABEL_79;
        }
        v2 = 14;
      }
      if (!v5)
        goto LABEL_85;
LABEL_79:
      if (!(_DWORD)v2)
      {
        v43 = strlen(v5) + 1;
        v44 = (void *)sub_1ACB5D828(v43);
        if (!v44)
        {
          v11 = v7 + 3;
          goto LABEL_17;
        }
        v45 = (uint64_t)v44;
        memcpy(v44, v5, v43);
        v7[3] = v45;
LABEL_86:
        v46 = strlen(__s) + 1;
        v47 = (void *)sub_1ACB5D828(v46);
        if (v47)
        {
          v48 = (uint64_t)v47;
          memcpy(v47, __s, v46);
          v2 = 0;
          v7[4] = v48;
          v7[6] = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v7;
          v7[7] = *(_QWORD *)a1;
          *(_QWORD *)a1 = &unk_1E5C730D8;
          return v2;
        }
        v11 = v7 + 4;
        goto LABEL_17;
      }
LABEL_85:
      if ((_DWORD)v2)
        goto LABEL_19;
      goto LABEL_86;
    }
    v28 = (int)v9 - (uint64_t)v22;
    if (v28 >= 8 && (unint64_t)(v21 - __s + 1) >= 0x20)
    {
      if (v28 < 0x20)
      {
        v29 = 0;
        goto LABEL_63;
      }
      v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      v30 = &v21[v22 + 17];
      v31 = &__s[v22 + 16];
      v32 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 += 2;
        v31 += 32;
        v32 -= 32;
      }
      while (v32);
      if (v28 == v29)
        goto LABEL_70;
      if ((v28 & 0x18) != 0)
      {
LABEL_63:
        v34 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
        v35 = v29 + v22;
        v36 = &__s[v35];
        v37 = &v21[v35 + 1];
        do
        {
          v38 = *(_QWORD *)v36;
          v36 += 8;
          *v37++ = v38;
          v34 += 8;
        }
        while (v34);
        v27 = (v28 & 0xFFFFFFFFFFFFFFF8) + v22;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_70;
        goto LABEL_68;
      }
      v27 = v29 + v22;
    }
LABEL_68:
    v39 = (int)v9 - v27;
    v40 = &v21[v27 + 1];
    v41 = &__s[v27];
    do
    {
      v42 = *v41++;
      *v40++ = v42;
      --v39;
    }
    while (v39);
LABEL_70:
    v22 = v9;
    goto LABEL_71;
  }
LABEL_17:
  *v11 = 0;
LABEL_18:
  v2 = 7;
LABEL_19:
  if (*v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 8))(*v7);
    v12 = *v7;
    if (*v7)
    {
      v13 = (void (**)(uint64_t))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_26:
        (*v13)(v12);
        goto LABEL_27;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v12);
      v12 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v13 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  v14 = v7[3];
  if (!v14)
    goto LABEL_34;
  v15 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_33;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v14);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v14);
  v14 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v15 = &xmmword_1ECD3B1D0;
LABEL_33:
    (*v15)(v14);
  }
LABEL_34:
  v16 = *v8;
  if (!*v8)
    goto LABEL_41;
  v17 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_40;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v16);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v16);
  v16 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v17 = &xmmword_1ECD3B1D0;
LABEL_40:
    (*v17)(v16);
  }
LABEL_41:
  v18 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_46:
    (*v18)(v7);
    return v2;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v18 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
    goto LABEL_46;
  }
  return v2;
}

uint64_t sub_1ACBE4148(uint64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  _DWORD *v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t v14;
  uint64_t (**v15)(uint64_t *);

  if (!result)
    return result;
  v1 = (_QWORD *)result;
  v2 = *(uint64_t **)(result + 40);
  v3 = v2[2];
  v4 = *v2;
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v2[2], 0);
    if ((_DWORD)result)
      return result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if ((_DWORD)result)
      return result;
    v5 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_11;
      v5 = &xmmword_1ECD3B1D0;
    }
    (*v5)(v3);
LABEL_11:
    v2[2] = 0;
  }
  if (!v4)
    goto LABEL_26;
  if (*((_DWORD *)v2 + 10))
  {
    v6 = (_DWORD *)v1[5];
    if ((int)v6[10] <= 0)
    {
      v6[10] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 64))(*(_QWORD *)v6, 0);
      v6[10] = 0;
      if ((_DWORD)result)
        return result;
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (!(_DWORD)result)
  {
    v7 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_26:
        v8 = v2[3];
        if (!v8)
          goto LABEL_33;
        v9 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v8);
          v8 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
          {
LABEL_33:
            v10 = v2[1];
            if (!v10)
              goto LABEL_40;
            v11 = &off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888 -= (int)off_1ECD3B178(v10);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v10);
              v10 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
              {
LABEL_40:
                v12 = v2[4];
                if (!v12)
                  goto LABEL_47;
                v13 = &off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v12);
                  v12 = xmmword_1ECD3E930;
                  if (!(_QWORD)xmmword_1ECD3E930)
                  {
LABEL_47:
                    v14 = v2[7];
                    v1[5] = v2[6];
                    *v1 = v14;
                    v15 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
                    if (dword_1ECD3B140)
                    {
                      if ((_QWORD)xmmword_1ECD3E930)
                        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
                      --qword_1ECD3E8D0;
                      off_1ECD3B168(v2);
                      v2 = (uint64_t *)xmmword_1ECD3E930;
                      if (!(_QWORD)xmmword_1ECD3E930)
                        return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
                      v15 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
                    }
                    (*v15)(v2);
                    return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
                  }
                  v13 = &xmmword_1ECD3B1D0;
                }
                (*v13)(v12);
                goto LABEL_47;
              }
              v11 = &xmmword_1ECD3B1D0;
            }
            (*v11)(v10);
            goto LABEL_40;
          }
          v9 = &xmmword_1ECD3B1D0;
        }
        (*v9)(v8);
        goto LABEL_33;
      }
      v7 = &xmmword_1ECD3B1D0;
    }
    (*v7)(v4);
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_1ACBE4550(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;

  result = sub_1ACBE33A4(a1);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0;
    }
    else
    {
      v6 = *(_BYTE **)(v5 + 16);
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2);
      *(_BYTE *)(a1 + 28) = v6[28];
    }
  }
  return result;
}

uint64_t sub_1ACBE45B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;

  result = sub_1ACBE33A4(a1);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0;
    }
    else
    {
      v6 = *(_BYTE **)(v5 + 16);
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v6 + 64))(v6, a2);
      *(_BYTE *)(a1 + 28) = v6[28];
    }
  }
  return result;
}

uint64_t sub_1ACBE4620(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1ACBE33A4(a1);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
      return 0;
    else
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 16) + 72))(*(_QWORD *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_1ACBE467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t result;
  int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  const std::__fs::filesystem::path *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  int v22;
  int v23;
  std::error_code *v24;
  const char *v25;
  int v26;
  int *v27;
  int v28;
  const char *v29;
  int v30;
  const char *v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE __rqtp[816];
  std::__fs::filesystem::path v48[42];
  char __strerrbuf[16];
  _OWORD v50[4];
  uint64_t v51;

  v5 = a1;
  v6 = 0;
  v7 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 40);
  v9 = 0x1EECAC000uLL;
  v10 = *(unsigned int **)v8;
  while (1)
  {
    result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v10 + 56))(v10, a3);
    if ((_DWORD)result != 5)
      return result;
    ++*(_DWORD *)(v8 + 44);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    memset(v36, 0, sizeof(v36));
    if ((*(unsigned int (**)(_QWORD, _OWORD *))(v9 + 2368))(v10[6], v36))
      goto LABEL_37;
    v12 = *(_DWORD *)(v8 + 44);
    v13 = v37;
    if (v12 == 1)
    {
      v7 = *((_QWORD *)&v37 + 1);
      *(_OWORD *)__rqtp = xmmword_1ACCBDC80;
      nanosleep((const timespec *)__rqtp, 0);
      v6 = v13;
    }
    else
    {
      result = 5;
      if (__PAIR128__(v7, v6) != v37)
        return result;
      if (v12 == 3)
      {
        v16 = *(uint64_t **)(v5 + 40);
        v17 = *v16;
        v18 = (const std::__fs::filesystem::path *)v16[1];
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)v43 = 0u;
        v44 = 0u;
        v19 = __strlcpy_chk();
        if ((unint64_t)(v19 - 1025) >= 0xFFFFFFFFFFFFFC05)
        {
          strcpy((char *)v48 + v19 - 5, "break");
          v20 = off_1EECAC9A0(*(unsigned int *)(v17 + 24), __rqtp, 1041, 0);
          v21 = v20;
          if (v20 >= 0x11)
          {
            v35 = a2;
            v22 = sub_1ACBE1D30((char *)v48, 536873474, 0, 0);
            if (v22 < 0)
            {
              v32 = __error();
              sqlite3_snprintf(64, v43, "create failed (%d)", *v32);
            }
            else
            {
              v23 = v22;
              v34 = v5;
              v25 = "write failed (%d)";
              if (off_1EECAC9E8(v22, __rqtp, v21, 0) == v21)
              {
                rename(v48, v18, v24);
                v25 = "rename failed (%d)";
                if (!v26)
                {
                  sqlite3_log(28, "broke stale lock on %s\n", (const char *)v18);
                  v5 = v34;
                  sub_1ACBE21B4(v34, *(_DWORD *)(v17 + 24), 50693);
                  *(_DWORD *)(v17 + 24) = v23;
                  *(_DWORD *)(v17 + 120) = 514;
                  if ((_DWORD)a3 != 4
                    || (result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v10 + 56))(v10, 1),
                        !(_DWORD)result))
                  {
                    result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v10 + 56))(v10, a3);
                  }
                  a2 = v35;
                  v9 = 0x1EECAC000;
                  if ((_DWORD)result != 5)
                    return result;
                  goto LABEL_3;
                }
              }
              v27 = __error();
              sqlite3_snprintf(64, v43, v25, *v27);
              off_1EECACA48(v48);
              v28 = off_1EECAC8E0(v23);
              v5 = v34;
              a2 = v35;
              if (v28)
              {
                v29 = *(const char **)(v34 + 56);
                v30 = *__error();
                memset(v50, 0, sizeof(v50));
                *(_OWORD *)__strerrbuf = 0u;
                strerror_r(v30, __strerrbuf, 0x4FuLL);
                v31 = &byte_1ACCBEAEE;
                if (v29)
                  v31 = v29;
                v33 = v30;
                v5 = v34;
                sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50701, v33, "close", v31, __strerrbuf);
              }
            }
          }
          else
          {
            sqlite3_snprintf(64, v43, "read error (len %d)", v20);
          }
        }
        else
        {
          sqlite3_snprintf(64, v43, "path error (len %d)", v19);
        }
        sqlite3_log(1, "failed to break stale lock on %s, %s\n", (const char *)v18, v43);
        v9 = 0x1EECAC000;
      }
      else if (v12 == 2)
      {
        v14 = off_1EECAC9A0(v10[6], __rqtp, 1041, 0);
        if ((v14 & 0x80000000) != 0)
        {
LABEL_37:
          *(_DWORD *)(v5 + 32) = *__error();
          return 3850;
        }
        result = 5;
        if (v14 < 0x12 || __rqtp[0] != 2)
          return result;
        if (*(_QWORD *)&__rqtp[1] != *(_QWORD *)a2 || *(_QWORD *)&__rqtp[9] != *(_QWORD *)(a2 + 8))
        {
          memset(v48, 0, 37);
          *(_OWORD *)__strerrbuf = 0u;
          memset(v50, 0, 21);
          *(_OWORD *)v43 = *(_OWORD *)&__rqtp[1];
          uuid_unparse((const unsigned __int8 *)v43, (char *)v48);
          uuid_unparse((const unsigned __int8 *)a2, __strerrbuf);
          sqlite3_log(1, "ERROR: sqlite database is locked because it is in use by another host that holds a host-exclusive lock on %s; this host (UUID %s) cannot override the host-exclusive lock until the other host (UUID %s) releases its locks on %s\n",
            *(const char **)(v5 + 56),
            __strerrbuf,
            (const char *)v48,
            *((const char **)v10 + 7));
          return 5;
        }
        *(_OWORD *)&v48[0].__pn_.__r_.__value_.__l.__data_ = xmmword_1ACCBDC70;
        nanosleep((const timespec *)v48, 0);
      }
    }
LABEL_3:
    if (*(int *)(v8 + 44) >= 3)
      return 5;
  }
}

uint64_t sub_1ACBE4B6C(char *a1, uint64_t *a2, int a3)
{
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  const char *v25;
  int v26;
  const char *v27;
  uint64_t (**v28)(uint64_t);
  uint64_t (**v29)(_QWORD);
  int v31;
  uint64_t (**v32)(_QWORD);
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char __strerrbuf[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v6 = (_DWORD *)sub_1ACBE5114((uint64_t)a1, 6);
  if (v6)
  {
    v7 = v6;
    if ((*v6 & 0x80000000) == 0)
    {
      HIDWORD(v8) = 6;
      LODWORD(v8) = *v6;
      goto LABEL_4;
    }
  }
  else
  {
    if (sqlite3_initialize())
      return 7;
    v7 = (_QWORD *)sub_1ACB5D828(16);
    if (!v7)
      return 7;
  }
  v9 = 770;
  v11 = sub_1ACBE1D30(a1, 770, 0, 0);
  __error();
  if ((v11 & 0x80000000) == 0)
  {
    HIDWORD(v12) = 6;
    goto LABEL_37;
  }
  v13 = __error();
  if (!a3 || *v13 != 2)
  {
LABEL_35:
    v9 = 0x20000000;
    v11 = sub_1ACBE1D30(a1, 0x20000000, 0, 0);
    v21 = __error();
    if ((v11 & 0x80000000) == 0)
    {
      HIDWORD(v12) = 1;
LABEL_37:
      LODWORD(v12) = v11;
      v33 = v12;
      if (!sqlite3_initialize())
        goto LABEL_38;
      goto LABEL_42;
    }
    v31 = *v21;
    v32 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_67;
      v32 = &xmmword_1ECD3B1D0;
    }
    (*v32)(v7);
LABEL_67:
    if (a3)
      return 5;
    if (v31 == 13)
      return 3;
    if (v31 == 5)
      return 3850;
    return sub_1ACBE1D1C(50566);
  }
  v14 = strlen(a1);
  __strerrbuf[0] = *a1;
  if (v14 < 2)
    goto LABEL_32;
  v15 = 0;
  v16 = 0;
  v17 = v14 - 1;
  v18 = a1 + 1;
  while (1)
  {
    v19 = v18[v15];
    if (v19 != 47)
      goto LABEL_16;
    if ((int)v15 - v16 + 1 < 1)
    {
      LOBYTE(v19) = 47;
      goto LABEL_16;
    }
    if ((v15 - v16 + 1) <= 2)
    {
      if ((_DWORD)v15 - v16 == 1)
      {
        if (__strerrbuf[v16] == 46 || __strerrbuf[v16 + 1] == 46)
          goto LABEL_15;
      }
      else if ((_DWORD)v15 != v16 || (__strerrbuf[v16] & 0xFE) == 0x2E)
      {
        goto LABEL_15;
      }
    }
    __strerrbuf[v15 + 1] = 0;
    if (off_1EECACA78(__strerrbuf, 493))
    {
      v20 = *__error();
      if (v20 != 17)
        break;
    }
LABEL_15:
    v16 = v15 + 2;
    LOBYTE(v19) = v18[v15];
LABEL_16:
    __strerrbuf[++v15] = v19;
    if (v17 == v15)
      goto LABEL_32;
  }
  if (!v20)
LABEL_32:
    v11 = sub_1ACBE1D30(a1, 770, 0, 0);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_35;
  v8 = v11 | 0x600000000;
LABEL_4:
  v33 = v8;
  v9 = 770;
  if (sqlite3_initialize())
    goto LABEL_42;
LABEL_38:
  v22 = sub_1ACB5D828(184);
  if (!v22)
  {
LABEL_42:
    v10 = 7;
    if (off_1EECAC8E0(v33))
    {
      v23 = 0;
      v25 = 0;
      v24 = 1;
LABEL_44:
      v26 = *__error();
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v26, __strerrbuf, 0x4FuLL);
      v27 = &byte_1ACCBEAEE;
      if (v25)
        v27 = v25;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50590, v26, "close", v27, __strerrbuf);
      if ((v24 & 1) == 0)
        goto LABEL_47;
    }
    goto LABEL_53;
  }
  v23 = v22;
  *(_QWORD *)(v22 + 176) = 0;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_DWORD *)(v22 + 120) = v9;
  v34 = 0u;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v36 + 1) = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  *((_QWORD *)&v35 + 1) = "dummy";
  *(_QWORD *)&v36 = off_1E5C72C18;
  *v7 = v33;
  *(_QWORD *)(v22 + 48) = v7;
  v10 = sub_1ACB5A108((uint64_t)&v34, v33, v22, a1, 0);
  if ((_DWORD)v10)
  {
    if (off_1EECAC8E0(v33))
    {
      v24 = 0;
      v25 = *(const char **)(v23 + 56);
      goto LABEL_44;
    }
LABEL_47:
    v28 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v23);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v23);
      v23 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v28 = &xmmword_1ECD3B1D0;
        goto LABEL_52;
      }
    }
    else
    {
LABEL_52:
      (*v28)(v23);
    }
LABEL_53:
    v29 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (_QWORD *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v29 = &xmmword_1ECD3B1D0;
        goto LABEL_58;
      }
    }
    else
    {
LABEL_58:
      (*v29)(v7);
    }
  }
  else
  {
    *a2 = v23;
  }
  return v10;
}

uint64_t sub_1ACBE5114(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[9];

  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  memset(v12, 0, sizeof(v12));
  if (qword_1ECD3EA80 && !off_1EECAC928(a1, v12) && (v6 = qword_1ECD3EA80) != 0)
  {
    while (*(_DWORD *)v6 != LODWORD(v12[0]) || *(_QWORD *)(v6 + 8) != *((_QWORD *)&v12[0] + 1))
    {
      v6 = *(_QWORD *)(v6 + 64);
      if (!v6)
      {
        v4 = 0;
        goto LABEL_24;
      }
    }
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
      xmmword_1ECD3B1C0(v7);
    v8 = (_QWORD *)(v6 + 40);
    v4 = *(_QWORD *)(v6 + 40);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 4) == (a2 & 3))
      {
LABEL_19:
        *v8 = *(_QWORD *)(v4 + 8);
      }
      else
      {
        while (1)
        {
          v9 = v4;
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            break;
          if (*(_DWORD *)(v4 + 4) == (a2 & 3))
          {
            v8 = (_QWORD *)(v9 + 8);
            goto LABEL_19;
          }
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 16);
    if (v10)
    {
      xmmword_1ECD3B1D0(v10);
      v5 = qword_1ECD3E950;
      if (qword_1ECD3E950)
        goto LABEL_25;
      return v4;
    }
LABEL_24:
    v5 = qword_1ECD3E950;
    if (!qword_1ECD3E950)
      return v4;
  }
  else
  {
    v4 = 0;
    v5 = qword_1ECD3E950;
    if (!qword_1ECD3E950)
      return v4;
  }
LABEL_25:
  xmmword_1ECD3B1D0(v5);
  return v4;
}

void sub_1ACBE526C(unsigned int a1, NSObject **a2, uint64_t a3)
{
  NSObject *global_queue;
  NSObject *v7;
  NSObject *v8;

  if ((a1 & 0x80000000) == 0
    && _dispatch_is_multithreaded()
    && (_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
  {
    global_queue = dispatch_get_global_queue(0, 2uLL);
    v7 = dispatch_source_create(MEMORY[0x1E0C80DE8], a1, a3 ^ 0x71, global_queue);
    if (v7)
    {
      v8 = v7;
      dispatch_set_context(v7, a2);
      dispatch_source_set_event_handler_f(v8, (dispatch_function_t)sub_1ACBE530C);
      *a2 = v8;
      dispatch_resume(v8);
    }
  }
}

void sub_1ACBE530C(dispatch_source_t *a1)
{
  NSObject *v1;
  uintptr_t data;
  uint64_t v4;
  uintptr_t handle;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  _OWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *a1;
  if (*a1)
  {
    data = dispatch_source_get_data(*a1);
    if (data)
    {
      v4 = data;
      handle = dispatch_source_get_handle(v1);
      v6 = handle;
      if ((v4 & 8) == 0
        || (v11 = 0u, v12 = 0u, v10 = 0u, memset(v9, 0, sizeof(v9)), off_1EECAC940(handle, v9))
        || !(_QWORD)v10)
      {
        v7 = (unsigned int *)(a1 + 1);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 | 1, v7));
        sub_1ACBE53D0(v6, v4);
        sqlite3_log(1, "invalidated open fd: %d (0x%02lx)", v6, v4);
      }
    }
  }
}

void sub_1ACBE53D0(int a1, uint64_t a2)
{
  char *v3;
  const char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  char *v14;
  _BYTE v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = v15;
  if (fcntl(a1, 50, v15))
    v3 = "<unresolvable path>";
  v4 = "truncated";
  switch(a2)
  {
    case 1:
    case 17:
      v4 = "unlinked";
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_7;
    case 8:
      break;
    case 16:
      v4 = "linked";
      break;
    case 32:
      v4 = "renamed";
      break;
    default:
      if (a2 == 64)
      {
        v4 = "revoked";
      }
      else
      {
LABEL_7:
        if ((a2 & (a2 - 1)) != 0)
          v4 = "affected by unexpected operations";
        else
          v4 = "affected by unexpected operation";
      }
      break;
  }
  sqlite3_log(1, "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use: %s", v4, v3);
  if ((dword_1ECD3B304 & 4) != 0
    || (dword_1ECD3B304 & 2) != 0
    && (strstr(v3, "/iTunes/MediaLibrary.sqlitedb")
     || strstr(v3, "/PhotoData/Photos.sqlite")
     || strstr(v3, "/Notes/notes.sqlite")
     || strstr(v3, "/Accounts/Accounts3.sqlite")
     || strstr(v3, "/Calendar/Calendar.sqlitedb")
     || strstr(v3, "/AddressBook/AddressBook.sqlitedb")
     || strstr(v3, "/NoteStore.sqlite")))
  {
    v12 = v4;
    v14 = 0;
    v5 = strrchr(v3, 47);
    v6 = 0;
    if (v5)
      v7 = v5;
    else
      v7 = v3;
    if (!*v7)
      goto LABEL_36;
    v8 = strlen(v7);
    v9 = v8;
    v10 = v8 << 32;
    if (v8 << 32 < 0x400000001)
      goto LABEL_34;
    v11 = (int)v8 - 4;
    if (!strcmp(&v7[v11], "-shm") || !strcmp(&v7[v11], "-wal"))
      goto LABEL_35;
    if (v10 < 0x800000001)
    {
      if (v10 < 0x600000001)
        goto LABEL_34;
    }
    else
    {
      LODWORD(v11) = v9 - 8;
      if (!strcmp(&v7[v9 - 8], "-journal"))
        goto LABEL_35;
    }
    LODWORD(v11) = v9 - 6;
    if (!strcmp(&v7[v9 - 6], "-conch"))
    {
LABEL_35:
      v6 = (unint64_t)sub_1ACBE56F4((unsigned __int8 *)v7, v11) << 16;
LABEL_36:
      qword_1EECAD080 = (v6 | a2) ^ 0x1B0A00000000;
      v13 = 0;
      asprintf(&v13, "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use", v12);
      if ((dword_1ECD3B304 & 0x20) != 0)
      {
        asprintf(&v14, "%s: %s");
      }
      else if ((dword_1ECD3B304 & 1) != 0)
      {
        asprintf(&v14, "%s. See syslog for more information");
      }
      else
      {
        v14 = v13;
      }
      qword_1EECAD050 = (uint64_t)v14;
      __break(1u);
      return;
    }
LABEL_34:
    LODWORD(v11) = v9;
    goto LABEL_35;
  }
}

uint64_t sub_1ACBE56F4(unsigned __int8 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  v2 = 0xFFFF;
  if (a1 && a2 >= 1)
  {
    do
    {
      v3 = *a1++;
      v4 = (char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4));
      v2 = (v2 << 8) ^ ((v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4)) << 12) ^ (32 * v4) ^ v4;
      --a2;
    }
    while (a2);
  }
  return (unsigned __int16)v2;
}

uint64_t sub_1ACBE573C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const unsigned __int8 *v23;
  const unsigned __int8 *v24;
  int v25;
  int v26;
  sqlite3 *v27;
  sqlite3_stmt *v28;
  uint64_t (*v29)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  sqlite3_stmt *v32;
  uint64_t (*v33)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  unsigned int (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  sqlite3_stmt *pStmt;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (!sqlite3_initialize())
  {
    v7 = (uint64_t *)sub_1ACB5D828(16);
    if (v7)
    {
      v8 = (uint64_t)v7;
      *v7 = 0;
      v7[1] = 0;
      v6 = sub_1ACB55484(*(char **)(a1 + 56), v7, a2 | 6u, *(const char **)(*(_QWORD *)(a1 + 8) + 24));
      if ((_DWORD)v6)
        goto LABEL_5;
      v10 = *(_DWORD *)(a1 + 168);
      if (v10 >= 1)
      {
        v6 = sqlite3_key_v2(*(_QWORD *)v8, 0, *(_BYTE **)(a1 + 176), v10);
        if ((_DWORD)v6)
          goto LABEL_5;
      }
      v11 = *(_QWORD *)v8;
      if (*(_QWORD *)v8)
      {
        v12 = *(unsigned __int8 *)(v11 + 113);
        switch(v12)
        {
          case 186:
            goto LABEL_14;
          case 118:
            v14 = *(_QWORD *)(v11 + 24);
            if (v14)
            {
              xmmword_1ECD3B1C0(v14);
              v15 = *(_QWORD *)(v11 + 24);
              *(_DWORD *)(v11 + 88) = -1;
              if (v15)
                xmmword_1ECD3B1D0(v15);
            }
            else
            {
              *(_DWORD *)(v11 + 88) = -1;
            }
LABEL_21:
            v35 = 0;
            v36 = 0;
            v16 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              v17 = *(unsigned __int8 *)(v16 + 113);
              switch(v17)
              {
                case 186:
                  goto LABEL_25;
                case 118:
                  v19 = *(_QWORD *)(v16 + 24);
                  if (v19)
                  {
                    xmmword_1ECD3B1C0(v19);
                    v20 = *(_QWORD *)(v16 + 24);
                    *(_QWORD *)(v16 + 664) = sub_1ACBE62C0;
                    *(_QWORD *)(v16 + 672) = &v35;
                    *(_QWORD *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                    if (v20)
                      xmmword_1ECD3B1D0(v20);
                  }
                  else
                  {
                    *(_QWORD *)(v16 + 664) = sub_1ACBE62C0;
                    *(_QWORD *)(v16 + 672) = &v35;
                    *(_QWORD *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                  }
LABEL_32:
                  v6 = sqlite3_exec(*(sqlite3 **)v8, "BEGIN EXCLUSIVE", 0, 0, 0);
                  if ((_DWORD)v6)
                    goto LABEL_5;
                  pStmt = 0;
                  v22 = sub_1ACB5C66C(*(_QWORD *)v8, "PRAGMA main.journal_mode", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v21);
                  if ((_DWORD)v22)
                  {
                    v6 = v22;
                    goto LABEL_5;
                  }
                  *(_DWORD *)(v8 + 8) = 0;
                  if (sqlite3_step(pStmt) != 100
                    || (v23 = sqlite3_column_text(pStmt, 0)) == 0
                    || (v24 = v23, strlen((const char *)v23) != 3))
                  {
LABEL_48:
                    v6 = sqlite3_finalize(pStmt);
                    if (!(_DWORD)v6)
                    {
                      if (!*(_DWORD *)(v8 + 8))
                      {
                        v6 = 0;
                        goto LABEL_6;
                      }
                      v6 = sqlite3_exec(*(sqlite3 **)v8, "COMMIT", 0, 0, 0);
                      if (!(_DWORD)v6)
                      {
                        v27 = *(sqlite3 **)v8;
                        v38 = 0;
                        pStmt = 0;
                        v6 = sqlite3_file_control(v27, "main", 7, &pStmt);
                        if (!(_DWORD)v6)
                        {
                          v28 = pStmt;
                          v29 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)pStmt + 112);
                          while (1)
                          {
                            v30 = v29(v28, 2, 1, 10);
                            if ((_DWORD)v30 != 5)
                              break;
                            if (v35)
                            {
                              LODWORD(v37) = v37 + 1;
                              if (v35(v36))
                                continue;
                            }
LABEL_56:
                            v6 = 5;
                            goto LABEL_5;
                          }
                          v6 = v30;
                          if (!(_DWORD)v30)
                          {
                            v6 = (*(uint64_t (**)(sqlite3_stmt *, _QWORD, uint64_t, uint64_t, _OWORD **))(*(_QWORD *)pStmt + 104))(pStmt, 0, 0x8000, 1, &v38);
                            if (!(_DWORD)v6)
                            {
                              v31 = v38;
                              v32 = pStmt;
                              *v38 = 0u;
                              v31[1] = 0u;
                              v33 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 112);
                              while (1)
                              {
                                v34 = v33(v32, 3, 5, 10);
                                if ((_DWORD)v34 != 5)
                                  break;
                                if (!v35)
                                  goto LABEL_56;
                                LODWORD(v37) = v37 + 1;
                                v6 = 5;
                                if (!v35(v36))
                                  goto LABEL_5;
                              }
                              v6 = v34;
                              if (!(_DWORD)v34)
                                goto LABEL_6;
                            }
                          }
                        }
                      }
                    }
LABEL_5:
                    sub_1ACBE61A8(v8);
                    v8 = 0;
LABEL_6:
                    *a3 = v8;
                    return v6;
                  }
                  v25 = *v24;
                  if ((v25 & 0xFFFFFFDF) == 0x57)
                  {
                    v25 = v24[1];
                    if ((v25 & 0xFFFFFFDF) == 0x41)
                    {
                      v25 = v24[2];
                      if ((v25 & 0xFFFFFFDF) == 0x4C)
                      {
LABEL_47:
                        *(_DWORD *)(v8 + 8) = 1;
                        goto LABEL_48;
                      }
                      v26 = 108;
                    }
                    else
                    {
                      v26 = 97;
                    }
                  }
                  else
                  {
                    v26 = 119;
                  }
                  if (v26 != byte_1ACCB6333[v25])
                    goto LABEL_48;
                  goto LABEL_47;
                case 109:
LABEL_25:
                  v18 = "unopened";
                  break;
                default:
                  v18 = "invalid";
                  break;
              }
            }
            else
            {
              v18 = "NULL";
            }
            sqlite3_log(21, "API call with %s database connection pointer", v18);
            sub_1ACBBE20C(187027);
            goto LABEL_32;
          case 109:
LABEL_14:
            v13 = "unopened";
            break;
          default:
            v13 = "invalid";
            break;
        }
      }
      else
      {
        v13 = "NULL";
      }
      sqlite3_log(21, "API call with %s database connection pointer", v13);
      sub_1ACBBE20C(189491);
      goto LABEL_21;
    }
  }
  return 7;
}

uint64_t sub_1ACBE5BAC(uint64_t a1)
{
  _QWORD v4[2];
  char v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1
    || (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, v4, 20, 0))
  {
    return 0xFFFFFFFFLL;
  }
  if (v4[0] != 0x66206574694C5153 || *(_QWORD *)((char *)v4 + 7) != 0x332074616D726F66)
    return 0xFFFFFFFFLL;
  return v5 == 2 && v6 == 2;
}

uint64_t sub_1ACBE5C60(uint64_t a1, int a2)
{
  unint64_t st_size;
  int v5;
  unint64_t p_f_iosize;
  size_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  off_t v14;
  char *v15;
  size_t v16;
  ssize_t v17;
  uint64_t v18;
  uint64_t v19;
  stat v21;
  statfs v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  bzero(&v22, 0x878uLL);
  memset(&v21, 0, sizeof(v21));
  if (fstat(a1, &v21))
    st_size = 0;
  else
    st_size = v21.st_size;
  v5 = fstatfs(a1, &v22);
  p_f_iosize = (unint64_t)&v22.f_iosize;
  if (v5 == -1)
    p_f_iosize = (unint64_t)&v21.st_blksize;
  LODWORD(p_f_iosize) = *(_DWORD *)p_f_iosize;
  if (p_f_iosize >= 0x200000)
    LODWORD(p_f_iosize) = 0x200000;
  if (p_f_iosize <= 0x8000)
    p_f_iosize = 0x8000;
  else
    p_f_iosize = p_f_iosize;
  if (st_size >= p_f_iosize || st_size == 0)
    v8 = p_f_iosize;
  else
    v8 = st_size;
  v9 = (char *)malloc_type_malloc(v8, 0x742CCBD0uLL);
  if (v9)
  {
    v10 = v9;
    v11 = off_1EECAC988(a1, v9, v8);
    v12 = v11;
    if (v11 < 1)
    {
      v14 = 0;
      if ((v11 & 0x8000000000000000) == 0)
      {
LABEL_34:
        if ((ftruncate(a2, v14) & 0x80000000) == 0)
        {
          v19 = 0;
LABEL_38:
          free(v10);
          return v19;
        }
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = v10;
      while (1)
      {
        if (v12 >= v8)
          v16 = v8;
        else
          v16 = v12;
        v17 = off_1EECAC9D0(a2, v15, v16);
        if (v17)
        {
          if (v17 == -1)
            goto LABEL_36;
          v13 = 0;
          v12 -= v17;
          v15 += v17;
        }
        else
        {
          if (v13 > 4)
          {
            v19 = 35;
            *__error() = 35;
            goto LABEL_38;
          }
          ++v13;
        }
        v14 += v17;
        if (!v12)
        {
          v18 = off_1EECAC988(a1, v10, v8);
          v12 = v18;
          v13 = 0;
          v15 = v10;
          if (v18 < 1)
            break;
        }
      }
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_34;
    }
LABEL_36:
    v19 = *__error();
    goto LABEL_38;
  }
  return 0xFFFFFFFFLL;
}

void sub_1ACBE5E6C(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  char *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  int __buf;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[27];
  char v30[1033];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = __strlcpy_chk();
  if (v4 > 1023)
    return;
  *(_OWORD *)v29 = *(_OWORD *)"-wal";
  v5 = a2 != 0;
  v6 = &v30[v4];
  *(_OWORD *)&v29[11] = unk_1ACCB6CB9;
  v7 = (const char *)((unint64_t)v29 | v5 | (8 * v5));
  while (v5 != 2)
  {
LABEL_12:
    if (strlcpy(v6, v7, 9uLL) <= 8)
    {
      if (v5 >= 2)
        v9 = 2;
      else
        v9 = 1024;
      v10 = sub_1ACBE1D30(v30, v9, 0, 0);
      if ((_DWORD)v10 == -1)
      {
        if (*__error() != 2)
          perror(v30);
      }
      else
      {
        v11 = v10;
        if (v5 == 2)
        {
          v28 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          if (!off_1EECAC940(v10, &v20))
          {
            if ((uint64_t)v26 >= 4)
              v12 = 4;
            else
              v12 = v26;
            if (v12)
            {
              __buf = 0;
              pwrite(v11, &__buf, v12, 0);
            }
          }
        }
        fsync(v11);
        off_1EECAC8E0(v11);
      }
    }
    ++v5;
    v7 += 9;
    if (v5 == 3)
      return;
  }
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  if (!v8 || *(_BYTE *)(v8 + 34) || (v13 = *(_QWORD **)(v8 + 40)) == 0 || !*v13)
  {
LABEL_10:
    if (qword_1ECD3E950)
      xmmword_1ECD3B1D0(qword_1ECD3E950);
    goto LABEL_12;
  }
  v28 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v14 = *(_QWORD *)(v8 + 8);
  if (v14)
    xmmword_1ECD3B1C0(v14);
  v15 = *(unsigned int *)(v8 + 24);
  if ((v15 & 0x80000000) != 0
    || off_1EECAC940(v15, &v20)
    || ((uint64_t)v26 >= 4 ? (v16 = 4) : (v16 = v26), !v16))
  {
    v17 = *(_QWORD *)(v8 + 8);
    if (v17)
      xmmword_1ECD3B1D0(v17);
    goto LABEL_10;
  }
  if (!*(_DWORD *)(v8 + 168))
    bzero(**(void ***)(v8 + 40), v16);
  v18 = *(_QWORD *)(v8 + 8);
  if (v18)
    xmmword_1ECD3B1D0(v18);
  if (qword_1ECD3E950)
    xmmword_1ECD3B1D0(qword_1ECD3E950);
}

unsigned __int8 *sub_1ACBE6140(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v3;
  int v4;

  v3 = result;
  v4 = result[28];
  if (v4 > a2)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 64))(result, 1);
    v4 = v3[28];
  }
  if (v4 > a2)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 64))(v3, 0);
  return result;
}

uint64_t sub_1ACBE61A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t (**v2)(uint64_t *);
  uint64_t result;
  uint64_t v4;

  v1 = (uint64_t *)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    v4 = 0;
    if (!sqlite3_file_control(*(sqlite3 **)a1, "main", 7, &v4))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 112))(v4, 2, 1, 9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 112))(v4, 3, 5, 9);
    }
  }
  sub_1ACBCF268(*v1, 0);
  v2 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v2)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v2 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
    return (*v2)(v1);
  }
  return result;
}

uint64_t sub_1ACBE62C0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))a1;
  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(a1 + 16);
  return v1(v2);
}

uint64_t sub_1ACBE62E8(char *a1, unint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char __strerrbuf[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = strlen(a1);
    v7 = v6;
    v8 = v6 >= 5 && strncmp("-shm", &a1[v6 - 4], 4uLL) == 0;
    v9 = v7 & 0x3FFFFFFF;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  do
  {
    if (v9 >= 2)
    {
      v10 = --v9;
      v11 = a1[v9];
      if (v11 != 46)
        continue;
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (a2 >> 20) & 7;
    if (!v8)
      goto LABEL_15;
    goto LABEL_13;
  }
  while (v11 != 45);
  __memcpy_chk();
  __strerrbuf[v10] = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  if (off_1EECAC928(__strerrbuf, &v26))
    return 1802;
  v15 = WORD2(v26) & 0x1FF;
  v14 = v27;
  v13 = DWORD1(v27);
  v16 = (a2 >> 20) & 7;
  if (v8)
  {
LABEL_13:
    v17 = &dword_1ACCBD88C[v16];
LABEL_17:
    v19 = *v17;
    goto LABEL_18;
  }
LABEL_15:
  v18 = v16 - 1;
  if (v18 <= 6)
  {
    v17 = &dword_1ACCBD870[v18];
    goto LABEL_17;
  }
  v19 = 0;
LABEL_18:
  v20 = sub_1ACBE1D30(a1, 514, v15, v19);
  if ((v20 & 0x80000000) != 0)
  {
    if (*__error() == 1)
    {
      v23 = *__error();
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v23, __strerrbuf, 0x4FuLL);
      v12 = 23;
      sqlite3_log(23, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
    else
    {
      v12 = sub_1ACBE1D1C(44930);
      v24 = *__error();
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v24, __strerrbuf, 0x4FuLL);
      sqlite3_log(v12, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
    return v12;
  }
  v21 = v20;
  if (!geteuid())
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    v22 = off_1EECAC940(v21, __strerrbuf);
    if (v22 || (_QWORD)v36 != __PAIR64__(v13, v14))
    {
      if (!off_1EECACAC0() && off_1EECACAA8(v21, v14, v13))
      {
        v12 = sub_1ACBE1D1C(41168);
LABEL_26:
        *a3 = -1;
        off_1EECAC8E0(v21);
        return v12;
      }
      if (v22)
      {
        v12 = 1802;
        goto LABEL_26;
      }
    }
  }
  v12 = sub_1ACBE670C(v21, a2, v8);
  if ((_DWORD)v12)
    goto LABEL_26;
  *a3 = v21;
  return v12;
}

uint64_t sub_1ACBE665C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  result = geteuid();
  if (!(_DWORD)result)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    result = off_1EECAC940(a1, &v9);
    if ((_DWORD)result)
      v7 = 0;
    else
      v7 = (_DWORD)v10 == (_DWORD)a2;
    if (!v7 || DWORD1(v10) != (_DWORD)a3)
    {
      result = off_1EECACAC0();
      if (!(_DWORD)result)
      {
        result = off_1EECACAA8(a1, a2, a3);
        if ((_DWORD)result)
          return sub_1ACBE1D1C(41168);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBE670C(int a1, unsigned int a2, int a3)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  char v9;

  if (!a2)
    return 0;
  v4 = (a2 >> 20) & 7;
  if (a3)
  {
    v5 = 0;
    v6 = (a2 >> 20) & 7;
    switch(v4)
    {
      case 0:
        break;
      case 1:
      case 3:
      case 7:
        v5 = 0;
        v6 = 3;
        break;
      case 2:
        v5 = 0;
        v6 = 2;
        break;
      default:
        v6 = 4;
        v5 = 1;
        break;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    switch(v4)
    {
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
        v5 = 0;
        v6 = (a2 >> 20) & 7;
        break;
      case 4:
        v5 = 1;
        v6 = (a2 >> 20) & 7;
        break;
      case 5:
        break;
      default:
        v6 = 0;
        break;
    }
  }
  v8 = fcntl(a1, 63);
  result = 0;
  if (v8 < 1)
    v9 = v5;
  else
    v9 = 0;
  if ((_DWORD)v6 != v8 && (v9 & 1) == 0)
  {
    result = fcntl(a1, 64, v6);
    if ((_DWORD)result)
    {
      if (*__error() == 1)
        return 23;
      else
        return 10;
    }
  }
  return result;
}

uint64_t sub_1ACBE6834(int a1, uint64_t a2, __int16 a3, unsigned int a4, unsigned int a5)
{
  int v7;
  unsigned int (*v8)(uint64_t, uint64_t);
  uint64_t result;
  int *v10;
  _QWORD v11[2];
  uint64_t v12;

  v12 = 0;
  WORD2(v12) = a3;
  v11[0] = a4;
  v11[1] = a5;
  if (a1 == -1)
  {
    v8 = (unsigned int (*)(uint64_t, uint64_t))off_1EECAC970;
  }
  else
  {
    LODWORD(v12) = a1;
    v7 = off_1EECAC970(a2, 94);
    if (v7 == -1)
    {
      if ((*__error() == 45 || *__error() == 25) && (off_1EECAC970(a2, 66) & 0x80000000) == 0)
        goto LABEL_14;
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    sqlite3_log(28, "F_GETLKPID undefined or not supported, _sqlite3_lockstate falling back to F_GETLK", v11);
    LODWORD(v12) = 0;
    v8 = (unsigned int (*)(uint64_t, uint64_t))off_1EECAC970;
  }
  if (v8(a2, 92) == -1 && (*__error() != 45 && *__error() != 25 || off_1EECAC970(a2, 7) == -1))
  {
    v10 = __error();
    sqlite3_log(28, "fcntl(%d) failed: errno=%d\n", a2, *v10);
    return 0xFFFFFFFFLL;
  }
LABEL_14:
  if (WORD2(v12) == 2)
    return 0;
  result = 1;
  if (a1 != -1 && (_DWORD)v12 != a1)
    return 0;
  return result;
}

uint64_t sub_1ACBE69BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(unsigned int *)(a2 + 24);
  v3 = off_1EECAC970(v2, 92);
  if (v3 == -1)
  {
    if ((*__error() == 45 || *__error() == 25) && !off_1EECAC970(v2, 7))
      return 5;
  }
  else if (!v3)
  {
    return 5;
  }
  return 3850;
}

uint64_t sub_1ACBE6B88(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  NSObject *v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t (**v15)(uint64_t);
  char __strerrbuf[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 56);
  if (!v1 || *(_DWORD *)(v1 + 48))
    return result;
  v2 = result;
  v3 = off_1EECACB20();
  if (v3 < 0x8000)
    v4 = 1;
  else
    v4 = v3 >> 15;
  if (*(_QWORD *)(v1 + 8))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 64))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 72))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 80))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 88))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 96))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 104))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 112))
    off_1ECD3B1B8();
  if (*(_QWORD *)(v1 + 120))
    off_1ECD3B1B8();
  if (*(_WORD *)(v1 + 32))
  {
    v5 = 0;
    do
    {
      if ((*(_DWORD *)(v1 + 24) & 0x80000000) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v5);
        if (v6)
        {
          v7 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v6);
            v6 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_27;
            v7 = &xmmword_1ECD3B1D0;
          }
          (*v7)(v6);
        }
      }
      else
      {
        off_1EECACAF0(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v5), *(int *)(v1 + 28));
      }
LABEL_27:
      v5 += v4;
    }
    while (v5 < *(unsigned __int16 *)(v1 + 32));
  }
  v8 = *(_QWORD *)(v1 + 40);
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v8);
      v8 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_43;
      v9 = &xmmword_1ECD3B1D0;
    }
    (*v9)(v8);
  }
LABEL_43:
  if ((*(_DWORD *)(v1 + 24) & 0x80000000) == 0)
  {
    v10 = *(NSObject **)(v1 + 160);
    if (v10)
    {
      *(_QWORD *)(v1 + 160) = 0;
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
      {
        dispatch_source_cancel_and_wait();
        dispatch_release(v10);
      }
    }
    v11 = *(_DWORD *)(v1 + 24);
    if ((v11 & 0x80000000) == 0 && off_1EECAC8E0(v11))
    {
      if (v2)
        v12 = *(const char **)(v2 + 56);
      else
        v12 = 0;
      v13 = *__error();
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v13, __strerrbuf, 0x4FuLL);
      v14 = &byte_1ACCBEAEE;
      if (v12)
        v14 = v12;
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 46484, v13, "close", v14, __strerrbuf);
    }
    *(_DWORD *)(v1 + 24) = -1;
  }
  *(_QWORD *)(*(_QWORD *)v1 + 56) = 0;
  v15 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v15)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v15 = &xmmword_1ECD3B1D0;
    return (*v15)(v1);
  }
  return result;
}

uint64_t sub_1ACBE6F28(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;

  v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 24);
  if ((v5 & 0x80000000) != 0)
    return 0;
  v8 = 0;
  WORD2(v8) = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (sub_1ACBE2784(v5, (uint64_t)v7, a1) != -1)
    return 0;
  if (*(_DWORD *)(a1 + 132))
    return 773;
  return 5;
}

uint64_t sub_1ACBE6FA0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);

  sub_1ACBE7634(a1, 0);
  v2 = *(NSObject **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }
  if (qword_1ECD3E950)
    xmmword_1ECD3B1C0(qword_1ECD3E950);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
      xmmword_1ECD3B1C0(v4);
    if (*(_DWORD *)(v3 + 28))
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v6;
      *(_DWORD *)(a1 + 24) = -1;
      *(_QWORD *)(a1 + 48) = 0;
    }
    v7 = *(_QWORD *)(v3 + 16);
    if (v7)
      xmmword_1ECD3B1D0(v7);
  }
  sub_1ACBE1A3C(a1);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_19:
      (*v9)(v8);
      goto LABEL_20;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
      goto LABEL_19;
    }
  }
LABEL_20:
  sub_1ACBA8198(a1);
  if (qword_1ECD3E950)
    xmmword_1ECD3B1D0(qword_1ECD3E950);
  return 0;
}

uint64_t sub_1ACBE710C(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v5;
  int32x2_t *v6;
  int32x2_t v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int32x2_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v2 >= a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(int32x2_t **)(a1 + 16);
  v7 = v6[2];
  if (v7)
  {
    xmmword_1ECD3B1C0(*(_QWORD *)&v7);
    v2 = *(unsigned __int8 *)(a1 + 28);
  }
  v8 = v6[4].u8[0];
  if (v2 != v8)
  {
    v9 = 5;
    if (a2 > 1 || v8 > 2)
      goto LABEL_68;
  }
  if (a2 == 1)
  {
    if (v8 - 1 <= 1)
    {
      v9 = 0;
      *(_BYTE *)(a1 + 28) = 1;
      v6[3] = vadd_s32(v6[3], (int32x2_t)0x100000001);
      goto LABEL_68;
    }
  }
  else
  {
    if (a2 != 4)
    {
      v19 = 0;
      goto LABEL_32;
    }
    if (v2 > 2)
    {
LABEL_28:
      if (v6[3].i32[0] > 1)
      {
        v9 = 5;
LABEL_57:
        *(_BYTE *)(a1 + 28) = 3;
        v6[4].i8[0] = 3;
        goto LABEL_68;
      }
      v19 = 1;
LABEL_32:
      if (*(unsigned __int8 *)(a1 + 28) <= 1u)
      {
        v20 = *(const char **)(v5 + 8);
        v31 = 0;
        v32 = 0;
        v29 = dword_1EECAC650 + 1;
        v30 = 1;
        HIDWORD(v32) = *(_DWORD *)(a1 + 24);
        if (fsctl(v20, 0xC0207A17uLL, &v29, 0) == -1)
        {
          v25 = *__error();
          v9 = 5;
          if (v25 > 0x3C)
            goto LABEL_45;
          if (((1 << v25) & 0x1000000800012010) != 0)
            goto LABEL_56;
          if (v25 != 1)
          {
LABEL_45:
            if ((_DWORD)v25 == 77)
              goto LABEL_56;
            v9 = 3850;
            goto LABEL_55;
          }
          goto LABEL_50;
        }
        *(_DWORD *)v5 = 1;
      }
      if (!v19)
        goto LABEL_67;
      v21 = *(const char **)(v5 + 8);
      v22 = dword_1EECAC650 + *(_QWORD *)&v6[10] + 2;
      v31 = 0;
      v32 = 1;
      v29 = v22;
      v30 = 1;
      HIDWORD(v32) = *(_DWORD *)(a1 + 24);
      if (fsctl(v21, 0xC0207A17uLL, &v29, 0) != -1)
      {
        v23 = sub_1ACBE7C98(*(const char **)(v5 + 8), a1, dword_1EECAC650 + 2, 510, 1);
        if ((_DWORD)v23)
        {
          v9 = v23;
          v24 = sub_1ACBE7C98(*(const char **)(v5 + 8), a1, dword_1EECAC650 + *(_QWORD *)&v6[10] + 2, 1, 1);
          if (v24)
          {
            if (v9 == 10)
              v9 = v24;
            else
              v9 = 3850;
            goto LABEL_68;
          }
          goto LABEL_56;
        }
LABEL_67:
        v9 = 0;
        *(_BYTE *)(a1 + 28) = a2;
        v6[4].i8[0] = a2;
        goto LABEL_68;
      }
      v25 = *__error();
      v9 = 5;
      if (v25 > 0x3C)
        goto LABEL_53;
      if (((1 << v25) & 0x1000000800012010) != 0)
        goto LABEL_56;
      if (v25 != 1)
      {
LABEL_53:
        if ((_DWORD)v25 == 77)
          goto LABEL_56;
        v9 = 2058;
LABEL_55:
        *(_DWORD *)(a1 + 32) = v25;
LABEL_56:
        if (a2 != 4)
          goto LABEL_68;
        goto LABEL_57;
      }
LABEL_50:
      v9 = 3;
      goto LABEL_55;
    }
  }
  v10 = *(const char **)(v5 + 8);
  v31 = 0;
  v32 = 0;
  v29 = dword_1EECAC650;
  v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  if (fsctl(v10, 0xC0207A17uLL, &v29, 0) == -1)
  {
    v18 = *__error();
    v9 = 5;
    if (v18 > 0x3C)
      goto LABEL_51;
    if (((1 << v18) & 0x1000000800012010) != 0)
      goto LABEL_68;
    if (v18 != 1)
    {
LABEL_51:
      if ((_DWORD)v18 != 77)
      {
        v9 = 3850;
        *(_DWORD *)(a1 + 32) = v18;
      }
      goto LABEL_68;
    }
    v9 = 3;
    *(_DWORD *)(a1 + 32) = 1;
    goto LABEL_68;
  }
  if (a2 != 1)
    goto LABEL_28;
  v11 = (random() & 0x7FFFFFFFFFFFFFFFuLL) % 0x1FD;
  v6[10] = (int32x2_t)v11;
  v12 = *(const char **)(v5 + 8);
  v31 = 0;
  v32 = 0;
  v29 = dword_1EECAC650 + v11 + 2;
  v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  v13 = fsctl(v12, 0xC0207A17uLL, &v29, 0);
  v14 = 0;
  if (v13 != -1)
  {
LABEL_18:
    LODWORD(v15) = 0;
    goto LABEL_19;
  }
  v15 = *__error();
  v14 = 5;
  if (v15 > 0x3C)
    goto LABEL_76;
  if (((1 << v15) & 0x1000000800012010) != 0)
    goto LABEL_18;
  if (v15 == 1)
  {
    v14 = 3;
  }
  else
  {
LABEL_76:
    if ((_DWORD)v15 == 77)
      goto LABEL_18;
    v14 = 3850;
  }
  *(_DWORD *)(a1 + 32) = v15;
LABEL_19:
  v16 = *(const char **)(v5 + 8);
  v31 = 0;
  v32 = 1;
  v29 = dword_1EECAC650;
  v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  v9 = 0;
  if (fsctl(v16, 0xC0207A17uLL, &v29, 0) == -1)
  {
    v17 = *__error();
    v9 = 5;
    if (v17 <= 0x3C)
    {
      if (((1 << v17) & 0x1000000800012010) != 0)
        goto LABEL_61;
      if (v17 == 1)
      {
        v9 = 3;
LABEL_60:
        *(_DWORD *)(a1 + 32) = v17;
        goto LABEL_61;
      }
    }
    if ((_DWORD)v17 != 77)
    {
      v9 = 2058;
      goto LABEL_60;
    }
  }
LABEL_61:
  if ((_DWORD)v14 && (_DWORD)v14 != 5)
  {
    *(_DWORD *)(a1 + 32) = v15;
    v9 = v14;
  }
  else if ((_DWORD)v9 == 5 || !(_DWORD)v9)
  {
    if (v13 != -1)
    {
      v26 = v6[3].i32[1] + 1;
      v6[3].i32[0] = 1;
      v6[3].i32[1] = v26;
      goto LABEL_67;
    }
    v9 = v14;
    if (!(_DWORD)v14)
      goto LABEL_67;
  }
LABEL_68:
  v27 = v6[2];
  if (v27)
    xmmword_1ECD3B1D0(*(_QWORD *)&v27);
  return v9;
}

uint64_t sub_1ACBE7634(uint64_t a1, signed int a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v2 <= a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    xmmword_1ECD3B1C0(v7);
    v2 = *(unsigned __int8 *)(a1 + 28);
  }
  if (v2 < 2)
  {
    v12 = 0;
    goto LABEL_13;
  }
  if (v2 != 4)
  {
    v11 = 0;
    if (v2 < 3)
      goto LABEL_32;
    goto LABEL_15;
  }
  v8 = *(const char **)(v5 + 8);
  v28 = 0;
  v29 = 1;
  v26 = dword_1EECAC650 + 2;
  v27 = 510;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v8, 0xC0207A17uLL, &v26, 0) == -1)
  {
    v14 = *__error();
    v12 = 5;
    if (v14 <= 0x3C)
    {
      if (((1 << v14) & 0x1000000800012010) != 0)
        goto LABEL_49;
      if (v14 == 1)
      {
        v12 = 3;
LABEL_48:
        *(_DWORD *)(a1 + 32) = v14;
        goto LABEL_49;
      }
    }
    if ((_DWORD)v14 != 77)
    {
      v12 = 2058;
      goto LABEL_48;
    }
LABEL_49:
    v11 = 1;
    goto LABEL_50;
  }
  if (a2 == 1 || *(int *)(v6 + 24) >= 2)
  {
    v9 = *(const char **)(v5 + 8);
    v10 = dword_1EECAC650 + *(_DWORD *)(v6 + 80) + 2;
    v28 = 0;
    v29 = 0;
    v26 = v10;
    v27 = 1;
    HIDWORD(v29) = *(_DWORD *)(a1 + 24);
    if (fsctl(v9, 0xC0207A17uLL, &v26, 0) != -1)
    {
      v11 = 0;
      goto LABEL_31;
    }
    v16 = *__error();
    v12 = 5;
    if (v16 <= 0x3C)
    {
      if (((1 << v16) & 0x1000000800012010) != 0)
        goto LABEL_13;
      if (v16 == 1)
      {
        v12 = 3;
LABEL_69:
        *(_DWORD *)(a1 + 32) = v16;
        goto LABEL_13;
      }
    }
    if ((_DWORD)v16 != 77)
    {
      v12 = 3850;
      goto LABEL_69;
    }
LABEL_13:
    v11 = 0;
    goto LABEL_50;
  }
  v11 = 1;
LABEL_31:
  v2 = *(unsigned __int8 *)(a1 + 28);
  if (v2 < 3)
  {
LABEL_32:
    if (v2 >= 2)
      goto LABEL_33;
LABEL_36:
    if (a2 == 1 || *(int *)(v6 + 24) >= 2)
    {
      v12 = 0;
      *(_BYTE *)(v6 + 32) = 1;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_50;
  }
LABEL_15:
  v13 = *(const char **)(v5 + 8);
  v28 = 0;
  v29 = 1;
  v26 = dword_1EECAC650;
  v27 = 1;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v13, 0xC0207A17uLL, &v26, 0) == -1)
  {
    v15 = *__error();
    v12 = 5;
    if (v15 <= 0x3C)
    {
      if (((1 << v15) & 0x1000000800012010) != 0)
        goto LABEL_50;
      if (v15 == 1)
        goto LABEL_43;
    }
    goto LABEL_44;
  }
  if (*(unsigned __int8 *)(a1 + 28) < 2u)
    goto LABEL_36;
LABEL_33:
  if (!*(_DWORD *)v5)
    goto LABEL_36;
  v17 = *(const char **)(v5 + 8);
  v28 = 0;
  v29 = 1;
  v26 = dword_1EECAC650 + 1;
  v27 = 1;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v17, 0xC0207A17uLL, &v26, 0) != -1)
  {
    *(_DWORD *)v5 = 0;
    goto LABEL_36;
  }
  v15 = *__error();
  v12 = 5;
  if (v15 <= 0x3C)
  {
    if (((1 << v15) & 0x1000000800012010) != 0)
      goto LABEL_50;
    if (v15 == 1)
    {
LABEL_43:
      v12 = 3;
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_50;
    }
  }
LABEL_44:
  if ((_DWORD)v15 != 77)
  {
    v12 = 2058;
    *(_DWORD *)(a1 + 32) = v15;
  }
LABEL_50:
  if (!(v12 | a2))
  {
    v18 = dword_1EECAC650;
    v19 = *(_QWORD *)(v6 + 80);
    v20 = *(_DWORD *)(v6 + 24) - 1;
    *(_DWORD *)(v6 + 24) = v20;
    if (v20)
    {
LABEL_55:
      v22 = *(_DWORD *)(v6 + 28) - 1;
      *(_DWORD *)(v6 + 28) = v22;
      if (!v22)
        sub_1ACBE2014(a1);
      v12 = 0;
      goto LABEL_58;
    }
    if (v11
      || (v21 = *(const char **)(v5 + 8),
          v28 = 0,
          v29 = 1,
          v26 = v18 + v19 + 2,
          v27 = 1,
          HIDWORD(v29) = *(_DWORD *)(a1 + 24),
          fsctl(v21, 0xC0207A17uLL, &v26, 0) != -1))
    {
      *(_BYTE *)(v6 + 32) = 0;
      *(_BYTE *)(a1 + 28) = 0;
      goto LABEL_55;
    }
    v25 = *__error();
    v12 = 5;
    if (v25 > 0x3C)
      goto LABEL_70;
    if (((1 << v25) & 0x1000000800012010) == 0)
    {
      if (v25 == 1)
      {
        v12 = 3;
        *(_DWORD *)(a1 + 32) = 1;
        goto LABEL_58;
      }
LABEL_70:
      if ((_DWORD)v25 != 77)
      {
        v12 = 2058;
        *(_DWORD *)(a1 + 32) = v25;
      }
    }
  }
LABEL_58:
  v23 = *(_QWORD *)(v6 + 16);
  if (v23)
    xmmword_1ECD3B1D0(v23);
  if (!(_DWORD)v12)
    *(_BYTE *)(a1 + 28) = a2;
  return v12;
}

uint64_t sub_1ACBE7AAC(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)v3)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    xmmword_1ECD3B1C0(v8);
    v7 = *(_QWORD *)(a1 + 16);
  }
  if (*(unsigned __int8 *)(v7 + 32) > 1u)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_27;
  }
  v9 = *(const char **)(v3 + 8);
  v17 = 0;
  v18 = 0;
  v15 = dword_1EECAC650 + 1;
  v16 = 1;
  HIDWORD(v18) = *(_DWORD *)(a1 + 24);
  if (fsctl(v9, 0xC0207A17uLL, &v15, 0) == -1)
  {
    v12 = *__error();
    v4 = 5;
    if (v12 <= 0x3C)
    {
      if (((1 << v12) & 0x1000000800012010) != 0)
        goto LABEL_20;
      if (v12 == 1)
      {
        v4 = 3;
LABEL_19:
        *(_DWORD *)(a1 + 32) = v12;
        goto LABEL_20;
      }
    }
    if ((_DWORD)v12 != 77)
    {
      v4 = 3850;
      goto LABEL_19;
    }
LABEL_20:
    v5 = 1;
    goto LABEL_25;
  }
  v10 = *(const char **)(v3 + 8);
  v17 = 0;
  v18 = 1;
  v15 = dword_1EECAC650 + 1;
  v16 = 1;
  HIDWORD(v18) = *(_DWORD *)(a1 + 24);
  v4 = 0;
  if (fsctl(v10, 0xC0207A17uLL, &v15, 0) != -1)
    goto LABEL_24;
  v11 = *__error();
  v4 = 5;
  if (v11 > 0x3C)
    goto LABEL_21;
  if (((1 << v11) & 0x1000000800012010) != 0)
    goto LABEL_24;
  if (v11 == 1)
  {
    v4 = 3;
  }
  else
  {
LABEL_21:
    if ((_DWORD)v11 == 77)
      goto LABEL_24;
    v4 = 2058;
  }
  *(_DWORD *)(a1 + 32) = v11;
LABEL_24:
  v5 = 0;
  if ((_DWORD)v4)
  {
LABEL_25:
    if ((_DWORD)v4 == 5)
      v4 = 0;
  }
LABEL_27:
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if (v13)
    xmmword_1ECD3B1D0(v13);
LABEL_29:
  *a2 = v5;
  return v4;
}

uint64_t sub_1ACBE7C98(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;

  v10[2] = 0;
  v11 = a5 == 0;
  v10[0] = a3;
  v10[1] = a4;
  HIDWORD(v11) = *(_DWORD *)(a2 + 24);
  v7 = fsctl(a1, 0xC0207A17uLL, v10, 0);
  result = 0;
  if (v7 == -1)
  {
    v9 = *__error();
    result = 5;
    if (v9 > 0x3C)
      goto LABEL_6;
    if (((1 << v9) & 0x1000000800012010) != 0)
      return result;
    if (v9 == 1)
    {
      result = 3;
    }
    else
    {
LABEL_6:
      if ((_DWORD)v9 == 77)
        return result;
      if (a5)
        result = 3850;
      else
        result = 2058;
    }
    *(_DWORD *)(a2 + 32) = v9;
  }
  return result;
}

uint64_t sub_1ACBE7D60(uint64_t a1, signed int a2)
{
  return sub_1ACBE28AC(a1, a2, 1);
}

uint64_t sub_1ACBE7D68()
{
  return 0;
}

uint64_t sub_1ACBE7D70()
{
  return 0;
}

uint64_t sub_1ACBE7D78(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1ACBE7D84(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t (**v4)(uint64_t);

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 28))
  {
    if ((off_1EECACA90(*(_QWORD *)(a1 + 40)) & 0x80000000) != 0)
    {
      v3 = *__error();
      if (v3 != 2)
        *(_DWORD *)(a1 + 32) = v3;
    }
    else
    {
      *(_BYTE *)(a1 + 28) = 0;
    }
    v2 = *(_QWORD *)(a1 + 40);
  }
  if (v2)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_13:
      (*v4)(v2);
      goto LABEL_14;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_13;
    }
  }
LABEL_14:
  sub_1ACBA8198(a1);
  return 0;
}

uint64_t sub_1ACBE7E78(uint64_t a1, char a2)
{
  const char *v4;
  uint64_t result;
  int v6;
  uint64_t v7;

  v4 = *(const char **)(a1 + 40);
  if (*(_BYTE *)(a1 + 28))
  {
    *(_BYTE *)(a1 + 28) = a2;
    utime(v4, 0);
    return 0;
  }
  else
  {
    result = off_1EECACA78(v4, 511);
    if ((result & 0x80000000) != 0)
    {
      v6 = *__error();
      v7 = 3;
      result = 5;
      switch(v6)
      {
        case 1:
          goto LABEL_7;
        case 4:
        case 13:
        case 16:
        case 17:
        case 35:
        case 60:
        case 77:
          return result;
        default:
          v7 = 3850;
LABEL_7:
          *(_DWORD *)(a1 + 32) = v6;
          result = v7;
          break;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 28) = a2;
    }
  }
  return result;
}

uint64_t sub_1ACBE7F14(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;

  if (*(unsigned __int8 *)(a1 + 28) == a2)
    return 0;
  if (a2 == 1)
  {
    result = 0;
    *(_BYTE *)(a1 + 28) = 1;
  }
  else if ((off_1EECACA90(*(_QWORD *)(a1 + 40)) & 0x80000000) != 0)
  {
    v4 = *__error();
    if (v4 == 2)
      return 0;
    *(_DWORD *)(a1 + 32) = v4;
    return 2058;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 28) = 0;
  }
  return result;
}

uint64_t sub_1ACBE7F94(uint64_t a1, _DWORD *a2)
{
  *a2 = off_1EECAC8F8(*(_QWORD *)(a1 + 40), 0) == 0;
  return 0;
}

char *sub_1ACBE7FD4()
{
  char *result;
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  result = getenv("SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS");
  if (result)
  {
    v1 = strdup(result);
    v2 = strlen(v1);
    if (v2)
    {
      qword_1EECAD0D0[0] = (uint64_t)v1;
      if (v2 >= 1)
      {
        LODWORD(v3) = 0;
        v4 = v2;
        v5 = v1 + 1;
        do
        {
          if (*(v5 - 1) == 58)
          {
            *(v5 - 1) = 0;
            if ((int)v3 > 23)
            {
              sqlite3_log(28, "Too many entries in SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS, truncating list to first %d entries", 26);
              return (char *)sub_1ACBE3224();
            }
            v3 = (int)v3 + 1;
            if (*v5)
              qword_1EECAD0D0[v3] = (uint64_t)v5;
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
    }
    return (char *)sub_1ACBE3224();
  }
  return result;
}

void sub_1ACBE80A0(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  unint64_t v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  const char *v26;
  int v27;
  int v28;
  int v29;
  _OWORD v30[9];
  char __strerrbuf[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  v5 = 0x1EECAC000;
  v6 = 0x1EECAC000;
  do
  {
    v7 = 0;
    v8 = v4;
    v9 = (_BYTE *)(a2 + v4);
    v10 = *v9;
    if (*v9)
    {
      do
      {
        if (v10 == 47)
          break;
        v10 = v9[++v7];
      }
      while (v9[v7]);
    }
    v11 = (_BYTE *)(a2 + v8);
    if ((int)v8 < (int)v8 + (int)v7)
    {
      if (*v11 == 46)
      {
        if ((_DWORD)v7 == 1)
          goto LABEL_3;
        v12 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v7 == 2 && v11[1] == 46)
        {
          if ((int)v12 >= 2)
          {
            v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12 - 1);
            v14 = v12 - 1;
            do
            {
              *(_DWORD *)(a1 + 20) = v14;
              v15 = *v13--;
              --v14;
            }
            while (v15 != 47);
          }
          goto LABEL_3;
        }
      }
      else
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 20);
      }
      if ((int)v12 + (int)v7 + 2 >= *(_DWORD *)(a1 + 16))
      {
        *(_DWORD *)a1 = 1;
        goto LABEL_3;
      }
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v12 + 1;
      *(_BYTE *)(v16 + (int)v12) = 47;
      memcpy((void *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 20)), (const void *)(a2 + v8), (int)v7);
      v17 = *(_DWORD *)(a1 + 20) + v7;
      *(_DWORD *)(a1 + 20) = v17;
      if (!*(_DWORD *)a1)
      {
        memset(v30, 0, sizeof(v30));
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + v17) = 0;
        v18 = *(const char **)(a1 + 8);
        if ((*(unsigned int (**)(const char *, _OWORD *))(v5 + 2896))(v18, v30))
        {
          if (*__error() != 2 && *__error() != 1)
          {
            v19 = v6;
            v20 = *__error();
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            *(_OWORD *)__strerrbuf = 0u;
            strerror_r(v20, __strerrbuf, 0x4FuLL);
            v21 = &byte_1ACCBEAEE;
            if (v18)
              v21 = v18;
            v28 = v20;
            v6 = v19;
            sqlite3_log(14, "os_unix.c:%d: (%d) %s(%s) - %s", 49864, v28, "lstat", v21, __strerrbuf);
          }
        }
        else
        {
          if ((WORD2(v30[0]) & 0xF000) != 0xA000)
            goto LABEL_3;
          v22 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v22 + 1;
          if (v22 >= 201)
          {
            v23 = sub_1ACBE1D1C(49870);
LABEL_32:
            *(_DWORD *)a1 = v23;
            v6 = 0x1EECAC000uLL;
            goto LABEL_3;
          }
          v24 = (*(uint64_t (**)(const char *, char *, uint64_t))(v6 + 2872))(v18, __strerrbuf, 1024);
          if ((unint64_t)(v24 - 1024) <= 0xFFFFFFFFFFFFFC00)
          {
            v23 = sub_1ACBE1D1C(49875);
            v25 = *__error();
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            *(_OWORD *)v36 = 0u;
            strerror_r(v25, v36, 0x4FuLL);
            v26 = &byte_1ACCBEAEE;
            if (v18)
              v26 = v18;
            v29 = v25;
            v5 = 0x1EECAC000uLL;
            sqlite3_log(v23, "os_unix.c:%d: (%d) %s(%s) - %s", 49875, v29, "readlink", v26, v36);
            goto LABEL_32;
          }
          v27 = 0;
          __strerrbuf[v24] = 0;
          if (__strerrbuf[0] != 47)
            v27 = ~(_DWORD)v7 + *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 20) = v27;
          sub_1ACBE80A0(a1, __strerrbuf);
        }
      }
    }
LABEL_3:
    v4 = v8 + v7 + 1;
  }
  while (v11[v7]);
}

void *sub_1ACBE8400()
{
  return &unk_1E5C72FA8;
}

void *sub_1ACBE840C()
{
  return &unk_1E5C73040;
}

void *sub_1ACBE8418()
{
  return &unk_1E5C72DE0;
}

void *sub_1ACBE8424()
{
  return &unk_1E5C731B0;
}

uint64_t sub_1ACBE8430(uint64_t a1)
{
  int v2;
  int v3;

  if (*(_BYTE *)(a1 + 28))
  {
    v2 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      v3 = flock(v2, 8);
      if ((v3 & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_8;
    }
    if (!v3)
      *(_BYTE *)(a1 + 28) = 0;
  }
LABEL_8:
  sub_1ACBA8198(a1);
  return 0;
}

uint64_t sub_1ACBE8490(uint64_t a1, char a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 28))
  {
    result = 0;
LABEL_3:
    *(_BYTE *)(a1 + 28) = a2;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      result = flock(v5, 6);
      if ((result & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_9;
    }
    if (!(_DWORD)result)
      goto LABEL_3;
LABEL_9:
    v6 = *__error();
    result = 5;
    if (v6 > 0x3C)
      goto LABEL_13;
    if (((1 << v6) & 0x1000000800012010) != 0)
      return result;
    if (v6 == 1)
    {
      result = 3;
    }
    else
    {
LABEL_13:
      if ((_DWORD)v6 == 77)
        return result;
      result = 3850;
    }
    *(_DWORD *)(a1 + 32) = v6;
  }
  return result;
}

uint64_t sub_1ACBE854C(uint64_t a1, int a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;

  if (*(unsigned __int8 *)(a1 + 28) == a2)
    return 0;
  if (a2 == 1)
  {
    v4 = 1;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      v6 = flock(v5, 8);
      if ((v6 & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        return 2058;
    }
    if (v6)
      return 2058;
    v4 = 0;
  }
  result = 0;
  *(_BYTE *)(a1 + 28) = v4;
  return result;
}

uint64_t sub_1ACBE85CC(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t result;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  int *v11;

  if (*(unsigned __int8 *)(a1 + 28) > 1u)
  {
    result = 0;
    v7 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      v5 = flock(v4, 6);
      if ((v5 & 0x80000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_8;
    }
    if (!v5)
    {
      v10 = *(_DWORD *)(a1 + 24);
      while (1)
      {
        result = flock(v10, 8);
        if ((result & 0x80000000) == 0)
          break;
        if (*__error() != 4)
          goto LABEL_19;
      }
      if ((_DWORD)result)
      {
LABEL_19:
        v11 = __error();
        v7 = 0;
        LODWORD(v9) = *v11;
        result = 2058;
        goto LABEL_20;
      }
      v7 = 0;
      goto LABEL_21;
    }
LABEL_8:
    v8 = __error();
    result = 0;
    v9 = *v8;
    v7 = 1;
    if (v9 > 0x3C)
      goto LABEL_12;
    if (((1 << v9) & 0x1000000800012010) != 0)
      goto LABEL_21;
    if (v9 == 1)
    {
      result = 3;
      v7 = 1;
    }
    else
    {
LABEL_12:
      if ((_DWORD)v9 == 77)
        goto LABEL_21;
      result = 3850;
    }
LABEL_20:
    *(_DWORD *)(a1 + 32) = v9;
  }
LABEL_21:
  *a2 = v7;
  return result;
}

void *sub_1ACBE86E4()
{
  return &unk_1E5C72E78;
}

void *sub_1ACBE86F0()
{
  return &unk_1E5C72F10;
}

void *sub_1ACBE86FC()
{
  return &unk_1E5C730D8;
}

uint64_t sub_1ACBE8708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t);
  uint64_t v15;
  uint64_t (**v16)(uint64_t);

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v1 + 64))
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (!v3)
      goto LABEL_28;
    v5 = &xmmword_1ECD3B1C0;
    goto LABEL_27;
  }
  if (!(_BYTE)word_1ECD3B144)
  {
    v3 = 0;
    goto LABEL_8;
  }
  v2 = qword_1ECD3B1B0(11);
  v3 = v2;
  if (!v2)
  {
LABEL_8:
    v4 = 1;
    goto LABEL_9;
  }
  xmmword_1ECD3B1C0(v2);
  v4 = 0;
LABEL_9:
  if (dword_1EECAD1A0 < 1)
    goto LABEL_25;
  v6 = 0;
  while (*(_QWORD *)(qword_1EECAD1A8 + v6) != v1)
  {
    v6 += 8;
    if (8 * dword_1EECAD1A0 == v6)
      goto LABEL_25;
  }
  v7 = *(_QWORD *)(v1 + 32);
  if (v7)
    xmmword_1ECD3B1C0(v7);
  if (*(_DWORD *)(v1 + 56) != 1)
    goto LABEL_25;
  v8 = qword_1EECAD1A8;
  v9 = --dword_1EECAD1A0;
  *(_QWORD *)(qword_1EECAD1A8 + v6) = *(_QWORD *)(qword_1EECAD1A8 + 8 * v9);
  if ((_DWORD)v9)
    goto LABEL_25;
  v10 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_24;
    v10 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
  }
  (*v10)(v8);
LABEL_24:
  qword_1EECAD1A8 = 0;
LABEL_25:
  if ((v4 & 1) != 0)
    goto LABEL_28;
  v5 = &xmmword_1ECD3B1D0;
LABEL_27:
  (*v5)(v3);
LABEL_28:
  v11 = *(_DWORD *)(v1 + 56);
  v12 = __OFSUB__(v11--, 1);
  *(_DWORD *)(v1 + 56) = v11;
  if (!((v11 < 0) ^ v12 | (v11 == 0)))
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (v1)
    {
      v16 = &xmmword_1ECD3B1D0;
      goto LABEL_48;
    }
    return 0;
  }
  if ((*(_BYTE *)(v1 + 44) & 1) != 0)
  {
    v13 = *(_QWORD *)(v1 + 24);
    if (v13)
    {
      v14 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_37:
        (*v14)(v13);
        goto LABEL_38;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v13);
      v13 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v14 = &xmmword_1ECD3B1D0;
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  v15 = *(_QWORD *)(v1 + 32);
  if (v15)
  {
    xmmword_1ECD3B1D0(v15);
    if (*(_QWORD *)(v1 + 32))
      off_1ECD3B1B8();
  }
  v16 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_48;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = &xmmword_1ECD3B1D0;
LABEL_48:
    (*v16)(v1);
  }
  return 0;
}

uint64_t sub_1ACBE8A10(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(uint64_t **)(a1 + 8);
  v8 = v7[4];
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (a3 + a4 <= *v7)
  {
    memcpy(__dst, (const void *)(v7[3] + a4), a3);
    v10 = 0;
    v9 = v7[4];
    if (!v9)
      return v10;
LABEL_9:
    xmmword_1ECD3B1D0(v9);
    return v10;
  }
  bzero(__dst, a3);
  if (*v7 > a4)
    memcpy(__dst, (const void *)(v7[3] + a4), *v7 - a4);
  v9 = v7[4];
  v10 = 522;
  if (v9)
    goto LABEL_9;
  return v10;
}

uint64_t sub_1ACBE8ACC(uint64_t a1, void *__src, int a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v7 = *(uint64_t **)(a1 + 8);
  v8 = v7[4];
  if (v8)
    xmmword_1ECD3B1C0(v8);
  v9 = *((_DWORD *)v7 + 11);
  if ((v9 & 4) == 0)
  {
    v10 = a3 + a4;
    v11 = *v7;
    if (v10 <= *v7)
      goto LABEL_22;
    if (v10 <= v7[1])
    {
LABEL_19:
      if (a4 > v11)
        bzero((void *)(v7[3] + v11), a4 - v11);
      *v7 = v10;
LABEL_22:
      memcpy((void *)(v7[3] + a4), __src, a3);
      v13 = 0;
      v14 = v7[4];
      if (!v14)
        return v13;
      goto LABEL_12;
    }
    if ((v9 & 2) == 0 || *((int *)v7 + 10) > 0 || (v12 = v7[2], v12 < v10))
    {
      v13 = 13;
      v14 = v7[4];
      if (!v14)
        return v13;
      goto LABEL_12;
    }
    if (2 * v10 >= v12)
      v16 = v7[2];
    else
      v16 = 2 * v10;
    v17 = sub_1ACB6BB48(v7[3], v16);
    if (v17)
    {
      v7[3] = v17;
      v7[1] = v16;
      v11 = *v7;
      goto LABEL_19;
    }
    v13 = 3082;
    v14 = v7[4];
    if (!v14)
      return v13;
LABEL_12:
    xmmword_1ECD3B1D0(v14);
    return v13;
  }
  v14 = v7[4];
  v13 = 778;
  if (v14)
    goto LABEL_12;
  return v13;
}

uint64_t sub_1ACBE8BFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[4];
  if (v4)
    xmmword_1ECD3B1C0(v4);
  if (*v3 < a2)
  {
    v5 = 11;
    v6 = v3[4];
    if (!v6)
      return v5;
    goto LABEL_7;
  }
  v5 = 0;
  *v3 = a2;
  v6 = v3[4];
  if (v6)
LABEL_7:
    xmmword_1ECD3B1D0(v6);
  return v5;
}

uint64_t sub_1ACBE8C74()
{
  return 0;
}

uint64_t sub_1ACBE8C7C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[4];
  if (v4)
  {
    xmmword_1ECD3B1C0(v4);
    v5 = v3[4];
    *a2 = *v3;
    if (v5)
      xmmword_1ECD3B1D0(v5);
  }
  else
  {
    *a2 = *v3;
  }
  return 0;
}

uint64_t sub_1ACBE8CDC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 16) >= a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    xmmword_1ECD3B1C0(v5);
  if (a2 >= 2 && (*(_BYTE *)(v4 + 44) & 4) != 0)
  {
    v6 = 8;
    v7 = *(_QWORD *)(v4 + 32);
    if (!v7)
      return v6;
    goto LABEL_22;
  }
  if ((a2 - 2) >= 2)
  {
    if (a2 == 1)
    {
      if (*(int *)(v4 + 52) <= 0)
      {
        ++*(_DWORD *)(v4 + 48);
        goto LABEL_21;
      }
    }
    else if (*(int *)(v4 + 48) <= 1)
    {
      if (*(_DWORD *)(a1 + 16) != 1)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_17:
    v6 = 5;
    v7 = *(_QWORD *)(v4 + 32);
    if (!v7)
      return v6;
    goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 16) != 1)
    goto LABEL_21;
  if (*(int *)(v4 + 52) > 0)
    goto LABEL_17;
LABEL_20:
  *(_DWORD *)(v4 + 52) = 1;
LABEL_21:
  v6 = 0;
  *(_DWORD *)(a1 + 16) = a2;
  v7 = *(_QWORD *)(v4 + 32);
  if (v7)
LABEL_22:
    xmmword_1ECD3B1D0(v7);
  return v6;
}

uint64_t sub_1ACBE8DE8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 16) > a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(v4 + 32);
    if (v5)
      xmmword_1ECD3B1C0(v5);
    v6 = *(_DWORD *)(a1 + 16);
    if (a2 == 1)
    {
      if (v6 >= 2)
        --*(_DWORD *)(v4 + 52);
    }
    else
    {
      if (v6 >= 2)
        --*(_DWORD *)(v4 + 52);
      --*(_DWORD *)(v4 + 48);
    }
    *(_DWORD *)(a1 + 16) = a2;
    v7 = *(_QWORD *)(v4 + 32);
    if (v7)
      xmmword_1ECD3B1D0(v7);
  }
  return 0;
}

uint64_t sub_1ACBE8E94(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = v5[4];
  if (v6)
    xmmword_1ECD3B1C0(v6);
  if (a2 != 36)
  {
    if (a2 == 12)
    {
      v7 = 0;
      *a3 = (uint64_t)sqlite3_mprintf("memdb(%p,%lld)", (const void *)v5[3], *v5);
      v8 = v5[4];
      if (!v8)
        return v7;
    }
    else
    {
      v7 = 12;
      v8 = v5[4];
      if (!v8)
        return v7;
    }
    goto LABEL_14;
  }
  v9 = *v5;
  if (*a3 >= *v5)
  {
    v9 = *a3;
  }
  else if (*a3 < 0)
  {
    v9 = v5[2];
  }
  v7 = 0;
  v5[2] = v9;
  *a3 = v9;
  v8 = v5[4];
  if (v8)
LABEL_14:
    xmmword_1ECD3B1D0(v8);
  return v7;
}

uint64_t sub_1ACBE8F6C()
{
  return 5633;
}

uint64_t sub_1ACBE8F74(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 32);
  if (v8)
    xmmword_1ECD3B1C0(v8);
  if (a2 + a3 > *(_QWORD *)v7 || (*(_BYTE *)(v7 + 44) & 2) != 0)
  {
    v9 = 0;
  }
  else
  {
    ++*(_DWORD *)(v7 + 40);
    v9 = *(_QWORD *)(v7 + 24) + a2;
  }
  *a4 = v9;
  v10 = *(_QWORD *)(v7 + 32);
  if (v10)
    xmmword_1ECD3B1D0(v10);
  return 0;
}

uint64_t sub_1ACBE9008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    xmmword_1ECD3B1C0(v2);
    v3 = *(_QWORD *)(v1 + 32);
    --*(_DWORD *)(v1 + 40);
    if (v3)
      xmmword_1ECD3B1D0(v3);
  }
  else
  {
    --*(_DWORD *)(v1 + 40);
  }
  return 0;
}

uint64_t sub_1ACBE906C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(uint64_t **)(result + 24);
  --v1[3];
  v2 = *(_QWORD *)(result + 56) - 1;
  *(_QWORD *)(result + 56) = v2;
  if (v2)
    return result;
  v3 = *(unsigned __int16 *)(result + 52);
  if ((v3 & 1) == 0)
  {
    v4 = v1[2];
    v5 = *(_QWORD *)(result + 72);
    if (v4 == result)
    {
      v1[2] = v5;
      v4 = v5;
    }
    v6 = *(_QWORD *)(result + 64);
    if (v6)
    {
      *(_QWORD *)(v6 + 72) = v5;
      v5 = *(_QWORD *)(result + 72);
      if (!v5)
      {
        *(_QWORD *)(result + 64) = v6;
        *(_QWORD *)(result + 72) = 0;
LABEL_13:
        *(_QWORD *)(v6 + 72) = result;
LABEL_17:
        *v1 = result;
        if ((v3 & 8) == 0 && !v4)
          v1[2] = result;
        return result;
      }
    }
    else
    {
      v1[1] = v5;
      if (!v5)
      {
        *((_BYTE *)v1 + 49) = 2;
        *(_QWORD *)(result + 64) = 0;
        *(_QWORD *)(result + 72) = 0;
        goto LABEL_15;
      }
    }
    *(_QWORD *)(v5 + 64) = v6;
    v6 = *v1;
    *(_QWORD *)(result + 64) = *v1;
    *(_QWORD *)(result + 72) = 0;
    if (v6)
      goto LABEL_13;
LABEL_15:
    v1[1] = result;
    if (*((_BYTE *)v1 + 48))
      *((_BYTE *)v1 + 49) = 1;
    goto LABEL_17;
  }
  if (*((_BYTE *)v1 + 48))
    return xmmword_1ECD3B228(v1[9], *(_QWORD *)result, 0);
  return result;
}

uint64_t sub_1ACBE9148(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_DWORD *)(result + 40);
  if (v2 < 1)
  {
    v4 = 1;
  }
  else
  {
    v3 = 0;
    v4 = 1;
    v5 = 8;
    do
    {
      result = *(_QWORD *)(*(_QWORD *)(v1 + 32) + v5);
      if (result && *(_BYTE *)(result + 17))
      {
        ++*(_DWORD *)(result + 20);
        if (*(_BYTE *)(result + 18))
        {
          v4 = 0;
        }
        else
        {
          result = sub_1ACBECF6C(result);
          v4 = 0;
          v2 = *(_DWORD *)(v1 + 40);
        }
      }
      ++v3;
      v5 += 32;
    }
    while (v3 < v2);
  }
  *(_BYTE *)(v1 + 111) = v4;
  return result;
}

uint64_t sub_1ACBE91DC(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(result + 40);
  if (v1 >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = 8;
    do
    {
      result = *(_QWORD *)(*(_QWORD *)(v2 + 32) + v4);
      if (result && *(_BYTE *)(result + 17))
      {
        v5 = *(_DWORD *)(result + 20) - 1;
        *(_DWORD *)(result + 20) = v5;
        if (!v5)
        {
          result = sub_1ACBED048(result);
          v1 = *(_DWORD *)(v2 + 40);
        }
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v1);
  }
  return result;
}

void *sub_1ACBE9258(uint64_t a1, const char *a2, va_list a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t i;
  char v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v4 = *(_DWORD *)(a1 + 136);
  v16 = a1;
  v17 = &v21;
  v18 = 512;
  v19 = v4;
  WORD2(v20) = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, a3);
  if (v17 && (v17[v20] = 0, v19) && (v20 & 0x40000000000) == 0)
    v11 = sub_1ACBE13A0(&v16);
  else
    v11 = v17;
  if (BYTE4(v20) == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v13 = *(_QWORD *)(a1 + 344);
    if (v13)
    {
      sub_1ACBCB308(v13, "out of memory", v5, v6, v7, v8, v9, v10, v15);
      for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
  return v11;
}

void sub_1ACBE938C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  int v6;

  v4 = *(_QWORD *)(a1 + 416);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 20) & 0x9000) == 0)
    {
      *(_WORD *)(v4 + 20) = 1;
      if (a2 == 3082)
        return;
      goto LABEL_5;
    }
    sub_1ACBF2A54((int *)v4);
  }
  if (a2 == 3082)
    return;
LABEL_5:
  if ((a2 & 0xFB) == 0xA)
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 128);
    if (v5)
      v6 = v5();
    else
      v6 = 0;
    *(_DWORD *)(a1 + 92) = v6;
  }
}

uint64_t sub_1ACBE9418(uint64_t a1)
{
  uint64_t v1;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  char v22;
  uint64_t v23;

  v1 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 40) || *(_BYTE *)(a1 + 301))
    return 0;
  v23 = 0;
  v4 = sub_1ACB57BF0(*(_QWORD *)v1, 0, v1, &v23, 0, 0x21Eu);
  if (v4)
  {
    v12 = v4;
    sub_1ACBCB308(a1, "unable to open a temporary database file for storing temporary tables", v5, v6, v7, v8, v9, v10, v22);
    *(_DWORD *)(a1 + 24) = v12;
    return 1;
  }
  v13 = v23;
  *(_QWORD *)(*(_QWORD *)(v1 + 32) + 40) = v23;
  if (sub_1ACBB5FAC(v13, *(_DWORD *)(v1 + 116), 0, 0, v11) == 7)
  {
    if (!*(_BYTE *)(v1 + 103) && !*(_BYTE *)(v1 + 104))
    {
      *(_BYTE *)(v1 + 103) = 1;
      if (*(int *)(v1 + 220) >= 1)
        *(_DWORD *)(v1 + 424) = 1;
      ++*(_DWORD *)(v1 + 432);
      *(_WORD *)(v1 + 436) = 0;
      v20 = *(_QWORD *)(v1 + 344);
      if (v20)
      {
        sub_1ACBCB308(v20, "out of memory", v14, v15, v16, v17, v18, v19, v22);
        for (i = *(_QWORD *)(v1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1ACBE9538(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(_QWORD))(v1 + 664);
  if (!v2 || (*(_DWORD *)(v1 + 688) & 0x80000000) != 0)
    return 0;
  *(_BYTE *)(*(_QWORD *)(v1 + 680) + 784) = 0;
  v3 = v2(*(_QWORD *)(v1 + 672));
  if (*(uint64_t (**)(uint64_t *, int))(v1 + 664) != sub_1ACBCF6E8)
  {
    v4 = *(_QWORD *)(v1 + 680);
    if (*(_BYTE *)(v4 + 784))
    {
      v5 = sub_1ACBCF6E8((uint64_t *)v4, *(_DWORD *)(v1 + 688));
      if ((_DWORD)v3 == 109)
        v3 = v5;
      else
        v3 = v3;
    }
  }
  if ((_DWORD)v3)
    v6 = *(_DWORD *)(v1 + 688) + 1;
  else
    v6 = -1;
  *(_DWORD *)(v1 + 688) = v6;
  return v3;
}

void *sub_1ACBE95CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v7 = *(void **)(v6 + 72);
  if (a2 && !v7)
  {
    v8 = (void *)sub_1ACB5D828(a2);
    v7 = v8;
    if (v8)
      bzero(v8, a2);
    *(_QWORD *)(v6 + 72) = v7;
    *(_QWORD *)(v6 + 80) = a3;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9)
    {
      sub_1ACBED048(a1);
      return *(void **)(v6 + 72);
    }
  }
  return v7;
}

uint64_t sub_1ACBE9680(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t result;
  int v15;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 336);
  v6 = *a2;
  v7 = getprogname();
  v8 = v6;
  if (v7)
  {
    v9 = v7;
    if (strncmp("assetsd", v7, 7uLL) && strncmp("backupd", v9, 7uLL) && strncmp("bird", v9, 4uLL))
    {
      if (!strncmp("callservicesd", v9, 0xDuLL))
        goto LABEL_57;
      if (strncmp("cloudd", v9, 6uLL) && strncmp("dataaccessd", v9, 0xBuLL))
      {
        if (strncmp("duetexpert", v9, 0xAuLL)
          && strncmp("healthd", v9, 7uLL)
          && strncmp("IMDPersistence", v9, 0xEuLL)
          && strncmp("IMDPersistenceAgent", v9, 0x13uLL))
        {
          if (!strncmp("itunesstored", v9, 0xCuLL))
          {
            v8 = 128;
            goto LABEL_32;
          }
          if (strncmp("keybagd", v9, 7uLL)
            && strncmp("mediaanalysisd", v9, 0xEuLL)
            && strncmp("medialibraryd", v9, 0xDuLL))
          {
            if (!strncmp("MobileMail", v9, 0xAuLL)
              || !strncmp("MobileNotes", v9, 0xBuLL)
              || !strncmp("MobileSafari", v9, 0xCuLL)
              || !strncmp("nsurlstoraged", v9, 0xDuLL))
            {
              v8 = 1024;
              goto LABEL_32;
            }
            if (strncmp("pipelined", v9, 9uLL)
              && strncmp("resentsd", v9, 8uLL)
              && strncmp("searchd", v9, 7uLL)
              && strncmp("securityd", v9, 9uLL)
              && strncmp("SpringBoard", v9, 0xBuLL))
            {
              if (!strncmp("suggestd", v9, 8uLL))
                v8 = 512;
              else
                v8 = v6;
              goto LABEL_32;
            }
          }
        }
LABEL_57:
        v8 = 256;
        goto LABEL_32;
      }
    }
    v8 = 512;
  }
LABEL_32:
  if (qword_1ECD3EAA0 != -1)
    dispatch_once(&qword_1ECD3EAA0, &unk_1E5C73398);
  if (v8 <= dword_1ECD3EA98)
    v10 = dword_1ECD3EA98;
  else
    v10 = v8;
  if ((_DWORD)v10 != (_DWORD)v6 && (int)v6 >= 1 && (int)v10 > (int)v6)
  {
    if (dword_1ECD3EA98 && dword_1ECD3EA98 >= v8)
      sqlite3_log(28, "Environment override of cache_size %d -> %d");
    else
      sqlite3_log(27, "Overriding cache_size %d -> %d");
    v6 = v10;
  }
  *(_DWORD *)(v5 + 32) = v6;
  if ((v6 & 0x80000000) != 0)
  {
    v13 = *(int *)(v5 + 44);
    if (-1024 * (int)v6 / (v13 + *(int *)(v5 + 40)) >= 1000000000)
      v6 = 1000000000;
    else
      v6 = -1024 * (int)v6 / (v13 + *(int *)(v5 + 40));
  }
  result = ((uint64_t (*)(_QWORD, uint64_t))*(&xmmword_1ECD3B208 + 1))(*(_QWORD *)(v5 + 72), v6);
  *a2 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(a1 + 17))
  {
    v15 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v15;
    if (!v15)
      return sub_1ACBED048(a1);
  }
  return result;
}

uint64_t sub_1ACBE9A60(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  LODWORD(v2) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v5 = *(_DWORD **)(*(_QWORD *)v4 + 336);
  if ((_DWORD)v2)
  {
    if ((v2 & 0x80000000) != 0)
      v2 = -1024 * (int)v2 / ((int)v5[11] + (uint64_t)(int)v5[10]);
    v5[9] = v2;
  }
  LODWORD(v6) = v5[8];
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (int)v5[11];
    if (-1024 * (int)v6 / (v7 + (int)v5[10]) >= 1000000000)
      LODWORD(v6) = 1000000000;
    else
      v6 = -1024 * (int)v6 / (v7 + (int)v5[10]);
  }
  v8 = v5[9];
  if (*(_BYTE *)(a1 + 17))
  {
    v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9)
      sub_1ACBED048(a1);
  }
  if ((int)v6 <= v8)
    return v8;
  else
    return v6;
}

uint64_t sub_1ACBE9B30(int a1, char *__s, _QWORD *a3, int a4, int *a5)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!__s || (v9 = strlen(__s) & 0x3FFFFFFF, v9 < 2) || (v10 = *__s, v10 != 92) && v10 != 47)
  {
    v13 = sub_1ACB5D828(72);
    if (!v13)
      return 7;
    v14 = v13;
    *(_QWORD *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_DWORD *)(v13 + 44) = 3;
    *(_QWORD *)(v13 + 16) = qword_1ECD3B2D8;
    goto LABEL_10;
  }
  if ((_BYTE)word_1ECD3B144)
  {
    v11 = qword_1ECD3B1B0(11);
    v12 = v11;
    if (v11)
    {
      xmmword_1ECD3B1C0(v11);
      v26 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v12 = 0;
  }
  v26 = 1;
LABEL_18:
  v17 = dword_1EECAD1A0;
  if (dword_1EECAD1A0 >= 1)
  {
    v18 = qword_1EECAD1A8;
    while (1)
    {
      v14 = *(_QWORD *)v18;
      if (!strcmp(*(const char **)(*(_QWORD *)v18 + 64), __s))
        break;
      v18 += 8;
      if (!--v17)
        goto LABEL_22;
    }
    v24 = *(_QWORD *)(v14 + 32);
    if (v24)
      xmmword_1ECD3B1C0(v24);
    ++*(_DWORD *)(v14 + 56);
    if ((v26 & 1) == 0)
      goto LABEL_38;
    goto LABEL_10;
  }
LABEL_22:
  v19 = sub_1ACB5D828(v9 + 75);
  if (!v19)
    goto LABEL_33;
  v14 = v19;
  v20 = sub_1ACB6BB48(qword_1EECAD1A8, 8 * dword_1EECAD1A0 + 8);
  if (!v20)
  {
LABEL_27:
    v23 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_32:
      (*v23)(v14);
      goto LABEL_33;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v14);
    v14 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v23 = &xmmword_1ECD3B1D0;
      goto LABEL_32;
    }
LABEL_33:
    v15 = 7;
    if ((v26 & 1) != 0)
      return v15;
    goto LABEL_13;
  }
  v21 = dword_1EECAD1A0++;
  *(_QWORD *)(v20 + 8 * v21) = v14;
  qword_1EECAD1A8 = v20;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_QWORD *)(v14 + 64) = 0;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 44) = 3;
  *(_QWORD *)(v14 + 16) = qword_1ECD3B2D8;
  *(_QWORD *)(v14 + 64) = v14 + 72;
  memcpy((void *)(v14 + 72), __s, v9 + 1);
  v22 = sqlite3_initialize();
  if ((_DWORD)v22)
  {
    *(_QWORD *)(v14 + 32) = 0;
LABEL_26:
    --dword_1EECAD1A0;
    goto LABEL_27;
  }
  v25 = qword_1ECD3B1B0(v22);
  *(_QWORD *)(v14 + 32) = v25;
  if (!v25)
    goto LABEL_26;
  *(_DWORD *)(v14 + 56) = 1;
  xmmword_1ECD3B1C0(v25);
  if ((v26 & 1) == 0)
LABEL_38:
    xmmword_1ECD3B1D0(v12);
LABEL_10:
  a3[1] = v14;
  if (a5)
    *a5 = a4 | 0x80;
  v15 = 0;
  *a3 = &unk_1E5C73248;
  v12 = *(_QWORD *)(v14 + 32);
  if (v12)
LABEL_13:
    xmmword_1ECD3B1D0(v12);
  return v15;
}

uint64_t sub_1ACBE9E3C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t sub_1ACBE9E48(int a1, const char *a2, int a3, char *a4)
{
  sqlite3_snprintf(a3, a4, "%s", a2);
  return 0;
}

uint64_t sub_1ACBE9E7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
}

uint64_t sub_1ACBE9E88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 80))();
}

uint64_t sub_1ACBE9E94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 88))();
}

uint64_t sub_1ACBE9EA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 96))();
}

uint64_t sub_1ACBE9EAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 104))();
}

uint64_t sub_1ACBE9EB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 112))();
}

uint64_t sub_1ACBE9EC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 128))();
}

uint64_t sub_1ACBE9ED0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 136))();
}

uint64_t sub_1ACBE9EDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 48) || *(_BYTE *)(a1 + 25) && ((*(_BYTE *)(a1 + 25) & 3) != 0 || (*(_WORD *)(a2 + 52) & 8) != 0))
    return 0;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 276);
  *(_QWORD *)(a2 + 32) = 0;
  if (*(_QWORD *)(a1 + 344))
  {
    result = sub_1ACBEA110(a2);
    if (!(_DWORD)result)
    {
      result = sub_1ACBEA460(a1, a2, 0, 0);
      if (!(_DWORD)result)
      {
LABEL_18:
        v5 = *(_QWORD *)(a2 + 24);
        v6 = *(_QWORD *)(a2 + 72);
        if (*(_QWORD *)(v5 + 16) == a2)
          *(_QWORD *)(v5 + 16) = v6;
        v7 = *(_QWORD *)(a2 + 64);
        if (v7)
        {
          *(_QWORD *)(v7 + 72) = v6;
          v6 = *(_QWORD *)(a2 + 72);
          if (!v6)
          {
            *(_QWORD *)v5 = v7;
            goto LABEL_25;
          }
        }
        else
        {
          *(_QWORD *)(v5 + 8) = v6;
          if (!v6)
          {
            *(_QWORD *)v5 = 0;
            *(_BYTE *)(v5 + 49) = 2;
LABEL_25:
            *(_WORD *)(a2 + 52) = *(_WORD *)(a2 + 52) & 0xFFF0 | 1;
            if (!*(_QWORD *)(a2 + 56))
            {
              if (*(_BYTE *)(v5 + 48))
                xmmword_1ECD3B228(*(_QWORD *)(v5 + 72), *(_QWORD *)a2, 0);
            }
            return 0;
          }
        }
        *(_QWORD *)(v6 + 64) = v7;
        goto LABEL_25;
      }
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 8) == 0 && *(_BYTE *)(a1 + 21) != 3
         || (result = sub_1ACBA7C60(a1, 1), !(_DWORD)result))
  {
    result = sub_1ACBA7EF0((_QWORD *)a1, a2);
    if (!(_DWORD)result)
      goto LABEL_18;
  }
  if (result == 13 || result == 10)
  {
    *(_DWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 21) = 6;
    *(_QWORD *)(a1 + 288) = sub_1ACBEBC4C;
  }
  return result;
}

uint64_t sub_1ACBEA05C(uint64_t result, char a2)
{
  _BOOL4 v2;
  char v3;
  int v4;
  char v5;
  char v6;
  int v7;
  char v8;

  if (*(_BYTE *)(result + 16))
  {
    v2 = 0;
    *(_WORD *)(result + 11) = 1;
    *(_BYTE *)(result + 13) = 0;
LABEL_4:
    v3 = 0;
    *(_BYTE *)(result + 14) = 0;
    v4 = 1;
    goto LABEL_5;
  }
  v2 = (a2 & 7u) > 2;
  *(_BYTE *)(result + 12) = v2;
  *(_BYTE *)(result + 13) = (a2 & 7) == 4;
  *(_BYTE *)(result + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1)
    goto LABEL_4;
  v4 = 0;
  if ((a2 & 8) != 0)
    v3 = 3;
  else
    v3 = 2;
  *(_BYTE *)(result + 14) = v3;
LABEL_5:
  v5 = 4 * v3;
  if (v2)
    v6 = v3;
  else
    v6 = 0;
  if ((a2 & 0x10) != 0)
    v7 = v4;
  else
    v7 = 1;
  if (v7)
    v8 = v5;
  else
    v8 = 12;
  *(_BYTE *)(result + 15) = v8 | v6;
  *(_BYTE *)(result + 25) = *(_BYTE *)(result + 25) & 0xFE | ((a2 & 0x20) == 0);
  return result;
}

uint64_t sub_1ACBEA110(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD, _QWORD, uint64_t);
  unsigned int v38;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *((unsigned int *)v1 + 32);
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  v5 = *(_DWORD *)(a1 + 48);
  v6 = v2 - 1;
  v7 = v1[15];
  v8 = (_DWORD *)(v7 + 88);
  v9 = 1;
  while (1)
  {
    if (*(_DWORD *)(v7 + 56 * v4 + 24) < v5)
      goto LABEL_4;
    v10 = *(_DWORD **)(v7 + 56 * v4 + 16);
    if (v5 - 1 >= *v10)
      goto LABEL_19;
    v11 = v5 - 1;
    while (1)
    {
      v12 = v10[2];
      if (!v12)
        break;
      v13 = v11 / v12;
      v11 %= v12;
      v10 = *(_DWORD **)&v10[2 * v13 + 4];
      if (!v10)
        goto LABEL_19;
    }
    if (*v10 >= 0xF81u)
      break;
    if (((*((unsigned __int8 *)v10 + ((unint64_t)v11 >> 3) + 16) >> (v11 & 7)) & 1) == 0)
      goto LABEL_19;
LABEL_4:
    ++v4;
    ++v9;
    --v6;
    v8 += 14;
    if (v4 == v2)
      return 0;
  }
  v14 = v11 % 0x7C;
  v15 = v10 + 4;
  v16 = v15[v11 % 0x7C];
  if (v16)
  {
    v17 = v11 + 1;
    while (v16 != v17)
    {
      if (v14 == 123)
        v14 = 0;
      else
        ++v14;
      v16 = v15[v14];
      if (!v16)
        goto LABEL_19;
    }
    goto LABEL_4;
  }
LABEL_19:
  if ((int)v4 + 1 < (int)v2)
  {
    v18 = v2 - v9;
    if ((unint64_t)(v2 - v9) < 2)
      goto LABEL_24;
    v9 += v18 & 0xFFFFFFFFFFFFFFFELL;
    v19 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *v8 = 0;
      v8[14] = 0;
      v8 += 28;
      v19 -= 2;
    }
    while (v19);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_24:
      v20 = v2 - v9;
      v21 = (_DWORD *)(v7 + 56 * v9 + 32);
      do
      {
        *v21 = 0;
        v21 += 14;
        --v20;
      }
      while (v20);
    }
  }
  v22 = *((unsigned __int8 *)v1 + 9);
  if (v22 == 2)
  {
LABEL_27:
    ++*((_DWORD *)v1 + 15);
    if ((int)v2 >= 1)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = v1[15] + v23;
        if (*(_DWORD *)(v26 + 24) >= v5)
        {
          v25 = sub_1ACBA79A4(*(unsigned int **)(v26 + 16), v5) | v25;
          LODWORD(v2) = *((_DWORD *)v1 + 32);
        }
        ++v24;
        v23 += 56;
      }
      while (v24 < (int)v2);
      return v25;
    }
    return 0;
  }
  v27 = v1[11];
  if (!*(_QWORD *)v27)
  {
    if (v22 == 4 || *((_BYTE *)v1 + 26))
    {
      v28 = *v1;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)v27 = 0u;
      v29 = 1016;
      v30 = -1;
      goto LABEL_37;
    }
    v30 = dword_1ECD3B15C;
    v28 = *v1;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)v27 = 0u;
    if (v30)
    {
      if (v30 <= 0)
        v29 = 1016;
      else
        v29 = v30;
LABEL_37:
      *(_QWORD *)v27 = &unk_1E5C732E0;
      *(_DWORD *)(v27 + 8) = v29;
      *(_DWORD *)(v27 + 12) = v30;
      *(_DWORD *)(v27 + 56) = 8222;
      *(_QWORD *)(v27 + 64) = v28;
      *(_QWORD *)(v27 + 72) = 0;
    }
    else
    {
      v25 = (*(uint64_t (**)(uint64_t, _QWORD))(v28 + 40))(v28, 0);
      if ((_DWORD)v25)
        return v25;
    }
  }
  v31 = *(_QWORD *)(a1 + 8);
  v32 = *((unsigned int *)v1 + 15);
  v33 = v1[25];
  if (*((_BYTE *)v1 + 26)
    || (v36 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))v1[37]) == 0
    || (v25 = 7, (v31 = v36(v1[40], *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 48), 7)) != 0))
  {
    v34 = (v33 + 4) * v32;
    v35 = v1[11];
    v38 = bswap32(*(_DWORD *)(a1 + 48));
    v25 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v35 + 24))(v35, &v38, 4, v34);
    if (!(_DWORD)v25)
    {
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1[11] + 24))(v1[11], v31, *((unsigned int *)v1 + 50), v34 + 4);
      if (!(_DWORD)v25)
      {
        v5 = *(_DWORD *)(a1 + 48);
        LODWORD(v2) = *((_DWORD *)v1 + 32);
        goto LABEL_27;
      }
    }
  }
  return v25;
}

uint64_t sub_1ACBEA460(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v5;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void (**v64)(unsigned int *);
  uint64_t v65;
  uint64_t (*v66)(void);
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  BOOL v80;
  _BOOL4 v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  _QWORD v96[2];
  uint64_t v97;
  unsigned int v98;
  int v99;
  void *v100;
  uint64_t v101;
  uint64_t __buf;
  int v103;
  unsigned int v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  uint64_t v114;

  v5 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  v95 = a2;
  if (a4)
  {
    v7 = 0;
    if (a2)
    {
      v8 = &v95;
      do
      {
        v11 = *(_QWORD *)(v5 + 32);
        v10 = v5 + 32;
        v9 = v11;
        if (*(_DWORD *)(v10 + 16) <= a3)
        {
          ++v7;
          v8 = (uint64_t *)v10;
        }
        *v8 = v9;
        v5 = v9;
      }
      while (v9);
      v5 = v95;
    }
  }
  else
  {
    v7 = 1;
  }
  *(_DWORD *)(a1 + 256) += v7;
  *(_DWORD *)(a1 + 272) += v7;
  if (*(_DWORD *)(v5 + 48) == 1)
  {
    v12 = bswap32(bswap32(*(_DWORD *)(*(_QWORD *)(v5 + 40) + 136)) + 1);
    *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24) = v12;
    *(_DWORD *)(*(_QWORD *)(v5 + 8) + 92) = v12;
    *(_DWORD *)(*(_QWORD *)(v5 + 8) + 96) = -1167184384;
  }
  v13 = *(_QWORD *)(a1 + 344);
  v14 = *(_QWORD *)(a1 + 200);
  v15 = *(unsigned __int8 *)(a1 + 15);
  v101 = 0;
  v16 = **(_QWORD **)(v13 + 48);
  if (*(_QWORD *)(v13 + 72) == *(_QWORD *)v16
    && *(_QWORD *)(v13 + 80) == *(_QWORD *)(v16 + 8)
    && *(_QWORD *)(v13 + 88) == *(_QWORD *)(v16 + 16)
    && *(_QWORD *)(v13 + 96) == *(_QWORD *)(v16 + 24)
    && *(_QWORD *)(v13 + 104) == *(_QWORD *)(v16 + 32)
    && *(_QWORD *)(v13 + 112) == *(_QWORD *)(v16 + 40))
  {
    v22 = 0;
    if (*(_WORD *)(v13 + 60))
      goto LABEL_43;
  }
  else
  {
    v22 = *(_DWORD *)(v16 + 16) + 1;
    if (*(_WORD *)(v13 + 60))
      goto LABEL_43;
  }
  if (!*(_DWORD *)(v16 + 96))
    goto LABEL_37;
  LODWORD(__buf) = 0;
  sqlite3_initialize();
  arc4random_buf(&__buf, 4uLL);
  if (*(_BYTE *)(v13 + 63))
    goto LABEL_32;
  v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 8) + 112))(*(_QWORD *)(v13 + 8), 4, 4, 10);
  if ((_DWORD)v27 != 5)
  {
    v28 = v27;
    if ((_DWORD)v27)
      goto LABEL_42;
LABEL_32:
    v23 = __buf;
    v24 = **(_DWORD ***)(v13 + 48);
    ++*(_DWORD *)(v13 + 136);
    *(_DWORD *)(v13 + 88) = 0;
    v25 = bswap32(*(_DWORD *)(v13 + 104)) + 1;
    *(_BYTE *)(v13 + 104) = HIBYTE(v25);
    *(_BYTE *)(v13 + 105) = BYTE2(v25);
    *(_BYTE *)(v13 + 106) = BYTE1(v25);
    *(_BYTE *)(v13 + 107) = v25;
    *(_DWORD *)(v13 + 108) = v23;
    v26 = sub_1ACB6CF44(v13);
    v24[24] = 0;
    v24[32] = 0;
    v24[26] = 0;
    v24[27] = -1;
    v24[28] = -1;
    v24[29] = -1;
    if (!*(_BYTE *)(v13 + 63))
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(v13 + 8) + 112))(*(_QWORD *)(v13 + 8), 4, 4, 9, v26);
  }
LABEL_37:
  if (!*(_BYTE *)(v13 + 63))
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 8) + 112))(*(_QWORD *)(v13 + 8), 3, 1, 5);
  *(_WORD *)(v13 + 60) = -1;
  v29 = 1;
  do
    v30 = sub_1ACB6A6F8(v13, &__buf, 1, v29++);
  while ((_DWORD)v30 == -1);
  v28 = v30;
LABEL_42:
  if ((_DWORD)v28)
    return v28;
LABEL_43:
  v31 = *(unsigned int *)(v13 + 88);
  if (!(_DWORD)v31)
  {
    __buf = 0x18E22D0082067F37;
    LOBYTE(v103) = BYTE3(v14);
    BYTE1(v103) = BYTE2(v14);
    BYTE2(v103) = BYTE1(v14);
    HIBYTE(v103) = v14;
    v45 = *(_DWORD *)(v13 + 136);
    v104 = bswap32(v45);
    if (!v45)
    {
      sqlite3_initialize();
      arc4random_buf((void *)(v13 + 104), 8uLL);
    }
    v105 = *(_QWORD *)(v13 + 104);
    v46 = HIDWORD(__buf) + __buf + __buf + v103;
    v47 = v104 + HIDWORD(__buf) + __buf + v46;
    v48 = v46 + v105 + v47;
    v49 = v47 + HIDWORD(v105) + v48;
    v106 = HIBYTE(v48);
    v107 = BYTE2(v48);
    v108 = BYTE1(v48);
    v109 = v48;
    v110 = HIBYTE(v49);
    v111 = BYTE2(v49);
    v112 = BYTE1(v49);
    v113 = v49;
    *(_DWORD *)(v13 + 56) = v14;
    *(_BYTE *)(v13 + 85) = 0;
    *(_DWORD *)(v13 + 96) = v48;
    *(_DWORD *)(v13 + 100) = v49;
    *(_BYTE *)(v13 + 67) = 1;
    v28 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)(v13 + 16) + 24))(*(_QWORD *)(v13 + 16), &__buf, 32, 0);
    if ((_DWORD)v28)
      return v28;
    if (*(_BYTE *)(v13 + 68))
    {
      if (((v15 >> 2) & 3) != 0)
      {
        v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 16) + 40))(*(_QWORD *)(v13 + 16));
        if ((_DWORD)v28)
          return v28;
      }
    }
  }
  if (*(_DWORD *)(v13 + 56) != (_DWORD)v14)
    return sub_1ACBEB08C(75909);
  v32 = *(_QWORD *)(v13 + 16);
  v96[0] = v13;
  v96[1] = v32;
  v87 = v32;
  v97 = 0;
  v98 = v15;
  v99 = v14;
  v33 = (int)v14 + 24;
  v34 = malloc_type_malloc(v33, 0xFA432F10uLL);
  v100 = v34;
  if (!v34)
    return 7;
  v88 = v34;
  v89 = v15;
  v91 = v14;
  v93 = (int)v14 + 24;
  v35 = v33 * v31 + 32;
  if (v5)
  {
    v92 = 0;
    v36 = v5;
    while (1)
    {
      if (!v22)
        goto LABEL_53;
      if (a4)
      {
        v37 = *(_QWORD *)(v36 + 32);
        if (!v37)
        {
          LODWORD(v31) = v31 + 1;
          goto LABEL_55;
        }
      }
      LODWORD(__buf) = 0;
      sub_1ACBEB0A0(v13, *(_DWORD *)(v36 + 48), &__buf);
      v38 = __buf;
      if (__buf >= v22)
      {
        if (*(_DWORD *)(v13 + 124) - 1 >= __buf)
          *(_DWORD *)(v13 + 124) = __buf;
        v41 = *(_QWORD *)(v36 + 40);
        v42 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v41 + 296);
        if (v42)
        {
          v43 = v42(*(_QWORD *)(v41 + 320), *(_QWORD *)(v36 + 8), *(unsigned int *)(v36 + 48), 6);
          if (!v43)
            return 7;
        }
        else
        {
          v43 = *(_QWORD *)(v36 + 8);
          if (!v43)
            return 7;
        }
        v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, size_t))(**(_QWORD **)(v13 + 16) + 24))(*(_QWORD *)(v13 + 16), v43, v91, v33 * (v38 - 1) + 56);
        if ((_DWORD)v44)
          return v44;
        *(_WORD *)(v36 + 52) &= ~0x40u;
        v36 = *(_QWORD *)(v36 + 32);
        if (!v36)
          goto LABEL_80;
      }
      else
      {
LABEL_53:
        LODWORD(v31) = v31 + 1;
        if (a4)
        {
          v37 = *(_QWORD *)(v36 + 32);
LABEL_55:
          if (v37)
            v39 = 0;
          else
            v39 = a3;
          goto LABEL_59;
        }
        v39 = 0;
LABEL_59:
        v40 = sub_1ACBEB260((uint64_t)v96, v36, v39, v35);
        if ((_DWORD)v40)
          goto LABEL_125;
        v35 += v33;
        *(_WORD *)(v36 + 52) |= 0x40u;
        v92 = v36;
        v36 = *(_QWORD *)(v36 + 32);
        if (!v36)
          goto LABEL_80;
      }
    }
  }
  v92 = 0;
LABEL_80:
  v50 = v89;
  if (a4)
  {
    if (!*(_DWORD *)(v13 + 124))
      goto LABEL_108;
    v51 = *(_DWORD *)(v13 + 56);
    v52 = sqlite3_initialize();
    if (v51 >= -23 && !v52)
    {
      v53 = (v51 + 24);
      v54 = sub_1ACB5D828(v53);
      if (v54)
      {
        v55 = (unsigned int *)v54;
        v56 = *(_DWORD *)(v13 + 124);
        v86 = v53;
        if (v56 == 1)
          v57 = 24;
        else
          v57 = v53 * (unint64_t)(v56 - 2) + 48;
        v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(v13 + 16) + 16))(*(_QWORD *)(v13 + 16), v54, 8, v57);
        *(_DWORD *)(v13 + 96) = bswap32(*v55);
        *(_DWORD *)(v13 + 100) = bswap32(v55[1]);
        v58 = *(_DWORD *)(v13 + 124);
        *(_DWORD *)(v13 + 124) = 0;
        if ((_DWORD)v28)
          v59 = 1;
        else
          v59 = v58 > v31;
        if (!v59)
        {
          v60 = v58 + 1;
          while (1)
          {
            v61 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, unint64_t))(**(_QWORD **)(v13 + 16)
                                                                                               + 16))(*(_QWORD *)(v13 + 16), v55, v86, v86 * (unint64_t)(v60 - 2) + 32);
            if ((_DWORD)v61)
              break;
            sub_1ACB9EC40(v13, bswap32(*v55), bswap32(v55[1]), v55 + 6, (uint64_t)&__buf);
            v62 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, unint64_t))(**(_QWORD **)(v13 + 16)
                                                                                          + 24))(*(_QWORD *)(v13 + 16), &__buf, 24, v86 * (unint64_t)(v60 - 2) + 32);
            v28 = v62;
            if (v60 <= v31)
            {
              ++v60;
              if (!(_DWORD)v62)
                continue;
            }
            goto LABEL_101;
          }
          v28 = v61;
        }
LABEL_101:
        v64 = (void (**)(unsigned int *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v55);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v55);
          v55 = (unsigned int *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
          {
LABEL_107:
            v50 = v89;
            if ((_DWORD)v28)
              return v28;
LABEL_108:
            v65 = v50 & 3;
            if ((v50 & 3) != 0)
            {
              if (!*(_BYTE *)(v13 + 69))
              {
                v63 = 0;
                v69 = v87;
LABEL_129:
                v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 40))(v69, v65);
LABEL_131:
                free(v88);
                if (*(_BYTE *)(v13 + 67))
                {
                  v74 = *(_QWORD *)(v13 + 32);
                  if ((v74 & 0x8000000000000000) == 0)
                  {
                    if (v93 * (v63 + v31) + 32 <= v74)
                      v75 = *(_QWORD *)(v13 + 32);
                    else
                      v75 = v93 * (v63 + v31) + 32;
                    if (off_1EECAD248)
                      v73.n128_f64[0] = off_1EECAD248(v72);
                    __buf = 0;
                    v76 = (*(uint64_t (**)(_QWORD, uint64_t *, __n128))(**(_QWORD **)(v13 + 16) + 48))(*(_QWORD *)(v13 + 16), &__buf, v73);
                    v77 = v76;
                    if (!(_DWORD)v76)
                    {
                      if (__buf <= v75)
                      {
                        v77 = 0;
                      }
                      else
                      {
                        v76 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 16) + 32))(*(_QWORD *)(v13 + 16), v75);
                        v77 = v76;
                      }
                    }
                    if (off_1EECAD250)
                      off_1EECAD250(v76);
                    if (v77)
                      sqlite3_log(v77, "cannot limit WAL size: %s", *(const char **)(v13 + 128));
                    *(_BYTE *)(v13 + 67) = 0;
                  }
                }
                goto LABEL_147;
              }
              v90 = v50 & 3;
              v66 = *(uint64_t (**)(void))(**(_QWORD **)(v13 + 16) + 88);
              if (v66)
              {
                v67 = v66();
                if (v67 >= 0x10000)
                  LODWORD(v68) = 0x10000;
                else
                  LODWORD(v68) = v67;
                if (v67 >= 32)
                  v68 = v68;
                else
                  v68 = 512;
              }
              else
              {
                v68 = 4096;
              }
              v70 = (v35 + v68 - 1) / v68 * v68;
              v97 = v70;
              if (v35 < v70)
              {
                v63 = 0;
                v71 = v35;
                while (1)
                {
                  v40 = sub_1ACBEB260((uint64_t)v96, v92, a3, v71);
                  if ((_DWORD)v40)
                    break;
                  v71 += v93;
                  ++v63;
                  if (v71 >= v70)
                    goto LABEL_127;
                }
LABEL_125:
                v28 = v40;
                free(v88);
                return v28;
              }
              v63 = 0;
LABEL_127:
              if (v70 == v35)
              {
                v69 = v87;
                v65 = v90;
                goto LABEL_129;
              }
            }
            else
            {
              v63 = 0;
            }
            v28 = 0;
            goto LABEL_131;
          }
          v64 = (void (**)(unsigned int *))&xmmword_1ECD3B1D0;
        }
        (*v64)(v55);
        goto LABEL_107;
      }
    }
    return 7;
  }
  free(v88);
  v63 = 0;
  v28 = 0;
LABEL_147:
  v78 = *(_DWORD *)(v13 + 88);
  if (v5 && !(_DWORD)v28)
  {
    v79 = v5;
    do
    {
      if ((*(_WORD *)(v79 + 52) & 0x40) != 0)
        v28 = sub_1ACB6CDD4(v13, ++v78, *(_DWORD *)(v79 + 48));
      else
        v28 = 0;
      v79 = *(_QWORD *)(v79 + 32);
      if (v79)
        v80 = (_DWORD)v28 == 0;
      else
        v80 = 0;
    }
    while (v80);
  }
  v81 = v28 == 0;
  if (!(_DWORD)v28 && v63 >= 1)
  {
    do
    {
      v82 = sub_1ACB6CDD4(v13, ++v78, *(_DWORD *)(v92 + 48));
      v81 = v82 == 0;
      if ((_DWORD)v82)
        v83 = 0;
      else
        v83 = v63 > 1;
      --v63;
    }
    while (v83);
    v28 = v82;
  }
  if (v81)
  {
    *(_WORD *)(v13 + 86) = v91 & 0xFF00 | WORD1(v91);
    *(_DWORD *)(v13 + 88) = v78;
    if (a4)
    {
      ++*(_DWORD *)(v13 + 80);
      *(_DWORD *)(v13 + 92) = a3;
      sub_1ACB6CF44(v13);
      *(_DWORD *)(v13 + 24) = v78;
    }
  }
  else if ((_DWORD)v28)
  {
    return v28;
  }
  v28 = 0;
  v84 = *(_QWORD *)(a1 + 112);
  if (v84 && v5)
  {
LABEL_171:
    sub_1ACBEB96C(v84, *(_DWORD *)(v5 + 48), *(_QWORD *)(v5 + 8));
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 32);
      if (!v5)
        return 0;
      v84 = *(_QWORD *)(a1 + 112);
      if (v84)
        goto LABEL_171;
    }
  }
  return v28;
}

uint64_t sub_1ACBEAE7C(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 128);
  if (v2 >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + 120) + v5;
      if (*(_DWORD *)(v8 + 24) >= a2)
      {
        result = sub_1ACBA79A4(*(unsigned int **)(v8 + 16), a2);
        v7 |= result;
        v2 = *(_DWORD *)(v4 + 128);
      }
      ++v6;
      v5 += 56;
    }
    while (v6 < v2);
  }
  return result;
}

uint64_t sub_1ACBEAF04(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;

  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (!a5)
    return (*(uint64_t (**)(void))(a1 + 40))();
  *(_QWORD *)a3 = &unk_1E5C732E0;
  if (a5 <= 0)
    v5 = 1016;
  else
    v5 = a5;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = a5;
  *(_DWORD *)(a3 + 56) = a4;
  *(_QWORD *)(a3 + 64) = a1;
  *(_QWORD *)(a3 + 72) = a2;
  return 0;
}

uint64_t sub_1ACBEAF5C()
{
  return 0;
}

uint64_t sub_1ACBEAF64(uint64_t result, unsigned int *a2, int a3, int *a4, _DWORD *a5)
{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  if (a4)
  {
    v6 = *a4;
    v5 = a4[1];
    v7 = (unsigned int *)((char *)a2 + a3);
    if (!(_DWORD)result)
    {
      do
      {
LABEL_8:
        v10 = *a2;
        v11 = a2[1];
        a2 += 2;
        v6 += v5 + bswap32(v10);
        v5 += bswap32(v11) + v6;
      }
      while (a2 < v7);
      goto LABEL_11;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v7 = (unsigned int *)((char *)a2 + a3);
    if (!(_DWORD)result)
      goto LABEL_8;
  }
  if ((a3 & 0x3F) != 0)
  {
    do
    {
      v8 = *a2;
      v9 = a2[1];
      a2 += 2;
      v6 += v5 + v8;
      v5 += v9 + v6;
    }
    while (a2 < v7);
  }
  else
  {
    do
    {
      v12 = v5 + v6 + *a2;
      v13 = a2[1] + v5 + v12;
      v14 = v12 + a2[2] + v13;
      v15 = v13 + a2[3] + v14;
      v16 = v14 + a2[4] + v15;
      v17 = v15 + a2[5] + v16;
      v18 = v16 + a2[6] + v17;
      v19 = v17 + a2[7] + v18;
      v20 = v18 + a2[8] + v19;
      v21 = v19 + a2[9] + v20;
      v22 = v20 + a2[10] + v21;
      v23 = v21 + a2[11] + v22;
      v24 = v22 + a2[12] + v23;
      v25 = v23 + a2[13] + v24;
      v6 = v24 + a2[14] + v25;
      v5 = v25 + a2[15] + v6;
      a2 += 16;
    }
    while (a2 < v7);
  }
LABEL_11:
  *a5 = v6;
  a5[1] = v5;
  return result;
}

uint64_t sub_1ACBEB08C(int a1)
{
  return sub_1ACBE1FD0(11, a1, "database corruption");
}

uint64_t sub_1ACBEB0A0(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v4;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 88);
  if (v4 && (*(_WORD *)(a1 + 60) || *(_BYTE *)(a1 + 70)))
  {
    v7 = ((unint64_t)(*(_DWORD *)(a1 + 120) + 4096) + 0xFFFFFFFF021) >> 12;
    v8 = ((unint64_t)(v4 + 4096) + 0xFFFFFFFF021) >> 12;
    if ((int)v8 >= (int)v7)
    {
      v11 = (383 * a2) & 0x1FFF;
      v12 = (int)v8;
      v13 = (int)v7;
      while (1)
      {
        v22 = 0;
        v23 = 0;
        if (v12 < *(int *)(a1 + 40) && (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12), (v22 = v15) != 0))
        {
          result = 0;
        }
        else
        {
          result = sub_1ACBEB628(a1, v12, &v22);
          v15 = v22;
          if (!v22)
          {
            if (result <= 1)
              return 1;
            else
              return result;
          }
        }
        v16 = v15 + 0x4000;
        if (v12)
        {
          v17 = ((_DWORD)v12 << 12) - 34;
          LODWORD(v23) = v17;
          if ((_DWORD)result)
            return result;
        }
        else
        {
          v17 = 0;
          v15 += 136;
          v22 = v15;
          LODWORD(v23) = 0;
          if ((_DWORD)result)
            return result;
        }
        v18 = *(unsigned __int16 *)(v16 + 2 * v11);
        if (*(_WORD *)(v16 + 2 * v11))
          break;
LABEL_9:
        if (v12-- <= v13)
          goto LABEL_5;
      }
      v9 = 0;
      v19 = -8193;
      LOWORD(v20) = v11;
      do
      {
        if (v17 + v18 <= v4
          && (v17 + v18) >= *(_DWORD *)(a1 + 120)
          && *(_DWORD *)(v15 + 4 * (v18 - 1)) == a2)
        {
          v9 = v17 + v18;
        }
        if (__CFADD__(v19++, 1))
          return sub_1ACBEB08C(75368);
        v20 = ((_WORD)v20 + 1) & 0x1FFF;
        v18 = *(unsigned __int16 *)(v16 + 2 * v20);
      }
      while (*(_WORD *)(v16 + 2 * v20));
      if (!v9)
        goto LABEL_9;
    }
    else
    {
LABEL_5:
      v9 = 0;
    }
    result = 0;
    *a3 = v9;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1ACBEB260(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, uint64_t);
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v9 + 296);
  if (v10)
  {
    v11 = (unsigned int *)v10(*(_QWORD *)(v9 + 320), *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 48), 6);
    if (v11)
      goto LABEL_3;
    return 7;
  }
  v11 = *(unsigned int **)(a2 + 8);
  if (!v11)
    return 7;
LABEL_3:
  sub_1ACB9EC40(*(_QWORD *)a1, *(_DWORD *)(a2 + 48), a3, v11, v8);
  memcpy((void *)(v8 + 24), v11, *(int *)(a1 + 28));
  v12 = *(int *)(a1 + 28) + 24;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 - a4;
  if (v13 <= a4 || v12 + a4 < v13)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8, v12, a4);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8, v14, a4);
  if (!(_DWORD)result)
  {
    v12 = (v12 - v14);
    v16 = *(_DWORD *)(a1 + 24);
    result = (v16 & 3) != 0
           ? (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v16 & 3)
           : 0;
    if ((_DWORD)v12 && !(_DWORD)result)
    {
      a4 += (int)v14;
      v8 += (int)v14;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v8, v12, a4);
    }
  }
  return result;
}

void sub_1ACBEB3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (off_1EECAD248)
    off_1EECAD248(a1);
  v6 = 0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), &v6);
  v5 = v4;
  if (!(_DWORD)v4)
  {
    if (v6 <= a2)
    {
      v5 = 0;
    }
    else
    {
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
      v5 = v4;
    }
  }
  if (off_1EECAD250)
    off_1EECAD250(v4);
  if (v5)
    sqlite3_log(v5, "cannot limit WAL size: %s", *(const char **)(a1 + 128));
}

void sub_1ACBEB460(uint64_t a1, int a2)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = **(_DWORD ***)(a1 + 48);
  ++*(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 88) = 0;
  v3 = bswap32(*(_DWORD *)(a1 + 104)) + 1;
  *(_BYTE *)(a1 + 104) = HIBYTE(v3);
  *(_BYTE *)(a1 + 105) = BYTE2(v3);
  *(_BYTE *)(a1 + 106) = BYTE1(v3);
  *(_BYTE *)(a1 + 107) = v3;
  *(_DWORD *)(a1 + 108) = a2;
  sub_1ACB6CF44(a1);
  v2[24] = 0;
  v2[32] = 0;
  v2[26] = 0;
  v2[27] = -1;
  v2[28] = -1;
  v2[29] = -1;
}

uint64_t sub_1ACBEB4DC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;

  v3 = result;
  v4 = *(unsigned __int8 *)(result + 63);
  if (v4 != 2 && !*(_BYTE *)(result + 70))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 128))(*(_QWORD *)(v3 + 8), a2);
  if (*(int *)(result + 40) < 1)
    goto LABEL_15;
  v5 = 0;
  do
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v5);
    if (v7)
    {
      v6 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_6;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v6 = &xmmword_1ECD3B1D0;
LABEL_6:
        result = (*v6)(v7);
      }
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v5++) = 0;
  }
  while (v5 < *(int *)(v3 + 40));
  v4 = *(unsigned __int8 *)(v3 + 63);
LABEL_15:
  if (v4 != 2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 128))(*(_QWORD *)(v3 + 8), a2);
  return result;
}

uint64_t sub_1ACBEB628(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 40) <= (int)a2)
  {
    v6 = a2 + 1;
    v7 = sub_1ACB6BB48(*(_QWORD *)(a1 + 48), 8 * ((int)a2 + 1));
    if (!v7)
    {
      v14 = 0;
      result = 7;
      goto LABEL_22;
    }
    v8 = v7;
    bzero((void *)(v7 + 8 * *(int *)(a1 + 40)), 8 * (v6 - *(_DWORD *)(a1 + 40)));
    *(_QWORD *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 40) = v6;
  }
  if (*(_BYTE *)(a1 + 63) == 2)
  {
    v9 = (void *)sub_1ACB5D828(0x8000);
    v10 = v9;
    if (v9)
      bzero(v9, 0x8000uLL);
    v11 = (int)a2;
    v12 = 8 * (int)a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + v12) = v10;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + v12))
      result = 0;
    else
      result = 7;
  }
  else
  {
    v11 = (int)a2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2, 0x8000, *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48) + 8 * (int)a2);
    if ((_DWORD)result)
    {
      if (result == 8)
      {
        *(_BYTE *)(a1 + 66) |= 2u;
        if ((_DWORD)result == 8)
          result = 0;
        else
          result = result;
      }
    }
    else if ((int)a2 >= 1 && off_1ECD3B2E0 && off_1ECD3B2E0(600))
    {
      result = 7;
    }
    else
    {
      result = 0;
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
LABEL_22:
  *a3 = v14;
  return result;
}

uint64_t sub_1ACBEB784(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v7;
  int *v11;
  int v12;
  _BOOL8 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a5 + 8))
    return 0;
  v7 = bswap32(*(_DWORD *)a5);
  if (!v7)
    return 0;
  v11 = (int *)(a1 + 96);
  v12 = *(unsigned __int8 *)(a1 + 85);
  v13 = *(_BYTE *)(a1 + 85) == 0;
  v14 = *(_DWORD *)(a1 + 100);
  if (v12)
  {
    v15 = bswap32(*(_DWORD *)a5);
    v16 = bswap32(*(_DWORD *)(a5 + 4));
  }
  else
  {
    v15 = *(_DWORD *)a5;
    v16 = *(_DWORD *)(a5 + 4);
  }
  v17 = v14 + *(_DWORD *)(a1 + 96) + v15;
  *(_DWORD *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 100) = v16 + v14 + v17;
  sub_1ACBEAF64(v13, a4, *(_DWORD *)(a1 + 56), v11, v11);
  if (*(_DWORD *)(a1 + 96) != bswap32(*(_DWORD *)(a5 + 16)) || *(_DWORD *)(a1 + 100) != bswap32(*(_DWORD *)(a5 + 20)))
    return 0;
  *a2 = v7;
  *a3 = bswap32(*(_DWORD *)(a5 + 4));
  return 1;
}

void sub_1ACBEB86C(uint64_t a1)
{
  int v1;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD v12[2];

  v1 = *(_DWORD *)(a1 + 88);
  if (v1)
  {
    v12[0] = 0;
    v12[1] = 0;
    v3 = ((unint64_t)(v1 + 4096) + 0xFFFFFFFF021) >> 12;
    if (*(_DWORD *)(a1 + 40) > (int)v3
      && (v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (int)v3), (v12[0] = v4) != 0))
    {
      v5 = 0;
    }
    else
    {
      v5 = sub_1ACBEB628(a1, v3, v12);
      v4 = v12[0];
      if (!v12[0])
        return;
    }
    if ((_DWORD)v3)
      v6 = 0;
    else
      v6 = 136;
    if (!v5)
    {
      v7 = 0;
      v8 = v4 + 0x4000;
      v9 = v4 + v6;
      v10 = ((_DWORD)v3 << 12) - 34;
      if (!(_DWORD)v3)
        v10 = 0;
      v11 = *(_DWORD *)(a1 + 88) - v10;
      do
      {
        if (v11 < *(unsigned __int16 *)(v8 + v7))
          *(_WORD *)(v8 + v7) = 0;
        v7 += 2;
      }
      while (v7 != 0x4000);
      bzero((void *)(v9 + 4 * v11), (int)v8 - ((int)v9 + 4 * v11));
    }
  }
}

uint64_t sub_1ACBEB96C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;

  v5 = result;
  do
  {
    v6 = *(_DWORD *)(v5 + 48);
    v7 = v6 > 6;
    v8 = (1 << v6) & 0x61;
    v9 = v7 || v8 == 0;
    if (!v9 && *(_DWORD *)(v5 + 24) > a2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v5 + 24);
      if (v10)
        xmmword_1ECD3B1C0(v10);
      v11 = sub_1ACBC4B20(v5, a2, a3, 1);
      result = *(_QWORD *)(*(_QWORD *)v5 + 24);
      if (result)
        result = xmmword_1ECD3B1D0(result);
      if (v11)
        *(_DWORD *)(v5 + 48) = v11;
    }
    v5 = *(_QWORD *)(v5 + 64);
  }
  while (v5);
  return result;
}

uint64_t sub_1ACBEBA34(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 22);
  if (v2 != 5 && v2 >= (int)a2)
    return 0;
  v4 = a2;
  if (*(_BYTE *)(a1 + 17))
  {
    if ((_DWORD)a2 != 4)
    {
LABEL_8:
      if (v2 == 5)
        return 0;
    }
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), a2);
    if ((_DWORD)result)
      return result;
    v2 = *(unsigned __int8 *)(a1 + 22);
    if (v4 != 4)
      goto LABEL_8;
  }
  result = 0;
  *(_BYTE *)(a1 + 22) = v4;
  return result;
}

unint64_t sub_1ACBEBAB0(unint64_t result)
{
  _QWORD *v1;
  int v3;
  _BOOL4 v4;
  uint64_t (**v5)(unint64_t);

  if (result)
  {
    v1 = (_QWORD *)result;
    if (qword_1EECAD218 <= result && (unint64_t)xmmword_1EECAD220 > result)
    {
      result = *((_QWORD *)&xmmword_1EECAD220 + 1);
      if (*((_QWORD *)&xmmword_1EECAD220 + 1))
      {
        xmmword_1ECD3B1C0(*((_QWORD *)&xmmword_1EECAD220 + 1));
        result = *((_QWORD *)&xmmword_1EECAD220 + 1);
      }
      --qword_1ECD3E890;
      *v1 = qword_1EECAD230;
      qword_1EECAD230 = (uint64_t)v1;
      v4 = ++dword_1EECAD238 < dword_1EECAD214;
      dword_1EECAD23C = v4;
      if (result)
      {
        v5 = &xmmword_1ECD3B1D0;
        return (*v5)(result);
      }
    }
    else
    {
      v3 = off_1ECD3B178(result);
      if (*((_QWORD *)&xmmword_1EECAD220 + 1))
      {
        xmmword_1ECD3B1C0(*((_QWORD *)&xmmword_1EECAD220 + 1));
        qword_1ECD3E898 -= v3;
        if (*((_QWORD *)&xmmword_1EECAD220 + 1))
          xmmword_1ECD3B1D0(*((_QWORD *)&xmmword_1EECAD220 + 1));
      }
      else
      {
        qword_1ECD3E898 -= v3;
      }
      v5 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
        result = (unint64_t)v1;
        return (*v5)(result);
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v1);
      result = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v5 = &xmmword_1ECD3B1D0;
        return (*v5)(result);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBEBC4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1ACBEBC58(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;

  v21 = 0;
  v8 = (a2 - 1);
  if (a2 <= 1)
  {
    if (!(_DWORD)a2)
      return sub_1ACBEB08C(69564);
    return sub_1ACBEBEA8(a1, a2, a3, a4);
  }
  if ((a4 & 2) == 0 && *(_BYTE *)(a1 + 21) != 1)
    return sub_1ACBEBEA8(a1, a2, a3, a4);
  v9 = *(_QWORD *)(a1 + 344);
  if (v9)
  {
    result = sub_1ACBEB0A0(v9, a2, &v21);
    if ((_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    if (v21)
      return sub_1ACBEBEA8(a1, a2, a3, a4);
  }
  v20 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 72) + 136))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 200) * v8, *(_QWORD *)(a1 + 200), &v20);
  if ((_DWORD)result)
    v11 = 1;
  else
    v11 = v20 == 0;
  if (v11)
  {
    if ((_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    return sub_1ACBEBEA8(a1, a2, a3, a4);
  }
  if (*(unsigned __int8 *)(a1 + 21) > 1u || *(_BYTE *)(a1 + 16))
  {
    v12 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 72), a2, 0);
    if (v12)
    {
      v13 = (uint64_t *)v12;
      v14 = *(_QWORD *)(a1 + 336);
      v15 = (_QWORD *)v13[1];
      if (*v15)
      {
        ++*(_QWORD *)(v14 + 24);
        ++v15[7];
LABEL_25:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 200) * v8, v20);
        result = 0;
        *a3 = (uint64_t)v15;
        return result;
      }
      v15 = (_QWORD *)sub_1ACBEC2A8(v14, a2, v13);
      if (v15)
        goto LABEL_25;
    }
  }
  v16 = v20;
  v17 = *(_QWORD **)(a1 + 168);
  if (v17)
  {
    *(_QWORD *)(a1 + 168) = v17[4];
    v17[4] = 0;
    *(_QWORD *)v17[2] = 0;
LABEL_30:
    result = 0;
    *((_DWORD *)v17 + 12) = a2;
    v17[1] = v16;
    ++*(_DWORD *)(a1 + 152);
    *a3 = (uint64_t)v17;
    return result;
  }
  v18 = *(unsigned __int16 *)(a1 + 176) + 80;
  v19 = (_QWORD *)sub_1ACB5D828(v18);
  v17 = v19;
  if (v19)
  {
    bzero(v19, v18);
    v17[2] = v17 + 10;
    *((_WORD *)v17 + 26) = 32;
    v17[7] = 1;
    v17[5] = a1;
    goto LABEL_30;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 200) * v8, v16);
  result = 7;
  *a3 = 0;
  return result;
}

uint64_t sub_1ACBEBEA8(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  double v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (!(_DWORD)a2)
    return sub_1ACBEB08C(69440);
  v8 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 72), a2, *(_BYTE *)(*(_QWORD *)(a1 + 336) + 49) & 3);
  v10 = (uint64_t *)v8;
  if (!v8)
  {
    v14 = *(_QWORD *)(a1 + 336);
    if (*(_BYTE *)(v14 + 49) == 2)
    {
LABEL_24:
      v24 = 7;
      goto LABEL_55;
    }
    if ((int)xmmword_1ECD3B218(*(_QWORD *)(v14 + 72)) > *(_DWORD *)(v14 + 36))
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        while (*(_QWORD *)(v15 + 56) || (*(_WORD *)(v15 + 52) & 8) != 0)
        {
          v15 = *(_QWORD *)(v15 + 72);
          if (!v15)
            goto LABEL_10;
        }
        *(_QWORD *)(v14 + 16) = v15;
LABEL_18:
        v8 = (*(uint64_t (**)(_QWORD))(v14 + 56))(*(_QWORD *)(v14 + 64));
        if ((_DWORD)v8 != 5 && (_DWORD)v8 != 0)
        {
          v24 = v8;
LABEL_55:
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 336) + 24))
          {
            v22 = *(unsigned __int8 *)(a1 + 21);
            if (*(_BYTE *)(a1 + 21))
            {
              if (v22 == 1)
              {
                if (!*(_BYTE *)(a1 + 8))
                  sub_1ACB8FD38(a1, 0, 0);
              }
              else if (v22 != 6)
              {
                if (off_1EECAD248)
                  v9 = off_1EECAD248(v8);
                v23 = sub_1ACBA43F8(a1, v9);
                if (off_1EECAD250)
                  off_1EECAD250(v23);
              }
            }
            sub_1ACB90304(a1);
          }
          *a3 = 0;
          return v24;
        }
        goto LABEL_23;
      }
LABEL_10:
      *(_QWORD *)(v14 + 16) = 0;
      v16 = *(_QWORD *)(v14 + 8);
      if (v16)
      {
        while (*(_QWORD *)(v16 + 56))
        {
          v16 = *(_QWORD *)(v16 + 72);
          if (!v16)
            goto LABEL_23;
        }
        goto LABEL_18;
      }
    }
LABEL_23:
    v8 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(v14 + 72), a2, 2);
    v10 = (uint64_t *)v8;
    if (v8)
      goto LABEL_3;
    goto LABEL_24;
  }
LABEL_3:
  v11 = *(_QWORD *)(a1 + 336);
  v12 = v10[1];
  if (*(_QWORD *)v12)
  {
    ++*(_QWORD *)(v11 + 24);
    ++*(_QWORD *)(v12 + 56);
    *a3 = v12;
    if ((a4 & 1) != 0)
    {
LABEL_28:
      if (*(_DWORD *)(a1 + 192) == (_DWORD)a2)
      {
        v24 = sub_1ACBEB08C(69475);
        goto LABEL_30;
      }
      *(_QWORD *)(v12 + 40) = a1;
      if (!**(_QWORD **)(a1 + 72) || (a4 & 1) != 0 || *(_DWORD *)(a1 + 32) < a2)
      {
        if (*(_DWORD *)(a1 + 188) >= a2)
        {
          if ((a4 & 1) != 0)
          {
            if (off_1EECAD248)
              ((void (*)(void))off_1EECAD248)();
            if (*(_DWORD *)(a1 + 36) >= a2)
              sub_1ACBA79A4(*(unsigned int **)(a1 + 64), a2);
            v21 = sub_1ACBEAE7C(a1, a2);
            if (off_1EECAD250)
              off_1EECAD250(v21);
          }
          bzero(*(void **)(v12 + 8), *(_QWORD *)(a1 + 200));
          return 0;
        }
        if (*(_DWORD *)(a1 + 32) >= a2)
        {
          v8 = sub_1ACBE906C(v12);
          v24 = 13;
          goto LABEL_55;
        }
        v24 = 13;
      }
      else
      {
        ++*(_DWORD *)(a1 + 252);
        ++*(_DWORD *)(a1 + 268);
        v24 = sub_1ACB6DCA8(v12);
        if (!(_DWORD)v24)
          return v24;
      }
LABEL_30:
      v18 = *(_QWORD *)(v12 + 24);
      if ((*(_WORD *)(v12 + 52) & 2) != 0)
      {
        v19 = *(_QWORD *)(v12 + 72);
        if (*(_QWORD *)(v18 + 16) == v12)
          *(_QWORD *)(v18 + 16) = v19;
        v20 = *(_QWORD *)(v12 + 64);
        if (v20)
        {
          *(_QWORD *)(v20 + 72) = v19;
          v19 = *(_QWORD *)(v12 + 72);
          if (!v19)
          {
            *(_QWORD *)v18 = v20;
            goto LABEL_54;
          }
        }
        else
        {
          *(_QWORD *)(v18 + 8) = v19;
          if (!v19)
          {
            *(_QWORD *)v18 = 0;
            *(_BYTE *)(v18 + 49) = 2;
            goto LABEL_54;
          }
        }
        *(_QWORD *)(v19 + 64) = v20;
      }
LABEL_54:
      --*(_QWORD *)(v18 + 24);
      v8 = xmmword_1ECD3B228(*(_QWORD *)(v18 + 72), *(_QWORD *)v12, 1);
      goto LABEL_55;
    }
  }
  else
  {
    v12 = sub_1ACBEC2A8(v11, a2, v10);
    *a3 = v12;
    if ((a4 & 1) != 0)
      goto LABEL_28;
  }
  if (!*(_QWORD *)(v12 + 40))
    goto LABEL_28;
  v24 = 0;
  ++*(_DWORD *)(a1 + 248);
  ++*(_DWORD *)(a1 + 264);
  return v24;
}

uint64_t *sub_1ACBEC22C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *result;
  uint64_t *v5;

  v2 = a2;
  result = (uint64_t *)(*((uint64_t (**)(_QWORD, uint64_t, _QWORD))&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 72), a2, 0);
  if (result)
  {
    v5 = result;
    result = (uint64_t *)result[1];
    if (*result)
    {
      ++*(_QWORD *)(*(_QWORD *)(a1 + 336) + 24);
      ++result[7];
    }
    else
    {
      return (uint64_t *)sub_1ACBEC2A8(*(_QWORD *)(a1 + 336), v2, v5);
    }
  }
  return result;
}

uint64_t sub_1ACBEC2A8(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = a3[1];
  do
  {
    *(_OWORD *)(result + 48) = 0uLL;
    *(_OWORD *)(result + 64) = 0uLL;
    *(_OWORD *)(result + 32) = 0uLL;
    v5 = *a3;
    *(_QWORD *)result = a3;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 16) = result + 80;
    *(_QWORD *)(result + 24) = a1;
    *(_DWORD *)(result + 48) = a2;
    *(_WORD *)(result + 52) = 1;
    result = a3[1];
  }
  while (!*(_QWORD *)result);
  ++*(_QWORD *)(a1 + 24);
  ++*(_QWORD *)(result + 56);
  return result;
}

uint64_t sub_1ACBEC304(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t (**v5)(_QWORD);
  uint64_t v6;
  uint64_t (**v7)(uint64_t);

  v1 = result;
  if (*(int *)(result + 128) >= 1)
  {
    v2 = 0;
    v3 = 16;
    do
    {
      result = sub_1ACBAF4D0(*(_QWORD *)(*(_QWORD *)(v1 + 120) + v3));
      ++v2;
      v3 += 56;
    }
    while (v2 < *(int *)(v1 + 128));
  }
  v4 = *(void ***)(v1 + 88);
  v5 = (uint64_t (**)(_QWORD))*v4;
  if (*(_BYTE *)(v1 + 8))
  {
    if (v5 != (uint64_t (**)(_QWORD))&unk_1E5C732E0)
      goto LABEL_9;
    v5 = (uint64_t (**)(_QWORD))&unk_1E5C732E0;
  }
  else if (!v5)
  {
    goto LABEL_9;
  }
  result = v5[1](*(_QWORD *)(v1 + 88));
  *v4 = 0;
LABEL_9:
  v6 = *(_QWORD *)(v1 + 120);
  if (v6)
  {
    v7 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_15:
      result = (*v7)(v6);
      goto LABEL_16;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v6);
    v6 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = &xmmword_1ECD3B1D0;
      goto LABEL_15;
    }
  }
LABEL_16:
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

uint64_t *sub_1ACBEC42C(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    do
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = *(_QWORD *)(v1 + 72);
      if (*(_QWORD *)(v3 + 16) == v1)
      {
        *(_QWORD *)(v3 + 16) = v4;
        v5 = *(_QWORD *)(v1 + 64);
        if (!v5)
        {
LABEL_9:
          *(_QWORD *)(v3 + 8) = v4;
          if (!v4)
          {
            *(_QWORD *)v3 = 0;
            *(_BYTE *)(v3 + 49) = 2;
            goto LABEL_11;
          }
LABEL_10:
          *(_QWORD *)(v4 + 64) = v5;
          goto LABEL_11;
        }
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 64);
        if (!v5)
          goto LABEL_9;
      }
      *(_QWORD *)(v5 + 72) = v4;
      v4 = *(_QWORD *)(v1 + 72);
      if (v4)
        goto LABEL_10;
      *(_QWORD *)v3 = v5;
LABEL_11:
      *(_WORD *)(v1 + 52) = *(_WORD *)(v1 + 52) & 0xFFF0 | 1;
      if (!*(_QWORD *)(v1 + 56))
      {
        if (*(_BYTE *)(v3 + 48))
          result = (uint64_t *)xmmword_1ECD3B228(*(_QWORD *)(v3 + 72), *(_QWORD *)v1, 0);
      }
      v1 = *v2;
    }
    while (*v2);
  }
  return result;
}

uint64_t sub_1ACBEC4F8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;

  result = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)result)
  {
    v4 = a2;
    if (!*(_BYTE *)(a1 + 17))
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a2);
    if (*(_BYTE *)(a1 + 22) != 5)
      *(_BYTE *)(a1 + 22) = v4;
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  return result;
}

_QWORD *sub_1ACBEC550(uint64_t a1)
{
  uint64_t i;

  ++*(_DWORD *)(a1 + 132);
  for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return sub_1ACB5AD68(*(_QWORD **)(a1 + 336), 0);
}

uint64_t sub_1ACBEC580(uint64_t a1, int a2)
{
  uint64_t v2;
  __int16 v3;
  void *v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(v2 + 37);
  if (a2 < 10)
  {
    *(_BYTE *)(a1 + 10) = 4;
    *(_BYTE *)(a1 + 8) = 0;
    if (a2 == 5)
    {
      *(_QWORD *)(a1 + 120) = sub_1ACBECC54;
      *(_QWORD *)(a1 + 128) = sub_1ACBECC78;
      v3 = 1;
      goto LABEL_13;
    }
    if (a2 != 2)
    {
      *(_WORD *)(a1 + 1) = 0;
      *(_QWORD *)(a1 + 120) = sub_1ACB9AB44;
      *(_QWORD *)(a1 + 128) = sub_1ACBECB50;
      return sub_1ACBEC69C(78875, a1);
    }
    *(_WORD *)(a1 + 1) = 0;
    v4 = sub_1ACB9AB44;
LABEL_9:
    *(_QWORD *)(a1 + 120) = v4;
    *(_QWORD *)(a1 + 128) = sub_1ACBECB50;
    v5 = *(_DWORD *)(v2 + 42);
LABEL_14:
    *(_DWORD *)(a1 + 14) = v5;
    return 0;
  }
  *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  if (a2 == 10)
  {
    *(_WORD *)(a1 + 1) = 0;
    v4 = sub_1ACBECA34;
    goto LABEL_9;
  }
  if (a2 == 13)
  {
    *(_QWORD *)(a1 + 120) = sub_1ACBEC898;
    *(_QWORD *)(a1 + 128) = sub_1ACB8A4FC;
    v3 = 257;
LABEL_13:
    *(_WORD *)(a1 + 1) = v3;
    v5 = *(_DWORD *)(v2 + 46);
    goto LABEL_14;
  }
  *(_WORD *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 120) = sub_1ACBECA34;
  *(_QWORD *)(a1 + 128) = sub_1ACBECB50;
  return sub_1ACBEC69C(78851, a1);
}

uint64_t sub_1ACBEC69C(uint64_t a1, uint64_t a2)
{
  int v3;
  char *v4;
  const char *v5;
  void (**v6)(const char *);

  v3 = a1;
  if (off_1EECAD248)
    off_1EECAD248(a1);
  v4 = sqlite3_mprintf("database corruption page %u of %s", *(_DWORD *)(a2 + 4), *(const char **)(**(_QWORD **)(a2 + 72) + 216));
  v5 = v4;
  if (off_1EECAD250)
    off_1EECAD250(v4);
  if (v5)
  {
    sub_1ACBE1FD0(11, v3, v5);
    v6 = (void (**)(const char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_11:
      (*v6)(v5);
      return sub_1ACBEB08C(76973);
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = (const char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = (void (**)(const char *))&xmmword_1ECD3B1D0;
      goto LABEL_11;
    }
  }
  return sub_1ACBEB08C(76973);
}

uint64_t sub_1ACBEC7AC(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  signed int v7;
  int v8;
  uint64_t v9;
  uint64_t i;
  unsigned int v11;

  if (*(_BYTE *)(a1 + 8))
    v1 = -4;
  else
    v1 = -5;
  if (!*(_WORD *)(a1 + 24))
    return 0;
  v3 = 0;
  v4 = *(unsigned __int16 *)(a1 + 18);
  v5 = v4 + 2 * *(unsigned __int16 *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
  v8 = v1 + v7;
  v9 = 78988;
  for (i = v4 + v6 + 1; ; i += 2)
  {
    v11 = __rev16(*(unsigned __int16 *)(i - 1));
    if (v11 < v5 || (int)v11 > v8)
      break;
    if ((int)(v11 + (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 120))(a1, v6 + v11)) > v7)
    {
      v9 = 78993;
      return sub_1ACBEC69C(v9, a1);
    }
    if (++v3 >= (unint64_t)*(unsigned __int16 *)(a1 + 24))
      return 0;
  }
  return sub_1ACBEC69C(v9, a1);
}

uint64_t sub_1ACBEC898(uint64_t a1, char *a2)
{
  unsigned int v2;
  char *v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;

  v2 = *a2;
  v3 = a2;
  if (*a2 < 0)
  {
    v3 = a2 + 1;
    v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      v2 = v4;
      goto LABEL_6;
    }
    v3 = a2 + 2;
    v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      v3 = a2 + 3;
      v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        v3 = a2 + 4;
        v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0)
          goto LABEL_3;
        v3 = a2 + 5;
        v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          v3 = a2 + 6;
          v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0)
            goto LABEL_3;
          v3 = a2 + 7;
          v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            v3 = a2 + 8;
            v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }
LABEL_6:
  if (v3[1] < 0)
  {
    if (v3[2] < 0)
    {
      if (v3[3] < 0)
      {
        if (v3[4] < 0)
        {
          if (v3[5] < 0)
          {
            if (v3[6] < 0)
            {
              if (v3[7] < 0)
              {
                v6 = 9;
                if (v3[8] < 0)
                  v6 = 10;
                v5 = (_DWORD)v3 + v6;
              }
              else
              {
                v5 = (_DWORD)v3 + 8;
              }
            }
            else
            {
              v5 = (_DWORD)v3 + 7;
            }
          }
          else
          {
            v5 = (_DWORD)v3 + 6;
          }
        }
        else
        {
          v5 = (_DWORD)v3 + 5;
        }
      }
      else
      {
        v5 = (_DWORD)v3 + 4;
      }
    }
    else
    {
      v5 = (_DWORD)v3 + 3;
    }
  }
  else
  {
    v5 = (_DWORD)v3 + 2;
  }
  v7 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v7)
  {
    v10 = v2 + v5 - (_DWORD)a2;
    if (v10 <= 4)
      LOWORD(v10) = 4;
    return (unsigned __int16)v10;
  }
  else
  {
    v8 = (v2 - *(unsigned __int16 *)(a1 + 16)) % (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 56) - 4)
       + *(unsigned __int16 *)(a1 + 16);
    if (v8 > v7)
      LOWORD(v8) = *(_WORD *)(a1 + 16);
    return (unsigned __int16)(v8 + v5 - (_WORD)a2 + 4);
  }
}

uint64_t sub_1ACBECA34(uint64_t a1, char *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;

  v2 = *a2;
  v3 = (int)a2;
  if (*a2 < 0)
  {
    v3 = (_DWORD)a2 + 1;
    v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      v2 = v4;
      goto LABEL_6;
    }
    v3 = (_DWORD)a2 + 2;
    v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      v3 = (_DWORD)a2 + 3;
      v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        v3 = (_DWORD)a2 + 4;
        v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0)
          goto LABEL_3;
        v3 = (_DWORD)a2 + 5;
        v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          v3 = (_DWORD)a2 + 6;
          v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0)
            goto LABEL_3;
          v3 = (_DWORD)a2 + 7;
          v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            v3 = (_DWORD)a2 + 8;
            v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }
LABEL_6:
  v5 = v3 + 1;
  v6 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v6)
  {
    v9 = v2 + v5 - (_DWORD)a2;
    if (v9 <= 4)
      LOWORD(v9) = 4;
    return (unsigned __int16)v9;
  }
  else
  {
    v7 = (v2 - *(unsigned __int16 *)(a1 + 16)) % (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 56) - 4)
       + *(unsigned __int16 *)(a1 + 16);
    if (v7 > v6)
      LOWORD(v7) = *(_WORD *)(a1 + 16);
    return (unsigned __int16)(v7 + v5 - (_WORD)a2 + 4);
  }
}

uint64_t sub_1ACBECB50(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  __int16 v9;
  unsigned __int8 v10;

  v3 = (char *)(a2 + *(unsigned __int8 *)(result + 10));
  v4 = *v3;
  if (*v3 < 0)
  {
    v5 = (unsigned __int8 *)(v3 + 1);
    v6 = v3[1] & 0x7F | ((v4 & 0x7F) << 7);
    if ((v3[1] & 0x80) == 0)
    {
LABEL_3:
      v3 = (char *)v5;
LABEL_4:
      v4 = v6;
      goto LABEL_9;
    }
    v7 = (unsigned __int8 *)(v3 + 2);
    v4 = v3[2] & 0x7F | (v6 << 7);
    if ((v3[2] & 0x80) == 0)
      goto LABEL_6;
    v4 = v3[3] & 0x7F | (v4 << 7);
    if (v3[3] < 0)
    {
      v5 = (unsigned __int8 *)(v3 + 4);
      v6 = v3[4] & 0x7F | (v4 << 7);
      if ((v3[4] & 0x80) == 0)
        goto LABEL_3;
      v7 = (unsigned __int8 *)(v3 + 5);
      v4 = v3[5] & 0x7F | (v6 << 7);
      if (v3[5] < 0)
      {
        v5 = (unsigned __int8 *)(v3 + 6);
        v6 = v3[6] & 0x7F | (v4 << 7);
        if ((v3[6] & 0x80) == 0)
          goto LABEL_3;
        v7 = (unsigned __int8 *)(v3 + 7);
        v4 = v3[7] & 0x7F | (v6 << 7);
        if (v3[7] < 0)
        {
          v10 = v3[8];
          v3 += 8;
          v6 = v10 & 0x7F | (v4 << 7);
          goto LABEL_4;
        }
      }
LABEL_6:
      v3 = (char *)v7;
      goto LABEL_9;
    }
    v3 += 3;
  }
LABEL_9:
  v8 = (unsigned __int8 *)(v3 + 1);
  *(_DWORD *)(a3 + 16) = v4;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v8;
  if (v4 > *(unsigned __int16 *)(result + 14))
    return sub_1ACBECCB8(result, a2, a3);
  v9 = v4 + (_WORD)v8 - a2;
  if ((v9 & 0xFFFC) == 0)
    v9 = 4;
  *(_WORD *)(a3 + 22) = v9;
  *(_WORD *)(a3 + 20) = v4;
  return result;
}

uint64_t sub_1ACBECC54(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 v3;
  int v4;

  v2 = 4;
  do
  {
    v3 = v2 + 1;
    if (v2 > 0xB)
      break;
    v4 = *(char *)(a2 + v2++);
  }
  while (v4 < 0);
  return v3;
}

uint64_t sub_1ACBECC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_1ACB8A6CC((char *)(a2 + 4), (unint64_t *)a3);
  *(_WORD *)(a3 + 22) = (result + 4);
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 20) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_1ACBECCB8(uint64_t result, __int16 a2, uint64_t a3)
{
  int v3;

  v3 = *(unsigned __int16 *)(result + 16);
  if ((int)((*(_DWORD *)(a3 + 16) - v3) % (*(_DWORD *)(*(_QWORD *)(result + 72) + 56) - 4) + v3) <= *(unsigned __int16 *)(result + 14))
    LOWORD(v3) = (*(_DWORD *)(a3 + 16) - v3) % (*(_DWORD *)(*(_QWORD *)(result + 72) + 56) - 4) + v3;
  *(_WORD *)(a3 + 20) = v3;
  *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 8) + v3 - a2 + 4;
  return result;
}

uint64_t sub_1ACBECD04(int a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (SHIDWORD(xmmword_1EECAD200) < a1)
    goto LABEL_12;
  if (*((_QWORD *)&xmmword_1EECAD220 + 1))
    xmmword_1ECD3B1C0(*((_QWORD *)&xmmword_1EECAD220 + 1));
  v2 = qword_1EECAD230;
  if (qword_1EECAD230)
  {
    qword_1EECAD230 = *(_QWORD *)qword_1EECAD230;
    v3 = dword_1EECAD238-- <= dword_1EECAD214;
    dword_1EECAD23C = v3;
    if (qword_1ECD3E910 < a1)
      qword_1ECD3E910 = a1;
    v4 = qword_1ECD3E890;
    v5 = ++qword_1ECD3E890;
    if (v4 >= qword_1ECD3E8E0)
      qword_1ECD3E8E0 = v5;
  }
  if (*((_QWORD *)&xmmword_1EECAD220 + 1))
    xmmword_1ECD3B1D0(*((_QWORD *)&xmmword_1EECAD220 + 1));
  if (!v2)
  {
LABEL_12:
    v6 = sub_1ACB5D828(a1);
    v2 = v6;
    if (v6)
    {
      v7 = off_1ECD3B178(v6);
      if (*((_QWORD *)&xmmword_1EECAD220 + 1))
        xmmword_1ECD3B1C0(*((_QWORD *)&xmmword_1EECAD220 + 1));
      if (qword_1ECD3E910 < a1)
        qword_1ECD3E910 = a1;
      v8 = qword_1ECD3E898 + v7;
      qword_1ECD3E898 = v8;
      if (v8 > qword_1ECD3E8E8)
        qword_1ECD3E8E8 = v8;
      if (*((_QWORD *)&xmmword_1EECAD220 + 1))
        xmmword_1ECD3B1D0(*((_QWORD *)&xmmword_1EECAD220 + 1));
    }
  }
  return v2;
}

uint64_t sub_1ACBECE74(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  int v5;

  result = 0;
  v5 = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 32)
      && (v3 = *(_QWORD *)(a1 + 72), *(_QWORD *)v3)
      && (LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v3 + 80))(v3, 20, &v5),
          (_DWORD)result != 12))
    {
      if (v5)
        v4 = (_DWORD)result == 0;
      else
        v4 = 0;
      if (v4)
        return 1032;
      else
        return result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1ACBECEE8(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 11))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), a1 + 104);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), 2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), a1 + 104);
  return result;
}

const char *sub_1ACBECF40()
{
  const char *result;

  result = getenv("SQLITE_MIN_CACHE_SIZE");
  if (result)
    result = (const char *)atoi(result);
  dword_1ECD3EA98 = (int)result;
  return result;
}

uint64_t sub_1ACBECF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 88);
  if (!result)
    goto LABEL_17;
  result = ((uint64_t (*)(void))*(&xmmword_1ECD3B1C0 + 1))();
  if (!(_DWORD)result)
  {
    v2 = *(_QWORD *)(v1 + 8);
LABEL_17:
    *(_QWORD *)(v2 + 8) = *(_QWORD *)v1;
    *(_BYTE *)(v1 + 18) = 1;
    return result;
  }
  for (i = *(_QWORD *)(v1 + 32); i; i = *(_QWORD *)(i + 32))
  {
    if (*(_BYTE *)(i + 18))
      sub_1ACBED048(i);
  }
  v5 = *(_QWORD *)(v1 + 8);
  result = *(_QWORD *)(v5 + 88);
  if (result)
  {
    result = xmmword_1ECD3B1C0(result);
    v5 = *(_QWORD *)(v1 + 8);
  }
  *(_QWORD *)(v5 + 8) = *(_QWORD *)v1;
LABEL_11:
  *(_BYTE *)(v1 + 18) = 1;
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return result;
    if (*(_DWORD *)(v1 + 20))
    {
      v6 = *(_QWORD *)(v1 + 8);
      result = *(_QWORD *)(v6 + 88);
      if (result)
      {
        result = xmmword_1ECD3B1C0(result);
        v6 = *(_QWORD *)(v1 + 8);
      }
      *(_QWORD *)(v6 + 8) = *(_QWORD *)v1;
      goto LABEL_11;
    }
  }
}

uint64_t sub_1ACBED048(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (result)
    result = xmmword_1ECD3B1D0(result);
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t sub_1ACBED080(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int16 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  unsigned int v34;
  int v36;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  __int16 v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)v6;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 2 || !a2 && v8 == 1)
    goto LABEL_7;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 51) & 2) != 0 && !*(_BYTE *)(v7 + 18))
    *(_WORD *)(v6 + 40) &= ~1u;
  v13 = *(_WORD *)(v6 + 40);
  if (a2 && (v13 & 1) != 0)
  {
    v10 = 8;
    goto LABEL_14;
  }
  if (!a2)
  {
    if ((v13 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_33;
  }
  if ((v13 & 0x80) != 0 || *(_BYTE *)(v6 + 36) == 2)
  {
LABEL_33:
    v15 = *(_QWORD **)(v6 + 128);
    goto LABEL_34;
  }
  if (a2 < 2)
    goto LABEL_35;
  v14 = *(_QWORD *)(v6 + 120);
  if (!v14)
    goto LABEL_35;
  while (1)
  {
    v15 = *(_QWORD **)v14;
    if (*(_QWORD *)v14 != a1)
      break;
    v14 = *(_QWORD *)(v14 + 16);
    if (!v14)
      goto LABEL_35;
  }
LABEL_34:
  if (*v15)
    goto LABEL_154;
LABEL_35:
  if (*(_BYTE *)(a1 + 17))
  {
    v16 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v16 + 128) == a1 || (*(_WORD *)(v16 + 40) & 0x40) == 0)
    {
      v17 = *(_QWORD *)(v16 + 120);
      if (!v17)
        goto LABEL_39;
      while (*(_QWORD *)v17 == a1 || *(_DWORD *)(v17 + 8) != 1 || *(_BYTE *)(v17 + 12) == 1)
      {
        v17 = *(_QWORD *)(v17 + 16);
        if (!v17)
          goto LABEL_39;
      }
    }
LABEL_154:
    v10 = 262;
    goto LABEL_14;
  }
LABEL_39:
  v53 = a3;
  *(_WORD *)(v6 + 40) = v13 & 0xFFEF;
  if (!*(_DWORD *)(v6 + 64))
    *(_WORD *)(v6 + 40) = v13 | 0x10;
  v18 = 0;
  v54 = v7;
  v55 = (_DWORD *)(v6 + 52);
  v19 = *(_QWORD *)(v7 + 344);
  if (v19)
    goto LABEL_42;
  while (2)
  {
    v21 = *(_QWORD *)(v6 + 24);
    if (a2 && !v21)
    {
LABEL_61:
      v18 = 0;
LABEL_62:
      v21 = *(_QWORD *)(v6 + 24);
    }
LABEL_63:
    if (v21)
      goto LABEL_64;
    while (1)
    {
      while (1)
      {
        v26 = sub_1ACB69590(*(_QWORD *)v6);
        if (v26 || (v56 = 0, (v26 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 288))()) != 0))
        {
LABEL_114:
          v18 = v26;
          goto LABEL_124;
        }
        v27 = *(_QWORD *)(v56 + 16);
        if (*(_DWORD *)(v27 + 4) == 1)
        {
          v28 = *(_QWORD *)(v27 + 80);
        }
        else
        {
          v28 = *(_QWORD *)(v56 + 8);
          *(_QWORD *)(v27 + 112) = v56;
          *(_QWORD *)(v27 + 72) = v6;
          *(_QWORD *)(v27 + 80) = v28;
          *(_DWORD *)(v27 + 4) = 1;
          *(_BYTE *)(v27 + 9) = 100;
        }
        v29 = bswap32(*(_DWORD *)(v28 + 28));
        v30 = *(_QWORD *)v6;
        v31 = *(_DWORD *)(*(_QWORD *)v6 + 32);
        if (!v29 || *(_DWORD *)(v28 + 24) != *(_DWORD *)(v28 + 92))
          v29 = *(_DWORD *)(*(_QWORD *)v6 + 32);
        if ((*(_BYTE *)(*(_QWORD *)(v6 + 8) + 51) & 2) != 0 || !v29)
        {
          v29 = 0;
          v39 = *(_DWORD *)(v6 + 56);
          goto LABEL_145;
        }
        if (*(_QWORD *)v28 != 0x66206574694C5153 || *(_QWORD *)(v28 + 8) != 0x332074616D726FLL)
          goto LABEL_122;
        if (*(unsigned __int8 *)(v28 + 18) >= 3u)
          *(_WORD *)(v6 + 40) |= 1u;
        v33 = *(unsigned __int8 *)(v28 + 19);
        if (v33 > 2)
          goto LABEL_122;
        if (v33 != 2 || (*(_WORD *)(v6 + 40) & 0x20) != 0)
        {
          sub_1ACBED934((_QWORD *)v6, 3);
          break;
        }
        LODWORD(v56) = 0;
        v34 = sub_1ACB6A500(v30, &v56);
        if (v34)
          goto LABEL_149;
        sub_1ACBED934((_QWORD *)v6, 2);
        if ((_DWORD)v56)
          break;
        sub_1ACBE097C(*(_QWORD *)(v27 + 112));
        v7 = v54;
        if (*(_QWORD *)(v6 + 24))
          goto LABEL_113;
      }
      if (*(_WORD *)(v28 + 21) != 8256 || *(_BYTE *)(v28 + 23) != 32)
        goto LABEL_122;
      v36 = (*(unsigned __int8 *)(v28 + 16) << 8) | (*(unsigned __int8 *)(v28 + 17) << 16);
      if ((v36 - 65537) < 0xFFFF0100 || ((v36 - 1) & v36) != 0)
        goto LABEL_122;
      v38 = *(unsigned __int8 *)(v28 + 20);
      v39 = v36 - v38;
      if (v36 == *v55)
        break;
      sub_1ACBE097C(*(_QWORD *)(v27 + 112));
      *(_DWORD *)(v6 + 52) = v36;
      *(_DWORD *)(v6 + 56) = v39;
      *(_WORD *)(v6 + 40) |= 2u;
      v40 = *(_QWORD *)(v6 + 136);
      v7 = v54;
      if (v40)
      {
        *(_QWORD *)(v6 + 136) = v40 - 4;
        sub_1ACBEBAB0(v40 - 4);
        *(_QWORD *)(v6 + 136) = 0;
      }
      v26 = sub_1ACB5AAC0(*(_QWORD *)v6, v55, v38);
      if (v26)
        goto LABEL_114;
      if (*(_QWORD *)(v6 + 24))
      {
LABEL_113:
        v18 = 0;
        goto LABEL_64;
      }
    }
    if (v29 > v31)
    {
      v29 = v31;
      if ((*(_QWORD *)(*(_QWORD *)(v6 + 8) + 48) & 0x10000001) != 1)
      {
        v34 = sub_1ACBEB08C(80196);
LABEL_149:
        v18 = v34;
        goto LABEL_123;
      }
    }
    if (v39 < 0x1E0)
    {
LABEL_122:
      v18 = 26;
LABEL_123:
      v7 = v54;
      sub_1ACBE097C(*(_QWORD *)(v27 + 112));
      *(_QWORD *)(v6 + 24) = 0;
      goto LABEL_124;
    }
    *(_WORD *)(v6 + 40) |= 2u;
    *(_DWORD *)(v6 + 52) = v36;
    *(_DWORD *)(v6 + 56) = v39;
    *(_BYTE *)(v6 + 33) = bswap32(*(_DWORD *)(v28 + 52)) != 0;
    *(_BYTE *)(v6 + 34) = bswap32(*(_DWORD *)(v28 + 64)) != 0;
LABEL_145:
    v7 = v54;
    v18 = 0;
    *(_WORD *)(v6 + 46) = v39 - 35;
    *(_WORD *)(v6 + 42) = ((v39 << 6) - 768) / 0xFF - 23;
    v48 = (unsigned __int16)(((v39 << 6) - 768) / 0xFF - 23);
    v49 = (32 * v39 - 384) / 0xFF - 23;
    *(_WORD *)(v6 + 44) = v49;
    *(_WORD *)(v6 + 48) = v49;
    if (v48 >= 0x7F)
      LOBYTE(v48) = 127;
    *(_BYTE *)(v6 + 37) = v48;
    *(_QWORD *)(v6 + 24) = v27;
    *(_DWORD *)(v6 + 64) = v29;
LABEL_64:
    if (!a2 || v18)
    {
LABEL_70:
      if (v18)
        goto LABEL_124;
    }
    else
    {
      if ((*(_WORD *)(v6 + 40) & 1) != 0)
      {
        v18 = 8;
      }
      else
      {
        v25 = sub_1ACBE063C(v7, a2 > 1, *(_BYTE *)(*(_QWORD *)a1 + 102) == 2);
        if (v25 != 517)
        {
          v18 = v25;
          if (!v25)
            v18 = sub_1ACB93E30(v6);
          goto LABEL_70;
        }
        if (*(_BYTE *)(v6 + 36))
          v18 = 517;
        else
          v18 = 5;
      }
LABEL_124:
      v41 = *(_QWORD *)(v7 + 344);
      if (v41 && !*(_BYTE *)(v7 + 8) && *(_BYTE *)(v41 + 64))
      {
        if (!*(_BYTE *)(v41 + 63))
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 8) + 112))(*(_QWORD *)(v41 + 8), 0, 1, 9);
        *(_BYTE *)(v41 + 64) = 0;
      }
      if (!*(_BYTE *)(v6 + 36))
      {
        v42 = *(_QWORD *)(v6 + 24);
        if (v42)
        {
          *(_QWORD *)(v6 + 24) = 0;
          sub_1ACBE097C(*(_QWORD *)(v42 + 112));
        }
      }
      if (v18 == 5 && !*(_BYTE *)(v6 + 36))
      {
        v43 = *(_QWORD *)(v6 + 8);
        v44 = *(uint64_t (**)(_QWORD))(v43 + 664);
        if (v44)
        {
          if ((*(_DWORD *)(v43 + 688) & 0x80000000) == 0)
          {
            *(_BYTE *)(*(_QWORD *)(v43 + 680) + 784) = 0;
            v45 = v44(*(_QWORD *)(v43 + 672));
            if (*(uint64_t (**)(uint64_t *, int))(v43 + 664) != sub_1ACBCF6E8)
            {
              v46 = *(_QWORD *)(v43 + 680);
              if (*(_BYTE *)(v46 + 784))
              {
                v47 = sub_1ACBCF6E8((uint64_t *)v46, *(_DWORD *)(v43 + 688));
                if (v45 == 109)
                  v45 = v47;
              }
            }
            if (!v45)
            {
              *(_DWORD *)(v43 + 688) = -1;
              break;
            }
            ++*(_DWORD *)(v43 + 688);
            v19 = *(_QWORD *)(v7 + 344);
            if (!v19)
              continue;
LABEL_42:
            v20 = *(_QWORD *)a1;
            *(_QWORD *)(v19 + 152) = *(_QWORD *)a1;
            v21 = *(_QWORD *)(v6 + 24);
            if (!a2 || v21)
              goto LABEL_63;
            v18 = 0;
            if (!*(_BYTE *)(v7 + 8) && v20)
            {
              LODWORD(v56) = *(_DWORD *)(v20 + 772);
              if (!(_DWORD)v56)
                goto LABEL_61;
              v22 = *(_QWORD *)(v19 + 8);
              if (!*(_QWORD *)v22
                || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v22 + 80))(v22, 34, &v56))
              {
                goto LABEL_61;
              }
              if (*(_BYTE *)(v19 + 63)
                || (v18 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 8) + 112))(*(_QWORD *)(v19 + 8), 0, 1, 10)) == 0)
              {
                v18 = 0;
                *(_BYTE *)(v19 + 64) = 1;
              }
              LODWORD(v56) = 0;
              v23 = *(_QWORD *)(v19 + 8);
              if (*(_QWORD *)v23)
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v23 + 80))(v23, 34, &v56);
              if (v18 != 5 && v18 != 0)
                break;
            }
            goto LABEL_62;
          }
        }
      }
    }
    break;
  }
  v50 = *(_QWORD *)(v7 + 344);
  if (v50)
    *(_QWORD *)(v50 + 152) = 0;
  if (v18 == 773)
    v10 = 5;
  else
    v10 = v18;
  if ((_DWORD)v10)
    goto LABEL_14;
  if (!*(_BYTE *)(a1 + 16))
  {
    ++*(_DWORD *)(v6 + 60);
    if (*(_BYTE *)(a1 + 17))
    {
      *(_BYTE *)(a1 + 60) = 1;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 120);
      *(_QWORD *)(v6 + 120) = a1 + 48;
    }
  }
  if (a2)
    v51 = 2;
  else
    v51 = 1;
  *(_BYTE *)(a1 + 16) = v51;
  a3 = v53;
  if (v51 > *(unsigned __int8 *)(v6 + 36))
    *(_BYTE *)(v6 + 36) = v51;
  if (!a2
    || (v52 = *(_QWORD *)(v6 + 24),
        *(_QWORD *)(v6 + 128) = a1,
        *(_WORD *)(v6 + 40) = *(_WORD *)(v6 + 40) & 0xFFBF | ((a2 > 1) << 6),
        *(_DWORD *)(v6 + 64) == bswap32(*(_DWORD *)(*(_QWORD *)(v52 + 80) + 28))))
  {
LABEL_7:
    if (a3)
      *a3 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 80) + 40));
    if (a2 && (v9 = *(_DWORD *)(*(_QWORD *)a1 + 788), *(_DWORD *)(v7 + 128) < v9) && *(_BYTE *)(v7 + 10))
      v10 = sub_1ACBEDD40(v7, v9);
    else
      v10 = 0;
    goto LABEL_14;
  }
  v10 = sub_1ACB9A7C8(*(_QWORD *)(v52 + 112));
  if (!(_DWORD)v10)
  {
    *(_DWORD *)(*(_QWORD *)(v52 + 80) + 28) = bswap32(*(_DWORD *)(v6 + 64));
    a3 = v53;
    goto LABEL_7;
  }
LABEL_14:
  if (*(_BYTE *)(a1 + 17))
  {
    v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11)
      sub_1ACBED048(a1);
  }
  return v10;
}

uint64_t sub_1ACBED8B0(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = 0;
  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(v10 + 16);
    if (*(_DWORD *)(v7 + 4) != a2)
    {
      v8 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v7 + 112) = v10;
      *(_QWORD *)(v7 + 72) = a1;
      *(_QWORD *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1)
        v9 = 100;
      else
        v9 = 0;
      *(_BYTE *)(v7 + 9) = v9;
    }
    *a3 = v7;
  }
  return result;
}

_QWORD *sub_1ACBED934(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  char v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
    {
      for (i = 0; ; i += 32)
      {
        v5 = *(_QWORD *)(v3 + i + 8);
        if (v5)
        {
          if (*(_QWORD **)(v5 + 8) == result)
            break;
        }
      }
      v6 = v3 + i;
      if (!*(_BYTE *)(v6 + 17) && i != 32 && *(unsigned __int8 *)(v6 + 16) != a2)
      {
        *(_BYTE *)(v6 + 16) = a2;
        v7 = *result;
        v8 = *(_DWORD *)(v2 + 48) & 0x38 | a2;
        if (*(_BYTE *)(*result + 16))
        {
          v9 = 0;
          *(_WORD *)(v7 + 11) = 1;
          *(_BYTE *)(v7 + 13) = 0;
        }
        else
        {
          v9 = (v8 & 7u) > 2;
          *(_BYTE *)(v7 + 12) = v9;
          *(_BYTE *)(v7 + 13) = (v8 & 7) == 4;
          *(_BYTE *)(v7 + 11) = (v8 & 7) == 1;
          if ((v8 & 7) != 1)
          {
            v11 = 0;
            if ((v8 & 8) != 0)
              v10 = 3;
            else
              v10 = 2;
            *(_BYTE *)(v7 + 14) = v10;
            goto LABEL_15;
          }
        }
        v10 = 0;
        *(_BYTE *)(v7 + 14) = 0;
        v11 = 1;
LABEL_15:
        v12 = 4 * v10;
        if (v9)
          v13 = v10;
        else
          v13 = 0;
        if ((v8 & 0x10) != 0)
          v14 = v11;
        else
          v14 = 1;
        if (v14)
          v15 = v12;
        else
          v15 = 12;
        *(_BYTE *)(v7 + 15) = v15 | v13;
        *(_BYTE *)(v7 + 25) = *(_BYTE *)(v7 + 25) & 0xFE | ((v8 & 0x20) == 0);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBEDA54(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(uint64_t);
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v25;

  v2 = *((unsigned __int8 *)a1 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    v3 = *((unsigned __int8 *)a1 + 22);
    if (v3 < 4 || (_DWORD)v3 == 5)
    {
      if (!*((_BYTE *)a1 + 17))
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[9] + 56))(a1[9], 4);
        if ((_DWORD)v5)
        {
          v6 = v5;
          v7 = a1[9];
          if (*(_QWORD *)v7)
          {
            if (!*((_BYTE *)a1 + 17))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v3);
            if (*((_BYTE *)a1 + 22) != 5)
              *((_BYTE *)a1 + 22) = v3;
          }
          *((_BYTE *)a1 + 23) = *((_BYTE *)a1 + 16);
          goto LABEL_38;
        }
        v2 = *((unsigned __int8 *)a1 + 8);
      }
      *((_BYTE *)a1 + 22) = 4;
    }
    else
    {
      v2 = 1;
    }
  }
  v8 = *a1;
  v9 = a1[9];
  v10 = a1[44];
  v11 = a1[26];
  v12 = *((_DWORD *)a1 + 45);
  a1[43] = 0;
  v13 = *(int *)(v8 + 4) + 160;
  v14 = (void *)sub_1ACB5D828(v13);
  if (!v14)
  {
    v6 = 7;
    goto LABEL_38;
  }
  v15 = (uint64_t)v14;
  bzero(v14, v13);
  *(_QWORD *)(v15 + 8) = v9;
  *(_QWORD *)(v15 + 16) = v15 + 160;
  *(_QWORD *)v15 = v8;
  *(_WORD *)(v15 + 60) = -1;
  *(_QWORD *)(v15 + 32) = v11;
  *(_QWORD *)(v15 + 128) = v10;
  *(_WORD *)(v15 + 68) = 257;
  *(_BYTE *)(v15 + 63) = 2 * (v2 != 0);
  if ((v12 & 1) != 0)
    v16 = 0;
  else
    v16 = 6;
  v25 = v16 | v12 & 1;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v8, v10);
  if ((_DWORD)v17)
  {
    v6 = v17;
    sub_1ACBEB4DC(v15, 0);
    v18 = *(_QWORD *)(v15 + 16);
    if (*(_QWORD *)v18)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v18 + 8))(*(_QWORD *)(v15 + 16));
      *(_QWORD *)v18 = 0;
    }
    v19 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_28;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v15);
    v15 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v19 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_28:
      (*v19)(v15);
    }
  }
  else
  {
    if ((v25 & 1) != 0)
      *(_BYTE *)(v15 + 66) = 1;
    if (*(_QWORD *)v9)
    {
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
      if ((v20 & 0x400) != 0)
        *(_BYTE *)(v15 + 68) = 0;
      if ((v20 & 0x1000) != 0)
        *(_BYTE *)(v15 + 69) = 0;
    }
    v6 = 0;
    a1[43] = v15;
  }
LABEL_38:
  v21 = *(_QWORD *)a1[9];
  if (v21 && *(int *)v21 >= 3)
  {
    v22 = a1[20];
    *((_BYTE *)a1 + 27) = v22 > 0;
    if (*((_DWORD *)a1 + 12))
    {
      v23 = sub_1ACBEBC4C;
    }
    else if (v22 < 1 || a1[37])
    {
      v23 = sub_1ACBEBEA8;
    }
    else
    {
      v23 = sub_1ACBEBC58;
    }
    a1[36] = (uint64_t)v23;
    (*(void (**)(void))(v21 + 80))();
  }
  return v6;
}

uint64_t sub_1ACBEDD40(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *i;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  _DWORD *v11;

  v4 = *(_DWORD *)(a1 + 128);
  v5 = sub_1ACB6BB48(*(_QWORD *)(a1 + 120), 56 * a2);
  if (v5)
  {
    v6 = v5;
    bzero((void *)(v5 + 56 * v4), 56 * (a2 - v4));
    *(_QWORD *)(a1 + 120) = v6;
    if (a2 <= v4)
      return 0;
    for (i = (_DWORD *)(v6 + 56 * v4 + 24); ; i += 14)
    {
      v8 = *(_DWORD *)(a1 + 32);
      *i = v8;
      if (!**(_QWORD **)(a1 + 80) || (v9 = *(_QWORD *)(a1 + 96), v9 <= 0))
        v9 = *(unsigned int *)(a1 + 184);
      *((_QWORD *)i - 3) = v9;
      i[1] = *(_DWORD *)(a1 + 60);
      v10 = (_OWORD *)sub_1ACB5D828(512);
      if (!v10)
        break;
      v10[30] = 0u;
      v10[31] = 0u;
      v10[28] = 0u;
      v10[29] = 0u;
      v10[26] = 0u;
      v10[27] = 0u;
      v10[24] = 0u;
      v10[25] = 0u;
      v10[22] = 0u;
      v10[23] = 0u;
      v10[20] = 0u;
      v10[21] = 0u;
      v10[18] = 0u;
      v10[19] = 0u;
      v10[16] = 0u;
      v10[17] = 0u;
      v10[14] = 0u;
      v10[15] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[6] = 0u;
      v10[7] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[2] = 0u;
      v10[3] = 0u;
      *v10 = 0u;
      v10[1] = 0u;
      *(_DWORD *)v10 = v8;
      *((_QWORD *)i - 1) = v10;
      i[2] = 1;
      v11 = *(_DWORD **)(a1 + 344);
      if (v11)
      {
        i[3] = v11[22];
        i[4] = v11[24];
        i[5] = v11[25];
        i[6] = v11[34];
      }
      *(_DWORD *)(a1 + 128) = ++v4;
      if (a2 == v4)
        return 0;
    }
    *((_QWORD *)i - 1) = 0;
    i[2] = 1;
  }
  return 7;
}

uint64_t sub_1ACBEDEA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v35;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned int *)(v1 + 184) / *(uint64_t *)(v1 + 200);
  *(_BYTE *)(v1 + 25) |= 4u;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = (v3 - 1) & -(int)v2;
  v5 = *(_DWORD *)(v1 + 32);
  if (v4 + (int)v2 > v5)
    LODWORD(v2) = v5 - v4;
  if (v3 > v5)
    v6 = v3 - v4;
  else
    v6 = v2;
  if (v6 < 1)
  {
    v15 = 0;
    goto LABEL_56;
  }
  v8 = 0;
  v9 = 0;
  v10 = (v4 + 1);
  do
  {
    v35 = 0;
    if (v9 + (_DWORD)v10 == *(_DWORD *)(a1 + 48))
      goto LABEL_13;
    v11 = *(_DWORD **)(v1 + 64);
    if (!v11)
      goto LABEL_13;
    v12 = v9 + v4;
    if ((v9 + v4) >= *v11)
      goto LABEL_13;
    while (1)
    {
      v13 = v11[2];
      if (!v13)
        break;
      v14 = v12 / v13;
      v12 %= v13;
      v11 = *(_DWORD **)&v11[2 * v14 + 4];
      if (!v11)
        goto LABEL_13;
    }
    if (*v11 >= 0xF81u)
    {
      v23 = v12 % 0x7C;
      v24 = v11 + 4;
      v25 = v24[v12 % 0x7C];
      if (!v25)
        goto LABEL_13;
      v26 = v12 + 1;
      while (v25 != v26)
      {
        if (v23 == 123)
          v23 = 0;
        else
          ++v23;
        v25 = v24[v23];
        if (!v25)
          goto LABEL_13;
      }
LABEL_26:
      v20 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 72), (v9 + v10), 0);
      if (v20)
      {
        v21 = (uint64_t *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        if (*(_QWORD *)v22)
        {
          ++*(_QWORD *)(*(_QWORD *)(v1 + 336) + 24);
          ++*(_QWORD *)(v22 + 56);
          v35 = v22;
LABEL_38:
          v27 = *(_WORD *)(v22 + 52);
          if ((v27 & 8) != 0)
            v8 = 1;
          if ((v27 & 0x20) != 0)
          {
            v28 = *(_QWORD *)(v22 + 40);
            --*(_DWORD *)(v28 + 152);
            *(_QWORD *)(v22 + 32) = *(_QWORD *)(v28 + 168);
            *(_QWORD *)(v28 + 168) = v22;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v28 + 72) + 144))(*(_QWORD *)(v28 + 72), *(_QWORD *)(v28 + 200) * (*(_DWORD *)(v22 + 48) - 1), *(_QWORD *)(v22 + 8));
          }
          else
          {
            sub_1ACBE906C(v22);
          }
          goto LABEL_14;
        }
        v22 = sub_1ACBEC2A8(*(_QWORD *)(v1 + 336), v9 + (int)v10, v21);
        v35 = v22;
        if (v22)
          goto LABEL_38;
      }
LABEL_14:
      v15 = 0;
      goto LABEL_21;
    }
    if (((*((unsigned __int8 *)v11 + ((unint64_t)v12 >> 3) + 16) >> (v12 & 7)) & 1) != 0)
      goto LABEL_26;
LABEL_13:
    if (v9 + (_DWORD)v10 == *(_DWORD *)(v1 + 192))
      goto LABEL_14;
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(v1 + 288))(v1, (v9 + v10), &v35, 0);
    if ((_DWORD)v16)
    {
      v15 = v16;
      goto LABEL_56;
    }
    v15 = sub_1ACB9A818(v35);
    v17 = v35;
    v18 = *(_WORD *)(v35 + 52);
    if ((v18 & 8) != 0)
      v8 = 1;
    if ((v18 & 0x20) != 0)
    {
      v19 = *(_QWORD *)(v35 + 40);
      --*(_DWORD *)(v19 + 152);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v19 + 168);
      *(_QWORD *)(v19 + 168) = v17;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v19 + 72) + 144))(*(_QWORD *)(v19 + 72), *(_QWORD *)(v19 + 200) * (*(_DWORD *)(v17 + 48) - 1), *(_QWORD *)(v17 + 8));
    }
    else
    {
      sub_1ACBE906C(v35);
    }
LABEL_21:
    ++v9;
  }
  while (v9 < v6 && !(_DWORD)v15);
  if (!(_DWORD)v15 && v8)
  {
    do
    {
      v29 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 72), v10, 0);
      if (v29)
      {
        v30 = (uint64_t *)v29;
        v31 = *(_QWORD *)(v29 + 8);
        if (*(_QWORD *)v31)
        {
          ++*(_QWORD *)(*(_QWORD *)(v1 + 336) + 24);
          ++*(_QWORD *)(v31 + 56);
LABEL_52:
          v32 = *(_WORD *)(v31 + 52);
          *(_WORD *)(v31 + 52) = v32 | 8;
          if ((v32 & 0x20) != 0)
          {
            v33 = *(_QWORD *)(v31 + 40);
            --*(_DWORD *)(v33 + 152);
            *(_QWORD *)(v31 + 32) = *(_QWORD *)(v33 + 168);
            *(_QWORD *)(v33 + 168) = v31;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v33 + 72) + 144))(*(_QWORD *)(v33 + 72), *(_QWORD *)(v33 + 200) * (*(_DWORD *)(v31 + 48) - 1), *(_QWORD *)(v31 + 8));
          }
          else
          {
            sub_1ACBE906C(v31);
          }
          goto LABEL_47;
        }
        v31 = sub_1ACBEC2A8(*(_QWORD *)(v1 + 336), v10, v30);
        if (v31)
          goto LABEL_52;
      }
LABEL_47:
      v10 = (v10 + 1);
      --v6;
    }
    while (v6);
  }
LABEL_56:
  *(_BYTE *)(v1 + 25) &= ~4u;
  return v15;
}

uint64_t sub_1ACBEE264(uint64_t result)
{
  __int16 v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_WORD *)(result + 52);
  if ((v1 & 0x11) != 0)
  {
    *(_WORD *)(result + 52) = v1 & 0xFFEF;
    if ((v1 & 1) != 0)
    {
      *(_WORD *)(result + 52) = v1 & 0xFFEF ^ 3;
      v2 = *(uint64_t **)(result + 24);
      v3 = *v2;
      *(_QWORD *)(result + 64) = *v2;
      *(_QWORD *)(result + 72) = 0;
      if (v3)
      {
        *(_QWORD *)(v3 + 72) = result;
      }
      else
      {
        v2[1] = result;
        if (*((_BYTE *)v2 + 48))
          *((_BYTE *)v2 + 49) = 1;
      }
      *v2 = result;
      if ((v1 & 8) == 0 && !v2[2])
        v2[2] = result;
    }
  }
  return result;
}

uint64_t sub_1ACBEE2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v2 + 296);
  if (v4)
  {
    v5 = 7;
    v6 = v4(*(_QWORD *)(v2 + 320), *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 48), 7);
    if (!v6)
      return v5;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
  }
  v7 = *(_DWORD *)(v2 + 56);
  v8 = (*(_DWORD *)(v2 + 200) - 200);
  if ((int)v8 >= 1)
  {
    v9 = v8 - 200;
    if (v8 < 0xC8)
      v9 = 0;
    if (v8 < 0xC9)
    {
      v10 = (*(_DWORD *)(v2 + 200) - 200);
      do
      {
LABEL_13:
        v7 += *(unsigned __int8 *)(v6 + v10);
        v15 = v10 > 0xC8;
        v10 -= 200;
      }
      while (v15);
      goto LABEL_14;
    }
    v11 = 0;
    v12 = (((v9 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
    v10 = v8 - 200 * (v12 & 0x7FFFFFE);
    v13 = (unsigned __int8 *)(v6 + v8);
    v14 = v12 & 0x7FFFFFE;
    do
    {
      v7 += *v13;
      v11 += *(v13 - 200);
      v13 -= 400;
      v14 -= 2;
    }
    while (v14);
    v7 += v11;
    if (v12 != (v12 & 0x7FFFFFE))
      goto LABEL_13;
  }
LABEL_14:
  *(_WORD *)(a1 + 52) |= 8u;
  v16 = *(_QWORD *)(v2 + 80);
  v28 = bswap32(*(_DWORD *)(a1 + 48));
  v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, &v28, 4, v3);
  if (!(_DWORD)v5)
  {
    v17 = v3 + 4;
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v2 + 80) + 24))(*(_QWORD *)(v2 + 80), v6, *(unsigned int *)(v2 + 200), v17);
    if (!(_DWORD)v5)
    {
      v18 = *(_QWORD *)(v2 + 80);
      v19 = v17 + *(_QWORD *)(v2 + 200);
      v29 = bswap32(v7);
      v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, &v29, 4, v19);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)(v2 + 96) += *(_QWORD *)(v2 + 200) + 8;
        ++*(_DWORD *)(v2 + 52);
        v20 = sub_1ACBA79A4(*(unsigned int **)(v2 + 64), *(_DWORD *)(a1 + 48));
        v21 = *(_DWORD *)(v2 + 128);
        if (v21 < 1)
        {
          v24 = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = *(_DWORD *)(a1 + 48);
          do
          {
            v26 = *(_QWORD *)(v2 + 120) + v22;
            if (*(_DWORD *)(v26 + 24) >= v25)
            {
              v24 |= sub_1ACBA79A4(*(unsigned int **)(v26 + 16), v25);
              v21 = *(_DWORD *)(v2 + 128);
            }
            ++v23;
            v22 += 56;
          }
          while (v23 < v21);
        }
        return v24 | v20;
      }
    }
  }
  return v5;
}

uint64_t sub_1ACBEE4FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  unsigned int v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t result;
  uint64_t i;
  _OWORD *v20;
  __int128 *v21;
  __int128 *v22;
  unsigned int v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1)
  {
    v2 = *a1;
    do
    {
      v3 = *(_QWORD *)(v2 + 64);
      *(_QWORD *)(v2 + 32) = v3;
      v2 = v3;
    }
    while (v3);
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    if (v1)
    {
      do
      {
LABEL_7:
        v4 = 0;
        v5 = (__int128 *)v1;
        v1 = *(_QWORD *)(v1 + 32);
        *((_QWORD *)v5 + 4) = 0;
        do
        {
          v6 = *((_QWORD *)&v31 + v4);
          if (!v6)
          {
            *((_QWORD *)&v31 + v4) = v5;
            if (!v1)
              goto LABEL_23;
            goto LABEL_7;
          }
          v29 = 0uLL;
          v30 = 0uLL;
          v27 = 0uLL;
          v28 = 0uLL;
          v7 = &v26;
          v26 = 0uLL;
          do
          {
            v8 = v7;
            v7 = (__int128 *)v6;
            v9 = *(_DWORD *)(v6 + 48);
            v10 = v5;
            while (1)
            {
              v5 = v10;
              if (v9 < *((_DWORD *)v10 + 12))
                break;
              *((_QWORD *)v8 + 4) = v10;
              v10 = (__int128 *)*((_QWORD *)v10 + 4);
              v8 = v5;
              if (!v10)
              {
                v11 = v5;
                v5 = v7;
                goto LABEL_15;
              }
            }
            *((_QWORD *)v8 + 4) = v7;
            v6 = *((_QWORD *)v7 + 4);
            v11 = v7;
          }
          while (v6);
LABEL_15:
          *((_QWORD *)v11 + 4) = v5;
          v5 = (__int128 *)v28;
          *((_QWORD *)&v31 + v4++) = 0;
        }
        while (v4 != 31);
        v12 = *((_QWORD *)&v46 + 1);
        v29 = 0uLL;
        v30 = 0uLL;
        v27 = 0uLL;
        v28 = 0uLL;
        v13 = &v26;
        v26 = 0uLL;
        do
        {
          v14 = v13;
          v13 = (__int128 *)v12;
          v15 = *(_DWORD *)(v12 + 48);
          v16 = v5;
          while (1)
          {
            v5 = v16;
            if (v15 < *((_DWORD *)v16 + 12))
              break;
            *((_QWORD *)v14 + 4) = v16;
            v16 = (__int128 *)*((_QWORD *)v16 + 4);
            v14 = v5;
            if (!v16)
            {
              v17 = v5;
              v5 = v13;
              goto LABEL_22;
            }
          }
          *((_QWORD *)v14 + 4) = v13;
          v12 = *((_QWORD *)v13 + 4);
          v17 = v13;
        }
        while (v12);
LABEL_22:
        *((_QWORD *)v17 + 4) = v5;
        *((_QWORD *)&v46 + 1) = v28;
      }
      while (v1);
LABEL_23:
      result = v31;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    result = 0;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
  }
  for (i = 1; i != 32; ++i)
  {
    v20 = (_OWORD *)*((_QWORD *)&v31 + i);
    if (v20)
    {
      if (result)
      {
        v29 = 0uLL;
        v30 = 0uLL;
        v27 = 0uLL;
        v28 = 0uLL;
        v21 = &v26;
        v26 = 0uLL;
        do
        {
          v22 = v21;
          v21 = (__int128 *)result;
          v23 = *(_DWORD *)(result + 48);
          v24 = v20;
          while (1)
          {
            v20 = v24;
            if (v23 < *((_DWORD *)v24 + 12))
              break;
            *((_QWORD *)v22 + 4) = v24;
            v24 = (_OWORD *)*((_QWORD *)v24 + 4);
            v22 = v20;
            if (!v24)
            {
              v25 = v20;
              v20 = (_OWORD *)result;
              goto LABEL_37;
            }
          }
          *((_QWORD *)v22 + 4) = result;
          result = *(_QWORD *)(result + 32);
          v25 = v21;
        }
        while (result);
LABEL_37:
        *((_QWORD *)v25 + 4) = v20;
        result = v28;
      }
      else
      {
        result = *((_QWORD *)&v31 + i);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBEE770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 23) || !*(_DWORD *)(a1 + 32))
    return 0;
  v9 = 0;
  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(a1 + 288))(a1, 1, &v9, 0);
  v4 = v9;
  if ((_DWORD)v1)
    goto LABEL_6;
  v5 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v5[8] >= *(_DWORD *)(v9 + 48))
  {
    if (!v5[32])
      goto LABEL_21;
    v7 = sub_1ACBEA110(v9);
LABEL_19:
    v1 = v7;
    v4 = v9;
    if ((_DWORD)v1)
      goto LABEL_6;
    if (!v9)
    {
LABEL_22:
      v1 = 0;
      *(_BYTE *)(a1 + 23) = 1;
LABEL_6:
      if (!v4)
        return v1;
      goto LABEL_11;
    }
LABEL_21:
    v8 = bswap32(bswap32(*(_DWORD *)(*(_QWORD *)(v4 + 40) + 136)) + 1);
    *(_DWORD *)(*(_QWORD *)(v4 + 8) + 24) = v8;
    *(_DWORD *)(*(_QWORD *)(v4 + 8) + 92) = v8;
    *(_DWORD *)(*(_QWORD *)(v4 + 8) + 96) = -1167184384;
    goto LABEL_22;
  }
  v1 = v5[12];
  if (!(_DWORD)v1)
  {
    if (v5[46] <= v5[50])
      v7 = sub_1ACB9A818(v9);
    else
      v7 = sub_1ACBEDEA4(v9);
    goto LABEL_19;
  }
LABEL_11:
  if ((*(_WORD *)(v4 + 52) & 0x20) != 0)
  {
    v6 = *(_QWORD *)(v4 + 40);
    --*(_DWORD *)(v6 + 152);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = v4;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 72) + 144))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 200) * (*(_DWORD *)(v4 + 48) - 1), *(_QWORD *)(v4 + 8));
  }
  else
  {
    sub_1ACBE906C(v4);
  }
  return v1;
}

uint64_t sub_1ACBEE8D8(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a1 + 9) == 4)
    return 0;
  v15 = 0;
  v3 = **(_QWORD **)(a1 + 80);
  if (!v3)
    return 0;
  *(_BYTE *)(a1 + 24) = 1;
  LOBYTE(v5) = *a2;
  if (*a2)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v7 += (char)v5;
      v5 = a2[++v6];
    }
    while (v5);
    v8 = v6;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  v10 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 12))
  {
    if (v10)
      v10 = *(unsigned int *)(a1 + 184) + *(unsigned int *)(a1 + 184) * ((v10 - 1) / *(unsigned int *)(a1 + 184));
    *(_QWORD *)(a1 + 96) = v10;
  }
  v16 = bswap32(*(_DWORD *)(a1 + 192));
  result = (*(uint64_t (**)(void))(v3 + 24))();
  if (!(_DWORD)result)
  {
    v11 = v10 + 4;
    result = (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2, v8, v11);
    if (!(_DWORD)result)
    {
      v12 = *(_QWORD *)(a1 + 80);
      v13 = v11 + v6;
      v16 = bswap32(v8);
      result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, &v16, 4, v11 + v6);
      if (!(_DWORD)result)
      {
        v14 = *(_QWORD *)(a1 + 80);
        v16 = bswap32(v7);
        result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, &v16, 4, v13 + 4);
        if (!(_DWORD)result)
        {
          result = (*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), &unk_1ACCB6CD1, 8, v13 + 8);
          if (!(_DWORD)result)
          {
            *(_QWORD *)(a1 + 96) += (v8 + 20);
            result = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), &v15);
            if (!(_DWORD)result)
            {
              if (v15 > *(_QWORD *)(a1 + 96))
                return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACBEEAAC(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v5;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;

  v5 = a3;
  if (a3 >= 2)
  {
    v8 = (a3 - 2) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
    if (v8 + 1 == dword_1EECAC650 / *(_DWORD *)(a1 + 52))
      v9 = 3;
    else
      v9 = 2;
    if (v9 + v8 == a3)
    {
LABEL_9:
      if (a4)
        return 0;
      v11 = dword_1EECAC650 / *(_DWORD *)(a1 + 52);
      do
      {
        while (1)
        {
          do
            v14 = v5--;
          while (v11 + 2 == v14);
          if (v5 >= 2)
            break;
          if (v5)
            goto LABEL_19;
        }
        v12 = (v14 - 3) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
        if (v12 + 1 == v11)
          v13 = 3;
        else
          v13 = 2;
      }
      while (v5 == v13 + v12);
LABEL_19:
      v10 = 0;
      *(_BYTE *)(a1 + 35) = 1;
      *(_DWORD *)(a1 + 64) = v5;
      return v10;
    }
  }
  else if (!a3)
  {
    goto LABEL_9;
  }
  if (dword_1EECAC650 / *(_DWORD *)(a1 + 52) + 1 == a3)
    goto LABEL_9;
  v32 = 0;
  v31 = 0;
  if (!bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 80) + 36)))
    return 101;
  v10 = sub_1ACBEF22C((_DWORD *)a1, a3, &v32, &v31);
  if (!(_DWORD)v10)
  {
    v15 = v32;
    if (v32 == 2)
    {
      if (a4)
        goto LABEL_9;
      LODWORD(v28) = 0;
      v30 = 0;
      v16 = sub_1ACBA3368(a1, &v30, (int *)&v28, v5, 1);
      if (!(_DWORD)v16)
      {
        sub_1ACBEF3E0(v30);
        goto LABEL_9;
      }
    }
    else
    {
      if (v32 != 1)
      {
        v29 = 0;
        v30 = 0;
        v10 = sub_1ACBED8B0(a1, v5, &v30);
        if ((_DWORD)v10)
          return v10;
        if (a4)
          v18 = 0;
        else
          v18 = a2;
        do
        {
          v28 = 0;
          v19 = *(_DWORD *)(a1 + 64);
          v20 = sub_1ACBA3368(a1, &v28, (int *)&v29, v18, 2 * (a4 == 0));
          if ((_DWORD)v20)
          {
            v10 = v20;
            if (v30)
            {
              v24 = *(_QWORD *)(v30 + 112);
              if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
              {
                v26 = *(_QWORD *)(v24 + 40);
                --*(_DWORD *)(v26 + 152);
                *(_QWORD *)(v24 + 32) = *(_QWORD *)(v26 + 168);
                *(_QWORD *)(v26 + 168) = v24;
                (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v26 + 72) + 144))(*(_QWORD *)(v26 + 72), *(_QWORD *)(v26 + 200) * (*(_DWORD *)(v24 + 48) - 1), *(_QWORD *)(v24 + 8));
              }
              else
              {
                sub_1ACBE906C(v24);
              }
            }
            return v10;
          }
          if (v28)
          {
            v21 = *(_QWORD *)(v28 + 112);
            if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
            {
              v22 = *(_QWORD *)(v21 + 40);
              --*(_DWORD *)(v22 + 152);
              *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 168);
              *(_QWORD *)(v22 + 168) = v21;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v22 + 72) + 144))(*(_QWORD *)(v22 + 72), *(_QWORD *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1), *(_QWORD *)(v21 + 8));
            }
            else
            {
              sub_1ACBE906C(v21);
            }
          }
          if (v29 > v19)
          {
            if (v30)
            {
              v25 = *(_QWORD *)(v30 + 112);
              if ((*(_WORD *)(v25 + 52) & 0x20) != 0)
              {
                v27 = *(_QWORD *)(v25 + 40);
                --*(_DWORD *)(v27 + 152);
                *(_QWORD *)(v25 + 32) = *(_QWORD *)(v27 + 168);
                *(_QWORD *)(v27 + 168) = v25;
                (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v27 + 72) + 144))(*(_QWORD *)(v27 + 72), *(_QWORD *)(v27 + 200) * (*(_DWORD *)(v25 + 48) - 1), *(_QWORD *)(v25 + 8));
              }
              else
              {
                sub_1ACBE906C(v25);
              }
            }
            return sub_1ACBEB08C(80869);
          }
        }
        while (a4 && v29 > a2);
        v23 = v30;
        v10 = sub_1ACBEF43C((_DWORD *)a1, v30, v15, v31, v29, a4);
        sub_1ACBEF3E0(v23);
        if ((_DWORD)v10)
          return v10;
        goto LABEL_9;
      }
      return sub_1ACBEB08C(80817);
    }
    return v16;
  }
  return v10;
}

uint64_t sub_1ACBEEE90(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  int v6;
  uint64_t result;

  while (1)
  {
    if (a1 == a3 || a2 && *((_DWORD *)a1 + 20) != a2)
      goto LABEL_3;
    v6 = *a1;
    if ((v6 | 2) == 2)
      break;
    sub_1ACBEEF5C((uint64_t)a1);
LABEL_3:
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
    if (!a1)
      return 0;
  }
  if ((a1[1] & 0x40) != 0)
    return 2835;
  if (v6 == 2)
    *a1 = 0;
  else
    *((_DWORD *)a1 + 1) = 0;
  result = sub_1ACBEF068((uint64_t)a1);
  if (!(_DWORD)result)
  {
    sub_1ACBEEF5C((uint64_t)a1);
    *a1 = 3;
    a1[1] &= 0xF1u;
    goto LABEL_3;
  }
  a1[1] &= 0xF1u;
  return result;
}

uint64_t sub_1ACBEEF5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(char *)(result + 84) & 0x80000000) == 0)
  {
    v1 = result;
    if (*(_BYTE *)(result + 84))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v1 + 144 + 8 * v2) + 112);
        if ((*(_WORD *)(v3 + 52) & 0x20) != 0)
        {
          v4 = *(_QWORD *)(v3 + 40);
          --*(_DWORD *)(v4 + 152);
          *(_QWORD *)(v3 + 32) = *(_QWORD *)(v4 + 168);
          *(_QWORD *)(v4 + 168) = v3;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 72) + 144))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 200) * (*(_DWORD *)(v3 + 48) - 1), *(_QWORD *)(v3 + 8));
        }
        else
        {
          sub_1ACBE906C(v3);
        }
        ++v2;
      }
      while (v2 < *(char *)(v1 + 84));
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 112);
    if ((*(_WORD *)(v5 + 52) & 0x20) != 0)
    {
      v6 = *(_QWORD *)(v5 + 40);
      --*(_DWORD *)(v6 + 152);
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 168);
      *(_QWORD *)(v6 + 168) = v5;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 72) + 144))(*(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 200) * (*(_DWORD *)(v5 + 48) - 1), *(_QWORD *)(v5 + 8));
    }
    else
    {
      result = sub_1ACBE906C(v5);
    }
    *(_BYTE *)(v1 + 84) = -1;
  }
  return result;
}

uint64_t sub_1ACBEF068(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t (**v8)(char *);
  char *v9;

  v2 = *(unsigned __int8 *)(a1 + 85);
  sub_1ACBEF184(a1);
  if (v2)
  {
    v3 = 0;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 48);
    return v3;
  }
  v5 = *(unsigned int *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = (char *)sub_1ACB5D828(v5 + 17);
  if (!v6)
    return 7;
  v7 = v6;
  v3 = sub_1ACBAE978(a1, 0, *(_DWORD *)(a1 + 72), v6, 0);
  if (!(_DWORD)v3)
  {
    v9 = &v7[*(_QWORD *)(a1 + 72)];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    *(_QWORD *)(a1 + 24) = v7;
    return v3;
  }
  v8 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_11:
    (*v8)(v7);
    return v3;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    goto LABEL_11;
  }
  return v3;
}

uint64_t sub_1ACBEF184(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;

  if (!*(_WORD *)(result + 70))
  {
    *(_BYTE *)(result + 1) |= 2u;
    v1 = *(_QWORD *)(result + 136);
    v2 = (unsigned __int8 *)(*(_QWORD *)(v1 + 96) + 2 * *(unsigned __int16 *)(result + 86));
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 128))(v1, *(_QWORD *)(v1 + 80) + ((v2[1] | (*v2 << 8)) & (unint64_t)*(unsigned __int16 *)(v1 + 26)), result + 48);
  }
  return result;
}

uint64_t sub_1ACBEF1D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 112);
  if ((*(_WORD *)(v1 + 52) & 0x20) == 0)
    return sub_1ACBE906C(v1);
  v3 = *(_QWORD *)(v1 + 40);
  --*(_DWORD *)(v3 + 152);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 168) = v1;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 72) + 144))(*(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 200) * (*(_DWORD *)(v1 + 48) - 1), *(_QWORD *)(v1 + 8));
}

uint64_t sub_1ACBEF22C(_DWORD *a1, unsigned int a2, _BYTE *a3, _DWORD *a4)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    v8 = (a2 - 2) / (a1[14] / 5u + 1) * (a1[14] / 5u + 1);
    if (v8 + 1 == dword_1EECAC650 / a1[13])
      v9 = 3;
    else
      v9 = 2;
    v7 = v9 + v8;
  }
  else
  {
    v7 = 0;
  }
  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
  if (!(_DWORD)result)
  {
    v11 = MEMORY[8];
    v12 = 5 * (~v7 + a2);
    if (v12 < 0)
    {
      v13 = 77938;
      if ((MEMORY[0x34] & 0x20) != 0)
      {
        v15 = MEMORY[0x28];
        --*(_DWORD *)(MEMORY[0x28] + 152);
        MEMORY[0x20] = *(_QWORD *)(v15 + 168);
        *(_QWORD *)(v15 + 168) = 0;
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v15 + 72) + 144))(*(_QWORD *)(v15 + 72), *(_QWORD *)(v15 + 200) * (MEMORY[0x30] - 1), v11);
      }
      else
      {
        sub_1ACBE906C(0);
      }
    }
    else
    {
      *a3 = *(_BYTE *)(MEMORY[8] + v12);
      if (a4)
        *a4 = bswap32(*(_DWORD *)(v11 + v12 + 1));
      if ((MEMORY[0x34] & 0x20) != 0)
      {
        v14 = MEMORY[0x28];
        --*(_DWORD *)(MEMORY[0x28] + 152);
        MEMORY[0x20] = *(_QWORD *)(v14 + 168);
        *(_QWORD *)(v14 + 168) = 0;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v14 + 72) + 144))(*(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 200) * (MEMORY[0x30] - 1), MEMORY[8]);
      }
      else
      {
        sub_1ACBE906C(0);
      }
      if (*a3 - 6 > 0xFFFFFFFA)
        return 0;
      v13 = 77946;
    }
    return sub_1ACBEB08C(v13);
  }
  return result;
}

uint64_t sub_1ACBEF3E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 112);
    if ((*(_WORD *)(v1 + 52) & 0x20) != 0)
    {
      v2 = *(_QWORD *)(v1 + 40);
      --*(_DWORD *)(v2 + 152);
      *(_QWORD *)(v1 + 32) = *(_QWORD *)(v2 + 168);
      *(_QWORD *)(v2 + 168) = v1;
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 72) + 144))(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 200) * (*(_DWORD *)(v1 + 48) - 1), *(_QWORD *)(v1 + 8));
    }
    else
    {
      return sub_1ACBE906C(v1);
    }
  }
  return result;
}

uint64_t sub_1ACBEF43C(_DWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;

  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_QWORD *)a1;
  v55 = 0;
  if (v6 <= 2)
  {
    v8 = 15183;
    return sub_1ACBEB08C(v8 | 0x10000u);
  }
  v16 = *(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(v7 + 16))
  {
    v17 = *(_DWORD **)(v16 + 40);
    if ((*(_WORD *)(v16 + 52) & 4) != 0 && v17[8] >= *(_DWORD *)(v16 + 48))
    {
      if (v17[32])
      {
        v18 = sub_1ACBEA110(*(_QWORD *)(a2 + 112));
        if ((_DWORD)v18)
          return v18;
      }
    }
    else
    {
      v18 = v17[12];
      if ((_DWORD)v18)
        return v18;
      v19 = *(_QWORD *)(a2 + 112);
      if (v17[46] <= v17[50])
      {
        v18 = sub_1ACB9A818(v19);
        if ((_DWORD)v18)
          return v18;
      }
      else
      {
        v18 = sub_1ACBEDEA4(v19);
        if ((_DWORD)v18)
          return v18;
      }
    }
  }
  v20 = *(_WORD *)(v16 + 52);
  if ((v20 & 2) != 0)
  {
    v18 = sub_1ACBEA110(v16);
    if ((_DWORD)v18)
      return v18;
    v20 = *(_WORD *)(v16 + 52);
  }
  v54 = 0;
  if (!a6 && (v20 & 8) != 0)
    v54 = *(_DWORD *)(v16 + 48);
  *(_WORD *)(v16 + 52) = v20 & 0xFFF7;
  v21 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(v7 + 336) + 72), a5, 0);
  if (v21)
  {
    v22 = (uint64_t *)v21;
    v23 = *(_QWORD *)(v7 + 336);
    v24 = v22[1];
    if (*(_QWORD *)v24)
    {
      ++*(_QWORD *)(v23 + 24);
      v25 = *(_QWORD *)(v24 + 56) + 1;
      *(_QWORD *)(v24 + 56) = v25;
    }
    else
    {
      v28 = sub_1ACBEC2A8(v23, a5, v22);
      v24 = v28;
      if (!v28)
      {
        v53 = a3;
        v26 = a4;
        v27 = 0;
        goto LABEL_44;
      }
      v25 = *(_QWORD *)(v28 + 56);
    }
    if (v25 >= 2)
    {
      if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
      {
        v29 = *(_QWORD *)(v24 + 40);
        --*(_DWORD *)(v29 + 152);
        *(_QWORD *)(v24 + 32) = *(_QWORD *)(v29 + 168);
        *(_QWORD *)(v29 + 168) = v24;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v29 + 72) + 144))(*(_QWORD *)(v29 + 72), *(_QWORD *)(v29 + 200) * (*(_DWORD *)(v24 + 48) - 1), *(_QWORD *)(v24 + 8));
      }
      else
      {
        sub_1ACBE906C(v24);
      }
      v8 = 5653;
      return sub_1ACBEB08C(v8 | 0x10000u);
    }
    *(_WORD *)(v16 + 52) |= *(_WORD *)(v24 + 52) & 8;
    v53 = a3;
    if (*(_BYTE *)(v7 + 16))
    {
      v26 = a4;
      sub_1ACBEFEF0(v24, (*(_DWORD *)(v7 + 32) + 1));
      v27 = 1;
      goto LABEL_44;
    }
    v30 = *(_QWORD *)(v24 + 24);
    if ((*(_WORD *)(v24 + 52) & 2) != 0)
    {
      v31 = *(_QWORD *)(v24 + 72);
      if (*(_QWORD *)(v30 + 16) == v24)
        *(_QWORD *)(v30 + 16) = v31;
      v32 = *(_QWORD *)(v24 + 64);
      if (v32)
      {
        *(_QWORD *)(v32 + 72) = v31;
        v31 = *(_QWORD *)(v24 + 72);
        if (!v31)
        {
          *(_QWORD *)v30 = v32;
          goto LABEL_43;
        }
      }
      else
      {
        *(_QWORD *)(v30 + 8) = v31;
        if (!v31)
        {
          *(_QWORD *)v30 = 0;
          *(_BYTE *)(v30 + 49) = 2;
          goto LABEL_43;
        }
      }
      *(_QWORD *)(v31 + 64) = v32;
    }
LABEL_43:
    v26 = a4;
    --*(_QWORD *)(v30 + 24);
    v27 = 1;
    xmmword_1ECD3B228(*(_QWORD *)(v30 + 72), *(_QWORD *)v24, 1);
    goto LABEL_44;
  }
  v53 = a3;
  v26 = a4;
  v27 = 0;
  v24 = 0;
LABEL_44:
  v33 = *(unsigned int *)(v16 + 48);
  sub_1ACBEFEF0(v16, a5);
  v34 = *(_WORD *)(v16 + 52);
  if ((v34 & 0x11) != 0)
  {
    *(_WORD *)(v16 + 52) = v34 & 0xFFEF;
    if ((v34 & 1) != 0)
    {
      *(_WORD *)(v16 + 52) = v34 & 0xFFEF ^ 3;
      v35 = *(uint64_t **)(v16 + 24);
      *(_QWORD *)(v16 + 72) = 0;
      v36 = *v35;
      *(_QWORD *)(v16 + 64) = *v35;
      if (v36)
      {
        *(_QWORD *)(v36 + 72) = v16;
      }
      else
      {
        v35[1] = v16;
        if (*((_BYTE *)v35 + 48))
          *((_BYTE *)v35 + 49) = 1;
      }
      *v35 = v16;
      if ((v34 & 8) == 0 && !v35[2])
        v35[2] = v16;
    }
  }
  v37 = v27 ^ 1;
  if (!*(_BYTE *)(v7 + 16))
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    sub_1ACBEFEF0(v24, v33);
    if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
    {
      v39 = *(_QWORD *)(v24 + 40);
      --*(_DWORD *)(v39 + 152);
      *(_QWORD *)(v24 + 32) = *(_QWORD *)(v39 + 168);
      *(_QWORD *)(v39 + 168) = v24;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v39 + 72) + 144))(*(_QWORD *)(v39 + 72), *(_QWORD *)(v39 + 200) * (*(_DWORD *)(v24 + 48) - 1), *(_QWORD *)(v24 + 8));
      if (!v54)
        goto LABEL_74;
      goto LABEL_59;
    }
    sub_1ACBE906C(v24);
  }
  if (!v54)
    goto LABEL_74;
LABEL_59:
  v56 = 0;
  v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(v7 + 288))(v7, v54, &v56, 0);
  if ((_DWORD)v38)
  {
    v18 = v38;
    if (v54 <= *(_DWORD *)(v7 + 36))
      sub_1ACBF00EC(*(void **)(v7 + 64), v54, *(void **)(v7 + 328));
    return v18;
  }
  v40 = v56;
  v41 = *(_WORD *)(v56 + 52);
  LOBYTE(v42) = v41 | 8;
  *(_WORD *)(v56 + 52) = v41 | 8;
  if ((v41 & 0x11) != 0)
  {
    v42 = v41 & 0xFFE7 | 8;
    *(_WORD *)(v40 + 52) = v42;
    if ((v41 & 1) != 0)
    {
      *(_WORD *)(v40 + 52) = v42 ^ 3;
      v43 = *(uint64_t **)(v40 + 24);
      *(_QWORD *)(v40 + 72) = 0;
      v44 = *v43;
      *(_QWORD *)(v40 + 64) = *v43;
      if (v44)
      {
        *(_QWORD *)(v44 + 72) = v40;
      }
      else
      {
        v43[1] = v40;
        if (*((_BYTE *)v43 + 48))
          *((_BYTE *)v43 + 49) = 1;
      }
      *v43 = v40;
      v40 = v56;
      v42 = *(_WORD *)(v56 + 52);
    }
  }
  if ((v42 & 0x20) != 0)
  {
    v45 = *(_QWORD *)(v40 + 40);
    --*(_DWORD *)(v45 + 152);
    *(_QWORD *)(v40 + 32) = *(_QWORD *)(v45 + 168);
    *(_QWORD *)(v45 + 168) = v40;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v45 + 72) + 144))(*(_QWORD *)(v45 + 72), *(_QWORD *)(v45 + 200) * (*(_DWORD *)(v40 + 48) - 1), *(_QWORD *)(v40 + 8));
  }
  else
  {
    sub_1ACBE906C(v40);
  }
LABEL_74:
  v55 = 0;
  *(_DWORD *)(a2 + 4) = a5;
  if ((v53 & 0xFFFFFFFB) == 1)
  {
    v18 = sub_1ACBEFB5C(a2);
    if (!(_DWORD)v18)
      goto LABEL_79;
  }
  else
  {
    v46 = bswap32(**(_DWORD **)(a2 + 80));
    if (!v46 || (sub_1ACBAF160(a1, v46, 4, a5, &v55), (v18 = v55) == 0))
    {
LABEL_79:
      if (v53 == 1)
      {
        return 0;
      }
      else
      {
        v56 = 0;
        v47 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
        if ((_DWORD)v47)
        {
          return v47;
        }
        else
        {
          v48 = v56;
          v49 = *(_QWORD *)(v56 + 16);
          if (*(_DWORD *)(v49 + 4) == v26)
          {
            v48 = *(_QWORD *)(v49 + 112);
          }
          else
          {
            v50 = *(_QWORD *)(v56 + 8);
            *(_QWORD *)(v49 + 112) = v56;
            *(_QWORD *)(v49 + 72) = a1;
            *(_QWORD *)(v49 + 80) = v50;
            *(_DWORD *)(v49 + 4) = v26;
            if (v26 == 1)
              v51 = 100;
            else
              v51 = 0;
            *(_BYTE *)(v49 + 9) = v51;
          }
          v52 = sub_1ACB9A7C8(v48);
          if ((_DWORD)v52)
          {
            v18 = v52;
            sub_1ACBEF3E0(v49);
          }
          else
          {
            v18 = sub_1ACBEFCE0(v49, v6, a5, v53);
            v55 = v18;
            sub_1ACBEF3E0(v49);
            if (!(_DWORD)v18)
            {
              sub_1ACBAF160(a1, a5, v53, v26, &v55);
              return v55;
            }
          }
        }
      }
    }
  }
  return v18;
}

uint64_t sub_1ACBEFA50(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
  if ((_DWORD)result)
  {
    *a3 = 0;
  }
  else
  {
    v7 = MEMORY[0x10];
    if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
    {
      v8 = MEMORY[8];
      *(_QWORD *)(MEMORY[0x10] + 112) = 0;
      *(_QWORD *)(v7 + 72) = a1;
      *(_QWORD *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1)
        v9 = 100;
      else
        v9 = 0;
      *(_BYTE *)(v7 + 9) = v9;
    }
    *a3 = v7;
    v10 = *(_QWORD *)(v7 + 112);
    if (*(int *)(v10 + 56) < 2)
    {
      result = 0;
      *(_BYTE *)v7 = 0;
    }
    else
    {
      if ((*(_WORD *)(v10 + 52) & 0x20) != 0)
      {
        v11 = *(_QWORD *)(v10 + 40);
        --*(_DWORD *)(v11 + 152);
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 168);
        *(_QWORD *)(v11 + 168) = v10;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v11 + 72) + 144))(*(_QWORD *)(v11 + 72), *(_QWORD *)(v11 + 200) * (*(_DWORD *)(v10 + 48) - 1), *(_QWORD *)(v10 + 8));
      }
      else
      {
        sub_1ACBE906C(v10);
      }
      *a3 = 0;
      return sub_1ACBEB08C(79254);
    }
  }
  return result;
}

uint64_t sub_1ACBEFB5C(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v10;
  _QWORD v11[2];
  uint64_t v12;

  v2 = *(_DWORD **)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 4);
  if (*(_BYTE *)a1)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1ACB8A2CC(a1);
    v10 = result;
    if ((_DWORD)result)
      return result;
  }
  if (*(_WORD *)(a1 + 24))
  {
    v4 = 0;
    v5 = 2 * *(unsigned __int16 *)(a1 + 24);
    do
    {
      v6 = (unsigned int *)(*(_QWORD *)(a1 + 80)
                          + ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v4 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v4) << 8)) & (unint64_t)*(unsigned __int16 *)(a1 + 26)));
      if (!v10)
      {
        v11[0] = 0;
        v11[1] = 0;
        v12 = 0;
        (*(void (**)(uint64_t, unsigned int *, _QWORD *))(a1 + 128))(a1, v6, v11);
        if (v12 > WORD2(v12))
        {
          v7 = *(_QWORD *)(a1 + 88);
          if (v7 > (unint64_t)v6 && (unint64_t)v6 + WORD2(v12) > v7)
          {
            v10 = sub_1ACBEB08C(78386);
            if (*(_BYTE *)(a1 + 8))
              goto LABEL_5;
LABEL_14:
            sub_1ACBAF160(v2, bswap32(*v6), 5, v3, &v10);
            goto LABEL_5;
          }
          sub_1ACBAF160(*(_DWORD **)(a1 + 72), bswap32(*(unsigned int *)((char *)v6 + HIWORD(v12) - 4)), 3, *(_DWORD *)(a1 + 4), &v10);
        }
      }
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_14;
LABEL_5:
      v4 += 2;
    }
    while (v5 != v4);
  }
  if (!*(_BYTE *)(a1 + 8))
    sub_1ACBAF160(v2, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 9) + *(_QWORD *)(a1 + 80) + 8)), 5, v3, &v10);
  return v10;
}

uint64_t sub_1ACBEFCE0(uint64_t a1, int a2, unsigned int a3, int a4)
{
  unsigned int *v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];
  uint64_t v21;

  if (a4 == 4)
  {
    v7 = *(unsigned int **)(a1 + 80);
    if (bswap32(*v7) != a2)
      return sub_1ACBEC69C(80644, a1);
LABEL_3:
    result = 0;
    *v7 = bswap32(a3);
    return result;
  }
  if (!*(_BYTE *)a1)
  {
    result = sub_1ACB8A2CC(a1);
    if ((_DWORD)result)
      return result;
  }
  v10 = *(unsigned __int16 *)(a1 + 24);
  if (!*(_WORD *)(a1 + 24))
  {
    LODWORD(v12) = 0;
LABEL_20:
    if ((_DWORD)v12 == (_DWORD)v10)
    {
LABEL_21:
      if (a4 != 5)
        goto LABEL_27;
      v16 = *(unsigned __int8 *)(a1 + 9) + *(_QWORD *)(a1 + 80);
      v17 = *(_DWORD *)(v16 + 8);
      v7 = (unsigned int *)(v16 + 8);
      if (bswap32(v17) != a2)
        goto LABEL_27;
      goto LABEL_3;
    }
    return 0;
  }
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = (unsigned int *)(v13
                         + ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v11 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v11) << 8)) & (unint64_t)*(unsigned __int16 *)(a1 + 26)));
    if (a4 != 3)
    {
      if ((unint64_t)(v14 + 1) > v13 + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 72) + 56))
      {
        v18 = 80672;
        return sub_1ACBEC69C(v18, a1);
      }
      if (bswap32(*v14) == a2)
      {
        *v14 = bswap32(a3);
        goto LABEL_20;
      }
      goto LABEL_7;
    }
    v20[0] = 0;
    v20[1] = 0;
    v21 = 0;
    (*(void (**)(uint64_t, unsigned int *, _QWORD *))(a1 + 128))(a1, v14, v20);
    if (v21 > WORD2(v21))
    {
      v15 = (unint64_t)v14 + HIWORD(v21);
      if (v15 > *(_QWORD *)(a1 + 80) + (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 72) + 56))
      {
        v19 = 19;
        goto LABEL_28;
      }
      if (bswap32(*(_DWORD *)(v15 - 4)) == a2)
        break;
    }
LABEL_7:
    ++v12;
    v11 += 2;
    if (v10 == v12)
      goto LABEL_21;
  }
  *(_DWORD *)(v15 - 4) = bswap32(a3);
  if ((_DWORD)v10 != (_DWORD)v12)
    return 0;
LABEL_27:
  v19 = 40;
LABEL_28:
  v18 = v19 | 0x13B04u;
  return sub_1ACBEC69C(v18, a1);
}

uint64_t sub_1ACBEFEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17[16];

  v4 = *(_QWORD *)(a1 + 24);
  v5 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(v4 + 72), a2, 0);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v6 + 56);
    if (v7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v17 = 0;
      _os_log_fault_impl(&dword_1ACB54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "pcache replacing page with non-zero refcount", v17, 2u);
      v7 = *(_QWORD *)(v6 + 56);
    }
    *(_QWORD *)(v6 + 56) = v7 + 1;
    ++*(_QWORD *)(v4 + 24);
    v8 = *(_QWORD *)(v6 + 24);
    if ((*(_BYTE *)(v6 + 52) & 2) == 0)
      goto LABEL_13;
    v9 = *(_QWORD *)(v6 + 72);
    if (*(_QWORD *)(v8 + 16) == v6)
    {
      *(_QWORD *)(v8 + 16) = v9;
      v10 = *(_QWORD *)(v6 + 64);
      if (v10)
      {
LABEL_8:
        *(_QWORD *)(v10 + 72) = v9;
        v9 = *(_QWORD *)(v6 + 72);
        if (!v9)
        {
          *(_QWORD *)v8 = v10;
LABEL_13:
          --*(_QWORD *)(v8 + 24);
          xmmword_1ECD3B228(*(_QWORD *)(v8 + 72), *(_QWORD *)v6, 1);
          goto LABEL_14;
        }
LABEL_12:
        *(_QWORD *)(v9 + 64) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 64);
      if (v10)
        goto LABEL_8;
    }
    *(_QWORD *)(v8 + 8) = v9;
    if (!v9)
    {
      *(_QWORD *)v8 = 0;
      *(_BYTE *)(v8 + 49) = 2;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_14:
  result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))*(&xmmword_1ECD3B228 + 1))(*(_QWORD *)(v4 + 72), *(_QWORD *)a1, *(unsigned int *)(a1 + 48), a2);
  *(_DWORD *)(a1 + 48) = a2;
  v12 = *(unsigned __int16 *)(a1 + 52);
  if ((~v12 & 0xA) != 0)
    return result;
  v13 = *(uint64_t **)(a1 + 24);
  v14 = v13[2];
  v15 = *(_QWORD *)(a1 + 72);
  if (v14 == a1)
  {
    v13[2] = v15;
    v14 = v15;
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (!v16)
  {
    v13[1] = v15;
    if (!v15)
    {
      *((_BYTE *)v13 + 49) = 2;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      goto LABEL_24;
    }
LABEL_21:
    *(_QWORD *)(v15 + 64) = v16;
    v16 = *v13;
    *(_QWORD *)(a1 + 64) = *v13;
    *(_QWORD *)(a1 + 72) = 0;
    if (v16)
      goto LABEL_22;
LABEL_24:
    v13[1] = a1;
    if (*((_BYTE *)v13 + 48))
      *((_BYTE *)v13 + 49) = 1;
    goto LABEL_26;
  }
  *(_QWORD *)(v16 + 72) = v15;
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
    goto LABEL_21;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = 0;
LABEL_22:
  *(_QWORD *)(v16 + 72) = a1;
LABEL_26:
  *v13 = a1;
  if ((v12 & 8) == 0 && !v14)
    v13[2] = a1;
  return result;
}

void *sub_1ACBF00EC(void *result, int a2, void *__dst)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;

  if (result)
  {
    v4 = (uint64_t)result;
    v5 = a2 - 1;
    while (1)
    {
      v6 = *(_DWORD *)(v4 + 8);
      if (!v6)
        break;
      v7 = v5 / v6;
      v5 %= v6;
      v4 = *(_QWORD *)(v4 + 8 * v7 + 16);
      if (!v4)
        return result;
    }
    if (*(_DWORD *)v4 > 0xF80u)
    {
      v8 = v4 + 16;
      result = memcpy(__dst, (const void *)(v4 + 16), 0x1F0uLL);
      v9 = 0;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 352) = 0u;
      *(_OWORD *)(v4 + 368) = 0u;
      *(_OWORD *)(v4 + 384) = 0u;
      *(_OWORD *)(v4 + 400) = 0u;
      *(_OWORD *)(v4 + 416) = 0u;
      *(_OWORD *)(v4 + 432) = 0u;
      *(_OWORD *)(v4 + 448) = 0u;
      *(_OWORD *)(v4 + 464) = 0u;
      *(_OWORD *)(v4 + 480) = 0u;
      *(_OWORD *)(v4 + 496) = 0u;
      *(_DWORD *)(v4 + 4) = 0;
      do
      {
        v10 = *((_DWORD *)__dst + v9);
        if (v10)
          v11 = v10 == v5 + 1;
        else
          v11 = 1;
        if (!v11)
        {
          v12 = (v10 - 1) % 0x7Cu;
          ++*(_DWORD *)(v4 + 4);
          while (*(_DWORD *)(v8 + 4 * v12))
          {
            if ((v12 + 1) <= 0x7B)
              v12 = (v12 + 1);
            else
              v12 = 0;
          }
          *(_DWORD *)(v8 + 4 * v12) = *((_DWORD *)__dst + v9);
        }
        ++v9;
      }
      while (v9 != 124);
    }
    else
    {
      *(_BYTE *)(v4 + ((unint64_t)v5 >> 3) + 16) &= ~(1 << (v5 & 7));
    }
  }
  return result;
}

_DWORD *sub_1ACBF0240(_DWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  _DWORD *v7;
  unint64_t v8;
  _QWORD v10[2];
  uint64_t v11;

  if (!*a4)
  {
    v7 = result;
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    result = (_DWORD *)(*((uint64_t (**)(_DWORD *, unint64_t, _QWORD *))result + 16))(result, a3, v10);
    if (v11 > WORD2(v11))
    {
      v8 = *(_QWORD *)(a2 + 88);
      if (v8 > a3 && a3 + WORD2(v11) > v8)
      {
        result = (_DWORD *)sub_1ACBEB08C(78386);
        *a4 = (_DWORD)result;
      }
      else
      {
        return sub_1ACBAF160(*((_DWORD **)v7 + 9), bswap32(*(_DWORD *)(HIWORD(v11) + a3 - 4)), 3, v7[1], a4);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBF02F4(uint64_t a1, int a2, int a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(uint64_t);
  int v17;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v6 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 16);
  if (!v6)
  {
LABEL_25:
    v11 = 0;
    goto LABEL_26;
  }
  while (!a3 || (v6[1] & 1) != 0)
  {
    v8 = *((_QWORD *)v6 + 3);
    if (v8)
    {
      v9 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v8);
        v8 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_8;
        v9 = &xmmword_1ECD3B1D0;
      }
      (*v9)(v8);
    }
LABEL_8:
    *((_QWORD *)v6 + 3) = 0;
    *v6 = 4;
    *((_DWORD *)v6 + 1) = a2;
LABEL_9:
    sub_1ACBEEF5C((uint64_t)v6);
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 5);
    if (!v6)
      goto LABEL_25;
  }
  v7 = *v6;
  if ((v7 | 2) != 2)
    goto LABEL_9;
  if ((v6[1] & 0x40) != 0)
  {
    v11 = 2835;
    if (!*(_BYTE *)(a1 + 17))
      goto LABEL_36;
    goto LABEL_34;
  }
  if (v7 == 2)
    *v6 = 0;
  else
    *((_DWORD *)v6 + 1) = 0;
  v10 = sub_1ACBEF068((uint64_t)v6);
  if (!(_DWORD)v10)
  {
    sub_1ACBEEF5C((uint64_t)v6);
    *v6 = 3;
    v6[1] &= 0xF1u;
    goto LABEL_9;
  }
  v11 = v10;
  v6[1] &= 0xF1u;
  if (!*(_BYTE *)(a1 + 17))
    goto LABEL_36;
LABEL_34:
  ++*(_DWORD *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 18))
    sub_1ACBECF6C(a1);
LABEL_36:
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v14)
  {
    while (2)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_38;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v15);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v15);
        v15 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v16 = &xmmword_1ECD3B1D0;
LABEL_38:
          (*v16)(v15);
        }
      }
      *(_QWORD *)(v14 + 24) = 0;
      *(_BYTE *)v14 = 4;
      *(_DWORD *)(v14 + 4) = v11;
      sub_1ACBEEF5C(v14);
      v14 = *(_QWORD *)(v14 + 40);
      if (!v14)
        break;
      continue;
    }
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v17 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v17;
    if (!v17)
      sub_1ACBED048(a1);
LABEL_26:
    if (*(_BYTE *)(a1 + 17))
    {
      v12 = *(_DWORD *)(a1 + 20) - 1;
      *(_DWORD *)(a1 + 20) = v12;
      if (!v12)
        sub_1ACBED048(a1);
    }
  }
  return v11;
}

uint64_t sub_1ACBF05BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);

  v1 = result;
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)v1 = 1;
  return result;
}

_QWORD *sub_1ACBF0674(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t (**v3)(_QWORD);

  v2 = a2;
  if (result[64] <= (unint64_t)a2)
    goto LABEL_17;
  if (result[62] <= (unint64_t)a2)
  {
    *a2 = result[61];
    result[61] = a2;
    return result;
  }
  if (result[63] <= (unint64_t)a2)
  {
    *a2 = result[59];
    result[59] = a2;
  }
  else
  {
LABEL_17:
    if (result[102])
      return (_QWORD *)sub_1ACBE10B0((uint64_t)result, (unint64_t)a2);
    if (a2)
    {
      v3 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        return (_QWORD *)(*v3)(v2);
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      result = (_QWORD *)off_1ECD3B168(v2);
      v2 = (_QWORD *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v3 = &xmmword_1ECD3B1D0;
        return (_QWORD *)(*v3)(v2);
      }
    }
  }
  return result;
}

_QWORD *sub_1ACBF0784(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  if ((*(_BYTE *)(v4 + 4) & 0x10) != 0)
    sub_1ACBF0674(a1, (_QWORD *)v4);
  return sub_1ACBF0674(a1, a2);
}

_QWORD *sub_1ACBF07C0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  if (*(_DWORD *)(a2 + 32))
  {
    v4 = *(_QWORD **)(a2 + 40);
    if (v4)
      sub_1ACBE0F9C(a1, v4);
  }
  return sub_1ACBF0674(a1, (_QWORD *)a2);
}

_QWORD *sub_1ACBF0800(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  void (*v8)(_QWORD);

  v1 = (_QWORD *)*result;
  v2 = *((_DWORD *)result + 6) - 1;
  *((_DWORD *)result + 6) = v2;
  if (!v2)
  {
    v3 = result;
    v4 = result[2];
    v5 = v1;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      v5 = (_QWORD *)*v3;
    }
    v6 = v3[1];
    v7 = *(_DWORD *)(v6 + 16) - 1;
    *(_DWORD *)(v6 + 16) = v7;
    if (!v7)
    {
      v8 = *(void (**)(_QWORD))(v6 + 32);
      if (v8)
        v8(*(_QWORD *)(v6 + 24));
      sub_1ACBE0F9C(v5, (_QWORD *)v6);
    }
    return sub_1ACBE0F9C(v1, v3);
  }
  return result;
}

uint64_t sub_1ACBF089C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD);
  double v9;

  v4 = *a1;
  if (*(int *)v4 >= 2 && (v5 = *(uint64_t (**)(void))(v4 + 136)) != 0)
  {
    result = v5();
    v7 = 0;
  }
  else
  {
    v9 = 0.0;
    result = (*(uint64_t (**)(uint64_t, double *))(v4 + 120))(v4, &v9);
    v7 = (uint64_t)(v9 * 86400000.0);
  }
  *(_QWORD *)&v9 = 1000000 * (v7 - *(_QWORD *)(a2 + 184));
  v8 = (uint64_t (*)(uint64_t, _QWORD))a1[32];
  if (v8)
    result = v8(a1[33], *(_QWORD *)(a2 + 320));
  if ((*((_BYTE *)a1 + 110) & 2) != 0)
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, double *))a1[30])(2, a1[31], a2, &v9);
  *(_QWORD *)(a2 + 184) = 0;
  return result;
}

uint64_t sub_1ACBF0968()
{
  char *v0;
  char *v1;
  uint64_t result;

  v0 = getenv("SQLITE_ACCEPTABLE_RATIO_VM_STEP_TO_STEP");
  if (!v0)
    v0 = "10000.0";
  qword_1ECD3EAA8 = atof(v0);
  v1 = getenv("SQLITE_ACCEPTABLE_OVERALL_VM_STEP");
  if (!v1)
    v1 = "50000";
  result = atoll(v1);
  qword_1ECD3EAB0 = result;
  return result;
}

uint64_t sub_1ACBF09C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)a1;
  v2 = *(unsigned int *)(a1 + 52);
  if (*(_QWORD *)(a1 + 168))
  {
    ++*(_BYTE *)(v1 + 104);
    if (off_1EECAD248)
      off_1EECAD248(a1);
    v4 = *(_QWORD *)(v1 + 416);
    if (!v4)
    {
      v4 = sub_1ACBE1124(v1, 0x40uLL);
      if (!v4)
      {
        *(_QWORD *)(v1 + 416) = 0;
        goto LABEL_8;
      }
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_WORD *)(v4 + 20) = 1;
      *(_QWORD *)(v4 + 24) = v1;
      *(_QWORD *)(v1 + 416) = v4;
    }
    v4 = sub_1ACB57870(v4, *(char **)(a1 + 168), -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
LABEL_8:
    if (off_1EECAD250)
      off_1EECAD250(v4);
    --*(_BYTE *)(v1 + 104);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(v1 + 416);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v6);
    else
      *(_WORD *)(v6 + 20) = 1;
  }
LABEL_11:
  *(_DWORD *)(v1 + 80) = v2;
  *(_DWORD *)(v1 + 84) = -1;
  return v2;
}

_DWORD *sub_1ACBF0ABC(_DWORD *result)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t i;

  v1 = result[69];
  if (v1)
  {
    v2 = result;
    v3 = *(unsigned int *)(*(_QWORD *)result + 40);
    if ((int)v3 >= 1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)result + 32);
      if ((v1 & 1) != 0)
      {
        result = *(_DWORD **)(v4 + 8);
        if (result)
        {
          if (*((_BYTE *)result + 17))
          {
            ++result[5];
            if (!*((_BYTE *)result + 18))
              result = (_DWORD *)sub_1ACBECF6C((uint64_t)result);
          }
        }
      }
      if (v3 >= 3)
      {
        v5 = (_DWORD **)(v4 + 72);
        for (i = 2; i != v3; ++i)
        {
          if (((v2[69] >> i) & 1) != 0)
          {
            result = *v5;
            if (*v5)
            {
              if (*((_BYTE *)result + 17))
              {
                ++result[5];
                if (!*((_BYTE *)result + 18))
                  result = (_DWORD *)sub_1ACBECF6C((uint64_t)result);
              }
            }
          }
          v5 += 4;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1ACBF0B84(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *i;

  v1 = result;
  for (i = (_QWORD *)result[95]; i; i = (_QWORD *)v1[95])
  {
    v1[95] = i[3];
    result = sub_1ACBE0F9C(v1, i);
  }
  *(_QWORD *)((char *)v1 + 788) = 0;
  *((_BYTE *)v1 + 109) = 0;
  return result;
}

uint64_t sub_1ACBF0BCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (a2)
  {
    if (!(((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 808) + *(_QWORD *)(*(_QWORD *)a1 + 800)) < 0) ^ __OFADD__(*(_QWORD *)(*(_QWORD *)a1 + 808), *(_QWORD *)(*(_QWORD *)a1 + 800)) | (*(_QWORD *)(*(_QWORD *)a1 + 808) + *(_QWORD *)(*(_QWORD *)a1 + 800) == 0)))
      goto LABEL_3;
    return 0;
  }
  if (*(uint64_t *)(a1 + 80) < 1)
    return 0;
LABEL_3:
  *(_DWORD *)(a1 + 52) = 787;
  *(_BYTE *)(a1 + 264) = 2;
  sub_1ACBF1C7C((uint64_t *)a1, "FOREIGN KEY constraint failed", a3, a4, a5, a6, a7, a8, v10);
  if (*(char *)(a1 + 266) >= 0)
    return 1;
  else
    return 787;
}

uint64_t sub_1ACBF0C40(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD);

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 40);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(unsigned __int8 **)(*(_QWORD *)(v2 + 120) + 8 * i);
      if (v5)
      {
        sub_1ACBF0D2C((_QWORD **)v2, v5);
        *(_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * i) = 0;
        v3 = *(_DWORD *)(v2 + 40);
      }
    }
  }
  v6 = a1[3];
  *(_QWORD *)(v2 + 136) = a1[2];
  v7 = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v2 + 144) = *((_DWORD *)a1 + 20);
  *(_QWORD *)(v2 + 104) = v6;
  *(_QWORD *)(v2 + 120) = a1[4];
  v8 = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v2 + 36) = v7;
  *(_DWORD *)(v2 + 40) = v8;
  v9 = *(_QWORD **)v2;
  v9[7] = a1[7];
  v10 = a1[13];
  *(_QWORD *)(v2 + 56) = a1[12];
  v9[15] = v10;
  while (1)
  {
    v11 = *(_QWORD **)(v2 + 384);
    if (!v11)
      break;
    v12 = (void (*)(_QWORD))v11[2];
    if (v12)
      v12(v11[1]);
    *(_QWORD *)(v2 + 384) = v11[3];
    sub_1ACBE0F9C(v9, v11);
  }
  *(_QWORD *)(v2 + 384) = a1[8];
  a1[8] = 0;
  return *((unsigned int *)a1 + 19);
}

_QWORD **sub_1ACBF0D2C(_QWORD **result, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  int v22;

  if ((a2[5] & 0x10) != 0)
    return (_QWORD **)sub_1ACBF1064(result, (uint64_t)a2);
  v3 = *a2;
  if (!*a2)
  {
    v8 = (_QWORD *)*((_QWORD *)a2 + 5);
    v9 = v8[1];
    if (!v9)
      return result;
    v10 = v8[4];
    if (*(_BYTE *)(v9 + 17))
    {
      ++*(_DWORD *)(v9 + 20);
      if (!*(_BYTE *)(v9 + 18))
        sub_1ACBECF6C(v9);
    }
    v11 = *(_QWORD **)(v10 + 16);
    v12 = (_QWORD *)(v10 + 16);
    if (v11 != v8)
    {
      while (1)
      {
        v13 = (_QWORD *)v11[5];
        if (v13 == v8)
          break;
        v11 = (_QWORD *)v11[5];
        if (!v13)
          goto LABEL_26;
      }
      v12 = v11 + 5;
    }
    *v12 = v8[5];
LABEL_26:
    result = (_QWORD **)sub_1ACBEEF5C((uint64_t)v8);
    if (!*(_BYTE *)(v10 + 36))
    {
      v17 = *(_QWORD *)(v10 + 24);
      if (v17)
      {
        *(_QWORD *)(v10 + 24) = 0;
        result = (_QWORD **)sub_1ACBE097C(*(_QWORD *)(v17 + 112));
      }
    }
    v18 = v8[2];
    if (v18)
    {
      v19 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_35:
        result = (_QWORD **)(*v19)(v18);
        goto LABEL_36;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v18);
      --qword_1ECD3E8D0;
      result = (_QWORD **)off_1ECD3B168(v18);
      v18 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v19 = &xmmword_1ECD3B1D0;
        goto LABEL_35;
      }
    }
LABEL_36:
    v20 = v8[3];
    if (v20)
    {
      v21 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v20);
        --qword_1ECD3E8D0;
        result = (_QWORD **)off_1ECD3B168(v20);
        v20 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_43;
        v21 = &xmmword_1ECD3B1D0;
      }
      result = (_QWORD **)(*v21)(v20);
    }
LABEL_43:
    if ((*(_BYTE *)(v10 + 32) & 4) != 0 && !*(_QWORD *)(v10 + 16))
    {
      result = (_QWORD **)sub_1ACBA3F80(v9, v16);
    }
    else if (*(_BYTE *)(v9 + 17))
    {
      v22 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v22;
      if (!v22)
        result = (_QWORD **)sub_1ACBED048(v9);
    }
    v8[1] = 0;
    return result;
  }
  if (v3 == 2)
  {
    v14 = (uint64_t **)*((_QWORD *)a2 + 5);
    v15 = **v14;
    --*((_DWORD *)*v14 + 2);
    return (_QWORD **)(*(uint64_t (**)(void))(v15 + 56))();
  }
  else if (v3 == 1)
  {
    v4 = (_QWORD *)*((_QWORD *)a2 + 5);
    if (v4)
    {
      v5 = *result;
      sub_1ACBF1224(*result, *((_QWORD *)a2 + 5));
      v6 = v4[8];
      if (v6)
      {
        v7 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v6);
          v6 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_13;
          v7 = &xmmword_1ECD3B1D0;
        }
        (*v7)(v6);
      }
LABEL_13:
      result = (_QWORD **)sub_1ACBE0F9C(v5, v4);
      *((_QWORD *)a2 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACBF1064(_QWORD **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t (**v9)(_QWORD);

  v4 = *(uint64_t **)(a2 + 104);
  *(_BYTE *)(a2 + 5) &= ~0x10u;
  *(_QWORD *)(a2 + 104) = 0;
  v5 = *v4;
  if (*v4)
  {
    v8 = *(_QWORD *)(v5 - 8);
    v7 = (_QWORD *)(v5 - 8);
    v6 = v8;
    if (v8 < 2)
    {
      v9 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v7);
        v7 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_10;
        v9 = &xmmword_1ECD3B1D0;
      }
      (*v9)(v7);
    }
    else
    {
      *v7 = v6 - 1;
    }
LABEL_10:
    *v4 = 0;
  }
  sub_1ACBE0F9C(*a1, v4);
  return sub_1ACBF0D2C(a1, a2);
}

uint64_t sub_1ACBF1160(uint64_t result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t (**v3)(_QWORD);

  v2 = (_QWORD *)(result - 8);
  v1 = *(_QWORD *)(result - 8);
  if (v1 >= 2)
  {
    *v2 = v1 - 1;
    return result;
  }
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v2);
  v2 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v2);
  }
  return result;
}

void sub_1ACBF1224(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(int *);
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;
  uint64_t (**v22)(uint64_t);
  uint64_t v23;
  uint64_t (**v24)(uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)(uint64_t);

  if (*(_BYTE *)(a2 + 91))
  {
    v3 = *(unsigned __int8 *)(a2 + 91) + 1;
    v4 = a2 + 104 * *(unsigned __int8 *)(a2 + 91) - 8;
    do
    {
      v5 = *(_QWORD *)v4;
      if (!*(_QWORD *)v4)
        goto LABEL_5;
      if (*(_QWORD *)v5)
        (*(void (**)(_QWORD))v5)(*(_QWORD *)(v5 + 8));
      v6 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v5);
        v5 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_4;
        v6 = &xmmword_1ECD3B1D0;
      }
      (*v6)(v5);
LABEL_4:
      *(_DWORD *)(v4 + 8) = 0;
      *(_QWORD *)v4 = 0;
LABEL_5:
      --v3;
      v4 -= 104;
    }
    while (v3 > 1);
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    sub_1ACBF172C(v7);
    v8 = *(_QWORD **)(a2 + 16);
    if (v8)
      sub_1ACBE0F9C(a1, v8);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v9 = *(int **)(a2 + 24);
  if (v9)
  {
    if (*v9 >= 1)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        sub_1ACBF172C(*((_QWORD *)v9 + 3) + v10);
        ++v11;
        v10 += 80;
      }
      while (v11 < *v9);
    }
    v12 = (void (**)(int *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_27;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v9);
    v9 = (int *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v12 = (void (**)(int *))&xmmword_1ECD3B1D0;
LABEL_27:
      (*v12)(v9);
    }
  }
  *(_QWORD *)(a2 + 24) = 0;
  if (*(_BYTE *)(a2 + 91))
  {
    v13 = 0;
    while (1)
    {
      v14 = a2 + 104 * v13;
      v15 = *(_QWORD **)(v14 + 120);
      if (v15)
        sub_1ACBE0F9C(a1, v15);
      v16 = *(_QWORD *)(a2 + 104 * v13 + 136);
      if (!v16)
        break;
      v17 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_40;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v16);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v16);
      v16 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v17 = &xmmword_1ECD3B1D0;
LABEL_40:
        (*v17)(v16);
      }
LABEL_42:
      v19 = *(_QWORD *)(a2 + 104 * v13 + 168);
      if (!v19)
        goto LABEL_51;
      if (*(_QWORD *)v19)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v19 + 8))(*(_QWORD *)(a2 + 104 * v13 + 168));
        *(_QWORD *)v19 = 0;
      }
      v20 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_50;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v19);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v19);
      v19 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v20 = &xmmword_1ECD3B1D0;
LABEL_50:
        (*v20)(v19);
      }
LABEL_51:
      v21 = *(_QWORD *)(a2 + 104 * v13 + 184);
      if (v21)
      {
        if (*(_QWORD *)v21)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v21 + 8))(*(_QWORD *)(a2 + 104 * v13 + 184));
          *(_QWORD *)v21 = 0;
        }
        v22 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v21);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v21);
          v21 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_31;
          v22 = &xmmword_1ECD3B1D0;
        }
        (*v22)(v21);
      }
LABEL_31:
      *(_QWORD *)(v14 + 192) = 0;
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 144) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 112) = 0u;
      *(_QWORD *)(a2 + 104 * v13++ + 112) = a2;
      if (v13 >= *(unsigned __int8 *)(a2 + 91))
        goto LABEL_66;
    }
    v18 = *(_QWORD *)(a2 + 104 * v13 + 128);
    if (!v18)
      goto LABEL_42;
    while (1)
    {
      v23 = *(_QWORD *)(v18 + 8);
      v24 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v18);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v18);
        v18 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_60;
        v24 = &xmmword_1ECD3B1D0;
      }
      (*v24)(v18);
LABEL_60:
      v18 = v23;
      if (!v23)
        goto LABEL_42;
    }
  }
LABEL_66:
  if (!*(_QWORD *)(a2 + 64))
  {
    v26 = *(_QWORD *)(a2 + 56);
    if (v26)
    {
      do
      {
        v27 = *(_QWORD *)(v26 + 8);
        v28 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v26);
          v26 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_73;
          v28 = &xmmword_1ECD3B1D0;
        }
        (*v28)(v26);
LABEL_73:
        v26 = v27;
      }
      while (v27);
    }
  }
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v25 = *(_QWORD **)(a2 + 48);
  if (v25)
    sub_1ACBE0F9C(a1, v25);
  *(_QWORD *)(a2 + 48) = 0;
}

double sub_1ACBF172C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t *v10;
  uint64_t (**v11)(uint64_t);
  uint64_t *v12;
  uint64_t (**v13)(uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(int *);
  uint64_t (**v18)(uint64_t **);
  double result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    goto LABEL_15;
  v5 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_14;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v4);
  v4 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = &xmmword_1ECD3B1D0;
LABEL_14:
    (*v5)(v4);
  }
LABEL_15:
  if (*(_QWORD *)(a1 + 64))
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24), 0);
  v6 = *(uint64_t ***)(a1 + 72);
  if (!v6)
    goto LABEL_63;
  if (!*((_DWORD *)v6 + 8))
    goto LABEL_47;
  v7 = *v6;
  v8 = **v6;
  if (v8)
  {
    if (*(_QWORD *)v8)
      (*(void (**)(_QWORD))v8)(*(_QWORD *)(v8 + 8));
    v9 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v8);
      v8 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_28;
      v9 = &xmmword_1ECD3B1D0;
    }
    (*v9)(v8);
LABEL_28:
    *((_DWORD *)v7 + 2) = 0;
    *v7 = 0;
  }
  v10 = v6[5];
  if (v10)
  {
    if (*v10)
    {
      (*(void (**)(uint64_t *))(*v10 + 8))(v6[5]);
      *v10 = 0;
    }
    v11 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v10);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v10);
      v10 = (uint64_t *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_38;
      v11 = &xmmword_1ECD3B1D0;
    }
    (*v11)((uint64_t)v10);
  }
LABEL_38:
  v12 = v6[7];
  if (!v12)
    goto LABEL_47;
  if (*v12)
  {
    (*(void (**)(uint64_t *))(*v12 + 8))(v6[7]);
    *v12 = 0;
  }
  v13 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_46;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v12);
  v12 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v13 = &xmmword_1ECD3B1D0;
LABEL_46:
    (*v13)((uint64_t)v12);
  }
LABEL_47:
  v14 = v6[1];
  if (v14)
  {
    if (*(int *)v14 >= 1)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        sub_1ACBF172C(v14[3] + v15);
        ++v16;
        v15 += 80;
      }
      while (v16 < *(int *)v14);
    }
    v17 = (void (**)(int *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v14);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v14);
      v14 = (uint64_t *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_57;
      v17 = (void (**)(int *))&xmmword_1ECD3B1D0;
    }
    (*v17)((int *)v14);
  }
LABEL_57:
  v18 = (uint64_t (**)(uint64_t **))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_62:
    (*v18)(v6);
    goto LABEL_63;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v6);
  v6 = (uint64_t **)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v18 = (uint64_t (**)(uint64_t **))&xmmword_1ECD3B1D0;
    goto LABEL_62;
  }
LABEL_63:
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1ACBF1BB4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t (**v2)(_QWORD);
  uint64_t result;

  v1 = a1;
  if (*a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 8))(a1);
    *v1 = 0;
  }
  v2 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v2)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v2 = &xmmword_1ECD3B1D0;
    return (*v2)(v1);
  }
  return result;
}

void *sub_1ACBF1C7C(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _QWORD *v11;
  void *result;

  v11 = (_QWORD *)a1[21];
  if (v11)
    sub_1ACBE0F9C((_QWORD *)*a1, v11);
  result = sub_1ACBE9258(*a1, a2, &a9);
  a1[21] = (uint64_t)result;
  return result;
}

uint64_t sub_1ACBF1CD0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t i;
  int v7;

  v1 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)result + 32);
    if ((*(_BYTE *)(result + 276) & 1) != 0)
    {
      result = *(_QWORD *)(v3 + 8);
      if (result)
      {
        if (*(_BYTE *)(result + 17))
        {
          v4 = *(_DWORD *)(result + 20) - 1;
          *(_DWORD *)(result + 20) = v4;
          if (!v4)
            result = sub_1ACBED048(result);
        }
      }
    }
    if (v1 >= 3)
    {
      v5 = (uint64_t *)(v3 + 72);
      for (i = 2; i != v1; ++i)
      {
        if (((*(_DWORD *)(v2 + 276) >> i) & 1) != 0)
        {
          result = *v5;
          if (*v5)
          {
            if (*(_BYTE *)(result + 17))
            {
              v7 = *(_DWORD *)(result + 20) - 1;
              *(_DWORD *)(result + 20) = v7;
              if (!v7)
                result = sub_1ACBED048(result);
            }
          }
        }
        v5 += 4;
      }
    }
  }
  return result;
}

uint64_t sub_1ACBF1D8C(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t (**v14)(void *);

  v10 = *(int *)(a1 + 4);
  v11 = (void *)sub_1ACB5D828(v10);
  v12 = v11;
  if (!v11)
  {
    v13 = 7;
    goto LABEL_10;
  }
  bzero(v11, v10);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, void *, _QWORD, uint64_t))(a1 + 40))(a1, a2, v12, a4 & 0x1787F7F, a5);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_8:
      (*v14)(v12);
      v12 = 0;
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v12);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v12);
    v12 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v14 = (uint64_t (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_8;
    }
  }
LABEL_10:
  *a3 = v12;
  return v13;
}

uint64_t sub_1ACBF1EB0(uint64_t result, uint64_t a2)
{
  const char *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);

  v2 = *(const char **)(a2 + 16);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD **)(result + 168);
    if (v6)
    {
      result = (uint64_t)sub_1ACBE0F9C(*(_QWORD **)result, v6);
      v2 = *(const char **)(a2 + 16);
      if (!v2)
      {
        *(_QWORD *)(v4 + 168) = 0;
        goto LABEL_17;
      }
    }
    v7 = strlen(v2);
    v8 = v7 + 1;
    if (v5)
    {
      result = sub_1ACBE1124(v5, v8);
      v9 = (void *)result;
      if (!result)
        goto LABEL_7;
    }
    else
    {
      result = sub_1ACB5D828(v7 + 1);
      v9 = (void *)result;
      if (!result)
      {
LABEL_7:
        v10 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(v4 + 168) = v9;
        if (v10)
        {
          v11 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v10);
            --qword_1ECD3E8D0;
            result = off_1ECD3B168(v10);
            v10 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_17;
            v11 = &xmmword_1ECD3B1D0;
          }
          result = (*v11)(v10);
        }
LABEL_17:
        *(_QWORD *)(a2 + 16) = 0;
        return result;
      }
    }
    result = (uint64_t)memcpy(v9, v2, v8);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1ACBF1FE4(uint64_t a1, int a2, double a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 64) - 1;
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if (v7 <= 0)
  {
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 8;
    do
    {
      v12 = *(_QWORD *)(v5 + 32);
      v13 = *(_QWORD *)(v12 + v10);
      if (v13)
      {
        if (a2 != 2 || (v11 = sub_1ACBAF3B4(*(_QWORD *)(v12 + v10), 2, v6, a3)) == 0)
          v11 = sub_1ACBAF3B4(v13, 1, v6, a3);
        if ((_DWORD)v9)
          v9 = v9;
        else
          v9 = v11;
        v7 = *(_DWORD *)(v5 + 40);
      }
      ++v8;
      v10 += 32;
    }
    while (v8 < v7);
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
    if ((_DWORD)v9)
    {
      if (a2 != 2)
        return v9;
      goto LABEL_20;
    }
  }
  if (a2 == 2 && (v9 = sub_1ACBF2114(v5, 2, v6), (_DWORD)v9) || (v9 = sub_1ACBF2114(v5, 1, v6), a2 == 2))
LABEL_20:
    *(_OWORD *)(v5 + 800) = *(_OWORD *)(a1 + 88);
  return v9;
}

uint64_t sub_1ACBF2114(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  void (*v20)(_QWORD);

  if (*(_QWORD *)(a1 + 600))
  {
    v6 = 0;
    v7 = a3 + 1;
    while (1)
    {
      if (v6 >= *(int *)(a1 + 564))
        return 0;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 600) + 8 * v6);
      if (*(_QWORD *)(v9 + 16))
      {
        v10 = **(_QWORD **)(v9 + 8);
        if (*(int *)v10 >= 2)
          break;
      }
      v8 = 0;
LABEL_4:
      ++v6;
      if ((_DWORD)v8)
        return v8;
    }
    v11 = *(_DWORD *)(v9 + 24) + 1;
    *(_DWORD *)(v9 + 24) = v11;
    if (a2 == 2)
    {
      v12 = *(uint64_t (**)(void))(v10 + 176);
      if (!v12)
        goto LABEL_17;
    }
    else if (a2)
    {
      v12 = *(uint64_t (**)(void))(v10 + 168);
      if (!v12)
        goto LABEL_17;
    }
    else
    {
      v12 = *(uint64_t (**)(void))(v10 + 160);
      *(_DWORD *)(v9 + 32) = v7;
      if (!v12)
        goto LABEL_17;
    }
    if (*(_DWORD *)(v9 + 32) > a3)
    {
      v13 = *(_QWORD *)(a1 + 48) & 0x10000000;
      *(_QWORD *)(a1 + 48) &= ~0x10000000uLL;
      v8 = v12();
      *(_QWORD *)(a1 + 48) |= v13;
      v11 = *(_DWORD *)(v9 + 24);
      goto LABEL_18;
    }
LABEL_17:
    v8 = 0;
LABEL_18:
    v14 = *(_QWORD **)v9;
    v15 = v11 - 1;
    *(_DWORD *)(v9 + 24) = v15;
    if (!v15)
    {
      v16 = *(_QWORD *)(v9 + 16);
      v17 = v14;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
        v17 = *(_QWORD **)v9;
      }
      v18 = *(_QWORD *)(v9 + 8);
      v19 = *(_DWORD *)(v18 + 16) - 1;
      *(_DWORD *)(v18 + 16) = v19;
      if (!v19)
      {
        v20 = *(void (**)(_QWORD))(v18 + 32);
        if (v20)
          v20(*(_QWORD *)(v18 + 24));
        sub_1ACBE0F9C(v17, (_QWORD *)v18);
      }
      sub_1ACBE0F9C(v14, (_QWORD *)v9);
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1ACBF2298(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v4;
  int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  _OWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void **v25;
  unsigned int v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  int v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4)
    return v4;
  v6 = *(_DWORD *)(a1 + 128);
  if (v6 <= a3)
    return 0;
  if (a2 == 1)
    v8 = a3;
  else
    v8 = a3 + 1;
  if (v8 < v6)
  {
    if (a2 == 1)
      v9 = a3;
    else
      v9 = a3 + 1;
    v10 = 56 * v9 + 16;
    do
    {
      sub_1ACBAF4D0(*(_QWORD *)(*(_QWORD *)(a1 + 120) + v10));
      ++v9;
      v10 += 56;
    }
    while (v9 < *(int *)(a1 + 128));
  }
  *(_DWORD *)(a1 + 128) = v8;
  if (a2 == 1)
  {
    v24 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v24 + 56 * v8 + 32))
    {
      v25 = *(void ***)(a1 + 88);
      if (*v25)
      {
        if (*v25 == &unk_1E5C732E0)
          v4 = sub_1ACBB1EB0((uint64_t)v25, (*(_QWORD *)(a1 + 200) + 4) * *(unsigned int *)(v24 + 56 * v8 + 28));
        else
          v4 = 0;
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(v24 + 56 * v8 + 28);
        return v4;
      }
    }
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 344);
  if (!v11 && !**(_QWORD **)(a1 + 80))
    return 0;
  if (!v8 || (v12 = *(_QWORD *)(a1 + 120)) == 0)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 36);
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    if (!v11)
    {
      v19 = 0;
      v21 = (uint64_t *)(a1 + 96);
      v22 = *(_QWORD *)(a1 + 96);
      v23 = 1;
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_65;
    }
    if (*(_BYTE *)(v11 + 64))
    {
      v27 = *(_DWORD *)(v11 + 88);
      v28 = **(__int128 ***)(v11 + 48);
      v29 = v28[2];
      v30 = *v28;
      *(_OWORD *)(v11 + 88) = v28[1];
      *(_OWORD *)(v11 + 72) = v30;
      *(_OWORD *)(v11 + 104) = v29;
      v31 = *(_DWORD *)(v11 + 88);
      if (v31 + 1 <= v27)
      {
        v32 = v31 + 4097;
        do
        {
          v37 = v32 + 0xFFFFFFFF021;
          v38 = *(_QWORD **)(v11 + 48);
          if ((v37 & 0xFFFFFFFF000) != 0)
            v33 = (unsigned int *)(v38[(int)(v37 >> 12)] + 4 * (((_WORD)v32 - 4063) & 0xFFF));
          else
            v33 = (unsigned int *)(*v38 + 4 * (v32 - 4096) + 132);
          v34 = sub_1ACBF2790(a1, *v33);
          v35 = v32 - 4095;
          ++v32;
          if ((_DWORD)v34)
            v36 = 1;
          else
            v36 = v35 > v27;
        }
        while (!v36);
        v4 = v34;
        v31 = *(_DWORD *)(v11 + 88);
      }
      else
      {
        v4 = 0;
      }
      if (v27 != v31)
        sub_1ACBEB86C(v11);
    }
    else
    {
      v4 = 0;
    }
    v39 = sub_1ACBEE4FC(*(uint64_t **)(a1 + 336));
    if ((_DWORD)v4)
      v40 = 1;
    else
      v40 = v39 == 0;
    if (!v40)
    {
      do
      {
        v41 = *(_QWORD *)(v39 + 32);
        v42 = sub_1ACBF2790(a1, *(unsigned int *)(v39 + 48));
        v4 = v42;
        if (v41)
          v43 = (_DWORD)v42 == 0;
        else
          v43 = 0;
        v39 = v41;
      }
      while (v43);
    }
    return v4;
  }
  v13 = v8 - 1;
  v14 = v12 + 56 * v13;
  v17 = *(_DWORD *)(v14 + 24);
  v15 = (int *)(v14 + 24);
  v16 = v17;
  v18 = (_OWORD *)sub_1ACB5D828(512);
  if (!v18)
    return 7;
  v11 = (uint64_t)v18;
  a4 = 0.0;
  v18[30] = 0u;
  v18[31] = 0u;
  v19 = v12 + 56 * v13;
  v18[28] = 0u;
  v18[29] = 0u;
  v18[26] = 0u;
  v18[27] = 0u;
  v18[24] = 0u;
  v18[25] = 0u;
  v18[22] = 0u;
  v18[23] = 0u;
  v18[20] = 0u;
  v18[21] = 0u;
  v18[18] = 0u;
  v18[19] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  *v18 = 0u;
  v18[1] = 0u;
  *(_DWORD *)v18 = v16;
  v20 = *v15;
  v21 = (uint64_t *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 32) = v20;
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  if (*(_QWORD *)(a1 + 344))
  {
    v23 = 0;
    *v21 = 0;
    goto LABEL_65;
  }
  if (*(_QWORD *)(v12 + 56 * v13 + 8))
    v44 = *(_QWORD *)(v12 + 56 * v13 + 8);
  else
    v44 = v22;
  *v21 = *(_QWORD *)v19;
  while (*v21 < v44)
  {
    v45 = sub_1ACBB7B7C(a1, (_QWORD *)(a1 + 96), (unsigned int *)v11, 1, 1);
    if ((_DWORD)v45)
    {
      v4 = v45;
      goto LABEL_80;
    }
  }
  v23 = 0;
LABEL_65:
  while (*v21 < v22)
  {
    LODWORD(v56) = 0;
    *(float *)&a4 = sub_1ACBB7848(a1, 0, v22, &v56, &v57, a4);
    v4 = v46;
    LODWORD(v47) = v56;
    if ((_DWORD)v56)
    {
      if (!(_DWORD)v46)
        goto LABEL_68;
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 104) + *(unsigned int *)(a1 + 184);
      if (v50 == *(_QWORD *)(a1 + 96))
      {
        v47 = (v22 - v50) / (*(_QWORD *)(a1 + 200) + 8);
        if (!(_DWORD)v46)
        {
LABEL_68:
          if ((_DWORD)v47)
          {
            v48 = 1;
            while (*v21 < v22)
            {
              v4 = sub_1ACBB7B7C(a1, v21, (unsigned int *)v11, 1, 1);
              if (!(_DWORD)v4 && v48++ < v47)
                continue;
              goto LABEL_64;
            }
            v4 = 0;
          }
        }
      }
    }
LABEL_64:
    if ((_DWORD)v4)
      goto LABEL_79;
  }
  v4 = 0;
LABEL_79:
  if ((v23 & 1) == 0)
  {
LABEL_80:
    v51 = *(unsigned int *)(v19 + 28);
    v56 = (*(_QWORD *)(a1 + 200) + 4) * v51;
    v52 = *(_DWORD **)(a1 + 344);
    if (v52)
    {
      if (*(_DWORD *)(v19 + 48) == v52[34])
      {
        v53 = *(_DWORD *)(v19 + 36);
      }
      else
      {
        v53 = 0;
        *(_DWORD *)(v19 + 36) = 0;
        *(_DWORD *)(v19 + 48) = v52[34];
      }
      if (v53 < v52[22])
      {
        v52[22] = v53;
        v52[24] = *(_DWORD *)(v19 + 40);
        v52[25] = *(_DWORD *)(v19 + 44);
        sub_1ACBEB86C((uint64_t)v52);
        LODWORD(v51) = *(_DWORD *)(v19 + 28);
      }
      goto LABEL_88;
    }
    if (!(_DWORD)v4)
    {
LABEL_88:
      v54 = v51 - 1;
      while (++v54 < *(_DWORD *)(a1 + 60))
      {
        v55 = sub_1ACBB7B7C(a1, &v56, (unsigned int *)v11, 0, 1);
        if ((_DWORD)v55)
        {
          v4 = v55;
          goto LABEL_93;
        }
      }
      v4 = 0;
    }
  }
LABEL_93:
  sub_1ACBAF4D0(v11);
  if (!(_DWORD)v4)
    *v21 = v22;
  return v4;
}

uint64_t sub_1ACBF2790(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  v2 = a2;
  v4 = (*((uint64_t (**)(_QWORD, uint64_t, _QWORD))&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 72), a2, 0);
  if (!v4)
    goto LABEL_20;
  v5 = (uint64_t *)v4;
  v6 = *(_QWORD *)(a1 + 336);
  v7 = v5[1];
  if (*(_QWORD *)v7)
  {
    ++*(_QWORD *)(v6 + 24);
    v8 = *(_QWORD *)(v7 + 56) + 1;
    *(_QWORD *)(v7 + 56) = v8;
    if (v8 == 1)
      goto LABEL_4;
    goto LABEL_11;
  }
  v12 = sub_1ACBEC2A8(v6, v2, v5);
  if (v12)
  {
    v7 = v12;
    if (*(_QWORD *)(v12 + 56) == 1)
    {
LABEL_4:
      v9 = *(_QWORD *)(v7 + 24);
      if ((*(_WORD *)(v7 + 52) & 2) == 0)
      {
LABEL_19:
        --*(_QWORD *)(v9 + 24);
        xmmword_1ECD3B228(*(_QWORD *)(v9 + 72), *(_QWORD *)v7, 1);
        goto LABEL_20;
      }
      v10 = *(_QWORD *)(v7 + 72);
      if (*(_QWORD *)(v9 + 16) == v7)
      {
        *(_QWORD *)(v9 + 16) = v10;
        v11 = *(_QWORD *)(v7 + 64);
        if (v11)
        {
LABEL_7:
          *(_QWORD *)(v11 + 72) = v10;
          v10 = *(_QWORD *)(v7 + 72);
          if (!v10)
          {
            *(_QWORD *)v9 = v11;
            goto LABEL_19;
          }
LABEL_18:
          *(_QWORD *)(v10 + 64) = v11;
          goto LABEL_19;
        }
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 64);
        if (v11)
          goto LABEL_7;
      }
      *(_QWORD *)(v9 + 8) = v10;
      if (!v10)
      {
        *(_QWORD *)v9 = 0;
        *(_BYTE *)(v9 + 49) = 2;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_11:
    v13 = sub_1ACB6DCA8(v7);
    if ((_DWORD)v13)
    {
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0)
      {
LABEL_13:
        sub_1ACBE906C(v7);
        goto LABEL_21;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(a1 + 280))(v7);
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0)
        goto LABEL_13;
    }
    v14 = *(_QWORD *)(v7 + 40);
    --*(_DWORD *)(v14 + 152);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v14 + 168);
    *(_QWORD *)(v14 + 168) = v7;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v14 + 72) + 144))(*(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 200) * (*(_DWORD *)(v7 + 48) - 1), *(_QWORD *)(v7 + 8));
    goto LABEL_21;
  }
LABEL_20:
  v13 = 0;
LABEL_21:
  for (i = *(_QWORD *)(a1 + 112); i; i = *(_QWORD *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return v13;
}

uint64_t sub_1ACBF2944(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v5, 4, a2);
  if (!(_DWORD)result)
    *a3 = bswap32(v5);
  return result;
}

uint64_t sub_1ACBF2990(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (a2 != 3082 && !*(_BYTE *)(a1 + 103))
    return *(_DWORD *)(a1 + 88) & a2;
  if (*(_BYTE *)(a1 + 103))
  {
    v3 = *(_DWORD *)(a1 + 220);
    if (!v3)
    {
      *(_BYTE *)(a1 + 103) = 0;
      *(_DWORD *)(a1 + 424) = 0;
      v4 = *(_DWORD *)(a1 + 432) - 1;
      *(_DWORD *)(a1 + 432) = v4;
      if (!v4)
        LOWORD(v3) = *(_WORD *)(a1 + 438);
      *(_WORD *)(a1 + 436) = v3;
    }
  }
  v2 = 7;
  *(_DWORD *)(a1 + 80) = 7;
  sub_1ACBE938C(a1, 7);
  return v2;
}

void sub_1ACBF2A04(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)a1);
  if (*(_DWORD *)(a1 + 32))
  {
    sub_1ACBE0F9C(*(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 40));
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_1ACBF2A54(int *a1)
{
  int v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;

  v2 = *((__int16 *)a1 + 10);
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)a1;
  v12 = 0u;
  v13 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  WORD2(v8) = 1;
  *((_QWORD *)&v8 + 1) = *((_QWORD *)a1 + 3);
  v11[1] = v3;
  v11[2] = a1;
  v11[0] = &v7;
  LOBYTE(v13) = *(_BYTE *)(*((_QWORD *)&v8 + 1) + 100);
  (*(void (**)(_QWORD *))(v3 + 32))(v11);
  if (a1[8] >= 1)
    sub_1ACBE0F9C(*((_QWORD **)a1 + 3), *((_QWORD **)a1 + 5));
  v4 = v8;
  *(_OWORD *)a1 = v7;
  *((_OWORD *)a1 + 1) = v4;
  v5 = v10;
  *((_OWORD *)a1 + 2) = v9;
  *((_OWORD *)a1 + 3) = v5;
  if ((a1[5] & 0x1000) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)a1 + 6);
    if (*((_BYTE *)a1 + 56))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(*((_QWORD *)a1 + 6), *((_QWORD *)a1 + 1));
      _Block_release(*((const void **)a1 + 6));
      *((_QWORD *)a1 + 6) = 0;
    }
    else
    {
      ((void (*)(_QWORD))v6)(*((_QWORD *)a1 + 1));
    }
  }
LABEL_10:
  *((_WORD *)a1 + 10) = 1;
}

uint64_t sub_1ACBF2B3C(uint64_t a1, int a2)
{
  uint64_t result;

  result = sub_1ACBF2B64((int *)a1, a2);
  if (result)
    return *(unsigned int *)(a1 + 16);
  return result;
}

uint64_t sub_1ACBF2B64(int *a1, int a2)
{
  __int16 v4;
  int v5;
  signed int v6;
  int v7;
  int v8;
  signed int v9;
  void *v10;

  v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) != 0)
  {
    if ((a1[5] & 0x400) == 0)
      goto LABEL_9;
    v5 = a1[4];
    v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0)
        goto LABEL_9;
      v6 = 1;
    }
    if (sub_1ACB7E454((uint64_t)a1, v6, 1))
      return 0;
    bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    v4 = a1[5] & 0xF9FF;
LABEL_9:
    *((_WORD *)a1 + 10) = v4 | 2;
    if ((a2 & 0xFFFFFFF7) != *((unsigned __int8 *)a1 + 22))
      sub_1ACBB0FEC(a1, a2 & 0xF7);
    if ((a2 & 8) == 0)
    {
      v7 = *((unsigned __int16 *)a1 + 10);
      goto LABEL_30;
    }
    v7 = *((unsigned __int16 *)a1 + 10);
    if ((a1[2] & 1) == 0)
    {
LABEL_30:
      if ((v7 & 0x2020202) == 2)
        sub_1ACBF2D6C((uint64_t)a1);
      goto LABEL_36;
    }
    if ((v7 & 0x12) == 0)
    {
LABEL_29:
      v7 &= 0xBFFFu;
      *((_WORD *)a1 + 10) = v7;
      goto LABEL_30;
    }
    if ((v7 & 0x400) != 0)
    {
      v8 = a1[4];
      v9 = *a1 + v8;
      if (!((v9 < 0) ^ __OFADD__(*a1, v8) | (v9 == 0)))
        goto LABEL_23;
      if ((v7 & 0x10) != 0)
      {
        v9 = 1;
LABEL_23:
        if (sub_1ACB7E454((uint64_t)a1, v9, 1))
          return 0;
        bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
        a1[4] += *a1;
        LOWORD(v7) = a1[5] & 0xF9FF;
        *((_WORD *)a1 + 10) = v7;
      }
    }
    if (!a1[8] || *((_QWORD *)a1 + 1) != *((_QWORD *)a1 + 5))
    {
      if (sub_1ACBF2D6C((uint64_t)a1))
        return 0;
      LOWORD(v7) = *((_WORD *)a1 + 10);
    }
    goto LABEL_29;
  }
  if (a1[8] >= 32)
  {
    v10 = (void *)*((_QWORD *)a1 + 5);
    *((_QWORD *)a1 + 1) = v10;
    *((_WORD *)a1 + 10) = v4 & 0x2D;
  }
  else
  {
    if (sub_1ACB7E454((uint64_t)a1, 32, 0))
    {
      *((_BYTE *)a1 + 22) = 0;
      goto LABEL_36;
    }
    v10 = (void *)*((_QWORD *)a1 + 1);
  }
  sub_1ACBF2E10(v10, (uint64_t)a1);
  *((_BYTE *)a1 + 22) = 1;
  *((_WORD *)a1 + 10) |= 0x202u;
  if (a2 != 1)
    sub_1ACBB0FEC(a1, a2);
LABEL_36:
  if (*((unsigned __int8 *)a1 + 22) == (a2 & 0xFFFFFFF7))
    return *((_QWORD *)a1 + 1);
  return 0;
}

uint64_t sub_1ACBF2D6C(uint64_t a1)
{
  uint64_t result;

  result = sub_1ACB7E454(a1, *(_DWORD *)(a1 + 16) + 3, 1);
  if ((_DWORD)result)
    return 7;
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 16)) = 0;
  *(_BYTE *)(*(int *)(a1 + 16) + *(_QWORD *)(a1 + 8) + 1) = 0;
  *(_BYTE *)(*(int *)(a1 + 16) + *(_QWORD *)(a1 + 8) + 2) = 0;
  *(_WORD *)(a1 + 20) |= 0x200u;
  return result;
}

uint64_t sub_1ACBF2DDC(uint64_t a1, signed int a2)
{
  if (*(_DWORD *)(a1 + 32) < a2)
    return sub_1ACB7E454(a1, a2, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
  *(_WORD *)(a1 + 20) &= 0x2Du;
  return 0;
}

void sub_1ACBF2E10(void *__dst, uint64_t a2)
{
  __int16 v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_WORD *)(a2 + 20);
  if ((v4 & 4) != 0)
  {
    v6 = *(_QWORD *)a2;
    if (*(uint64_t *)a2 >= 0)
      v7 = *(_QWORD *)a2;
    else
      v7 = -v6;
    LOWORD(v15) = (v7 % 0xA) | 0x30;
    if (v7 >= 0xA)
    {
      v11 = 19;
      do
      {
        *((_BYTE *)v13 + v11--) = (v7 / 0xA - 10 * ((v7 / 0xA * (unsigned __int128)0x199999999999999AuLL) >> 64)) | 0x30;
        v12 = v7 > 0x63;
        v7 /= 0xAuLL;
      }
      while (v12);
      v8 = v11 + 1;
      if ((v6 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v8 = 20;
      if ((v6 & 0x8000000000000000) == 0)
      {
LABEL_9:
        v9 = v8;
LABEL_16:
        memcpy(__dst, (char *)v13 + v9, 22 - v9);
        v10 = 21 - v8;
        goto LABEL_17;
      }
    }
    v9 = v8 - 1;
    *((_BYTE *)v13 + v9) = 45;
    --v8;
    goto LABEL_16;
  }
  v17 = 0;
  v13[0] = 0;
  v13[1] = __dst;
  v14 = 32;
  v15 = 0;
  v16 = 0;
  if ((v4 & 0x20) != 0)
    v5 = (double)*(uint64_t *)a2;
  else
    v5 = *(double *)a2;
  sqlite3_str_appendf((sqlite3_str *)v13, "%!.15g", *(_QWORD *)&v5);
  v10 = HIDWORD(v15);
  *((_BYTE *)__dst + HIDWORD(v15)) = 0;
LABEL_17:
  *(_DWORD *)(a2 + 16) = v10;
}

double sub_1ACBF2F88(uint64_t a1)
{
  double v2;

  v2 = 0.0;
  sub_1ACBA6B1C(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_1ACBF2FC0(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  sub_1ACBF2FF8(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_1ACBF2FF8(unsigned __int8 *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t result;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  char v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unsigned int v31;

  if (a4 == 1)
  {
    result = 0;
    v6 = 1;
    v7 = a1;
  }
  else
  {
    LODWORD(v8) = 3 - a4;
    if (3 - a4 >= (int)(a3 & 0xFFFFFFFE))
    {
      result = 0;
    }
    else
    {
      v8 = (int)v8;
      while (!a1[v8])
      {
        v8 += 2;
        if (v8 >= (int)(a3 & 0xFFFFFFFE))
        {
          result = 0;
          goto LABEL_10;
        }
      }
      result = 1;
    }
LABEL_10:
    a3 = v8 ^ 1;
    v7 = &a1[a4 & 1];
    v6 = 2;
  }
  v9 = &a1[a3];
  if (v7 >= v9)
  {
LABEL_14:
    v11 = 1;
  }
  else
  {
    while (1)
    {
      v10 = *v7;
      if ((byte_1ACCB6548[v10] & 1) == 0)
        break;
      v7 += v6;
      if (v7 >= v9)
        goto LABEL_14;
    }
    v12 = &v7[v6];
    if ((_DWORD)v10 == 45)
    {
      v7 += v6;
      v13 = 0;
    }
    else
    {
      v13 = 1;
    }
    if ((_DWORD)v10 == 43)
    {
      v7 = v12;
      v11 = 1;
    }
    else
    {
      v11 = v13;
    }
  }
  v14 = v7;
  if (v7 < v9)
  {
    v14 = v7;
    do
    {
      if (*v14 != 48)
        break;
      v14 += v6;
    }
    while (v14 < v9);
  }
  if (v14 >= v9)
  {
    LODWORD(v15) = 0;
    v16 = 0;
    v18 = 1;
    goto LABEL_35;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = v14[v15];
    v18 = (v17 - 48) < 0xA;
    if ((v17 - 48) > 9)
      break;
    v16 = v17 + 10 * v16 - 48;
    v15 += v6;
  }
  while (&v14[v15] < v9);
  if ((v16 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if (!v11)
      v16 = -v16;
    *a2 = v16;
    if ((_DWORD)v15)
      goto LABEL_40;
    goto LABEL_38;
  }
  v19 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v11)
    v19 = 0x8000000000000000;
  *a2 = v19;
  if ((_DWORD)v15)
    goto LABEL_40;
LABEL_38:
  if (v7 == v14)
  {
    result = 0xFFFFFFFFLL;
    goto LABEL_49;
  }
LABEL_40:
  if ((_DWORD)result)
    v20 = 1;
  else
    v20 = v18;
  if ((v20 & 1) == 0)
  {
    v21 = &v14[v15];
    while ((byte_1ACCB6548[*v21] & 1) != 0)
    {
      v21 += v6;
      if (v21 >= v9)
      {
        result = 0;
        goto LABEL_49;
      }
    }
    result = 1;
  }
LABEL_49:
  if (v15 < 19 * v6)
    return result;
  if (v15 > 19 * v6)
  {
    v29 = v11 == 0;
    v22 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29)
      v22 = 0x8000000000000000;
    *a2 = v22;
    return 2;
  }
  else
  {
    v23 = 0;
    v24 = v14;
    do
    {
      v25 = *v24;
      v26 = a92233720368547[v23];
      if (v23 > 0x10)
        break;
      ++v23;
      v24 += v6;
    }
    while (v25 == v26);
    v27 = (char)v25 - (char)v26;
    if ((char)v25 == (char)v26)
    {
      v28 = (char)v14[18 * v6] - 56;
      if (v28 < 0)
        return result;
    }
    else
    {
      v28 = 10 * v27;
      if (10 * v27 < 0)
        return result;
    }
    v29 = v11 == 0;
    v30 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29)
      v30 = 0x8000000000000000;
    *a2 = v30;
    if (v29)
      v31 = result;
    else
      v31 = 3;
    if (v28)
      return 2;
    else
      return v31;
  }
}

void sub_1ACBF327C(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)a1);
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 20) = 4;
}

uint64_t sub_1ACBF32C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, _QWORD *a6)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  int v35;
  uint64_t *v36;
  unsigned int v37;
  _QWORD *v38;
  int *v39;
  int *v40;
  uint64_t v41;

  v8 = *(_DWORD *)(a1 + 144);
  if (!a2 || (*(_WORD *)(a2 + 20) & 0x10) == 0)
  {
    LODWORD(v9) = 0;
    v10 = 0;
    goto LABEL_4;
  }
  v30 = *(_DWORD *)(a2 + 16);
  v9 = (v30 >> 3);
  v10 = *(_QWORD **)(a2 + 8);
  if (v30 >= 8)
  {
    if (v30 < 0x10)
    {
      v31 = 0;
      do
LABEL_43:
        v8 += *(_DWORD *)(v10[v31++] + 8);
      while (v9 != v31);
      goto LABEL_4;
    }
    v32 = 0;
    v33 = 0;
    v31 = v9 & 0xFFFFFFFE;
    do
    {
      v34 = &v10[v32];
      v8 += *(_DWORD *)(*v34 + 8);
      v33 += *(_DWORD *)(v34[1] + 8);
      v32 += 2;
    }
    while (v31 != v32);
    v8 += v33;
    if (v31 != v9)
      goto LABEL_43;
  }
LABEL_4:
  v11 = *a4;
  v12 = *a4 + 1;
  if (*a4 < v8)
  {
    v13 = (uint64_t *)(a1 + 136);
    v35 = *a4 + 1;
    v39 = a5;
    v40 = a4;
    v38 = a6;
    v37 = a3;
    v36 = (uint64_t *)(a1 + 136);
    while (1)
    {
      v14 = v11;
      v11 = v12;
      v15 = *(_DWORD *)(a1 + 144);
      v16 = v14;
      v17 = v13;
      v18 = __OFSUB__(v14, v15);
      v19 = v14 - v15;
      if (v19 < 0 == v18)
      {
        v17 = (uint64_t *)*v10;
        v20 = *(_DWORD *)(*v10 + 8);
        if (v19 >= v20)
        {
          v21 = v10 + 1;
          do
          {
            v19 -= v20;
            v22 = *v21++;
            v17 = (uint64_t *)v22;
            v20 = *(_DWORD *)(v22 + 8);
          }
          while (v19 >= v20);
        }
        v16 = v19;
      }
      v23 = *v17;
      if (a2 && *(unsigned __int8 *)(v23 + 40 * v16 + 1) == 252)
      {
        if ((int)v9 < 1)
        {
          LODWORD(v24) = 0;
        }
        else
        {
          v24 = 0;
          while (v10[v24] != *(_QWORD *)(v23 + 40 * v16 + 16))
          {
            if (v9 == ++v24)
              goto LABEL_22;
          }
        }
        if ((_DWORD)v24 == (_DWORD)v9)
        {
LABEL_22:
          v41 = *v17;
          v25 = sub_1ACB7E454(a2, 8 * ((int)v9 + 1), v9 != 0);
          *(_DWORD *)(a1 + 52) = v25;
          if (v25)
          {
            a3 = 1;
            a6 = v38;
            a5 = v39;
            a4 = v40;
            v23 = v41;
            goto LABEL_36;
          }
          v10 = *(_QWORD **)(a2 + 8);
          a4 = v40;
          v23 = v41;
          v26 = v41 + 40 * v16;
          v10[(int)v9] = *(_QWORD *)(v26 + 16);
          *(_WORD *)(a2 + 20) = *(_WORD *)(a2 + 20) & 0xF240 | 0x10;
          *(_DWORD *)(a2 + 16) = 8 * (v9 + 1);
          v8 += *(_DWORD *)(*(_QWORD *)(v26 + 16) + 8);
          LODWORD(v9) = v9 + 1;
          a6 = v38;
          a5 = v39;
          a3 = v37;
          v13 = v36;
        }
      }
      if ((_DWORD)a3 == 2)
      {
        v28 = *(unsigned __int8 *)(v23 + 40 * v16);
        if (v28 == 113)
        {
          if ((*(_WORD *)(v23 + 40 * v16 + 2) & 0x10) == 0)
            goto LABEL_33;
        }
        else if (v28 == 101 || v28 == 112)
        {
LABEL_33:
          a3 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        if (!(_DWORD)a3)
        {
          v11 = v35;
          goto LABEL_36;
        }
        v27 = *(unsigned __int8 *)(v23 + 40 * v16);
        if (v27 == 185 || v14 >= 1 && v27 == 8)
          goto LABEL_33;
      }
      v12 = v11 + 1;
      if (v11 >= v8)
        goto LABEL_35;
    }
  }
  v23 = 0;
LABEL_35:
  v16 = v11;
  *(_DWORD *)(a1 + 52) = 0;
  a3 = 101;
  v11 = v12;
LABEL_36:
  *a4 = v11;
  *a5 = v16;
  *a6 = v23;
  return a3;
}

void *sub_1ACBF359C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char **v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v28;
  uint64_t i;
  char v30;
  __int128 v32;
  __int128 v33;

  v8 = a1;
  v32 = 0u;
  v33 = 0u;
  DWORD1(v33) = 2147483645;
  BYTE12(v33) = 0;
  v9 = "program";
  switch(*(_BYTE *)(a2 + 1))
  {
    case 0xF1:
    case 0xF9:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%s(%d)");
      goto LABEL_52;
    case 0xF2:
      v10 = *(unsigned int **)(a2 + 16);
      v11 = *v10;
      if (!*v10)
        goto LABEL_41;
      v12 = 1;
      do
      {
        if (v12 == 1)
          v13 = 91;
        else
          v13 = 44;
        sqlite3_str_appendf((sqlite3_str *)&v32, "%c%u", v13, v10[v12++]);
      }
      while (v12 <= v11);
      v14 = DWORD2(v33);
      if (DWORD2(v33) + 1 >= v33)
      {
LABEL_41:
        v25 = "]";
        LODWORD(a3) = 1;
        goto LABEL_51;
      }
      ++DWORD2(v33);
      *(_BYTE *)(*((_QWORD *)&v32 + 1) + v14) = 93;
      goto LABEL_52;
    case 0xF3:
      goto LABEL_14;
    case 0xF4:
      goto LABEL_10;
    case 0xF5:
      sqlite3_str_appendf((sqlite3_str *)&v32, "vtab:%p");
      goto LABEL_52;
    case 0xF6:
      v15 = *(_QWORD *)(a2 + 16);
      v16 = *(_WORD *)(v15 + 20);
      if ((v16 & 2) != 0)
      {
        v9 = *(const char **)(v15 + 8);
        if (!v9)
          goto LABEL_52;
      }
      else
      {
        if ((v16 & 0x24) != 0)
        {
LABEL_14:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%lld");
          goto LABEL_52;
        }
        if ((v16 & 8) != 0)
        {
LABEL_10:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%.16g");
          goto LABEL_52;
        }
        if ((v16 & 1) != 0)
          v9 = "NULL";
        else
          v9 = "(blob)";
      }
LABEL_49:
      v26 = strlen(v9);
      a3 = v26 & 0x3FFFFFFF;
      if ((v26 & 0x3FFFFFFF) != 0)
      {
        v25 = v9;
LABEL_51:
        sub_1ACBC290C((uint64_t)&v32, v25, a3);
      }
LABEL_52:
      if ((BYTE12(v33) & 7) != 0 && !*(_BYTE *)(v8 + 103) && !*(_BYTE *)(v8 + 104))
      {
        *(_BYTE *)(v8 + 103) = 1;
        if (*(int *)(v8 + 220) >= 1)
          *(_DWORD *)(v8 + 424) = 1;
        ++*(_DWORD *)(v8 + 432);
        *(_WORD *)(v8 + 436) = 0;
        v28 = *(_QWORD *)(v8 + 344);
        if (v28)
        {
          sub_1ACBCB308(v28, "out of memory", a3, a4, a5, a6, a7, a8, v30);
          for (i = *(_QWORD *)(v8 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            i = *(_QWORD *)(i + 256);
            if (!i)
              break;
          }
        }
      }
      if (*((_QWORD *)&v32 + 1)
        && (*(_BYTE *)(*((_QWORD *)&v32 + 1) + DWORD2(v33)) = 0, DWORD1(v33))
        && (BYTE13(v33) & 4) == 0)
      {
        return sub_1ACBE13A0((uint64_t *)&v32);
      }
      else
      {
        return (void *)*((_QWORD *)&v32 + 1);
      }
    case 0xF8:
      v17 = *(_QWORD *)(a2 + 16);
      sqlite3_str_appendf((sqlite3_str *)&v32, "k(%d", *(unsigned __int16 *)(v17 + 6));
      if (*(_WORD *)(v17 + 6))
      {
        v18 = 0;
        do
        {
          v23 = *(const char ***)(v17 + 32 + 8 * v18);
          if (v23)
            v19 = *v23;
          else
            v19 = &byte_1ACCBEAEE;
          if (!strcmp(v19, "BINARY"))
            v20 = "B";
          else
            v20 = v19;
          if ((*(_BYTE *)(*(_QWORD *)(v17 + 24) + v18) & 1) != 0)
            v21 = "-";
          else
            v21 = &byte_1ACCBEAEE;
          if ((*(_BYTE *)(*(_QWORD *)(v17 + 24) + v18) & 2) != 0)
            v22 = "N.";
          else
            v22 = &byte_1ACCBEAEE;
          sqlite3_str_appendf((sqlite3_str *)&v32, ",%s%s%s", v21, v22, v20);
          ++v18;
        }
        while (v18 < *(unsigned __int16 *)(v17 + 6));
      }
      v24 = DWORD2(v33);
      if (DWORD2(v33) + 1 >= v33)
      {
        sub_1ACBC290C((uint64_t)&v32, ")", 1u);
      }
      else
      {
        ++DWORD2(v33);
        *(_BYTE *)(*((_QWORD *)&v32 + 1) + v24) = 41;
      }
      v8 = a1;
      goto LABEL_52;
    case 0xFB:
      v9 = **(const char ***)(a2 + 16);
      if (!v9)
        goto LABEL_52;
      goto LABEL_49;
    case 0xFC:
      goto LABEL_49;
    case 0xFD:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%d");
      goto LABEL_52;
    case 0xFE:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%.18s-%s");
      goto LABEL_52;
    default:
      v9 = *(const char **)(a2 + 16);
      if (!v9)
        goto LABEL_52;
      goto LABEL_49;
  }
}

uint64_t sub_1ACBF39A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if (a2 != 0x8000000000000000)
  {
    if (a2 <= 0)
    {
      if (v2 >= 1 && (v2 ^ 0x7FFFFFFFFFFFFFFFuLL) < -a2)
        return 1;
    }
    else if (v2 < 0 && (uint64_t)(0x8000000000000001 - v2) > 1 - a2)
    {
      return 1;
    }
    v3 = v2 - a2;
    goto LABEL_14;
  }
  if (v2 < 0)
  {
    v3 = v2 ^ 0x8000000000000000;
LABEL_14:
    *a1 = v3;
    return 0;
  }
  return 1;
}

uint64_t sub_1ACBF3A1C(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a1;
  if ((uint64_t)a2 >= 1)
  {
    if (v2 > (uint64_t)(0x7FFFFFFFFFFFFFFFLL / a2))
      return 1;
    if (v2 < -(uint64_t)(0x8000000000000000 / a2))
      return 1;
    goto LABEL_11;
  }
  if ((a2 & 0x8000000000000000) == 0)
    goto LABEL_11;
  if (v2 >= 1)
  {
    if (-(uint64_t)(0x8000000000000000 / v2) > a2)
      return 1;
    goto LABEL_11;
  }
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_11;
  v4 = 1;
  if (a2 == 0x8000000000000000 || v2 == 0x8000000000000000)
    return v4;
  if (0x7FFFFFFFFFFFFFFFuLL / -(uint64_t)a2 >= -v2)
  {
LABEL_11:
    v4 = 0;
    *a1 = v2 * a2;
    return v4;
  }
  return 1;
}

uint64_t sub_1ACBF3AD4(uint64_t a1)
{
  __int16 v2;
  uint64_t result;
  uint64_t v4;

  if (!a1)
  {
    sub_1ACBBE20C(89699);
LABEL_5:
    result = 0;
    goto LABEL_15;
  }
  v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    result = *(_QWORD *)a1;
    goto LABEL_15;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x12) != 0 && *(_QWORD *)(a1 + 8))
    {
      result = sub_1ACBF2FC0(a1);
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  v4 = 0x7FFFFFFFFFFFFFFFLL;
  if (*(double *)a1 <= 9.22337204e18)
    v4 = (uint64_t)*(double *)a1;
  if (*(double *)a1 >= -9.22337204e18)
    result = v4;
  else
    result = 0x8000000000000000;
LABEL_15:
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 4;
  return result;
}

uint64_t sub_1ACBF3B8C(uint64_t a1, int a2, int a3)
{
  __int16 v3;
  __int16 v6;
  uint64_t result;
  __int16 v8;
  __int16 v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  void (__cdecl *v14)(void *);
  unsigned int v15;

  v3 = *(_WORD *)(a1 + 20);
  if ((v3 & 1) != 0)
    return 0;
  switch(a2)
  {
    case 'A':
      if ((v3 & 0x10) != 0)
      {
        result = 0;
        *(_WORD *)(a1 + 20) = v3 & 0xF250;
      }
      else
      {
        sub_1ACB9A00C(a1, 66, a3);
        v6 = *(_WORD *)(a1 + 20);
        if ((v6 & 2) == 0)
          return 0;
        result = 0;
        *(_WORD *)(a1 + 20) = v6 & 0xF240 | 0x10;
      }
      return result;
    case 'C':
      sub_1ACBF7B2C(a1);
      return 0;
    case 'D':
      if ((v3 & 0x24) != 0)
      {
        v10 = *(double *)a1;
      }
      else if ((v3 & 8) != 0)
      {
        v10 = -0.0;
        v13 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(double *)a1 <= 9.22337204e18)
          v13 = (uint64_t)*(double *)a1;
        if (*(double *)a1 >= -9.22337204e18)
          v10 = *(double *)&v13;
      }
      else if ((v3 & 0x12) != 0)
      {
        v10 = *(double *)(a1 + 8);
        if (v10 != 0.0)
        {
          v10 = COERCE_DOUBLE(sub_1ACBF2FC0(a1));
          v3 = *(_WORD *)(a1 + 20);
        }
      }
      else
      {
        v10 = 0.0;
      }
      result = 0;
      *(double *)a1 = v10;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 4;
      return result;
    case 'E':
      if ((v3 & 8) != 0)
      {
        v11 = *(double *)a1;
      }
      else if ((v3 & 0x24) != 0)
      {
        v11 = (double)*(uint64_t *)a1;
      }
      else if ((v3 & 0x12) != 0)
      {
        v11 = sub_1ACBF2F88(a1);
        v3 = *(_WORD *)(a1 + 20);
      }
      else
      {
        v11 = 0.0;
      }
      result = 0;
      *(double *)a1 = v11;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 8;
      return result;
    default:
      *(_WORD *)(a1 + 20) |= (*(_WORD *)(a1 + 20) >> 3) & 2;
      sub_1ACB9A00C(a1, 66, a3);
      v8 = *(_WORD *)(a1 + 20);
      v9 = v8 & 0xFBC3;
      *(_WORD *)(a1 + 20) = v8 & 0xFBC3;
      if (a3 != 1)
        *(_DWORD *)(a1 + 16) &= ~1u;
      if ((v8 & 2) != 0)
      {
        if (*(unsigned __int8 *)(a1 + 22) != a3)
        {
          result = sub_1ACBB0FEC((int *)a1, a3);
          if ((_DWORD)result)
            return result;
          v9 = *(_WORD *)(a1 + 20);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 22) = a3;
      }
      if ((v9 & 0x6202) != 2 || *(_BYTE *)(a1 + 22) != 1)
        return 0;
      result = *(_QWORD *)(a1 + 8);
      if (!result)
        return result;
      if ((v9 & 0x1000) == 0)
      {
        v12 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 32) <= v12)
          return 0;
        goto LABEL_49;
      }
      v14 = *(void (__cdecl **)(void *))(a1 + 48);
      if (v14 == sqlite3_free)
      {
        v15 = off_1ECD3B178(result);
        v12 = *(_DWORD *)(a1 + 16);
        if (v15 >= v12 + 1)
        {
          result = *(_QWORD *)(a1 + 8);
LABEL_49:
          *(_BYTE *)(result + v12) = 0;
          goto LABEL_50;
        }
        v14 = *(void (__cdecl **)(void *))(a1 + 48);
      }
      if ((char *)v14 != (char *)sub_1ACBF1160)
        return 0;
LABEL_50:
      result = 0;
      *(_WORD *)(a1 + 20) |= 0x200u;
      break;
  }
  return result;
}

BOOL sub_1ACBF3E30(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  BOOL v3;
  double v4;

  v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    v3 = *(_QWORD *)a1 == 0;
  }
  else
  {
    if ((v2 & 1) != 0)
      return a2;
    if ((v2 & 8) != 0)
    {
      v4 = *(double *)a1;
    }
    else if ((v2 & 0x12) != 0)
    {
      v4 = sub_1ACBF2F88(a1);
    }
    else
    {
      v4 = 0.0;
    }
    v3 = v4 == 0.0;
  }
  return !v3;
}

uint64_t sub_1ACBF3E90(uint64_t a1)
{
  uint64_t result;
  int v3;

  v3 = 0;
  result = sub_1ACBF4EEC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), 0, &v3);
  if (!(_DWORD)result)
  {
    if (v3)
    {
      return sub_1ACBEB08C(94924);
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1 + 3) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACBF3F00(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a1 + 40);
  v3 = *v2;
  if (v3 >= 3)
  {
    v4 = sub_1ACBF7EA8(*(_QWORD *)(a1 + 40));
    if ((_DWORD)v4)
    {
      *(_DWORD *)(a1 + 24) = 0;
LABEL_6:
      *(_BYTE *)(a1 + 2) = 1;
      return v4;
    }
    v3 = *v2;
  }
  v4 = 0;
  v5 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (v3)
    goto LABEL_6;
  return v5;
}

uint64_t sub_1ACBF3F64(char *a1, int *a2)
{
  int v3;
  int v4;
  uint64_t result;
  int v6;
  int v7;
  unint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (a1[1] < 0)
  {
    v6 = a1[2];
    if (v6 < 0)
    {
      v8 = 0;
      result = sub_1ACB8A6CC(a1, &v8);
      if (HIDWORD(v8))
        v7 = -1;
      else
        v7 = v8;
      *a2 = v7;
    }
    else
    {
      *a2 = v6 & 0x7F | (v3 << 14) & 0x1FC07F | ((v4 & 0x7F) << 7);
      return 3;
    }
  }
  else
  {
    *a2 = ((v3 & 0x7F) << 7) | v4;
    return 2;
  }
  return result;
}

uint64_t sub_1ACBF3FF4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  v3 = *(unsigned __int16 *)(a1 + 68);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 88) - v4;
  if (v3 > v5)
    v3 = v5 & ~(v5 >> 31);
  *(_QWORD *)(a3 + 8) = v4;
  if (v3 < a2)
    return sub_1ACB934EC(a1, 0, a2, a3);
  *(_WORD *)(a3 + 20) = 16400;
  *(_DWORD *)(a3 + 16) = a2;
  return 0;
}

uint64_t sub_1ACBF4044(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  _OWORD *v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t (**v25)(char *);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;

  v14 = *(_QWORD *)(a7 + 24);
  if (a3 < 0x80)
    v15 = byte_1ACCB6D60[a3];
  else
    v15 = (a3 - 12) >> 1;
  if ((signed int)v15 > *(_DWORD *)(v14 + 136))
    return 18;
  v17 = *(unsigned __int8 *)(a7 + 22);
  if (v15 >= 0xFA1 && !*(_QWORD *)(a1 + 48))
  {
    if ((*(_BYTE *)(a1 + 5) & 0x10) != 0)
    {
      v29 = *(unsigned __int8 *)(a7 + 22);
      v19 = *(_OWORD **)(a1 + 104);
      v20 = *(char **)v19;
      if (!*(_QWORD *)v19)
        goto LABEL_32;
    }
    else
    {
      v18 = (_OWORD *)sub_1ACBE1124(v14, 0x20uLL);
      if (!v18)
      {
        *(_QWORD *)(a1 + 104) = 0;
        return 7;
      }
      v19 = v18;
      v29 = v17;
      *v18 = 0u;
      v18[1] = 0u;
      *(_QWORD *)(a1 + 104) = v18;
      *(_BYTE *)(a1 + 5) |= 0x10u;
      v20 = *(char **)v18;
      if (!*(_QWORD *)v18)
        goto LABEL_32;
    }
    if (*((_DWORD *)v19 + 4) != a2 || *((_DWORD *)v19 + 5) != a5 || *((_DWORD *)v19 + 6) != a6)
      goto LABEL_24;
    v28 = *((_QWORD *)v19 + 1);
    v21 = sub_1ACBF7FF0(*(_QWORD **)(a1 + 40));
    v20 = *(char **)v19;
    if (v28 == v21)
      goto LABEL_37;
    if (v20)
    {
LABEL_24:
      v24 = *((_QWORD *)v20 - 1);
      v23 = v20 - 8;
      v22 = v24;
      if (v24 < 2)
      {
        v25 = (uint64_t (**)(char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v23);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v23);
          v23 = (char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_32;
          v25 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
        }
        (*v25)(v23);
      }
      else
      {
        *(_QWORD *)v23 = v22 - 1;
      }
    }
LABEL_32:
    if (!sqlite3_initialize())
    {
      v26 = sub_1ACB5D828(v15 + 12);
      if (v26)
      {
        *(_QWORD *)v26 = 1;
        v20 = (char *)(v26 + 8);
        *(_QWORD *)v19 = v26 + 8;
        result = sub_1ACBAE978(*(_QWORD *)(a1 + 40), a4, v15, (char *)(v26 + 8), 0);
        if ((_DWORD)result)
          return result;
        v27 = &v20[v15];
        *(_WORD *)v27 = 0;
        v27[2] = 0;
        *((_DWORD *)v19 + 4) = a2;
        *((_DWORD *)v19 + 5) = a5;
        *((_DWORD *)v19 + 6) = a6;
        *((_QWORD *)v19 + 1) = sub_1ACBF7FF0(*(_QWORD **)(a1 + 40));
LABEL_37:
        ++*((_QWORD *)v20 - 1);
        if ((a3 & 1) == 0)
        {
          result = sub_1ACB57870(a7, v20, v15, 0, sub_1ACBF1160);
          goto LABEL_13;
        }
        result = sub_1ACB57870(a7, v20, v15, v29, sub_1ACBF1160);
LABEL_12:
        *(_WORD *)(a7 + 20) |= 0x200u;
LABEL_13:
        *(_WORD *)(a7 + 20) &= ~0x4000u;
        return result;
      }
    }
    *(_QWORD *)v19 = 0;
    return 7;
  }
  result = sub_1ACB934EC(*(_QWORD *)(a1 + 40), a4, v15, a7);
  if (!(_DWORD)result)
  {
    sub_1ACB8A864(*(char **)(a7 + 8), a3, a7);
    result = 0;
    if ((a3 & 1) == 0 || v17 != 1)
      goto LABEL_13;
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a7 + 8) + v15) = 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1ACBF433C(int8x8_t *a1, unint64_t a2)
{
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      return sub_1ACBF8034(a1, a2);
    }
    else
    {
      a1->i8[0] = (a2 >> 7) | 0x80;
      a1->i8[1] = a2 & 0x7F;
      return 2;
    }
  }
  else
  {
    a1->i8[0] = a2;
    return 1;
  }
}

uint64_t sub_1ACBF4378(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)a1)
    return -1;
  v3 = *(_QWORD *)(a1 + 136);
  if (!*(_BYTE *)(v3 + 8))
    return -1;
  result = *(unsigned __int16 *)(v3 + 24);
  if (*(char *)(a1 + 84) >= 1)
  {
    v4 = *(unsigned __int8 *)(a1 + 84);
    if ((_DWORD)v4 == 1)
    {
      v5 = 0;
LABEL_10:
      v9 = (uint64_t *)(a1 + 8 * v5 + 144);
      v10 = v4 - v5;
      do
      {
        v11 = *v9++;
        result *= *(unsigned __int16 *)(v11 + 24);
        --v10;
      }
      while (v10);
      return result;
    }
    v5 = v4 & 0xFE;
    v6 = a1 + 152;
    v7 = 1;
    v8 = v5;
    do
    {
      result *= *(unsigned __int16 *)(*(_QWORD *)(v6 - 8) + 24);
      v7 *= *(unsigned __int16 *)(*(_QWORD *)v6 + 24);
      v6 += 16;
      v8 -= 2;
    }
    while (v8);
    result *= v7;
    if (v5 != v4)
      goto LABEL_10;
  }
  return result;
}

uint64_t sub_1ACBF441C(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v5 = *v4;
  if (*(_DWORD *)(*v4 + 128) < a2 && *(_BYTE *)(v5 + 10))
  {
    v6 = sub_1ACBEDD40(v5, a2);
    if (!*(_BYTE *)(a1 + 17))
      return v6;
  }
  else
  {
    v6 = 0;
    if (!*(_BYTE *)(a1 + 17))
      return v6;
  }
  v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7)
    sub_1ACBED048(a1);
  return v6;
}

uint64_t sub_1ACBF44C4(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  if ((a2 & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = *(_QWORD *)(v3 + 32 * a2 + 24);
    *(_WORD *)(v4 + 114) |= 8u;
    *(_WORD *)(*(_QWORD *)(v3 + 56) + 114) |= 8u;
    *(_DWORD *)(result + 44) &= ~0x10u;
  }
  if (!*(_DWORD *)(result + 72))
  {
    v5 = *(_DWORD *)(result + 40);
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = 24;
      do
      {
        result = *(_QWORD *)(*(_QWORD *)(v2 + 32) + v7);
        if ((*(_WORD *)(result + 114) & 8) != 0)
        {
          result = sub_1ACBF62B4(result);
          v5 = *(_DWORD *)(v2 + 40);
        }
        ++v6;
        v7 += 32;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_1ACBF4570(uint64_t result, int a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;

  v5 = result;
  v6 = *(_QWORD **)(result + 8);
  if (*(_BYTE *)(result + 17) && (++*(_DWORD *)(result + 20), !*(_BYTE *)(result + 18)))
  {
    result = sub_1ACBECF6C(result);
    if (a2 == 15)
      goto LABEL_4;
  }
  else if (a2 == 15)
  {
LABEL_4:
    v7 = *(_DWORD *)(v5 + 28) + *(_DWORD *)(*v6 + 132);
    goto LABEL_7;
  }
  v7 = bswap32(*(_DWORD *)(*(_QWORD *)(v6[3] + 80) + 4 * a2 + 36));
LABEL_7:
  *a3 = v7;
  if (*(_BYTE *)(v5 + 17))
  {
    v8 = *(_DWORD *)(v5 + 20) - 1;
    *(_DWORD *)(v5 + 20) = v8;
    if (!v8)
      return sub_1ACBED048(v5);
  }
  return result;
}

_QWORD *sub_1ACBF4630(_QWORD *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD **)(*(_QWORD *)(result[4] + 32 * a2 + 24) + 16);
  if (v2)
  {
    v3 = result;
    do
    {
      v4 = v2[2];
      if (!*(_BYTE *)(v4 + 63))
      {
        for (i = *(_QWORD *)(v4 + 72); i; i = *(_QWORD *)(i + 8))
        {
          sub_1ACBB0E20(v3, *(_QWORD **)(i + 48));
          *(_QWORD *)(i + 48) = 0;
          result = sub_1ACBB0E20(v3, *(_QWORD **)(i + 56));
          *(_QWORD *)(i + 56) = 0;
        }
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1ACBF46B8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v7 = a3;
  v8 = a2;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
    v10 = *(_QWORD *)(a1 + 8);
    if (v8 <= 1)
    {
      if (!v8)
      {
        v18 = sub_1ACBEB08C(81479);
LABEL_28:
        v7 = v18;
        if (*(_BYTE *)(a1 + 17))
        {
LABEL_29:
          v19 = *(_DWORD *)(a1 + 20) - 1;
          *(_DWORD *)(a1 + 20) = v19;
          if (!v19)
            sub_1ACBED048(a1);
        }
        return v7;
      }
      v8 = *(_DWORD *)(v10 + 64) != 0;
    }
    *(_DWORD *)(a5 + 80) = v8;
    *(_BYTE *)(a5 + 84) = -1;
    *(_QWORD *)(a5 + 128) = a4;
    *(_QWORD *)(a5 + 8) = a1;
    *(_QWORD *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 1) = 0;
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(v10 + 16);
      do
      {
        if (*(_DWORD *)(v13 + 80) == v8)
        {
          *(_BYTE *)(v13 + 1) |= 0x20u;
          v12 = 32;
          *(_BYTE *)(a5 + 1) = 32;
        }
        v13 = *(_QWORD *)(v13 + 40);
      }
      while (v13);
    }
    else
    {
      v12 = 0;
    }
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 40) = v11;
    *(_QWORD *)(v10 + 16) = a5;
    if ((_DWORD)v7)
    {
      v7 = 0;
      *(_BYTE *)(a5 + 1) = v12 | 1;
      *(_BYTE *)(a5 + 2) = 0;
      if (!*(_QWORD *)(v10 + 136))
      {
        v18 = sub_1ACBF85D8(v10);
        goto LABEL_28;
      }
    }
    else
    {
      *(_BYTE *)(a5 + 2) = 2;
    }
    if (*(_BYTE *)(a1 + 17))
      goto LABEL_29;
    return v7;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (a2 > 1)
  {
LABEL_15:
    *(_DWORD *)(a5 + 80) = v8;
    *(_BYTE *)(a5 + 84) = -1;
    *(_QWORD *)(a5 + 128) = a4;
    *(_QWORD *)(a5 + 8) = a1;
    *(_QWORD *)(a5 + 32) = v14;
    *(_BYTE *)(a5 + 1) = 0;
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = 0;
      v17 = *(_QWORD *)(v14 + 16);
      do
      {
        if (*(_DWORD *)(v17 + 80) == v8)
        {
          *(_BYTE *)(v17 + 1) |= 0x20u;
          v16 = 32;
          *(_BYTE *)(a5 + 1) = 32;
        }
        v17 = *(_QWORD *)(v17 + 40);
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 40) = v15;
    *(_QWORD *)(v14 + 16) = a5;
    if ((_DWORD)a3)
    {
      v7 = 0;
      *(_BYTE *)(a5 + 1) = v16 | 1;
      *(_BYTE *)(a5 + 2) = 0;
      if (!*(_QWORD *)(v14 + 136))
        return sub_1ACBF85D8(v14);
    }
    else
    {
      *(_BYTE *)(a5 + 2) = 2;
    }
    return v7;
  }
  if (a2)
  {
    v8 = *(_DWORD *)(v14 + 64) != 0;
    goto LABEL_15;
  }
  return sub_1ACBEB08C(81479);
}

uint64_t sub_1ACBF48F4(uint64_t a1, unsigned int *a2, char a3)
{
  _DWORD *v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _DWORD *v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v6 = *(_DWORD **)(a1 + 8);
  v48 = 0;
  v47 = 0;
  if (!*((_BYTE *)v6 + 33))
  {
    v9 = sub_1ACBA3368((uint64_t)v6, &v48, (int *)&v47, 1u, 0);
    v46 = v9;
    if ((_DWORD)v9)
      goto LABEL_46;
    v10 = v48;
    goto LABEL_12;
  }
  v45 = 0;
  v44 = 0;
  for (i = *((_QWORD *)v6 + 2); i; i = *(_QWORD *)(i + 40))
    *(_BYTE *)(i + 1) &= ~4u;
  v8 = *(unsigned __int8 *)(a1 + 17);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (*(_BYTE *)(a1 + 18))
    {
      v8 = 1;
    }
    else
    {
      sub_1ACBECF6C(a1);
      v8 = *(unsigned __int8 *)(a1 + 17);
    }
  }
  v13 = bswap32(*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 80) + 52));
  if (v8)
  {
    v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14)
      sub_1ACBED048(a1);
  }
  if (v13 > v6[16])
  {
    v15 = sub_1ACBEB08C(86753);
    goto LABEL_24;
  }
  do
  {
    do
    {
      while (1)
      {
        v16 = v13++;
        if (v13 >= 2)
          break;
        if (v13)
          goto LABEL_26;
      }
      v17 = (v16 - 1) / (v6[14] / 5u + 1) * (v6[14] / 5u + 1);
      if (v17 + 1 == dword_1EECAC650 / v6[13])
        v18 = 3;
      else
        v18 = 2;
    }
    while (v13 == v18 + v17);
LABEL_26:
    ;
  }
  while (v16 == dword_1EECAC650 / v6[13]);
  v19 = v16 + 1;
  v47 = v16 + 1;
  v9 = sub_1ACBA3368((uint64_t)v6, &v44, (int *)&v45, v16 + 1, 1);
  v46 = v9;
  if ((_DWORD)v9)
    goto LABEL_46;
  v20 = v45;
  if (v45 - 1 == v16)
  {
    v10 = v44;
    v48 = v44;
    goto LABEL_38;
  }
  v43 = 0;
  v42 = 0;
  v21 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
  if (v21)
  {
    v9 = sub_1ACBEEE90(v21, 0, 0);
    v22 = v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v9 = 0;
    v22 = v44;
    if (!v44)
      goto LABEL_58;
  }
  v28 = *(_QWORD *)(v22 + 112);
  if ((*(_WORD *)(v28 + 52) & 0x20) != 0)
  {
    v29 = *(_QWORD *)(v28 + 40);
    --*(_DWORD *)(v29 + 152);
    *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 168);
    *(_QWORD *)(v29 + 168) = v28;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v29 + 72) + 144))(*(_QWORD *)(v29 + 72), *(_QWORD *)(v29 + 200) * (*(_DWORD *)(v28 + 48) - 1), *(_QWORD *)(v28 + 8));
  }
  else
  {
    sub_1ACBE906C(v28);
  }
LABEL_58:
  if ((_DWORD)v9)
    goto LABEL_46;
  v49 = 0;
  v15 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 288))();
  if ((_DWORD)v15)
  {
LABEL_24:
    v9 = v15;
    goto LABEL_46;
  }
  v30 = *(_QWORD *)(v49 + 16);
  if (*(_DWORD *)(v30 + 4) - 1 != v16)
  {
    v31 = *(_QWORD *)(v49 + 8);
    *(_QWORD *)(v30 + 112) = v49;
    *(_QWORD *)(v30 + 72) = v6;
    *(_QWORD *)(v30 + 80) = v31;
    *(_DWORD *)(v30 + 4) = v19;
    if (v16)
      v32 = 0;
    else
      v32 = 100;
    *(_BYTE *)(v30 + 9) = v32;
  }
  v48 = v30;
  v33 = sub_1ACBEF22C(v6, v16 + 1, &v43, &v42);
  if ((v43 - 1) <= 1u)
  {
    v9 = sub_1ACBEB08C(86801);
    goto LABEL_68;
  }
  v9 = v33;
  if (!(_DWORD)v33)
  {
    v9 = sub_1ACBEF43C(v6, v30, v43, v42, v20, 0);
    v35 = *(_QWORD *)(v30 + 112);
    if ((*(_WORD *)(v35 + 52) & 0x20) != 0)
    {
      v36 = *(_QWORD *)(v35 + 40);
      --*(_DWORD *)(v36 + 152);
      *(_QWORD *)(v35 + 32) = *(_QWORD *)(v36 + 168);
      *(_QWORD *)(v36 + 168) = v35;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v36 + 72) + 144))(*(_QWORD *)(v36 + 72), *(_QWORD *)(v36 + 200) * (*(_DWORD *)(v35 + 48) - 1), *(_QWORD *)(v35 + 8));
    }
    else
    {
      sub_1ACBE906C(v35);
    }
    if ((_DWORD)v9)
      goto LABEL_46;
    v49 = 0;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 288))();
    if ((_DWORD)v15)
      goto LABEL_24;
    v27 = v49;
    v10 = *(_QWORD *)(v49 + 16);
    if (*(_DWORD *)(v10 + 4) - 1 == v16)
    {
      v27 = *(_QWORD *)(v10 + 112);
    }
    else
    {
      v37 = *(_QWORD *)(v49 + 8);
      *(_QWORD *)(v10 + 112) = v49;
      *(_QWORD *)(v10 + 72) = v6;
      *(_QWORD *)(v10 + 80) = v37;
      *(_DWORD *)(v10 + 4) = v19;
      if (v16)
        v38 = 0;
      else
        v38 = 100;
      *(_BYTE *)(v10 + 9) = v38;
    }
    v48 = v10;
    v39 = *(_DWORD **)(v27 + 40);
    v40 = *(_WORD *)(v27 + 52);
    if ((v40 & 4) != 0 && v39[8] >= *(_DWORD *)(v27 + 48))
    {
      if (!v39[32])
      {
        v46 = 0;
LABEL_38:
        sub_1ACBAF160(v6, v16 + 1, 1, 0, &v46);
        v9 = v46;
        if (v46)
        {
          if (!v10)
            goto LABEL_46;
          goto LABEL_52;
        }
        v26 = sub_1ACBC4E30(a1, 4, v16 + 1);
        v46 = v26;
        if ((_DWORD)v26)
        {
          v9 = v26;
          if (!v10)
            goto LABEL_46;
LABEL_52:
          v27 = *(_QWORD *)(v10 + 112);
          if ((*(_WORD *)(v27 + 52) & 0x20) != 0)
            goto LABEL_69;
          goto LABEL_53;
        }
LABEL_12:
        if ((a3 & 1) != 0)
          v11 = 13;
        else
          v11 = 10;
        sub_1ACBA3288(v10, v11);
        v12 = *(_QWORD *)(v10 + 112);
        if (v12)
        {
          if ((*(_WORD *)(v12 + 52) & 0x20) != 0)
          {
            v23 = *(_QWORD *)(v12 + 40);
            --*(_DWORD *)(v23 + 152);
            *(_QWORD *)(v12 + 32) = *(_QWORD *)(v23 + 168);
            *(_QWORD *)(v23 + 168) = v12;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v23 + 72) + 144))(*(_QWORD *)(v23 + 72), *(_QWORD *)(v23 + 200) * (*(_DWORD *)(v12 + 48) - 1), *(_QWORD *)(v12 + 8));
          }
          else
          {
            sub_1ACBE906C(v12);
          }
        }
        v9 = 0;
        *a2 = v47;
        goto LABEL_46;
      }
      v41 = sub_1ACBEA110(v27);
    }
    else
    {
      v9 = v39[12];
      if ((_DWORD)v9)
      {
        v46 = v39[12];
LABEL_92:
        if ((v40 & 0x20) == 0)
          goto LABEL_53;
LABEL_69:
        v34 = *(_QWORD *)(v27 + 40);
        --*(_DWORD *)(v34 + 152);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v34 + 168);
        *(_QWORD *)(v34 + 168) = v27;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v34 + 72) + 144))(*(_QWORD *)(v34 + 72), *(_QWORD *)(v34 + 200) * (*(_DWORD *)(v27 + 48) - 1), *(_QWORD *)(v27 + 8));
        goto LABEL_46;
      }
      if (v39[46] <= v39[50])
        v41 = sub_1ACB9A818(v27);
      else
        v41 = sub_1ACBEDEA4(v27);
    }
    v9 = v41;
    v46 = v41;
    if ((_DWORD)v41)
    {
      v27 = *(_QWORD *)(v10 + 112);
      v40 = *(_WORD *)(v27 + 52);
      goto LABEL_92;
    }
    goto LABEL_38;
  }
LABEL_68:
  v27 = *(_QWORD *)(v30 + 112);
  if ((*(_WORD *)(v27 + 52) & 0x20) != 0)
    goto LABEL_69;
LABEL_53:
  sub_1ACBE906C(v27);
LABEL_46:
  if (*(_BYTE *)(a1 + 17))
  {
    v24 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v24;
    if (!v24)
      sub_1ACBED048(a1);
  }
  return v9;
}

uint64_t sub_1ACBF4EEC(uint64_t a1, int64_t a2, char a3, int *a4)
{
  int64_t v8;
  uint64_t result;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int *v27;
  char v28;
  int v29;
  int64_t v30;

  if (!*(_BYTE *)a1 && (*(_BYTE *)(a1 + 1) & 2) != 0)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v8 == a2)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
    if (v8 < a2)
    {
      if ((*(_BYTE *)(a1 + 1) & 8) != 0)
      {
LABEL_38:
        result = 0;
        *a4 = -1;
        return result;
      }
      if (v8 + 1 == a2)
      {
        *a4 = 0;
        result = sub_1ACB8B8D4(a1);
        if ((_DWORD)result != 101)
        {
          if ((_DWORD)result)
            return result;
          sub_1ACBEF184(a1);
          if (*(_QWORD *)(a1 + 48) == a2)
            return 0;
        }
      }
    }
  }
  result = sub_1ACB8A058((unsigned __int8 *)a1);
  if ((_DWORD)result == 16)
    goto LABEL_38;
  if ((_DWORD)result)
    return result;
  v27 = a4;
  v10 = 1 - a3;
  v28 = 1 - a3;
LABEL_15:
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 136);
  v29 = *(unsigned __int16 *)(v12 + 24);
  v13 = v29 - 1;
  v14 = (v29 - 1) >> v10;
  v15 = *(_WORD *)(v12 + 26);
  v17 = *(_QWORD *)(v12 + 96);
  v16 = *(_QWORD *)(v12 + 104);
  v18 = *(unsigned __int8 *)(v12 + 2);
  while (1)
  {
    v30 = 0;
    v19 = (*(unsigned __int8 *)(v17 + 2 * v14 + 1) | (*(unsigned __int8 *)(v17 + 2 * v14) << 8)) & *(_QWORD *)&v15;
    v20 = (char *)(v16 + v19);
    if (v18)
    {
      v21 = (char *)(v16 + v19);
      while (1)
      {
        v22 = *v21++;
        if ((v22 & 0x80000000) == 0)
          break;
        v20 = v21;
        if ((unint64_t)v21 >= *(_QWORD *)(v12 + 88))
          return sub_1ACBEC69C(82587, v12);
      }
      ++v20;
    }
    sub_1ACB8A6CC(v20, (unint64_t *)&v30);
    v23 = v30;
    if (v30 < a2)
    {
      v11 = v14 + 1;
      if (v14 >= v13)
      {
        v24 = -1;
        goto LABEL_32;
      }
      goto LABEL_28;
    }
    if (v30 <= a2)
      break;
    if (v11 >= v14)
    {
      v24 = 1;
LABEL_32:
      if (*(_BYTE *)(v12 + 8))
      {
        result = 0;
        *(_WORD *)(a1 + 86) = v14;
        *v27 = v24;
LABEL_41:
        *(_WORD *)(a1 + 70) = 0;
        return result;
      }
LABEL_33:
      if (v11 >= v29)
        v25 = *(unsigned __int8 *)(v12 + 9) + 8;
      else
        v25 = (*(unsigned __int8 *)(v17 + 2 * v11 + 1) | (*(unsigned __int8 *)(v17 + 2 * v11) << 8)) & *(_QWORD *)&v15;
      v26 = bswap32(*(_DWORD *)(*(_QWORD *)(v12 + 80) + v25));
      *(_WORD *)(a1 + 86) = v11;
      result = sub_1ACB8A3D0(a1, v26);
      v10 = v28;
      if ((_DWORD)result)
        goto LABEL_41;
      goto LABEL_15;
    }
    v13 = v14 - 1;
LABEL_28:
    v14 = (v13 + v11) >> 1;
  }
  *(_WORD *)(a1 + 86) = v14;
  if (!*(_BYTE *)(v12 + 8))
  {
    v11 = v14;
    goto LABEL_33;
  }
  result = 0;
  *(_BYTE *)(a1 + 1) |= 2u;
  *(_QWORD *)(a1 + 48) = v23;
  *(_WORD *)(a1 + 70) = 0;
  *v27 = 0;
  return result;
}

uint64_t sub_1ACBF514C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  uint64_t (*v11)(unsigned int, char *, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  void (**v30)(char *);
  int v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  char *v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  void (**v54)(char *);
  int v55;
  uint64_t v57;
  char v58;
  int *v59;
  uint64_t *v60;
  uint64_t *v61;

  v4 = a2;
  v6 = *a2;
  if (*(unsigned __int16 *)(*a2 + 8) > 0xDu)
    goto LABEL_9;
  v7 = a2[1];
  v8 = *(_WORD *)(v7 + 20);
  if (**(_BYTE **)(v6 + 24))
  {
    if ((**(_BYTE **)(v6 + 24) & 2) != 0)
      goto LABEL_9;
    v9 = -1;
    v10 = 1;
  }
  else
  {
    v9 = 1;
    v10 = -1;
  }
  *((_BYTE *)a2 + 32) = v10;
  *((_BYTE *)a2 + 33) = v9;
  if ((v8 & 4) != 0)
  {
    a2[2] = *(_QWORD *)v7;
    v11 = (uint64_t (*)(unsigned int, char *, uint64_t *))sub_1ACBF8C68;
    goto LABEL_10;
  }
  if ((v8 & 0x39) == 0 && !*(_QWORD *)(v6 + 32))
  {
    a2[2] = *(_QWORD *)(v7 + 8);
    *((_DWORD *)a2 + 6) = *(_DWORD *)(v7 + 16);
    v11 = (uint64_t (*)(unsigned int, char *, uint64_t *))sub_1ACBF8D70;
    goto LABEL_10;
  }
LABEL_9:
  v11 = sub_1ACB93340;
LABEL_10:
  *((_BYTE *)a2 + 31) = 0;
  if (*(_BYTE *)a1)
    goto LABEL_11;
  v42 = *(_QWORD *)(a1 + 136);
  if (!*(_BYTE *)(v42 + 8))
    goto LABEL_11;
  if (*(char *)(a1 + 84) >= 1)
  {
    v43 = 0;
    while (*(unsigned __int16 *)(a1 + 144 + 2 * v43 - 56) >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 144 + 8 * v43)
                                                                                                + 24))
    {
      if (*(unsigned __int8 *)(a1 + 84) == ++v43)
        goto LABEL_52;
    }
    goto LABEL_11;
  }
LABEL_52:
  v44 = *(unsigned __int16 *)(a1 + 86);
  if (*(unsigned __int16 *)(v42 + 24) - 1 != (_DWORD)v44)
    goto LABEL_59;
  v45 = (unsigned __int8 *)(*(_QWORD *)(v42 + 104)
                          + ((*(unsigned __int8 *)(*(_QWORD *)(v42 + 96) + 2 * v44 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(v42 + 96) + 2 * v44) << 8)) & (unint64_t)*(unsigned __int16 *)(v42 + 26)));
  v47 = (char *)(v45 + 1);
  v46 = *v45;
  if (v46 <= *(unsigned __int8 *)(v42 + 11))
    goto LABEL_57;
  if ((*v47 & 0x80000000) == 0)
  {
    v46 = ((v46 & 0x7F) << 7) + *v47;
    if (v46 <= *(unsigned __int16 *)(v42 + 14))
    {
      v47 = (char *)(v45 + 2);
LABEL_57:
      v48 = v11(v46, v47, v4);
      if (v48 <= 0 && !*((_BYTE *)v4 + 31))
      {
        v13 = 0;
        *a3 = v48;
        return v13;
      }
    }
  }
LABEL_59:
  if (*(char *)(a1 + 84) < 1)
    goto LABEL_66;
  v49 = *(_QWORD *)(a1 + 136);
  v50 = (unsigned __int8 *)(*(_QWORD *)(v49 + 104)
                          + ((*(unsigned __int8 *)(*(_QWORD *)(v49 + 96) + 1) | (**(unsigned __int8 **)(v49 + 96) << 8)) & (unint64_t)*(unsigned __int16 *)(v49 + 26)));
  v53 = *v50;
  v52 = (char *)(v50 + 1);
  v51 = v53;
  if (v53 > *(unsigned __int8 *)(v49 + 11))
  {
    if (*v52 < 0)
      goto LABEL_66;
    v51 = ((v51 & 0x7F) << 7) + *v52;
    if (v51 > *(unsigned __int16 *)(v49 + 14))
      goto LABEL_66;
    v52 = (char *)(*(_QWORD *)(v49 + 104)
                 + ((*(unsigned __int8 *)(*(_QWORD *)(v49 + 96) + 1) | (**(unsigned __int8 **)(v49 + 96) << 8)) & (unint64_t)*(unsigned __int16 *)(v49 + 26))
                 + 2);
  }
  if ((int)v11(v51, v52, v4) > 0 || *((_BYTE *)v4 + 31))
  {
LABEL_66:
    *((_BYTE *)v4 + 31) = 0;
LABEL_11:
    v12 = sub_1ACB8A058((unsigned __int8 *)a1);
    if ((_DWORD)v12 == 16)
    {
      v13 = 0;
      *a3 = -1;
      return v13;
    }
    v13 = v12;
    if ((_DWORD)v12)
      return v13;
    v14 = *(_QWORD *)(a1 + 136);
    v4 = a2;
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 1) &= ~4u;
  v14 = *(_QWORD *)(a1 + 136);
  if (!*(_BYTE *)v14)
  {
    v55 = 82783;
    return sub_1ACBEB08C(v55);
  }
LABEL_14:
  v59 = a3;
  v60 = (uint64_t *)(a1 + 136);
  v61 = (uint64_t *)(a1 + 48);
  v15 = *(unsigned __int16 *)(v14 + 24);
LABEL_15:
  v16 = 0;
  v17 = v15 - 1;
  v18 = v15 - 1;
  while (1)
  {
    v19 = v18;
    v20 = (unsigned __int8 *)(*(_QWORD *)(v14 + 96) + (v18 & 0xFFFFFFFFFFFFFFFELL));
    v21 = (unsigned __int8 *)(*(_QWORD *)(v14 + 104)
                            + ((v20[1] | (*v20 << 8)) & (unint64_t)*(unsigned __int16 *)(v14 + 26)));
    v23 = (char *)(v21 + 1);
    v22 = *v21;
    if (v22 <= *(unsigned __int8 *)(v14 + 11))
      goto LABEL_34;
    if (*v23 < 0)
      break;
    v22 = ((v22 & 0x7F) << 7) + *v23;
    if (v22 > *(unsigned __int16 *)(v14 + 14))
      break;
    v23 = (char *)(v21 + 2);
LABEL_34:
    v29 = v11(v22, v23, v4);
    v31 = v19 >> 1;
    if ((v29 & 0x80000000) == 0)
    {
LABEL_35:
      if (!v29)
      {
        *v59 = 0;
        *(_WORD *)(a1 + 86) = v19 >> 1;
        if (*((_BYTE *)v4 + 31))
          v13 = sub_1ACBEB08C(82902);
        else
          v13 = 0;
        goto LABEL_90;
      }
      v17 = v31 - 1;
      goto LABEL_17;
    }
LABEL_16:
    v16 = v31 + 1;
LABEL_17:
    v18 = v17 + v16;
    if (v16 > v17)
    {
      if (*(_BYTE *)(v14 + 8))
      {
        v13 = 0;
        *(_WORD *)(a1 + 86) = v19 >> 1;
        *v59 = v29;
        goto LABEL_90;
      }
      if (v16 >= *(unsigned __int16 *)(v14 + 24))
      {
        v33 = *(unsigned __int8 *)(v14 + 9) + 8;
      }
      else
      {
        v32 = (unsigned __int8 *)(*(_QWORD *)(v14 + 96) + 2 * v16);
        v33 = (v32[1] | (*v32 << 8)) & (unint64_t)*(unsigned __int16 *)(v14 + 26);
      }
      v34 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) + v33);
      v35 = *v34;
      v36 = v34[1];
      v37 = v34[2];
      v38 = v34[3];
      *(_WORD *)(a1 + 70) = 0;
      *(_BYTE *)(a1 + 1) &= 0xF9u;
      v39 = *(char *)(a1 + 84);
      if (v39 >= 19)
      {
        v55 = 82933;
        return sub_1ACBEB08C(v55);
      }
      *(_WORD *)(a1 + 2 * v39 + 88) = v16;
      *(_QWORD *)(a1 + 8 * v39 + 144) = *(_QWORD *)(a1 + 136);
      *(_WORD *)(a1 + 86) = 0;
      *(_BYTE *)(a1 + 84) = v39 + 1;
      v40 = sub_1ACBF81EC(*(_DWORD **)(a1 + 32), (v35 << 24) | (v36 << 16) | (v37 << 8) | v38, v60);
      if ((_DWORD)v40)
        goto LABEL_89;
      v14 = *v60;
      v15 = *(unsigned __int16 *)(*v60 + 24);
      v4 = a2;
      if (!*(_WORD *)(*v60 + 24) || *(unsigned __int8 *)(v14 + 1) != *(unsigned __int8 *)(a1 + 85))
      {
        v41 = *(_QWORD *)(v14 + 112);
        if ((*(_WORD *)(v41 + 52) & 0x20) != 0)
        {
          v57 = *(_QWORD *)(v41 + 40);
          --*(_DWORD *)(v57 + 152);
          *(_QWORD *)(v41 + 32) = *(_QWORD *)(v57 + 168);
          *(_QWORD *)(v57 + 168) = v41;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v57 + 72) + 144))(*(_QWORD *)(v57 + 72), *(_QWORD *)(v57 + 200) * (*(_DWORD *)(v41 + 48) - 1), *(_QWORD *)(v41 + 8));
        }
        else
        {
          sub_1ACBE906C(v41);
        }
        v40 = sub_1ACBEB08C(82944);
LABEL_89:
        v13 = v40;
        v58 = *(_BYTE *)(a1 + 84) - 1;
        *(_BYTE *)(a1 + 84) = v58;
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 8 * v58 + 144);
        goto LABEL_90;
      }
      goto LABEL_15;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *))(v14 + 128))(v14, &v21[-*(unsigned __int8 *)(v14 + 10)], v61);
  v24 = *v61;
  if ((int)*v61 < 2
    || v24 / *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) > *(_DWORD *)(*(_QWORD *)(a1 + 32) + 64))
  {
    v13 = sub_1ACBEC69C(82870, v14);
    goto LABEL_90;
  }
  v25 = (char *)sub_1ACB5D828((int)v24 + 18);
  if (!v25)
  {
    v13 = 7;
    goto LABEL_90;
  }
  v26 = v25;
  *(_WORD *)(a1 + 86) = v19 >> 1;
  v27 = sub_1ACBAE978(a1, 0, v24, v25, 0);
  v28 = &v26[v24];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  *((_WORD *)v28 + 8) = 0;
  *(_BYTE *)(a1 + 1) &= ~4u;
  if (!(_DWORD)v27)
  {
    v4 = a2;
    v29 = sub_1ACBF5AA0(v24, v26, a2, 0);
    v30 = (void (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_30;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v26);
    v26 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v30 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_30:
      (*v30)(v26);
    }
    v31 = v19 >> 1;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_16;
  }
  v13 = v27;
  v54 = (void (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_78:
    (*v54)(v26);
    goto LABEL_90;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v26);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v26);
  v26 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v54 = (void (**)(char *))&xmmword_1ECD3B1D0;
    goto LABEL_78;
  }
LABEL_90:
  *(_WORD *)(a1 + 70) = 0;
  return v13;
}

_QWORD *sub_1ACBF5874(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v9 = *a1;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  if ((*(_BYTE *)(a5 + 48) & 0x80) != 0)
  {
    for (i = *(_QWORD *)(a5 + 16); i; i = *(_QWORD *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2)
        break;
    }
    a6 = 0;
    v10 = 0;
    v34 = i;
  }
  else if (a3 == 23)
  {
    v10 = *(_QWORD *)(a1[13] + ((uint64_t)(int)a7 << 6));
  }
  else
  {
    v10 = a6;
  }
  v26[0] = a1;
  v26[1] = a2;
  BYTE4(v28) = *(_BYTE *)(v9 + 100);
  WORD3(v28) = *(_WORD *)(a5 + 54);
  LODWORD(v27) = a3;
  *(_QWORD *)&v29 = v9;
  *((_QWORD *)&v29 + 1) = &unk_1ACCB6DE4;
  *(_QWORD *)&v32 = a6;
  *((_QWORD *)&v32 + 1) = v10;
  *((_QWORD *)&v33 + 1) = a5;
  *((_QWORD *)&v31 + 1) = __PAIR64__(a8, a7);
  *(_QWORD *)(v9 + 368) = v26;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v9 + 360))(*(_QWORD *)(v9 + 352), v9);
  *(_QWORD *)(v9 + 368) = 0;
  if (*((_QWORD *)&v27 + 1))
    result = sub_1ACBE0F9C((_QWORD *)v9, *((_QWORD **)&v27 + 1));
  v13 = (_QWORD *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v14 = 0;
    v15 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      v16 = v13[1];
      if (*(_QWORD *)(v16 + v14 + 40) && *(_DWORD *)(v16 + v14 + 32))
        sub_1ACBF2A04(v16 + v14);
      v14 += 64;
    }
    while (v15 != v14);
    result = sub_1ACBF0674((_QWORD *)v9, v13);
  }
  v17 = (_QWORD *)v31;
  if ((_QWORD)v31)
  {
    v18 = 0;
    v19 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      v20 = v17[1];
      if (*(_QWORD *)(v20 + v18 + 40) && *(_DWORD *)(v20 + v18 + 32))
        sub_1ACBF2A04(v20 + v18);
      v18 += 64;
    }
    while (v19 != v18);
    result = sub_1ACBF0674((_QWORD *)v9, v17);
  }
  v21 = (_QWORD *)v33;
  if ((_QWORD)v33)
  {
    v22 = *(__int16 *)(a2 + 64);
    if (v22 >= 1)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = v33 + v23;
        if ((*(_WORD *)(v33 + v23 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32))
        {
          sub_1ACBF2A04(v25);
          LOWORD(v22) = *(_WORD *)(a2 + 64);
        }
        ++v24;
        v23 += 64;
      }
      while (v24 < (__int16)v22);
      v21 = (_QWORD *)v33;
    }
    return sub_1ACBF0674((_QWORD *)v9, v21);
  }
  return result;
}

uint64_t sub_1ACBF5AA0(unsigned int a1, char *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  BOOL v23;
  unsigned __int8 *v24;
  int64_t v25;
  char *v26;
  BOOL v27;
  unsigned __int8 *v28;
  int v29;
  double v30;
  __int16 v32;
  double v33;
  uint64_t v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v56;
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;

  v7 = a3[1];
  if (a4)
  {
    v8 = a2[1];
    if (a2[1] < 0)
    {
      v12 = a2[2];
      if (a2[2] < 0)
      {
        v14 = a2[3];
        if (v14 < 0)
        {
          *(_QWORD *)&v59 = 0;
          v16 = sub_1ACB8A6CC(a2 + 1, (unint64_t *)&v59);
          v8 = v59;
          v9 = (v16 + 1);
          if (DWORD1(v59))
          {
            v10 = *a2;
            v8 = -1;
            goto LABEL_16;
          }
        }
        else
        {
          v8 = v14 & 0x7F | (v8 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
          v9 = 4;
        }
      }
      else
      {
        v8 = ((v8 & 0x7F) << 7) | v12;
        v9 = 3;
      }
    }
    else
    {
      v9 = 2;
    }
    v10 = *a2;
    if (v8 < 0x80)
    {
      v17 = byte_1ACCB6D60[v8];
LABEL_18:
      v18 = v17 + v10;
      v7 += 64;
      v11 = 1;
      if (v17 + v10 > a1)
      {
LABEL_19:
        v19 = 0;
        *((_BYTE *)a3 + 31) = sub_1ACBEB08C(95860);
        return v19;
      }
      goto LABEL_24;
    }
LABEL_16:
    v17 = (v8 - 12) >> 1;
    goto LABEL_18;
  }
  v10 = *a2;
  if (*a2 < 0)
  {
    v13 = a2[1];
    if (a2[1] < 0)
    {
      v15 = a2[2];
      if (v15 < 0)
      {
        *(_QWORD *)&v59 = 0;
        v9 = sub_1ACB8A6CC(a2, (unint64_t *)&v59);
        v11 = 0;
        if (DWORD1(v59))
          v10 = -1;
        else
          v10 = v59;
      }
      else
      {
        v11 = 0;
        v10 = v15 & 0x7F | (v10 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
        v9 = 3;
      }
    }
    else
    {
      v11 = 0;
      v10 = ((v10 & 0x7F) << 7) | v13;
      v9 = 2;
    }
  }
  else
  {
    v11 = 0;
    v9 = 1;
  }
  v18 = v10;
  if (v10 > a1)
    goto LABEL_19;
LABEL_24:
  v58 = (char *)a3 + 31;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  while (1)
  {
    v21 = *(_WORD *)(v7 + 20);
    if ((v21 & 0x24) == 0)
      break;
    v22 = a2[v9];
    v23 = v22 == 10;
    if (v22 >= 0xA)
      goto LABEL_136;
    if (v22 == 7)
    {
      v28 = (unsigned __int8 *)&a2[v18];
      v29 = ~((*v28 << 24) | (v28[1] << 16));
      *(_QWORD *)&v30 = ((unint64_t)v28[4] << 24) | ((unint64_t)v28[5] << 16) | ((unint64_t)((*v28 << 24) | (v28[1] << 16) | (bswap32(*((unsigned __int16 *)v28 + 1)) >> 16)) << 32) | v28[7] | ((unint64_t)v28[6] << 8);
      *(double *)&v59 = v30;
      if ((*(_QWORD *)&v30 & 0xFFFFFFFFFFFFFLL) != 0 && (v29 & 0x7FF00000) == 0)
        v32 = 1;
      else
        v32 = 8;
      WORD2(v60) = v32;
      v33 = v30;
      if (v30 < -9.22337204e18)
        goto LABEL_135;
      if (v30 >= 9.22337204e18)
        goto LABEL_133;
      v34 = *(_QWORD *)v7;
      if (*(_QWORD *)v7 < (uint64_t)v33)
        goto LABEL_133;
      if (v34 > (uint64_t)v33)
        goto LABEL_135;
      if (v33 > (double)v34)
        goto LABEL_133;
      if (v33 >= (double)v34)
        v19 = 0;
      else
        v19 = 0xFFFFFFFFLL;
      v22 = 7;
      if ((_DWORD)v19)
        goto LABEL_142;
    }
    else
    {
      if (!a2[v9])
        goto LABEL_134;
      v24 = (unsigned __int8 *)&a2[v18];
      switch(a2[v9])
      {
        case 1:
          v25 = (char)*v24;
          break;
        case 2:
          v25 = v24[1] | (unint64_t)((uint64_t)(char)*v24 << 8);
          break;
        case 3:
          v25 = ((uint64_t)(char)*v24 << 16) | ((unint64_t)v24[1] << 8) | v24[2];
          break;
        case 4:
          v25 = (*v24 << 24) | ((unint64_t)v24[1] << 16) | ((unint64_t)v24[2] << 8) | v24[3];
          break;
        case 5:
          v25 = bswap32(*(_DWORD *)(v24 + 2)) | ((unint64_t)(v24[1] | ((char)*v24 << 8)) << 32);
          break;
        case 6:
          v25 = bswap64(*(_QWORD *)v24);
          break;
        default:
          v25 = v22 - 8;
          break;
      }
      if (v25 < *(_QWORD *)v7)
        goto LABEL_134;
      if (v25 > *(_QWORD *)v7)
      {
        v19 = 1;
        goto LABEL_142;
      }
    }
LABEL_116:
    if (++v11 == *((unsigned __int16 *)a3 + 14))
      goto LABEL_132;
    v7 += 64;
    if (v22 < 0x80)
      goto LABEL_119;
    v50 = (v22 - 12) >> 1;
LABEL_120:
    v18 += v50;
    if (v18 > a1)
    {
LABEL_132:
      *((_BYTE *)a3 + 34) = 1;
      return *((char *)a3 + 30);
    }
    if (v22 < 0x80)
    {
      v20 = 1;
    }
    else
    {
      v51 = v22;
      v20 = 1;
      do
      {
        v52 = v51 >> 14;
        v51 >>= 7;
        ++v20;
      }
      while (v52);
    }
    v9 += v20;
    if (v9 >= v10)
    {
      v56 = 96011;
LABEL_141:
      v19 = 0;
      *v58 = sub_1ACBEB08C(v56);
      return v19;
    }
  }
  if ((v21 & 8) != 0)
  {
    v22 = a2[v9];
    v23 = v22 == 10;
    if (v22 >= 0xA)
    {
LABEL_136:
      if (v23)
        v19 = 0xFFFFFFFFLL;
      else
        v19 = 1;
      v22 = 7;
      goto LABEL_142;
    }
    if (!a2[v9])
      goto LABEL_134;
    sub_1ACB8A864(&a2[v18], a2[v9], (uint64_t)&v59);
    v35 = *(double *)v7;
    if (v22 == 7)
    {
      if (*(double *)&v59 < v35)
        goto LABEL_135;
      if (*(double *)&v59 > v35)
        goto LABEL_133;
      if (++v11 == *((unsigned __int16 *)a3 + 14))
        goto LABEL_132;
      v7 += 64;
      v22 = 7u;
LABEL_119:
      v50 = byte_1ACCB6D60[v22];
      goto LABEL_120;
    }
    if (v35 < -9.22337204e18)
      goto LABEL_133;
    if (v35 >= 9.22337204e18 || (uint64_t)v59 < (uint64_t)v35)
      goto LABEL_135;
    if ((uint64_t)v59 > (uint64_t)v35)
      goto LABEL_133;
    if (v35 > (double)(uint64_t)v59)
    {
LABEL_135:
      v22 = 7;
      v19 = 0xFFFFFFFFLL;
      goto LABEL_142;
    }
    v19 = v35 < (double)(uint64_t)v59;
    goto LABEL_115;
  }
  v26 = &a2[v9];
  if ((v21 & 2) != 0)
  {
    v22 = *v26;
    if (*v26 < 0)
    {
      v36 = v26[1];
      if (v26[1] < 0)
      {
        v38 = v26[2];
        if (v38 < 0)
        {
          v63 = 0;
          sub_1ACB8A6CC(v26, &v63);
          v22 = v63;
          if (HIDWORD(v63))
          {
            v22 = -1;
            goto LABEL_95;
          }
        }
        else
        {
          v22 = v38 & 0x7F | (v22 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
        }
      }
      else
      {
        v22 = ((v22 & 0x7F) << 7) | v36;
      }
    }
    if (v22 < 0xC)
      goto LABEL_134;
    if ((v22 & 1) == 0)
      goto LABEL_133;
LABEL_95:
    LODWORD(v40) = (v22 - 12) >> 1;
    LODWORD(v60) = v40;
    if (v40 + v18 > a1 || (v41 = *a3, v11 >= *(unsigned __int16 *)(*a3 + 8)))
    {
      v56 = 95937;
      goto LABEL_141;
    }
    v42 = v41 + 8 * v11;
    v44 = *(_QWORD *)(v42 + 32);
    v43 = (uint64_t *)(v42 + 32);
    if (v44)
    {
      BYTE6(v60) = *(_BYTE *)(v41 + 4);
      *((_QWORD *)&v60 + 1) = *(_QWORD *)(v41 + 16);
      WORD2(v60) = 2;
      *((_QWORD *)&v59 + 1) = &a2[v18];
      v19 = sub_1ACBF7C2C(&v59, (__int128 *)v7, *v43, v58);
      if ((_DWORD)v19)
        goto LABEL_142;
      goto LABEL_116;
    }
    v45 = *(_DWORD *)(v7 + 16);
    v19 = (v40 - v45);
    if ((int)v40 >= v45)
      LODWORD(v40) = *(_DWORD *)(v7 + 16);
LABEL_114:
    v49 = memcmp(&a2[v18], *(const void **)(v7 + 8), (int)v40);
    if ((_DWORD)v49)
    {
      v22 = 7;
      v19 = v49;
      goto LABEL_142;
    }
LABEL_115:
    if ((_DWORD)v19)
      goto LABEL_142;
    goto LABEL_116;
  }
  v22 = *v26;
  if ((v21 & 0x10) == 0)
  {
    if (*v26)
      v27 = v22 == 10;
    else
      v27 = 1;
    v19 = !v27;
    if ((_DWORD)v19)
      goto LABEL_142;
    goto LABEL_116;
  }
  if ((v22 & 0x80) != 0)
  {
    v37 = v26[1];
    if (v26[1] < 0)
    {
      v39 = v26[2];
      if (v39 < 0)
      {
        v63 = 0;
        sub_1ACB8A6CC(v26, &v63);
        if (HIDWORD(v63))
          v22 = -1;
        else
          v22 = v63;
      }
      else
      {
        v22 = v39 & 0x7F | (v22 << 14) & 0x1FC07F | ((v37 & 0x7F) << 7);
      }
    }
    else
    {
      v22 = ((v22 & 0x7F) << 7) | v37;
    }
  }
  v46 = v22 - 12;
  if (v22 < 0xC || (v22 & 1) != 0)
  {
LABEL_134:
    v19 = 0xFFFFFFFFLL;
    goto LABEL_142;
  }
  v40 = v46 >> 1;
  if (v40 + v18 > a1)
  {
    v56 = 95967;
    goto LABEL_141;
  }
  if ((*(_WORD *)(v7 + 20) & 0x400) == 0)
  {
    v48 = *(_DWORD *)(v7 + 16);
    v19 = (v40 - v48);
    if ((int)v40 >= v48)
      LODWORD(v40) = *(_DWORD *)(v7 + 16);
    goto LABEL_114;
  }
  if (v46 < 2)
  {
LABEL_129:
    v19 = (v40 - *(_DWORD *)v7);
    if ((_DWORD)v19)
      goto LABEL_142;
    goto LABEL_116;
  }
  v53 = (unsigned __int8 *)&a2[v18];
  v54 = v40;
  while (!*v53++)
  {
    if (!--v54)
      goto LABEL_129;
  }
LABEL_133:
  v22 = 7;
  v19 = 1;
LABEL_142:
  if (*(_BYTE *)(*(_QWORD *)(*a3 + 24) + v11))
  {
    if ((*(_BYTE *)(*(_QWORD *)(*a3 + 24) + v11) & 2) == 0)
      return -(int)v19;
    if (v22)
    {
      if (((((*(_BYTE *)(*(_QWORD *)(*a3 + 24) + v11) & 1) == 0) ^ *(unsigned __int16 *)(v7 + 20)) & 1) == 0)
        return -(int)v19;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*a3 + 24) + v11) & 1) == 0)
    {
      return -(int)v19;
    }
  }
  return v19;
}

uint64_t sub_1ACBF6250(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  _QWORD *i;
  _QWORD *j;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 32 * a2 + 24);
  for (i = *(_QWORD **)(v4 + 16); i; i = (_QWORD *)*i)
  {
    v7 = i[2];
    if (*(_DWORD *)(v7 + 40) == a3)
      *(_DWORD *)(v7 + 40) = a4;
  }
  for (j = *(_QWORD **)(v4 + 40); j; j = (_QWORD *)*j)
  {
    v8 = j[2];
    if (*(_DWORD *)(v8 + 88) == a3)
      *(_DWORD *)(v8 + 88) = a4;
  }
  return result;
}

uint64_t sub_1ACBF62B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  __int16 v6;
  uint64_t v7;
  int v8;
  _QWORD v9[103];
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v2 = (_QWORD *)(a1 + 8);
  bzero(v9, 0x338uLL);
  v12 = *(_OWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1ACBFC410(a1 + 32);
  v3 = (_QWORD *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    do
    {
      sub_1ACB689B8(v9, v3[2]);
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  sub_1ACBFC410((uint64_t)&v10);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (_QWORD *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    do
    {
      v7 = v4[2];
      if (v7)
      {
        if (v9[102] || (v8 = *(_DWORD *)(v7 + 44) - 1, (*(_DWORD *)(v7 + 44) = v8) == 0))
          sub_1ACC00BE8(v9, (_QWORD *)v7);
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  sub_1ACBFC410((uint64_t)&v12);
  result = sub_1ACBFC410(a1 + 80);
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *(_WORD *)(a1 + 114);
  if ((v6 & 1) != 0)
    ++*(_DWORD *)(a1 + 4);
  *(_WORD *)(a1 + 114) = v6 & 0xFFF6;
  return result;
}

uint64_t sub_1ACBF63C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32))
    sub_1ACBF2A04(a1);
  v3 = sub_1ACBE1124(v2, 0x38uLL);
  if (v3)
  {
    v4 = v3;
    if (v2 && *(_QWORD *)(v2 + 520) > v3)
    {
      if (*(_QWORD *)(v2 + 496) <= v3)
      {
        v5 = 128;
        goto LABEL_10;
      }
      if (*(_QWORD *)(v2 + 504) <= v3)
      {
        v5 = *(unsigned __int16 *)(v2 + 438);
        goto LABEL_10;
      }
    }
    v5 = off_1ECD3B178(v3);
LABEL_10:
    result = 0;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = v2;
    *(_QWORD *)(v4 + 32) = v4 + 56;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_WORD *)(v4 + 48) = (v5 - 56) / 0x18uLL;
    *(_WORD *)(v4 + 50) = 1;
    *(_DWORD *)(v4 + 52) = 0;
    *(_QWORD *)(a1 + 8) = v4;
    *(_WORD *)(a1 + 20) = 4112;
    *(_BYTE *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 48) = sub_1ACBFE220;
    return result;
  }
  return 7;
}

uint64_t sub_1ACBF64C8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = result;
  if (*(_WORD *)(result + 48))
  {
    v4 = *(_QWORD **)(result + 32);
    --*(_WORD *)(result + 48);
    *(_QWORD *)(result + 32) = v4 + 3;
    if (!v4)
      return result;
    goto LABEL_17;
  }
  result = *(_QWORD *)(result + 8);
  if (*(unsigned __int16 *)(result + 436) <= 0x3F7u)
  {
    if (*(_DWORD *)(result + 432))
    {
      if (*(_BYTE *)(result + 103))
        return result;
    }
    else
    {
      ++*(_DWORD *)(result + 452);
    }
LABEL_15:
    result = sub_1ACBE1300(result, 1016);
    v5 = (_QWORD *)result;
    if (!result)
      return result;
    goto LABEL_16;
  }
  v5 = *(_QWORD **)(result + 472);
  if (v5)
  {
    v6 = (_QWORD *)(result + 472);
  }
  else
  {
    v5 = *(_QWORD **)(result + 464);
    if (!v5)
    {
      ++*(_DWORD *)(result + 456);
      goto LABEL_15;
    }
    v6 = (_QWORD *)(result + 464);
  }
  *v6 = *v5;
  ++*(_DWORD *)(result + 448);
LABEL_16:
  *v5 = *(_QWORD *)v3;
  v7 = v5 + 4;
  *(_QWORD *)v3 = v5;
  v4 = v5 + 1;
  *(_WORD *)(v3 + 48) = 41;
  *(_QWORD *)(v3 + 32) = v7;
LABEL_17:
  *v4 = a2;
  v4[1] = 0;
  v8 = *(_QWORD **)(v3 + 24);
  if (v8)
  {
    if (*v8 >= a2)
      *(_WORD *)(v3 + 50) &= ~1u;
    v9 = v8 + 1;
  }
  else
  {
    v9 = (_QWORD *)(v3 + 16);
  }
  *v9 = v4;
  *(_QWORD *)(v3 + 24) = v4;
  return result;
}

uint64_t sub_1ACBF65E8(uint64_t a1, _QWORD *a2)
{
  __int16 v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;

  v4 = *(_WORD *)(a1 + 50);
  if ((v4 & 2) == 0)
  {
    if ((v4 & 1) == 0)
    {
      *(_QWORD *)(a1 + 16) = sub_1ACBFE274(*(_QWORD **)(a1 + 16));
      v4 = *(_WORD *)(a1 + 50);
    }
    *(_WORD *)(a1 + 50) = v4 | 3;
  }
  v6 = (_QWORD *)(a1 + 16);
  v5 = *(uint64_t **)(a1 + 16);
  if (!v5)
    return 0;
  v8 = *v5;
  v7 = v5[1];
  *a2 = v8;
  *v6 = v7;
  if (v7)
    return 1;
  v10 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      sub_1ACBE0F9C(*(_QWORD **)(a1 + 8), v10);
      v10 = v11;
    }
    while (v11);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(_QWORD *)(a1 + 40) = 0;
  result = 1;
  *v6 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1ACBF6694(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if (*(_DWORD *)(a1 + 52) == a2)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      goto LABEL_49;
    return 0;
  }
  v8 = (_QWORD *)(a1 + 16);
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = (_QWORD **)(a1 + 40);
    if ((*(_WORD *)(a1 + 50) & 1) == 0)
      v7 = sub_1ACBFE274(*(_QWORD **)(a1 + 16));
    while (1)
    {
      v16 = *v9;
      if (!*v9)
        break;
      v10 = v16[2];
      if (!v10)
      {
        v17 = v7[1];
        v7[1] = 0;
        v7[2] = 0;
        if (!v17)
        {
          v16[2] = v7;
          goto LABEL_45;
        }
        v18 = 1;
        do
        {
          v19 = (_QWORD *)v17;
          v29 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v17 + 16) = v7;
          *(_QWORD *)(v17 + 8) = sub_1ACBFE48C(&v29, v18++);
          v17 = v29;
          v7 = v19;
        }
        while (v29);
        goto LABEL_44;
      }
      v9 = (_QWORD **)(v16 + 1);
      v27 = 0;
      v28 = 0;
      sub_1ACBFE42C(v10, &v28, &v27);
      v16[2] = 0;
      v11 = v28;
      v29 = 0;
      v30 = 0;
      v12 = &v29;
      v31 = 0;
      do
      {
        v13 = *v11;
        v14 = v7;
        while (1)
        {
          v7 = v14;
          v15 = *v14;
          if (v13 <= v15)
            break;
          v12[1] = (uint64_t)v7;
          v14 = (_QWORD *)v7[1];
          v12 = v7;
          if (!v14)
          {
            v12 = v7;
            v7 = v11;
            goto LABEL_16;
          }
        }
        if (v13 < v15)
        {
          v12[1] = (uint64_t)v11;
          v12 = v11;
        }
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
LABEL_16:
      v12[1] = (uint64_t)v7;
      v7 = v30;
    }
    if (*(_WORD *)(a1 + 48))
    {
      v16 = *(_QWORD **)(a1 + 32);
      --*(_WORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v16 + 3;
      *v9 = v16;
      if (!v16)
        goto LABEL_45;
      goto LABEL_39;
    }
    v20 = *(_QWORD *)(a1 + 8);
    if (*(unsigned __int16 *)(v20 + 436) <= 0x3F7u)
    {
      if (*(_DWORD *)(v20 + 432))
      {
        if (*(_BYTE *)(v20 + 103))
        {
LABEL_57:
          *v9 = 0;
LABEL_45:
          *v8 = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_WORD *)(a1 + 50) |= 1u;
          goto LABEL_46;
        }
      }
      else
      {
        ++*(_DWORD *)(v20 + 452);
      }
LABEL_37:
      v21 = (_QWORD *)sub_1ACBE1300(v20, 1016);
      if (v21)
        goto LABEL_38;
      goto LABEL_57;
    }
    v21 = *(_QWORD **)(v20 + 472);
    if (v21)
    {
      v22 = (_QWORD *)(v20 + 472);
    }
    else
    {
      v21 = *(_QWORD **)(v20 + 464);
      if (!v21)
      {
        ++*(_DWORD *)(v20 + 456);
        goto LABEL_37;
      }
      v22 = (_QWORD *)(v20 + 464);
    }
    *v22 = *v21;
    ++*(_DWORD *)(v20 + 448);
LABEL_38:
    *v21 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v21;
    v16 = v21 + 1;
    *(_WORD *)(a1 + 48) = 41;
    *(_QWORD *)(a1 + 32) = v21 + 4;
    *v9 = v21 + 1;
LABEL_39:
    *v16 = 0;
    v16[1] = 0;
    v23 = v7[1];
    v7[1] = 0;
    v7[2] = 0;
    if (v23)
    {
      v24 = 1;
      do
      {
        v19 = (_QWORD *)v23;
        v29 = *(_QWORD *)(v23 + 8);
        *(_QWORD *)(v23 + 16) = v7;
        *(_QWORD *)(v23 + 8) = sub_1ACBFE48C(&v29, v24++);
        v23 = v29;
        v7 = v19;
      }
      while (v29);
    }
    else
    {
      v19 = v7;
    }
LABEL_44:
    v16[2] = v19;
    goto LABEL_45;
  }
LABEL_46:
  *(_DWORD *)(a1 + 52) = a2;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 0;
LABEL_49:
  while (1)
  {
    v26 = *(_QWORD **)(v5 + 16);
    if (v26)
      break;
LABEL_48:
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      return 0;
  }
  while (1)
  {
    while (*v26 < a3)
    {
      v26 = (_QWORD *)v26[1];
      if (!v26)
        goto LABEL_48;
    }
    if (*v26 <= a3)
      return 1;
    v26 = (_QWORD *)v26[2];
    if (!v26)
      goto LABEL_48;
  }
}

_QWORD *sub_1ACBF6980(_QWORD *result)
{
  uint64_t v1;

  v1 = *result;
  result[1] = *(_QWORD *)(*result + 360);
  *(_QWORD *)(v1 + 360) = result;
  return result;
}

uint64_t sub_1ACBF6994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  BOOL v19;

  v4 = *(_QWORD *)(a1 + 344);
  if (v4)
    goto LABEL_2;
  v11 = *(unsigned __int8 *)(a1 + 22);
  if (v11 == 5 || v11 == 0)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      if (v11 == 5)
        goto LABEL_21;
    }
    else
    {
      v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 1);
      if ((_DWORD)v15)
        return v15;
      if (*(_BYTE *)(a1 + 22) == 5)
        goto LABEL_21;
    }
    *(_BYTE *)(a1 + 22) = 1;
  }
LABEL_21:
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 56))();
  if ((_DWORD)v7)
    return v7;
  v4 = *(_QWORD *)(a1 + 344);
  if (!v4)
    return 0;
LABEL_2:
  v5 = *(unsigned __int8 *)(a1 + 22);
  if (v5 < 4 || (_DWORD)v5 == 5)
  {
    if (!*(_BYTE *)(a1 + 17))
    {
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 4);
      if ((_DWORD)v13)
      {
        v7 = v13;
        v14 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)v14)
        {
          if (!*(_BYTE *)(a1 + 17))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 64))(v14, v5);
          if (*(_BYTE *)(a1 + 22) != 5)
            *(_BYTE *)(a1 + 22) = v5;
        }
        goto LABEL_47;
      }
      v4 = *(_QWORD *)(a1 + 344);
    }
    *(_BYTE *)(a1 + 22) = 4;
  }
  v7 = sub_1ACBA488C(v4, a2, *(unsigned __int8 *)(a1 + 15), *(_DWORD *)(a1 + 200), *(_QWORD *)(a1 + 328));
  *(_QWORD *)(a1 + 344) = 0;
  v8 = **(_QWORD **)(a1 + 72);
  if (v8 && *(int *)v8 >= 3)
  {
    v9 = *(_QWORD *)(a1 + 160);
    *(_BYTE *)(a1 + 27) = v9 > 0;
    if (*(_DWORD *)(a1 + 48))
    {
      v10 = sub_1ACBEBC4C;
    }
    else if (v9 < 1 || *(_QWORD *)(a1 + 296))
    {
      v10 = sub_1ACBEBEA8;
    }
    else
    {
      v10 = sub_1ACBEBC58;
    }
    *(_QWORD *)(a1 + 288) = v10;
    (*(void (**)(void))(v8 + 80))();
  }
  if ((_DWORD)v7)
  {
    if (!*(_BYTE *)(a1 + 8))
      goto LABEL_42;
    return v7;
  }
  v17 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 48);
  if (!v17)
    return 0;
  v18 = v17();
  v7 = 0;
  if ((_DWORD)v18)
    v19 = (_DWORD)v18 == 5898;
  else
    v19 = 1;
  if (!v19)
  {
    v7 = v18;
    if (!*(_BYTE *)(a1 + 8))
    {
LABEL_42:
      v16 = *(_QWORD *)(a1 + 72);
      if (*(_QWORD *)v16)
      {
        if (!*(_BYTE *)(a1 + 17))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v16, 1);
        if (*(_BYTE *)(a1 + 22) != 5)
          *(_BYTE *)(a1 + 22) = 1;
      }
LABEL_47:
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
    }
  }
  return v7;
}

uint64_t sub_1ACBF6C0C(uint64_t a1, int a2)
{
  int v3;
  BOOL v4;
  BOOL v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  void (*v15)(void);
  uint64_t v16;

  v3 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 19))
    v4 = a2 == 4;
  else
    v4 = 1;
  if (!v4 && a2 != 2 || v3 == a2)
    return *(unsigned __int8 *)(a1 + 9);
  *(_BYTE *)(a1 + 9) = a2;
  if ((a2 & 1) != 0 || ((v3 & 5) == 1 ? (v8 = *(_BYTE *)(a1 + 8) == 0) : (v8 = 0), !v8))
  {
    if (a2 == 2)
    {
      v11 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)v11)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v11 + 8))(*(_QWORD *)(a1 + 80));
        *(_QWORD *)v11 = 0;
      }
    }
    return *(unsigned __int8 *)(a1 + 9);
  }
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)v9)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v9 + 8))(*(_QWORD *)(a1 + 80));
    *(_QWORD *)v9 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 22) >= 2u)
  {
    v10 = *(void (**)(void))(*(_QWORD *)a1 + 48);
    if (v10)
      v10();
    return *(unsigned __int8 *)(a1 + 9);
  }
  v12 = *(unsigned __int8 *)(a1 + 21);
  if (*(_BYTE *)(a1 + 21))
  {
    if (v12 != 1)
      goto LABEL_40;
  }
  else
  {
    v13 = sub_1ACB69590(a1);
    if (*(_BYTE *)(a1 + 21) != 1)
    {
      if (v13)
        goto LABEL_50;
      goto LABEL_40;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + 22);
  if (v14 <= 5 && ((1 << v14) & 0x23) != 0)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      if (v14 == 5)
        goto LABEL_40;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 2))
        goto LABEL_49;
      if (*(_BYTE *)(a1 + 22) == 5)
        goto LABEL_40;
    }
    *(_BYTE *)(a1 + 22) = 2;
  }
LABEL_40:
  v15 = *(void (**)(void))(*(_QWORD *)a1 + 48);
  if (v15)
    v15();
  if (v12 != 1)
  {
LABEL_49:
    if (v12)
      return *(unsigned __int8 *)(a1 + 9);
LABEL_50:
    sub_1ACB90304(a1);
    return *(unsigned __int8 *)(a1 + 9);
  }
  v16 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)v16)
  {
    if (!*(_BYTE *)(a1 + 17))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v16, 1);
    if (*(_BYTE *)(a1 + 22) != 5)
      *(_BYTE *)(a1 + 22) = 1;
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a1 + 16);
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_1ACBF6DD4(char **a1, uint64_t a2, int a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  double v65;
  int *v67;
  int8x8_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  unsigned __int8 v92;
  int v93;
  int8x8_t v94;
  char v95;
  uint64_t v96;
  char v97;
  char v98;
  _BOOL4 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  unsigned int v103;
  uint64_t v104;

  if (!*(_BYTE *)(a2 + 101))
  {
    v8 = (char *)sub_1ACBE1124(a2, 0x28uLL);
    v7 = v8;
    if (v8)
      strcpy(v8, "cannot VACUUM from within a transaction");
    goto LABEL_11;
  }
  if (*(int *)(a2 + 208) >= 2)
  {
    v6 = (char *)sub_1ACBE1124(a2, 0x2BuLL);
    v7 = v6;
    if (v6)
      strcpy(v6, "cannot VACUUM - SQL statements in progress");
LABEL_11:
    if (*a1)
      sub_1ACBE0F9C((_QWORD *)a2, *a1);
    *a1 = v7;
    return 1;
  }
  v11 = *(_DWORD *)(a2 + 76);
  if (!a4)
  {
    v15 = &byte_1ACCBEAEE;
    goto LABEL_23;
  }
  v12 = *(unsigned __int16 *)(a4 + 20);
  if (((0x4000000040004uLL >> v12) & 1) == 0)
  {
    v13 = (char *)sub_1ACBE1124(a2, 0x12uLL);
    v7 = v13;
    if (v13)
      strcpy(v13, "non-text filename");
    goto LABEL_11;
  }
  if ((~v12 & 0x202) == 0 && *(_BYTE *)(a4 + 22) == 1)
  {
    v15 = *(const char **)(a4 + 8);
LABEL_21:
    v16 = *(_DWORD *)(a2 + 76);
    goto LABEL_22;
  }
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    goto LABEL_21;
  }
  v15 = (const char *)sub_1ACBF2B64((int *)a4, 1);
  v16 = *(_DWORD *)(a2 + 76);
LABEL_22:
  *(_DWORD *)(a2 + 76) = v16 & 0xFFFFFFF8 | 6;
LABEL_23:
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_DWORD *)(a2 + 44);
  v102 = *(_OWORD *)(a2 + 120);
  v101 = *(_BYTE *)(a2 + 110);
  *(_DWORD *)(a2 + 44) = v18 | 6;
  *(_QWORD *)(a2 + 48) = v17 & 0xFFFFFFFEEFFFADFELL | 0x201;
  *(_BYTE *)(a2 + 110) = 0;
  v19 = a3;
  v20 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 32 * a3);
  v21 = v20[1];
  v22 = **(_QWORD **)(v21 + 8);
  v100 = v17;
  if (*(_BYTE *)(v22 + 16))
    v23 = 1;
  else
    v23 = *(unsigned __int8 *)(v22 + 20) != 0;
  v99 = v23;
  v24 = *v20;
  v25 = *(int *)(a2 + 40);
  if (access(v15, 0) != -1)
  {
    v31 = (char *)sub_1ACBE1124(a2, 0x1BuLL);
    v32 = v31;
    if (v31)
      strcpy(v31, "output file already exists");
    if (*a1)
      sub_1ACBE0F9C((_QWORD *)a2, *a1);
    v33 = 0;
    *a1 = v32;
    v14 = 1;
    goto LABEL_75;
  }
  v97 = v24;
  v98 = v25;
  v34 = sub_1ACBFE508((sqlite3 *)a2, (_QWORD **)a1, "ATTACH %Q AS vacuum_db", v26, v27, v28, v29, v30, (char)v15);
  *(_DWORD *)(a2 + 76) = v11;
  if ((_DWORD)v34)
  {
    v14 = v34;
    v33 = 0;
    goto LABEL_75;
  }
  v35 = *(_QWORD *)(a2 + 32);
  v33 = v35 + 32 * v25;
  v96 = *(_QWORD *)(v33 + 8);
  if (a4)
  {
    v36 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v33 + 8) + 8) + 72);
    v104 = 0;
    if (*(_QWORD *)v36)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 48))(v36, &v104))
        v37 = 0;
      else
        v37 = v104 <= 0;
      if (!v37)
      {
        sub_1ACBB5DA0((_QWORD **)a1, (_QWORD *)a2, "output file already exists");
        v14 = 1;
        goto LABEL_75;
      }
      v35 = *(_QWORD *)(a2 + 32);
    }
    v39 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 44) |= 8u;
    v38 = v39 & 0x38 | *(_BYTE *)(v35 + 32 * v19 + 16);
  }
  else
  {
    v38 = 1;
  }
  v95 = v38;
  if (*(_BYTE *)(v21 + 17))
  {
    v40 = *(_DWORD *)(v21 + 20) + 1;
    *(_DWORD *)(v21 + 20) = v40;
    if (*(_BYTE *)(v21 + 18))
    {
      v41 = *(_QWORD *)(v21 + 8);
      v42 = *(unsigned __int8 *)(v41 + 38);
      v43 = *(_DWORD *)(v41 + 52);
      v44 = *(_DWORD *)(v41 + 56);
      goto LABEL_50;
    }
    sub_1ACBECF6C(v21);
    v46 = *(_QWORD *)(v21 + 8);
    v42 = *(unsigned __int8 *)(v46 + 38);
    v43 = *(_DWORD *)(v46 + 52);
    v44 = *(_DWORD *)(v46 + 56);
    if (*(_BYTE *)(v21 + 17))
    {
      v40 = *(_DWORD *)(v21 + 20);
LABEL_50:
      v47 = v40 - 1;
      *(_DWORD *)(v21 + 20) = v47;
      if (!v47)
      {
        v48 = v43;
        sub_1ACBED048(v21);
        v43 = v48;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v21 + 8);
    v42 = *(unsigned __int8 *)(v45 + 38);
    v43 = *(_DWORD *)(v45 + 52);
    v44 = *(_DWORD *)(v45 + 56);
  }
  if (v43 - v44 <= v42)
    v49 = v42;
  else
    v49 = v43 - v44;
  v50 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 116))
  {
    v51 = *(_BYTE **)(**(_QWORD **)(*(_QWORD *)(v50 + 32 * v19 + 8) + 8) + 320);
    if (v51)
    {
      if (*v51)
        *(_DWORD *)(a2 + 116) = 0;
    }
  }
  sub_1ACBE9680(v96, (_DWORD *)(*(_QWORD *)(v50 + 32 * v19 + 24) + 116));
  v52 = *(_QWORD *)(v21 + 8);
  if (*(_BYTE *)(v21 + 17))
  {
    ++*(_DWORD *)(v21 + 20);
    if (!*(_BYTE *)(v21 + 18))
      sub_1ACBECF6C(v21);
  }
  v53 = *(_DWORD **)(*(_QWORD *)v52 + 336);
  LODWORD(v52) = v53[8];
  if ((v52 & 0x80000000) != 0)
  {
    v54 = (int)v53[11];
    if (-1024 * (int)v52 / (v54 + (int)v53[10]) >= 1000000000)
      LODWORD(v52) = 1000000000;
    else
      v52 = -1024 * (int)v52 / (v54 + (int)v53[10]);
  }
  v55 = v53[9];
  if (*(_BYTE *)(v21 + 17))
  {
    v56 = *(_DWORD *)(v21 + 20) - 1;
    *(_DWORD *)(v21 + 20) = v56;
    if (!v56)
      sub_1ACBED048(v21);
  }
  if ((int)v52 <= v55)
    v57 = v55;
  else
    v57 = v52;
  sub_1ACBE9A60(v96, v57);
  sub_1ACBFE584(v96, v95 | 0x20);
  v63 = sub_1ACBFE6B4((sqlite3 *)a2, (_QWORD **)a1, "BEGIN", v58, v59, v60, v61, v62);
  if (!(_DWORD)v63)
  {
    v63 = sub_1ACB69520(v21, 2 * (a4 == 0), 0);
    if (!(_DWORD)v63)
    {
      v67 = *(int **)(v21 + 8);
      if (!a4 && *(_BYTE *)(*(_QWORD *)v67 + 9) == 5)
        *(_DWORD *)(a2 + 116) = 0;
      if (sub_1ACBB5FAC(v96, v67[13], v49, 0, v64)
        || !v99 && sub_1ACBB5FAC(v96, *(_DWORD *)(a2 + 116), v49, 0, v68)
        || *(_BYTE *)(a2 + 103))
      {
        v14 = 7;
        goto LABEL_75;
      }
      if (*(char *)(a2 + 106) < 0)
        v69 = sub_1ACBFE8E0(v21);
      else
        v69 = *(_BYTE *)(a2 + 106);
      sub_1ACBFE820(v96, v69);
      *(_BYTE *)(a2 + 196) = v98;
      v63 = sub_1ACBFE508((sqlite3 *)a2, (_QWORD **)a1, "SELECT sql FROM \"%w\".sqlite_schema WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0", v70, v71, v72, v73, v74, v97);
      if (!(_DWORD)v63)
      {
        v63 = sub_1ACBFE508((sqlite3 *)a2, (_QWORD **)a1, "SELECT sql FROM \"%w\".sqlite_schema WHERE type='index'", v75, v76, v77, v78, v79, v97);
        if (!(_DWORD)v63)
        {
          *(_BYTE *)(a2 + 196) = 0;
          v63 = sub_1ACBFE508((sqlite3 *)a2, (_QWORD **)a1, "SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM\"%w\".'||quote(name)FROM vacuum_db.sqlite_schema WHERE type='table'AND coalesce(rootpage,1)>0", v80, v81, v82, v83, v84, v97);
          *(_DWORD *)(a2 + 44) &= ~4u;
          if (!(_DWORD)v63)
          {
            v63 = sub_1ACBFE508((sqlite3 *)a2, (_QWORD **)a1, "INSERT INTO vacuum_db.sqlite_schema SELECT*FROM \"%w\".sqlite_schema WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)", v85, v86, v87, v88, v89, v97);
            if (!(_DWORD)v63)
            {
              v103 = 0;
              sub_1ACBF4570(v21, 1, (int *)&v103);
              v14 = sub_1ACBC4E30(v96, 1, v103 + 1);
              if ((_DWORD)v14)
                goto LABEL_75;
              sub_1ACBF4570(v21, 3, (int *)&v103);
              v14 = sub_1ACBC4E30(v96, 3, v103);
              if ((_DWORD)v14)
                goto LABEL_75;
              sub_1ACBF4570(v21, 5, (int *)&v103);
              v14 = sub_1ACBC4E30(v96, 5, v103);
              if ((_DWORD)v14)
                goto LABEL_75;
              sub_1ACBF4570(v21, 6, (int *)&v103);
              v14 = sub_1ACBC4E30(v96, 6, v103);
              if ((_DWORD)v14)
                goto LABEL_75;
              sub_1ACBF4570(v21, 8, (int *)&v103);
              v14 = sub_1ACBC4E30(v96, 8, v103);
              if ((_DWORD)v14)
                goto LABEL_75;
              if (a4)
              {
                v63 = sub_1ACBD5E58(v96, v90);
              }
              else
              {
                v14 = sub_1ACBFE970(v21, v96);
                if ((_DWORD)v14)
                  goto LABEL_75;
                v63 = sub_1ACBD5E58(v96, v91);
                if (!(_DWORD)v63)
                {
                  v92 = sub_1ACBFE8E0(v96);
                  sub_1ACBFE820(v21, v92);
                  v93 = sub_1ACBD2A10(v96);
                  v63 = sub_1ACBB5FAC(v21, *(_DWORD *)(*(_QWORD *)(v96 + 8) + 52), v93, 1, v94);
                }
              }
            }
          }
        }
      }
    }
  }
  v14 = v63;
LABEL_75:
  *(_BYTE *)(a2 + 196) = 0;
  *(_DWORD *)(a2 + 44) = v18;
  *(_QWORD *)(a2 + 48) = v100;
  *(_OWORD *)(a2 + 120) = v102;
  *(_BYTE *)(a2 + 110) = v101;
  sub_1ACBB5FAC(v21, -1, 0, 1, *(int8x8_t *)&v102);
  *(_BYTE *)(a2 + 101) = 1;
  if (v33)
  {
    sub_1ACBA3F80(*(_QWORD *)(v33 + 8), v65);
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 24) = 0;
  }
  sub_1ACBC4F54(a2);
  return v14;
}

uint64_t sub_1ACBF7550(uint64_t a1, int a2, char a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  if (!*(_BYTE *)(a1 + 17))
    return 0;
  v5 = a3 + 1;
  ++*(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(a1 + 18))
  {
    v6 = *(_QWORD *)(a1 + 8);
    goto LABEL_6;
  }
  sub_1ACBECF6C(a1);
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_6:
    if (*(_QWORD *)(v6 + 128) != a1 && (*(_WORD *)(v6 + 40) & 0x40) != 0)
      goto LABEL_16;
    v9 = (uint64_t *)(v6 + 120);
    v8 = *(_QWORD *)(v6 + 120);
    if (v8)
    {
      v10 = *(_QWORD *)(v6 + 120);
      while (*(_QWORD *)v10 == a1 || *(_DWORD *)(v10 + 8) != a2 || *(unsigned __int8 *)(v10 + 12) == v5)
      {
        v10 = *(_QWORD *)(v10 + 16);
        if (!v10)
          goto LABEL_19;
      }
      if (v5 == 2)
        *(_WORD *)(v6 + 40) |= 0x80u;
LABEL_16:
      v7 = 262;
      if (!*(_BYTE *)(a1 + 17))
        return v7;
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  v8 = *(_QWORD *)(v6 + 120);
LABEL_19:
  v9 = (uint64_t *)(v6 + 120);
  if (!v8)
  {
LABEL_20:
    v8 = sub_1ACB5D828(24);
    if (!v8)
    {
      v7 = 7;
      if (!*(_BYTE *)(a1 + 17))
        return v7;
      goto LABEL_31;
    }
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 8) = a2;
    *(_QWORD *)v8 = a1;
    *(_QWORD *)(v8 + 16) = *v9;
    *v9 = v8;
    goto LABEL_25;
  }
  while (*(_DWORD *)(v8 + 8) != a2 || *(_QWORD *)v8 != a1)
  {
    v8 = *(_QWORD *)(v8 + 16);
    if (!v8)
      goto LABEL_20;
  }
LABEL_25:
  if (*(unsigned __int8 *)(v8 + 12) >= v5)
  {
    v7 = 0;
    if (!*(_BYTE *)(a1 + 17))
      return v7;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)(v8 + 12) = v5;
    if (!*(_BYTE *)(a1 + 17))
      return v7;
  }
LABEL_31:
  v11 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v11;
  if (!v11)
    sub_1ACBED048(a1);
  return v7;
}

void sub_1ACBF76E8(uint64_t a1, int a2, char *a3, void **a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  _QWORD *v24;
  _DWORD *v25;
  _BYTE *v26;
  unsigned __int8 *i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_1ACBD1B0C(a1, a3, *(_BYTE **)(*(_QWORD *)(a1 + 32) + 32 * a2));
  v12 = v6;
  v13 = **(_BYTE ***)(v6 + 72);
  v14 = *(_QWORD *)(a1 + 584);
  if (v14)
  {
    v15 = *v13;
    if (*v13)
    {
      v16 = 0;
      v17 = v13 + 1;
      do
      {
        v16 = -1640531535 * (v16 + byte_1ACCB6333[v15]);
        v18 = *v17++;
        v15 = v18;
      }
      while (v18);
    }
    else
    {
      v16 = 0;
    }
    v25 = (_DWORD *)(v14 + 16 * (v16 % *(_DWORD *)(a1 + 568)));
    v19 = (uint64_t *)(v25 + 2);
    v20 = *v25;
    if (v20)
    {
      while (1)
      {
LABEL_20:
        v19 = (uint64_t *)*v19;
        v26 = (_BYTE *)v19[3];
        for (i = **(unsigned __int8 ***)(v6 + 72); ; ++i)
        {
          v28 = *v26;
          v29 = *i;
          if ((_DWORD)v28 != (_DWORD)v29)
            break;
          if (!*v26)
            goto LABEL_8;
LABEL_22:
          ++v26;
        }
        if (byte_1ACCB6333[v28] == byte_1ACCB6333[v29])
          goto LABEL_22;
        if (!--v20)
        {
          v19 = &qword_1EECAD260;
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    v19 = (uint64_t *)(a1 + 576);
    v20 = *(_DWORD *)(a1 + 572);
    if (v20)
      goto LABEL_20;
  }
  v19 = &qword_1EECAD260;
LABEL_8:
  v21 = v19[2];
  if (v21
    && (v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21 + 8)) != 0
    && *(_QWORD *)(*(_QWORD *)v21 + 40))
  {
    if (!sub_1ACBFEC54(a1, v6, v21, v7, a4, v9, v10, v11))
    {
      v24 = *(_QWORD **)(v12 + 80);
      v23 = (uint64_t **)(v12 + 80);
      v22 = v24;
      if (v24)
      {
        while (*v22 != a1)
        {
          v22 = (_QWORD *)v22[5];
          if (!v22)
            return;
        }
        sub_1ACBFEB74(a1);
        if (!v30)
        {
          do
          {
            v31 = *v23;
            v32 = *v23;
            v33 = *v32;
            v23 = (uint64_t **)(v32 + 5);
          }
          while (v33 != a1);
          v34 = *(_QWORD *)(a1 + 600);
          v35 = *(int *)(a1 + 564);
          *(_DWORD *)(a1 + 564) = v35 + 1;
          *(_QWORD *)(v34 + 8 * v35) = v31;
          ++*((_DWORD *)v31 + 6);
        }
      }
    }
  }
  else
  {
    *a4 = sub_1ACB6DDD0(a1, "no such module: %s", v21, (uint64_t)v7, v8, v9, v10, v11, **(_QWORD **)(v6 + 72));
  }
}

uint64_t sub_1ACBF78CC(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

uint64_t sub_1ACBF7980(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)a1);
  *(_WORD *)(a1 + 20) = 4;
  return a1;
}

void sub_1ACBF79C0(uint64_t a1, __int128 *a2, __int16 a3)
{
  __int128 v6;

  do
    sub_1ACBF2A54((int *)a1);
  while ((*(_WORD *)(a1 + 20) & 0x9000) != 0);
  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  if ((*((_BYTE *)a2 + 21) & 0x20) == 0)
    *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0x8FFF | a3;
}

uint64_t sub_1ACBF7A2C(int *a1)
{
  __int16 v2;
  int v3;
  signed int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v2 = *((_WORD *)a1 + 10);
  v3 = a1[4];
  if ((v2 & 0x400) != 0)
  {
    v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      v4 = 1;
    }
    if (sub_1ACB7E454((uint64_t)a1, v4, 1))
    {
      v5 = 0;
LABEL_16:
      *(_QWORD *)a1 = v5;
      return 4;
    }
    bzero((void *)(*((_QWORD *)a1 + 1) + a1[4]), *a1);
    v3 = a1[4] + *a1;
    a1[4] = v3;
    *((_WORD *)a1 + 10) &= 0xF9FFu;
  }
LABEL_9:
  v8 = 0;
  v6 = sub_1ACBA6B1C(*((unsigned __int8 **)a1 + 1), (double *)a1, v3, *((unsigned __int8 *)a1 + 22));
  if (v6 <= 0)
  {
    if (!v6 && (int)sub_1ACBF2FF8(*((unsigned __int8 **)a1 + 1), &v8, a1[4], *((unsigned __int8 *)a1 + 22)) <= 1)
      goto LABEL_15;
  }
  else if (v6 == 1
         && !sub_1ACBF2FF8(*((unsigned __int8 **)a1 + 1), &v8, a1[4], *((unsigned __int8 *)a1 + 22)))
  {
LABEL_15:
    v5 = v8;
    goto LABEL_16;
  }
  return 8;
}

uint64_t sub_1ACBF7B2C(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_WORD *)(result + 20);
  if ((v2 & 0x2D) == 0)
  {
    v7 = 0;
    result = sub_1ACBA6B1C(*(unsigned __int8 **)(result + 8), (double *)result, *(_DWORD *)(result + 16), *(unsigned __int8 *)(result + 22));
    if (result > 1
      || (result = sub_1ACBF2FF8(*(unsigned __int8 **)(v1 + 8), &v7, *(_DWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 22)), (int)result > 1))
    {
      v4 = *(double *)v1;
      v3 = 0x8000000000000000;
      v5 = 0x7FFFFFFFFFFFFFFFLL;
      if (*(double *)v1 <= 9.22337204e18)
        v5 = (uint64_t)*(double *)v1;
      if (v4 >= -9.22337204e18)
        v3 = v5;
      if (v4 != 0.0)
      {
        v6 = 8;
        if ((unint64_t)(v3 - 0x8000000000000) >> 52 != 4095 || *(_QWORD *)&v4 != COERCE__INT64((double)v3))
          goto LABEL_13;
      }
    }
    else
    {
      v3 = v7;
    }
    *(_QWORD *)v1 = v3;
    v6 = 4;
LABEL_13:
    v2 = *(_WORD *)(v1 + 20) & 0xF240 | v6;
  }
  *(_WORD *)(v1 + 20) = v2 & 0xFBED;
  return result;
}

uint64_t sub_1ACBF7C2C(__int128 *a1, __int128 *a2, uint64_t a3, _BYTE *a4)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v6 = *(unsigned __int8 *)(a3 + 8);
  if (*((unsigned __int8 *)a1 + 22) == v6)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a3 + 24))(*(_QWORD *)(a3 + 16), *((unsigned int *)a1 + 4), *((_QWORD *)a1 + 1), *((unsigned int *)a2 + 4), *((_QWORD *)a2 + 1));
  v22 = 0u;
  v23 = 0u;
  v17 = 0u;
  v18 = 0u;
  v10 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  LODWORD(v22) = 0;
  v16 = v9;
  v19 = *a1;
  v20 = v10;
  v21 = v9;
  if ((*((_BYTE *)a1 + 21) & 0x20) == 0)
    WORD2(v20) = WORD2(v20) & 0x8FFF | 0x4000;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  if ((*((_BYTE *)a2 + 21) & 0x20) == 0)
    WORD2(v15) = WORD2(v15) & 0x8FFF | 0x4000;
  if ((~WORD2(v20) & 0x202) != 0 || BYTE6(v20) != v6)
  {
    if ((v20 & 0x100000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_1ACBF2B64((int *)&v19, v6);
      v6 = *(unsigned __int8 *)(a3 + 8);
    }
  }
  else
  {
    v11 = *((_QWORD *)&v19 + 1);
  }
  if ((~WORD2(v15) & 0x202) != 0 || BYTE6(v15) != v6)
  {
    if ((v15 & 0x100000000) != 0 || (v12 = sub_1ACBF2B64((int *)&v14, v6), !v11))
    {
LABEL_21:
      v13 = 0;
      if (a4)
        *a4 = 7;
      goto LABEL_23;
    }
  }
  else
  {
    v12 = *((_QWORD *)&v14 + 1);
    if (!v11)
      goto LABEL_21;
  }
  if (!v12)
    goto LABEL_21;
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a3 + 24))(*(_QWORD *)(a3 + 16), v20, v11, v15);
LABEL_23:
  if ((_DWORD)v22)
    sub_1ACBF2A04((uint64_t)&v19);
  if ((_DWORD)v17)
    sub_1ACBF2A04((uint64_t)&v14);
  return v13;
}

uint64_t sub_1ACBF7DD0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  const void *v6;
  const void *v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(unsigned __int16 *)(a1 + 20);
  v5 = *(unsigned __int16 *)(a2 + 20);
  if (((v5 | v4) & 0x400) != 0)
  {
    v10 = v4 & 0x400;
    if ((v10 & v5) != 0)
    {
      return (*(_DWORD *)a1 - *(_DWORD *)a2);
    }
    else if (v10)
    {
      if (v3 < 1)
      {
        return (*(_DWORD *)a1 - v3);
      }
      else
      {
        v14 = *(unsigned __int8 **)(a2 + 8);
        v15 = *(unsigned int *)(a2 + 16);
        while (!*v14++)
        {
          if (!--v15)
            return (*(_DWORD *)a1 - v3);
        }
        return 0xFFFFFFFFLL;
      }
    }
    else if (v2 < 1)
    {
      return (v2 - *(_DWORD *)a2);
    }
    else
    {
      v11 = *(unsigned __int8 **)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16);
      while (!*v11++)
      {
        if (!--v12)
          return (v2 - *(_DWORD *)a2);
      }
      return 1;
    }
  }
  else
  {
    v6 = *(const void **)(a1 + 8);
    v7 = *(const void **)(a2 + 8);
    v8 = v2 - v3;
    if (v2 >= v3)
      v2 = v3;
    LODWORD(result) = memcmp(v6, v7, v2);
    if ((_DWORD)result)
      return result;
    else
      return v8;
  }
}

uint64_t sub_1ACBF7EA8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  int v5;

  v5 = 0;
  if (*(_BYTE *)a1 == 4)
    return *(unsigned int *)(a1 + 4);
  *(_BYTE *)a1 = 1;
  if (off_1ECD3B2E0 && off_1ECD3B2E0(410))
    return 10;
  result = sub_1ACB9E38C(a1, *(char **)(a1 + 24), *(_QWORD *)(a1 + 72), 0, &v5);
  if ((_DWORD)result)
    return result;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_14;
      v4 = &xmmword_1ECD3B1D0;
    }
    (*v4)(v3);
  }
LABEL_14:
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    *(_DWORD *)(a1 + 4) = v5;
  }
  else if (!*(_DWORD *)(a1 + 4))
  {
    return 0;
  }
  if (*(_BYTE *)a1)
    return 0;
  result = 0;
  *(_BYTE *)a1 = 2;
  return result;
}

uint64_t sub_1ACBF7FF0(_QWORD *a1)
{
  sub_1ACBEF184((uint64_t)a1);
  return a1[7] - *(_QWORD *)(a1[17] + 80) + (*(unsigned int *)(a1[17] + 4) - 1) * *(unsigned int *)(a1[4] + 52);
}

uint64_t sub_1ACBF8034(int8x8_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64x2_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x8_t *v12;
  unint64_t v13;
  _BYTE *v14;
  int8x8_t *v15;
  int8x8_t v16;
  __int8 *v17;
  __int8 v18;
  _BYTE v20[10];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = HIBYTE(a2);
  if (HIBYTE(a2))
  {
    a1[1].i8[0] = a2;
    v6 = (uint64x2_t)vdupq_n_s64(a2);
    *a1 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1ACCBDD10), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1ACCBDD00)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1ACCBDD30), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1ACCBDD20)))), (int8x8_t)0x8080808080808080);
    return 9;
  }
  do
  {
    v20[v2++] = a2 | 0x80;
    v3 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v3);
  v20[0] &= ~0x80u;
  if (v2 < 8)
  {
    v4 = 0;
    v5 = v2 - 1;
    goto LABEL_17;
  }
  if (v2 >= 0x20)
  {
    v7 = (int8x16_t *)&v20[v2 - 16];
    v4 = v2 & 0x7FFFFFE0;
    v8 = (int8x16_t *)&a1[2];
    v9 = v2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v10 = vrev64q_s8(*v7);
      v11 = vrev64q_s8(v7[-1]);
      v8[-1] = vextq_s8(v10, v10, 8uLL);
      *v8 = vextq_s8(v11, v11, 8uLL);
      v8 += 2;
      v7 -= 2;
      v9 -= 32;
    }
    while (v9);
    if (v2 == v4)
      return v2;
    if ((v2 & 0x18) == 0)
    {
      v5 = (~v2 | 0x1F) + v2;
LABEL_17:
      v17 = &v20[v5];
      do
      {
        v18 = *v17--;
        a1->i8[v4++] = v18;
      }
      while (v2 != v4);
      return v2;
    }
  }
  else
  {
    v4 = 0;
  }
  v12 = (int8x8_t *)((char *)a1 + v4);
  v13 = v4 - (v2 & 0xFFFFFFFFFFFFFFF8);
  v14 = &v20[-v4];
  v4 = v2 & 0x7FFFFFF8;
  v5 = ~(v2 & 0xFFFFFFFFFFFFFFF8) + v2;
  v15 = (int8x8_t *)&v14[v2 - 8];
  do
  {
    v16 = *v15--;
    *v12++ = vrev64_s8(v16);
    v13 += 8;
  }
  while (v13);
  if (v2 != v4)
    goto LABEL_17;
  return v2;
}

uint64_t sub_1ACBF81EC(_DWORD *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1[16] >= a2)
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
    if ((_DWORD)v7)
    {
      v8 = v7;
      *a3 = 0;
    }
    else
    {
      v9 = MEMORY[0x10];
      if (*MEMORY[0x10])
        goto LABEL_6;
      if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
      {
        v10 = MEMORY[8];
        *(_QWORD *)(MEMORY[0x10] + 112) = 0;
        *(_QWORD *)(v9 + 72) = a1;
        *(_QWORD *)(v9 + 80) = v10;
        *(_DWORD *)(v9 + 4) = a2;
        if (a2 == 1)
          v11 = 100;
        else
          v11 = 0;
        *(_BYTE *)(v9 + 9) = v11;
      }
      v12 = sub_1ACB8A2CC(v9);
      if (!(_DWORD)v12)
      {
LABEL_6:
        v8 = 0;
        *a3 = v9;
      }
      else
      {
        v8 = v12;
        v13 = *(_QWORD *)(v9 + 112);
        if ((*(_WORD *)(v13 + 52) & 0x20) != 0)
        {
          v14 = *(_QWORD *)(v13 + 40);
          --*(_DWORD *)(v14 + 152);
          *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 168);
          *(_QWORD *)(v14 + 168) = v13;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v14 + 72) + 144))(*(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1), *(_QWORD *)(v13 + 8));
        }
        else
        {
          sub_1ACBE906C(v13);
        }
        *a3 = 0;
      }
    }
    return v8;
  }
  else
  {
    *a3 = 0;
    return sub_1ACBEB08C(79182);
  }
}

_QWORD *sub_1ACBF8338(_QWORD *result, uint64_t a2)
{
  if (a2)
    return sub_1ACB7E704(result, a2, 1);
  return result;
}

_QWORD *sub_1ACBF8348(_QWORD *result, unsigned __int8 *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;

  v3 = result;
  if ((a2[6] & 0x81) == 0)
  {
    if (*((_QWORD *)a2 + 2) && *a2 != 178)
      result = (_QWORD *)sub_1ACBF8348(result);
    if (*((_QWORD *)a2 + 3))
    {
      result = (_QWORD *)sub_1ACBF8348(v3);
    }
    else
    {
      v4 = *((_DWORD *)a2 + 1);
      v5 = (_QWORD *)*((_QWORD *)a2 + 4);
      if ((v4 & 0x1000) != 0)
      {
        if (v5)
          result = (_QWORD *)sub_1ACB7E704(v3, v5, 1);
      }
      else
      {
        if (v5)
        {
          result = sub_1ACC010B0(v3, v5);
          v4 = *((_DWORD *)a2 + 1);
        }
        if ((v4 & 0x1000000) != 0)
          result = sub_1ACBF8400(v3, *((_QWORD **)a2 + 9));
      }
    }
  }
  if ((a2[7] & 8) == 0)
    return sub_1ACBF0674(v3, a2);
  return result;
}

_QWORD *sub_1ACBF8400(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a2)
  {
    v3 = result;
    v4 = (_QWORD *)a2[7];
    if (v4)
    {
      *v4 = a2[8];
      v5 = a2[8];
      if (v5)
        *(_QWORD *)(v5 + 56) = a2[7];
      a2[7] = 0;
    }
    if (a2[9])
      sub_1ACBF8348(result);
    v6 = (_QWORD *)a2[2];
    if (v6)
      sub_1ACC010B0(v3, v6);
    v7 = (_QWORD *)a2[3];
    if (v7)
      sub_1ACC010B0(v3, v7);
    if (a2[6])
      sub_1ACBF8348(v3);
    if (a2[5])
      sub_1ACBF8348(v3);
    if (*a2)
      sub_1ACBE0F9C(v3, (_QWORD *)*a2);
    v8 = (_QWORD *)a2[1];
    if (v8)
      sub_1ACBE0F9C(v3, v8);
    return sub_1ACBE0F9C(v3, a2);
  }
  return result;
}

_QWORD *sub_1ACBF84C4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (a2)
  {
    v3 = result;
    if (*(int *)a2 >= 1)
    {
      v4 = 0;
      v5 = a2 + 4;
      do
      {
        v6 = (_QWORD *)*(v5 - 1);
        if (v6)
          sub_1ACC010B0(v3, v6);
        if (*v5)
          sub_1ACB7E704(v3, *v5, 1);
        v7 = (_QWORD *)*(v5 - 2);
        if (v7)
          sub_1ACBE0F9C(v3, v7);
        ++v4;
        v5 += 6;
      }
      while (v4 < *(int *)a2);
    }
    return sub_1ACBE0F9C(v3, a2);
  }
  return result;
}

_QWORD *sub_1ACBF8560(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2)
  {
    v3 = result;
    v4 = *(_DWORD *)a2;
    if (*(int *)a2 >= 1)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = (_QWORD *)a2[v6];
        if (v7)
        {
          sub_1ACBE0F9C(v3, v7);
          v4 = *(_DWORD *)a2;
        }
        ++v5;
        v6 += 2;
      }
      while (v5 < v4);
    }
    return sub_1ACBF0674(v3, a2);
  }
  return result;
}

uint64_t sub_1ACBF85D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1ACBECD04(*(_DWORD *)(a1 + 52));
  *(_QWORD *)(a1 + 136) = v2;
  if (v2)
  {
    v3 = (_QWORD *)v2;
    result = 0;
    *v3 = 0;
    *(_QWORD *)(a1 + 136) += 4;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 288) = 0;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    result = 7;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
  }
  return result;
}

uint64_t sub_1ACBF865C(uint64_t result, int a2, uint64_t a3, int a4)
{
  uint64_t i;

  *(_BYTE *)(result + 19) = 0;
  for (i = *(_QWORD *)(*(_QWORD *)(result + 8) + 16); i; i = *(_QWORD *)(i + 40))
  {
    if ((*(_BYTE *)(i + 1) & 0x10) != 0)
    {
      *(_BYTE *)(result + 19) = 1;
      if (*(_DWORD *)(i + 80) == a2 && (a4 || *(_QWORD *)(i + 48) == a3))
        *(_BYTE *)i = 1;
    }
  }
  return result;
}

uint64_t sub_1ACBF86B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v3 = a2 + *(unsigned __int16 *)(a3 + 22);
  if (v3 > *(_QWORD *)(a1 + 88))
    return sub_1ACBEC69C(83683, a1);
  v5 = *(_DWORD **)(a1 + 72);
  v6 = v5[14] - 4;
  v7 = ~*(unsigned __int16 *)(a3 + 20) + *(_DWORD *)(a3 + 16) + v6;
  if (v6 > v7)
    return 0;
  v9 = bswap32(*(_DWORD *)(v3 - 4));
  v10 = v7 / v6;
  while (1)
  {
    v22 = 0;
    v21 = 0;
    if (v9 < 2 || v9 > v5[16])
      return sub_1ACBEB08C(83700);
    if (!--v10)
      goto LABEL_11;
    v11 = sub_1ACBF88E8((uint64_t)v5, v9, &v21, &v22);
    if ((_DWORD)v11)
      return v11;
    v12 = v21;
    if (!v21)
    {
LABEL_11:
      v13 = *(_QWORD *)v5;
      v14 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))*(&xmmword_1ECD3B218 + 1))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 336) + 72), v9, 0);
      if (!v14)
        goto LABEL_20;
      v15 = (uint64_t *)v14;
      v16 = *(_QWORD **)(v14 + 8);
      if (*v16)
      {
        ++*(_QWORD *)(*(_QWORD *)(v13 + 336) + 24);
        ++v16[7];
      }
      else
      {
        v16 = (_QWORD *)sub_1ACBEC2A8(*(_QWORD *)(v13 + 336), v9, v15);
        if (!v16)
        {
LABEL_20:
          v12 = 0;
          v21 = 0;
LABEL_21:
          v18 = sub_1ACBB0704((uint64_t)v5, v12, v9);
          goto LABEL_22;
        }
      }
      v12 = v16[2];
      if (*(_DWORD *)(v12 + 4) != (_DWORD)v9)
      {
        v17 = v16[1];
        *(_QWORD *)(v12 + 112) = v16;
        *(_QWORD *)(v12 + 72) = v5;
        *(_QWORD *)(v12 + 80) = v17;
        *(_DWORD *)(v12 + 4) = v9;
        *(_BYTE *)(v12 + 9) = 0;
      }
      v21 = v12;
    }
    if (*(_DWORD *)(*(_QWORD *)(v12 + 112) + 56) == 1)
      goto LABEL_21;
    v18 = sub_1ACBEB08C(83720);
LABEL_22:
    v8 = v18;
    if (v21)
    {
      v19 = *(_QWORD *)(v21 + 112);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 52) & 0x20) != 0)
        {
          v20 = *(_QWORD *)(v19 + 40);
          --*(_DWORD *)(v20 + 152);
          *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 168);
          *(_QWORD *)(v20 + 168) = v19;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v20 + 72) + 144))(*(_QWORD *)(v20 + 72), *(_QWORD *)(v20 + 200) * (*(_DWORD *)(v19 + 48) - 1), *(_QWORD *)(v19 + 8));
        }
        else
        {
          sub_1ACBE906C(v19);
        }
      }
    }
    if ((_DWORD)v8)
      return v8;
    v9 = v22;
    if (!v10)
      return 0;
  }
}

uint64_t sub_1ACBF88E8(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int *a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 33))
    goto LABEL_12;
  v23 = 0;
  v22 = 0;
  v8 = a2;
  do
  {
    do
    {
      while (1)
      {
        v9 = v8++;
        if (v8 >= 2)
          break;
        if (v8)
          goto LABEL_10;
      }
      v10 = (v9 - 1) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
      if (v10 + 1 == dword_1EECAC650 / *(_DWORD *)(a1 + 52))
        v11 = 3;
      else
        v11 = 2;
    }
    while (v8 == v11 + v10);
LABEL_10:
    ;
  }
  while (v9 == dword_1EECAC650 / *(_DWORD *)(a1 + 52));
  v12 = v9 + 1;
  if (v9 + 1 > *(_DWORD *)(a1 + 64))
    goto LABEL_12;
  v16 = sub_1ACBEF22C((_DWORD *)a1, v9 + 1, &v22, &v23);
  v14 = v16;
  if (v16 || v22 != 4)
  {
    if (v16)
    {
LABEL_14:
      v15 = 0;
      v12 = 0;
      goto LABEL_28;
    }
LABEL_12:
    v24 = 0;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))();
    if (!v13)
    {
      v15 = *(_QWORD *)(v24 + 16);
      if (*(_DWORD *)(v15 + 4) == a2)
      {
        v17 = *(unsigned int **)(v15 + 80);
      }
      else
      {
        v17 = *(unsigned int **)(v24 + 8);
        *(_QWORD *)(v15 + 112) = v24;
        *(_QWORD *)(v15 + 72) = a1;
        *(_QWORD *)(v15 + 80) = v17;
        *(_DWORD *)(v15 + 4) = a2;
        if (a2 == 1)
          v18 = 100;
        else
          v18 = 0;
        *(_BYTE *)(v15 + 9) = v18;
      }
      v14 = 0;
      v12 = bswap32(*v17);
      goto LABEL_28;
    }
    v14 = v13;
    goto LABEL_14;
  }
  if (v23 != a2)
    goto LABEL_12;
  v15 = 0;
  v14 = 101;
LABEL_28:
  *a4 = v12;
  if (a3)
  {
    *a3 = v15;
  }
  else if (v15)
  {
    v20 = *(_QWORD *)(v15 + 112);
    if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
    {
      v21 = *(_QWORD *)(v20 + 40);
      --*(_DWORD *)(v21 + 152);
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 168);
      *(_QWORD *)(v21 + 168) = v20;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v21 + 72) + 144))(*(_QWORD *)(v21 + 72), *(_QWORD *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1), *(_QWORD *)(v20 + 8));
    }
    else
    {
      sub_1ACBE906C(v20);
    }
  }
  if (v14 == 101)
    return 0;
  else
    return v14;
}

uint64_t sub_1ACBF8B04(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
  {
    if (*(_DWORD *)v4 < a2)
      return 0;
    return sub_1ACBA79A4((unsigned int *)v4, a2);
  }
  v6 = *(_DWORD *)(a1 + 64);
  v4 = sub_1ACB5D828(512);
  if (v4)
  {
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)v4 = v6;
    *(_QWORD *)(a1 + 96) = v4;
    if (v6 < a2)
      return 0;
    return sub_1ACBA79A4((unsigned int *)v4, a2);
  }
  *(_QWORD *)(a1 + 96) = 0;
  return 7;
}

uint64_t sub_1ACBF8BC8(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  char v7;

  result = sub_1ACB8A058((unsigned __int8 *)a1);
  if ((_DWORD)result == 16)
  {
    result = 0;
    *a2 = 1;
  }
  else if (!(_DWORD)result)
  {
    *a2 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(a1 + 136);
      if (*(_BYTE *)(v5 + 8))
        break;
      v6 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v5 + 9) + *(_QWORD *)(v5 + 80) + 8));
      *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24);
      result = sub_1ACB8A3D0(a1, v6);
      if ((_DWORD)result)
      {
        v7 = *(_BYTE *)(a1 + 1) & 0xF7;
        goto LABEL_9;
      }
    }
    result = 0;
    *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24) - 1;
    v7 = *(_BYTE *)(a1 + 1) | 8;
LABEL_9:
    *(_BYTE *)(a1 + 1) = v7;
  }
  return result;
}

uint64_t sub_1ACBF8C68(unsigned int a1, char *a2, uint64_t a3)
{
  int64_t v3;
  char *v4;
  int v5;
  int64_t v6;
  uint64_t result;

  v3 = 0;
  v4 = &a2[*a2 & 0x3F];
  switch(a2[1])
  {
    case 1:
      v3 = *v4;
      goto LABEL_11;
    case 2:
      v3 = v4[1] | (unint64_t)((uint64_t)*v4 << 8);
      goto LABEL_11;
    case 3:
      v3 = ((uint64_t)*v4 << 16) | ((unint64_t)v4[1] << 8) | v4[2];
      goto LABEL_11;
    case 4:
      v3 = (*v4 << 24) | ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
      goto LABEL_11;
    case 5:
      v3 = bswap32(*(_DWORD *)(v4 + 2)) | ((unint64_t)(v4[1] | (*v4 << 8)) << 32);
      goto LABEL_11;
    case 6:
      v3 = bswap64(*(_QWORD *)v4);
      goto LABEL_11;
    case 8:
      goto LABEL_11;
    case 9:
      v3 = 1;
LABEL_11:
      v6 = *(_QWORD *)(a3 + 16);
      if (v6 > v3)
        return *(char *)(a3 + 32);
      if (v6 < v3)
        return *(char *)(a3 + 33);
      if (*(unsigned __int16 *)(a3 + 28) < 2u)
      {
        result = *(char *)(a3 + 30);
        *(_BYTE *)(a3 + 34) = 1;
      }
      else
      {
        v5 = 1;
        return sub_1ACBF5AA0(a1, a2, (uint64_t *)a3, v5);
      }
      return result;
    default:
      v5 = 0;
      return sub_1ACBF5AA0(a1, a2, (uint64_t *)a3, v5);
  }
}

uint64_t sub_1ACBF8D70(signed int a1, char *a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  signed int v14;
  char v15;
  uint64_t result;
  signed int v17;
  signed int v18;
  int v19;
  unint64_t v20;

  v7 = a2 + 1;
  v6 = a2[1];
  v8 = (char)v6;
  v9 = v6 << 14;
  v10 = (v6 & 0x7F) << 7;
  while (v8 <= 11)
  {
    if ((v8 & 0x80000000) == 0)
      return *(char *)(a3 + 32);
    v11 = a2[2];
    if (a2[2] < 0)
    {
      v12 = a2[3];
      if (v12 < 0)
      {
        v20 = 0;
        sub_1ACB8A6CC(v7, &v20);
        v8 = v20;
        if (HIDWORD(v20))
          return *(char *)(a3 + 32);
      }
      else
      {
        v8 = v9 & 0x1FC07F | v12 & 0x7F | ((v11 & 0x7F) << 7);
      }
    }
    else
    {
      v8 = v10 | v11;
    }
    if (v8 <= 11)
      return *(char *)(a3 + 32);
  }
  if ((v8 & 1) == 0)
    return *(char *)(a3 + 33);
  v13 = *a2;
  v14 = (v8 - 12) >> 1;
  if (v14 + (int)v13 > a1)
  {
    v15 = sub_1ACBEB08C(96174);
    result = 0;
    *(_BYTE *)(a3 + 31) = v15;
    return result;
  }
  v17 = *(_DWORD *)(a3 + 24);
  v18 = v17 >= v14 ? (v8 - 12) >> 1 : *(_DWORD *)(a3 + 24);
  v19 = memcmp(&a2[v13], *(const void **)(a3 + 16), v18);
  if (v19 >= 1)
    return *(char *)(a3 + 33);
  if (v19 < 0)
    return *(char *)(a3 + 32);
  if (v14 != v17)
  {
    if (v17 < v14)
      return *(char *)(a3 + 33);
    return *(char *)(a3 + 32);
  }
  if (*(unsigned __int16 *)(a3 + 28) >= 2u)
    return sub_1ACBF5AA0(a1, a2, (uint64_t *)a3, 1);
  result = *(char *)(a3 + 30);
  *(_BYTE *)(a3 + 34) = 1;
  return result;
}

uint64_t sub_1ACBF8EF8(unsigned __int8 *a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  signed __int8 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v2 = *a1;
  if (*a1)
  {
    if (v2 < 3)
      goto LABEL_22;
    v20 = 0;
    if (v2 == 4)
    {
      result = *((unsigned int *)a1 + 1);
      if ((_DWORD)result)
        return result;
      goto LABEL_25;
    }
    *a1 = 1;
    if (off_1ECD3B2E0 && off_1ECD3B2E0(410))
      return 10;
    result = sub_1ACB9E38C((uint64_t)a1, *((char **)a1 + 3), *((_QWORD *)a1 + 9), 0, &v20);
    if ((_DWORD)result)
      return result;
    v4 = *((_QWORD *)a1 + 3);
    if (v4)
    {
      v5 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_16:
        (*v5)(v4);
        goto LABEL_17;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v4);
      v4 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v5 = &xmmword_1ECD3B1D0;
        goto LABEL_16;
      }
    }
LABEL_17:
    *((_QWORD *)a1 + 3) = 0;
    if (v20)
    {
      *((_DWORD *)a1 + 1) = v20;
      v2 = *a1;
    }
    else
    {
      v2 = *a1;
      if (!*((_DWORD *)a1 + 1))
        goto LABEL_22;
    }
    if (!v2)
    {
      v2 = 2;
      *a1 = 2;
    }
LABEL_22:
    if (v2 == 1)
      return 101;
    if (v2 == 2)
    {
      result = 0;
      *a1 = 0;
      if (*((int *)a1 + 1) > 0)
        return result;
    }
  }
LABEL_25:
  v6 = *((_QWORD *)a1 + 17);
  v7 = *((_WORD *)a1 + 43) + 1;
  *((_WORD *)a1 + 43) = v7;
  if (off_1ECD3B2E0 && off_1ECD3B2E0(412))
  {
    *(_BYTE *)v6 = 0;
    return sub_1ACBEB08C(83045);
  }
  if (!*(_BYTE *)v6)
    return sub_1ACBEB08C(83045);
  if (*(unsigned __int16 *)(v6 + 24) > v7)
  {
    if (!*(_BYTE *)(v6 + 8))
    {
      while (1)
      {
        v8 = *((_QWORD *)a1 + 17);
        if (*(_BYTE *)(v8 + 8))
          break;
        result = sub_1ACB8A3D0((uint64_t)a1, bswap32(*(_DWORD *)(*(_QWORD *)(v8 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v8 + 96)+ 2* *((unsigned __int16 *)a1 + 43))) & *(_WORD *)(v8 + 26)))));
        if ((_DWORD)result)
          return result;
      }
    }
    return 0;
  }
  if (*(_BYTE *)(v6 + 8))
  {
    do
    {
      v15 = (char)a1[84];
      if (!a1[84])
      {
        *a1 = 1;
        return 101;
      }
      *((_WORD *)a1 + 35) = 0;
      a1[1] &= 0xF9u;
      *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v15 + 86];
      v16 = *((_QWORD *)a1 + 17);
      v17 = v15 - 1;
      a1[84] = v17;
      *((_QWORD *)a1 + 17) = *(_QWORD *)&a1[8 * v17 + 144];
      v18 = *(_QWORD *)(v16 + 112);
      if ((*(_BYTE *)(v18 + 52) & 0x20) != 0)
      {
        v19 = *(_QWORD *)(v18 + 40);
        --*(_DWORD *)(v19 + 152);
        *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 168);
        *(_QWORD *)(v19 + 168) = v18;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v19 + 72) + 144))(*(_QWORD *)(v19 + 72), *(_QWORD *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(_QWORD *)(v18 + 8));
      }
      else
      {
        sub_1ACBE906C(v18);
      }
      v14 = *((_QWORD *)a1 + 17);
    }
    while (*((unsigned __int16 *)a1 + 43) >= *(unsigned __int16 *)(v14 + 24));
    if (*(_BYTE *)(v14 + 1))
      return sub_1ACB8B8D4(a1);
    return 0;
  }
  for (i = *(_DWORD *)(*(unsigned __int8 *)(v6 + 9) + *(_QWORD *)(v6 + 80) + 8);
        ;
        i = *(_DWORD *)(v11 + ((v13[1] | (*v13 << 8)) & *(_QWORD *)&v12)))
  {
    result = sub_1ACB8A3D0((uint64_t)a1, bswap32(i));
    if ((_DWORD)result)
      break;
    v10 = *((_QWORD *)a1 + 17);
    if (*(_BYTE *)(v10 + 8))
      return 0;
    v11 = *(_QWORD *)(v10 + 80);
    v12 = *(_WORD *)(v10 + 26);
    v13 = (unsigned __int8 *)(*(_QWORD *)(v10 + 96) + 2 * *((unsigned __int16 *)a1 + 43));
  }
  return result;
}

uint64_t sub_1ACBF9260(unsigned __int8 *a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  signed __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1)
  {
LABEL_2:
    if (v2 >= 3)
    {
      result = sub_1ACBF7EA8((uint64_t)a1);
      if ((_DWORD)result)
        return result;
      v2 = *a1;
    }
    if (v2 == 2)
    {
      *a1 = 0;
      if ((*((_DWORD *)a1 + 1) & 0x80000000) == 0)
        goto LABEL_9;
      return 0;
    }
    else
    {
      if (v2 != 1)
        goto LABEL_9;
      return 101;
    }
  }
  else
  {
LABEL_9:
    while (1)
    {
      v4 = *((_QWORD *)a1 + 17);
      v5 = *((unsigned __int16 *)a1 + 43);
      if (!*(_BYTE *)(v4 + 8))
        break;
      if (!*((_WORD *)a1 + 43))
      {
        while (1)
        {
          v6 = (char)a1[84];
          if (!a1[84])
            break;
          *((_WORD *)a1 + 35) = 0;
          a1[1] &= 0xF9u;
          *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v6 + 86];
          v7 = *((_QWORD *)a1 + 17);
          v8 = v6 - 1;
          a1[84] = v8;
          *((_QWORD *)a1 + 17) = *(_QWORD *)&a1[8 * v8 + 144];
          v9 = *(_QWORD *)(v7 + 112);
          if ((*(_BYTE *)(v9 + 52) & 0x20) != 0)
          {
            v10 = *(_QWORD *)(v9 + 40);
            --*(_DWORD *)(v10 + 152);
            *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 168);
            *(_QWORD *)(v10 + 168) = v9;
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v10 + 72) + 144))(*(_QWORD *)(v10 + 72), *(_QWORD *)(v10 + 200) * (*(_DWORD *)(v9 + 48) - 1), *(_QWORD *)(v9 + 8));
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5)
            {
LABEL_16:
              v4 = *((_QWORD *)a1 + 17);
              goto LABEL_17;
            }
          }
          else
          {
            sub_1ACBE906C(v9);
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5)
              goto LABEL_16;
          }
        }
        *a1 = 1;
        return 101;
      }
LABEL_17:
      *((_WORD *)a1 + 43) = v5 - 1;
      if (!*(_BYTE *)(v4 + 1) || *(_BYTE *)(v4 + 8))
        return 0;
      a1[1] &= 0xF1u;
      *((_WORD *)a1 + 35) = 0;
      v2 = *a1;
      if (*a1)
        goto LABEL_2;
    }
    v11 = bswap32(*(_DWORD *)(*(_QWORD *)(v4 + 80)
                            + ((*(unsigned __int8 *)(*(_QWORD *)(v4 + 96) + 2 * v5 + 1) | (*(unsigned __int8 *)(*(_QWORD *)(v4 + 96) + 2 * v5) << 8)) & (unint64_t)*(unsigned __int16 *)(v4 + 26))));
    while (1)
    {
      result = sub_1ACB8A3D0((uint64_t)a1, v11);
      if ((_DWORD)result)
        break;
      v12 = *((_QWORD *)a1 + 17);
      if (*(_BYTE *)(v12 + 8))
      {
        result = 0;
        *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24) - 1;
        return result;
      }
      v11 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v12 + 9) + *(_QWORD *)(v12 + 80) + 8));
      *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24);
    }
  }
  return result;
}

uint64_t sub_1ACBF9434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v8;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE **)(a1 + 56);
  v6 = *(unsigned __int16 *)(a1 + 68);
  if ((unint64_t)&v5[v6] > *(_QWORD *)(v4 + 88)
    || (unint64_t)v5 < *(_QWORD *)(v4 + 80) + (unint64_t)*(unsigned __int16 *)(v4 + 18))
  {
    return sub_1ACBEB08C(86034);
  }
  v8 = *(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 36);
  if (v8 == (_DWORD)v6)
    return sub_1ACBF95A8(v4, v5, a2, 0, v8);
  else
    return sub_1ACBF974C(a1, a2);
}

uint64_t sub_1ACBF949C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v13;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
  v4 = *(unsigned __int8 *)(a1 + 9);
  v5 = (unsigned __int16)(_byteswap_ushort(*(_WORD *)(v4 + v2 + 5)) - 1);
  v6 = __rev16(*(unsigned __int16 *)(v4 + v2 + 1));
  v7 = v5 + *(unsigned __int8 *)(v4 + v2 + 7) + 1;
  if (v6)
  {
    if (v6 <= v5)
    {
      v11 = 78926;
      return sub_1ACBEC69C(v11, a1);
    }
    do
    {
      if ((int)v6 > v3 - 4)
      {
        v11 = 78931;
        return sub_1ACBEC69C(v11, a1);
      }
      v8 = (unsigned __int16 *)(v2 + v6);
      v9 = __rev16(*v8);
      LODWORD(v8) = __rev16(v8[1]);
      v7 += (int)v8;
      v10 = (_DWORD)v8 + v6;
      v6 = v9;
    }
    while (v9 > v10 + 3);
    if (v9)
    {
      v11 = 78941;
      return sub_1ACBEC69C(v11, a1);
    }
    if (v10 > v3)
    {
      v11 = 78945;
      return sub_1ACBEC69C(v11, a1);
    }
  }
  v13 = v4 + *(unsigned __int8 *)(a1 + 10) + 2 * *(unsigned __int16 *)(a1 + 24) + 8;
  if (v7 > v3 || v7 < v13)
  {
    v11 = 78957;
    return sub_1ACBEC69C(v11, a1);
  }
  *(_DWORD *)(a1 + 20) = (unsigned __int16)(v7 - v13);
  return 0;
}

uint64_t sub_1ACBF95A8(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, int a5)
{
  _BYTE *v6;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;

  v6 = a2;
  v8 = *(_DWORD *)(a3 + 36);
  v9 = v8 - a4;
  if (v8 <= a4)
  {
    if (a5 < 1)
      return 0;
    v19 = a5;
    v20 = a5;
    while (!*v6)
    {
      --v20;
      ++v6;
      if (!--v19)
        return 0;
    }
    v21 = *(_QWORD *)(a1 + 112);
    v22 = *(_DWORD **)(v21 + 40);
    if ((*(_WORD *)(v21 + 52) & 4) != 0 && v22[8] >= *(_DWORD *)(v21 + 48))
    {
      if (!v22[32])
      {
LABEL_32:
        bzero(v6, v20);
        return 0;
      }
      result = sub_1ACBEA110(*(_QWORD *)(a1 + 112));
    }
    else
    {
      result = v22[12];
      if ((_DWORD)result)
        return result;
      v23 = *(_QWORD *)(a1 + 112);
      if (v22[46] <= v22[50])
        result = sub_1ACB9A818(v23);
      else
        result = sub_1ACBEDEA4(v23);
    }
    if ((_DWORD)result)
      return result;
    goto LABEL_32;
  }
  if (a5 > v9)
  {
    result = sub_1ACBF95A8(a1, &a2[v9], a3);
    if ((_DWORD)result)
      return result;
    a5 = v9;
  }
  v12 = *(_QWORD *)(a3 + 16);
  v13 = a4;
  v14 = (const void *)(v12 + a4);
  v15 = a5;
  result = memcmp(v6, v14, a5);
  if ((_DWORD)result)
  {
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_DWORD **)(v16 + 40);
    if ((*(_WORD *)(v16 + 52) & 4) != 0 && v17[8] >= *(_DWORD *)(v16 + 48))
    {
      if (!v17[32])
      {
LABEL_27:
        memmove(v6, (const void *)(v12 + v13), v15);
        return 0;
      }
      result = sub_1ACBEA110(*(_QWORD *)(a1 + 112));
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = v17[12];
      if ((_DWORD)result)
        return result;
      v18 = *(_QWORD *)(a1 + 112);
      if (v17[46] <= v17[50])
      {
        result = sub_1ACB9A818(v18);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = sub_1ACBEDEA4(v18);
        if ((_DWORD)result)
          return result;
      }
    }
    v12 = *(_QWORD *)(a3 + 16);
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1ACBF974C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = sub_1ACBF95A8(v6, *(_BYTE **)(a1 + 56), a2, 0, *(unsigned __int16 *)(a1 + 68));
  if (!(_DWORD)v7)
  {
    v9 = *(unsigned __int16 *)(a1 + 68);
    v10 = v5 + v4;
    v11 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + v9));
    v12 = *(_DWORD **)(v6 + 72);
    v13 = v12[14] - 4;
    while (1)
    {
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 288))();
      if ((_DWORD)v14)
        return v14;
      v15 = 0;
      v16 = MEMORY[0x10];
      if (*(_DWORD *)(MEMORY[0x10] + 4) == v11)
      {
        v15 = *(_QWORD *)(MEMORY[0x10] + 112);
      }
      else
      {
        v17 = MEMORY[8];
        *(_QWORD *)(MEMORY[0x10] + 112) = 0;
        *(_QWORD *)(v16 + 72) = v12;
        *(_QWORD *)(v16 + 80) = v17;
        *(_DWORD *)(v16 + 4) = v11;
        if (v11 == 1)
          v18 = 100;
        else
          v18 = 0;
        *(_BYTE *)(v16 + 9) = v18;
      }
      if (*(_DWORD *)(v15 + 56) == 1 && !*(_BYTE *)v16)
      {
        if (v13 + (int)v9 >= v10)
        {
          v13 = v10 - v9;
          v22 = *(_QWORD *)(v16 + 80);
        }
        else
        {
          v22 = *(_QWORD *)(v16 + 80);
          v11 = bswap32(*(_DWORD *)v22);
        }
        v19 = sub_1ACBF95A8(v16, (_BYTE *)(v22 + 4), a2, v9, v13);
      }
      else
      {
        v19 = sub_1ACBEB08C(86006);
      }
      v7 = v19;
      v20 = *(_QWORD *)(v16 + 112);
      if (v20)
      {
        if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
        {
          v21 = *(_QWORD *)(v20 + 40);
          --*(_DWORD *)(v21 + 152);
          *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 168);
          *(_QWORD *)(v21 + 168) = v20;
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v21 + 72) + 144))(*(_QWORD *)(v21 + 72), *(_QWORD *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1), *(_QWORD *)(v20 + 8));
          if ((_DWORD)v7)
            return v7;
          goto LABEL_20;
        }
        sub_1ACBE906C(v20);
      }
      if ((_DWORD)v7)
        return v7;
LABEL_20:
      LODWORD(v9) = v13 + v9;
      if ((int)v9 >= v10)
        return 0;
    }
  }
  return v7;
}

uint64_t sub_1ACBF9924(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 v17;
  unsigned __int16 v18;
  unsigned int v19;
  char v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  __int16 v29;
  unsigned int v30;

  v3 = a2;
  v5 = a3 + a2;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(unsigned __int8 *)(a1 + 9);
  v8 = v7 + 1;
  if (!*(_BYTE *)(v7 + v6 + 2) && !*(_BYTE *)(v6 + v8))
  {
    v29 = a3 + a2;
    LOBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    v18 = a3;
    LOWORD(v10) = v7 + 1;
    goto LABEL_29;
  }
  v9 = v7 + 1;
  while (1)
  {
    v10 = v9;
    v11 = (unsigned __int8 *)(v6 + (unsigned __int16)v9);
    v12 = *v11;
    v13 = v11[1];
    v9 = v13 | (v12 << 8);
    if (v9 >= a2)
      break;
    if (v9 <= (unsigned __int16)v10)
    {
      if (v9)
      {
        v14 = 78743;
        return sub_1ACBEC69C(v14, a1);
      }
      break;
    }
  }
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
  if (v15 - 4 >= v9)
  {
    if (v9)
      v16 = v5 + 3 >= v9;
    else
      v16 = 0;
    if (v16)
    {
      v17 = v13 - v5;
      if (v9 < v5)
      {
        v14 = 78760;
        return sub_1ACBEC69C(v14, a1);
      }
      v5 = v9 + (bswap32(*(unsigned __int16 *)(v6 + v9 + 2)) >> 16);
      if (v5 > v15)
      {
        v14 = 78763;
        return sub_1ACBEC69C(v14, a1);
      }
      v18 = v5 - a2;
      v21 = (_BYTE *)(v6 + v9);
      LOBYTE(v12) = *v21;
      LOBYTE(v13) = v21[1];
    }
    else
    {
      v17 = 0;
      v18 = a3;
    }
    if (v8 < (unsigned __int16)v10)
    {
      v19 = (unsigned __int16)v10 + (bswap32(*(unsigned __int16 *)(v6 + (unsigned __int16)v10 + 2)) >> 16);
      if (v19 + 3 >= a2)
      {
        v16 = a2 >= v19;
        v20 = a2 - v19;
        if (!v16)
        {
          v14 = 78776;
          return sub_1ACBEC69C(v14, a1);
        }
        v17 += v20;
        v18 = v5 - v10;
        v3 = v10;
      }
    }
    v22 = *(unsigned __int8 *)(v6 + v7 + 7);
    if (v22 < v17)
    {
      v14 = 78782;
      return sub_1ACBEC69C(v14, a1);
    }
    v29 = v5;
    *(_BYTE *)(v6 + v7 + 7) = v22 - v17;
LABEL_29:
    v23 = (_BYTE *)(v7 + v6 + 5);
    v24 = __rev16(*(unsigned __int16 *)v23);
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 40) & 0xC) != 0)
    {
      v25 = a3;
      v30 = v24;
      bzero((void *)(v6 + (unsigned __int16)v3), v18);
      v24 = v30;
      a3 = v25;
    }
    if (v24 >= (unsigned __int16)v3)
    {
      if (v24 > (unsigned __int16)v3)
      {
        v14 = 78796;
        return sub_1ACBEC69C(v14, a1);
      }
      if ((_DWORD)v8 != (unsigned __int16)v10)
      {
        v14 = 78797;
        return sub_1ACBEC69C(v14, a1);
      }
      v27 = (_BYTE *)(v6 + v8);
      *v27 = v12;
      v27[1] = v13;
      *v23 = HIBYTE(v29);
      v23[1] = v29;
    }
    else
    {
      *(_WORD *)(v6 + (unsigned __int16)v10) = bswap32(v3) >> 16;
      v26 = (_BYTE *)(v6 + (unsigned __int16)v3);
      *v26 = v12;
      v26[1] = v13;
      v26[2] = HIBYTE(v18);
      v26[3] = v18;
    }
    *(_DWORD *)(a1 + 20) += a3;
    return 0;
  }
  v14 = 78748;
  return sub_1ACBEC69C(v14, a1);
}

_WORD *sub_1ACBF9BD4(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  signed int v10;
  _WORD *result;
  signed int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v16;

  v5 = *(unsigned __int8 *)(a1 + 9);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 80);
  v8 = __rev16(*(unsigned __int16 *)(v7 + v5 + 1));
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
  v10 = v9 - a2;
  while (1)
  {
    if ((int)v8 > v10)
    {
      if ((int)v8 <= v9 - 4)
        return 0;
      v15 = 78596;
      goto LABEL_14;
    }
    result = (_WORD *)(v7 + v8);
    v12 = __rev16((unsigned __int16)result[1]) - a2;
    if (v12 >= 0)
      break;
    v13 = __rev16(*(unsigned __int16 *)(v7 + v8));
    v6 = v8;
    v14 = v13 > v8;
    v8 = v13;
    if (!v14)
    {
      if (v13)
      {
        v15 = 78589;
        goto LABEL_14;
      }
      return 0;
    }
  }
  if (v12 > 3)
  {
    if ((int)(v12 + v8) <= v10)
    {
      result[1] = bswap32(v12) >> 16;
      return (_WORD *)(v7 + v12 + v8);
    }
    v15 = 78574;
LABEL_14:
    v16 = sub_1ACBEC69C(v15, a1);
    result = 0;
    *a3 = v16;
    return result;
  }
  if (*(unsigned __int8 *)(v7 + v5 + 7) > 0x39u)
    return 0;
  *(_WORD *)(v7 + v6) = *result;
  *(_BYTE *)(v7 + v5 + 7) += v12;
  return result;
}

uint64_t sub_1ACBF9CEC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int *v17;
  char *v18;
  size_t v19;
  char *v20;
  __int16 v23;
  uint64_t v24;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v12 = *(_QWORD *)(a4 + 72);
  v6 = *(_QWORD *)(a4 + 80);
  v7 = *(int *)(v12 + 56);
  v8 = (char *)(v6 + v7);
  v27 = a3;
  v9 = a3 + a2;
  v28 = *(unsigned __int8 *)(a4 + 9);
  v10 = *(char **)(a4 + 96);
  v11 = *(_QWORD *)(*(_QWORD *)v12 + 328);
  LODWORD(v12) = __rev16(*(unsigned __int16 *)(v28 + v6 + 5));
  if (v12 <= v7)
    v12 = v12;
  else
    v12 = 0;
  v31 = v11;
  v32 = (char *)(v6 + v12);
  memcpy((void *)(v11 + v12), (const void *)(v6 + v12), (v7 - v12));
  if (*(_DWORD *)(a1 + 80) <= a2)
  {
    if (*(_DWORD *)(a1 + 84) <= a2)
    {
      if (*(_DWORD *)(a1 + 88) <= a2)
      {
        if (*(_DWORD *)(a1 + 92) <= a2)
        {
          if (*(_DWORD *)(a1 + 96) <= a2)
          {
            if (*(_DWORD *)(a1 + 100) > a2)
              v13 = 5;
            else
              v13 = 6;
          }
          else
          {
            v13 = 4;
          }
        }
        else
        {
          v13 = 3;
        }
      }
      else
      {
        v13 = 2;
      }
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = a2;
  v15 = v8;
LABEL_18:
  v16 = *(_QWORD *)(a1 + 8 * v13 + 32);
  v30 = v13;
  v17 = (int *)(a1 + 4 * v13 + 80);
  while (1)
  {
    v18 = *(char **)(*(_QWORD *)(a1 + 16) + 8 * v14);
    v19 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 2 * v14);
    v20 = &v18[v19];
    if (v18 >= v32 && v18 < v8)
      break;
    if ((unint64_t)v18 < v16 && (unint64_t)v20 > v16)
    {
      v26 = 84367;
      return sub_1ACBEB08C(v26);
    }
LABEL_32:
    v15 -= v19;
    v23 = (_WORD)v15 - v6;
    *(_WORD *)v10 = bswap32((_DWORD)v15 - v6) >> 16;
    v10 += 2;
    if (v15 < v10)
    {
      v26 = 84373;
      return sub_1ACBEB08C(v26);
    }
    memmove(v15, v18, v19);
    if (++v14 >= v9)
    {
      *(_WORD *)(a4 + 24) = v27;
      *(_BYTE *)(a4 + 12) = 0;
      v24 = v28 + v6;
      *(_WORD *)(v24 + 1) = 0;
      *(_BYTE *)(v24 + 3) = *(_BYTE *)(a4 + 25);
      *(_BYTE *)(v24 + 4) = *(_BYTE *)(a4 + 24);
      *(_BYTE *)(v28 + v6 + 5) = HIBYTE(v23);
      *(_WORD *)(v28 + v6 + 6) = v23;
      return 0;
    }
    if (v14 >= *v17)
    {
      v13 = v30 + 1;
      goto LABEL_18;
    }
  }
  if (v20 <= v8)
  {
    v18 = &v18[v31 - v6];
    goto LABEL_32;
  }
  v26 = 84362;
  return sub_1ACBEB08C(v26);
}

uint64_t sub_1ACBF9F38(uint64_t a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 120))();
  *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * a2) = result;
  return result;
}

uint64_t sub_1ACBF9F74(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  unsigned __int16 v31;
  int v32;
  int v33;
  unint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  _BYTE v39[40];
  _BYTE v40[40];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a3 < 1)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 56);
  v10 = v8 + v9;
  v11 = *(unsigned __int8 *)(a1 + 9) + (unint64_t)*(unsigned __int8 *)(a1 + 10) + v8 + 8;
  v12 = a2;
  v13 = a3 + a2;
  v36 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
  v37 = v8;
  v35 = v8 + v9;
  do
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v12);
    if (v14 >= v11 && v14 < v10)
    {
      v16 = (unsigned __int16)(v14 - v8);
      v17 = v16 + *(unsigned __int16 *)(*(_QWORD *)(a4 + 24) + 2 * v12);
      if (v6 >= 1)
      {
        v18 = v6;
        v19 = (unsigned int *)v39;
        v20 = v40;
        v21 = v6;
        do
        {
          if (*v20 == v17)
          {
            *v20 = v16;
            goto LABEL_4;
          }
          if (*v19 == v16)
          {
            *v19 = v17;
            goto LABEL_4;
          }
          ++v19;
          ++v20;
          --v21;
        }
        while (v21);
        if (v6 >= 10)
        {
          v38 = v7;
          v22 = (int *)v39;
          v23 = (int *)v40;
          do
          {
            v25 = *v23++;
            v24 = v25;
            v26 = *v22++;
            sub_1ACBF9924(a1, v24, (unsigned __int16)(v26 - v24));
            --v18;
          }
          while (v18);
          v6 = 0;
          LODWORD(v7) = v38;
          LODWORD(v9) = v36;
          LOWORD(v8) = v37;
          v10 = v35;
        }
      }
      v27 = 4 * v6;
      *(_DWORD *)&v40[v27] = v16;
      *(_DWORD *)&v39[v27] = v17;
      if (v17 > v9)
        return 0;
      ++v6;
LABEL_4:
      v7 = (v7 + 1);
    }
    ++v12;
  }
  while (v12 < v13);
  if (v6 >= 1)
  {
    v28 = v6;
    v29 = (int *)v39;
    v30 = (int *)v40;
    do
    {
      v32 = *v30++;
      v31 = v32;
      v33 = *v29++;
      sub_1ACBF9924(a1, v31, (unsigned __int16)(v33 - v31));
      --v28;
    }
    while (v28);
  }
  return v7;
}

uint64_t sub_1ACBFA16C(uint64_t a1, uint64_t a2, void **a3, _WORD *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _WORD *v17;
  void *v18;
  const void *v19;
  int v24;

  if (a6 < 1)
    return 0;
  v9 = *(_QWORD *)(a1 + 80);
  v10 = (char *)*a3;
  if (*(_DWORD *)(a7 + 80) <= a5)
  {
    if (*(_DWORD *)(a7 + 84) <= a5)
    {
      if (*(_DWORD *)(a7 + 88) <= a5)
      {
        if (*(_DWORD *)(a7 + 92) <= a5)
        {
          if (*(_DWORD *)(a7 + 96) <= a5)
          {
            if (*(_DWORD *)(a7 + 100) > a5)
              LODWORD(v11) = 5;
            else
              LODWORD(v11) = 6;
          }
          else
          {
            LODWORD(v11) = 4;
          }
        }
        else
        {
          LODWORD(v11) = 3;
        }
      }
      else
      {
        LODWORD(v11) = 2;
      }
    }
    else
    {
      LODWORD(v11) = 1;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v13 = *(_QWORD *)(a7 + 8 * v11 + 32);
  v14 = a5;
  v15 = a6 + a5;
  while (1)
  {
    if (((v16 = *(unsigned __int16 *)(*(_QWORD *)(a7 + 24) + 2 * v14), *(_BYTE *)(v9 + 1)) || *(_BYTE *)(v9 + 2))
      && (v17 = sub_1ACBF9BD4(a1, *(unsigned __int16 *)(*(_QWORD *)(a7 + 24) + 2 * v14), &v24)) != 0)
    {
      v18 = v17;
    }
    else
    {
      if ((uint64_t)&v10[-a2] < v16)
        return 1;
      v10 -= v16;
      v18 = v10;
    }
    v19 = *(const void **)(*(_QWORD *)(a7 + 16) + 8 * v14);
    if ((unint64_t)v19 < v13 && (unint64_t)v19 + v16 > v13)
    {
      sub_1ACBEB08C(84458);
      return 1;
    }
    memmove(v18, v19, v16);
    *a4 = bswap32((_DWORD)v18 - v9) >> 16;
    if (v14 + 1 >= v15)
      break;
    if (v14 + 1 >= *(int *)(a7 + 4 * (int)v11 + 80))
    {
      v11 = (int)v11 + 1;
      v13 = *(_QWORD *)(a7 + 8 * v11 + 32);
    }
    ++a4;
    ++v14;
  }
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t sub_1ACBFA33C(_QWORD *a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t (*v10)(uint64_t, _DWORD *, char *, unsigned int, char *, unsigned int);
  int v11;
  uint64_t (*v12)(uint64_t, _DWORD *, char *, unsigned int, char *, unsigned int);
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int **v22;
  int v24;
  unsigned int *v25;
  _OWORD v26[32];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a1[2];
  if (a1[3])
    goto LABEL_5;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = (unint64_t)*(unsigned __int16 *)(v5 + 6) << 6;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    v8 = sub_1ACB5D828(v6 + 104);
    if (v8)
      goto LABEL_4;
LABEL_43:
    a1[3] = 0;
    return 7;
  }
  v8 = sub_1ACBE1124(v7, v6 + 104);
  if (!v8)
    goto LABEL_43;
LABEL_4:
  *(_QWORD *)v8 = v5;
  *(_QWORD *)(v8 + 8) = v8 + 40;
  a1[3] = v8;
  v4 = a1[2];
  *(_WORD *)(v8 + 28) = *(_WORD *)(*(_QWORD *)(v4 + 40) + 6);
  *(_BYTE *)(v8 + 31) = 0;
LABEL_5:
  v9 = *a2;
  v10 = sub_1ACBFABC4;
  v11 = *(unsigned __int8 *)(v4 + 92);
  if (v11 == 2)
    v10 = sub_1ACBFA9E4;
  if (v11 == 1)
    v12 = sub_1ACBFA874;
  else
    v12 = v10;
  a1[8] = v12;
  memset(v26, 0, sizeof(v26));
  if (v9)
  {
    do
    {
      v14 = a2[1];
      if (v14)
      {
        if (v9 == v14)
          v15 = 0;
        else
          v15 = (unsigned int *)((char *)v14 + (int)v9[2]);
      }
      else
      {
        v15 = (unsigned int *)*((_QWORD *)v9 + 1);
      }
      *((_QWORD *)v9 + 1) = 0;
      v16 = *(unsigned int **)&v26[0];
      if (*(_QWORD *)&v26[0])
      {
        v17 = 0;
        do
        {
          v25 = 0;
          v24 = 0;
          v18 = &v25;
          do
          {
            while (((int (*)(_QWORD *, int *, unsigned int *, _QWORD, unsigned int *, _QWORD))a1[8])(a1, &v24, v9 + 4, *v9, v16 + 4, *v16) <= 0)
            {
              *v18 = v9;
              v18 = (unsigned int **)(v9 + 2);
              v9 = (unsigned int *)*((_QWORD *)v9 + 1);
              if (!v9)
              {
                *v18 = v16;
                goto LABEL_27;
              }
            }
            *v18 = v16;
            v18 = (unsigned int **)(v16 + 2);
            v16 = (unsigned int *)*((_QWORD *)v16 + 1);
            v24 = 0;
          }
          while (v16);
          *v18 = v9;
LABEL_27:
          v9 = v25;
          *((_QWORD *)v26 + v17++) = 0;
          v13 = (unsigned int **)v26 + v17;
          v16 = *v13;
        }
        while (*v13);
      }
      else
      {
        v13 = (unsigned int **)v26;
      }
      *v13 = v9;
      v9 = v15;
    }
    while (v15);
  }
  v19 = 0;
  v20 = 0;
  do
  {
    v21 = (unsigned int *)*((_QWORD *)v26 + v19);
    if (v21)
    {
      if (v20)
      {
        v25 = 0;
        v24 = 0;
        v22 = &v25;
        do
        {
          while (((int (*)(_QWORD *, int *, unsigned int *, _QWORD, unsigned int *, _QWORD))a1[8])(a1, &v24, v20 + 4, *v20, v21 + 4, *v21) <= 0)
          {
            *v22 = v20;
            v22 = (unsigned int **)(v20 + 2);
            v20 = (unsigned int *)*((_QWORD *)v20 + 1);
            if (!v20)
            {
              *v22 = v21;
              goto LABEL_40;
            }
          }
          *v22 = v21;
          v22 = (unsigned int **)(v21 + 2);
          v21 = (unsigned int *)*((_QWORD *)v21 + 1);
          v24 = 0;
        }
        while (v21);
        *v22 = v20;
LABEL_40:
        v20 = v25;
      }
      else
      {
        v20 = (unsigned int *)*((_QWORD *)v26 + v19);
      }
    }
    ++v19;
  }
  while (v19 != 64);
  *a2 = v20;
  return *(unsigned __int8 *)(a1[3] + 31);
}

void sub_1ACBFA614(uint64_t a1)
{
  unsigned int v2;
  signed int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(uint64_t);

  v2 = *(unsigned __int8 *)(a1 + 91);
  v3 = v2 - 1;
  *(_BYTE *)(a1 + 88) = 1;
  if (v2 < 2)
  {
    v4 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v4 = 0;
  while (1)
  {
    v5 = a1 + 104 * ((*(unsigned __int8 *)(a1 + 90) + 1 + v4) % v3);
    v8 = *(_QWORD *)(v5 + 96);
    v6 = v5 + 96;
    v7 = v8;
    if (*(_DWORD *)(v6 + 8))
      break;
    if (!v7)
      goto LABEL_8;
    if (v3 == ++v4)
      goto LABEL_9;
  }
  if (v7)
  {
    if (*(_QWORD *)v7)
      LODWORD(v14) = (*(uint64_t (**)(_QWORD))v7)(*(_QWORD *)(v7 + 8));
    else
      v14 = *(_QWORD *)(v7 + 16);
    v16 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_30:
        *(_DWORD *)(v6 + 8) = 0;
        *(_QWORD *)v6 = 0;
        if ((_DWORD)v14)
          return;
        goto LABEL_8;
      }
      v16 = &xmmword_1ECD3B1D0;
    }
    (*v16)(v7);
    goto LABEL_30;
  }
LABEL_8:
  if (v4 == v3)
  {
LABEL_9:
    sub_1ACBFAC2C(a1 + 104 * v3 + 96, a1 + 56);
    return;
  }
  v9 = *(_QWORD *)(v6 + 40);
  *(_BYTE *)(a1 + 90) = -59 * ((v6 - a1 - 96) >> 3);
  v10 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(v6 + 32) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    *(_DWORD *)(a1 + 84) = off_1ECD3B178(v9);
  }
  else if (*(_QWORD *)(a1 + 64))
  {
    v15 = sub_1ACB5D828(*(int *)(a1 + 84));
    *(_QWORD *)(a1 + 64) = v15;
    if (!v15)
      return;
  }
  *(_QWORD *)v6 = 0;
  v11 = (_QWORD *)sub_1ACB5D828(24);
  if (v11)
  {
    v12 = v11;
    if ((((int)v11 / 17) & 1) != 0)
    {
      *v11 = sub_1ACBFAF8C;
      v11[1] = v6;
    }
    else
    {
      *v11 = 0;
      sub_1ACBFAC2C(v6, v6 + 32);
      *(_DWORD *)(v6 + 8) = 1;
      v12[2] = v13;
    }
    *(_QWORD *)v6 = v12;
  }
}

uint64_t sub_1ACBFA874(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int v22;
  uint64_t *v24;

  v9 = a3[1];
  v10 = a5[1];
  v11 = (unsigned __int8 *)&a3[*a3];
  v12 = &a5[*a5];
  v13 = v9 - v10;
  if ((_DWORD)v9 == v10)
  {
    if ((unint64_t)(v9 - 7) < 0xFFFFFFFFFFFFFFFALL)
      goto LABEL_30;
    if (byte_1ACCB6DE5[v9] <= 1u)
      v14 = 1;
    else
      v14 = byte_1ACCB6DE5[v9];
    v15 = (unsigned __int8 *)&a3[*a3];
    v16 = (unsigned __int8 *)&a5[*a5];
    while (1)
    {
      v18 = *v15++;
      v17 = v18;
      v19 = *v16++;
      v13 = v17 - v19;
      if (v13)
        break;
      if (!--v14)
        goto LABEL_30;
    }
    v22 = (char)*v11;
    if (((*v12 ^ v22) & 0x80) != 0)
    {
      v13 = (v22 >> 31) | 1;
      goto LABEL_27;
    }
  }
  else if (v9 < 8 || v10 <= 7)
  {
    if (v9 > 7)
      v13 = -1;
    if (v10 > 7)
      v21 = 1;
    else
      v21 = v13;
    if (v21 < 1)
    {
      if (*v12 < 0)
      {
        v13 = 1;
LABEL_27:
        if (**(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) + 24))
          return -v13;
        else
          return v13;
      }
    }
    else if ((*v11 & 0x80u) != 0)
    {
      v13 = -1;
    }
    else
    {
      v13 = v21;
    }
  }
  if (v13)
    goto LABEL_27;
LABEL_30:
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) + 6) < 2u)
    return 0;
  v24 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1ACB9E49C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a6, a5, (uint64_t)v24);
    *a2 = 1;
  }
  return sub_1ACBF5AA0(a4, a3, v24, 1);
}

uint64_t sub_1ACBFA9E4(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v28;
  unint64_t v29;

  v12 = (unsigned __int8 *)&a3[*a3];
  v13 = (unsigned __int8 *)&a5[*a5];
  v14 = a3[1];
  if (a3[1] < 0)
  {
    v15 = a3[2];
    if (a3[2] < 0)
    {
      v16 = a3[3];
      if (v16 < 0)
      {
        v29 = 0;
        sub_1ACB8A6CC(a3 + 1, &v29);
        if (HIDWORD(v29))
          v14 = -1;
        else
          v14 = v29;
      }
      else
      {
        v14 = v16 & 0x7F | (v14 << 14) & 0x1FC07F | ((v15 & 0x7F) << 7);
      }
    }
    else
    {
      v14 = ((v14 & 0x7F) << 7) | v15;
    }
  }
  v17 = a5[1];
  if (a5[1] < 0)
  {
    v18 = a5[2];
    if (a5[2] < 0)
    {
      v19 = a5[3];
      if (v19 < 0)
      {
        v29 = 0;
        sub_1ACB8A6CC(a5 + 1, &v29);
        if (HIDWORD(v29))
          v17 = -1;
        else
          v17 = v29;
      }
      else
      {
        v17 = v19 & 0x7F | (v17 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
      }
    }
    else
    {
      v17 = ((v17 & 0x7F) << 7) | v18;
    }
  }
  v20 = v14 - v17;
  if (v14 < v17)
    v17 = v14;
  v22 = v17 - 13;
  v21 = v17 < 13;
  v23 = v17 - 12;
  if (!v21)
    v23 = v22;
  v24 = memcmp(v12, v13, (uint64_t)v23 >> 1);
  if (v24)
    v25 = v24;
  else
    v25 = v20;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (v25)
  {
    if (**(_BYTE **)(v26 + 24))
      return -v25;
    else
      return v25;
  }
  else if (*(unsigned __int16 *)(v26 + 6) < 2u)
  {
    return 0;
  }
  else
  {
    v28 = *(uint64_t **)(a1 + 24);
    if (!*a2)
    {
      sub_1ACB9E49C(v26, a6, a5, (uint64_t)v28);
      *a2 = 1;
    }
    return sub_1ACBF5AA0(a4, a3, v28, 1);
  }
}

uint64_t sub_1ACBFABC4(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t *v8;

  v8 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1ACB9E49C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a6, a5, (uint64_t)v8);
    *a2 = 1;
  }
  return sub_1ACBF5AA0(a4, a3, v8, 0);
}

double sub_1ACBFAC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  double result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void (**v25)(int *);
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  v5 = (uint64_t **)(a1 + 72);
  v6 = *(uint64_t **)(a1 + 72);
  if (!v6)
  {
    if (off_1ECD3B2E0 && off_1ECD3B2E0(202))
      return result;
    LODWORD(v31) = 0;
    LODWORD(v31) = sub_1ACBF1D8C(*(_QWORD *)v4, 0, v5, 4126, (uint64_t)&v31);
    if ((_DWORD)v31)
      return result;
    *(_QWORD *)&v27 = 20971520;
    v12 = **v5;
    if (v12)
    {
      (*(void (**)(void))(v12 + 80))();
      if ((_DWORD)v31)
        return result;
    }
    v6 = *v5;
  }
  v26 = (_QWORD *)(a1 + 80);
  *(_QWORD *)&v27 = *(_QWORD *)(a1 + 80) + *(int *)(a2 + 16) + 9;
  if ((uint64_t)v27 <= *(int *)(v4 + 184))
  {
    v7 = *v6;
    if (*(int *)*v6 >= 3)
    {
      v31 = 0;
      v30 = 4096;
      (*(void (**)(uint64_t *, uint64_t, int *))(v7 + 80))(v6, 6, &v30);
      (*(void (**)(uint64_t *, uint64_t, __int128 *))(*v6 + 80))(v6, 5, &v27);
      (*(void (**)(uint64_t *, _QWORD, _QWORD, uint64_t *))(*v6 + 136))(v6, 0, v27, &v31);
      if (v31)
        (*(void (**)(uint64_t *, _QWORD))(*v6 + 144))(v6, 0);
    }
  }
  if (!sub_1ACBFA33C((_QWORD *)a1, (unsigned int **)a2))
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 12);
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    *((_QWORD *)&v27 + 1) = sub_1ACB5D828(v9);
    if (*((_QWORD *)&v27 + 1))
    {
      DWORD1(v28) = v11 % v9;
      DWORD2(v28) = DWORD1(v28);
      LODWORD(v28) = v9;
      *(_QWORD *)&v29 = v11 / v9 * v9;
      *((_QWORD *)&v29 + 1) = v10;
    }
    else
    {
      LODWORD(v27) = 7;
    }
    ++*(_DWORD *)(a1 + 56);
    sub_1ACBFB0F8((uint64_t)&v27, *(int *)(a2 + 16));
    v13 = *(unsigned int **)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_17:
      *(_QWORD *)a2 = 0;
      return sub_1ACBFB244((uint64_t)&v27, v26);
    }
    while (1)
    {
      v14 = (int *)v13;
      v13 = (unsigned int *)*((_QWORD *)v13 + 1);
      sub_1ACBFB0F8((uint64_t)&v27, *v14);
      v15 = *v14;
      if (*v14 >= 1)
      {
        v16 = v27;
        v17 = *v14;
        while (!v16)
        {
          v21 = (int)v28;
          v22 = DWORD2(v28);
          if (v17 >= (int)v28 - DWORD2(v28))
            v23 = v28 - DWORD2(v28);
          else
            v23 = v17;
          v24 = *((_QWORD *)&v27 + 1);
          memcpy((void *)(*((_QWORD *)&v27 + 1) + SDWORD2(v28)), (char *)v14 + v15 - v17 + 16, v23);
          DWORD2(v28) = v22 + v23;
          if (v22 + v23 == (_DWORD)v21)
          {
            v18 = v24 + SDWORD1(v28);
            v19 = v29;
            v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)&v29 + 1) + 24))(*((_QWORD *)&v29 + 1), v18, (v21 - DWORD1(v28)), v29 + SDWORD1(v28));
            *(_QWORD *)((char *)&v28 + 4) = 0;
            LODWORD(v27) = v16;
            *(_QWORD *)&v29 = v19 + v21;
            v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0))
              break;
          }
          else
          {
            v16 = 0;
            v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0))
              break;
          }
        }
      }
      if (*(_QWORD *)(a2 + 8))
        goto LABEL_20;
      v25 = (void (**)(int *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v14);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v14);
        v14 = (int *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_20;
        v25 = (void (**)(int *))&xmmword_1ECD3B1D0;
      }
      (*v25)(v14);
LABEL_20:
      if (!v13)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_1ACBFAF8C(uint64_t a1)
{
  uint64_t result;

  sub_1ACBFAC2C(a1, a1 + 32);
  *(_DWORD *)(a1 + 8) = 1;
  return (int)result;
}

uint64_t sub_1ACBFAFBC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (off_1ECD3B2E0 && off_1ECD3B2E0(202))
    return 3338;
  v10 = 0;
  result = sub_1ACBF1D8C(*(_QWORD *)a1, 0, a3, 4126, (uint64_t)&v10);
  v10 = result;
  if (!(_DWORD)result)
  {
    v7 = **a3;
    if (v7)
      (*(void (**)(uint64_t *))(v7 + 80))(*a3);
    if (a2 >= 1)
    {
      v8 = *a3;
      v13 = a2;
      if (*(int *)(a1 + 184) >= a2)
      {
        v9 = *v8;
        if (*(int *)*v8 >= 3)
        {
          v12 = 0;
          v11 = 4096;
          (*(void (**)(uint64_t *, uint64_t, int *))(v9 + 80))(v8, 6, &v11);
          (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v8 + 80))(v8, 5, &v13);
          (*(void (**)(uint64_t *, _QWORD, _QWORD, uint64_t *))(*v8 + 136))(v8, 0, v13, &v12);
          if (v12)
            (*(void (**)(uint64_t *, _QWORD))(*v8 + 144))(v8, 0);
        }
      }
    }
    return v10;
  }
  return result;
}

uint64_t sub_1ACBFB0F8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  _WORD v9[9];

  v2 = result;
  *(_QWORD *)&v9[5] = *MEMORY[0x1E0C80C00];
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      result = sub_1ACBF8034((int8x8_t *)v9, a2);
      v3 = result;
      if ((int)result < 1)
        return result;
    }
    else
    {
      LOBYTE(v9[0]) = (a2 >> 7) | 0x80;
      HIBYTE(v9[0]) = a2 & 0x7F;
      v3 = 2;
    }
  }
  else
  {
    LOBYTE(v9[0]) = a2;
    v3 = 1;
  }
  v4 = v3;
  do
  {
    if (*(_DWORD *)v2)
      break;
    v6 = *(int *)(v2 + 24);
    v7 = v4 >= *(_DWORD *)(v2 + 16) - (int)v6 ? *(_DWORD *)(v2 + 16) - v6 : v4;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v2 + 8) + v6), (char *)v9 + v3 - v4, v7);
    v8 = *(_DWORD *)(v2 + 24) + v7;
    *(_DWORD *)(v2 + 24) = v8;
    if (v8 == *(_DWORD *)(v2 + 16))
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 40) + 24))(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 8) + *(int *)(v2 + 20), (v8 - *(_DWORD *)(v2 + 20)), *(_QWORD *)(v2 + 32) + *(int *)(v2 + 20));
      *(_DWORD *)v2 = result;
      *(_DWORD *)(v2 + 20) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) += *(int *)(v2 + 16);
    }
    v5 = __OFSUB__(v4, v7);
    v4 -= v7;
  }
  while (!((v4 < 0) ^ v5 | (v4 == 0)));
  return result;
}

double sub_1ACBFB244(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (!*(_DWORD *)a1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_DWORD *)(a1 + 24);
      v9 = *(int *)(a1 + 20);
      if (v8 > (int)v9)
        *(_DWORD *)a1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v7 + v9, (v8 - v9), *(_QWORD *)(a1 + 32) + v9);
    }
  }
  *a2 = *(_QWORD *)(a1 + 32) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_8:
      (*v5)(v4);
      goto LABEL_9;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v4);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v4);
    v4 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v5 = &xmmword_1ECD3B1D0;
      goto LABEL_8;
    }
  }
LABEL_9:
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1ACBFB358(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(int *);

  if (off_1ECD3B2E0 && off_1ECD3B2E0(100) || (v6 = sub_1ACB5D828(72)) == 0)
  {
    *a3 = 0;
    if (a2)
    {
      if (*a2 >= 1)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          sub_1ACBF172C(*((_QWORD *)a2 + 3) + v10);
          ++v11;
          v10 += 80;
        }
        while (v11 < *a2);
      }
      v12 = (void (**)(int *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(a2);
        --qword_1ECD3E8D0;
        off_1ECD3B168(a2);
        a2 = (int *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return 7;
        v12 = (void (**)(int *))&xmmword_1ECD3B1D0;
      }
      (*v12)(a2);
    }
    return 7;
  }
  v7 = v6;
  result = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *a3 = v7;
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4) / 2;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) + 9 > v9)
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) + 9;
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 24) = v9;
  *(_QWORD *)(a1 + 96) += v9;
  return result;
}

uint64_t sub_1ACBFB4BC(uint64_t a1, int a2)
{
  uint64_t **v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t **v33;
  int v34;

  v3 = *(uint64_t ***)(a1 + 72);
  v4 = *v3;
  v5 = (unsigned int *)v3[1];
  v33 = v3;
  v32 = *(_QWORD *)((*v3)[2] + 32);
  *((_QWORD *)v5 + 1) = *v3;
  v6 = *v5;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = v6 - 1;
    v9 = 80 * v6;
    do
    {
      v11 = *((_QWORD *)v5 + 3);
      if (a2 == 2)
      {
        result = sub_1ACBFBC38(v11 + 80 * v8);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        v12 = v11 + v7;
        v13 = *(_QWORD *)(v11 + v7 + 72);
        if (v13)
        {
          if (*(_DWORD *)(v13 + 32))
          {
            v14 = *(_QWORD **)v13;
            **(_QWORD **)v13 = 0;
            v15 = (_QWORD *)sub_1ACB5D828(24);
            if (!v15)
              return 7;
            v16 = v15;
            if ((((int)v15 / 17) & 1) != 0)
            {
              *v15 = sub_1ACBFC3D8;
              v15[1] = v12;
            }
            else
            {
              *v15 = 0;
              v17 = sub_1ACBFB4BC(v12, 1);
              *(_DWORD *)(**(_QWORD **)(v12 + 72) + 8) = 1;
              v16[2] = v17;
            }
            *v14 = v16;
          }
          else
          {
            result = sub_1ACBFB4BC(v12, 0);
            if ((_DWORD)result)
              return result;
          }
        }
      }
      --v8;
      v7 += 80;
    }
    while (v9 != v7);
    v18 = *v5;
    if ((int)v18 >= 2)
    {
      v19 = 2 * v18 - 2;
      do
      {
        v22 = (int)*v5 / 2;
        if (v18 <= v22)
        {
          v24 = *((_QWORD *)v5 + 2);
          v23 = *(_DWORD *)(v24 + 4 * v19);
          v21 = *(_DWORD *)(v24 + 4 * (v19 + 1));
        }
        else
        {
          v23 = v19 - 2 * v22;
          v21 = v23 + 1;
        }
        v25 = *((_QWORD *)v5 + 3);
        if (*(_QWORD *)(v25 + 80 * (int)v23 + 24))
        {
          if (*(_QWORD *)(v25 + 80 * (int)v21 + 24))
          {
            v20 = *((_QWORD *)v5 + 1);
            v34 = 0;
            if ((*(int (**)(uint64_t, int *))(v20 + 64))(v20, &v34) < 1)
              v21 = v23;
          }
          else
          {
            v21 = v23;
          }
        }
        *(_DWORD *)(*((_QWORD *)v5 + 2) + 4 * --v18) = v21;
        v19 -= 2;
      }
      while ((unint64_t)(v18 + 1) > 2);
    }
  }
  v26 = v4[3];
  result = *(unsigned __int8 *)(v26 + 31);
  if (!*(_BYTE *)(v26 + 31))
  {
    v27 = v33;
    v28 = *((int *)v33 + 6);
    if (*((_DWORD *)v33 + 8))
    {
      result = sub_1ACBFAFBC(v32, *((int *)v33 + 6), v33 + 5);
      if ((_DWORD)result)
        return result;
      result = sub_1ACBFAFBC(v32, v28, v33 + 7);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v30 = (uint64_t *)v4[11];
      v29 = v4[12];
      if (!v30)
      {
        result = sub_1ACBFAFBC(v32, v29, (uint64_t **)v4 + 11);
        v4[12] = 0;
        if ((_DWORD)result)
          return result;
        v29 = 0;
        v30 = (uint64_t *)v4[11];
        v27 = v33;
      }
      v27[7] = v30;
      v27[2] = (uint64_t *)v29;
      v4[12] = v29 + v28;
    }
    if (*((_DWORD *)v33 + 8))
    {
      result = sub_1ACBFC038(v33);
      if (a2 == 1)
        return result;
    }
    else
    {
      result = 0;
      if (a2 == 1)
        return result;
    }
    if (!(_DWORD)result)
      return sub_1ACBFBC38(a1);
  }
  return result;
}

uint64_t sub_1ACBFB798(uint64_t a1, int a2, uint64_t *a3, int **a4)
{
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(int *);
  int **v26;
  unint64_t v27;

  v8 = *a3;
  v9 = 2;
  do
  {
    v10 = v9;
    v9 *= 2;
  }
  while (v10 < a2);
  if (off_1ECD3B2E0 && off_1ECD3B2E0(100)
    || (v11 = 84 * v10 + 32, (v12 = (int *)sub_1ACB5D828(v11)) == 0))
  {
    v20 = 7;
    goto LABEL_26;
  }
  v13 = v12;
  bzero(v12, v11);
  *v13 = v10;
  *((_QWORD *)v13 + 3) = v13 + 8;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = &v13[20 * v10 + 8];
  *a4 = v13;
  v26 = a4;
  if (a2 >= 1)
  {
    v14 = 0;
    v15 = 1;
    v16 = a2;
    while (1)
    {
      v17 = (uint64_t *)(*((_QWORD *)v13 + 3) + v14);
      v18 = sub_1ACBFB9D8(a1, v17, (uint64_t *)(a1 + 72), v8);
      if ((_DWORD)v18)
        break;
      v27 = 0;
      v18 = sub_1ACBFBB40((uint64_t)v17, &v27);
      v17[1] = v27 + *v17;
      if ((_DWORD)v18)
        break;
      v19 = sub_1ACBFBC38((uint64_t)v17);
      v20 = v19;
      v8 = v17[1];
      v21 = (_DWORD)v19 == 0;
      if (v15 < v16)
      {
        v14 += 80;
        ++v15;
        if (!(_DWORD)v19)
          continue;
      }
      goto LABEL_16;
    }
    v20 = v18;
    v8 = v17[1];
    a4 = v26;
LABEL_17:
    if (*v13 >= 1)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        sub_1ACBF172C(*((_QWORD *)v13 + 3) + v22);
        ++v23;
        v22 += 80;
      }
      while (v23 < *v13);
    }
    v24 = (void (**)(int *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v13);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v13);
      v13 = (int *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_26;
      v24 = (void (**)(int *))&xmmword_1ECD3B1D0;
    }
    (*v24)(v13);
LABEL_26:
    *a4 = 0;
    goto LABEL_27;
  }
  v20 = 0;
  v21 = 1;
LABEL_16:
  a4 = v26;
  if (!v21)
    goto LABEL_17;
LABEL_27:
  *a3 = v8;
  return v20;
}

uint64_t sub_1ACBFB9D8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (off_1ECD3B2E0 && off_1ECD3B2E0(201))
    return 266;
  if (a2[8])
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2[3] + 144))(a2[3], 0);
    a2[8] = 0;
  }
  v9 = *a3;
  v10 = a3[1];
  *a2 = a4;
  a2[1] = v10;
  a2[3] = v9;
  if (v10 <= *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 184) && **(int **)v9 >= 3)
  {
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 136))(v9, 0);
    if ((_DWORD)v8)
      return v8;
    if (a2[8])
      return 0;
  }
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 12);
  v12 = *a2;
  v13 = a2[6];
  if (v13)
  {
    v8 = 0;
  }
  else
  {
    v13 = sub_1ACB5D828(v11);
    a2[6] = v13;
    if (v13)
      v8 = 0;
    else
      v8 = 7;
    *((_DWORD *)a2 + 14) = v11;
    if ((_DWORD)v8)
      return v8;
  }
  v14 = v12 % v11;
  if (!(_DWORD)v14)
    return v8;
  v15 = a2[1];
  if (*a2 + v11 - (int)v14 <= v15)
    v16 = (v11 - v14);
  else
    v16 = v15 - *a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], v13 + v14, v16);
}

uint64_t sub_1ACBFBB40(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t result;
  int v11;
  unsigned int v12;
  char *v13;
  char v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)a1;
  if (v4)
    goto LABEL_11;
  v6 = *(int *)(a1 + 56);
  v5 %= v6;
  v7 = v6 - v5;
  if ((_DWORD)v5)
    v8 = v7 < 9;
  else
    v8 = 1;
  if (!v8)
  {
    v4 = *(_QWORD *)(a1 + 48);
LABEL_11:
    v12 = sub_1ACB8A6CC((char *)(v4 + v5), a2);
    result = 0;
    *(_QWORD *)a1 += v12;
    return result;
  }
  v9 = 0;
  v13 = 0;
  while (1)
  {
    result = sub_1ACBFBE94((uint64_t *)a1, 1, &v13);
    if ((_DWORD)result)
      break;
    v11 = *v13;
    v14[v9++ & 0xF] = *v13;
    if ((v11 & 0x80000000) == 0)
    {
      sub_1ACB8A6CC(v14, a2);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1ACBFBC38(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  __int128 v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unint64_t v15[3];

  v15[0] = 0;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v5 = *(uint64_t ***)(a1 + 72);
    if (!v5)
    {
LABEL_24:
      v2 = 0;
      goto LABEL_25;
    }
    if (!*((_DWORD *)v5 + 8))
    {
      v8 = sub_1ACBFC038(*(_QWORD **)(a1 + 72));
      v2 = v8;
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
      if (v5[6] == v5[2])
        *((_DWORD *)v5 + 7) = 1;
      if ((_DWORD)v8)
        goto LABEL_25;
      goto LABEL_23;
    }
    v6 = *v5;
    v7 = **v5;
    if (!v7)
    {
LABEL_21:
      v10 = *(_OWORD *)(v5 + 5);
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
      *(_OWORD *)(v5 + 7) = v10;
      if (v5[6] != v5[2])
      {
        v11 = *v5;
        **v5 = 0;
        v12 = (_QWORD *)sub_1ACB5D828(24);
        if (!v12)
        {
          v2 = 7;
          goto LABEL_25;
        }
        v13 = v12;
        if ((((int)v12 / 17) & 1) != 0)
        {
          *v12 = sub_1ACBFC23C;
          v12[1] = v5;
        }
        else
        {
          *v12 = 0;
          v14 = sub_1ACBFC038(v5);
          *((_DWORD *)*v5 + 2) = 1;
          v13[2] = v14;
        }
        *v11 = (uint64_t)v13;
        if (*((_DWORD *)v5 + 7))
          goto LABEL_24;
        goto LABEL_33;
      }
      *((_DWORD *)v5 + 7) = 1;
LABEL_23:
      if (*((_DWORD *)v5 + 7))
        goto LABEL_24;
LABEL_33:
      v2 = sub_1ACBFB9D8((uint64_t)*v5, (uint64_t *)a1, (uint64_t *)v5 + 5, (uint64_t)v5[2]);
      if ((_DWORD)v2)
        return v2;
      goto LABEL_2;
    }
    if (*(_QWORD *)v7)
      v2 = (*(uint64_t (**)(_QWORD))v7)(*(_QWORD *)(v7 + 8));
    else
      v2 = *(_QWORD *)(v7 + 16);
    v9 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_20:
        *((_DWORD *)v6 + 2) = 0;
        *v6 = 0;
        if ((_DWORD)v2)
        {
LABEL_25:
          sub_1ACBF172C(a1);
          return v2;
        }
        goto LABEL_21;
      }
      v9 = &xmmword_1ECD3B1D0;
    }
    (*v9)(v7);
    goto LABEL_20;
  }
LABEL_2:
  v2 = sub_1ACBFBB40(a1, v15);
  if (!(_DWORD)v2)
  {
    v3 = v15[0];
    *(_DWORD *)(a1 + 20) = v15[0];
    return sub_1ACBFBE94((uint64_t *)a1, v3, (_QWORD *)(a1 + 40));
  }
  return v2;
}

uint64_t sub_1ACBFBE94(uint64_t *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  void *__src;

  v6 = a1[8];
  v7 = *a1;
  if (v6)
  {
    result = 0;
    *a3 = v6 + v7;
    v9 = v7 + a2;
LABEL_3:
    *a1 = v9;
    return result;
  }
  v10 = *((_DWORD *)a1 + 14);
  v11 = v7 % (int)v10;
  if (!(_DWORD)v11)
  {
    v20 = a1[1] - v7;
    if (v20 <= (int)v10)
      v21 = v20;
    else
      v21 = v10;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], a1[6], v21);
    if ((_DWORD)result)
      return result;
    v10 = *((_DWORD *)a1 + 14);
  }
  v12 = v10 - v11;
  v13 = a2 - (v10 - v11);
  if (a2 <= (int)(v10 - v11))
  {
    result = 0;
    *a3 = a1[6] + v11;
    v9 = *a1 + a2;
    goto LABEL_3;
  }
  v14 = *((int *)a1 + 4);
  if ((int)v14 >= a2)
  {
    v19 = (void *)a1[4];
  }
  else
  {
    v15 = 2 * v14;
    v16 = (int)v14 < 64;
    v17 = 128;
    if (!v16)
      v17 = v15;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < a2);
    v19 = (void *)sub_1ACB6BB48(a1[4], v18);
    if (!v19)
      return 7;
    *((_DWORD *)a1 + 4) = v18;
    a1[4] = (uint64_t)v19;
  }
  memcpy(v19, (const void *)(a1[6] + v11), v12);
  *a1 += v12;
  if (v13 < 1)
  {
LABEL_27:
    result = 0;
    *a3 = a1[4];
  }
  else
  {
    while (1)
    {
      __src = 0;
      v22 = *((_DWORD *)a1 + 14);
      v23 = v13 >= v22 ? v22 : v13;
      result = sub_1ACBFBE94(a1, v23, &__src);
      if ((_DWORD)result)
        break;
      memcpy((void *)(a1[4] + a2 - v13), __src, (int)v23);
      v24 = __OFSUB__(v13, (_DWORD)v23);
      v13 -= v23;
      if ((v13 < 0) ^ v24 | (v13 == 0))
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_1ACBFC038(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v1 = a1;
  v2 = a1[2];
  v29 = a1[1];
  v3 = a1[7];
  v4 = *(_DWORD *)(*(_QWORD *)(*a1 + 16) + 12);
  v31 = 0;
  v33 = 0u;
  v34 = 0u;
  v32 = sub_1ACB5D828(v4);
  if (v32)
  {
    DWORD1(v33) = v2 % v4;
    DWORD2(v33) = DWORD1(v33);
    LODWORD(v33) = v4;
    *(_QWORD *)&v34 = v2 / v4 * v4;
    *((_QWORD *)&v34 + 1) = v3;
  }
  else
  {
    LODWORD(v31) = 7;
  }
  v27 = v2;
  v28 = v1;
  do
  {
    v6 = *(_QWORD *)(v29 + 24);
    v7 = *(_DWORD *)(*(_QWORD *)(v29 + 16) + 4);
    v8 = v6 + 80 * v7;
    if (!*(_QWORD *)(v8 + 24))
      goto LABEL_23;
    v9 = *(_DWORD *)(v8 + 20);
    v10 = 1;
    if (v9 >= 0x80)
    {
      v11 = v9;
      do
      {
        v12 = v11 >> 14;
        v11 >>= 7;
        ++v10;
      }
      while (v12);
    }
    if ((uint64_t)v34 + v9 + SDWORD2(v33) + v10 > v2 + *((int *)v1 + 6))
    {
LABEL_23:
      sub_1ACBFB244((uint64_t)&v31, v1 + 8);
      return v24;
    }
    sub_1ACBFB0F8((uint64_t)&v31, v9);
    if (v9 >= 1)
    {
      v13 = *(_QWORD *)(v6 + 80 * v7 + 40);
      v14 = v31;
      v15 = DWORD1(v33);
      v16 = DWORD2(v33);
      v17 = (int)v33;
      v18 = v32;
      v19 = *((_QWORD *)&v34 + 1);
      v20 = v34;
      v21 = v9;
      while (!v14)
      {
        if (v21 >= (int)(v17 - v16))
          v23 = v17 - v16;
        else
          v23 = v21;
        memcpy((void *)(v18 + (int)v16), (const void *)(v13 + v9 - v21), v23);
        v16 += v23;
        if (v16 == (_DWORD)v17)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 24))(v19, v18 + (int)v15, v17 - v15, v20 + (int)v15);
          v15 = 0;
          v16 = 0;
          v20 += v17;
          v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0))
            break;
        }
        else
        {
          v14 = 0;
          v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0))
            break;
        }
      }
      *(_QWORD *)((char *)&v33 + 4) = __PAIR64__(v16, v15);
      LODWORD(v31) = v14;
      *(_QWORD *)&v34 = v20;
      v2 = v27;
      v1 = v28;
    }
    v5 = sub_1ACBFC26C(v1[1], &v30);
  }
  while (!(_DWORD)v5);
  v25 = v5;
  sub_1ACBFB244((uint64_t)&v31, v1 + 8);
  return v25;
}

uint64_t sub_1ACBFC23C(_QWORD *a1)
{
  uint64_t result;

  result = (int)sub_1ACBFC038(a1);
  *(_DWORD *)(*a1 + 8) = 1;
  return result;
}

uint64_t sub_1ACBFC26C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
  result = sub_1ACBFBC38(*(_QWORD *)(a1 + 24) + 80 * v5);
  if (!(_DWORD)result)
  {
    v7 = v5;
    v16 = 0;
    v8 = *(_DWORD *)a1 + v5;
    v9 = *(_QWORD *)(a1 + 24);
    if ((int)v8 > 1)
    {
      v10 = v9 + 80 * (v7 | 1);
      v11 = v9 + 80 * ((unsigned __int16)v7 & 0xFFFE);
      while (1)
      {
        v14 = v8 >> 1;
        if (!*(_QWORD *)(v11 + 24))
          goto LABEL_14;
        if (*(_QWORD *)(v10 + 24))
        {
          v15 = (*(uint64_t (**)(uint64_t, int *, _QWORD, _QWORD, _QWORD, _QWORD))(v4 + 64))(v4, &v16, *(_QWORD *)(v11 + 40), *(unsigned int *)(v11 + 20), *(_QWORD *)(v10 + 40), *(unsigned int *)(v10 + 20));
          if ((v15 & 0x80000000) == 0 && (v15 || v11 >= v10))
            break;
        }
        v12 = *(_QWORD *)(a1 + 16);
        v9 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v12 + 4 * v14) = -858993459 * ((v11 - v9) >> 4);
        v10 = v9 + 80 * *(int *)(v12 + 4 * (v14 ^ 1));
        v16 = 0;
LABEL_5:
        v13 = v8 > 3;
        v8 >>= 1;
        if (!v13)
          goto LABEL_16;
      }
      if (*(_QWORD *)(v11 + 24))
        v16 = 0;
LABEL_14:
      v12 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v14) = -858993459 * ((v10 - v9) >> 4);
      v11 = v9 + 80 * *(int *)(v12 + 4 * (v14 ^ 1));
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(a1 + 16);
LABEL_16:
    *a2 = *(_QWORD *)(v9 + 80 * *(int *)(v12 + 4) + 24) == 0;
    return *(unsigned __int8 *)(*(_QWORD *)(v4 + 24) + 31);
  }
  return result;
}

uint64_t sub_1ACBFC3D8(uint64_t a1)
{
  uint64_t result;

  result = (int)sub_1ACBFB4BC(a1, 1);
  *(_DWORD *)(**(_QWORD **)(a1 + 72) + 8) = 1;
  return result;
}

uint64_t sub_1ACBFC410(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  _QWORD *v5;
  uint64_t (**v6)(_QWORD);

  v1 = result;
  v2 = *(_QWORD **)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (*v4)(v3);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)v1 = 0;
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v2);
        v2 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_11;
        v6 = &xmmword_1ECD3B1D0;
      }
      result = (*v6)(v2);
LABEL_11:
      v2 = v5;
    }
    while (v5);
  }
  *(_DWORD *)(v1 + 4) = 0;
  return result;
}

uint64_t sub_1ACBFC560(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  _BYTE *v6;
  const char *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;

  *(_BYTE *)(result + 100) = a2;
  v2 = *(_QWORD *)(result + 656);
  if (!v2)
  {
    v4 = (uint64_t *)(result + 648);
    v5 = *(_DWORD *)(result + 644);
    if (!v5)
      goto LABEL_12;
LABEL_3:
    v4 = (uint64_t *)*v4;
    v6 = (_BYTE *)v4[3];
    for (i = "BINARY"; ; ++i)
    {
      v8 = *v6;
      v9 = *(unsigned __int8 *)i;
      if ((_DWORD)v8 == (_DWORD)v9)
      {
        if (!*v6)
          goto LABEL_13;
      }
      else if (byte_1ACCB6333[v8] != byte_1ACCB6333[v9])
      {
        if (!--v5)
        {
          v4 = &qword_1EECAD260;
          goto LABEL_13;
        }
        goto LABEL_3;
      }
      ++v6;
    }
  }
  v3 = (_DWORD *)(v2 + 16 * (0x2EB35835u % *(_DWORD *)(result + 640)));
  v4 = (uint64_t *)(v3 + 2);
  v5 = *v3;
  if (v5)
    goto LABEL_3;
LABEL_12:
  v4 = &qword_1EECAD260;
LABEL_13:
  v10 = v4[2];
  if (v10)
    v11 = v10 + 40 * a2 - 40;
  else
    v11 = 0;
  *(_QWORD *)(result + 16) = v11;
  for (j = *(_QWORD *)(result + 8); j; j = *(_QWORD *)(j + 16))
    *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 2;
  return result;
}

_QWORD *sub_1ACBFC650(uint64_t a1, unsigned int a2, char *__s, int a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  char *v10;
  int v11;
  uint64_t *v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _BYTE *v20;
  char *i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t j;
  char v34;

  if (!__s)
    return *(_QWORD **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 656);
  if (v7)
  {
    v8 = *__s;
    if (*__s)
    {
      v9 = 0;
      v10 = __s + 1;
      do
      {
        v9 = -1640531535 * (v9 + byte_1ACCB6333[v8]);
        v11 = *v10++;
        v8 = v11;
      }
      while (v11);
    }
    else
    {
      v9 = 0;
    }
    v19 = (_DWORD *)(v7 + 16 * (v9 % *(_DWORD *)(a1 + 640)));
    v13 = (uint64_t *)(v19 + 2);
    v14 = *v19;
    if (v14)
    {
      while (1)
      {
LABEL_19:
        v13 = (uint64_t *)*v13;
        v20 = (_BYTE *)v13[3];
        for (i = __s; ; ++i)
        {
          v22 = *v20;
          v23 = *i;
          if ((_DWORD)v22 != (_DWORD)v23)
            break;
          if (!*v20)
            goto LABEL_10;
LABEL_21:
          ++v20;
        }
        if (byte_1ACCB6333[v22] == byte_1ACCB6333[v23])
          goto LABEL_21;
        if (!--v14)
        {
          v13 = &qword_1EECAD260;
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    v13 = (uint64_t *)(a1 + 648);
    v14 = *(_DWORD *)(a1 + 644);
    if (v14)
      goto LABEL_19;
  }
  v13 = &qword_1EECAD260;
LABEL_10:
  v15 = (_QWORD *)v13[2];
  if (!a4 || v15)
  {
    if (!v15)
      return 0;
  }
  else
  {
    v16 = strlen(__s);
    v17 = v16 & 0x3FFFFFFF;
    v18 = v17 + 121;
    if (a1)
    {
      v15 = (_QWORD *)sub_1ACBE1124(a1, v18);
      if (!v15)
        return 0;
    }
    else
    {
      v15 = (_QWORD *)sub_1ACB5D828((v16 & 0x3FFFFFFF) + 121);
      if (!v15)
        return 0;
    }
    bzero(v15, v18);
    *v15 = v15 + 15;
    *((_BYTE *)v15 + 8) = 1;
    v15[5] = v15 + 15;
    *((_BYTE *)v15 + 48) = 2;
    v15[10] = v15 + 15;
    *((_BYTE *)v15 + 88) = 3;
    memcpy(v15 + 15, __s, v17 + 1);
    v24 = sub_1ACB57390(a1 + 640, (unsigned __int8 *)v15 + 120, (uint64_t)v15);
    if (v24)
    {
      v31 = (_QWORD *)v24;
      if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 103) = 1;
        if (*(int *)(a1 + 220) >= 1)
          *(_DWORD *)(a1 + 424) = 1;
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        v32 = *(_QWORD *)(a1 + 344);
        if (v32)
        {
          sub_1ACBCB308(v32, "out of memory", v25, v26, v27, v28, v29, v30, v34);
          for (j = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
          {
            *(_DWORD *)(j + 24) = 7;
            j = *(_QWORD *)(j + 256);
            if (!j)
              break;
          }
        }
      }
      sub_1ACBE0F9C((_QWORD *)a1, v31);
      return 0;
    }
  }
  return &v15[5 * a2 - 5];
}

uint64_t sub_1ACBFC8AC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  int v8;
  _DWORD *v10;
  _BYTE *v11;
  unsigned __int8 *i;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v7 = (uint64_t *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 4);
    if (v8)
      goto LABEL_10;
    return qword_1EECAD270;
  }
  v3 = *a2;
  if (*a2)
  {
    v4 = 0;
    v5 = a2 + 1;
    do
    {
      v4 = -1640531535 * (v4 + byte_1ACCB6333[v3]);
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v10 = (_DWORD *)(v2 + 16 * (v4 % *(_DWORD *)a1));
  v7 = (uint64_t *)(v10 + 2);
  v8 = *v10;
  if (!v8)
    return qword_1EECAD270;
  do
  {
LABEL_10:
    v7 = (uint64_t *)*v7;
    v11 = (_BYTE *)v7[3];
    for (i = a2; ; ++i)
    {
      v13 = *v11;
      v14 = *i;
      if ((_DWORD)v13 != (_DWORD)v14)
        break;
      if (!*v11)
        return v7[2];
LABEL_12:
      ++v11;
    }
    if (byte_1ACCB6333[v13] == byte_1ACCB6333[v14])
      goto LABEL_12;
    --v8;
  }
  while (v8);
  v7 = &qword_1EECAD260;
  return v7[2];
}

uint64_t sub_1ACBFC988(uint64_t result, _QWORD *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v8 = result;
  v9 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 103))
  {
    result = 7;
LABEL_3:
    *(_DWORD *)(v8 + 20) = result;
    return result;
  }
  if (!**(_QWORD **)(result + 8))
  {
    if ((*(_DWORD *)(result + 24) & 3) != 0)
    {
      **(_QWORD **)(result + 8) = sub_1ACB6DDD0(v9, "error in %s %s after %s: %s", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
      result = 1;
    }
    else
    {
      if ((*(_BYTE *)(v9 + 48) & 1) != 0)
      {
        v19 = 147842;
      }
      else
      {
        v11 = (const char *)a2[1];
        if (!v11)
          v11 = "?";
        v12 = sub_1ACB6DDD0(v9, "malformed database schema (%s)", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v11);
        if (a3)
        {
          if (*a3)
            v12 = sub_1ACB6DDD0(v9, "%z - %s", v13, v14, v15, v16, v17, v18, (char)v12);
        }
        **(_QWORD **)(v8 + 8) = v12;
        v19 = 147849;
      }
      result = sub_1ACBEB08C(v19);
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1ACBFCA9C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  const char *v19;
  unsigned __int8 *j;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _BYTE *v25;
  unsigned __int8 *k;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3 < 1)
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  while (1)
  {
    v8 = v4 ^ (v4 < 2);
    v9 = *(_QWORD *)(v5 + 32 * v8 + 24);
    if (!a3)
      break;
    v10 = *(_BYTE **)(v5 + 32 * v8);
    for (i = a3; ; ++i)
    {
      v12 = *v10;
      v13 = *i;
      if ((_DWORD)v12 != (_DWORD)v13)
        break;
      if (!*v10)
        goto LABEL_12;
LABEL_9:
      ++v10;
    }
    if (byte_1ACCB6333[v12] == byte_1ACCB6333[v13])
      goto LABEL_9;
    if (!(_DWORD)v8)
    {
      v19 = "main";
      for (j = a3; ; ++j)
      {
        v21 = *(unsigned __int8 *)v19;
        v22 = *j;
        if ((_DWORD)v21 == (_DWORD)v22)
        {
          if (!*v19)
            goto LABEL_12;
        }
        else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
        {
          break;
        }
        ++v19;
      }
    }
LABEL_5:
    if (++v4 == v3)
      return 0;
  }
LABEL_12:
  v14 = *(_QWORD *)(v9 + 48);
  if (v14)
  {
    v15 = *a2;
    if (*a2)
    {
      v16 = 0;
      v17 = a2 + 1;
      do
      {
        v16 = -1640531535 * (v16 + byte_1ACCB6333[v15]);
        v18 = *v17++;
        v15 = v18;
      }
      while (v18);
    }
    else
    {
      v16 = 0;
    }
    v24 = (_DWORD *)(v14 + 16 * (v16 % *(_DWORD *)(v9 + 32)));
    v6 = (uint64_t *)(v24 + 2);
    v23 = *v24;
    if (!v23)
      goto LABEL_3;
    while (1)
    {
LABEL_28:
      v6 = (uint64_t *)*v6;
      v25 = (_BYTE *)v6[3];
      for (k = a2; ; ++k)
      {
        v27 = *v25;
        v28 = *k;
        if ((_DWORD)v27 != (_DWORD)v28)
          break;
        if (!*v25)
          goto LABEL_4;
LABEL_30:
        ++v25;
      }
      if (byte_1ACCB6333[v27] == byte_1ACCB6333[v28])
        goto LABEL_30;
      if (!--v23)
        goto LABEL_3;
    }
  }
  v6 = (uint64_t *)(v9 + 40);
  v23 = *(_DWORD *)(v9 + 36);
  if (v23)
    goto LABEL_28;
LABEL_3:
  v6 = &qword_1EECAD260;
LABEL_4:
  result = v6[2];
  if (!result)
    goto LABEL_5;
  return result;
}

_QWORD *sub_1ACBFCC3C(_QWORD *result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);

  v1 = result[76];
  if (v1)
  {
    result[76] = 0;
    for (i = result[1]; i; i = *(_QWORD *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    do
    {
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(_QWORD **)v1;
      v5 = *(_DWORD *)(v1 + 24) - 1;
      *(_DWORD *)(v1 + 24) = v5;
      if (!v5)
      {
        v6 = *(_QWORD *)(v1 + 16);
        v7 = v4;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
          v7 = *(_QWORD **)v1;
        }
        v8 = *(_QWORD *)(v1 + 8);
        v9 = *(_DWORD *)(v8 + 16) - 1;
        *(_DWORD *)(v8 + 16) = v9;
        if (!v9)
        {
          v10 = *(void (**)(_QWORD))(v8 + 32);
          if (v10)
            v10(*(_QWORD *)(v8 + 24));
          sub_1ACBE0F9C(v7, (_QWORD *)v8);
        }
        result = sub_1ACBE0F9C(v4, (_QWORD *)v1);
      }
      v1 = v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1ACBFCD10(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  void *result;
  unint64_t v8;
  unint64_t v9;

  v2 = *(unsigned __int16 *)(a1 + 94);
  if (v2 >= 5)
    v3 = 5;
  else
    v3 = *(unsigned __int16 *)(a1 + 94);
  v5 = *(_WORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(__int16 *)(v4 + 58);
  if (v6 <= 98)
  {
    LOWORD(v6) = 99;
    *(_WORD *)(v4 + 58) = 99;
  }
  if (*(_QWORD *)(a1 + 72))
    LOWORD(v6) = v6 - 10;
  *v5 = v6;
  result = memcpy(v5 + 1, &unk_1ACCB6DF0, 2 * (v3 & 0x7FFF));
  LODWORD(v8) = *(unsigned __int16 *)(a1 + 94);
  if (v3 < v8)
  {
    if (v2 >= 5)
      v9 = 5;
    else
      v9 = v2;
    do
    {
      v5[v9 + 1] = 23;
      v8 = *(unsigned __int16 *)(a1 + 94);
      ++v9;
    }
    while (v9 < v8);
  }
  if (*(_BYTE *)(a1 + 98))
    v5[v8] = 0;
  return result;
}

unsigned __int8 *sub_1ACBFCDC8(unsigned __int8 *result, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  __int16 v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unint64_t v16;
  __int16 v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;

  v5 = result;
  v6 = *result;
  if (*result)
    v7 = a2 < 1;
  else
    v7 = 1;
  if (!v7)
  {
    v16 = 0;
    do
    {
      if (v6 - 48 <= 9)
      {
        v19 = 0;
        do
        {
          v19 = 10 * v19 + v6 - 48;
          v20 = *++v5;
          v6 = v20;
        }
        while (v20 - 48 < 0xA);
        if (v19 >= 8)
        {
          v21 = 40;
          if (v19 >= 0x100)
          {
            v23 = v19;
            do
            {
              v21 += 40;
              v19 = v23 >> 4;
              v7 = v23 > 0xFFF;
              v23 >>= 4;
            }
            while (v7);
          }
          LOBYTE(v22) = v19;
          if (v19 >= 0x10)
          {
            do
            {
              v21 += 10;
              v22 = v19 >> 1;
              v7 = v19 > 0x1F;
              v19 >>= 1;
            }
            while (v7);
          }
          goto LABEL_54;
        }
        if (v19 >= 2)
        {
          v21 = 40;
          do
          {
            v21 -= 10;
            LOBYTE(v22) = 2 * v19;
            v18 = v19 >= 4;
            v19 *= 2;
          }
          while (!v18);
LABEL_54:
          v17 = v21 + word_1ACCBD832[v22 & 7] - 10;
          goto LABEL_34;
        }
      }
      v17 = 0;
LABEL_34:
      *(_WORD *)(a3 + 2 * v16) = v17;
      if (*v5 == 32)
        ++v5;
      ++v16;
      v6 = *v5;
      if (*v5)
        v18 = v16 >= a2;
      else
        v18 = 1;
    }
    while (!v18);
  }
  *(_WORD *)(a4 + 99) &= 0xFFBBu;
  if (*v5)
  {
    while (1)
    {
      result = (unsigned __int8 *)sub_1ACBADEF0("unordered*", (const char *)v5, byte_1ACCB6540, 91);
      if (!(_DWORD)result)
        break;
      if (!sub_1ACBADEF0("sz=[0-9]*", (const char *)v5, byte_1ACCB6540, 91))
      {
        v24 = 0;
        result = (unsigned __int8 *)sub_1ACBFD07C(v5 + 3, &v24);
        if (v24 <= 2)
          v9 = 2;
        else
          v9 = v24;
        v10 = 40;
        if (v9 > 7)
        {
          if (v9 >= 0x100)
          {
            v12 = v9;
            do
            {
              v10 += 40;
              v9 = v12 >> 4;
              v7 = v12 > 0xFFF;
              v12 >>= 4;
            }
            while (v7);
          }
          LOBYTE(v11) = v9;
          if (v9 >= 0x10)
          {
            do
            {
              v10 += 10;
              v11 = v9 >> 1;
              v7 = v9 > 0x1F;
              v9 >>= 1;
            }
            while (v7);
          }
        }
        else
        {
          do
          {
            v10 -= 10;
            LOBYTE(v11) = 2 * v9;
            v18 = v9 >= 4;
            v9 *= 2;
          }
          while (!v18);
        }
        *(_WORD *)(a4 + 92) = v10 + word_1ACCBD832[v11 & 7] - 10;
        goto LABEL_26;
      }
      result = (unsigned __int8 *)sub_1ACBADEF0("noskipscan*", (const char *)v5, byte_1ACCB6540, 91);
      if (!(_DWORD)result)
      {
        v8 = *(_WORD *)(a4 + 99) | 0x40;
LABEL_12:
        *(_WORD *)(a4 + 99) = v8;
      }
LABEL_26:
      v13 = v5 - 1;
      while ((*v5 | 0x20) != 0x20)
      {
        ++v5;
        ++v13;
      }
      v5 = v13;
      do
      {
        v15 = *++v5;
        v14 = v15;
      }
      while (v15 == 32);
      if (!v14)
        return result;
    }
    v8 = *(_WORD *)(a4 + 99) | 4;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1ACBFD07C(unsigned __int8 *a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v2 = *a1;
  switch(v2)
  {
    case '-':
      ++a1;
      v3 = -1;
      break;
    case '0':
      if ((a1[1] | 0x20) == 0x78 && (byte_1ACCB6548[a1[2]] & 8) != 0)
      {
        do
        {
          v16 = a1[2];
          ++a1;
        }
        while (v16 == 48);
        if ((byte_1ACCB6548[v16] & 8) != 0)
        {
          v17 = ((((char)(2 * v16) >> 7) & 0xF9) + (_BYTE)v16) & 0xF;
          v21 = a1[2];
          if ((byte_1ACCB6548[v21] & 8) != 0)
          {
            v17 = ((((char)(2 * v21) >> 7) & 0xF9) + (_BYTE)v21) & 0xF | (16 * v17);
            v22 = a1[3];
            if ((byte_1ACCB6548[v22] & 8) != 0)
            {
              v17 = ((((char)(2 * v22) >> 7) & 0xF9) + (_BYTE)v22) & 0xF | (16 * v17);
              v23 = a1[4];
              if ((byte_1ACCB6548[v23] & 8) != 0)
              {
                v17 = ((((char)(2 * v23) >> 7) & 0xF9) + (_BYTE)v23) & 0xF | (16 * v17);
                v24 = a1[5];
                if ((byte_1ACCB6548[v24] & 8) != 0)
                {
                  v17 = ((((char)(2 * v24) >> 7) & 0xF9) + (_BYTE)v24) & 0xF | (16 * v17);
                  v25 = a1[6];
                  if ((byte_1ACCB6548[v25] & 8) != 0)
                  {
                    v17 = ((((char)(2 * v25) >> 7) & 0xF9) + (_BYTE)v25) & 0xF | (16 * v17);
                    v26 = a1[7];
                    if ((byte_1ACCB6548[v26] & 8) != 0)
                    {
                      v17 = ((((char)(2 * v26) >> 7) & 0xF9) + (_BYTE)v26) & 0xF | (16 * v17);
                      v27 = a1[8];
                      if ((byte_1ACCB6548[v27] & 8) != 0)
                      {
                        v28 = ((((char)(2 * v27) >> 7) & 0xF9) + (_BYTE)v27) & 0xF | (16 * v17);
                        if (((16 * v17) & 0x80000000) != 0)
                          return 0;
                        v18 = 8;
                        v17 = v28;
                      }
                      else
                      {
                        v18 = 7;
                      }
                    }
                    else
                    {
                      v18 = 6;
                    }
                  }
                  else
                  {
                    v18 = 5;
                  }
                }
                else
                {
                  v18 = 4;
                }
              }
              else
              {
                v18 = 3;
              }
            }
            else
            {
              v18 = 2;
            }
          }
          else
          {
            v18 = 1;
          }
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
        if ((byte_1ACCB6548[a1[v18 + 1]] & 8) != 0)
          return 0;
        *a2 = v17;
        return 1;
      }
      v3 = 0;
      break;
    case '+':
      v3 = 0;
      ++a1;
      break;
    default:
      v3 = 0;
      v4 = *a1;
      goto LABEL_10;
  }
  v4 = *a1;
LABEL_10:
  if ((unint64_t)v4 - 58 < 0xFFFFFFFFFFFFFFF6)
    return 0;
  if (v4 == 48)
  {
    do
    {
      v5 = *++a1;
      v4 = v5;
    }
    while (v5 == 48);
  }
  if (v4 - 48 >= 0xA)
  {
    v6 = 0;
    goto LABEL_29;
  }
  v6 = v4 - 48;
  v7 = a1[1];
  if ((v7 - 48) > 9)
    goto LABEL_29;
  v6 = (v7 - 48) + 10 * v6;
  v8 = a1[2];
  if ((v8 - 48) > 9)
    goto LABEL_29;
  v6 = (v8 - 48) + 10 * v6;
  v9 = a1[3];
  if ((v9 - 48) > 9)
    goto LABEL_29;
  v6 = (v9 - 48) + 10 * v6;
  v10 = a1[4];
  if ((v10 - 48) > 9)
    goto LABEL_29;
  v6 = (v10 - 48) + 10 * v6;
  v11 = a1[5];
  if ((v11 - 48) > 9)
    goto LABEL_29;
  v6 = (v11 - 48) + 10 * v6;
  v12 = a1[6];
  if ((v12 - 48) > 9)
    goto LABEL_29;
  v6 = (v12 - 48) + 10 * v6;
  v13 = a1[7];
  if ((v13 - 48) > 9)
    goto LABEL_29;
  v6 = (v13 - 48) + 10 * v6;
  v14 = a1[8];
  if ((v14 - 48) > 9)
    goto LABEL_29;
  v6 = (v14 - 48) + 10 * v6;
  v15 = a1[9];
  if ((v15 - 48) > 9)
    goto LABEL_29;
  if (a1[10] - 48 < 0xA)
    return 0;
  v6 = (v15 - 48) + 10 * v6;
LABEL_29:
  if (v6 + v3 > 0x7FFFFFFF)
    return 0;
  if (v2 == 45)
    v20 = -(int)v6;
  else
    v20 = v6;
  *a2 = v20;
  return 1;
}

_QWORD *sub_1ACBFD414(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 **)(a2 + 72);
  if (v4)
    sub_1ACBF8348(a1, v4);
  v5 = *(_QWORD **)(a2 + 80);
  if (v5)
    sub_1ACC010B0(a1, v5);
  v6 = *(_QWORD **)(a2 + 32);
  if (v6)
    sub_1ACBE0F9C(a1, v6);
  if ((*(_WORD *)(a2 + 99) & 0x10) != 0)
  {
    v7 = *(_QWORD **)(a2 + 64);
    if (v7)
      sub_1ACBE0F9C(a1, v7);
  }
  return sub_1ACBE0F9C(a1, (_QWORD *)a2);
}

void sub_1ACBFD484(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  int v27;

  v4 = a2;
  v27 = *(_DWORD *)(a1 + 32);
  v6 = a4;
  if ((_DWORD)a3)
  {
    v7 = a3;
    v8 = "invalid page number %u";
    v6 = a4;
    while (*(_DWORD *)(a1 + 28))
    {
      if ((v7 - 1) >= *(_DWORD *)(a1 + 24))
        goto LABEL_32;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = (unint64_t)v7 >> 3;
      v11 = *(unsigned __int8 *)(v9 + v10);
      v12 = 1 << (v7 & 7);
      if ((v12 & v11) != 0)
      {
        sub_1ACBFD79C(a1, "2nd reference to page %u");
        break;
      }
      *(_BYTE *)(v9 + v10) = v11 | v12;
      v13 = v6 - 1;
      if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 8) + 288))())
      {
        v8 = "failed to get page %u";
        --v6;
LABEL_32:
        sub_1ACBFD79C(a1, v8, v7);
        break;
      }
      v14 = (unsigned int *)MEMORY[8];
      if (v4)
      {
        v15 = *(_DWORD *)(MEMORY[8] + 4);
        v16 = *(_QWORD *)a1;
        if (*(_BYTE *)(*(_QWORD *)a1 + 33))
        {
          sub_1ACBFD8F4(a1, v7, 2, 0);
          v16 = *(_QWORD *)a1;
        }
        v17 = bswap32(v15);
        if (v17 <= (*(_DWORD *)(v16 + 56) >> 2) - 2)
        {
          if ((int)v17 >= 1)
          {
            v18 = (unsigned __int8 *)v14 + 11;
            v19 = v17;
            do
            {
              v20 = *(v18 - 1);
              v21 = *v18;
              v22 = (*(v18 - 3) << 24) | (*(v18 - 2) << 16) | (v20 << 8) | v21;
              if (*(_BYTE *)(*(_QWORD *)a1 + 33))
                sub_1ACBFD8F4(a1, (*(v18 - 3) << 24) | (*(v18 - 2) << 16) | (v20 << 8) | v21, 2, 0);
              if ((v22 - 1) >= *(_DWORD *)(a1 + 24))
              {
                sub_1ACBFD79C(a1, "invalid page number %u");
              }
              else
              {
                v23 = *(_QWORD *)(a1 + 16);
                v24 = *(unsigned __int8 *)(v23 + (v22 >> 3));
                v25 = 1 << (v21 & 7);
                if ((v25 & v24) != 0)
                  sub_1ACBFD79C(a1, "2nd reference to page %u");
                else
                  *(_BYTE *)(v23 + (v22 >> 3)) = v24 | v25;
              }
              v18 += 4;
              --v19;
            }
            while (v19);
          }
          v6 = v13 - v17;
        }
        else
        {
          sub_1ACBFD79C(a1, "freelist leaf count too big on page %u", v7);
          v6 -= 2;
        }
        v4 = a2;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)a1 + 33) && v6 != 1)
          sub_1ACBFD8F4(a1, bswap32(*MEMORY[8]), 4, v7);
        --v6;
      }
      v7 = bswap32(*v14);
      if (!(_DWORD)v7)
        break;
    }
  }
  if (v6 && v27 == *(_DWORD *)(a1 + 32))
  {
    v26 = "size";
    if (!v4)
      v26 = "overflow list length";
    sub_1ACBFD79C(a1, "%s is %u but should be %u", v26, a4 - v6, a4);
  }
}

void sub_1ACBFD79C(uint64_t a1, char *zFormat, ...)
{
  uint64_t v4;
  unsigned int (*v5)(_QWORD);
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  va_list v11;
  va_list va;

  va_start(va, zFormat);
  v4 = *(_QWORD *)(a1 + 112);
  if (*(_DWORD *)(v4 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }
  v5 = *(unsigned int (**)(_QWORD))(v4 + 544);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v6;
    if (!(v6 % *(_DWORD *)(v4 + 560)))
    {
      if (v5(*(_QWORD *)(v4 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }
  v7 = *(_DWORD *)(a1 + 28);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 28) = v7 - 1;
    *(_DWORD *)(a1 + 32) = v8;
    va_copy(v11, va);
    v9 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v9)
    {
      if ((v9 + 1) >= *(_DWORD *)(a1 + 88))
      {
        sub_1ACBC290C(a1 + 72, "\n", 1u);
        v10 = *(const char **)(a1 + 48);
        if (!v10)
        {
LABEL_13:
          sqlite3_str_vappendf((sqlite3_str *)(a1 + 72), zFormat, v11);
          if (*(_BYTE *)(a1 + 100) == 7)
          {
            *(_DWORD *)(a1 + 36) = 7;
            *(_DWORD *)(a1 + 28) = 0;
            if (!*(_DWORD *)(a1 + 32))
              *(_DWORD *)(a1 + 32) = 1;
          }
          return;
        }
LABEL_12:
        sqlite3_str_appendf((sqlite3_str *)(a1 + 72), v10, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), va);
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 96) = v9 + 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 80) + v9) = 10;
    }
    v10 = *(const char **)(a1 + 48);
    if (!v10)
      goto LABEL_13;
    goto LABEL_12;
  }
}

void sub_1ACBFD8F4(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v7;
  int v10;
  unsigned __int8 v11;

  v11 = 0;
  v10 = 0;
  v7 = sub_1ACBEF22C(*(_DWORD **)a1, a2, &v11, &v10);
  if (v7)
  {
    if (v7 == 3082 || v7 == 7)
    {
      *(_DWORD *)(a1 + 36) = 7;
      *(_DWORD *)(a1 + 28) = 0;
      if (!*(_DWORD *)(a1 + 32))
        *(_DWORD *)(a1 + 32) = 1;
    }
    sub_1ACBFD79C(a1, "Failed to read ptrmap key=%u");
  }
  else if (v11 != a3 || v10 != a4)
  {
    sub_1ACBFD79C(a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
  }
}

uint64_t sub_1ACBFD9B4(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD);
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  _BYTE *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int i;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned __int16 v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned __int16 *v86;
  _QWORD v87[2];

  v87[0] = a4;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 60);
  v10 = *(_QWORD *)(a1 + 112);
  if (*(_DWORD *)(v10 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }
  v11 = *(unsigned int (**)(_QWORD))(v10 + 544);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v12;
    if (!(v12 % *(_DWORD *)(v10 + 560)))
    {
      if (v11(*(_QWORD *)(v10 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 28))
    goto LABEL_16;
  if (!a2)
    return 0;
  if (a2 - 1 >= *(_DWORD *)(a1 + 24))
  {
    sub_1ACBFD79C(a1, "invalid page number %u");
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (unint64_t)a2 >> 3;
  v15 = *(unsigned __int8 *)(v13 + v14);
  v16 = 1 << (a2 & 7);
  if ((v16 & v15) != 0)
  {
    sub_1ACBFD79C(a1, "2nd reference to page %u");
    return 0;
  }
  v18 = *(_BYTE **)a1;
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 56);
  *(_BYTE *)(v13 + v14) = v15 | v16;
  *(_QWORD *)(a1 + 48) = "Tree %u page %u: ";
  *(_DWORD *)(a1 + 60) = a2;
  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v18 + 288))();
  if (!v20)
  {
    v22 = MEMORY[0x10];
    if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
    {
      v23 = MEMORY[8];
      *(_QWORD *)(MEMORY[0x10] + 112) = 0;
      *(_QWORD *)(v22 + 72) = v18;
      *(_QWORD *)(v22 + 80) = v23;
      *(_DWORD *)(v22 + 4) = a2;
      if (a2 == 1)
        v24 = 100;
      else
        v24 = 0;
      *(_BYTE *)(v22 + 9) = v24;
    }
    v25 = *(_BYTE *)v22;
    *(_BYTE *)v22 = 0;
    if (sub_1ACB8A2CC(v22))
    {
      sub_1ACBFD79C(a1, "btreeInitPage() returns error code %d");
LABEL_27:
      v21 = -1;
      goto LABEL_28;
    }
    if (sub_1ACBF949C(v22))
    {
      sub_1ACBFD79C(a1, "free space corruption");
      goto LABEL_27;
    }
    v75 = v25;
    v81 = v19;
    v28 = *(_QWORD *)(v22 + 80);
    v29 = *(unsigned __int8 *)(v22 + 9);
    *(_QWORD *)(a1 + 48) = "Tree %u page %u cell %u: ";
    v83 = v28;
    v30 = _byteswap_ushort(*(_WORD *)(v29 + v28 + 5)) - 1;
    v77 = __rev16(*(unsigned __int16 *)(v29 + v28 + 3));
    v76 = v29;
    v31 = v29 - 4 * *(unsigned __int8 *)(v22 + 8);
    if (*(_BYTE *)(v22 + 8))
    {
      v32 = *(unsigned int **)(a1 + 104);
      *v32 = 0;
      v78 = 1;
      v21 = -1;
    }
    else
    {
      v33 = bswap32(*(_DWORD *)(v29 + v28 + 8));
      if (v18[33])
      {
        *(_QWORD *)(a1 + 48) = "Tree %u page %u right child: ";
        sub_1ACBFD8F4(a1, v33, 5, a2);
      }
      v21 = sub_1ACBFD9B4(a1, v33, v87, a4);
      v78 = 0;
      v32 = 0;
    }
    v34 = v31 + 12;
    v35 = v30;
    v82 = v22;
    v85 = v30;
    v79 = v31 + 12;
    if (!(_DWORD)v77)
    {
      *a3 = v87[0];
      *(_QWORD *)(a1 + 48) = 0;
LABEL_70:
      v49 = v77;
      if (*(int *)(a1 + 28) >= 1)
      {
        if (!*(_BYTE *)(v22 + 8))
        {
          v32 = *(unsigned int **)(a1 + 104);
          *v32 = 0;
          if ((_DWORD)v77)
          {
            do
            {
              v50 = __rev16(*(unsigned __int16 *)(v83 + v34 + 2 * ((int)v49 - 1)));
              v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 120))(v82, v83 + v50);
              v52 = *v32 + 1;
              *v32 = v52;
              v32[v52] = (v50 + v51 - 1) | ((_DWORD)v50 << 16);
              if (v52 >= 2)
              {
                do
                {
                  v53 = v52 >> 1;
                  v54 = v32[v53];
                  v55 = v32[v52];
                  if (v54 <= v55)
                    break;
                  v56 = v52;
                  v32[v53] = v55;
                  v32[v52] = v54;
                  v52 >>= 1;
                }
                while (v56 > 3);
              }
              v40 = v49-- <= 1;
              v34 = v79;
            }
            while (!v40);
            v22 = v82;
            LOWORD(v35) = v85;
          }
        }
        for (i = *(unsigned __int16 *)(v76 + v83 + 1); ; i = *(unsigned __int16 *)(v83 + v58))
        {
          v58 = __rev16(i);
          if (!v58)
            break;
          v59 = (v58 + (bswap32(*(unsigned __int16 *)(v83 + v58 + 2)) >> 16) - 1) | (v58 << 16);
          v60 = *v32 + 1;
          *v32 = v60;
          v32[v60] = v59;
          if (v60 >= 2)
          {
            do
            {
              v61 = v60 >> 1;
              v62 = v32[v61];
              v63 = v32[v60];
              if (v62 <= v63)
                break;
              v64 = v60;
              v32[v61] = v63;
              v32[v60] = v62;
              v60 >>= 1;
            }
            while (v64 > 3);
          }
        }
        v65 = *v32;
        if (*v32)
        {
          v66 = 0;
          v67 = v35;
          while (1)
          {
            v68 = v65;
            v35 = v32[1];
            v69 = v65;
            v32[1] = v32[v69];
            v32[v69] = -1;
            v65 = v68 - 1;
            *v32 = v68 - 1;
            if (v68 >= 3)
            {
              v70 = v32[1];
              v71 = v32[2] <= v32[3] ? 2 : 3;
              v72 = &v32[v71];
              v73 = *v72;
              if (v70 >= *v72)
              {
                v74 = 1;
                do
                {
                  v32[v74] = v73;
                  v74 = v71;
                  *v72 = v70;
                  v71 *= 2;
                  v65 = *v32;
                  if (v71 > *v32)
                    break;
                  if (v32[v71] > v32[v71 | 1])
                    v71 |= 1u;
                  v72 = &v32[v71];
                  v73 = *v72;
                }
                while (v70 >= *v72);
              }
            }
            if (v67 >= HIWORD(v35))
              break;
            v66 += ~v67 + HIWORD(v35);
            v67 = v35;
            if (!v65)
              goto LABEL_105;
          }
          sub_1ACBFD79C(a1, "Multiple uses for byte %u of page %u", HIWORD(v35), a2);
          LOWORD(v35) = v67;
          if (*v32)
            goto LABEL_28;
        }
        else
        {
          v66 = 0;
        }
LABEL_105:
        if (v66 + v81 + (~(_WORD)v35 | 0xFFFF0000) != *(unsigned __int8 *)(v76 + v83 + 7))
          sub_1ACBFD79C(a1, "Fragmentation of %u bytes reported as %u on page %u", v66 + v81 + (~(_WORD)v35 | 0xFFFF0000), *(unsigned __int8 *)(v76 + v83 + 7), a2);
      }
LABEL_28:
      v26 = *(_QWORD *)(v22 + 112);
      if ((*(_WORD *)(v26 + 52) & 0x20) != 0)
      {
        v27 = *(_QWORD *)(v26 + 40);
        --*(_DWORD *)(v27 + 152);
        *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 168);
        *(_QWORD *)(v27 + 168) = v26;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v27 + 72) + 144))(*(_QWORD *)(v27 + 72), *(_QWORD *)(v27 + 200) * (*(_DWORD *)(v26 + 48) - 1), *(_QWORD *)(v26 + 8));
      }
      else
      {
        sub_1ACBE906C(v26);
      }
      goto LABEL_17;
    }
    v36 = v77 - 1;
    v37 = (unsigned __int16 *)(v83 + v34 + 2 * (v77 - 1));
    v80 = v30 + 1;
    v38 = v81 - 4;
    v84 = 1;
    while (1)
    {
      if (!*(_DWORD *)(a1 + 28))
      {
LABEL_67:
        *a3 = v87[0];
        *(_QWORD *)(a1 + 48) = 0;
        if (v84)
        {
          v34 = v79;
          goto LABEL_70;
        }
        *(_BYTE *)v22 = v75;
        goto LABEL_28;
      }
      *(_DWORD *)(a1 + 64) = v36;
      v86 = v37 - 1;
      v39 = __rev16(*v37);
      v40 = v39 <= v35 || v39 > v38;
      if (!v40)
        break;
      sub_1ACBFD79C(a1, "Offset %u out of range %u..%u", v39, v80, v38);
      v38 = v81 - 4;
      v84 = 0;
      v35 = v85;
      v37 = v86;
LABEL_39:
      v40 = v36-- <= 0;
      if (v40)
        goto LABEL_67;
    }
    (*(void (**)(uint64_t))(v22 + 128))(v22);
    if (v39 > v81)
    {
      sub_1ACBFD79C(a1, "Extends off end of page");
      v84 = 0;
      goto LABEL_47;
    }
    if (!*(_BYTE *)(v22 + 1))
    {
      v35 = v85;
      goto LABEL_55;
    }
    if (v78)
    {
      if (v87[0] >= 0)
      {
LABEL_53:
        v35 = v85;
        v78 = 0;
        v87[0] = 0;
LABEL_55:
        v22 = v82;
        if (*(_BYTE *)(v82 + 8))
        {
          v41 = *v32 + 1;
          *v32 = v41;
          v32[v41] = (v39 - 1) | (v39 << 16);
          if (v41 >= 2)
          {
            do
            {
              v42 = v41 >> 1;
              v43 = v32[v42];
              v44 = v32[v41];
              if (v43 <= v44)
                break;
              v45 = v41;
              v32[v42] = v44;
              v32[v41] = v43;
              v41 >>= 1;
            }
            while (v45 > 3);
          }
          goto LABEL_48;
        }
        v46 = bswap32(*(_DWORD *)(v83 + v39));
        if (v18[33])
          sub_1ACBFD8F4(a1, v46, 5, a2);
        v47 = sub_1ACBFD9B4(a1, v46, v87, v87[0]);
        if (v47 == v21)
        {
          v78 = 0;
        }
        else
        {
          v48 = v47;
          sub_1ACBFD79C(a1, "Child page depth differs");
          v78 = 0;
          v21 = v48;
        }
LABEL_47:
        v35 = v85;
LABEL_48:
        v37 = v86;
        v38 = v81 - 4;
        goto LABEL_39;
      }
    }
    else if (v87[0] > 0)
    {
      goto LABEL_53;
    }
    sub_1ACBFD79C(a1, "Rowid %lld out of order", 0);
    goto LABEL_53;
  }
  sub_1ACBFD79C(a1, "unable to get the page. error code=%d", v20);
LABEL_16:
  v21 = -1;
LABEL_17:
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 60) = v9;
  return (v21 + 1);
}

_QWORD *sub_1ACBFE220(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1ACBE0F9C(*(_QWORD **)(a1 + 8), v2);
      v2 = v3;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return sub_1ACBE0F9C(*(_QWORD **)(a1 + 8), (_QWORD *)a1);
}

_QWORD *sub_1ACBFE274(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD v18[20];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, sizeof(v18));
  if (result)
  {
    v1 = result;
    result = 0;
    do
    {
      v3 = (_QWORD *)v1[1];
      v1[1] = 0;
      if (result)
      {
        v4 = 0;
        v2 = v18;
        do
        {
          v15 = 0;
          v16 = 0;
          v5 = &v15;
          v17 = 0;
          do
          {
            v6 = *result;
            v7 = v1;
            while (1)
            {
              v1 = v7;
              v8 = *v7;
              if (v6 <= v8)
                break;
              v5[1] = (uint64_t)v1;
              v7 = (_QWORD *)v1[1];
              v5 = v1;
              if (!v7)
              {
                v5 = v1;
                v1 = result;
                goto LABEL_15;
              }
            }
            if (v6 < v8)
            {
              v5[1] = (uint64_t)result;
              v5 = result;
            }
            result = (_QWORD *)result[1];
          }
          while (result);
LABEL_15:
          v5[1] = (uint64_t)v1;
          v1 = v16;
          *v2 = 0;
          v2 = (_QWORD *)v18 + ++v4;
          result = (_QWORD *)*v2;
        }
        while (*v2);
      }
      else
      {
        v2 = v18;
      }
      *v2 = v1;
      result = *(_QWORD **)&v18[0];
      v1 = v3;
    }
    while (v3);
  }
  for (i = 1; i != 40; ++i)
  {
    v10 = (_QWORD *)*((_QWORD *)v18 + i);
    if (v10)
    {
      if (result)
      {
        v15 = 0;
        v16 = 0;
        v11 = &v15;
        v17 = 0;
        do
        {
          v12 = *result;
          v13 = v10;
          while (1)
          {
            v10 = v13;
            v14 = *v13;
            if (v12 <= v14)
              break;
            v11[1] = (uint64_t)v10;
            v13 = (_QWORD *)v10[1];
            v11 = v10;
            if (!v13)
            {
              v11 = v10;
              v10 = result;
              goto LABEL_30;
            }
          }
          if (v12 < v14)
          {
            v11[1] = (uint64_t)result;
            v11 = result;
          }
          result = (_QWORD *)result[1];
        }
        while (result);
LABEL_30:
        v11[1] = (uint64_t)v10;
        result = v16;
      }
      else
      {
        result = (_QWORD *)*((_QWORD *)v18 + i);
      }
    }
  }
  return result;
}

uint64_t sub_1ACBFE42C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  do
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = 0;
      sub_1ACBFE42C(v5, a2, &v6);
      *(_QWORD *)(v6 + 8) = v4;
    }
    else
    {
      *a2 = v4;
    }
    a2 = (_QWORD *)(v4 + 8);
    result = *(_QWORD *)(v4 + 8);
  }
  while (result);
  *a3 = v4;
  return result;
}

uint64_t sub_1ACBFE48C(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = *a1;
  if (result)
  {
    if (a2 < 2)
    {
      *a1 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v4 = (a2 - 1);
      result = sub_1ACBFE48C(a1, v4);
      v5 = *a1;
      if (*a1)
      {
        *(_QWORD *)(v5 + 16) = result;
        *a1 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = sub_1ACBFE48C(a1, v4);
        return v5;
      }
    }
  }
  return result;
}

uint64_t sub_1ACBFE508(sqlite3 *a1, _QWORD **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v11 = (unsigned __int8 *)sub_1ACBE9258((uint64_t)a1, a3, &a9);
  if (!v11)
    return 7;
  v17 = v11;
  v18 = sub_1ACBFE6B4(a1, a2, v11, v12, v13, v14, v15, v16);
  sub_1ACBE0F9C(a1, v17);
  return v18;
}

uint64_t sub_1ACBFE584(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  int v13;

  v3 = result;
  v4 = *(uint64_t **)(result + 8);
  if (*(_BYTE *)(result + 17))
  {
    ++*(_DWORD *)(result + 20);
    if (!*(_BYTE *)(result + 18))
      result = sub_1ACBECF6C(result);
  }
  v5 = *v4;
  if (*(_BYTE *)(*v4 + 16))
  {
    v6 = 0;
    *(_WORD *)(v5 + 11) = 1;
    *(_BYTE *)(v5 + 13) = 0;
LABEL_7:
    v7 = 0;
    *(_BYTE *)(v5 + 14) = 0;
    v8 = 1;
    goto LABEL_8;
  }
  v6 = (a2 & 7u) > 2;
  *(_BYTE *)(v5 + 12) = v6;
  *(_BYTE *)(v5 + 13) = (a2 & 7) == 4;
  *(_BYTE *)(v5 + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1)
    goto LABEL_7;
  v8 = 0;
  if ((a2 & 8) != 0)
    v7 = 3;
  else
    v7 = 2;
  *(_BYTE *)(v5 + 14) = v7;
LABEL_8:
  v9 = 4 * v7;
  if (v6)
    v10 = v7;
  else
    v10 = 0;
  if ((a2 & 0x10) != 0)
    v11 = v8;
  else
    v11 = 1;
  if (v11)
    v12 = v9;
  else
    v12 = 12;
  *(_BYTE *)(v5 + 15) = v12 | v10;
  *(_BYTE *)(v5 + 25) = *(_BYTE *)(v5 + 25) & 0xFE | ((a2 & 0x20) == 0);
  if (*(_BYTE *)(v3 + 17))
  {
    v13 = *(_DWORD *)(v3 + 20) - 1;
    *(_DWORD *)(v3 + 20) = v13;
    if (!v13)
      return sub_1ACBED048(v3);
  }
  return result;
}

uint64_t sub_1ACBFE6B4(sqlite3 *a1, _QWORD **a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int i;
  const unsigned __int8 *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  size_t v16;
  unint64_t v17;
  void *v18;
  sqlite3_stmt *pStmt;

  pStmt = 0;
  v10 = sub_1ACB5C66C((uint64_t)a1, a3, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, a8);
  if (!(_DWORD)v10)
  {
    for (i = sqlite3_step(pStmt); i == 100; i = sqlite3_step(pStmt))
    {
      v12 = sqlite3_column_text(pStmt, 0);
      if (v12)
      {
        v13 = (const char *)v12;
        if (!strncmp((const char *)v12, "CRE", 3uLL) || !strncmp(v13, "INS", 3uLL))
        {
          i = sub_1ACBFE6B4(a1, a2, v13);
          if (i)
            break;
        }
      }
    }
    if (i == 101)
      v10 = 0;
    else
      v10 = i;
    if (!(_DWORD)v10)
      goto LABEL_24;
    v14 = sqlite3_errmsg(a1);
    if (v14)
    {
      v15 = v14;
      v16 = strlen(v14);
      v17 = v16 + 1;
      if (a1)
      {
        v18 = (void *)sub_1ACBE1124((uint64_t)a1, v17);
        if (!v18)
          goto LABEL_21;
        goto LABEL_20;
      }
      v18 = (void *)sub_1ACB5D828(v16 + 1);
      if (v18)
LABEL_20:
        memcpy(v18, v15, v17);
    }
    else
    {
      v18 = 0;
    }
LABEL_21:
    if (*a2)
      sub_1ACBE0F9C(a1, *a2);
    *a2 = v18;
LABEL_24:
    sqlite3_finalize(pStmt);
  }
  return v10;
}

uint64_t sub_1ACBFE820(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v5 = a2;
  if ((*(_WORD *)(v4 + 40) & 2) != 0 && *(_BYTE *)(v4 + 33) != (a2 != 0))
  {
    v6 = 8;
    if (!*(_BYTE *)(a1 + 17))
      return v6;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(v4 + 33) = v5 != 0;
    *(_BYTE *)(v4 + 34) = v5 == 2;
    if (!*(_BYTE *)(a1 + 17))
      return v6;
  }
  v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7)
    sub_1ACBED048(a1);
  return v6;
}

uint64_t sub_1ACBFE8E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 33))
  {
    v3 = 0;
    if (!*(_BYTE *)(a1 + 17))
      return v3;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v2 + 34))
    v3 = 2;
  else
    v3 = 1;
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_11:
    v4 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v4;
    if (!v4)
      sub_1ACBED048(a1);
  }
  return v3;
}

uint64_t sub_1ACBFE970(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t i;
  int v14;
  int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1ACBECF6C(a1);
    if (!*(_BYTE *)(a2 + 17))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a2 + 17))
  {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a2 + 20);
  if (!*(_BYTE *)(a2 + 18))
    sub_1ACBECF6C(a2);
LABEL_7:
  v21 = 0;
  v4 = 0uLL;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = **(_QWORD **)(**(_QWORD **)(a1 + 8) + 72);
  if (v5)
  {
    v6 = (*(uint64_t (**)(void))(v5 + 80))();
    if ((_DWORD)v6 == 12)
    {
      v4 = 0uLL;
    }
    else
    {
      v7 = v6;
      v4 = 0uLL;
      if ((_DWORD)v6)
        goto LABEL_20;
    }
  }
  v17 = v4;
  v18 = v4;
  v21 = 0;
  v19 = v4;
  v20 = v4;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v19 = *(_QWORD *)a2;
  *((_QWORD *)&v19 + 1) = a2;
  *((_QWORD *)&v17 + 1) = a1;
  DWORD2(v18) = 1;
  v9 = **(_QWORD **)(a1 + 8);
  v10 = *(unsigned __int16 *)(*(_QWORD *)v8 + 178);
  if (*(unsigned __int16 *)(v9 + 178) != v10)
  {
    *(_WORD *)(v9 + 178) = v10;
    v11 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 304);
    if (v11)
      v11(*(_QWORD *)(v9 + 320), *(unsigned int *)(v9 + 200), (__int16)v10);
  }
  sqlite3_backup_step((sqlite3_backup *)&v17, 0x7FFFFFFF);
  v7 = sqlite3_backup_finish((sqlite3_backup *)&v17);
  if ((_DWORD)v7)
  {
    v12 = **(_QWORD **)(*((_QWORD *)&v17 + 1) + 8);
    if (!*(_BYTE *)(v12 + 16))
    {
      ++*(_DWORD *)(v12 + 132);
      for (i = *(_QWORD *)(v12 + 112); i; i = *(_QWORD *)(i + 64))
        *(_DWORD *)(i + 24) = 1;
      sub_1ACB5AD68(*(_QWORD **)(v12 + 336), 0);
    }
  }
  else
  {
    *(_WORD *)(*(_QWORD *)(a1 + 8) + 40) &= ~2u;
  }
LABEL_20:
  if (*(_BYTE *)(a2 + 17) && (v14 = *(_DWORD *)(a2 + 20) - 1, (*(_DWORD *)(a2 + 20) = v14) == 0))
  {
    sub_1ACBED048(a2);
    if (!*(_BYTE *)(a1 + 17))
      return v7;
  }
  else if (!*(_BYTE *)(a1 + 17))
  {
    return v7;
  }
  v15 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v15;
  if (!v15)
    sub_1ACBED048(a1);
  return v7;
}

double sub_1ACBFEB74(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  double result;
  _QWORD *v6;

  v1 = *(int *)(a1 + 564);
  if ((-858993459 * v1 + 429496729) <= 0x33333332)
  {
    v3 = 8 * v1 + 40;
    v4 = *(_QWORD **)(a1 + 600);
    if (v4)
    {
      if (*(_QWORD *)(a1 + 512) > (unint64_t)v4)
      {
        if (*(_QWORD *)(a1 + 496) <= (unint64_t)v4)
        {
          if (v3 < 0x81)
          {
LABEL_13:
            v6 = &v4[v1];
            v6[4] = 0;
            result = 0.0;
            *(_OWORD *)v6 = 0u;
            *((_OWORD *)v6 + 1) = 0u;
            *(_QWORD *)(a1 + 600) = v4;
            return result;
          }
        }
        else if (*(_QWORD *)(a1 + 504) <= (unint64_t)v4 && v3 <= *(unsigned __int16 *)(a1 + 438))
        {
          goto LABEL_13;
        }
      }
      v4 = (_QWORD *)sub_1ACBE11D0(a1, v4, v3);
      if (v4)
      {
LABEL_12:
        v1 = *(int *)(a1 + 564);
        goto LABEL_13;
      }
    }
    else
    {
      v4 = (_QWORD *)sub_1ACBE1124(a1, 8 * v1 + 40);
      if (v4)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_1ACBFEC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *), void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (**v43)(uint64_t);
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t v76;
  char *v77;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t j;
  char v83;
  uint64_t v84;
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;

  v87 = 0;
  v13 = *(unsigned int *)(a2 + 64);
  v84 = 0;
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 592);
  if (!v15)
  {
LABEL_4:
    v16 = *(const char **)a2;
    if (*(_QWORD *)a2)
    {
      v17 = strlen(*(const char **)a2);
      v18 = v17 + 1;
      if (a1)
      {
        v19 = (_QWORD *)sub_1ACBE1124(a1, v18);
        if (v19)
          goto LABEL_7;
      }
      else
      {
        v19 = (_QWORD *)sub_1ACB5D828(v17 + 1);
        if (v19)
        {
LABEL_7:
          memcpy(v19, v16, v18);
          v20 = sub_1ACB5D828(48);
          if (!v20)
          {
            if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1)
                *(_DWORD *)(a1 + 424) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              v79 = *(_QWORD *)(a1 + 344);
              if (v79)
              {
                sub_1ACBCB308(v79, "out of memory", v21, v22, v23, v24, v25, v26, v83);
                for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  i = *(_QWORD *)(i + 256);
                  if (!i)
                    break;
                }
              }
            }
            sub_1ACBE0F9C((_QWORD *)a1, v19);
            return 7;
          }
          v27 = v20;
          *(_OWORD *)v20 = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_QWORD *)v20 = a1;
          *(_QWORD *)(v20 + 8) = a3;
          *(_BYTE *)(v20 + 30) = 1;
          v28 = *(_QWORD *)(a2 + 96);
          v29 = *(_QWORD *)(a1 + 32);
          if (v28)
          {
            v30 = (uint64_t *)(v29 + 24);
            v31 = -1;
            do
            {
              v32 = *v30;
              v30 += 4;
              ++v31;
            }
            while (v32 != v28);
          }
          else
          {
            v31 = -32768;
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) = *(_QWORD *)(v29 + 32 * v31);
          v85[0] = v20;
          v85[1] = a2;
          v86 = *(_QWORD *)(a1 + 592);
          LODWORD(v87) = 0;
          *(_QWORD *)(a1 + 592) = v85;
          ++*(_DWORD *)(a2 + 44);
          v34 = (_QWORD **)(v20 + 16);
          v33 = a4(a1, *(_QWORD *)(a3 + 24), v13, v14, v20 + 16, &v84);
          if (*(_QWORD *)(a1 + 816) || (v41 = *(_DWORD *)(a2 + 44) - 1, (*(_DWORD *)(a2 + 44) = v41) == 0))
            sub_1ACC00BE8((_QWORD *)a1, (_QWORD *)a2);
          *(_QWORD *)(a1 + 592) = v86;
          if ((_DWORD)v33)
          {
            if ((_DWORD)v33 == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1)
                *(_DWORD *)(a1 + 424) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              v81 = *(_QWORD *)(a1 + 344);
              if (v81)
              {
                sub_1ACBCB308(v81, "out of memory", v35, v36, v37, v38, v39, v40, v83);
                for (j = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
                {
                  *(_DWORD *)(j + 24) = 7;
                  j = *(_QWORD *)(j + 256);
                  if (!j)
                    break;
                }
              }
            }
            if (v84)
            {
              *a5 = sub_1ACB6DDD0(a1, "%s", v35, v36, v37, v38, v39, v40, v84);
              v42 = v84;
              if (v84)
              {
                v43 = &off_1ECD3B168;
                if (dword_1ECD3B140)
                {
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888 -= (int)off_1ECD3B178(v42);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v42);
                  v42 = xmmword_1ECD3E930;
                  if (!(_QWORD)xmmword_1ECD3E930)
                    goto LABEL_107;
                  v43 = &xmmword_1ECD3B1D0;
                }
                (*v43)(v42);
              }
            }
            else
            {
              *a5 = sub_1ACB6DDD0(a1, "vtable constructor failed: %s", v35, v36, v37, v38, v39, v40, (char)v19);
            }
LABEL_107:
            sub_1ACBE0F9C((_QWORD *)a1, (_QWORD *)v27);
            goto LABEL_108;
          }
          v44 = *v34;
          if (!*v34)
            goto LABEL_105;
          *v44 = 0;
          v44[1] = 0;
          v44[2] = 0;
          **(_QWORD **)(v27 + 16) = *(_QWORD *)a3;
          ++*(_DWORD *)(a3 + 16);
          *(_DWORD *)(v27 + 24) = 1;
          if (!(_DWORD)v87)
          {
            *a5 = sub_1ACB6DDD0(a1, "vtable constructor did not declare schema: %s", v35, v36, v37, v38, v39, v40, *(_QWORD *)a2);
            sub_1ACBF0800((_QWORD *)v27);
            v33 = 1;
            goto LABEL_108;
          }
          *(_QWORD *)(v27 + 40) = *(_QWORD *)(a2 + 80);
          *(_QWORD *)(a2 + 80) = v27;
          v45 = *(__int16 *)(a2 + 54);
          if (v45 < 1)
          {
LABEL_105:
            v33 = 0;
LABEL_108:
            sub_1ACBE0F9C((_QWORD *)a1, v19);
            return v33;
          }
          v46 = 0;
          v47 = 0;
          v48 = *(_QWORD *)(a2 + 8);
LABEL_40:
          v49 = v48 + 16 * v46;
          if ((*(_WORD *)(v49 + 14) & 4) != 0)
          {
            v51 = (char *)(*(_QWORD *)(v48 + 16 * v46) + strlen(*(const char **)(v48 + 16 * v46)) + 1);
          }
          else
          {
            v50 = *(unsigned __int8 *)(v49 + 8);
            v51 = &byte_1ACCBEAEE;
            if (v50 >= 0x10)
            {
              v51 = off_1EECACBA0[(v50 >> 4) - 1];
              if (!v51)
              {
LABEL_38:
                *(_DWORD *)(a2 + 48) |= v47;
                goto LABEL_39;
              }
            }
          }
          v52 = strlen(v51);
          v53 = v52 & 0x3FFFFFFF;
          if ((v52 & 0x3FFFFFFF) == 0)
            goto LABEL_38;
          v54 = v52 & 0x3FFFFFFF;
          if (!v51)
            goto LABEL_60;
          if ((*v51 & 0xDF) == 0x48)
          {
            v55 = v51 + 1;
            if ((v51[1] & 0xDF) == 0x49)
            {
              v55 = v51 + 2;
              if ((v51[2] & 0xDF) == 0x44 && (v55 = v51 + 3, (v51[3] & 0xDF) == 0x44))
              {
                v55 = v51 + 4;
                if ((v51[4] & 0xDF) == 0x45)
                {
                  v55 = v51 + 5;
                  if ((v51[5] & 0xDF) == 0x4E)
                    goto LABEL_58;
                  v56 = 110;
                }
                else
                {
                  v56 = 101;
                }
              }
              else
              {
                v56 = 100;
              }
            }
            else
            {
              v56 = 105;
            }
          }
          else
          {
            v56 = 104;
            v55 = v51;
          }
          if (v56 != byte_1ACCB6333[*v55])
          {
LABEL_60:
            if (v53 == 1)
              goto LABEL_38;
            v60 = 0;
            v61 = 1;
            while (1)
            {
              if (!v51)
                goto LABEL_62;
              v62 = &v51[v61];
              if ((v51[v60 + 1] & 0xDF) != 0x48)
              {
                v63 = 104;
                goto LABEL_76;
              }
              if ((v51[v60 + 2] & 0xDF) != 0x49)
              {
                ++v62;
                v63 = 105;
                goto LABEL_76;
              }
              if ((v51[v60 + 3] & 0xDF) != 0x44)
              {
                v62 += 2;
                v63 = 100;
                goto LABEL_76;
              }
              if ((v51[v60 + 4] & 0xDF) != 0x44)
                break;
              if ((v51[v60 + 5] & 0xDF) != 0x45)
              {
                v62 += 4;
                v63 = 101;
LABEL_76:
                if (v63 != byte_1ACCB6333[*v62])
                  goto LABEL_62;
                goto LABEL_77;
              }
              v62 = &v51[v60 + 6];
              if ((*v62 & 0xDF) != 0x4E)
              {
                v63 = 110;
                goto LABEL_76;
              }
LABEL_77:
              if (v51[v60] == 32)
              {
                v57 = v51[v60 + 7];
                if ((v57 | 0x20) == 0x20)
                {
                  v58 = v60 + 1;
                  v59 = &v51[v58];
LABEL_80:
                  if (v57)
                    v64 = 7;
                  else
                    v64 = 6;
                  if ((int)v58 + (int)v64 <= v53)
                  {
                    v65 = v64 + v58;
                    v66 = v54 - v65 + 1;
                    if (v66 < 8 || (unint64_t)-v64 < 0x20)
                    {
                      v67 = v58;
                      goto LABEL_87;
                    }
                    if (v66 >= 0x20)
                    {
                      v72 = v66 & 0xFFFFFFFFFFFFFFE0;
                      v73 = &v51[v58 + 16];
                      v74 = v66 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v75 = *(_OWORD *)&v73[v64];
                        *((_OWORD *)v73 - 1) = *(_OWORD *)&v73[v64 - 16];
                        *(_OWORD *)v73 = v75;
                        v73 += 32;
                        v74 -= 32;
                      }
                      while (v74);
                      if (v66 != v72)
                      {
                        if ((v66 & 0x18) == 0)
                        {
                          v65 += v72;
                          v67 = v72 + v58;
                          goto LABEL_87;
                        }
                        goto LABEL_100;
                      }
                    }
                    else
                    {
                      v72 = 0;
LABEL_100:
                      v67 = (v66 & 0xFFFFFFFFFFFFFFF8) + v58;
                      v65 += v66 & 0xFFFFFFFFFFFFFFF8;
                      v76 = v72 - (v66 & 0xFFFFFFFFFFFFFFF8);
                      v77 = &v51[v72 + v58];
                      do
                      {
                        *(_QWORD *)v77 = *(_QWORD *)&v77[v64];
                        v77 += 8;
                        v76 += 8;
                      }
                      while (v76);
                      if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_87:
                        v68 = &v51[v67];
                        v69 = v67 + v64;
                        v70 = &v51[v65];
                        do
                        {
                          v71 = *v70++;
                          *v68++ = v71;
                          ++v69;
                        }
                        while (v69 <= v54);
                      }
                    }
                  }
                  if ((_DWORD)v58 && !*v59)
                    v51[(v58 - 1)] = 0;
                  v48 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v48 + 16 * v46 + 14) |= 2u;
                  *(_DWORD *)(a2 + 48) |= 2u;
                  LOWORD(v45) = *(_WORD *)(a2 + 54);
                  v47 = 1024;
LABEL_39:
                  if (++v46 >= (__int16)v45)
                    goto LABEL_105;
                  goto LABEL_40;
                }
              }
LABEL_62:
              ++v61;
              if (v54 - 1 == ++v60)
                goto LABEL_38;
            }
            v62 += 3;
            v63 = 100;
            goto LABEL_76;
          }
LABEL_58:
          v57 = v51[6];
          if ((v57 | 0x20) == 0x20)
          {
            LODWORD(v58) = 0;
            v59 = v51;
            goto LABEL_80;
          }
          goto LABEL_60;
        }
      }
    }
    return 7;
  }
  while (*(_QWORD *)(v15 + 8) != a2)
  {
    v15 = *(_QWORD *)(v15 + 16);
    if (!v15)
      goto LABEL_4;
  }
  *a5 = sub_1ACB6DDD0(a1, "vtable constructor called recursively: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(_QWORD *)a2);
  return 6;
}

uint64_t sub_1ACBFF438(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  int v11;

  v3 = (int)((3 * byte_1ACCB6333[a1[(int)a2 - 1]]) ^ (4 * byte_1ACCB6333[*a1]) ^ a2) % 127;
  v4 = byte_1ACCB6FC0[v3];
  if (byte_1ACCB6FC0[v3])
  {
    do
    {
      if (byte_1ACCB6A10[v4] == (_DWORD)a2)
      {
        v5 = word_1ACCB68E8[v4];
        if ((*a1 & 0xDF) == aReindexedescap[v5]
          && (a1[1] & 0xDF) == aReindexedescap[v5 + 1])
        {
          if ((int)a2 < 3)
          {
LABEL_11:
            *a3 = byte_1ACCB703F[v4];
            return a2;
          }
          v6 = &aReindexedescap[v5 + 2];
          v7 = a2 - 2;
          v8 = a1 + 2;
          while (1)
          {
            v9 = *v8++;
            v10 = v9 & 0xFFFFFFDF;
            v11 = *v6++;
            if (v10 != v11)
              break;
            if (!--v7)
              goto LABEL_11;
          }
        }
      }
      v4 = byte_1ACCB70D3[v4];
    }
    while (v4);
  }
  return a2;
}

uint64_t sub_1ACBFF554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
    return sub_1ACBFF5AC(a1, a2, a3, a4, 0, a6, a7, a8);
  *(_DWORD *)(a1 + 144) = result + 1;
  v10 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
  *(_BYTE *)v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_BYTE *)(v10 + 1) = 0;
  *(_QWORD *)(v10 + 12) = 0;
  *(_QWORD *)(v10 + 28) = 0;
  *(_QWORD *)(v10 + 20) = 0;
  *(_DWORD *)(v10 + 36) = 0;
  return result;
}

uint64_t sub_1ACBFF5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t result;
  uint64_t v14;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  while (!sub_1ACBFF63C(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    result = *(unsigned int *)(a1 + 144);
    if (*(_DWORD *)(a1 + 148) > (int)result)
    {
      *(_DWORD *)(a1 + 144) = result + 1;
      v14 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
      *(_BYTE *)v14 = v11;
      *(_WORD *)(v14 + 2) = 0;
      *(_DWORD *)(v14 + 4) = v10;
      *(_DWORD *)(v14 + 8) = v9;
      *(_DWORD *)(v14 + 12) = v8;
      *(_BYTE *)(v14 + 1) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      return result;
    }
  }
  return 1;
}

uint64_t sub_1ACBFF63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char v23;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(int *)(a1 + 148);
  v10 = 2 * v9;
  v11 = (_DWORD)v9 == 0;
  v12 = 25;
  if (!v11)
    v12 = v10;
  v13 = *(_QWORD *)v8;
  if (v12 <= *(int *)(*(_QWORD *)v8 + 156))
  {
    v18 = *(_QWORD **)(a1 + 136);
    v19 = 5 * v12;
    v20 = 8 * v19;
    if (v18)
    {
      if (*(_QWORD *)(v13 + 512) > (unint64_t)v18)
      {
        if (*(_QWORD *)(v13 + 496) <= (unint64_t)v18)
        {
          if (v20 < 0x81)
            goto LABEL_23;
        }
        else if (*(_QWORD *)(v13 + 504) <= (unint64_t)v18 && v20 <= *(unsigned __int16 *)(v13 + 438))
        {
LABEL_23:
          if (*(_QWORD *)(v13 + 520) > (unint64_t)v18)
          {
            if (*(_QWORD *)(v13 + 496) <= (unint64_t)v18)
            {
              v21 = 128;
              goto LABEL_27;
            }
            if (*(_QWORD *)(v13 + 504) <= (unint64_t)v18)
            {
              v21 = *(unsigned __int16 *)(v13 + 438);
              goto LABEL_27;
            }
          }
LABEL_26:
          v21 = off_1ECD3B178(v18);
LABEL_27:
          v15 = 0;
          *(_DWORD *)(v8 + 60) = v21;
          *(_DWORD *)(a1 + 148) = v21 / 0x28uLL;
          *(_QWORD *)(a1 + 136) = v18;
          return v15;
        }
      }
      v18 = (_QWORD *)sub_1ACBE11D0(*(_QWORD *)v8, v18, v20);
      if (v18)
      {
LABEL_22:
        v13 = *(_QWORD *)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_26;
        goto LABEL_23;
      }
    }
    else
    {
      v18 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)v8, 8 * v19);
      if (v18)
        goto LABEL_22;
    }
    return 7;
  }
  if (*(_BYTE *)(v13 + 103) || *(_BYTE *)(v13 + 104))
    return 7;
  *(_BYTE *)(v13 + 103) = 1;
  if (*(int *)(v13 + 220) >= 1)
    *(_DWORD *)(v13 + 424) = 1;
  ++*(_DWORD *)(v13 + 432);
  *(_WORD *)(v13 + 436) = 0;
  v14 = *(_QWORD *)(v13 + 344);
  v15 = 7;
  if (v14)
  {
    sub_1ACBCB308(v14, "out of memory", a3, a4, a5, a6, a7, a8, v23);
    for (i = *(_QWORD *)(v13 + 344); ; ++*(_DWORD *)(i + 48))
    {
      *(_DWORD *)(i + 24) = 7;
      i = *(_QWORD *)(i + 256);
      if (!i)
        break;
    }
  }
  return v15;
}

uint64_t sub_1ACBFF7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v8 = a6;
  result = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
  {
    result = sub_1ACBFF5AC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = result + 1;
    v11 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
    *(_BYTE *)v11 = a2;
    *(_WORD *)(v11 + 2) = 0;
    *(_DWORD *)(v11 + 4) = a3;
    *(_DWORD *)(v11 + 8) = a4;
    *(_DWORD *)(v11 + 12) = a5;
    *(_BYTE *)(v11 + 1) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
  }
  if (!*(_BYTE *)(*(_QWORD *)a1 + 103))
  {
    v12 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
    *(_BYTE *)(v12 + 1) = -3;
    *(_DWORD *)(v12 + 16) = v8;
  }
  return result;
}

uint64_t *sub_1ACBFF884(uint64_t *result, uint64_t a2, char *__s, unsigned int a4)
{
  uint64_t *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t *v18;

  v7 = result;
  v8 = (char *)a2;
  v9 = *(char *)(a2 + 1);
  if (v9)
  {
LABEL_2:
    result = sub_1ACB693B4((_QWORD *)*v7, v9, *((_QWORD *)v8 + 2));
    v8[1] = 0;
    *((_QWORD *)v8 + 2) = 0;
    goto LABEL_3;
  }
  while (1)
  {
LABEL_3:
    if ((a4 & 0x80000000) == 0)
    {
      if (a4)
      {
        if (!__s)
          goto LABEL_24;
      }
      else
      {
        if (!__s)
        {
LABEL_24:
          v18 = 0;
LABEL_25:
          *(_QWORD *)(a2 + 16) = v18;
          v8[1] = -6;
          return result;
        }
        a4 = strlen(__s) & 0x3FFFFFFF;
      }
      v16 = *v7;
      v17 = a4;
      result = (uint64_t *)sub_1ACBE1124(v16, a4 + 1);
      v18 = result;
      if (result)
      {
        result = (uint64_t *)memcpy(result, __s, v17);
        *((_BYTE *)v18 + v17) = 0;
      }
      goto LABEL_25;
    }
    result = (uint64_t *)*v7;
    if (*(_BYTE *)(*v7 + 103))
      break;
    v10 = (char *)v7[17];
    v11 = -858993459 * ((unint64_t)(v8 - v10) >> 3);
    if (v11 < 0)
      v11 = *((_DWORD *)v7 + 36) - 1;
    v12 = v11;
    v13 = &v10[40 * v11];
    v15 = v13[1];
    v14 = v13 + 1;
    if (!v15)
    {
      if (a4 == -3)
      {
        *(_DWORD *)&v10[40 * v12 + 16] = (_DWORD)__s;
        *v14 = -3;
      }
      else if (__s)
      {
        *(_QWORD *)&v10[40 * v12 + 16] = __s;
        *v14 = a4;
        if (a4 == -11)
          ++*((_DWORD *)__s + 6);
      }
      return result;
    }
    v8 = &v10[40 * v12];
    v9 = v8[1];
    if (v8[1])
      goto LABEL_2;
  }
  if (a4 != -11)
    return sub_1ACB693B4(result, a4, (uint64_t)__s);
  return result;
}

_QWORD *sub_1ACBFFA0C(_QWORD *result, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *i;
  __int16 v7;
  int v8;
  int v9;

  v3 = *a2;
  v4 = result[3];
  v5 = *(_QWORD *)(v4 + 80);
  *((_WORD *)result + 134) = *((_WORD *)result + 134) & 0xFF3F | 0x40;
  for (i = (_DWORD *)(result[17] + 40 * *((int *)result + 36) - 32); ; i -= 10)
  {
    while (2)
    {
      if (*((unsigned __int8 *)i - 8) <= 0x40u)
      {
        switch(*((_BYTE *)i - 8))
        {
          case 0:
          case 1:
            goto LABEL_8;
          case 2:
            if (*i)
              *((_WORD *)result + 134) &= ~0x40u;
LABEL_8:
            v7 = *((_WORD *)result + 134);
            goto LABEL_9;
          case 3:
          case 4:
          case 5:
            v7 = *((_WORD *)result + 134) & 0xFF3F;
LABEL_9:
            *((_WORD *)result + 134) = v7 | 0x80;
            i -= 10;
            continue;
          case 6:
            if (*(i - 11) > v3)
              v3 = *(i - 11);
            goto LABEL_12;
          case 7:
            v9 = *i;
            i -= 10;
            v8 = v9;
            if (v9 > v3)
              v3 = v8;
            continue;
          case 8:
            if (v5)
            {
              result = sub_1ACBF0674((_QWORD *)*result, *(_QWORD **)(v4 + 80));
              *(_QWORD *)(v4 + 80) = 0;
            }
            *(_DWORD *)(v4 + 68) = 0;
            *a2 = v3;
            return result;
          default:
LABEL_12:
            if ((*i & 0x80000000) != 0)
              *i = *(_DWORD *)(v5 + 4 * ~*i);
            break;
        }
      }
      break;
    }
  }
}

uint64_t sub_1ACBFFB18(_BYTE *a1, unsigned int a2, unsigned int a3, char *a4)
{
  uint64_t result;

  if (*a1 == 1)
    return 4;
  result = sub_1ACBF7EA8((uint64_t)a1);
  if (!(_DWORD)result)
    return sub_1ACBAE978((uint64_t)a1, a2, a3, a4, 0);
  return result;
}

uint64_t sub_1ACBFFB88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = *a1;
  if (*(_BYTE *)(*a1 + 197))
    return 0;
  result = sub_1ACB6541C(*a1, (char **)a1 + 1, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    *((_DWORD *)a1 + 6) = result;
    ++*((_DWORD *)a1 + 12);
  }
  else
  {
    if (!*(_BYTE *)(v8 + 111))
      return 0;
    result = 0;
    *(_DWORD *)(v8 + 44) |= 0x10u;
  }
  return result;
}

uint64_t sub_1ACBFFBF4(uint64_t a1, char *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  char **v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0;
  v3 = 73;
  while (1)
  {
    v4 = v3 + v2;
    if (v3 + v2 < 0 != __OFADD__(v3, v2))
      ++v4;
    v5 = v4 >> 1;
    v6 = (uint64_t)v4 >> 1;
    v7 = &(&off_1E5C73BA0)[3 * v5];
    if (*v7)
      break;
    v9 = 1;
LABEL_12:
    if (v9 >= 0)
      v2 = v6 + 1;
    else
      v3 = v6 - 1;
    if (v2 > v3)
      return 0;
  }
  for (i = 0; ; ++i)
  {
    v10 = a2[i + 7];
    v11 = (*v7)[i];
    if ((_DWORD)v10 == (_DWORD)v11)
      break;
    v9 = byte_1ACCB6333[v10] - byte_1ACCB6333[v11];
    if (v9)
      goto LABEL_12;
LABEL_7:
    ;
  }
  if (a2[i + 7])
    goto LABEL_7;
  if ((*((_BYTE *)&off_1E5C73BA0 + 24 * (int)v6 + 9) & 0x30) != 0)
    return sub_1ACBFFCB0(a1, a2, (uint64_t)&unk_1E5C73AE0, (uint64_t)v7, 0);
  return 0;
}

uint64_t sub_1ACBFFCB0(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  void (*v31)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  char v38;

  v5 = __s;
  if (a3)
  {
    if (__s)
      v10 = strlen(__s) & 0x3FFFFFFF;
    else
      v10 = 0;
    v12 = sub_1ACB5D828((v10 + 49));
    if (!v12)
    {
      if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
        return 0;
      *(_BYTE *)(a1 + 103) = 1;
      if (*(int *)(a1 + 220) >= 1)
        *(_DWORD *)(a1 + 424) = 1;
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      v33 = *(_QWORD *)(a1 + 344);
      if (!v33)
        return 0;
      sub_1ACBCB308(v33, "out of memory", v13, v14, v15, v16, v17, v18, v38);
      v34 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)(v34 + 24) = 7;
      v35 = *(_QWORD *)(v34 + 256);
      if (!v35)
        return 0;
      v11 = 0;
      do
      {
        ++*(_DWORD *)(v35 + 48);
        *(_DWORD *)(v35 + 24) = 7;
        v35 = *(_QWORD *)(v35 + 256);
      }
      while (v35);
      return v11;
    }
    v11 = v12;
    v19 = (char *)(v12 + 48);
    memcpy((void *)(v12 + 48), v5, (v10 + 1));
    *(_QWORD *)v11 = a3;
    *(_QWORD *)(v11 + 8) = v19;
    *(_QWORD *)(v11 + 24) = a4;
    *(_QWORD *)(v11 + 32) = a5;
    *(_QWORD *)(v11 + 40) = 0;
    v5 = v19;
    *(_DWORD *)(v11 + 16) = 1;
  }
  else
  {
    v11 = 0;
  }
  v20 = sub_1ACB57390(a1 + 568, (unsigned __int8 *)v5, v11);
  if (v20)
  {
    v27 = v20;
    if (v20 == v11)
    {
      if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 103) = 1;
        if (*(int *)(a1 + 220) >= 1)
          *(_DWORD *)(a1 + 424) = 1;
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        v36 = *(_QWORD *)(a1 + 344);
        if (v36)
        {
          sub_1ACBCB308(v36, "out of memory", v21, v22, v23, v24, v25, v26, v38);
          for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            i = *(_QWORD *)(i + 256);
            if (!i)
              break;
          }
        }
      }
      v27 = v11;
      v11 = 0;
      goto LABEL_24;
    }
    v28 = *(_QWORD *)(v20 + 40);
    if (v28)
    {
      *(_DWORD *)(v28 + 48) |= 0x4000u;
      if (*(_QWORD *)(a1 + 816) || (v29 = *(_DWORD *)(v28 + 44) - 1, (*(_DWORD *)(v28 + 44) = v29) == 0))
        sub_1ACC00BE8((_QWORD *)a1, (_QWORD *)v28);
      *(_QWORD *)(v27 + 40) = 0;
    }
    v30 = *(_DWORD *)(v27 + 16) - 1;
    *(_DWORD *)(v27 + 16) = v30;
    if (!v30)
    {
      v31 = *(void (**)(_QWORD))(v27 + 32);
      if (v31)
        v31(*(_QWORD *)(v27 + 24));
LABEL_24:
      sub_1ACBE0F9C((_QWORD *)a1, (_QWORD *)v27);
    }
  }
  return v11;
}

uint64_t sub_1ACBFFEE4(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char **a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  char zSQL[200];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v24 = 0;
  v25 = zSQL;
  v26 = 200;
  v27 = 0xE00000000;
  v28 = 0;
  qmemcpy(zSQL, "CREATE TABLE x", 14);
  if (!*(_BYTE *)(a2 + 11))
  {
    sqlite3_str_appendf((sqlite3_str *)&v24, "(\"%s\"", *(const char **)a2);
    goto LABEL_7;
  }
  v10 = *(unsigned __int8 *)(a2 + 10);
  sqlite3_str_appendf((sqlite3_str *)&v24, "%c\"%s\"", 40, off_1E5C74290[v10]);
  if (*(unsigned __int8 *)(a2 + 11) < 2u)
  {
LABEL_7:
    LOBYTE(v11) = 1;
    goto LABEL_8;
  }
  v11 = 1;
  do
    sqlite3_str_appendf((sqlite3_str *)&v24, "%c\"%s\"", 44, (&off_1E5C74290[v10])[v11++]);
  while (v11 < *(unsigned __int8 *)(a2 + 11));
LABEL_8:
  v12 = *(unsigned __int8 *)(a2 + 9);
  v13 = HIDWORD(v27);
  v14 = v26;
  if ((v12 & 0x20) == 0)
  {
    v15 = 0;
    if (v12 < 0x40)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (HIDWORD(v27) + 11 >= v26)
  {
    sub_1ACBC290C((uint64_t)&v24, ",arg HIDDEN", 0xBu);
  }
  else
  {
    HIDWORD(v27) += 11;
    v16 = &v25[v13];
    *(_QWORD *)v16 = *(_QWORD *)",arg HIDDEN";
    *(_DWORD *)(v16 + 7) = 1313162308;
  }
  v15 = 1;
  LODWORD(v13) = HIDWORD(v27);
  v14 = v26;
  if (*(unsigned __int8 *)(a2 + 9) >= 0x40u)
  {
LABEL_15:
    if ((int)v13 + 14 >= v14)
    {
      sub_1ACBC290C((uint64_t)&v24, ",schema HIDDEN", 0xEu);
    }
    else
    {
      HIDWORD(v27) = v13 + 14;
      qmemcpy(&v25[v13], ",schema HIDDEN", 14);
    }
    ++v15;
    LODWORD(v13) = HIDWORD(v27);
    v14 = v26;
  }
LABEL_19:
  if ((int)v13 + 1 >= v14)
  {
    sub_1ACBC290C((uint64_t)&v24, ")", 1u);
    v17 = v25;
    if (!v25)
      goto LABEL_26;
  }
  else
  {
    HIDWORD(v27) = v13 + 1;
    v25[v13] = 41;
    v17 = v25;
    if (!v25)
      goto LABEL_26;
  }
  v17[HIDWORD(v27)] = 0;
  if ((_DWORD)v27 && (v28 & 0x400) == 0)
    sub_1ACBE13A0(&v24);
LABEL_26:
  v18 = sqlite3_declare_vtab(a1, zSQL);
  if ((_DWORD)v18)
  {
    v19 = v18;
    v20 = sqlite3_errmsg(a1);
    v21 = sqlite3_mprintf("%s", v20);
    v22 = 0;
    *a6 = v21;
  }
  else
  {
    if (sqlite3_initialize())
    {
      v22 = 0;
    }
    else
    {
      v22 = sub_1ACB5D828(48);
      if (v22)
      {
        v19 = 0;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)v22 = 0u;
        *(_QWORD *)(v22 + 24) = a1;
        *(_QWORD *)(v22 + 32) = a2;
        *(_BYTE *)(v22 + 41) = v11;
        *(_BYTE *)(v22 + 40) = v15;
        goto LABEL_33;
      }
    }
    v19 = 7;
  }
LABEL_33:
  *a5 = v22;
  return v19;
}

uint64_t sub_1ACC001EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a2 + 8);
    v17[0] = 0;
    v3 = *(_DWORD *)a2;
    if (*(int *)a2 < 1)
      goto LABEL_12;
    v4 = 0;
    v5 = (unsigned __int8 *)(v2 + 5);
    v6 = (unsigned __int8 *)(v2 + 5);
    do
    {
      v7 = *v6;
      v6 += 12;
      if (v7)
      {
        if (*(v5 - 1) == 2)
        {
          v8 = *(_DWORD *)(v5 - 5);
          v9 = *(unsigned __int8 *)(a1 + 41);
          v10 = __OFSUB__(v8, v9);
          v11 = v8 - v9;
          if (v11 < 0 == v10)
            *((_DWORD *)v17 + v11) = v4 + 1;
        }
      }
      ++v4;
      v5 = v6;
    }
    while (v3 != v4);
    if (LODWORD(v17[0]))
    {
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v12 + 8 * (LODWORD(v17[0]) - 1);
      *(_DWORD *)v13 = 1;
      *(_BYTE *)(v13 + 4) = 1;
      v14 = HIDWORD(v17[0]);
      if (HIDWORD(v17[0]))
      {
        *(_QWORD *)(a2 + 64) = 0x4034000000000000;
        *(_QWORD *)(a2 + 72) = 20;
        v15 = v12 + 8 * (v14 - 1);
        *(_DWORD *)v15 = 2;
        *(_BYTE *)(v15 + 4) = 1;
      }
    }
    else
    {
LABEL_12:
      *(_QWORD *)(a2 + 64) = 0x41DFFFFFFFC00000;
      *(_QWORD *)(a2 + 72) = 0x7FFFFFFFLL;
    }
  }
  return 0;
}

uint64_t sub_1ACC00308(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

double sub_1ACC003B4(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v5;

  if (!sqlite3_initialize())
  {
    v5 = sub_1ACB5D828(40);
    if (v5)
    {
      *(_QWORD *)(v5 + 32) = 0;
      result = 0.0;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_QWORD *)v5 = a1;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t sub_1ACC0040C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  v1 = a1;
  sub_1ACC008A0(a1);
  if (v1)
  {
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC004BC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  char **v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char **v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  void (**v25)(unsigned __int8 *);
  const char *v26;
  sqlite3_stmt *v27;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;

  v8 = (_QWORD *)*a1;
  v33 = 0;
  sub_1ACC008A0((uint64_t)a1);
  if (a4 >= 1)
  {
    v9 = a4;
    v10 = (char **)&a1[((*(_BYTE *)(v8[4] + 9) & 0x20) == 0) + 3];
    do
    {
      v13 = *a5;
      if (*a5)
      {
        v14 = *(unsigned __int16 *)(v13 + 20);
        if ((~v14 & 0x202) == 0 && *(_BYTE *)(v13 + 22) == 1)
        {
          v11 = *(const char **)(v13 + 8);
          if (v11)
            goto LABEL_4;
        }
        else if ((v14 & 1) == 0)
        {
          v11 = (const char *)sub_1ACBF2B64((int *)v13, 1);
          if (v11)
          {
LABEL_4:
            v12 = sqlite3_mprintf("%s", v11);
            *v10 = v12;
            if (!v12)
              return 7;
          }
        }
      }
      ++a5;
      ++v10;
      --v9;
    }
    while (v9);
  }
  v15 = *(_DWORD *)(v8[3] + 140);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = v15;
  LODWORD(v33) = 0;
  WORD2(v33) = 0;
  sub_1ACBC290C((uint64_t)&v29, "PRAGMA ", 7u);
  if (a1[4])
    sqlite3_str_appendf((sqlite3_str *)&v29, "%Q.", a1[4]);
  v18 = (const char **)v8[4];
  v19 = *v18;
  if (*v18)
  {
    v20 = strlen(*v18);
    v16 = v20 & 0x3FFFFFFF;
    if ((v20 & 0x3FFFFFFF) != 0)
    {
      v21 = v33;
      if ((int)v33 + (int)v16 >= v31)
      {
        sub_1ACBC290C((uint64_t)&v29, v19, v16);
        v22 = a1[3];
        if (!v22)
          goto LABEL_20;
        goto LABEL_19;
      }
      LODWORD(v33) = v33 + v16;
      memcpy(&v30[v21], v19, v20 & 0x3FFFFFFF);
    }
  }
  v22 = a1[3];
  if (v22)
LABEL_19:
    sqlite3_str_appendf((sqlite3_str *)&v29, "=%Q", v16, v22);
LABEL_20:
  if (v30 && (v30[v33] = 0, v32) && (v33 & 0x40000000000) == 0)
  {
    v23 = (unsigned __int8 *)sub_1ACBE13A0(&v29);
    if (!v23)
      return 7;
  }
  else
  {
    v23 = v30;
    if (!v30)
      return 7;
  }
  v24 = sub_1ACB5C66C(v8[3], v23, 0xFFFFFFFFLL, 128, 0, a1 + 1, 0, v17);
  v25 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v23);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v23);
    v23 = (unsigned __int8 *)xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_32;
    v25 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
  }
  (*v25)(v23);
LABEL_32:
  if ((_DWORD)v24)
  {
    v26 = sqlite3_errmsg((sqlite3 *)v8[3]);
    v8[2] = sqlite3_mprintf("%s", v26);
  }
  else
  {
    v27 = (sqlite3_stmt *)a1[1];
    ++a1[2];
    if (sqlite3_step(v27) == 100)
    {
      return 0;
    }
    else
    {
      v24 = sqlite3_finalize((sqlite3_stmt *)a1[1]);
      a1[1] = 0;
      sub_1ACC008A0((uint64_t)a1);
    }
  }
  return v24;
}

uint64_t sub_1ACC007AC(uint64_t a1)
{
  sqlite3_stmt *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = a1 + 8;
  v2 = *(sqlite3_stmt **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 + 8) + 1;
  if (sqlite3_step(v2) == 100)
    return 0;
  v5 = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  sub_1ACC008A0(a1);
  return v5;
}

BOOL sub_1ACC00804(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t sub_1ACC00814(sqlite3_stmt **a1, sqlite3_context *a2, int iCol)
{
  int v4;
  BOOL v5;
  int v6;
  sqlite3_value *v7;

  v4 = *((unsigned __int8 *)*a1 + 41);
  v5 = __OFSUB__(iCol, v4);
  v6 = iCol - v4;
  if (v6 < 0 != v5)
  {
    v7 = sqlite3_column_value(a1[1], iCol);
    sqlite3_result_value(a2, v7);
  }
  else if (a2)
  {
    sub_1ACBC69D0((uint64_t)a2, (char *)a1[v6 + 3], -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1ACBBE20C(97480);
  }
  return 0;
}

uint64_t sub_1ACC00890(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t sub_1ACC008A0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  result = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (*v4)(v3);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_14:
      result = (*v6)(v5);
      goto LABEL_15;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_14;
    }
  }
LABEL_15:
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void sub_1ACC009EC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a2 + 64);
  v12 = 8 * (v11 + 2);
  if (v11 + 3 >= *(_DWORD *)(*(_QWORD *)a1 + 144))
    sub_1ACBCB308(a1, "too many columns on %s", (uint64_t)a3, a4, a5, a6, a7, a8, *(_QWORD *)a2);
  v13 = *(_QWORD **)(a2 + 72);
  if (!v13)
  {
    v13 = (_QWORD *)sub_1ACBE1124(v10, v12);
    if (!v13)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (*(_QWORD *)(v10 + 512) <= (unint64_t)v13)
    goto LABEL_12;
  if (*(_QWORD *)(v10 + 496) <= (unint64_t)v13)
  {
    if (v12 >= 0x81)
      goto LABEL_12;
LABEL_13:
    v14 = *(int *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v14 + 1;
    v13[v14] = a3;
    v13[v14 + 1] = 0;
    *(_QWORD *)(a2 + 72) = v13;
    return;
  }
  if (*(_QWORD *)(v10 + 504) <= (unint64_t)v13 && v12 <= *(unsigned __int16 *)(v10 + 438))
    goto LABEL_13;
LABEL_12:
  v13 = (_QWORD *)sub_1ACBE11D0(v10, v13, v12);
  if (v13)
    goto LABEL_13;
LABEL_15:
  if (a3)
    sub_1ACBE0F9C((_QWORD *)v10, a3);
}

_QWORD *sub_1ACC00AF8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD **v6;
  __int128 v7;
  _OWORD *v8;
  __int128 *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = result;
  if (*((int *)result + 10) <= 2)
  {
    *((_DWORD *)result + 10) = 2;
LABEL_13:
    v9 = (__int128 *)v1[4];
    v10 = v1 + 87;
    if (v9 != (__int128 *)(v1 + 87))
    {
      v11 = *v9;
      v12 = v9[1];
      v13 = v9[3];
      *(_OWORD *)(v1 + 91) = v9[2];
      *(_OWORD *)(v1 + 93) = v13;
      *v10 = v11;
      *(_OWORD *)(v1 + 89) = v12;
      if (v9)
        result = sub_1ACBE0F9C(v1, v9);
      v1[4] = v10;
    }
    return result;
  }
  v2 = 0;
  v3 = 2;
  v4 = 2;
  do
  {
    v5 = v1[4];
    v6 = (_QWORD **)(v5 + v2 + 64);
    if (*(_QWORD *)(v5 + v2 + 72))
    {
      if (v3 > v4)
      {
        v7 = *(_OWORD *)(v5 + v2 + 80);
        v8 = (_OWORD *)(v5 + 32 * v4);
        *v8 = *(_OWORD *)v6;
        v8[1] = v7;
      }
      ++v4;
    }
    else
    {
      if (*v6)
        result = sub_1ACBE0F9C(v1, *v6);
      *v6 = 0;
    }
    ++v3;
    v2 += 32;
  }
  while (v3 < *((int *)v1 + 10));
  *((_DWORD *)v1 + 10) = v4;
  if (v4 <= 2)
    goto LABEL_13;
  return result;
}

_QWORD *sub_1ACC00BE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  v4 = a2[2];
  while (v4)
  {
    v6 = v4;
    v4 = *(_QWORD *)(v4 + 40);
    if (!a1[102] && *((_BYTE *)a2 + 63) != 1)
      sub_1ACB57390(*(_QWORD *)(v6 + 48) + 32, *(unsigned __int8 **)v6, 0);
    sub_1ACBFD414(a1, v6);
  }
  if (*((_BYTE *)a2 + 63) == 1)
  {
    if (!a1[102])
    {
      v18 = (uint64_t *)a2[10];
      a2[10] = 0;
      if (v18)
      {
        do
        {
          v20 = *v18;
          if (*v18)
          {
            v19 = (uint64_t **)(v20 + 608);
            v20 = *(_QWORD *)(v20 + 608);
          }
          else
          {
            v19 = (uint64_t **)(a2 + 10);
          }
          v21 = (uint64_t *)v18[5];
          *v19 = v18;
          v18[5] = v20;
          v18 = v21;
        }
        while (v21);
      }
    }
    v12 = (_QWORD *)a2[9];
    if (v12)
    {
      v13 = *((_DWORD *)a2 + 16);
      if (v13 < 1)
        goto LABEL_39;
      v14 = (_QWORD *)*v12;
      if (v14)
      {
        sub_1ACBE0F9C(a1, v14);
        v13 = *((_DWORD *)a2 + 16);
      }
      if (v13 >= 3)
      {
        for (i = 2; i < v13; ++i)
        {
          v16 = *(_QWORD **)(a2[9] + 8 * i);
          if (v16)
          {
            sub_1ACBE0F9C(a1, v16);
            v13 = *((_DWORD *)a2 + 16);
          }
        }
      }
      v12 = (_QWORD *)a2[9];
      if (v12)
LABEL_39:
        sub_1ACBE0F9C(a1, v12);
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 63))
    {
      v5 = a2[9];
      if (!v5)
        goto LABEL_40;
      while (1)
      {
        if (!a1[102])
        {
          v8 = *(_QWORD *)(v5 + 24);
          v9 = *(_QWORD *)(v5 + 32);
          if (v9)
          {
            *(_QWORD *)(v9 + 24) = v8;
            v10 = *(_QWORD *)(v5 + 24);
            if (!v10)
              goto LABEL_10;
          }
          else
          {
            if (v8)
              v11 = *(_QWORD *)(v5 + 24);
            else
              v11 = v5;
            sub_1ACB57390(a2[12] + 80, *(unsigned __int8 **)(v11 + 16), v8);
            v10 = *(_QWORD *)(v5 + 24);
            if (!v10)
              goto LABEL_10;
          }
          *(_QWORD *)(v10 + 32) = *(_QWORD *)(v5 + 32);
        }
LABEL_10:
        sub_1ACBB0E20(a1, *(_QWORD **)(v5 + 48));
        sub_1ACBB0E20(a1, *(_QWORD **)(v5 + 56));
        v7 = *(_QWORD *)(v5 + 8);
        sub_1ACBE0F9C(a1, (_QWORD *)v5);
        v5 = v7;
        if (!v7)
          goto LABEL_40;
      }
    }
    v17 = a2[8];
    if (v17)
      sub_1ACB7E704(a1, v17, 1);
  }
LABEL_40:
  v22 = (_QWORD *)a2[1];
  if (v22)
  {
    v23 = *((__int16 *)a2 + 27);
    if (v23 >= 1)
    {
      v24 = 0;
      do
      {
        if (*v22)
        {
          sub_1ACBE0F9C(a1, (_QWORD *)*v22);
          LOWORD(v23) = *((_WORD *)a2 + 27);
        }
        ++v24;
        v22 += 2;
      }
      while (v24 < (__int16)v23);
      v22 = (_QWORD *)a2[1];
    }
    sub_1ACBF0674(a1, v22);
    if (!*((_BYTE *)a2 + 63))
    {
      v25 = (_QWORD *)a2[10];
      if (v25)
        sub_1ACC010B0(a1, v25);
    }
    if (!a1[102])
    {
      a2[1] = 0;
      *((_WORD *)a2 + 27) = 0;
      if (!*((_BYTE *)a2 + 63))
        a2[10] = 0;
    }
  }
  if (*a2)
    sub_1ACBE0F9C(a1, (_QWORD *)*a2);
  v26 = (_QWORD *)a2[3];
  if (v26)
    sub_1ACBE0F9C(a1, v26);
  v27 = (_QWORD *)a2[4];
  if (v27)
    sub_1ACC010B0(a1, v27);
  return sub_1ACBE0F9C(a1, a2);
}

_QWORD *sub_1ACC00E84(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int v5;
  int v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(__int16 *)(a2 + 54);
    if (v5 >= 1)
    {
      v6 = 0;
      do
      {
        if (*v2)
        {
          sub_1ACBE0F9C(v4, (_QWORD *)*v2);
          LOWORD(v5) = *(_WORD *)(a2 + 54);
        }
        ++v6;
        v2 += 2;
      }
      while (v6 < (__int16)v5);
      v2 = *(_QWORD **)(a2 + 8);
    }
    result = sub_1ACBF0674(v4, v2);
    if (!*(_BYTE *)(a2 + 63))
    {
      v7 = *(_QWORD **)(a2 + 80);
      if (v7)
        result = sub_1ACC010B0(v4, v7);
    }
    if (!v4[102])
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 54) = 0;
      if (!*(_BYTE *)(a2 + 63))
        *(_QWORD *)(a2 + 80) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC00F34(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  *a1 = v2;
  v3 = *v1;
  if (v3 >= 0xC0)
  {
    v4 = byte_1ACCB6CF6[(v3 - 192)];
    if ((*v2 & 0xC0) == 0x80)
    {
      v5 = v1 + 2;
      do
      {
        *a1 = v5;
        LODWORD(v3) = *(v5 - 1) & 0x3F | (v4 << 6);
        v6 = *v5++;
        v4 = v3;
      }
      while ((v6 & 0xC0) == 0x80);
    }
    else
    {
      LODWORD(v3) = byte_1ACCB6CF6[(v3 - 192)];
    }
    if (v3 >> 11 == 27 || v3 < 0x80 || v3 >> 1 == 0x7FFF)
      return 65533;
    else
      return v3;
  }
  return v3;
}

uint64_t sub_1ACC00FC0(_BYTE *a1, int a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;

  if (a2 < 0)
    v2 = -1;
  else
    v2 = (unint64_t)&a1[a2];
  v3 = *a1;
  v4 = 0;
  if (*a1)
    v5 = v2 > (unint64_t)a1;
  else
    v5 = 0;
  if (v5)
  {
    do
    {
      if (v3 < 0xC0)
      {
        v7 = *++a1;
        v3 = v7;
      }
      else
      {
        do
        {
          v9 = *++a1;
          v3 = v9;
        }
        while ((v9 & 0xC0) == 0x80);
      }
      v4 = (v4 + 1);
      if (v3)
        v8 = (unint64_t)a1 >= v2;
      else
        v8 = 1;
    }
    while (!v8);
  }
  return v4;
}

_QWORD *sub_1ACC01018(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  _QWORD *v9;

  do
  {
    v5 = (_QWORD *)a2[4];
    if (*a2)
      sub_1ACC010B0(a1, (_QWORD *)*a2);
    v6 = (unsigned __int8 *)a2[1];
    if (v6)
      sub_1ACBF8348(a1, v6);
    v7 = (_QWORD *)a2[2];
    if (v7)
      sub_1ACC010B0(a1, v7);
    v8 = (unsigned __int8 *)a2[3];
    if (v8)
      sub_1ACBF8348(a1, v8);
    v9 = (_QWORD *)a2[6];
    if (v9)
      sub_1ACBE0F9C(a1, v9);
    result = sub_1ACBE0F9C(a1, a2);
    a2 = v5;
  }
  while (v5);
  return result;
}

_QWORD *sub_1ACC010B0(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_DWORD *)a2 + 1;
  v5 = 1;
  do
  {
    if (a2[v5])
      sub_1ACBF8348(a1);
    v6 = (_QWORD *)a2[v5 + 1];
    if (v6)
      sub_1ACBF0674(a1, v6);
    --v4;
    v5 += 3;
  }
  while (v4 > 1);
  return sub_1ACBF0674(a1, a2);
}

uint64_t sub_1ACC01130(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, uint64_t k, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  _DWORD *v49;
  _BYTE *v50;
  char *j;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _BYTE *v55;
  char *i;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;

  v8 = __s;
  v11 = *(_QWORD *)a1;
  if (a3)
    goto LABEL_14;
  if (!__s)
  {
    a3 = *(_QWORD *)(v11 + 16);
    if (!a3)
      goto LABEL_15;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v11 + 656);
  if (v12)
  {
    v13 = *__s;
    if (*__s)
    {
      v14 = 0;
      v15 = __s + 1;
      do
      {
        v14 = -1640531535 * (v14 + byte_1ACCB6333[v13]);
        v16 = *v15++;
        v13 = v16;
      }
      while (v16);
    }
    else
    {
      v14 = 0;
    }
    v54 = (_DWORD *)(v12 + 16 * (v14 % *(_DWORD *)(v11 + 640)));
    v17 = (uint64_t *)(v54 + 2);
    v18 = *v54;
    if (v18)
    {
      while (1)
      {
LABEL_81:
        v17 = (uint64_t *)*v17;
        v55 = (_BYTE *)v17[3];
        for (i = __s; ; ++i)
        {
          v57 = *v55;
          v58 = *i;
          if ((_DWORD)v57 != (_DWORD)v58)
            break;
          if (!*v55)
            goto LABEL_12;
LABEL_83:
          ++v55;
        }
        if (byte_1ACCB6333[v57] == byte_1ACCB6333[v58])
          goto LABEL_83;
        if (!--v18)
        {
          v17 = &qword_1EECAD260;
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
    v17 = (uint64_t *)(v11 + 648);
    v18 = *(_DWORD *)(v11 + 644);
    if (v18)
      goto LABEL_81;
  }
  v17 = &qword_1EECAD260;
LABEL_12:
  v19 = v17[2];
  if (v19)
  {
    v20 = v19 + 40 * a2;
    a3 = v20 - 40;
    if (v20 != 40)
    {
LABEL_14:
      if (*(_QWORD *)(a3 + 24))
        return a3;
    }
  }
LABEL_15:
  if (*(_QWORD *)(v11 + 392))
  {
    if (!__s)
      goto LABEL_38;
    v21 = strlen(__s) + 1;
    v22 = (_QWORD *)sub_1ACBE1124(v11, v21);
    if (!v22)
      goto LABEL_33;
    v23 = v22;
    memcpy(v22, v8, v21);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *))(v11 + 392))(*(_QWORD *)(v11 + 408), v11, a2, v23);
    sub_1ACBE0F9C((_QWORD *)v11, v23);
  }
  if (*(_QWORD *)(v11 + 400))
  {
    v24 = sub_1ACBE1124(v11, 0x40uLL);
    if (v24)
    {
      v25 = v24;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_WORD *)(v24 + 20) = 1;
      *(_QWORD *)(v24 + 24) = v11;
      sub_1ACB57870(v24, v8, -1, 1u, 0);
      v26 = *(unsigned __int16 *)(v25 + 20);
      if ((~v26 & 0x202) != 0 || *(_BYTE *)(v25 + 22) != 2)
      {
        if ((v26 & 1) != 0)
        {
LABEL_28:
          if ((*(_WORD *)(v25 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32))
            sub_1ACBF2A04(v25);
          sub_1ACBE0F9C(*(_QWORD **)(v25 + 24), (_QWORD *)v25);
          goto LABEL_32;
        }
        v27 = sub_1ACBF2B64((int *)v25, 2);
      }
      else
      {
        v27 = *(_QWORD *)(v25 + 8);
      }
      if (v27)
        (*(void (**)(_QWORD, uint64_t, _QWORD))(v11 + 400))(*(_QWORD *)(v11 + 408), v11, *(unsigned __int8 *)(v11 + 100));
      goto LABEL_28;
    }
  }
LABEL_32:
  if (v8)
  {
LABEL_33:
    v28 = *(_QWORD *)(v11 + 656);
    if (v28)
    {
      v29 = *v8;
      if (*v8)
      {
        v30 = 0;
        v31 = (unsigned __int8 *)(v8 + 1);
        do
        {
          v30 = -1640531535 * (v30 + byte_1ACCB6333[v29]);
          v32 = *v31++;
          v29 = v32;
        }
        while (v32);
      }
      else
      {
        v30 = 0;
      }
      v49 = (_DWORD *)(v28 + 16 * (v30 % *(_DWORD *)(v11 + 640)));
      v33 = (uint64_t *)(v49 + 2);
      v34 = *v49;
      if (v34)
      {
        while (1)
        {
LABEL_71:
          v33 = (uint64_t *)*v33;
          v50 = (_BYTE *)v33[3];
          for (j = v8; ; ++j)
          {
            v52 = *v50;
            v53 = *j;
            if ((_DWORD)v52 != (_DWORD)v53)
              break;
            if (!*v50)
              goto LABEL_42;
LABEL_73:
            ++v50;
          }
          if (byte_1ACCB6333[v52] == byte_1ACCB6333[v53])
            goto LABEL_73;
          if (!--v34)
          {
            v33 = &qword_1EECAD260;
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      v33 = (uint64_t *)(v11 + 648);
      v34 = *(_DWORD *)(v11 + 644);
      if (v34)
        goto LABEL_71;
    }
    v33 = &qword_1EECAD260;
LABEL_42:
    v35 = v33[2];
    if (v35)
    {
      v36 = v35 + 40 * a2;
      a3 = v36 - 40;
      if (v36 != 40)
        goto LABEL_44;
    }
LABEL_67:
    sub_1ACBCB308(a1, "no such collation sequence: %s", a3, (uint64_t)__s, k, a6, a7, a8, (char)v8);
    a3 = 0;
    *(_DWORD *)(a1 + 24) = 257;
    return a3;
  }
LABEL_38:
  a3 = *(_QWORD *)(v11 + 16);
  if (!a3)
    goto LABEL_67;
LABEL_44:
  v37 = *(_QWORD *)(a3 + 24);
  if (v37)
    return a3;
  v38 = *(_BYTE **)a3;
  while (2)
  {
    if (!v38)
    {
      v45 = *(_QWORD *)(v11 + 16);
      goto LABEL_65;
    }
    v39 = *(_QWORD *)(v11 + 656);
    v40 = (char *)(v11 + 648);
    __s = (char *)(v11 + 644);
    if (v39)
    {
      v41 = *v38;
      if (*v38)
      {
        v42 = 0;
        v43 = (unsigned __int8 *)(*(_QWORD *)a3 + 1);
        do
        {
          v42 = -1640531535 * (v42 + byte_1ACCB6333[v41]);
          v44 = *v43++;
          v41 = v44;
        }
        while (v44);
      }
      else
      {
        v42 = 0;
      }
      v46 = *(_DWORD *)(v11 + 640);
      k = v42 / v46;
      __s = (char *)(v39 + 16 * (v42 % v46));
      v40 = __s + 8;
    }
    v47 = *(_DWORD *)__s;
    if (!*(_DWORD *)__s)
      goto LABEL_63;
    do
    {
      v40 = *(char **)v40;
      __s = (char *)*((_QWORD *)v40 + 3);
      for (k = *(_QWORD *)a3; ; ++k)
      {
        a6 = *__s;
        a7 = *(unsigned __int8 *)k;
        if ((_DWORD)a6 != (_DWORD)a7)
          break;
        if (!*__s)
          goto LABEL_64;
LABEL_58:
        ++__s;
      }
      a6 = byte_1ACCB6333[a6];
      a7 = byte_1ACCB6333[a7];
      if ((_DWORD)a6 == (_DWORD)a7)
        goto LABEL_58;
      --v47;
    }
    while (v47);
LABEL_63:
    v40 = (char *)&qword_1EECAD260;
LABEL_64:
    v45 = *((_QWORD *)v40 + 2) + 40 * byte_1ACCB7167[v37] - 40;
LABEL_65:
    if (!*(_QWORD *)(v45 + 24))
    {
      if (++v37 == 3)
        goto LABEL_67;
      continue;
    }
    break;
  }
  v59 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v45;
  *(_OWORD *)(a3 + 16) = v59;
  *(_QWORD *)(a3 + 32) = 0;
  return a3;
}

uint64_t sub_1ACC015D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v6;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  BOOL v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  char *v34;
  uint64_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v55;
  unint64_t v56;
  const char *v57;
  int8x16_t v58;
  int8x16_t v59;
  const char *v60;
  int8x16_t *v61;
  char v62;
  uint64_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;

  v6 = a4;
  v63 = 0;
  while (1)
  {
    v10 = *a2;
    if (v10 != 174 && v10 != 181)
      break;
    a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  }
  if (v10 == 176)
    v10 = a2[2];
  if (v10 == 173)
  {
    a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v10 = *a2;
    if ((v10 | 2) != 0x9B)
    {
      v32 = sub_1ACC015D4(a1, a2, a3, a4, &v63);
      v23 = 0;
      v24 = v63;
      if (v32 || !v63)
        goto LABEL_124;
      sub_1ACBF7B2C(v63);
      v33 = *(_WORD *)(v24 + 20);
      if ((v33 & 8) != 0)
      {
        *(double *)v24 = -*(double *)v24;
      }
      else if (*(_QWORD *)v24 == 0x8000000000000000)
      {
        *(_QWORD *)v24 = 0x43E0000000000000;
        *(_WORD *)(v24 + 20) = v33 & 0xF240 | 8;
      }
      else
      {
        *(_QWORD *)v24 = -*(_QWORD *)v24;
      }
      sub_1ACB9A00C(v24, (char)v6, a3);
      goto LABEL_123;
    }
    v21 = "-";
    v22 = -1;
    goto LABEL_38;
  }
  if (v10 != 36)
  {
    v21 = &byte_1ACCBEAEE;
    v22 = 1;
LABEL_38:
    v23 = 0;
    v24 = 0;
    switch(v10)
    {
      case 117:
      case 153:
      case 155:
        if (a1)
        {
          v24 = sub_1ACBE1124(a1, 0x40uLL);
          if (!v24)
            goto LABEL_100;
        }
        else
        {
          v24 = sub_1ACB5D828(64);
          if (!v24)
            goto LABEL_100;
        }
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(_QWORD *)(v24 + 24) = a1;
        if ((a2[5] & 8) != 0)
        {
          *(_QWORD *)v24 = v22 * (uint64_t)*((int *)a2 + 2);
          *(_WORD *)(v24 + 20) = 4;
          if (v6 != 65)
            goto LABEL_74;
        }
        else
        {
          v34 = (char *)sub_1ACB6DDD0(a1, "%s%s", v25, v26, v27, v28, v29, v30, (char)v21);
          if (!v34)
            goto LABEL_100;
          sub_1ACB57870(v24, v34, -1, 1u, sub_1ACBD0E78);
          if (v6 != 65)
            goto LABEL_74;
        }
        if ((v10 & 0xFFFFFFFD) == 0x99)
        {
          v36 = *(_WORD *)(v24 + 20);
          if ((v36 & 4) != 0)
            goto LABEL_75;
          if ((v36 & 0x28) != 0)
          {
            if ((v36 & 0x20) != 0)
            {
LABEL_73:
              *(_WORD *)(v24 + 20) = v36 & 0xF240 | 4;
              goto LABEL_75;
            }
            v37 = *(double *)v24;
            if (*(double *)v24 >= -9.22337204e18
              && v37 <= 9.22337204e18
              && v37 == (double)(uint64_t)v37
              && (unint64_t)((uint64_t)v37 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              *(_QWORD *)v24 = (uint64_t)v37;
              goto LABEL_73;
            }
          }
          else if ((v36 & 2) != 0)
          {
            sub_1ACBCA9CC(v24, 1);
          }
LABEL_75:
          v38 = *(_WORD *)(v24 + 20);
          if ((v38 & 0x2C) != 0)
          {
            v38 &= ~2u;
            *(_WORD *)(v24 + 20) = v38;
          }
          if ((_DWORD)a3 != 1)
          {
            if ((v38 & 2) == 0)
            {
              v23 = 0;
              *(_BYTE *)(v24 + 22) = a3;
LABEL_124:
              *a5 = v24;
              return v23;
            }
            if (*(unsigned __int8 *)(v24 + 22) != (_DWORD)a3)
            {
              v23 = sub_1ACBB0FEC((int *)v24, a3);
              goto LABEL_124;
            }
          }
LABEL_123:
          v23 = 0;
          goto LABEL_124;
        }
LABEL_74:
        sub_1ACB9A00C(v24, (char)v6, 1);
        goto LABEL_75;
      case 121:
        if (a1)
        {
          v24 = sub_1ACBE1124(a1, 0x40uLL);
          if (!v24)
            goto LABEL_100;
        }
        else
        {
          v24 = sub_1ACB5D828(64);
          if (!v24)
            goto LABEL_100;
        }
        v23 = 0;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_QWORD *)(v24 + 24) = a1;
        *(_WORD *)(v24 + 20) = 1;
        goto LABEL_124;
      case 154:
        if (a1)
        {
          v24 = sub_1ACBE1124(a1, 0x40uLL);
          if (!v24)
          {
LABEL_100:
            if (!*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
            {
              *(_BYTE *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1)
                *(_DWORD *)(a1 + 424) = 1;
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              v52 = *(_QWORD *)(a1 + 344);
              if (v52)
              {
                sub_1ACBCB308(v52, "out of memory", v25, v26, v27, v28, v29, v30, v62);
                for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  i = *(_QWORD *)(i + 256);
                  if (!i)
                    break;
                }
              }
            }
            if (v24)
            {
              if ((*(_WORD *)(v24 + 20) & 0x9000) != 0 || *(_DWORD *)(v24 + 32))
                sub_1ACBF2A04(v24);
              sub_1ACBE0F9C(*(_QWORD **)(v24 + 24), (_QWORD *)v24);
            }
            return 7;
          }
        }
        else
        {
          v24 = sub_1ACB5D828(64);
          if (!v24)
            goto LABEL_100;
        }
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(_QWORD *)(v24 + 24) = a1;
        v39 = *((_QWORD *)a2 + 1);
        v40 = strlen((const char *)(v39 + 2)) & 0x3FFFFFFF;
        v41 = v40 - 1;
        if (!v40)
          v41 = 0;
        v42 = (v41 >> 1);
        v43 = (char *)sub_1ACBE1124(a1, (v42 + 1));
        if (!v43)
          goto LABEL_120;
        if (v40 < 3)
        {
          v51 = 0;
          goto LABEL_119;
        }
        v44 = v40 - 2;
        v45 = 2;
        if (v44 > 2)
          v45 = v40 - 2;
        if (v45 < 0x3F)
          goto LABEL_96;
        v46 = 2;
        if (v44 > 2)
          v46 = v40 - 2;
        v47 = v46 - 1;
        if ((unint64_t)v43 >= (v47 & 0xFFFFFFFFFFFFFFFELL) + v39 + 4
          || v39 + 2 >= (unint64_t)&v43[(v47 >> 1) + 1])
        {
          v55 = 0;
          v56 = ((v45 - 1) >> 1) + 1;
          v49 = v56 & 0x7FFFFFFFFFFFFFE0;
          v48 = 2 * (v56 & 0x7FFFFFFFFFFFFFE0);
          v57 = (const char *)(v39 + 34);
          v58.i64[0] = 0x4040404040404040;
          v58.i64[1] = 0x4040404040404040;
          v59.i64[0] = 0x909090909090909;
          v59.i64[1] = 0x909090909090909;
          do
          {
            v60 = v57 - 32;
            v64 = vld2q_s8(v60);
            v65 = vld2q_s8(v57);
            v61 = (int8x16_t *)&v43[v55 & 0x7FFFFFFFFFFFFFE0];
            *v61 = vsliq_n_s8(vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[1], v58))), v64.val[1]), vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[0], v58))), v64.val[0]), 4uLL);
            v61[1] = vsliq_n_s8(vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[1], v58))), v65.val[1]), vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[0], v58))), v65.val[0]), 4uLL);
            v55 += 32;
            v57 += 64;
          }
          while (v49 != v55);
          if (v56 == v49)
            goto LABEL_99;
        }
        else
        {
LABEL_96:
          v48 = 0;
        }
        v49 = ((v48 + 2) >> 1) - 1;
        v50 = &v43[v48 >> 1];
        do
        {
          *v50++ = ((((char)(2 * *(_BYTE *)(v39 + v48 + 3)) >> 7) & 0xF9) + *(_BYTE *)(v39 + v48 + 3)) & 0xF | (16 * ((((char)(2 * *(_BYTE *)(v39 + v48 + 2)) >> 7) & 0xF9) + *(_BYTE *)(v39 + v48 + 2)));
          v48 += 2;
          LODWORD(v49) = v49 + 1;
        }
        while (v48 < v44);
LABEL_99:
        v51 = v49 & 0x7FFFFFFF;
LABEL_119:
        v43[v51] = 0;
LABEL_120:
        sub_1ACB57870(v24, v43, v42, 0, sub_1ACBD0E78);
        goto LABEL_123;
      case 170:
        if (a1)
          v35 = sub_1ACBE1124(a1, 0x40uLL);
        else
          v35 = sub_1ACB5D828(64);
        v23 = 0;
        v24 = v35;
        if (v35)
        {
          *(_OWORD *)(v35 + 32) = 0u;
          *(_OWORD *)(v35 + 48) = 0u;
          *(_OWORD *)v35 = 0u;
          *(_OWORD *)(v35 + 16) = 0u;
          *(_QWORD *)(v35 + 24) = a1;
          *(_WORD *)(v35 + 20) = 4;
          *(_QWORD *)v35 = *(_BYTE *)(*((_QWORD *)a2 + 1) + 4) == 0;
        }
        goto LABEL_124;
      default:
        goto LABEL_124;
    }
  }
  v11 = (_BYTE *)*((_QWORD *)a2 + 1);
  v12 = *v11;
  if (!*v11)
  {
    LOBYTE(v18) = 67;
    goto LABEL_43;
  }
  v13 = 0;
  v14 = v11 + 1;
  v15 = 67;
  while (1)
  {
    v13 = byte_1ACCB6333[v12] | (v13 << 8);
    v18 = 66;
    if (v13 > 1668050785)
    {
      if (v13 == 1668050786 || v13 == 1952807028)
        goto LABEL_16;
      goto LABEL_23;
    }
    if (v13 == 1651273570)
      break;
    if (v13 != 1667785074)
      goto LABEL_23;
LABEL_16:
    v17 = *v14++;
    v12 = v17;
    v15 = v18;
    if (!v17)
      goto LABEL_43;
  }
  v18 = 65;
  if (v15 == 67 || v15 == 69)
    goto LABEL_16;
LABEL_23:
  v20 = v13 == 1718382433 || v13 == 1919246700 || v13 == 1685026146;
  if (v20 && v15 == 67)
  {
    v18 = 69;
    goto LABEL_16;
  }
  v18 = v15;
  if ((v13 & 0xFFFFFF) != 0x696E74)
    goto LABEL_16;
  LOBYTE(v18) = 68;
LABEL_43:
  v31 = v18;
  v23 = sub_1ACC015D4(a1, *((_QWORD *)a2 + 2), a3, v18, a5);
  if (*a5)
  {
    sub_1ACBF3B8C(*a5, v31, a3);
    sub_1ACB9A00C(*a5, (char)v6, a3);
  }
  return v23;
}

uint64_t sub_1ACC01D8C(_BYTE *a1, uint64_t a2)
{
  int v3;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v10;
  int v11;
  int v12;
  int v14;

  v3 = *a1;
  if (*a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = a1 + 1;
    v8 = 67;
    while (1)
    {
      while (1)
      {
        v6 = byte_1ACCB6333[v3] | (v6 << 8);
        if (v6 <= 1668050785)
          break;
        if (v6 != 1668050786 && v6 != 1952807028)
        {
LABEL_18:
          v10 = v6 == 1718382433 || v6 == 1919246700 || v6 == 1685026146;
          if (v10 && v8 == 67)
          {
            v8 = 69;
          }
          else if ((v6 & 0xFFFFFF) == 0x696E74)
          {
            if (a2)
            {
              v11 = 0;
              LOBYTE(v8) = 68;
              goto LABEL_44;
            }
            LOBYTE(v8) = 68;
            return (char)v8;
          }
          goto LABEL_4;
        }
        v8 = 66;
LABEL_4:
        v3 = *v7++;
        if (!v3)
          goto LABEL_31;
      }
      if (v6 != 1651273570)
      {
        if (v6 != 1667785074)
          goto LABEL_18;
        v8 = 66;
        v5 = v7;
        goto LABEL_4;
      }
      if (v8 != 69 && v8 != 67)
        goto LABEL_18;
      v3 = *v7;
      if (v3 == 40)
        v5 = v7;
      v8 = 65;
      ++v7;
      if (!v3)
      {
LABEL_31:
        if (!a2)
          return (char)v8;
        v14 = 0;
        if ((char)v8 > 66)
        {
          v11 = 0;
        }
        else if (v5)
        {
          v11 = *v5;
          if (*v5)
          {
            while ((unint64_t)v11 - 58 < 0xFFFFFFFFFFFFFFF6)
            {
              v12 = *++v5;
              v11 = v12;
              if (!v12)
                goto LABEL_44;
            }
            sub_1ACBFD07C(v5, &v14);
            v11 = v14 / 4;
          }
        }
        else
        {
          v11 = 4;
        }
LABEL_44:
        if (v11 >= 254)
          LOBYTE(v11) = -2;
        *(_BYTE *)(a2 + 10) = v11 + 1;
        return (char)v8;
      }
    }
  }
  if (a2)
  {
    v11 = 0;
    LOBYTE(v8) = 67;
    goto LABEL_44;
  }
  LOBYTE(v8) = 67;
  return (char)v8;
}

unint64_t sub_1ACC01F78(uint64_t a1, unint64_t a2, int a3)
{
  int v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  int8x16_t v17;
  int8x16_t v18;
  const char *v19;
  int8x16_t *v20;
  uint64_t v21;
  _BYTE *v22;
  int8x16x2_t v23;
  int8x16x2_t v24;

  if (a3 >= 0)
    v5 = a3;
  else
    v5 = a3 + 1;
  result = sub_1ACBE1124(a1, ((v5 >> 1) + 1));
  if (result)
  {
    if (a3 < 2)
    {
      v21 = 0;
LABEL_24:
      *(_BYTE *)(result + v21) = 0;
      return result;
    }
    v7 = (a3 - 1);
    v8 = 2;
    if (v7 > 2)
      v8 = (a3 - 1);
    if (v8 < 0x3F)
      goto LABEL_20;
    v9 = 2;
    if (v7 > 2)
      v9 = (a3 - 1);
    v10 = v9 - 1;
    if (result < (v10 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 && result + (v10 >> 1) + 1 > a2)
    {
LABEL_20:
      v15 = 0;
    }
    else
    {
      v12 = 0;
      v13 = ((v8 - 1) >> 1) + 1;
      v14 = v13 & 0x7FFFFFFFFFFFFFE0;
      v15 = 2 * (v13 & 0x7FFFFFFFFFFFFFE0);
      v16 = (const char *)(a2 + 32);
      v17.i64[0] = 0x4040404040404040;
      v17.i64[1] = 0x4040404040404040;
      v18.i64[0] = 0x909090909090909;
      v18.i64[1] = 0x909090909090909;
      do
      {
        v19 = v16 - 32;
        v23 = vld2q_s8(v19);
        v24 = vld2q_s8(v16);
        v20 = (int8x16_t *)(result + (v12 & 0x7FFFFFFFFFFFFFE0));
        *v20 = vsliq_n_s8(vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[1], v17))), v23.val[1]), vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[0], v17))), v23.val[0]), 4uLL);
        v20[1] = vsliq_n_s8(vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[1], v17))), v24.val[1]), vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[0], v17))), v24.val[0]), 4uLL);
        v12 += 32;
        v16 += 64;
      }
      while (v14 != v12);
      if (v13 == v14)
        goto LABEL_23;
    }
    v22 = (_BYTE *)(result + (v15 >> 1));
    v14 = ((v15 + 2) >> 1) - 1;
    do
    {
      *v22++ = ((((char)(2 * *(_BYTE *)(a2 + v15 + 1)) >> 7) & 0xF9) + *(_BYTE *)(a2 + v15 + 1)) & 0xF | (16 * ((((char)(2 * *(_BYTE *)(a2 + v15)) >> 7) & 0xF9) + *(_BYTE *)(a2 + v15)));
      v15 += 2;
      LODWORD(v14) = v14 + 1;
    }
    while (v15 < v7);
LABEL_23:
    v21 = v14 & 0x7FFFFFFF;
    goto LABEL_24;
  }
  return result;
}

void sub_1ACC02110(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  const char *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, uint64_t);
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  const char *v18;
  char v19;

  v9 = (_DWORD)a2 == 12;
  if ((_DWORD)a2 == 12)
    v10 = "ROLLBACK";
  else
    v10 = "COMMIT";
  v11 = *a1;
  v12 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*a1 + 528);
  if (v12 && !*(_BYTE *)(v11 + 197) && !*((_BYTE *)a1 + 302))
  {
    v16 = v12(*(_QWORD *)(v11 + 536), 22, v10, 0, 0, a1[46]);
    if (v16 == 1)
    {
      v17 = 23;
      v18 = "not authorized";
    }
    else
    {
      if ((v16 & 0xFFFFFFFD) == 0)
      {
        if (v16)
          return;
        goto LABEL_7;
      }
      v17 = 1;
      v18 = "authorizer malfunction";
    }
    sub_1ACBCB308((uint64_t)a1, v18, (uint64_t)v10, a4, a5, a6, a7, a8, v19);
    *((_DWORD *)a1 + 6) = v17;
    return;
  }
LABEL_7:
  v13 = a1[2];
  if (v13)
    goto LABEL_12;
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v13 = sub_1ACBCB4C8(a1, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  if (v13)
  {
LABEL_12:
    v14 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v14)
    {
      sub_1ACBFF5AC(v13, 1, 1, v9, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v14 + 1;
      v15 = *(_QWORD *)(v13 + 136) + 40 * v14;
      *(_QWORD *)v15 = 0x100000001;
      *(_DWORD *)(v15 + 8) = v9;
      *(_QWORD *)(v15 + 12) = 0;
      *(_QWORD *)(v15 + 28) = 0;
      *(_QWORD *)(v15 + 20) = 0;
      *(_DWORD *)(v15 + 36) = 0;
    }
  }
}

uint64_t *sub_1ACC0224C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  const void *v3;
  uint64_t *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, char *, uint64_t *, _QWORD, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  char v31;

  if (a3)
  {
    v3 = *(const void **)a3;
    if (*(_QWORD *)a3)
    {
      v5 = result;
      v6 = *(unsigned int *)(a3 + 8);
      result = (uint64_t *)sub_1ACBE1124(*result, v6 + 1);
      if (result)
      {
        v7 = result;
        memcpy(result, v3, v6);
        *((_BYTE *)v7 + v6) = 0;
        if ((char)byte_1ACCB6548[*(unsigned __int8 *)v7] < 0)
        {
          v16 = 0;
          if (*(_BYTE *)v7 == 91)
            v17 = 93;
          else
            v17 = *(unsigned __int8 *)v7;
          for (i = 1; ; ++i)
          {
            v19 = i;
            v20 = *((unsigned __int8 *)v7 + i);
            if (v20 == v17)
            {
              ++i;
              LOBYTE(v20) = v17;
              if (*((unsigned __int8 *)v7 + v19 + 1) != v17)
                break;
            }
            *((_BYTE *)v7 + v16++) = v20;
          }
          *((_BYTE *)v7 + v16) = 0;
          v15 = (uint64_t *)v5[2];
          if (!v15)
            goto LABEL_16;
        }
        else
        {
          v15 = (uint64_t *)v5[2];
          if (!v15)
          {
LABEL_16:
            if (!v5[21] && (*(_BYTE *)(*v5 + 96) & 8) == 0)
              *((_BYTE *)v5 + 35) = 1;
            v15 = (uint64_t *)sub_1ACBCB4C8(v5, v8, v9, v10, v11, v12, v13, v14);
            if (!v15)
              return sub_1ACBE0F9C((_QWORD *)*v5, v7);
          }
        }
        v21 = *v5;
        v22 = *(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t *, _QWORD, uint64_t))(*v5 + 528);
        if (!v22 || *(_BYTE *)(v21 + 197) || *((_BYTE *)v5 + 302))
          return (uint64_t *)sub_1ACBA86CC(v15, 0, a2, 0, 0, (uint64_t)v7, 4294967290, v14);
        v23 = v22(*(_QWORD *)(v21 + 536), 32, off_1E5C74488[a2], v7, 0, v5[46]);
        if (v23 == 1)
        {
          v29 = 23;
          v30 = "not authorized";
        }
        else
        {
          if ((v23 & 0xFFFFFFFD) == 0)
          {
            if (!v23)
              return (uint64_t *)sub_1ACBA86CC(v15, 0, a2, 0, 0, (uint64_t)v7, 4294967290, v14);
            return sub_1ACBE0F9C((_QWORD *)*v5, v7);
          }
          v29 = 1;
          v30 = "authorizer malfunction";
        }
        sub_1ACBCB308((uint64_t)v5, v30, v24, v25, v26, v27, v28, v14, v31);
        *((_DWORD *)v5 + 6) = v29;
        return sub_1ACBE0F9C((_QWORD *)*v5, v7);
      }
    }
  }
  return result;
}

uint64_t sub_1ACC0241C(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v8 = sub_1ACBE1124(*a1, 0x50uLL);
  v15 = v8;
  if (v8)
  {
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)v8 = 0u;
    *(_BYTE *)v8 = a2;
    *(_WORD *)(v8 + 52) = -1;
    if (a4)
    {
      *(_QWORD *)(v8 + 24) = a4;
      *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a4 + 4) & 0x400208;
      v16 = *(_DWORD *)(a4 + 40) + 1;
      *(_DWORD *)(v8 + 40) = v16;
      if (!a3)
      {
LABEL_12:
        if (*(_DWORD *)(*a1 + 148) < v16)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v9, v10, v11, v12, v13, v14, *(_DWORD *)(*a1 + 148));
        return v15;
      }
    }
    else
    {
      v16 = 1;
      *(_DWORD *)(v8 + 40) = 1;
      if (!a3)
        goto LABEL_12;
    }
    *(_QWORD *)(v8 + 16) = a3;
    *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a3 + 4) & 0x400208;
    v17 = *(_DWORD *)(a3 + 40);
    if (v17 >= v16)
    {
      v16 = v17 + 1;
      *(_DWORD *)(v8 + 40) = v17 + 1;
    }
    goto LABEL_12;
  }
  if (a3)
    sub_1ACBF8348((_QWORD *)*a1, (unsigned __int8 *)a3);
  if (a4)
    sub_1ACBF8348((_QWORD *)*a1, (unsigned __int8 *)a4);
  return v15;
}

uint64_t sub_1ACC02548(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int i;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;

  v8 = a4;
  v9 = sub_1ACBE1124(*(_QWORD *)a1, a4 + 81);
  v10 = v9;
  if (v9)
  {
    *(_BYTE *)v9 = a2;
    *(_WORD *)(v9 + 1) = 0;
    *(_DWORD *)(v9 + 4) = 0x800000;
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_DWORD *)(v9 + 44) = 0;
    *(_DWORD *)(v9 + 48) = 0;
    v11 = v9 + 80;
    *(_QWORD *)(v9 + 8) = v9 + 80;
    *(_QWORD *)(v9 + 16) = 0;
    memcpy((void *)(v9 + 80), a3, v8);
    *(_BYTE *)(v11 + v8) = 0;
    *(_DWORD *)(v10 + 56) = (_DWORD)a3 - *(_DWORD *)(a1 + 336);
    v12 = *(unsigned __int8 *)(v10 + 80);
    if ((char)byte_1ACCB6548[*(unsigned __int8 *)(v10 + 80)] < 0)
    {
      v13 = 0;
      if (v12 == 34)
        v14 = 75497600;
      else
        v14 = 75497472;
      *(_DWORD *)(v10 + 4) = v14;
      if (v12 == 91)
        v12 = 93;
      for (i = 1; ; ++i)
      {
        v16 = i;
        v17 = *(unsigned __int8 *)(v11 + i);
        if (v17 == v12)
        {
          ++i;
          LOBYTE(v17) = v12;
          if (*(unsigned __int8 *)(v11 + v16 + 1) != v12)
            break;
        }
        *(_BYTE *)(v11 + v13++) = v17;
      }
      *(_BYTE *)(v11 + v13) = 0;
    }
    *(_DWORD *)(v10 + 40) = 1;
    v18 = *(unsigned __int8 *)(a1 + 302);
    if (v18 > 3 || v18 == 2)
    {
      if (*(_QWORD *)a1)
      {
        v20 = sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL);
        if (!v20)
          return v10;
      }
      else
      {
        v20 = sub_1ACB5D828(32);
        if (!v20)
          return v10;
      }
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_QWORD *)v20 = v10;
      *(_QWORD *)(v20 + 8) = a3;
      *(_QWORD *)(v20 + 16) = a4;
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(a1 + 408);
      *(_QWORD *)(a1 + 408) = v20;
    }
  }
  return v10;
}

uint64_t sub_1ACC026B8(uint64_t result)
{
  int v1;
  _BYTE *v2;
  const char *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *j;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(result + 4);
  if ((v1 & 0x4000800) != 0)
    return result;
  v2 = *(_BYTE **)(result + 8);
  v3 = "true";
  for (i = v2; ; ++i)
  {
    v5 = *i;
    v6 = *(unsigned __int8 *)v3;
    if ((_DWORD)v5 != (_DWORD)v6)
      break;
    if (!*i)
    {
      v7 = 0x10000000;
      goto LABEL_15;
    }
LABEL_5:
    ++v3;
  }
  if (byte_1ACCB6333[v5] == byte_1ACCB6333[v6])
    goto LABEL_5;
  for (j = "false"; ; ++j)
  {
    v9 = *v2;
    v10 = *(unsigned __int8 *)j;
    if ((_DWORD)v9 == (_DWORD)v10)
      break;
    if (byte_1ACCB6333[v9] != byte_1ACCB6333[v10])
      return result;
LABEL_11:
    ++v2;
  }
  if (*v2)
    goto LABEL_11;
  v7 = 0x20000000;
LABEL_15:
  *(_BYTE *)result = -86;
  *(_DWORD *)(result + 4) = v7 | v1;
  return result;
}

uint64_t sub_1ACC02770(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(_QWORD *)(result + 344);
  if (v2)
  {
    if (*(__int16 *)(v2 + 54) >= 1)
    {
      v3 = *(_QWORD *)(v2 + 8) + 16 * (*(unsigned __int16 *)(v2 + 54) - 1);
      *(_BYTE *)(v3 + 8) = *(_BYTE *)(v3 + 8) & 0xF0 | a2 & 0xF;
      *(_DWORD *)(v2 + 48) |= 0x800u;
      if ((*(_WORD *)(v3 + 14) & 8) != 0)
      {
        for (i = *(_QWORD *)(v2 + 16); i; i = *(_QWORD *)(i + 40))
        {
          if (*(__int16 *)(v2 + 54) - 1 == **(__int16 **)(i + 8))
            *(_WORD *)(i + 99) |= 8u;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1ACC027F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *result;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *(_QWORD *)(a1 + 344);
  result = *(_QWORD **)a1;
  if (v7
    && *(_BYTE *)(a1 + 302) != 1
    && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result[4] + 32 * *((unsigned __int8 *)result + 196) + 8) + 8) + 40) & 1) == 0)
  {
    v10 = *(int **)(v7 + 32);
    if (v10)
    {
      v11 = *v10;
      if (v10[1] > *v10)
      {
        *v10 = v11 + 1;
        v12 = &v10[6 * v11];
        *((_QWORD *)v12 + 2) = 0;
        *((_QWORD *)v12 + 3) = 0;
        *((_QWORD *)v12 + 1) = a2;
        goto LABEL_12;
      }
      v13 = sub_1ACC2D4F4((uint64_t)result, v10, a2);
    }
    else
    {
      v13 = (int *)sub_1ACC2D490(result, a2);
    }
    v10 = v13;
LABEL_12:
    *(_QWORD *)(v7 + 32) = v10;
    if (*(_DWORD *)(a1 + 112))
      return (_QWORD *)sub_1ACC032F0(a1, v10, a1 + 104, 1);
    v19 = 0;
    v14 = a4 - a3 + 1;
    do
    {
      v15 = *(unsigned __int8 *)++a3;
      --v14;
    }
    while ((byte_1ACCB6548[v15] & 1) != 0);
    v16 = (unsigned __int8 *)(a4 - 1);
    do
    {
      v17 = *v16--;
      --v14;
    }
    while ((byte_1ACCB6548[v17] & 1) != 0);
    v18 = a3;
    LODWORD(v19) = v14;
    return (_QWORD *)sub_1ACC032F0(a1, v10, (uint64_t)&v18, 1);
  }
  if (a2)
    return sub_1ACBF8348(result, a2);
  return result;
}

uint64_t *sub_1ACC0293C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v2 = result[43];
  if (v2)
  {
    v3 = result;
    if (*((unsigned __int8 *)result + 302) <= 1u)
    {
      if (a2)
      {
        v4 = *(const void **)a2;
        if (*(_QWORD *)a2)
        {
          v5 = *(__int16 *)(v2 + 54);
          v6 = (_QWORD *)*result;
          v7 = *(unsigned int *)(a2 + 8);
          result = (uint64_t *)sub_1ACBE1124(*result, v7 + 1);
          if (result)
          {
            v8 = (char *)result;
            memcpy(result, v4, v7);
            v8[v7] = 0;
            v9 = *v8;
            if ((char)byte_1ACCB6548[*v8] < 0)
            {
              v10 = 0;
              if (v9 == 91)
                v9 = 93;
              for (i = 1; ; ++i)
              {
                v12 = i;
                v13 = v8[i];
                if (v13 == v9)
                {
                  ++i;
                  LOBYTE(v13) = v9;
                  if (v8[v12 + 1] != v9)
                    break;
                }
                v8[v10++] = v13;
              }
              v8[v10] = 0;
            }
            v14 = *(unsigned __int8 *)(*v3 + 100);
            v15 = *(unsigned __int8 *)(*v3 + 197);
            v16 = sub_1ACBFC650(*v3, *(unsigned __int8 *)(*v3 + 100), v8, v15);
            v21 = (uint64_t)v16;
            if (!v15)
            {
              if (v16 && v16[3])
                goto LABEL_19;
              v21 = sub_1ACC01130((uint64_t)v3, v14, (uint64_t)v16, v8, v17, v18, v19, v20);
            }
            if (!v21)
              return sub_1ACBE0F9C(v6, v8);
LABEL_19:
            v22 = v5 - 1;
            sub_1ACC1201C((uint64_t)v6, *(_QWORD *)(v2 + 8) + 16 * (v5 - 1), v8);
            for (j = *(_QWORD *)(v2 + 16); j; j = *(_QWORD *)(j + 40))
            {
              if ((_DWORD)v22 == **(__int16 **)(j + 8))
              {
                v25 = *(_QWORD *)(v2 + 8);
                v26 = *(_WORD *)(v25 + 16 * v22 + 14);
                if ((v26 & 0x200) != 0)
                {
                  v27 = *(_QWORD *)(v25 + 16 * v22) - 1;
                  while (*(unsigned __int8 *)++v27)
                    ;
                  if ((v26 & 4) != 0)
                  {
                    while (*(unsigned __int8 *)++v27)
                      ;
                  }
                  v24 = v27 + 1;
                }
                else
                {
                  v24 = 0;
                }
                **(_QWORD **)(j + 64) = v24;
              }
            }
            return sub_1ACBE0F9C(v6, v8);
          }
        }
      }
    }
  }
  return result;
}

void sub_1ACC02B08(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _WORD *v26;
  __int16 v27;
  __int16 v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v10 = a1[43];
  if (!v10)
    goto LABEL_7;
  if (*((_BYTE *)a1 + 302) != 1)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(__int16 *)(v10 + 54) - 1;
    v14 = (uint64_t *)(v12 + 16 * v13);
    if (*((_WORD *)v14 + 6))
    {
LABEL_5:
      v31 = *v14;
      v11 = "error in generated column \"%s\"";
      goto LABEL_6;
    }
    if (!a3)
      goto LABEL_46;
    v15 = *(_DWORD *)(a3 + 8);
    if (v15 != 6)
    {
      if (v15 != 7)
        goto LABEL_5;
      v16 = *(unsigned __int8 **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_5;
      if ((*v16 & 0xDF) != 0x56)
      {
        v19 = 118;
        goto LABEL_45;
      }
      v17 = v16 + 1;
      if ((v16[1] & 0xDF) == 0x49)
      {
        v17 = v16 + 2;
        if ((v16[2] & 0xDF) == 0x52)
        {
          v17 = v16 + 3;
          if ((v16[3] & 0xDF) == 0x54)
          {
            v17 = v16 + 4;
            if ((v16[4] & 0xDF) == 0x55)
            {
              v17 = v16 + 5;
              if ((v16[5] & 0xDF) == 0x41)
              {
                v18 = v16[6];
                v16 += 6;
                if ((v18 & 0xFFFFFFDF) == 0x4C)
                {
LABEL_46:
                  --*(_WORD *)(v10 + 56);
                  v24 = 32;
                  goto LABEL_47;
                }
                v19 = 108;
LABEL_45:
                if (v19 != byte_1ACCB6333[*v16])
                  goto LABEL_5;
                goto LABEL_46;
              }
              v19 = 97;
            }
            else
            {
              v19 = 117;
            }
          }
          else
          {
            v19 = 116;
          }
        }
        else
        {
          v19 = 114;
        }
      }
      else
      {
        v19 = 105;
      }
      v16 = v17;
      goto LABEL_45;
    }
    v20 = *(unsigned __int8 **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
    if ((*v20 & 0xDF) != 0x53)
    {
      v23 = 115;
      goto LABEL_41;
    }
    v21 = v20 + 1;
    if ((v20[1] & 0xDF) == 0x54)
    {
      v21 = v20 + 2;
      if ((v20[2] & 0xDF) == 0x4F)
      {
        v21 = v20 + 3;
        if ((v20[3] & 0xDF) == 0x52)
        {
          v21 = v20 + 4;
          if ((v20[4] & 0xDF) == 0x45)
          {
            v22 = v20[5];
            v20 += 5;
            if ((v22 & 0xFFFFFFDF) == 0x44)
            {
LABEL_42:
              v24 = 64;
LABEL_47:
              v25 = v12 + 16 * v13;
              v27 = *(_WORD *)(v25 + 14);
              v26 = (_WORD *)(v25 + 14);
              v28 = v27 | v24;
              *v26 = v27 | v24;
              *(_DWORD *)(v10 + 48) |= v24;
              if ((v27 & 1) != 0)
              {
                *v26 = v28 | 1;
                if ((v28 & 0x60) != 0)
                  sub_1ACBCB308((uint64_t)a1, "generated columns cannot be part of the PRIMARY KEY", a3, a4, a5, a6, a7, a8, v31);
              }
              if (!a2)
                goto LABEL_56;
              v29 = *a2;
              if (v29 == 59)
              {
                v30 = (unsigned __int8 *)sub_1ACC0241C(a1, 174, (uint64_t)a2, 0);
                a2 = v30;
                if (!v30)
                {
LABEL_56:
                  sub_1ACC0EA70(a1, v10, v12 + 16 * v13, a2);
                  return;
                }
                v29 = *v30;
              }
              if (v29 != 71)
                a2[1] = *(_BYTE *)(v12 + 16 * v13 + 9);
              goto LABEL_56;
            }
            v23 = 100;
LABEL_41:
            if (v23 != byte_1ACCB6333[*v20])
              goto LABEL_5;
            goto LABEL_42;
          }
          v23 = 101;
        }
        else
        {
          v23 = 114;
        }
      }
      else
      {
        v23 = 111;
      }
    }
    else
    {
      v23 = 116;
    }
    v20 = v21;
    goto LABEL_41;
  }
  v11 = "virtual tables cannot use computed columns";
LABEL_6:
  sub_1ACBCB308((uint64_t)a1, v11, a3, a4, a5, a6, a7, a8, v31);
LABEL_7:
  if (a2)
    sub_1ACBF8348((_QWORD *)*a1, a2);
}

void sub_1ACC02E2C(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t j;
  _QWORD *v18;
  _OWORD *v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;

  v8 = a6;
  v57 = 0uLL;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v11 = *(_QWORD *)a1;
  if (*(int *)(a1 + 296) < 1)
  {
    v19 = (_OWORD *)a4;
    sub_1ACB66080(a1, a3, a4, a7, 1, 0, a8, a8, v49);
    v28 = *(_QWORD *)(a1 + 344);
    if (v28 && !*(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(v28 + 48) |= 0x200u;
      if (*((_DWORD *)v19 + 2))
      {
        if (*(_BYTE *)(*(_QWORD *)a1 + 197))
        {
          sub_1ACBCB308(a1, "corrupt database", v22, v23, v24, v25, v26, v27, v50);
          v19 = 0;
        }
        else if ((sub_1ACC0DF84(*(_QWORD *)a1, (uint64_t)a3) & 0x80000000) != 0)
        {
          sub_1ACBCB308(a1, "unknown database %T", v29, v30, v31, v32, v33, v34, (char)a3);
        }
      }
      else
      {
        v19 = a3;
      }
      v35 = *(_QWORD *)(v28 + 96);
      if (v35)
      {
        v36 = (uint64_t *)(*(_QWORD *)(v11 + 32) + 24);
        v37 = -1;
        do
        {
          v38 = *v36;
          v36 += 4;
          ++v37;
        }
        while (v38 != v35);
      }
      else
      {
        v37 = -32768;
      }
      v39 = *(_QWORD *)a1;
      *(_QWORD *)&v51 = a1;
      v40 = (_QWORD *)(*(_QWORD *)(v39 + 32) + 32 * v37);
      *((_QWORD *)&v55 + 1) = *v40;
      v41 = v40[3];
      *(_QWORD *)&v56 = "view";
      *((_QWORD *)&v56 + 1) = v19;
      LOBYTE(v55) = v37 == 1;
      *((_QWORD *)&v51 + 1) = a1;
      *(_QWORD *)&v52 = sub_1ACC13854;
      *((_QWORD *)&v52 + 1) = sub_1ACC138D0;
      *(_QWORD *)&v53 = nullsub_8;
      DWORD2(v53) = 0;
      WORD6(v53) = 0;
      *(_QWORD *)&v54 = &v51;
      *((_QWORD *)&v54 + 1) = v41;
      if (!sub_1ACB73B30((_QWORD *)&v51 + 1, (_QWORD *)v8))
      {
        *(_DWORD *)(v8 + 4) |= 0x200000u;
        if (*(unsigned __int8 *)(a1 + 302) <= 1u)
        {
          v42 = sub_1ACB8DFB8(v11, v8, 1);
        }
        else
        {
          v42 = v8;
          v8 = 0;
        }
        *(_QWORD *)(v28 + 64) = v42;
        *(_QWORD *)(v28 + 32) = sub_1ACB8B6B8(v11, a5, 1u);
        *(_BYTE *)(v28 + 63) = 2;
        if (!*(_BYTE *)(v11 + 103))
        {
          v57 = *(_OWORD *)(a1 + 280);
          if (*(_BYTE *)v57 == 59)
            v46 = 0;
          else
            v46 = DWORD2(v57);
          v47 = *a2 + (int)(v57 + v46 - *a2);
          do
            v48 = *(unsigned __int8 *)--v47;
          while ((byte_1ACCB6548[v48] & 1) != 0);
          *(_QWORD *)&v57 = v47;
          DWORD2(v57) = 1;
          sub_1ACB67074(a1, 0, (uint64_t)&v57, 0, 0, v43, v44, v45, v50);
        }
      }
    }
  }
  else
  {
    sub_1ACBCB308(a1, "parameters are not allowed in views", (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, v49);
  }
  if (v8)
    sub_1ACB7E704((_QWORD *)v11, v8, 1);
  if (*(unsigned __int8 *)(a1 + 302) < 2u)
    goto LABEL_26;
  if (a5)
  {
    v59 = 0u;
    v60 = 0u;
    v58[0] = a1;
    v58[1] = sub_1ACC12814;
    v12 = *(_DWORD *)a5;
    if (*(int *)a5 < 1)
      goto LABEL_26;
    for (i = 1; ; i += 3)
    {
      v14 = a5[i];
      if (v14)
      {
        if (sub_1ACC0B714((uint64_t)v58, v14))
          v15 = 1;
        else
          v15 = v12 <= 1;
        if (v15)
        {
LABEL_17:
          v16 = *(unsigned int *)a5;
          if ((int)v16 >= 1)
          {
            for (j = 0; j != v16; ++j)
            {
              if ((*(_WORD *)((_BYTE *)&a5[3 * j + 3] + 1) & 3) == 0)
              {
                v18 = *(_QWORD **)(a1 + 408);
                if (v18)
                {
                  while (*v18 != a5[3 * j + 2])
                  {
                    v18 = (_QWORD *)v18[3];
                    if (!v18)
                      goto LABEL_20;
                  }
                  *v18 = 0;
                }
              }
LABEL_20:
              ;
            }
          }
LABEL_26:
          if (a5)
            sub_1ACC010B0((_QWORD *)v11, a5);
          return;
        }
      }
      else if (v12 <= 1)
      {
        goto LABEL_17;
      }
      --v12;
    }
  }
}

uint64_t sub_1ACC0319C(_QWORD **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (a2)
  {
    *(_QWORD *)(a2 + 104) = a3;
    sub_1ACC031DC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v10);
  }
  else
  {
    sub_1ACBF84C4(*a1, a3);
  }
  return a2;
}

void sub_1ACC031DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  if (*(_QWORD *)(a2 + 80))
  {
    v11 = 0;
    v12 = 1;
    v13 = "ORDER BY";
    v14 = a2;
    while (1)
    {
      v15 = v12;
      v16 = v14;
      *(_QWORD *)(v14 + 88) = v11;
      *(_DWORD *)(v14 + 4) |= 0x100u;
      v14 = *(_QWORD *)(v14 + 80);
      if (!v14)
        break;
      if (*(_QWORD *)(v14 + 72))
        goto LABEL_7;
      ++v12;
      v11 = v16;
      if (*(_QWORD *)(v14 + 96))
      {
        v13 = "LIMIT";
LABEL_7:
        ++v15;
        sub_1ACBCB308(a1, "%s clause should come after %s not before", a3, a4, a5, a6, a7, a8, (char)v13);
        break;
      }
    }
    if ((*(_BYTE *)(a2 + 5) & 4) == 0)
    {
      v17 = *(_DWORD *)(*(_QWORD *)a1 + 152);
      if (v17 >= 1 && v15 > v17)
        sub_1ACBCB308(a1, "too many terms in compound SELECT", a3, a4, a5, a6, a7, a8, a9);
    }
  }
}

uint64_t sub_1ACC032F0(uint64_t result, int *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  _BYTE *v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  if (a2)
  {
    v7 = result;
    v8 = *a2 - 1;
    v9 = *(const void **)a3;
    if (*(_QWORD *)a3)
    {
      v10 = *(unsigned int *)(a3 + 8);
      result = sub_1ACBE1124(*(_QWORD *)result, v10 + 1);
      v11 = (_BYTE *)result;
      if (result)
      {
        result = (uint64_t)memcpy((void *)result, v9, v10);
        v11[v10] = 0;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = &a2[6 * v8];
    *((_QWORD *)v12 + 2) = v11;
    v13 = (uint64_t *)(v12 + 4);
    if (a4)
    {
      if (v11 && (char)byte_1ACCB6548[*v11] < 0)
      {
        v14 = 0;
        if (*v11 == 91)
          v15 = 93;
        else
          v15 = *v11;
        for (i = 1; ; ++i)
        {
          v17 = i;
          v18 = v11[i];
          if (v18 == v15)
          {
            ++i;
            LOBYTE(v18) = v15;
            if (v11[v17 + 1] != v15)
              break;
          }
          v11[v14++] = v18;
        }
        v11[v14] = 0;
      }
      v19 = *(unsigned __int8 *)(v7 + 302);
      if (v19 >= 2 && v19 != 3)
      {
        v20 = *v13;
        if (*(_QWORD *)v7)
        {
          result = sub_1ACBE1124(*(_QWORD *)v7, 0x20uLL);
          if (!result)
            return result;
        }
        else
        {
          result = sub_1ACB5D828(32);
          if (!result)
            return result;
        }
        *(_OWORD *)result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        *(_QWORD *)result = v20;
        *(_OWORD *)(result + 8) = *(_OWORD *)a3;
        *(_QWORD *)(result + 24) = *(_QWORD *)(v7 + 408);
        *(_QWORD *)(v7 + 408) = result;
      }
    }
  }
  return result;
}

uint64_t *sub_1ACC03448(uint64_t *result, int *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v5;
  int *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  size_t v18;
  uint64_t *v19;

  if (a2)
  {
    v5 = *a2 - 1;
    v6 = &a2[6 * v5];
    v8 = *((_QWORD *)v6 + 2);
    v7 = (uint64_t **)(v6 + 4);
    if (!v8)
    {
      v9 = *result;
      v10 = a4 - (_DWORD)a3;
      do
      {
        v11 = a3;
        v12 = v10;
        v13 = *a3++;
        --v10;
      }
      while ((byte_1ACCB6548[v13] & 1) != 0);
      v14 = v12;
      v15 = ((uint64_t)v12 << 32) + 0x100000000;
      v16 = v14 - 2;
      do
      {
        v17 = byte_1ACCB6548[a3[v16]];
        v15 -= 0x100000000;
        --v16;
      }
      while ((v17 & 1) != 0);
      v18 = v15 >> 32;
      result = (uint64_t *)sub_1ACBE1124(v9, (v15 >> 32) + 1);
      v19 = result;
      if (result)
      {
        result = (uint64_t *)memcpy(result, v11, v18);
        *((_BYTE *)v19 + v18) = 0;
      }
      *v7 = v19;
      *(_WORD *)((char *)&a2[6 * v5 + 6] + 1) = *(_WORD *)((_BYTE *)&a2[6 * v5 + 6] + 1) & 0xFFFC | 1;
    }
  }
  return result;
}

uint64_t sub_1ACC03524(uint64_t a1, int a2, char *__s)
{
  unsigned int v5;
  _QWORD v7[2];

  v7[0] = __s;
  if (__s)
    v5 = strlen(__s) & 0x3FFFFFFF;
  else
    v5 = 0;
  v7[1] = v5;
  return sub_1ACB6DDF8(a1, a2, (uint64_t)v7, 0);
}

unsigned int *sub_1ACC03584(unsigned int *result)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int *v14;

  if (result)
  {
    v1 = *result;
    if ((int)v1 >= 2)
    {
      v2 = 0;
      v3 = *result;
      do
      {
        v4 = result[26 * (v3 - 2) + 17];
        LOBYTE(result[26 * (v3 - 1) + 17]) = v4;
        v2 |= v4;
      }
      while (v3-- > 2);
      *((_BYTE *)result + 68) = 0;
      if ((v2 & 0x10) != 0)
      {
        v6 = 1;
        while (v1 >= 2)
        {
          if ((result[26 * --v1 + 17] & 0x10) != 0)
          {
            v6 = v1 + 1;
            break;
          }
        }
        v7 = v6 - 2;
        v8 = (v7 & ~(v7 >> 63)) + 1;
        if (v8 < 2)
        {
          v9 = v7;
LABEL_15:
          v13 = v9 + 1;
          v14 = &result[26 * v9 + 17];
          do
          {
            *(_BYTE *)v14 |= 0x40u;
            v14 -= 26;
            --v13;
          }
          while (v13 > 0);
          return result;
        }
        v9 = v7 - (v8 & 0xFFFFFFFFFFFFFFFELL);
        v10 = &result[26 * (int)v7 + 17];
        v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v12 = *((_BYTE *)v10 - 104) | 0x40;
          *(_BYTE *)v10 |= 0x40u;
          *((_BYTE *)v10 - 104) = v12;
          v10 -= 52;
          v11 -= 2;
        }
        while (v11);
        if (v8 != (v8 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_15;
      }
    }
  }
  return result;
}

uint64_t *sub_1ACC03690(uint64_t *result, int *a2, uint64_t a3)
{
  size_t v3;
  uint64_t v5;
  const void *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int i;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v3)
    {
      v5 = *a2 - 1;
      v6 = *(const void **)a3;
      if ((_DWORD)v3 == 1)
      {
        v3 = 1;
        if (!v6)
          goto LABEL_19;
      }
      else if (!v6)
      {
        v7 = 0;
LABEL_18:
        *(_QWORD *)&a2[26 * v5 + 24] = v7;
        LOWORD(v3) = 2;
LABEL_19:
        *(_WORD *)((char *)&a2[26 * v5 + 17] + 1) |= v3;
        return result;
      }
      result = (uint64_t *)sub_1ACBE1124(*result, v3 + 1);
      v7 = result;
      if (result)
      {
        result = (uint64_t *)memcpy(result, v6, v3);
        *((_BYTE *)v7 + v3) = 0;
        if ((char)byte_1ACCB6548[*(unsigned __int8 *)v7] < 0)
        {
          v8 = 0;
          if (*(_BYTE *)v7 == 91)
            v9 = 93;
          else
            v9 = *(unsigned __int8 *)v7;
          for (i = 1; ; ++i)
          {
            v11 = i;
            v12 = *((unsigned __int8 *)v7 + i);
            if (v12 == v9)
            {
              ++i;
              LOBYTE(v12) = v9;
              if (*((unsigned __int8 *)v7 + v11 + 1) != v9)
                break;
            }
            *((_BYTE *)v7 + v8++) = v12;
          }
          *((_BYTE *)v7 + v8) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *sub_1ACC037A0(_QWORD *result, int *a2, _QWORD *a3)
{
  int *v3;

  if (a2)
  {
    v3 = &a2[26 * *a2];
    *((_QWORD *)v3 - 1) = a3;
    *(_WORD *)((char *)v3 - 35) |= 4u;
  }
  else if (a3)
  {
    return sub_1ACC010B0((_QWORD *)*result, a3);
  }
  return result;
}

uint64_t sub_1ACC037D8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 302) != 3)
  {
    v6 = *(_QWORD *)a1;
    if (!v6)
    {
      v7 = sub_1ACB5D828(32);
      if (!v7)
        return a2;
      goto LABEL_4;
    }
    v7 = sub_1ACBE1124(v6, 0x20uLL);
    if (v7)
    {
LABEL_4:
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_QWORD *)v7 = a2;
      *(_OWORD *)(v7 + 8) = *a3;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a1 + 408);
      *(_QWORD *)(a1 + 408) = v7;
    }
  }
  return a2;
}

_BYTE *sub_1ACC03858(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  int i;
  uint64_t v9;
  int v10;

  if (!a2)
    return 0;
  v2 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v3 = *(unsigned int *)(a2 + 8);
  v4 = (_BYTE *)sub_1ACBE1124(a1, v3 + 1);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, v2, v3);
    v5[v3] = 0;
    if ((char)byte_1ACCB6548[*v5] < 0)
    {
      v6 = 0;
      if (*v5 == 91)
        v7 = 93;
      else
        v7 = *v5;
      for (i = 1; ; ++i)
      {
        v9 = i;
        v10 = v5[i];
        if (v10 == v7)
        {
          ++i;
          LOBYTE(v10) = v7;
          if (v5[v9 + 1] != v7)
            break;
        }
        v5[v6++] = v10;
      }
      v5[v6] = 0;
    }
  }
  return v5;
}

uint64_t sub_1ACC03918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];

  v8 = 0;
  v9 = 0;
  v23[3] = *MEMORY[0x1E0C80C00];
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  while (2)
  {
    v10 = v23[v8];
    if (!v10)
      break;
    v11 = 0;
    v12 = *(_DWORD *)(v10 + 8);
    while (1)
    {
      if (v12 != byte_1ACCBA3BC[3 * v11 + 1])
        goto LABEL_6;
      if (v12 < 0)
        break;
      v14 = *(_BYTE **)v10;
      if (*(_QWORD *)v10)
      {
        if (!v12)
          goto LABEL_15;
        v15 = &aNaturaleftoute[byte_1ACCBA3BC[3 * v11]];
        v16 = v12 + 1;
        while (1)
        {
          v17 = *v14;
          if (!*v14)
            break;
          LODWORD(v17) = byte_1ACCB6333[v17];
          v13 = byte_1ACCB6333[*v15];
          if ((_DWORD)v17 != v13)
            goto LABEL_5;
          ++v14;
          ++v15;
          if (--v16 <= 1)
            goto LABEL_15;
        }
        v13 = byte_1ACCB6333[*v15];
LABEL_5:
        if ((_DWORD)v17 == v13)
          goto LABEL_15;
      }
LABEL_6:
      if (++v11 == 7)
      {
        v9 = v9 | 0x80;
        goto LABEL_19;
      }
    }
    v18 = a1;
    v19 = a2;
    v20 = a3;
    v21 = a4;
    sub_1ACBBE20C(35843);
    a4 = v21;
    a3 = v20;
    a2 = v19;
    a1 = v18;
LABEL_15:
    v9 = v9 | byte_1ACCBA3BC[3 * v11 + 2];
    if (++v8 != 3)
      continue;
    break;
  }
LABEL_19:
  if ((v9 & 0x38) == 0x20 || (v9 & 0x21) == 0x21 || (v9 & 0x80) != 0)
  {
    sub_1ACBCB308(a1, "unknown join type: %T%s%T%s%T", a3, a4, a5, a6, a7, a8, a2);
    return 1;
  }
  return v9;
}

int *sub_1ACC03AF0(int *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int *v5;
  _BYTE *v6;

  if (result)
  {
    v3 = *result - 1;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    v5 = &result[6 * v3];
    *((_BYTE *)v5 + 24) = v4;
    v6 = v5 + 6;
    if (a3 != -1)
    {
      *(_WORD *)((char *)&result[6 * v3 + 6] + 1) |= 0x20u;
      if (v4 != a3)
        *v6 = v4 | 2;
    }
  }
  return result;
}

void sub_1ACC03B40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  char v27;

  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 360))
    sub_1ACBCB308(a1, "cannot use RETURNING in a trigger", a3, a4, a5, a6, a7, a8, v27);
  *(_BYTE *)(a1 + 219) = 1;
  if (v10)
  {
    if (*(unsigned __int16 *)(v10 + 436) <= 0xC7u)
    {
      if (*(_DWORD *)(v10 + 432))
      {
        if (*(_BYTE *)(v10 + 103))
          goto LABEL_22;
      }
      else
      {
        ++*(_DWORD *)(v10 + 452);
      }
      goto LABEL_17;
    }
    v11 = *(_QWORD *)(v10 + 472);
    if (v11)
    {
      v12 = (_QWORD *)(v10 + 472);
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 464);
      if (!v11)
      {
        ++*(_DWORD *)(v10 + 456);
LABEL_17:
        v11 = sub_1ACBE1300(v10, 200);
        if (v11)
          goto LABEL_18;
LABEL_22:
        if (a2)
          sub_1ACC010B0((_QWORD *)v10, a2);
        return;
      }
      v12 = (_QWORD *)(v10 + 464);
    }
    *v12 = *(_QWORD *)v11;
    ++*(_DWORD *)(v10 + 448);
  }
  else
  {
    v11 = sub_1ACB5D828(200);
    if (!v11)
      goto LABEL_22;
  }
LABEL_18:
  *(_QWORD *)(v11 + 192) = 0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(a1 + 200) = v11;
  *(_QWORD *)v11 = a1;
  *(_QWORD *)(v11 + 8) = a2;
  if (*(_QWORD *)a1)
  {
    v13 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, 0x18uLL);
    if (v13)
      goto LABEL_20;
  }
  else
  {
    v13 = (_QWORD *)sub_1ACB5D828(24);
    if (v13)
    {
LABEL_20:
      v14 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v13;
      *v13 = v14;
      v13[1] = v11;
      v13[2] = sub_1ACC3226C;
      if (*(_BYTE *)(v10 + 103))
        return;
      goto LABEL_28;
    }
  }
  v15 = *(_QWORD **)a1;
  sub_1ACB57390(*(_QWORD *)(v15[4] + 56) + 56, "sqlite_returning", 0);
  v16 = *(_QWORD **)(v11 + 8);
  if (v16)
    sub_1ACC010B0(v15, v16);
  sub_1ACBE0F9C(v15, (_QWORD *)v11);
  if (!*(_BYTE *)(v10 + 103))
  {
LABEL_28:
    *(_QWORD *)(v11 + 16) = "sqlite_returning";
    v17 = v11 + 16;
    *(_WORD *)(v17 + 16) = 662;
    *(_BYTE *)(v17 + 18) = 1;
    v18 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 56);
    *(_QWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 48) = v18;
    *(_BYTE *)(v17 + 72) = -106;
    *(_QWORD *)(v17 + 56) = v17 + 72;
    *(_QWORD *)(v17 + 80) = v17;
    *(_QWORD *)(v17 + 120) = a2;
    if (sub_1ACB57390(v18 + 56, "sqlite_returning", v17) == v17 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
    {
      *(_BYTE *)(v10 + 103) = 1;
      if (*(int *)(v10 + 220) >= 1)
        *(_DWORD *)(v10 + 424) = 1;
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      v25 = *(_QWORD *)(v10 + 344);
      if (v25)
      {
        sub_1ACBCB308(v25, "out of memory", v19, v20, v21, v22, v23, v24, v27);
        for (i = *(_QWORD *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
  }
}

int *sub_1ACC03DB8(uint64_t *a1, int *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  int *v11;
  int *v12;

  v8 = a2;
  if (a3)
  {
    v11 = sub_1ACB6E648(a1, a2, *(unsigned int *)a3, 1, a5, a6, a7, a8);
    if (v11)
    {
      v12 = v11;
      memcpy(v11 + 28, a3 + 1, 104 * *(int *)a3);
      sub_1ACBE0F9C((_QWORD *)*a1, a3);
      *((_BYTE *)v12 + 68) |= v12[43] & 0x40;
      return v12;
    }
    else
    {
      sub_1ACB7E8B0((_QWORD *)*a1, a3);
    }
  }
  return v8;
}

int *sub_1ACC03E50(uint64_t *a1, int *a2, _QWORD *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unsigned __int8 *v20;
  int v21;
  int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[6];

  v10 = a2;
  v12 = *a1;
  if (a2)
  {
    v13 = *a2;
    if (!a3)
      goto LABEL_27;
  }
  else
  {
    v13 = 0;
    if (!a3)
      goto LABEL_27;
  }
  if (!a4)
    goto LABEL_27;
  v14 = *a4;
  v15 = *(unsigned int *)a3;
  if (v14 != 138)
  {
    if (v14 == 176)
      v14 = a4[2];
    if (v14 == 138)
    {
      v16 = (_DWORD **)(*((_QWORD *)a4 + 4) + 32);
LABEL_13:
      if ((_DWORD)v15 == **v16)
        goto LABEL_14;
LABEL_35:
      sub_1ACBCB308((uint64_t)a1, "%d columns assigned %d values", (uint64_t)a3, v15, a5, a6, a7, a8, *(_DWORD *)a3);
      goto LABEL_36;
    }
    if (v14 == 177)
    {
      v16 = (_DWORD **)(a4 + 32);
      goto LABEL_13;
    }
    if ((_DWORD)v15 != 1)
      goto LABEL_35;
  }
LABEL_14:
  if ((int)v15 >= 1)
  {
    v17 = 0;
    v18 = 1;
    while (1)
    {
      v20 = (unsigned __int8 *)sub_1ACC21FBC((uint64_t)a1, a4, v17, v15);
      if (!v20)
        goto LABEL_18;
      if (!v10)
        break;
      v21 = *v10;
      if (v10[1] <= *v10)
      {
        v22 = sub_1ACC2D4F4(*a1, v10, v20);
        goto LABEL_24;
      }
      *v10 = v21 + 1;
      v19 = &v10[6 * v21];
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
      *((_QWORD *)v19 + 1) = v20;
LABEL_17:
      *(_QWORD *)&v10[6 * *v10 - 2] = a3[v18];
      a3[v18] = 0;
LABEL_18:
      ++v17;
      v15 = *(int *)a3;
      v18 += 2;
      if (v17 >= v15)
        goto LABEL_26;
    }
    v22 = (int *)sub_1ACC2D490((_QWORD *)*a1, v20);
LABEL_24:
    v10 = v22;
    if (!v22)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_26:
  if (!*(_BYTE *)(v12 + 103))
  {
    if (*a4 == 138 && v10)
    {
      v23 = *(_QWORD *)&v10[6 * v13 + 2];
      *(_QWORD *)(v23 + 24) = a4;
      *(_DWORD *)(v23 + 44) = v15;
      if ((int)v15 >= 1)
        goto LABEL_40;
      goto LABEL_44;
    }
    goto LABEL_36;
  }
LABEL_27:
  if (!a4)
  {
    if (!a3)
      return v10;
LABEL_39:
    LODWORD(v15) = *(_DWORD *)a3;
    if (*(int *)a3 >= 1)
    {
LABEL_40:
      v25 = 0;
      v26 = 1;
      do
      {
        v27 = (_QWORD *)a3[v26];
        if (v27)
        {
          sub_1ACBE0F9C((_QWORD *)v12, v27);
          LODWORD(v15) = *(_DWORD *)a3;
        }
        ++v25;
        v26 += 2;
      }
      while (v25 < (int)v15);
    }
LABEL_44:
    sub_1ACBF0674((_QWORD *)v12, a3);
    return v10;
  }
LABEL_36:
  v24 = *((unsigned __int8 *)a1 + 302);
  if (v24 >= 2)
  {
    v29[0] = a1;
    v29[1] = sub_1ACC12814;
    v29[2] = sub_1ACC12880;
    memset(&v29[3], 0, 24);
    *((_BYTE *)a1 + 302) = 3;
    sub_1ACC0B714((uint64_t)v29, (uint64_t)a4);
    *((_BYTE *)a1 + 302) = v24;
  }
  sub_1ACBF8348((_QWORD *)*a1, a4);
  if (a3)
    goto LABEL_39;
  return v10;
}

uint64_t sub_1ACC040B8(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, _QWORD *a4, unsigned __int8 *a5, _QWORD *a6)
{
  uint64_t v12;

  if (a1)
  {
    v12 = sub_1ACBE1124((uint64_t)a1, 0x58uLL);
    if (v12)
    {
LABEL_3:
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_QWORD *)(v12 + 80) = 0;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_QWORD *)v12 = a2;
      *(_QWORD *)(v12 + 8) = a3;
      *(_QWORD *)(v12 + 16) = a4;
      *(_QWORD *)(v12 + 24) = a5;
      *(_BYTE *)(v12 + 40) = a4 != 0;
      *(_QWORD *)(v12 + 32) = a6;
      return v12;
    }
  }
  else
  {
    v12 = sub_1ACB5D828(88);
    if (v12)
      goto LABEL_3;
  }
  if (a2)
    sub_1ACC010B0(a1, a2);
  if (a3)
    sub_1ACBF8348(a1, a3);
  if (a4)
    sub_1ACC010B0(a1, a4);
  if (a5)
    sub_1ACBF8348(a1, a5);
  if (a6)
    sub_1ACC01018(a1, a6);
  return v12;
}

_QWORD *sub_1ACC041AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  int i;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v25;

  v5 = *(_QWORD *)a1;
  if (!a2)
  {
    if (v5)
    {
      v8 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, 0x18uLL);
      if (!v8)
        return v8;
    }
    else
    {
      v8 = (_QWORD *)sub_1ACB5D828(24);
      if (!v8)
        return v8;
    }
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    goto LABEL_20;
  }
  v7 = 16 * *(int *)a2 + 24;
  if (*(_QWORD *)(v5 + 512) > (unint64_t)a2)
  {
    if (*(_QWORD *)(v5 + 496) <= (unint64_t)a2)
    {
      if (v7 < 0x81)
      {
LABEL_6:
        v8 = a2;
LABEL_20:
        v13 = *(int *)v8;
        *(_DWORD *)v8 = v13 + 1;
        if (a3
          && (v14 = *(const void **)a3) != 0
          && (v15 = *(unsigned int *)(a3 + 8), (v16 = (_BYTE *)sub_1ACBE1124(v5, v15 + 1)) != 0))
        {
          v17 = v16;
          memcpy(v16, v14, v15);
          v17[v15] = 0;
          if ((char)byte_1ACCB6548[*v17] < 0)
          {
            v18 = 0;
            if (*v17 == 91)
              v19 = 93;
            else
              v19 = *v17;
            for (i = 1; ; ++i)
            {
              v21 = i;
              v22 = v17[i];
              if (v22 == v19)
              {
                ++i;
                LOBYTE(v22) = v19;
                if (v17[v21 + 1] != v19)
                  break;
              }
              v17[v18++] = v22;
            }
            v17[v18] = 0;
          }
          v8[2 * v13 + 1] = v17;
          v23 = *(unsigned __int8 *)(a1 + 302);
          if (v23 > 3 || v23 == 2)
          {
            if (*(_QWORD *)a1)
              v25 = sub_1ACBE1124(*(_QWORD *)a1, 0x20uLL);
            else
              v25 = sub_1ACB5D828(32);
            if (v25)
            {
              *(_OWORD *)v25 = 0u;
              *(_OWORD *)(v25 + 16) = 0u;
              *(_QWORD *)v25 = v17;
              *(_OWORD *)(v25 + 8) = *(_OWORD *)a3;
              *(_QWORD *)(v25 + 24) = *(_QWORD *)(a1 + 408);
              *(_QWORD *)(a1 + 408) = v25;
            }
          }
        }
        else
        {
          v8[2 * v13 + 1] = 0;
        }
        return v8;
      }
    }
    else if (*(_QWORD *)(v5 + 504) <= (unint64_t)a2 && v7 <= *(unsigned __int16 *)(v5 + 438))
    {
      goto LABEL_6;
    }
  }
  v8 = (_QWORD *)sub_1ACBE11D0(*(_QWORD *)a1, a2, v7);
  if (v8)
    goto LABEL_20;
  v9 = *(_DWORD *)a2;
  if (*(int *)a2 >= 1)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = (_QWORD *)a2[v11];
      if (v12)
      {
        sub_1ACBE0F9C((_QWORD *)v5, v12);
        v9 = *(_DWORD *)a2;
      }
      ++v10;
      v11 += 2;
    }
    while (v10 < v9);
  }
  sub_1ACBF0674((_QWORD *)v5, a2);
  return 0;
}

uint64_t sub_1ACC043E0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  if (*(_DWORD *)(a3 + 8))
  {
    v5 = sub_1ACB6DDF8(*a1, 113, a3, a4);
    if (v5)
    {
      *(_QWORD *)(v5 + 16) = a2;
      *(_DWORD *)(v5 + 4) |= 0x2200u;
      return v5;
    }
  }
  return a2;
}

void sub_1ACC04430(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;

  if (a2)
  {
    *(_QWORD *)(a2 + 72) = a3;
    v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v9 | 0x1000000;
    *(_QWORD *)(a3 + 112) = a2;
    if ((v9 & 4) != 0 && *(unsigned __int8 *)(a3 + 32) != 166)
      sub_1ACBCB308((uint64_t)a1, "DISTINCT is not supported for window functions", a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    sub_1ACBF8400(*a1, (_QWORD *)a3);
  }
}

uint64_t sub_1ACC04474(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v3 = (unsigned __int8 *)a3;
  if (!a2)
    return (uint64_t)v3;
  if (a3)
  {
    if (((*(_DWORD *)(a3 + 4) | *(_DWORD *)(a2 + 4)) & 0x20000003) != 0x20000000 || *((unsigned __int8 *)a1 + 302) > 1u)
      return sub_1ACC0241C(a1, 44, a2, a3);
    v7 = *a1;
    if (*a1)
      v8 = (_QWORD *)sub_1ACBE1124(*a1, 0x18uLL);
    else
      v8 = (_QWORD *)sub_1ACB5D828(24);
    if (v8)
    {
      *v8 = a1[24];
      a1[24] = (uint64_t)v8;
      v8[1] = a2;
      v8[2] = sub_1ACB782D4;
      v9 = *a1;
      if (*a1)
        goto LABEL_12;
    }
    else
    {
      sub_1ACBF8348((_QWORD *)*a1, (unsigned __int8 *)a2);
      v9 = *a1;
      if (*a1)
      {
LABEL_12:
        v10 = (_QWORD *)sub_1ACBE1124(v9, 0x18uLL);
        if (v10)
        {
LABEL_13:
          *v10 = a1[24];
          a1[24] = (uint64_t)v10;
          v10[1] = v3;
          v10[2] = sub_1ACB782D4;
LABEL_17:
          v11[0] = "0";
          v11[1] = 1;
          return sub_1ACB6DDF8(v7, 155, (uint64_t)v11, 0);
        }
LABEL_16:
        sub_1ACBF8348((_QWORD *)*a1, v3);
        goto LABEL_17;
      }
    }
    v10 = (_QWORD *)sub_1ACB5D828(24);
    if (v10)
      goto LABEL_13;
    goto LABEL_16;
  }
  return a2;
}

_QWORD *sub_1ACC045D0(_QWORD *result, _BYTE *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v5;

  if (a2 && a3 && *a2 == 121 && *((unsigned __int8 *)result + 302) <= 1u)
  {
    result = (_QWORD *)*result;
    *(_BYTE *)a3 = a4;
    v5 = *(unsigned __int8 **)(a3 + 24);
    if (v5)
      result = sub_1ACBF8348(result, v5);
    *(_QWORD *)(a3 + 24) = 0;
  }
  return result;
}

_QWORD *sub_1ACC04624(_QWORD *result, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned int v4;
  _QWORD v5[6];

  if (a2)
  {
    v3 = result;
    v4 = *((unsigned __int8 *)result + 302);
    if (v4 >= 2)
    {
      v5[0] = result;
      v5[1] = sub_1ACC12814;
      v5[2] = sub_1ACC12880;
      memset(&v5[3], 0, 24);
      *((_BYTE *)result + 302) = 3;
      sub_1ACC0B714((uint64_t)v5, (uint64_t)a2);
      *((_BYTE *)v3 + 302) = v4;
    }
    return sub_1ACBF8348((_QWORD *)*v3, a2);
  }
  return result;
}

uint64_t sub_1ACC046A4(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[4];
  __int128 v4;

  v3[3] = 0;
  v4 = 0u;
  v3[0] = 0;
  result = 1;
  WORD2(v4) = 1;
  v3[1] = sub_1ACB8B0F4;
  v3[2] = sub_1ACC0B708;
  if (a1)
  {
    sub_1ACC0B714((uint64_t)v3, a1);
    return WORD2(v4);
  }
  return result;
}

void sub_1ACC046F8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *(_QWORD *)(a2 + 32) = a3;
    *(_DWORD *)(a2 + 4) |= 0x401000u;
    sub_1ACC04890(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (a3)
  {
    sub_1ACB7E704(*(_QWORD **)a1, a3, 1);
  }
}

_OWORD *sub_1ACC04730(_QWORD **a1, int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  unsigned __int8 *v15;
  int v16;
  _OWORD *v17;

  if (*a3 < 1)
  {
    v14 = 0;
    goto LABEL_17;
  }
  v11 = 0;
  v12 = 0;
  v13 = 2;
  while (1)
  {
    v15 = *(unsigned __int8 **)&a3[v13];
    if (*v15 != 177)
      break;
    v16 = **((_DWORD **)v15 + 4);
    if (v16 != a2)
      goto LABEL_13;
LABEL_9:
    v17 = sub_1ACB6E848(a1, *((_QWORD **)v15 + 4), 0, 0, 0, 0, 0, 512, 0);
    *((_QWORD *)v15 + 4) = 0;
    if (v17)
    {
      v14 = v17;
      if (v12)
      {
        *(_BYTE *)v17 = -121;
        *((_QWORD *)v17 + 10) = v12;
      }
    }
    else
    {
      v14 = v12;
    }
    ++v11;
    v13 += 6;
    v12 = v14;
    if (v11 >= *a3)
      goto LABEL_14;
  }
  LOBYTE(v16) = 1;
  if (a2 == 1)
    goto LABEL_9;
LABEL_13:
  sub_1ACBCB308((uint64_t)a1, "IN(...) element has %d term%s - expected %d", (uint64_t)a3, a4, a5, a6, a7, a8, v16);
  v14 = v12;
LABEL_14:
  if (v14 && *((_QWORD *)v14 + 10))
    *((_DWORD *)v14 + 1) |= 0x400u;
LABEL_17:
  sub_1ACC010B0(*a1, a3);
  return v14;
}

void sub_1ACC04890(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  if (!a1[12])
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 40);
    v31 = v10;
    v11 = *(_QWORD *)(a2 + 24);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 40);
      if (v12 > (int)v10)
      {
        v31 = v12;
        LODWORD(v10) = v12;
      }
    }
    v13 = *(_DWORD *)(a2 + 4);
    v14 = *(_QWORD **)(a2 + 32);
    if ((v13 & 0x1000) != 0)
    {
      sub_1ACB8DE58(v14, &v31);
      LODWORD(v10) = v31;
      goto LABEL_27;
    }
    if (!v14)
      goto LABEL_27;
    v15 = *(unsigned int *)v14;
    if ((int)v15 < 1)
    {
      v21 = 0;
LABEL_26:
      *(_DWORD *)(a2 + 4) = v21 | v13;
LABEL_27:
      *(_DWORD *)(a2 + 40) = v10 + 1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 148) <= (int)v10)
        sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)a1 + 148));
      return;
    }
    v16 = 0;
    v17 = v14 + 1;
    v18 = *(_DWORD *)v14;
    do
    {
      if (*v17 && *(_DWORD *)(*v17 + 40) > (int)v10)
      {
        LODWORD(v10) = *(_DWORD *)(*v17 + 40);
        v18 = *(_DWORD *)v14;
      }
      ++v16;
      v17 += 3;
    }
    while (v16 < v18);
    if (v15 >= 2)
    {
      v22 = 0;
      v23 = 0;
      v19 = v15 & 0xFFFFFFFE;
      v24 = v14 + 4;
      v25 = v19;
      do
      {
        v26 = *(v24 - 3);
        v27 = *v24;
        v24 += 6;
        v22 |= *(_DWORD *)(v26 + 4);
        v23 |= *(_DWORD *)(v27 + 4);
        v25 -= 2;
      }
      while (v25);
      v20 = v23 | v22;
      if (v19 == v15)
        goto LABEL_25;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v28 = v15 - v19;
    v29 = &v14[3 * v19 + 1];
    do
    {
      v30 = *v29;
      v29 += 3;
      v20 |= *(_DWORD *)(v30 + 4);
      --v28;
    }
    while (v28);
LABEL_25:
    v21 = v20 & 0x400208;
    goto LABEL_26;
  }
}

int *sub_1ACC04A14(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int *v12;
  int v13;
  int *v14;

  v8 = a5;
  v9 = a4;
  if (a2)
  {
    v12 = a2;
    v13 = *a2;
    if (a2[1] <= *a2)
    {
      v12 = sub_1ACC2D4F4(*a1, a2, 0);
      if (v9)
        goto LABEL_9;
    }
    else
    {
      *a2 = v13 + 1;
      v14 = &a2[6 * v13];
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      if ((_DWORD)a4)
        goto LABEL_9;
    }
LABEL_8:
    if (v8 == -1)
      goto LABEL_11;
    goto LABEL_9;
  }
  v12 = (int *)sub_1ACC2D490((_QWORD *)*a1, 0);
  if (!v9)
    goto LABEL_8;
LABEL_9:
  if (!*(_BYTE *)(*a1 + 197))
    sub_1ACBCB308((uint64_t)a1, "syntax error after column name \"%.*s\"", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a3 + 8));
LABEL_11:
  sub_1ACC032F0((uint64_t)a1, v12, a3, 1);
  return v12;
}

_QWORD *sub_1ACC04B00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t i;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, uint64_t, const char *, _QWORD, uint64_t, _QWORD);
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  const char *v71;
  char v72;

  v9 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 103))
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  if (!*(_BYTE *)(v9 + 197))
  {
    v23 = *(_DWORD *)(v9 + 44);
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 24);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v24 + 113);
    if ((*(_BYTE *)(v24 + 114) & 1) != 0 || (v25 = sub_1ACB654E0(v9, 0, (char **)(a1 + 8), 0, a5, a6, a7, a8)) == 0)
    {
      v26 = *(unsigned int *)(v9 + 40);
      if ((int)v26 < 2)
      {
LABEL_10:
        if ((v23 & 1) == 0)
          *(_DWORD *)(v9 + 44) &= ~1u;
        if (*(_BYTE *)(v9 + 111))
          *(_DWORD *)(v9 + 44) |= 0x10u;
        goto LABEL_4;
      }
      while (1)
      {
        v27 = v26 - 1;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * (v26 - 1) + 24) + 114) & 1) == 0)
        {
          v25 = sub_1ACB654E0(v9, (v26 - 1), (char **)(a1 + 8), 0, a5, a6, a7, a8);
          if (v25)
            break;
        }
        v26 = v27;
        if ((unint64_t)(v27 + 1) <= 2)
          goto LABEL_10;
      }
    }
    *(_DWORD *)(a1 + 24) = v25;
    ++*(_DWORD *)(a1 + 48);
    return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
  }
LABEL_4:
  v13 = *(unsigned __int8 **)(a2 + 16);
  v14 = sub_1ACBFCA9C(v9, *(unsigned __int8 **)(a2 + 24), v13);
  if (v14)
  {
    v22 = (uint64_t *)v14;
    if ((*(_WORD *)(v14 + 99) & 3) != 0)
    {
      sub_1ACBCB308(a1, "index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped", v16, v17, v18, v19, v20, v21, 0);
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
    }
    v38 = *(_QWORD *)(v14 + 48);
    v39 = *(_QWORD *)(v9 + 32);
    if (v38)
    {
      v40 = (uint64_t *)(v39 + 24);
      v41 = -1;
      do
      {
        v42 = *v40;
        v40 += 4;
        ++v41;
      }
      while (v42 != v38);
    }
    else
    {
      v41 = -32768;
    }
    v43 = v41;
    if (v41 == 1)
      v44 = "sqlite_temp_master";
    else
      v44 = "sqlite_master";
    v45 = *(_QWORD *)a1;
    v46 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 528);
    if (!v46)
      goto LABEL_55;
    v47 = *(_QWORD **)(v14 + 24);
    v48 = *(_QWORD *)(v39 + 32 * v41);
    if (*(_BYTE *)(v45 + 197) || *(_BYTE *)(a1 + 302))
    {
      if (v41 == 1)
        v15 = 12;
      else
        v15 = 10;
    }
    else
    {
      v68 = v46(*(_QWORD *)(v45 + 536), 9, v44, 0, v48, *(_QWORD *)(a1 + 368));
      if (v68 == 1)
      {
LABEL_70:
        v70 = 23;
        v71 = "not authorized";
LABEL_73:
        sub_1ACBCB308(a1, v71, (uint64_t)v44, v17, v18, v19, v20, v21, v72);
        *(_DWORD *)(a1 + 24) = v70;
        return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
      }
      if ((v68 & 0xFFFFFFFD) != 0)
      {
LABEL_72:
        v70 = 1;
        v71 = "authorizer malfunction";
        goto LABEL_73;
      }
      if (v68)
        return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
      v45 = *(_QWORD *)a1;
      v46 = *(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 528);
      if ((_DWORD)v43 == 1)
        v15 = 12;
      else
        v15 = 10;
      if (!v46)
        goto LABEL_55;
    }
    if (*(_BYTE *)(v45 + 197) || *(_BYTE *)(a1 + 302))
    {
LABEL_55:
      v49 = *(uint64_t **)(a1 + 16);
      if (v49)
        goto LABEL_60;
      if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
        *(_BYTE *)(a1 + 35) = 1;
      v49 = (uint64_t *)sub_1ACBCB4C8((uint64_t *)a1, v15, (uint64_t)v44, v17, v18, v19, v20, v21);
      if (v49)
      {
LABEL_60:
        sub_1ACC0DDF0(a1, 1, v43);
        sub_1ACBB60F8((uint64_t *)a1, "DELETE FROM %Q.sqlite_master WHERE name=%Q AND type='index'", v50, v51, v52, v53, v54, v55, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * v43));
        sub_1ACC13FC0((uint64_t *)a1, v43);
        sub_1ACC0F410((uint64_t *)a1, v43, v56, v57, v58, v59, v60, v61);
        sub_1ACC14C08(a1, *((unsigned int *)v22 + 22), v43, v62, v63, v64, v65, v66);
        sub_1ACBA86CC(v49, 152, v43, 0, 0, *v22, 0, v67);
      }
      return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
    }
    v69 = v46(*(_QWORD *)(v45 + 536), v15, (const char *)*v22, *v47, v48, *(_QWORD *)(a1 + 368));
    if (v69 == 1)
      goto LABEL_70;
    if ((v69 & 0xFFFFFFFD) == 0)
    {
      if (v69)
        return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
      goto LABEL_55;
    }
    goto LABEL_72;
  }
  if (a3)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_DWORD *)(*(_QWORD *)a1 + 40);
    if (v29 >= 1)
    {
      for (i = 0; i < v29; ++i)
      {
        v33 = *(_QWORD *)(v28 + 32) + 32 * i;
        if (*(_QWORD *)(v33 + 8))
        {
          if (v13)
          {
            v34 = *(unsigned __int8 **)v33;
            for (j = v13; ; ++j)
            {
              v36 = *j;
              v37 = *v34;
              if ((_DWORD)v36 == (_DWORD)v37)
              {
                if (!*j)
                  break;
              }
              else if (byte_1ACCB6333[v36] != byte_1ACCB6333[v37])
              {
                goto LABEL_25;
              }
              ++v34;
            }
          }
          if (*(_QWORD *)(a1 + 168))
            v31 = *(_QWORD *)(a1 + 168);
          else
            v31 = a1;
          v32 = *(_DWORD *)(v31 + 124);
          if ((v32 & (1 << i)) == 0)
          {
            *(_DWORD *)(v31 + 124) = v32 | (1 << i);
            if (i == 1)
            {
              sub_1ACBE9418(v31);
              v29 = *(_DWORD *)(v28 + 40);
            }
          }
        }
LABEL_25:
        ;
      }
    }
    sub_1ACC0DD18((uint64_t *)a1, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    sub_1ACBCB308(a1, "no such index: %S", v16, v17, v18, v19, v20, v21, a2 + 8);
  }
  *(_BYTE *)(a1 + 29) = 1;
  return sub_1ACB7E8B0((_QWORD *)v9, (_QWORD *)a2);
}

uint64_t sub_1ACC04F44(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[7];

  v9 = a2;
  v10 = (_QWORD **)result;
  v11 = *(_QWORD *)(result + 16);
  if (v11)
    goto LABEL_31;
  if (!*(_QWORD *)(result + 168) && (*(_BYTE *)(*(_QWORD *)result + 96) & 8) == 0)
    *(_BYTE *)(result + 35) = 1;
  result = sub_1ACBCB4C8((uint64_t *)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = result;
  if (result)
  {
LABEL_31:
    if (!*((_DWORD *)v10 + 12))
    {
      if (!v9
        || (result = sub_1ACC0DF84((uint64_t)*v10, v9), v9 = result & ~((int)result >> 31), (_DWORD)v9 != 1))
      {
        if (!a3)
          goto LABEL_11;
        v24 = 0;
        v23 = 0u;
        v22 = 0u;
        memset(v25, 0, sizeof(v25));
        v21[0] = v10;
        v21[1] = v25;
        DWORD2(v23) = 0x10000;
        result = sub_1ACC0F790((uint64_t)v21, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)result)
        {
          v14 = (*((_DWORD *)v10 + 14) + 1);
          *((_DWORD *)v10 + 14) = v14;
          if (v10[2])
          {
            result = sub_1ACB7B84C(v10, a3, v14, v12, v13, a6, a7, a8);
            if ((_DWORD)result != (_DWORD)v14)
            {
              v17 = result;
              v18 = 80;
              if ((a3[6] & 0x40) == 0)
              {
                if (*a3 == 176)
                  v18 = 80;
                else
                  v18 = 81;
              }
              result = (uint64_t)v10[2];
              v19 = *(_DWORD *)(result + 144);
              if (*(_DWORD *)(result + 148) <= v19)
              {
                result = sub_1ACBFF5AC(result, v18, v17, v14, 0, a6, a7, a8);
              }
              else
              {
                *(_DWORD *)(result + 144) = v19 + 1;
                v20 = *(_QWORD *)(result + 136) + 40 * v19;
                *(_BYTE *)v20 = v18;
                *(_WORD *)(v20 + 2) = 0;
                *(_DWORD *)(v20 + 4) = v17;
                *(_DWORD *)(v20 + 8) = v14;
                *(_BYTE *)(v20 + 1) = 0;
                *(_QWORD *)(v20 + 12) = 0;
                *(_QWORD *)(v20 + 28) = 0;
                *(_QWORD *)(v20 + 20) = 0;
                *(_DWORD *)(v20 + 36) = 0;
              }
            }
          }
        }
        else
        {
LABEL_11:
          v14 = 0;
        }
        v15 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v15)
        {
          result = sub_1ACBFF5AC(v11, 5, v9, v14, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v11 + 144) = v15 + 1;
          v16 = *(_QWORD *)(v11 + 136) + 40 * v15;
          *(_DWORD *)v16 = 5;
          *(_DWORD *)(v16 + 4) = v9;
          *(_DWORD *)(v16 + 8) = v14;
          *(_QWORD *)(v16 + 12) = 0;
          *(_QWORD *)(v16 + 28) = 0;
          *(_QWORD *)(v16 + 20) = 0;
          *(_DWORD *)(v16 + 36) = 0;
        }
        *(_DWORD *)(v11 + 272) |= 1 << v9;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 32) + 32 * v9 + 8) + 17))
          *(_DWORD *)(v11 + 276) |= 1 << v9;
      }
    }
  }
  if (a3)
    return (uint64_t)sub_1ACBF8348(*v10, a3);
  return result;
}

_QWORD *sub_1ACC05170(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5, unsigned int **a6, unsigned __int8 *a7, int a8)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int *v26;
  uint64_t v27;
  _WORD *v28;
  int v30;
  BOOL v31;
  const char *v32;

  v13 = *(_QWORD **)a1;
  v20 = sub_1ACB8DB54(a1, 127, a2, a7, a8);
  if (!v20)
  {
    if (a3)
    {
      v22 = *(_DWORD *)a3;
      if (*(int *)a3 >= 1)
      {
        v23 = 0;
        v24 = 1;
        do
        {
          v25 = (_QWORD *)a3[v24];
          if (v25)
          {
            sub_1ACBE0F9C(v13, v25);
            v22 = *(_DWORD *)a3;
          }
          ++v23;
          v24 += 2;
        }
        while (v23 < v22);
      }
      sub_1ACBF0674(v13, a3);
    }
    if (a6)
      sub_1ACC01018(v13, a6);
LABEL_21:
    if (!a4)
      return v20;
LABEL_22:
    sub_1ACB7E704(v13, a4, 1);
    return v20;
  }
  if (*(unsigned __int8 *)(a1 + 302) <= 1u)
  {
    v21 = sub_1ACB8DFB8((uint64_t)v13, a4, 1);
  }
  else
  {
    v21 = a4;
    a4 = 0;
  }
  v20[2] = v21;
  v20[7] = a3;
  v20[8] = a6;
  *((_BYTE *)v20 + 1) = a5;
  if (!a6)
    goto LABEL_21;
  v26 = *a6;
  if (!*a6)
    goto LABEL_21;
  v27 = *v26;
  if ((int)v27 < 1)
    goto LABEL_21;
  v28 = (_WORD *)((char *)v26 + 25);
  while ((*v28 & 0x20) == 0)
  {
    v28 += 12;
    if (!--v27)
      goto LABEL_21;
  }
  v30 = *((unsigned __int8 *)v28 - 1);
  v31 = v30 == 3 || v30 == 0;
  v32 = "LAST";
  if (v31)
    v32 = "FIRST";
  sub_1ACBCB308(a1, "unsupported use of NULLS %s", v14, v15, v16, v17, v18, v19, (char)v32);
  if (a4)
    goto LABEL_22;
  return v20;
}

_QWORD *sub_1ACC052F8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;

  v7 = *(_QWORD **)a1;
  v8 = sub_1ACB8DB54(a1, 128, a2, a4, a5);
  if (v8)
  {
    if (*(unsigned __int8 *)(a1 + 302) <= 1u)
    {
      if (a3)
        v9 = sub_1ACB8B290((uint64_t)v7, a3, 1, 0);
      else
        v9 = 0;
    }
    else
    {
      v9 = (unsigned int *)a3;
      a3 = 0;
    }
    v8[5] = v9;
    *((_BYTE *)v8 + 1) = 11;
  }
  if (a3)
    sub_1ACBF8348(v7, a3);
  return v8;
}

uint64_t sub_1ACC05390(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  int v9;
  const void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  size_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;

  if (a1)
  {
    v8 = sub_1ACBE1124((uint64_t)a1, 0x60uLL);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = sub_1ACB5D828(96);
    if (v8)
    {
LABEL_3:
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_WORD *)v8 = 2954;
      v9 = a4 - (_DWORD)a3;
      *(_QWORD *)(v8 + 16) = a2;
      do
      {
        v10 = a3;
        v11 = v9;
        v12 = *a3++;
        --v9;
      }
      while ((byte_1ACCB6548[v12] & 1) != 0);
      v13 = v11;
      v14 = ((uint64_t)v11 << 32) + 0x100000000;
      v15 = v13 - 2;
      do
      {
        v16 = byte_1ACCB6548[a3[v15]];
        v14 -= 0x100000000;
        --v15;
      }
      while ((v16 & 1) != 0);
      v17 = v14 >> 32;
      v18 = (_BYTE *)sub_1ACBE1124((uint64_t)a1, (v14 >> 32) + 1);
      v19 = v18;
      if (v18)
      {
        memcpy(v18, v10, v17);
        v19[v17] = 0;
        v20 = *v19;
        if (*v19)
        {
          v21 = v19 + 1;
          do
          {
            if ((byte_1ACCB6548[v20] & 1) != 0)
              *(v21 - 1) = 32;
            v22 = *v21++;
            v20 = v22;
          }
          while (v22);
        }
      }
      *(_QWORD *)(v8 + 72) = v19;
      return v8;
    }
  }
  if (a2)
    sub_1ACB7E704(a1, a2, 1);
  return v8;
}

_QWORD *sub_1ACC054D0(uint64_t *a1, _QWORD *a2, uint64_t n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  _BYTE *v12;
  int v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned __int8 *k;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  const char *v27;
  unsigned __int8 *m;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  uint64_t i;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _BYTE *j;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v9 = *a1;
  if (*(_BYTE *)(*a1 + 103))
    return sub_1ACB7E8B0((_QWORD *)v9, a2);
  v10 = n;
  if (!*(_BYTE *)(v9 + 197))
  {
    v43 = *(_DWORD *)(v9 + 44);
    v44 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 24);
    *(_BYTE *)(v9 + 100) = *(_BYTE *)(v44 + 113);
    if ((*(_BYTE *)(v44 + 114) & 1) != 0 || (v45 = sub_1ACB654E0(v9, 0, (char **)a1 + 1, 0, a5, a6, a7, a8)) == 0)
    {
      v46 = *(unsigned int *)(v9 + 40);
      if ((int)v46 < 2)
      {
LABEL_59:
        if ((v43 & 1) == 0)
          *(_DWORD *)(v9 + 44) &= ~1u;
        if (*(_BYTE *)(v9 + 111))
          *(_DWORD *)(v9 + 44) |= 0x10u;
        goto LABEL_3;
      }
      while (1)
      {
        v47 = v46 - 1;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 32 * (v46 - 1) + 24) + 114) & 1) == 0)
        {
          v45 = sub_1ACB654E0(v9, (v46 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
          if (v45)
            break;
        }
        v46 = v47;
        if ((unint64_t)(v47 + 1) <= 2)
          goto LABEL_59;
      }
    }
    *((_DWORD *)a1 + 6) = v45;
    ++*((_DWORD *)a1 + 12);
    return sub_1ACB7E8B0((_QWORD *)v9, a2);
  }
LABEL_3:
  v12 = (_BYTE *)a2[2];
  v13 = *(_DWORD *)(v9 + 40);
  if (v13 < 1)
  {
LABEL_38:
    if (v10)
    {
      v33 = *a1;
      v34 = *(_DWORD *)(*a1 + 40);
      if (v34 >= 1)
      {
        for (i = 0; i < v34; ++i)
        {
          v38 = *(_QWORD *)(v33 + 32) + 32 * i;
          if (*(_QWORD *)(v38 + 8))
          {
            if (v12)
            {
              v39 = *(unsigned __int8 **)v38;
              for (j = v12; ; ++j)
              {
                v41 = *j;
                v42 = *v39;
                if ((_DWORD)v41 == (_DWORD)v42)
                {
                  if (!*j)
                    break;
                }
                else if (byte_1ACCB6333[v41] != byte_1ACCB6333[v42])
                {
                  goto LABEL_45;
                }
                ++v39;
              }
            }
            if (a1[21])
              v36 = a1[21];
            else
              v36 = (uint64_t)a1;
            v37 = *(_DWORD *)(v36 + 124);
            if ((v37 & (1 << i)) == 0)
            {
              *(_DWORD *)(v36 + 124) = v37 | (1 << i);
              if (i == 1)
              {
                sub_1ACBE9418(v36);
                v34 = *(_DWORD *)(v33 + 40);
              }
            }
          }
LABEL_45:
          ;
        }
      }
    }
    else
    {
      sub_1ACBCB308((uint64_t)a1, "no such trigger: %S", n, a4, a5, a6, a7, a8, (_BYTE)a2 + 8);
    }
    *((_BYTE *)a1 + 29) = 1;
  }
  else
  {
    v14 = 0;
    v15 = (_BYTE *)a2[3];
    v16 = *(_QWORD *)(v9 + 32);
    while (1)
    {
      v19 = v14 ^ (v14 < 2);
      if (!v12)
        break;
      v20 = *(_BYTE **)(v16 + 32 * v19);
      for (k = (unsigned __int8 *)a2[2]; ; ++k)
      {
        n = *v20;
        a4 = *k;
        if ((_DWORD)n != (_DWORD)a4)
          break;
        if (!*v20)
          goto LABEL_14;
LABEL_11:
        ++v20;
      }
      n = byte_1ACCB6333[n];
      a4 = byte_1ACCB6333[a4];
      if ((_DWORD)n == (_DWORD)a4)
        goto LABEL_11;
      if (!(_DWORD)v19)
      {
        v27 = "main";
        for (m = (unsigned __int8 *)a2[2]; ; ++m)
        {
          n = *(unsigned __int8 *)v27;
          a4 = *m;
          if ((_DWORD)n == (_DWORD)a4)
          {
            if (!*v27)
              goto LABEL_14;
          }
          else
          {
            n = byte_1ACCB6333[n];
            a4 = byte_1ACCB6333[a4];
            if ((_DWORD)n != (_DWORD)a4)
              break;
          }
          ++v27;
        }
      }
LABEL_7:
      if (++v14 == v13)
        goto LABEL_38;
    }
LABEL_14:
    v22 = *(_QWORD *)(v16 + 32 * v19 + 24);
    v23 = *(_QWORD *)(v22 + 72);
    if (v23)
    {
      v24 = *v15;
      if (*v15)
      {
        v25 = 0;
        a4 = (uint64_t)(v15 + 1);
        do
        {
          v25 = -1640531535 * (v25 + byte_1ACCB6333[v24]);
          v26 = *(unsigned __int8 *)a4++;
          v24 = v26;
        }
        while (v26);
      }
      else
      {
        v25 = 0;
      }
      v30 = *(_DWORD *)(v22 + 56);
      n = v25 / v30;
      v31 = (_DWORD *)(v23 + 16 * (v25 % v30));
      v17 = (uint64_t *)(v31 + 2);
      v29 = *v31;
      if (!v29)
        goto LABEL_5;
      while (1)
      {
LABEL_30:
        v17 = (uint64_t *)*v17;
        v32 = (_BYTE *)v17[3];
        for (n = a2[3]; ; ++n)
        {
          a4 = *v32;
          a5 = *(unsigned __int8 *)n;
          if ((_DWORD)a4 != (_DWORD)a5)
            break;
          if (!*v32)
            goto LABEL_6;
LABEL_32:
          ++v32;
        }
        a4 = byte_1ACCB6333[a4];
        a5 = byte_1ACCB6333[a5];
        if ((_DWORD)a4 == (_DWORD)a5)
          goto LABEL_32;
        if (!--v29)
          goto LABEL_5;
      }
    }
    v17 = (uint64_t *)(v22 + 64);
    v29 = *(_DWORD *)(v22 + 60);
    if (v29)
      goto LABEL_30;
LABEL_5:
    v17 = &qword_1EECAD260;
LABEL_6:
    v18 = (uint64_t *)v17[2];
    if (!v18)
      goto LABEL_7;
    sub_1ACC148D0(a1, v18, n, a4, a5, a6, a7, a8);
  }
  return sub_1ACB7E8B0((_QWORD *)v9, a2);
}

void sub_1ACC0587C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int m;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  size_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  int j;
  uint64_t v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t k;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t *v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  _QWORD *v104;
  _DWORD *v105;
  _BYTE *v106;
  char *n;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;

  v9 = a3;
  v12 = *a1;
  if (*(_BYTE *)(*a1 + 197))
    goto LABEL_2;
  v15 = *(_DWORD *)(v12 + 44);
  v16 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 24);
  *(_BYTE *)(v12 + 100) = *(_BYTE *)(v16 + 113);
  if ((*(_BYTE *)(v16 + 114) & 1) == 0)
  {
    v17 = sub_1ACB654E0(v12, 0, (char **)a1 + 1, 0, a5, a6, a7, a8);
    if (v17)
    {
LABEL_19:
      *((_DWORD *)a1 + 6) = v17;
      ++*((_DWORD *)a1 + 12);
      return;
    }
  }
  v18 = *(unsigned int *)(v12 + 40);
  if ((int)v18 >= 2)
  {
    do
    {
      v19 = v18 - 1;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32 * (v18 - 1) + 24) + 114) & 1) == 0)
      {
        v17 = sub_1ACB654E0(v12, (v18 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
        if (v17)
          goto LABEL_19;
      }
      v18 = v19;
    }
    while ((unint64_t)(v19 + 1) > 2);
  }
  if ((v15 & 1) == 0)
    *(_DWORD *)(v12 + 44) &= ~1u;
  if (*(_BYTE *)(v12 + 111))
    *(_DWORD *)(v12 + 44) |= 0x10u;
LABEL_2:
  if (!a2)
  {
    v39 = *a1;
    v40 = *(_DWORD *)(*a1 + 40);
    if (v40 >= 1)
    {
      v41 = 0;
      v42 = *(_QWORD *)(v39 + 32);
      do
      {
        v43 = *(_QWORD **)(*(_QWORD *)(v42 + 24) + 16);
        if (v43)
        {
          do
          {
            v44 = v43[2];
            if (*(_BYTE *)(v44 + 63) != 1)
            {
              for (i = *(_QWORD *)(v44 + 16); i; i = *(_QWORD *)(i + 40))
              {
                v46 = *(_QWORD *)(v44 + 96);
                if (v46)
                {
                  v47 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 24);
                  v48 = -1;
                  do
                  {
                    v49 = *v47;
                    v47 += 4;
                    ++v48;
                  }
                  while (v49 != v46);
                }
                else
                {
                  v48 = -32768;
                }
                if (a1[21])
                  v50 = a1[21];
                else
                  v50 = (uint64_t)a1;
                v51 = *(_DWORD *)(v50 + 124);
                v52 = 1 << v48;
                if ((v51 & (1 << v48)) == 0)
                {
                  *(_DWORD *)(v50 + 124) = v51 | v52;
                  if (v48 == 1)
                    sub_1ACBE9418(v50);
                }
                *(_DWORD *)(v50 + 120) |= v52;
                sub_1ACC12F74((uint64_t)a1, i, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
              }
            }
            v43 = (_QWORD *)*v43;
          }
          while (v43);
          v40 = *(_DWORD *)(v39 + 40);
        }
        ++v41;
        v42 += 32;
      }
      while (v41 < v40);
    }
    return;
  }
  if (v9 && *(_QWORD *)v9)
  {
LABEL_5:
    v13 = *a1;
    if (*(_DWORD *)(v9 + 8))
    {
      if (*(_BYTE *)(v13 + 197))
      {
        v14 = "corrupt database";
        goto LABEL_8;
      }
      v53 = sub_1ACC0DF84(v13, a2);
      if ((v53 & 0x80000000) != 0)
      {
        sub_1ACBCB308((uint64_t)a1, "unknown database %T", v54, v55, v56, v57, v58, v59, a2);
        return;
      }
    }
    else
    {
      v53 = *(unsigned __int8 *)(v13 + 196);
      v9 = a2;
    }
    v60 = *(const void **)v9;
    if (!*(_QWORD *)v9)
      return;
    v61 = *(unsigned int *)(v9 + 8);
    v62 = (char *)sub_1ACBE1124(v12, v61 + 1);
    if (!v62)
      return;
    v23 = v62;
    memcpy(v62, v60, v61);
    v23[v61] = 0;
    v63 = *v23;
    if ((char)byte_1ACCB6548[*v23] < 0)
    {
      v64 = 0;
      if (v63 == 91)
        v63 = 93;
      for (j = 1; ; ++j)
      {
        v66 = j;
        v67 = v23[j];
        if (v67 == v63)
        {
          ++j;
          LOBYTE(v67) = v63;
          if (v23[v66 + 1] != v63)
            break;
        }
        v23[v64++] = v67;
      }
      v23[v64] = 0;
    }
    v68 = *(unsigned __int8 **)(*(_QWORD *)(v12 + 32) + 32 * v53);
    v69 = sub_1ACBD1B0C(v12, v23, v68);
    if (v69)
    {
      v75 = v69;
      if (*(_BYTE *)(v69 + 63) != 1)
      {
        for (k = *(_QWORD *)(v69 + 16); k; k = *(_QWORD *)(k + 40))
        {
          v77 = *(_QWORD *)(v75 + 96);
          if (v77)
          {
            v78 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 24);
            v79 = -1;
            do
            {
              v80 = *v78;
              v78 += 4;
              ++v79;
            }
            while (v80 != v77);
          }
          else
          {
            v79 = -32768;
          }
          if (a1[21])
            v81 = a1[21];
          else
            v81 = (uint64_t)a1;
          v82 = *(_DWORD *)(v81 + 124);
          v83 = 1 << v79;
          if ((v82 & (1 << v79)) == 0)
          {
            *(_DWORD *)(v81 + 124) = v82 | v83;
            if (v79 == 1)
              sub_1ACBE9418(v81);
          }
          *(_DWORD *)(v81 + 120) |= v83;
          sub_1ACC12F74((uint64_t)a1, k, 0xFFFFFFFFLL, v70, v71, v72, v73, v74);
        }
      }
      v104 = (_QWORD *)v12;
      goto LABEL_123;
    }
    v110 = sub_1ACBFCA9C(v12, (unsigned __int8 *)v23, v68);
    sub_1ACBE0F9C((_QWORD *)v12, v23);
    if (v110)
    {
      sub_1ACC0DDF0((uint64_t)a1, 0, v53);
      sub_1ACC12F74((uint64_t)a1, v110, 0xFFFFFFFFLL, v111, v112, v113, v114, v115);
      return;
    }
    v14 = "unable to identify the object to be reindexed";
LABEL_8:
    sub_1ACBCB308((uint64_t)a1, v14, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  v20 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    return;
  v21 = *(unsigned int *)(a2 + 8);
  v22 = (char *)sub_1ACBE1124(*a1, v21 + 1);
  if (!v22)
    return;
  v23 = v22;
  memcpy(v22, v20, v21);
  v23[v21] = 0;
  v29 = *v23;
  if ((char)byte_1ACCB6548[*v23] < 0)
  {
    v30 = 0;
    if (v29 == 91)
      v29 = 93;
    for (m = 1; ; ++m)
    {
      v32 = m;
      v33 = v23[m];
      if (v33 == v29)
      {
        ++m;
        LOBYTE(v33) = v29;
        if (v23[v32 + 1] != v29)
          break;
      }
      v23[v30++] = v33;
    }
    v23[v30] = 0;
  }
  v34 = *(_QWORD *)(v12 + 656);
  if (!v34)
  {
    v84 = (uint64_t *)(v12 + 648);
    v85 = *(_DWORD *)(v12 + 644);
    if (v85)
      goto LABEL_126;
LABEL_86:
    v84 = &qword_1EECAD260;
    goto LABEL_87;
  }
  v35 = *v23;
  if (*v23)
  {
    v36 = 0;
    v37 = (unsigned __int8 *)(v23 + 1);
    do
    {
      v36 = -1640531535 * (v36 + byte_1ACCB6333[v35]);
      v38 = *v37++;
      v35 = v38;
    }
    while (v38);
  }
  else
  {
    v36 = 0;
  }
  v105 = (_DWORD *)(v34 + 16 * (v36 % *(_DWORD *)(v12 + 640)));
  v84 = (uint64_t *)(v105 + 2);
  v85 = *v105;
  if (!v85)
    goto LABEL_86;
  do
  {
LABEL_126:
    v84 = (uint64_t *)*v84;
    v106 = (_BYTE *)v84[3];
    for (n = v23; ; ++n)
    {
      v108 = *v106;
      v109 = *n;
      if ((_DWORD)v108 != (_DWORD)v109)
        break;
      if (!*v106)
        goto LABEL_87;
LABEL_128:
      ++v106;
    }
    if (byte_1ACCB6333[v108] == byte_1ACCB6333[v109])
      goto LABEL_128;
    --v85;
  }
  while (v85);
  v84 = &qword_1EECAD260;
LABEL_87:
  if (!v84[2])
  {
    sub_1ACBE0F9C((_QWORD *)v12, v23);
    goto LABEL_5;
  }
  v116 = (_QWORD *)v12;
  v117 = *a1;
  v86 = *(_DWORD *)(*a1 + 40);
  if (v86 < 1)
    goto LABEL_120;
  v87 = 0;
  v88 = *(_QWORD *)(v117 + 32);
  while (2)
  {
    v89 = *(_QWORD **)(*(_QWORD *)(v88 + 24) + 16);
    if (!v89)
      goto LABEL_91;
    v118 = v87;
    while (2)
    {
      v90 = v89[2];
      if (*(_BYTE *)(v90 + 63) == 1)
        goto LABEL_94;
      v91 = *(_QWORD *)(v90 + 16);
      if (!v91)
        goto LABEL_94;
      while (2)
      {
        if (!*(_WORD *)(v91 + 96))
          goto LABEL_99;
        v92 = 0;
        while (*(__int16 *)(*(_QWORD *)(v91 + 8) + 2 * v92) < 0)
        {
LABEL_102:
          if (++v92 == *(unsigned __int16 *)(v91 + 96))
            goto LABEL_99;
        }
        v93 = *(_BYTE **)(*(_QWORD *)(v91 + 64) + 8 * v92);
        v94 = v23;
        while (2)
        {
          v95 = *v93;
          v96 = *v94;
          if ((_DWORD)v95 != (_DWORD)v96)
          {
            if (byte_1ACCB6333[v95] != byte_1ACCB6333[v96])
              goto LABEL_102;
            goto LABEL_106;
          }
          if (*v93)
          {
LABEL_106:
            ++v93;
            ++v94;
            continue;
          }
          break;
        }
        v97 = *(_QWORD *)(v90 + 96);
        if (v97)
        {
          v98 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 24);
          v99 = -1;
          do
          {
            v100 = *v98;
            v98 += 4;
            ++v99;
          }
          while (v100 != v97);
        }
        else
        {
          v99 = -32768;
        }
        if (a1[21])
          v101 = a1[21];
        else
          v101 = (uint64_t)a1;
        v102 = *(_DWORD *)(v101 + 124);
        v103 = 1 << v99;
        if ((v102 & (1 << v99)) == 0)
        {
          *(_DWORD *)(v101 + 124) = v102 | v103;
          if (v99 == 1)
            sub_1ACBE9418(v101);
        }
        *(_DWORD *)(v101 + 120) |= v103;
        sub_1ACC12F74((uint64_t)a1, v91, 0xFFFFFFFFLL, v24, v25, v26, v27, v28);
LABEL_99:
        v91 = *(_QWORD *)(v91 + 40);
        if (v91)
          continue;
        break;
      }
LABEL_94:
      v89 = (_QWORD *)*v89;
      if (v89)
        continue;
      break;
    }
    v86 = *(_DWORD *)(v117 + 40);
    v87 = v118;
LABEL_91:
    ++v87;
    v88 += 32;
    if (v87 < v86)
      continue;
    break;
  }
LABEL_120:
  v104 = v116;
LABEL_123:
  sub_1ACBE0F9C(v104, v23);
}

void sub_1ACC05FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  const void *v21;
  size_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  int i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;

  v9 = a2;
  v11 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 197))
  {
    v12 = *(_DWORD *)(v11 + 44);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24);
    *(_BYTE *)(v11 + 100) = *(_BYTE *)(v13 + 113);
    if ((*(_BYTE *)(v13 + 114) & 1) != 0
      || (v14 = sub_1ACB654E0(v11, 0, (char **)(a1 + 8), 0, a5, a6, a7, a8)) == 0)
    {
      v15 = *(unsigned int *)(v11 + 40);
      if ((int)v15 < 2)
      {
LABEL_9:
        if ((v12 & 1) == 0)
          *(_DWORD *)(v11 + 44) &= ~1u;
        if (*(_BYTE *)(v11 + 111))
          *(_DWORD *)(v11 + 44) |= 0x10u;
        goto LABEL_2;
      }
      while (1)
      {
        v16 = v15 - 1;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 32 * (v15 - 1) + 24) + 114) & 1) == 0)
        {
          v14 = sub_1ACB654E0(v11, (v15 - 1), (char **)(a1 + 8), 0, a5, a6, a7, a8);
          if (v14)
            break;
        }
        v15 = v16;
        if ((unint64_t)(v16 + 1) <= 2)
          goto LABEL_9;
      }
    }
    *(_DWORD *)(a1 + 24) = v14;
    ++*(_DWORD *)(a1 + 48);
    return;
  }
LABEL_2:
  if (!v9)
  {
    if (*(int *)(v11 + 40) >= 1)
    {
      sub_1ACC373F8((uint64_t *)a1, 0, a3, a4, a5, a6, a7, a8);
      if (*(int *)(v11 + 40) >= 3)
      {
        v17 = 2;
        do
        {
          sub_1ACC373F8((uint64_t *)a1, v17, a3, a4, a5, a6, a7, a8);
          v17 = (v17 + 1);
        }
        while ((int)v17 < *(_DWORD *)(v11 + 40));
      }
    }
    goto LABEL_65;
  }
  if (!*(_DWORD *)(a3 + 8))
  {
    v18 = sub_1ACC0DF84(v11, v9);
    if ((v18 & 0x80000000) == 0)
    {
      sub_1ACC373F8((uint64_t *)a1, v18, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if (!*(_DWORD *)(a3 + 8))
    {
      v20 = 0;
      goto LABEL_32;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)a1 + 197))
  {
    v19 = sub_1ACC0DF84(*(_QWORD *)a1, v9);
    if ((v19 & 0x80000000) != 0)
    {
      sub_1ACBCB308(a1, "unknown database %T", a3, a4, a5, a6, a7, a8, v9);
      goto LABEL_65;
    }
    if (*(_DWORD *)(a3 + 8))
      v20 = *(unsigned __int8 **)(*(_QWORD *)(v11 + 32) + 32 * v19);
    else
      v20 = 0;
    v9 = a3;
LABEL_32:
    v21 = *(const void **)v9;
    if (*(_QWORD *)v9)
    {
      v22 = *(unsigned int *)(v9 + 8);
      v23 = (unsigned __int8 *)sub_1ACBE1124(v11, v22 + 1);
      if (v23)
      {
        v24 = v23;
        memcpy(v23, v21, v22);
        v24[v22] = 0;
        v25 = *v24;
        if ((char)byte_1ACCB6548[*v24] < 0)
        {
          v26 = 0;
          if (v25 == 91)
            v25 = 93;
          for (i = 1; ; ++i)
          {
            v28 = i;
            v29 = v24[i];
            if (v29 == v25)
            {
              ++i;
              LOBYTE(v29) = v25;
              if (v24[v28 + 1] != v25)
                break;
            }
            v24[v26++] = v29;
          }
          v24[v26] = 0;
        }
        v30 = sub_1ACBFCA9C(v11, v24, v20);
        if (v30)
        {
          v35 = (uint64_t *)v30;
          v36 = *(_QWORD *)(v30 + 24);
          v37 = *(_QWORD *)(v36 + 96);
          if (v37)
          {
            v38 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 24);
            LODWORD(v39) = -1;
            do
            {
              v40 = *v38;
              v38 += 4;
              v39 = (v39 + 1);
            }
            while (v40 != v37);
          }
          else
          {
            v39 = 4294934528;
          }
          if (*(_QWORD *)(a1 + 168))
            v47 = *(_QWORD *)(a1 + 168);
          else
            v47 = a1;
          v48 = *(_DWORD *)(v47 + 124);
          v49 = 1 << v39;
          if ((v48 & (1 << v39)) == 0)
          {
            *(_DWORD *)(v47 + 124) = v48 | v49;
            if ((_DWORD)v39 == 1)
              sub_1ACBE9418(v47);
          }
          *(_DWORD *)(v47 + 120) |= v49;
          v50 = *(unsigned int *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v50 + 3;
          sub_1ACC376F0(a1, v39, v50, *v35, (uint64_t)"idx", v32, v33, v34);
          sub_1ACC379A8(a1, v36, (uint64_t)v35, v50, (*(_DWORD *)(a1 + 56) + 1), *(unsigned int *)(a1 + 52), v51, v52);
          v60 = *(_QWORD *)(a1 + 16);
          if (v60)
            goto LABEL_61;
          if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
            *(_BYTE *)(a1 + 35) = 1;
          v60 = sub_1ACBCB4C8((uint64_t *)a1, v53, v54, v55, v56, v57, v58, v59);
          if (v60)
          {
LABEL_61:
            v61 = *(_DWORD *)(v60 + 144);
            if (*(_DWORD *)(v60 + 148) <= v61)
            {
              sub_1ACBFF5AC(v60, 150, v39, 0, 0, v57, v58, v59);
            }
            else
            {
              *(_DWORD *)(v60 + 144) = v61 + 1;
              v62 = *(_QWORD *)(v60 + 136) + 40 * v61;
              *(_DWORD *)v62 = 150;
              *(_DWORD *)(v62 + 4) = v39;
              *(_OWORD *)(v62 + 8) = 0u;
              *(_OWORD *)(v62 + 24) = 0u;
            }
          }
        }
        else
        {
          v41 = sub_1ACB8D488(a1, 0, (char *)v24, v20, v31, v32, v33, v34);
          if (v41)
            sub_1ACC37564((uint64_t *)a1, v41, 0, v42, v43, v44, v45, v46);
        }
        sub_1ACBE0F9C((_QWORD *)v11, v24);
      }
    }
    goto LABEL_65;
  }
  sub_1ACBCB308(a1, "corrupt database", a3, a4, a5, a6, a7, a8, v66);
LABEL_65:
  if (!*(_BYTE *)(v11 + 112))
  {
    v63 = *(_QWORD *)(a1 + 16);
    if (v63)
      goto LABEL_71;
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v63 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (v63)
    {
LABEL_71:
      v64 = *(_DWORD *)(v63 + 144);
      if (*(_DWORD *)(v63 + 148) <= v64)
      {
        sub_1ACBFF5AC(v63, 166, 0, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v63 + 144) = v64 + 1;
        v65 = *(_QWORD *)(v63 + 136) + 40 * v64;
        *(_BYTE *)v65 = -90;
        *(_OWORD *)(v65 + 1) = 0u;
        *(_OWORD *)(v65 + 17) = 0u;
        *(_QWORD *)(v65 + 32) = 0;
      }
    }
  }
}

_QWORD *sub_1ACC06498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE **v18;
  uint64_t v19;
  _BYTE **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  unsigned __int8 *v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v9 = *(_QWORD **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 103))
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = v9[4];
    v15 = (uint64_t *)(v14 + 24);
    v16 = 0xFFFFFFFF00000000;
    do
    {
      v17 = *v15;
      v15 += 4;
      v16 += 0x100000000;
    }
    while (v17 != v13);
    v18 = (_BYTE **)(v14 + (v16 >> 27));
  }
  else
  {
    v18 = (_BYTE **)(a2 + 16);
  }
  v19 = sub_1ACB8D488(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19)
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v20 = (_BYTE **)v19;
  v21 = *(_QWORD *)(v19 + 96);
  if (v21)
  {
    v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 24);
    LODWORD(v23) = -1;
    do
    {
      v24 = *v22;
      v22 += 4;
      v23 = (v23 + 1);
    }
    while (v24 != v21);
    if (!a3)
      return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  }
  else
  {
    v23 = 4294934528;
    if (!a3)
      return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  }
  v25 = *(const void **)a3;
  if (!*(_QWORD *)a3)
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v26 = *(unsigned __int8 **)(v9[4] + 32 * (int)v23);
  v27 = *(unsigned int *)(a3 + 8);
  v28 = (char *)sub_1ACBE1124((uint64_t)v9, v27 + 1);
  if (!v28)
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v29 = v28;
  memcpy(v28, v25, v27);
  v29[v27] = 0;
  if ((char)byte_1ACCB6548[*v29] < 0)
  {
    v30 = 0;
    if (*v29 == 91)
      v31 = 93;
    else
      v31 = *v29;
    for (i = 1; ; ++i)
    {
      v33 = i;
      v34 = v29[i];
      if (v34 == v31)
      {
        ++i;
        LOBYTE(v34) = v31;
        if (v29[v33 + 1] != v31)
          break;
      }
      v29[v30++] = v34;
    }
    v29[v30] = 0;
  }
  if (sub_1ACBD1B0C((uint64_t)v9, v29, v26)
    || sub_1ACBFCA9C((uint64_t)v9, (unsigned __int8 *)v29, v26)
    || sub_1ACC0E114((uint64_t)v9, (uint64_t)v20, v29))
  {
    sub_1ACBCB308(a1, "there is already another table or index with this name: %s", v35, v36, v37, v38, v39, v40, (char)v29);
  }
  else
  {
    if (sub_1ACC3934C(a1, v20, v35, v36, v37, v38, v39, v40)
      || sub_1ACC0D9D8((_BYTE *)a1, v29, "table", v29, v41, v42, v43, v44))
    {
      goto LABEL_30;
    }
    v50 = *v20;
    if (*((_BYTE *)v20 + 63) == 2)
    {
      sub_1ACBCB308(a1, "view %s may not be altered", v45, (uint64_t)v50, v46, v47, v48, v49, (char)*v20);
    }
    else if (!sub_1ACC0D950(a1, 26, (uint64_t)v26, (uint64_t)v50, 0))
    {
      if (*((_BYTE *)v20 + 63) != 1 && *((__int16 *)v20 + 27) > 0)
        goto LABEL_45;
      if (sub_1ACC114E0(a1, (uint64_t)v20, v52, v53, v54, v55, v56, v57))
        goto LABEL_30;
      if (*((_BYTE *)v20 + 63) == 1)
      {
        v58 = v20 + 10;
        do
        {
          v59 = (_QWORD *)*v58;
          v60 = (_QWORD *)*v58;
          v61 = (_QWORD *)*v60;
          v58 = v60 + 5;
        }
        while (v61 != v9);
        if (!*(_QWORD *)(*(_QWORD *)v59[2] + 152))
          v59 = 0;
        v88 = (uint64_t)v59;
      }
      else
      {
LABEL_45:
        v88 = 0;
      }
      v62 = sub_1ACBA8698((uint64_t *)a1, v51, v52, v53, v54, v55, v56, v57);
      if (v62)
      {
        v63 = (uint64_t *)v62;
        v64 = *(_QWORD *)(a1 + 168);
        if (!v64)
          v64 = a1;
        *(_BYTE *)(v64 + 33) = 1;
        sub_1ACC00FC0(*v20, -1);
        sub_1ACBB60F8((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, %d) WHERE (type!='index' OR tbl_name=%Q COLLATE nocase)AND   name NOT LIKE 'sqliteX_%%' ESCAPE 'X'", v65, v66, v67, v68, v69, v70, (char)v26);
        sub_1ACBB60F8((uint64_t *)a1, "UPDATE %Q.sqlite_master SET tbl_name = %Q, name = CASE WHEN type='table' THEN %Q WHEN name LIKE 'sqliteX_autoindex%%' ESCAPE 'X'      AND type='index' THEN 'sqlite_autoindex_' || %Q || substr(name,%d+18) ELSE name END WHERE tbl_name=%Q COLLATE nocase AND (type='table' OR type='index' OR type='trigger');",
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          (char)v26);
        if (sub_1ACBD1B0C((uint64_t)v9, "sqlite_sequence", v26))
          sub_1ACBB60F8((uint64_t *)a1, "UPDATE \"%w\".sqlite_sequence set name = %Q WHERE name = %Q", v77, v78, v79, v80, v81, v82, (char)v26);
        if ((_DWORD)v23 != 1)
          sub_1ACBB60F8((uint64_t *)a1, "UPDATE sqlite_temp_schema SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, 1), tbl_name = CASE WHEN tbl_name=%Q COLLATE nocase AND   sqlite_rename_test(%Q, sql, type, name, 1, 'after rename', 0) THEN %Q ELSE tbl_name END WHERE type IN ('view', 'trigger')", v77, v78, v79, v80, v81, v82, (char)v26);
        if (v88)
        {
          v83 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v83;
          sub_1ACBA86CC(v63, 117, 0, v83, 0, (uint64_t)v29, 0, v82);
          sub_1ACBA86CC(v63, 176, v83, 0, 0, v88, 4294967285, v84);
        }
        sub_1ACC39544((uint64_t *)a1, v23, 1, v78, v79, v80, v81, v82);
        sub_1ACC39620(a1, (char)v26, (_DWORD)v23 == 1, (uint64_t)"after rename", 0, v85, v86, v87);
      }
    }
  }
LABEL_30:
  sub_1ACB7E8B0(v9, (_QWORD *)a2);
  return sub_1ACBE0F9C(v9, v29);
}

void sub_1ACC068C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD);
  uint64_t v33;
  char v34;
  _WORD *v35;
  __int16 v36;
  const char *v37;
  _DWORD *v38;
  const char *v39;
  int v40;
  int v41;
  const char *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  const void *v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  _QWORD *v86;

  if (*(_DWORD *)(a1 + 48))
    return;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 344);
  v13 = *(_QWORD *)(v12 + 96);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (v13)
  {
    v15 = (uint64_t *)(v14 + 24);
    LODWORD(v16) = -1;
    do
    {
      v17 = *v15;
      v15 += 4;
      v16 = (v16 + 1);
    }
    while (v17 != v13);
  }
  else
  {
    v16 = 4294934528;
  }
  v18 = *(_BYTE **)(v14 + 32 * (int)v16);
  v19 = (char *)(*(_QWORD *)v12 + 16);
  v20 = *(__int16 *)(v12 + 54) - 1;
  v85 = *(_QWORD *)(v12 + 8);
  v21 = *(unsigned __int16 *)(v85 + 16 * v20 + 12);
  if (*(_WORD *)(v85 + 16 * v20 + 12) && !*(_BYTE *)(v12 + 63) && (v38 = *(_DWORD **)(v12 + 80)) != 0 && *v38 >= v21)
    v22 = *(_QWORD *)&v38[6 * (v21 - 1) + 2];
  else
    v22 = 0;
  v23 = (_QWORD *)sub_1ACBD1B0C(v11, v19, v18);
  v31 = *(_QWORD *)a1;
  v32 = *(uint64_t (**)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
  if (v32 && !*(_BYTE *)(v31 + 197) && !*(_BYTE *)(a1 + 302))
  {
    v40 = v32(*(_QWORD *)(v31 + 536), 26, v18, *v23, 0, *(_QWORD *)(a1 + 368));
    if (v40 == 1)
    {
      v41 = 23;
      v42 = "not authorized";
    }
    else
    {
      if ((v40 & 0xFFFFFFFD) == 0)
      {
        if (v40)
          return;
        goto LABEL_14;
      }
      v41 = 1;
      v42 = "authorizer malfunction";
    }
    sub_1ACBCB308(a1, v42, v25, v26, v27, v28, v29, v30, v82);
    *(_DWORD *)(a1 + 24) = v41;
    return;
  }
LABEL_14:
  v33 = v85 + 16 * v20;
  v36 = *(_WORD *)(v33 + 14);
  v35 = (_WORD *)(v33 + 14);
  v34 = v36;
  if ((v36 & 1) != 0)
  {
    v37 = "Cannot add a PRIMARY KEY column";
    goto LABEL_18;
  }
  if (*(_QWORD *)(v12 + 16))
  {
    v37 = "Cannot add a UNIQUE column";
LABEL_18:
    sub_1ACBCB308(a1, v37, v25, v26, v27, v28, v29, v30, a9);
    return;
  }
  if ((v34 & 0x60) != 0)
  {
    if ((v34 & 0x40) == 0)
      goto LABEL_48;
    v39 = "cannot add a STORED column";
    goto LABEL_47;
  }
  if (v22 && **(_BYTE **)(v22 + 16) == 121)
    v22 = 0;
  if ((*(_BYTE *)(v11 + 49) & 0x40) != 0 && *(_QWORD *)(v12 + 72) && v22)
  {
    sub_1ACBB60F8((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v25, v26, v27, v28, v29, v30, (char)"Cannot add a REFERENCES column with non-NULL default value");
    goto LABEL_39;
  }
  if ((*(_BYTE *)(v85 + 16 * v20 + 8) & 0xF) == 0 || v22 != 0)
  {
    if (!v22)
      goto LABEL_48;
LABEL_39:
    v86 = 0;
    if (sub_1ACC015D4(v11, (unsigned __int8 *)v22, 1, 65, (uint64_t *)&v86))
      return;
    v50 = v86;
    if (!v86)
      sub_1ACBB60F8((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v44, v45, v46, v47, v48, v49, (char)"Cannot add a column with non-constant default");
    sub_1ACBC6918(v50);
    goto LABEL_48;
  }
  v39 = "Cannot add a NOT NULL column with default value NULL";
LABEL_47:
  sub_1ACBB60F8((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v25, v26, v27, v28, v29, v30, (char)v39);
LABEL_48:
  v83 = (char)v19;
  v84 = (char)v18;
  v51 = *(const void **)a2;
  if (*(_QWORD *)a2)
  {
    v52 = *(unsigned int *)(a2 + 8);
    v53 = (_QWORD *)sub_1ACBE1124(v11, v52 + 1);
    if (v53)
    {
      v54 = v53;
      memcpy(v53, v51, v52);
      *((_BYTE *)v54 + v52) = 0;
      if (*(_DWORD *)(a2 + 8) != 1)
      {
        v61 = (unsigned __int8 *)v54 + (*(_DWORD *)(a2 + 8) - 1);
        do
        {
          v62 = *v61;
          if (v62 != 59 && (byte_1ACCB6548[v62] & 1) == 0)
            break;
          *v61-- = 0;
        }
        while (v61 > (unsigned __int8 *)v54);
      }
      sub_1ACBB60F8((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = printf('%%.%ds, ',sql) || %Q || substr(sql,1+length(printf('%%.%ds',sql))) WHERE type = 'table' AND name = %Q", v55, v56, v57, v58, v59, v60, v84);
      sub_1ACBE0F9C((_QWORD *)v11, v54);
    }
  }
  v63 = *(_QWORD *)(a1 + 16);
  if (v63)
    goto LABEL_91;
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  v63 = sub_1ACBCB4C8((uint64_t *)a1, v24, v25, v26, v27, v28, v29, v30);
  if (v63)
  {
LABEL_91:
    if (*(_BYTE *)(a1 + 31))
    {
      v64 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v64;
      v65 = *(unsigned int *)(a1 + 4 * v64 + 224);
    }
    else
    {
      v65 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v65;
    }
    v66 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v66)
    {
      sub_1ACBFF5AC(v63, 99, v16, v65, 2, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v66 + 1;
      v67 = *(_QWORD *)(v63 + 136) + 40 * v66;
      *(_DWORD *)v67 = 99;
      *(_DWORD *)(v67 + 4) = v16;
      *(_DWORD *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = 2;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      *(_QWORD *)(v67 + 16) = 0;
    }
    *(_DWORD *)(v63 + 272) |= 1 << v16;
    if ((_DWORD)v16 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v63 + 32) + 32 * (int)v16 + 8) + 17))
      *(_DWORD *)(v63 + 276) |= 1 << v16;
    v68 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v68)
    {
      sub_1ACBFF5AC(v63, 86, v65, 4294967294, 0, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v68 + 1;
      v69 = *(_QWORD *)(v63 + 136) + 40 * v68;
      *(_DWORD *)v69 = 86;
      *(_DWORD *)(v69 + 4) = v65;
      *(_DWORD *)(v69 + 8) = -2;
      *(_QWORD *)(v69 + 12) = 0;
      *(_QWORD *)(v69 + 28) = 0;
      *(_QWORD *)(v69 + 20) = 0;
      *(_DWORD *)(v69 + 36) = 0;
    }
    v70 = *(_DWORD *)(v63 + 144);
    v71 = (v70 + 2);
    if (*(_DWORD *)(v63 + 148) <= v70)
    {
      sub_1ACBFF5AC(v63, 59, v65, v71, 0, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v70 + 1;
      v72 = *(_QWORD *)(v63 + 136) + 40 * v70;
      *(_DWORD *)v72 = 59;
      *(_DWORD *)(v72 + 4) = v65;
      *(_DWORD *)(v72 + 8) = v71;
      *(_QWORD *)(v72 + 12) = 0;
      *(_QWORD *)(v72 + 28) = 0;
      *(_QWORD *)(v72 + 20) = 0;
      *(_DWORD *)(v72 + 36) = 0;
    }
    v73 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v73)
    {
      sub_1ACBFF5AC(v63, 100, v16, 2, 3, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v73 + 1;
      v74 = *(_QWORD *)(v63 + 136) + 40 * v73;
      *(_DWORD *)v74 = 100;
      *(_DWORD *)(v74 + 4) = v16;
      *(_QWORD *)(v74 + 8) = 0x300000002;
      *(_QWORD *)(v74 + 24) = 0;
      *(_QWORD *)(v74 + 32) = 0;
      *(_QWORD *)(v74 + 16) = 0;
    }
    if ((_DWORD)v65)
    {
      v75 = *(unsigned __int8 *)(a1 + 31);
      if (v75 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v75 + 1;
        *(_DWORD *)(a1 + 4 * v75 + 224) = v65;
      }
    }
    sub_1ACC39544((uint64_t *)a1, v16, 3, v71, v27, v28, v29, v30);
    if (*(_QWORD *)(v12 + 32) || (*(_BYTE *)(v85 + 16 * v20 + 8) & 0xF) != 0 && (*v35 & 0x60) != 0)
      sub_1ACBB60F8((uint64_t *)a1, "SELECT CASE WHEN quick_check GLOB 'CHECK*' THEN raise(ABORT,'CHECK constraint failed') ELSE raise(ABORT,'NOT NULL constraint failed') END  FROM pragma_quick_check(%Q,%Q) WHERE quick_check GLOB 'CHECK*' OR quick_check GLOB 'NULL*'", v76, v77, v78, v79, v80, v81, v83);
  }
}

_QWORD *sub_1ACC06EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE **v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  const char *v35;
  const void *v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int i;
  uint64_t v50;
  int v51;
  unsigned __int8 v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int16x8_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  int v140;
  char *v141;
  char v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;

  v9 = *(_QWORD **)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 103))
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = v9[4];
      v15 = (uint64_t *)(v14 + 24);
      v16 = 0xFFFFFFFF00000000;
      do
      {
        v17 = *v15;
        v15 += 4;
        v16 += 0x100000000;
      }
      while (v17 != v13);
      v18 = (_BYTE **)(v14 + (v16 >> 27));
    }
    else
    {
      v18 = (_BYTE **)(a2 + 16);
    }
    v19 = (unsigned __int8 **)sub_1ACB8D488(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
    if (v19)
    {
      v26 = (uint64_t)v19;
      if (!sub_1ACC3934C(a1, v19, v20, v21, v22, v23, v24, v25))
      {
        v33 = *(unsigned __int8 *)(v26 + 63);
        v34 = "view";
        if (v33 != 2)
          v34 = 0;
        if (v33 == 1)
          v35 = "virtual table";
        else
          v35 = v34;
        if (v35)
        {
          sub_1ACBCB308(a1, "cannot %s %s \"%s\"", v27, v28, v29, v30, v31, v32, (char)"drop column from");
          return sub_1ACB7E8B0(v9, (_QWORD *)a2);
        }
        if (a3)
        {
          v36 = *(const void **)a3;
          if (*(_QWORD *)a3)
          {
            v37 = *(unsigned int *)(a3 + 8);
            v38 = (_QWORD *)sub_1ACBE1124((uint64_t)v9, v37 + 1);
            if (v38)
            {
              v39 = v38;
              memcpy(v38, v36, v37);
              *((_BYTE *)v39 + v37) = 0;
              v46 = *(unsigned __int8 *)v39;
              if ((char)byte_1ACCB6548[*(unsigned __int8 *)v39] < 0)
              {
                v47 = 0;
                if (v46 == 91)
                  v48 = 93;
                else
                  v48 = *(unsigned __int8 *)v39;
                for (i = 1; ; ++i)
                {
                  v50 = i;
                  v51 = *((unsigned __int8 *)v39 + i);
                  if (v51 == v48)
                  {
                    ++i;
                    LOBYTE(v51) = v48;
                    if (*((unsigned __int8 *)v39 + v50 + 1) != v48)
                      break;
                  }
                  *((_BYTE *)v39 + v47++) = v51;
                }
                *((_BYTE *)v39 + v47) = 0;
                v46 = *(unsigned __int8 *)v39;
              }
              v52 = 0;
              if (v46)
              {
                v53 = (unsigned __int8 *)v39 + 1;
                do
                {
                  v52 += byte_1ACCB6333[v46];
                  v54 = *v53++;
                  v46 = v54;
                }
                while (v54);
              }
              v55 = *(__int16 *)(v26 + 54);
              if (v55 < 1)
              {
LABEL_46:
                sub_1ACBCB308(a1, "no such column: \"%T\"", v40, v41, v42, v43, v44, v45, a3);
                goto LABEL_47;
              }
              v56 = 0;
              v57 = *(_QWORD *)(v26 + 8);
              while (*(unsigned __int8 *)(v57 + 11) != v52)
              {
LABEL_34:
                v57 += 16;
                if (++v56 == v55)
                  goto LABEL_46;
              }
              for (j = 0; ; ++j)
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)v57 + j);
                v60 = *((unsigned __int8 *)v39 + j);
                if ((_DWORD)v59 == (_DWORD)v60)
                {
                  if (!*(_BYTE *)(*(_QWORD *)v57 + j))
                  {
                    v61 = *(_WORD *)(*(_QWORD *)(v26 + 8) + 16 * v56 + 14);
                    if ((v61 & 9) != 0)
                    {
                      if ((v61 & 1) != 0)
                        v62 = "PRIMARY KEY";
                      else
                        v62 = "UNIQUE";
                      sub_1ACBCB308(a1, "cannot drop %s column: \"%s\"", v40, v41, v42, v43, v44, v45, (char)v62);
                      goto LABEL_47;
                    }
                    if (v55 <= 1)
                    {
                      sub_1ACBCB308(a1, "cannot drop column \"%s\": no other columns exist", v40, v41, v42, v43, v44, v45, (char)v39);
                      goto LABEL_47;
                    }
                    v63 = *(_QWORD *)(v26 + 96);
                    v64 = v9[4];
                    if (v63)
                    {
                      v65 = (uint64_t *)(v64 + 24);
                      LODWORD(v66) = -1;
                      do
                      {
                        v67 = *v65;
                        v65 += 4;
                        v66 = (v66 + 1);
                      }
                      while (v67 != v63);
                    }
                    else
                    {
                      v66 = 4294934528;
                    }
                    v68 = *(_QWORD *)(v64 + 32 * (int)v66);
                    if (!sub_1ACC0D950(a1, 26, v68, *(_QWORD *)v26, (uint64_t)v39))
                    {
                      sub_1ACC39620(a1, v68, (_DWORD)v66 == 1, (uint64_t)&byte_1ACCBEAEE, 0, v69, v70, v71);
                      sub_1ACC396A0((uint64_t *)a1, v68, (_DWORD)v66 == 1, v72, v73, v74, v75, v76, v142);
                      sub_1ACBB60F8((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_drop_column(%d, sql, %d) WHERE (type=='table' AND tbl_name=%Q COLLATE nocase)", v77, v78, v79, v80, v81, v82, v68);
                      sub_1ACC39544((uint64_t *)a1, v66, 2, v83, v84, v85, v86, v87);
                      sub_1ACC39620(a1, v68, (_DWORD)v66 == 1, (uint64_t)"after drop column", 1, v88, v89, v90);
                      if (!*(_DWORD *)(a1 + 48) && (*(_WORD *)(*(_QWORD *)(v26 + 8) + 16 * v56 + 14) & 0x20) == 0)
                      {
                        v98 = sub_1ACBA8698((uint64_t *)a1, v91, v92, v93, v94, v95, v96, v97);
                        v99 = *(unsigned int *)(a1 + 52);
                        *(_DWORD *)(a1 + 52) = v99 + 1;
                        sub_1ACB7A514((_QWORD *)a1, v99, v66, v26, 113, v100, v101, v102);
                        v148 = v98;
                        v147 = v99;
                        v144 = sub_1ACC08D28(v98, 36, v99, v103, v104, v105, v106, v107);
                        v145 = *(_DWORD *)(a1 + 56);
                        v143 = v145 + 1;
                        *(_DWORD *)(a1 + 56) = v145 + 1;
                        if ((*(_BYTE *)(v26 + 48) & 0x80) != 0)
                        {
                          v117 = v26 + 16;
                          do
                          {
                            v113 = *(_QWORD *)v117;
                            v118 = *(_WORD *)(*(_QWORD *)v117 + 99) & 3;
                            v117 = *(_QWORD *)v117 + 40;
                          }
                          while (v118 != 2);
                          v116 = v143 + *(unsigned __int16 *)(v113 + 96);
                          *(_DWORD *)(a1 + 56) = v116;
                          if (*(_WORD *)(v113 + 94))
                          {
                            v119 = 0;
                            do
                            {
                              sub_1ACB683F4(v148, 94, v99, v119, (v145 + 2 + v119), v109, v110, v111);
                              v119 = (v119 + 1);
                              v114 = *(unsigned __int16 *)(v113 + 94);
                            }
                            while (v119 < v114);
                            v116 = *(_DWORD *)(a1 + 56);
                          }
                          else
                          {
                            v114 = 0;
                          }
                          v115 = *(_WORD *)(v26 + 54);
                        }
                        else
                        {
                          sub_1ACBFF554(v98, 135, v99, v143, v108, v109, v110, v111);
                          v113 = 0;
                          v114 = 0;
                          v115 = *(_WORD *)(v26 + 54);
                          v116 = *(_DWORD *)(a1 + 56) + v115;
                        }
                        v146 = v116 + 1;
                        *(_DWORD *)(a1 + 56) = v116 + 1;
                        if (v115 >= 1)
                        {
                          v120 = 0;
                          v149 = v145 + 2;
                          v121 = v56;
                          v122 = v114;
                          while (1)
                          {
                            if (v120 != v121 && (*(_WORD *)(*(_QWORD *)(v26 + 8) + 16 * v120 + 14) & 0x20) == 0)
                            {
                              if (!v113)
                              {
                                LODWORD(v124) = v122;
                                v128 = (v149 + v122);
LABEL_89:
                                if (v120 == *(__int16 *)(v26 + 52))
                                  sub_1ACBFF554(v148, 75, 0, v128, v128, v109, v110, v111);
                                else
                                  *(double *)v112.i64 = sub_1ACC0B288(v148, v26, v147, v120, v128, v109, v110, v111, v112);
                                v122 = (v124 + 1);
                                v115 = *(_WORD *)(v26 + 54);
                                goto LABEL_72;
                              }
                              v123 = *(unsigned __int16 *)(v113 + 96);
                              if (*(_WORD *)(v113 + 96))
                              {
                                v124 = v122;
                                v125 = 0;
                                v126 = *(_QWORD *)(v113 + 8);
                                while (*(unsigned __int16 *)(v126 + 2 * v125) != (unsigned __int16)v120)
                                {
                                  if (v123 == ++v125)
                                  {
                                    LOWORD(v125) = -1;
                                    break;
                                  }
                                }
                                v127 = 0;
                                while (*(unsigned __int16 *)(v126 + 2 * v127) != (unsigned __int16)v56)
                                {
                                  if (v123 == ++v127)
                                  {
                                    LOWORD(v127) = -1;
                                    break;
                                  }
                                }
                                if ((__int16)v125 >= (int)*(unsigned __int16 *)(v113 + 94))
                                {
                                  v128 = v149 + (__int16)v125 - ((__int16)v125 > (__int16)v127);
                                  v121 = v56;
                                  goto LABEL_89;
                                }
                                v121 = v56;
                                v122 = v124;
                              }
                            }
LABEL_72:
                            if (++v120 >= v115)
                              goto LABEL_92;
                          }
                        }
                        v122 = v114;
LABEL_92:
                        if ((_DWORD)v122)
                        {
                          v129 = v122;
                          v130 = (v145 + 2);
                        }
                        else
                        {
                          ++*(_DWORD *)(a1 + 56);
                          v130 = (v145 + 2);
                          sub_1ACBFF554(v148, 75, 0, v130, v108, v109, v110, v111);
                          v129 = 1;
                        }
                        sub_1ACB683F4(v148, 97, v130, v129, v146, v109, v110, v111);
                        if (v113)
                          sub_1ACBCB640(v148, 138, v147, v146, v130, *(unsigned __int16 *)(v113 + 94), v132, v133);
                        else
                          sub_1ACB683F4(v148, 128, v147, v146, v143, v131, v132, v133);
                        v138 = *(_DWORD *)(v148 + 144);
                        v139 = __OFSUB__(v138, 1);
                        v140 = v138 - 1;
                        if (v140 < 0 == v139)
                          *(_WORD *)(*(_QWORD *)(v148 + 136) + 40 * v140 + 2) = 2;
                        sub_1ACBFF554(v148, 39, v147, (v144 + 1), v134, v135, v136, v137);
                        if (*(_BYTE *)(*(_QWORD *)v148 + 103))
                          v141 = &byte_1EECAD280;
                        else
                          v141 = (char *)(*(_QWORD *)(v148 + 136) + 40 * v144);
                        *((_DWORD *)v141 + 2) = *(_DWORD *)(v148 + 144);
                      }
                    }
LABEL_47:
                    sub_1ACBE0F9C(v9, v39);
                    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
                  }
                }
                else if (byte_1ACCB6333[v59] != byte_1ACCB6333[v60])
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
    }
  }
  return sub_1ACB7E8B0(v9, (_QWORD *)a2);
}

_QWORD *sub_1ACC075A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  const char **v49;
  const char *v50;
  size_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v9 = (_QWORD *)*a1;
  if (*(_BYTE *)(*a1 + 103))
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = v9[4];
    v13 = (uint64_t *)(v12 + 24);
    v14 = 0xFFFFFFFF00000000;
    do
    {
      v15 = *v13;
      v13 += 4;
      v14 += 0x100000000;
    }
    while (v15 != v11);
    v16 = (_BYTE **)(v12 + (v14 >> 27));
  }
  else
  {
    v16 = (_BYTE **)(a2 + 16);
  }
  v17 = sub_1ACB8D488((uint64_t)a1, 0, *(char **)(a2 + 24), *v16, a5, a6, a7, a8);
  if (!v17)
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v24 = v17;
  v25 = *(unsigned __int8 *)(v17 + 63);
  if (v25 == 2)
  {
    v26 = "Cannot add a column to a view";
    goto LABEL_12;
  }
  if (v25 == 1)
  {
    v26 = "virtual tables may not be altered";
LABEL_12:
    sub_1ACBCB308((uint64_t)a1, v26, v18, v19, v20, v21, v22, v23, v57);
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  }
  if (sub_1ACC3934C((uint64_t)a1, (unsigned __int8 **)v17, v18, v19, v20, v21, v22, v23))
    return sub_1ACB7E8B0(v9, (_QWORD *)a2);
  v28 = (_QWORD *)a1[21];
  if (!v28)
    v28 = a1;
  *((_BYTE *)v28 + 33) = 1;
  v29 = *(_QWORD *)(v24 + 96);
  if (!v29)
  {
    v31 = -32768;
LABEL_23:
    v33 = sub_1ACBE1124((uint64_t)v9, 0x68uLL);
    v59 = 0;
    goto LABEL_24;
  }
  v30 = (uint64_t *)(v9[4] + 24);
  v31 = -1;
  do
  {
    v32 = *v30;
    v30 += 4;
    ++v31;
  }
  while (v32 != v29);
  if (v9)
    goto LABEL_23;
  v33 = sub_1ACB5D828(104);
  v59 = 1;
LABEL_24:
  if (v33)
  {
    *(_QWORD *)(v33 + 96) = 0;
    *(_OWORD *)(v33 + 64) = 0u;
    *(_OWORD *)(v33 + 80) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    a1[43] = v33;
    *(_DWORD *)(v33 + 44) = 1;
    v34 = *(__int16 *)(v24 + 54);
    *(_WORD *)(v33 + 54) = v34;
    v36 = v34 - 1;
    v35 = v34 < 1;
    v37 = v34 + 6;
    if (!v35)
      v37 = v36;
    *(_QWORD *)(v33 + 8) = sub_1ACB5733C((uint64_t)v9, 16 * (int)((v37 & 0xFFFFFFF8) + 8));
    v44 = sub_1ACB6DDD0((uint64_t)v9, "sqlite_altertab_%s", v38, v39, v40, v41, v42, v43, *(_QWORD *)v24);
    *(_QWORD *)v33 = v44;
    v45 = *(void **)(v33 + 8);
    if (v45)
    {
      if (v44)
      {
        v58 = v24;
        memcpy(v45, *(const void **)(v24 + 8), 16 * *(__int16 *)(v33 + 54));
        if (*(__int16 *)(v33 + 54) < 1)
        {
LABEL_44:
          *(_QWORD *)(v33 + 80) = sub_1ACB8B6B8((uint64_t)v9, *(_QWORD **)(v58 + 80), 0);
          *(_QWORD *)(v33 + 96) = *(_QWORD *)(v9[4] + 32 * v31 + 24);
          *(_DWORD *)(v33 + 64) = *(_DWORD *)(v58 + 64);
          return sub_1ACB7E8B0(v9, (_QWORD *)a2);
        }
        v46 = 0;
        v60 = v33;
        while (1)
        {
          v48 = *(_QWORD *)(v33 + 8);
          v49 = (const char **)(v48 + 16 * v46);
          v50 = *v49;
          if (!*v49)
            break;
          v51 = strlen(*v49);
          v52 = v51 + 1;
          if ((v59 & 1) != 0)
          {
            v53 = (unsigned __int8 *)sub_1ACB5D828(v51 + 1);
            if (!v53)
              break;
          }
          else
          {
            v53 = (unsigned __int8 *)sub_1ACBE1124((uint64_t)v9, v52);
            if (!v53)
              break;
          }
          memcpy(v53, v50, v52);
          *v49 = (const char *)v53;
          v54 = *v53;
          if (*v53)
          {
            v47 = 0;
            v55 = v53 + 1;
            v33 = v60;
            do
            {
              v47 += byte_1ACCB6333[v54];
              v56 = *v55++;
              v54 = v56;
            }
            while (v56);
            goto LABEL_33;
          }
          v47 = 0;
LABEL_32:
          v33 = v60;
LABEL_33:
          *(_BYTE *)(v48 + 16 * v46++ + 11) = v47;
          if (v46 >= *(__int16 *)(v33 + 54))
            goto LABEL_44;
        }
        v47 = 0;
        *v49 = 0;
        goto LABEL_32;
      }
    }
  }
  return sub_1ACB7E8B0(v9, (_QWORD *)a2);
}

_QWORD *sub_1ACC078A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE **v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  const char *v35;
  _QWORD *result;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 **v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, _QWORD, uint64_t);
  const void *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int i;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unsigned __int8 *j;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  const char *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;

  v12 = (_QWORD *)*a1;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = v12[4];
    v15 = (uint64_t *)(v14 + 24);
    v16 = 0xFFFFFFFF00000000;
    do
    {
      v17 = *v15;
      v15 += 4;
      v16 += 0x100000000;
    }
    while (v17 != v13);
    v18 = (_BYTE **)(v14 + (v16 >> 27));
  }
  else
  {
    v18 = (_BYTE **)(a2 + 16);
  }
  v19 = (unsigned __int8 **)sub_1ACB8D488((uint64_t)a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19)
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  v26 = v19;
  if (sub_1ACC3934C((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25))
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  v33 = *((unsigned __int8 *)v26 + 63);
  v34 = "view";
  if (v33 != 2)
    v34 = 0;
  if (v33 == 1)
    v35 = "virtual table";
  else
    v35 = v34;
  if (v35)
  {
    sub_1ACBCB308((uint64_t)a1, "cannot %s %s \"%s\"", v27, v28, v29, v30, v31, v32, (char)"rename columns of");
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  }
  v37 = v26[12];
  v38 = v12[4];
  if (v37)
  {
    v39 = (unsigned __int8 **)(v38 + 24);
    LODWORD(v40) = -1;
    do
    {
      v41 = *v39;
      v39 += 4;
      v40 = (v40 + 1);
    }
    while (v41 != v37);
  }
  else
  {
    v40 = 4294934528;
  }
  v42 = *(_QWORD *)(v38 + 32 * (int)v40);
  v43 = *a1;
  v44 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, _QWORD, uint64_t))(*a1 + 528);
  v103 = v42;
  if (v44 && !*(_BYTE *)(v43 + 197) && !*((_BYTE *)a1 + 302))
  {
    v66 = v44(*(_QWORD *)(v43 + 536), 26, v42, *v26, 0, a1[46]);
    if (v66 == 1)
    {
      v73 = 23;
      v74 = "not authorized";
    }
    else
    {
      if ((v66 & 0xFFFFFFFD) == 0)
      {
        if (!a3 || v66)
          return sub_1ACB7E8B0(v12, (_QWORD *)a2);
        goto LABEL_25;
      }
      v73 = 1;
      v74 = "authorizer malfunction";
    }
    sub_1ACBCB308((uint64_t)a1, v74, v67, v68, v69, v70, v71, v72, v102);
    *((_DWORD *)a1 + 6) = v73;
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  }
  if (!a3)
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
LABEL_25:
  v45 = *(const void **)a3;
  if (!*(_QWORD *)a3)
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  v46 = *(unsigned int *)(a3 + 8);
  v47 = (_QWORD *)sub_1ACBE1124((uint64_t)v12, v46 + 1);
  if (!v47)
    return sub_1ACB7E8B0(v12, (_QWORD *)a2);
  v48 = v47;
  memcpy(v47, v45, v46);
  *((_BYTE *)v48 + v46) = 0;
  v55 = *(unsigned __int8 *)v48;
  if ((char)byte_1ACCB6548[*(unsigned __int8 *)v48] < 0)
  {
    v56 = 0;
    if (v55 == 91)
      v55 = 93;
    for (i = 1; ; ++i)
    {
      v58 = i;
      v59 = *((unsigned __int8 *)v48 + i);
      if (v59 == v55)
      {
        ++i;
        LOBYTE(v59) = v55;
        if (*((unsigned __int8 *)v48 + v58 + 1) != v55)
          break;
      }
      *((_BYTE *)v48 + v56++) = v59;
    }
    *((_BYTE *)v48 + v56) = 0;
  }
  v60 = *((__int16 *)v26 + 27);
  if ((int)v60 >= 1)
  {
    v61 = 0;
    while (1)
    {
      v62 = *(_BYTE **)&v26[1][16 * v61];
      for (j = (unsigned __int8 *)v48; ; ++j)
      {
        v64 = *v62;
        v65 = *j;
        if ((_DWORD)v64 != (_DWORD)v65)
          break;
        if (!*v62)
          goto LABEL_48;
LABEL_39:
        ++v62;
      }
      if (byte_1ACCB6333[v64] == byte_1ACCB6333[v65])
        goto LABEL_39;
      if (++v61 == v60)
        goto LABEL_49;
    }
  }
  LODWORD(v61) = 0;
LABEL_48:
  if ((_DWORD)v61 == (_DWORD)v60)
  {
LABEL_49:
    sub_1ACBCB308((uint64_t)a1, "no such column: \"%T\"", v49, v50, v51, v52, v53, v54, a3);
    v75 = 0;
  }
  else
  {
    sub_1ACC39620((uint64_t)a1, v103, (_DWORD)v40 == 1, (uint64_t)&byte_1ACCBEAEE, 0, v52, v53, v54);
    sub_1ACC396A0(a1, v103, (_DWORD)v40 == 1, v76, v77, v78, v79, v80, v102);
    v81 = (uint64_t *)a1[21];
    if (!v81)
      v81 = a1;
    *((_BYTE *)v81 + 33) = 1;
    v75 = sub_1ACC03858((uint64_t)v12, a4);
    if (v75)
    {
      sub_1ACBB60F8(a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, %d) WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'  AND (type != 'index' OR tbl_name = %Q)", v82, v83, v84, v85, v86, v87, v103);
      sub_1ACBB60F8(a1, "UPDATE temp.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) WHERE type IN ('trigger', 'view')", v88, v89, v90, v91, v92, v93, v103);
      sub_1ACC39544(a1, v40, 1, v94, v95, v96, v97, v98);
      sub_1ACC39620((uint64_t)a1, v103, (_DWORD)v40 == 1, (uint64_t)"after rename", 1, v99, v100, v101);
    }
  }
  sub_1ACB7E8B0(v12, (_QWORD *)a2);
  result = sub_1ACBE0F9C(v12, v48);
  if (v75)
    return sub_1ACBE0F9C(v12, v75);
  return result;
}

void sub_1ACC07CDC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  const void *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  _BYTE *v48;
  unsigned __int8 *i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  int v86;
  _BYTE *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t j;
  char v97;

  v8 = *(_QWORD *)(a1 + 344);
  if (!v8)
    return;
  v11 = *(_QWORD *)a1;
  v12 = *(const void **)(a1 + 376);
  if (v12)
  {
    v13 = *(int *)(a1 + 384);
    v14 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, v13 + 1);
    v20 = v14;
    if (v14)
    {
      memcpy(v14, v12, v13);
      *((_BYTE *)v20 + v13) = 0;
    }
    sub_1ACC009EC(a1, v8, v20, v15, v16, v17, v18, v19);
  }
  *(_QWORD *)(a1 + 376) = 0;
  if (*(int *)(v8 + 64) < 1)
    return;
  if (!*(_BYTE *)(v11 + 197))
  {
    v27 = *(_QWORD *)(a1 + 168);
    if (!v27)
      v27 = a1;
    *(_BYTE *)(v27 + 33) = 1;
    if (a2)
      *(_DWORD *)(a1 + 272) = a2[2] + *a2 - *(_DWORD *)(a1 + 264);
    v34 = sub_1ACB6DDD0(v11, "CREATE VIRTUAL TABLE %T", a3, a4, a5, a6, a7, a8, a1 + 8);
    v35 = *(_QWORD *)(v8 + 96);
    v36 = *(_QWORD *)(v11 + 32);
    if (v35)
    {
      v37 = (uint64_t *)(v36 + 24);
      LODWORD(v38) = -1;
      do
      {
        v39 = *v37;
        v37 += 4;
        v38 = (v38 + 1);
      }
      while (v39 != v35);
    }
    else
    {
      v38 = 4294934528;
    }
    sub_1ACBB60F8((uint64_t *)a1, "UPDATE %Q.sqlite_master SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q WHERE rowid=#%d", v28, v29, v30, v31, v32, v33, *(_QWORD *)(v36 + 32 * (int)v38));
    v59 = *(_QWORD *)(a1 + 16);
    v60 = v59;
    if (!v59)
    {
      if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
        *(_BYTE *)(a1 + 35) = 1;
      v60 = sub_1ACBCB4C8((uint64_t *)a1, v52, v53, v54, v55, v56, v57, v58);
      v59 = *(_QWORD *)(a1 + 16);
    }
    v61 = (**(_DWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)v38 + 24) + 1);
    v62 = *(_DWORD *)(v59 + 144);
    if (*(_DWORD *)(v59 + 148) <= v62)
    {
      sub_1ACBFF5AC(v59, 100, v38, 1, v61, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)(v59 + 144) = v62 + 1;
      v63 = *(_QWORD *)(v59 + 136) + 40 * v62;
      *(_DWORD *)v63 = 100;
      *(_DWORD *)(v63 + 4) = v38;
      *(_DWORD *)(v63 + 8) = 1;
      *(_DWORD *)(v63 + 12) = v61;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = 0;
      *(_QWORD *)(v63 + 16) = 0;
    }
    v64 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v64)
    {
      sub_1ACBFF5AC(v60, 166, 0, 0, 0, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)(v60 + 144) = v64 + 1;
      v65 = *(_QWORD *)(v60 + 136) + 40 * v64;
      *(_BYTE *)v65 = -90;
      *(_OWORD *)(v65 + 1) = 0u;
      *(_OWORD *)(v65 + 17) = 0u;
      *(_QWORD *)(v65 + 32) = 0;
    }
    v66 = sub_1ACB6DDD0(v11, "name=%Q AND sql=%Q", v53, v54, v61, v56, v57, v58, *(_QWORD *)v8);
    sub_1ACC0F480(v60, v38, (uint64_t)v66, 0, v67, v68, v69, v70);
    if (v34)
      sub_1ACBE0F9C((_QWORD *)v11, v34);
    v72 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v72;
    sub_1ACBA86CC((uint64_t *)v60, 117, 0, v72, 0, *(_QWORD *)v8, 0, v71);
    v76 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v76)
    {
      sub_1ACBFF5AC(v60, 171, v38, v72, 0, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)(v60 + 144) = v76 + 1;
      v77 = *(_QWORD *)(v60 + 136) + 40 * v76;
      *(_DWORD *)v77 = 171;
      *(_DWORD *)(v77 + 4) = v38;
      *(_DWORD *)(v77 + 8) = v72;
      *(_QWORD *)(v77 + 12) = 0;
      *(_QWORD *)(v77 + 28) = 0;
      *(_QWORD *)(v77 + 20) = 0;
      *(_DWORD *)(v77 + 36) = 0;
    }
    return;
  }
  v21 = **(_BYTE ***)(v8 + 72);
  v22 = *(_QWORD *)(v11 + 584);
  if (!v22)
  {
    v40 = (uint64_t *)(v11 + 576);
    v41 = *(_DWORD *)(v11 + 572);
    if (v41)
      goto LABEL_31;
LABEL_22:
    v40 = &qword_1EECAD260;
    goto LABEL_23;
  }
  v23 = *v21;
  if (*v21)
  {
    v24 = 0;
    v25 = v21 + 1;
    do
    {
      v24 = -1640531535 * (v24 + byte_1ACCB6333[v23]);
      v26 = *v25++;
      v23 = v26;
    }
    while (v26);
  }
  else
  {
    v24 = 0;
  }
  v47 = (_DWORD *)(v22 + 16 * (v24 % *(_DWORD *)(v11 + 568)));
  v40 = (uint64_t *)(v47 + 2);
  v41 = *v47;
  if (!v41)
    goto LABEL_22;
  do
  {
LABEL_31:
    v40 = (uint64_t *)*v40;
    v48 = (_BYTE *)v40[3];
    for (i = **(unsigned __int8 ***)(v8 + 72); ; ++i)
    {
      v50 = *v48;
      v51 = *i;
      if ((_DWORD)v50 != (_DWORD)v51)
        break;
      if (!*v48)
        goto LABEL_23;
LABEL_33:
      ++v48;
    }
    if (byte_1ACCB6333[v50] == byte_1ACCB6333[v51])
      goto LABEL_33;
    --v41;
  }
  while (v41);
  v40 = &qword_1EECAD260;
LABEL_23:
  v42 = *(_QWORD *)(v8 + 96);
  v43 = *(unsigned __int8 **)v8;
  v44 = v40[2];
  if (v44)
  {
    v45 = *(_QWORD *)v44;
    if (*(_QWORD *)v44)
    {
      if (*(int *)v45 >= 3 && *(_QWORD *)(v45 + 184))
      {
        v46 = v43 ? strlen(*(const char **)v8) & 0x3FFFFFFF : 0;
        v78 = *(_QWORD **)(v42 + 16);
        if (v78)
        {
          v79 = v46;
          do
          {
            v80 = v78[2];
            if (!*(_BYTE *)(v80 + 63) && (*(_BYTE *)(v80 + 49) & 0x10) == 0)
            {
              v81 = *(unsigned __int8 **)v8;
              if (*(_QWORD *)v80)
              {
                if (!v81)
                  goto LABEL_59;
                if (v46)
                {
                  v82 = v46 + 1;
                  v83 = *(_BYTE **)v80;
                  while (1)
                  {
                    v84 = *v83;
                    if (!*v83)
                      break;
                    LODWORD(v84) = byte_1ACCB6333[v84];
                    v85 = byte_1ACCB6333[*v81];
                    if ((_DWORD)v84 != v85)
                      goto LABEL_76;
                    ++v83;
                    ++v81;
                    if (--v82 <= 1)
                      goto LABEL_77;
                  }
                  v85 = byte_1ACCB6333[*v81];
LABEL_76:
                  if ((_DWORD)v84 != v85)
                    goto LABEL_59;
                }
LABEL_77:
                v87 = (_BYTE *)(*(_QWORD *)v80 + v79);
                if (*v87 == 95)
                {
                  v88 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v44 + 184))(v87 + 1);
                  v79 = v46;
                  if (v88)
                    *(_DWORD *)(v80 + 48) |= 0x1000u;
                }
                goto LABEL_59;
              }
              if (v81)
                v86 = -1;
              else
                v86 = 0;
              if (!v86)
                goto LABEL_77;
            }
LABEL_59:
            v78 = (_QWORD *)*v78;
          }
          while (v78);
        }
      }
    }
  }
  if (sub_1ACB57390(v42 + 8, v43, v8))
  {
    if (!*(_BYTE *)(v11 + 103) && !*(_BYTE *)(v11 + 104))
    {
      *(_BYTE *)(v11 + 103) = 1;
      if (*(int *)(v11 + 220) >= 1)
        *(_DWORD *)(v11 + 424) = 1;
      ++*(_DWORD *)(v11 + 432);
      *(_WORD *)(v11 + 436) = 0;
      v95 = *(_QWORD *)(v11 + 344);
      if (v95)
      {
        sub_1ACBCB308(v95, "out of memory", v89, v90, v91, v92, v93, v94, v97);
        for (j = *(_QWORD *)(v11 + 344); ; ++*(_DWORD *)(j + 48))
        {
          *(_DWORD *)(j + 24) = 7;
          j = *(_QWORD *)(j + 256);
          if (!j)
            break;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 344) = 0;
  }
}

void sub_1ACC08290(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  char v57;
  char v58;

  sub_1ACB66080(a1, a2, a3, 0, 0, 1, a5, a8, v57);
  v15 = *(_QWORD **)(a1 + 344);
  if (!v15)
    return;
  *((_BYTE *)v15 + 63) = 1;
  v16 = *(_QWORD *)a1;
  if (a4 && (v17 = *(const void **)a4) != 0)
  {
    v18 = *(unsigned int *)(a4 + 8);
    v19 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, v18 + 1);
    v20 = v19;
    if (v19)
    {
      memcpy(v19, v17, v18);
      *((_BYTE *)v20 + v18) = 0;
      if ((char)byte_1ACCB6548[*(unsigned __int8 *)v20] < 0)
      {
        v21 = 0;
        if (*(_BYTE *)v20 == 91)
          v22 = 93;
        else
          v22 = *(unsigned __int8 *)v20;
        for (i = 1; ; ++i)
        {
          v24 = i;
          v25 = *((unsigned __int8 *)v20 + i);
          if (v25 == v22)
          {
            ++i;
            LOBYTE(v25) = v22;
            if (*((unsigned __int8 *)v20 + v24 + 1) != v22)
              break;
          }
          *((_BYTE *)v20 + v21++) = v25;
        }
        *((_BYTE *)v20 + v21) = 0;
      }
    }
  }
  else
  {
    v20 = 0;
  }
  sub_1ACC009EC(a1, (uint64_t)v15, v20, v10, v11, v12, v13, v14);
  sub_1ACC009EC(a1, (uint64_t)v15, 0, v26, v27, v28, v29, v30);
  v36 = (const char *)*v15;
  if (*v15)
  {
    v37 = strlen((const char *)*v15);
    v38 = v37 + 1;
    if (v16)
    {
      v39 = (_QWORD *)sub_1ACBE1124(v16, v38);
      if (!v39)
        goto LABEL_22;
      goto LABEL_21;
    }
    v39 = (_QWORD *)sub_1ACB5D828(v37 + 1);
    if (v39)
LABEL_21:
      memcpy(v39, v36, v38);
  }
  else
  {
    v39 = 0;
  }
LABEL_22:
  sub_1ACC009EC(a1, (uint64_t)v15, v39, v31, v32, v33, v34, v35);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)a4 + *(_DWORD *)(a4 + 8) - *(_DWORD *)(a1 + 264);
  v40 = (_QWORD *)v15[9];
  if (v40)
  {
    v41 = v15[12];
    if (v41)
    {
      v42 = (uint64_t *)(*(_QWORD *)(v16 + 32) + 24);
      v43 = 0xFFFFFFFF00000000;
      do
      {
        v44 = *v42;
        v42 += 4;
        v43 += 0x100000000;
      }
      while (v44 != v41);
      v45 = v43 >> 32;
    }
    else
    {
      v45 = -32768;
    }
    v46 = *(_QWORD *)a1;
    v47 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
    if (v47)
    {
      if (!*(_BYTE *)(v46 + 197) && !*(_BYTE *)(a1 + 302))
      {
        v48 = v47(*(_QWORD *)(v46 + 536), 29, *v15, *v40, *(_QWORD *)(*(_QWORD *)(v46 + 32) + 32 * v45), *(_QWORD *)(a1 + 368));
        if (v48 == 1)
        {
          v55 = 23;
          v56 = "not authorized";
        }
        else
        {
          if ((v48 & 0xFFFFFFFD) == 0)
            return;
          v55 = 1;
          v56 = "authorizer malfunction";
        }
        sub_1ACBCB308(a1, v56, v49, v50, v51, v52, v53, v54, v58);
        *(_DWORD *)(a1 + 24) = v55;
      }
    }
  }
}

void sub_1ACC084E4(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(const void **)(a1 + 376);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 344);
    if (v3)
    {
      v4 = *(int *)(a1 + 384);
      v5 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, v4 + 1);
      v11 = v5;
      if (v5)
      {
        memcpy(v5, v2, v4);
        *((_BYTE *)v11 + v4) = 0;
      }
      sub_1ACC009EC(a1, v3, v11, v6, v7, v8, v9, v10);
    }
  }
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
}

uint64_t *sub_1ACC08564(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = result;
    if (!a3)
      goto LABEL_6;
    v5 = *result;
    if (*v4)
    {
      result = (uint64_t *)sub_1ACBE1124(v5, 0x18uLL);
      if (result)
      {
LABEL_5:
        v6 = v4[24];
        v4[24] = (uint64_t)result;
        *result = v6;
        result[1] = (uint64_t)a2;
        result[2] = (uint64_t)sub_1ACBF84C4;
LABEL_6:
        if (!*((_DWORD *)v4 + 12))
        {
          a2[1] = v4[50];
          v4[50] = (uint64_t)a2;
        }
        return result;
      }
    }
    else
    {
      result = (uint64_t *)sub_1ACB5D828(24);
      if (result)
        goto LABEL_5;
    }
    return sub_1ACBF84C4((_QWORD *)*v4, a2);
  }
  return result;
}

uint64_t sub_1ACC085EC(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  int v20;

  v10 = *a1;
  if (*a1)
  {
    v11 = sub_1ACBE1124(*a1, 0x30uLL);
    if (!v11)
      goto LABEL_4;
    goto LABEL_3;
  }
  v11 = sub_1ACB5D828(48);
  if (v11)
  {
LABEL_3:
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)v11 = 0u;
  }
LABEL_4:
  if (*(_BYTE *)(v10 + 103))
  {
    if (a3)
      sub_1ACC010B0((_QWORD *)v10, a3);
    if (a4)
      sub_1ACB7E704((_QWORD *)v10, a4, 1);
  }
  else
  {
    *(_QWORD *)(v11 + 8) = a3;
    *(_QWORD *)(v11 + 16) = a4;
    if (a2 && (v12 = *(const void **)a2) != 0)
    {
      v13 = *(unsigned int *)(a2 + 8);
      v14 = (_BYTE *)sub_1ACBE1124(*a1, v13 + 1);
      v15 = v14;
      if (v14)
      {
        memcpy(v14, v12, v13);
        v15[v13] = 0;
        if ((char)byte_1ACCB6548[*v15] < 0)
        {
          v16 = 0;
          if (*v15 == 91)
            v17 = 93;
          else
            v17 = *v15;
          for (i = 1; ; ++i)
          {
            v19 = i;
            v20 = v15[i];
            if (v20 == v17)
            {
              ++i;
              LOBYTE(v20) = v17;
              if (v15[v19 + 1] != v17)
                break;
            }
            v15[v16++] = v20;
          }
          v15[v16] = 0;
        }
      }
    }
    else
    {
      v15 = 0;
    }
    *(_QWORD *)v11 = v15;
    *(_BYTE *)(v11 + 40) = a5;
  }
  return v11;
}

_QWORD *sub_1ACC0874C(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t i;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;

  v8 = a2;
  if (!a3)
    return v8;
  v11 = *a1;
  if (a2 && (v12 = (_QWORD *)*a3) != 0)
  {
    v13 = *a2;
    if ((int)*a2 >= 1)
    {
      for (i = 0; i < v13; ++i)
      {
        for (j = 0; ; ++j)
        {
          v16 = *((unsigned __int8 *)v12 + j);
          v17 = *(unsigned __int8 *)(v8[6 * i + 2] + j);
          if ((_DWORD)v16 == (_DWORD)v17)
            break;
          if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
            goto LABEL_6;
LABEL_9:
          ;
        }
        if (*((_BYTE *)v12 + j))
          goto LABEL_9;
        sub_1ACBCB308((uint64_t)a1, "duplicate WITH table name: %s", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v12);
        v13 = *(_DWORD *)v8;
LABEL_6:
        ;
      }
    }
  }
  else
  {
    if (!a2)
    {
      if (v11)
      {
        v19 = (_OWORD *)sub_1ACBE1124(*a1, 0x40uLL);
        if (!v19)
          goto LABEL_22;
      }
      else
      {
        v19 = (_OWORD *)sub_1ACB5D828(64);
        if (!v19)
          goto LABEL_22;
      }
      v19[2] = 0u;
      v19[3] = 0u;
      *v19 = 0u;
      v19[1] = 0u;
      goto LABEL_22;
    }
    v13 = *a2;
  }
  v18 = 48 * v13 + 64;
  if (*(_QWORD *)(v11 + 512) <= (unint64_t)v8)
    goto LABEL_21;
  if (*(_QWORD *)(v11 + 496) > (unint64_t)v8)
  {
    if (*(_QWORD *)(v11 + 504) <= (unint64_t)v8)
    {
      v19 = v8;
      if (v18 <= *(unsigned __int16 *)(v11 + 438))
        goto LABEL_22;
    }
    goto LABEL_21;
  }
  v19 = v8;
  if (v18 >= 0x81)
LABEL_21:
    v19 = (_OWORD *)sub_1ACBE11D0(v11, v8, v18);
LABEL_22:
  if (*(_BYTE *)(v11 + 103))
  {
    v20 = (_QWORD *)a3[1];
    if (v20)
      sub_1ACC010B0((_QWORD *)v11, v20);
    v21 = a3[2];
    if (v21)
      sub_1ACB7E704((_QWORD *)v11, v21, 1);
    if (*a3)
      sub_1ACBE0F9C((_QWORD *)v11, (_QWORD *)*a3);
  }
  else
  {
    v22 = (*(_DWORD *)v19)++;
    v23 = &v19[3 * v22];
    v24 = *(_OWORD *)a3;
    v25 = *((_OWORD *)a3 + 2);
    v23[2] = *((_OWORD *)a3 + 1);
    v23[3] = v25;
    v23[1] = v24;
    v8 = v19;
  }
  sub_1ACBE0F9C((_QWORD *)v11, a3);
  return v8;
}

void sub_1ACC08940(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;

  v8 = a2[1];
  if (!v8)
    return;
  v9 = a3;
  if (!a3)
  {
LABEL_11:
    sub_1ACBCB308((uint64_t)a1, "no such window: %s", a3, a4, a5, a6, a7, a8, a2[1]);
    return;
  }
  v11 = (_QWORD *)*a1;
LABEL_4:
  for (i = 0; ; ++i)
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v9 + i);
    v14 = *(unsigned __int8 *)(v8 + i);
    if ((_DWORD)v13 == (_DWORD)v14)
      break;
    if (byte_1ACCB6333[v13] != byte_1ACCB6333[v14])
    {
      v9 = *(_QWORD *)(v9 + 64);
      if (v9)
        goto LABEL_4;
      goto LABEL_11;
    }
LABEL_6:
    ;
  }
  if (*(_BYTE *)(*(_QWORD *)v9 + i))
    goto LABEL_6;
  if (a2[2])
  {
    v15 = "PARTITION clause";
LABEL_14:
    sub_1ACBCB308((uint64_t)a1, "cannot override %s of window: %s", a3, a4, a5, a6, a7, a8, (char)v15);
    return;
  }
  if (*(_QWORD *)(v9 + 24) && a2[3])
  {
    v15 = "ORDER BY clause";
    goto LABEL_14;
  }
  if (!*(_BYTE *)(v9 + 35))
  {
    v15 = "frame specification";
    goto LABEL_14;
  }
  a2[2] = sub_1ACB8B6B8(*a1, *(_QWORD **)(v9 + 16), 0);
  v16 = *(_QWORD **)(v9 + 24);
  if (v16)
    a2[3] = sub_1ACB8B6B8((uint64_t)v11, v16, 0);
  v17 = (_QWORD *)a2[1];
  if (v17)
    sub_1ACBE0F9C(v11, v17);
  a2[1] = 0;
}

_QWORD *sub_1ACC08A6C(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  const void *v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;

  if (a2)
  {
    a2[2] = a3;
    a2[3] = a4;
    if (a5)
    {
      v8 = *(const void **)a5;
      if (*(_QWORD *)a5)
      {
        v9 = *(unsigned int *)(a5 + 8);
        v10 = (_BYTE *)sub_1ACBE1124(*a1, v9 + 1);
        v11 = v10;
        if (v10)
        {
          memcpy(v10, v8, v9);
          v11[v9] = 0;
        }
        a2[1] = v11;
      }
      else
      {
        a2[1] = 0;
      }
    }
  }
  else
  {
    if (a3)
      sub_1ACC010B0((_QWORD *)*a1, a3);
    if (a4)
      sub_1ACC010B0((_QWORD *)*a1, a4);
  }
  return a2;
}

uint64_t sub_1ACC08B10(uint64_t *a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v10;
  char v12;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  char v22;

  v8 = a7;
  v10 = a5;
  v12 = a3;
  v15 = a2 == 0;
  if ((_DWORD)a3 == 85 && (_DWORD)a5 == 88 || (_DWORD)a3 == 86 && ((_DWORD)a5 == 88 || (_DWORD)a5 == 85))
  {
    sub_1ACBCB308((uint64_t)a1, "unsupported frame specification", a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8, v22);
    goto LABEL_4;
  }
  v17 = *a1;
  if (!*a1)
  {
    v18 = sub_1ACB5D828(144);
    goto LABEL_26;
  }
  if (*(unsigned __int16 *)(v17 + 436) <= 0x8Fu)
  {
    if (*(_DWORD *)(v17 + 432))
    {
      if (*(_BYTE *)(v17 + 103))
        goto LABEL_4;
    }
    else
    {
      ++*(_DWORD *)(v17 + 452);
    }
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(v17 + 472);
  if (v16)
  {
    v19 = (_QWORD *)(v17 + 472);
LABEL_23:
    *v19 = *(_QWORD *)v16;
    ++*(_DWORD *)(v17 + 448);
LABEL_27:
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)v16 = 0u;
    if (a2)
      v20 = a2;
    else
      v20 = 89;
    *(_BYTE *)(v16 + 32) = v20;
    *(_BYTE *)(v16 + 33) = v12;
    *(_BYTE *)(v16 + 34) = v10;
    if (!v8)
      v8 = (*(unsigned __int8 *)(*a1 + 96) << 30 >> 31) & 0x42;
    *(_BYTE *)(v16 + 36) = v8;
    *(_BYTE *)(v16 + 35) = v15;
    *(_QWORD *)(v16 + 48) = sub_1ACC396F8(a1, (uint64_t)a6);
    *(_QWORD *)(v16 + 40) = sub_1ACC396F8(a1, (uint64_t)a4);
    return v16;
  }
  v16 = *(_QWORD *)(v17 + 464);
  if (v16)
  {
    v19 = (_QWORD *)(v17 + 464);
    goto LABEL_23;
  }
  ++*(_DWORD *)(v17 + 456);
LABEL_25:
  v18 = sub_1ACBE1300(v17, 144);
LABEL_26:
  v16 = v18;
  if (v18)
    goto LABEL_27;
LABEL_4:
  if (a6)
    sub_1ACBF8348((_QWORD *)*a1, a6);
  if (a4)
    sub_1ACBF8348((_QWORD *)*a1, a4);
  return 0;
}

uint64_t sub_1ACC08CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
    return sub_1ACBFF5AC(a1, a2, 0, 0, 0, a6, a7, a8);
  *(_DWORD *)(a1 + 144) = result + 1;
  v10 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
  *(_BYTE *)v10 = a2;
  *(_OWORD *)(v10 + 1) = 0u;
  *(_OWORD *)(v10 + 17) = 0u;
  *(_QWORD *)(v10 + 32) = 0;
  return result;
}

uint64_t sub_1ACC08D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
    return sub_1ACBFF5AC(a1, a2, a3, 0, 0, a6, a7, a8);
  *(_DWORD *)(a1 + 144) = result + 1;
  v10 = *(_QWORD *)(a1 + 136) + 40 * (int)result;
  *(_BYTE *)v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_BYTE *)(v10 + 1) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  return result;
}

uint64_t sub_1ACC08D80(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (*(_QWORD *)(result + 16))
  {
    v5 = result;
    result = sub_1ACB7B84C();
    if ((_DWORD)result != (_DWORD)a3)
    {
      v9 = result;
      if (a2 && ((a2[6] & 0x40) != 0 || *a2 == 176))
        v10 = 80;
      else
        v10 = 81;
      result = *(_QWORD *)(v5 + 16);
      v11 = *(_DWORD *)(result + 144);
      if (*(_DWORD *)(result + 148) <= v11)
      {
        return sub_1ACBFF5AC(result, v10, v9, a3, 0, v6, v7, v8);
      }
      else
      {
        *(_DWORD *)(result + 144) = v11 + 1;
        v12 = *(_QWORD *)(result + 136) + 40 * v11;
        *(_BYTE *)v12 = v10;
        *(_WORD *)(v12 + 2) = 0;
        *(_DWORD *)(v12 + 4) = v9;
        *(_DWORD *)(v12 + 8) = a3;
        *(_BYTE *)(v12 + 1) = 0;
        *(_QWORD *)(v12 + 12) = 0;
        *(_QWORD *)(v12 + 28) = 0;
        *(_QWORD *)(v12 + 20) = 0;
        *(_DWORD *)(v12 + 36) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC08E48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;

  v8 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v8)
    return sub_1ACBFF5AC(result, 9, 0, a2, 0, a6, a7, a8);
  *(_DWORD *)(result + 144) = v8 + 1;
  v9 = *(_QWORD *)(result + 136) + 40 * v8;
  *(_QWORD *)v9 = 9;
  *(_DWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 12) = 0;
  *(_QWORD *)(v9 + 28) = 0;
  *(_QWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 36) = 0;
  return result;
}

void sub_1ACC08EA0(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  if (a2 != 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * a2 + 8) + 17))
      sub_1ACC08F44(a1, a2, a3, a4, a5);
  }
}

_QWORD *sub_1ACC08ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = (_QWORD *)sub_1ACC09130((_DWORD *)a1, a2);
  if (result)
  {
    if (*(_BYTE *)(*(_QWORD *)v2 + 103))
    {
      if (!*(_QWORD *)(*(_QWORD *)v2 + 816) && (*(_DWORD *)result)-- == 1)
        return sub_1ACBF0674((_QWORD *)result[2], result);
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 136) + 40 * *(int *)(v2 + 144);
      *(_BYTE *)(v5 - 39) = -8;
      *(_QWORD *)(v5 - 24) = result;
    }
  }
  return result;
}

void sub_1ACC08F44(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  char v6;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  BOOL *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  char v29;

  v6 = a4;
  if (*(_QWORD *)(a1 + 168))
    v9 = *(_QWORD *)(a1 + 168);
  else
    v9 = a1;
  v10 = *(_DWORD *)(v9 + 148);
  v11 = *(_QWORD **)(v9 + 152);
  if (v10 < 1)
  {
    v14 = 24 * v10 + 24;
    v15 = *(_QWORD *)v9;
    v16 = v14;
    if (!v11)
    {
      v17 = sub_1ACBE1124(*(_QWORD *)v9, v14);
      *(_QWORD *)(v9 + 152) = v17;
      if (v17)
        goto LABEL_20;
      goto LABEL_23;
    }
  }
  else
  {
    v12 = (BOOL *)(v11 + 1);
    v13 = *(unsigned int *)(v9 + 148);
    do
    {
      if (*((_DWORD *)v12 - 2) == a2 && *((_DWORD *)v12 - 1) == a3)
      {
        *v12 = (*v12 | a4) != 0;
        return;
      }
      v12 += 24;
      --v13;
    }
    while (v13);
    v14 = 24 * v10 + 24;
    v15 = *(_QWORD *)v9;
    v16 = v14;
  }
  if (*(_QWORD *)(v15 + 512) > (unint64_t)v11)
  {
    if (*(_QWORD *)(v15 + 496) <= (unint64_t)v11)
    {
      if (v14 < 0x81)
      {
LABEL_16:
        v17 = *(_QWORD *)(v9 + 152);
LABEL_19:
        *(_QWORD *)(v9 + 152) = v17;
LABEL_20:
        v18 = *(_DWORD *)(v9 + 148);
        *(_DWORD *)(v9 + 148) = v18 + 1;
        v19 = v17 + 24 * v18;
        *(_DWORD *)v19 = a2;
        *(_DWORD *)(v19 + 4) = a3;
        *(_BYTE *)(v19 + 8) = v6;
        *(_QWORD *)(v19 + 16) = a5;
        return;
      }
    }
    else if (*(_QWORD *)(v15 + 504) <= (unint64_t)v11 && v16 <= *(unsigned __int16 *)(v15 + 438))
    {
      goto LABEL_16;
    }
  }
  v17 = sub_1ACBE11D0(v15, *(_QWORD **)(v9 + 152), v16);
  if (v17)
    goto LABEL_19;
  sub_1ACBE0F9C((_QWORD *)v15, v11);
  *(_QWORD *)(v9 + 152) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 148) = 0;
  v26 = *(_QWORD *)v9;
  if (!*(_BYTE *)(*(_QWORD *)v9 + 103) && !*(_BYTE *)(v26 + 104))
  {
    *(_BYTE *)(v26 + 103) = 1;
    if (*(int *)(v26 + 220) >= 1)
      *(_DWORD *)(v26 + 424) = 1;
    ++*(_DWORD *)(v26 + 432);
    *(_WORD *)(v26 + 436) = 0;
    v27 = *(_QWORD *)(v26 + 344);
    if (v27)
    {
      sub_1ACBCB308(v27, "out of memory", v20, v21, v22, v23, v24, v25, v29);
      for (i = *(_QWORD *)(v26 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
}

uint64_t sub_1ACC09130(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1[12])
    return 0;
  v6 = *(unsigned __int16 *)(a2 + 96);
  v7 = *(_QWORD *)a1;
  if ((*(_WORD *)(a2 + 99) & 8) != 0)
  {
    v8 = *(unsigned __int16 *)(a2 + 94);
    v9 = v6 - v8;
  }
  else
  {
    v8 = *(unsigned __int16 *)(a2 + 96);
    v9 = 0;
  }
  v2 = sub_1ACC092C0(v7, v8, v9);
  if (v2)
  {
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v12 = *(_QWORD *)(a2 + 64);
        v13 = *(char **)(v12 + 8 * i);
        if (v13 == "BINARY")
        {
          v11 = 0;
        }
        else
        {
          v14 = *(unsigned __int8 *)(*(_QWORD *)a1 + 100);
          v15 = *(unsigned __int8 *)(*(_QWORD *)a1 + 197);
          v16 = sub_1ACBFC650(*(_QWORD *)a1, *(unsigned __int8 *)(*(_QWORD *)a1 + 100), *(char **)(v12 + 8 * i), v15);
          v11 = (uint64_t)v16;
          if (!v15 && (!v16 || !v16[3]))
            v11 = sub_1ACC01130((uint64_t)a1, v14, (uint64_t)v16, v13, v17, v18, v19, v20);
        }
        *(_QWORD *)(v2 + 32 + 8 * i) = v11;
        *(_BYTE *)(*(_QWORD *)(v2 + 24) + i) = *(_BYTE *)(*(_QWORD *)(a2 + 56) + i);
      }
    }
    if (a1[12])
    {
      if ((*(_WORD *)(a2 + 99) & 0x100) == 0)
      {
        *(_WORD *)(a2 + 99) |= 0x100u;
        a1[6] = 513;
      }
      if ((*(_DWORD *)v2)-- == 1)
        sub_1ACBF0674(*(_QWORD **)(v2 + 16), (_QWORD *)v2);
      return 0;
    }
  }
  return v2;
}

_QWORD *sub_1ACC09284(_QWORD *result, uint64_t a2, char a3)
{
  uint64_t v3;

  if (*(_BYTE *)(*result + 103))
    return sub_1ACB693B4((_QWORD *)*result, a3, a2);
  v3 = result[17] + 40 * *((int *)result + 36);
  *(_BYTE *)(v3 - 39) = a3;
  *(_QWORD *)(v3 - 24) = a2;
  return result;
}

uint64_t sub_1ACC092C0(uint64_t a1, int a2, int a3)
{
  __int16 v3;
  int v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = a2;
  v5 = a3 + a2;
  v6 = 9 * (a3 + a2) - 8;
  v7 = sub_1ACBE1124(a1, v6 + 40);
  if (v7)
  {
    v14 = v7;
    *(_WORD *)(v7 + 6) = v3;
    *(_WORD *)(v7 + 8) = v5;
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(a1 + 100);
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = v7 + 8 * v5 + 32;
    *(_DWORD *)v7 = 1;
    bzero((void *)(v7 + 40), v6);
  }
  else
  {
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
      return 0;
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v16 = *(_QWORD *)(a1 + 344);
    if (!v16)
      return 0;
    sub_1ACBCB308(v16, "out of memory", v8, v9, v10, v11, v12, v13, v19);
    v17 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)(v17 + 24) = 7;
    v18 = *(_QWORD *)(v17 + 256);
    if (!v18)
    {
      return 0;
    }
    else
    {
      v14 = 0;
      do
      {
        ++*(_DWORD *)(v18 + 48);
        *(_DWORD *)(v18 + 24) = 7;
        v18 = *(_QWORD *)(v18 + 256);
      }
      while (v18);
    }
  }
  return v14;
}

uint64_t sub_1ACC093C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 96);
  if (!v3)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v7 = *(unsigned int *)(v3 + 8);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = *(_DWORD *)(a1 + 64);
      if (v8)
      {
        if ((_DWORD)v7 != v8 - 1)
          goto LABEL_4;
        v7 = 0xFFFFFFFFLL;
      }
      if (!sub_1ACC0ABAC(0, a2, *(unsigned __int8 **)v3, v7))
        break;
    }
LABEL_4:
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 0xFFFFFFFFLL;
  }
  v9 = sub_1ACB92644(a2);
  if (v9 <= 0x41)
  {
    if (*(_BYTE *)(v3 + 21) == 65)
      goto LABEL_16;
    goto LABEL_4;
  }
  v13 = *(unsigned __int8 *)(v3 + 21);
  if (v9 == 66)
  {
    if (v13 == 66)
      goto LABEL_16;
    goto LABEL_4;
  }
  if (v13 != 67)
    goto LABEL_4;
LABEL_16:
  v14 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + 20))
  {
    v15 = *(unsigned int *)(v3 + 12);
    v16 = *(_DWORD *)(v14 + 144);
    v17 = (v16 + 3);
    if (*(_DWORD *)(v14 + 148) <= v16)
    {
      sub_1ACBFF5AC(*(_QWORD *)(a1 + 16), 20, v15, v17, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v16 + 1;
      v18 = *(_QWORD *)(v14 + 136) + 40 * v16;
      *(_DWORD *)v18 = 20;
      *(_DWORD *)(v18 + 4) = v15;
      *(_DWORD *)(v18 + 8) = v17;
      *(_DWORD *)(v18 + 12) = a3;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 16) = 0;
    }
    v24 = *(unsigned int *)(v3 + 12);
    v25 = *(unsigned int *)(v3 + 16);
    v26 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v26)
    {
      sub_1ACBFF5AC(v14, 94, v24, v25, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v26 + 1;
      v27 = *(_QWORD *)(v14 + 136) + 40 * v26;
      *(_DWORD *)v27 = 94;
      *(_DWORD *)(v27 + 4) = v24;
      *(_DWORD *)(v27 + 8) = v25;
      *(_DWORD *)(v27 + 12) = a3;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0;
      *(_QWORD *)(v27 + 16) = 0;
    }
    v28 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v28)
    {
      sub_1ACBFF5AC(v14, 9, 0, 0, 0, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v28 + 1;
      v29 = *(_QWORD *)(v14 + 136) + 40 * v28;
      *(_BYTE *)v29 = 9;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 17) = 0u;
      *(_QWORD *)(v29 + 32) = 0;
    }
    v30 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    sub_1ACC08D80(a1, a2, a3);
    *(_QWORD *)(a1 + 96) = v30;
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
      dword_1EECAD288 = *(_DWORD *)(v14 + 144);
    else
      *(_DWORD *)(*(_QWORD *)(v14 + 136) + 40 * (v16 + 2) + 8) = *(_DWORD *)(v14 + 144);
  }
  else
  {
    v20 = *(unsigned int *)(v3 + 12);
    v21 = *(unsigned int *)(v3 + 16);
    v22 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v22)
    {
      sub_1ACBFF5AC(*(_QWORD *)(a1 + 16), 94, v20, v21, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v22 + 1;
      v23 = *(_QWORD *)(v14 + 136) + 40 * v22;
      *(_DWORD *)v23 = 94;
      *(_DWORD *)(v23 + 4) = v20;
      *(_DWORD *)(v23 + 8) = v21;
      *(_DWORD *)(v23 + 12) = a3;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0;
      *(_QWORD *)(v23 + 16) = 0;
    }
  }
  return a3;
}

uint64_t sub_1ACC09640(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  int16x8_t v10;
  int8x16_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16x2_t v21;

  if ((a2 & 0x80000000) == 0 && (*(_DWORD *)(a1 + 48) & 0x20) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (a2)
    {
      if (a2 >= 0x11)
      {
        v5 = a2 & 0xF;
        if ((a2 & 0xF) == 0)
          v5 = 16;
        v3 = a2 - v5;
        v6 = v2 + 142;
        v7 = 0uLL;
        v8.i64[0] = 0x1000100010001;
        v8.i64[1] = 0x1000100010001;
        v9 = v3;
        v10 = 0uLL;
        do
        {
          v11 = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 64), (int8x16_t)xmmword_1ACCBDDC0);
          v11.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
          v12.i32[0] = vzip1q_s16(*(int16x8_t *)(v6 - 128), *(int16x8_t *)(v6 - 112)).u32[0];
          v12.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
          v12.i64[1] = v11.i64[1];
          v13 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v6 + 96), (int8x16_t)xmmword_1ACCBDDB0);
          v21 = *(int8x16x2_t *)(v6 + 32);
          v14 = vqtbl2q_s8(*(int8x16x2_t *)(v6 + 64), (int8x16_t)xmmword_1ACCBDDC0);
          v16 = *(int16x8_t *)v6;
          v15 = *(int16x8_t *)(v6 + 16);
          v6 += 256;
          v14.i32[3] = v13.i32[3];
          v13.i32[0] = vzip1q_s16(v16, v15).u32[0];
          v13.i32[1] = vqtbl2q_s8(v21, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
          v13.i64[1] = v14.i64[1];
          v7 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v12, 5uLL)), v7);
          v10 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v13, 5uLL)), v10);
          v9 -= 16;
        }
        while (v9);
        v4 = vaddvq_s16(vaddq_s16(v10, v7));
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
      v17 = (unsigned __int16 *)(v2 + 16 * v3 + 14);
      v18 = a2 - v3;
      do
      {
        v19 = *v17;
        v17 += 8;
        v4 += ((v19 >> 5) & 1) == 0;
        --v18;
      }
      while (v18);
    }
    else
    {
      v4 = 0;
    }
    if ((*(_WORD *)(v2 + 16 * a2 + 14) & 0x20) == 0)
      return v4;
    LOWORD(a2) = a2 - v4 + *(_WORD *)(a1 + 56);
  }
  return (__int16)a2;
}

uint64_t sub_1ACC09780(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  _DWORD *v24;
  unsigned __int8 *v25;

  v11 = result;
  v12 = *(_QWORD *)(result + 16);
  v13 = *(_DWORD *)(result + 48);
  v14 = *(_DWORD *)(result + 64);
  v15 = (v14 - 1);
  if (v14 < 1)
  {
    v16 = 0;
    v18 = *(unsigned __int16 *)(a3 + 12);
    if (!*(_WORD *)(a3 + 12))
      goto LABEL_9;
  }
  else
  {
    v16 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v16)
    {
      result = sub_1ACBFF5AC(*(_QWORD *)(result + 16), 20, v15, 0, a4, a6, a7, a8);
      v16 = result;
      v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12))
      {
LABEL_9:
        v19 = 0;
        v20 = *(_QWORD *)v11;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v16 + 1;
      v17 = *(_QWORD *)(v12 + 136) + 40 * v16;
      *(_DWORD *)v17 = 20;
      *(_DWORD *)(v17 + 4) = v15;
      *(_DWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 12) = a4;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12))
        goto LABEL_9;
    }
  }
  if (*(_BYTE *)(a2 + 63))
    goto LABEL_9;
  v24 = *(_DWORD **)(a2 + 80);
  if (!v24 || *v24 < v18)
    goto LABEL_9;
  v25 = *(unsigned __int8 **)&v24[6 * (v18 - 1) + 2];
  v20 = *(_QWORD *)v11;
  if (v25)
  {
    result = (uint64_t)sub_1ACB8B290(*(_QWORD *)v11, v25, 0, 0);
    v19 = (unsigned __int8 *)result;
  }
  else
  {
    v19 = 0;
  }
LABEL_10:
  if (!*(_BYTE *)(v20 + 103))
    result = sub_1ACC08D80(v11, v19, a4);
  if (v19)
    result = (uint64_t)sub_1ACBF8348((_QWORD *)v20, v19);
  v22 = *(char *)(a3 + 9);
  v21 = a3 + 9;
  if (v22 >= 66)
    result = sub_1ACBA86CC((uint64_t *)v12, 96, a4, 1, 0, v21, 1, a8);
  if (v16)
  {
    if (*(_BYTE *)(*(_QWORD *)v12 + 103))
      v23 = &byte_1EECAD280;
    else
      v23 = (char *)(*(_QWORD *)(v12 + 136) + 40 * v16);
    *((_DWORD *)v23 + 2) = *(_DWORD *)(v12 + 144);
  }
  if (*(_DWORD *)(v11 + 48) > v13)
    *(_DWORD *)(*(_QWORD *)v11 + 84) = -1;
  return result;
}

BOOL sub_1ACC09940(uint64_t a1)
{
  int v1;

  while (1)
  {
    v1 = *(_DWORD *)(a1 + 4);
    if ((v1 & 0x82000) == 0)
      break;
    if ((v1 & 0x80000) != 0)
      a1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    else
      a1 = *(_QWORD *)(a1 + 16);
  }
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + 4) == 0;
}

uint64_t *sub_1ACC09984(uint64_t *result, char *__s, int a3, uint64_t a4)
{
  uint64_t *v7;
  int v8;
  double *v9;
  uint64_t v10;
  double v11;

  if (__s)
  {
    v7 = result;
    v11 = 0.0;
    v8 = strlen(__s);
    sub_1ACBA6B1C((unsigned __int8 *)__s, &v11, v8 & 0x3FFFFFFF, 1);
    if (a3)
      v11 = -v11;
    v9 = (double *)sub_1ACBE1124(*v7, 8uLL);
    if (v9)
      *v9 = v11;
    return (uint64_t *)sub_1ACBA86CC(v7, 153, 0, a4, 0, (uint64_t)v9, 4294967284, v10);
  }
  return result;
}

uint64_t sub_1ACC09A28(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int128 v12;

  v4 = a2;
  if (!a2)
    goto LABEL_12;
  while (1)
  {
    v6 = *((_DWORD *)v4 + 1);
    if ((v6 & 0x82000) == 0)
      break;
    if ((v6 & 0x80000) != 0)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 4) + 8);
      if (!v4)
        goto LABEL_12;
    }
    else
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      if (!v4)
        goto LABEL_12;
    }
  }
  if (*(_BYTE *)(a1 + 35)
    && *v4 != 176
    && (v11[3] = 0,
        v12 = 0u,
        v11[0] = 0,
        WORD2(v12) = 2,
        v11[1] = sub_1ACB8B0F4,
        v11[2] = sub_1ACC0B708,
        sub_1ACC0B714((uint64_t)v11, (uint64_t)v4),
        WORD2(v12)))
  {
    *a3 = 0;
    return sub_1ACC09B6C((_QWORD **)a1, v4, 0xFFFFFFFFLL);
  }
  else
  {
LABEL_12:
    if (*(_BYTE *)(a1 + 31))
    {
      v8 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v8;
      v9 = *(unsigned int *)(a1 + 4 * v8 + 224);
    }
    else
    {
      v9 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v9;
    }
    result = sub_1ACB7B84C(a1, v4, v9);
    if ((_DWORD)result != (_DWORD)v9 && (_DWORD)v9)
    {
      v10 = *(unsigned __int8 *)(a1 + 31);
      if (v10 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v10 + 1;
        *(_DWORD *)(a1 + 4 * v10 + 224) = v9;
      }
      LODWORD(v9) = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1ACC09B6C(_QWORD **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v3 = a3;
  v6 = (int *)a1[11];
  if ((a3 & 0x80000000) == 0 || !v6 || *v6 < 1)
  {
LABEL_9:
    if (a2)
    {
      v9 = sub_1ACB8B290((uint64_t)*a1, a2, 0, 0);
      a2 = (unsigned __int8 *)v9;
      if (v9)
      {
        if ((v9[1] & 8) != 0)
        {
          v18 = a1[2];
          v19 = *((_DWORD *)v18 + 36);
          if (*((_DWORD *)v18 + 37) <= v19)
          {
            v19 = sub_1ACBFF5AC((uint64_t)a1[2], 15, 0, 0, 0, v10, v11, v12);
          }
          else
          {
            *((_DWORD *)v18 + 36) = v19 + 1;
            v20 = v18[17] + 40 * v19;
            *(_BYTE *)v20 = 15;
            *(_OWORD *)(v20 + 1) = 0u;
            *(_OWORD *)(v20 + 17) = 0u;
            *(_QWORD *)(v20 + 32) = 0;
          }
          *((_BYTE *)a1 + 35) = 0;
          if (!*((_BYTE *)*a1 + 103))
          {
            if ((v3 & 0x80000000) != 0)
            {
              v3 = (*((_DWORD *)a1 + 14) + 1);
              *((_DWORD *)a1 + 14) = v3;
            }
            if (a1[2])
            {
              v21 = sub_1ACB7B84C(a1, a2, v3);
              if ((_DWORD)v21 != (_DWORD)v3)
              {
                v25 = v21;
                v26 = 80;
                if ((a2[6] & 0x40) == 0)
                {
                  if (*a2 == 176)
                    v26 = 80;
                  else
                    v26 = 81;
                }
                v27 = (uint64_t)a1[2];
                v28 = *(_DWORD *)(v27 + 144);
                if (*(_DWORD *)(v27 + 148) <= v28)
                {
                  sub_1ACBFF5AC(v27, v26, v25, v3, 0, v22, v23, v24);
                }
                else
                {
                  *(_DWORD *)(v27 + 144) = v28 + 1;
                  v29 = *(_QWORD *)(v27 + 136) + 40 * v28;
                  *(_BYTE *)v29 = v26;
                  *(_WORD *)(v29 + 2) = 0;
                  *(_DWORD *)(v29 + 4) = v25;
                  *(_DWORD *)(v29 + 8) = v3;
                  *(_BYTE *)(v29 + 1) = 0;
                  *(_QWORD *)(v29 + 12) = 0;
                  *(_QWORD *)(v29 + 28) = 0;
                  *(_QWORD *)(v29 + 20) = 0;
                  *(_DWORD *)(v29 + 36) = 0;
                }
              }
            }
          }
          *((_BYTE *)a1 + 35) = 1;
          sub_1ACBF8348(*a1, a2);
          if (*(_BYTE *)(*v18 + 103))
            dword_1EECAD288 = *((_DWORD *)v18 + 36);
          else
            *(_DWORD *)(v18[17] + 40 * v19 + 8) = *((_DWORD *)v18 + 36);
          return v3;
        }
      }
    }
    if (v6)
    {
      v13 = *v6;
      if (v6[1] > *v6)
      {
        *v6 = v13 + 1;
        v14 = &v6[6 * v13];
        *((_QWORD *)v14 + 2) = 0;
        *((_QWORD *)v14 + 3) = 0;
        *((_QWORD *)v14 + 1) = a2;
        goto LABEL_18;
      }
      v15 = sub_1ACC2D4F4((uint64_t)*a1, v6, a2);
    }
    else
    {
      v15 = (int *)sub_1ACC2D490(*a1, a2);
    }
    v6 = v15;
    if (!v15)
    {
LABEL_21:
      a1[11] = v6;
      return v3;
    }
LABEL_18:
    v16 = *v6 - 1;
    *(_WORD *)((char *)&v6[6 * v16 + 6] + 1) = *(_WORD *)((_BYTE *)&v6[6 * v16 + 6] + 1) & 0xFFF7 | (8 * (v3 >> 31));
    if ((v3 & 0x80000000) != 0)
    {
      v3 = (*((_DWORD *)a1 + 14) + 1);
      *((_DWORD *)a1 + 14) = v3;
    }
    v6[6 * v16 + 7] = v3;
    goto LABEL_21;
  }
  v7 = *v6 + 1;
  v8 = (unsigned int *)(v6 + 7);
  while ((*(_WORD *)((_BYTE *)v8 - 3) & 8) == 0
       || sub_1ACC0ABAC(0, *(unsigned __int8 **)(v8 - 5), a2, 0xFFFFFFFFLL))
  {
    --v7;
    v8 += 6;
    if (v7 < 2)
      goto LABEL_9;
  }
  return *v8;
}

uint64_t sub_1ACC09E24(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  _OWORD v40[5];

  v8 = a4;
  v11 = *(uint64_t **)(a1 + 16);
  switch(a3)
  {
    case 0:
      v12 = *(unsigned int *)a2;
      v13 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 68) = v13 - 1;
      sub_1ACC08D80(a1, a2[1], a4);
      if ((int)v12 >= 2)
      {
        v17 = a2 + 4;
        v18 = v12 - 1;
        do
        {
          v21 = *((_DWORD *)v11 + 36);
          if (*((_DWORD *)v11 + 37) > v21)
          {
            *((_DWORD *)v11 + 36) = v21 + 1;
            v19 = v11[17] + 40 * v21;
            *(_DWORD *)v19 = 51;
            *(_DWORD *)(v19 + 4) = v8;
            *(_DWORD *)(v19 + 8) = v13 - 1;
            *(_QWORD *)(v19 + 12) = 0;
            *(_QWORD *)(v19 + 28) = 0;
            *(_QWORD *)(v19 + 20) = 0;
            *(_DWORD *)(v19 + 36) = 0;
          }
          else
          {
            sub_1ACBFF5AC((uint64_t)v11, 51, v8, (v13 - 1), 0, v14, v15, v16);
          }
          v20 = *v17;
          v17 += 3;
          sub_1ACC08D80(a1, v20, v8);
          --v18;
        }
        while (v18);
      }
      if (*(_BYTE *)(*v11 + 103))
        v32 = &byte_1EECAD280;
      else
        v32 = (char *)(v11[17] + 40 * *((int *)v11 + 36) - 40);
      if (*v32 == 80)
      {
        v35 = *((_DWORD *)v11 + 36);
        v36 = __OFSUB__(v35, 1);
        v37 = v35 - 1;
        if (v37 < 0 == v36)
          *(_WORD *)(v11[17] + 40 * v37 + 2) = 1;
      }
      v38 = v11[3];
      v39 = -v13;
      if (*(_DWORD *)(v38 + 68) + *(_DWORD *)(v38 + 72) < 0)
        sub_1ACC0D5D4(v38, (uint64_t)v11, v39);
      else
        *(_DWORD *)(*(_QWORD *)(v38 + 80) + 4 * v39) = *((_DWORD *)v11 + 36);
      return v8;
    case 1:
      v22 = a2[4];
      if (*v22 == 167)
      {
        v23 = sub_1ACC0BA94((uint64_t)a2[1], *((unsigned int *)v22 + 11), 1);
LABEL_12:
        v24 = v23;
        v25 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) > v25)
        {
          *((_DWORD *)v11 + 36) = v25 + 1;
          v26 = v11[17] + 40 * v25;
          *(_DWORD *)v26 = 71;
          *(_DWORD *)(v26 + 4) = v23;
LABEL_14:
          *(_DWORD *)(v26 + 8) = v8;
          *(_QWORD *)(v26 + 12) = 0;
          *(_QWORD *)(v26 + 28) = 0;
          *(_QWORD *)(v26 + 20) = 0;
          *(_DWORD *)(v26 + 36) = 0;
          return v8;
        }
        v27 = (uint64_t)v11;
        v28 = 71;
      }
      else
      {
        v34 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) > v34)
        {
          *((_DWORD *)v11 + 36) = v34 + 1;
          v26 = v11[17] + 40 * v34;
          *(_QWORD *)v26 = 75;
          goto LABEL_14;
        }
        v27 = *(_QWORD *)(a1 + 16);
        v28 = 75;
        v24 = 0;
      }
      sub_1ACBFF5AC(v27, v28, v24, v8, 0, a6, a7, a8);
      return v8;
    case 2:
      v23 = sub_1ACC0B9EC(a1, a2[1], a2[4], 0xFFFFFFFFLL);
      goto LABEL_12;
    case 3:
      v23 = sub_1ACC0ABAC(0, a2[1], a2[4], 0xFFFFFFFFLL);
      goto LABEL_12;
    case 4:
      v29 = sub_1ACB92644(a2[1]);
      if (v29 >= 65)
        v31 = off_1E5C74458[v29 - 65];
      else
        v31 = "none";
      sub_1ACBA86CC(v11, 117, 0, v8, 0, (uint64_t)v31, 0, v30);
      return v8;
    case 5:
      memset(&v40[3], 0, 32);
      memset(v40, 0, 32);
      LOBYTE(v40[0]) = -99;
      v40[2] = (unint64_t)a2;
      return sub_1ACB7B84C(a1, v40, a4);
    default:
      return sub_1ACB7B84C(a1, a2[1], a4);
  }
}

void sub_1ACC0A168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a2 + 7) & 0x40) != 0
    && ((*(_BYTE *)(a3 + 6) & 8) != 0 || (*(_BYTE *)(*(_QWORD *)a1 + 48) & 0x80) == 0))
  {
    sub_1ACBCB308(a1, "unsafe use of %#T()", a3, a4, a5, a6, a7, a8, a2);
  }
}

uint64_t sub_1ACC0A1AC(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 1)
  {
    if (*(_BYTE *)(a1 + 31))
    {
      v2 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v2;
      return *(unsigned int *)(a1 + 4 * v2 + 224);
    }
    else
    {
      v8 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v8;
      return v8;
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = v4 - a2;
    if (v4 >= a2)
    {
      v7 = *(unsigned int *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v5;
      *(_DWORD *)(a1 + 44) = v7 + a2;
      return v7;
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 56) = v6 + a2;
      return (v6 + 1);
    }
  }
}

uint64_t sub_1ACC0A21C(uint64_t result, _DWORD *a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _QWORD **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _WORD *i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];
  __int128 v29;

  v8 = *a2;
  if ((int)*a2 >= 1)
  {
    v10 = (_QWORD **)result;
    v11 = 0;
    v12 = a5 & 1 ^ 0x51u;
    v13 = *(_QWORD *)(result + 16);
    if (*(_BYTE *)(result + 35))
      v14 = a5;
    else
      v14 = a5 & 0xFD;
    v27 = a4 - 1;
    for (i = a2 + 7; ; i += 12)
    {
      v16 = *(unsigned __int8 **)(i - 10);
      if ((v14 & 4) != 0)
      {
        if (*i)
          break;
      }
      if ((v14 & 2) != 0
        && ((v28[3] = 0, v29 = 0u, v28[0] = 0, WORD2(v29) = 2, v28[1] = sub_1ACB8B0F4, v28[2] = sub_1ACC0B708, !v16)
         || (sub_1ACC0B714((uint64_t)v28, (uint64_t)v16), WORD2(v29))))
      {
        result = sub_1ACC09B6C(v10, v16, (v11 + a3));
      }
      else
      {
        v21 = v11 + a3;
        result = sub_1ACB7B84C(v10, v16, (v11 + a3));
        if ((_DWORD)result != v11 + a3)
        {
          v17 = result;
          if ((_DWORD)v12 == 80)
          {
            v22 = &byte_1EECAD280;
            if (!*(_BYTE *)(*(_QWORD *)v13 + 103))
              v22 = (char *)(*(_QWORD *)(v13 + 136) + 40 * *(int *)(v13 + 144) - 40);
            if (*v22 == 80)
            {
              v23 = *((_DWORD *)v22 + 3) + 1;
              if (v23 + *((_DWORD *)v22 + 1) == (_DWORD)result
                && v23 + *((_DWORD *)v22 + 2) == v21
                && !*((_WORD *)v22 + 1))
              {
                *((_DWORD *)v22 + 3) = v23;
                goto LABEL_7;
              }
            }
          }
          v24 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) <= v24)
          {
            v25 = v13;
            v26 = v12;
            v18 = (v11 + a3);
LABEL_31:
            result = sub_1ACBFF5AC(v25, v26, v17, v18, 0, a6, a7, a8);
            goto LABEL_7;
          }
          *(_DWORD *)(v13 + 144) = v24 + 1;
          v20 = *(_QWORD *)(v13 + 136) + 40 * v24;
          *(_BYTE *)v20 = v12;
          *(_WORD *)(v20 + 2) = 0;
          *(_DWORD *)(v20 + 4) = result;
          *(_DWORD *)(v20 + 8) = v21;
LABEL_24:
          *(_BYTE *)(v20 + 1) = 0;
          *(_QWORD *)(v20 + 12) = 0;
          *(_QWORD *)(v20 + 28) = 0;
          *(_QWORD *)(v20 + 20) = 0;
          *(_DWORD *)(v20 + 36) = 0;
        }
      }
LABEL_7:
      if (++v11 >= v8)
        return result;
    }
    if ((v14 & 8) != 0)
    {
      --v11;
      --v8;
      goto LABEL_7;
    }
    v17 = v27 + (unsigned __int16)*i;
    v18 = (v11 + a3);
    v19 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v19)
    {
      v25 = v13;
      v26 = v12;
      goto LABEL_31;
    }
    *(_DWORD *)(v13 + 144) = v19 + 1;
    v20 = *(_QWORD *)(v13 + 136) + 40 * v19;
    *(_BYTE *)v20 = v12;
    *(_WORD *)(v20 + 2) = 0;
    *(_DWORD *)(v20 + 4) = v17;
    *(_DWORD *)(v20 + 8) = v18;
    goto LABEL_24;
  }
  return result;
}

_QWORD *sub_1ACC0A46C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  char v9;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t *v21;

  v9 = a5;
  v14 = a1[2];
  result = (_QWORD *)sub_1ACBE1124(*a1, 8 * a5 + 48);
  if (result)
  {
    *result = 0;
    result[1] = a6;
    result[3] = 0;
    *((_BYTE *)result + 42) = v9;
    *((_DWORD *)result + 8) = *(_DWORD *)(v14 + 144);
    *((_DWORD *)result + 9) = 0;
    if (a7)
      v17 = 65;
    else
      v17 = 66;
    result = (_QWORD *)sub_1ACBA86CC((uint64_t *)v14, v17, a2, a3, a4, (uint64_t)result, 4294967281, v16);
    v18 = *(_DWORD *)(v14 + 144);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * v20 + 2) = a7 & 0x2E;
    v21 = (uint64_t *)a1[21];
    if (!v21)
      v21 = a1;
    *((_BYTE *)v21 + 33) = 1;
  }
  else if ((*(_BYTE *)(a6 + 4) & 0x10) != 0)
  {
    return sub_1ACBF0674((_QWORD *)*a1, (_QWORD *)a6);
  }
  return result;
}

uint64_t sub_1ACC0A574(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;

  result = *(_QWORD *)(a1 + 24);
  v4 = ~a2;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
    return sub_1ACC0D5D4(result, a1, v4);
  *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v4) = *(_DWORD *)(a1 + 144);
  return result;
}

unsigned int *sub_1ACC0A5A4(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __int128 *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int **v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v12 = (uint64_t)result;
  v32 = 0;
  v13 = *(_QWORD *)result;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v14 = *(unsigned __int8 **)(a2 + 16);
  if (v14)
  {
    result = sub_1ACB8B290(v13, v14, 0, 0);
    v15 = result;
    if (*(_BYTE *)(v13 + 103))
      goto LABEL_26;
  }
  else
  {
    v15 = 0;
    if (*(_BYTE *)(v13 + 103))
      goto LABEL_26;
  }
  LOBYTE(v43) = 44;
  *(_QWORD *)&v44 = &v38;
  *((_QWORD *)&v44 + 1) = &v33;
  LOBYTE(v38) = 57;
  *(_QWORD *)&v39 = v15;
  v16 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)&v39 + 1) = *(_QWORD *)(v16 + 8);
  LOBYTE(v33) = 55;
  v17 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)&v34 = v15;
  *((_QWORD *)&v34 + 1) = v17;
  v18 = *(unsigned __int8 *)v15;
  v19 = v18;
  if (v18 == 176)
    v19 = *((unsigned __int8 *)v15 + 2);
  if (v19 == 138)
  {
    v20 = (unsigned int **)(*((_QWORD *)v15 + 4) + 32);
  }
  else
  {
    if (v19 != 177)
    {
LABEL_12:
      v22 = sub_1ACC09A28(v12, (unsigned __int8 *)v15, &v32);
LABEL_13:
      v23 = v22;
      goto LABEL_14;
    }
    v20 = (unsigned int **)(v15 + 8);
  }
  v21 = **v20;
  if ((_DWORD)v21 == 1)
    goto LABEL_12;
  v32 = 0;
  if (v18 == 138)
  {
    v22 = sub_1ACBA2944((_QWORD **)v12, (unsigned __int8 *)v15, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v28 = *(_DWORD *)(v12 + 56);
  v23 = v28 + 1;
  *(_DWORD *)(v12 + 56) = v28 + v21;
  if ((int)v21 >= 1)
  {
    v29 = 0;
    v30 = 24 * v21;
    v31 = (v28 + 1);
    do
    {
      sub_1ACC0D760((_QWORD *)v12, *(_QWORD *)(*((_QWORD *)v15 + 4) + v29 + 8), v31);
      v29 += 24;
      v31 = (v31 + 1);
    }
    while (v30 != v29);
  }
LABEL_14:
  v24 = v15;
  while (1)
  {
    v25 = v24[1];
    if ((v25 & 0x82000) == 0)
      break;
    if ((v25 & 0x80000) != 0)
    {
      v24 = *(unsigned int **)(*((_QWORD *)v24 + 4) + 8);
      if (!v24)
      {
LABEL_19:
        if (a4)
          goto LABEL_20;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = (unsigned int *)*((_QWORD *)v24 + 2);
      if (!v24)
        goto LABEL_19;
    }
  }
  *((_BYTE *)v24 + 2) = *(_BYTE *)v24;
  *(_BYTE *)v24 = -80;
  v24[11] = v23;
  v24[1] = v25 & 0xFFFFDFFF;
  if (a4)
  {
LABEL_20:
    result = (unsigned int *)a4(v12, &v43, a3, a5);
    v26 = v32;
    if (!v32)
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_23:
  v15[1] |= 1u;
  result = (unsigned int *)sub_1ACB7B84C(v12, &v43, a3);
  v26 = v32;
  if (!v32)
    goto LABEL_26;
LABEL_24:
  v27 = *(unsigned __int8 *)(v12 + 31);
  if (v27 <= 7)
  {
    *(_BYTE *)(v12 + 31) = v27 + 1;
    *(_DWORD *)(v12 + 4 * v27 + 224) = v26;
  }
LABEL_26:
  if (v15)
    return (unsigned int *)sub_1ACBF8348((_QWORD *)v13, (unsigned __int8 *)v15);
  return result;
}

uint64_t sub_1ACC0A830(uint64_t result, int a2)
{
  uint64_t *v2;
  int v3;

  if (result)
  {
    while (1)
    {
      v3 = *(_DWORD *)(result + 4);
      if ((v3 & 0x82000) == 0)
        break;
      if ((v3 & 0x80000) != 0)
        v2 = (uint64_t *)(*(_QWORD *)(result + 32) + 8);
      else
        v2 = (uint64_t *)(result + 16);
      result = *v2;
      if (!*v2)
        return result;
    }
    *(_BYTE *)(result + 2) = *(_BYTE *)result;
    *(_BYTE *)result = -80;
    *(_DWORD *)(result + 44) = a2;
    *(_DWORD *)(result + 4) = v3 & 0xFFFFDFFF;
  }
  return result;
}

uint64_t sub_1ACC0A888(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  unsigned int **v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  unsigned int v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;

  v10 = *a2;
  v11 = v10;
  if (v10 == 176)
    v11 = a2[2];
  if (v11 == 138)
  {
    v12 = (unsigned int **)(*((_QWORD *)a2 + 4) + 32);
  }
  else
  {
    if (v11 != 177)
      return sub_1ACC09A28(a1, a2, a3);
    v12 = (unsigned int **)(a2 + 32);
  }
  v13 = **v12;
  if ((_DWORD)v13 == 1)
    return sub_1ACC09A28(a1, a2, a3);
  *a3 = 0;
  if (v10 == 138)
    return sub_1ACBA2944((_QWORD **)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(a1 + 56);
  v21 = v15 + 1;
  *(_DWORD *)(a1 + 56) = v15 + v13;
  if ((int)v13 >= 1)
  {
    v16 = 0;
    v17 = 24 * v13;
    v18 = v21;
    while (1)
    {
      v19 = *(unsigned __int8 **)(*((_QWORD *)a2 + 4) + v16 + 8);
      if (*(_BYTE *)(a1 + 35))
        break;
      v20 = *(_QWORD **)a1;
      if (v19)
        goto LABEL_20;
LABEL_21:
      if (*((_BYTE *)v20 + 103))
      {
        if (!v19)
          goto LABEL_14;
LABEL_25:
        sub_1ACBF8348(v20, v19);
        goto LABEL_14;
      }
      sub_1ACC08D80(a1, v19, v18);
      if (v19)
        goto LABEL_25;
LABEL_14:
      v18 = (v18 + 1);
      v16 += 24;
      if (v17 == v16)
        return v21;
    }
    v24 = 0u;
    v22[0] = 0;
    WORD2(v24) = 2;
    v22[1] = sub_1ACB8B0F4;
    v23 = (unint64_t)sub_1ACC0B708;
    if (!v19 || (sub_1ACC0B714((uint64_t)v22, (uint64_t)v19), WORD2(v24)))
    {
      sub_1ACC09B6C((_QWORD **)a1, v19, v18);
      goto LABEL_14;
    }
    v20 = *(_QWORD **)a1;
LABEL_20:
    v19 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v20, v19, 0, 0);
    goto LABEL_21;
  }
  return v21;
}

uint64_t sub_1ACC0AA74(uint64_t result)
{
  char *v1;
  int v2;
  BOOL v3;
  int v4;

  if (*(_BYTE *)(*(_QWORD *)result + 103))
    v1 = &byte_1EECAD280;
  else
    v1 = (char *)(*(_QWORD *)(result + 136) + 40 * *(int *)(result + 144) - 40);
  if (*v1 == 80)
  {
    v2 = *(_DWORD *)(result + 144);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v4 < 0 == v3)
      *(_WORD *)(*(_QWORD *)(result + 136) + 40 * v4 + 2) = 1;
  }
  return result;
}

uint64_t sub_1ACC0AAD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  int v17;
  BOOL v18;
  int v19;

  v8 = a6;
  v14 = a1[2];
  if (v14)
  {
    if ((_DWORD)a3 != 2)
      goto LABEL_6;
    goto LABEL_3;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v14 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == 2)
  {
LABEL_3:
    v15 = (uint64_t *)a1[21];
    if (!v15)
      v15 = a1;
    *((_BYTE *)v15 + 33) = 1;
  }
LABEL_6:
  result = sub_1ACBA86CC((uint64_t *)v14, 70, a2, a3, 0, a4, a5, a8);
  v17 = *(_DWORD *)(v14 + 144);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v19 < 0 == v18)
    *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * v19 + 2) = v8;
  return result;
}

uint64_t sub_1ACC0ABAC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  unsigned __int8 *i;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;

  if (!a2 || !a3)
    return 2 * (a3 != a2);
  if (!a1)
    goto LABEL_28;
  if (*a2 != 156)
    goto LABEL_28;
  v32 = 0;
  sub_1ACC015D4(*(_QWORD *)a1, a3, 1, 65, &v32);
  v8 = v32;
  if (!v32)
    goto LABEL_28;
  v9 = *((_DWORD *)a2 + 12);
  v10 = 1 << (v9 - 1);
  if (v9 > 31)
    v10 = 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 372) |= v10;
  v11 = sub_1ACC0B1B8(*(uint64_t **)(a1 + 328), v9);
  v12 = v11;
  if (v11)
  {
    v13 = *(unsigned __int16 *)(v11 + 20);
    if (((0x4000000040004uLL >> v13) & 1) != 0)
    {
      if ((~v13 & 0x202) == 0)
      {
        if ((v13 & 1) != 0 || *(_BYTE *)(v11 + 22) == 1)
          goto LABEL_18;
        goto LABEL_17;
      }
      if ((v13 & 1) == 0)
LABEL_17:
        sub_1ACBF2B64((int *)v11, 1);
    }
LABEL_18:
    v15 = sub_1ACB93348(v12, v8, 0) == 0;
    goto LABEL_19;
  }
  v15 = 0;
LABEL_19:
  if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32))
    sub_1ACBF2A04(v8);
  sub_1ACBE0F9C(*(_QWORD **)(v8 + 24), (_QWORD *)v8);
  if (v12)
  {
    if ((*(_WORD *)(v12 + 20) & 0x9000) != 0 || *(_DWORD *)(v12 + 32))
      sub_1ACBF2A04(v12);
    sub_1ACBE0F9C(*(_QWORD **)(v12 + 24), (_QWORD *)v12);
  }
  if (v15)
    return 0;
LABEL_28:
  v16 = *((_DWORD *)a2 + 1);
  v17 = *((_DWORD *)a3 + 1);
  v18 = v17 | v16;
  if (((v17 | v16) & 0x800) != 0)
  {
    if ((v16 & v17 & 0x800) == 0 || *((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2))
      return 2;
    return 0;
  }
  v19 = *a2;
  v20 = *a3;
  if (v19 == 71 || v19 != v20)
  {
    if (v19 == 113)
    {
      if (sub_1ACC0ABAC(a1, *((_QWORD *)a2 + 2), a3, a4) < 2)
        return 1;
      v20 = *a3;
    }
    if (v20 != 113 || sub_1ACC0ABAC(a1, a2, *((_QWORD *)a3 + 2), a4) >= 2)
    {
      if (*a2 != 169 || *a3 != 167 || (*((_DWORD *)a3 + 11) & 0x80000000) == 0 || *((_DWORD *)a2 + 11) != (_DWORD)a4)
        return 2;
      v19 = 169;
      v21 = (const char *)*((_QWORD *)a2 + 1);
      if (!v21)
      {
LABEL_74:
        if (((*((_DWORD *)a3 + 1) ^ *((_DWORD *)a2 + 1)) & 0x404) != 0)
          return 2;
        if ((v18 & 0x10000) == 0)
        {
          if ((v18 & 0x1000) != 0
            || (v18 & 0x20) == 0 && sub_1ACC0ABAC(a1, *((_QWORD *)a2 + 2), *((_QWORD *)a3 + 2), a4))
          {
            return 2;
          }
          if (sub_1ACC0ABAC(a1, *((_QWORD *)a2 + 3), *((_QWORD *)a3 + 3), a4)
            || sub_1ACC0B0F4(*((_QWORD *)a2 + 4), *((_QWORD *)a3 + 4), a4))
          {
            return 2;
          }
          v30 = *a2;
          if (v30 != 117 && v30 != 170 && (v18 & 0x4000) == 0)
          {
            if (*((_DWORD *)a2 + 12) != *((_DWORD *)a3 + 12) || v30 == 175 && a2[2] != a3[2])
              return 2;
            if (v30 != 49)
            {
              v31 = *((_DWORD *)a2 + 11);
              if (v31 != (_DWORD)a4 && v31 != *((_DWORD *)a3 + 11))
                return 2;
            }
          }
        }
        return 0;
      }
      goto LABEL_32;
    }
    return 1;
  }
  v21 = (const char *)*((_QWORD *)a2 + 1);
  if (!v21)
    goto LABEL_74;
LABEL_32:
  if (v19 <= 167)
  {
    if (v19 == 113)
    {
      v25 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
      if (v25)
      {
        while (1)
        {
          v26 = *(unsigned __int8 *)v21;
          v27 = *v25;
          if ((_DWORD)v26 == (_DWORD)v27)
          {
            if (!*v21)
              goto LABEL_74;
          }
          else if (byte_1ACCB6333[v26] != byte_1ACCB6333[v27])
          {
            return 2;
          }
          ++v21;
          ++v25;
        }
      }
      return 2;
    }
    if (v19 == 121)
      return 0;
    goto LABEL_66;
  }
  if (v19 != 172 && v19 != 168)
  {
LABEL_66:
    v28 = (const char *)*((_QWORD *)a3 + 1);
    if (v28 && v19 != 167 && v19 != 169 && strcmp(v21, v28))
      return 2;
    goto LABEL_74;
  }
  for (i = (unsigned __int8 *)*((_QWORD *)a3 + 1); ; ++i)
  {
    v23 = *(unsigned __int8 *)v21;
    v24 = *i;
    if ((_DWORD)v23 == (_DWORD)v24)
      break;
    if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
      return 2;
LABEL_55:
    ++v21;
  }
  if (*v21)
    goto LABEL_55;
  v29 = *((_DWORD *)a2 + 1) & 0x1000000;
  if ((HIBYTE(*((_DWORD *)a3 + 1)) & 1) == HIBYTE(v29)
    && (!v29 || !sub_1ACC0AFF8(a1, *((_QWORD *)a2 + 9), *((_QWORD *)a3 + 9), 1)))
  {
    goto LABEL_74;
  }
  return 2;
}

uint64_t sub_1ACC0AFF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  result = 1;
  if (a2
    && a3
    && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32)
    && *(unsigned __int8 *)(a2 + 33) == *(unsigned __int8 *)(a3 + 33)
    && *(unsigned __int8 *)(a2 + 34) == *(unsigned __int8 *)(a3 + 34)
    && *(unsigned __int8 *)(a2 + 36) == *(unsigned __int8 *)(a3 + 36))
  {
    if (sub_1ACC0ABAC(a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a3 + 40), 0xFFFFFFFFLL)
      || sub_1ACC0ABAC(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a3 + 48), 0xFFFFFFFFLL))
    {
      return 1;
    }
    else
    {
      result = sub_1ACC0B0F4(*(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), 0xFFFFFFFFLL);
      if (!(_DWORD)result)
      {
        result = sub_1ACC0B0F4(*(_QWORD *)(a2 + 24), *(_QWORD *)(a3 + 24), 0xFFFFFFFFLL);
        if (!(_DWORD)result)
        {
          if (!a4)
            return 0;
          result = sub_1ACC0ABAC(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a3 + 72), 0xFFFFFFFFLL);
          if (!(_DWORD)result)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC0B0F4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!(a1 | a2))
    return 0;
  result = 1;
  if (a1 && a2 && *(_DWORD *)a1 == *(_DWORD *)a2)
  {
    if (*(int *)a1 < 1)
    {
      return 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      while (*(unsigned __int8 *)(a1 + v7 + 24) == *(unsigned __int8 *)(a2 + v7 + 24))
      {
        result = sub_1ACC0ABAC(0, *(_QWORD *)(a1 + v7 + 8), *(_QWORD *)(a2 + v7 + 8), a3);
        if (!(_DWORD)result)
        {
          ++v8;
          v7 += 24;
          if (v8 < *(int *)a1)
            continue;
        }
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1ACC0B1B8(uint64_t *a1, int a2)
{
  uint64_t v2;
  _WORD *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  if (!a1)
    return 0;
  v2 = a1[16] + ((uint64_t)a2 << 6);
  v4 = *(_WORD *)(v2 - 44);
  v3 = (_WORD *)(v2 - 44);
  if ((v4 & 1) != 0)
    return 0;
  v5 = *a1;
  if (*a1)
  {
    v6 = sub_1ACBE1124(*a1, 0x40uLL);
    if (!v6)
      return v6;
  }
  else
  {
    v6 = sub_1ACB5D828(64);
    if (!v6)
      return v6;
  }
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)(v6 + 20) = 1;
  *(_QWORD *)(v6 + 24) = v5;
  v8 = *(_OWORD *)(v3 - 10);
  v9 = *(_QWORD *)(v3 - 2);
  *(_QWORD *)(v6 + 16) = v9;
  *(_OWORD *)v6 = v8;
  *(_WORD *)(v6 + 20) = WORD2(v9) & 0xEFFF;
  if ((v9 & 0x1200000000) != 0 && (*v3 & 0x2000) == 0)
  {
    *(_WORD *)(v6 + 20) = WORD2(v9) & 0xAFFF | 0x4000;
    sub_1ACBC6854((int *)v6);
  }
  return v6;
}

double sub_1ACC0B288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int16x8_t v35;
  int8x16_t v36;
  uint64_t v37;
  int16x8_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  int8x16x2_t v62;

  v10 = a1;
  if ((a4 & 0x80000000) != 0 || (v11 = a4, *(__int16 *)(a2 + 52) == (_DWORD)a4))
  {
    v13 = *(_DWORD *)(a1 + 144);
    if (*(_DWORD *)(a1 + 148) > v13)
    {
      *(_DWORD *)(a1 + 144) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 136) + 40 * v13;
      *(_DWORD *)v14 = 135;
      *(_DWORD *)(v14 + 4) = a3;
      *(_DWORD *)(v14 + 8) = a5;
      *(_QWORD *)(v14 + 12) = 0;
      *(_QWORD *)(v14 + 28) = 0;
      *(_QWORD *)(v14 + 20) = 0;
      *(_DWORD *)(v14 + 36) = 0;
      return *(double *)a9.i64;
    }
    v15 = 135;
    v16 = a5;
LABEL_6:
    sub_1ACBFF5AC(a1, v15, a3, v16, 0, a6, a7, a8);
    return *(double *)a9.i64;
  }
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    v17 = 175;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = v18 + 16 * a4;
    v20 = (_WORD *)(v19 + 14);
    if ((*(_WORD *)(v19 + 14) & 0x20) != 0)
    {
      v25 = *(_QWORD *)(a1 + 24);
      if ((*(_WORD *)(v19 + 14) & 0x100) != 0)
      {
        sub_1ACBCB308(v25, "generated column loop on \"%s\"", a3, a4, a5, a6, a7, a8, *(_QWORD *)v19);
      }
      else
      {
        v26 = *(_DWORD *)(v25 + 64);
        *v20 = *(_WORD *)(v19 + 14) | 0x100;
        *(_DWORD *)(v25 + 64) = a3 + 1;
        sub_1ACC09780(v25, a2, v19, a5, a5, a6, a7, a8);
        *(_DWORD *)(v25 + 64) = v26;
        *v20 &= ~0x100u;
      }
      return *(double *)a9.i64;
    }
    v21 = *(_DWORD *)(a2 + 48);
    if ((v21 & 0x80) != 0)
    {
      for (i = *(_QWORD *)(a2 + 16); i; i = *(_QWORD *)(i + 40))
      {
        if ((*(_WORD *)(i + 99) & 3) == 2)
          break;
      }
      v28 = *(unsigned __int16 *)(i + 96);
      if (*(_WORD *)(i + 96))
      {
        v29 = 0;
        v30 = *(unsigned __int16 **)(i + 8);
        v31 = v28 << 16;
        while (1)
        {
          v32 = *v30++;
          if (v32 == (unsigned __int16)a4)
            break;
          v29 += 0x10000;
          if (v31 == v29)
            goto LABEL_25;
        }
        a4 = ((int)v29 >> 16);
      }
      else
      {
LABEL_25:
        a4 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      v22 = (__int16)a4;
      if ((a4 & 0x8000) == 0 && (v21 & 0x20) != 0)
      {
        if ((_WORD)a4)
        {
          if ((_DWORD)a4 << 16 >= 0x110000u)
          {
            v33 = a4 & 0xF;
            if ((a4 & 0xF) == 0)
              v33 = 16;
            v23 = v22 - v33;
            v34 = v18 + 142;
            v35 = 0uLL;
            v36.i64[0] = 0x1000100010001;
            v36.i64[1] = 0x1000100010001;
            v37 = v23;
            v38 = 0uLL;
            do
            {
              v39 = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 64), (int8x16_t)xmmword_1ACCBDDC0);
              v39.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
              v40.i32[0] = vzip1q_s16(*(int16x8_t *)(v34 - 128), *(int16x8_t *)(v34 - 112)).u32[0];
              v40.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v34 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v40.i64[1] = v39.i64[1];
              v41 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v34 + 96), (int8x16_t)xmmword_1ACCBDDB0);
              v62 = *(int8x16x2_t *)(v34 + 32);
              v42 = vqtbl2q_s8(*(int8x16x2_t *)(v34 + 64), (int8x16_t)xmmword_1ACCBDDC0);
              v44 = *(int16x8_t *)v34;
              v43 = *(int16x8_t *)(v34 + 16);
              v34 += 256;
              v42.i32[3] = v41.i32[3];
              v41.i32[0] = vzip1q_s16(v44, v43).u32[0];
              v41.i32[1] = vqtbl2q_s8(v62, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v41.i64[1] = v42.i64[1];
              v35 = vaddq_s16((int16x8_t)vbicq_s8(v36, (int8x16_t)vshrq_n_u16(v40, 5uLL)), v35);
              v38 = vaddq_s16((int16x8_t)vbicq_s8(v36, (int8x16_t)vshrq_n_u16(v41, 5uLL)), v38);
              v37 -= 16;
            }
            while (v37);
            a9 = vaddq_s16(v38, v35);
            a9.i16[0] = vaddvq_s16(a9);
            v24 = a9.i16[0];
          }
          else
          {
            v23 = 0;
            v24 = 0;
          }
          v45 = v22 - v23;
          v46 = (unsigned __int16 *)(v18 + 16 * v23 + 14);
          do
          {
            v47 = *v46;
            v46 += 8;
            v24 += ((v47 >> 5) & 1) == 0;
            --v45;
          }
          while (v45);
        }
        else
        {
          v24 = 0;
        }
        if ((*(_WORD *)(v18 + 16 * v22 + 14) & 0x20) != 0)
          LOWORD(v22) = a4 - v24 + *(_WORD *)(a2 + 56);
        else
          LOWORD(v22) = v24;
      }
      a4 = (__int16)v22;
    }
    v17 = 94;
  }
  v48 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v48)
  {
    sub_1ACBFF5AC(a1, v17, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v48 + 1;
    v49 = *(_QWORD *)(a1 + 136) + 40 * v48;
    *(_BYTE *)v49 = v17;
    *(_WORD *)(v49 + 2) = 0;
    *(_DWORD *)(v49 + 4) = a3;
    *(_DWORD *)(v49 + 8) = a4;
    *(_DWORD *)(v49 + 12) = a5;
    *(_BYTE *)(v49 + 1) = 0;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 32) = 0;
    *(_QWORD *)(v49 + 16) = 0;
  }
  v50 = *(_QWORD *)(a2 + 8);
  v51 = v11;
  v52 = *(unsigned __int16 *)(v50 + 16 * v11 + 12);
  if (*(_WORD *)(v50 + 16 * v11 + 12))
  {
    v61 = 0;
    if (!*(_BYTE *)(a2 + 63))
    {
      v55 = *(_DWORD **)(a2 + 80);
      if (v55)
      {
        if (*v55 >= v52)
        {
          v56 = *(unsigned __int8 **)&v55[6 * (v52 - 1) + 2];
          if (v56)
          {
            sub_1ACC015D4(*(_QWORD *)v10, v56, *(unsigned __int8 *)(*(_QWORD *)v10 + 100), *(unsigned __int8 *)(v50 + 16 * v11 + 9), &v61);
            v57 = v61;
            if (v61)
            {
              v58 = *(_QWORD **)v10;
              if (*(_BYTE *)(*(_QWORD *)v10 + 103))
              {
                if (v58[102])
                {
                  sub_1ACBF07C0(v58, v61);
                }
                else
                {
                  if ((*(_WORD *)(v61 + 20) & 0x9000) != 0 || *(_DWORD *)(v61 + 32))
                    sub_1ACBF2A04(v61);
                  sub_1ACBE0F9C(*(_QWORD **)(v57 + 24), (_QWORD *)v57);
                }
              }
              else
              {
                v59 = *(_QWORD *)(v10 + 136) + 40 * *(int *)(v10 + 144);
                *(_BYTE *)(v59 - 39) = -10;
                *(_QWORD *)(v59 - 24) = v57;
              }
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v50 + 16 * v51 + 9) == 69 && *(_BYTE *)(a2 + 63) != 1)
  {
    v53 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) > v53)
    {
      *(_DWORD *)(v10 + 144) = v53 + 1;
      v54 = *(_QWORD *)(v10 + 136) + 40 * v53;
      *(_DWORD *)v54 = 87;
      *(_DWORD *)(v54 + 4) = a5;
      a9.i16[0] = 0;
      a9.i8[2] = 0;
      a9.i8[3] = 0;
      a9.i8[4] = 0;
      a9.i8[5] = 0;
      a9.i8[6] = 0;
      a9.i8[7] = 0;
      *(_OWORD *)(v54 + 8) = 0u;
      *(_OWORD *)(v54 + 24) = 0u;
      return *(double *)a9.i64;
    }
    a1 = v10;
    v15 = 87;
    a3 = a5;
    v16 = 0;
    goto LABEL_6;
  }
  return *(double *)a9.i64;
}

