void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t value;
  int v11;
  NSObject *v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  xpc_object_t object;
  xpc_object_t v18[2];

  v18[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  v5 = MEMORY[0x1E0C812F8];
  if (v3)
  {
    object = v3;
  }
  else
  {
    v4 = xpc_null_create();
    object = v4;
    if (!v4)
    {
      v6 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) != v5)
  {
    v6 = xpc_null_create();
LABEL_8:
    object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  v16 = -534716416;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(a1 + 40)) == v5
    && (v9 = (const char *)*MEMORY[0x1E0CFB948],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB948])))
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value)
      xpc_retain(value);
    else
      v18[0] = xpc_null_create();
    v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    v13 = *(_QWORD *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)v13 + 72))(v13, v11 != 0))
        v16 = 0;
    }
    else if (MEMORY[0x1C3B8CD78](object) == v5)
    {
      v14 = xpc_string_create("TransportService is not ready!");
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB0D0], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x1C3B8CD78](object) == v5)
    {
      v7 = xpc_string_create("Invalid key!");
      if (!v7)
        v7 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB0D0], v7);
      v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_1BF5CCD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14;
        v12[3] = &__block_descriptor_tmp_19_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6)
        v6 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v6);
      v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8)
        v8 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v8);
      v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      v10 = *(xpc_object_t *)(v2 + 160);
      if (v10)
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      else
        v10 = xpc_null_create();
      v15 = *(_QWORD *)(a1 + 40);
      object = v10;
      v16 = xpc_null_create();
      (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_1BF5CD248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF5CD35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  xpc_object_t v2;
  xpc_object_t value;
  const object *v4;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  const __CFString **v8;
  xpc_object_t v9;
  const object *v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  uint64_t v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  const void *v17;
  NSObject *v18;
  xpc_object_t object;
  _BYTE cf[12];
  __int16 v21;
  const void *v22;
  __int16 v23;
  __CFDictionary *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 38) != 3)
    return;
  v2 = (xpc_object_t)*((_QWORD *)this + 20);
  if (v2)
    xpc_retain(*((xpc_object_t *)this + 20));
  else
    v2 = xpc_null_create();
  value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E0CFB410]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = *(const void **)cf;
  if (!*(_QWORD *)cf || (v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    v5 = 0;
    v7 = *(const void **)cf;
    if (!*(_QWORD *)cf)
      goto LABEL_14;
    goto LABEL_13;
  }
  CFRetain(v5);
  v7 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_13:
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  v8 = (const __CFString **)*MEMORY[0x1E0CFB408];
  v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E0CFB408]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v10);
  v11 = *(const void **)cf;
  if (*(_QWORD *)cf)
  {
    v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      v13 = *(const void **)cf;
      if (!*(_QWORD *)cf)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v11 = 0;
  v13 = *(const void **)cf;
  if (*(_QWORD *)cf)
LABEL_22:
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  v14 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  v17 = *(const void **)cf;
  object = *(xpc_object_t *)cf;
  *(_QWORD *)cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17)
      CFDictionaryAddValue(Mutable, v17, v11);
    CFRelease(v11);
  }
  if (v17)
    CFRelease(v17);
  IOPMClaimSystemWakeEvent();
  v18 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)cf = 138412802;
    *(_QWORD *)&cf[4] = CFSTR("com.apple.CommCenter");
    v21 = 2112;
    v22 = v5;
    v23 = 2112;
    v24 = Mutable;
    _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if (v5)
    CFRelease(v5);
  xpc_release(v2);
}

void sub_1BF5CD6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  size_t v13;
  xpc_object_t value;
  BOOL v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  int v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  const void *v58;
  size_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  xpc_object_t v65;
  uint8_t buf[8];
  size_t v67;
  unint64_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t object;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t *v87;
  uint64_t v88;
  xpc_object_t v89;
  xpc_object_t v90;

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  v5 = MEMORY[0x1C3B8CD78](*a2);
  v6 = MEMORY[0x1E0C812F8];
  if (v5 == MEMORY[0x1E0C812F8])
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v8) == v6)
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    v90 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v10 = xpc_dictionary_create(0, 0, 0);
    v11 = v10;
    if (v10)
    {
      v90 = v10;
    }
    else
    {
      v11 = xpc_null_create();
      v90 = v11;
      if (!v11)
      {
        v12 = xpc_null_create();
        v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x1C3B8CD78](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    v12 = xpc_null_create();
LABEL_19:
    v90 = v12;
LABEL_20:
    xpc_release(v11);
    v13 = *MEMORY[0x1E0CFB458];
    value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB458]);
    v15 = value != 0;
    if (value)
    {
      *(_QWORD *)buf = a2;
      v67 = v13;
      v16 = *MEMORY[0x1E0CFBF68];
      v87 = &v90;
      v88 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v89);
      xpc_release(v89);
      v89 = 0;
    }
    v17 = *MEMORY[0x1E0CFBDF0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF0]))
    {
      *(_QWORD *)buf = a2;
      v67 = v17;
      v18 = *MEMORY[0x1E0CFBE58];
      v87 = &v90;
      v88 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v86);
      xpc_release(v86);
      v86 = 0;
      v15 = 1;
    }
    v19 = *MEMORY[0x1E0CFB2B8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB2B8]))
    {
      *(_QWORD *)buf = a2;
      v67 = v19;
      v20 = *MEMORY[0x1E0CFC018];
      v87 = &v90;
      v88 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v85);
      xpc_release(v85);
      v85 = 0;
      v15 = 1;
    }
    v21 = *MEMORY[0x1E0CFB7A8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7A8]))
    {
      *(_QWORD *)buf = a2;
      v67 = v21;
      v22 = *MEMORY[0x1E0CFBEF8];
      v87 = &v90;
      v88 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v84);
      xpc_release(v84);
      v84 = 0;
      v15 = 1;
    }
    v23 = *MEMORY[0x1E0CFB410];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB410]))
    {
      *(_QWORD *)buf = a2;
      v67 = v23;
      v24 = *MEMORY[0x1E0CFBD80];
      v87 = &v90;
      v88 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v83);
      xpc_release(v83);
      v83 = 0;
      v15 = 1;
    }
    v25 = (const char *)*MEMORY[0x1E0CFB7B0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0]))
    {
      *(_QWORD *)buf = a2;
      v67 = (size_t)v25;
      v26 = *MEMORY[0x1E0CFBF00];
      v87 = &v90;
      v88 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v82);
      xpc_release(v82);
      v82 = 0;
      v27 = *MEMORY[0x1E0CFBB10];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBB10]))
      {
        v81 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)buf = a2;
        v67 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v81);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB5A0]))
        {
          v28 = *MEMORY[0x1E0CFBB18];
          *(_QWORD *)buf = &v81;
          v67 = v28;
          v29 = *MEMORY[0x1E0CFBE50];
          v87 = &v90;
          v88 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &object);
          xpc_release(object);
          object = 0;
          v30 = *MEMORY[0x1E0CFB9F8];
          *(_QWORD *)buf = &v81;
          v67 = v30;
          v31 = *MEMORY[0x1E0CFBDC8];
          v87 = &v90;
          v88 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v79);
          xpc_release(v79);
          v79 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB6E8]))
        {
          v33 = *MEMORY[0x1E0CFB8F0];
          *(_QWORD *)buf = &v81;
          v67 = v33;
          v34 = *MEMORY[0x1E0CFBAE0];
          v87 = &v90;
          v88 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v78);
          xpc_release(v78);
          v78 = 0;
          v35 = *MEMORY[0x1E0CFBB20];
          *(_QWORD *)buf = &v81;
          v67 = v35;
          v36 = *MEMORY[0x1E0CFBC88];
          v87 = &v90;
          v88 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v77);
          xpc_release(v77);
          v77 = 0;
          v37 = *MEMORY[0x1E0CFBBC8];
          *(_QWORD *)buf = &v81;
          v67 = v37;
          v38 = *MEMORY[0x1E0CFBD78];
          v87 = &v90;
          v88 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v76);
          xpc_release(v76);
          v76 = 0;
          v39 = *MEMORY[0x1E0CFBDD8];
          *(_QWORD *)buf = &v81;
          v67 = v39;
          v40 = *MEMORY[0x1E0CFBC80];
          v87 = &v90;
          v88 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v75);
          xpc_release(v75);
          v75 = 0;
          v41 = *MEMORY[0x1E0CFB8E8];
          *(_QWORD *)buf = &v81;
          v67 = v41;
          v42 = *MEMORY[0x1E0CFB9D0];
          v87 = &v90;
          v88 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v74);
          xpc_release(v74);
          v74 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E0CFB6D8]))
        {
          v43 = *MEMORY[0x1E0CFB8E0];
          *(_QWORD *)buf = &v81;
          v67 = v43;
          v44 = *MEMORY[0x1E0CFBAE0];
          v87 = &v90;
          v88 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v73);
          xpc_release(v73);
          v73 = 0;
          v45 = *MEMORY[0x1E0CFBB08];
          *(_QWORD *)buf = &v81;
          v67 = v45;
          v46 = *MEMORY[0x1E0CFBC88];
          v87 = &v90;
          v88 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v72);
          xpc_release(v72);
          v72 = 0;
          v47 = *MEMORY[0x1E0CFBB00];
          *(_QWORD *)buf = &v81;
          v67 = v47;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v87);
          v48 = xpc::dyn_cast_or_default((xpc *)&v87, 0);
          xpc_release(v87);
          v70 = xpc_int64_create(v48 | 0x10000);
          if (!v70)
            v70 = xpc_null_create();
          v49 = *MEMORY[0x1E0CFBC80];
          *(_QWORD *)buf = &v90;
          v67 = v49;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v70, &v71);
          xpc_release(v71);
          v71 = 0;
          xpc_release(v70);
          v70 = 0;
          v50 = *MEMORY[0x1E0CFB8E8];
          *(_QWORD *)buf = &v81;
          v67 = v50;
          v51 = *MEMORY[0x1E0CFB9D0];
          v87 = &v90;
          v88 = v51;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v69);
          xpc_release(v69);
          v69 = 0;
        }
        xpc_release(v81);
      }
    }
    else if (!v15)
    {
      v32 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    v52 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
    if (!v52)
      v52 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB020], v52);
    v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    v54 = xpc_int64_create(524467);
    if (!v54)
      v54 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB0E8], v54);
    v55 = xpc_null_create();
    xpc_release(v54);
    xpc_release(v55);
    v56 = v90;
    if (v90)
      xpc_retain(v90);
    else
      v56 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB018], v56);
    v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    v58 = (const void *)*MEMORY[0x1E0CFB5E0];
    v59 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v59 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v60 = v59;
    if (v59 >= 0x17)
    {
      v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17)
        v62 = v59 | 7;
      v63 = v62 + 1;
      v61 = operator new(v62 + 1);
      v67 = v60;
      v68 = v63 | 0x8000000000000000;
      *(_QWORD *)buf = v61;
    }
    else
    {
      HIBYTE(v68) = v59;
      v61 = buf;
      if (!v59)
      {
        buf[0] = 0;
        v65 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        v65 = xpc_null_create();
LABEL_61:
        v64 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v65, &v64);
        xpc_release(v65);
        v65 = 0;
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)buf);
LABEL_63:
        xpc_release(v90);
        xpc_release(v9);
        return;
      }
    }
    memmove(v61, v58, v60);
    *((_BYTE *)v61 + v60) = 0;
    v65 = v9;
    if (v9)
      goto LABEL_55;
    goto LABEL_60;
  }
  v7 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_1BF5CE158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t object)
{
  void *v30;
  uint64_t v31;

  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a3);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1BF5CE3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  NSObject *v72;
  unint64_t v73;
  void *v74;
  NSObject *v75;
  const void *v76;
  size_t v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  size_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  size_t v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  void *v107;
  NSObject *v108;
  void *v109[2];
  unint64_t v110;
  void *v111;
  dispatch_object_t v112;
  void *v113[2];
  unint64_t v114;
  void *v115;
  dispatch_object_t v116;
  void *v117[2];
  unint64_t v118;
  void *v119;
  dispatch_object_t v120;
  void *__p[2];
  unint64_t v122;
  _QWORD v123[6];
  std::__shared_weak_count *v124;
  void *v125;
  dispatch_object_t v126;
  _QWORD v127[6];
  std::__shared_weak_count *v128;
  void *v129;
  dispatch_object_t v130;
  _QWORD v131[6];
  std::__shared_weak_count *v132;
  _QWORD v133[6];
  std::__shared_weak_count *v134;
  _QWORD aBlock[6];
  std::__shared_weak_count *v136;
  void *v137;
  dispatch_object_t object;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  const void *v148;
  void *__dst[2];
  unint64_t v150;
  _BYTE buf[24];
  const char *v152;
  uint64_t *v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(TransportModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v150 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v150) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v148 = 0;
  AppleBasebandManager::create();
  v16 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *(_OWORD *)((char *)this + 200) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_26;
  v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_26:
    v23 = v148;
    if (!v148)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v148;
  if (v148)
LABEL_27:
    CFRelease(v23);
LABEL_28:
  if (SHIBYTE(v150) < 0)
    operator delete(__dst[0]);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v25 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v152 = (const char *)&__block_descriptor_tmp_13_8;
  v153 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = unk_1ED70F6A0;
    v145 = GetABMLogServer(void)::sLogServer;
    v146 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_35;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v26 = unk_1ED70F6A0;
    v145 = GetABMLogServer(void)::sLogServer;
    v146 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_35;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_35:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v143 = *((_QWORD *)this + 25);
  v144 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v32 || (v33 = *((_QWORD *)this + 15), (v34 = std::__shared_weak_count::lock(v32)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v35 = v34;
  v141 = v33;
  v142 = v34;
  v36 = (unint64_t *)&v34->__shared_weak_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = (unint64_t *)&v34->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v35);
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  v139 = *((_QWORD *)this + 27);
  v140 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  TransportService::create(&v145, &v143, &v141, &v139, &v147);
  v43 = v147;
  v147 = 0uLL;
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *(_OWORD *)((char *)this + 168) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v140;
  if (v140)
  {
    v51 = (unint64_t *)&v140->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v142)
    std::__shared_weak_count::__release_weak(v142);
  v53 = v144;
  if (v144)
  {
    v54 = (unint64_t *)&v144->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v146;
  if (v146)
  {
    v57 = (unint64_t *)&v146->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *((_QWORD *)this + 21);
  if (!v59)
  {
    v106 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v106, OS_LOG_TYPE_FAULT))
      __break(1u);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "fTransportService != NULL";
    *(_WORD *)&buf[22] = 2080;
    v152 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    LOWORD(v153) = 1024;
    *(_DWORD *)((char *)&v153 + 2) = 366;
    _os_log_fault_impl(&dword_1BF566000, v106, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_214:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = v25;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_27_1;
    aBlock[4] = this;
    aBlock[5] = v3;
    v136 = v5;
    do
      v60 = __ldxr(p_shared_weak_owners);
    while (__stxr(v60 + 1, p_shared_weak_owners));
    v61 = _Block_copy(aBlock);
    v62 = *((_QWORD *)this + 17);
    if (v62)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    v137 = v61;
    object = v62;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v59 + 80))(v59, &v137);
    if (object)
      dispatch_release(object);
    if (v137)
      _Block_release(v137);
    if (v136)
      std::__shared_weak_count::__release_weak(v136);
  }
  else
  {
    v63 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v63, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v133[0] = v25;
  v133[1] = 1174405120;
  v133[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28;
  v133[3] = &__block_descriptor_tmp_30;
  v133[4] = this;
  v133[5] = v3;
  v134 = v5;
  do
    v64 = __ldxr(p_shared_weak_owners);
  while (__stxr(v64 + 1, p_shared_weak_owners));
  v65 = _Block_copy(v133);
  v66 = *((_QWORD *)this + 17);
  if (v66)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  *(_QWORD *)buf = v65;
  *(_QWORD *)&buf[8] = v66;
  *(_QWORD *)&v147 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v147 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v131[0] = v25;
  v131[1] = 1174405120;
  v131[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31;
  v131[3] = &__block_descriptor_tmp_33_0;
  v131[4] = this;
  v131[5] = v3;
  v132 = v5;
  do
    v67 = __ldxr(p_shared_weak_owners);
  while (__stxr(v67 + 1, p_shared_weak_owners));
  v68 = _Block_copy(v131);
  v69 = *((_QWORD *)this + 17);
  if (v69)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  *(_QWORD *)&v147 = v68;
  *((_QWORD *)&v147 + 1) = v69;
  v129 = (void *)0xAAAAAAAAAAAAAAAALL;
  v130 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v127[0] = v25;
  v127[1] = 1174405120;
  v127[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34;
  v127[3] = &__block_descriptor_tmp_35_0;
  v127[4] = this;
  v127[5] = v3;
  v128 = v5;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  v71 = _Block_copy(v127);
  v72 = *((_QWORD *)this + 17);
  if (v72)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v129 = v71;
  v130 = v72;
  v125 = (void *)0xAAAAAAAAAAAAAAAALL;
  v126 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v123[0] = v25;
  v123[1] = 1174405120;
  v123[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36;
  v123[3] = &__block_descriptor_tmp_37_0;
  v123[4] = this;
  v123[5] = v3;
  v124 = v5;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  v74 = _Block_copy(v123);
  v75 = *((_QWORD *)this + 17);
  if (v75)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v125 = v74;
  v126 = v75;
  v76 = (const void *)*MEMORY[0x1E0CFBD68];
  v77 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v77 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v78 = (void *)v77;
  if (v77 >= 0x17)
  {
    v81 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17)
      v81 = v77 | 7;
    v82 = v81 + 1;
    v79 = operator new(v81 + 1);
    __p[1] = v78;
    v122 = v82 | 0x8000000000000000;
    __p[0] = v79;
LABEL_114:
    memmove(v79, v76, (size_t)v78);
    *((_BYTE *)v78 + (_QWORD)v79) = 0;
    v80 = (void *)v147;
    if (!(_QWORD)v147)
      goto LABEL_116;
    goto LABEL_115;
  }
  HIBYTE(v122) = v77;
  v79 = __p;
  if (v77)
    goto LABEL_114;
  LOBYTE(__p[0]) = 0;
  v80 = (void *)v147;
  if ((_QWORD)v147)
LABEL_115:
    v80 = _Block_copy(v80);
LABEL_116:
  v119 = v80;
  v120 = (dispatch_object_t)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
    dispatch_retain(*((dispatch_object_t *)&v147 + 1));
  AppleBasebandManager::setEventHandler();
  if (v120)
    dispatch_release(v120);
  if (v119)
    _Block_release(v119);
  if (SHIBYTE(v122) < 0)
    operator delete(__p[0]);
  v83 = (const void *)*MEMORY[0x1E0CFB9A8];
  v84 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v85 = (void *)v84;
  if (v84 >= 0x17)
  {
    v88 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v88 = v84 | 7;
    v89 = v88 + 1;
    v86 = operator new(v88 + 1);
    v117[1] = v85;
    v118 = v89 | 0x8000000000000000;
    v117[0] = v86;
LABEL_132:
    memmove(v86, v83, (size_t)v85);
    *((_BYTE *)v85 + (_QWORD)v86) = 0;
    v87 = *(void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_134;
    goto LABEL_133;
  }
  HIBYTE(v118) = v84;
  v86 = v117;
  if (v84)
    goto LABEL_132;
  LOBYTE(v117[0]) = 0;
  v87 = *(void **)buf;
  if (*(_QWORD *)buf)
LABEL_133:
    v87 = _Block_copy(v87);
LABEL_134:
  v115 = v87;
  v116 = *(dispatch_object_t *)&buf[8];
  if (*(_QWORD *)&buf[8])
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  AppleBasebandManager::setEventHandler();
  if (v116)
    dispatch_release(v116);
  if (v115)
    _Block_release(v115);
  if (SHIBYTE(v118) < 0)
    operator delete(v117[0]);
  v90 = (const void *)*MEMORY[0x1E0CFBBB0];
  v91 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v92 = (void *)v91;
  if (v91 >= 0x17)
  {
    v95 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v95 = v91 | 7;
    v96 = v95 + 1;
    v93 = operator new(v95 + 1);
    v113[1] = v92;
    v114 = v96 | 0x8000000000000000;
    v113[0] = v93;
LABEL_150:
    memmove(v93, v90, (size_t)v92);
    *((_BYTE *)v92 + (_QWORD)v93) = 0;
    v94 = v129;
    if (!v129)
      goto LABEL_152;
    goto LABEL_151;
  }
  HIBYTE(v114) = v91;
  v93 = v113;
  if (v91)
    goto LABEL_150;
  LOBYTE(v113[0]) = 0;
  v94 = v129;
  if (v129)
LABEL_151:
    v94 = _Block_copy(v94);
LABEL_152:
  v111 = v94;
  v112 = v130;
  if (v130)
    dispatch_retain(v130);
  AppleBasebandManager::setEventHandler();
  if (v112)
    dispatch_release(v112);
  if (v111)
    _Block_release(v111);
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v97 = (const void *)*MEMORY[0x1E0CFB9B0];
  v98 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v98 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_214;
  v99 = (void *)v98;
  if (v98 >= 0x17)
  {
    v104 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17)
      v104 = v98 | 7;
    v105 = v104 + 1;
    v100 = operator new(v104 + 1);
    v109[1] = v99;
    v110 = v105 | 0x8000000000000000;
    v109[0] = v100;
  }
  else
  {
    HIBYTE(v110) = v98;
    v100 = v109;
    if (!v98)
    {
      LOBYTE(v109[0]) = 0;
      v101 = v125;
      if (v125)
        goto LABEL_164;
      goto LABEL_201;
    }
  }
  memmove(v100, v97, (size_t)v99);
  *((_BYTE *)v99 + (_QWORD)v100) = 0;
  v101 = v125;
  if (v125)
  {
LABEL_164:
    v102 = _Block_copy(v101);
    v103 = v126;
    v107 = v102;
    v108 = v126;
    if (!v126)
      goto LABEL_166;
    goto LABEL_165;
  }
LABEL_201:
  v103 = v126;
  v107 = 0;
  v108 = v126;
  if (v126)
LABEL_165:
    dispatch_retain(v103);
LABEL_166:
  AppleBasebandManager::setEventHandler();
  if (v108)
    dispatch_release(v108);
  if (v107)
    _Block_release(v107);
  if (SHIBYTE(v110) < 0)
    operator delete(v109[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v103)
    dispatch_release(v103);
  if (v101)
    _Block_release(v101);
  if (v124)
    std::__shared_weak_count::__release_weak(v124);
  if (v130)
    dispatch_release(v130);
  if (v129)
    _Block_release(v129);
  if (v128)
    std::__shared_weak_count::__release_weak(v128);
  if (*((_QWORD *)&v147 + 1))
    dispatch_release(*((dispatch_object_t *)&v147 + 1));
  if ((_QWORD)v147)
    _Block_release((const void *)v147);
  if (v132)
    std::__shared_weak_count::__release_weak(v132);
  if (*(_QWORD *)&buf[8])
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  if (v134)
    std::__shared_weak_count::__release_weak(v134);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF5CF048(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  int v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  xpc_object_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  void **value;
  void **v24;
  char v25;
  void **v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  void ***v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  xpc_object_t v40;
  const object *v41;
  void **v42;
  CFTypeID v43;
  NSObject *v44;
  void ***p_block;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v51;
  xpc_object_t xdict;
  std::__shared_weak_count *v54;
  __int128 *p_buf;
  void **block;
  uint64_t v57;
  _QWORD *(*v58)(uint64_t);
  void *v59;
  uint64_t v60;
  __int128 **p_p_buf;
  __int128 buf;
  void (*v63)(uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v54 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v11 = v6;
LABEL_92:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      v7 = (_DWORD *)(v5 + 152);
      v8 = *(_DWORD *)(v5 + 152);
      v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        v9 = xpc_null_create();
        *v7 = *(_DWORD *)a2;
        v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
          goto LABEL_6;
      }
      v10 = xpc_null_create();
LABEL_10:
      v12 = *(void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2)
        goto LABEL_91;
      if (*v7 != 3)
      {
        v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v27 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        v16 = *(_QWORD *)(v5 + 184);
        if (v16)
        {
          *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
          *((_QWORD *)&buf + 1) = 0x40000000;
          v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          v64 = &__block_descriptor_tmp_27;
          v65 = v16;
          p_buf = &buf;
          block = (void **)MEMORY[0x1E0C809B0];
          v57 = 0x40000000;
          v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v59 = &__block_descriptor_tmp_21;
          v60 = v16 + 72;
          p_p_buf = &p_buf;
          v17 = *(NSObject **)(v16 + 88);
          if (*(_QWORD *)(v16 + 96))
            dispatch_async_and_wait(v17, &block);
          else
            dispatch_sync(v17, &block);
        }
LABEL_91:
        xpc_release(v9);
        v11 = v54;
        if (!v54)
          return;
        goto LABEL_92;
      }
      v13 = *(void **)(v5 + 160);
      xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        v14 = xdict;
      }
      else
      {
        v14 = xpc_null_create();
        xdict = v14;
      }
      v18 = MEMORY[0x1C3B8CD78](v14);
      v19 = MEMORY[0x1E0C812F8];
      if (v18 == MEMORY[0x1E0C812F8])
      {
        *(_QWORD *)&buf = 0xAAAAAAAAAAAAAAAALL;
        v22 = *MEMORY[0x1E0CFBB10];
        block = &xdict;
        v57 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBDF0]);
        block = value;
        if (value)
          xpc_retain(value);
        else
          block = (void **)xpc_null_create();
        v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB7A8]);
        block = v24;
        if (v24)
          xpc_retain(v24);
        else
          block = (void **)xpc_null_create();
        v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x1C3B8CD78](buf) == v19)
        {
          v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x1E0CFB8E8]);
          block = v26;
          if (v26)
            xpc_retain(v26);
          else
            block = (void **)xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if ((v25 & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v28 = *(_QWORD *)(v5 + 184);
      if (v28)
      {
        *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf + 1) = 0x40000000;
        v63 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v64 = &__block_descriptor_tmp_27;
        v65 = v28;
        p_buf = &buf;
        block = (void **)MEMORY[0x1E0C809B0];
        v57 = 0x40000000;
        v58 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v59 = &__block_descriptor_tmp_21;
        v60 = v28 + 72;
        p_p_buf = &p_buf;
        v29 = *(NSObject **)(v28 + 88);
        if (*(_QWORD *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0)
            goto LABEL_43;
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          v34 = (const void *)*MEMORY[0x1E0CFB8A8];
          v35 = strlen((const char *)*MEMORY[0x1E0CFB8A8]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v38 = v35 | 7;
            v39 = v38 + 1;
            v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            v51 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v51) = v35;
            v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((_BYTE *)v36 + (_QWORD)v37) = 0;
              v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(_QWORD *)&buf = v40;
              }
              else
              {
                v40 = xpc_null_create();
                *(_QWORD *)&buf = v40;
                if (!v40)
                {
                  v40 = 0;
                  *(_QWORD *)&buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((xpc *)&buf, v41);
                  v42 = block;
                  if (block && (v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    cf = 0;
                  }
                  aBlock = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock)
                    _Block_release(aBlock);
                  if (cf)
                    CFRelease(cf);
                  if (block)
                    CFRelease(block);
                  xpc_release((xpc_object_t)buf);
                  *(_QWORD *)&buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v51) < 0)
                    operator delete(__dst[0]);
                  v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_89;
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v58) >= 0)
                    p_block = &block;
                  else
                    p_block = (void ***)block;
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_1BF566000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if ((v21 & 1) != 0)
          goto LABEL_56;
LABEL_43:
        v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          v31 = SHIBYTE(v58) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_1BF566000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v58) < 0)
            operator delete(block);
        }
        if (!v20)
          goto LABEL_90;
        v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v58) >= 0)
          v33 = &block;
        else
          v33 = (void ***)block;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v58) < 0)
          operator delete(block);
        goto LABEL_89;
      }
LABEL_55:
      if (v21)
        goto LABEL_56;
      goto LABEL_43;
    }
  }
}

void sub_1BF5CF940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  xpc_object_t v2;
  int v3;
  NSObject *v4;
  int *v5;
  char *v6;
  int v7;
  uint8_t buf[4];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 38) == 3)
  {
    v2 = (xpc_object_t)*((_QWORD *)this + 20);
    if (v2)
      xpc_retain(*((xpc_object_t *)this + 20));
    else
      v2 = xpc_null_create();
    if (xpc::operator==<char const*>(MEMORY[0x1E0CFB4C0], v2, (char *)*MEMORY[0x1E0CFB410])
      && xpc::operator==<char const*>(MEMORY[0x1E0CFB5A0], v2, (char *)*MEMORY[0x1E0CFB7B0]))
    {
      v7 = 15;
      v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      v4 = *((_QWORD *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v5 = __error();
          v6 = strerror(*v5);
          *(_DWORD *)buf = 136315138;
          v9 = v6;
          _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_1BF5CFC24(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;
  xpc::object *v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  const void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  WakeReason *v29;
  void *__p[2];
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v50 = v4;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v45 = v4;
  v44 = v4;
  v43 = v4;
  v42 = v4;
  *(_OWORD *)v38 = v4;
  v39 = v4;
  v36 = v4;
  v37 = v4;
  v34 = v4;
  v35 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v41 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v9, &v34);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v33 = v5 + 24;
  v41 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v34 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  LODWORD(v40) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      v12 = 13;
      v13 = "kNotSupported";
      goto LABEL_8;
    case 1:
      v12 = 13;
      v13 = "kNotAvailable";
LABEL_8:
      v32 = 13;
      __p[0] = *(void **)v13;
      *(void **)((char *)__p + 5) = *(void **)(v13 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25701;
      v14 = "kRequested";
      goto LABEL_6;
    case 3:
      v12 = 10;
      v32 = 10;
      LOWORD(__p[1]) = 25964;
      v14 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v14;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      v12 = 6;
      v32 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      v12 = 8;
      v32 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
  if (v32 < 0)
    operator delete(__p[0]);
  v17 = *((_QWORD *)a2 + 1);
  v16 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x1C3B8CD78](v17) == MEMORY[0x1E0C812F8])
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string(v16);
    v19 = v32 >= 0 ? __p : (void **)__p[0];
    v20 = v32 >= 0 ? (void *)v32 : __p[1];
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"'", 1);
    if (v32 < 0)
    {
      operator delete(__p[0]);
      v22 = v40;
      if ((v40 & 0x10) == 0)
        goto LABEL_21;
LABEL_25:
      v25 = *((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) < (unint64_t)v37)
      {
        *((_QWORD *)&v39 + 1) = v37;
        v25 = v37;
      }
      v24 = (const void **)&v36 + 1;
      goto LABEL_28;
    }
  }
  v22 = v40;
  if ((v40 & 0x10) != 0)
    goto LABEL_25;
LABEL_21:
  if ((v22 & 8) == 0)
  {
    v23 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_36;
  }
  v24 = (const void **)&v35;
  v25 = v36;
LABEL_28:
  v26 = *v24;
  v23 = v25 - (_QWORD)*v24;
  if (v23 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v29 = (WakeReason *)operator new(v27 + 1);
    *((_QWORD *)this + 1) = v23;
    *((_QWORD *)this + 2) = v28 | 0x8000000000000000;
    *(_QWORD *)this = v29;
    this = v29;
    goto LABEL_35;
  }
  *((_BYTE *)this + 23) = v23;
  if (v23)
LABEL_35:
    memmove(this, v26, v23);
LABEL_36:
  *((_BYTE *)this + v23) = 0;
  v33 = *v7;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v7[3];
  *(_QWORD *)&v34 = v10 + 16;
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v41);
}

void sub_1BF5D0020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_28(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void **v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const void *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  size_t v34;
  void **v35;
  NSObject *v36;
  void **v37;
  CFTypeRef v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  int v43;
  size_t v44;
  size_t v45;
  std::string::size_type v46;
  size_t v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  char *v52;
  uint8_t *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  void *v57[2];
  std::string::size_type v58;
  void *__p[3];
  _QWORD v60[2];
  CFTypeRef cf;
  std::__shared_weak_count *v63;
  uint64_t v64;
  void *__dst[5];
  uint8_t buf[24];
  void *v67;
  _QWORD *v68;
  void **v69;
  std::string v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v63 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v15 = v6;
LABEL_64:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      v8 = (_QWORD *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x1E0C809B0];
        __dst[1] = (void *)0x40000000;
        __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_26;
        __dst[4] = v8;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        __p[0] = __dst;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        v67 = &__block_descriptor_tmp_21;
        v68 = v8 + 9;
        v69 = __p;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v60[0] = 0xAAAAAAAAAAAAAAAALL;
            v60[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v60, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            v11 = (const void *)*MEMORY[0x1E0CFB250];
            v12 = strlen((const char *)*MEMORY[0x1E0CFB250]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v16 = v12 | 7;
              v17 = v16 + 1;
              v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              v14 = __dst;
              if (!v12)
              {
LABEL_20:
                v18 = (const char *)*MEMORY[0x1E0CFB370];
                *((_BYTE *)v13 + (_QWORD)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x1C3B8B878](__p);
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
                memset(__dst, 170, 24);
                v19 = (const void *)*MEMORY[0x1E0D01A30];
                v20 = strlen((const char *)*MEMORY[0x1E0D01A30]);
                if (v20 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17)
                    v23 = v20 | 7;
                  v24 = v23 + 1;
                  v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    v25 = (const char *)*MEMORY[0x1E0CFB6A0];
                    *((_BYTE *)v21 + (_QWORD)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v70, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x1C3B8B878](&v70);
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    memset(__p, 170, sizeof(__p));
                    v26 = (const char *)*MEMORY[0x1E0CFB6C8];
                    v27 = strlen((const char *)*MEMORY[0x1E0CFB6C8]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    v28 = v27;
                    if (v27 >= 0x17)
                    {
                      v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17)
                        v30 = v27 | 7;
                      v31 = v30 + 1;
                      v29 = (std::string *)operator new(v30 + 1);
                      v70.__r_.__value_.__l.__size_ = v28;
                      v70.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((_BYTE *)&v70.__r_.__value_.__s + 23) = v27;
                      v29 = &v70;
                      if (!v27)
                      {
LABEL_40:
                        v32 = (const char *)*MEMORY[0x1E0CFB548];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v64, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x1C3B8B878](&v64);
                        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v70.__r_.__value_.__l.__data_);
                        v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0)
                          v34 = HIBYTE(__p[2]);
                        else
                          v34 = (size_t)__p[1];
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          v41 = v5[21];
                          if (v41)
                          {
                            v42 = (const void *)*MEMORY[0x1E0D01A20];
                            v43 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0)
                              v44 = HIBYTE(__dst[2]);
                            else
                              v44 = (size_t)__dst[1];
                            v45 = strlen((const char *)*MEMORY[0x1E0D01A20]);
                            v46 = v44 + v45;
                            memset(&v70, 170, sizeof(v70));
                            if (v44 + v45 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v47 = v45;
                            if (v46 > 0x16)
                            {
                              v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v46 | 7) != 0x17)
                                v49 = v46 | 7;
                              v50 = v49 + 1;
                              v48 = (std::string *)operator new(v49 + 1);
                              v70.__r_.__value_.__l.__size_ = v46;
                              v70.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
                              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                            }
                            else
                            {
                              memset(&v70, 0, sizeof(v70));
                              v48 = &v70;
                              *((_BYTE *)&v70.__r_.__value_.__s + 23) = v44 + v45;
                            }
                            if (v44)
                            {
                              if (v43 >= 0)
                                v51 = __dst;
                              else
                                v51 = (void **)__dst[0];
                              memmove(v48, v51, v44);
                            }
                            v52 = (char *)v48 + v44;
                            if (v47)
                              memmove(v52, v42, v47);
                            v52[v47] = 0;
                            if ((buf[23] & 0x80u) == 0)
                              v53 = buf;
                            else
                              v53 = *(uint8_t **)buf;
                            if ((buf[23] & 0x80u) == 0)
                              v54 = buf[23];
                            else
                              v54 = *(_QWORD *)&buf[8];
                            v55 = std::string::append(&v70, (const std::string::value_type *)v53, v54);
                            v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                            v58 = v55->__r_.__value_.__r.__words[2];
                            *(_OWORD *)v57 = v56;
                            v55->__r_.__value_.__l.__size_ = 0;
                            v55->__r_.__value_.__r.__words[2] = 0;
                            v55->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 48))(v41, v57);
                            if (SHIBYTE(v58) < 0)
                              operator delete(v57[0]);
                            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v70.__r_.__value_.__l.__data_);
                          }
                        }
                        else
                        {
                          v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            v37 = (void **)__p[0];
                            if (v33 >= 0)
                              v37 = __p;
                            LODWORD(v70.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_1BF566000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v70, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0)
                              goto LABEL_57;
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x1C3B8B8B4](v60);
                          v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            v15 = v63;
                            if (!v63)
                              return;
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x1C3B8B8B4](v60);
                        v38 = cf;
                        if (!cf)
                          goto LABEL_63;
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      v10 = v5[21];
      if (!v10)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
}

void sub_1BF5D0780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0)
          operator delete(a30);
        if (a43 < 0)
          operator delete(a38);
        MEMORY[0x1C3B8B8B4](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_31(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  void (****v10)(void);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const char *v14;
  const char *v15;
  size_t v16;
  int v17;
  void *v18;
  size_t v19;
  void **v20;
  void **v21;
  void *v22;
  void **v23;
  size_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  void (**v28)(void);
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31[2];
  char v32;
  _QWORD v33[2];
  CFTypeRef cf;
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *__p[5];
  void *block[6];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v36 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_67;
      v8 = *(_QWORD **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x1E0C809B0];
        __p[1] = (void *)0x40000000;
        __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_27;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x1E0C809B0];
        v31[0] = __p;
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21;
        block[4] = v8 + 9;
        block[5] = v31;
        v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          v27 = *(_QWORD *)(v5 + 168);
          v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData(*a2);
            v12 = cf;
            v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!cf)
              v13 = 0;
            if (!v13)
              goto LABEL_65;
            v33[0] = 0xAAAAAAAAAAAAAAAALL;
            v33[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            v14 = (const char *)*MEMORY[0x1E0CFB530];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8B878](v31);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            memset(__p, 170, 24);
            v15 = (const char *)*MEMORY[0x1E0CFB538];
            v32 = 0;
            LOBYTE(v31[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8B878](&v37);
            if (v32 < 0)
              operator delete(v31[0]);
            v16 = HIBYTE(block[2]);
            v17 = SHIBYTE(block[2]);
            v18 = block[1];
            if (SHIBYTE(block[2]) >= 0)
              v19 = HIBYTE(block[2]);
            else
              v19 = (size_t)block[1];
            if (v19 == strlen((const char *)*MEMORY[0x1E0CFB7F0]))
            {
              v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x1E0CFB7F0], v19))
              {
                ((void (*)(void (***)(void)))(**v10)[1])(*v10);
                v28 = **v10;
LABEL_59:
                (*v28)();
                goto LABEL_60;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E0CFBB68]))
            {
              v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x1E0CFBB68], v19))
              {
                v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x1E0CFB590]))
                {
                  v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x1E0CFB590], (size_t)v22))
                  {
                    if ((((uint64_t (*)(void (***)(void)))(**v10)[11])(*v10) & 1) != 0)
                    {
LABEL_58:
                      v28 = **v10 + 2;
                      goto LABEL_59;
                    }
                    v16 = HIBYTE(block[2]);
                    v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0)
              v24 = v16;
            else
              v24 = (size_t)v18;
            if (v24 != strlen((const char *)*MEMORY[0x1E0CFBA60])
              || ((v17 & 0x80u) == 0 ? (v25 = block) : (v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x1E0CFBA60], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x1E0CFBD30]))
              {
                v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x1E0CFBD30], v24))
                {
                  ((void (*)(void (***)(void)))(**v10)[2])(*v10);
                  ((void (*)(void (***)(void)))(**v10)[7])(*v10);
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_60;
            }
            if (((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
              && (!((unsigned int (*)(void (***)(void)))(**v10)[11])(*v10)
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x1E0CFB598])))
            {
LABEL_60:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(block[2]) < 0)
                operator delete(block[0]);
              MEMORY[0x1C3B8B8B4](v33);
              v12 = cf;
LABEL_65:
              if (v12)
                CFRelease(v12);
              goto LABEL_67;
            }
            goto LABEL_58;
          }
LABEL_67:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      v11 = *(_QWORD *)(v5 + 168);
      v10 = (void (****)(void))(v5 + 168);
      if (v11)
        goto LABEL_8;
      goto LABEL_67;
    }
  }
}

void sub_1BF5D0D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  MEMORY[0x1C3B8B8B4](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF5D0DBC()
{
  JUMPOUT(0x1BF5D0DA4);
}

void sub_1BF5D0DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  _QWORD *v12;
  _QWORD block[6];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_9;
      v6 = *(_QWORD *)(v3 + 184);
      if (v6)
      {
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 0x40000000;
        v11[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        v11[3] = &__block_descriptor_tmp_27;
        v11[4] = v6;
        v12 = v11;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_21;
        block[4] = v6 + 72;
        block[5] = &v12;
        v7 = *(NSObject **)(v6 + 88);
        if (!*(_QWORD *)(v6 + 96))
        {
          dispatch_sync(v7, block);
          v8 = *(_QWORD *)(v3 + 168);
          if (!v8)
          {
LABEL_9:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
LABEL_8:
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          goto LABEL_9;
        }
        dispatch_async_and_wait(v7, block);
      }
      v8 = *(_QWORD *)(v3 + 168);
      if (!v8)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
}

void sub_1BF5D0F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_36(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  uint8_t buf[8];
  uint64_t v16;
  _QWORD *(*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[11];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        v10 = v3[23];
        if (v10)
        {
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 0x40000000;
          v13[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v13[3] = &__block_descriptor_tmp_26;
          v13[4] = v10;
          v14 = v13;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          v16 = 0x40000000;
          v17 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          v18 = &__block_descriptor_tmp_21;
          v19 = v10 + 72;
          v20 = &v14;
          v11 = *(NSObject **)(v10 + 88);
          if (!*(_QWORD *)(v10 + 96))
          {
            dispatch_sync(v11, buf);
            v12 = v3[21];
            if (!v12)
              return;
LABEL_14:
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            return;
          }
          dispatch_async_and_wait(v11, buf);
        }
        v12 = v3[21];
        if (!v12)
          return;
        goto LABEL_14;
      }
    }
  }
}

void TransportModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
  }
  else
  {
    v5 = xpc_null_create();
  }
  v6 = xpc_string_create(*a1);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1BF5D12E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7915070;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  TransportModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF5D17D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *isa;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;
  dispatch_object_t block[6];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    v6 = *(_QWORD *)(v3 + 168);
    if (!v6)
      goto LABEL_11;
    goto LABEL_5;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_20;
  v13[4] = v4;
  v14 = v13;
  block[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  block[1] = (dispatch_object_t)0x40000000;
  block[2] = (dispatch_object_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_object_t)&__block_descriptor_tmp_21;
  block[4] = v4 + 9;
  block[5] = (dispatch_object_t)&v14;
  isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  v6 = *(_QWORD *)(v3 + 168);
  if (!v6)
    goto LABEL_11;
LABEL_5:
  v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0])
      dispatch_release(block[0]);
  }
LABEL_11:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_1BF5D198C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[5];
  _QWORD *v15;
  dispatch_group_t group;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = *a1;
  v3 = **a1;
  v4 = *(_QWORD *)(v3 + 184);
  if (v4)
  {
    group = (dispatch_group_t)MEMORY[0x1E0C809B0];
    v17 = 0x40000000;
    v18 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v19 = &__block_descriptor_tmp_22;
    v20 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    v12 = *(_QWORD *)(v3 + 184);
    if (v12)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v14[3] = &__block_descriptor_tmp_27;
      v14[4] = v12;
      v15 = v14;
      group = (dispatch_group_t)MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      v19 = &__block_descriptor_tmp_21;
      v20 = v12 + 72;
      v21 = &v15;
      v13 = *(NSObject **)(v12 + 88);
      if (*(_QWORD *)(v12 + 96))
        dispatch_async_and_wait(v13, &group);
      else
        dispatch_sync(v13, &group);
    }
  }
  v5 = *(_QWORD *)(v3 + 168);
  if (v5)
  {
    v6 = v2[1];
    group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF5D1BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    v19 = v16[1];
    if (v19)
      dispatch_release(v19);
  }
  operator delete(v16);
  v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void TraceManager::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13[2];
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD block[6];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x140uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v13[0] = v6;
  v13[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  TraceManager::TraceManager((uint64_t)v4, v13);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(a2, v5);
  ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v10 = *a2;
  v11 = *a2 + 120;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN12TraceManager4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_6_1;
  v14[4] = v10;
  v15 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_79_0;
  block[4] = v11;
  block[5] = &v15;
  v12 = *(NSObject **)(v10 + 136);
  if (*(_QWORD *)(v10 + 144))
    dispatch_async_and_wait(v12, block);
  else
    dispatch_sync(v12, block);
}

void sub_1BF5D1D7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::init(TraceManager *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN12TraceManager4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_1;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_79_0;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TraceManager::TraceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BasebandCrashReasonFilter *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  TraceCAReporter *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _BYTE v39[16];
  __int128 block;
  void (*v41)(uint64_t);
  void *v42;
  uint64_t *v43;
  _BYTE v44[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E79150B0;
  *(_QWORD *)(a1 + 48) = &unk_1E7915120;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v39, "com.apple.telephony.abm", "trace.mgr");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v41 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v42 = &__block_descriptor_tmp_13_8;
  v43 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("trace.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E79157E8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v44);
    *v9 = off_1E7915878;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v44);
    *v9 = off_1E7915878;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v39);
  *(_QWORD *)a1 = off_1E79150B0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 48) = &unk_1E7915120;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = a1 + 216;
  *(_QWORD *)(a1 + 224) = a1 + 216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v20 = operator new(0x18uLL);
  v20[2] = 0;
  v20[1] = 0;
  *v20 = v20 + 1;
  *(_QWORD *)(a1 + 256) = v20;
  v21 = operator new(0x20uLL);
  *v21 = off_1E79158B8;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v20;
  *(_QWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v22 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v22);
  *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(&block, (uint64_t)v22);
  v23 = block;
  block = 0uLL;
  v24 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v30);
  *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)&block, (std::__shared_weak_count_vtbl *)v30);
  v31 = block;
  block = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return a1;
}

void sub_1BF5D2320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;

  v26 = v25;
  operator delete(v26);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19 + 304);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19 + 288);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19 + 272);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23);
  std::list<boost::signals2::connection>::~list(v22);
  if (*(char *)(v19 + 215) < 0)
    operator delete(*(void **)(v19 + 192));
  if (*(char *)(v19 + 191) < 0)
    operator delete(*(void **)(v19 + 168));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v21);
  ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v20);
  Service::~Service((Service *)v19);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TraceManager::~TraceManager(TraceManager *this)
{
  char *v2;
  char *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  _QWORD v59[2];

  *(_QWORD *)this = off_1E79150B0;
  *((_QWORD *)this + 6) = &unk_1E7915120;
  v2 = (char *)this + 216;
  for (i = (char *)*((_QWORD *)this + 28); i != v2; i = (char *)*((_QWORD *)i + 1))
  {
    v4 = (unsigned int *)*((_QWORD *)i + 3);
    v59[0] = 0;
    v59[1] = v4;
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)*((_QWORD *)i + 2);
            v59[0] = v8;
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (*((_QWORD *)this + 29))
  {
    v14 = *((_QWORD *)this + 27);
    v15 = (char *)*((_QWORD *)this + 28);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 29) = 0;
    if (v15 != v2)
    {
      do
      {
        v39 = (char *)*((_QWORD *)v15 + 1);
        v40 = (unsigned int *)*((_QWORD *)v15 + 3);
        if (v40)
        {
          v41 = v40 + 3;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
            (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 24))(v40);
        }
        operator delete(v15);
        v15 = v39;
      }
      while (v39 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *((_QWORD *)this + 11);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v20 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_26:
    LOWORD(v59[0]) = 0;
    _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v59, 2u);
  }
LABEL_27:
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v33)
    goto LABEL_51;
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!*((_QWORD *)this + 29))
      goto LABEL_69;
  }
  else
  {
LABEL_51:
    if (!*((_QWORD *)this + 29))
      goto LABEL_69;
  }
  v36 = *((_QWORD *)this + 27);
  v37 = (char *)*((_QWORD *)this + 28);
  v38 = *(_QWORD *)v37;
  *(_QWORD *)(v38 + 8) = *(_QWORD *)(v36 + 8);
  **(_QWORD **)(v36 + 8) = v38;
  *((_QWORD *)this + 29) = 0;
  if (v37 != v2)
  {
    do
    {
      v44 = (char *)*((_QWORD *)v37 + 1);
      v45 = (unsigned int *)*((_QWORD *)v37 + 3);
      if (v45)
      {
        v46 = v45 + 3;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
          (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 24))(v45);
      }
      operator delete(v37);
      v37 = v44;
    }
    while (v44 != v2);
  }
LABEL_69:
  if (*((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_71:
      v49 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
      if (!v49)
        goto LABEL_79;
      goto LABEL_75;
    }
  }
  else if ((*((char *)this + 191) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(*((void **)this + 21));
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v49)
    goto LABEL_79;
LABEL_75:
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_79:
  *((_QWORD *)this + 6) = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v52 = *((_QWORD *)this + 18);
  if (v52)
    dispatch_release(v52);
  v53 = *((_QWORD *)this + 17);
  if (v53)
    dispatch_release(v53);
  v54 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  *(_QWORD *)this = off_1E79228B8;
  v55 = *((_QWORD *)this + 3);
  if (v55)
  {
    v56 = *((_QWORD *)this + 4);
    v57 = (void *)*((_QWORD *)this + 3);
    if (v56 != v55)
    {
      do
      {
        if (*(char *)(v56 - 1) < 0)
          operator delete(*(void **)(v56 - 24));
        v56 -= 24;
      }
      while (v56 != v55);
      v57 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v55;
    operator delete(v57);
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
}

{
  void *v1;

  TraceManager::~TraceManager(this);
  operator delete(v1);
}

void sub_1BF5D2938(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'TraceManager::~TraceManager(TraceManager *this)
{
  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));
}

{
  void *v1;

  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));
  operator delete(v1);
}

void ___ZN12TraceManager4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _BYTE *, uint64_t);
  void (*v31)(uint64_t, _WORD *, unsigned int);
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t ***v42;
  __int128 v43;
  pthread_mutex_t *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t *v48;
  int v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  _QWORD **v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  int v89;
  int v90;
  _QWORD *v91;
  __int128 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t **v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t i;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t **v120;
  int v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  BOOL v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t **v132;
  int v133;
  uint64_t ***v134;
  BOOL v135;
  BOOL v136;
  uint64_t ***v137;
  int v138;
  BOOL v139;
  int v140;
  uint64_t *v141;
  uint64_t *v142;
  int v143;
  uint64_t **v144;
  int v145;
  int v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  int *v165;
  int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t **v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  BOOL v187;
  BOOL v188;
  uint64_t *v189;
  int v190;
  uint64_t *v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int *v199;
  const void *v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  char *v207;
  char *v208;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  void (*v216)(__int128 *, __int128 *, uint64_t);
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  int v221;
  int v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unint64_t *v231;
  unint64_t v232;
  _OWORD *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  const void *v240;
  size_t v241;
  size_t v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  NSObject *global_queue;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  void *v251;
  uint64_t **v252;
  void *v253;
  const void *v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  uint64_t ***v258;
  _QWORD block[6];
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  __int128 v265;
  _QWORD aBlock[7];
  dispatch_object_t v267;
  void *v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  dispatch_object_t v273;
  void *v274;
  dispatch_object_t object;
  void *v276;
  unint64_t v277;
  unint64_t v278;
  void *v279;
  _BYTE buf[32];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  unint64_t v289;
  void *__p;
  uint64_t v291;
  pthread_mutex_t *v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  v255 = *(_QWORD **)(a1 + 32);
  v1 = v255[11];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v5 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = off_1ED70F4D0;
  }
  block[5] = v3;
  v260 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v261, v3);
  v263 = 0;
  v264 = 0;
  if (v262 && (v264 = std::__shared_weak_count::lock(v262)) != 0)
  {
    v13 = v261;
    v263 = v261;
  }
  else
  {
    v13 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_76;
  aBlock[4] = v255 + 15;
  aBlock[5] = TraceManager::handleDumpLogsIndication_sync;
  aBlock[6] = 0;
  v14 = _Block_copy(aBlock);
  v257 = v13;
  v15 = (std::__shared_weak_count *)v255[16];
  if (!v15 || (v16 = v255[15], (v256 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v255[17];
  v267 = v17;
  v254 = v14;
  if (v14)
    v18 = _Block_copy(v14);
  else
    v18 = 0;
  v268 = v18;
  dispatch_retain(v17);
  v269 = 0u;
  v270 = 0u;
  v273 = v17;
  if (v18)
    v18 = _Block_copy(v18);
  v274 = v18;
  dispatch_retain(v17);
  object = v17;
  if (!v18)
  {
    v276 = 0;
    dispatch_retain(v17);
    goto LABEL_38;
  }
  v19 = _Block_copy(v18);
  v276 = v19;
  dispatch_retain(v17);
  if (!v19)
  {
LABEL_38:
    dispatch_retain(v17);
    v277 = 0;
    goto LABEL_39;
  }
  v20 = _Block_copy(v19);
  dispatch_retain(v17);
  v277 = 0;
  if (!v20)
  {
LABEL_39:
    dispatch_retain(v17);
    v251 = 0;
    v25 = 1;
LABEL_40:
    dispatch_retain(v17);
    v253 = 0;
    v26 = 1;
LABEL_41:
    dispatch_retain(v17);
    v22 = 0;
    v27 = 1;
LABEL_42:
    dispatch_retain(v17);
    v23 = 0;
    v278 = (unint64_t)v17;
    v28 = 1;
    goto LABEL_43;
  }
  v21 = _Block_copy(v20);
  dispatch_retain(v17);
  v251 = v20;
  if (!v21)
  {
    v25 = 0;
    goto LABEL_40;
  }
  v22 = _Block_copy(v21);
  dispatch_retain(v17);
  v253 = v21;
  if (!v22)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_41;
  }
  v23 = _Block_copy(v22);
  dispatch_retain(v17);
  if (!v23)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_42;
  }
  v24 = _Block_copy(v23);
  dispatch_retain(v17);
  v278 = (unint64_t)v17;
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v279 = _Block_copy(v24);
    dispatch_retain(v17);
    dispatch_release(v17);
    _Block_release(v24);
    goto LABEL_44;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
LABEL_43:
  v279 = 0;
  dispatch_retain(v17);
  dispatch_release(v17);
LABEL_44:
  dispatch_release(v17);
  if ((v28 & 1) == 0)
    _Block_release(v23);
  dispatch_release(v17);
  if ((v27 & 1) == 0)
    _Block_release(v22);
  v277 = (unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>)::stored_vtable;
  dispatch_release(v17);
  if ((v26 & 1) == 0)
    _Block_release(v253);
  dispatch_release(v17);
  if ((v25 & 1) == 0)
    _Block_release(v251);
  *(_QWORD *)buf = 0;
  memset(&buf[8], 170, 24);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)buf, (uint64_t *)&v277);
  v29 = v16;
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v277, (uint64_t *)&v270 + 1);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v270 + 8, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      v30 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v30)
        v30(&buf[8], &buf[8], 2);
    }
  }
  if (v277)
  {
    if ((v277 & 1) == 0)
    {
      v31 = *(void (**)(uint64_t, _WORD *, unsigned int))(v277 & 0xFFFFFFFFFFFFFFFELL);
      if (v31)
        v31((uint64_t)&v278, &v278, 2u);
    }
    v277 = 0;
  }
  dispatch_release(object);
  if (v276)
    _Block_release(v276);
  dispatch_release(v273);
  if (v274)
    _Block_release(v274);
  p_shared_weak_owners = (unint64_t *)&v256->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = operator new(0x18uLL);
  *v34 = &off_1E7915B60;
  v34[1] = v16;
  v34[2] = v256;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = operator new(0x18uLL);
  v37 = v36;
  *v36 = &off_1E7915B60;
  v36[1] = v16;
  v36[2] = v256;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  *(_QWORD *)&buf[8] = v36;
  *(_DWORD *)buf = 2;
  v39 = *((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1) < (unint64_t)v270)
  {
    v40 = operator new(0x18uLL);
    *v40 = &off_1E7915B60;
    v40[1] = v29;
    v40[2] = v256;
    do
      v41 = __ldxr(p_shared_weak_owners);
    while (__stxr(v41 + 1, p_shared_weak_owners));
    *(_QWORD *)(v39 + 8) = v40;
    *(_DWORD *)v39 = 2;
    *((_QWORD *)&v269 + 1) = v39 + 24;
LABEL_75:
    (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    goto LABEL_76;
  }
  v165 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)&v269, (uint64_t)buf);
  v166 = *(_DWORD *)buf ^ (*(int *)buf >> 31);
  *((_QWORD *)&v269 + 1) = v165;
  if (v166 == 2)
  {
    v37 = *(_QWORD **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_76;
    goto LABEL_75;
  }
  if (v166 == 1)
  {
    v167 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v168 = (unsigned int *)(*(_QWORD *)&buf[16] + 12);
      do
      {
        v169 = __ldaxr(v168);
        v170 = v169 - 1;
      }
      while (__stlxr(v170, v168));
      if (!v170)
LABEL_285:
        (*(void (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167);
    }
  }
  else
  {
    v167 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v248 = (unsigned int *)(*(_QWORD *)&buf[16] + 12);
      do
      {
        v249 = __ldaxr(v248);
        v250 = v249 - 1;
      }
      while (__stlxr(v250, v248));
      if (!v250)
        goto LABEL_285;
    }
  }
LABEL_76:
  (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  std::__shared_weak_count::__release_weak(v256);
  v42 = *(uint64_t ****)(v257 + 112);
  *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v287 = v43;
  v288 = v43;
  v285 = v43;
  v286 = v43;
  v283 = v43;
  v284 = v43;
  v281 = v43;
  v282 = v43;
  *(_OWORD *)buf = v43;
  *(_OWORD *)&buf[16] = v43;
  v44 = (pthread_mutex_t *)v42[3];
  v289 = 10;
  __p = buf;
  v291 = 0;
  v292 = v44;
  pthread_mutex_lock(v44);
  v277 = 0xAAAAAAAAAAAAAAAALL;
  v278 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (unsigned int *)v42[1];
  v258 = v42;
  if (!v45 || (v46 = atomic_load(v45 + 2), v46 != 1))
  {
    v50 = (uint64_t **)operator new(0x20uLL);
    v51 = (uint64_t *)*v42;
    v52 = *v51;
    v252 = v50;
    v53 = operator new(0x40uLL);
    v54 = v53;
    *v53 = v53;
    v53[1] = v53;
    v53[2] = 0;
    v55 = *(_QWORD **)(v52 + 8);
    if (v55 != (_QWORD *)v52)
    {
      v56 = 0;
      v57 = v53;
      do
      {
        v58 = operator new(0x20uLL);
        v58[2] = v55[2];
        v59 = v55[3];
        v58[3] = v59;
        if (v59)
        {
          v60 = (unsigned int *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v57 = (_QWORD *)*v54;
          v56 = v54[2];
        }
        *v58 = v57;
        v58[1] = v54;
        v57[1] = v58;
        *v54 = v58;
        v54[2] = ++v56;
        v55 = (_QWORD *)v55[1];
        v57 = v58;
      }
      while (v55 != (_QWORD *)v52);
    }
    v54[3] = 0;
    v62 = (_QWORD **)(v54 + 3);
    v54[4] = 0;
    v63 = v54 + 4;
    v54[5] = 0;
    *((_BYTE *)v54 + 48) = *(_BYTE *)(v52 + 48);
    v54[3] = v54 + 4;
    v64 = *(_QWORD **)(v52 + 24);
    v65 = (_QWORD *)(v52 + 32);
    if (v64 == (_QWORD *)(v52 + 32))
    {
LABEL_88:
      *((_BYTE *)v54 + 56) = *(_BYTE *)(v52 + 56);
      v66 = *(_QWORD **)(v52 + 24);
      if (v66 != v65)
      {
        v67 = (_QWORD *)v54[3];
        v68 = v54[1];
        do
        {
          v67[6] = v68;
          v69 = v52;
          if (v66 != v65)
            v69 = v66[6];
          v70 = (_QWORD *)v66[1];
          v71 = v70;
          v72 = v66;
          if (v70)
          {
            do
            {
              v73 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v73 = (_QWORD *)v72[2];
              v127 = *v73 == (_QWORD)v72;
              v72 = v73;
            }
            while (!v127);
          }
          v74 = v52;
          if (v73 != v65)
            v74 = v73[6];
          while (v69 != v74)
          {
            v69 = *(_QWORD *)(v69 + 8);
            v68 = *(_QWORD *)(v68 + 8);
          }
          if (v70)
          {
            do
            {
              v75 = v70;
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v75 = (_QWORD *)v66[2];
              v127 = *v75 == (_QWORD)v66;
              v66 = v75;
            }
            while (!v127);
          }
          v76 = (_QWORD *)v67[1];
          if (v76)
          {
            do
            {
              v77 = v76;
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
          else
          {
            do
            {
              v77 = (_QWORD *)v67[2];
              v127 = *v77 == (_QWORD)v67;
              v67 = v77;
            }
            while (!v127);
          }
          v66 = v75;
          v67 = v77;
        }
        while (v75 != v65);
      }
      *v252 = v54;
      v252[1] = 0;
      v97 = (uint64_t *)operator new(0x18uLL);
      v97[1] = 0x100000001;
      *v97 = (uint64_t)off_1E7915988;
      v97[2] = (uint64_t)v54;
      v252[1] = v97;
      v252[2] = (uint64_t *)v51[2];
      v98 = v51[3];
      v252[3] = (uint64_t *)v98;
      if (v98)
      {
        v99 = (unsigned int *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = (uint64_t **)operator new(0x18uLL);
      v101[1] = (uint64_t *)0x100000001;
      *v101 = (uint64_t *)off_1E7915928;
      v101[2] = (uint64_t *)v252;
      v102 = (unsigned int *)v258[1];
      *v258 = v252;
      v258[1] = v101;
      if (v102)
      {
        v103 = v102 + 2;
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 16))(v102);
          v106 = v102 + 3;
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
            (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 24))(v102);
        }
      }
      v49 = 0;
      v47 = **v258;
LABEL_172:
      v48 = (uint64_t *)v47[1];
      if (v47 == v48)
        goto LABEL_276;
      goto LABEL_173;
    }
    while (1)
    {
      v78 = *((_DWORD *)v64 + 8);
      v79 = (_QWORD *)*v63;
      v80 = v54 + 4;
      if (*v62 != v63)
      {
        v81 = (_QWORD *)*v63;
        v82 = v54 + 4;
        if (v79)
        {
          do
          {
            v80 = v81;
            v81 = (_QWORD *)v81[1];
          }
          while (v81);
        }
        else
        {
          do
          {
            v80 = (_QWORD *)v82[2];
            v127 = *v80 == (_QWORD)v82;
            v82 = v80;
          }
          while (v127);
        }
        v83 = *((_DWORD *)v64 + 10);
        v84 = *((_DWORD *)v80 + 8);
        if (v84 == v78)
        {
          if (v78 != 1)
            goto LABEL_133;
          if (*((_DWORD *)v80 + 10) >= v83)
          {
            v85 = (_QWORD *)*v63;
            v86 = v54 + 4;
            v87 = v54 + 4;
            if (v79)
              goto LABEL_137;
LABEL_144:
            v91 = operator new(0x38uLL);
            v92 = *((_OWORD *)v64 + 2);
            v91[6] = v64[6];
            *((_OWORD *)v91 + 2) = v92;
            *v91 = 0;
            v91[1] = 0;
            v91[2] = v87;
            *v86 = v91;
            v93 = (_QWORD *)**v62;
            if (v93)
            {
              *v62 = v93;
              v91 = (_QWORD *)*v86;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v54[4], v91);
            ++v54[5];
            goto LABEL_147;
          }
        }
        else if (v84 >= v78)
        {
LABEL_133:
          v86 = v54 + 4;
          v87 = v54 + 4;
          if (!v79)
            goto LABEL_144;
          v85 = (_QWORD *)*v63;
          if (v78 != 1)
          {
            v88 = *((_DWORD *)v79 + 8);
            v87 = (_QWORD *)*v63;
            while (v78 != v88)
            {
              if (v78 < v88)
              {
                v96 = *v87;
                v86 = v87;
                if (!*v87)
                  goto LABEL_144;
              }
              else
              {
                if (v88 >= v78)
                  goto LABEL_147;
                v96 = v87[1];
                if (!v96)
                  goto LABEL_143;
              }
              v88 = *(_DWORD *)(v96 + 32);
              v87 = (_QWORD *)v96;
            }
            goto LABEL_147;
          }
          while (1)
          {
LABEL_137:
            v87 = v85;
            v89 = *((_DWORD *)v85 + 8);
            if (v89 == 1)
            {
              v90 = *((_DWORD *)v85 + 10);
              if (v90 > v83)
                goto LABEL_136;
              if (v90 >= v83)
                goto LABEL_147;
            }
            else if (v89 > 1)
            {
LABEL_136:
              v85 = (_QWORD *)*v85;
              v86 = v87;
              if (!*v87)
                goto LABEL_144;
              continue;
            }
            v85 = (_QWORD *)v85[1];
            if (!v85)
            {
LABEL_143:
              v86 = v87 + 1;
              goto LABEL_144;
            }
          }
        }
      }
      if (v79)
        v87 = v80;
      else
        v87 = v54 + 4;
      if (v79)
        v86 = v80 + 1;
      else
        v86 = v54 + 4;
      if (!*v86)
        goto LABEL_144;
LABEL_147:
      v94 = (_QWORD *)v64[1];
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = (_QWORD *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (_QWORD *)v64[2];
          v127 = *v95 == (_QWORD)v64;
          v64 = v95;
        }
        while (!v127);
      }
      v64 = v95;
      if (v95 == v65)
        goto LABEL_88;
    }
  }
  v47 = **v42;
  v48 = (uint64_t *)v42[2];
  v49 = 2;
  if (v48 == v47)
    goto LABEL_172;
LABEL_173:
  v109 = 0;
  v110 = v49 - 1;
  do
  {
    v113 = v48[2];
    v114 = *(uint64_t **)(v113 + 32);
    if (v114)
    {
      for (i = *v114; i != v114[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_190;
        }
        else
        {
          v116 = *(_QWORD *)(i + 16);
          if (!v116 || (v117 = atomic_load((unsigned int *)(v116 + 8))) == 0)
          {
LABEL_190:
            if (*(_BYTE *)(v113 + 24))
            {
              *(_BYTE *)(v113 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v113, buf);
            }
            break;
          }
        }
      }
    }
    v111 = v48[2];
    if (*(_BYTE *)(v111 + 24))
    {
      v47 = (uint64_t *)v48[1];
      goto LABEL_176;
    }
    v118 = **v258;
    v120 = (uint64_t **)(v118 + 4);
    v119 = v118[4];
    if (!v119)
    {
      if ((uint64_t *)v118[10] != v48)
        goto LABEL_267;
      v142 = (uint64_t *)v48[1];
      v144 = (uint64_t **)(v118 + 4);
      v123 = v118 + 4;
      if (v142 != v118)
        goto LABEL_263;
LABEL_245:
      v147 = (uint64_t *)v123[1];
      v148 = v123;
      if (v147)
      {
        do
        {
          v149 = v147;
          v147 = (uint64_t *)*v147;
        }
        while (v147);
      }
      else
      {
        do
        {
          v149 = (uint64_t *)v148[2];
          v127 = *v149 == (_QWORD)v148;
          v148 = v149;
        }
        while (!v127);
      }
      if ((uint64_t *)v118[3] == v123)
        v118[3] = (uint64_t)v149;
      --v118[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v119, v123);
      operator delete(v123);
      goto LABEL_267;
    }
    v121 = *(_DWORD *)(v111 + 64);
    v122 = *(_DWORD *)(v111 + 72);
    v123 = v118 + 4;
    v124 = v118[4];
    if (v121 == 1)
    {
      v123 = v118 + 4;
      v125 = v118[4];
      do
      {
        while (1)
        {
          v138 = *(_DWORD *)(v125 + 32);
          v139 = v138 < 1;
          if (v138 == 1)
            v139 = *(_DWORD *)(v125 + 40) < v122;
          if (v139)
            break;
          v123 = (uint64_t *)v125;
          v125 = *(_QWORD *)v125;
          if (!v125)
            goto LABEL_205;
        }
        v125 = *(_QWORD *)(v125 + 8);
      }
      while (v125);
    }
    else
    {
      do
      {
        v126 = *(_DWORD *)(v124 + 32);
        v127 = v126 == v121;
        v128 = v126 < v121;
        if (v126 >= v121)
          v129 = (uint64_t *)v124;
        else
          v129 = (uint64_t *)(v124 + 8);
        if (v128)
          v130 = v123;
        else
          v130 = (uint64_t *)v124;
        if (v127)
        {
          v129 = (uint64_t *)v124;
          v123 = (uint64_t *)v124;
        }
        else
        {
          v123 = v130;
        }
        v124 = *v129;
      }
      while (*v129);
    }
LABEL_205:
    if ((uint64_t *)v123[6] != v48)
      goto LABEL_267;
    v131 = (uint64_t **)(v118 + 4);
    v132 = (uint64_t **)v118[4];
    if (v121 == 1)
    {
      while (1)
      {
        v140 = *((_DWORD *)v132 + 8);
        if (v140 == 1)
        {
          if (v122 < *((_DWORD *)v132 + 10))
            goto LABEL_228;
LABEL_223:
          v132 = (uint64_t **)v132[1];
          if (!v132)
            goto LABEL_229;
        }
        else
        {
          if (v140 <= 1)
            goto LABEL_223;
LABEL_228:
          v131 = v132;
          v132 = (uint64_t **)*v132;
          if (!v132)
            goto LABEL_229;
        }
      }
    }
    do
    {
      v133 = *((_DWORD *)v132 + 8);
      v134 = (uint64_t ***)(v132 + 1);
      v135 = v121 == v133;
      v136 = v121 < v133;
      if (v121 >= v133)
        v137 = (uint64_t ***)(v132 + 1);
      else
        v137 = (uint64_t ***)v132;
      if (!v136)
        v132 = v131;
      if (v135)
        v137 = v134;
      else
        v131 = v132;
      v132 = *v137;
    }
    while (*v137);
LABEL_229:
    v141 = **v258;
    if (v131 != v120)
      v141 = v131[6];
    v142 = (uint64_t *)v48[1];
    if (v142 == v141)
      goto LABEL_245;
    if (v121 == 1)
    {
      while (1)
      {
        while (1)
        {
          v144 = (uint64_t **)v119;
          v145 = *(_DWORD *)(v119 + 32);
          if (v145 == 1)
            break;
          if (v145 <= 1)
            goto LABEL_241;
LABEL_235:
          v119 = *(_QWORD *)v119;
          if (!*v144)
          {
            v120 = v144;
            goto LABEL_263;
          }
        }
        v146 = *(_DWORD *)(v119 + 40);
        if (v146 > v122)
          goto LABEL_235;
        if (v146 >= v122)
        {
          *(_QWORD *)(v119 + 48) = v142;
          goto LABEL_267;
        }
LABEL_241:
        v119 = *(_QWORD *)(v119 + 8);
        if (!v119)
        {
          v120 = v144 + 1;
          goto LABEL_263;
        }
      }
    }
    v143 = *(_DWORD *)(v119 + 32);
    if (v121 == v143)
      goto LABEL_266;
    while (v121 >= v143)
    {
      if (v143 >= v121)
        goto LABEL_266;
      v150 = *(_QWORD *)(v119 + 8);
      if (!v150)
      {
        v120 = (uint64_t **)(v119 + 8);
        goto LABEL_262;
      }
LABEL_254:
      v143 = *(_DWORD *)(v150 + 32);
      v119 = v150;
      if (v121 == v143)
      {
        *(_QWORD *)(v150 + 48) = v142;
        goto LABEL_267;
      }
    }
    v150 = *(_QWORD *)v119;
    if (*(_QWORD *)v119)
      goto LABEL_254;
    v120 = (uint64_t **)v119;
LABEL_262:
    v144 = (uint64_t **)v119;
LABEL_263:
    v119 = (uint64_t)operator new(0x38uLL);
    v151 = *(_QWORD *)(v111 + 64);
    *(_DWORD *)(v119 + 40) = *(_DWORD *)(v111 + 72);
    *(_QWORD *)(v119 + 32) = v151;
    *(_QWORD *)(v119 + 48) = 0;
    *(_QWORD *)v119 = 0;
    *(_QWORD *)(v119 + 8) = 0;
    *(_QWORD *)(v119 + 16) = v144;
    *v120 = (uint64_t *)v119;
    v152 = *(_QWORD *)v118[3];
    v153 = (uint64_t *)v119;
    if (v152)
    {
      v118[3] = v152;
      v153 = *v120;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v118[4], v153);
    ++v118[5];
LABEL_266:
    *(_QWORD *)(v119 + 48) = v142;
LABEL_267:
    v154 = *v48;
    v47 = (uint64_t *)v48[1];
    *(_QWORD *)(v154 + 8) = v47;
    *(_QWORD *)v48[1] = v154;
    --v118[2];
    v155 = (unsigned int *)v48[3];
    if (v155)
    {
      v156 = v155 + 2;
      do
      {
        v157 = __ldaxr(v156);
        v158 = v157 - 1;
      }
      while (__stlxr(v158, v156));
      if (!v158)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 16))(v155);
        v159 = v155 + 3;
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
          (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 24))(v155);
      }
    }
    operator delete(v48);
LABEL_176:
    v112 = v47 != **v258 && v110 >= ++v109;
    v48 = v47;
  }
  while (v112);
LABEL_276:
  v258[2] = (uint64_t **)v47;
  v162 = operator new(0x50uLL);
  v162[1] = 0;
  v162[2] = 0;
  *((_BYTE *)v162 + 24) = 1;
  *((_DWORD *)v162 + 7) = 1;
  *v162 = off_1E79159E8;
  v163 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v163, (uint64_t *)&v269);
  v163[3] = 0;
  v164 = *((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v163[3] = *((_QWORD *)&v270 + 1);
    if ((v164 & 1) != 0)
    {
      *((_OWORD *)v163 + 2) = v271;
      v163[6] = v272;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v164 & 0xFFFFFFFFFFFFFFFELL))(&v271, v163 + 4, 0);
    }
  }
  v162[4] = v163;
  v162[5] = 0;
  v171 = operator new(0x18uLL);
  v171[1] = 0x100000001;
  *v171 = off_1E7915A40;
  v171[2] = v163;
  v162[5] = v171;
  v162[6] = v258[3];
  v172 = v258[4];
  v162[7] = v172;
  if (v172)
  {
    v173 = (unsigned int *)(v172 + 1);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  *((_DWORD *)v162 + 16) = 0;
  *((_BYTE *)v162 + 68) = 0;
  v277 = (unint64_t)v162;
  v175 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v175 + 1) = 0x100000001;
  v176 = v175 + 2;
  *(_QWORD *)v175 = off_1E7915AA0;
  *((_QWORD *)v175 + 2) = v162;
  v278 = (unint64_t)v175;
  v177 = **v258;
  v178 = operator new(0x20uLL);
  v179 = v178;
  v180 = v177 + 4;
  v178[2] = v162;
  v178[3] = v175;
  do
    v181 = __ldxr(v176);
  while (__stxr(v181 + 1, v176));
  v182 = *v177;
  *(_QWORD *)(v182 + 8) = v178;
  *v178 = v182;
  *v177 = (uint64_t)v178;
  v178[1] = v177;
  ++v177[2];
  v183 = (uint64_t *)v177[4];
  if (v183)
  {
    v184 = v177 + 4;
    v185 = v177[4];
    do
    {
      v186 = *(_DWORD *)(v185 + 32);
      v187 = v186 == 2;
      v188 = v186 < 2;
      if (v186 >= 2)
        v189 = (uint64_t *)v185;
      else
        v189 = (uint64_t *)(v185 + 8);
      if (!v188)
        v184 = (uint64_t *)v185;
      if (v187)
      {
        v189 = (uint64_t *)v185;
        v184 = (uint64_t *)v185;
      }
      v185 = *v189;
    }
    while (*v189);
    if (v184 == v180 || *((_DWORD *)v184 + 8) != 2)
    {
      v190 = *((_DWORD *)v183 + 8);
      while (v190 != 2)
      {
        if (v190 < 3)
        {
          v191 = (uint64_t *)v183[1];
          if (!v191)
          {
            v180 = v183 + 1;
            goto LABEL_313;
          }
        }
        else
        {
          v191 = (uint64_t *)*v183;
          v180 = v183;
          if (!*v183)
            goto LABEL_313;
        }
        v190 = *((_DWORD *)v191 + 8);
        v183 = v191;
      }
    }
    *((_DWORD *)v162 + 16) = 2;
    *(_QWORD *)((char *)v162 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_316:
    v194 = v175 + 3;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
    *(_QWORD *)&v265 = v162;
    *((_QWORD *)&v265 + 1) = v175;
    do
      v196 = __ldxr(v194);
    while (__stxr(v196 + 1, v194));
    do
    {
      v197 = __ldaxr(v194);
      v198 = v197 - 1;
    }
    while (__stlxr(v198, v194));
    if (!v198)
      (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 24))(v175);
    v199 = (unsigned int *)v278;
    v200 = v254;
    if (v278)
      goto LABEL_324;
  }
  else
  {
    v183 = v177 + 4;
LABEL_313:
    v192 = operator new(0x38uLL);
    v192[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v192 + 10) = -1431655766;
    v192[6] = v179;
    *v192 = 0;
    v192[1] = 0;
    v192[2] = v183;
    *v180 = (uint64_t)v192;
    v193 = *(_QWORD *)v177[3];
    if (v193)
    {
      v177[3] = v193;
      v192 = (_QWORD *)*v180;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v177[4], v192);
    ++v177[5];
    v162 = (_QWORD *)v277;
    v175 = (unsigned int *)v278;
    *(_DWORD *)(v277 + 64) = 2;
    *(_QWORD *)((char *)v162 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v175)
      goto LABEL_316;
    v265 = (unint64_t)v162;
    v199 = (unsigned int *)v278;
    v200 = v254;
    if (v278)
    {
LABEL_324:
      v201 = v199 + 2;
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v199 + 16))(v199);
        v204 = v199 + 3;
        do
        {
          v205 = __ldaxr(v204);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v204));
        if (!v206)
          (*(void (**)(unsigned int *))(*(_QWORD *)v199 + 24))(v199);
      }
    }
  }
  pthread_mutex_unlock(v292);
  v207 = (char *)__p;
  if (__p)
  {
    if (v291 - 1 >= 0)
    {
      v208 = (char *)__p + 16 * v291;
      do
      {
        v209 = (unsigned int *)*((_QWORD *)v208 - 1);
        if (v209)
        {
          v210 = v209 + 2;
          do
          {
            v211 = __ldaxr(v210);
            v212 = v211 - 1;
          }
          while (__stlxr(v212, v210));
          if (!v212)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v209 + 16))(v209);
            v213 = v209 + 3;
            do
            {
              v214 = __ldaxr(v213);
              v215 = v214 - 1;
            }
            while (__stlxr(v215, v213));
            if (!v215)
              (*(void (**)(unsigned int *))(*(_QWORD *)v209 + 24))(v209);
          }
        }
        v208 -= 16;
      }
      while (v208 > v207);
    }
    if (v289 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v270 + 1))
  {
    if ((BYTE8(v270) & 1) == 0)
    {
      v216 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v270 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v216)
        v216(&v271, &v271, 2);
    }
    *((_QWORD *)&v270 + 1) = 0;
  }
  v217 = v269;
  if (!(_QWORD)v269)
    goto LABEL_371;
  v218 = *((_QWORD *)&v269 + 1);
  v219 = (void *)v269;
  if (*((_QWORD *)&v269 + 1) == (_QWORD)v269)
    goto LABEL_370;
  v220 = *((_QWORD *)&v269 + 1);
  while (2)
  {
    v221 = *(_DWORD *)(v220 - 24);
    v220 -= 24;
    v222 = v221 ^ (v221 >> 31);
    if (v222 == 2)
    {
      v227 = *(_QWORD *)(v218 - 16);
      if (v227)
        (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
    }
    else if (v222 == 1)
    {
      v223 = *(unsigned int **)(v218 - 8);
      if (v223)
      {
        v224 = v223 + 3;
        do
        {
          v225 = __ldaxr(v224);
          v226 = v225 - 1;
        }
        while (__stlxr(v226, v224));
        if (!v226)
          goto LABEL_361;
      }
    }
    else
    {
      v223 = *(unsigned int **)(v218 - 8);
      if (v223)
      {
        v228 = v223 + 3;
        do
        {
          v229 = __ldaxr(v228);
          v230 = v229 - 1;
        }
        while (__stlxr(v230, v228));
        if (!v230)
LABEL_361:
          (*(void (**)(unsigned int *))(*(_QWORD *)v223 + 24))(v223);
      }
    }
    v218 = v220;
    if (v220 != v217)
      continue;
    break;
  }
  v219 = (void *)v269;
LABEL_370:
  *((_QWORD *)&v269 + 1) = v217;
  operator delete(v219);
LABEL_371:
  dispatch_release(v267);
  if (v268)
    _Block_release(v268);
  v231 = (unint64_t *)&v256->__shared_owners_;
  do
    v232 = __ldaxr(v231);
  while (__stlxr(v232 - 1, v231));
  if (v232)
  {
    if (!v200)
      goto LABEL_380;
LABEL_379:
    _Block_release(v200);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
    if (v200)
      goto LABEL_379;
  }
LABEL_380:
  v233 = operator new(0x20uLL);
  v233[1] = v265;
  v265 = 0uLL;
  *((_QWORD *)v233 + 1) = v255 + 27;
  v234 = v255[27];
  *(_QWORD *)v233 = v234;
  *(_QWORD *)(v234 + 8) = v233;
  v255[27] = v233;
  ++v255[29];
  v235 = v264;
  if (v264)
  {
    v236 = (unint64_t *)&v264->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  if (v262)
    std::__shared_weak_count::__release_weak(v262);
  if (v260)
  {
    v238 = &v260->__shared_owners_;
    do
      v239 = __ldaxr((unint64_t *)v238);
    while (__stlxr(v239 - 1, (unint64_t *)v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v240 = (const void *)*MEMORY[0x1E0D01A18];
  v241 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v241 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v242 = v241;
  if (v241 >= 0x17)
  {
    v244 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v241 | 7) != 0x17)
      v244 = v241 | 7;
    v245 = v244 + 1;
    v243 = operator new(v244 + 1);
    *(_QWORD *)&buf[8] = v242;
    *(_QWORD *)&buf[16] = v245 | 0x8000000000000000;
    *(_QWORD *)buf = v243;
    goto LABEL_399;
  }
  buf[23] = v241;
  v243 = buf;
  if (v241)
LABEL_399:
    memmove(v243, v240, v242);
  v246 = MEMORY[0x1E0C809B0];
  v243[v242] = 0;
  support::fs::createDir(buf, 0x1EDu, 1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = v246;
  block[1] = 0x40000000;
  block[2] = ___ZN12TraceManager4initEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = v255;
  dispatch_async(global_queue, block);
}

void sub_1BF5D405C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF5D4068(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4074(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4080(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D408C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4098(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D40A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D40B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D40BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D40C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D40D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  boost::signals2::detail::connection_body_base *v55;
  unsigned int *v56;
  void *v57;

  if (a2)
  {
    if (*(_QWORD *)v56)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v56, *(_QWORD *)v56);
      operator delete(*(void **)v56);
    }
    operator delete(v56);
    boost::signals2::detail::connection_body_base::~connection_body_base(v55);
    operator delete(v57);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF5D490CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D40F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4104(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF5D4118(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4124(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4130(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D413C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant((uint64_t)&a55);
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    std::__shared_weak_count::__release_weak(a14);
    JUMPOUT(0x1BF5D48FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D4164(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4170(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D417C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4188(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4194(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D41F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v10 = (unsigned int *)__p[3];
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
        v14 = v10 + 3;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
      }
    }
    v17 = (unsigned int *)__p[1];
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
        v21 = v17 + 3;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 24))(v17);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D42CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D42D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D42E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF5D490CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D42F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4300(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D43C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D43D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a2)
  {
    __cxa_end_catch();
    v10 = *(unsigned int **)(a10 + 8);
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
        v14 = v10 + 3;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
      }
    }
    JUMPOUT(0x1BF5D485CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D4440(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D444C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4458(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5D485CLL);
  _Unwind_Resume(a1);
}

void sub_1BF5D4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D4480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,char a27)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a27);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1BF5D44B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D44BC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D44E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF5D490CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D44F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4500(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D4564(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4570(_Unwind_Exception *a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF5D485CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D45D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D45E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D45F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5D45F8);
  _Unwind_Resume(a1);
}

void sub_1BF5D4604(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5D460CLL);
  _Unwind_Resume(a1);
}

void sub_1BF5D4618(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((uint64_t)(STACK[0x220] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x220];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x210] >= 0xB)
        operator delete((void *)STACK[0x218]);
    }
    JUMPOUT(0x1BF5D48FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D46BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D46C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5D46D8);
  _Unwind_Resume(a1);
}

void sub_1BF5D46E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5D46F0);
  _Unwind_Resume(a1);
}

void sub_1BF5D46FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D471C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4728(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4734(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4740(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a51);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot((uint64_t)&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1BF5D490CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D4758(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void (*v55)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(&a55);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a49);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a47);
    if (a42)
    {
      if ((a42 & 1) == 0)
      {
        v55 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a42 & 0xFFFFFFFFFFFFFFFELL);
        if (v55)
          v55(&a43, &a43, 2);
      }
      a42 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    JUMPOUT(0x1BF5D4904);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D47DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D47E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D47F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D4804(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1BF5D4858);
  }
  _Unwind_Resume(a1);
}

void sub_1BF5D48D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF5D48E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (!a2)
    JUMPOUT(0x1BF5D48ECLL);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&a55);
  boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(&a37);
  JUMPOUT(0x1BF5D490CLL);
}

void TraceManager::handleDumpLogsIndication_sync(uint64_t a1, const __CFDictionary **a2)
{
  NSObject *v4;
  const void *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t (*v12)(uint64_t);
  const void *v13;
  size_t v14;
  void *v15;
  void *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  std::string::size_type v21;
  const char *v22;
  const char *v23;
  int v24;
  size_t v25;
  void **v26;
  xpc_object_t v27;
  xpc_object_t v28;
  std::string *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void **v34;
  xpc_object_t v35;
  xpc_object_t v36;
  const void *v37;
  size_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  xpc_object_t object;
  void *__p[2];
  unint64_t v46;
  void *v47[3];
  _QWORD v48[2];
  std::string __dst;
  uint8_t buf[32];

  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Dump logs indication from Baseband", buf, 2u);
  }
  memset(buf, 170, 24);
  Timestamp::Timestamp((Timestamp *)buf);
  memset(&__dst, 170, sizeof(__dst));
  v5 = (const void *)*MEMORY[0x1E0CFAFD0];
  v6 = strlen((const char *)*MEMORY[0x1E0CFAFD0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = *a2;
  v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v12 = 0;
  if (v12)
  {
    v48[0] = 0xAAAAAAAAAAAAAAAALL;
    v48[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v48, v11);
    v13 = (const void *)*MEMORY[0x1E0CFB058];
    v14 = strlen((const char *)*MEMORY[0x1E0CFB058]);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v18 = v14 | 7;
      v19 = v18 + 1;
      v16 = operator new(v18 + 1);
      __p[1] = v15;
      v46 = v19 | 0x8000000000000000;
      __p[0] = v16;
    }
    else
    {
      HIBYTE(v46) = v14;
      v16 = __p;
      if (!v14)
      {
LABEL_23:
        *((_BYTE *)v15 + (_QWORD)v16) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v47[2]) >= 0)
          v20 = v47;
        else
          v20 = (void **)v47[0];
        if (SHIBYTE(v47[2]) >= 0)
          v21 = HIBYTE(v47[2]);
        else
          v21 = (std::string::size_type)v47[1];
        std::string::append(&__dst, (const std::string::value_type *)v20, v21);
        if (SHIBYTE(v47[2]) < 0)
        {
          operator delete(v47[0]);
          if ((SHIBYTE(v46) & 0x80000000) == 0)
            goto LABEL_31;
        }
        else if ((SHIBYTE(v46) & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
        operator delete(__p[0]);
LABEL_31:
        memset(v47, 170, sizeof(v47));
        HIBYTE(v46) = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v46) < 0)
          operator delete(__p[0]);
        LODWORD(__p[0]) = 1;
        v22 = (const char *)radio::asString();
        v23 = v22;
        v24 = SHIBYTE(v47[2]);
        if (SHIBYTE(v47[2]) >= 0)
          v25 = HIBYTE(v47[2]);
        else
          v25 = (size_t)v47[1];
        if (v25 == strlen(v22))
        {
          if (SHIBYTE(v47[2]) >= 0)
            v26 = v47;
          else
            v26 = (void **)v47[0];
          if (!memcmp(v26, v23, v25))
            v17 = 5;
          else
            v17 = 2;
          if ((v24 & 0x80000000) == 0)
            goto LABEL_47;
        }
        else
        {
          v17 = 2;
          if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
          {
LABEL_47:
            MEMORY[0x1C3B8B8B4](v48);
            goto LABEL_48;
          }
        }
        operator delete(v47[0]);
        goto LABEL_47;
      }
    }
    memmove(v16, v13, (size_t)v15);
    goto LABEL_23;
  }
  v17 = 2;
LABEL_48:
  v27 = xpc_dictionary_create(0, 0, 0);
  if (v27 || (v27 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v27) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v27);
      v28 = v27;
    }
    else
    {
      v28 = xpc_null_create();
    }
  }
  else
  {
    v28 = xpc_null_create();
    v27 = 0;
  }
  xpc_release(v27);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__dst;
  else
    v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v30 = xpc_string_create((const char *)v29);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB930], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = xpc_int64_create(v17);
  if (!v32)
    v32 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB010], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  Timestamp::asString((uint64_t)buf, 0, 9, v47);
  if (SHIBYTE(v47[2]) >= 0)
    v34 = v47;
  else
    v34 = (void **)v47[0];
  v35 = xpc_string_create((const char *)v34);
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E0CFB370], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  if (SHIBYTE(v47[2]) < 0)
    operator delete(v47[0]);
  v37 = (const void *)*MEMORY[0x1E0CFB5F0];
  v38 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    v47[1] = v39;
    v47[2] = (void *)(v42 | 0x8000000000000000);
    v47[0] = v40;
LABEL_78:
    memmove(v40, v37, (size_t)v39);
    *((_BYTE *)v39 + (_QWORD)v40) = 0;
    object = v28;
    if (v28)
      goto LABEL_74;
    goto LABEL_79;
  }
  HIBYTE(v47[2]) = v38;
  v40 = v47;
  if (v38)
    goto LABEL_78;
  LOBYTE(v47[0]) = 0;
  object = v28;
  if (v28)
  {
LABEL_74:
    xpc_retain(v28);
    goto LABEL_80;
  }
LABEL_79:
  object = xpc_null_create();
LABEL_80:
  v43 = 0;
  Service::runCommand(a1, (uint64_t)v47, &object, &v43);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v47[2]) < 0)
    operator delete(v47[0]);
  xpc_release(v28);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
}

void sub_1BF5D4EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a23 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a24);
  if (a31 < 0)
  {
    operator delete(a26);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(_QWORD **)(v31 - 88));
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(_QWORD **)(v31 - 88));
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void ___ZN12TraceManager4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  size_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  config::hw *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  const char *v17;
  void *__p;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const void *)*MEMORY[0x1E0D01A18];
  v3 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    *(_QWORD *)&v19 = v4;
    *((_QWORD *)&v19 + 1) = v7 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = v3;
  p_p = &__p;
  if (v3)
LABEL_8:
    memmove(p_p, v2, v4);
  *((_BYTE *)p_p + v4) = 0;
  v8 = (config::hw *)support::fs::removeDirContents((const char *)&__p, 0);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (config::hw::watch(v8)
    && (TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v9 = (const void *)*MEMORY[0x1E0D01A30];
    v10 = strlen((const char *)*MEMORY[0x1E0D01A30]);
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      *(_QWORD *)&v19 = v11;
      *((_QWORD *)&v19 + 1) = v14 | 0x8000000000000000;
      __p = v12;
    }
    else
    {
      HIBYTE(v19) = v10;
      v12 = &__p;
      if (!v10)
        goto LABEL_22;
    }
    memmove(v12, v9, v11);
LABEL_22:
    *((_BYTE *)v12 + v11) = 0;
    v15 = support::fs::removeDirContents((const char *)&__p, 0x708uLL);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    v16 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = "failed";
      if (v15)
        v17 = "success";
      __p = (void *)0x1E04000202;
      LOWORD(v19) = 2080;
      *(_QWORD *)((char *)&v19 + 2) = v17;
      _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Deleting telephony log files older than %d mins %s", (uint8_t *)&__p, 0x12u);
    }
  }
}

void sub_1BF5D52D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::setupDumpLogsIndication_sync(NSObject **this)
{
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[16];

  if (!capabilities::trace::supportsDumpLogIndication((capabilities::trace *)this))
    return;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v21 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70F4D0;
  }
  v8 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v9 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v18, v3);
  v20 = 0;
  v21 = 0;
  if (v19)
  {
    v21 = std::__shared_weak_count::lock(v19);
    if (v21)
      v20 = v18;
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
  if (!v8)
    goto LABEL_21;
  v11 = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v13 = v20;
    if (v20)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    v13 = v20;
    if (v20)
    {
LABEL_22:
      v14 = this[11];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Enabling Dump logs indication", buf, 2u);
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 200))(v13);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF5D552C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF5D5548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5D555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **xpc::dict::dict(void **a1, void **a2)
{
  void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    xpc_retain(v3);
  else
    *a1 = xpc_null_create();
  return a1;
}

void xpc::dict::~dict(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

const char *TraceManager::getName(TraceManager *this)
{
  return "trace.mgr";
}

char *TraceManager::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 512;
  result[2] = 3;
  *a1 = result;
  return result;
}

void TraceManager::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD v12[5];
  dispatch_group_t object;
  _QWORD v14[5];
  dispatch_group_t v15;

  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_12;
    v10[3] = &__block_descriptor_tmp_13_0;
    v7 = *a3;
    v10[4] = a1;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group)
        goto LABEL_18;
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2)
        return;
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_9;
      v4 = *a3;
      v14[4] = a1;
      v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v4);
      }
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15)
        return;
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15)
        return;
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10;
    v12[3] = &__block_descriptor_tmp_11_0;
    v9 = *a3;
    v12[4] = a1;
    object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object)
        goto LABEL_18;
    }
  }
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6[2];
  NSObject *v7;
  xpc_object_t object;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = xpc_null_create();
  v4 = *MEMORY[0x1E0CF1098];
  v5 = *(NSObject **)(a1 + 40);
  v7 = v5;
  object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x1F40u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1BF5D5878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  NSObject *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10[2];
  NSObject *v11;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = (const char *)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    v5 = *(const char **)v5;
  v6 = xpc_string_create(v5);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB330], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v4;
  if (v4)
  {
    xpc_retain(v4);
    v8 = *MEMORY[0x1E0CF1110];
    v9 = *(NSObject **)(a1 + 40);
    v11 = v9;
    if (!v9)
      goto LABEL_14;
    goto LABEL_13;
  }
  object = xpc_null_create();
  v8 = *MEMORY[0x1E0CF1110];
  v9 = *(NSObject **)(a1 + 40);
  v11 = v9;
  if (v9)
  {
LABEL_13:
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
LABEL_14:
  v10[0] = 0;
  v10[1] = 0;
  TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v8, 0x1388u, 0, &object, &v11, v10);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  xpc_release(object);
  object = 0;
  xpc_release(v4);
}

void sub_1BF5D5AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;
  NSObject *v13;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_12(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void TraceManager::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_35_1;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  void *v20;
  const void *v21;
  unint64_t v22;
  void *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  const void *v40;
  size_t v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD v48[6];
  std::__shared_weak_count *v49;
  const void *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  const void *v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  const void *v56;
  _QWORD aBlock[5];
  void **__dst;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  const void *v64;
  dispatch_object_t v65;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  TraceManager::initTraceHelper_sync((TraceManager *)v1);
  v10 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(v1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (const char *)*MEMORY[0x1E0CFB900];
  v15 = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19 = *(NSObject **)(v1 + 136);
  if (v19)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_15;
  aBlock[4] = v1;
  if (v14)
  {
    if (v19)
    {
      v20 = _Block_copy(aBlock);
      v21 = v20;
      v65 = v19;
      __dst = (void **)MEMORY[0x1E0C809B0];
      v59 = 1174405120;
      v60 = (unint64_t)___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke;
      v61 = &__block_descriptor_tmp_91;
      v62 = v11;
      v63 = v13;
      do
        v22 = __ldxr(v15);
      while (__stxr(v22 + 1, v15));
      if (v20)
        v23 = _Block_copy(v20);
      else
        v23 = 0;
      v64 = v23;
      analytics::registerCallbackForTimedEventImpl(v14);
      if (v65)
        dispatch_release(v65);
      if (v64)
        _Block_release(v64);
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
      if (v21)
        _Block_release(v21);
    }
  }
  else if (v19)
  {
    dispatch_release(v19);
  }
  std::__shared_weak_count::__release_weak(v13);
  v24 = (const void *)*MEMORY[0x1E0CFBEE0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBEE0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (void **)operator new(v28 + 1);
    v59 = v26;
    v60 = v29 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v60) = v25;
    p_dst = (void **)&__dst;
    if (!v25)
      goto LABEL_44;
  }
  memmove(p_dst, v24, v26);
LABEL_44:
  *((_BYTE *)p_dst + v26) = 0;
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 1174405120;
  v54[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v54[3] = &__block_descriptor_tmp_22_0;
  v54[4] = v1;
  v54[5] = v3;
  v55 = v5;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v54);
  v56 = v31;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v56);
  if (v31)
    _Block_release(v31);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  v32 = (const void *)*MEMORY[0x1E0CFBED0];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBED0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    v59 = v34;
    v60 = v37 | 0x8000000000000000;
    __dst = v35;
  }
  else
  {
    HIBYTE(v60) = v33;
    v35 = (void **)&__dst;
    if (!v33)
      goto LABEL_58;
  }
  memmove(v35, v32, v34);
LABEL_58:
  *((_BYTE *)v35 + v34) = 0;
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_23;
  v51[3] = &__block_descriptor_tmp_30_0;
  v51[4] = v1;
  v51[5] = v3;
  v52 = v5;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v39 = _Block_copy(v51);
  v53 = v39;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v53);
  if (v39)
    _Block_release(v39);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  v40 = (const void *)*MEMORY[0x1E0CFBDB8];
  v41 = strlen((const char *)*MEMORY[0x1E0CFBDB8]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v59 = v42;
    v60 = v45 | 0x8000000000000000;
    __dst = v43;
  }
  else
  {
    HIBYTE(v60) = v41;
    v43 = (void **)&__dst;
    if (!v41)
      goto LABEL_72;
  }
  memmove(v43, v40, v42);
LABEL_72:
  *((_BYTE *)v43 + v42) = 0;
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 1174405120;
  v48[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v48[3] = &__block_descriptor_tmp_34;
  v48[4] = v1;
  v48[5] = v3;
  v49 = v5;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(v48);
  v50 = v47;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v50);
  if (v47)
    _Block_release(v47);
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF5D6220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  const void *v33;
  uint64_t v34;
  const void *v36;
  std::__shared_weak_count *v37;
  NSObject *v38;

  v36 = *(const void **)(v34 - 120);
  if (v36)
    _Block_release(v36);
  v37 = *(std::__shared_weak_count **)(v34 - 128);
  if (v37)
  {
    std::__shared_weak_count::__release_weak(v37);
    v38 = *(NSObject **)(v34 - 112);
    if (!v38)
    {
LABEL_5:
      if (!v33)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v32);
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v33);
      goto LABEL_10;
    }
  }
  else
  {
    v38 = *(NSObject **)(v34 - 112);
    if (!v38)
      goto LABEL_5;
  }
  dispatch_release(v38);
  if (!v33)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1BF5D6388(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::initTraceHelper_sync(TraceManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  NSObject *object;
  __int128 v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  const void *v21;
  dispatch_object_t v22;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v21 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v22 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_69;
  aBlock[4] = this;
  aBlock[5] = v3;
  v20 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v21 = v11;
  v22 = v12;
  if (!v11)
  {
    v16 = 0;
    object = v12;
    if (!v12)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = _Block_copy(v11);
  object = v12;
  if (v12)
LABEL_15:
    dispatch_retain(v12);
LABEL_16:
  abm::HelperClient::registerForHelperReady();
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_OWORD *)this + 15) = v18;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
  if (v16)
    _Block_release(v16);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF5D65B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v21 - 48);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  size_t v10;
  void *v11;
  xpc_object_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  TraceCAReporter *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  BOOL *v25;
  xpc_object_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  xpc_object_t v30;
  xpc_object_t object;
  xpc_object_t __dst[2];
  unint64_t v33;
  BOOL __val[25];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = MEMORY[0x1E0C812F8];
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == v3)
    {
      xpc_retain(v2);
      v4 = v2;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0CFB088]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB030], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (const char *)*MEMORY[0x1E0CFB170];
  v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFB170]);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB550], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  __val[0] = 0;
  v10 = strlen(v7);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (xpc_object_t *)operator new(v13 + 1);
    __dst[1] = v11;
    v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_18;
  }
  HIBYTE(v33) = v10;
  v12 = __dst;
  if (v10)
LABEL_18:
    memmove(v12, v7, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  memset(&__val[1], 0, 24);
  if (prop::bbtrace::get((char *)__dst, (uint64_t)&__val[1]))
    util::convert<BOOL>((const std::string *)&__val[1], __val, 0);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
LABEL_23:
  std::to_string((std::string *)&__val[1], __val[0]);
  if (__val[24] >= 0)
    v15 = (const char *)&__val[1];
  else
    v15 = *(const char **)&__val[1];
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFB6A8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (__val[24] < 0)
    operator delete(*(void **)&__val[1]);
  abm::asString();
  if (__val[24] >= 0)
    v18 = (const char *)&__val[1];
  else
    v18 = *(const char **)&__val[1];
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0CFBF88], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
      goto LABEL_37;
  }
  else
  {
    object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
    {
LABEL_37:
      xpc_retain(v4);
      goto LABEL_42;
    }
  }
  object = xpc_null_create();
LABEL_42:
  TraceCAReporter::prepTraceStats(v21, &object, __dst);
  xpc_release(object);
  object = 0;
  if (MEMORY[0x1C3B8CD78](__dst[0]) != v3)
    goto LABEL_55;
  v22 = (const void *)*MEMORY[0x1E0CFB5E0];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v25 = (BOOL *)operator new(v27 + 1);
    *(_QWORD *)&__val[9] = v24;
    *(_QWORD *)&__val[17] = v28 | 0x8000000000000000;
    *(_QWORD *)&__val[1] = v25;
LABEL_51:
    memmove(v25, v22, v24);
    v25[v24] = 0;
    v26 = __dst[0];
    v30 = __dst[0];
    if (__dst[0])
      goto LABEL_47;
    goto LABEL_52;
  }
  __val[24] = v23;
  v25 = &__val[1];
  if (v23)
    goto LABEL_51;
  __val[1] = 0;
  v26 = __dst[0];
  v30 = __dst[0];
  if (__dst[0])
  {
LABEL_47:
    xpc_retain(v26);
    goto LABEL_53;
  }
LABEL_52:
  v26 = xpc_null_create();
  v30 = v26;
LABEL_53:
  v29 = 0;
  Service::runCommand(v1, (uint64_t)&__val[1], &v30, &v29);
  xpc_release(v26);
  v30 = 0;
  if (__val[24] < 0)
    operator delete(*(void **)&__val[1]);
LABEL_55:
  xpc_release(__dst[0]);
  xpc_release(v4);
}

void sub_1BF5D6A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  if (a24 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  xpc_object_t object;
  void *aBlock;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
        goto LABEL_18;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 1174405120;
      v22[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4;
      v22[3] = &__block_descriptor_tmp_20_1;
      v11 = *a2;
      v22[4] = v7;
      object = v11;
      if (v11)
      {
        xpc_retain(v11);
        v12 = *a3;
        if (*a3)
        {
LABEL_6:
          v13 = _Block_copy(v12);
LABEL_9:
          aBlock = v13;
          v25 = v10;
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          v26 = v9;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v22);
          v16 = v26;
          if (!v26)
            goto LABEL_15;
          v17 = (unint64_t *)&v26->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            v19 = aBlock;
            if (!aBlock)
              goto LABEL_17;
          }
          else
          {
LABEL_15:
            v19 = aBlock;
            if (!aBlock)
            {
LABEL_17:
              xpc_release(object);
              object = 0;
LABEL_18:
              v20 = (unint64_t *)&v9->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v19);
          goto LABEL_17;
        }
      }
      else
      {
        object = xpc_null_create();
        v12 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      v13 = 0;
      goto LABEL_9;
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  int v7;
  char isSupported;
  char v9;
  const void *v10;
  size_t v11;
  std::string::size_type v12;
  void *v13;
  void *v14;
  const object *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  size_t v23;
  void *v24;
  void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  std::string *v37;
  __int128 v38;
  NSObject *v39;
  uint64_t *v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  std::string *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  const char *v52;
  xpc_object_t v53;
  xpc_object_t v54;
  const char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  const void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  TraceCAReporter *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  const void *v77;
  size_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  uint64_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  void *v88;
  uint8_t *v89;
  xpc_object_t v90;
  xpc_object_t v91;
  const void *v92;
  std::string::size_type v93;
  xpc_object_t v94;
  void *v95[2];
  NSObject *v96;
  xpc_object_t v97;
  void *v98[2];
  NSObject *v99;
  xpc_object_t v100;
  _QWORD v101[6];
  std::__shared_weak_count *v102;
  void *v103;
  xpc_object_t v104;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v108;
  xpc_object_t object;
  std::string v110;
  xpc_object_t v111[3];
  xpc_object_t v112[3];
  std::string v113;
  std::string v114;
  uint8_t buf[24];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  memset(&v113, 170, sizeof(v113));
  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB030]);
  v112[0] = value;
  if (value)
    xpc_retain(value);
  else
    v112[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v112[0]);
  memset(v112, 170, sizeof(v112));
  v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB550]);
  v111[0] = v4;
  if (v4)
    xpc_retain(v4);
  else
    v111[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v111[0]);
  memset(v111, 170, sizeof(v111));
  v5 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB6A8]);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5)
    xpc_retain(v5);
  else
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v114.__r_.__value_.__l.__data_);
  v6 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFBFE0]);
  *(_QWORD *)buf = v6;
  if (v6)
    xpc_retain(v6);
  else
    *(_QWORD *)buf = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v110 = v113;
  isSupported = abm::trace::isSupported();
  v9 = isSupported;
  if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((isSupported & 1) != 0)
      goto LABEL_18;
LABEL_24:
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v14 = *(void **)(a1 + 40);
    object = v14;
    if (v14)
      xpc_retain(v14);
    else
      object = xpc_null_create();
    xpc::bridge((xpc *)&object, v15);
    v19 = *(const void **)buf;
    if (*(_QWORD *)buf && (v20 = CFGetTypeID(*(CFTypeRef *)buf), v20 == CFDictionaryGetTypeID()))
    {
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      CFRetain(v19);
      v21 = *(const void **)buf;
      if (!*(_QWORD *)buf)
      {
LABEL_37:
        xpc_release(object);
        v22 = (const void *)*MEMORY[0x1E0CFB9B8];
        v23 = strlen((const char *)*MEMORY[0x1E0CFB9B8]);
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v24 = (void *)v23;
        if (v23 >= 0x17)
        {
          v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v27 = v23 | 7;
          v28 = v27 + 1;
          v25 = (void **)operator new(v27 + 1);
          __dst[1] = v24;
          v108 = v28 | 0x8000000000000000;
          __dst[0] = v25;
        }
        else
        {
          HIBYTE(v108) = v23;
          v25 = __dst;
          if (!v23)
          {
            LOBYTE(__dst[0]) = 0;
            v26 = (const void *)v114.__r_.__value_.__r.__words[0];
            cf = (CFTypeRef)v114.__r_.__value_.__r.__words[0];
            if (!v114.__r_.__value_.__r.__words[0])
            {
LABEL_47:
              aBlock = 0;
              Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
              if (aBlock)
                _Block_release(aBlock);
              if (cf)
                CFRelease(cf);
              if (SHIBYTE(v108) < 0)
              {
                operator delete(__dst[0]);
                v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
LABEL_53:
                  if (!*(_QWORD *)(a1 + 48))
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              else
              {
                v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                  goto LABEL_53;
              }
              v33 = &v113;
              if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v33 = (std::string *)v113.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v33;
              _os_log_error_impl(&dword_1BF566000, v29, OS_LOG_TYPE_ERROR, "Trace not supported: %s", buf, 0xCu);
              if (!*(_QWORD *)(a1 + 48))
                goto LABEL_55;
LABEL_54:
              v30 = xpc_null_create();
              v31 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)buf = v30;
              v32 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, uint8_t *))(v31 + 16))(v31, 3760250884, buf);
              xpc_release(*(xpc_object_t *)buf);
              xpc_release(v32);
LABEL_55:
              if (v26)
                CFRelease(v26);
LABEL_169:
              if ((SHIBYTE(v111[2]) & 0x80000000) == 0)
                goto LABEL_170;
              goto LABEL_174;
            }
LABEL_46:
            CFRetain(v26);
            goto LABEL_47;
          }
        }
        memmove(v25, v22, (size_t)v24);
        *((_BYTE *)v24 + (_QWORD)v25) = 0;
        v26 = (const void *)v114.__r_.__value_.__r.__words[0];
        cf = (CFTypeRef)v114.__r_.__value_.__r.__words[0];
        if (!v114.__r_.__value_.__r.__words[0])
          goto LABEL_47;
        goto LABEL_46;
      }
    }
    else
    {
      v114.__r_.__value_.__r.__words[0] = 0;
      v21 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_37;
    }
    CFRelease(v21);
    goto LABEL_37;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
  if ((v9 & 1) == 0)
    goto LABEL_24;
LABEL_18:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    v17 = MEMORY[0x1E0C812F8];
    if (v16 || (v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v16) == v17)
      {
        xpc_retain(v16);
        v18 = v16;
      }
      else
      {
        v18 = xpc_null_create();
      }
    }
    else
    {
      v18 = xpc_null_create();
      v16 = 0;
    }
    xpc_release(v16);
    v47 = xpc_int64_create(5000);
    if (!v47)
      v47 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1008], v47);
    v48 = xpc_null_create();
    xpc_release(v47);
    xpc_release(v48);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v113;
    else
      v49 = (std::string *)v113.__r_.__value_.__r.__words[0];
    v50 = xpc_string_create((const char *)v49);
    if (!v50)
      v50 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1020], v50);
    v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(v112[2]) >= 0)
      v52 = (const char *)v112;
    else
      v52 = (const char *)v112[0];
    v53 = xpc_string_create(v52);
    if (!v53)
      v53 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1048], v53);
    v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    if (SHIBYTE(v111[2]) >= 0)
      v55 = (const char *)v111;
    else
      v55 = (const char *)v111[0];
    v56 = xpc_string_create(v55);
    if (!v56)
      v56 = xpc_null_create();
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E0CF1080], v56);
    v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    if (v7)
    {
      v58 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BF566000, v58, OS_LOG_TYPE_DEBUG, "#D Request to set property with completion", buf, 2u);
      }
      memset(buf, 170, 16);
      v101[0] = MEMORY[0x1E0C809B0];
      v101[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_17;
      v101[3] = &__block_descriptor_tmp_19_1;
      v60 = *(_QWORD *)(a1 + 56);
      v59 = *(std::__shared_weak_count **)(a1 + 64);
      v101[4] = v2;
      v101[5] = v60;
      v101[1] = 1174405120;
      v102 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(p_shared_owners);
        while (__stxr(v62 + 1, p_shared_owners));
      }
      v63 = *(const void **)(a1 + 48);
      if (v63)
      {
        v64 = _Block_copy(v63);
        v65 = *(void **)(a1 + 40);
        v103 = v64;
        v104 = v65;
        if (v65)
        {
LABEL_108:
          xpc_retain(v65);
          goto LABEL_113;
        }
      }
      else
      {
        v65 = *(void **)(a1 + 40);
        v103 = 0;
        v104 = v65;
        if (v65)
          goto LABEL_108;
      }
      v104 = xpc_null_create();
LABEL_113:
      v66 = _Block_copy(v101);
      v67 = *(_QWORD *)(v2 + 136);
      if (v67)
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      *(_QWORD *)buf = v66;
      *(_QWORD *)&buf[8] = v67;
      v100 = v18;
      if (v18)
      {
        xpc_retain(v18);
        v66 = *(void **)buf;
        v99 = 0;
        if (*(_QWORD *)buf)
        {
LABEL_117:
          v68 = _Block_copy(v66);
LABEL_123:
          v72 = *MEMORY[0x1E0CF10B8];
          v73 = *(NSObject **)&buf[8];
          v98[0] = v68;
          v98[1] = *(void **)&buf[8];
          if (*(_QWORD *)&buf[8])
            dispatch_retain(*(dispatch_object_t *)&buf[8]);
          TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v72, 0, 1, &v100, &v99, v98);
          if (v73)
            dispatch_release(v73);
          if (v68)
            _Block_release(v68);
          xpc_release(v100);
          v100 = 0;
          if (v73)
            dispatch_release(v73);
          if (v66)
            _Block_release(v66);
          xpc_release(v104);
          v104 = 0;
          if (v103)
            _Block_release(v103);
          v74 = v102;
          if (v102)
          {
            v75 = (unint64_t *)&v102->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
LABEL_159:
          xpc_release(v18);
          goto LABEL_169;
        }
      }
      else
      {
        v99 = 0;
        v100 = xpc_null_create();
        if (v66)
          goto LABEL_117;
      }
      v68 = 0;
      goto LABEL_123;
    }
    v97 = v18;
    if (v18)
      xpc_retain(v18);
    else
      v97 = xpc_null_create();
    v69 = *MEMORY[0x1E0CF10B8];
    v95[1] = 0;
    v96 = 0;
    v95[0] = 0;
    TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v69, 0, 1, &v97, &v96, v95);
    xpc_release(v97);
    v97 = 0;
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v70 = *(TraceCAReporter **)(v2 + 304);
    v71 = *(void **)(a1 + 40);
    v94 = v71;
    if (v71)
      xpc_retain(v71);
    else
      v94 = xpc_null_create();
    TraceCAReporter::prepTraceStats(v70, &v94, (xpc_object_t *)&v114.__r_.__value_.__l.__data_);
    xpc_release(v94);
    v94 = 0;
    if (MEMORY[0x1C3B8CD78](v114.__r_.__value_.__r.__words[0]) != v17)
    {
LABEL_156:
      if (*(_QWORD *)(a1 + 48))
      {
        v84 = xpc_null_create();
        v85 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)buf = v84;
        v86 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, uint8_t *))(v85 + 16))(v85, 0, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v86);
      }
      xpc_release(v114.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    v77 = (const void *)*MEMORY[0x1E0CFB5E0];
    v78 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v79 = v78;
    if (v78 >= 0x17)
    {
      v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v81 = v78 | 7;
      v82 = v81 + 1;
      v80 = operator new(v81 + 1);
      *(_QWORD *)&buf[8] = v79;
      *(_QWORD *)&buf[16] = v82 | 0x8000000000000000;
      *(_QWORD *)buf = v80;
    }
    else
    {
      buf[23] = v78;
      v80 = buf;
      if (!v78)
      {
LABEL_151:
        v80[v79] = 0;
        v83 = (xpc_object_t)v114.__r_.__value_.__r.__words[0];
        v93 = v114.__r_.__value_.__r.__words[0];
        if (v114.__r_.__value_.__r.__words[0])
        {
          xpc_retain(v114.__r_.__value_.__l.__data_);
        }
        else
        {
          v83 = xpc_null_create();
          v93 = (std::string::size_type)v83;
        }
        v92 = 0;
        Service::runCommand(v2, (uint64_t)buf, (xpc_object_t *)&v93, &v92);
        xpc_release(v83);
        v93 = 0;
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        goto LABEL_156;
      }
    }
    memmove(v80, v77, v79);
    goto LABEL_151;
  }
  memset(buf, 170, sizeof(buf));
  v10 = (const void *)*MEMORY[0x1E0CFB890];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB890]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v34 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v34 = v11 | 7;
    v35 = v34 + 1;
    v13 = operator new(v34 + 1);
    v114.__r_.__value_.__l.__size_ = v12;
    v114.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_65;
  }
  *((_BYTE *)&v114.__r_.__value_.__s + 23) = v11;
  v13 = &v114;
  if (v11)
LABEL_65:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  v36 = (char *)operator new(0x28uLL);
  strcpy(v36, " rejected; ABM is shutting down ");
  v37 = std::string::append(&v114, v36, 0x20uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v37->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  operator delete(v36);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
LABEL_68:
      v41 = *(_QWORD *)(a1 + 48);
      v40 = (uint64_t *)(a1 + 48);
      if (!v41)
        goto LABEL_168;
      goto LABEL_74;
    }
  }
  else
  {
    v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_68;
  }
  v42 = buf;
  if ((buf[23] & 0x80u) != 0)
    v42 = *(uint8_t **)buf;
  LODWORD(v114.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v114.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
  _os_log_impl(&dword_1BF566000, v39, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v114, 0xCu);
  v43 = *(_QWORD *)(a1 + 48);
  v40 = (uint64_t *)(a1 + 48);
  if (v43)
  {
LABEL_74:
    v114.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v44 = buf[23];
    if ((buf[23] & 0x80u) != 0)
      v44 = *(_QWORD *)&buf[8];
    if (v44)
    {
      v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v45) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v45);
          v46 = v45;
        }
        else
        {
          v46 = xpc_null_create();
        }
      }
      else
      {
        v46 = xpc_null_create();
        v45 = 0;
      }
      xpc_release(v45);
      v87 = xpc_null_create();
      v88 = (void *)v114.__r_.__value_.__r.__words[0];
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      xpc_release(v88);
      xpc_release(v87);
      if ((buf[23] & 0x80u) == 0)
        v89 = buf;
      else
        v89 = *(uint8_t **)buf;
      v90 = xpc_string_create((const char *)v89);
      if (!v90)
        v90 = xpc_null_create();
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E0CFB0D0], v90);
      v91 = xpc_null_create();
      xpc_release(v90);
      xpc_release(v91);
    }
    LODWORD(object) = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v40, (unsigned int *)&object, (void **)&v114.__r_.__value_.__l.__data_);
    xpc_release(v114.__r_.__value_.__l.__data_);
  }
LABEL_168:
  if (((char)buf[23] & 0x80000000) == 0)
    goto LABEL_169;
  operator delete(*(void **)buf);
  if ((SHIBYTE(v111[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if ((SHIBYTE(v112[2]) & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v111[0]);
  if ((SHIBYTE(v112[2]) & 0x80000000) == 0)
  {
LABEL_171:
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_176:
    operator delete(v113.__r_.__value_.__l.__data_);
    return;
  }
LABEL_175:
  operator delete(v112[0]);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_176;
}

void sub_1BF5D7A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,xpc_object_t a28,void *a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  void *v4;

  v3 = *a2;
  *a2 = xpc_null_create();
  v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_17(_QWORD *a1, int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  TraceCAReporter *v7;
  void *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t v19;
  const void *v20;
  xpc_object_t v21;
  uint8_t buf[8];
  size_t v23;
  unint64_t v24;
  xpc_object_t object;
  xpc_object_t v26;

  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D Set property completion called", buf, 2u);
    if (!a1[7])
      return;
  }
  else if (!a1[7])
  {
    return;
  }
  v6 = *a2;
  if (!*a2)
  {
    v7 = *(TraceCAReporter **)(v4 + 304);
    v8 = (void *)a1[8];
    object = v8;
    v26 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    if (v8)
      xpc_retain(v8);
    else
      object = xpc_null_create();
    TraceCAReporter::prepTraceStats(v7, &object, &v26);
    xpc_release(object);
    object = 0;
    if (MEMORY[0x1C3B8CD78](v26) != MEMORY[0x1E0C812F8])
    {
LABEL_23:
      xpc_release(v26);
      v6 = *a2;
      goto LABEL_24;
    }
    v9 = (const void *)*MEMORY[0x1E0CFB5E0];
    v10 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      v23 = v11;
      v24 = v14 | 0x8000000000000000;
      *(_QWORD *)buf = v12;
    }
    else
    {
      HIBYTE(v24) = v10;
      v12 = buf;
      if (!v10)
      {
LABEL_18:
        v12[v11] = 0;
        v15 = v26;
        v21 = v26;
        if (v26)
        {
          xpc_retain(v26);
        }
        else
        {
          v15 = xpc_null_create();
          v21 = v15;
        }
        v20 = 0;
        Service::runCommand(v4, (uint64_t)buf, &v21, &v20);
        xpc_release(v15);
        v21 = 0;
        if (SHIBYTE(v24) < 0)
          operator delete(*(void **)buf);
        goto LABEL_23;
      }
    }
    memmove(v12, v9, v11);
    goto LABEL_18;
  }
LABEL_24:
  if (v6)
    v16 = 3760250880;
  else
    v16 = 0;
  v17 = xpc_null_create();
  v18 = a1[7];
  *(_QWORD *)buf = v17;
  v19 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v18 + 16))(v18, v16, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v19);
}

void sub_1BF5D8108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, xpc_object_t object)
{
  void *v19;

  xpc_release(v19);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  xpc_object_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = (void *)a2[8];
    a1[7] = v8;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  else
  {
    v9 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5)
    dispatch_retain(v5);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (void *)a2[5];
  a1[5] = v4;
  if (!v4)
  {
    a1[5] = xpc_null_create();
    result = (void *)a2[6];
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v4);
  result = (void *)a2[6];
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  v7 = a2[7];
  v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(const void **)(a1 + 48);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
LABEL_6:
    _Block_release(v5);
LABEL_7:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_23(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_24;
  v15[3] = &__block_descriptor_tmp_29_0;
  v13 = *a2;
  v15[4] = v7;
  object = v13;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (!*a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  object = xpc_null_create();
  v14 = *a3;
  if (*a3)
LABEL_13:
    v14 = _Block_copy(v14);
LABEL_14:
  aBlock = v14;
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_24(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  char isSupported;
  char v6;
  void *v7;
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  std::string *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void **v23;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  std::string *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  xpc_object_t v36;
  _QWORD aBlock[6];
  void *v38;
  uint8_t buf[16];
  xpc_object_t object;
  xpc_object_t *p_object;
  uint64_t v42;
  xpc_object_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  xpc_object_t v45;
  std::string v46;
  void *__p[3];
  std::string v48;
  __int128 v49;
  uint64_t v50;
  __n128 (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  void *v53[2];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  memset(&v48, 170, sizeof(v48));
  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB030]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v49 = 0uLL;
  v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB550]);
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  v49 = 0uLL;
  v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v46 = v48;
  isSupported = abm::trace::isSupported();
  v6 = isSupported;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((v6 & 1) != 0)
    {
LABEL_12:
      object = 0;
      p_object = &object;
      v42 = 0x3002000000;
      v43 = __Block_byref_object_copy__1;
      v44 = __Block_byref_object_dispose__1;
      v7 = *(void **)(a1 + 40);
      v45 = v7;
      if (v7)
        xpc_retain(v7);
      else
        v45 = xpc_null_create();
      *(_QWORD *)&v49 = 0;
      *((_QWORD *)&v49 + 1) = &v49;
      v50 = 0x4002000000;
      v51 = __Block_byref_object_copy__25;
      v52 = __Block_byref_object_dispose__26;
      v53[1] = 0;
      v54 = 0;
      v53[0] = 0;
      if (prop::get((char *)&v48, (char *)__p, (uint64_t)v53))
      {
        v12 = (const char *)(*((_QWORD *)&v49 + 1) + 40);
        if (*(char *)(*((_QWORD *)&v49 + 1) + 63) < 0)
          v12 = *(const char **)v12;
        v13 = xpc_string_create(v12);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(p_object[5], (const char *)*MEMORY[0x1E0CFB6A8], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        *(_DWORD *)buf = 0;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 48), (unsigned int *)buf, p_object + 5);
LABEL_63:
        _Block_object_dispose(&v49, 8);
        if (SHIBYTE(v54) < 0)
          operator delete(v53[0]);
        _Block_object_dispose(&object, 8);
        xpc_release(v45);
        goto LABEL_66;
      }
      v15 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking with abm-helper daemon", buf, 2u);
      }
      v16 = xpc_dictionary_create(0, 0, 0);
      if (v16 || (v16 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v16) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v16);
          v17 = v16;
        }
        else
        {
          v17 = xpc_null_create();
        }
      }
      else
      {
        v17 = xpc_null_create();
        v16 = 0;
      }
      xpc_release(v16);
      v18 = xpc_int64_create(1500);
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1008], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v48;
      else
        v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
      v21 = xpc_string_create((const char *)v20);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1020], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      if (SHIBYTE(__p[2]) >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      v24 = xpc_string_create((const char *)v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1048], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27;
      aBlock[3] = &unk_1E79152D8;
      aBlock[4] = &v49;
      aBlock[5] = &object;
      v26 = *(void **)(a1 + 48);
      if (v26)
        v26 = _Block_copy(v26);
      v38 = v26;
      v27 = _Block_copy(aBlock);
      v28 = *(_QWORD *)(v2 + 136);
      if (v28)
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      *(_QWORD *)buf = v27;
      *(_QWORD *)&buf[8] = v28;
      v36 = v17;
      if (v17)
      {
        xpc_retain(v17);
        v27 = *(void **)buf;
        v35 = 0;
        if (*(_QWORD *)buf)
          goto LABEL_50;
      }
      else
      {
        v35 = 0;
        v36 = xpc_null_create();
        if (v27)
        {
LABEL_50:
          v29 = _Block_copy(v27);
          v30 = *MEMORY[0x1E0CF10B0];
          v31 = *(NSObject **)&buf[8];
          v33 = v29;
          v34 = *(_QWORD *)&buf[8];
          if (!*(_QWORD *)&buf[8])
          {
LABEL_52:
            TraceManager::runOnHelper_sync((_QWORD *)v2, (const char *)9, v30, 0, 1, &v36, &v35, &v33);
            if (v31)
              dispatch_release(v31);
            if (v29)
              _Block_release(v29);
            xpc_release(v36);
            v36 = 0;
            if (v31)
              dispatch_release(v31);
            if (v27)
              _Block_release(v27);
            if (v38)
              _Block_release(v38);
            xpc_release(v17);
            goto LABEL_63;
          }
LABEL_51:
          dispatch_retain(v31);
          goto LABEL_52;
        }
      }
      v29 = 0;
      v30 = *MEMORY[0x1E0CF10B0];
      v31 = *(NSObject **)&buf[8];
      v33 = 0;
      v34 = *(_QWORD *)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_12;
  }
  v8 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v32 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
    LODWORD(v49) = 136315138;
    *(_QWORD *)((char *)&v49 + 4) = v32;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Trace not supported: %s", (uint8_t *)&v49, 0xCu);
  }
  v9 = xpc_null_create();
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v49 = v9;
  v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v10 + 16))(v10, 3760250884, &v49);
  xpc_release((xpc_object_t)v49);
  xpc_release(v11);
LABEL_66:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete(v48.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
}

void sub_1BF5D8BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27(_QWORD *a1, _DWORD *a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t value;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object[2];
  uint64_t v18;

  if (!*a2 && MEMORY[0x1C3B8CD78](*a3) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CF1080]);
    v16 = value;
    if (value)
      xpc_retain(value);
    else
      v16 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v16, (const object *)"", v9);
    v10 = *(_QWORD *)(a1[4] + 8);
    v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0)
      operator delete(*(void **)v11);
    *(_OWORD *)v11 = *(_OWORD *)object;
    *(_QWORD *)(v11 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(object[0]) = 0;
    xpc_release(v16);
    v12 = *(_QWORD *)(a1[4] + 8);
    v13 = (const char *)(v12 + 40);
    if (*(char *)(v12 + 63) < 0)
      v13 = *(const char **)v13;
    v14 = xpc_string_create(v13);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(a1[5] + 8) + 40), (const char *)*MEMORY[0x1E0CFB6A8], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    LODWORD(object[0]) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)object, (void **)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  else
  {
    v5 = xpc_null_create();
    v6 = a1[6];
    object[0] = v5;
    v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v7);
  }
}

void sub_1BF5D8FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 48);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    _Block_release(v1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 1174405120;
      v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_32;
      v15[3] = &__block_descriptor_tmp_33_1;
      v15[4] = v7;
      if (*a3)
      {
        v13 = _Block_copy(*a3);
        v14 = *a2;
        aBlock = v13;
        object = v14;
        if (v14)
        {
LABEL_11:
          xpc_retain(v14);
          goto LABEL_14;
        }
      }
      else
      {
        v14 = *a2;
        aBlock = 0;
        object = v14;
        if (v14)
          goto LABEL_11;
      }
      object = xpc_null_create();
LABEL_14:
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_32(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t value;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  xpc_object_t v19;
  const void *v20;
  void *v21;
  void **v22;
  uint64_t v23;
  void *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  void *v30;
  void **v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void *v34;
  xpc_object_t v35;
  void *aBlock;
  xpc_object_t v37;
  unsigned int v38;
  void *__p[4];
  std::string __dst;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (!(*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E0CFB0F8]);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value)
      xpc_retain(value);
    else
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&__dst, (const object *)*MEMORY[0x1E0CFB4D8], v8);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) >= 0)
      v17 = HIBYTE(__p[2]);
    else
      v17 = (size_t)__p[1];
    if (v17 != strlen((const char *)*MEMORY[0x1E0CFB3A0])
      || (SHIBYTE(__p[2]) >= 0 ? (v18 = __p) : (v18 = (void **)__p[0]),
          memcmp(v18, (const void *)*MEMORY[0x1E0CFB3A0], v17)))
    {
      v19 = *(xpc_object_t *)(a1 + 48);
      v35 = v19;
      if (v19)
      {
        xpc_retain(v19);
        v20 = *(const void **)(a1 + 40);
        if (v20)
        {
LABEL_27:
          v21 = _Block_copy(v20);
LABEL_41:
          v34 = v21;
          TraceManager::collectLogs_sync(v2, &v35, &v34);
          if (v21)
            _Block_release(v21);
          xpc_release(v19);
          goto LABEL_61;
        }
      }
      else
      {
        v19 = xpc_null_create();
        v35 = v19;
        v20 = *(const void **)(a1 + 40);
        if (v20)
          goto LABEL_27;
      }
      v21 = 0;
      goto LABEL_41;
    }
    v27 = *(xpc_object_t *)(a1 + 48);
    v37 = v27;
    if (v27)
    {
      xpc_retain(v27);
      v28 = *(void **)(a1 + 40);
      if (!v28)
        goto LABEL_50;
    }
    else
    {
      v27 = xpc_null_create();
      v37 = v27;
      v28 = *(void **)(a1 + 40);
      if (!v28)
      {
LABEL_50:
        aBlock = v28;
        TraceManager::collectBasebandLogs_sync((uint64_t)v2, &v37, (uint64_t *)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        xpc_release(v27);
        goto LABEL_61;
      }
    }
    v28 = _Block_copy(v28);
    goto LABEL_50;
  }
  memset(__p, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFB5F0];
  v4 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_12;
  }
  memmove(p_dst, v3, v5);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v11 = (char *)operator new(0x28uLL);
  strcpy(v11, " rejected; ABM is shutting down ");
  v12 = std::string::append(&__dst, v11, 0x20uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operator delete(v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      v16 = *(_QWORD *)(a1 + 40);
      v15 = (uint64_t *)(a1 + 40);
      if (!v16)
        goto LABEL_61;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
  }
  v22 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v22 = (void **)__p[0];
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
  _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
  v23 = *(_QWORD *)(a1 + 40);
  v15 = (uint64_t *)(a1 + 40);
  if (v23)
  {
LABEL_32:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v24 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v24 = __p[1];
    if (v24)
    {
      v25 = xpc_dictionary_create(0, 0, 0);
      if (v25 || (v25 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v25) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v25);
          v26 = v25;
        }
        else
        {
          v26 = xpc_null_create();
        }
      }
      else
      {
        v26 = xpc_null_create();
        v25 = 0;
      }
      xpc_release(v25);
      v29 = xpc_null_create();
      v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      v32 = xpc_string_create((const char *)v31);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB0D0], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    v38 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v38, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_61:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF5D963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TraceManager::collectBasebandLogs_sync(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const __CFString **v9;
  xpc_object_t value;
  const char *v11;
  xpc_object_t v12;
  uint64_t v13;
  const __CFString **v14;
  xpc_object_t v15;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v18;
  size_t v19;
  std::string::size_type v20;
  std::string *p_dst;
  uint64_t v22;
  uint64_t v23;
  xpc_object_t v24;
  int v25;
  const void *v26;
  size_t v27;
  std::string::size_type v28;
  int v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t v33;
  std::string::size_type size;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *p_shared_owners;
  unint64_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  const char **v50;
  const void *v51;
  size_t v52;
  size_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  ctu *Mutable;
  const __CFAllocator *v59;
  __CFDictionary *v60;
  const __CFAllocator *v61;
  const char *v62;
  size_t v63;
  std::string::size_type v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const void *v69;
  size_t v70;
  int v71;
  size_t v72;
  unint64_t v73;
  size_t v74;
  _BYTE *v75;
  std::string *v76;
  std::string *v77;
  std::string::size_type v78;
  char v79;
  const __CFAllocator *v80;
  __CFDictionary *v81;
  const __CFAllocator *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_weak_owners;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  const void *v93;
  void *v94;
  NSObject *v95;
  ctu *v96;
  xpc_object_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  xpc_object_t v101;
  xpc_object_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  xpc_object_t v106;
  NSObject *v107;
  uint64_t v108;
  xpc_object_t v109;
  NSObject *v110;
  _BOOL4 v111;
  uint64_t v112;
  std::string *v113;
  xpc_object_t v114;
  xpc_object_t v115;
  xpc_object_t v116;
  std::string::size_type v117;
  const char *v118;
  void **v119;
  const __CFString **v120;
  const __CFString **v121;
  void *v122;
  NSObject *v123;
  NSObject *v124;
  xpc_object_t v125;
  _QWORD aBlock[6];
  std::__shared_weak_count *v127;
  void *v128;
  std::string v129;
  std::string __p;
  int v131;
  BOOL v132;
  xpc_object_t v133;
  xpc_object_t v134;
  xpc_object_t v135;
  xpc_object_t v136;
  xpc_object_t v137[2];
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t xdict;
  uint64_t v141;
  std::__shared_weak_count *v142;
  ctu *v143;
  unint64_t v144;
  BOOL v145;
  std::string v146;
  std::string v147[2];
  _BYTE block[32];
  uint64_t *v149;
  uint8_t buf[4];
  std::string *v151;
  const void *v152[3];
  std::string __dst;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_null_create();
    v7 = *a3;
    *(_QWORD *)block = v6;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(v7 + 16))(v7, 3760250880, block);
    xpc_release(*(xpc_object_t *)block);
    xpc_release(v8);
    return;
  }
  memset(&v147[1], 170, sizeof(std::string));
  v9 = (const __CFString **)*MEMORY[0x1E0CFB0F8];
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB0F8]);
  *(_QWORD *)block = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)block = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)block, (const object *)*MEMORY[0x1E0CFB3A0], v11);
  xpc_release(*(xpc_object_t *)block);
  memset(v147, 170, 24);
  v121 = (const __CFString **)*MEMORY[0x1E0CFB370];
  v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  if (v12)
    xpc_retain(v12);
  else
    v146.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v13, 0, 9, block);
  xpc::dyn_cast_or_default();
  if ((block[23] & 0x80000000) != 0)
    operator delete(*(void **)block);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (_QWORD *)__dst.__r_.__value_.__l.__size_);
  xpc_release(v146.__r_.__value_.__l.__data_);
  memset(&v146, 170, sizeof(v146));
  v14 = (const __CFString **)*MEMORY[0x1E0CFB930];
  v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15)
    xpc_retain(v15);
  else
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(block, 0, 24);
  xpc::dyn_cast_or_default();
  if ((block[23] & 0x80000000) != 0)
    operator delete(*(void **)block);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v120 = v9;
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v145 = 0;
  v18 = (const void *)*MEMORY[0x1E0CF11E8];
  v19 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
  p_dst = &__dst;
  if (v19)
LABEL_27:
    memmove(p_dst, v18, v20);
  p_dst->__r_.__value_.__s.__data_[v20] = 0;
  memset(block, 0, 24);
  if (prop::compression::get((char *)&__dst, (uint64_t)block))
  {
    LODWORD(v152[0]) = -1431655766;
    if (util::convert<int>((const std::string *)block, v152, 0))
      CompressionMode = LODWORD(v152[0]);
    else
      CompressionMode = CompressionMode;
  }
  if ((block[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)block);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_34:
  v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)block = v24;
  if (v24)
    xpc_retain(v24);
  else
    *(_QWORD *)block = xpc_null_create();
  v25 = xpc::dyn_cast_or_default((xpc *)block, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)block);
  if (v25)
  {
    v145 = 0;
    v26 = (const void *)*MEMORY[0x1E0CF1070];
    v27 = strlen((const char *)*MEMORY[0x1E0CF1070]);
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v28 = v27;
    v29 = v25;
    if (v27 >= 0x17)
    {
      v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v31 = v27 | 7;
      v32 = v31 + 1;
      v30 = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27;
      v30 = &__dst;
      if (!v27)
      {
LABEL_48:
        v30->__r_.__value_.__s.__data_[v28] = 0;
        memset(block, 0, 24);
        if (prop::compression::get((char *)&__dst, (uint64_t)block))
          util::convert<BOOL>((const std::string *)block, &v145, 0);
        v25 = v29;
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF8]);
          *(_QWORD *)block = v33;
          if (v33)
            xpc_retain(v33);
          else
            *(_QWORD *)block = xpc_null_create();
          v145 = xpc::dyn_cast_or_default((xpc *)block, (const object *)v145);
          xpc_release(*(xpc_object_t *)block);
          goto LABEL_58;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    memmove(v30, v26, v28);
    goto LABEL_48;
  }
LABEL_58:
  size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v146.__r_.__value_.__l.__size_;
  if (!size)
    std::string::__assign_external(&v146, (const std::string::value_type *)*MEMORY[0x1E0CFB058]);
  v143 = (ctu *)0xAAAAAAAAAAAAAAAALL;
  v144 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v36 = MEMORY[0x1E0C809B0];
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_13_8;
  v149 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v37 = unk_1ED70F6A0;
    v141 = GetABMLogServer(void)::sLogServer;
    v142 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_67;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v37 = unk_1ED70F6A0;
    v141 = GetABMLogServer(void)::sLogServer;
    v142 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_67;
  }
  v38 = (unint64_t *)(v37 + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_67:
  abm::HelperClient::create();
  if (v142)
  {
    p_shared_owners = &v142->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v41 - 1, (unint64_t *)p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  xdict = xpc_null_create();
  v42 = xpc_dictionary_create(0, 0, 0);
  if (v42 || (v42 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v42) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v42);
      v43 = v42;
    }
    else
    {
      v43 = xpc_null_create();
    }
  }
  else
  {
    v43 = xpc_null_create();
    v42 = 0;
  }
  xpc_release(v42);
  v44 = xpc_int64_create(1500);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v43, (const char *)*MEMORY[0x1E0CF1008], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  *(_QWORD *)&v46 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)block = v46;
  *(_OWORD *)&block[16] = v46;
  v139 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v139 = xpc_null_create();
  abm::HelperClient::perform();
  xpc_release(v139);
  v139 = 0;
  v138 = xpc_null_create();
  if (*(_DWORD *)block || MEMORY[0x1C3B8CD78](xdict) != MEMORY[0x1E0C812F8] || !*(_QWORD *)(a1 + 256))
  {
LABEL_85:
    xpc_release(v138);
    if ((block[31] & 0x80000000) != 0)
      operator delete(*(void **)&block[8]);
    xpc_release(v43);
    xpc_release(xdict);
    v47 = (std::__shared_weak_count *)v144;
    if (v144)
    {
      v48 = (unint64_t *)(v144 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v119 = (void **)a3;
    v50 = (const char **)MEMORY[0x1E0D01A30];
    v51 = (const void *)*MEMORY[0x1E0D01A30];
    v52 = strlen((const char *)*MEMORY[0x1E0D01A30]);
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v53 = v52;
    if (v52 >= 0x17)
    {
      v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v55 = v52 | 7;
      v56 = v55 + 1;
      v54 = operator new(v55 + 1);
      *(_QWORD *)&block[8] = v53;
      *(_QWORD *)&block[16] = v56 | 0x8000000000000000;
      *(_QWORD *)block = v54;
    }
    else
    {
      block[23] = v52;
      v54 = block;
      if (!v52)
      {
LABEL_100:
        v54[v53] = 0;
        support::fs::createDir(block, 0x1EDu, 1);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        v143 = 0;
        v57 = *MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v60 = Mutable;
        if (Mutable)
          v143 = Mutable;
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)block, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
        else
          *(std::string *)block = v146;
        ctu::cf::insert<char const*,std::string>(v60, v14, (uint64_t)block, v57, v59);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          if ((SHIBYTE(v147[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_109;
        }
        else if ((SHIBYTE(v147[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_109:
          *(std::string *)block = v147[0];
          goto LABEL_112;
        }
        std::string::__init_copy_ctor_external((std::string *)block, v147[0].__r_.__value_.__l.__data_, v147[0].__r_.__value_.__l.__size_);
LABEL_112:
        ctu::cf::insert<char const*,std::string>(v60, v121, (uint64_t)block, v57, v61);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        memset(&__dst, 170, sizeof(__dst));
        v62 = *v50;
        v63 = strlen(*v50);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          v65 = (std::string *)operator new(v66 + 1);
          __dst.__r_.__value_.__l.__size_ = v64;
          __dst.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v63;
          v65 = &__dst;
          if (!v63)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if (!v25)
              goto LABEL_139;
LABEL_123:
            v68 = v25;
            v69 = (const void *)*MEMORY[0x1E0D01A48];
            v70 = strlen((const char *)*MEMORY[0x1E0D01A48]);
            v71 = SHIBYTE(v147[0].__r_.__value_.__r.__words[2]);
            if ((v147[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = HIBYTE(v147[0].__r_.__value_.__r.__words[2]);
            else
              v72 = v147[0].__r_.__value_.__l.__size_;
            v73 = v72 + v70;
            memset(block, 170, 24);
            if (v72 + v70 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v74 = v70;
            if (v73 > 0x16)
            {
              v98 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v73 | 7) != 0x17)
                v98 = v73 | 7;
              v99 = v98 + 1;
              v75 = operator new(v98 + 1);
              *(_QWORD *)&block[8] = v73;
              *(_QWORD *)&block[16] = v99 | 0x8000000000000000;
              *(_QWORD *)block = v75;
              if (!v74)
                goto LABEL_130;
            }
            else
            {
              memset(block, 0, 24);
              v75 = block;
              block[23] = v72 + v70;
              if (!v70)
              {
LABEL_130:
                if (v72)
                {
                  if (v71 >= 0)
                    v76 = v147;
                  else
                    v76 = (std::string *)v147[0].__r_.__value_.__r.__words[0];
                  memmove(&v75[v74], v76, v72);
                }
                v75[v74 + v72] = 0;
                v77 = std::string::append((std::string *)block, "/", 1uLL);
                v78 = v77->__r_.__value_.__r.__words[0];
                v152[0] = (const void *)v77->__r_.__value_.__l.__size_;
                *(const void **)((char *)v152 + 7) = *(const void **)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
                v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                v25 = v68;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                __dst.__r_.__value_.__r.__words[0] = v78;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v152[0];
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v152 + 7);
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v79;
                v36 = MEMORY[0x1E0C809B0];
                if ((block[23] & 0x80000000) != 0)
                  operator delete(*(void **)block);
LABEL_139:
                support::fs::createDir((const char *)&__dst, 0x1EDu, 1);
                v81 = v143;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external((std::string *)block, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                else
                  *(std::string *)block = __dst;
                ctu::cf::insert<char const*,std::string>(v81, (const __CFString **)*MEMORY[0x1E0CFB6A0], (uint64_t)block, v57, v80);
                if ((block[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)block);
                  if ((SHIBYTE(v147[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_144;
                }
                else if ((SHIBYTE(v147[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_144:
                  *(std::string *)block = v147[1];
                  goto LABEL_147;
                }
                std::string::__init_copy_ctor_external((std::string *)block, v147[1].__r_.__value_.__l.__data_, v147[1].__r_.__value_.__l.__size_);
LABEL_147:
                ctu::cf::insert<char const*,std::string>(v81, v120, (uint64_t)block, v57, v82);
                if ((block[23] & 0x80000000) != 0)
                  operator delete(*(void **)block);
                v83 = *(std::__shared_weak_count **)(a1 + 128);
                if (!v83 || (v84 = *(_QWORD *)(a1 + 120), (v85 = std::__shared_weak_count::lock(v83)) == 0))
                  std::__throw_bad_weak_ptr[abi:ne180100]();
                v86 = v85;
                p_shared_weak_owners = (unint64_t *)&v85->__shared_weak_owners_;
                do
                  v88 = __ldxr(p_shared_weak_owners);
                while (__stxr(v88 + 1, p_shared_weak_owners));
                v89 = (unint64_t *)&v85->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v86);
                }
                memset(block, 170, 16);
                aBlock[0] = v36;
                aBlock[1] = 1174405120;
                aBlock[2] = ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
                aBlock[3] = &__block_descriptor_tmp_41_0;
                aBlock[4] = a1;
                aBlock[5] = v84;
                v127 = v86;
                do
                  v91 = __ldxr(p_shared_weak_owners);
                while (__stxr(v91 + 1, p_shared_weak_owners));
                v92 = *v119;
                if (*v119)
                  v92 = _Block_copy(v92);
                v128 = v92;
                if (SHIBYTE(v147[0].__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v129, v147[0].__r_.__value_.__l.__data_, v147[0].__r_.__value_.__l.__size_);
                else
                  v129 = v147[0];
                v131 = v25;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                else
                  __p = __dst;
                v132 = v145;
                v94 = _Block_copy(aBlock);
                v95 = *(NSObject **)(a1 + 136);
                if (v95)
                  dispatch_retain(*(dispatch_object_t *)(a1 + 136));
                *(_QWORD *)block = v94;
                *(_QWORD *)&block[8] = v95;
                v96 = v143;
                ctu::cf_to_xpc(v143, v93);
                v97 = (xpc_object_t)v152[0];
                if (v152[0] && MEMORY[0x1C3B8CD78](v152[0]) == MEMORY[0x1E0C812F8])
                  xpc_retain(v97);
                else
                  v97 = xpc_null_create();
                xpc_release((xpc_object_t)v152[0]);
                v100 = (const char *)(a1 + 168);
                if (*(char *)(a1 + 191) < 0)
                  v100 = *(const char **)v100;
                v101 = xpc_string_create(v100);
                if (!v101)
                  v101 = xpc_null_create();
                xpc_dictionary_set_value(v97, (const char *)*MEMORY[0x1E0CFB330], v101);
                v102 = xpc_null_create();
                xpc_release(v101);
                xpc_release(v102);
                v125 = v97;
                if (v97)
                {
                  xpc_retain(v97);
                  v124 = 0;
                  if (v94)
                    goto LABEL_183;
                }
                else
                {
                  v124 = 0;
                  v125 = xpc_null_create();
                  if (v94)
                  {
LABEL_183:
                    v103 = _Block_copy(v94);
                    v104 = *MEMORY[0x1E0CF1178];
                    v122 = v103;
                    v123 = v95;
                    if (!v95)
                      goto LABEL_185;
                    goto LABEL_184;
                  }
                }
                v103 = 0;
                v104 = *MEMORY[0x1E0CF1178];
                v122 = 0;
                v123 = v95;
                if (!v95)
                {
LABEL_185:
                  TraceManager::runOnHelper_sync((_QWORD *)a1, (const char *)9, v104, 0x1388u, 1, &v125, &v124, &v122);
                  if (v95)
                    dispatch_release(v95);
                  if (v103)
                    _Block_release(v103);
                  xpc_release(v125);
                  v125 = 0;
                  xpc_release(v97);
                  if (v95)
                    dispatch_release(v95);
                  if (v94)
                    _Block_release(v94);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_195:
                      v105 = v128;
                      if (!v128)
                      {
LABEL_203:
                        if (v127)
                          std::__shared_weak_count::__release_weak(v127);
                        std::__shared_weak_count::__release_weak(v86);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          if (!v96)
                            goto LABEL_210;
                        }
                        else if (!v96)
                        {
LABEL_210:
                          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_250;
LABEL_211:
                          if (SHIBYTE(v147[0].__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_251;
                          goto LABEL_212;
                        }
                        CFRelease(v96);
                        goto LABEL_210;
                      }
LABEL_202:
                      _Block_release(v105);
                      goto LABEL_203;
                    }
                  }
                  else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_195;
                  }
                  operator delete(v129.__r_.__value_.__l.__data_);
                  v105 = v128;
                  if (!v128)
                    goto LABEL_203;
                  goto LABEL_202;
                }
LABEL_184:
                dispatch_retain(v95);
                goto LABEL_185;
              }
            }
            memcpy(v75, v69, v74);
            goto LABEL_130;
          }
        }
        memmove(v65, v62, v64);
        v65->__r_.__value_.__s.__data_[v64] = 0;
        if (!v25)
          goto LABEL_139;
        goto LABEL_123;
      }
    }
    memmove(v54, v51, v53);
    goto LABEL_100;
  }
  memset(v152, 170, sizeof(v152));
  v106 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CF10E0]);
  v137[0] = v106;
  if (v106)
    xpc_retain(v106);
  else
    v137[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v137[0]);
  v107 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    v108 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 16);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v108;
    _os_log_impl(&dword_1BF566000, v107, OS_LOG_TYPE_DEFAULT, "#I Baseband Log tracker size: %d", (uint8_t *)&__dst, 8u);
  }
  v137[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v137[1] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  BBLogTracker::getLog(*(_QWORD *)(a1 + 256), v152, (uint64_t *)v137);
  v109 = v137[0];
  if (!v137[0])
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v137);
    if (SHIBYTE(v152[2]) < 0)
      operator delete((void *)v152[0]);
    goto LABEL_85;
  }
  v110 = *(NSObject **)(a1 + 88);
  v111 = os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT);
  v112 = MEMORY[0x1E0C812F8];
  if (v111)
  {
    asString((uint64_t)v109, &__dst);
    v113 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__dst
         : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v151 = v113;
    _os_log_impl(&dword_1BF566000, v110, OS_LOG_TYPE_DEFAULT, "#I Log tracker info: %s", buf, 0xCu);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v114 = xpc_dictionary_create(0, 0, 0);
  v115 = v114;
  if (v114)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
  }
  else
  {
    v115 = xpc_null_create();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
    if (!v115)
    {
      v116 = xpc_null_create();
      v115 = 0;
      goto LABEL_238;
    }
  }
  if (MEMORY[0x1C3B8CD78](v115) == v112)
  {
    xpc_retain(v115);
    goto LABEL_239;
  }
  v116 = xpc_null_create();
LABEL_238:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
LABEL_239:
  xpc_release(v115);
  xpc::dict::operator=(&v138, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  v135 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v135)
    v135 = xpc_null_create();
  v117 = *MEMORY[0x1E0CFB6A0];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  __dst.__r_.__value_.__l.__size_ = v117;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v135, &v136);
  xpc_release(v136);
  v136 = 0;
  xpc_release(v135);
  v135 = 0;
  v118 = (const char *)v137[0];
  if (*((char *)v137[0] + 23) < 0)
    v118 = *(const char **)v137[0];
  v133 = xpc_string_create(v118);
  if (!v133)
    v133 = xpc_null_create();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v121;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v133, &v134);
  xpc_release(v134);
  v134 = 0;
  xpc_release(v133);
  v133 = 0;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v138);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v137);
  if (SHIBYTE(v152[2]) < 0)
    operator delete((void *)v152[0]);
  xpc_release(v138);
  if ((block[31] & 0x80000000) != 0)
    operator delete(*(void **)&block[8]);
  xpc_release(v43);
  xpc_release(xdict);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v143);
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_211;
LABEL_250:
  operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147[0].__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_251:
    operator delete(v147[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v147[1].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_252;
    return;
  }
LABEL_212:
  if (SHIBYTE(v147[1].__r_.__value_.__r.__words[2]) < 0)
LABEL_252:
    operator delete(v147[1].__r_.__value_.__l.__data_);
}

void sub_1BF5DAA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,xpc_object_t a42,uint64_t a43,xpc_object_t object,xpc_object_t a45,xpc_object_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void TraceManager::collectLogs_sync(_QWORD *a1, xpc_object_t *a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  void (**v9)(void *, uint64_t, stat *);
  xpc_object_t v10;
  const __CFString **v11;
  xpc_object_t value;
  const char *v13;
  char *v14;
  const __CFString **v15;
  xpc_object_t v16;
  const __CFString **v17;
  xpc_object_t v18;
  const __CFString **v19;
  xpc_object_t v20;
  const __CFString **v21;
  xpc_object_t v22;
  const __CFString **v23;
  xpc_object_t v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  xpc_object_t v30;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  xpc_object_t v39;
  int v40;
  const void *v41;
  size_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  xpc_object_t v47;
  void *v48;
  size_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  xpc_object_t v54;
  std::string::size_type size;
  const void *v56;
  size_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int data;
  xpc_object_t v63;
  int v64;
  char IsCarrierBuild;
  char v66;
  uint64_t **v67;
  NSObject *v68;
  stat *p_block;
  uint64_t *v70;
  NSObject *v71;
  const void *v72;
  size_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  const void *v80;
  size_t v81;
  int v82;
  size_t v83;
  __darwin_ino64_t v84;
  size_t v85;
  char *v86;
  char *v87;
  void **v88;
  std::string *v89;
  void *v90;
  char v91;
  size_t v92;
  std::string::size_type *v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  size_t v97;
  __darwin_ino64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int st_gid_high;
  void *v104;
  stat *v105;
  std::string *v106;
  size_t v107;
  int v108;
  int v109;
  int v110;
  NSObject *v111;
  std::string *v112;
  const __CFAllocator *v113;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v115;
  __CFDictionary *v116;
  const __CFAllocator *v117;
  const __CFAllocator *v118;
  const __CFAllocator *v119;
  const __CFAllocator *v120;
  const __CFAllocator *v121;
  const __CFAllocator *v122;
  const __CFAllocator *v123;
  const __CFAllocator *v124;
  const __CFAllocator *v125;
  const __CFAllocator *v126;
  const __CFAllocator *v127;
  const __CFString **v128;
  xpc_object_t v129;
  int v130;
  const __CFAllocator *v131;
  const __CFString **v132;
  xpc_object_t v133;
  int v134;
  const __CFAllocator *v135;
  const __CFString **v136;
  xpc_object_t v137;
  int v138;
  const __CFAllocator *v139;
  const __CFAllocator *v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *p_shared_owners;
  unint64_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t v154;
  const char *v155;
  const char *v156;
  const char *v157;
  const __CFString ***v158;
  const void *v159;
  size_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  timespec v165;
  void **v166;
  int v167;
  const __CFAllocator *v168;
  int v169;
  __int128 v170;
  const __CFAllocator *v171;
  NSObject *v172;
  std::__shared_weak_count *v173;
  const void *v174;
  size_t v175;
  void *v176;
  void *v177;
  CFTypeRef v178;
  uint64_t v179;
  uint64_t v180;
  CFTypeID v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *st_ino;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  CFTypeRef v200;
  void **v201;
  int v202;
  const __CFString **v203;
  const __CFString **v204;
  const __CFString **v205;
  int v206;
  const __CFString **v207;
  const __CFString **v208;
  const __CFString **v209;
  const __CFString **v210;
  const __CFString **v211;
  const __CFString **v212;
  char *__s;
  void *__src;
  _QWORD aBlock[5];
  __int128 v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  xpc_object_t v219;
  CFTypeRef v220;
  void *v221;
  std::string v222;
  void *v223;
  CFTypeRef v224;
  void *v225[2];
  unint64_t v226;
  xpc_object_t v227;
  void *v228[2];
  int64_t v229;
  xpc_object_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t v233;
  unint64_t v234;
  CFTypeRef cf;
  std::string v236;
  void *__p[2];
  char v238;
  char v239;
  BOOL v240;
  char v241;
  std::string v242[2];
  void *v243[3];
  void *v244[3];
  std::string::size_type __sz[3];
  std::string v246;
  xpc_object_t __dst[4];
  stat block;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = xpc_null_create();
    v9 = (void (**)(void *, uint64_t, stat *))*a3;
    *(_QWORD *)&block.st_dev = v8;
    v10 = xpc_null_create();
    v9[2](v9, 3760250880, &block);
    xpc_release(*(xpc_object_t *)&block.st_dev);
    xpc_release(v10);
    return;
  }
  memset(__sz, 170, sizeof(__sz));
  v11 = (const __CFString **)*MEMORY[0x1E0CFB0F8];
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB0F8]);
  *(_QWORD *)&block.st_dev = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v14 = (char *)*MEMORY[0x1E0CFB4D8];
  xpc::dyn_cast_or_default((xpc *)&block, (const object *)*MEMORY[0x1E0CFB4D8], v13);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  memset(v244, 170, sizeof(v244));
  v15 = (const __CFString **)*MEMORY[0x1E0CFB370];
  v16 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  v242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
    xpc_retain(v16);
  else
    v242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v243);
  Timestamp::asString((uint64_t)v243, 0, 9, &block);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v243, (_QWORD *)v243[1]);
  xpc_release(v242[1].__r_.__value_.__l.__data_);
  memset(v243, 170, sizeof(v243));
  v17 = (const __CFString **)*MEMORY[0x1E0CFB538];
  v18 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB538]);
  v242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18)
    xpc_retain(v18);
  else
    v242[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  xpc_release(v242[1].__r_.__value_.__l.__data_);
  memset(&v242[1], 170, sizeof(std::string));
  v19 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
  v20 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  if (v20)
    xpc_retain(v20);
  else
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  __s = v14;
  xpc_release(v242[0].__r_.__value_.__l.__data_);
  memset(v242, 170, 24);
  v21 = (const __CFString **)*MEMORY[0x1E0CFB930];
  v22 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  __dst[0] = v22;
  if (v22)
    xpc_retain(v22);
  else
    __dst[0] = xpc_null_create();
  memset(&block, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  xpc_release(__dst[0]);
  v23 = (const __CFString **)*MEMORY[0x1E0CFB010];
  v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB010]);
  *(_QWORD *)&block.st_dev = v24;
  if (v24)
    xpc_retain(v24);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v211 = v15;
  v212 = v21;
  v206 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)7);
  v207 = v23;
  v208 = v19;
  v209 = v17;
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v241 = 1;
  __src = (void *)*MEMORY[0x1E0CFC0C0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFC0C0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  v210 = v11;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __dst[2] = (xpc_object_t)(v29 | 0x8000000000000000);
    __dst[0] = v27;
    __dst[1] = v26;
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v25;
  v27 = __dst;
  if (v25)
LABEL_36:
    memmove(v27, __src, (size_t)v26);
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  memset(&block, 0, 24);
  if (prop::logfilter::get((char *)__dst, (uint64_t)&block))
    util::convert<BOOL>((const std::string *)&block, (BOOL *)&v241, 0);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_41;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst[0]);
LABEL_41:
  v30 = xpc_dictionary_get_value(*a2, (const char *)__src);
  *(_QWORD *)&block.st_dev = v30;
  if (v30)
    xpc_retain(v30);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v241 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v241);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v240 = 0;
  v33 = (const void *)*MEMORY[0x1E0CF11E8];
  v34 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __dst[2] = (xpc_object_t)(v38 | 0x8000000000000000);
    __dst[0] = v36;
    __dst[1] = v35;
    goto LABEL_57;
  }
  HIBYTE(__dst[2]) = v34;
  v36 = __dst;
  if (v34)
LABEL_57:
    memmove(v36, v33, (size_t)v35);
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  memset(&block, 0, 24);
  if (prop::compression::get((char *)__dst, (uint64_t)&block))
  {
    LODWORD(v246.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>((const std::string *)&block, &v246, 0))
      CompressionMode = LODWORD(v246.__r_.__value_.__l.__data_);
    else
      CompressionMode = CompressionMode;
  }
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_64;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(__dst[0]);
LABEL_64:
  v205 = (const __CFString **)*MEMORY[0x1E0CFC068];
  v39 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)&block.st_dev = v39;
  if (v39)
    xpc_retain(v39);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v40 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  if (v40)
  {
    v240 = 0;
    v41 = (const void *)*MEMORY[0x1E0CF1070];
    v42 = strlen((const char *)*MEMORY[0x1E0CF1070]);
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v43 = (void *)v42;
    if (v42 >= 0x17)
    {
      v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v45 = v42 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      __dst[2] = (xpc_object_t)(v46 | 0x8000000000000000);
      __dst[0] = v44;
      __dst[1] = v43;
    }
    else
    {
      HIBYTE(__dst[2]) = v42;
      v44 = __dst;
      if (!v42)
      {
LABEL_78:
        *((_BYTE *)v43 + (_QWORD)v44) = 0;
        memset(&block, 0, 24);
        if (prop::compression::get((char *)__dst, (uint64_t)&block))
          util::convert<BOOL>((const std::string *)&block, &v240, 0);
        if (SHIBYTE(block.st_gid) < 0)
        {
          operator delete(*(void **)&block.st_dev);
          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
            goto LABEL_82;
        }
        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        {
LABEL_82:
          v47 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDF8]);
          *(_QWORD *)&block.st_dev = v47;
          if (v47)
            xpc_retain(v47);
          else
            *(_QWORD *)&block.st_dev = xpc_null_create();
          v240 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v240);
          xpc_release(*(xpc_object_t *)&block.st_dev);
          goto LABEL_88;
        }
        operator delete(__dst[0]);
        goto LABEL_82;
      }
    }
    memmove(v44, v41, (size_t)v43);
    goto LABEL_78;
  }
LABEL_88:
  v239 = 1;
  v48 = (void *)*MEMORY[0x1E0CFBA40];
  v49 = strlen((const char *)*MEMORY[0x1E0CFBA40]);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v50 = (void *)v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    __dst[2] = (xpc_object_t)(v53 | 0x8000000000000000);
    __dst[0] = v51;
    __dst[1] = v50;
    goto LABEL_95;
  }
  HIBYTE(__dst[2]) = v49;
  v51 = __dst;
  if (v49)
LABEL_95:
    memmove(v51, v48, (size_t)v50);
  *((_BYTE *)v50 + (_QWORD)v51) = 0;
  memset(&block, 0, 24);
  if (prop::systemlogs::get((char *)__dst, (uint64_t)&block))
    util::convert<BOOL>((const std::string *)&block, (BOOL *)&v239, 0);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_100;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(__dst[0]);
LABEL_100:
  v54 = xpc_dictionary_get_value(*a2, (const char *)v48);
  *(_QWORD *)&block.st_dev = v54;
  if (v54)
    xpc_retain(v54);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v239 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)v239);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  size = HIBYTE(v242[0].__r_.__value_.__r.__words[2]);
  if ((v242[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v242[0].__r_.__value_.__l.__size_;
  if (!size)
    std::string::__assign_external(v242, (const std::string::value_type *)*MEMORY[0x1E0CFB058]);
  v56 = (const void *)*MEMORY[0x1E0CFB028];
  v57 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = (void *)v57;
  v204 = (const __CFString **)v48;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = operator new(v60 + 1);
    __dst[2] = (xpc_object_t)(v61 | 0x8000000000000000);
    __dst[0] = v59;
    __dst[1] = v58;
    goto LABEL_116;
  }
  HIBYTE(__dst[2]) = v57;
  v59 = __dst;
  if (v57)
LABEL_116:
    memmove(v59, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v59) = 0;
  memset(&block, 0, 24);
  v201 = a3;
  if (!prop::systemlogs::get((char *)__dst, (uint64_t)&block))
  {
    data = 0;
    if ((SHIBYTE(block.st_gid) & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
  LODWORD(v246.__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>((const std::string *)&block, &v246, 0))
    data = v246.__r_.__value_.__l.__data_;
  else
    data = 0;
  if (SHIBYTE(block.st_gid) < 0)
LABEL_124:
    operator delete(*(void **)&block.st_dev);
LABEL_125:
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v203 = (const __CFString **)*MEMORY[0x1E0CFB190];
  v63 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB190]);
  *(_QWORD *)&block.st_dev = v63;
  if (v63)
    xpc_retain(v63);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v64 = xpc::dyn_cast_or_default((xpc *)&block, (const object *)data);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  if ((TelephonyUtilIsInternalBuild() & 1) != 0
    || ((IsCarrierBuild = TelephonyUtilIsCarrierBuild(), v64 != 2) ? (v66 = 1) : (v66 = IsCarrierBuild), (v66 & 1) != 0))
  {
    if (v64 == 2)
    {
      v67 = (uint64_t **)a1[32];
      if (v67)
      {
        v68 = a1[11];
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          abm::helper::asString();
          if ((block.st_gid & 0x80000000) == 0)
            p_block = &block;
          else
            p_block = *(stat **)&block.st_dev;
          LODWORD(__dst[0]) = 136315138;
          *(xpc_object_t *)((char *)__dst + 4) = p_block;
          _os_log_impl(&dword_1BF566000, v68, OS_LOG_TYPE_DEFAULT, "#I Detected a log dump with sysdiagnose mode, overriding compression mode to %s", (uint8_t *)__dst, 0xCu);
          if (SHIBYTE(block.st_gid) < 0)
            operator delete(*(void **)&block.st_dev);
          v67 = (uint64_t **)a1[32];
        }
        BBLogTracker::addLog(v67, (__int128 *)v244, 2, (uint64_t)__sz);
        v70 = (uint64_t *)a1[32];
        if ((unint64_t)v70[2] >= 0xB)
        {
          do
            std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v70, *v70);
          while ((unint64_t)v70[2] > 0xA);
        }
        v40 = 0;
      }
      v202 = 2;
    }
    else
    {
      v202 = v64;
    }
  }
  else
  {
    v71 = a1[11];
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block.st_dev) = 0;
      _os_log_error_impl(&dword_1BF566000, v71, OS_LOG_TYPE_ERROR, "Detected a log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&block, 2u);
    }
    v202 = 0;
  }
  memset(__dst, 170, 24);
  v72 = (const void *)*MEMORY[0x1E0D01A30];
  v73 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v74 = (void *)v73;
  if (v73 >= 0x17)
  {
    v76 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v76 = v73 | 7;
    v77 = v76 + 1;
    v75 = operator new(v76 + 1);
    __dst[2] = (xpc_object_t)(v77 | 0x8000000000000000);
    __dst[0] = v75;
    __dst[1] = v74;
LABEL_160:
    memmove(v75, v72, (size_t)v74);
    *((_BYTE *)v74 + (_QWORD)v75) = 0;
    if (!v40)
      goto LABEL_177;
    goto LABEL_161;
  }
  HIBYTE(__dst[2]) = v73;
  v75 = __dst;
  if (v73)
    goto LABEL_160;
  LOBYTE(__dst[0]) = 0;
  if (!v40)
    goto LABEL_177;
LABEL_161:
  v78 = v40;
  v79 = a1;
  v80 = (const void *)*MEMORY[0x1E0D01A48];
  v81 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  v82 = SHIBYTE(v244[2]);
  if (SHIBYTE(v244[2]) >= 0)
    v83 = HIBYTE(v244[2]);
  else
    v83 = (size_t)v244[1];
  v84 = v83 + v81;
  memset(&block, 170, 24);
  if (v83 + v81 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v81;
  if (v84 > 0x16)
  {
    v94 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v94 = v84 | 7;
    v95 = v94 + 1;
    v86 = (char *)operator new(v94 + 1);
    block.st_ino = v84;
    *(_QWORD *)&block.st_uid = v95 | 0x8000000000000000;
    *(_QWORD *)&block.st_dev = v86;
    v40 = v78;
    if (!v85)
      goto LABEL_168;
    goto LABEL_167;
  }
  memset(&block, 0, 24);
  v86 = (char *)&block;
  HIBYTE(block.st_gid) = v83 + v81;
  v40 = v78;
  if (v81)
LABEL_167:
    memcpy(v86, v80, v85);
LABEL_168:
  v87 = &v86[v85];
  if (v83)
  {
    if (v82 >= 0)
      v88 = v244;
    else
      v88 = (void **)v244[0];
    memmove(v87, v88, v83);
  }
  v87[v83] = 0;
  v89 = std::string::append((std::string *)&block, "/", 1uLL);
  v90 = (void *)v89->__r_.__value_.__r.__words[0];
  v246.__r_.__value_.__r.__words[0] = v89->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v246.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v89->__r_.__value_.__r.__words[1] + 7);
  v91 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  a1 = v79;
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  __dst[0] = v90;
  __dst[1] = v246.__r_.__value_.__l.__data_;
  *(xpc_object_t *)((char *)&__dst[1] + 7) = *(xpc_object_t *)((char *)v246.__r_.__value_.__r.__words + 7);
  HIBYTE(__dst[2]) = v91;
  v7 = MEMORY[0x1E0C812F8];
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
LABEL_177:
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if ((__sz[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(__sz[2]);
  else
    v92 = __sz[1];
  if (v92 == strlen(__s))
  {
    v93 = (__sz[2] & 0x8000000000000000) == 0 ? __sz : (std::string::size_type *)__sz[0];
    if (!memcmp(v93, __s, v92))
    {
      v238 = 9;
      strcpy((char *)__p, "StateDump");
      if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v236, v242[0].__r_.__value_.__l.__data_, v242[0].__r_.__value_.__l.__size_);
      else
        v236 = v242[0];
      TraceManager::submitTraceMetric_sync((uint64_t)a1, (const char *)__p, (const char *)&v236);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v236.__r_.__value_.__l.__data_);
      if (v238 < 0)
        operator delete(__p[0]);
    }
  }
  memset(&v246, 0, sizeof(v246));
  TraceFilter::determineFilterAction(&v246);
  v96 = (const void *)*MEMORY[0x1E0CFB6C8];
  v97 = strlen((const char *)*MEMORY[0x1E0CFB6C8]);
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v98 = v97;
  if (v97 >= 0x17)
  {
    v101 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v101 = v97 | 7;
    v102 = v101 + 1;
    v99 = operator new(v101 + 1);
    block.st_ino = v98;
    *(_QWORD *)&block.st_uid = v102 | 0x8000000000000000;
    *(_QWORD *)&block.st_dev = v99;
  }
  else
  {
    HIBYTE(block.st_gid) = v97;
    v99 = &block;
    if (!v97)
    {
      v100 = v40;
      goto LABEL_204;
    }
  }
  v100 = v40;
  memmove(v99, v96, v98);
LABEL_204:
  *((_BYTE *)v99 + v98) = 0;
  st_gid_high = SHIBYTE(block.st_gid);
  v104 = *(void **)&block.st_dev;
  if ((block.st_gid & 0x80000000) == 0)
    v105 = &block;
  else
    v105 = *(stat **)&block.st_dev;
  if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &v246;
  else
    v106 = (std::string *)v246.__r_.__value_.__r.__words[0];
  v107 = strlen((const char *)v96);
  v108 = strncasecmp((const char *)v105, (const char *)v106, v107);
  v109 = v108;
  if (st_gid_high < 0)
  {
    operator delete(v104);
    v110 = v100;
    if (!v109)
      goto LABEL_215;
    goto LABEL_214;
  }
  v110 = v100;
  if (v108)
LABEL_214:
    std::string::append(v242, " (some logs are dropped due to not enough space on device!)", 0x3BuLL);
LABEL_215:
  v111 = a1[11];
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    v112 = &v246;
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v112 = (std::string *)v246.__r_.__value_.__r.__words[0];
    block.st_dev = 136315138;
    *(_QWORD *)&block.st_mode = v112;
    _os_log_impl(&dword_1BF566000, v111, OS_LOG_TYPE_DEFAULT, "#I Trace filter '%s'", (uint8_t *)&block, 0xCu);
  }
  cf = 0;
  v113 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v116 = Mutable;
  if (Mutable)
    cf = Mutable;
  if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&block, v242[0].__r_.__value_.__l.__data_, v242[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v242[0].__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v242[0].__r_.__value_.__l + 2);
  }
  ctu::cf::insert<char const*,std::string>(v116, v212, (uint64_t)&block, (uint64_t)v113, v115);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v244[2]) & 0x80000000) == 0)
      goto LABEL_226;
  }
  else if ((SHIBYTE(v244[2]) & 0x80000000) == 0)
  {
LABEL_226:
    *(_OWORD *)&block.st_dev = *(_OWORD *)v244;
    *(void **)&block.st_uid = v244[2];
    goto LABEL_229;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)v244[0], (std::string::size_type)v244[1]);
LABEL_229:
  ctu::cf::insert<char const*,std::string>(v116, v211, (uint64_t)&block, (uint64_t)v113, v117);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_231;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_231:
    *(_OWORD *)&block.st_dev = *(_OWORD *)__dst;
    *(xpc_object_t *)&block.st_uid = __dst[2];
    goto LABEL_234;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
LABEL_234:
  ctu::cf::insert<char const*,std::string>(v116, (const __CFString **)*MEMORY[0x1E0CFB6A0], (uint64_t)&block, (uint64_t)v113, v118);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
      goto LABEL_236;
  }
  else if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
  {
LABEL_236:
    *(_OWORD *)&block.st_dev = *(_OWORD *)__sz;
    *(_QWORD *)&block.st_uid = __sz[2];
    goto LABEL_239;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)__sz[0], __sz[1]);
LABEL_239:
  ctu::cf::insert<char const*,std::string>(v116, v210, (uint64_t)&block, (uint64_t)v113, v119);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_241;
  }
  else if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_241:
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v246.__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v246.__r_.__value_.__l + 2);
    goto LABEL_244;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
LABEL_244:
  ctu::cf::insert<char const*,std::string>(v116, (const __CFString **)*MEMORY[0x1E0CFB548], (uint64_t)&block, (uint64_t)v113, v120);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_246;
  }
  else if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
  {
LABEL_246:
    *(_OWORD *)&block.st_dev = *(_OWORD *)v243;
    *(void **)&block.st_uid = v243[2];
    goto LABEL_249;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, (const std::string::value_type *)v243[0], (std::string::size_type)v243[1]);
LABEL_249:
  ctu::cf::insert<char const*,std::string>(v116, v209, (uint64_t)&block, (uint64_t)v113, v121);
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if ((SHIBYTE(v242[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_251;
  }
  else if ((SHIBYTE(v242[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_251:
    *(_OWORD *)&block.st_dev = *(_OWORD *)&v242[1].__r_.__value_.__l.__data_;
    *(_QWORD *)&block.st_uid = *((_QWORD *)&v242[1].__r_.__value_.__l + 2);
    goto LABEL_254;
  }
  std::string::__init_copy_ctor_external((std::string *)&block, v242[1].__r_.__value_.__l.__data_, v242[1].__r_.__value_.__l.__size_);
LABEL_254:
  ctu::cf::insert<char const*,std::string>(v116, v208, (uint64_t)&block, (uint64_t)v113, v122);
  if (SHIBYTE(block.st_gid) < 0)
    operator delete(*(void **)&block.st_dev);
  ctu::cf::insert<char const*,int>(v116, v207, v206, v113, v123);
  ctu::cf::insert<char const*,int>(v116, v205, v110, v113, v124);
  ctu::cf::insert<char const*,BOOL>(v116, (const __CFString **)*MEMORY[0x1E0CFBDF8], v240, (uint64_t)v113, v125);
  ctu::cf::insert<char const*,int>(v116, v203, v202, v113, v126);
  ctu::cf::insert<char const*,BOOL>(v116, v204, v239, (uint64_t)v113, v127);
  v128 = (const __CFString **)*MEMORY[0x1E0CFB780];
  v129 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB780]);
  *(_QWORD *)&block.st_dev = v129;
  if (v129)
    xpc_retain(v129);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v130 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v128, v130, (uint64_t)v113, v131);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v132 = (const __CFString **)*MEMORY[0x1E0CFB798];
  v133 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB798]);
  *(_QWORD *)&block.st_dev = v133;
  if (v133)
    xpc_retain(v133);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v134 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v132, v134, (uint64_t)v113, v135);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  v136 = (const __CFString **)*MEMORY[0x1E0CFB790];
  v137 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB790]);
  *(_QWORD *)&block.st_dev = v137;
  if (v137)
    xpc_retain(v137);
  else
    *(_QWORD *)&block.st_dev = xpc_null_create();
  v138 = xpc::dyn_cast_or_default((xpc *)&block, 0);
  ctu::cf::insert<char const*,BOOL>(v116, v136, v138, (uint64_t)v113, v139);
  xpc_release(*(xpc_object_t *)&block.st_dev);
  ctu::cf::insert<char const*,BOOL>(v116, (const __CFString **)__src, v241, (uint64_t)v113, v140);
  v233 = 0xAAAAAAAAAAAAAAAALL;
  v234 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v142 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
  block.st_ino = 0x40000000;
  *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_8;
  block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v143 = unk_1ED70F6A0;
    v231 = GetABMLogServer(void)::sLogServer;
    v232 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_270;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v143 = unk_1ED70F6A0;
    v231 = GetABMLogServer(void)::sLogServer;
    v232 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_270;
  }
  v144 = (unint64_t *)(v143 + 8);
  do
    v145 = __ldxr(v144);
  while (__stxr(v145 + 1, v144));
LABEL_270:
  abm::HelperClient::create();
  if (v232)
  {
    p_shared_owners = &v232->__shared_owners_;
    do
      v147 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v147 - 1, (unint64_t *)p_shared_owners));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v148 = xpc_dictionary_create(0, 0, 0);
  if (v148 || (v148 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v148) == v7)
    {
      xpc_retain(v148);
      v149 = v148;
    }
    else
    {
      v149 = xpc_null_create();
    }
  }
  else
  {
    v149 = xpc_null_create();
    v148 = 0;
  }
  xpc_release(v148);
  v230 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v150 = xpc_dictionary_create(0, 0, 0);
  v151 = v150;
  if (v150)
  {
    v230 = v150;
  }
  else
  {
    v151 = xpc_null_create();
    v230 = v151;
    if (!v151)
    {
      v152 = xpc_null_create();
      v151 = 0;
      goto LABEL_288;
    }
  }
  if (MEMORY[0x1C3B8CD78](v151) == v7)
  {
    xpc_retain(v151);
    goto LABEL_289;
  }
  v152 = xpc_null_create();
LABEL_288:
  v230 = v152;
LABEL_289:
  xpc_release(v151);
  v153 = xpc_int64_create(1500);
  if (!v153)
    v153 = xpc_null_create();
  xpc_dictionary_set_value(v149, (const char *)*MEMORY[0x1E0CF1008], v153);
  v154 = xpc_null_create();
  xpc_release(v153);
  xpc_release(v154);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v155)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v156)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v157))
  {
    v158 = (const __CFString ***)MEMORY[0x1E0D01A70];
    v159 = (const void *)*MEMORY[0x1E0D01A70];
    v160 = strlen((const char *)*MEMORY[0x1E0D01A70]);
    if (v160 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v161 = (void *)v160;
    if (v160 >= 0x17)
    {
      v163 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v160 | 7) != 0x17)
        v163 = v160 | 7;
      v164 = v163 + 1;
      v162 = operator new(v163 + 1);
      v228[1] = v161;
      v229 = v164 | 0x8000000000000000;
      v228[0] = v162;
    }
    else
    {
      HIBYTE(v229) = v160;
      v162 = v228;
      if (!v160)
      {
LABEL_302:
        *((_BYTE *)v161 + (_QWORD)v162) = 0;
        v165.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v165.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&block.st_blksize = v165;
        *(timespec *)block.st_qspare = v165;
        block.st_birthtimespec = v165;
        *(timespec *)&block.st_size = v165;
        block.st_mtimespec = v165;
        block.st_ctimespec = v165;
        *(timespec *)&block.st_uid = v165;
        block.st_atimespec = v165;
        *(timespec *)&block.st_dev = v165;
        if (v229 >= 0)
          v166 = v228;
        else
          v166 = (void **)v228[0];
        v167 = stat((const char *)v166, &block);
        v169 = v167;
        if (SHIBYTE(v229) < 0)
        {
          operator delete(v228[0]);
          if (v169)
            goto LABEL_307;
        }
        else if (v167)
        {
LABEL_307:
          *(_QWORD *)&v170 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v170 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&block.st_dev = v170;
          *(_OWORD *)&block.st_uid = v170;
          v227 = v149;
          if (v149)
            xpc_retain(v149);
          else
            v227 = xpc_null_create();
          abm::HelperClient::perform();
          xpc_release(v227);
          v227 = 0;
          if (!block.st_dev)
            ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E0CFC110], *v158, (uint64_t)v113, v171);
          if (*((char *)&block.st_rdev + 7) < 0)
            operator delete((void *)block.st_ino);
          goto LABEL_318;
        }
        ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E0CFC110], *v158, (uint64_t)v113, v168);
        goto LABEL_318;
      }
    }
    memmove(v162, v159, (size_t)v161);
    goto LABEL_302;
  }
  v172 = a1[11];
  if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(block.st_dev) = 0;
    _os_log_impl(&dword_1BF566000, v172, OS_LOG_TYPE_DEFAULT, "#I mobile BasebandServices path is disabled as baseband log is off", (uint8_t *)&block, 2u);
  }
LABEL_318:
  v173 = (std::__shared_weak_count *)a1[16];
  *(_QWORD *)&block.st_dev = a1[15];
  if (!v173 || (block.st_ino = (__darwin_ino64_t)std::__shared_weak_count::lock(v173)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v174 = (const void *)*MEMORY[0x1E0CFB9A8];
  v175 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v175 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v176 = (void *)v175;
  if (v175 >= 0x17)
  {
    v179 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v175 | 7) != 0x17)
      v179 = v175 | 7;
    v180 = v179 + 1;
    v177 = operator new(v179 + 1);
    v225[1] = v176;
    v226 = v180 | 0x8000000000000000;
    v225[0] = v177;
LABEL_328:
    memmove(v177, v174, (size_t)v176);
    *((_BYTE *)v176 + (_QWORD)v177) = 0;
    v178 = cf;
    if (!cf)
      goto LABEL_331;
    goto LABEL_329;
  }
  HIBYTE(v226) = v175;
  v177 = v225;
  if (v175)
    goto LABEL_328;
  LOBYTE(v225[0]) = 0;
  v178 = cf;
  if (!cf)
    goto LABEL_331;
LABEL_329:
  v181 = CFGetTypeID(v178);
  if (v181 == CFDictionaryGetTypeID())
  {
    v224 = v178;
    CFRetain(v178);
    goto LABEL_332;
  }
LABEL_331:
  v224 = 0;
LABEL_332:
  aBlock[0] = v142;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_40;
  aBlock[4] = a1;
  v216 = *(_OWORD *)&block.st_dev;
  if (block.st_ino)
  {
    v182 = (unint64_t *)(block.st_ino + 8);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v217 = v233;
  v218 = (std::__shared_weak_count *)v234;
  if (v234)
  {
    v184 = (unint64_t *)(v234 + 8);
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  v219 = v149;
  if (!v149)
  {
    v219 = xpc_null_create();
    v220 = v178;
    if (!v178)
      goto LABEL_343;
    goto LABEL_342;
  }
  xpc_retain(v149);
  v178 = cf;
  v220 = cf;
  if (cf)
LABEL_342:
    CFRetain(v178);
LABEL_343:
  v186 = *v201;
  if (*v201)
    v186 = _Block_copy(v186);
  v221 = v186;
  if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v242[0].__r_.__value_.__l.__data_, v242[0].__r_.__value_.__l.__size_);
  else
    v222 = v242[0];
  v223 = _Block_copy(aBlock);
  Service::broadcastEvent((uint64_t)a1, (uint64_t)v225, &v224, (const void **)&v223);
  if (v223)
    _Block_release(v223);
  if (v224)
    CFRelease(v224);
  if ((SHIBYTE(v226) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_354;
LABEL_357:
    operator delete(v222.__r_.__value_.__l.__data_);
    v187 = v221;
    if (!v221)
      goto LABEL_359;
    goto LABEL_358;
  }
  operator delete(v225[0]);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_357;
LABEL_354:
  v187 = v221;
  if (v221)
LABEL_358:
    _Block_release(v187);
LABEL_359:
  if (v220)
    CFRelease(v220);
  xpc_release(v219);
  v219 = 0;
  v188 = v218;
  if (v218)
  {
    v189 = (unint64_t *)&v218->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  st_ino = (std::__shared_weak_count *)block.st_ino;
  if (block.st_ino)
  {
    v195 = (unint64_t *)(block.st_ino + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
  }
  xpc_release(v230);
  xpc_release(v149);
  v197 = (std::__shared_weak_count *)v234;
  if (!v234)
    goto LABEL_380;
  v198 = (unint64_t *)(v234 + 8);
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 - 1, v198));
  if (v199)
  {
LABEL_380:
    v200 = cf;
    if (!cf)
      goto LABEL_382;
    goto LABEL_381;
  }
  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
  std::__shared_weak_count::__release_weak(v197);
  v200 = cf;
  if (cf)
LABEL_381:
    CFRelease(v200);
LABEL_382:
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v246.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_384:
      if ((SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_392;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_385:
    if ((SHIBYTE(v242[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_386;
    goto LABEL_393;
  }
LABEL_392:
  operator delete(v242[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v242[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_386:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_387;
    goto LABEL_394;
  }
LABEL_393:
  operator delete(v242[1].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
  {
LABEL_387:
    if ((SHIBYTE(v244[2]) & 0x80000000) == 0)
      goto LABEL_388;
    goto LABEL_395;
  }
LABEL_394:
  operator delete(v243[0]);
  if ((SHIBYTE(v244[2]) & 0x80000000) == 0)
  {
LABEL_388:
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
      return;
LABEL_396:
    operator delete((void *)__sz[0]);
    return;
  }
LABEL_395:
  operator delete(v244[0]);
  if (SHIBYTE(__sz[2]) < 0)
    goto LABEL_396;
}

void sub_1BF5DCA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,void *aBlock,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,xpc_object_t a43,void *a44,uint64_t a45,uint64_t a46,xpc_object_t object,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  xpc_object_t a64;
  char a69;
  xpc_object_t a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;

  if (a62 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a70);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    _Block_release(v2);
}

void TraceManager::submitTraceMetric_sync(uint64_t a1, const char *a2, const char *a3)
{
  NSObject *v3;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v31;
  unint64_t v32;

  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 152))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of trace stats", buf, 2u);
    }
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = MEMORY[0x1E0C812F8];
    if (v7 || (v7 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v7) == v8)
      {
        xpc_retain(v7);
        v9 = v7;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v7 = 0;
    }
    xpc_release(v7);
    v10 = xpc_dictionary_create(0, 0, 0);
    if (v10 || (v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v10) == v8)
      {
        xpc_retain(v10);
        v11 = v10;
      }
      else
      {
        v11 = xpc_null_create();
      }
    }
    else
    {
      v11 = xpc_null_create();
      v10 = 0;
    }
    xpc_release(v10);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v12 = xpc_string_create(a2);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB760], v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a3[23] < 0)
      a3 = *(const char **)a3;
    v14 = xpc_string_create(a3);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB9C8], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB020], v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    v18 = xpc_int64_create(524539);
    if (!v18)
      v18 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB0E8], v18);
    v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (v11)
    {
      xpc_retain(v11);
      v20 = v11;
    }
    else
    {
      v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB018], v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    v22 = (const void *)*MEMORY[0x1E0CFB5E0];
    v23 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
    if (v23 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v24 = v23;
    if (v23 >= 0x17)
    {
      v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v26 = v23 | 7;
      v27 = v26 + 1;
      v25 = operator new(v26 + 1);
      v31 = v24;
      v32 = v27 | 0x8000000000000000;
      *(_QWORD *)buf = v25;
    }
    else
    {
      HIBYTE(v32) = v23;
      v25 = buf;
      if (!v23)
      {
        buf[0] = 0;
        object = v9;
        if (v9)
        {
LABEL_37:
          xpc_retain(v9);
LABEL_43:
          v28 = 0;
          Service::runCommand(a1, (uint64_t)buf, &object, &v28);
          xpc_release(object);
          object = 0;
          if (SHIBYTE(v32) < 0)
            operator delete(*(void **)buf);
          xpc_release(v11);
          xpc_release(v9);
          return;
        }
LABEL_42:
        object = xpc_null_create();
        goto LABEL_43;
      }
    }
    memmove(v25, v22, v24);
    *((_BYTE *)v25 + v24) = 0;
    object = v9;
    if (v9)
      goto LABEL_37;
    goto LABEL_42;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Baseband manager is not ready yet", buf, 2u);
  }
}

void sub_1BF5DD4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  const void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::string *v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  std::string *v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  std::string::size_type v27;
  std::string::size_type v28;
  xpc_object_t object;
  _QWORD *v30;
  const void *v31;
  void *aBlock;
  std::string v33;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(void **)(a1 + 72);
  object = v6;
  if (!v6)
  {
    object = xpc_null_create();
    v7 = *(const void **)(a1 + 80);
    v30 = v2;
    v31 = v7;
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v6);
  v7 = *(const void **)(a1 + 80);
  v30 = v2;
  v31 = v7;
  if (v7)
LABEL_8:
    CFRetain(v7);
LABEL_9:
  v8 = *(void **)(a1 + 88);
  if (v8)
    v8 = _Block_copy(v8);
  aBlock = v8;
  if (*(char *)(a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  else
    v33 = *(std::string *)(a1 + 96);
  v9 = (std::__shared_weak_count *)v2[16];
  if (!v9 || (v10 = v2[15], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (std::string *)operator new(0x48uLL);
  v14 = v28;
  v13->__r_.__value_.__r.__words[0] = v27;
  v13->__r_.__value_.__l.__size_ = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = object;
  v13->__r_.__value_.__r.__words[2] = (std::string::size_type)object;
  if (!v17)
  {
    v13->__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    v18 = v31;
    v13[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  xpc_retain(v17);
  v18 = v31;
  v13[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  v13[1].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  if (v18)
LABEL_23:
    CFRetain(v18);
LABEL_24:
  v19 = aBlock;
  if (aBlock)
    v19 = _Block_copy(aBlock);
  v13[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
  v20 = v13 + 2;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    v13[2].__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
  }
  v21 = v2[17];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v13;
  v24[1] = v10;
  v24[2] = v12;
  dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev((uint64_t)&v27);
}

void sub_1BF5DD778(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, void *aBlock)
{
  uint64_t v15;
  const void *v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v17 = *(const void **)(v15 + 40);
  if (v17)
    _Block_release(v17);
  v18 = *(const void **)(v15 + 32);
  if (v18)
    CFRelease(v18);
  xpc_release(*(xpc_object_t *)(v15 + 16));
  *(_QWORD *)(v15 + 16) = 0;
  v19 = *(std::__shared_weak_count **)(v15 + 8);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(const void **)(a1 + 40);
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  const void *v11;
  void *v12;
  std::string *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(void **)(a2 + 72);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  if (!v10)
  {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v11 = *(const void **)(a2 + 80);
    a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (!v11)
      goto LABEL_12;
    goto LABEL_11;
  }
  xpc_retain(v10);
  v11 = *(const void **)(a2 + 80);
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  if (v11)
LABEL_11:
    CFRetain(v11);
LABEL_12:
  v12 = *(void **)(a2 + 88);
  if (v12)
    v12 = _Block_copy(v12);
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
  v13 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
}

void sub_1BF5DDA0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  xpc_object_t *v4;
  const void **v5;
  const void *v7;

  v7 = *(const void **)(v3 + 88);
  if (v7)
    _Block_release(v7);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v5);
  xpc::dict::~dict(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    v2 = *(const void **)(a1 + 88);
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 88);
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = *(const void **)(a1 + 80);
  if (v3)
    CFRelease(v3);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v4)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v7)
      return;
  }
  else
  {
LABEL_12:
    v7 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v7)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  std::string __p;
  void *aBlock;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;
  char v41;
  xpc_object_t v42;

  v2 = *(_QWORD **)(a1 + 32);
  __p.__r_.__value_.__r.__words[0] = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v5 = v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    if (v4 && *(_QWORD *)(a1 + 40))
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (v7)
      {
        v34 = v2;
        if ((*(char *)(a1 + 87) & 0x80000000) == 0)
          goto LABEL_8;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        v34 = v2;
        if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        {
LABEL_8:
          __p = *(std::string *)(a1 + 64);
          v8 = *(void **)(a1 + 56);
          if (!v8)
          {
LABEL_19:
            aBlock = v8;
            v37 = *(_DWORD *)(a1 + 112);
            v14 = *(std::__shared_weak_count **)(a1 + 48);
            v38 = *(_QWORD *)(a1 + 40);
            v39 = v14;
            if (v14)
            {
              p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
              do
                v16 = __ldxr(p_shared_weak_owners);
              while (__stxr(v16 + 1, p_shared_weak_owners));
            }
            if (*(char *)(a1 + 111) < 0)
              std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
            else
              v40 = *(std::string *)(a1 + 88);
            v41 = *(_BYTE *)(a1 + 116);
            v17 = (std::__shared_weak_count *)v2[16];
            if (!v17 || (v18 = v2[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = (char *)operator new(0x60uLL);
            v22 = v21;
            *(_QWORD *)v21 = v34;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external((std::string *)(v21 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              *(std::string *)(v21 + 8) = __p;
            v23 = aBlock;
            if (aBlock)
              v23 = _Block_copy(aBlock);
            *((_QWORD *)v22 + 4) = v23;
            *((_DWORD *)v22 + 10) = v37;
            v24 = v39;
            *((_QWORD *)v22 + 6) = v38;
            *((_QWORD *)v22 + 7) = v24;
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_weak_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = (std::string *)(v22 + 64);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v27, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
              *((_QWORD *)v22 + 10) = *((_QWORD *)&v40.__r_.__value_.__l + 2);
            }
            v22[88] = v41;
            v28 = v2[17];
            v29 = (unint64_t *)&v20->__shared_owners_;
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
            v31 = operator new(0x18uLL);
            *v31 = v22;
            v31[1] = v18;
            v31[2] = v20;
            dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
            do
              v32 = __ldaxr(v29);
            while (__stlxr(v32 - 1, v29));
            if (v32)
            {
              if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_44;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_44:
                v33 = v39;
                if (!v39)
                {
LABEL_46:
                  if (aBlock)
                    _Block_release(aBlock);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  return;
                }
LABEL_45:
                std::__shared_weak_count::__release_weak(v33);
                goto LABEL_46;
              }
            }
            operator delete(v40.__r_.__value_.__l.__data_);
            v33 = v39;
            if (!v39)
              goto LABEL_46;
            goto LABEL_45;
          }
LABEL_18:
          v8 = _Block_copy(v8);
          goto LABEL_19;
        }
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      v8 = *(void **)(a1 + 56);
      if (!v8)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    v5 = 0;
  }
  v9 = xpc_null_create();
  v10 = *(_QWORD *)(a1 + 56);
  v42 = v9;
  v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v42);
  xpc_release(v42);
  xpc_release(v11);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF5DDE94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *aBlock, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v23;
  const void *v24;

  v23 = *(std::__shared_weak_count **)(v20 + 56);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  v24 = *(const void **)(v20 + 32);
  if (v24)
    _Block_release(v24);
  if (*(char *)(v20 + 31) < 0)
  {
    operator delete(*v21);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  *(_QWORD *)(a1 + 56) = v7;
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v8;
  }
  v9 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF5DE01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  const void *v4;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  v4 = *(const void **)(v1 + 56);
  if (v4)
    _Block_release(v4);
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    v2 = *(const void **)(a1 + 56);
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(const void **)(a1 + 56);
  if (v2)
LABEL_7:
    _Block_release(v2);
LABEL_8:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void TraceManager::start(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v3;
  v8[1] = a1;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v72 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v72) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v8 = v73;
  v73 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = v70;
    if (!v70)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = v70;
  if (v70)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v68[1] = v26;
    v69 = v29 | 0x8000000000000000;
    v68[0] = v27;
  }
  else
  {
    HIBYTE(v69) = v25;
    v27 = v68;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_60;
  aBlock[4] = this;
  aBlock[5] = v17;
  v65 = v19;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = this[17];
  if (v33)
    dispatch_retain((dispatch_object_t)this[17]);
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9A8];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = v30;
  v58[1] = 1174405120;
  v58[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_61;
  v58[3] = &__block_descriptor_tmp_64;
  v58[4] = this;
  v58[5] = v17;
  v59 = v19;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = this[17];
  if (v42)
    dispatch_retain((dispatch_object_t)this[17]);
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFB9B0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
  }
  else
  {
    HIBYTE(v57) = v44;
    v46 = v56;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = v30;
  v52[1] = 1174405120;
  v52[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_65;
  v52[3] = &__block_descriptor_tmp_67;
  v52[4] = this;
  v52[5] = v17;
  v53 = v19;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = this[17];
  if (v51)
    dispatch_retain((dispatch_object_t)this[17]);
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF5DE764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  const void *v9;
  const char *v10;
  void **v11;
  _BYTE *v12;
  size_t v13;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  size_t v17;
  _BYTE *v18;
  const char *v19;
  _BYTE *v20;
  const void *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  const std::string::value_type *v39;
  size_t v40;
  std::string::size_type v41;
  std::string *p_buf;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  std::string::size_type v49;
  xpc_object_t v50;
  xpc_object_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::string::size_type v59;
  xpc_object_t v60;
  xpc_object_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  std::string::size_type v66;
  void *v67;
  int v68;
  size_t v69;
  void **v70;
  const void *v71;
  void **v72;
  NSObject *v73;
  void **v74;
  xpc_object_t v75;
  uint64_t v76;
  xpc_object_t v77;
  const void *v78;
  size_t v79;
  void *v80;
  void **v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  NSObject *v89;
  const void *v90;
  size_t v91;
  void *v92;
  void **v93;
  xpc_object_t v94;
  xpc_object_t v95;
  void *v96;
  uint64_t v97;
  NSObject *size;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const void *v108;
  size_t v109;
  void *v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  const void *v115;
  size_t v116;
  void *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  xpc_object_t v122;
  xpc_object_t v123;
  const void *v124;
  size_t v125;
  void *v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  const void *v132;
  size_t v133;
  void *v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  NSObject *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  const void *v151;
  size_t v152;
  void *v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  const void *v158;
  size_t v159;
  void *v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  NSObject *v165;
  xpc_object_t v166;
  uint64_t v167;
  const char *v168;
  const void *v169;
  size_t v170;
  NSObject *v171;
  void *p_p;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  xpc_object_t v176;
  xpc_object_t v177;
  NSObject *v178;
  void *v179;
  uint64_t v180;
  void *v181;
  xpc_object_t v182;
  uint64_t v183;
  size_t v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  xpc_object_t v197;
  xpc_object_t v198;
  std::string *v199;
  xpc_object_t v200;
  xpc_object_t v201;
  std::string *v202;
  xpc_object_t v203;
  xpc_object_t v204;
  const char *v205;
  xpc_object_t v206;
  xpc_object_t v207;
  xpc_object_t v208;
  xpc_object_t v209;
  xpc_object_t v210;
  xpc_object_t v211;
  const char *v212;
  char Bool;
  xpc_object_t v214;
  xpc_object_t v215;
  const char *v216;
  char v217;
  xpc_object_t v218;
  xpc_object_t v219;
  const char *v220;
  char v221;
  xpc_object_t v222;
  xpc_object_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  unint64_t *p_shared_weak_owners;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  const void *v232;
  size_t v233;
  NSObject *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  abm::client::Event *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  void *v243;
  size_t v244;
  void *v245;
  void **v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  void **v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *p_shared_owners;
  unint64_t v256;
  char *__s;
  int Int;
  void *v259[2];
  NSObject *v260;
  xpc_object_t v261;
  _QWORD v262[5];
  _QWORD v263[2];
  void *v264[2];
  NSObject *v265;
  xpc_object_t object;
  _QWORD aBlock[5];
  _QWORD v268[2];
  _QWORD v269[2];
  void *v270[2];
  NSObject *v271;
  xpc_object_t v272;
  _QWORD v273[5];
  _QWORD v274[2];
  void *v275[2];
  NSObject *v276;
  xpc_object_t v277;
  _QWORD v278[6];
  std::__shared_weak_count *v279;
  abm::client::Event *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  NSObject *v283;
  xpc_object_t v284;
  _QWORD v285[6];
  std::__shared_weak_count *v286;
  abm::client::Event *v287;
  std::__shared_weak_count *v288;
  std::string v289;
  void *v290[2];
  unint64_t v291;
  void *v292[2];
  NSObject *v293;
  xpc_object_t v294;
  _QWORD v295[5];
  _QWORD v296[2];
  void *v297[2];
  NSObject *v298;
  xpc_object_t v299;
  _QWORD v300[6];
  std::__shared_weak_count *v301;
  abm::client::Event *v302;
  std::__shared_weak_count *v303;
  std::string v304;
  void *v305[2];
  unint64_t v306;
  _QWORD v307[6];
  std::__shared_weak_count *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  const void *v311;
  xpc_object_t v312;
  void *__p;
  dispatch_object_t v314;
  unint64_t v315;
  void *v316[2];
  NSObject *v317;
  xpc_object_t v318;
  void *__dst[3];
  std::string v320;
  void *v321[3];
  _BYTE v322[24];
  _QWORD v323[2];
  unint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  std::string buf;
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v326 = v6;
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  v325 = v8;
  if (!v8)
  {
LABEL_476:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v256 = __ldaxr(p_shared_owners);
    while (__stlxr(v256 - 1, p_shared_owners));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v324 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*(abm::client::Event **)a2);
  v9 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v323[0] = 0xAAAAAAAAAAAAAAAALL;
    v323[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v323, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    memset(v322, 170, sizeof(v322));
    v10 = (const char *)*MEMORY[0x1E0CFB530];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E0CFB530]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&buf);
    v11 = (void **)(v5 + 192);
    if ((_BYTE *)(v5 + 192) != v322)
    {
      if (*(char *)(v5 + 215) < 0)
      {
        if (v322[23] >= 0)
          v12 = v322;
        else
          v12 = *(_BYTE **)v322;
        if (v322[23] >= 0)
          v13 = v322[23];
        else
          v13 = *(_QWORD *)&v322[8];
        std::string::__assign_no_alias<false>(v11, v12, v13);
      }
      else if ((v322[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v11, *(void **)v322, *(size_t *)&v322[8]);
      }
      else
      {
        *(_OWORD *)v11 = *(_OWORD *)v322;
        *(_QWORD *)(v5 + 208) = *(_QWORD *)&v322[16];
      }
    }
    v14 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v322;
      if (v322[23] < 0)
        v15 = *(_BYTE **)v322;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
    }
    v16 = v322[23];
    if (v322[23] >= 0)
      v17 = v322[23];
    else
      v17 = *(_QWORD *)&v322[8];
    if (v17 != strlen((const char *)*MEMORY[0x1E0CFBB68])
      || (v322[23] >= 0 ? (v18 = v322) : (v18 = *(_BYTE **)v322), memcmp(v18, (const void *)*MEMORY[0x1E0CFBB68], v17)))
    {
      v19 = (const char *)*MEMORY[0x1E0CFB7F0];
      if (v17 == strlen((const char *)*MEMORY[0x1E0CFB7F0]))
      {
        v20 = v16 >= 0 ? v322 : *(_BYTE **)v322;
        if (!memcmp(v20, v19, v17))
        {
          memset(&buf, 170, 16);
          v285[0] = MEMORY[0x1E0C809B0];
          v285[1] = 1174405120;
          v285[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_49;
          v285[3] = &__block_descriptor_tmp_50;
          v285[4] = v5;
          v285[5] = v8;
          v286 = v7;
          v43 = (unint64_t *)&v7->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          v45 = *(std::__shared_weak_count **)(a2 + 8);
          v287 = *(abm::client::Event **)a2;
          v288 = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = _Block_copy(v285);
          v49 = *(_QWORD *)(v5 + 136);
          if (v49)
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          buf.__r_.__value_.__l.__size_ = v49;
          v50 = xpc_dictionary_create(0, 0, 0);
          if (v50 || (v50 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v50) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v50);
              v51 = v50;
            }
            else
            {
              v51 = xpc_null_create();
            }
          }
          else
          {
            v51 = xpc_null_create();
            v50 = 0;
          }
          xpc_release(v50);
          v94 = xpc_string_create(v19);
          if (!v94)
            v94 = xpc_null_create();
          xpc_dictionary_set_value(v51, v10, v94);
          v95 = xpc_null_create();
          xpc_release(v94);
          xpc_release(v95);
          v284 = v51;
          if (v51)
            xpc_retain(v51);
          else
            v284 = xpc_null_create();
          v283 = 0;
          if (buf.__r_.__value_.__r.__words[0])
            v96 = _Block_copy(buf.__r_.__value_.__l.__data_);
          else
            v96 = 0;
          v97 = *MEMORY[0x1E0CF10F0];
          size = buf.__r_.__value_.__l.__size_;
          v282[0] = v96;
          v282[1] = (void *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
            dispatch_retain((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v97, 0x1388u, 0, &v284, &v283, v282);
          if (size)
            dispatch_release(size);
          if (v96)
            _Block_release(v96);
          xpc_release(v284);
          v284 = 0;
          xpc_release(v51);
          if (buf.__r_.__value_.__l.__size_)
            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          if (buf.__r_.__value_.__r.__words[0])
            _Block_release(buf.__r_.__value_.__l.__data_);
          v99 = v288;
          if (v288)
          {
            v100 = (unint64_t *)&v288->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          v102 = v286;
          if (!v286)
            goto LABEL_470;
          v103 = (unint64_t *)&v286->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
LABEL_268:
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
          goto LABEL_470;
        }
      }
      v21 = (const void *)*MEMORY[0x1E0CFB980];
      if (v17 != strlen((const char *)*MEMORY[0x1E0CFB980])
        || (v16 >= 0 ? (v22 = v322) : (v22 = *(_BYTE **)v322), memcmp(v22, v21, v17)))
      {
        if (v17 == strlen((const char *)*MEMORY[0x1E0CFB588]))
        {
          v23 = v16 >= 0 ? v322 : *(_BYTE **)v322;
          if (!memcmp(v23, (const void *)*MEMORY[0x1E0CFB588], v17))
          {
            v321[0] = (void *)0xAAAAAAAAAAAAAAAALL;
            v321[1] = (void *)0xAAAAAAAAAAAAAAAALL;
            v24 = MEMORY[0x1E0C809B0];
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1174405120;
            aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55;
            aBlock[3] = &__block_descriptor_tmp_56;
            aBlock[4] = v5;
            v268[0] = v8;
            v268[1] = v7;
            v25 = (unint64_t *)&v7->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
            v27 = *(_QWORD *)(a2 + 8);
            v269[0] = *(_QWORD *)a2;
            v269[1] = v27;
            if (v27)
            {
              v28 = (unint64_t *)(v27 + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
            v30 = _Block_copy(aBlock);
            v31 = *(void **)(v5 + 136);
            if (v31)
              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
            v321[0] = v30;
            v321[1] = v31;
            LODWORD(v320.__r_.__value_.__l.__data_) = -1431655766;
            v32 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E0CFB028]);
            prop::bbtrace::get<diag::config::Mode>(v32, (int *)&v320);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            LODWORD(__dst[0]) = -1431655766;
            v33 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E0CFB2D8]);
            prop::bbtrace::get<abm::traceOwnership>(v33, (int *)__dst);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (LODWORD(v320.__r_.__value_.__l.__data_) == 4 && LODWORD(__dst[0]) == 1)
            {
              v34 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1BF566000, v34, OS_LOG_TYPE_DEFAULT, "#N Baseband is dead while Cellular Logging is running. Cellular Logging will be stopped.", (uint8_t *)&buf, 2u);
              }
              v265 = 0;
              object = xpc_null_create();
              v262[0] = v24;
              v262[1] = 1174405120;
              v262[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57;
              v262[3] = &__block_descriptor_tmp_58;
              v262[4] = v5;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v263, (uint64_t)v321);
              v35 = _Block_copy(v262);
              v36 = *MEMORY[0x1E0CF1170];
              v37 = *(void **)(v5 + 136);
              if (v37)
                dispatch_retain(*(dispatch_object_t *)(v5 + 136));
              v264[0] = v35;
              v264[1] = v37;
              TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v36, 0x1388u, 1, &object, &v265, v264);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v264);
              xpc_release(object);
              object = 0;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v263);
            }
            else
            {
              v75 = xpc_null_create();
              v76 = *MEMORY[0x1E0CF1090];
              v260 = 0;
              v261 = v75;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v259, (uint64_t)v321);
              TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v76, 0x7D0u, 0, &v261, &v260, v259);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v259);
              xpc_release(v261);
              v261 = 0;
            }
            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v321);
            std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v269);
            std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v268);
          }
        }
LABEL_470:
        if ((v322[23] & 0x80000000) != 0)
          operator delete(*(void **)v322);
        MEMORY[0x1C3B8B8B4](v323);
        v9 = (const void *)v324;
        goto LABEL_473;
      }
      TraceManager::updateBasebandFWInfo((TraceManager *)v5);
      v320.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      v320.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v52 = MEMORY[0x1E0C809B0];
      v278[0] = MEMORY[0x1E0C809B0];
      v278[1] = 1174405120;
      v278[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_51;
      v278[3] = &__block_descriptor_tmp_52_0;
      v278[4] = v5;
      v278[5] = v8;
      v279 = v7;
      v53 = (unint64_t *)&v7->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      v55 = *(std::__shared_weak_count **)(a2 + 8);
      v280 = *(abm::client::Event **)a2;
      v281 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = _Block_copy(v278);
      v59 = *(_QWORD *)(v5 + 136);
      if (v59)
        dispatch_retain(*(dispatch_object_t *)(v5 + 136));
      v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      v320.__r_.__value_.__l.__size_ = v59;
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      v60 = xpc_dictionary_create(0, 0, 0);
      v61 = v60;
      if (v60)
      {
        __dst[0] = v60;
      }
      else
      {
        v61 = xpc_null_create();
        __dst[0] = v61;
        if (!v61)
        {
          v77 = xpc_null_create();
          v61 = 0;
          goto LABEL_212;
        }
      }
      if (MEMORY[0x1C3B8CD78](v61) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v61);
        goto LABEL_213;
      }
      v77 = xpc_null_create();
LABEL_212:
      __dst[0] = v77;
LABEL_213:
      xpc_release(v61);
      v122 = xpc_string_create((const char *)v21);
      if (!v122)
        v122 = xpc_null_create();
      xpc_dictionary_set_value(__dst[0], v10, v122);
      v123 = xpc_null_create();
      xpc_release(v122);
      xpc_release(v123);
      v124 = (const void *)*MEMORY[0x1E0CFB028];
      v125 = strlen((const char *)*MEMORY[0x1E0CFB028]);
      if (v125 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v126 = (void *)v125;
      if (v125 >= 0x17)
      {
        v128 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v125 | 7) != 0x17)
          v128 = v125 | 7;
        v129 = v128 + 1;
        v127 = (void **)operator new(v128 + 1);
        v321[1] = v126;
        v321[2] = (void *)(v129 | 0x8000000000000000);
        v321[0] = v127;
      }
      else
      {
        HIBYTE(v321[2]) = v125;
        v127 = v321;
        if (!v125)
        {
LABEL_223:
          *((_BYTE *)v126 + (_QWORD)v127) = 0;
          memset(&buf, 0, sizeof(buf));
          v130 = -1431655766;
          v131 = -1431655766;
          if (prop::bbtrace::get((char *)v321, (uint64_t)&buf))
          {
            LODWORD(__p) = -1431655766;
            if (util::convert<int>(&buf, &__p, 0))
              v131 = (int)__p;
            else
              v131 = -1431655766;
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(v321[2]) < 0)
            operator delete(v321[0]);
          v132 = (const void *)*MEMORY[0x1E0CFB2D8];
          v133 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
          if (v133 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v134 = (void *)v133;
          if (v133 >= 0x17)
          {
            v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v133 | 7) != 0x17)
              v136 = v133 | 7;
            v137 = v136 + 1;
            v135 = (void **)operator new(v136 + 1);
            v321[1] = v134;
            v321[2] = (void *)(v137 | 0x8000000000000000);
            v321[0] = v135;
          }
          else
          {
            HIBYTE(v321[2]) = v133;
            v135 = v321;
            if (!v133)
            {
LABEL_239:
              *((_BYTE *)v134 + (_QWORD)v135) = 0;
              memset(&buf, 0, sizeof(buf));
              if (prop::bbtrace::get((char *)v321, (uint64_t)&buf))
              {
                LODWORD(__p) = -1431655766;
                if (util::convert<int>(&buf, &__p, 0))
                  v130 = (int)__p;
                else
                  v130 = -1431655766;
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v321[2]) & 0x80000000) == 0)
                {
LABEL_245:
                  v138 = (uint64_t *)MEMORY[0x1E0CF10A0];
                  if (v131 != 4)
                    goto LABEL_255;
LABEL_249:
                  if (v130 == 1)
                  {
                    v139 = *(NSObject **)(v5 + 88);
                    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1BF566000, v139, OS_LOG_TYPE_DEFAULT, "#N Resume notification will be sent to cellular logging after all traces are started.", (uint8_t *)&buf, 2u);
                    }
                    v276 = 0;
                    v277 = xpc_null_create();
                    v273[0] = v52;
                    v273[1] = 1174405120;
                    v273[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_53;
                    v273[3] = &__block_descriptor_tmp_54;
                    v273[4] = v5;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v274, (uint64_t)&v320);
                    v140 = _Block_copy(v273);
                    v141 = *v138;
                    v142 = *(void **)(v5 + 136);
                    if (v142)
                      dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                    v275[0] = v140;
                    v275[1] = v142;
                    TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v141, 0x1388u, 0, &v277, &v276, v275);
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v275);
                    xpc_release(v277);
                    v277 = 0;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v274);
                    goto LABEL_256;
                  }
LABEL_255:
                  v143 = *v138;
                  xpc::dict::dict(&v272, __dst);
                  v271 = 0;
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v270, (uint64_t)&v320);
                  TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v143, 0x1388u, 0, &v272, &v271, v270);
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v270);
                  xpc_release(v272);
                  v272 = 0;
LABEL_256:
                  TraceManager::setupDumpLogsIndication_sync((NSObject **)v5);
                  xpc_release(__dst[0]);
                  if (v320.__r_.__value_.__l.__size_)
                    dispatch_release((dispatch_object_t)v320.__r_.__value_.__l.__size_);
                  if (v320.__r_.__value_.__r.__words[0])
                    _Block_release(v320.__r_.__value_.__l.__data_);
                  v144 = v281;
                  if (v281)
                  {
                    v145 = (unint64_t *)&v281->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  v102 = v279;
                  if (!v279)
                    goto LABEL_470;
                  v147 = (unint64_t *)&v279->__shared_owners_;
                  do
                    v104 = __ldaxr(v147);
                  while (__stlxr(v104 - 1, v147));
                  goto LABEL_268;
                }
              }
              else if ((SHIBYTE(v321[2]) & 0x80000000) == 0)
              {
                goto LABEL_245;
              }
              operator delete(v321[0]);
              v138 = (uint64_t *)MEMORY[0x1E0CF10A0];
              if (v131 != 4)
                goto LABEL_255;
              goto LABEL_249;
            }
          }
          memmove(v135, v132, (size_t)v134);
          goto LABEL_239;
        }
      }
      memmove(v127, v124, (size_t)v126);
      goto LABEL_223;
    }
    memset(v321, 170, sizeof(v321));
    v38 = (const char *)*MEMORY[0x1E0CFB538];
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v320, v38);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&v320);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    memset(&v320, 170, sizeof(v320));
    v39 = (const std::string::value_type *)*MEMORY[0x1E0CFB058];
    v40 = strlen((const char *)*MEMORY[0x1E0CFB058]);
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v41 = v40;
    if (v40 >= 0x17)
    {
      v62 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v62 = v40 | 7;
      v63 = v62 + 1;
      p_buf = (std::string *)operator new(v62 + 1);
      buf.__r_.__value_.__l.__size_ = v41;
      buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v40;
      p_buf = &buf;
      if (!v40)
      {
LABEL_92:
        v64 = (const char *)*MEMORY[0x1E0CFB788];
        p_buf->__r_.__value_.__s.__data_[v41] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__dst, v64);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](__dst);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v65 = (const char *)*MEMORY[0x1E0CFB010];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E0CFB010]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v323, (const __CFString *)buf.__r_.__value_.__l.__data_);
        MEMORY[0x1C3B8B878](&buf);
        v66 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
        if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = v320.__r_.__value_.__l.__size_;
        if (!v66)
          std::string::__assign_external(&v320, v39);
        v67 = (void *)*MEMORY[0x1E0CFB590];
        v68 = SHIBYTE(v321[2]);
        if (SHIBYTE(v321[2]) >= 0)
          v69 = HIBYTE(v321[2]);
        else
          v69 = (size_t)v321[1];
        if (v69 != strlen((const char *)*MEMORY[0x1E0CFB590])
          || (SHIBYTE(v321[2]) >= 0 ? (v70 = v321) : (v70 = (void **)v321[0]), memcmp(v70, v67, v69)))
        {
          v71 = (const void *)*MEMORY[0x1E0CFB598];
          if (v69 != strlen((const char *)*MEMORY[0x1E0CFB598])
            || (v68 >= 0 ? (v72 = v321) : (v72 = (void **)v321[0]), memcmp(v72, v71, v69)))
          {
            v73 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              v74 = (void **)v321[0];
              if (v68 >= 0)
                v74 = v321;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
              _os_log_impl(&dword_1BF566000, v73, OS_LOG_TYPE_DEFAULT, "#I Invalid reset type [%s]", (uint8_t *)&buf, 0xCu);
            }
LABEL_466:
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__r_.__value_.__l.__data_);
            if (SHIBYTE(v321[2]) < 0)
              operator delete(v321[0]);
            goto LABEL_470;
          }
          v314 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          __p = (void *)0xAAAAAAAAAAAAAAAALL;
          v300[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_45;
          v300[3] = &__block_descriptor_tmp_46;
          v300[4] = v5;
          v300[5] = v325;
          v82 = MEMORY[0x1E0C809B0];
          v300[0] = MEMORY[0x1E0C809B0];
          v300[1] = 1174405120;
          v301 = v326;
          if (v326)
          {
            v83 = (unint64_t *)&v326->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v85 = *(std::__shared_weak_count **)(a2 + 8);
          v302 = *(abm::client::Event **)a2;
          v303 = v85;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = _Block_copy(v300);
          v89 = *(NSObject **)(v5 + 136);
          if (v89)
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          __p = v88;
          v314 = v89;
          v90 = (const void *)*MEMORY[0x1E0CFB028];
          v91 = strlen((const char *)*MEMORY[0x1E0CFB028]);
          if (v91 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v92 = (void *)v91;
          if (v91 >= 0x17)
          {
            v148 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v91 | 7) != 0x17)
              v148 = v91 | 7;
            v149 = v148 + 1;
            v93 = (void **)operator new(v148 + 1);
            __dst[2] = (void *)(v149 | 0x8000000000000000);
            __dst[0] = v93;
            __dst[1] = v92;
          }
          else
          {
            HIBYTE(__dst[2]) = v91;
            v93 = __dst;
            if (!v91)
            {
LABEL_274:
              *((_BYTE *)v92 + (_QWORD)v93) = 0;
              memset(&buf, 0, sizeof(buf));
              v150 = -1431655766;
              if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
              {
                LODWORD(v327) = -1431655766;
                if (util::convert<int>(&buf, &v327, 0))
                  v150 = v327;
                else
                  v150 = -1431655766;
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(__dst[2]) < 0)
                operator delete(__dst[0]);
              v151 = (const void *)*MEMORY[0x1E0CFB2D8];
              v152 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
              if (v152 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v153 = (void *)v152;
              if (v152 >= 0x17)
              {
                v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v152 | 7) != 0x17)
                  v155 = v152 | 7;
                v156 = v155 + 1;
                v154 = (void **)operator new(v155 + 1);
                __dst[2] = (void *)(v156 | 0x8000000000000000);
                __dst[0] = v154;
                __dst[1] = v153;
              }
              else
              {
                HIBYTE(__dst[2]) = v152;
                v154 = __dst;
                if (!v152)
                {
LABEL_290:
                  *((_BYTE *)v153 + (_QWORD)v154) = 0;
                  memset(&buf, 0, sizeof(buf));
                  v157 = -1431655766;
                  if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                  {
                    LODWORD(v327) = -1431655766;
                    if (util::convert<int>(&buf, &v327, 0))
                      v157 = v327;
                    else
                      v157 = -1431655766;
                  }
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__dst[2]) < 0)
                    operator delete(__dst[0]);
                  v158 = (const void *)*MEMORY[0x1E0D01AE0];
                  v159 = strlen((const char *)*MEMORY[0x1E0D01AE0]);
                  if (v159 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v160 = (void *)v159;
                  if (v159 >= 0x17)
                  {
                    v162 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v159 | 7) != 0x17)
                      v162 = v159 | 7;
                    v163 = v162 + 1;
                    v161 = (void **)operator new(v162 + 1);
                    __dst[2] = (void *)(v163 | 0x8000000000000000);
                    __dst[0] = v161;
                    __dst[1] = v160;
                  }
                  else
                  {
                    HIBYTE(__dst[2]) = v159;
                    v161 = __dst;
                    if (!v159)
                    {
LABEL_306:
                      *((_BYTE *)v160 + (_QWORD)v161) = 0;
                      memset(&buf, 0, sizeof(buf));
                      if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                      {
                        LODWORD(v327) = -1431655766;
                        if (util::convert<int>(&buf, &v327, 0))
                          v164 = v327;
                        else
                          v164 = 0;
                      }
                      else
                      {
                        v164 = 0;
                      }
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
LABEL_313:
                          if (v150 != 4)
                            goto LABEL_349;
LABEL_343:
                          if (v157 == 1)
                          {
                            v178 = *(NSObject **)(v5 + 88);
                            if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                            {
                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                              _os_log_impl(&dword_1BF566000, v178, OS_LOG_TYPE_DEFAULT, "#N Soft reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                            }
                            v299 = xpc_null_create();
                            v298 = 0;
                            v295[0] = v82;
                            v295[1] = 1174405120;
                            v295[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_47;
                            v295[3] = &__block_descriptor_tmp_48;
                            v295[4] = v5;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v296, (uint64_t)&__p);
                            v179 = _Block_copy(v295);
                            v180 = *MEMORY[0x1E0CF1190];
                            v181 = *(void **)(v5 + 136);
                            if (v181)
                              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                            v297[0] = v179;
                            v297[1] = v181;
                            TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v180, 0x1388u, 1, &v299, &v298, v297);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v297);
                            xpc_release(v299);
                            v299 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v296);
LABEL_353:
                            v184 = strlen((const char *)v71);
                            if (v184 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v185 = (void *)v184;
                            if (v184 >= 0x17)
                            {
                              v187 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v184 | 7) != 0x17)
                                v187 = v184 | 7;
                              v188 = v187 + 1;
                              v186 = operator new(v187 + 1);
                              v291 = v188 | 0x8000000000000000;
                              v290[0] = v186;
                              v290[1] = v185;
                            }
                            else
                            {
                              HIBYTE(v291) = v184;
                              v186 = v290;
                              if (!v184)
                              {
LABEL_361:
                                *((_BYTE *)v185 + (_QWORD)v186) = 0;
                                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                                  std::string::__init_copy_ctor_external(&v289, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                                else
                                  v289 = v320;
                                TraceManager::submitTraceMetric_sync(v5, (const char *)v290, (const char *)&v289);
                                if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v289.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v291) & 0x80000000) == 0)
                                  {
LABEL_366:
                                    v189 = v314;
                                    if (!v314)
                                    {
LABEL_368:
                                      if (__p)
                                        _Block_release(__p);
                                      v190 = v303;
                                      if (v303)
                                      {
                                        v191 = (unint64_t *)&v303->__shared_owners_;
                                        do
                                          v192 = __ldaxr(v191);
                                        while (__stlxr(v192 - 1, v191));
                                        if (!v192)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                                          std::__shared_weak_count::__release_weak(v190);
                                        }
                                      }
                                      v193 = v301;
                                      if (v301)
                                      {
                                        v194 = (unint64_t *)&v301->__shared_owners_;
                                        do
                                          v195 = __ldaxr(v194);
                                        while (__stlxr(v195 - 1, v194));
                                        if (!v195)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                                          std::__shared_weak_count::__release_weak(v193);
                                        }
                                      }
                                      goto LABEL_466;
                                    }
LABEL_367:
                                    dispatch_release(v189);
                                    goto LABEL_368;
                                  }
                                }
                                else if ((SHIBYTE(v291) & 0x80000000) == 0)
                                {
                                  goto LABEL_366;
                                }
                                operator delete(v290[0]);
                                v189 = v314;
                                if (!v314)
                                  goto LABEL_368;
                                goto LABEL_367;
                              }
                            }
                            memmove(v186, v71, (size_t)v185);
                            goto LABEL_361;
                          }
LABEL_349:
                          if (v157 | v150 || v164 != 3)
                          {
                            v182 = xpc_null_create();
                            v183 = *MEMORY[0x1E0CF1090];
                            v294 = v182;
                            v293 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v292, (uint64_t)&__p);
                            TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)9, v183, 0x1388u, 0, &v294, &v293, v292);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v292);
                            xpc_release(v294);
                            v294 = 0;
                          }
                          else
                          {
                            notify_post("com.apple.cellularlogging.bbreset");
                          }
                          goto LABEL_353;
                        }
                      }
                      else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_313;
                      }
                      operator delete(__dst[0]);
                      if (v150 != 4)
                        goto LABEL_349;
                      goto LABEL_343;
                    }
                  }
                  memmove(v161, v158, (size_t)v160);
                  goto LABEL_306;
                }
              }
              memmove(v154, v151, (size_t)v153);
              goto LABEL_290;
            }
          }
          memmove(v93, v90, (size_t)v92);
          goto LABEL_274;
        }
        v78 = (const void *)*MEMORY[0x1E0CFB028];
        v79 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        if (v79 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v80 = (void *)v79;
        if (v79 >= 0x17)
        {
          v105 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v79 | 7) != 0x17)
            v105 = v79 | 7;
          v106 = v105 + 1;
          v81 = (void **)operator new(v105 + 1);
          __dst[2] = (void *)(v106 | 0x8000000000000000);
          __dst[0] = v81;
          __dst[1] = v80;
        }
        else
        {
          HIBYTE(__dst[2]) = v79;
          v81 = __dst;
          if (!v79)
          {
LABEL_170:
            *((_BYTE *)v80 + (_QWORD)v81) = 0;
            memset(&buf, 0, sizeof(buf));
            v107 = -1431655766;
            if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0))
                v107 = (int)__p;
              else
                v107 = -1431655766;
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete(__dst[0]);
            v108 = (const void *)*MEMORY[0x1E0CFB2D8];
            v109 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
            if (v109 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v110 = (void *)v109;
            __s = (char *)v67;
            if (v109 >= 0x17)
            {
              v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v109 | 7) != 0x17)
                v112 = v109 | 7;
              v113 = v112 + 1;
              v111 = (void **)operator new(v112 + 1);
              __dst[2] = (void *)(v113 | 0x8000000000000000);
              __dst[0] = v111;
              __dst[1] = v110;
            }
            else
            {
              HIBYTE(__dst[2]) = v109;
              v111 = __dst;
              if (!v109)
              {
LABEL_186:
                *((_BYTE *)v110 + (_QWORD)v111) = 0;
                memset(&buf, 0, sizeof(buf));
                v114 = -1431655766;
                if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0))
                    v114 = (int)__p;
                  else
                    v114 = -1431655766;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst[2]) < 0)
                  operator delete(__dst[0]);
                v115 = (const void *)*MEMORY[0x1E0D01AE0];
                v116 = strlen((const char *)*MEMORY[0x1E0D01AE0]);
                if (v116 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v117 = (void *)v116;
                if (v116 >= 0x17)
                {
                  v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v116 | 7) != 0x17)
                    v119 = v116 | 7;
                  v120 = v119 + 1;
                  v118 = (void **)operator new(v119 + 1);
                  __dst[2] = (void *)(v120 | 0x8000000000000000);
                  __dst[0] = v118;
                  __dst[1] = v117;
                }
                else
                {
                  HIBYTE(__dst[2]) = v116;
                  v118 = __dst;
                  if (!v116)
                  {
LABEL_202:
                    *((_BYTE *)v117 + (_QWORD)v118) = 0;
                    memset(&buf, 0, sizeof(buf));
                    if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                    {
                      LODWORD(__p) = -1431655766;
                      if (util::convert<int>(&buf, &__p, 0))
                        v121 = (int)__p;
                      else
                        v121 = 0;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(buf.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
LABEL_209:
                        if (v107 != 4)
                          goto LABEL_321;
LABEL_317:
                        if (v114 == 1)
                        {
                          v165 = *(NSObject **)(v5 + 88);
                          if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                          {
                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                            _os_log_impl(&dword_1BF566000, v165, OS_LOG_TYPE_DEFAULT, "#N Hard reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                          }
                          v166 = xpc_null_create();
                          v167 = *MEMORY[0x1E0CF1190];
                          v318 = v166;
                          v317 = 0;
                          v316[1] = 0;
                          v316[0] = 0;
                          TraceManager::runOnHelper_sync((_QWORD *)v5, (const char *)0xA, v167, 0x1388u, 1, &v318, &v317, v316);
                          xpc_release(v318);
                          v318 = 0;
LABEL_324:
                          memset(&buf, 170, sizeof(buf));
                          v168 = (const char *)*MEMORY[0x1E0CFB8D0];
                          memset(__dst, 0, sizeof(__dst));
                          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v168);
                          ctu::cf::map_adapter::getString();
                          MEMORY[0x1C3B8B878](&__p);
                          if (SHIBYTE(__dst[2]) < 0)
                            operator delete(__dst[0]);
                          memset(__dst, 170, sizeof(__dst));
                          v169 = (const void *)*MEMORY[0x1E0CFB250];
                          v170 = strlen((const char *)*MEMORY[0x1E0CFB250]);
                          if (v170 > 0x7FFFFFFFFFFFFFF7)
                            std::string::__throw_length_error[abi:ne180100]();
                          v171 = v170;
                          if (v170 >= 0x17)
                          {
                            v173 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v170 | 7) != 0x17)
                              v173 = v170 | 7;
                            v174 = v173 + 1;
                            p_p = operator new(v173 + 1);
                            v315 = v174 | 0x8000000000000000;
                            __p = p_p;
                            v314 = v171;
                          }
                          else
                          {
                            HIBYTE(v315) = v170;
                            p_p = &__p;
                            if (!v170)
                            {
LABEL_334:
                              v175 = (const char *)*MEMORY[0x1E0CFB370];
                              *((_BYTE *)&v171->isa + (_QWORD)p_p) = 0;
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v327, v175);
                              ctu::cf::map_adapter::getString();
                              MEMORY[0x1C3B8B878](&v327);
                              if (SHIBYTE(v315) < 0)
                                operator delete(__p);
                              v176 = xpc_dictionary_create(0, 0, 0);
                              if (v176 || (v176 = xpc_null_create()) != 0)
                              {
                                if (MEMORY[0x1C3B8CD78](v176) == MEMORY[0x1E0C812F8])
                                {
                                  xpc_retain(v176);
                                  v177 = v176;
                                }
                                else
                                {
                                  v177 = xpc_null_create();
                                }
                              }
                              else
                              {
                                v177 = xpc_null_create();
                                v176 = 0;
                              }
                              xpc_release(v176);
                              if (SHIBYTE(v321[2]) >= 0)
                                v196 = (const char *)v321;
                              else
                                v196 = (const char *)v321[0];
                              v197 = xpc_string_create(v196);
                              if (!v197)
                                v197 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v38, v197);
                              v198 = xpc_null_create();
                              xpc_release(v197);
                              xpc_release(v198);
                              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v199 = &buf;
                              else
                                v199 = (std::string *)buf.__r_.__value_.__r.__words[0];
                              v200 = xpc_string_create((const char *)v199);
                              if (!v200)
                                v200 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v168, v200);
                              v201 = xpc_null_create();
                              xpc_release(v200);
                              xpc_release(v201);
                              if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v202 = &v320;
                              else
                                v202 = (std::string *)v320.__r_.__value_.__r.__words[0];
                              v203 = xpc_string_create((const char *)v202);
                              if (!v203)
                                v203 = xpc_null_create();
                              xpc_dictionary_set_value(v177, (const char *)*MEMORY[0x1E0CFB930], v203);
                              v204 = xpc_null_create();
                              xpc_release(v203);
                              xpc_release(v204);
                              if (SHIBYTE(__dst[2]) >= 0)
                                v205 = (const char *)__dst;
                              else
                                v205 = (const char *)__dst[0];
                              v206 = xpc_string_create(v205);
                              if (!v206)
                                v206 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v175, v206);
                              v207 = xpc_null_create();
                              xpc_release(v206);
                              xpc_release(v207);
                              v208 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF40]);
                              if (!v208)
                                v208 = xpc_null_create();
                              xpc_dictionary_set_value(v177, (const char *)*MEMORY[0x1E0CFB0F8], v208);
                              v209 = xpc_null_create();
                              xpc_release(v208);
                              xpc_release(v209);
                              v210 = xpc_int64_create(Int);
                              if (!v210)
                                v210 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v65, v210);
                              v211 = xpc_null_create();
                              xpc_release(v210);
                              xpc_release(v211);
                              v212 = (const char *)*MEMORY[0x1E0CFB780];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB780]);
                              Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8B878](&__p);
                              v214 = xpc_BOOL_create(Bool);
                              if (!v214)
                                v214 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v212, v214);
                              v215 = xpc_null_create();
                              xpc_release(v214);
                              xpc_release(v215);
                              v216 = (const char *)*MEMORY[0x1E0CFB798];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB798]);
                              v217 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8B878](&__p);
                              v218 = xpc_BOOL_create(v217);
                              if (!v218)
                                v218 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v216, v218);
                              v219 = xpc_null_create();
                              xpc_release(v218);
                              xpc_release(v219);
                              v220 = (const char *)*MEMORY[0x1E0CFB790];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E0CFB790]);
                              v221 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v323, (const __CFString *)__p);
                              MEMORY[0x1C3B8B878](&__p);
                              v222 = xpc_BOOL_create(v221);
                              if (!v222)
                                v222 = xpc_null_create();
                              xpc_dictionary_set_value(v177, v220, v222);
                              v223 = xpc_null_create();
                              xpc_release(v222);
                              xpc_release(v223);
                              v224 = *(std::__shared_weak_count **)(v5 + 128);
                              if (!v224
                                || (v225 = *(_QWORD *)(v5 + 120), (v226 = std::__shared_weak_count::lock(v224)) == 0))
                              {
                                std::__throw_bad_weak_ptr[abi:ne180100]();
                              }
                              v227 = v226;
                              p_shared_weak_owners = (unint64_t *)&v226->__shared_weak_owners_;
                              do
                                v229 = __ldxr(p_shared_weak_owners);
                              while (__stxr(v229 + 1, p_shared_weak_owners));
                              v230 = (unint64_t *)&v226->__shared_owners_;
                              do
                                v231 = __ldaxr(v230);
                              while (__stlxr(v231 - 1, v230));
                              if (!v231)
                              {
                                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                std::__shared_weak_count::__release_weak(v227);
                              }
                              v232 = (const void *)*MEMORY[0x1E0CFB5F0];
                              v233 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
                              if (v233 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              v234 = v233;
                              if (v233 >= 0x17)
                              {
                                v236 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v233 | 7) != 0x17)
                                  v236 = v233 | 7;
                                v237 = v236 + 1;
                                v235 = operator new(v236 + 1);
                                v315 = v237 | 0x8000000000000000;
                                __p = v235;
                                v314 = v234;
                              }
                              else
                              {
                                HIBYTE(v315) = v233;
                                v235 = &__p;
                                if (!v233)
                                {
LABEL_430:
                                  *((_BYTE *)&v234->isa + (_QWORD)v235) = 0;
                                  v312 = v177;
                                  if (v177)
                                    xpc_retain(v177);
                                  else
                                    v312 = xpc_null_create();
                                  v307[0] = MEMORY[0x1E0C809B0];
                                  v307[1] = 1174405120;
                                  v307[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_42;
                                  v307[3] = &__block_descriptor_tmp_44;
                                  v239 = *(abm::client::Event **)a2;
                                  v238 = *(std::__shared_weak_count **)(a2 + 8);
                                  v307[4] = v5;
                                  v307[5] = v239;
                                  v308 = v238;
                                  if (v238)
                                  {
                                    v240 = (unint64_t *)&v238->__shared_owners_;
                                    do
                                      v241 = __ldxr(v240);
                                    while (__stxr(v241 + 1, v240));
                                  }
                                  v309 = v225;
                                  v310 = v227;
                                  do
                                    v242 = __ldxr(p_shared_weak_owners);
                                  while (__stxr(v242 + 1, p_shared_weak_owners));
                                  v243 = _Block_copy(v307);
                                  v311 = v243;
                                  Service::runCommand(v5, (uint64_t)&__p, &v312, &v311);
                                  if (v243)
                                    _Block_release(v243);
                                  xpc_release(v312);
                                  v312 = 0;
                                  if (SHIBYTE(v315) < 0)
                                    operator delete(__p);
                                  v244 = strlen(__s);
                                  if (v244 > 0x7FFFFFFFFFFFFFF7)
                                    std::string::__throw_length_error[abi:ne180100]();
                                  v245 = (void *)v244;
                                  if (v244 >= 0x17)
                                  {
                                    v248 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v244 | 7) != 0x17)
                                      v248 = v244 | 7;
                                    v249 = v248 + 1;
                                    v250 = (void **)operator new(v248 + 1);
                                    v247 = __s;
                                    v246 = v250;
                                    v306 = v249 | 0x8000000000000000;
                                    v305[0] = v250;
                                    v305[1] = v245;
                                  }
                                  else
                                  {
                                    HIBYTE(v306) = v244;
                                    v246 = v305;
                                    v247 = __s;
                                    if (!v244)
                                    {
LABEL_450:
                                      *((_BYTE *)v245 + (_QWORD)v246) = 0;
                                      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                                        std::string::__init_copy_ctor_external(&v304, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                                      else
                                        v304 = v320;
                                      TraceManager::submitTraceMetric_sync(v5, (const char *)v305, (const char *)&v304);
                                      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v304.__r_.__value_.__l.__data_);
                                        if ((SHIBYTE(v306) & 0x80000000) == 0)
                                        {
LABEL_455:
                                          v251 = v310;
                                          if (!v310)
                                            goto LABEL_457;
                                          goto LABEL_456;
                                        }
                                      }
                                      else if ((SHIBYTE(v306) & 0x80000000) == 0)
                                      {
                                        goto LABEL_455;
                                      }
                                      operator delete(v305[0]);
                                      v251 = v310;
                                      if (!v310)
                                      {
LABEL_457:
                                        v252 = v308;
                                        if (v308)
                                        {
                                          v253 = (unint64_t *)&v308->__shared_owners_;
                                          do
                                            v254 = __ldaxr(v253);
                                          while (__stlxr(v254 - 1, v253));
                                          if (!v254)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                                            std::__shared_weak_count::__release_weak(v252);
                                          }
                                        }
                                        std::__shared_weak_count::__release_weak(v227);
                                        xpc_release(v177);
                                        if (SHIBYTE(__dst[2]) < 0)
                                          operator delete(__dst[0]);
                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(buf.__r_.__value_.__l.__data_);
                                        goto LABEL_466;
                                      }
LABEL_456:
                                      std::__shared_weak_count::__release_weak(v251);
                                      goto LABEL_457;
                                    }
                                  }
                                  memmove(v246, v247, (size_t)v245);
                                  goto LABEL_450;
                                }
                              }
                              memmove(v235, v232, (size_t)v234);
                              goto LABEL_430;
                            }
                          }
                          memmove(p_p, v169, (size_t)v171);
                          goto LABEL_334;
                        }
LABEL_321:
                        if (!(v114 | v107) && v121 == 3)
                          notify_post("com.apple.cellularlogging.bbreset");
                        goto LABEL_324;
                      }
                    }
                    else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_209;
                    }
                    operator delete(__dst[0]);
                    if (v107 != 4)
                      goto LABEL_321;
                    goto LABEL_317;
                  }
                }
                memmove(v118, v115, (size_t)v117);
                goto LABEL_202;
              }
            }
            memmove(v111, v108, (size_t)v110);
            goto LABEL_186;
          }
        }
        memmove(v81, v78, (size_t)v80);
        goto LABEL_170;
      }
    }
    memmove(p_buf, v39, v41);
    goto LABEL_92;
  }
LABEL_473:
  if (v9)
    CFRelease(v9);
  v7 = v326;
  if (v326)
    goto LABEL_476;
}

void sub_1BF5E0AE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF5E116C()
{
  JUMPOUT(0x1BF5E1154);
}

void sub_1BF5E1174()
{
  JUMPOUT(0x1BF5E115CLL);
}

void prop::bbtrace::get<diag::config::Mode>(char *a1, int *a2)
{
  std::string __p;
  int v4;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0))
      *a2 = v4;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF5E11F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void prop::bbtrace::get<abm::traceOwnership>(char *a1, int *a2)
{
  std::string __p;
  int v4;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0))
      *a2 = v4;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF5E1290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL TraceManager::isCellullarLoggingStreamingMode(uint64_t a1, int a2, int a3, int a4)
{
  return !(a3 | a2) && a4 == 3;
}

uint64_t TraceManager::postBBResetNotification(TraceManager *this)
{
  return notify_post("com.apple.cellularlogging.bbreset");
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_42(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  xpc_object_t v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[7];
      if (!v10)
      {
LABEL_29:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v15 = a1[5];
        v14 = (std::__shared_weak_count *)a1[6];
        if (!v14)
        {
LABEL_12:
          v18 = (std::__shared_weak_count *)v7[16];
          if (!v18 || (v19 = v7[15], (v20 = std::__shared_weak_count::lock(v18)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v21 = v20;
          v22 = operator new(0x38uLL);
          *v22 = v7;
          v22[1] = v10;
          v22[2] = v9;
          *((_DWORD *)v22 + 6) = a2;
          v22[4] = v13;
          v23 = xpc_null_create();
          v22[5] = v15;
          v22[6] = v14;
          if (v14)
          {
            v24 = (unint64_t *)&v14->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = v7[17];
          v27 = (unint64_t *)&v21->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = operator new(0x18uLL);
          *v29 = v22;
          v29[1] = v19;
          v29[2] = v21;
          dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
          do
            v30 = __ldaxr(v27);
          while (__stlxr(v30 - 1, v27));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
          if (v14)
          {
            v31 = (unint64_t *)&v14->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          xpc_release(v23);
          goto LABEL_29;
        }
      }
      else
      {
        v13 = xpc_null_create();
        v15 = a1[5];
        v14 = (std::__shared_weak_count *)a1[6];
        if (!v14)
          goto LABEL_12;
      }
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      goto LABEL_12;
    }
  }
}

_QWORD *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_45(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

_QWORD *__copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_47(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF1090];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF1090];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x1388u, 0, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF5E17A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_49(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Prepare complete", v2, 2u);
  }
}

void TraceManager::updateBasebandFWInfo(TraceManager *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  const void *v22;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v25;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v4 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const void *)*MEMORY[0x1E0CFBDB0];
  v13 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v25 = v17 | 0x8000000000000000;
    __dst[0] = v15;
LABEL_23:
    memmove(v15, v12, (size_t)v14);
    *((_BYTE *)v14 + (_QWORD)v15) = 0;
    object = v3;
    if (v3)
      goto LABEL_19;
LABEL_24:
    object = xpc_null_create();
    goto LABEL_25;
  }
  HIBYTE(v25) = v13;
  v15 = __dst;
  if (v13)
    goto LABEL_23;
  LOBYTE(__dst[0]) = 0;
  object = v3;
  if (!v3)
    goto LABEL_24;
LABEL_19:
  xpc_retain(v3);
LABEL_25:
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1174405120;
  v20[2] = ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_68_0;
  v20[4] = this;
  v20[5] = v5;
  v21 = v7;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = _Block_copy(v20);
  v22 = v19;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v22);
  if (v19)
    _Block_release(v19);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v7);
  xpc_release(v3);
}

void sub_1BF5E1B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, xpc_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  std::__shared_weak_count *v24;
  const void *v25;

  if (v25)
    _Block_release(v25);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  xpc_release(object);
  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_51(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Start complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_53(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF11A0];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF11A0];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)0xA, v5, 0x1388u, 1, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF5E1CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t object;

  v2 = (_QWORD *)a1[4];
  v9 = 0;
  object = xpc_null_create();
  v3 = (const void *)a1[5];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = *MEMORY[0x1E0CF1090];
    v6 = a1[6];
    v7 = v4;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0CF1090];
  v6 = a1[6];
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x7D0u, 0, &object, &v9, &v7);
  if (v6)
    dispatch_release(v6);
  if (v4)
    _Block_release(v4);
  xpc_release(object);
}

void sub_1BF5E1E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_61(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  ctu *v10;
  NSObject *v11;
  uint64_t v12;
  ctu *v13;
  uint64_t (*v14)(uint64_t);
  std::__shared_weak_count *v15;
  abm::client::Event *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  NSObject *v40;
  xpc_object_t v41;
  xpc_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 __p;
  char v50;
  ctu *buf[4];

  buf[3] = *(ctu **)MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = (char *)a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v48 = v6;
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  v47 = v8;
  if (!v8)
  {
LABEL_57:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v9 = *((_QWORD *)v5 + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    abm::client::Event::name(*(abm::client::Event **)a2);
    v10 = v50 >= 0 ? (ctu *)&__p : (ctu *)__p;
    LODWORD(buf[0]) = 136315138;
    *(ctu **)((char *)buf + 4) = v10;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Received event %s", (uint8_t *)buf, 0xCu);
    if (v50 < 0)
      operator delete((void *)__p);
  }
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v5 + 88))(v5))
  {
    v11 = *((_QWORD *)v5 + 11);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *MEMORY[0x1E0CFB9A8];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v12;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping event %s", (uint8_t *)&__p, 0xCu);
    }
    goto LABEL_57;
  }
  buf[0] = (ctu *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*(abm::client::Event **)a2);
  v13 = buf[0];
  v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!buf[0])
    v14 = 0;
  if (v14)
  {
    *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&__p + 1) = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_62;
    aBlock[3] = &__block_descriptor_tmp_63_0;
    v16 = *(abm::client::Event **)a2;
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    aBlock[4] = v5;
    aBlock[5] = v16;
    v44 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v45 = v8;
    v46 = v7;
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v22 = _Block_copy(aBlock);
    v23 = *((_QWORD *)v5 + 17);
    if (v23)
      dispatch_retain(*((dispatch_object_t *)v5 + 17));
    *(_QWORD *)&__p = v22;
    *((_QWORD *)&__p + 1) = v23;
    ctu::cf_to_xpc(buf[0], v21);
    v24 = object;
    if (object && MEMORY[0x1C3B8CD78](object) == MEMORY[0x1E0C812F8])
      xpc_retain(object);
    else
      v24 = xpc_null_create();
    xpc_release(object);
    v25 = v5 + 168;
    if (v5[191] < 0)
      v25 = *(const char **)v25;
    v26 = xpc_string_create(v25);
    if (!v26)
      v26 = xpc_null_create();
    xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E0CFB330], v26);
    v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    v41 = v24;
    if (v24)
    {
      xpc_retain(v24);
      v40 = 0;
      if (v22)
        goto LABEL_33;
    }
    else
    {
      v40 = 0;
      v41 = xpc_null_create();
      if (v22)
      {
LABEL_33:
        v28 = _Block_copy(v22);
        v29 = *MEMORY[0x1E0CF10A8];
        v38 = v28;
        v39 = v23;
        if (!v23)
        {
LABEL_35:
          TraceManager::runOnHelper_sync(v5, (const char *)9, v29, 0x1388u, 1, &v41, &v40, &v38);
          if (v23)
            dispatch_release(v23);
          if (v28)
            _Block_release(v28);
          xpc_release(v41);
          v41 = 0;
          xpc_release(v24);
          if (v23)
            dispatch_release(v23);
          if (v22)
            _Block_release(v22);
          v30 = v46;
          if (v46)
          {
            v31 = (unint64_t *)&v46->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = v44;
          if (v44)
          {
            v34 = (unint64_t *)&v44->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v13 = buf[0];
          goto LABEL_54;
        }
LABEL_34:
        dispatch_retain(v23);
        goto LABEL_35;
      }
    }
    v28 = 0;
    v29 = *MEMORY[0x1E0CF10A8];
    v38 = 0;
    v39 = v23;
    if (!v23)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_54:
  if (v13)
    CFRelease(v13);
  v7 = v48;
  if (v48)
    goto LABEL_57;
}

void sub_1BF5E22D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_62(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2 == 0;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot : Snapshot complete. Success = %d", (uint8_t *)v5, 8u);
  }
}

_QWORD *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_65(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  void *v14[2];
  NSObject *v15;
  xpc_object_t object;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v11 = xpc_string_create("Trace state for sysdiagnose");
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CF10C8], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      object = v10;
      if (v10)
        xpc_retain(v10);
      else
        object = xpc_null_create();
      v13 = *MEMORY[0x1E0CF1078];
      v14[1] = 0;
      v15 = 0;
      v14[0] = 0;
      TraceManager::runOnHelper_sync(v3, (const char *)9, v13, 0x1388u, 1, &object, &v15, v14);
      xpc_release(object);
      object = 0;
      xpc_release(v10);
    }
  }
}

void sub_1BF5E26C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void TraceManager::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  const char *v14;
  void **v15;
  xpc_object_t object;
  __int128 v17;
  uint64_t v18;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (a2)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (a2)
          return;
      }
      if (v10)
      {
        value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB330]);
        object = value;
        if (value)
          xpc_retain(value);
        else
          object = xpc_null_create();
        xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v14);
        v15 = (void **)(v7 + 168);
        if (*(char *)(v7 + 191) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = v17;
        *(_QWORD *)(v7 + 184) = v18;
        HIBYTE(v18) = 0;
        LOBYTE(v17) = 0;
        xpc_release(object);
      }
    }
  }
}

void sub_1BF5E2A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = abm::helper::asString();
          v11 = a1[10];
          v12 = 136315394;
          v13 = v10;
          v14 = 2080;
          v15 = v11;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I %s:%s: complete", (uint8_t *)&v12, 0x16u);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1[7];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = a1[7];
    if (!v5)
      goto LABEL_9;
  }
  dispatch_group_leave(v5);
  v6 = a1[7];
  if (v6)
    dispatch_release(v6);
LABEL_9:
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF5E3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF5E3020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7915828;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF5E313C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF5E315C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79157E8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73DC5ALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73DC5ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73DC5ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73DC5ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke(_QWORD *a1, const void **a2)
{
  uint64_t v2;
  void (*v3)(_QWORD *, CFTypeRef *);
  _QWORD *v4;
  const void *v5;
  CFTypeRef cf;

  v3 = (void (*)(_QWORD *, CFTypeRef *))a1[5];
  v2 = a1[6];
  v4 = (_QWORD *)(a1[4] + (v2 >> 1) - 120);
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, CFTypeRef *))(*v4 + v3);
  v5 = *a2;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v3(v4, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1BF5E349C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF5E3C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E79159E8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73E0A3 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73E0A3 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t a1, const void **a2)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  char v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void (*v21)(__int128 *, __int128 *, uint64_t);
  const void *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD block[6];

  v2 = *a2;
  v22 = *a2;
  *a2 = 0;
  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
LABEL_10:
    v17 = 1;
    *(_QWORD *)&v23 = 0;
    if (!v2)
      goto LABEL_23;
    goto LABEL_22;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
    goto LABEL_10;
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v17 = 0;
    *(_QWORD *)&v23 = 0;
    if (!v2)
      goto LABEL_23;
LABEL_22:
    CFRetain(v2);
    goto LABEL_23;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          *(_QWORD *)&v23 = _Block_copy(v15);
          _Block_release(v16);
        }
        else
        {
          *(_QWORD *)&v23 = 0;
        }
        _Block_release(v14);
      }
      else
      {
        *(_QWORD *)&v23 = 0;
      }
      _Block_release(v12);
    }
    else
    {
      *(_QWORD *)&v23 = 0;
    }
    _Block_release(v10);
  }
  else
  {
    *(_QWORD *)&v23 = 0;
  }
  _Block_release(v8);
  v17 = 0;
  if (v2)
    goto LABEL_22;
LABEL_23:
  v18 = operator new(8uLL);
  *v18 = v2;
  if (v2)
    CFRetain(v2);
  v19 = (char *)operator new(0x20uLL);
  v20 = v19;
  *(_QWORD *)v19 = 0;
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    *(_QWORD *)v19 = boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable;
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) != 0)
    {
      *(_OWORD *)(v19 + 8) = v23;
      *((_QWORD *)v19 + 3) = v24;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v23, v19 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = v20;
  block[5] = v18;
  dispatch_async(v4, block);
  if (v2)
    CFRelease(v2);
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) == 0)
    {
      v21 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v21)
        v21(&v23, &v23, 2);
    }
  }
  if ((v17 & 1) == 0)
  {
    _Block_release(v6);
    v2 = v22;
  }
  if (v2)
    CFRelease(v2);
}

void sub_1BF5E43F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11)
{
  const void *v11;
  void *v12;
  char v13;

  operator delete(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a11);
  if ((v13 & 1) == 0)
    _Block_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::runtime_error_vtbl *v3;
  void (*v4)(_QWORD *, std::runtime_error *);
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t *, uint64_t);
  CFTypeRef *v8;
  std::runtime_error cf;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3)
    CFRetain(v3);
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  v4 = *(void (**)(_QWORD *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v4(v2 + 1, &cf);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      if ((v6 & 1) == 0)
      {
        v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 & 0xFFFFFFFFFFFFFFFELL);
        if (v7)
          v7(v5 + 1, v5 + 1, 2);
      }
      *v5 = 0;
    }
    operator delete(v5);
  }
  v8 = *(CFTypeRef **)(a1 + 40);
  if (v8)
  {
    if (*v8)
      CFRelease(*v8);
    operator delete(v8);
  }
}

void sub_1BF5E4554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5E4570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF5E458C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73E107 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73E107 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef cf;

  v2 = *a1;
  cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf)
    CFRelease(cf);
}

void sub_1BF5E46EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5E47A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5E47B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7915B60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7915B60;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E7915BB0;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF5E496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7915B60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E7915BB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E7915BB0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7915BB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = a1[6];
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v10 = *(std::string *)a2;
        (*(void (**)(uint64_t, std::string *))(v7 + 16))(v7, &v10);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF5E4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5E4CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  TraceManager::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF5E4DF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6)
    CFRelease(v6);
  return v9;
}

void sub_1BF5E4EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5E4F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  CFNumberRef v12;
  int valuePtr;

  v12 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v12, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = v12;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  v10 = v9;
  v12 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
}

void sub_1BF5E4FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF5E4FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_1BF5E50B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v8;
  const __CFAllocator *v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v8 = value;
  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  v10 = value;
  if (v8)
    v11 = value == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1BF5E518C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5E51B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  __int128 v8;
  void *v9;
  const __CFAllocator *v10;
  const char **v11;
  uint64_t *v12;
  xpc_object_t value;
  const char *v14;
  const __CFAllocator *v15;
  __CFDictionary *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  const void *v30;
  void *v31;
  NSObject *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  xpc_object_t v47;
  std::string v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  CFTypeRef cf;
  xpc_object_t aBlock;
  dispatch_object_t v56;
  xpc_object_t v57;
  xpc_object_t object;
  void *__p[2];
  __int128 v60;
  xpc_object_t v61;
  std::string v62;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  memset(&v62, 0, sizeof(v62));
  v61 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    v61 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v61 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  v61 = v7;
LABEL_9:
  xpc_release(v5);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v8;
  v60 = v8;
  v9 = *(void **)(v2 + 16);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  abm::HelperClient::perform();
  xpc_release(object);
  object = 0;
  v11 = (const char **)MEMORY[0x1E0CF1130];
  v12 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (!LODWORD(__p[0]) && MEMORY[0x1C3B8CD78](v61) == v6)
  {
    value = xpc_dictionary_get_value(v61, *v11);
    aBlock = value;
    if (value)
      xpc_retain(value);
    else
      aBlock = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&aBlock, (const object *)"", v14);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    v62 = v48;
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
    v48.__r_.__value_.__s.__data_[0] = 0;
    xpc_release(aBlock);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)&v62, (__int128 **)(*(_QWORD *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E0CFB798], 1, *v12, v15);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)&v62, (__int128 **)(*(_QWORD *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E0CFB790], 1, *v12, v10);
  }
  v16 = *(__CFDictionary **)(v2 + 32);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v48 = v62;
  ctu::cf::insert<char const*,std::string>(v16, (const __CFString **)*MEMORY[0x1E0CFB770], (uint64_t)&v48, *v12, v10);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v17 = xpc_string_create("");
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), *v11, v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = *(void **)(v2 + 16);
  v57 = v19;
  if (v19)
    xpc_retain(v19);
  else
    v57 = xpc_null_create();
  aBlock = 0;
  v56 = 0;
  abm::HelperClient::perform();
  if (v56)
    dispatch_release(v56);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v57);
  v57 = 0;
  v20 = *(std::__shared_weak_count **)(v3 + 128);
  if (!v20 || (v21 = *(_QWORD *)(v3 + 120), (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  v48.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  v48.__r_.__value_.__l.__size_ = 1174405120;
  v48.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke;
  v49 = &__block_descriptor_tmp_93;
  v50 = v3;
  v51 = v21;
  v52 = v23;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = *(void **)(v2 + 40);
  if (v29)
    v29 = _Block_copy(v29);
  v53 = v29;
  v30 = *(const void **)(v2 + 32);
  cf = v30;
  if (v30)
    CFRetain(v30);
  v31 = _Block_copy(&v48);
  v32 = *(NSObject **)(v3 + 136);
  if (v32)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  v33 = xpc_dictionary_create(0, 0, 0);
  if (v33 || (v33 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v33) == v6)
    {
      xpc_retain(v33);
      v34 = v33;
    }
    else
    {
      v34 = xpc_null_create();
    }
  }
  else
  {
    v34 = xpc_null_create();
    v33 = 0;
  }
  xpc_release(v33);
  v35 = (const char *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0CF10C8], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v47 = v34;
  if (v34)
  {
    xpc_retain(v34);
    v46 = 0;
    if (v31)
      goto LABEL_65;
  }
  else
  {
    v46 = 0;
    v47 = xpc_null_create();
    if (v31)
    {
LABEL_65:
      v38 = _Block_copy(v31);
      v39 = *MEMORY[0x1E0CF1078];
      v44 = v38;
      v45 = v32;
      if (!v32)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  v38 = 0;
  v39 = *MEMORY[0x1E0CF1078];
  v44 = 0;
  v45 = v32;
  if (v32)
LABEL_66:
    dispatch_retain(v32);
LABEL_67:
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v39, 0, 1, &v47, &v46, &v44);
  if (v32)
    dispatch_release(v32);
  if (v38)
    _Block_release(v38);
  xpc_release(v47);
  v47 = 0;
  xpc_release(v34);
  if (v32)
    dispatch_release(v32);
  if (v31)
    _Block_release(v31);
  if (cf)
    CFRelease(cf);
  if (v53)
    _Block_release(v53);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(v60) < 0)
    operator delete(__p[1]);
  xpc_release(v61);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v2);
  operator delete(v40);
  v41 = (std::__shared_weak_count *)a1[2];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(a1);
}

void sub_1BF5E57F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,CFTypeRef cf,uint64_t a25,xpc_object_t object,dispatch_object_t a27,xpc_object_t a28,xpc_object_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  xpc_release(object);
  if (a36 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v38 - 120));
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v37);
  operator delete(v40);
  v41 = (std::__shared_weak_count *)v36[2];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  const void *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeID v17;
  const void *v18;
  void *v19;
  const void *v20;
  CFTypeRef v21;
  _QWORD v22[4];
  void *v23;
  CFTypeRef v24;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  xpc_object_t v31;

  v2 = a1[4];
  v29 = 0;
  v30 = 0;
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (v30 = std::__shared_weak_count::lock(v3)) == 0 || (v29 = a1[5]) == 0)
  {
    v9 = xpc_null_create();
    v10 = a1[7];
    v31 = v9;
    v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v31);
    xpc_release(v31);
    xpc_release(v11);
    goto LABEL_10;
  }
  v4 = (const void *)*MEMORY[0x1E0CFB738];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB738]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v15 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v15 = v5 | 7;
    v16 = v15 + 1;
    v7 = (void **)operator new(v15 + 1);
    __dst[1] = v6;
    v28 = v16 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_19:
    memmove(v7, v4, (size_t)v6);
    *((_BYTE *)v6 + (_QWORD)v7) = 0;
    v8 = (const void *)a1[8];
    if (!v8)
      goto LABEL_22;
    goto LABEL_20;
  }
  HIBYTE(v28) = v5;
  v7 = __dst;
  if (v5)
    goto LABEL_19;
  LOBYTE(__dst[0]) = 0;
  v8 = (const void *)a1[8];
  if (!v8)
    goto LABEL_22;
LABEL_20:
  v17 = CFGetTypeID(v8);
  if (v17 == CFDictionaryGetTypeID())
  {
    cf = v8;
    CFRetain(v8);
    goto LABEL_23;
  }
LABEL_22:
  cf = 0;
LABEL_23:
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2;
  v22[3] = &__block_descriptor_tmp_92;
  v18 = (const void *)a1[7];
  if (!v18)
  {
    v20 = (const void *)a1[8];
    v23 = 0;
    v24 = v20;
    if (!v20)
      goto LABEL_28;
    goto LABEL_27;
  }
  v19 = _Block_copy(v18);
  v20 = (const void *)a1[8];
  v23 = v19;
  v24 = v20;
  if (v20)
LABEL_27:
    CFRetain(v20);
LABEL_28:
  aBlock = _Block_copy(v22);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__dst[0]);
    v21 = v24;
    if (!v24)
      goto LABEL_37;
    goto LABEL_36;
  }
  v21 = v24;
  if (v24)
LABEL_36:
    CFRelease(v21);
LABEL_37:
  if (v23)
    _Block_release(v23);
LABEL_10:
  v12 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF5E5CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *aBlock, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  const void **v22;
  uint64_t v23;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v22);
  if (a13)
    _Block_release(a13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a16);
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23 - 72);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23 - 72);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t *v2;
  xpc_object_t object;
  unsigned int v4;

  v2 = (uint64_t *)(a1 + 32);
  v4 = 0;
  ctu::cf_to_xpc(*(ctu **)(a1 + 40), a2);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v2, &v4, &object);
  xpc_release(object);
}

void sub_1BF5E5DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5 && MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF5E5E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  CFTypeRef result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (!v7)
  {
    result = (CFTypeRef)a2[8];
    a1[7] = 0;
    a1[8] = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v8 = _Block_copy(v7);
  result = (CFTypeRef)a2[8];
  a1[7] = v8;
  a1[8] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = (const void *)a1[8];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void *aBlock;
  dispatch_object_t object;
  xpc_object_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint8_t buf[8];
  uint64_t v49;
  void (*v50)(_QWORD *, unsigned int *);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  std::string __p;
  void *v57;
  _BYTE v58[32];
  uint64_t block;
  uint64_t v60;
  void (*v61)(uint64_t);
  void *v62;
  uint64_t *v63;

  v2 = *a1;
  v42 = v2;
  v3 = *(_QWORD *)v2;
  v4 = *(NSObject **)(*(_QWORD *)v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot of baseband trace complete", buf, 2u);
  }
  v5 = (const char *)(v2 + 8);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v58 = v6;
  *(_OWORD *)&v58[16] = v6;
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v58, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)v5;
    *(_QWORD *)&v58[16] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)v58 = v7;
  }
  v8 = *(void **)(v2 + 32);
  if (v8)
    v8 = _Block_copy(v8);
  *(_QWORD *)&v58[24] = v8;
  if (!*(_DWORD *)(v2 + 40))
  {
    _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)v58);
    goto LABEL_74;
  }
  v9 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v49 = 1174405120;
  v50 = ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke;
  v51 = &__block_descriptor_tmp_94;
  v11 = *(_QWORD *)(v2 + 48);
  v10 = *(std::__shared_weak_count **)(v2 + 56);
  v52 = v3;
  v53 = v11;
  v54 = v10;
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = *(void **)(v2 + 32);
  if (v14)
    v14 = _Block_copy(v14);
  v55 = v14;
  if ((v58[23] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v58, *(std::string::size_type *)&v58[8]);
  else
    __p = *(std::string *)v58;
  v15 = *(void **)&v58[24];
  if (*(_QWORD *)&v58[24])
    v15 = _Block_copy(*(const void **)&v58[24]);
  v57 = v15;
  v16 = _Block_copy(buf);
  v17 = *(NSObject **)(v3 + 136);
  if (v17)
    dispatch_retain(v17);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v18) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  if (*(char *)(v2 + 31) < 0)
    v5 = *(const char **)v5;
  v20 = xpc_string_create(v5);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF10E0], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = (const char *)(v2 + 64);
  if (*(char *)(v2 + 87) < 0)
    v22 = *(const char **)v22;
  v23 = xpc_string_create(v22);
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF10F8], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = xpc_int64_create(*(int *)(v2 + 40));
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF11E8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = xpc_BOOL_create(*(_BYTE *)(v2 + 88));
  if (!v27)
    v27 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CF1070], v27);
  v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v47 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = v9;
  v60 = 0x40000000;
  v61 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v62 = &__block_descriptor_tmp_13_8;
  v63 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = unk_1ED70F6A0;
    block = GetABMLogServer(void)::sLogServer;
    v60 = unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_45;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v30 = unk_1ED70F6A0;
    block = GetABMLogServer(void)::sLogServer;
    v60 = unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_45;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_45:
  abm::HelperClient::create();
  v33 = (std::__shared_weak_count *)v60;
  if (!v60)
    goto LABEL_49;
  v34 = (unint64_t *)(v60 + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v45 = v19;
    if (v19)
    {
LABEL_50:
      xpc_retain(v19);
      if (v16)
        goto LABEL_51;
      goto LABEL_86;
    }
  }
  else
  {
LABEL_49:
    v45 = v19;
    if (v19)
      goto LABEL_50;
  }
  v45 = xpc_null_create();
  if (v16)
  {
LABEL_51:
    aBlock = _Block_copy(v16);
    object = v17;
    if (!v17)
      goto LABEL_53;
    goto LABEL_52;
  }
LABEL_86:
  aBlock = 0;
  object = v17;
  if (v17)
LABEL_52:
    dispatch_retain(v17);
LABEL_53:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v45);
  v45 = 0;
  p_shared_owners = &v47->__shared_owners_;
  do
    v37 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v37 - 1, (unint64_t *)p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  xpc_release(v19);
  if (v17)
    dispatch_release(v17);
  if (v16)
    _Block_release(v16);
  if (v57)
    _Block_release(v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v38 = v55;
    if (!v55)
      goto LABEL_72;
    goto LABEL_71;
  }
  v38 = v55;
  if (v55)
LABEL_71:
    _Block_release(v38);
LABEL_72:
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
LABEL_74:
  if (*(_QWORD *)&v58[24])
    _Block_release(*(const void **)&v58[24]);
  if ((v58[23] & 0x80000000) != 0)
    operator delete(*(void **)v58);
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&v42);
  v39 = (std::__shared_weak_count *)a1[2];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(a1);
}

void sub_1BF5E6614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *aBlock,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  _QWORD *v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  if (aBlock)
    _Block_release(aBlock);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a36)
    _Block_release(a36);
  if (a35 < 0)
    operator delete(__p);
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&a9);
  v38 = (std::__shared_weak_count *)v36[2];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 87) < 0)
      operator delete(*(void **)(v2 + 64));
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = *(const void **)(v2 + 32);
    if (v4)
      _Block_release(v4);
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  unsigned int v10;
  xpc_object_t xdict;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB6A0], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v7 = *(const char **)a1;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB370], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 24), &v10, &xdict);
  xpc_release(xdict);
}

void sub_1BF5E6A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v17 = 0;
  v18 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
  {
    v6 = 0;
    goto LABEL_12;
  }
  v6 = std::__shared_weak_count::lock(v4);
  v18 = v6;
  if (!v6 || (v17 = a1[5]) == 0)
  {
LABEL_12:
    v10 = xpc_null_create();
    v11 = a1[7];
    __p[0] = v10;
    v12 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v11 + 16))(v11, 3760250880, __p);
    xpc_release(__p[0]);
    xpc_release(v12);
    if (!v6)
      return;
    goto LABEL_17;
  }
  v7 = *a2;
  v8 = *(NSObject **)(v3 + 88);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      TelephonyXPC::Result::toString(v7, (uint64_t)__p);
      if (v16 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v20 = v9;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Failed to archive logs. Result: %s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
  }
  _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)(a1 + 8));
LABEL_17:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF5E6C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF5E6C68(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  const char *v2;

  switch(result)
  {
    case 0xE020E000:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(_BYTE *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      v2 = "kNotAvailable";
LABEL_12:
      *(_BYTE *)(a2 + 23) = 13;
      *(_QWORD *)a2 = *(_QWORD *)v2;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 5);
      *(_BYTE *)(a2 + 13) = 0;
      break;
    default:
      if ((_DWORD)result)
      {
        *(_BYTE *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(_BYTE *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  a1[7] = v7;
  v8 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  a1[11] = result;
  return result;
}

void sub_1BF5E6E8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  std::__shared_weak_count *v4;

  v3 = *(const void **)(v1 + 56);
  if (v3)
    _Block_release(v3);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(uint64_t a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    v3 = *(const void **)(a1 + 56);
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
LABEL_7:
    _Block_release(v3);
LABEL_8:
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  dispatch_group_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2)
        dispatch_release(*v2);
    }
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(_QWORD *a1)
{
  _DWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  _DWORD *v8;
  void *__p;
  char v10;
  uint8_t buf[4];
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_DWORD *)*a1;
  v8 = v2;
  if (v2[6])
  {
    v3 = *(NSObject **)(*(_QWORD *)v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)(v2 + 8));
      v7 = v10 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v12 = v7;
      _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Dump state failed: %s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p);
    }
  }
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev((uint64_t *)&v8);
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(a1);
}

void sub_1BF5E70E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(&a9);
  v11 = (std::__shared_weak_count *)v9[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  xpc_object_t v20;
  NSObject *v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::string __p;
  void *v35;
  uint64_t v36;
  dispatch_group_t group;
  NSObject *v38;
  xpc_object_t object;
  void **__dst;
  size_t v41;
  unint64_t v42;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper sleep requested", (uint8_t *)&__p, 2u);
  }
  v5 = (const void *)*MEMORY[0x1E0CFB028];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v41 = v7;
    v42 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v42) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  v11 = -1431655766;
  v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v12 = (int)object;
    else
      v12 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  v13 = (const void *)*MEMORY[0x1E0CFB2D8];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    v41 = v15;
    v42 = v18 | 0x8000000000000000;
    __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v42) = v14;
  v16 = (void **)&__dst;
  if (v14)
LABEL_24:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v11 = (int)object;
    else
      v11 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_31:
      if (v12 != 4)
        goto LABEL_42;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  if (v12 != 4)
  {
LABEL_42:
    v23 = (void **)xpc_null_create();
    v24 = *MEMORY[0x1E0CF1168];
    v25 = v2[1];
    object = v25;
    __dst = v23;
    if (v25)
    {
      dispatch_retain(v25);
      dispatch_group_enter(v25);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v24, 0x61A8u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    if (v25)
    {
      dispatch_group_leave(v25);
      dispatch_release(v25);
    }
    xpc_release(__dst);
    goto LABEL_61;
  }
LABEL_37:
  if (v11 != 1)
    goto LABEL_42;
  v19 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEFAULT, "#I Cellular Logging should be paused and the other traces will hanlde enter low power.", (uint8_t *)&__p, 2u);
  }
  v20 = xpc_null_create();
  v21 = v2[1];
  v38 = v21;
  object = v20;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(v21);
    v22 = v2[1];
  }
  else
  {
    v22 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v35 = &__block_descriptor_tmp_105;
  v36 = v3;
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v26 = (void **)_Block_copy(&__p);
  v27 = *MEMORY[0x1E0CF1190];
  v28 = *(NSObject **)(v3 + 136);
  if (v28)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  __dst = v26;
  v41 = (size_t)v28;
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)0xA, v27, 0x1388u, 1, &object, &v38, (void **)&__dst);
  if (v28)
    dispatch_release(v28);
  if (v26)
    _Block_release(v26);
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
LABEL_61:
  v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    v30 = v2[1];
    if (v30)
      dispatch_release(v30);
  }
  operator delete(v2);
  v31 = (std::__shared_weak_count *)a1[2];
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  operator delete(a1);
}

void sub_1BF5E7698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v28;
  const void *v29;
  NSObject *v30;
  NSObject *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v30)
    dispatch_release(v30);
  if (v29)
    _Block_release(v29);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  xpc_release(object);
  v32 = v27[1];
  if (v32)
  {
    dispatch_group_leave(v32);
    v33 = v27[1];
    if (v33)
      dispatch_release(v33);
  }
  operator delete(v27);
  v34 = (std::__shared_weak_count *)v26[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6[2];
  NSObject *v7;
  xpc_object_t object;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = xpc_null_create();
  v4 = *MEMORY[0x1E0CF1168];
  v5 = *(NSObject **)(a1 + 40);
  v7 = v5;
  object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x61A8u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1BF5E7868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  NSObject *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string __p;
  void *v34;
  uint64_t v35;
  dispatch_group_t group;
  NSObject *v37;
  xpc_object_t object;
  void **__dst;
  size_t v40;
  unint64_t v41;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper wake requested", (uint8_t *)&__p, 2u);
  }
  v5 = (const void *)*MEMORY[0x1E0CFB028];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_61:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v40 = v7;
    v41 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v41) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_10:
    memmove(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  v11 = -1431655766;
  v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v12 = (int)object;
    else
      v12 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  v13 = (const void *)*MEMORY[0x1E0CFB2D8];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    v40 = v15;
    v41 = v18 | 0x8000000000000000;
    __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v41) = v14;
  v16 = (void **)&__dst;
  if (v14)
LABEL_24:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0))
      v11 = (int)object;
    else
      v11 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_31:
      v19 = (uint64_t *)MEMORY[0x1E0CF1148];
      if (v12 != 4)
        goto LABEL_51;
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  v19 = (uint64_t *)MEMORY[0x1E0CF1148];
  if (v12 != 4)
  {
LABEL_51:
    v26 = (void **)xpc_null_create();
    v27 = *v19;
    object = 0;
    __dst = v26;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v27, 0x1388u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    xpc_release(__dst);
    goto LABEL_52;
  }
LABEL_37:
  if (v11 != 1)
    goto LABEL_51;
  v20 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I The other traces will handle exit low power first, then the Cellular Logging should be resumed.", (uint8_t *)&__p, 2u);
  }
  v21 = xpc_null_create();
  v37 = 0;
  object = v21;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v34 = &__block_descriptor_tmp_106;
  v35 = v3;
  v22 = v2[1];
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v23 = (void **)_Block_copy(&__p);
  v24 = *v19;
  v25 = *(NSObject **)(v3 + 136);
  if (v25)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  __dst = v23;
  v40 = (size_t)v25;
  TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v24, 0x1388u, 0, &object, &v37, (void **)&__dst);
  if (v25)
    dispatch_release(v25);
  if (v23)
    _Block_release(v23);
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
LABEL_52:
  v28 = v2[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    v29 = v2[1];
    if (v29)
      dispatch_release(v29);
  }
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_1BF5E7CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  _QWORD *v27;
  const void *v28;
  NSObject *v29;
  NSObject *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (v29)
    dispatch_release(v29);
  if (v28)
    _Block_release(v28);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  v31 = v27[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    v32 = v27[1];
    if (v32)
      dispatch_release(v32);
  }
  operator delete(v27);
  v33 = (std::__shared_weak_count *)v26[2];
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  xpc_object_t v2;
  uint64_t v3;
  void *v4[2];
  NSObject *v5;
  xpc_object_t object;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = xpc_null_create();
  v3 = *MEMORY[0x1E0CF11A0];
  v5 = 0;
  object = v2;
  v4[0] = 0;
  v4[1] = 0;
  TraceManager::runOnHelper_sync(v1, (const char *)0xA, v3, 0x1388u, 1, &object, &v5, v4);
  xpc_release(object);
}

void sub_1BF5E7E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_72()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_1E7915D78;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(_QWORD *)this = &off_1E7915D78;
  *((_DWORD *)this + 4) = 10;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_1BF5E7F14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x1C3B8B74C](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  CFIndex v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const void *ValueAtIndex;
  const void *v23;
  CFTypeID v24;
  __int128 v25;
  std::string *v26;
  std::string::value_type *v27;
  char *v28;
  uint64_t Count;
  std::string v30;
  std::string v31;
  _BYTE __p[32];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  std::string v38;
  void *v39[3];
  _BYTE v40[24];
  __int128 v41[3];
  _QWORD v42[2];
  const void *v43;
  const void *v44;
  const void *v45;
  _QWORD v46[3];

  v45 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v2 = off_1ED70F558;
  if (!off_1ED70F558)
  {
    v3 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v3, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v3[3] = 0;
    v3[4] = 0;
    *((_DWORD *)v3 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v3);
    v4 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v5 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v2 = off_1ED70F558;
  }
  v11 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v12 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(_QWORD, uint64_t))v2, __p, &v45);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v11)
    goto LABEL_22;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  else
  {
LABEL_22:
    v16 = v45;
    v44 = v45;
    if (!v45)
      goto LABEL_78;
  }
  CFRetain(v16);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    Count = CFArrayGetCount((CFArrayRef)v16);
    if (Count)
    {
      v17 = 0;
      v28 = (char *)*MEMORY[0x1E0CFB370];
      v18 = (const char *)*MEMORY[0x1E0CFB930];
      v19 = (const char *)*MEMORY[0x1E0CFB538];
      v20 = (const char *)*MEMORY[0x1E0CFB8D0];
      v21 = (const char *)*MEMORY[0x1E0CFB770];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v16, v17);
        v23 = ValueAtIndex;
        if (ValueAtIndex && (v24 = CFGetTypeID(ValueAtIndex), v24 == CFDictionaryGetTypeID()))
        {
          v43 = v23;
          CFRetain(v23);
        }
        else
        {
          v23 = 0;
          v43 = 0;
        }
        v42[0] = 0xAAAAAAAAAAAAAAAALL;
        v42[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, (const __CFDictionary *)v23);
        memset((char *)&v41[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v41, v28);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](v41);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v41, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v40, v18);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](v40);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v40, 170, sizeof(v40));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v39, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](v39);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(v39, 170, sizeof(v39));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v38, v20);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](&v38);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        memset(&v38, 170, sizeof(v38));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v46, v21);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](v46);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v36 = v25;
        v37 = v25;
        *(_OWORD *)v34 = v25;
        v35 = v25;
        *(_OWORD *)&__p[16] = v25;
        v33 = v25;
        *(_OWORD *)__p = v25;
        if (SHIBYTE(v41[2]) < 0)
          std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)&v41[1] + 1), *(std::string::size_type *)&v41[2]);
        else
          v31 = *(std::string *)((char *)&v41[1] + 8);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v30, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        else
          v30 = v38;
        ResetInfo::ResetInfo((std::string *)__p, (__int128 *)v40, (__int128 *)v39, v41, (uint64_t)&v31, 7, (__int128 *)&v30);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v30.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            v26 = (std::string *)*((_QWORD *)this + 4);
            if ((unint64_t)v26 < *((_QWORD *)this + 5))
              goto LABEL_53;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v31.__r_.__value_.__l.__data_);
        v26 = (std::string *)*((_QWORD *)this + 4);
        if ((unint64_t)v26 < *((_QWORD *)this + 5))
        {
LABEL_53:
          ResetInfo::ResetInfo(v26, (const ResetInfo *)__p);
          v27 = &v26[4].__r_.__value_.__s.__data_[16];
          *((_QWORD *)this + 4) = (char *)v26 + 112;
          goto LABEL_57;
        }
LABEL_56:
        v27 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)this + 3, (const ResetInfo *)__p);
LABEL_57:
        *((_QWORD *)this + 4) = v27;
        if (SHIBYTE(v37) < 0)
        {
          operator delete(v36[1]);
          if ((SBYTE7(v35) & 0x80000000) == 0)
          {
LABEL_59:
            if ((SHIBYTE(v33) & 0x80000000) == 0)
              goto LABEL_60;
            goto LABEL_70;
          }
        }
        else if ((SBYTE7(v35) & 0x80000000) == 0)
        {
          goto LABEL_59;
        }
        operator delete(v34[0]);
        if ((SHIBYTE(v33) & 0x80000000) == 0)
        {
LABEL_60:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_61;
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_61:
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
          goto LABEL_72;
        }
LABEL_71:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v40[23] & 0x80000000) == 0)
            goto LABEL_64;
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v39[0]);
        if ((v40[23] & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v41[1]) & 0x80000000) == 0)
            goto LABEL_65;
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)v40);
        if ((SBYTE7(v41[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_76;
        }
LABEL_75:
        operator delete(*(void **)&v41[0]);
        if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x1C3B8B8B4](v42);
          if (!v23)
            goto LABEL_29;
LABEL_77:
          CFRelease(v23);
          goto LABEL_29;
        }
LABEL_76:
        operator delete(*((void **)&v41[1] + 1));
        MEMORY[0x1C3B8B8B4](v42);
        if (v23)
          goto LABEL_77;
LABEL_29:
        ++v17;
      }
      while (Count != v17);
    }
  }
LABEL_78:
  if (v16)
    CFRelease(v16);
}

void sub_1BF5E8574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF5E85C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_5:
      if (a56 < 0)
        operator delete(a51);
      if (*(char *)(v56 - 193) < 0)
        operator delete(*(void **)(v56 - 216));
      if (*(char *)(v56 - 169) < 0)
        operator delete(*(void **)(v56 - 192));
      if (*(char *)(v56 - 145) < 0)
        operator delete(*(void **)(v56 - 168));
      MEMORY[0x1C3B8B8B4](v56 - 144);
      ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
      ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a45);
  goto LABEL_5;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0)
          goto LABEL_13;
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0)
LABEL_13:
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_1BF5E88CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  void **v9;

  v4 = v3;
  v9 = v4;
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = *(void ***)(v2 + 32);
    v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      v8 = *v9;
    }
    *(_QWORD *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x1C3B8B74C](v1);
  _Unwind_Resume(a1);
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  size_t size;
  std::string *v8;
  BOOL v9;
  NSObject *v11;
  const ResetInfo *v12;
  const ResetInfo *v13;
  char *i;
  const ResetInfo *v15;
  NSObject *v16;
  std::string::value_type *v17;
  char *v18;
  std::string::value_type *v19;
  char *v20;
  char *v21;
  _QWORD v22[2];
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;
  std::string v31;
  char v32;

  v32 = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v31 = *(std::string *)(a2 + 24);
  v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  if (size != strlen((const char *)*MEMORY[0x1E0CFBFA0]))
  {
    v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
LABEL_14:
    if (!v9)
      goto LABEL_17;
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v31;
  else
    v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  v9 = memcmp(v8, (const void *)*MEMORY[0x1E0CFBFA0], size) == 0;
  if ((v6 & 0x80000000) == 0)
    goto LABEL_14;
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9)
    return 0;
LABEL_17:
  v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  v12 = *(const ResetInfo **)(a1 + 24);
  v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (const ResetInfo *)a2);
  v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15)
      goto LABEL_34;
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(_QWORD *)(a1 + 32) = v12;
        if (!v32)
          goto LABEL_53;
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0)
            goto LABEL_50;
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0)
          goto LABEL_41;
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15)
    goto LABEL_42;
LABEL_34:
  if (v32)
    goto LABEL_54;
LABEL_53:
  v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(_QWORD *)(a1 + 40))
      goto LABEL_55;
LABEL_57:
    v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((_QWORD *)(a1 + 24), (const ResetInfo *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 40))
    goto LABEL_57;
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (const ResetInfo *)a2);
  v17 = (char *)v12 + 112;
  *(_QWORD *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(_QWORD *)(a1 + 32) = v17;
  v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16))
    goto LABEL_76;
  if (v18 + 112 == v17)
  {
    v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      v20 = v18 + 112;
      v19 += 112;
      v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      v18 = v20;
    }
    while (v21 != v17);
    v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0)
          goto LABEL_73;
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0)
      goto LABEL_64;
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(_QWORD *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_1BF5E8DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1BF5E8DAC(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5E8DC0(_Unwind_Exception *a1)
{
  void **v1;

  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  __CFArray *v4;
  __int128 *v5;
  __int128 *v6;
  const __CFString **v7;
  const __CFString **v8;
  __CFDictionary *v9;
  uint64_t v10;
  _DWORD *v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  __int128 v14;
  const __CFAllocator *v15;
  __int128 v16;
  const __CFAllocator *v17;
  __int128 v18;
  const __CFAllocator *v19;
  __int128 v20;
  NSObject *v21;
  os_unfair_lock_s *v22;
  _QWORD *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  unint64_t *v35;
  unint64_t v36;
  CFMutableArrayRef v37;
  LogDumpDB *v38;
  const __CFString **v39;
  const __CFString **v40;
  const __CFString **v41;
  CFMutableArrayRef cf;
  std::string __p;
  std::string v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (Mutable)
    cf = Mutable;
  v6 = (__int128 *)*((_QWORD *)this + 3);
  v5 = (__int128 *)*((_QWORD *)this + 4);
  v38 = this;
  if (v6 != v5)
  {
    v41 = (const __CFString **)*MEMORY[0x1E0CFB370];
    v40 = (const __CFString **)*MEMORY[0x1E0CFB538];
    v39 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
    v7 = (const __CFString **)*MEMORY[0x1E0CFB930];
    v8 = (const __CFString **)*MEMORY[0x1E0CFB770];
    do
    {
      v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = *((_QWORD *)v6 + 9);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v44.__r_.__value_.__l.__size_;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v44.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v44, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, (_QWORD *)v44.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v41, (uint64_t)&v44, (uint64_t)v2, v12);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v40, (uint64_t)&v44, (uint64_t)v2, v13);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        v16 = *(__int128 *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v39, (uint64_t)&v44, (uint64_t)v2, v15);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v44, (uint64_t)v2, v17);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        v20 = *(__int128 *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((_QWORD *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v44 = __p;
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v44, (uint64_t)v2, v19);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_54:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9)
        CFRelease(v9);
      v6 += 7;
    }
    while (v6 != v5);
  }
  v21 = *((_QWORD *)v38 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v44.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v44, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v22 = (os_unfair_lock_s *)off_1ED70F558;
  if (!off_1ED70F558)
  {
    v23 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v23, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v23[3] = 0;
    v23[4] = 0;
    *((_DWORD *)v23 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v44, (uint64_t)v23);
    v24 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
    if (v44.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v22 = (os_unfair_lock_s *)off_1ED70F558;
  }
  v31 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v32 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((_BYTE *)&v44.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v44, "Log Dump History");
  os_unfair_lock_lock(v22 + 10);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v44;
  else
    v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v34);
  ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v22, cf, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
  MEMORY[0x1C3B8B878](&__p);
  os_unfair_lock_unlock(v22 + 10);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (!v31)
    goto LABEL_81;
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v37 = cf;
    if (!cf)
      return;
  }
  else
  {
LABEL_81:
    v37 = cf;
    if (!cf)
      return;
  }
  CFRelease(v37);
}

void sub_1BF5E944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  int v6;
  void *v7;
  char v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  size_t v19;
  std::string::size_type v20;
  char v21;
  std::string *v22;
  std::string::size_type v23;
  size_t v24;
  BOOL v25;
  BOOL v26;
  NSObject *v27;
  _OWORD *v28;
  int v29;
  int v30;
  void *v31;
  char v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  size_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  _OWORD *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  NSObject *v50;
  int v51;
  void *v52;
  std::string *v53;
  int64_t v54;
  char *v55;
  char *v56;
  LogDumpDB *v57;
  std::string *v58;
  BOOL v62;
  const char *v63;
  int v64;
  void *v65;
  std::string *v66;
  int64_t v67;
  char *v68;
  char *v69;
  std::string *v70;
  _BOOL4 v74;
  int v75;
  std::string::size_type v76;
  std::string *v77;
  std::string *v78;
  int v79;
  void *v80;
  std::string *v81;
  int64_t v82;
  char *v83;
  char *v84;
  std::string *v85;
  _BOOL4 v88;
  NSObject *v89;
  NSObject *v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  std::string v94;
  _BYTE __dst[24];
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v96 = *(std::string *)a2;
  v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v7 = (void *)v96.__r_.__value_.__r.__words[0];
  v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    size = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v94;
  else
    v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v11 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v96;
  else
    v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v11 >= size)
    v13 = size;
  else
    v13 = v11;
  v14 = memcmp(v10, v12, v13) == 0;
  v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15)
        goto LABEL_28;
LABEL_32:
      v16 = *((_QWORD *)this + 1);
      result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_32;
LABEL_28:
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v94 = *(std::string *)a3;
  v19 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  v20 = v19;
  v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      v22 = &v94;
      v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1)
    goto LABEL_254;
  v23 = v94.__r_.__value_.__l.__size_;
  v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20)
    v24 = v20;
  else
    v24 = v23;
  v25 = memcmp(v22, (const void *)*MEMORY[0x1E0CFB590], v24) == 0;
  v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26)
      goto LABEL_49;
LABEL_53:
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    *(_QWORD *)__dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_1BF73E210;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29)
        return 0;
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29)
      return 0;
LABEL_122:
    v50 = *((_QWORD *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      return 1;
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_1BF566000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26)
    goto LABEL_53;
LABEL_49:
  v27 = *((_QWORD *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    else
      v94 = *(std::string *)((char *)a3 + 88);
    v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0)
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
    else
      v96 = *(std::string *)((char *)a2 + 88);
    v77 = &v94;
    if (v75 < 0)
      v77 = (std::string *)v76;
    v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *(std::string *)((char *)a3 + 88);
  if (*((char *)a2 + 111) < 0)
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  else
    v96 = *(std::string *)((char *)a2 + 88);
  v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  v31 = (void *)v96.__r_.__value_.__r.__words[0];
  v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v33 = v94.__r_.__value_.__l.__size_;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v94;
  else
    v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v35 = v96.__r_.__value_.__l.__size_;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v96;
  else
    v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if (v35 >= v33)
    v37 = v33;
  else
    v37 = v35;
  v38 = memcmp(v34, v36, v37) == 0;
  v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0)
      goto LABEL_88;
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39)
      goto LABEL_89;
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_116;
LABEL_88:
  if (!v39)
  {
LABEL_117:
    v16 = *((_QWORD *)this + 1);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  v40 = 0;
  v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v94 = *(std::string *)((_BYTE *)a2 + 2);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    }
    v42 = abm::kInterestingHardResetReasonSignatures[v40];
    v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v44 = v43;
    if (v43 >= 0x17)
    {
      v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v46 = v43 | 7;
      v47 = v46 + 1;
      v45 = operator new(v46 + 1);
      *(_QWORD *)&__dst[8] = v44;
      *(_QWORD *)&__dst[16] = v47 | 0x8000000000000000;
      *(_QWORD *)__dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    v45 = __dst;
    if (v43)
      goto LABEL_103;
LABEL_104:
    v45[v44] = 0;
    v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_107;
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48)
        goto LABEL_125;
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      v50 = *((_QWORD *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        return 1;
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
      }
      v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
    v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    v49 = (std::string *)((char *)a3 + 88);
    v94 = *(std::string *)((char *)a3 + 88);
  }
  v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v94;
  else
    v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v54 = v94.__r_.__value_.__l.__size_;
  v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    v58 = v53;
    v57 = this;
    do
    {
      v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56)
        break;
      if (*(_QWORD *)v56 == 0x63206D6F74737543 && *((_QWORD *)v56 + 1) == 0x7079742068736172 && v56[16] == 101)
        goto LABEL_146;
      v58 = (std::string *)(v56 + 1);
      v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    v56 = v55;
  }
  else
  {
    v56 = (char *)v53 + v54;
    v57 = this;
  }
LABEL_146:
  v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0)
    operator delete(v52);
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
      v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      v94 = *v49;
    }
    v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v94;
    else
      v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v67 = v94.__r_.__value_.__l.__size_;
    v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      v70 = v66;
      v57 = this;
      do
      {
        v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69)
          break;
        if (*(_QWORD *)v69 == 0x7274206873617243
          && *((_QWORD *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        v70 = (std::string *)(v69 + 1);
        v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      v69 = v68;
    }
    else
    {
      v69 = (char *)v66 + v67;
      v57 = this;
    }
LABEL_179:
    v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0)
      operator delete(v65);
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
        v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        v94 = *v49;
      }
      v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v94;
      else
        v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v82 = v94.__r_.__value_.__l.__size_;
      v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        v85 = v81;
        v57 = this;
        do
        {
          v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84)
            break;
          if (*(_QWORD *)v84 == 0x6E69206873617243 && *(_QWORD *)(v84 + 6) == 0x64657463656A6E69)
            goto LABEL_219;
          v85 = (std::string *)(v84 + 1);
          v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        v84 = v83;
      }
      else
      {
        v84 = (char *)v81 + v82;
        v57 = this;
      }
LABEL_219:
      v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0)
        operator delete(v80);
      if (v88)
      {
        v89 = *((_QWORD *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_1BF566000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      v63 = "Crash injected";
    }
    else
    {
      v63 = "Crash triggered by";
    }
  }
  else
  {
    v63 = "Custom crash type";
  }
  v90 = *((_QWORD *)v57 + 1);
  result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result)
    return result;
  if (*((char *)a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((_QWORD *)a3 + 12));
  else
    v94 = *v49;
  v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_1BF566000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF5EA0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(_QWORD *a1, const ResetInfo *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  char *v11;
  void **v12;
  void **v13;
  std::string *v15;
  __int128 v16;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x249249249249249)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(112 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (std::string *)&v7[112 * v2];
  *((_QWORD *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  v8 = 0;
  v10 = (void **)*a1;
  for (i = a1[1];
        (void **)(i + v8) != v10;
        ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (const ResetInfo *)(v8 + i)))
  {
    v8 -= 112;
  }
  v11 = (char *)v15 + v8;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12)
    operator delete(v12);
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_1BF5EA37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0)
          goto LABEL_11;
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0)
        continue;
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0)
      continue;
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  LogDumpDB *v4;
  _BOOL8 v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD *v8;
  void **v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *p_p;
  std::string __p;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  std::string v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(LogDumpDB **)(a1 + 8);
  v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 9);
    if (*(_QWORD *)(a1 + 88) - v6 < *(_QWORD *)(a1 + 128))
    {
      v7 = *((_QWORD *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(_BYTE **)a1 = 1;
        return v5;
      }
      v8 = operator new(0x38uLL);
      v8[8] = 0;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((_BYTE *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v8 + 5) = v6;
      *((_QWORD *)v8 + 6) = 0xAAAAAAAA00000000;
      v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0)
        v9 = (void **)v22[0];
      v10 = *(_QWORD *)(a1 + 88);
      v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((_BYTE *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((_QWORD *)v11 + 5) = v10;
      *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (_QWORD *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0)
        v12 = v20;
      else
        v12 = (void **)v20[0];
      v13 = *(_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      else
        v24 = *(std::string *)(a1 + 64);
      v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
      else
        __p = *(std::string *)(a1 + 104);
      v16 = &v24;
      if (v14 < 0)
        v16 = (std::string *)v15;
      p_p = &__p;
      *(_DWORD *)buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = v9;
      v27 = 2050;
      v28 = v6;
      v29 = 2080;
      v30 = v12;
      v31 = 2050;
      v32 = v13;
      v33 = 2082;
      v34 = v16;
      v35 = 2082;
      v36 = p_p;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0)
            goto LABEL_22;
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0)
          goto LABEL_23;
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_1BF5EA758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  char *v3;
  __int128 v4;
  void **v5;
  char *v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void **v10;
  _QWORD *v11;
  size_t v12;
  void *v13;
  size_t v14;
  __int128 v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  void **v19;
  char v20;
  __int128 v21;
  void *v23;
  size_t v24;

  if (a1 == a2)
    return a1;
  v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((_QWORD *)a2 + 1));
      v5 = (void **)(a1 + 24);
      v6 = v3 + 24;
      v7 = v3[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      v5 = (void **)(a1 + 24);
      v6 = a2 + 24;
      v7 = a2[47];
      if (a1[47] < 0)
        goto LABEL_14;
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((_QWORD *)v3 + 4));
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v9;
      v10 = (void **)(a1 + 48);
      v11 = v3 + 48;
      v12 = v3[71];
      if (a1[71] < 0)
        goto LABEL_24;
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((_QWORD *)v3 + 7));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  v5 = (void **)(a1 + 24);
  v6 = v3 + 24;
  v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0)
    goto LABEL_10;
LABEL_14:
  if ((v7 & 0x80u) == 0)
    v13 = v6;
  else
    v13 = (void *)*((_QWORD *)v3 + 3);
  if ((v7 & 0x80u) == 0)
    v14 = v7;
  else
    v14 = *((_QWORD *)v3 + 4);
  std::string::__assign_no_alias<false>(v5, v13, v14);
  v10 = (void **)(a1 + 48);
  v11 = v3 + 48;
  v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0)
    goto LABEL_21;
LABEL_24:
  if ((v12 & 0x80u) == 0)
    v16 = v11;
  else
    v16 = (void *)*((_QWORD *)v3 + 6);
  if ((v12 & 0x80u) == 0)
    v17 = v12;
  else
    v17 = *((_QWORD *)v3 + 7);
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  v18 = *((_QWORD *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((_QWORD *)a1 + 9) = v18;
  v19 = (void **)(a1 + 88);
  v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0)
      v23 = v3 + 88;
    else
      v23 = (void *)*((_QWORD *)v3 + 11);
    if (v20 >= 0)
      v24 = v3[111];
    else
      v24 = *((_QWORD *)v3 + 12);
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      v21 = *(_OWORD *)(v3 + 88);
      *((_QWORD *)a1 + 13) = *((_QWORD *)v3 + 13);
      *(_OWORD *)v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((_QWORD *)v3 + 12));
    return a1;
  }
}

void ResetInfo::ResetInfo(std::string *this, const ResetInfo *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF5EAAE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7915E28;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 24) = a2;
      *(_QWORD *)(a2 + 32) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BF5EAC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x1C3B8B8CC](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x1C3B8B8CC](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73E315)
    return a1 + 24;
  if (((v3 & 0x80000001BF73E315 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73E315))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73E315 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (const void *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v8 = v7 == CFArrayGetTypeID();
    v9 = v8;
    if (v8)
      *a3 = v6;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8B878](&v11);
  return v9;
}

BOOL ctu::cf::plist_adapter::set<__CFArray *>(uint64_t a1, CFTypeRef cf, const __CFString *a3, int a4)
{
  const __CFString *v8;
  _BOOL8 v9;

  if (!cf)
    return 0;
  CFRetain(cf);
  v8 = (const __CFString *)*MEMORY[0x1E0C9B250];
  CFPreferencesSetValue(a3, cf, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (a4)
    v9 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v8) != 0;
  else
    v9 = 1;
  CFRelease(cf);
  return v9;
}

void sub_1BF5EAFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  capabilities::abs *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  capabilities::radio *v25;
  capabilities::radio *v26;
  xpc_object_t v27;
  _QWORD v28[2];
  xpc_object_t object;
  xpc_object_t xdict;

  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  v28[0] = &xdict;
  v28[1] = "kDomainLogLevels";
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &object);
  v2 = MEMORY[0x1C3B8CD78](object);
  v3 = MEMORY[0x1E0C812F8];
  if (v2 != MEMORY[0x1E0C812F8])
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v4) == v3)
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_null_create();
    v7 = object;
    object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  v8 = xpc_int64_create(1);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(object, "libetl", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(1);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(object, "libtu", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(1);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(1);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(1);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(object, "libktl", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = object;
  if (object)
    xpc_retain(object);
  else
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v27 = xdict;
  if (xdict)
    xpc_retain(xdict);
  else
    v27 = xpc_null_create();
  ctu::LogServer::updateConfig();
  xpc_release(v27);
  v20 = (capabilities::abs *)operator new(0x10uLL);
  v21 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v20 = *v21;
  v22 = v21[1];
  *((_QWORD *)v20 + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  _MergedGlobals_0 = (uint64_t)v20;
  if (!qword_1ED70F768)
  {
    v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1ED70F768 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  v25 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v26 = (capabilities::radio *)capabilities::radio::ice(v25);
  if ((_DWORD)v26)
  {
    if (!qword_1ED70F770)
      qword_1ED70F770 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else
  {
    capabilities::radio::maverick(v26);
  }
  if (!qword_1ED70F778)
    qword_1ED70F778 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1BF5EB490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(80, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  const char *v6;

  if (a2 > 3)
    v6 = "";
  else
    v6 = off_1E7915F20[a2];
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73E3DELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73E3DELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73E3DELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73E3DELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[2];
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  _OWORD v44[3];
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_0;
  if (!_MergedGlobals_0)
    return;
  v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7)
    return;
  v11 = std::__shared_weak_count::lock(v7);
  v47 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v23 = v11;
LABEL_39:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v12;
  v44[2] = v12;
  v44[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v44);
  v13 = MEMORY[0x1C3B8BC74](v44, a1);
  MEMORY[0x1C3B8BC74](v13, " (");
  v14 = ctu::operator<<();
  v15 = MEMORY[0x1C3B8BC74](v14, ") ");
  v16 = MEMORY[0x1C3B8BC74](v15, a3);
  MEMORY[0x1C3B8BC74](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  v17 = (ctu::Clock *)MEMORY[0x1C3B8BC80](v44, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  v19 = abm::debug::kLogDomainMap[a2];
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    v39 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v39) = v20;
  v22 = __dst;
  if (v20)
LABEL_13:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  MEMORY[0x1C3B8B7D0](v44);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v44);
  ctu::LogMessage::LogMessage();
  v40 = v18;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E7915EE0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  v41 = v26;
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  ctu::LogServer::log();
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      v31 = qword_1ED70F770;
      if (qword_1ED70F770)
      {
        if (os_log_type_enabled((os_log_t)qword_1ED70F770, OS_LOG_TYPE_DEBUG))
        {
          v32 = __p;
          if (v43 < 0)
            v32 = (void **)__p[0];
          goto LABEL_46;
        }
      }
    }
  }
  else
  {
    v31 = qword_1ED70F768;
    if (qword_1ED70F768 && os_log_type_enabled((os_log_t)qword_1ED70F768, OS_LOG_TYPE_DEBUG))
    {
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
LABEL_46:
      *(_DWORD *)buf = 67109634;
      v49 = a5;
      v50 = 2080;
      v51 = a3;
      v52 = 2080;
      v53 = v32;
      _os_log_debug_impl(&dword_1BF566000, v31, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      v33 = v41;
      if (!v41)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v33 = v41;
  if (!v41)
    goto LABEL_36;
LABEL_32:
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_36:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  MEMORY[0x1C3B8B800](v44);
  v23 = v47;
  if (v47)
    goto LABEL_39;
}

void sub_1BF5EBB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C3B8B800](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C3B8B800](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, "", (uint64_t)"%s", (uint64_t)va);
}

void coex::XpcClient::create(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type size;
  void *v5;
  std::string __p;

  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_9;
  }
  else
  {
    __p = *(std::string *)a1;
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = __p.__r_.__value_.__l.__size_;
    if (!v3)
LABEL_9:
      std::string::__assign_external(&__p, "com.apple.WirelessCoexManager", 0x1DuLL);
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x80uLL);
  coex::XpcClient::XpcClient((uint64_t)v5, (__int128 *)&__p);
  std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(a2, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF5EBD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t coex::XpcClient::XpcClient(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  NSObject *v6;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  _OWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 8;
  strcpy((char *)__p, "coex.xpc");
  ctu::XpcClient::XpcClient();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "coex.xpc");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 72), (const ctu::OsLogLogger *)&v8);
  MEMORY[0x1C3B8B74C](&v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(_QWORD *)a1 = &off_1E7915F50;
  v4 = (_OWORD *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
    *v4 = v5;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 103) < 0)
      v4 = *(_OWORD **)v4;
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Created with name %s", buf, 0xCu);
  }
  return a1;
}

void coex::XpcClient::~XpcClient(coex::XpcClient *this)
{
  *(_QWORD *)this = &off_1E7915F50;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B8B74C]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
}

{
  *(_QWORD *)this = &off_1E7915F50;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B8B74C]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E7915F50;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((_QWORD **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  MEMORY[0x1C3B8B74C]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);
  operator delete(v2);
}

const char *coex::XpcClient::getName(coex::XpcClient *this)
{
  return "coex.xpc";
}

void coex::XpcClient::start(coex::XpcClient *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex9XpcClient5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_8;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_11_1;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN4coex9XpcClient5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char **v2;
  xpc_connection_t mach_service;
  xpc_object_t v4;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const char **)(v1 + 80);
  if (*(char *)(v1 + 103) < 0)
  {
    mach_service = xpc_connection_create_mach_service(*v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
      goto LABEL_3;
  }
  else
  {
    mach_service = xpc_connection_create_mach_service((const char *)v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
    {
LABEL_3:
      v4 = mach_service;
      object = mach_service;
      goto LABEL_6;
    }
  }
  v4 = xpc_null_create();
  object = v4;
  if (!v4)
  {
    v4 = 0;
    object = xpc_null_create();
    goto LABEL_7;
  }
LABEL_6:
  xpc_retain(v4);
LABEL_7:
  ctu::XpcClient::setServer_sync();
  xpc_release(object);
  coex::XpcClient::register_sync((coex::XpcClient *)v1);
  xpc_release(v4);
}

void sub_1BF5EC1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void coex::XpcClient::register_sync(coex::XpcClient *this)
{
  NSObject *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[5];
  xpc_object_t object;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 9);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Registering", (uint8_t *)v8, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kWCMRegisterProcess_ProcessId", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (v4)
  {
    xpc_retain(v4);
    v7 = v4;
  }
  else
  {
    v7 = xpc_null_create();
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v8[3] = &__block_descriptor_tmp_7;
  v10 = 1;
  v8[4] = this;
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  v11 = 0;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v8);
  xpc_release(object);
  xpc_release(v7);
  xpc_release(v4);
}

void coex::XpcClient::registerCommandHandler(uint64_t a1, int a2, void **a3)
{
  void *v4;
  _QWORD v5[5];
  void *aBlock;
  int v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_5_1;
  v5[4] = a1;
  v7 = a2;
  v4 = *a3;
  if (*a3)
    v4 = _Block_copy(v4);
  aBlock = v4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    v4 = _Block_copy(v2);
    v6 = (_QWORD *)(v3 + 112);
    v5 = *(_QWORD *)(v3 + 112);
    v7 = *(_DWORD *)(a1 + 48);
    if (v5)
      goto LABEL_7;
    goto LABEL_5;
  }
  v4 = 0;
  v6 = (_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 112);
  v7 = *(_DWORD *)(a1 + 48);
  if (!v5)
  {
LABEL_5:
    v8 = v6;
LABEL_11:
    v10 = operator new(0x30uLL);
    v10[8] = v7;
    *((_QWORD *)v10 + 5) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v6 = v10;
    v11 = **(_QWORD **)(v3 + 104);
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *(_QWORD *)(v3 + 104) = v11;
      v12 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 112), v12);
    ++*(_QWORD *)(v3 + 120);
    v13 = (const void *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = v4;
    if (!v13)
      return;
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      v8 = (_QWORD *)v5;
      v9 = *(_DWORD *)(v5 + 32);
      if (v7 >= v9)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_11;
    }
    if (v9 >= v7)
      break;
    v5 = v8[1];
    if (!v5)
    {
      v6 = v8 + 1;
      goto LABEL_11;
    }
  }
  v13 = (const void *)v8[5];
  v8[5] = v4;
  if (v13)
    goto LABEL_16;
}

void sub_1BF5EC598(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  NSObject *v13;
  void *p_p;
  void *__p;
  char v16;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  v6 = xpc_uint64_create(*(unsigned int *)(a1 + 48));
  if (!v6)
    v6 = xpc_null_create();
  v7 = xdict;
  xpc_dictionary_set_value(xdict, "kMessageId", v6);
  v8 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v8);
  v9 = *(xpc_object_t *)(a1 + 40);
  if (v9)
    xpc_retain(*(xpc_object_t *)(a1 + 40));
  else
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kMessageArgs", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_uint64_create(*(unsigned int *)(a1 + 52));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSubId", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 40), xdict);
  v13 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v19 = p_p;
    _os_log_debug_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEBUG, "#D Sending Message: \n\t%s\n", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
    v7 = xdict;
  }
  xpc_release(v7);
}

void sub_1BF5EC840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void coex::XpcClient::handleServerError_sync(coex::XpcClient *a1, xpc::object *a2)
{
  NSObject *v4;
  void **v5;
  void *__p;
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 9);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    xpc::object::to_string(a2);
    v5 = v7 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Server Error: %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p);
  }
  if (*(_QWORD *)a2 == MEMORY[0x1E0C81258])
    coex::XpcClient::register_sync(a1);
}

_QWORD *std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916048;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF5ECAF8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF5ECB18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_pt"
                     "rIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__1"
                                "10shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*a1);
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(a1[1]);
    v2 = (const void *)a1[5];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *asString(unsigned int a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E79161F8[(char)a1];
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  uint64_t IsInternalBuild;

  if (a2 == 1)
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  if (a2)
    return (*(uint64_t (**)(capabilities::abs *))(*(_QWORD *)a1 + 112))(a1);
  IsInternalBuild = config::hw::watch(a1);
  if ((_DWORD)IsInternalBuild
    && ((IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
     || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild)))
  {
    return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
  else
  {
    return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_1E79160F0;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_1E79160F0;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = off_1E79160F0;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *v3 = off_1E79160F0;
  v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  ServiceManager *v4;
  ServiceManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double result;
  uint64_t v14;
  std::__shared_weak_count *v15;
  ABMServiceManager *v16[2];

  v4 = (ServiceManager *)operator new(0xD8uLL);
  v5 = v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)v4 = off_1E79160F0;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(_QWORD *)v5 = off_1E79160F0;
  *((_QWORD *)v5 + 25) = v14;
  *((_QWORD *)v5 + 26) = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v16[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v16[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v16, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v16[0]);
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  ABMServiceManager::init(v16[0]);
  result = *(double *)v16;
  *a2 = *(_OWORD *)v16;
  return result;
}

void sub_1BF5ECFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5ECFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5ECFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5ECFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  CommandDriverFactory *v2;
  unint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t buf[16];

  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70F4D0;
  }
  v38 = v3;
  v39 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v8 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    v16 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v15)
        goto LABEL_49;
      goto LABEL_23;
    }
LABEL_22:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v15)
      goto LABEL_49;
    goto LABEL_23;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v36 = *((_QWORD *)this + 25);
  v37 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  CommandDriverFactory::setRegistry();
  if (!v37)
    goto LABEL_22;
  v13 = &v37->__shared_owners_;
  do
    v14 = __ldaxr((unint64_t *)v13);
  while (__stlxr(v14 - 1, (unint64_t *)v13));
  if (v14)
    goto LABEL_22;
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15)
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_23:
  v17 = *((_QWORD *)this + 9);
  v18 = std::__shared_weak_count::lock(v15);
  if (!v18)
    goto LABEL_49;
  v19 = v18;
  v33 = v17;
  v34 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  PowerManager::create(&v33, buf);
  v35 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v35);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v30 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v31 = (unint64_t *)(v39 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1BF5ED30C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF5ED328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5ED344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  NSObject *v1;
  char *v2;
  ABMServiceManager *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E79160F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E79160F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
LABEL_5:
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v5);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF5ED7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF5ED80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916198;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF5ED928(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF5ED948(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NetworkingModule *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NetworkingModule **v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NetworkingModule *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NetworkingModule **v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  NetworkingModule *v51;
  NetworkingModule *v52;
  unint64_t *v53;
  unint64_t v54;
  NetworkingModule **v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  NetworkingModule *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  NetworkingModule *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  NetworkingModule *v73;
  std::__shared_weak_count *v74;
  NetworkingModule *v75;
  std::__shared_weak_count *v76;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3)
    goto LABEL_80;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_80;
  v6 = v5;
  v71 = v4;
  v72 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v71, &v73);
  v11 = v73;
  if (v73)
  {
    v12 = v74;
    v75 = v73;
    v76 = v74;
    if (v74)
    {
      v13 = (unint64_t *)&v74->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v15 >= *(_QWORD *)(v2 + 136))
    {
      v16 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v17 = v76;
      *(_QWORD *)(v2 + 128) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      *v15 = v11;
      v15[1] = (NetworkingModule *)v12;
      *(_QWORD *)(v2 + 128) = v15 + 2;
    }
  }
  v20 = v74;
  if (v74)
  {
    v21 = (unint64_t *)&v74->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23)
    goto LABEL_80;
  v24 = *(_QWORD *)(v2 + 72);
  v25 = std::__shared_weak_count::lock(v23);
  if (!v25)
    goto LABEL_80;
  v26 = v25;
  v67 = v24;
  v68 = v25;
  v27 = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  CPMSModule::create((capabilities::abs *)&v67, &v69);
  v31 = v69;
  if (v69)
  {
    v32 = v70;
    v75 = v69;
    v76 = v70;
    if (v70)
    {
      v33 = (unint64_t *)&v70->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v35 >= *(_QWORD *)(v2 + 136))
    {
      v36 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v37 = v76;
      *(_QWORD *)(v2 + 128) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      *v35 = v31;
      v35[1] = (NetworkingModule *)v32;
      *(_QWORD *)(v2 + 128) = v35 + 2;
    }
  }
  v40 = v70;
  if (v70)
  {
    v41 = (unint64_t *)&v70->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  v43 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v43 || (v44 = *(_QWORD *)(v2 + 72), (v45 = std::__shared_weak_count::lock(v43)) == 0))
LABEL_80:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v46 = v45;
  v63 = v44;
  v64 = v45;
  v47 = (unint64_t *)&v45->__shared_weak_owners_;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = (unint64_t *)&v45->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v46);
  }
  NetworkingModule::create(&v63, &v65);
  v51 = v65;
  if (v65)
  {
    v52 = (NetworkingModule *)v66;
    v75 = v65;
    v76 = v66;
    if (v66)
    {
      v53 = (unint64_t *)&v66->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v55 >= *(_QWORD *)(v2 + 136))
    {
      v56 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v75);
      v57 = v76;
      *(_QWORD *)(v2 + 128) = v56;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
    else
    {
      *v55 = v51;
      v55[1] = v52;
      *(_QWORD *)(v2 + 128) = v55 + 2;
    }
  }
  v60 = v66;
  if (v66)
  {
    v61 = (unint64_t *)&v66->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  char *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  config::hw *v109;
  capabilities::abs *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  char *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  char *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  __n128 v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  char *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  _QWORD *v242;
  char *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  _QWORD *v262;
  char *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  __int128 v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  __int128 v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  __int128 v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  __int128 v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  __int128 v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  __int128 v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  __int128 v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  __int128 v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  __int128 v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  __int128 v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  __int128 v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  __int128 v307;
  __int128 v308;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3)
    goto LABEL_347;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_347;
  v6 = v5;
  v305 = v4;
  v306 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = *(std::__shared_weak_count **)(v2 + 208);
  v303 = *(_QWORD *)(v2 + 200);
  v304 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  TransportModule::create(&v305, &v303, &v307);
  v14 = v307;
  if ((_QWORD)v307)
  {
    v15 = *((_QWORD *)&v307 + 1);
    v308 = v307;
    if (*((_QWORD *)&v307 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v18 >= *(_QWORD *)(v2 + 160))
    {
      v19 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      *v18 = v14;
      v18[1] = v15;
      *(_QWORD *)(v2 + 152) = v18 + 2;
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
  if (*((_QWORD *)&v307 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v304;
  if (v304)
  {
    v27 = (unint64_t *)&v304->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v306)
    std::__shared_weak_count::__release_weak(v306);
  v29 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v29)
    goto LABEL_347;
  v30 = *(_QWORD *)(v2 + 72);
  v31 = std::__shared_weak_count::lock(v29);
  if (!v31)
    goto LABEL_347;
  v32 = v31;
  v300 = v30;
  v301 = v31;
  v33 = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  v35 = (unint64_t *)&v31->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  RadioModule::create(&v300, &v302);
  v37 = v302;
  if ((_QWORD)v302)
  {
    v38 = *((_QWORD *)&v302 + 1);
    v308 = v302;
    if (*((_QWORD *)&v302 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v41 >= *(_QWORD *)(v2 + 160))
    {
      v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    else
    {
      *v41 = v37;
      v41[1] = v38;
      *(_QWORD *)(v2 + 152) = v41 + 2;
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
  if (*((_QWORD *)&v302 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v301)
    std::__shared_weak_count::__release_weak(v301);
  v49 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v49)
    goto LABEL_347;
  v50 = *(_QWORD *)(v2 + 72);
  v51 = std::__shared_weak_count::lock(v49);
  if (!v51)
    goto LABEL_347;
  v52 = v51;
  v297 = v50;
  v298 = v51;
  v53 = (unint64_t *)&v51->__shared_weak_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v55 = (unint64_t *)&v51->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v52);
  }
  Simulator::create(&v297, &v299);
  v57 = v299;
  if ((_QWORD)v299)
  {
    v58 = *((_QWORD *)&v299 + 1);
    v308 = v299;
    if (*((_QWORD *)&v299 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v61 >= *(_QWORD *)(v2 + 160))
    {
      v62 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v62;
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    else
    {
      *v61 = v57;
      v61[1] = v58;
      *(_QWORD *)(v2 + 152) = v61 + 2;
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
  if (*((_QWORD *)&v299 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v298)
    std::__shared_weak_count::__release_weak(v298);
  v69 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v69)
    goto LABEL_347;
  v70 = *(_QWORD *)(v2 + 72);
  v71 = std::__shared_weak_count::lock(v69);
  if (!v71)
    goto LABEL_347;
  v72 = v71;
  v294 = v70;
  v295 = v71;
  v73 = (unint64_t *)&v71->__shared_weak_owners_;
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
  v75 = (unint64_t *)&v71->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v72);
  }
  TraceManager::create(&v294, (uint64_t *)&v296);
  v77 = v296;
  if ((_QWORD)v296)
  {
    v78 = *((_QWORD *)&v296 + 1);
    v308 = v296;
    if (*((_QWORD *)&v296 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v81 >= *(_QWORD *)(v2 + 160))
    {
      v82 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v82;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
    else
    {
      *v81 = v77;
      v81[1] = v78;
      *(_QWORD *)(v2 + 152) = v81 + 2;
    }
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v296 + 1);
  if (*((_QWORD *)&v296 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v295)
    std::__shared_weak_count::__release_weak(v295);
  v89 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v89 || (v90 = *(_QWORD *)(v2 + 72), (v91 = std::__shared_weak_count::lock(v89)) == 0))
LABEL_347:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v92 = v91;
  v291 = v90;
  v292 = v91;
  v93 = (unint64_t *)&v91->__shared_weak_owners_;
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  v95 = (unint64_t *)&v91->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v92);
  }
  AWDModule::create(&v291, &v293);
  v97 = v293;
  if ((_QWORD)v293)
  {
    v98 = *((_QWORD *)&v293 + 1);
    v308 = v293;
    if (*((_QWORD *)&v293 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v101 >= *(_QWORD *)(v2 + 160))
    {
      v102 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v102;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else
    {
      *v101 = v97;
      v101[1] = v98;
      *(_QWORD *)(v2 + 152) = v101 + 2;
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
  if (*((_QWORD *)&v293 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (config::hw *)v292;
  if (v292)
    std::__shared_weak_count::__release_weak(v292);
  v110 = (capabilities::abs *)config::hw::watch(v109);
  if ((v110 & 1) == 0)
  {
    v111 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v111)
      goto LABEL_347;
    v112 = *(_QWORD *)(v2 + 72);
    v113 = std::__shared_weak_count::lock(v111);
    if (!v113)
      goto LABEL_347;
    v114 = v113;
    v288 = v112;
    v289 = v113;
    v115 = (unint64_t *)&v113->__shared_weak_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    v117 = (unint64_t *)&v113->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v114);
    }
    HealthModule::create(&v288, &v290);
    v119 = v290;
    if ((_QWORD)v290)
    {
      v120 = *((_QWORD *)&v290 + 1);
      v308 = v290;
      if (*((_QWORD *)&v290 + 1))
      {
        v121 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = *(_QWORD **)(v2 + 152);
      if ((unint64_t)v123 >= *(_QWORD *)(v2 + 160))
      {
        v124 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
        v125 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
        *(_QWORD *)(v2 + 152) = v124;
        if (v125)
        {
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
      }
      else
      {
        *v123 = v119;
        v123[1] = v120;
        *(_QWORD *)(v2 + 152) = v123 + 2;
      }
    }
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v129 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v110 = (capabilities::abs *)v289;
    if (v289)
      std::__shared_weak_count::__release_weak(v289);
  }
  capabilities::abs::supportedSARFeatures(v110);
  if (capabilities::abs::operator&())
  {
    v131 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v131)
      goto LABEL_347;
    v132 = *(_QWORD *)(v2 + 72);
    v133 = std::__shared_weak_count::lock(v131);
    if (!v133)
      goto LABEL_347;
    v134 = v133;
    v285 = v132;
    v286 = v133;
    v135 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    v137 = (unint64_t *)&v133->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v134);
    }
    AntennaModule::create(&v285, (uint64_t *)&v287);
    v139 = v287;
    if ((_QWORD)v287)
    {
      v140 = *((_QWORD *)&v287 + 1);
      v308 = v287;
      if (*((_QWORD *)&v287 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      v143 = *(_QWORD **)(v2 + 152);
      if ((unint64_t)v143 >= *(_QWORD *)(v2 + 160))
      {
        v157 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
        v158 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
        *(_QWORD *)(v2 + 152) = v157;
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
      }
      else
      {
        *v143 = v139;
        v143[1] = v140;
        *(_QWORD *)(v2 + 152) = v143 + 2;
      }
    }
    v161 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (*((_QWORD *)&v287 + 1))
    {
      v162 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      goto LABEL_212;
    }
  }
  else
  {
    v144 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v144)
      goto LABEL_347;
    v145 = *(_QWORD *)(v2 + 72);
    v146 = std::__shared_weak_count::lock(v144);
    if (!v146)
      goto LABEL_347;
    v147 = v146;
    v285 = v145;
    v286 = v146;
    v148 = (unint64_t *)&v146->__shared_weak_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
    v150 = (unint64_t *)&v146->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v147);
    }
    SARModule::create(&v285, (uint64_t)&v287);
    v152 = v287;
    if ((_QWORD)v287)
    {
      v153 = *((_QWORD *)&v287 + 1);
      v308 = v287;
      if (*((_QWORD *)&v287 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
      }
      v156 = *(_QWORD **)(v2 + 152);
      if ((unint64_t)v156 >= *(_QWORD *)(v2 + 160))
      {
        v164 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
        *(_QWORD *)(v2 + 152) = v164;
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
      }
      else
      {
        *v156 = v152;
        v156[1] = v153;
        *(_QWORD *)(v2 + 152) = v156 + 2;
      }
    }
    v161 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (*((_QWORD *)&v287 + 1))
    {
      v168 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
      do
        v163 = __ldaxr(v168);
      while (__stlxr(v163 - 1, v168));
LABEL_212:
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
  }
  if (v286)
    std::__shared_weak_count::__release_weak(v286);
  v169 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v169)
    goto LABEL_347;
  v170 = *(_QWORD *)(v2 + 72);
  v171 = std::__shared_weak_count::lock(v169);
  if (!v171)
    goto LABEL_347;
  v172 = v171;
  v282 = v170;
  v283 = v171;
  v173 = (unint64_t *)&v171->__shared_weak_owners_;
  do
    v174 = __ldxr(v173);
  while (__stxr(v174 + 1, v173));
  v175 = (unint64_t *)&v171->__shared_owners_;
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (!v176)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v172);
  }
  StatsModule::create(&v282, (uint64_t *)&v284);
  v177 = v284;
  if ((_QWORD)v284)
  {
    v178 = *((_QWORD *)&v284 + 1);
    v308 = v284;
    if (*((_QWORD *)&v284 + 1))
    {
      v179 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    v181 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v181 >= *(_QWORD *)(v2 + 160))
    {
      v182 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v183 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v182;
      if (v183)
      {
        v184 = (unint64_t *)&v183->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
    }
    else
    {
      *v181 = v177;
      v181[1] = v178;
      *(_QWORD *)(v2 + 152) = v181 + 2;
    }
  }
  v186 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
  if (*((_QWORD *)&v284 + 1))
  {
    v187 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (v283)
    std::__shared_weak_count::__release_weak(v283);
  v189 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v189)
    goto LABEL_347;
  v190 = *(_QWORD *)(v2 + 72);
  v191 = std::__shared_weak_count::lock(v189);
  if (!v191)
    goto LABEL_347;
  v192 = v191;
  v279 = v190;
  v280 = v191;
  v193 = (unint64_t *)&v191->__shared_weak_owners_;
  do
    v194 = __ldxr(v193);
  while (__stxr(v194 + 1, v193));
  v195 = (unint64_t *)&v191->__shared_owners_;
  do
    v196 = __ldaxr(v195);
  while (__stlxr(v196 - 1, v195));
  if (!v196)
  {
    ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
    std::__shared_weak_count::__release_weak(v192);
  }
  FSModuleICE::create(&v279, &v281);
  v197 = v281;
  if ((_QWORD)v281)
  {
    v198 = *((_QWORD *)&v281 + 1);
    v308 = v281;
    if (*((_QWORD *)&v281 + 1))
    {
      v199 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
    }
    v201 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v201 >= *(_QWORD *)(v2 + 160))
    {
      v202 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v203 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v202;
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
    }
    else
    {
      *v201 = v197;
      v201[1] = v198;
      *(_QWORD *)(v2 + 152) = v201 + 2;
    }
  }
  v206 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
  if (*((_QWORD *)&v281 + 1))
  {
    v207 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v280)
    std::__shared_weak_count::__release_weak(v280);
  v209 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v209)
    goto LABEL_347;
  v210 = *(_QWORD *)(v2 + 72);
  v211 = std::__shared_weak_count::lock(v209);
  if (!v211)
    goto LABEL_347;
  v212 = v211;
  v276 = v210;
  v277 = v211;
  v213 = (unint64_t *)&v211->__shared_weak_owners_;
  do
    v214 = __ldxr(v213);
  while (__stxr(v214 + 1, v213));
  v215 = (unint64_t *)&v211->__shared_owners_;
  do
    v216 = __ldaxr(v215);
  while (__stlxr(v216 - 1, v215));
  if (!v216)
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v212);
  }
  v217.n128_f64[0] = BootModuleICE::create(&v276, &v278);
  v218 = v278;
  if ((_QWORD)v278)
  {
    v219 = *((_QWORD *)&v278 + 1);
    v308 = v278;
    if (*((_QWORD *)&v278 + 1))
    {
      v220 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    v222 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v222 >= *(_QWORD *)(v2 + 160))
    {
      v223 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v224 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v223;
      if (v224)
      {
        v225 = (unint64_t *)&v224->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
    }
    else
    {
      *v222 = v218;
      v222[1] = v219;
      *(_QWORD *)(v2 + 152) = v222 + 2;
    }
  }
  v227 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
  if (*((_QWORD *)&v278 + 1))
  {
    v228 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v227->__on_zero_shared)(v227, v217);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  if (v277)
    std::__shared_weak_count::__release_weak(v277);
  v230 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v230)
    goto LABEL_347;
  v231 = *(_QWORD *)(v2 + 72);
  v232 = std::__shared_weak_count::lock(v230);
  if (!v232)
    goto LABEL_347;
  v233 = v232;
  v273 = v231;
  v274 = v232;
  v234 = (unint64_t *)&v232->__shared_weak_owners_;
  do
    v235 = __ldxr(v234);
  while (__stxr(v235 + 1, v234));
  v236 = (unint64_t *)&v232->__shared_owners_;
  do
    v237 = __ldaxr(v236);
  while (__stlxr(v237 - 1, v236));
  if (!v237)
  {
    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
    std::__shared_weak_count::__release_weak(v233);
  }
  AccessoryModule::create((capabilities::abs *)&v273, (std::__shared_weak_count_vtbl **)&v275);
  v238 = v275;
  if ((_QWORD)v275)
  {
    v239 = *((_QWORD *)&v275 + 1);
    v308 = v275;
    if (*((_QWORD *)&v275 + 1))
    {
      v240 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 1, v240));
    }
    v242 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v242 >= *(_QWORD *)(v2 + 160))
    {
      v243 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v243;
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
    }
    else
    {
      *v242 = v238;
      v242[1] = v239;
      *(_QWORD *)(v2 + 152) = v242 + 2;
    }
  }
  v247 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
  if (*((_QWORD *)&v275 + 1))
  {
    v248 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  if (v274)
    std::__shared_weak_count::__release_weak(v274);
  v250 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v250)
    goto LABEL_347;
  v251 = *(_QWORD *)(v2 + 72);
  v252 = std::__shared_weak_count::lock(v250);
  if (!v252)
    goto LABEL_347;
  v253 = v252;
  v270 = v251;
  v271 = v252;
  v254 = (unint64_t *)&v252->__shared_weak_owners_;
  do
    v255 = __ldxr(v254);
  while (__stxr(v255 + 1, v254));
  v256 = (unint64_t *)&v252->__shared_owners_;
  do
    v257 = __ldaxr(v256);
  while (__stlxr(v257 - 1, v256));
  if (!v257)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v253);
  }
  coex::Module::create(&v270, &v272);
  v258 = v272;
  if ((_QWORD)v272)
  {
    v259 = *((_QWORD *)&v272 + 1);
    v308 = v272;
    if (*((_QWORD *)&v272 + 1))
    {
      v260 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
      do
        v261 = __ldxr(v260);
      while (__stxr(v261 + 1, v260));
    }
    v262 = *(_QWORD **)(v2 + 152);
    if ((unint64_t)v262 >= *(_QWORD *)(v2 + 160))
    {
      v263 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v308);
      v264 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      *(_QWORD *)(v2 + 152) = v263;
      if (v264)
      {
        v265 = (unint64_t *)&v264->__shared_owners_;
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
        }
      }
    }
    else
    {
      *v262 = v258;
      v262[1] = v259;
      *(_QWORD *)(v2 + 152) = v262 + 2;
    }
  }
  v267 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v268 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  if (v271)
    std::__shared_weak_count::__release_weak(v271);
}

uint64_t __cxx_global_var_init_7()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  NSObject *v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v7;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  _BYTE v12[12];
  statfs v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = "/private/var";
    v3 = "Failed to statfs: %s";
    v4 = v2;
LABEL_9:
    v6 = 12;
LABEL_10:
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v12 = v13.f_mntfromname;
    v3 = "Failed to get mount point: %s";
    v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v12 = 0;
      v3 = "APFS volume role error: %d";
      v4 = v9;
      v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v3 = "APFS volume role does not match";
      v4 = v10;
      v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v12 = 0;
    _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

const char *SARModule::getName(SARModule *this)
{
  return "sar.mod";
}

void SARModule::create(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  NSObject *v21;
  uint8_t v22[16];
  uint64_t v23[2];

  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x138uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v23[0] = v6;
  v23[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  SARModule::SARModule((uint64_t)v4, v23);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E79164B0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(_QWORD *)(a2 + 8) = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 7);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 6) = v5;
    *((_QWORD *)v5 + 7) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 6) = v5;
    *((_QWORD *)v5 + 7) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_17:
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (!*(_QWORD *)a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v21 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v21 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
    }
    *(_WORD *)v22 = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Failed to create SAR Module!", v22, 2u);
  }
LABEL_23:
  SARModule::init(*(SARModule **)a2);
}

void sub_1BF5EFF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF5EFF28(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF5EFF48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  __cxa_end_catch();
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void SARModule::init(SARModule *this)
{
  CommandDriverFactory *v2;
  NSObject *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  capabilities::radio *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  dispatch_object_t object[2];
  std::__shared_weak_count *v43;
  __int128 v44;
  uint8_t buf[16];

  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v5 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = off_1ED70F4D0;
  }
  object[1] = v3;
  v43 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v8 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v10 = *((_QWORD *)this + 9);
  object[0] = v10;
  if (v10)
    dispatch_retain(v10);
  (*((void (**)(__int128 *__return_ptr, NSObject *, dispatch_object_t *))v3->isa + 7))(&v44, v3, object);
  v11 = (_QWORD *)((char *)this + 280);
  v12 = v44;
  v44 = 0uLL;
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  *(_OWORD *)((char *)this + 280) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (capabilities::radio *)object[0];
  if (object[0])
    dispatch_release(object[0]);
  v20 = v43;
  if (!v43)
    goto LABEL_59;
  v21 = (unint64_t *)&v43->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (*v11)
    {
LABEL_30:
      if (capabilities::radio::maverick(v19))
      {
        memset(buf, 170, sizeof(buf));
        v24 = *((_QWORD *)this + 6);
        v23 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v23 || (v25 = std::__shared_weak_count::lock(v23)) == 0)
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v26 = v25;
        v27 = (std::__shared_weak_count *)operator new(0x30uLL);
        v28 = v27;
        v27->__shared_owners_ = 0;
        v27->__shared_weak_owners_ = 0;
        v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E79165A8;
        v29 = &v27[1].__vftable;
        v27->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916500;
        p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
        v27[1].__shared_owners_ = v24;
        v27[1].__shared_weak_owners_ = (uint64_t)v26;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v32 = (unint64_t *)&v26->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (v33)
        {
          v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7916550;
          *(_QWORD *)buf = v27 + 1;
          *(_QWORD *)&buf[8] = v27;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7916550;
          *(_QWORD *)buf = v29;
          *(_QWORD *)&buf[8] = v28;
        }
        v35 = (unint64_t *)&v28->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        antenna::CommandDriver::registerHandler();
        if (v28)
        {
          v37 = (unint64_t *)&v28->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v39 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      return;
    }
  }
  else
  {
LABEL_59:
    if (*v11)
      goto LABEL_30;
  }
  v34 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v34, OS_LOG_TYPE_ERROR, "Failed to create antenna command driver", buf, 2u);
  }
}

void sub_1BF5F03A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF5F03BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5F03D0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF5F03EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SARModule::SARModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7916228;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("sar.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 72) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "sar.mod");
  *(_QWORD *)a1 = off_1E7916228;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  return a1;
}

void sub_1BF5F0598(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void SARModule::~SARModule(SARModule *this)
{
  char *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  uint8_t v47[16];

  *(_QWORD *)this = off_1E7916228;
  v2 = (char *)this + 80;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v47, 2u);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v10)
    goto LABEL_17;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v13)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v13)
      goto LABEL_23;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_23:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v16)
    goto LABEL_27;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_33:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v22)
    goto LABEL_37;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  else
  {
LABEL_37:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_43:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v28)
    goto LABEL_47;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v31)
      goto LABEL_53;
  }
  else
  {
LABEL_47:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v31)
      goto LABEL_53;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_53:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v34)
    goto LABEL_57;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v37)
      goto LABEL_63;
  }
  else
  {
LABEL_57:
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v37)
      goto LABEL_63;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_63:
  MEMORY[0x1C3B8B74C](v2);
  v40 = *((_QWORD *)this + 9);
  if (v40)
    dispatch_release(v40);
  v41 = *((_QWORD *)this + 8);
  if (v41)
    dispatch_release(v41);
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  *(_QWORD *)this = off_1E79228B8;
  v43 = *((_QWORD *)this + 3);
  if (v43)
  {
    v44 = *((_QWORD *)this + 4);
    v45 = (void *)*((_QWORD *)this + 3);
    if (v44 != v43)
    {
      do
      {
        if (*(char *)(v44 - 1) < 0)
          operator delete(*(void **)(v44 - 24));
        v44 -= 24;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v43;
    operator delete(v45);
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
}

{
  void *v1;

  SARModule::~SARModule(this);
  operator delete(v1);
}

void SARModule::shutdown(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  v5 = (std::__shared_weak_count *)a1[7];
  if (!v5 || (v6 = a1[6], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = a1;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = a1[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

_BYTE *SARModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void SARModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint8_t v16[16];

  v4 = a1[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I initialize", v16, 2u);
  }
  v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6 || (v7 = a1[6], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = a1;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[8];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::finishInitialization_sync(SARModule *this)
{
  NSObject *v2;
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  capabilities::abs *v52;
  uint64_t v53;
  NSObject *v54;
  AppleSARHelper *v55;
  AppleSARHelper *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  AppleSARHelper *v74;
  AppleSARHelper *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  NSObject *v89;
  NSObject *v90;
  const char *v91;
  NSObject *v92;
  AppleSARHelper *v93;
  AppleSARHelper *v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  AppleSARHelper *v109;
  AppleSARHelper *v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char v121;
  unint64_t *v122;
  unint64_t v123;
  NSObject *v124;
  AppleSARHelper *v125;
  AppleSARHelper *v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char v137;
  unint64_t *v138;
  unint64_t v139;
  NSObject *v140;
  AppleSARHelper *v141;
  AppleSARHelper *v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char v153;
  unint64_t *v154;
  unint64_t v155;
  NSObject *v156;
  AppleSARHelper *v157;
  AppleSARHelper *v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char v169;
  unint64_t *v170;
  unint64_t v171;
  NSObject *v172;
  AppleSARHelper *v173;
  AppleSARHelper *v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char v185;
  unint64_t *v186;
  unint64_t v187;
  NSObject *v188;
  std::__shared_weak_count *v189;
  _QWORD v190[6];
  std::__shared_weak_count *v191;
  void *v192;
  dispatch_object_t v193;
  void *v194[2];
  unint64_t v195;
  _QWORD v196[6];
  std::__shared_weak_count *v197;
  void *v198;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v201;
  _QWORD aBlock[6];
  std::__shared_weak_count *v203;
  const void *v204;
  dispatch_object_t v205;
  void *v206[2];
  unint64_t v207;
  const void *v208;
  void *__dst[2];
  unint64_t v210;
  unsigned int v211;
  __int128 buf;
  unint64_t v213[4];

  v213[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization", (uint8_t *)&buf, 2u);
  }
  v3 = (const char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v210 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v210) = v4;
    v6 = __dst;
    if (!v4)
      goto LABEL_11;
  }
  memmove(v6, v3, (size_t)v5);
LABEL_11:
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v208 = 0;
  AppleBasebandManager::create();
  v9 = buf;
  buf = 0uLL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 88) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_20;
  v14 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_20:
    v16 = v208;
    if (!v208)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v16 = v208;
  if (v208)
LABEL_21:
    CFRelease(v16);
LABEL_22:
  if (SHIBYTE(v210) < 0)
    operator delete(__dst[0]);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v17 || (v18 = *((_QWORD *)this + 6), (v19 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  v25 = (const void *)*MEMORY[0x1E0CFBD68];
  v26 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  v189 = v20;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v206[1] = v27;
    v207 = v30 | 0x8000000000000000;
    v206[0] = v28;
    v20 = v189;
  }
  else
  {
    HIBYTE(v207) = v26;
    v28 = v206;
    if (!v26)
      goto LABEL_40;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_40:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  aBlock[5] = v18;
  v203 = v20;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 8);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v204 = v32;
  v205 = v33;
  AppleBasebandManager::setEventHandler();
  if (v205)
    dispatch_release(v205);
  if (v204)
    _Block_release(v204);
  if (SHIBYTE(v207) < 0)
    operator delete(v206[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9A8];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v201 = v39 | 0x8000000000000000;
    __p[0] = v37;
    v20 = v189;
  }
  else
  {
    HIBYTE(v201) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_58;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_58:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v196[0] = MEMORY[0x1E0C809B0];
  v196[1] = 3321888768;
  v196[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4;
  v196[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v196[4] = this;
  v196[5] = v18;
  v197 = v20;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v196);
  v42 = *((_QWORD *)this + 8);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v198 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v198)
    _Block_release(v198);
  if (SHIBYTE(v201) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFB0B0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v194[1] = v45;
    v195 = v48 | 0x8000000000000000;
    v194[0] = v46;
    v20 = v189;
  }
  else
  {
    HIBYTE(v195) = v44;
    v46 = v194;
    if (!v44)
      goto LABEL_76;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_76:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v190[0] = MEMORY[0x1E0C809B0];
  v190[1] = 3321888768;
  v190[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2;
  v190[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v190[4] = this;
  v190[5] = v18;
  v191 = v20;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v190);
  v51 = *((_QWORD *)this + 8);
  if (v51)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  v192 = v50;
  v193 = v51;
  AppleBasebandManager::setEventHandler();
  if (v193)
    dispatch_release(v193);
  if (v192)
    _Block_release(v192);
  if (SHIBYTE(v195) < 0)
    operator delete(v194[0]);
  v52 = (capabilities::abs *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 11));
  capabilities::abs::supportedSARFeatures(v52);
  v53 = capabilities::abs::operator&();
  if ((_DWORD)v53)
  {
    v54 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Getting WiFi Status from kernel", (uint8_t *)&buf, 2u);
    }
    v55 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    v56 = (AppleSARHelper *)off_1EF57D890;
    if (!off_1EF57D890)
    {
      AppleSARHelper::create_default_global(v55);
      v57 = buf;
      buf = 0uLL;
      v58 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
      off_1EF57D890 = v57;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v56 = (AppleSARHelper *)off_1EF57D890;
    }
    v64 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    if (*(&off_1EF57D890 + 1))
    {
      v65 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v56 + 1))
    {
      *(_QWORD *)&buf = 3;
      v213[0] = 0;
      v211 = 1;
      v67 = AppleSARHelper::callUserClientMethod(v56, 0, (const unint64_t *)&buf, 1, (char *)this + 136, 1, v213, &v211, (char *)this + 136, 1uLL);
      if (!v64)
        goto LABEL_113;
    }
    else
    {
      v67 = 0;
      if (!v64)
        goto LABEL_113;
    }
    v68 = (unint64_t *)&v64->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v70 = *((_QWORD *)this + 10);
      v71 = v70;
      if ((v67 & 1) != 0)
      {
LABEL_114:
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          if (*((_BYTE *)this + 136))
            v72 = "On";
          else
            v72 = "Off";
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v72;
          _os_log_impl(&dword_1BF566000, v70, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting WiFi State: %s", (uint8_t *)&buf, 0xCu);
          v73 = *((_QWORD *)this + 10);
          if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
LABEL_124:
            v74 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            v75 = (AppleSARHelper *)off_1EF57D890;
            if (!off_1EF57D890)
            {
              AppleSARHelper::create_default_global(v74);
              v76 = buf;
              buf = 0uLL;
              v77 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
              off_1EF57D890 = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v80 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
              {
                v81 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v75 = (AppleSARHelper *)off_1EF57D890;
            }
            v83 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
            if (*(&off_1EF57D890 + 1))
            {
              v84 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
            }
            pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            if (*((_DWORD *)v75 + 1))
            {
              *(_QWORD *)&buf = 3;
              v213[0] = 0;
              v211 = 1;
              v86 = AppleSARHelper::callUserClientMethod(v75, 1, (const unint64_t *)&buf, 1, (char *)this + 160, 1, v213, &v211, (char *)this + 160, 1uLL);
              if (!v83)
                goto LABEL_146;
            }
            else
            {
              v86 = 0;
              if (!v83)
                goto LABEL_146;
            }
            v87 = (unint64_t *)&v83->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
              v89 = *((_QWORD *)this + 10);
              v90 = v89;
              if ((v86 & 1) != 0)
              {
LABEL_147:
                v53 = os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v53)
                {
                  if (*((_BYTE *)this + 160))
                    v91 = "On";
                  else
                    v91 = "Off";
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = v91;
                  _os_log_impl(&dword_1BF566000, v89, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting Bluetooth State: %s", (uint8_t *)&buf, 0xCu);
                }
                goto LABEL_155;
              }
              goto LABEL_153;
            }
LABEL_146:
            v89 = *((_QWORD *)this + 10);
            v90 = v89;
            if ((v86 & 1) != 0)
              goto LABEL_147;
LABEL_153:
            v53 = os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v53)
            {
              LOWORD(buf) = 0;
              _os_log_error_impl(&dword_1BF566000, v89, OS_LOG_TYPE_ERROR, "Failed to get Bluetooth state!", (uint8_t *)&buf, 2u);
            }
            goto LABEL_155;
          }
LABEL_123:
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1BF566000, v73, OS_LOG_TYPE_DEFAULT, "#I Getting Bluetooth Status from kernel", (uint8_t *)&buf, 2u);
          goto LABEL_124;
        }
        goto LABEL_122;
      }
LABEL_121:
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_1BF566000, v70, OS_LOG_TYPE_ERROR, "Failed to get WiFi state!", (uint8_t *)&buf, 2u);
        v73 = *((_QWORD *)this + 10);
        if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          goto LABEL_124;
        goto LABEL_123;
      }
LABEL_122:
      v73 = *((_QWORD *)this + 10);
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        goto LABEL_124;
      goto LABEL_123;
    }
LABEL_113:
    v70 = *((_QWORD *)this + 10);
    v71 = v70;
    if ((v67 & 1) != 0)
      goto LABEL_114;
    goto LABEL_121;
  }
LABEL_155:
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v53);
  if (!capabilities::abs::operator&())
    goto LABEL_308;
  v92 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v92, OS_LOG_TYPE_DEFAULT, "#I Getting SAR Fusion Status from kernel", (uint8_t *)&buf, 2u);
  }
  v93 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v94 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v93);
    v95 = buf;
    buf = 0uLL;
    v96 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v95;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v94 = (AppleSARHelper *)off_1EF57D890;
  }
  v102 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v103 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v94 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v105 = AppleSARHelper::callUserClientMethod(v94, 2, (const unint64_t *)&buf, 1, (char *)this + 161, 4, v213, &v211, (char *)this + 161, 4uLL);
    if (!v102)
      goto LABEL_180;
  }
  else
  {
    v105 = 0;
    if (!v102)
      goto LABEL_180;
  }
  v106 = (unint64_t *)&v102->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    if ((v105 & 1) != 0)
      goto LABEL_183;
    goto LABEL_181;
  }
LABEL_180:
  if ((v105 & 1) != 0)
    goto LABEL_183;
LABEL_181:
  v108 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v108, OS_LOG_TYPE_ERROR, "Failed to get Accessory State!", (uint8_t *)&buf, 2u);
  }
LABEL_183:
  v109 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v110 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v109);
    v111 = buf;
    buf = 0uLL;
    v112 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v111;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v110 = (AppleSARHelper *)off_1EF57D890;
  }
  v118 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v119 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v110 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v121 = AppleSARHelper::callUserClientMethod(v110, 3, (const unint64_t *)&buf, 1, (char *)this + 165, 1, v213, &v211, (char *)this + 165, 1uLL);
    if (!v118)
      goto LABEL_205;
  }
  else
  {
    v121 = 0;
    if (!v118)
      goto LABEL_205;
  }
  v122 = (unint64_t *)&v118->__shared_owners_;
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 - 1, v122));
  if (!v123)
  {
    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
    std::__shared_weak_count::__release_weak(v118);
    if ((v121 & 1) != 0)
      goto LABEL_208;
    goto LABEL_206;
  }
LABEL_205:
  if ((v121 & 1) != 0)
    goto LABEL_208;
LABEL_206:
  v124 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v124, OS_LOG_TYPE_ERROR, "Failed to get OBD and Tuner State!", (uint8_t *)&buf, 2u);
  }
LABEL_208:
  *((_BYTE *)this + 166) = *((_BYTE *)this + 165);
  v125 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v126 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v125);
    v127 = buf;
    buf = 0uLL;
    v128 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v127;
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v126 = (AppleSARHelper *)off_1EF57D890;
  }
  v134 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v135 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v126 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v137 = AppleSARHelper::callUserClientMethod(v126, 6, (const unint64_t *)&buf, 1, (char *)this + 167, 1, v213, &v211, (char *)this + 167, 1uLL);
    if (!v134)
      goto LABEL_230;
  }
  else
  {
    v137 = 0;
    if (!v134)
      goto LABEL_230;
  }
  v138 = (unint64_t *)&v134->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
    if ((v137 & 1) != 0)
      goto LABEL_233;
    goto LABEL_231;
  }
LABEL_230:
  if ((v137 & 1) != 0)
    goto LABEL_233;
LABEL_231:
  v140 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v140, OS_LOG_TYPE_ERROR, "Failed to get Speaker State!", (uint8_t *)&buf, 2u);
  }
LABEL_233:
  v141 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v142 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v141);
    v143 = buf;
    buf = 0uLL;
    v144 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v143;
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v148 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v142 = (AppleSARHelper *)off_1EF57D890;
  }
  v150 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v151 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v142 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v153 = AppleSARHelper::callUserClientMethod(v142, 7, (const unint64_t *)&buf, 1, (char *)this + 168, 1, v213, &v211, (char *)this + 168, 1uLL);
    if (!v150)
      goto LABEL_255;
  }
  else
  {
    v153 = 0;
    if (!v150)
      goto LABEL_255;
  }
  v154 = (unint64_t *)&v150->__shared_owners_;
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
    if ((v153 & 1) != 0)
      goto LABEL_258;
    goto LABEL_256;
  }
LABEL_255:
  if ((v153 & 1) != 0)
    goto LABEL_258;
LABEL_256:
  v156 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v156, OS_LOG_TYPE_ERROR, "Failed to get Grip State!", (uint8_t *)&buf, 2u);
  }
LABEL_258:
  *((_BYTE *)this + 169) = *((_BYTE *)this + 168);
  v157 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v158 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v157);
    v159 = buf;
    buf = 0uLL;
    v160 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v159;
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v164 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v158 = (AppleSARHelper *)off_1EF57D890;
  }
  v166 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v167 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v158 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v169 = AppleSARHelper::callUserClientMethod(v158, 8, (const unint64_t *)&buf, 1, (char *)this + 170, 1, v213, &v211, (char *)this + 170, 1uLL);
    if (!v166)
      goto LABEL_280;
  }
  else
  {
    v169 = 0;
    if (!v166)
      goto LABEL_280;
  }
  v170 = (unint64_t *)&v166->__shared_owners_;
  do
    v171 = __ldaxr(v170);
  while (__stlxr(v171 - 1, v170));
  if (!v171)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    if ((v169 & 1) != 0)
      goto LABEL_283;
    goto LABEL_281;
  }
LABEL_280:
  if ((v169 & 1) != 0)
    goto LABEL_283;
LABEL_281:
  v172 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v172, OS_LOG_TYPE_ERROR, "Failed to get Power State!", (uint8_t *)&buf, 2u);
  }
LABEL_283:
  v173 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v174 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v173);
    v175 = buf;
    buf = 0uLL;
    v176 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v175;
    if (v176)
    {
      v177 = (unint64_t *)&v176->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    v179 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v180 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v174 = (AppleSARHelper *)off_1EF57D890;
  }
  v182 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v183 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v174 + 1))
  {
    *(_QWORD *)&buf = 3;
    v213[0] = 0;
    v211 = 1;
    v185 = AppleSARHelper::callUserClientMethod(v174, 9, (const unint64_t *)&buf, 1, (char *)this + 171, 1, v213, &v211, (char *)this + 171, 1uLL);
    if (!v182)
      goto LABEL_305;
  }
  else
  {
    v185 = 0;
    if (!v182)
      goto LABEL_305;
  }
  v186 = (unint64_t *)&v182->__shared_owners_;
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 - 1, v186));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
    if ((v185 & 1) != 0)
      goto LABEL_308;
    goto LABEL_306;
  }
LABEL_305:
  if ((v185 & 1) != 0)
    goto LABEL_308;
LABEL_306:
  v188 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1BF566000, v188, OS_LOG_TYPE_ERROR, "Failed to get Wrist State!", (uint8_t *)&buf, 2u);
  }
LABEL_308:
  if (v191)
    std::__shared_weak_count::__release_weak(v191);
  if (v197)
    std::__shared_weak_count::__release_weak(v197);
  if (v203)
    std::__shared_weak_count::__release_weak(v203);
  std::__shared_weak_count::__release_weak(v20);
}

void sub_1BF5F213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (a35)
    std::__shared_weak_count::__release_weak(a35);
  if (a50)
    std::__shared_weak_count::__release_weak(a50);
  std::__shared_weak_count::__release_weak(a11);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  size_t v12;
  void **v13;
  void **v14;
  abm::client::Event *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  abm::client::Event *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  void *__p[2];
  uint64_t v44;
  _QWORD v45[2];
  unint64_t v46;
  uint64_t v47;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v46 = 0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*(abm::client::Event **)a2);
      v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
      if (!ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        goto LABEL_47;
      v45[0] = 0xAAAAAAAAAAAAAAAALL;
      v45[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v45, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
      __p[0] = 0;
      __p[1] = 0;
      v44 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v47, (const char *)*MEMORY[0x1E0CFB530]);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8B878](&v47);
      v44 = v42;
      *(_OWORD *)__p = v41;
      if (v42 >= 0)
        v12 = HIBYTE(v42);
      else
        v12 = *((_QWORD *)&v41 + 1);
      if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
        && (v42 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), !memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v12)))
      {
        v29 = *(abm::client::Event **)a2;
        v30 = *(_QWORD *)(a2 + 8);
        if (v30)
        {
          v31 = (unint64_t *)(v30 + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = (std::__shared_weak_count *)v5[7];
        if (!v33 || (v34 = v5[6], (v35 = std::__shared_weak_count::lock(v33)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v35;
        v36 = operator new(0x18uLL);
        *v36 = v5;
        v36[1] = v29;
        v36[2] = v30;
        v37 = v5[8];
        v38 = (unint64_t *)&v22->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v40 = operator new(0x18uLL);
        *v40 = v36;
        v40[1] = v34;
        v40[2] = v22;
        dispatch_async_f(v37, v40, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        do
          v28 = __ldaxr(v38);
        while (__stlxr(v28 - 1, v38));
      }
      else
      {
        if (v12 != strlen((const char *)*MEMORY[0x1E0CFBB68])
          || (v42 >= 0 ? (v14 = __p) : (v14 = (void **)__p[0]), memcmp(v14, (const void *)*MEMORY[0x1E0CFBB68], v12)))
        {
LABEL_44:
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B8B8B4](v45);
          v11 = (const void *)v46;
LABEL_47:
          if (v11)
            CFRelease(v11);
          return;
        }
        v15 = *(abm::client::Event **)a2;
        v16 = *(_QWORD *)(a2 + 8);
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = (std::__shared_weak_count *)v5[7];
        if (!v19 || (v20 = v5[6], (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        v23 = operator new(0x18uLL);
        *v23 = v5;
        v23[1] = v15;
        v23[2] = v16;
        v24 = v5[8];
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v27 = operator new(0x18uLL);
        *v27 = v23;
        v27[1] = v20;
        v27[2] = v22;
        dispatch_async_f(v24, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        do
          v28 = __ldaxr(v25);
        while (__stlxr(v28 - 1, v25));
      }
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      goto LABEL_44;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SARModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SARModule *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
LABEL_7:
        SARModule::dumpSARFusionState(v3);
    }
  }
}

void SARModule::dumpSARFusionState(SARModule *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = sar::toStringAccessory((sar *)*(unsigned int *)((char *)this + 161));
    v4 = *(_DWORD *)((char *)this + 161);
    v13 = 136315394;
    v14 = v3;
    v15 = 1024;
    v16 = v4;
    _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Accessory: %s (0x%x)", (uint8_t *)&v13, 0x12u);
    v2 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_3;
  }
  if ((*((_BYTE *)this + 165) & 0xF) != 0)
    v5 = "BODY";
  else
    v5 = "HEAD";
  v13 = 136315138;
  v14 = (uint64_t)v5;
  _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Sar Selection: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_14:
  if (*((unsigned __int8 *)this + 165) >= 0x10u)
    v6 = "NONFREE";
  else
    v6 = "FREE";
  v13 = 136315138;
  v14 = (uint64_t)v6;
  _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Tuner State: %s SPACE", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_18:
  if (*((_BYTE *)this + 167))
    v7 = "ON";
  else
    v7 = "OFF";
  v13 = 136315138;
  v14 = (uint64_t)v7;
  _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Speaker: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_22:
  v8 = *((unsigned __int8 *)this + 168);
  v9 = "Default Hand Position";
  if (v8 == 1)
    v9 = "Left Hand";
  if (v8 == 2)
    v10 = "Right Hand";
  else
    v10 = v9;
  v13 = 136315138;
  v14 = (uint64_t)v10;
  _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Hand Grip: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      return;
    goto LABEL_36;
  }
LABEL_28:
  if ((*((_BYTE *)this + 170) & 8) != 0)
  {
    v11 = "Arcas";
  }
  else if ((*((_BYTE *)this + 170) & 4) != 0)
  {
    v11 = "Callisto";
  }
  else if ((*((_BYTE *)this + 170) & 2) != 0)
  {
    v11 = "USB";
  }
  else
  {
    v11 = "Power Off";
  }
  v13 = 136315138;
  v14 = (uint64_t)v11;
  _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Power: %s", (uint8_t *)&v13, 0xCu);
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_36:
    if (*((_BYTE *)this + 171))
      v12 = "ON";
    else
      v12 = "OFF";
    v13 = 136315138;
    v14 = (uint64_t)v12;
    _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Wrist: %s", (uint8_t *)&v13, 0xCu);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  xpc_object_t v12;
  NSObject *v13;
  xpc_object_t value;
  int v15;
  xpc_object_t object;
  CFTypeRef cf;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        ctu::cf_to_xpc((ctu *)0xAAAAAAAAAAAAAAAALL, v11);
        v12 = object;
        if (object && MEMORY[0x1C3B8CD78](object) == MEMORY[0x1E0C812F8])
          xpc_retain(object);
        else
          v12 = xpc_null_create();
        xpc_release(object);
        value = xpc_dictionary_get_value(v12, (const char *)*MEMORY[0x1E0CFB040]);
        object = value;
        if (value)
          xpc_retain(value);
        else
          object = xpc_null_create();
        v15 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        if (v15)
          SARModule::submitCASARFusion(v5, 0);
        xpc_release(v12);
      }
      else
      {
        v13 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LOWORD(object) = 0;
          _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)&object, 2u);
        }
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

void sub_1BF5F2D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10)
{
  void *v10;

  xpc_release(v10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void SARModule::submitCASARFusion(uint64_t a1, int a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const char *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  int v27;
  const char *v28;
  const char *v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  const char *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  const void *v54;
  size_t v55;
  size_t v56;
  __int128 *p_string;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  xpc_object_t object;
  __int128 string;
  unint64_t v63;
  timeval v64;

  v64.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v64.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v64, 0);
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v7 = *(_QWORD *)(a1 + 304);
  if (v7)
  {
    *(_QWORD *)(a1 + 304) = v64.tv_sec - v7;
    if ((*(_BYTE *)(a1 + 166) & 0xF) != 0)
      v8 = "Head";
    else
      v8 = "Body";
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB40], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (*(unsigned __int8 *)(a1 + 166) >= 0x10u)
      v11 = "Freespace";
    else
      v11 = "Non-Freespace";
    v12 = xpc_string_create(v11);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC8], v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (*(_BYTE *)(a1 + 169) == 2)
    {
      v14 = "Right";
    }
    else if (*(_BYTE *)(a1 + 168) == 1)
    {
      v14 = "Left";
    }
    else
    {
      v14 = "Default";
    }
    v19 = xpc_string_create(v14);
    if (!v19)
      v19 = xpc_null_create();
  }
  else
  {
    v15 = xpc_string_create("NONE");
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB40], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    v17 = xpc_string_create("NONE");
    if (!v17)
      v17 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC8], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    v19 = xpc_string_create("NONE");
    if (!v19)
      v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB38], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if ((*(_BYTE *)(a1 + 165) & 0xF) != 0)
    v21 = "Head";
  else
    v21 = "Body";
  v22 = xpc_string_create(v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB30], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (*(unsigned __int8 *)(a1 + 165) >= 0x10u)
    v24 = "Freespace";
  else
    v24 = "Non-Freespace";
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCC0], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = *(unsigned __int8 *)(a1 + 168);
  v28 = "Default";
  if (v27 == 1)
    v28 = "Left";
  if (v27 == 2)
    v29 = "Right";
  else
    v29 = v28;
  v30 = xpc_string_create(v29);
  v31 = MEMORY[0x1E0C812F8];
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBB28], v30);
  v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (a2 == 1)
  {
    HIBYTE(v63) = 12;
    strcpy((char *)&string, "EventUpdated");
  }
  else
  {
    if (a2)
      v33 = "UnknownReason";
    else
      v33 = "CallConnected";
    HIBYTE(v63) = 13;
    *(_QWORD *)&string = *(_QWORD *)v33;
    *(_QWORD *)((char *)&string + 5) = *(_QWORD *)(v33 + 5);
    BYTE13(string) = 0;
  }
  v34 = xpc_string_create((const char *)&string);
  if (!v34)
    v34 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBFD0], v34);
  v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)string);
  v36 = xpc_int64_create(*(_QWORD *)(a1 + 304));
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB8F8], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_dictionary_create(0, 0, 0);
  if (v38 || (v38 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v38) == v31)
    {
      xpc_retain(v38);
      v39 = v38;
    }
    else
    {
      v39 = xpc_null_create();
    }
  }
  else
  {
    v39 = xpc_null_create();
    v38 = 0;
  }
  xpc_release(v38);
  v40 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB3E8], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  v42 = xpc_string_create((const char *)*MEMORY[0x1E0CFB660]);
  if (!v42)
    v42 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB3F0], v42);
  v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  v44 = xpc_string_create((const char *)*MEMORY[0x1E0CFB218]);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB278], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v6)
  {
    xpc_retain(v6);
    v46 = v6;
  }
  else
  {
    v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB9D8], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v48) == v31)
    {
      xpc_retain(v48);
      v49 = v48;
    }
    else
    {
      v49 = xpc_null_create();
    }
  }
  else
  {
    v49 = xpc_null_create();
    v48 = 0;
  }
  xpc_release(v48);
  v50 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v50)
    v50 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB020], v50);
  v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v39)
  {
    xpc_retain(v39);
    v52 = v39;
  }
  else
  {
    v52 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB018], v52);
  v53 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v53);
  v54 = (const void *)*MEMORY[0x1E0CFB5E0];
  v55 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v55 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v56 = v55;
  if (v55 >= 0x17)
  {
    v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v58 = v55 | 7;
    v59 = v58 + 1;
    p_string = (__int128 *)operator new(v58 + 1);
    *((_QWORD *)&string + 1) = v56;
    v63 = v59 | 0x8000000000000000;
    *(_QWORD *)&string = p_string;
LABEL_95:
    memmove(p_string, v54, v56);
    *((_BYTE *)p_string + v56) = 0;
    object = v49;
    if (v49)
      goto LABEL_91;
    goto LABEL_96;
  }
  HIBYTE(v63) = v55;
  p_string = &string;
  if (v55)
    goto LABEL_95;
  LOBYTE(string) = 0;
  object = v49;
  if (v49)
  {
LABEL_91:
    xpc_retain(v49);
    goto LABEL_97;
  }
LABEL_96:
  object = xpc_null_create();
LABEL_97:
  v60 = 0;
  Service::runCommand(a1, (uint64_t)&string, &object, &v60);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v63) < 0)
    operator delete((void *)string);
  *(_QWORD *)(a1 + 304) = v64.tv_sec;
  xpc_release(v49);
  xpc_release(v39);
  xpc_release(v6);
}

void sub_1BF5F3730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void SARModule::initializeHelpers_sync(SARModule *this)
{
  NSObject *v2;
  queue v3;
  NSObject *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  capabilities::abs *v12;
  NSObject *v13;
  CMHandDetectionDelegate *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  AppleSARHelper *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  capabilities::abs *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Set up SAR Helpers", buf, 2u);
  }
  v4 = *((_QWORD *)this + 8);
  v48 = v4;
  if (v4)
    dispatch_retain(v4);
  CMOnBodyDelegate::create(&v48, v3, buf);
  v5 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *(_OWORD *)((char *)this + 104) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (capabilities::abs *)v48;
  if (v48)
    dispatch_release(v48);
  if (*((_QWORD *)this + 13)
    || (v13 = *((_QWORD *)this + 10),
        v12 = (capabilities::abs *)os_log_type_enabled(v13, OS_LOG_TYPE_ERROR),
        !(_DWORD)v12))
  {
    capabilities::abs::supportedSARFeatures(v12);
    if (!capabilities::abs::operator&())
      goto LABEL_21;
    goto LABEL_20;
  }
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed to create core motion on-body manager", buf, 2u);
  capabilities::abs::supportedSARFeatures(v41);
  if (capabilities::abs::operator&())
  {
LABEL_20:
    SARModule::initializeWiFi_sync(this);
    SARModule::initializeBluetooth_sync(this);
  }
LABEL_21:
  SARModule::initializeAudio_sync(this);
  if (CMHandDetectionDelegate::isSupported(v14))
    SARModule::initializeHandDetection_sync(this);
  SARModule::initializeOBD_sync(this);
  SARModule::initializeAccessory_sync(this);
  SARModule::initializePowerSource_sync(this);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v15 || (v16 = *((_QWORD *)this + 6), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  v23 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v24 = off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v23);
    v25 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v26 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v25;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v24 = off_1EF57D890;
  }
  v32 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v46 = v24;
  v47 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v33 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3321888768;
  v42[2] = ___ZN9SARModule22initializeHelpers_syncEv_block_invoke;
  v42[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e12_v20__0i8_v12l;
  v42[4] = this;
  v42[5] = v16;
  v43 = v18;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = _Block_copy(v42);
  v37 = *((_QWORD *)this + 8);
  if (v37)
    dispatch_retain(*((dispatch_object_t *)this + 8));
  aBlock = v36;
  object = v37;
  AppleSARHelper::registerSARServiceCallback();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (!v32)
    goto LABEL_58;
  v38 = (unint64_t *)&v32->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_58:
    v40 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      goto LABEL_60;
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v40 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
LABEL_59:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v40, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization Done", buf, 2u);
  }
LABEL_60:
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v18);
}

void sub_1BF5F3C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void sub_1BF5F3CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 72);
  if (v3)
  {
    dispatch_release(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF5F3CECLL);
}

void SARModule::initializeWiFi_sync(SARModule *this)
{
  NSObject *v2;
  WiFiManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  void **v14;
  _QWORD *v15;
  NSObject *v16;
  _QWORD aBlock[5];
  void *v18;
  NSObject *v19;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing WiFi", buf, 2u);
  }
  v3 = (WiFiManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  WiFiManager::create(v3, (WiFiManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_12;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)*((_QWORD *)this + 15);
    if (v11)
    {
LABEL_13:
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule19initializeWiFi_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      v12 = _Block_copy(aBlock);
      v13 = *((_QWORD *)this + 8);
      if (v13)
        dispatch_retain(v13);
      v18 = v12;
      v19 = v13;
      v14 = (void **)v11[6];
      if ((unint64_t)v14 >= v11[7])
      {
        v15 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v11 + 5, (uint64_t)&v18);
        v13 = v19;
        v11[6] = v15;
        if (!v13)
        {
LABEL_21:
          if (v18)
            _Block_release(v18);
          return;
        }
LABEL_20:
        dispatch_release(v13);
        goto LABEL_21;
      }
      if (v12)
      {
        *v14 = _Block_copy(v12);
        v14[1] = v13;
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        *v14 = 0;
        v14[1] = v13;
        if (!v13)
        {
LABEL_19:
          v11[6] = v14 + 2;
          if (!v13)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      dispatch_retain(v13);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_12:
    v11 = (_QWORD *)*((_QWORD *)this + 15);
    if (v11)
      goto LABEL_13;
  }
  v16 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager", buf, 2u);
  }
}

void sub_1BF5F3F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeBluetooth_sync(SARModule *this)
{
  NSObject *v2;
  BluetoothManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  void **v14;
  _QWORD *v15;
  NSObject *v16;
  _QWORD aBlock[5];
  void *v18;
  NSObject *v19;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Bluetooth", buf, 2u);
  }
  v3 = (BluetoothManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  BluetoothManager::create(v3, (BluetoothManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_OWORD *)this + 9) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_12;
  v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)*((_QWORD *)this + 18);
    if (v11)
    {
LABEL_13:
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      v12 = _Block_copy(aBlock);
      v13 = *((_QWORD *)this + 8);
      if (v13)
        dispatch_retain(v13);
      v18 = v12;
      v19 = v13;
      v14 = (void **)v11[6];
      if ((unint64_t)v14 >= v11[7])
      {
        v15 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v11 + 5, (uint64_t)&v18);
        v13 = v19;
        v11[6] = v15;
        if (!v13)
        {
LABEL_21:
          if (v18)
            _Block_release(v18);
          return;
        }
LABEL_20:
        dispatch_release(v13);
        goto LABEL_21;
      }
      if (v12)
      {
        *v14 = _Block_copy(v12);
        v14[1] = v13;
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        *v14 = 0;
        v14[1] = v13;
        if (!v13)
        {
LABEL_19:
          v11[6] = v14 + 2;
          if (!v13)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      dispatch_retain(v13);
      goto LABEL_19;
    }
  }
  else
  {
LABEL_12:
    v11 = (_QWORD *)*((_QWORD *)this + 18);
    if (v11)
      goto LABEL_13;
  }
  v16 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager", buf, 2u);
  }
}

void sub_1BF5F4170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeAudio_sync(SARModule *this)
{
  NSObject *v2;
  AudioManager *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  NSObject *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  void *v22;
  NSObject *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  capabilities::txpower *v27;
  capabilities::txpower *v28;
  _QWORD v29[5];
  void *v30;
  dispatch_object_t v31;
  _QWORD aBlock[5];
  void *v33;
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Audio", buf, 2u);
  }
  v3 = (AudioManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  AudioManager::create(v3, (AudioManager **)buf);
  v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (*((_QWORD *)this + 22))
        goto LABEL_13;
LABEL_23:
      v19 = *((_QWORD *)this + 10);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v19, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager", buf, 2u);
      }
      return;
    }
  }
  if (!*((_QWORD *)this + 22))
    goto LABEL_23;
LABEL_13:
  if ((v11 & 1) == 0)
  {
    if ((_DWORD)v27)
    {
      AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v27);
    }
  }
  v12 = MEMORY[0x1E0C809B0];
  if (AudioManager::isAudioWiredPortSupported(void)::audioJackSupported)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 22);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
    aBlock[4] = this;
    v14 = _Block_copy(aBlock);
    v15 = *((_QWORD *)this + 8);
    if (v15)
      dispatch_retain(*((dispatch_object_t *)this + 8));
    v33 = v14;
    object = v15;
    v16 = (_QWORD *)v13[17];
    if ((unint64_t)v16 >= v13[18])
    {
      v18 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v13 + 16, (uint64_t)&v33);
      goto LABEL_26;
    }
    if (v14)
    {
      v17 = _Block_copy(v14);
      v15 = object;
      *v16 = v17;
      v16[1] = v15;
      if (!v15)
      {
LABEL_21:
        v18 = v16 + 2;
LABEL_26:
        v13[17] = v18;
        if (object)
          dispatch_release(object);
        if (v33)
          _Block_release(v33);
        goto LABEL_30;
      }
    }
    else
    {
      *v16 = 0;
      v16[1] = v15;
      if (!v15)
        goto LABEL_21;
    }
    dispatch_retain(v15);
    goto LABEL_21;
  }
LABEL_30:
  if ((v20 & 1) == 0)
  {
    if ((_DWORD)v28)
    {
      AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v28);
    }
  }
  if (AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported)
  {
    v21 = (_QWORD *)*((_QWORD *)this + 22);
    v29[0] = v12;
    v29[1] = 3221225472;
    v29[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2;
    v29[3] = &__block_descriptor_40_e8_v12__0B8l;
    v29[4] = this;
    v22 = _Block_copy(v29);
    v23 = *((_QWORD *)this + 8);
    if (v23)
      dispatch_retain(v23);
    v30 = v22;
    v31 = v23;
    v24 = (_QWORD *)v21[13];
    if ((unint64_t)v24 >= v21[14])
    {
      v26 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v21 + 12, (uint64_t)&v30);
      goto LABEL_40;
    }
    if (v22)
    {
      v25 = _Block_copy(v22);
      v23 = v31;
      *v24 = v25;
      v24[1] = v23;
      if (!v23)
      {
LABEL_38:
        v26 = v24 + 2;
LABEL_40:
        v21[13] = v26;
        if (v31)
          dispatch_release(v31);
        if (v30)
          _Block_release(v30);
        return;
      }
    }
    else
    {
      *v24 = 0;
      v24[1] = v23;
      if (!v23)
        goto LABEL_38;
    }
    dispatch_retain(v23);
    goto LABEL_38;
  }
}

void sub_1BF5F44DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BF5F44F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BF5F4514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5F4528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeHandDetection_sync(SARModule *this)
{
  NSObject *v2;
  char *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  void **v40;
  NSObject *v41;
  _QWORD *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  NSObject *v54;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Hand Detection", buf, 2u);
  }
  v3 = (char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v4 = *((_QWORD *)this + 8);
  v54 = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *((_QWORD *)this + 9);
  v53 = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v51 = *((_QWORD *)this + 22);
  v52 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v49 = 0;
  v50 = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v47 = *((_QWORD *)this + 13);
  v48 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  HandDetectionManager::create(v3, &v54, &v53, &v51, &v49, &v47, (HandDetectionManager **)buf);
  v12 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  *(_OWORD *)((char *)this + 248) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v48;
  if (v48)
  {
    v20 = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v53)
    dispatch_release(v53);
  if (v54)
    dispatch_release(v54);
  if (*((_QWORD *)this + 31))
  {
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v28 || (v29 = *((_QWORD *)this + 6), (v30 = std::__shared_weak_count::lock(v28)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v31 = v30;
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    v36 = (_QWORD *)*((_QWORD *)this + 31);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0i8l;
    aBlock[4] = this;
    aBlock[5] = v29;
    v44 = v31;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
    v38 = _Block_copy(aBlock);
    v39 = *((_QWORD *)this + 8);
    if (v39)
      dispatch_retain(v39);
    v45 = v38;
    v46 = v39;
    v40 = (void **)v36[4];
    if ((unint64_t)v40 >= v36[5])
    {
      v42 = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(v36 + 3, (uint64_t)&v45);
      v39 = v46;
      v36[4] = v42;
      if (!v39)
        goto LABEL_61;
      goto LABEL_60;
    }
    if (v38)
    {
      *v40 = _Block_copy(v38);
      v40[1] = v39;
      if (!v39)
        goto LABEL_59;
    }
    else
    {
      *v40 = 0;
      v40[1] = v39;
      if (!v39)
      {
LABEL_59:
        v36[4] = v40 + 2;
        if (!v39)
        {
LABEL_61:
          if (v45)
            _Block_release(v45);
          if (v44)
            std::__shared_weak_count::__release_weak(v44);
          std::__shared_weak_count::__release_weak(v31);
          return;
        }
LABEL_60:
        dispatch_release(v39);
        goto LABEL_61;
      }
    }
    dispatch_retain(v39);
    goto LABEL_59;
  }
  v41 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v41, OS_LOG_TYPE_ERROR, "Failed to create hand detection manager!", buf, 2u);
  }
}

void sub_1BF5F4940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1BF5F4970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11 - 96);
  v13 = *(NSObject **)(v11 - 80);
  if (v13)
    dispatch_release(v13);
  v14 = *(NSObject **)(v11 - 72);
  if (!v14)
    _Unwind_Resume(a1);
  dispatch_release(v14);
  _Unwind_Resume(a1);
}

void SARModule::initializeOBD_sync(SARModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  _QWORD *v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  NSObject *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  NSObject *v47;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing OBD", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v3 || (v4 = *((_QWORD *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = (char *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v12 = *((_QWORD *)this + 8);
  v47 = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v45 = *((_QWORD *)this + 22);
  v46 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v43 = *((_QWORD *)this + 13);
  v44 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  OBDManager::create(v11, &v47, &v45, &v43, (OBDManager **)buf);
  v19 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  *((_OWORD *)this + 12) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v46;
  if (v46)
  {
    v30 = (unint64_t *)&v46->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v47)
    dispatch_release(v47);
  v32 = (_QWORD *)*((_QWORD *)this + 24);
  if (v32)
  {
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3321888768;
    v39[2] = ___ZN9SARModule18initializeOBD_syncEv_block_invoke;
    v39[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e11_v16__0C8C12l;
    v39[4] = this;
    v39[5] = v4;
    v40 = v6;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
    v34 = _Block_copy(v39);
    v35 = *((_QWORD *)this + 8);
    if (v35)
      dispatch_retain(v35);
    aBlock = v34;
    v42 = v35;
    v36 = (void **)v32[6];
    if ((unint64_t)v36 >= v32[7])
    {
      v38 = std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(v32 + 5, (uint64_t)&aBlock);
      v35 = v42;
      v32[6] = v38;
      if (!v35)
        goto LABEL_52;
      goto LABEL_51;
    }
    if (v34)
    {
      *v36 = _Block_copy(v34);
      v36[1] = v35;
      if (!v35)
        goto LABEL_50;
    }
    else
    {
      *v36 = 0;
      v36[1] = v35;
      if (!v35)
      {
LABEL_50:
        v32[6] = v36 + 2;
        if (!v35)
        {
LABEL_52:
          if (aBlock)
            _Block_release(aBlock);
          if (v40)
            std::__shared_weak_count::__release_weak(v40);
          goto LABEL_58;
        }
LABEL_51:
        dispatch_release(v35);
        goto LABEL_52;
      }
    }
    dispatch_retain(v35);
    goto LABEL_50;
  }
  v37 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v37, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager", buf, 2u);
  }
LABEL_58:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF5F4D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v20);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void SARModule::initializeAccessory_sync(SARModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  queue v11;
  LegacyAccessoryManager *v12;
  NSObject *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  void *aBlock;
  NSObject *v31;
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Accessory", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v3 || (v4 = *((_QWORD *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v12 = (LegacyAccessoryManager *)(*(uint64_t (**)(SARModule *))(*(_QWORD *)this + 16))(this);
  v13 = *((_QWORD *)this + 8);
  object = v13;
  if (v13)
    dispatch_retain(v13);
  LegacyAccessoryManager::create(v12, (const char *)&object, v11, (LegacyAccessoryManager **)buf);
  v14 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  *((_OWORD *)this + 13) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (object)
    dispatch_release(object);
  v21 = (_QWORD *)*((_QWORD *)this + 26);
  if (v21)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3321888768;
    v28[2] = ___ZN9SARModule24initializeAccessory_syncEv_block_invoke;
    v28[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    v28[4] = this;
    v28[5] = v4;
    v29 = v6;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v23 = _Block_copy(v28);
    v24 = *((_QWORD *)this + 8);
    if (v24)
      dispatch_retain(v24);
    aBlock = v23;
    v31 = v24;
    v25 = (void **)v21[5];
    if ((unint64_t)v25 >= v21[6])
    {
      v27 = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(v21 + 4, (uint64_t)&aBlock);
      v24 = v31;
      v21[5] = v27;
      if (!v24)
        goto LABEL_36;
      goto LABEL_35;
    }
    if (v23)
    {
      *v25 = _Block_copy(v23);
      v25[1] = v24;
      if (!v24)
        goto LABEL_34;
    }
    else
    {
      *v25 = 0;
      v25[1] = v24;
      if (!v24)
      {
LABEL_34:
        v21[5] = v25 + 2;
        if (!v24)
        {
LABEL_36:
          if (aBlock)
            _Block_release(aBlock);
          if (v29)
            std::__shared_weak_count::__release_weak(v29);
          goto LABEL_42;
        }
LABEL_35:
        dispatch_release(v24);
        goto LABEL_36;
      }
    }
    dispatch_retain(v24);
    goto LABEL_34;
  }
  v26 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v26, OS_LOG_TYPE_ERROR, "Failed to create Legacy Accessory Manager", buf, 2u);
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF5F5070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  std::__shared_weak_count *v18;

  dispatch::callback<void({block_pointer})>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializePowerSource_sync(SARModule *this)
{
  NSObject *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  NSObject *v38;
  void *v39;
  const void *v40;
  NSObject *v41;
  NSObject *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  void (*v50)(uint64_t);
  void *v51;
  uint64_t *v52;

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Power Source", buf, 2u);
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v4 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  v50 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v51 = &__block_descriptor_tmp_13_8;
  v52 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_1ED70F6A0;
    v47 = GetABMLogServer(void)::sLogServer;
    v48 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v5 = unk_1ED70F6A0;
    v47 = GetABMLogServer(void)::sLogServer;
    v48 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v8 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(buf);
    v9 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v10 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v8 = off_1ED70F338;
  }
  v45 = v8;
  v46 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v8 + 208);
  v18 = operator new(0xD8uLL);
  std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v18, &v47, (uint64_t *)buf);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = v18 + 3;
  *((_QWORD *)this + 29) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v46)
  {
    v22 = &v46->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v24 = v48;
  if (!v48)
    goto LABEL_77;
  v25 = (unint64_t *)&v48->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (*((_QWORD *)this + 28))
      goto LABEL_38;
  }
  else
  {
LABEL_77:
    if (*((_QWORD *)this + 28))
    {
LABEL_38:
      v27 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      if (!v27 || (v28 = *((_QWORD *)this + 6), (v29 = std::__shared_weak_count::lock(v27)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v30 = v29;
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
      v33 = (unint64_t *)&v29->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v30);
      }
      v35 = *((_QWORD *)this + 28);
      aBlock[0] = v4;
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN9SARModule26initializePowerSource_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
      aBlock[4] = this;
      aBlock[5] = v28;
      v44 = v30;
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
      v37 = _Block_copy(aBlock);
      v38 = *((_QWORD *)this + 8);
      if (v38)
        dispatch_retain(v38);
      if (v37)
      {
        v39 = _Block_copy(v37);
        v40 = *(const void **)(v35 + 136);
        *(_QWORD *)(v35 + 136) = v39;
        if (!v40)
          goto LABEL_58;
      }
      else
      {
        v40 = *(const void **)(v35 + 136);
        *(_QWORD *)(v35 + 136) = 0;
        if (!v40)
        {
LABEL_58:
          if (v38)
            dispatch_retain(v38);
          v42 = *(NSObject **)(v35 + 144);
          *(_QWORD *)(v35 + 144) = v38;
          if (v42)
            dispatch_release(v42);
          if (v38)
            dispatch_release(v38);
          if (v37)
            _Block_release(v37);
          if (v44)
            std::__shared_weak_count::__release_weak(v44);
          std::__shared_weak_count::__release_weak(v30);
          return;
        }
      }
      _Block_release(v40);
      goto LABEL_58;
    }
  }
  v41 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v41, OS_LOG_TYPE_ERROR, "Failed to create Power Source Notifier", buf, 2u);
  }
}

void sub_1BF5F556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule22initializeHelpers_syncEv_block_invoke(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  SARModule *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  ctu::Gestalt *v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  char v29;
  std::string *p_p;
  int64_t size;
  char *v32;
  std::string *v33;
  char *v34;
  BOOL v35;
  xpc_object_t v37;
  xpc_object_t v38;
  NSObject *v39;
  __int128 *v40;
  xpc_object_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  void *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  const void *v48;
  xpc_object_t v49;
  void *v50[2];
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t object;
  xpc_object_t v60;
  std::string __p;
  __int128 v62;
  uint64_t v63;
  uint8_t buf[32];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[31];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (SARModule *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  if (a2 == -469794809)
  {
    v13 = *((_QWORD *)v7 + 10);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Tx is on from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v14) & 1) == 0)
        SARModule::processTxOn_sync(v7);
    }
    else
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Tx is off from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v14) & 1) == 0)
        SARModule::processTxOff_sync(v7);
    }
    return;
  }
  if ((a2 + 469794805) > 1)
    return;
  v15 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v16 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v15);
    v17 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v18 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v16 = off_1ED70F478;
  }
  v21 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  *(_QWORD *)&v62 = v16;
  *((_QWORD *)&v62 + 1) = *(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v22 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v24)
  {
    v27 = *((_QWORD *)v7 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v28 = "#I We don't trigger the coredump request from the kernel driver in Restore Mode";
    goto LABEL_34;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v27 = *((_QWORD *)v7 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v28 = "#I We don't trigger the coredump request from the kernel driver if it is not Carrier/Internal build";
LABEL_34:
    _os_log_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
    return;
  }
  v62 = 0uLL;
  v63 = 0;
  if (a2 == -469794805)
  {
    qmemcpy(&v62, "SPMI Bus error", 14);
    v29 = 14;
  }
  else
  {
    v62 = *(_OWORD *)"OCP packet error";
    v29 = 16;
  }
  HIBYTE(v63) = v29;
  memset(&__p, 170, sizeof(__p));
  p_p = &__p;
  config::hw::getBootArgs(&__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 17)
  {
    v32 = (char *)p_p + size;
    v33 = p_p;
    while (1)
    {
      v34 = (char *)memchr(v33, 115, size - 16);
      if (!v34)
        goto LABEL_64;
      v35 = *(_QWORD *)v34 == 0x696D70732D726173 && *((_QWORD *)v34 + 1) == 0x6D756465726F632DLL;
      if (v35 && v34[16] == 112)
        break;
      v33 = (std::string *)(v34 + 1);
      size = v32 - (char *)v33;
      if (v32 - (char *)v33 < 17)
        goto LABEL_64;
    }
    if (v34 == v32 || v34 - (char *)p_p == -1)
      goto LABEL_64;
    v60 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v37 = xpc_dictionary_create(0, 0, 0);
    v38 = v37;
    if (v37)
    {
      v60 = v37;
    }
    else
    {
      v38 = xpc_null_create();
      v60 = v38;
      if (!v38)
      {
        v41 = xpc_null_create();
        v38 = 0;
        goto LABEL_78;
      }
    }
    if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v38);
LABEL_79:
      xpc_release(v38);
      v58 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
      if (!v58)
        v58 = xpc_null_create();
      v42 = *MEMORY[0x1E0CFB538];
      *(_QWORD *)buf = &v60;
      *(_QWORD *)&buf[8] = v42;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v58, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v58);
      v58 = 0;
      v56 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
      if (!v56)
        v56 = xpc_null_create();
      v43 = *MEMORY[0x1E0CFB8D0];
      *(_QWORD *)buf = &v60;
      *(_QWORD *)&buf[8] = v43;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v56, &v57);
      xpc_release(v57);
      v57 = 0;
      xpc_release(v56);
      v44 = (const char *)&v62;
      if (v63 < 0)
        v44 = (const char *)v62;
      v56 = 0;
      v76 = 0u;
      memset(v77, 0, sizeof(v77));
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0xFFuLL, "%s (0x%x)", v44, a3);
      v54 = xpc_string_create((const char *)buf);
      if (!v54)
        v54 = xpc_null_create();
      v45 = (void *)*MEMORY[0x1E0CFB788];
      v50[0] = &v60;
      v50[1] = v45;
      xpc::dict::object_proxy::operator=((uint64_t)v50, &v54, &v55);
      xpc_release(v55);
      v55 = 0;
      xpc_release(v54);
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v46 = (std::__shared_weak_count *)a1[6];
      if (v46 && (v53 = std::__shared_weak_count::lock(v46)) != 0)
      {
        v47 = a1[5];
        v52 = v47;
      }
      else
      {
        v47 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v50, (char *)*MEMORY[0x1E0CFB4E0]);
      xpc::dict::dict(&v49, &v60);
      v48 = 0;
      Service::runCommand(v47, (uint64_t)v50, &v49, &v48);
      xpc_release(v49);
      v49 = 0;
      if (v51 < 0)
        operator delete(v50[0]);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
      xpc_release(v60);
      goto LABEL_65;
    }
    v41 = xpc_null_create();
LABEL_78:
    v60 = v41;
    goto LABEL_79;
  }
LABEL_64:
  v39 = *((_QWORD *)v7 + 10);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    v40 = &v62;
    if (v63 < 0)
      v40 = (__int128 *)v62;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v40;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "sar-spmi-coredump";
    _os_log_error_impl(&dword_1BF566000, v39, OS_LOG_TYPE_ERROR, "Detected %s, but AP won't trigger the coredump since %s is not found in the boot-args", buf, 0x16u);
  }
LABEL_65:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
}

void sub_1BF5F5CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void SARModule::processTxOn_sync(SARModule *this)
{
  NSObject *v2;
  OBDManager *v3;
  HandDetectionManager *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const object *v9;
  CFTypeRef v10;
  CFTypeID v11;
  CFTypeRef v12;
  uint64_t (*v13)(uint64_t);
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  NSObject *v18;
  char *v19;
  size_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef *v27;
  CFTypeRef cf[4];
  void *aBlock;
  CFTypeRef v30;
  void *__dst[2];
  unint64_t v32;
  CFTypeRef v33;
  _BYTE object[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(cf[0]) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is on", (uint8_t *)cf, 2u);
  }
  *((_BYTE *)this + 264) = 1;
  v3 = (OBDManager *)*((_QWORD *)this + 24);
  if (v3)
    OBDManager::start(v3, 2000);
  v4 = (HandDetectionManager *)*((_QWORD *)this + 31);
  if (v4)
    HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBBD8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v33 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)object = v6;
  if (v6)
    xpc_retain(v6);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::bridge((xpc *)object, v9);
  v10 = cf[0];
  if (!cf[0] || (v11 = CFGetTypeID(cf[0]), v11 != CFDictionaryGetTypeID()))
  {
    v10 = 0;
    v33 = 0;
    v12 = cf[0];
    if (!cf[0])
      goto LABEL_24;
    goto LABEL_23;
  }
  v33 = v10;
  CFRetain(v10);
  v12 = cf[0];
  if (cf[0])
LABEL_23:
    CFRelease(v12);
LABEL_24:
  xpc_release(*(xpc_object_t *)object);
  v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v10)
    v13 = 0;
  if (!v13)
  {
    v18 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    v19 = (char *)MEMORY[0x1C3B8CCDC](v6);
    memset(cf, 170, 24);
    v20 = strlen(v19);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = (const void *)v20;
    if (v20 >= 0x17)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      v22 = operator new(v25 + 1);
      cf[1] = v21;
      cf[2] = (CFTypeRef)(v26 | 0x8000000000000000);
      cf[0] = v22;
    }
    else
    {
      HIBYTE(cf[2]) = v20;
      v22 = cf;
      if (!v20)
      {
LABEL_55:
        *((_BYTE *)v21 + (_QWORD)v22) = 0;
        free(v19);
        v27 = cf;
        if (SHIBYTE(cf[2]) < 0)
          v27 = (CFTypeRef *)cf[0];
        *(_DWORD *)object = 136315138;
        *(_QWORD *)&object[4] = v27;
        _os_log_error_impl(&dword_1BF566000, v18, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", object, 0xCu);
        if (SHIBYTE(cf[2]) < 0)
          operator delete((void *)cf[0]);
        v10 = v33;
        if (v33)
          goto LABEL_49;
        goto LABEL_50;
      }
    }
    memcpy(v22, v19, (size_t)v21);
    goto LABEL_55;
  }
  v14 = (const void *)*MEMORY[0x1E0CFBC68];
  v15 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v23 = v15 | 7;
    v24 = v23 + 1;
    v17 = (void **)operator new(v23 + 1);
    __dst[1] = v16;
    v32 = v24 | 0x8000000000000000;
    __dst[0] = v17;
  }
  else
  {
    HIBYTE(v32) = v15;
    v17 = __dst;
    if (!v15)
    {
      LOBYTE(__dst[0]) = 0;
      v10 = v33;
      v30 = v33;
      if (!v33)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  memmove(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v10 = v33;
  v30 = v33;
  if (v33)
LABEL_41:
    CFRetain(v10);
LABEL_42:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v30, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v30)
    CFRelease(v30);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst[0]);
LABEL_48:
  if (v10)
LABEL_49:
    CFRelease(v10);
LABEL_50:
  xpc_release(v6);
}

void sub_1BF5F622C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void SARModule::processTxOff_sync(SARModule *this)
{
  NSObject *v2;
  OBDManager *v3;
  HandDetectionManager *v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  NSObject *v34;
  xpc_object_t v35;
  void *v36;
  xpc_object_t v37;
  const object *v38;
  CFTypeRef v39;
  CFTypeID v40;
  const void *v41;
  uint64_t (*v42)(uint64_t);
  const void *v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  NSObject *v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *aBlock;
  CFTypeRef v53;
  _QWORD __dst[2];
  unint64_t v55;
  CFTypeRef cf;
  char v57;
  uint8_t buf[16];
  char v59;
  __int128 v60;
  unint64_t v61[2];

  v61[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is off", buf, 2u);
  }
  *((_BYTE *)this + 264) = 0;
  v3 = (OBDManager *)*((_QWORD *)this + 24);
  if (v3)
    OBDManager::stop(v3);
  v4 = (HandDetectionManager *)*((_QWORD *)this + 31);
  if (!v4)
  {
LABEL_41:
    v61[0] = 0xAAAAAAAAAAAAAAAALL;
    v31 = xpc_dictionary_create(0, 0, 0);
    v32 = v31;
    if (v31)
    {
      v61[0] = (unint64_t)v31;
    }
    else
    {
      v32 = xpc_null_create();
      v61[0] = (unint64_t)v32;
      if (!v32)
      {
        v33 = xpc_null_create();
        v32 = 0;
        goto LABEL_51;
      }
    }
    if (MEMORY[0x1C3B8CD78](v32) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v32);
      goto LABEL_52;
    }
    v33 = xpc_null_create();
LABEL_51:
    v61[0] = (unint64_t)v33;
LABEL_52:
    xpc_release(v32);
    v35 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
    if (!v35)
      v35 = xpc_null_create();
    v36 = (void *)v61[0];
    xpc_dictionary_set_value((xpc_object_t)v61[0], (const char *)*MEMORY[0x1E0CFBBD8], v35);
    v37 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v37);
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v60 = v36;
    if (v36)
      xpc_retain(v36);
    else
      *(_QWORD *)&v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v38);
    v39 = *(CFTypeRef *)buf;
    if (*(_QWORD *)buf && (v40 = CFGetTypeID(*(CFTypeRef *)buf), v40 == CFDictionaryGetTypeID()))
    {
      cf = v39;
      CFRetain(v39);
      v41 = *(const void **)buf;
      if (!*(_QWORD *)buf)
      {
LABEL_63:
        xpc_release((xpc_object_t)v60);
        v42 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!v39)
          v42 = 0;
        if (!v42)
        {
          v47 = *((_QWORD *)this + 10);
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            goto LABEL_87;
          xpc::dict::to_debug_string((xpc::dict *)v61, buf);
          v48 = v59 >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(v60) = 136315138;
          *(_QWORD *)((char *)&v60 + 4) = v48;
          _os_log_error_impl(&dword_1BF566000, v47, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", (uint8_t *)&v60, 0xCu);
          if ((v59 & 0x80000000) == 0)
            goto LABEL_87;
          v49 = *(void **)buf;
          goto LABEL_92;
        }
        v43 = (const void *)*MEMORY[0x1E0CFBC68];
        v44 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v45 = v44;
        if (v44 >= 0x17)
        {
          v50 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v50 = v44 | 7;
          v51 = v50 + 1;
          v46 = operator new(v50 + 1);
          __dst[1] = v45;
          v55 = v51 | 0x8000000000000000;
          __dst[0] = v46;
        }
        else
        {
          HIBYTE(v55) = v44;
          v46 = __dst;
          if (!v44)
          {
            LOBYTE(__dst[0]) = 0;
            v39 = cf;
            v53 = cf;
            if (!cf)
              goto LABEL_82;
            goto LABEL_81;
          }
        }
        memmove(v46, v43, v45);
        *((_BYTE *)v46 + v45) = 0;
        v39 = cf;
        v53 = cf;
        if (!cf)
        {
LABEL_82:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v53, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (v53)
            CFRelease(v53);
          if ((SHIBYTE(v55) & 0x80000000) == 0)
          {
LABEL_87:
            if (!v39)
            {
LABEL_89:
              xpc_release((xpc_object_t)v61[0]);
              return;
            }
LABEL_88:
            CFRelease(v39);
            goto LABEL_89;
          }
          v49 = (void *)__dst[0];
LABEL_92:
          operator delete(v49);
          if (!v39)
            goto LABEL_89;
          goto LABEL_88;
        }
LABEL_81:
        CFRetain(v39);
        goto LABEL_82;
      }
    }
    else
    {
      v39 = 0;
      cf = 0;
      v41 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_63;
    }
    CFRelease(v41);
    goto LABEL_63;
  }
  HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  *((_BYTE *)this + 168) = 0;
  v5 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 0;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State due to Tx is off: 0x%x\n", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1EF57D890;
  }
  v15 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  *(_QWORD *)&v60 = v7;
  *((_QWORD *)&v60 + 1) = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v16 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v57 = *((_BYTE *)this + 168);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v61[0] = 0;
    LODWORD(cf) = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 7, (const unint64_t *)buf, 1, &v57, 1, v61, (unsigned int *)&cf, &v57, 1uLL);
    if (!v15)
      goto LABEL_30;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_30;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v18 & 1) != 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_30:
  if ((v18 & 1) != 0)
  {
LABEL_31:
    if (*((unsigned __int8 *)this + 169) != *((unsigned __int8 *)this + 168) || !*((_QWORD *)this + 38))
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      if (!v21 || (v22 = *((_QWORD *)this + 6), (v23 = std::__shared_weak_count::lock(v21)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v24 = v23;
      v25 = operator new(8uLL);
      *v25 = this;
      v26 = *((_QWORD *)this + 8);
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v25;
      v29[1] = v22;
      v29[2] = v24;
      dispatch_async_f(v26, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_41;
  }
LABEL_48:
  v34 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v34, OS_LOG_TYPE_ERROR, "Failed to get SAR Fusion State!", buf, 2u);
  }
}

void sub_1BF5F6948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(sar::AppleSARMessageType,void *)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule19initializeWiFi_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2(uint64_t a1, char a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = v2;
  v8[8] = a2;
  v9 = v2[8];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule18initializeOBD_syncEv_block_invoke(_QWORD *a1, char a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  AppleSARHelper *v14;
  AppleSARHelper *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  unsigned int v41;
  uint8_t buf[16];
  unint64_t v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  *(_BYTE *)(v7 + 165) = a2 & 0xF | (16 * a3);
  v13 = *(NSObject **)(v7 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2 & 0xF;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3 & 0xF;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Sending SAR Selection: 0x%x, Tuner State: 0x%x\n", buf, 0xEu);
  }
  v14 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v15 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v14);
    v16 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v17 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = (AppleSARHelper *)off_1EF57D890;
  }
  v23 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v24 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v40 = *(_BYTE *)(v7 + 165);
  if (*((_DWORD *)v15 + 1))
  {
    *(_QWORD *)buf = 0;
    v43[0] = 0;
    v41 = 1;
    v26 = AppleSARHelper::callUserClientMethod(v15, 3, (const unint64_t *)buf, 1, &v40, 1, v43, &v41, &v40, 1uLL);
    if (!v23)
      goto LABEL_34;
  }
  else
  {
    v26 = 0;
    if (!v23)
      goto LABEL_34;
  }
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_34:
  if ((v26 & 1) == 0 && (v29 = *(NSObject **)(v7 + 80), os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v29, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion!", buf, 2u);
    if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
    {
LABEL_37:
      if (*(_QWORD *)(v7 + 304))
        return;
    }
  }
  else if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
  {
    goto LABEL_37;
  }
  v30 = *(std::__shared_weak_count **)(v7 + 56);
  if (!v30 || (v31 = *(_QWORD *)(v7 + 48), (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  v34 = operator new(8uLL);
  *v34 = v7;
  v35 = *(NSObject **)(v7 + 64);
  v36 = (unint64_t *)&v33->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = operator new(0x18uLL);
  *v38 = v34;
  v38[1] = v31;
  v38[2] = v33;
  dispatch_async_f(v35, v38, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  do
    v39 = __ldaxr(v36);
  while (__stlxr(v39 - 1, v36));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_1BF5F71EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule24initializeAccessory_syncEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  AppleSARHelper *v15;
  AppleSARHelper *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  unsigned int v32;
  uint8_t buf[16];
  unint64_t v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (a2)
  {
    v11 = *(_DWORD *)(v5 + 272) | a2;
    v12 = *(_DWORD *)(v5 + 268);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  *(_DWORD *)(v5 + 272) = v11;
  *(_DWORD *)(v5 + 268) = v12;
  v13 = v12 | v11;
  *(_DWORD *)(v5 + 161) = v12 | v11;
  v14 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v13;
    _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State: 0x%x", buf, 8u);
  }
  v15 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v16 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v15);
    v17 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v18 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v16 = (AppleSARHelper *)off_1EF57D890;
  }
  v24 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v25 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v31 = *(_DWORD *)(v5 + 161);
  if (!*((_DWORD *)v16 + 1))
  {
    v27 = 0;
    if (!v24)
      goto LABEL_37;
LABEL_33:
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_37;
  }
  *(_QWORD *)buf = 0;
  v34[0] = 0;
  v32 = 1;
  v27 = AppleSARHelper::callUserClientMethod(v16, 2, (const unint64_t *)buf, 1, &v31, 4, v34, &v32, &v31, 4uLL);
  if (v24)
    goto LABEL_33;
LABEL_37:
  if ((v27 & 1) == 0)
  {
    v30 = *(NSObject **)(v5 + 80);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v30, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
    }
  }
}

void sub_1BF5F7558(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN9SARModule26initializePowerSource_syncEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  SARModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (SARModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_7:
        *((_DWORD *)v5 + 60) = a2;
        SARModule::sendPowerSource_sync(v5);
      }
    }
  }
}

void SARModule::sendPowerSource_sync(SARModule *this)
{
  int v2;
  NSObject *v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 60);
  *((_BYTE *)this + 170) = v2;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending Power Source: 0x%x\n", buf, 8u);
  }
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v5 = (AppleSARHelper *)off_1EF57D890;
  }
  v13 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v14 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *((_BYTE *)this + 170);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v16 = AppleSARHelper::callUserClientMethod(v5, 8, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
    v16 = 0;
    if (!v13)
      goto LABEL_25;
  }
  v17 = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_25:
    if ((v16 & 1) != 0)
      return;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if ((v16 & 1) != 0)
    return;
LABEL_26:
  v19 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v19, OS_LOG_TYPE_ERROR, "Failed to send power state", buf, 2u);
  }
}

void sub_1BF5F78C4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke(_QWORD *a1, unsigned __int8 a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 v11;
  NSObject *v12;
  AppleSARHelper *v13;
  AppleSARHelper *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  NSObject *v38;
  char v39;
  unsigned int v40;
  uint8_t buf[16];
  unint64_t v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (*(_BYTE *)(v5 + 264))
    v11 = a2;
  else
    v11 = 0;
  *(_BYTE *)(v5 + 168) = v11;
  v12 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v11;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State: 0x%x\n", buf, 8u);
  }
  v13 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v14 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v13);
    v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v16 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = (AppleSARHelper *)off_1EF57D890;
  }
  v22 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v23 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v39 = *(_BYTE *)(v5 + 168);
  if (*((_DWORD *)v14 + 1))
  {
    *(_QWORD *)buf = 0;
    v42[0] = 0;
    v40 = 1;
    v25 = AppleSARHelper::callUserClientMethod(v14, 7, (const unint64_t *)buf, 1, &v39, 1, v42, &v40, &v39, 1uLL);
    if (!v22)
      goto LABEL_36;
  }
  else
  {
    v25 = 0;
    if (!v22)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v25 & 1) != 0)
      goto LABEL_37;
    goto LABEL_48;
  }
LABEL_36:
  if ((v25 & 1) != 0)
  {
LABEL_37:
    if (*(unsigned __int8 *)(v5 + 169) != *(unsigned __int8 *)(v5 + 168) || !*(_QWORD *)(v5 + 304))
    {
      v28 = *(std::__shared_weak_count **)(v5 + 56);
      if (!v28 || (v29 = *(_QWORD *)(v5 + 48), (v30 = std::__shared_weak_count::lock(v28)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v31 = v30;
      v32 = operator new(8uLL);
      *v32 = v5;
      v33 = *(NSObject **)(v5 + 64);
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = operator new(0x18uLL);
      *v36 = v32;
      v36[1] = v29;
      v36[2] = v31;
      dispatch_async_f(v33, v36, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      do
        v37 = __ldaxr(v34);
      while (__stlxr(v37 - 1, v34));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    return;
  }
LABEL_48:
  v38 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v38, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
}

void sub_1BF5F7CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void SARModule::sendCurrentState_sync(SARModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  AppleSARHelper *v33;
  AppleSARHelper *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  AppleSARHelper *v48;
  AppleSARHelper *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  NSObject *v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  AppleSARHelper *v65;
  AppleSARHelper *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unint64_t *v78;
  unint64_t v79;
  AppleSARHelper *v80;
  AppleSARHelper *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char v92;
  unint64_t *v93;
  unint64_t v94;
  AppleSARHelper *v95;
  AppleSARHelper *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char v107;
  unint64_t *v108;
  unint64_t v109;
  AppleSARHelper *v110;
  AppleSARHelper *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD aBlock[6];
  std::__shared_weak_count *v119;
  __int16 v120;
  char v121;
  void *v122;
  dispatch_object_t object;
  AppleSARHelper *v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint8_t buf[16];
  unint64_t v129[2];

  v129[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 10);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Processing Cached Values", buf, 2u);
  }
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v3);
  if (capabilities::abs::operator&())
  {
    BYTE2(v126) = 0;
    LOWORD(v126) = 0;
    v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    v5 = (AppleSARHelper *)off_1EF57D890;
    if (!off_1EF57D890)
    {
      AppleSARHelper::create_default_global(v4);
      v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v7 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
      off_1EF57D890 = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v5 = (AppleSARHelper *)off_1EF57D890;
    }
    v13 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    v124 = v5;
    v125 = *(&off_1EF57D890 + 1);
    if (*(&off_1EF57D890 + 1))
    {
      v14 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v5 + 1))
    {
      *(_QWORD *)buf = 3;
      v129[0] = 0;
      v127 = 1;
      v16 = AppleSARHelper::callUserClientMethod(v5, 31, (const unint64_t *)buf, 1, &v126, 3, v129, &v127, &v126, 3uLL);
      if (!v13)
        goto LABEL_26;
    }
    else
    {
      v16 = 0;
      if (!v13)
        goto LABEL_26;
    }
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v16 & 1) != 0)
      {
LABEL_27:
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v19 || (v20 = *((_QWORD *)this + 6), (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v22);
        }
        v27 = *((_QWORD *)this + 35);
        v28 = *(unsigned __int16 *)((char *)&v126 + 1);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule21sendCurrentState_syncEv_block_invoke;
        aBlock[3] = &__block_descriptor_59_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e21_v20__0B8_object__v_12l;
        aBlock[4] = this;
        aBlock[5] = v20;
        v119 = v22;
        do
          v29 = __ldxr(p_shared_weak_owners);
        while (__stxr(v29 + 1, p_shared_weak_owners));
        v120 = v126;
        v121 = BYTE2(v126);
        v30 = _Block_copy(aBlock);
        v31 = *((_QWORD *)this + 8);
        if (v31)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        v122 = v30;
        object = v31;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, v28, &v122);
        if (object)
          dispatch_release(object);
        if (v122)
          _Block_release(v122);
        if (v119)
          std::__shared_weak_count::__release_weak(v119);
        std::__shared_weak_count::__release_weak(v22);
        goto LABEL_49;
      }
      goto LABEL_47;
    }
LABEL_26:
    if ((v16 & 1) != 0)
      goto LABEL_27;
LABEL_47:
    v32 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Failed to get SAR transition time!", buf, 2u);
    }
  }
LABEL_49:
  v33 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v34 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v33);
    v35 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v36 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v35;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v34 = (AppleSARHelper *)off_1EF57D890;
  }
  v42 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v34;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v43 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v126 = *(_DWORD *)((char *)this + 161);
  if (*((_DWORD *)v34 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v45 = AppleSARHelper::callUserClientMethod(v34, 2, (const unint64_t *)buf, 1, &v126, 4, v129, &v127, &v126, 4uLL);
    if (!v42)
      goto LABEL_71;
  }
  else
  {
    v45 = 0;
    if (!v42)
      goto LABEL_71;
  }
  v46 = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
LABEL_71:
    if ((v45 & 1) != 0)
      goto LABEL_72;
LABEL_91:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send accessory state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  if ((v45 & 1) == 0)
    goto LABEL_91;
LABEL_72:
  v48 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v49 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v48);
    v50 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v51 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v49 = (AppleSARHelper *)off_1EF57D890;
  }
  v57 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v49;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v58 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 165);
  if (*((_DWORD *)v49 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v60 = AppleSARHelper::callUserClientMethod(v49, 3, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v57)
      goto LABEL_97;
  }
  else
  {
    v60 = 0;
    if (!v57)
      goto LABEL_97;
  }
  v63 = (unint64_t *)&v57->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_97:
    if ((v60 & 1) != 0)
      goto LABEL_98;
LABEL_117:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send sar_selection and tuner state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if ((v60 & 1) == 0)
    goto LABEL_117;
LABEL_98:
  v65 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v66 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v65);
    v67 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v68 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v66 = (AppleSARHelper *)off_1EF57D890;
  }
  v74 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v66;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v75 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 167);
  if (*((_DWORD *)v66 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v77 = AppleSARHelper::callUserClientMethod(v66, 6, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v74)
      goto LABEL_123;
  }
  else
  {
    v77 = 0;
    if (!v74)
      goto LABEL_123;
  }
  v78 = (unint64_t *)&v74->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_123:
    if ((v77 & 1) != 0)
      goto LABEL_124;
LABEL_143:
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send speaker state";
    goto LABEL_195;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  if ((v77 & 1) == 0)
    goto LABEL_143;
LABEL_124:
  v80 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v81 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v80);
    v82 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v83 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v82;
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v87 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v81 = (AppleSARHelper *)off_1EF57D890;
  }
  v89 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v81;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v90 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 168);
  if (*((_DWORD *)v81 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v92 = AppleSARHelper::callUserClientMethod(v81, 7, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v89)
      goto LABEL_150;
  }
  else
  {
    v92 = 0;
    if (!v89)
      goto LABEL_150;
  }
  v93 = (unint64_t *)&v89->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
LABEL_150:
  if ((v92 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send grip state";
    goto LABEL_195;
  }
  v95 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v96 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v95);
    v97 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v98 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v97;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v102 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v96 = (AppleSARHelper *)off_1EF57D890;
  }
  v104 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v96;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v105 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 170);
  if (*((_DWORD *)v96 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v107 = AppleSARHelper::callUserClientMethod(v96, 8, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
    if (!v104)
      goto LABEL_176;
  }
  else
  {
    v107 = 0;
    if (!v104)
      goto LABEL_176;
  }
  v108 = (unint64_t *)&v104->__shared_owners_;
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
LABEL_176:
  if ((v107 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v62 = "Failed to send power state";
    goto LABEL_195;
  }
  v110 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v111 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v110);
    std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100]((__int128 *)buf);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    v111 = (AppleSARHelper *)off_1EF57D890;
  }
  v112 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  v124 = v111;
  v125 = *(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v113 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v126) = *((_BYTE *)this + 171);
  if (*((_DWORD *)v111 + 1))
  {
    *(_QWORD *)buf = 0;
    v129[0] = 0;
    v127 = 1;
    v115 = AppleSARHelper::callUserClientMethod(v111, 9, (const unint64_t *)buf, 1, &v126, 1, v129, &v127, &v126, 1uLL);
  }
  else
  {
    v115 = 0;
  }
  if (v112)
  {
    v116 = (unint64_t *)&v112->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if ((v115 & 1) == 0)
  {
    v61 = *((_QWORD *)this + 10);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v62 = "Failed to send wrist state";
LABEL_195:
      _os_log_error_impl(&dword_1BF566000, v61, OS_LOG_TYPE_ERROR, v62, buf, 2u);
    }
  }
}

void sub_1BF5F89A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule21sendCurrentState_syncEv_block_invoke(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = "Failed to send";
          v13 = *(unsigned __int16 *)(a1 + 57);
          if (a2)
            v12 = "Succeeded in sending";
          v14 = 136315394;
          v15 = v12;
          v16 = 1024;
          v17 = v13;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I %s stewie SAR wait time (%u sec)", (uint8_t *)&v14, 0x12u);
        }
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void xpc::dict::to_debug_string(xpc::dict *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (char *)MEMORY[0x1C3B8CCDC](*(_QWORD *)this);
  memset(a2, 170, 24);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
    goto LABEL_9;
  }
  *((_BYTE *)a2 + 23) = v4;
  if (v4)
  {
LABEL_9:
    memcpy(a2, v3, v5);
    *((_BYTE *)a2 + v5) = 0;
    free(v3);
    return;
  }
  *(_BYTE *)a2 = 0;
  free(v3);
}

uint64_t SARModule::convertUSBCAccessoryBitMask(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v4) = 0;
    while (1)
    {
      v6 = *v2;
      v7 = v2[1];
      if (v6 == 17 && v7 == 2)
        LODWORD(v4) = v4 | 0x40000;
      if (v6 == 18 && v7 == 2)
        LODWORD(v4) = v4 | 0x80000;
      if (v6 == 19 && v7 == 2)
        LODWORD(v4) = v4 | 0x100000;
      if (v6 == 20 && v7 == 2)
        v4 = v4 | 0x200000;
      else
        v4 = v4;
      v8 = v2[3];
      if (v8 == 3 && v6 == 2055)
      {
        if (v7 == 2)
        {
          v4 = v4 | 0x400000;
LABEL_25:
          v5 = *(_DWORD *)(a1 + 272) | 1;
          goto LABEL_5;
        }
        v4 = v4 & 0xFFBFFFFF;
      }
      else
      {
        if (v6 == 4)
          *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0xFFFFFBFF | ((v7 == 2) << 10);
        if (!v8 || v8 == 0xFFFF)
          goto LABEL_6;
        if (v7 == 2)
          goto LABEL_25;
      }
      v5 = *(_DWORD *)(a1 + 272) & 0xFFFFFFFE;
LABEL_5:
      *(_DWORD *)(a1 + 272) = v5;
LABEL_6:
      v2 += 6;
      if (v2 == v3)
        return v4;
    }
  }
  return 0;
}

void SARModule::setupTxIndicationWorkaround(SARModule *this)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  NSObject *v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  NSObject *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  NSObject *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  NSObject *v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  _QWORD v70[6];
  std::__shared_weak_count *v71;
  xpc_object_t v72;
  xpc_object_t v73;
  _QWORD aBlock[6];
  std::__shared_weak_count *v75;
  xpc_object_t object;
  uint8_t buf[8];
  dispatch_object_t v78;
  xpc_object_t v79[2];

  if (*((_QWORD *)this + 35))
  {
    v2 = xpc_dictionary_create(0, 0, 0);
    v3 = MEMORY[0x1E0C812F8];
    if (v2 || (v2 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v2) == v3)
      {
        xpc_retain(v2);
        v4 = v2;
      }
      else
      {
        v4 = xpc_null_create();
      }
    }
    else
    {
      v4 = xpc_null_create();
      v2 = 0;
    }
    xpc_release(v2);
    v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB88]);
    if (!v6)
      v6 = xpc_null_create();
    v7 = (const char *)*MEMORY[0x1E0DDFA68];
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA68], v6);
    v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
    v9 = xpc_BOOL_create(1);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB60], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11 || (v12 = *((_QWORD *)this + 6), (v13 = std::__shared_weak_count::lock(v11)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v14 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
      v19 = *((_QWORD *)this + 35);
      v79[0] = v4;
      if (v4)
      {
LABEL_22:
        xpc_retain(v4);
LABEL_25:
        v20 = MEMORY[0x1E0C809B0];
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        aBlock[4] = this;
        aBlock[5] = v12;
        v75 = v14;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        object = v4;
        if (v4)
          xpc_retain(v4);
        else
          object = xpc_null_create();
        v22 = _Block_copy(aBlock);
        v23 = *((_QWORD *)this + 8);
        if (v23)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        *(_QWORD *)buf = v22;
        v78 = v23;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v19 + 48))(v19, v79, buf);
        v24 = MEMORY[0x1E0C812F8];
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v79[0]);
        v79[0] = 0;
        xpc_release(object);
        object = 0;
        if (v75)
          std::__shared_weak_count::__release_weak(v75);
        std::__shared_weak_count::__release_weak(v14);
        xpc_release(v4);
        v25 = xpc_dictionary_create(0, 0, 0);
        if (v25 || (v25 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v25) == v24)
          {
            xpc_retain(v25);
            v26 = v25;
          }
          else
          {
            v26 = xpc_null_create();
          }
        }
        else
        {
          v26 = xpc_null_create();
          v25 = 0;
        }
        xpc_release(v25);
        v27 = MEMORY[0x1C3B8CD78](v26);
        if (v27 != v24)
        {
          v28 = *((_QWORD *)this + 10);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "Failed to create dictionary for antenna command driver!", buf, 2u);
          }
          goto LABEL_80;
        }
        v29 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD0]);
        if (!v29)
          v29 = xpc_null_create();
        xpc_dictionary_set_value(v26, v7, v29);
        v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        v31 = xpc_BOOL_create(1);
        if (!v31)
          v31 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFB98], v31);
        v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        v33 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBB8]);
        if (!v33)
          v33 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFBB0], v33);
        v34 = xpc_null_create();
        xpc_release(v33);
        xpc_release(v34);
        v35 = xpc_int64_create(1);
        if (!v35)
          v35 = xpc_null_create();
        xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0DDFB70], v35);
        v36 = xpc_null_create();
        xpc_release(v35);
        xpc_release(v36);
        v37 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v37 || (v38 = v20, v39 = *((_QWORD *)this + 6), (v40 = std::__shared_weak_count::lock(v37)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v41 = v40;
        v42 = (unint64_t *)&v40->__shared_weak_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = (unint64_t *)&v40->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (v45)
        {
          v46 = *((_QWORD *)this + 35);
          v73 = v26;
          if (v26)
          {
LABEL_63:
            xpc_retain(v26);
            goto LABEL_66;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v41);
          v46 = *((_QWORD *)this + 35);
          v73 = v26;
          if (v26)
            goto LABEL_63;
        }
        v73 = xpc_null_create();
LABEL_66:
        v70[0] = v38;
        v70[1] = 3321888768;
        v70[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_39;
        v70[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v70[4] = this;
        v70[5] = v39;
        v71 = v41;
        do
          v47 = __ldxr(v42);
        while (__stxr(v47 + 1, v42));
        v72 = v26;
        if (v26)
          xpc_retain(v26);
        else
          v72 = xpc_null_create();
        v48 = _Block_copy(v70);
        v49 = *((_QWORD *)this + 8);
        if (v49)
          dispatch_retain(*((dispatch_object_t *)this + 8));
        *(_QWORD *)buf = v48;
        v78 = v49;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v46 + 48))(v46, &v73, buf);
        v20 = v38;
        v24 = MEMORY[0x1E0C812F8];
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v73);
        v73 = 0;
        xpc_release(v72);
        v72 = 0;
        if (v71)
          std::__shared_weak_count::__release_weak(v71);
        std::__shared_weak_count::__release_weak(v41);
LABEL_80:
        xpc_release(v26);
        if (v27 != v24)
          return;
        v50 = xpc_dictionary_create(0, 0, 0);
        if (v50 || (v50 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v50) == v24)
          {
            xpc_retain(v50);
            v51 = v50;
          }
          else
          {
            v51 = xpc_null_create();
          }
        }
        else
        {
          v51 = xpc_null_create();
          v50 = 0;
        }
        xpc_release(v50);
        v52 = xpc_string_create((const char *)*MEMORY[0x1E0DDFC08]);
        if (!v52)
          v52 = xpc_null_create();
        xpc_dictionary_set_value(v51, v7, v52);
        v53 = xpc_null_create();
        xpc_release(v52);
        xpc_release(v53);
        v54 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        if (!v54 || (v55 = *((_QWORD *)this + 6), (v56 = std::__shared_weak_count::lock(v54)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v57 = v56;
        v58 = (unint64_t *)&v56->__shared_weak_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        v60 = (unint64_t *)&v56->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (v61)
        {
          v62 = *((_QWORD *)this + 35);
          v69 = v51;
          if (v51)
          {
LABEL_97:
            xpc_retain(v51);
            goto LABEL_100;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v57);
          v62 = *((_QWORD *)this + 35);
          v69 = v51;
          if (v51)
            goto LABEL_97;
        }
        v69 = xpc_null_create();
LABEL_100:
        v66[0] = v20;
        v66[1] = 3321888768;
        v66[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_40;
        v66[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v66[4] = this;
        v66[5] = v55;
        v67 = v57;
        do
          v63 = __ldxr(v58);
        while (__stxr(v63 + 1, v58));
        v68 = v51;
        if (v51)
          xpc_retain(v51);
        else
          v68 = xpc_null_create();
        v64 = _Block_copy(v66);
        v65 = *((_QWORD *)this + 8);
        if (v65)
          dispatch_retain(v65);
        *(_QWORD *)buf = v64;
        v78 = v65;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v62 + 48))(v62, &v69, buf);
        if (v78)
          dispatch_release(v78);
        if (*(_QWORD *)buf)
          _Block_release(*(const void **)buf);
        xpc_release(v69);
        v69 = 0;
        xpc_release(v68);
        v68 = 0;
        if (v67)
          std::__shared_weak_count::__release_weak(v67);
        std::__shared_weak_count::__release_weak(v57);
        xpc_release(v51);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
      v19 = *((_QWORD *)this + 35);
      v79[0] = v4;
      if (v4)
        goto LABEL_22;
    }
    v79[0] = xpc_null_create();
    goto LABEL_25;
  }
  v5 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Check if it is mav device or antenna command driver is ready yet!", buf, 2u);
  }
}

void sub_1BF5F9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,xpc_object_t a25,xpc_object_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,xpc_object_t a34)
{
  std::__shared_weak_count *v34;
  void *v35;
  uint64_t v36;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v36 - 128);
  xpc_release(object);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  xpc_release(a17);
  std::__shared_weak_count::__release_weak(v34);
  xpc_release(v35);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx Capping Enable", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF5F9AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_39(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx indication", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF5F9D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_40(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  xpc_object_t object;
  uint8_t buf[8];
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if ((a2 & 1) != 0)
      {
        v11 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Succeeded in registering Tx indication", buf, 2u);
        }
      }
      else
      {
        v13 = (void *)a1[7];
        v12 = a1 + 7;
        v14 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(v13, (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v15 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18[0] = v12;
            v18[1] = v14;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &object);
            xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v16);
            if (v21 >= 0)
              v17 = buf;
            else
              v17 = *(uint8_t **)buf;
            *(_DWORD *)v22 = 136315138;
            v23 = v17;
            _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v22, 0xCu);
            if (v21 < 0)
              operator delete(*(void **)buf);
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1BF5F9F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void SARModule::transmitStateHandler(_QWORD *a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (v7 = a1[6], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[8];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::createTransmitStateDict_sync(capabilities::radio *a1@<X0>, int a2@<W1>, int a3@<W2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint8_t v17[16];

  if ((capabilities::radio::maverick(a1) & 1) != 0)
  {
    v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v8) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v8);
        v9 = v8;
      }
      else
      {
        v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_null_create();
      v8 = 0;
    }
    xpc_release(v8);
    if (a2 == 1)
    {
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
      if (!v11)
        v11 = xpc_null_create();
    }
    else
    {
      if (a2)
      {
        *a4 = xpc_null_create();
LABEL_35:
        xpc_release(v9);
        return;
      }
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
      if (!v11)
        v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBBD8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    switch(a3)
    {
      case 0:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD40]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 1:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB90]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 2:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC20]);
        if (!v13)
          v13 = xpc_null_create();
        goto LABEL_31;
      case 3:
        v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA78]);
        if (!v13)
          v13 = xpc_null_create();
LABEL_31:
        xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBD88], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        break;
      default:
        break;
    }
    v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5F8]);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB680], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    *a4 = v9;
    v9 = xpc_null_create();
    goto LABEL_35;
  }
  v10 = *((_QWORD *)a1 + 10);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v17 = 0;
    _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "This is not supported device", v17, 2u);
  }
  *a4 = xpc_null_create();
}

uint64_t SARModule::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  const char *v2;

  if ((_DWORD)result == 1)
  {
    *(_BYTE *)(a2 + 23) = 12;
    strcpy((char *)a2, "EventUpdated");
  }
  else
  {
    if ((_DWORD)result)
      v2 = "UnknownReason";
    else
      v2 = "CallConnected";
    *(_BYTE *)(a2 + 23) = 13;
    *(_QWORD *)a2 = *(_QWORD *)v2;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(v2 + 5);
    *(_BYTE *)(a2 + 13) = 0;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 64), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = (std::__shared_weak_count *)v3[12];
  v3[11] = 0;
  v3[12] = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3[35])
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  if (v3[35])
LABEL_6:
    antenna::CommandDriver::registerHandler();
LABEL_8:
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF5FA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v15 = v11[1];
  if (v15)
  {
    dispatch_group_leave(v15);
    v16 = v11[1];
    if (v16)
      dispatch_release(v16);
  }
  operator delete(v11);
  v17 = (std::__shared_weak_count *)v10[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E79165A8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E79165A8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(a1 + 8);
      if (v9)
        SARModule::transmitStateHandler(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<SARModule>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E79165A8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E79165A8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  off_1EF57D890 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  SARModule **v2;
  SARModule *v3;
  const void *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  const void *v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  SARModule *v49;
  const void *v50;
  void *v51[2];
  unint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  SARModule *v57;
  const void *v58;
  void *__p;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  SARModule *v63;
  const void *v64;
  void **__dst;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  SARModule *v69;
  const void *v70;
  _QWORD aBlock[5];
  const void *v72;

  v2 = *(SARModule ***)a1;
  v3 = **(SARModule ***)a1;
  SARModule::initializeHelpers_sync(v3);
  v4 = (const void *)*MEMORY[0x1E0CFB4E8];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB4E8]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v66 = v6;
    v67 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v67) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  v11 = _Block_copy(aBlock);
  v72 = v11;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__dst, &v72);
  if (v11)
    _Block_release(v11);
  if (SHIBYTE(v67) < 0)
    operator delete(__dst);
  v12 = (const void *)*MEMORY[0x1E0CFB1C8];
  v13 = strlen((const char *)*MEMORY[0x1E0CFB1C8]);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v60 = v14;
    v61 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v61) = v13;
  p_p = &__p;
  if (v13)
LABEL_20:
    memmove(p_p, v12, v14);
  *((_BYTE *)p_p + v14) = 0;
  __dst = v10;
  v66 = 3221225472;
  v67 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v68 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v69 = v3;
  v18 = _Block_copy(&__dst);
  v70 = v18;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__p, &v70);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
  v19 = (const void *)*MEMORY[0x1E0CFB998];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB998]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v54 = v21;
    v55 = v24 | 0x8000000000000000;
    v53 = v22;
    goto LABEL_32;
  }
  HIBYTE(v55) = v20;
  v22 = &v53;
  if (v20)
LABEL_32:
    memmove(v22, v19, v21);
  *((_BYTE *)v22 + v21) = 0;
  __p = v10;
  v60 = 3221225472;
  v61 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v62 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v63 = v3;
  v25 = _Block_copy(&__p);
  v64 = v25;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v53, &v64);
  if (v25)
    _Block_release(v25);
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  v26 = (const void *)*MEMORY[0x1E0CFB868];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB868]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v46 = v28;
    v47 = v31 | 0x8000000000000000;
    v45 = v29;
    goto LABEL_44;
  }
  HIBYTE(v47) = v27;
  v29 = &v45;
  if (v27)
LABEL_44:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  v53 = v10;
  v54 = 3221225472;
  v55 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  v56 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v57 = v3;
  v32 = _Block_copy(&v53);
  v58 = v32;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v45, &v58);
  if (v32)
    _Block_release(v32);
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  v33 = (const void *)*MEMORY[0x1E0CFBAC0];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBAC0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_70;
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    v51[1] = v35;
    v52 = v38 | 0x8000000000000000;
    v51[0] = v36;
    goto LABEL_56;
  }
  HIBYTE(v52) = v34;
  v36 = v51;
  if (v34)
LABEL_56:
    memmove(v36, v33, (size_t)v35);
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  v45 = v10;
  v46 = 3221225472;
  v47 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  v48 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v49 = v3;
  v39 = _Block_copy(&v45);
  v50 = v39;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)v51, &v50);
  if (v39)
    _Block_release(v39);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  SARModule::finishInitialization_sync(v3);
  v40 = v2[1];
  if (v40)
  {
    dispatch_group_leave(v40);
    v41 = v2[1];
    if (v41)
      dispatch_release(v41);
  }
  operator delete(v2);
  v42 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(a1);
}

void sub_1BF5FAFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _QWORD *v47;
  _QWORD *v48;
  const void *v49;
  NSObject *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;

  if (v49)
    _Block_release(v49);
  if (a23 < 0)
    operator delete(__p);
  v51 = v48[1];
  if (v51)
  {
    dispatch_group_leave(v51);
    v52 = v48[1];
    if (v52)
      dispatch_release(v52);
  }
  operator delete(v48);
  v53 = (std::__shared_weak_count *)v47[2];
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  operator delete(v47);
  _Unwind_Resume(a1);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  xpc_object_t v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *a3;
    if (*a3)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = (std::__shared_weak_count *)v4[7];
    if (!v8)
      goto LABEL_15;
    goto LABEL_7;
  }
  v5 = xpc_null_create();
  v6 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = (std::__shared_weak_count *)v4[7];
  if (!v8)
LABEL_15:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  v9 = v4[6];
  v10 = std::__shared_weak_count::lock(v8);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = operator new(0x18uLL);
  *v12 = v4;
  v12[1] = v5;
  v13 = xpc_null_create();
  v12[2] = v7;
  v14 = v4[8];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v12;
  v17[1] = v9;
  v17[2] = v11;
  dispatch_async_f(v14, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t a2, const void **a3)
{
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  if (*a3)
  {
    v4 = _Block_copy(*a3);
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v4 = 0;
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
      goto LABEL_12;
  }
  v6 = v3[6];
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = v3;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = v3[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2, const void **a3)
{
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  if (*a3)
  {
    v4 = _Block_copy(*a3);
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v4 = 0;
    v5 = (std::__shared_weak_count *)v3[7];
    if (!v5)
      goto LABEL_12;
  }
  v6 = v3[6];
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = v3;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = v3[8];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t object;
  uint8_t buf[8];

  v2 = *a1;
  v3 = **a1;
  v4 = 3760250884;
  if (MEMORY[0x1C3B8CD78]((*a1)[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(_QWORD *)(v3 + 176);
    if (v5)
    {
      v6 = (void *)v2[1];
      object = v6;
      if (v6)
        xpc_retain(v6);
      else
        object = xpc_null_create();
      AudioManager::setAudioState(v5, (xpc::object *)&object);
      xpc_release(object);
      v4 = 0;
      object = 0;
    }
    else
    {
      v7 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Audio Manager is not created yet", buf, 2u);
      }
    }
  }
  else
  {
    v4 = 3760250880;
  }
  v8 = v2[2];
  *(_QWORD *)buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v8 + 16))(v8, v4, buf);
  xpc_release(*(xpc_object_t *)buf);
  v9 = (const void *)v2[2];
  if (v9)
    _Block_release(v9);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void sub_1BF5FB810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  v14 = *(const void **)(v12 + 16);
  if (v14)
    _Block_release(v14);
  xpc_release(*(xpc_object_t *)(v12 + 8));
  operator delete((void *)v12);
  v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  uint64_t v18;
  NSObject *v19;
  xpc_object_t v20;
  uint64_t v21;
  NSObject *v22;
  ctu *v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  ctu *v29;
  uint8_t buf[32];
  _BYTE v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = MEMORY[0x1C3B8CD78]((*a1)[1]);
  v5 = *(NSObject **)(v3 + 80);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = 3760250880;
    if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Motion parameter dictionary is empty!", buf, 2u);
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_DEFAULT))
  {
    v7 = (char *)MEMORY[0x1C3B8CCDC](v2[1]);
    memset(buf, 170, 24);
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      *(_QWORD *)&buf[8] = v9;
      *(_QWORD *)&buf[16] = v12 | 0x8000000000000000;
      *(_QWORD *)buf = v10;
    }
    else
    {
      buf[23] = v8;
      v10 = buf;
      if (!v8)
        goto LABEL_13;
    }
    memcpy(v10, v7, v9);
LABEL_13:
    *((_BYTE *)v10 + v9) = 0;
    free(v7);
    v13 = buf;
    if ((buf[23] & 0x80u) != 0)
      v13 = *(uint8_t **)buf;
    *(_DWORD *)v31 = 136315138;
    *(_QWORD *)&v31[4] = v13;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Motion parameter is given: %s", v31, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v5 = *(NSObject **)(v3 + 80);
  }
  if (!*(_QWORD *)(v3 + 104))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D CoreMotion On Body Handler is empty", buf, 2u);
    }
    goto LABEL_31;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Set CoreMotion On Body Handler's motion parameter!", buf, 2u);
  }
  ctu::xpc_to_cf((ctu *)v2[1], v14);
  v15 = *(const void **)buf;
  if (*(_QWORD *)buf)
  {
    v16 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v16 == CFDictionaryGetTypeID())
    {
      CFRetain(v15);
      v17 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_29;
    }
    else
    {
      v15 = 0;
      v17 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_29;
    }
    CFRelease(v17);
  }
LABEL_29:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(v3 + 104), v15);
  if (v15)
    CFRelease(v15);
LABEL_31:
  v18 = *(_QWORD *)(v3 + 192);
  v19 = *(NSObject **)(v3 + 80);
  if (v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEFAULT, "#I Setting OBD manager's motion parameter!", buf, 2u);
      v18 = *(_QWORD *)(v3 + 192);
    }
    v20 = (xpc_object_t)v2[1];
    *(_QWORD *)v31 = v20;
    if (v20)
    {
      xpc_retain(v20);
    }
    else
    {
      v20 = xpc_null_create();
      *(_QWORD *)v31 = v20;
    }
    OBDManager::setMotionParameter(v18, (ctu **)v31);
    xpc_release(v20);
    *(_QWORD *)v31 = 0;
  }
  else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEBUG, "#D OBD manager is empty", buf, 2u);
  }
  v21 = *(_QWORD *)(v3 + 248);
  v22 = *(NSObject **)(v3 + 80);
  if (v21)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting hand detection manager's motion parameter!", buf, 2u);
      v21 = *(_QWORD *)(v3 + 248);
    }
    v23 = (ctu *)v2[1];
    v29 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = (ctu *)xpc_null_create();
      v29 = v23;
    }
    HandDetectionManager::setMotionParameter(v21, &v29);
    xpc_release(v23);
    v6 = 0;
    v29 = 0;
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, "#D hand detection manager is empty", buf, 2u);
    }
    v6 = 0;
  }
LABEL_50:
  v24 = v2[2];
  *(_QWORD *)buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v24 + 16))(v24, v6, buf);
  xpc_release(*(xpc_object_t *)buf);
  v25 = (const void *)v2[2];
  if (v25)
    _Block_release(v25);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v26 = (std::__shared_weak_count *)a1[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(a1);
}

void sub_1BF5FBD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc_object_t value;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  char *bytes_ptr;
  size_t length;
  void *v12;
  int v13;
  int v14;
  NSObject *v15;
  AppleSARHelper *v16;
  AppleSARHelper *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  NSObject *v44;
  xpc_object_t v45;
  uint64_t v46;
  xpc_object_t v47;
  const void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  xpc_object_t object[2];
  unint64_t v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  value = xpc_dictionary_get_value((xpc_object_t)(*a1)[1], (const char *)*MEMORY[0x1E0CFB208]);
  v5 = value;
  if (value)
    xpc_retain(value);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C81350])
  {
    v6 = *(NSObject **)(v3 + 80);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (!v2[2])
        goto LABEL_8;
      goto LABEL_7;
    }
    LOWORD(object[0]) = 0;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed to get accessory information!", (uint8_t *)object, 2u);
    if (v2[2])
    {
LABEL_7:
      v7 = xpc_null_create();
      v8 = v2[2];
      object[0] = v7;
      v9 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v9);
    }
  }
LABEL_8:
  bytes_ptr = (char *)xpc_data_get_bytes_ptr(v5);
  length = xpc_data_get_length(v5);
  if (length >= 0xC)
  {
    v29 = 12 * (length / 0xC);
    v30 = (char *)operator new(v29);
    v12 = v30;
    v31 = 0;
    do
    {
      v32 = &v30[v31];
      v33 = *(_QWORD *)&bytes_ptr[v31];
      *((_DWORD *)v32 + 2) = *(_DWORD *)&bytes_ptr[v31 + 8];
      *(_QWORD *)v32 = v33;
      v31 += 12;
    }
    while (v29 != v31);
    v13 = 0;
    v34 = v30;
    while (1)
    {
      v36 = *(unsigned __int16 *)v34;
      v37 = *((unsigned __int16 *)v34 + 1);
      if (v36 == 17 && v37 == 2)
        v13 |= 0x40000u;
      if (v36 == 18 && v37 == 2)
        v13 |= 0x80000u;
      if (v36 == 19 && v37 == 2)
        v13 |= 0x100000u;
      if (v36 == 20 && v37 == 2)
        v13 |= 0x200000u;
      v38 = *((unsigned __int16 *)v34 + 3);
      if (v38 == 3 && v36 == 2055)
      {
        if (v37 == 2)
        {
          v13 |= 0x400000u;
LABEL_54:
          v35 = *(_DWORD *)(v3 + 272) | 1;
          goto LABEL_35;
        }
        v13 &= ~0x400000u;
      }
      else
      {
        if (v36 == 4)
          *(_DWORD *)(v3 + 272) = *(_DWORD *)(v3 + 272) & 0xFFFFFBFF | ((v37 == 2) << 10);
        if (!v38 || v38 == 0xFFFF)
          goto LABEL_36;
        if (v37 == 2)
          goto LABEL_54;
      }
      v35 = *(_DWORD *)(v3 + 272) & 0xFFFFFFFE;
LABEL_35:
      *(_DWORD *)(v3 + 272) = v35;
LABEL_36:
      v34 += 12;
      if (v34 == &v30[v29])
        goto LABEL_10;
    }
  }
  v12 = 0;
  v13 = 0;
LABEL_10:
  *(_DWORD *)(v3 + 268) = v13;
  v14 = *(_DWORD *)(v3 + 272) | v13;
  *(_DWORD *)(v3 + 161) = v14;
  v15 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v14;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State with USB-C: 0x%x", (uint8_t *)object, 8u);
  }
  v16 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v17 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v16);
    v18 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v19 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)object[1];
    if (object[1])
    {
      v23 = (unint64_t *)((char *)object[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = (AppleSARHelper *)off_1EF57D890;
  }
  v25 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v26 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v52 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v17 + 1))
  {
    object[0] = 0;
    v55[0] = 0;
    v53 = 1;
    v28 = AppleSARHelper::callUserClientMethod(v17, 2, (const unint64_t *)object, 1, &v52, 4, v55, &v53, &v52, 4uLL);
    if (!v25)
      goto LABEL_59;
  }
  else
  {
    v28 = 0;
    if (!v25)
      goto LABEL_59;
  }
  v39 = (unint64_t *)&v25->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_59:
    if ((v28 & 1) != 0)
      goto LABEL_60;
LABEL_63:
    v44 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v44, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", (uint8_t *)object, 2u);
      if (!v2[2])
        goto LABEL_66;
    }
    else if (!v2[2])
    {
      goto LABEL_66;
    }
    v45 = xpc_null_create();
    v46 = v2[2];
    object[0] = v45;
    v47 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v46 + 16))(v46, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v47);
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if ((v28 & 1) == 0)
    goto LABEL_63;
LABEL_60:
  if (v2[2])
  {
    v41 = xpc_null_create();
    v42 = v2[2];
    object[0] = v41;
    v43 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v42 + 16))(v42, 0, object);
    xpc_release(object[0]);
    xpc_release(v43);
  }
LABEL_66:
  if (v12)
    operator delete(v12);
  xpc_release(v5);
  v48 = (const void *)v2[2];
  if (v48)
    _Block_release(v48);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v49 = (std::__shared_weak_count *)a1[2];
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(a1);
}

void sub_1BF5FC43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  AppleSARHelper *v5;
  AppleSARHelper *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint8_t buf[16];
  unint64_t v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 296) = 1;
  v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Blocking accessories", buf, 2u);
  }
  v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v6 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v5);
    v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v8 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v6 = (AppleSARHelper *)off_1EF57D890;
  }
  v14 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v15 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v27 = *(_BYTE *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(_QWORD *)buf = 0;
    v30[0] = 0;
    v28 = 1;
    v17 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    v17 = 0;
    if (!v14)
      goto LABEL_25;
  }
  v18 = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_25:
    if ((v17 & 1) != 0)
      goto LABEL_26;
LABEL_29:
    v21 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Failed to set blocking accessories", buf, 2u);
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    else
    {
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v22 + 16))(v22, 3760250880, buf);
    xpc_release(*(xpc_object_t *)buf);
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v17 & 1) == 0)
    goto LABEL_29;
LABEL_26:
  v20 = v2[1];
  if (v20)
  {
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v20 + 16))(v20, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_32:
  v23 = (const void *)v2[1];
  if (v23)
    _Block_release(v23);
  operator delete(v2);
  v24 = (std::__shared_weak_count *)a1[2];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(a1);
}

void sub_1BF5FC904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  AppleSARHelper *v5;
  AppleSARHelper *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint8_t buf[16];
  unint64_t v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 296) = 0;
  v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Unblocking accessories", buf, 2u);
  }
  v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v6 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v5);
    v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v8 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v6 = (AppleSARHelper *)off_1EF57D890;
  }
  v14 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v15 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v27 = *(_BYTE *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(_QWORD *)buf = 0;
    v30[0] = 0;
    v28 = 1;
    v17 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    v17 = 0;
    if (!v14)
      goto LABEL_25;
  }
  v18 = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_25:
    if ((v17 & 1) != 0)
      goto LABEL_26;
LABEL_29:
    v21 = *(NSObject **)(v3 + 80);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Failed to set unblocking accessories", buf, 2u);
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    else
    {
      v22 = v2[1];
      if (!v22)
        goto LABEL_32;
    }
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v22 + 16))(v22, 3760250880, buf);
    xpc_release(*(xpc_object_t *)buf);
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v17 & 1) == 0)
    goto LABEL_29;
LABEL_26:
  v20 = v2[1];
  if (v20)
  {
    *(_QWORD *)buf = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v20 + 16))(v20, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_32:
  v23 = (const void *)v2[1];
  if (v23)
    _Block_release(v23);
  operator delete(v2);
  v24 = (std::__shared_weak_count *)a1[2];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(a1);
}

void sub_1BF5FCD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(SARModule ***a1)
{
  SARModule **v2;
  SARModule *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *a1;
  v3 = **a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1))
    SARModule::setupTxIndicationWorkaround(v3);
  SARModule::sendCurrentState_sync(v3);
  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7)
    goto LABEL_12;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    operator delete(a1);
  }
  else
  {
LABEL_12:
    operator delete(a1);
  }
}

void sub_1BF5FCF04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  SARModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(SARModule ***)a1;
  SARModule::processTxOff_sync(**(SARModule ***)a1);
  v3 = (std::__shared_weak_count *)v2[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete((void *)a1);
  }
  else
  {
LABEL_10:
    operator delete((void *)a1);
  }
}

void sub_1BF5FD050(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 136) = *((_BYTE *)*a1 + 8);
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = (AppleSARHelper *)off_1EF57D890;
  }
  v10 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v11 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *(_BYTE *)(v3 + 136);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v13 = AppleSARHelper::callUserClientMethod(v5, 0, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (!v10)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    if ((v13 & 1) != 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v13 & 1) != 0)
    goto LABEL_21;
LABEL_19:
  v16 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to set WiFi state!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF5FD3F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  AppleSARHelper *v4;
  AppleSARHelper *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint8_t buf[16];
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_BYTE *)(v3 + 160) = *((_BYTE *)*a1 + 8);
  v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v5 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v4);
    v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v7 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = (AppleSARHelper *)off_1EF57D890;
  }
  v10 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v11 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v20 = *(_BYTE *)(v3 + 160);
  if (*((_DWORD *)v5 + 1))
  {
    *(_QWORD *)buf = 0;
    v23[0] = 0;
    v21 = 1;
    v13 = AppleSARHelper::callUserClientMethod(v5, 1, (const unint64_t *)buf, 1, &v20, 1, v23, &v21, &v20, 1uLL);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (!v10)
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    if ((v13 & 1) != 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v13 & 1) != 0)
    goto LABEL_21;
LABEL_19:
  v16 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to set Bluetooth state!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF5FD704(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint8_t buf[16];
  unint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(_DWORD *)(v3 + 161) & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)*a1 + 8));
  *(_DWORD *)(v3 + 161) = v4;
  v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State due to Audio Wired Port: 0x%x", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1EF57D890;
  }
  v15 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v16 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v28[0] = 0;
    v26 = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 2, (const unint64_t *)buf, 1, &v25, 4, v28, &v26, &v25, 4uLL);
    if (!v15)
      goto LABEL_25;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_25;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_25:
    if ((v18 & 1) != 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v18 & 1) != 0)
    goto LABEL_28;
LABEL_26:
  v21 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_28:
  operator delete(v2);
  v22 = (std::__shared_weak_count *)a1[2];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(a1);
}

void sub_1BF5FDA70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  AppleSARHelper *v6;
  AppleSARHelper *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  uint8_t buf[16];
  unint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  *(_BYTE *)(v3 + 167) = v4;
  v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Speaker State: 0x%x\n", buf, 8u);
  }
  v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v7 = (AppleSARHelper *)off_1EF57D890;
  if (!off_1EF57D890)
  {
    AppleSARHelper::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
    off_1EF57D890 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = (AppleSARHelper *)off_1EF57D890;
  }
  v15 = (std::__shared_weak_count *)*(&off_1EF57D890 + 1);
  if (*(&off_1EF57D890 + 1))
  {
    v16 = (unint64_t *)(*(&off_1EF57D890 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25 = *(_BYTE *)(v3 + 167);
  if (*((_DWORD *)v7 + 1))
  {
    *(_QWORD *)buf = 0;
    v28[0] = 0;
    v26 = 1;
    v18 = AppleSARHelper::callUserClientMethod(v7, 6, (const unint64_t *)buf, 1, &v25, 1, v28, &v26, &v25, 1uLL);
    if (!v15)
      goto LABEL_25;
  }
  else
  {
    v18 = 0;
    if (!v15)
      goto LABEL_25;
  }
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_25:
    if ((v18 & 1) != 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v18 & 1) != 0)
    goto LABEL_28;
LABEL_26:
  v21 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_28:
  operator delete(v2);
  v22 = (std::__shared_weak_count *)a1[2];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(a1);
}

void sub_1BF5FDDCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 166) = *(_BYTE *)(v3 + 165);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF5FDF1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 169) = *(_BYTE *)(v3 + 168);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF5FE008(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(_BYTE *)(v3 + 169) = *(_BYTE *)(v3 + 168);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF5FE0F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  int *v2;
  capabilities::radio *v3;
  xpc_object_t v4;
  NSObject *v5;
  int v6;
  int v7;
  NSObject *v8;
  xpc_object_t value;
  const char *v10;
  xpc_object_t v11;
  const char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  int v35;
  size_t v36;
  void **v37;
  void **v38;
  NSObject *v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *__dst[2];
  int64_t v45;
  void *v46[3];
  void *v47[3];
  unint64_t v48;
  uint8_t v49[4];
  void **v50;
  uint8_t buf[8];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 __p;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(capabilities::radio **)*a1;
  if ((capabilities::radio::maverick((capabilities::radio *)a1) & 1) != 0)
  {
    v48 = 0xAAAAAAAAAAAAAAAALL;
    SARModule::createTransmitStateDict_sync(v3, v2[2], v2[3], (xpc_object_t *)&v48);
    v4 = (xpc_object_t)v48;
    if (MEMORY[0x1C3B8CD78](v48) != MEMORY[0x1E0C812F8])
    {
      v5 = *((_QWORD *)v3 + 10);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = v2[2];
        v7 = v2[3];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v6;
        LOWORD(v52) = 1024;
        *(_DWORD *)((char *)&v52 + 2) = v7;
        _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed to get the Tx state from the state (%d) and trigger (%d)", buf, 0xEu);
      }
      goto LABEL_71;
    }
    memset(v47, 170, sizeof(v47));
    value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBBD8]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v10);
    xpc_release(*(xpc_object_t *)buf);
    memset(v46, 170, sizeof(v46));
    v11 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBD88]);
    *(_QWORD *)buf = v11;
    if (v11)
      xpc_retain(v11);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v12);
    xpc_release(*(xpc_object_t *)buf);
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v58 = 0xAAAAAAAAAAAAAAAALL;
    v68 = v13;
    v67 = v13;
    v66 = v13;
    v65 = v13;
    v64 = v13;
    v63 = v13;
    v62 = v13;
    v61 = v13;
    v60 = v13;
    v57 = v13;
    __p = v13;
    v55 = v13;
    v54 = v13;
    v53 = v13;
    v52 = v13;
    v14 = MEMORY[0x1E0DE4FE0];
    v15 = MEMORY[0x1E0DE4FE0] + 64;
    v59 = MEMORY[0x1E0DE4FE0] + 64;
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v16;
    v17 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    std::ios_base::init(v17, &v52);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    *(_QWORD *)buf = v14 + 24;
    v59 = v15;
    std::streambuf::basic_streambuf();
    v18 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v52 = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v57 = 0u;
    LODWORD(v58) = 16;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v47[2]) >= 0)
      v20 = v47;
    else
      v20 = (void **)v47[0];
    if (SHIBYTE(v47[2]) >= 0)
      v21 = HIBYTE(v47[2]);
    else
      v21 = (uint64_t)v47[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    v22 = (void *)HIBYTE(v46[2]);
    if (SHIBYTE(v46[2]) < 0)
      v22 = v46[1];
    if (v22)
    {
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (", 2);
      if (SHIBYTE(v46[2]) >= 0)
        v24 = v46;
      else
        v24 = (void **)v46[0];
      if (SHIBYTE(v46[2]) >= 0)
        v25 = HIBYTE(v46[2]);
      else
        v25 = (uint64_t)v46[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")", 1);
    }
    v27 = *((_QWORD *)v3 + 10);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
LABEL_47:
      v35 = SHIBYTE(v47[2]);
      if (SHIBYTE(v47[2]) >= 0)
        v36 = HIBYTE(v47[2]);
      else
        v36 = (size_t)v47[1];
      if (v36 == strlen((const char *)*MEMORY[0x1E0CFBF28])
        && (SHIBYTE(v47[2]) >= 0 ? (v37 = v47) : (v37 = (void **)v47[0]),
            !memcmp(v37, (const void *)*MEMORY[0x1E0CFBF28], v36)))
      {
        v40 = *((_QWORD *)v3 + 10);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst[0]) = 0;
          _os_log_impl(&dword_1BF566000, v40, OS_LOG_TYPE_DEFAULT, "#I Tx is on from QMI", (uint8_t *)__dst, 2u);
        }
        SARModule::processTxOn_sync(v3);
      }
      else if (v36 == strlen((const char *)*MEMORY[0x1E0CFBC28]))
      {
        v38 = v35 >= 0 ? v47 : (void **)v47[0];
        if (!memcmp(v38, (const void *)*MEMORY[0x1E0CFBC28], v36))
        {
          v39 = *((_QWORD *)v3 + 10);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__dst[0]) = 0;
            _os_log_impl(&dword_1BF566000, v39, OS_LOG_TYPE_DEFAULT, "#I Tx is off from QMI", (uint8_t *)__dst, 2u);
          }
          SARModule::processTxOff_sync(v3);
        }
      }
      *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *(_QWORD *)&v52 = v18 + 16;
      if (SBYTE7(v57) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8C364](&v59);
      if (SHIBYTE(v46[2]) < 0)
      {
        operator delete(v46[0]);
        if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
          goto LABEL_70;
      }
      else if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
      {
LABEL_70:
        v4 = (xpc_object_t)v48;
LABEL_71:
        xpc_release(v4);
        goto LABEL_72;
      }
      operator delete(v47[0]);
      goto LABEL_70;
    }
    if ((v58 & 0x10) != 0)
    {
      v30 = *((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1) < (unint64_t)v55)
      {
        *((_QWORD *)&v57 + 1) = v55;
        v30 = v55;
      }
      v31 = (const void *)*((_QWORD *)&v54 + 1);
      v28 = v30 - *((_QWORD *)&v54 + 1);
      if ((unint64_t)(v30 - *((_QWORD *)&v54 + 1)) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_81;
    }
    else
    {
      if ((v58 & 8) == 0)
      {
        v28 = 0;
        HIBYTE(v45) = 0;
        v29 = __dst;
        goto LABEL_43;
      }
      v31 = (const void *)v53;
      v28 = v54 - v53;
      if ((_QWORD)v54 - (_QWORD)v53 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_81:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v28 >= 0x17)
    {
      v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v32 = v28 | 7;
      v33 = v32 + 1;
      v29 = (void **)operator new(v32 + 1);
      __dst[1] = (void *)v28;
      v45 = v33 | 0x8000000000000000;
      __dst[0] = v29;
    }
    else
    {
      HIBYTE(v45) = v28;
      v29 = __dst;
      if (!v28)
        goto LABEL_43;
    }
    memmove(v29, v31, v28);
LABEL_43:
    *((_BYTE *)v29 + v28) = 0;
    v34 = __dst;
    if (v45 < 0)
      v34 = (void **)__dst[0];
    *(_DWORD *)v49 = 136315138;
    v50 = v34;
    _os_log_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEFAULT, "#I %s", v49, 0xCu);
    if (SHIBYTE(v45) < 0)
      operator delete(__dst[0]);
    goto LABEL_47;
  }
  v8 = *((_QWORD *)v3 + 10);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "This is not supported device", buf, 2u);
  }
LABEL_72:
  operator delete(v2);
  v41 = (std::__shared_weak_count *)a1[2];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(a1);
}

void sub_1BF5FE7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,xpc_object_t object,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;

  a29 = (_QWORD *)*MEMORY[0x1E0DE4F60];
  *(_QWORD **)((char *)&a29 + *(a29 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
  a30 = v45 + 16;
  if (a43 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](a10);
  if (a19 < 0)
    operator delete(a14);
  if (a25 < 0)
    operator delete(a20);
  xpc_release(object);
  operator delete(v44);
  v47 = (std::__shared_weak_count *)v43[2];
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(v43);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_52()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_53()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_54()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_55()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *asString(_DWORD *a1)
{
  const char *v1;

  v1 = "Unknown";
  if (*a1 == 1)
    v1 = "PoweredOn";
  if (*a1)
    return v1;
  else
    return "LowPower";
}

const char *asString(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 2)
    return "Unknown";
  else
    return off_1E79165E0[v1];
}

void SystemState::SystemState(SystemState *this)
{
  *(_QWORD *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

{
  *(_QWORD *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

uint64_t SystemState::acceptSystemNotification(SystemState *this, int a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 0;
  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 + 536870288;
  switch((v3 >> 4))
  {
    case 0u:
      if (*(_DWORD *)this != 1)
        return 0;
      *((_DWORD *)this + 1) = 0;
      goto LABEL_17;
    case 1u:
      if (*(_DWORD *)this != 1)
        return 0;
      if (*((_DWORD *)this + 1))
        *((_DWORD *)this + 1) = 1;
      *(_DWORD *)this = 0;
      goto LABEL_17;
    case 2u:
      if (!*((_DWORD *)this + 1))
        goto LABEL_12;
      return 0;
    case 9u:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) != 2)
        return 0;
LABEL_12:
      *(_QWORD *)this = 0x200000001;
      goto LABEL_17;
    case 0xBu:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) == 2)
        return 0;
      *((_DWORD *)this + 1) = 2;
LABEL_17:
      *((_DWORD *)this + 2) = a2;
      return 1;
    default:
      return v2;
  }
}

uint64_t SystemState::getSystemNotification(SystemState *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t SystemState::getPowerState(SystemState *this)
{
  return *(unsigned int *)this;
}

uint64_t SystemState::getSleepState(SystemState *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

_QWORD *CellularCertClient::create@<X0>(_QWORD *a1@<X8>)
{
  ctu::OsLogLogger *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (ctu::OsLogLogger *)operator new(0x18uLL);
  ctu::OsLogLogger::OsLogLogger(v3, "com.apple.telephony.abm", "cellularcert.client");
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  return std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(a1, (uint64_t)v3);
}

void sub_1BF5FEC30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::CellularCertClient(CellularCertClient *this)
{
  uint64_t v1;

  v1 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", "cellularcert.client");
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
}

{
  uint64_t v1;

  v1 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", "cellularcert.client");
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
}

void CellularCertClient::~CellularCertClient(os_log_t *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v4[16];

  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v4, 2u);
  }
  v3 = (std::__shared_weak_count *)this[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  MEMORY[0x1C3B8B74C](this);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v4[16];

  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v4, 2u);
  }
  v3 = (std::__shared_weak_count *)this[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  MEMORY[0x1C3B8B74C](this);
}

const char *CellularCertClient::getName(CellularCertClient *this)
{
  return "CellularCertClient";
}

void CellularCertClient::bootstrapTest(CellularCertClient *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;

  v4 = abm::kCommandCellularCertBootstrap;
  v5 = xpc_null_create();
  v6 = v5;
  CellularCertClient::sendCommandInternal((uint64_t)this, v4, &v6, a2);
  xpc_release(v5);
}

void sub_1BF5FEDF0(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::sendCommandInternal(uint64_t a1@<X0>, const char *a2@<X1>, xpc_object_t *a3@<X2>, uint64_t a4@<X8>)
{
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  NSObject *global_queue;
  NSObject *v41;
  size_t v42;
  size_t v43;
  __int128 *p_dst;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  char *v52;
  uint64_t *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  xpc_object_t v58;
  void *v59;
  NSObject *v60;
  _QWORD aBlock[7];
  std::__shared_weak_count *v62;
  dispatch_group_t group;
  void *v64;
  dispatch_object_t v65;
  __int128 v66;
  xpc_object_t object[3];
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  xpc_object_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  xpc_object_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  __n128 (*v77)(__n128 *, __n128 *);
  void (*v78)(uint64_t);
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 __dst;
  unint64_t v84;
  void *v85;
  __int128 *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = &v74;
  v76 = 0x4802000000;
  v77 = __Block_byref_object_copy__2;
  v78 = __Block_byref_object_dispose__2;
  v79 = 0xAAAAAAAAE020E002;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v68 = 0;
  v69 = &v68;
  v70 = 0x3002000000;
  v71 = __Block_byref_object_copy__3_0;
  v72 = __Block_byref_object_dispose__4_0;
  v73 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = xpc_int64_create(-534716414);
  v9 = v8;
  v10 = MEMORY[0x1E0C812F8];
  if (v8)
  {
    v73 = v8;
  }
  else
  {
    v9 = xpc_null_create();
    v73 = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  v11 = xpc_null_create();
LABEL_8:
  v73 = v11;
LABEL_9:
  xpc_release(v9);
  memset(object, 170, sizeof(object));
  v12 = xpc_dictionary_create(0, 0, 0);
  v13 = v12;
  if (v12)
  {
    object[0] = v12;
  }
  else
  {
    v13 = xpc_null_create();
    object[0] = v13;
    if (!v13)
    {
      v14 = xpc_null_create();
      v13 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C3B8CD78](v13) == v10)
  {
    xpc_retain(v13);
    v15 = v13;
    goto LABEL_17;
  }
  v14 = xpc_null_create();
LABEL_16:
  v15 = v13;
  object[0] = v14;
  v13 = v14;
LABEL_17:
  xpc_release(v15);
  v16 = xpc_string_create("cellularcertd");
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0DBD840], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_string_create("com.apple.abm.cellularcert");
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0DBD848], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create("ABMCellularCertServerReady");
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0DBD850], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_string_create("CellularCertClient");
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0DBD838], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v25 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&__dst = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__dst + 1) = 0x40000000;
  v84 = (unint64_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v85 = &__block_descriptor_tmp_13_8;
  v86 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v66 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_30;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__dst);
    v26 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v66 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_30;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_30:
  TelephonyXPC::Client::create();
  if (*((_QWORD *)&v66 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
    }
  }
  xpc_release(object[0]);
  object[0] = 0;
  v31 = dispatch_group_create();
  v32 = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(v32);
  }
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(std::__shared_weak_count **)(a1 + 16);
  if (v34)
  {
    p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
  }
  v64 = (void *)0xAAAAAAAAAAAAAAAALL;
  v65 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v25;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN18CellularCertClient19sendCommandInternalEPKcN3xpc4dictE_block_invoke;
  aBlock[3] = &unk_1E7916600;
  aBlock[6] = v33;
  v62 = v34;
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  group = v32;
  if (v32)
  {
    dispatch_retain(v32);
    dispatch_group_enter(group);
  }
  aBlock[4] = &v74;
  aBlock[5] = &v68;
  v39 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  v41 = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  v64 = v39;
  v65 = v41;
  v42 = strlen(a2);
  if (v42 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v43 = v42;
  if (v42 >= 0x17)
  {
    v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v46 = v42 | 7;
    v47 = v46 + 1;
    p_dst = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&__dst + 1) = v43;
    v84 = v47 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_55:
    memcpy(p_dst, a2, v43);
    *((_BYTE *)p_dst + v43) = 0;
    v45 = v64;
    if (!v64)
      goto LABEL_57;
    goto LABEL_56;
  }
  HIBYTE(v84) = v42;
  p_dst = &__dst;
  if (v42)
    goto LABEL_55;
  LOBYTE(__dst) = 0;
  v45 = v64;
  if (v64)
LABEL_56:
    v45 = _Block_copy(v45);
LABEL_57:
  v59 = v45;
  v60 = v65;
  if (v65)
    dispatch_retain(v65);
  v58 = *a3;
  if (*a3)
    xpc_retain(*a3);
  else
    v58 = xpc_null_create();
  TelephonyXPC::Command::create();
  xpc_release(v58);
  if (v60)
    dispatch_release(v60);
  if (v59)
    _Block_release(v59);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
  do
    v48 = __ldxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stxr(v48 + 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  TelephonyXPC::Client::perform();
  do
    v49 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v49 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v49)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  do
    v50 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v50 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v50)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v65)
    dispatch_release(v65);
  if (v64)
    _Block_release(v64);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (v32)
  {
    dispatch_group_leave(v32);
    dispatch_release(v32);
  }
  v51 = *(NSObject **)a1;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__dst) = 136315138;
    *(_QWORD *)((char *)&__dst + 4) = a2;
    _os_log_impl(&dword_1BF566000, v51, OS_LOG_TYPE_DEFAULT, "#I Sent command '%s' to cellularcert daemon", (uint8_t *)&__dst, 0xCu);
  }
  if (dispatch_group_wait(v32, 0xFFFFFFFFFFFFFFFFLL))
  {
    v52 = (char *)operator new(0x30uLL);
    strcpy(v52, "Timeout waiting for response from server");
    v53 = v75;
    *((_DWORD *)v75 + 10) = -534716413;
    if (*((char *)v53 + 71) < 0)
      operator delete((void *)v53[6]);
    v53[6] = (uint64_t)v52;
    v53[7] = 40;
    v53[8] = 0x8000000000000030;
  }
  *(_BYTE *)a4 = *((_DWORD *)v75 + 10) == 0;
  v54 = (void *)v69[5];
  *(_QWORD *)(a4 + 8) = v54;
  if (!v54)
  {
    *(_QWORD *)(a4 + 8) = xpc_null_create();
    if (!v32)
      goto LABEL_98;
    goto LABEL_97;
  }
  xpc_retain(v54);
  if (v32)
LABEL_97:
    dispatch_release(v32);
LABEL_98:
  v55 = (std::__shared_weak_count *)object[2];
  if (object[2])
  {
    v56 = (unint64_t *)((char *)object[2] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  _Block_object_dispose(&v68, 8);
  xpc_release(v73);
  _Block_object_dispose(&v74, 8);
  if (SHIBYTE(v82) < 0)
    operator delete(v80);
}

void sub_1BF5FF67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,char a25,uint64_t a26,char a27,uint64_t a28,xpc_object_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void CellularCertClient::shutdownTest(CellularCertClient *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;

  v4 = abm::kCommandCellularCertShutdown;
  v5 = xpc_null_create();
  v6 = v5;
  CellularCertClient::sendCommandInternal((uint64_t)this, v4, &v6, a2);
  xpc_release(v5);
}

void sub_1BF5FF8B8(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::configureTest(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;

  v5 = abm::kCommandCellularCertConfigure;
  v6 = *a2;
  v7 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    v6 = xpc_null_create();
    v7 = v6;
  }
  CellularCertClient::sendCommandInternal(a1, v5, &v7, a3);
  xpc_release(v6);
}

void sub_1BF5FF954(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__3_0(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__4_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN18CellularCertClient19sendCommandInternalEPKcN3xpc4dictE_block_invoke(_QWORD *a1, uint64_t a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  __int128 v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  xpc_object_t v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[6])
      {
        v9 = *(_QWORD *)(a1[4] + 8);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)a2;
        if (v9 + 40 != a2)
        {
          v10 = v9 + 48;
          v11 = *(char *)(v9 + 71);
          v12 = *(_BYTE *)(a2 + 31);
          if (v11 < 0)
          {
            if (v12 >= 0)
              v14 = (void *)(a2 + 8);
            else
              v14 = *(void **)(a2 + 8);
            if (v12 >= 0)
              v15 = *(unsigned __int8 *)(a2 + 31);
            else
              v15 = *(_QWORD *)(a2 + 16);
            std::string::__assign_no_alias<false>((void **)v10, v14, v15);
          }
          else if ((*(_BYTE *)(a2 + 31) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)v10, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
          }
          else
          {
            v13 = *(_OWORD *)(a2 + 8);
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 24);
            *(_OWORD *)v10 = v13;
          }
        }
        v16 = *(_QWORD *)(a1[5] + 8);
        v17 = *a3;
        if (v17)
          xpc_retain(v17);
        else
          v17 = xpc_null_create();
        v18 = *(void **)(v16 + 40);
        *(_QWORD *)(v16 + 40) = v17;
        xpc_release(v18);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF5FFB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c43_ZTSNSt3__18weak_ptrI18CellularCertClientEE64c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[8];
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[8];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_48c43_ZTSNSt3__18weak_ptrI18CellularCertClientEE64c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 64);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

_QWORD *std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916640;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 16);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 8) = a2;
      *(_QWORD *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 8) = a2;
      *(_QWORD *)(a2 + 16) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BF5FFD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CellularCertClient>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<CellularCertClient>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  void *v5;
  uint8_t v7[16];

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(NSObject **)v2;
    if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v7, 2u);
    }
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    v5 = (void *)MEMORY[0x1C3B8B74C](v2);
    operator delete(v5);
  }
  return a1;
}

void std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(NSObject **)v1;
    if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v5, 2u);
    }
    v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x1C3B8B74C](v1);
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73EA93)
    return a1 + 24;
  if (((v3 & 0x80000001BF73EA93 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73EA93))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73EA93 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ARIXpcServer::create(uint64_t *a1@<X8>)
{
  ARIXpcServer *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD block[6];

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (ARIXpcServer *)operator new(0x78uLL);
  ARIXpcServer::ARIXpcServer(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ARIXpcServer>::shared_ptr[abi:ne180100]<ARIXpcServer,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  v4 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v6 = *a1 + 72;
  v13 = *a1;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12ARIXpcServerE20execute_wrapped_syncIZNS1_6createEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = v6;
  block[5] = &v13;
  v9 = *(NSObject **)(v4 + 88);
  if (*(_QWORD *)(v4 + 96))
  {
    dispatch_async_and_wait(v9, block);
    v10 = v14;
    if (!v14)
      return;
  }
  else
  {
    dispatch_sync(v9, block);
    v10 = v14;
    if (!v14)
      return;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BF5FFFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF60000C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ARIXpcServer::ARIXpcServer(ARIXpcServer *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  dispatch_object_t object[5];

  *(_QWORD *)this = off_1E7916690;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "ipc.xpc.ari");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_8;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, "ipc.xpc.ari", QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  *(_QWORD *)this = off_1E7916818;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E7916690;
  *((_QWORD *)this + 13) = xpc_null_create();
}

void sub_1BF6001E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF600208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

const char *ARIXpcServer::getName(ARIXpcServer *this)
{
  return "ipc.xpc.ari";
}

_QWORD *ARIXpcServer::initialize_sync(ARIXpcServer *this)
{
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  uint8_t v4[8];
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: Setting up entitlement checker", v4, 2u);
  }
  v5[0] = off_1E7916858;
  v5[1] = sValidateConnection;
  v6 = v5;
  AriHostRt::RegisterEntitlementChecker();
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1BF600314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ARIXpcServer::~ARIXpcServer(xpc_object_t *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = off_1E7916690;
  xpc_release(this[13]);
  this[13] = 0;
  *this = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = off_1E7916690;
  xpc_release(this[13]);
  this[13] = 0;
  *this = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

uint64_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF600664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF600680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ARIXpcServer>::shared_ptr[abi:ne180100]<ARIXpcServer,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79167A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF60079C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1}::operator() const(ARIXpcServer*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF6007BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1}::operator() const(ARIXpcServer*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1}::operator() const(ARIXpcServer*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BF600960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7916768;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF600A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7916768;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E7916858;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E7916858;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73ED65)
    return a1 + 8;
  if (((v3 & 0x80000001BF73ED65 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73ED65))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73ED65 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target_type()
{
}

void BootStats::BootStats(BootStats *this)
{
  char __p[17];
  char v3;

  v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)this = off_1E7916908;
}

{
  char __p[17];
  char v3;

  v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)this = off_1E7916908;
}

void sub_1BF600C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF600CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BootStats::~BootStats(BootStats *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

double BootStats::createInternal@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;
  __int128 v5;
  char __p[17];
  char v7;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x78uLL);
  v7 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(*(void **)__p);
  *v3 = off_1E7916908;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1BF600E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF600EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BootStats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  return 1;
}

void BootStats::updateData(uint64_t a1@<X0>, CFDictionaryRef *a2@<X1>, xpc_object_t *a3@<X2>, __CFDictionary **a4@<X8>)
{
  uint64_t (*v8)(uint64_t);
  const __CFAllocator *v9;
  __CFDictionary *MutableCopy;
  char *v11;
  xpc_object_t value;
  time_t v13;
  char *v14;
  xpc_object_t v15;
  time_t v16;
  const char **v17;
  const __CFAllocator *v18;
  uint64_t v19;
  const void *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  const __CFAllocator *v23;
  CFTypeID v24;
  xpc_object_t object[2];
  __CFDictionary *v26;
  __CFString *v27;

  v26 = 0;
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v8 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v8)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a2);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!MutableCopy)
      goto LABEL_7;
  }
  v26 = MutableCopy;
LABEL_7:
  v11 = (char *)*MEMORY[0x1E0CFBD90];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBD90]))
  {
    value = xpc_dictionary_get_value(*a3, v11);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v13 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v11);
    LODWORD(v13) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C3B8B878](&v27);
    v13 = (int)v13;
    MEMORY[0x1C3B8B8B4](object);
  }
  v14 = (char *)*MEMORY[0x1E0CFBDE8];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBDE8]))
  {
    v15 = xpc_dictionary_get_value(*a3, v14);
    object[0] = v15;
    if (v15)
      xpc_retain(v15);
    else
      object[0] = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v14);
    LODWORD(v16) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C3B8B878](&v27);
    v16 = (int)v16;
    MEMORY[0x1C3B8B8B4](object);
  }
  v17 = (const char **)MEMORY[0x1E0CFB360];
  if (v13 && v16 && v16 >= v13)
  {
    v19 = (uint64_t)difftime(v16, v13);
    v20 = *(const void **)(a1 + 112);
    if (v20)
      goto LABEL_24;
    goto LABEL_23;
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, *v17);
  LODWORD(v19) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
  MEMORY[0x1C3B8B878](&v27);
  v19 = (int)v19;
  MEMORY[0x1C3B8B8B4](object);
  v20 = *(const void **)(a1 + 112);
  if (!v20)
  {
LABEL_23:
    v19 = 0;
    v16 = 0;
    *(_QWORD *)(a1 + 112) = v13;
    v20 = (const void *)v13;
  }
LABEL_24:
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*MEMORY[0x1E0CFBD10], v20, v9, v18);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v11, (const void *)v13, v9, v21);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v14, (const void *)v16, v9, v22);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*v17, (const void *)v19, v9, v23);
  if (MutableCopy)
  {
    v24 = CFGetTypeID(MutableCopy);
    if (v24 == CFDictionaryGetTypeID())
    {
      *a4 = MutableCopy;
      CFRetain(MutableCopy);
    }
    else
    {
      *a4 = 0;
    }
    CFRelease(MutableCopy);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1BF6011FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, char a12)
{
  MEMORY[0x1C3B8B878](&a12);
  MEMORY[0x1C3B8B8B4](&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void sub_1BF601250(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x1BF60129CLL);
}

void sub_1BF601270(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x1BF60129CLL);
}

void sub_1BF601298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(_DWORD *)(result + 104))
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF60141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF601438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916970;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF601554(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF601574(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::cf::update<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  const void *valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
}

void sub_1BF6016D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF6016FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  const void *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __darwin_ino64_t v10;
  const void *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  int v16;
  __darwin_ino64_t st_ino;
  uint64_t st_rdev;
  __darwin_ino64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::string::size_type size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  std::string::size_type v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  __darwin_ino64_t v52;
  stat *p_p;
  void *v54;
  std::string::size_type v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  const char *v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  timespec v67;
  std::string *v68;
  int v69;
  const void *v70;
  size_t v71;
  size_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t NumberOfLogDumps;
  unsigned __int8 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  NSObject *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v87;
  signed int v88;
  std::string v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  size_t v95;
  unint64_t v96;
  std::string v97;
  std::string __dst;
  stat __p;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E0CFB6C8]);
  if (TelephonyUtilIsInternalBuild())
  {
    v91 = -1431655766;
    v2 = (const void *)*MEMORY[0x1E0CFB570];
    v3 = strlen((const char *)*MEMORY[0x1E0CFB570]);
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v7 = v3 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          v9 = util::convert<int>((const std::string *)&__p, &v91, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        else
        {
          v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
            goto LABEL_16;
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v9)
          {
LABEL_18:
            v10 = v91;
            v97.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v97.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v97.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            v11 = (const void *)*MEMORY[0x1E0D01A30];
            v12 = strlen((const char *)*MEMORY[0x1E0D01A30]);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v13 = v12;
            if (v12 >= 0x17)
            {
              v30 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v30 = v12 | 7;
              v31 = v30 + 1;
              v14 = (std::string *)operator new(v30 + 1);
              __dst.__r_.__value_.__l.__size_ = v13;
              __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
              v14 = &__dst;
              if (!v12)
              {
                __dst.__r_.__value_.__s.__data_[0] = 0;
                v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_22;
                goto LABEL_47;
              }
            }
            memmove(v14, v11, v13);
            v14->__r_.__value_.__s.__data_[v13] = 0;
            v15 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_22:
              if (!v15)
                goto LABEL_51;
              memset(&__p, 0, 64);
              v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
              st_ino = __p.st_ino;
              st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10)
                    std::string::__assign_external(&v97, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                  {
                    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
                  }
                  *(_QWORD *)&__p.st_dev = MEMORY[0x1E0C809B0];
                  __p.st_ino = 0x40000000;
                  *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                  *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_8;
                  __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                  {
                    v21 = (std::__shared_weak_count *)unk_1ED70F6A0;
                    v94 = (void *)GetABMLogServer(void)::sLogServer;
                    v95 = unk_1ED70F6A0;
                    if (unk_1ED70F6A0)
                      goto LABEL_32;
                  }
                  else
                  {
                    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                    v21 = (std::__shared_weak_count *)unk_1ED70F6A0;
                    v94 = (void *)GetABMLogServer(void)::sLogServer;
                    v95 = unk_1ED70F6A0;
                    if (unk_1ED70F6A0)
                    {
LABEL_32:
                      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                      do
                        v23 = __ldxr(p_shared_owners);
                      while (__stxr(v23 + 1, p_shared_owners));
                    }
                  }
                  v24 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v94) + 4);
                  if (v21)
                  {
                    v25 = (unint64_t *)&v21->__shared_owners_;
                    do
                      v26 = __ldaxr(v25);
                    while (__stlxr(v26 - 1, v25));
                    if (!v26)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                  }
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(_QWORD *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
LABEL_51:
                size = v97.__r_.__value_.__l.__size_;
                v27 = (void *)v97.__r_.__value_.__r.__words[0];
                v29 = v97.__r_.__value_.__r.__words[2];
LABEL_52:
                v90 = -1431655766;
                v32 = (const void *)*MEMORY[0x1E0CFB7E8];
                v33 = strlen((const char *)*MEMORY[0x1E0CFB7E8]);
                if (v33 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v34 = v33;
                if (v33 >= 0x17)
                {
                  v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v33 | 7) != 0x17)
                    v36 = v33 | 7;
                  v37 = v36 + 1;
                  v35 = (std::string *)operator new(v36 + 1);
                  __dst.__r_.__value_.__l.__size_ = v34;
                  __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
                }
                else
                {
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v33;
                  v35 = &__dst;
                  if (!v33)
                  {
LABEL_60:
                    v35->__r_.__value_.__s.__data_[v34] = 0;
                    memset(&__p, 0, 24);
                    if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                    {
                      v6 = util::convert<int>((const std::string *)&__p, &v90, 0);
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    else
                    {
                      v6 = 0;
                      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                        goto LABEL_65;
                    }
                    operator delete(*(void **)&__p.st_dev);
LABEL_65:
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if ((_DWORD)v6)
                      {
LABEL_67:
                        v38 = v90;
                        memset(&v89, 0, sizeof(v89));
                        if (v90 < 0)
                        {
                          v56 = 0;
                          v55 = 0;
                          v54 = 0;
                          v58 = HIBYTE(v29);
                          if (v29 < 0)
                            v58 = size;
                          if (v58)
                            goto LABEL_165;
                          goto LABEL_162;
                        }
                        memset(&__dst, 0, sizeof(__dst));
                        pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v39 = off_1ED70F558;
                        if (!off_1ED70F558)
                        {
                          v40 = operator new(0x30uLL);
                          MEMORY[0x1C3B8B8C0](v40, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
                          v40[3] = 0;
                          v40[4] = 0;
                          *((_DWORD *)v40 + 10) = 0;
                          std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__p, (uint64_t)v40);
                          v41 = *(_OWORD *)&__p.st_dev;
                          *(_QWORD *)&__p.st_dev = 0;
                          __p.st_ino = 0;
                          v42 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
                          off_1ED70F558 = v41;
                          if (v42)
                          {
                            v43 = (unint64_t *)&v42->__shared_owners_;
                            do
                              v44 = __ldaxr(v43);
                            while (__stlxr(v44 - 1, v43));
                            if (!v44)
                            {
                              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                              std::__shared_weak_count::__release_weak(v42);
                            }
                          }
                          v45 = (std::__shared_weak_count *)__p.st_ino;
                          if (__p.st_ino)
                          {
                            v46 = (unint64_t *)(__p.st_ino + 8);
                            do
                              v47 = __ldaxr(v46);
                            while (__stlxr(v47 - 1, v46));
                            if (!v47)
                            {
                              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                              std::__shared_weak_count::__release_weak(v45);
                            }
                          }
                          v39 = off_1ED70F558;
                        }
                        v97.__r_.__value_.__r.__words[0] = v39;
                        v97.__r_.__value_.__l.__size_ = *(&off_1ED70F558 + 1);
                        if (*(&off_1ED70F558 + 1))
                        {
                          v48 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
                          do
                            v49 = __ldxr(v48);
                          while (__stxr(v49 + 1, v48));
                        }
                        v88 = v38;
                        pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                        v50 = (const void *)*MEMORY[0x1E0D01A58];
                        v51 = strlen((const char *)*MEMORY[0x1E0D01A58]);
                        if (v51 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v52 = v51;
                        if (v51 >= 0x17)
                        {
                          v87 = v27;
                          v59 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v51 | 7) != 0x17)
                            v59 = v51 | 7;
                          v60 = v59 + 1;
                          p_p = (stat *)operator new(v59 + 1);
                          __p.st_ino = v52;
                          *(_QWORD *)&__p.st_uid = v60 | 0x8000000000000000;
                          *(_QWORD *)&__p.st_dev = p_p;
                          v27 = v87;
                        }
                        else
                        {
                          HIBYTE(__p.st_gid) = v51;
                          p_p = &__p;
                          if (!v51)
                          {
LABEL_100:
                            *((_BYTE *)&p_p->st_dev + v52) = 0;
                            v61 = (os_unfair_lock_s *)(v39 + 40);
                            os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
                            if ((__p.st_gid & 0x80000000) == 0)
                              v62 = (const char *)&__p;
                            else
                              v62 = *(const char **)&__p.st_dev;
                            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v94, v62);
                            v63 = (const void *)(**(uint64_t (***)(std::string::size_type, void *))v39)(v39, v94);
                            if (v63)
                            {
                              ctu::cf::assign();
                              CFRelease(v63);
                            }
                            MEMORY[0x1C3B8B878](&v94);
                            os_unfair_lock_unlock(v61);
                            if (SHIBYTE(__p.st_gid) < 0)
                              operator delete(*(void **)&__p.st_dev);
                            v64 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
                            if (v97.__r_.__value_.__l.__size_)
                            {
                              v65 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
                              do
                                v66 = __ldaxr(v65);
                              while (__stlxr(v66 - 1, v65));
                              if (!v66)
                              {
                                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                                std::__shared_weak_count::__release_weak(v64);
                              }
                            }
                            v67.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                            v67.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                            *(timespec *)&__p.st_blksize = v67;
                            *(timespec *)__p.st_qspare = v67;
                            __p.st_birthtimespec = v67;
                            *(timespec *)&__p.st_size = v67;
                            __p.st_mtimespec = v67;
                            __p.st_ctimespec = v67;
                            *(timespec *)&__p.st_uid = v67;
                            __p.st_atimespec = v67;
                            *(timespec *)&__p.st_dev = v67;
                            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v68 = &__dst;
                            else
                              v68 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                            if (stat((const char *)v68, &__p))
                            {
                              v69 = -1;
                              goto LABEL_142;
                            }
                            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                              std::string::__init_copy_ctor_external(&v97, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                            else
                              v97 = __dst;
                            v70 = (const void *)*MEMORY[0x1E0D01A20];
                            v71 = strlen((const char *)*MEMORY[0x1E0D01A20]);
                            if (v71 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v72 = v71;
                            if (v71 >= 0x17)
                            {
                              v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v71 | 7) != 0x17)
                                v74 = v71 | 7;
                              v75 = v74 + 1;
                              v73 = operator new(v74 + 1);
                              v95 = v72;
                              v96 = v75 | 0x8000000000000000;
                              v94 = v73;
                            }
                            else
                            {
                              HIBYTE(v96) = v71;
                              v73 = &v94;
                              if (!v71)
                              {
LABEL_128:
                                *((_BYTE *)v73 + v72) = 0;
                                NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&v97, (const void **)&v94);
                                if (SHIBYTE(v96) < 0)
                                {
                                  operator delete(v94);
                                  if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_130:
                                    if (NumberOfLogDumps >> 31)
                                      v69 = -1;
                                    else
                                      v69 = NumberOfLogDumps;
                                    if (v69 == -1)
                                      goto LABEL_142;
LABEL_140:
                                    if (v69 >= v88)
                                    {
                                      std::string::__assign_external(&v89, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                                      v69 = NumberOfLogDumps;
                                    }
LABEL_142:
                                    if ((v77 & 1) == 0
                                    {
                                      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
                                    }
                                    *(_QWORD *)&__p.st_dev = MEMORY[0x1E0C809B0];
                                    __p.st_ino = 0x40000000;
                                    *(_QWORD *)&__p.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
                                    *(_QWORD *)&__p.st_rdev = &__block_descriptor_tmp_13_8;
                                    __p.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
                                    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
                                    {
                                      v78 = (std::__shared_weak_count *)unk_1ED70F6A0;
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      v93 = unk_1ED70F6A0;
                                      if (!unk_1ED70F6A0)
                                        goto LABEL_147;
                                    }
                                    else
                                    {
                                      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
                                      v78 = (std::__shared_weak_count *)unk_1ED70F6A0;
                                      v92 = GetABMLogServer(void)::sLogServer;
                                      v93 = unk_1ED70F6A0;
                                      if (!unk_1ED70F6A0)
                                        goto LABEL_147;
                                    }
                                    v79 = (unint64_t *)&v78->__shared_owners_;
                                    do
                                      v80 = __ldxr(v79);
                                    while (__stxr(v80 + 1, v79));
LABEL_147:
                                    v81 = *((_QWORD *)GetGlobalLogger(&v92) + 4);
                                    if (v78)
                                    {
                                      v82 = (unint64_t *)&v78->__shared_owners_;
                                      do
                                        v83 = __ldaxr(v82);
                                      while (__stlxr(v83 - 1, v82));
                                      if (!v83)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                                        std::__shared_weak_count::__release_weak(v78);
                                      }
                                    }
                                    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                                    {
                                      __p.st_dev = 136315650;
                                      *(_QWORD *)&__p.st_mode = "trace.filter";
                                      WORD2(__p.st_ino) = 1024;
                                      *(_DWORD *)((char *)&__p.st_ino + 6) = v69;
                                      HIWORD(__p.st_uid) = 1024;
                                      __p.st_gid = v88;
                                      _os_log_impl(&dword_1BF566000, v81, OS_LOG_TYPE_DEFAULT, "#I %s: log dump count = %d, max log limit = %d", (uint8_t *)&__p, 0x18u);
                                    }
                                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v85 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v85 = size;
                                      if (v85)
                                        goto LABEL_165;
                                    }
                                    else
                                    {
                                      v55 = v89.__r_.__value_.__l.__size_;
                                      v54 = (void *)v89.__r_.__value_.__r.__words[0];
                                      v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                                      v84 = HIBYTE(v29);
                                      if (v29 < 0)
                                        v84 = size;
                                      if (v84)
                                        goto LABEL_165;
                                    }
LABEL_162:
                                    if ((v56 & 0x80u) == 0)
                                      v55 = v56;
                                    if (!v55)
                                    {
LABEL_166:
                                      if ((v56 & 0x80) != 0)
                                      {
                                        operator delete(v54);
                                        if ((v29 & 0x8000000000000000) == 0)
                                          return v6;
                                      }
                                      else if ((v29 & 0x8000000000000000) == 0)
                                      {
                                        return v6;
                                      }
                                      operator delete(v27);
                                      return v6;
                                    }
LABEL_165:
                                    std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E0CFB6C0]);
                                    goto LABEL_166;
                                  }
                                }
                                else if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_130;
                                }
                                operator delete(v97.__r_.__value_.__l.__data_);
                                if (NumberOfLogDumps >> 31)
                                  v69 = -1;
                                else
                                  v69 = NumberOfLogDumps;
                                if (v69 == -1)
                                  goto LABEL_142;
                                goto LABEL_140;
                              }
                            }
                            memmove(v73, v70, v72);
                            goto LABEL_128;
                          }
                        }
                        memmove(p_p, v50, v52);
                        goto LABEL_100;
                      }
                    }
                    else if ((_DWORD)v6)
                    {
                      goto LABEL_67;
                    }
                    v54 = 0;
                    v55 = 0;
                    v56 = 0;
                    v57 = HIBYTE(v29);
                    if (v29 < 0)
                      v57 = size;
                    if (v57)
                      goto LABEL_165;
                    goto LABEL_162;
                  }
                }
                memmove(v35, v32, v34);
                goto LABEL_60;
              }
LABEL_24:
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_25;
            }
LABEL_47:
            if (!__dst.__r_.__value_.__l.__size_)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_51;
            }
            memset(&__p, 0, 64);
            v16 = statvfs(__dst.__r_.__value_.__l.__data_, (statvfs *)&__p);
            st_ino = __p.st_ino;
            st_rdev = __p.st_rdev;
            if ((v15 & 0x80000000) == 0)
              goto LABEL_25;
            goto LABEL_24;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        v27 = 0;
        size = 0;
        v29 = 0;
        goto LABEL_52;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_1BF6022D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a38 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (v45 < 0)
    operator delete(v44);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void LegacyAccessoryManager::create(LegacyAccessoryManager *this@<X0>, const char *a2@<X1>, queue a3@<0:X2>, LegacyAccessoryManager **a4@<X8>)
{
  LegacyAccessoryManager *v7;
  NSObject *v8;
  queue v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  LegacyAccessoryManager *v20;
  LegacyAccessoryManager *v21;
  unsigned __int8 v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  LegacyAccessoryManager *v28;
  std::__shared_weak_count *v29;
  uint8_t buf[8];

  v7 = (LegacyAccessoryManager *)operator new(0x78uLL);
  v8 = *(NSObject **)a2;
  v27 = v8;
  if (v8)
    dispatch_retain(v8);
  v9.fObj.fObj = (dispatch_object_s *)&v27;
  LegacyAccessoryManager::LegacyAccessoryManager(v7, (const char *)this, v9);
  v28 = v7;
  *(_QWORD *)buf = v7;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916A20;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v29 = v10;
  *(_QWORD *)buf = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 2);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *((_QWORD *)v7 + 1) = v7;
    *((_QWORD *)v7 + 2) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v7 + 1) = v7;
    *((_QWORD *)v7 + 2) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  if (*(_QWORD *)buf)
    LegacyAccessoryManager::~LegacyAccessoryManager(*(LegacyAccessoryManager **)buf);
  if (v8)
    dispatch_release(v8);
  v20 = v28;
  if (v28 && (LegacyAccessoryManager::init(v28) & 1) != 0)
  {
    v21 = (LegacyAccessoryManager *)v29;
    *a4 = v20;
    a4[1] = v21;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v23 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
LABEL_33:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v23, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a4 = 0;
    a4[1] = 0;
    v24 = v29;
    if (!v29)
      return;
    goto LABEL_27;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v23 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_33;
LABEL_26:
  *a4 = 0;
  a4[1] = 0;
  v24 = v29;
  if (!v29)
    return;
LABEL_27:
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_1BF60274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF602760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  NSObject *v5;
  va_list va;

  va_start(va, a5);
  std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100]((LegacyAccessoryManager **)va);
  if (v5)
    dispatch_release(v5);
  _Unwind_Resume(a1);
}

uint64_t LegacyAccessoryManager::init(LegacyAccessoryManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  const void *v15;
  NSObject *v16;
  uint64_t result;
  NSObject *v18;
  _BOOL4 v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  _QWORD aBlock[6];
  std::__shared_weak_count *v23;
  void *v24;
  uint8_t buf[4];
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 9) || *((_QWORD *)this + 7))
  {
    v3 = *((_QWORD *)this + 1);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
    {
      p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
    }
    LegacyAccessoryManager::generateAccessoryMapping((uint64_t *)this);
    v6 = MEMORY[0x1E0C809B0];
    if (*((_QWORD *)this + 9))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_11;
      aBlock[4] = this;
      aBlock[5] = v3;
      v23 = v2;
      if (v2)
      {
        v7 = (unint64_t *)&v2->__shared_weak_owners_;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v24 = _Block_copy(aBlock);
      ctu::iokit::IOHIDController::registerKeyboardCallback();
      if (v24)
        _Block_release(v24);
      ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 9));
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
    }
    v9 = *((_QWORD *)this + 7);
    if (!v9)
      goto LABEL_35;
    v20[0] = v6;
    v20[1] = 1174405120;
    v20[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke_5;
    v20[3] = &__block_descriptor_tmp_7_0;
    v20[4] = this;
    v20[5] = v3;
    v21 = v2;
    if (v2)
    {
      v10 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = _Block_copy(v20);
    v13 = *((_QWORD *)this + 3);
    if (v13)
      dispatch_retain(*((dispatch_object_t *)this + 3));
    if (v12)
    {
      v14 = _Block_copy(v12);
      v15 = *(const void **)(v9 + 88);
      *(_QWORD *)(v9 + 88) = v14;
      if (!v15)
        goto LABEL_25;
    }
    else
    {
      v15 = *(const void **)(v9 + 88);
      *(_QWORD *)(v9 + 88) = 0;
      if (!v15)
      {
LABEL_25:
        if (v13)
          dispatch_retain(v13);
        v16 = *(NSObject **)(v9 + 96);
        *(_QWORD *)(v9 + 96) = v13;
        if (v16)
          dispatch_release(v16);
        if (v13)
          dispatch_release(v13);
        if (v12)
          _Block_release(v12);
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 7));
        if (v21)
          std::__shared_weak_count::__release_weak(v21);
LABEL_35:
        if (v2)
          std::__shared_weak_count::__release_weak(v2);
        return 1;
      }
    }
    _Block_release(v15);
    goto LABEL_25;
  }
  v18 = *(NSObject **)this;
  v19 = os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v19)
  {
    *(_DWORD *)buf = 136315138;
    v26 = "LegacyAccessoryManager";
    _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I No IOKit controllers created for the %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1BF602A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void LegacyAccessoryManager::LegacyAccessoryManager(LegacyAccessoryManager *this, const char *__s, queue a3)
{
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  NSObject *v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string __dst;
  std::string v42;
  void *__p[2];
  void (*v44)(uint64_t);
  void *v45;
  uint64_t *v46;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, ".", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v42, "LegacyAccessoryManager", 0x16uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v44 = (void (*)(uint64_t))v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44) >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v15);
  if (SHIBYTE(v44) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
LABEL_54:
      operator delete(__dst.__r_.__value_.__l.__data_);
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v16 = *(NSObject **)a3.fObj.fObj;
      *((_QWORD *)this + 3) = *(_QWORD *)a3.fObj.fObj;
      if (!v16)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v16 = *(NSObject **)a3.fObj.fObj;
  *((_QWORD *)this + 3) = *(_QWORD *)a3.fObj.fObj;
  if (v16)
LABEL_16:
    dispatch_retain(v16);
LABEL_17:
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)0x40000000;
  v44 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v45 = &__block_descriptor_tmp_13_8;
  v46 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = unk_1ED70F6A0;
    v39 = GetABMLogServer(void)::sLogServer;
    v40 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_22;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __p);
    v18 = unk_1ED70F6A0;
    v39 = GetABMLogServer(void)::sLogServer;
    v40 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_22;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_22:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v21 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(__p);
    v22 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v23 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v27 = (unint64_t *)((char *)__p[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_1ED70F338;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  v42.__r_.__value_.__r.__words[0] = v21;
  v42.__r_.__value_.__l.__size_ = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  __p[0] = *(void **)(*(_QWORD *)v21 + 208);
  *((_QWORD *)this + 7) = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  v32 = operator new(0xD8uLL);
  std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v32, &v39, (uint64_t *)__p);
  *((_QWORD *)this + 7) = v32 + 3;
  *((_QWORD *)this + 8) = v32;
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v35 = v40;
  if (v40)
  {
    v36 = (unint64_t *)&v40->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(NSObject **)a3.fObj.fObj;
  if (*(_QWORD *)a3.fObj.fObj)
    dispatch_retain(*(dispatch_object_t *)a3.fObj.fObj);
  ctu::iokit::IOHIDController::create();
  if (v38)
    dispatch_release(v38);
  *((_BYTE *)this + 92) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
}

void sub_1BF602EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  NSObject *v20;
  std::__shared_weak_count *v21;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::vector<dispatch::callback<void({block_pointer})>>::~vector[abi:ne180100](v18);
  v20 = *(NSObject **)(v17 + 24);
  if (v20)
    dispatch_release(v20);
  v21 = *(std::__shared_weak_count **)(v17 + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x1C3B8B74C](v17);
  _Unwind_Resume(a1);
}

void sub_1BF602F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if (a19 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if (a19 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void LegacyAccessoryManager::~LegacyAccessoryManager(LegacyAccessoryManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  ctu::iokit::IOHIDController *v6;
  IOKitEventNotifier *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;

  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 9);
  if (v6)
    ctu::iokit::IOHIDController::stop(v6);
  v7 = (IOKitEventNotifier *)*((_QWORD *)this + 7);
  if (v7)
    IOKitEventNotifier::shutdown(v7);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 13));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (char *)*((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_31;
  }
  else
  {
LABEL_21:
    v14 = (char *)*((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_31;
  }
  v15 = (char *)*((_QWORD *)this + 5);
  v16 = v14;
  if (v15 != v14)
  {
    do
    {
      v17 = *((_QWORD *)v15 - 1);
      if (v17)
        dispatch_release(v17);
      v18 = (const void *)*((_QWORD *)v15 - 2);
      if (v18)
        _Block_release(v18);
      v15 -= 16;
    }
    while (v15 != v14);
    v16 = (char *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 5) = v14;
  operator delete(v16);
LABEL_31:
  v19 = *((_QWORD *)this + 3);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  JUMPOUT(0x1C3B8B74CLL);
}

uint64_t *LegacyAccessoryManager::generateAccessoryMapping(uint64_t *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t **v3;
  uint64_t **v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int *v17;
  uint64_t **v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  uint64_t **v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  uint64_t **v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int *v59;
  uint64_t **v60;
  _QWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int *v73;
  uint64_t **v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;

  v1 = (uint64_t)this;
  v3 = (uint64_t **)(this + 13);
  v2 = (unsigned int *)this[13];
  v4 = (uint64_t **)(this + 13);
  v5 = this + 13;
  if (v2)
  {
    v6 = (unsigned int *)this[13];
    while (1)
    {
      while (1)
      {
        v5 = v6;
        v7 = v6[7];
        if (v7 < 3)
          break;
        v6 = (unsigned int *)*v5;
        v4 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 == 2)
        break;
      v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = v5;
    v5 = operator new(0x28uLL);
    *(_QWORD *)((char *)v5 + 28) = 2;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *v4 = v5;
    v9 = **(_QWORD **)(v1 + 96);
    v10 = v5;
    if (v9)
    {
      *(_QWORD *)(v1 + 96) = v9;
      v10 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v10);
    v2 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v5 + 8) = 16;
  v11 = v3;
  v12 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = v2;
        v13 = v2[7];
        if (v13 < 5)
          break;
        v2 = (unsigned int *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_18;
      }
      if (v13 == 4)
        break;
      v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v14 = v12;
    v12 = operator new(0x28uLL);
    *(_QWORD *)((char *)v12 + 28) = 4;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = v12;
    v15 = **(_QWORD **)(v1 + 96);
    v16 = v12;
    if (v15)
    {
      *(_QWORD *)(v1 + 96) = v15;
      v16 = *v11;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v16);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v12 + 8) = 32;
  v17 = (unsigned int *)*v3;
  v18 = v3;
  v19 = v3;
  if (*v3)
  {
    v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v19 = v20;
        v21 = v20[7];
        if (v21 < 9)
          break;
        v20 = (unsigned int *)*v19;
        v18 = (uint64_t **)v19;
        if (!*v19)
          goto LABEL_28;
      }
      if (v21 == 8)
        break;
      v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v22 = v19;
    v19 = operator new(0x28uLL);
    *(_QWORD *)((char *)v19 + 28) = 8;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v22;
    *v18 = v19;
    v23 = **(_QWORD **)(v1 + 96);
    v24 = v19;
    if (v23)
    {
      *(_QWORD *)(v1 + 96) = v23;
      v24 = *v18;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v24);
    v17 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v19 + 8) = 64;
  v25 = v3;
  v26 = v3;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        v26 = v17;
        v27 = v17[7];
        if (v27 < 0x11)
          break;
        v17 = (unsigned int *)*v26;
        v25 = (uint64_t **)v26;
        if (!*v26)
          goto LABEL_38;
      }
      if (v27 == 16)
        break;
      v17 = (unsigned int *)v26[1];
      if (!v17)
      {
        v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v28 = v26;
    v26 = operator new(0x28uLL);
    *(_QWORD *)((char *)v26 + 28) = 16;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *v25 = v26;
    v29 = **(_QWORD **)(v1 + 96);
    v30 = v26;
    if (v29)
    {
      *(_QWORD *)(v1 + 96) = v29;
      v30 = *v25;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v30);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v26 + 8) = 1024;
  v31 = (unsigned int *)*v3;
  v32 = v3;
  v33 = v3;
  if (*v3)
  {
    v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v33 = v34;
        v35 = v34[7];
        if (v35 < 0x21)
          break;
        v34 = (unsigned int *)*v33;
        v32 = (uint64_t **)v33;
        if (!*v33)
          goto LABEL_48;
      }
      if (v35 == 32)
        break;
      v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v36 = v33;
    v33 = operator new(0x28uLL);
    *(_QWORD *)((char *)v33 + 28) = 32;
    *v33 = 0;
    v33[1] = 0;
    v33[2] = v36;
    *v32 = v33;
    v37 = **(_QWORD **)(v1 + 96);
    v38 = v33;
    if (v37)
    {
      *(_QWORD *)(v1 + 96) = v37;
      v38 = *v32;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v38);
    v31 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v33 + 8) = 256;
  v39 = v3;
  v40 = v3;
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        v40 = v31;
        v41 = v31[7];
        if (v41 < 0x41)
          break;
        v31 = (unsigned int *)*v40;
        v39 = (uint64_t **)v40;
        if (!*v40)
          goto LABEL_58;
      }
      if (v41 == 64)
        break;
      v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    v42 = v40;
    v40 = operator new(0x28uLL);
    *(_QWORD *)((char *)v40 + 28) = 64;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *v39 = v40;
    v43 = **(_QWORD **)(v1 + 96);
    v44 = v40;
    if (v43)
    {
      *(_QWORD *)(v1 + 96) = v43;
      v44 = *v39;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v44);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v40 + 8) = 2048;
  v45 = (unsigned int *)*v3;
  v46 = v3;
  v47 = v3;
  if (*v3)
  {
    v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v47 = v48;
        v49 = v48[7];
        if (v49 < 0x81)
          break;
        v48 = (unsigned int *)*v47;
        v46 = (uint64_t **)v47;
        if (!*v47)
          goto LABEL_68;
      }
      if (v49 == 128)
        break;
      v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    v50 = v47;
    v47 = operator new(0x28uLL);
    *(_QWORD *)((char *)v47 + 28) = 128;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    *v46 = v47;
    v51 = **(_QWORD **)(v1 + 96);
    v52 = v47;
    if (v51)
    {
      *(_QWORD *)(v1 + 96) = v51;
      v52 = *v46;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v52);
    v45 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v47 + 8) = 4096;
  v53 = v3;
  v54 = v3;
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        v54 = v45;
        v55 = v45[7];
        if (v55 < 0x101)
          break;
        v45 = (unsigned int *)*v54;
        v53 = (uint64_t **)v54;
        if (!*v54)
          goto LABEL_78;
      }
      if (v55 == 256)
        break;
      v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v56 = v54;
    v54 = operator new(0x28uLL);
    *(_QWORD *)((char *)v54 + 28) = 256;
    *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *v53 = v54;
    v57 = **(_QWORD **)(v1 + 96);
    v58 = v54;
    if (v57)
    {
      *(_QWORD *)(v1 + 96) = v57;
      v58 = *v53;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v58);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v54 + 8) = 0x2000;
  v59 = (unsigned int *)*v3;
  v60 = v3;
  v61 = v3;
  if (*v3)
  {
    v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v61 = v62;
        v63 = v62[7];
        if (v63 < 0x201)
          break;
        v62 = (unsigned int *)*v61;
        v60 = (uint64_t **)v61;
        if (!*v61)
          goto LABEL_88;
      }
      if (v63 == 512)
        break;
      v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    v64 = v61;
    v61 = operator new(0x28uLL);
    *(_QWORD *)((char *)v61 + 28) = 512;
    *v61 = 0;
    v61[1] = 0;
    v61[2] = v64;
    *v60 = v61;
    v65 = **(_QWORD **)(v1 + 96);
    v66 = v61;
    if (v65)
    {
      *(_QWORD *)(v1 + 96) = v65;
      v66 = *v60;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v66);
    v59 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v61 + 8) = 0x4000;
  v67 = v3;
  v68 = v3;
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        v68 = v59;
        v69 = v59[7];
        if (v69 < 0x401)
          break;
        v59 = (unsigned int *)*v68;
        v67 = (uint64_t **)v68;
        if (!*v68)
          goto LABEL_98;
      }
      if (v69 == 1024)
        break;
      v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v70 = v68;
    v68 = operator new(0x28uLL);
    *(_QWORD *)((char *)v68 + 28) = 1024;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *v67 = v68;
    v71 = **(_QWORD **)(v1 + 96);
    v72 = v68;
    if (v71)
    {
      *(_QWORD *)(v1 + 96) = v71;
      v72 = *v67;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v72);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v68 + 8) = 0x8000;
  v73 = (unsigned int *)*v3;
  v74 = v3;
  v75 = v3;
  if (*v3)
  {
    v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        v75 = v76;
        v77 = v76[7];
        if (v77 < 0x801)
          break;
        v76 = (unsigned int *)*v75;
        v74 = (uint64_t **)v75;
        if (!*v75)
          goto LABEL_108;
      }
      if (v77 == 2048)
        break;
      v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    v78 = v75;
    v75 = operator new(0x28uLL);
    *(_QWORD *)((char *)v75 + 28) = 2048;
    *v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *v74 = v75;
    v79 = **(_QWORD **)(v1 + 96);
    v80 = v75;
    if (v79)
    {
      *(_QWORD *)(v1 + 96) = v79;
      v80 = *v74;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v80);
    v73 = *(unsigned int **)(v1 + 104);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v75 + 8) = 0x10000;
  v81 = v3;
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        v81 = v73;
        v82 = v73[7];
        if (v82 <= 0x1000)
          break;
        v73 = (unsigned int *)*v81;
        v3 = (uint64_t **)v81;
        if (!*v81)
          goto LABEL_118;
      }
      if (v82 == 4096)
        break;
      v73 = (unsigned int *)v81[1];
      if (!v73)
      {
        v3 = (uint64_t **)(v81 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    v83 = v81;
    v81 = operator new(0x28uLL);
    *(_QWORD *)((char *)v81 + 28) = 4096;
    *v81 = 0;
    v81[1] = 0;
    v81[2] = v83;
    *v3 = v81;
    v84 = **(_QWORD **)(v1 + 96);
    v85 = v81;
    if (v84)
    {
      *(_QWORD *)(v1 + 96) = v84;
      v85 = *v3;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v85);
    ++*(_QWORD *)(v1 + 112);
  }
  *((_DWORD *)v81 + 8) = 0x20000;
  return this;
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  int v28;
  void *v29;
  const void *v30;
  void *v31;
  char v32;
  __int128 v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *aBlock;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  if (*(unsigned __int8 *)(v5 + 92) == a2)
    return;
  v11 = *(NSObject **)v5;
  if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "OPENED";
    if (a2)
      v12 = "CLOSED";
    LODWORD(v33) = 136315138;
    *(_QWORD *)((char *)&v33 + 4) = v12;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v33, 0xCu);
  }
  v14 = (uint64_t **)(v5 + 104);
  v13 = *(uint64_t **)(v5 + 104);
  *(_BYTE *)(v5 + 92) = a2;
  v15 = (uint64_t **)(v5 + 104);
  if (a2)
  {
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = *((_DWORD *)v13 + 7);
          if (v16 <= 0x1000)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_22;
        }
        if (v16 == 4096)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_22;
        }
      }
      v17 = (uint64_t *)v15;
    }
    else
    {
LABEL_22:
      v17 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v17 + 28) = 4096;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = (uint64_t)v15;
      *v14 = v17;
      v18 = **(_QWORD **)(v5 + 96);
      v19 = v17;
      if (v18)
      {
        *(_QWORD *)(v5 + 96) = v18;
        v19 = *v14;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v19);
      ++*(_QWORD *)(v5 + 112);
    }
    *(_DWORD *)(v5 + 88) |= *((_DWORD *)v17 + 8);
    v24 = *(_QWORD *)(v5 + 32);
    v25 = *(_QWORD *)(v5 + 40);
    if (v24 != v25)
      goto LABEL_42;
    return;
  }
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v13;
        v20 = *((_DWORD *)v13 + 7);
        if (v20 <= 0x1000)
          break;
        v13 = *v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_32;
      }
      if (v20 == 4096)
        break;
      v13 = v15[1];
      if (!v13)
      {
        v14 = v15 + 1;
        goto LABEL_32;
      }
    }
    v21 = (uint64_t *)v15;
  }
  else
  {
LABEL_32:
    v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 4096;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v15;
    *v14 = v21;
    v22 = **(_QWORD **)(v5 + 96);
    v23 = v21;
    if (v22)
    {
      *(_QWORD *)(v5 + 96) = v22;
      v23 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v23);
    ++*(_QWORD *)(v5 + 112);
  }
  *(_DWORD *)(v5 + 88) &= ~*((_DWORD *)v21 + 8);
  v24 = *(_QWORD *)(v5 + 32);
  v25 = *(_QWORD *)(v5 + 40);
  if (v24 != v25)
  {
LABEL_42:
    while (*(_QWORD *)v24)
    {
      v26 = _Block_copy(*(const void **)v24);
      v27 = *(NSObject **)(v24 + 8);
      if (v27)
        goto LABEL_44;
LABEL_45:
      v28 = *(_DWORD *)(v5 + 88);
      if (v26)
      {
        v29 = _Block_copy(v26);
        v30 = v29;
        *(_QWORD *)&v33 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v33 + 1) = 1174405120;
        v34 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v35 = &__block_descriptor_tmp_12_1;
        if (v29)
        {
          v31 = _Block_copy(v29);
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 1;
        }
      }
      else
      {
        v30 = 0;
        v31 = 0;
        *(_QWORD *)&v33 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v33 + 1) = 1174405120;
        v32 = 1;
        v34 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v35 = &__block_descriptor_tmp_12_1;
      }
      aBlock = v31;
      v37 = v28;
      dispatch_async(v27, &v33);
      if (aBlock)
        _Block_release(aBlock);
      if ((v32 & 1) == 0)
        _Block_release(v30);
      if (v27)
        dispatch_release(v27);
      if (v26)
        _Block_release(v26);
      v24 += 16;
      if (v24 == v25)
        return;
    }
    v26 = 0;
    v27 = *(NSObject **)(v24 + 8);
    if (!v27)
      goto LABEL_45;
LABEL_44:
    dispatch_retain(v27);
    goto LABEL_45;
  }
}

void sub_1BF603D38(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke_5(_QWORD *a1, unint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
LABEL_7:
        LegacyAccessoryManager::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void LegacyAccessoryManager::accessoryNotification_sync(uint64_t a1, unint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  unint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  void *__p[2];
  char v31;
  uint8_t buf[4];
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    v6 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v31 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v33 = v7;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v31 < 0)
      operator delete(__p[0]);
    v6 = *(NSObject **)a1;
  }
  v8 = HIDWORD(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((ctu::iokit::asString(), v31 >= 0) ? (v9 = __p) : (v9 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v33 = v9,
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu),
        v31 < 0))
  {
    operator delete(__p[0]);
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
LABEL_16:
      v10 = *(NSObject **)a1;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = a3;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I This port (%d) is not supported.", (uint8_t *)__p, 8u);
      }
      return;
    }
  }
  else if ((a3 - 3) <= 0xFFFFFFFD)
  {
    goto LABEL_16;
  }
  v11 = *(NSObject **)a1;
  v12 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)a2 == 1)
  {
    if (!v12)
    {
      if (HIDWORD(a2) == 4096)
        goto LABEL_42;
LABEL_22:
      v13 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEBUG, "#D Detected not keyboard type. Setting the accessory bitmask", (uint8_t *)__p, 2u);
        v15 = (_QWORD *)(a1 + 104);
        v14 = *(_QWORD *)(a1 + 104);
        if (v14)
        {
          while (1)
          {
LABEL_33:
            while (1)
            {
              v16 = (_QWORD *)v14;
              v17 = *(_DWORD *)(v14 + 28);
              if (v17 <= v8)
                break;
              v14 = *v16;
              v15 = v16;
              if (!*v16)
                goto LABEL_37;
            }
            if (v17 >= v8)
              break;
            v14 = v16[1];
            if (!v14)
            {
              v15 = v16 + 1;
              goto LABEL_37;
            }
          }
          v18 = v16;
          goto LABEL_41;
        }
      }
      else
      {
        v15 = (_QWORD *)(a1 + 104);
        v14 = *(_QWORD *)(a1 + 104);
        if (v14)
          goto LABEL_33;
      }
      v16 = v15;
LABEL_37:
      v18 = operator new(0x28uLL);
      v18[7] = v8;
      v18[8] = 0;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v16;
      *v15 = v18;
      v19 = **(_QWORD **)(a1 + 96);
      v20 = (uint64_t *)v18;
      if (v19)
      {
        *(_QWORD *)(a1 + 96) = v19;
        v20 = (uint64_t *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v20);
      ++*(_QWORD *)(a1 + 112);
LABEL_41:
      *(_DWORD *)(a1 + 88) |= v18[8];
      goto LABEL_42;
    }
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is attached", (uint8_t *)__p, 2u);
    if (HIDWORD(a2) != 4096)
      goto LABEL_22;
  }
  else
  {
    if (v12)
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is detached. Clear all the bits in the accessory state", (uint8_t *)__p, 2u);
    }
    *(_DWORD *)(a1 + 88) = 0;
  }
LABEL_42:
  v21 = *(NSObject **)a1;
  if (*(_BYTE *)(a1 + 92))
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEBUG, "#D If a keyboard is covered, we should set the keyboard accessory state regardless of the accessory event", (uint8_t *)__p, 2u);
      v23 = (uint64_t **)(a1 + 104);
      v22 = *(uint64_t **)(a1 + 104);
      if (v22)
      {
        while (1)
        {
LABEL_49:
          while (1)
          {
            v24 = (uint64_t **)v22;
            v25 = *((_DWORD *)v22 + 7);
            if (v25 <= 0x1000)
              break;
            v22 = *v24;
            v23 = v24;
            if (!*v24)
              goto LABEL_53;
          }
          if (v25 == 4096)
            break;
          v22 = v24[1];
          if (!v22)
          {
            v23 = v24 + 1;
            goto LABEL_53;
          }
        }
        v26 = (uint64_t *)v24;
        goto LABEL_57;
      }
    }
    else
    {
      v23 = (uint64_t **)(a1 + 104);
      v22 = *(uint64_t **)(a1 + 104);
      if (v22)
        goto LABEL_49;
    }
    v24 = v23;
LABEL_53:
    v26 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v26 + 28) = 4096;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v24;
    *v23 = v26;
    v27 = **(_QWORD **)(a1 + 96);
    v28 = v26;
    if (v27)
    {
      *(_QWORD *)(a1 + 96) = v27;
      v28 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v28);
    ++*(_QWORD *)(a1 + 112);
LABEL_57:
    *(_DWORD *)(a1 + 88) |= *((_DWORD *)v26 + 8);
    v21 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *(_DWORD *)(a1 + 88);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v29;
    _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I Accessory State: 0x%x\n", (uint8_t *)__p, 8u);
  }
  LegacyAccessoryManager::notifyClients((NSObject **)a1);
}

void LegacyAccessoryManager::notifyClients(NSObject **this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  int v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 22);
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Accessory State: 0x%x\n", (uint8_t *)&v13, 8u);
  }
  v4 = this[4];
  v5 = this[5];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_8;
LABEL_9:
      v8 = *((_DWORD *)this + 22);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 1174405120;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v16 = &__block_descriptor_tmp_12_1;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 1174405120;
        v12 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        v16 = &__block_descriptor_tmp_12_1;
      }
      aBlock = v11;
      v18 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_9;
LABEL_8:
    dispatch_retain(isa);
    goto LABEL_9;
  }
}

void sub_1BF6044F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *LegacyAccessoryManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[5];
  if ((unint64_t)v4 >= a1[6])
  {
    result = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(a1 + 4, (uint64_t)a2);
    a1[5] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[5] = v4 + 2;
  }
  return result;
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(unsigned int)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

LegacyAccessoryManager **std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100](LegacyAccessoryManager **a1)
{
  LegacyAccessoryManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    LegacyAccessoryManager::~LegacyAccessoryManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

LegacyAccessoryManager *std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__on_zero_shared(uint64_t a1)
{
  LegacyAccessoryManager *result;

  result = *(LegacyAccessoryManager **)(a1 + 24);
  if (result)
    LegacyAccessoryManager::~LegacyAccessoryManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73EF6FLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73EF6FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73EF6FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73EF6FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

double BootModuleICE::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  double result;
  uint64_t v11[2];
  BootModule *v12[2];

  v12[0] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  v12[1] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x1F0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  BootModuleICE::BootModuleICE(v4, v11);
  v12[0] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  v12[1] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootModuleICE>::shared_ptr[abi:ne180100]<BootModuleICE,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1},void>(v12, v5);
  ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v12[0] + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  BootModule::init(v12[0]);
  result = *(double *)v12;
  *a2 = *(_OWORD *)v12;
  return result;
}

void sub_1BF6049DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6049F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

_QWORD *BootModuleICE::BootModuleICE(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::radio *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v21;
  uint8_t v22[16];
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)a2[1];
  v25 = *a2;
  v26 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v23 = 0;
  v24 = 0;
  BootModule::BootModule((uint64_t)a1, &v25, &v23);
  v6 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (capabilities::radio *)v26;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  *a1 = off_1E7916AA0;
  a1[6] = &unk_1E7916B28;
  if (capabilities::radio::vendor(v9) == 2)
  {
    v10 = (std::__shared_weak_count *)operator new(0x88uLL);
    v10->__shared_owners_ = 0;
    v11 = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7916D80;
    v12 = v10 + 1;
    BootController::BootController((BootController *)&v10[1]);
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7920B98;
    LOBYTE(v10[5].__shared_owners_) = 1;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v10[4].__shared_weak_owners_ = (uint64_t)v12;
    v10[5].__vftable = (std::__shared_weak_count_vtbl *)v10;
    do
      v16 = __ldaxr(v11);
    while (__stlxr(v16 - 1, v11));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v17 = (std::__shared_weak_count *)a1[60];
    a1[59] = v12;
    a1[60] = v10;
    if (!v17)
      return a1;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (v19)
      return a1;
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    return a1;
  }
  else
  {
    v21 = a1[11];
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      return a1;
    *(_WORD *)v22 = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Unsupported or unknown radio vendor!", v22, 2u);
    return a1;
  }
}

void sub_1BF604C3C(_Unwind_Exception *a1)
{
  BootModule *v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  BootModule::~BootModule(v1);
  _Unwind_Resume(a1);
}

void sub_1BF604C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (!a14)
    _Unwind_Resume(a1);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void BootModuleICE::~BootModuleICE(BootModuleICE *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E7916AA0;
  *((_QWORD *)this + 6) = &unk_1E7916B28;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E7916AA0;
  *((_QWORD *)this + 6) = &unk_1E7916B28;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E7916AA0;
  *((_QWORD *)this + 6) = &unk_1E7916B28;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  BootModule::~BootModule(this);
  operator delete(v3);
}

void `non-virtual thunk to'BootModuleICE::~BootModuleICE(BootModuleICE *this)
{
  NSObject *v1;
  BootModule *v2;
  uint8_t v3[16];

  *(_QWORD *)this = &unk_1E7916B28;
  v1 = *((_QWORD *)this + 5);
  *((_QWORD *)this - 6) = off_1E7916AA0;
  v2 = (BootModuleICE *)((char *)this - 48);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(v2);
}

{
  NSObject *v1;
  BootModule *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = &unk_1E7916B28;
  v1 = *((_QWORD *)this + 5);
  *((_QWORD *)this - 6) = off_1E7916AA0;
  v2 = (BootModuleICE *)((char *)this - 48);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  BootModule::~BootModule(v2);
  operator delete(v3);
}

void BootModuleICE::requestFSSync_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const void *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  unint64_t v26;
  void *v27;
  _QWORD v28[5];
  void *aBlock;
  dispatch_object_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  const void *v33;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v36;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_BOOL_create(1);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFBBE0], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(1);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB910], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v18 = (const void *)*MEMORY[0x1E0CFB5D0];
  v19 = strlen((const char *)*MEMORY[0x1E0CFB5D0]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v36 = v23 | 0x8000000000000000;
    __dst[0] = v21;
LABEL_27:
    memmove(v21, v18, (size_t)v20);
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    object = v5;
    if (v5)
      goto LABEL_23;
    goto LABEL_28;
  }
  HIBYTE(v36) = v19;
  v21 = __dst;
  if (v19)
    goto LABEL_27;
  LOBYTE(__dst[0]) = 0;
  object = v5;
  if (v5)
  {
LABEL_23:
    xpc_retain(v5);
    goto LABEL_29;
  }
LABEL_28:
  object = xpc_null_create();
LABEL_29:
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 1174405120;
  v28[2] = ___ZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke;
  v28[3] = &__block_descriptor_tmp_12;
  v28[4] = a1;
  v24 = *(void **)a2;
  if (*(_QWORD *)a2)
    v24 = _Block_copy(v24);
  v25 = *(NSObject **)(a2 + 8);
  aBlock = v24;
  v30 = v25;
  if (v25)
    dispatch_retain(v25);
  v31 = v11;
  v32 = v13;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = _Block_copy(v28);
  v33 = v27;
  Service::runCommand(a1, (uint64_t)__dst, &object, &v33);
  if (v27)
    _Block_release(v27);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  if (v30)
    dispatch_release(v30);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v13);
  xpc_release(v5);
}

void sub_1BF605268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, xpc_object_t object, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  const void *v28;

  if (v28)
    _Block_release(v28);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v26);
  xpc_release(object);
  if (a25 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v27);
  xpc_release(v25);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[7];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v14 = (const void *)a1[5];
        if (v14)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = (const void *)a1[5];
        if (v14)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = a1[6];
          if (!v16)
          {
LABEL_10:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x30uLL);
            *v21 = v10;
            v21[1] = v9;
            *((_DWORD *)v21 + 4) = a2;
            v21[3] = v13;
            v22 = xpc_null_create();
            if (v15)
            {
              v21[4] = _Block_copy(v15);
              v21[5] = v16;
              if (!v16)
                goto LABEL_15;
            }
            else
            {
              v21[4] = 0;
              v21[5] = v16;
              if (!v16)
              {
LABEL_15:
                v23 = v7[17];
                v24 = (unint64_t *)&v20->__shared_owners_;
                do
                  v25 = __ldxr(v24);
                while (__stxr(v25 + 1, v24));
                v26 = operator new(0x18uLL);
                *v26 = v21;
                v26[1] = v18;
                v26[2] = v20;
                dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZN13BootModuleICE18requestFSSync_syncENS_8callbackIU13block_pointerFviNS1_2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISH_NSM_14default_deleteISH_EEEEENUlPvE_8__invokeESR_);
                do
                  v27 = __ldaxr(v24);
                while (__stlxr(v27 - 1, v24));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                if (v16)
                  dispatch_release(v16);
                if (v15)
                  _Block_release(v15);
                xpc_release(v22);
                goto LABEL_26;
              }
            }
            dispatch_retain(v16);
            goto LABEL_15;
          }
LABEL_9:
          dispatch_retain(v16);
          goto LABEL_10;
        }
      }
      v15 = 0;
      v16 = a1[6];
      if (!v16)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
}

void __copy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE56c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE56c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[6];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
}

uint64_t dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void BootModuleICE::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  std::__shared_weak_count *v20;
  void *v21;
  NSObject *v22;
  _QWORD aBlock[6];
  std::__shared_weak_count *v24;
  std::string v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  void *v32;
  uint8_t buf[16];

  v6 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Performing soft reset", buf, 2u);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 120), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_9_0;
  aBlock[4] = a1;
  aBlock[5] = v8;
  v24 = v10;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  ResetInfo::ResetInfo(&v25, a2);
  v16 = *a3;
  if (*a3)
    v16 = _Block_copy(v16);
  v32 = v16;
  v17 = _Block_copy(aBlock);
  v18 = *(NSObject **)(a1 + 136);
  if (v18)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  *(_QWORD *)buf = v17;
  *(_QWORD *)&buf[8] = v18;
  if (v17)
  {
    v19 = _Block_copy(v17);
    v21 = v19;
    v22 = v18;
    if (!v18)
      goto LABEL_20;
    goto LABEL_19;
  }
  v19 = 0;
  v21 = 0;
  v22 = v18;
  if (v18)
LABEL_19:
    dispatch_retain(v18);
LABEL_20:
  BootModuleICE::shutdownAndFlush_sync((capabilities::abs *)a1, (uint64_t)&v21);
  if (v18)
    dispatch_release(v18);
  if (v19)
    _Block_release(v19);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  if (v32)
    _Block_release(v32);
  if (v31 < 0)
  {
    operator delete(__p);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_32:
      if ((v27 & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_41;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v28);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
LABEL_42:
    operator delete(v25.__r_.__value_.__l.__data_);
    v20 = v24;
    if (!v24)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_41:
  operator delete(v26);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_34:
  v20 = v24;
  if (v24)
LABEL_35:
    std::__shared_weak_count::__release_weak(v20);
LABEL_36:
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1BF605894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock)
{
  std::__shared_weak_count *v32;
  void **v33;
  uint64_t v34;

  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v34 - 80);
  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(v33);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::__shared_weak_count::__release_weak(v32);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, int a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const char *v9;
  std::string *v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::string *v13;
  size_t v14;
  void *v15;
  std::string::size_type v16;
  std::string::size_type size;
  std::string *v18;
  char v19;
  __int128 v20;
  std::string *v21;
  size_t v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  size_t v26;
  _BYTE *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _QWORD v40[4];
  void *v41;
  std::string v42;
  int v43;
  void *v44;
  std::string v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  __int128 v52;
  char v53;
  _BYTE v54[8];
  _QWORD *v55;
  void *v56[2];
  char v57;
  __int128 v58;
  unint64_t v59;
  _BYTE v60[32];
  __int128 v61;
  void *v62[2];
  __int128 v63;
  void *v64[2];
  __int128 v65;
  __int128 __dst;
  unint64_t v67;
  _QWORD v68[2];
  _QWORD aBlock[4];
  void *v70;
  std::string __p;
  int v72;
  void *v73;
  std::string v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  std::string v81;
  std::__shared_weak_count *v83;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v83 = v8;
    if (v8)
    {
      if (!a1[5])
      {
        v11 = v8;
LABEL_113:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      memset(&v81, 0, sizeof(v81));
      if (a2)
      {
        v68[0] = 0xAAAAAAAAAAAAAAAALL;
        v68[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v68, *a3);
        v9 = (const char *)*MEMORY[0x1E0CFB0D0];
        __dst = 0uLL;
        v67 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v58, v9);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](&v58);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        v81 = *(std::string *)v60;
        v60[23] = 0;
        v60[0] = 0;
        v10 = (std::string *)(v7 + 152);
        if ((std::string *)(v7 + 152) != &v81)
        {
          if (*(char *)(v7 + 175) < 0)
          {
            v13 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v81
                : (std::string *)v81.__r_.__value_.__r.__words[0];
            v14 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v81.__r_.__value_.__r.__words[2])
                : v81.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>((void **)(v7 + 152), v13, v14);
          }
          else if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)(v7 + 152), v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
            *(_QWORD *)(v7 + 168) = *((_QWORD *)&v81.__r_.__value_.__l + 2);
          }
          if ((v60[23] & 0x80000000) != 0)
            operator delete(*(void **)v60);
        }
        if (SHIBYTE(v67) < 0)
        {
          operator delete((void *)__dst);
          size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v81.__r_.__value_.__l.__size_;
          if (!size)
            goto LABEL_53;
        }
        else
        {
          v16 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v16 = v81.__r_.__value_.__l.__size_;
          if (!v16)
          {
LABEL_53:
            v18 = std::string::__assign_external(&v81, "Failed shutdown and FS sync of baseband.", 0x28uLL);
            if (v10 != v18)
            {
              v19 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
              if (*(char *)(v7 + 175) < 0)
              {
                if (v19 >= 0)
                  v21 = v18;
                else
                  v21 = (std::string *)v18->__r_.__value_.__r.__words[0];
                if (v19 >= 0)
                  v22 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
                else
                  v22 = v18->__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((void **)(v7 + 152), v21, v22);
              }
              else if ((*((_BYTE *)&v18->__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)(v7 + 152), v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
              }
              else
              {
                v20 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
                *(_QWORD *)(v7 + 168) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v20;
              }
            }
          }
        }
        *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v64 = v23;
        v65 = v23;
        *(_OWORD *)v62 = v23;
        v63 = v23;
        *(_OWORD *)&v60[16] = v23;
        v61 = v23;
        *(_OWORD *)v60 = v23;
        v24 = (const void *)*MEMORY[0x1E0CFB590];
        v25 = strlen((const char *)*MEMORY[0x1E0CFB590]);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v26 = v25;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          p_dst = operator new(v28 + 1);
          *((_QWORD *)&__dst + 1) = v26;
          v67 = v29 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v67) = v25;
          p_dst = &__dst;
          if (!v25)
          {
LABEL_73:
            p_dst[v26] = 0;
            v30 = (const void *)*MEMORY[0x1E0CFC098];
            v31 = strlen((const char *)*MEMORY[0x1E0CFC098]);
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v32 = v31;
            if (v31 >= 0x17)
            {
              v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v34 = v31 | 7;
              v35 = v34 + 1;
              v33 = operator new(v34 + 1);
              *((_QWORD *)&v58 + 1) = v32;
              v59 = v35 | 0x8000000000000000;
              *(_QWORD *)&v58 = v33;
            }
            else
            {
              HIBYTE(v59) = v31;
              v33 = &v58;
              if (!v31)
              {
LABEL_81:
                v33[v32] = 0;
                Timestamp::Timestamp((Timestamp *)v54);
                Timestamp::asString((uint64_t)v54, 0, 9, v56);
                v53 = 0;
                LOBYTE(v52) = 0;
                ResetInfo::ResetInfo((std::string *)v60, &__dst, &v58, (__int128 *)&v81, (uint64_t)v56, 7, &v52);
                if (v57 < 0)
                {
                  operator delete(v56[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
                  if ((SHIBYTE(v59) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v67) & 0x80000000) == 0)
                      goto LABEL_84;
LABEL_90:
                    operator delete((void *)__dst);
LABEL_84:
                    ResetInfo::ResetInfo(&v45, (const ResetInfo *)v60);
                    v40[0] = MEMORY[0x1E0C809B0];
                    v40[1] = 1174405120;
                    v40[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_6;
                    v40[3] = &__block_descriptor_tmp_7_1;
                    v36 = (void *)a1[21];
                    if (v36)
                      v36 = _Block_copy(v36);
                    v41 = v36;
                    v43 = a2;
                    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v42, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
                    else
                      v42 = v81;
                    v44 = _Block_copy(v40);
                    BootModule::handleReset_sync(v7, (uint64_t)&v45, &v44);
                    if (v44)
                      _Block_release(v44);
                    if (v51 < 0)
                    {
                      operator delete(v50);
                      if ((v49 & 0x80000000) == 0)
                      {
LABEL_96:
                        if ((v47 & 0x80000000) == 0)
                          goto LABEL_97;
                        goto LABEL_103;
                      }
                    }
                    else if ((v49 & 0x80000000) == 0)
                    {
                      goto LABEL_96;
                    }
                    operator delete(v48);
                    if ((v47 & 0x80000000) == 0)
                    {
LABEL_97:
                      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_98;
                      goto LABEL_104;
                    }
LABEL_103:
                    operator delete(v46);
                    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_98:
                      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_99;
                      goto LABEL_105;
                    }
LABEL_104:
                    operator delete(v45.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_99:
                      v37 = v41;
                      if (!v41)
                      {
LABEL_107:
                        if (SHIBYTE(v65) < 0)
                        {
                          operator delete(v64[1]);
                          if ((SBYTE7(v63) & 0x80000000) == 0)
                          {
LABEL_109:
                            if ((SHIBYTE(v61) & 0x80000000) == 0)
                              goto LABEL_110;
                            goto LABEL_120;
                          }
                        }
                        else if ((SBYTE7(v63) & 0x80000000) == 0)
                        {
                          goto LABEL_109;
                        }
                        operator delete(v62[0]);
                        if ((SHIBYTE(v61) & 0x80000000) == 0)
                        {
LABEL_110:
                          if ((v60[23] & 0x80000000) == 0)
                            goto LABEL_111;
                          goto LABEL_121;
                        }
LABEL_120:
                        operator delete(*(void **)&v60[24]);
                        if ((v60[23] & 0x80000000) == 0)
                        {
LABEL_111:
                          MEMORY[0x1C3B8B8B4](v68);
                          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_112;
                          goto LABEL_40;
                        }
LABEL_121:
                        operator delete(*(void **)v60);
                        MEMORY[0x1C3B8B8B4](v68);
                        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                        {
LABEL_112:
                          operator delete(v81.__r_.__value_.__l.__data_);
                          v11 = v83;
                          if (!v83)
                            return;
                          goto LABEL_113;
                        }
                        goto LABEL_40;
                      }
LABEL_106:
                      _Block_release(v37);
                      goto LABEL_107;
                    }
LABEL_105:
                    operator delete(v42.__r_.__value_.__l.__data_);
                    v37 = v41;
                    if (!v41)
                      goto LABEL_107;
                    goto LABEL_106;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
                  if ((SHIBYTE(v59) & 0x80000000) == 0)
                    goto LABEL_83;
                }
                operator delete((void *)v58);
                if ((SHIBYTE(v67) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_90;
              }
            }
            memmove(v33, v30, v32);
            goto LABEL_81;
          }
        }
        memmove(p_dst, v24, v26);
        goto LABEL_73;
      }
      ResetInfo::ResetInfo(&v74, (const ResetInfo *)(a1 + 7));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_3_1;
      v12 = (void *)a1[21];
      if (v12)
        v12 = _Block_copy(v12);
      v70 = v12;
      v72 = 0;
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
      else
        __p = v81;
      v73 = _Block_copy(aBlock);
      BootModule::hardReset_sync(v7, (uint64_t)&v74, (uint64_t *)&v73);
      if (v73)
        _Block_release(v73);
      if (v80 < 0)
      {
        operator delete(v79);
        if ((v78 & 0x80000000) == 0)
        {
LABEL_28:
          if ((v76 & 0x80000000) == 0)
            goto LABEL_29;
          goto LABEL_35;
        }
      }
      else if ((v78 & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v77);
      if ((v76 & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v75);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        v15 = v70;
        if (!v70)
        {
LABEL_39:
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_112;
LABEL_40:
          v11 = v83;
          if (!v83)
            return;
          goto LABEL_113;
        }
LABEL_38:
        _Block_release(v15);
        goto LABEL_39;
      }
LABEL_37:
      operator delete(__p.__r_.__value_.__l.__data_);
      v15 = v70;
      if (!v70)
        goto LABEL_39;
      goto LABEL_38;
    }
  }
}

void sub_1BF605FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *aBlock;
  uint64_t v69;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo((void **)(v69 - 240));
  if (*(char *)(v69 - 105) < 0)
    operator delete(*(void **)(v69 - 128));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v69 - 96);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF6061FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BF60627C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(const void **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF60636C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *result;

  v4 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (const ResetInfo *)(a2 + 7));
  result = (void *)a2[21];
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 168) = result;
  return result;
}

void sub_1BF6063E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 168);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_7:
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_8:
    std::__shared_weak_count::__release_weak(v3);
}

void BootModuleICE::shutdownAndFlush_sync(capabilities::abs *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  dispatch_object_t object;
  _QWORD aBlock[5];
  void *v20;
  dispatch_object_t v21;
  void *v22;
  util::GuaranteedCallback *v23;
  unint64_t v24;

  v4 = capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  v23 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE21shutdownAndFlush_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_26_0;
  aBlock[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  v20 = v5;
  v21 = v6;
  if (v6)
    dispatch_retain(v6);
  v7 = 2000 * v4;
  v22 = _Block_copy(aBlock);
  v8 = *((_QWORD *)a1 + 17);
  object = v8;
  if (v8)
    dispatch_retain(v8);
  util::GuaranteedCallback::create(&v22, &object, v7, &v23);
  if (object)
    dispatch_release(object);
  if (v22)
    _Block_release(v22);
  v9 = (std::__shared_weak_count *)v24;
  v17[0] = v23;
  v17[1] = v24;
  if (v24)
  {
    v10 = (unint64_t *)(v24 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  BootModuleICE::issueShutdownComand_sync(a1, v17);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v15 = (unint64_t *)(v24 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21)
    dispatch_release(v21);
  if (v20)
    _Block_release(v20);
}

void sub_1BF60663C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 48);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BF606664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  const void *v20;

  if (object)
    dispatch_release(object);
  v20 = *(const void **)(v18 - 56);
  if (v20)
    _Block_release(v20);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void BootModuleICE::shutdown_sync(uint64_t a1, _QWORD *a2)
{
  char *v3;
  void (**v4)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void (**v15)(void *, _QWORD, std::string *);
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _QWORD aBlock[6];
  std::__shared_weak_count *v22;
  void *v23;
  std::string v24;

  if (*(_DWORD *)(a1 + 448) == 8)
  {
    v3 = (char *)operator new(0x28uLL);
    strcpy(v3, "BootModule already in shutdown state");
    v4 = (void (**)(void *, _QWORD, std::string *))*a2;
    std::string::__init_copy_ctor_external(&v24, v3, 0x24uLL);
    v4[2](v4, 0, &v24);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    operator delete(v3);
    return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v24.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v24.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_23_1;
  aBlock[4] = a1;
  aBlock[5] = v7;
  v22 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*a2)
    v15 = (void (**)(void *, _QWORD, std::string *))_Block_copy(v15);
  v23 = v15;
  v16 = _Block_copy(aBlock);
  v17 = *(NSObject **)(a1 + 136);
  if (v17)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  v24.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  if (!v16)
  {
    v18 = 0;
    v19 = 0;
    v20 = v17;
    if (!v17)
      goto LABEL_22;
    goto LABEL_21;
  }
  v18 = _Block_copy(v16);
  v19 = v18;
  v20 = v17;
  if (v17)
LABEL_21:
    dispatch_retain(v17);
LABEL_22:
  BootModuleICE::shutdownAndFlush_sync((capabilities::abs *)a1, (uint64_t)&v19);
  if (v17)
    dispatch_release(v17);
  if (v18)
    _Block_release(v18);
  if (v17)
    dispatch_release(v17);
  if (v16)
    _Block_release(v16);
  if (v23)
    _Block_release(v23);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6068E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *aBlock)
{
  std::__shared_weak_count *v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v20 - 72);
  if (aBlock)
    _Block_release(aBlock);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void sub_1BF606924(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 49) < 0)
  {
    operator delete(*(void **)(v2 - 72));
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  int v21;
  void *aBlock;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v3 = a1[4];
  v23 = 0;
  v24 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    v24 = v6;
    if (!v6)
      return;
    v7 = a1[5];
    v23 = v7;
    if (v7)
    {
      v8 = v6;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, 8);
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_22_1;
      v18[4] = v3;
      v18[5] = v7;
      v19 = v8;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v21 = a2;
      v11 = (void *)a1[7];
      if (v11)
        v11 = _Block_copy(v11);
      v20 = v11;
      aBlock = _Block_copy(v18);
      BootModule::checkFSSyncStatus_sync(v3, &aBlock);
      if (aBlock)
        _Block_release(aBlock);
      if (v20)
        _Block_release(v20);
      v12 = v19;
      if (v19)
      {
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF606AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *aBlock)
{
  uint64_t v18;
  uint64_t v19;

  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    _Block_release(a16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF606B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1, char a2, char a3)
{
  _QWORD *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  void *v20;
  dispatch_time_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  void *aBlock;
  void *v29;
  char *v30;
  __int128 v31;
  std::string buf;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 32);
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || *(_DWORD *)(a1 + 64))
  {
    v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Baseband shutdown did not complete rfs sync");
    v6 = v4[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_DWORD *)(a1 + 64);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v25;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: result=%x", (uint8_t *)&buf, 0x12u);
      v7 = v4[59];
      if (v7)
      {
LABEL_6:
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
        v9 = v4[11];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = "failed";
          if (v8)
            v10 = "successful";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (forced) %s", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    else
    {
      v7 = v4[59];
      if (v7)
        goto LABEL_6;
    }
    v11 = *(_QWORD *)(a1 + 56);
    std::string::__init_copy_ctor_external(&buf, v5, 0x2BuLL);
    (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    operator delete(v5);
    return;
  }
  v12 = v4[11];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Poweroff: RFS sync request completed; wait for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  v13 = v4[22];
  v14 = (char *)operator new(0x28uLL);
  v30 = v14;
  v31 = xmmword_1BF73A760;
  strcpy(v14, "Poweroff: Wait for reset detection");
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 1174405120;
  v26[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_15;
  v26[3] = &__block_descriptor_tmp_20_2;
  v16 = *(_QWORD *)(a1 + 40);
  v15 = *(std::__shared_weak_count **)(a1 + 48);
  v26[4] = v4;
  v26[5] = v16;
  v27 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *(void **)(a1 + 56);
  if (v19)
    v19 = _Block_copy(v19);
  aBlock = v19;
  v20 = _Block_copy(v26);
  v29 = v20;
  v21 = dispatch_time(0, 3000000000);
  ResetDetection::add(v13, (uint64_t)&v30, 1, &v29, v21);
  if (v20)
    _Block_release(v20);
  operator delete(v14);
  if (aBlock)
    _Block_release(aBlock);
  v22 = v27;
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BF606E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF606EE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF606EFC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 57) < 0)
  {
    operator delete(*(void **)(v2 - 80));
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_15(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  std::string __p;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    v6 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
    }
    v7 = *(_QWORD *)(a1 + 56);
    std::string::__init_copy_ctor_external(&__p, v5, 0x2DuLL);
    (*(void (**)(uint64_t, uint64_t, std::string *))(v7 + 16))(v7, 3760250883, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    operator delete(v5);
  }
  else
  {
    v8 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Poweroff: Baseband asserted reset detection line", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>((uint64_t *)(a1 + 56), (unsigned int *)&__p, "");
  }
  v9 = *(_QWORD *)(v4 + 472);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    v11 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = "forced";
      if (!a2)
        v12 = "graceful";
      v13 = "successful";
      if (!v10)
        v13 = "failed";
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (%s) %s", (uint8_t *)&__p, 0x16u);
    }
  }
}

void sub_1BF607148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    operator delete(v14);
    _Unwind_Resume(a1);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(uint64_t *a1, unsigned int *a2, char *__s)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[2];
  unint64_t v12;

  v4 = *a1;
  v5 = *a2;
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(v4 + 16))(v4, v5, __dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_1BF607278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN13BootModuleICE21shutdownAndFlush_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  NSObject *v17;
  uint64_t v18;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  std::string *p_p;
  std::string __p;
  void *v28;
  NSObject *v29;
  _QWORD v30[2];
  std::string block;
  void *v32;
  void *aBlock;
  CFTypeRef cf;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  if (a2)
  {
    memset(&__p, 0, sizeof(__p));
    if (a2 == -534716413)
    {
      block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1BF73EFE0;
      strcpy(block.__r_.__value_.__l.__data_, "Timeout shutting down baseband: ");
      v7 = *(char *)(a3 + 23);
      if (v7 >= 0)
        v8 = (const std::string::value_type *)a3;
      else
        v8 = *(const std::string::value_type **)a3;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1BF73EFD0;
      strcpy(block.__r_.__value_.__l.__data_, "Error shutting down baseband: ");
      v13 = *(char *)(a3 + 23);
      if (v13 >= 0)
        v8 = (const std::string::value_type *)a3;
      else
        v8 = *(const std::string::value_type **)a3;
      if (v13 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
    }
    v14 = std::string::append(&block, v8, v9);
    v15 = v14->__r_.__value_.__r.__words[0];
    v30[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v15;
    __p.__r_.__value_.__l.__size_ = v30[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v30 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v16;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    v17 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    v30[0] = 0;
    v18 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = Mutable;
    if (Mutable)
      v30[0] = Mutable;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&block, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      block = __p;
    ctu::cf::insert<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E0CFB0D0], (uint64_t)&block, v18, v20);
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(block.__r_.__value_.__l.__data_);
      if (!v21)
        goto LABEL_37;
    }
    else if (!v21)
    {
LABEL_37:
      v22 = (const void *)a1[5];
      if (v22)
        v23 = _Block_copy(v22);
      else
        v23 = 0;
      v24 = a1[6];
      block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
      block.__r_.__value_.__l.__size_ = 1174405120;
      block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IS4_EEEEEvDpT__block_invoke;
      v32 = &__block_descriptor_tmp_34_0;
      if (v23)
      {
        v25 = _Block_copy(v23);
        v35 = a2;
        aBlock = v25;
        cf = v21;
        if (!v21)
          goto LABEL_45;
      }
      else
      {
        v35 = a2;
        aBlock = 0;
        cf = v21;
        if (!v21)
        {
LABEL_45:
          dispatch_async(v24, &block);
          if (cf)
            CFRelease(cf);
          if (aBlock)
            _Block_release(aBlock);
          if (v23)
            _Block_release(v23);
          if (v21)
          {
            CFRelease(v21);
            CFRelease(v21);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
      }
      CFRetain(v21);
      goto LABEL_45;
    }
    CFRetain(v21);
    goto LABEL_37;
  }
  v10 = (const void *)a1[5];
  if (!v10)
  {
    v11 = 0;
    v12 = a1[6];
    v28 = 0;
    v29 = v12;
    if (!v12)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = _Block_copy(v10);
  v12 = a1[6];
  v28 = v11;
  v29 = v12;
  if (v12)
LABEL_11:
    dispatch_retain(v12);
LABEL_12:
  BootModuleICE::requestFSSync_sync(v4, (uint64_t)&v28);
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
}

void sub_1BF607798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void BootModuleICE::issueShutdownComand_sync(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CommandDriverFactory *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[5];
  std::__shared_weak_count *v36;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint8_t buf[16];

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v43 = 0xAAAAAAAAAAAAAAAALL;
  v44 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v12 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v11);
    v13 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v13;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 = off_1ED70F4D0;
  }
  v17 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v39 = v12;
  v40 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v18 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(&v41, v12);
  v43 = 0;
  v44 = 0;
  if (v42)
  {
    v44 = std::__shared_weak_count::lock(v42);
    if (v44)
      v43 = v41;
    if (v42)
      std::__shared_weak_count::__release_weak(v42);
  }
  if (!v17)
    goto LABEL_28;
  v20 = (unint64_t *)&v17->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v22 = v43;
    if (v43)
    {
LABEL_29:
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 1174405120;
      v35[2] = ___ZN13BootModuleICE24issueShutdownComand_syncENSt3__110shared_ptrIN4util18GuaranteedCallbackEEE_block_invoke;
      v35[3] = &__block_descriptor_tmp_28_0;
      v23 = (std::__shared_weak_count *)a2[1];
      v35[4] = *a2;
      v36 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = _Block_copy(v35);
      v27 = a1[17];
      if (v27)
        dispatch_retain(v27);
      aBlock = v26;
      object = v27;
      (*(void (**)(unint64_t, _QWORD, void **))(*(_QWORD *)v22 + 64))(v22, 0, &aBlock);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      v28 = v36;
      if (v36)
      {
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          v31 = v44;
          if (!v44)
            goto LABEL_51;
          goto LABEL_47;
        }
      }
LABEL_46:
      v31 = v44;
      if (!v44)
        goto LABEL_51;
      goto LABEL_47;
    }
  }
  else
  {
LABEL_28:
    v22 = v43;
    if (v43)
      goto LABEL_29;
  }
  v32 = a1[11];
  if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    goto LABEL_46;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Driver unavailable for baseband shutdown", buf, 2u);
  v31 = v44;
  if (!v44)
    goto LABEL_51;
LABEL_47:
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF607C30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE24issueShutdownComand_syncENSt3__110shared_ptrIN4util18GuaranteedCallbackEEE_block_invoke(uint64_t a1, ctu::cf **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  char v13;
  std::string __dst;
  _QWORD block[5];
  std::string __p;
  int v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (*a2)
    v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v3 = 0;
  ctu::cf::show(*a2, a2);
  if (v13 >= 0)
    v4 = (const char *)&v12;
  else
    v4 = (const char *)v12;
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_14;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_14:
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  if (v3)
    v10 = -534716414;
  else
    v10 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_4;
  block[4] = v2;
  v17 = v10;
  v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  if (*(_QWORD *)(v2 + 48) == -1)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else
  {
    dispatch_once((dispatch_once_t *)(v2 + 48), block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((v11 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v13 & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v12);
    return;
  }
LABEL_28:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v13 < 0)
    goto LABEL_29;
}

void sub_1BF607E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c53_ZTSNSt3__110shared_ptrIN4util18GuaranteedCallbackEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSNSt3__110shared_ptrIN4util18GuaranteedCallbackEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF60812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF608148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BootModuleICE>::shared_ptr[abi:ne180100]<BootModuleICE,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7916D30;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF608264(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1}::operator() const(BootModuleICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF608284(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1}::operator() const(BootModuleICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110sh"
                                "ared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1}::operator() const(BootModuleICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7916D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7916D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BootControllerLegacy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZN13BootModuleICE18requestFSSync_syncENS_8callbackIU13block_pointerFviNS1_2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISH_NSM_14default_deleteISH_EEEEENUlPvE_8__invokeESR_(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  const object *v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  xpc_object_t object;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v19;
  int v20;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 16);
  v4 = *(void **)(*a1 + 24);
  v14 = v2;
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v5);
  v6 = *(const void **)(v2 + 32);
  if (v6)
    v7 = _Block_copy(v6);
  else
    v7 = 0;
  v8 = *(NSObject **)(v2 + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IKvEEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_33_2;
  if (!v7)
  {
    v20 = v3;
    v10 = cf;
    aBlock = 0;
    v19 = cf;
    if (!cf)
      goto LABEL_12;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v20 = v3;
  v10 = cf;
  aBlock = v9;
  v19 = cf;
  if (cf)
LABEL_11:
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, block);
  if (v19)
    CFRelease(v19);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  _ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(&v14);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF60851C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  xpc_release(object);
  _ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(&a9);
  v12 = (std::__shared_weak_count *)v10[2];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(NSObject **)(v2 + 40);
    if (v3)
      dispatch_release(v3);
    v4 = *(const void **)(v2 + 32);
    if (v4)
      _Block_release(v4);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IKvEEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  CFTypeID v4;
  CFTypeRef cf;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(a1 + 40);
  if (v3 && (v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
  {
    cf = v3;
    CFRetain(v3);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v2 + 16))(v2, v1, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1BF6086A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IS4_EEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  CFTypeID v4;
  CFTypeRef cf;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(a1 + 40);
  if (v3 && (v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
  {
    cf = v3;
    CFRetain(v3);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v2 + 16))(v2, v1, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1BF6087E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

uint64_t __cxx_global_var_init_29()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_30()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t abm::ParseWakeDataIP(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t value;
  int v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  std::string *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  size_t v30;
  std::string *v31;
  xpc::dict *v32;
  std::string *v33;
  unsigned __int8 *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  int v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  int v47;
  size_t size;
  std::string *v49;
  xpc::dict *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  void *v55[3];
  xpc_object_t xdict;
  std::string v57;
  xpc_object_t object[2];
  _BYTE v59[31];
  std::string __p[2];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1C3B8CD78](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8] || MEMORY[0x1C3B8CD78](*a2) != v5)
    return 0;
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4C0]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A0]);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  if (v11)
  {
    xdict = v11;
  }
  else
  {
    v12 = xpc_null_create();
    xdict = v12;
    if (!v12)
    {
      v13 = xpc_null_create();
      v12 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C3B8CD78](v12) == v5)
  {
    xpc_retain(v12);
    goto LABEL_16;
  }
  v13 = xpc_null_create();
LABEL_15:
  xdict = v13;
LABEL_16:
  xpc_release(v12);
  memset(v55, 170, sizeof(v55));
  value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB408]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (v55[1] == v55[0])
  {
    v35 = xpc_BOOL_create(1);
    if (!v35)
      v35 = xpc_null_create();
  }
  else
  {
    v15 = *(unsigned __int8 *)v55[0] >> 4;
    if (v15 == 6)
    {
      v37 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB88]);
      if (!v37)
        v37 = xpc_null_create();
      v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9F8], v37);
      v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x28)
      {
        memset(__p, 0, 47);
        *(_OWORD *)object = 0u;
        memset(v59, 0, sizeof(v59));
        inet_ntop(30, (char *)v55[0] + 8, (char *)__p, 0x2Eu);
        inet_ntop(30, (char *)v55[0] + 24, (char *)object, 0x2Eu);
        v39 = xpc_string_create((const char *)__p);
        if (!v39)
          v39 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBE60], v39);
        v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        v41 = xpc_string_create((const char *)object);
        if (!v41)
          v41 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC048], v41);
        v42 = xpc_null_create();
        xpc_release(v41);
        xpc_release(v42);
        v43 = *((unsigned __int8 *)v55[0] + 6);
        memset(&v57, 170, sizeof(v57));
        abm::_ProtocolAsString(&v57, v43);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v57;
        else
          v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
        v45 = xpc_string_create((const char *)v44);
        if (!v45)
          v45 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBB18], v45);
        v46 = xpc_null_create();
        xpc_release(v45);
        xpc_release(v46);
        v47 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          size = v57.__r_.__value_.__l.__size_;
        if (size == strlen((const char *)*MEMORY[0x1E0CFBB70])
          && ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v49 = &v57)
            : (v49 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v49, (const void *)*MEMORY[0x1E0CFBB70], size))
          || size == strlen((const char *)*MEMORY[0x1E0CFBB78])
          && (v47 >= 0 ? (v51 = &v57) : (v51 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v51, (const void *)*MEMORY[0x1E0CFBB78], size)))
        {
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x2C)
          {
            abm::_ParsePortData((abm *)v55[0], (unsigned __int8 *)0x28, &xdict, v50);
            LOBYTE(v47) = *((_BYTE *)&v57.__r_.__value_.__s + 23);
          }
        }
        if ((v47 & 0x80) != 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      v52 = xpc_BOOL_create(1);
      if (!v52)
        v52 = xpc_null_create();
LABEL_91:
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CFBF78], v52);
      v53 = xpc_null_create();
      xpc_release(v52);
      xpc_release(v53);
      goto LABEL_92;
    }
    if (v15 == 4)
    {
      v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB80]);
      if (!v16)
        v16 = xpc_null_create();
      v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9F8], v16);
      v18 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v18);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x14)
      {
        memset(__p, 170, 24);
        abm::_ProtocolAsString(__p, *((unsigned __int8 *)v55[0] + 9));
        v20 = *((_DWORD *)v55[0] + 3);
        v19 = *((_DWORD *)v55[0] + 4);
        v21 = *(_BYTE *)v55[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = __p;
        else
          v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v23 = xpc_string_create((const char *)v22);
        if (!v23)
          v23 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBB18], v23);
        v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
        v25 = xpc_int64_create(bswap32(v20));
        if (!v25)
          v25 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBE60], v25);
        v26 = xpc_null_create();
        xpc_release(v25);
        xpc_release(v26);
        v27 = xpc_int64_create(bswap32(v19));
        if (!v27)
          v27 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC048], v27);
        v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
        v29 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        else
          v30 = __p[0].__r_.__value_.__l.__size_;
        if (v30 == strlen((const char *)*MEMORY[0x1E0CFBB70])
          && ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v31 = __p)
            : (v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v31, (const void *)*MEMORY[0x1E0CFBB70], v30))
          || v30 == strlen((const char *)*MEMORY[0x1E0CFBB78])
          && (v29 >= 0 ? (v33 = __p) : (v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v33, (const void *)*MEMORY[0x1E0CFBB78], v30)))
        {
          v34 = (unsigned __int8 *)(4 * (v21 & 0xF));
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= v34 + 4)
          {
            abm::_ParsePortData((abm *)v55[0], v34, &xdict, v32);
            LOBYTE(v29) = *((_BYTE *)&__p[0].__r_.__value_.__s + 23);
          }
        }
        if ((v29 & 0x80) != 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      v52 = xpc_BOOL_create(1);
      if (!v52)
        v52 = xpc_null_create();
      goto LABEL_91;
    }
    v35 = xpc_BOOL_create(1);
    if (!v35)
      v35 = xpc_null_create();
  }
  v17 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBF78], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
LABEL_92:
  if (v17)
    xpc_retain(v17);
  else
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFBB10], v17);
  v54 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v54);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  xpc_release(xdict);
  return 1;
}

void sub_1BF60917C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

std::string *abm::_ProtocolAsString(std::string *this, int a2)
{
  const std::string::value_type **v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  __int128 *v12;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 > 16)
  {
    if (a2 == 17)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBB78];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 58)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBF20];
      return std::string::__assign_external(this, *v3);
    }
  }
  else
  {
    if (a2 == 1)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBC18];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 6)
    {
      v3 = (const std::string::value_type **)MEMORY[0x1E0CFBB70];
      return std::string::__assign_external(this, *v3);
    }
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  v31 = v4;
  v30 = v4;
  v29 = v4;
  *(_OWORD *)__p = v4;
  v26 = v4;
  v23 = v4;
  v24 = v4;
  v21 = v4;
  v22 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v20 + *(_QWORD *)(v20 - 24));
  std::ios_base::init(v9, &v21);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v20 = v5 + 24;
  v28 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v21 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  LODWORD(v27) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Protocol #", 10);
  std::ostream::operator<<();
  if ((v27 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) < (unint64_t)v24)
    {
      *((_QWORD *)&v26 + 1) = v24;
      v14 = v24;
    }
    v15 = (const void *)*((_QWORD *)&v23 + 1);
    v11 = v14 - *((_QWORD *)&v23 + 1);
    if ((unint64_t)(v14 - *((_QWORD *)&v23 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v19) = 0;
      v12 = &v18;
      goto LABEL_24;
    }
    v15 = (const void *)v22;
    v11 = v23 - v22;
    if ((_QWORD)v23 - (_QWORD)v22 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v18 + 1) = v11;
    v19 = v17 | 0x8000000000000000;
    *(_QWORD *)&v18 = v12;
  }
  else
  {
    HIBYTE(v19) = v11;
    v12 = &v18;
    if (!v11)
      goto LABEL_24;
  }
  memmove(v12, v15, v11);
LABEL_24:
  *((_BYTE *)v12 + v11) = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = v18;
  this->__r_.__value_.__r.__words[2] = v19;
  v20 = *v7;
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = v7[3];
  *(_QWORD *)&v21 = v10 + 16;
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C3B8C364](&v28);
}

void sub_1BF60963C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void abm::_ParsePortData(abm *this, unsigned __int8 *a2, xpc_object_t *a3, xpc::dict *a4)
{
  unsigned __int16 *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v5 = (unsigned __int16 *)((char *)this + a2);
  v6 = xpc_int64_create(bswap32(*v5) >> 16);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFBCB0], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create(bswap32(v5[1]) >> 16);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFBF80], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
}

void HealthModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  dispatch_object_t object;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xC0uLL);
  v5 = (std::__shared_weak_count *)a1[1];
  v44 = *a1;
  v45 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = v48;
    v48 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*((_QWORD *)&v48 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    v9 = off_1ED70F4D0;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&object, v9);
  HealthModule::HealthModule((uint64_t)v4, &v44, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7917030;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v4 + 16);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v29 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_31:
  v29 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_47;
LABEL_32:
  v30 = (std::__shared_weak_count *)v29[16];
  if (!v30 || (v31 = v29[15], (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  *(_QWORD *)&v48 = v31;
  *((_QWORD *)&v48 + 1) = v32;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v29 + 7));
  v34 = v31 + 48;
  if (!v31)
    v34 = 0;
  v46 = v34;
  v47 = v33;
  v48 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v35 = v47;
  if (v47)
  {
    v36 = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_47:
  if (object)
    dispatch_release(object);
  if (v16)
  {
    v41 = (unint64_t *)&v16->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
}

void sub_1BF609AE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  __break(1u);
}

void sub_1BF609B40()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF609B84);
}

void sub_1BF609B50()
{
  JUMPOUT(0x1BF609B88);
}

void sub_1BF609B5C()
{
  JUMPOUT(0x1BF609B94);
}

void sub_1BF609B6C()
{
  JUMPOUT(0x1BF609BA0);
}

_BYTE *HealthModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void HealthModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_0>(HealthModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void HealthModule::shutdown(_QWORD *a1, char a2, NSObject **a3)
{
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[5];
  dispatch_group_t group;
  char v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v18[3] = &__block_descriptor_tmp_13;
  v6 = *a3;
  v18[4] = a1;
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v20 = a2;
  v7 = (std::__shared_weak_count *)a1[16];
  if (!v7 || (v8 = a1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  v11 = a1[17];
  block[0] = v5;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7917148;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  block[5] = v8;
  v22 = v10;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  block[4] = v18;
  dispatch_async(v11, block);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

const char *HealthModule::getName(HealthModule *this)
{
  return "health.mod";
}

void HealthModule::~HealthModule(HealthModule *this)
{
  NSObject *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint8_t v17[16];

  *(_QWORD *)this = off_1E7916E60;
  *((_QWORD *)this + 6) = &unk_1E7916ED0;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v17, 2u);
  }
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  *((_QWORD *)this + 6) = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v10 = *((_QWORD *)this + 18);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 17);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *(_QWORD *)this = off_1E79228B8;
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = (void *)*((_QWORD *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v13;
    operator delete(v15);
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
}

{
  void *v1;

  HealthModule::~HealthModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'HealthModule::~HealthModule(HealthModule *this)
{
  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));
}

{
  void *v1;

  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));
  operator delete(v1);
}

uint64_t HealthModule::HealthModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(HealthModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *initially_inactive;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[16];
  __int128 v42;
  uint64_t block;
  uint64_t v44;
  void (*v45)(uint64_t);
  void *v46;
  uint64_t *v47;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7916E60;
  *(_QWORD *)(a1 + 48) = &unk_1E7916ED0;
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(HealthModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E7916E60;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v41, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v15 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v44 = 0x40000000;
  v45 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v46 = &__block_descriptor_tmp_13_8;
  v47 = &GetABMLogServer(void)::sLogServer;
  v39 = (_QWORD *)(a1 + 48);
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = GetABMLogServer(void)::sLogServer;
    v16 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v17 = GetABMLogServer(void)::sLogServer;
    v16 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v21 = dispatch_queue_create_with_target_V2("health.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v21, QOS_CLASS_BACKGROUND, 0);
  dispatch_activate(v21);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v21;
  if (v21)
    dispatch_retain(v21);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v21)
    dispatch_release(v21);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E7916FF0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v42);
    *v39 = off_1E7917188;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v42);
    *v39 = off_1E7917188;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v41);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E7916E60;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 48) = &unk_1E7916ED0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = v15;
  v44 = 0x40000000;
  v45 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v46 = &__block_descriptor_tmp_13_8;
  v47 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v26 = unk_1ED70F6A0;
    v40 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v26 = unk_1ED70F6A0;
    v40 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_42;
  }
  v27 = (unint64_t *)(v26 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  ctu::DispatchTimerService::create();
  v29 = v42;
  v42 = 0uLL;
  v30 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v40)
  {
    v36 = (unint64_t *)&v40->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return a1;
}

void sub_1BF60A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Service *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  v7 = v6;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v9 = *((_QWORD *)v3 + 23);
  *((_QWORD *)v3 + 23) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v7);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1BF60A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Service *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v6)
    dispatch_release(v6);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

void HealthModule::getBasebandFWVersion_sync(_QWORD *a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  dispatch_object_t object;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD aBlock[6];
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  dispatch_object_t v47;
  __int128 v48;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_2;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v44 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
    v13 = _Block_copy(v13);
  v45 = v13;
  v14 = _Block_copy(aBlock);
  v15 = a1[17];
  if (v15)
    dispatch_retain(v15);
  v46 = v14;
  v47 = v15;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v42 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = v48;
    v48 = 0uLL;
    v19 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_1ED70F4D0;
  }
  v25 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v37 = v17;
  v38 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v39, v17);
  v41 = 0;
  v42 = 0;
  if (v40)
  {
    v42 = std::__shared_weak_count::lock(v40);
    if (v42)
      v41 = v39;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  if (!v25)
    goto LABEL_39;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v30 = v41;
    if (!v41)
      goto LABEL_48;
  }
  else
  {
LABEL_39:
    v30 = v41;
    if (!v41)
      goto LABEL_48;
  }
  v31 = v46;
  if (v46)
    v31 = _Block_copy(v46);
  v35 = v31;
  object = v47;
  if (v47)
    dispatch_retain(v47);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v30 + 112))(v30, &v35);
  if (object)
    dispatch_release(object);
  if (v35)
    _Block_release(v35);
LABEL_48:
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    _Block_release(v45);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF60AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::string::value_type *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t v14;
  std::string::size_type size;
  std::__shared_weak_count *v16;
  const __CFDictionary *v17;
  uint64_t (*v18)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v23 = v8;
  if (!v8)
    return;
  v9 = (std::string::value_type *)0xAAAAAAAAAAAAAA00;
  v10 = 0xAAAAAAAAAAAAAALL;
  if (a1[5])
  {
    v11 = *a2;
    v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v11)
      v12 = 0;
    if (v12)
    {
      v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v24.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = v11;
        _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v24, 0xCu);
      }
    }
    else
    {
      v17 = *a3;
      v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v18 = 0;
      if (v18)
      {
        v21[0] = 0xAAAAAAAAAAAAAAAALL;
        v21[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, v17);
        ctu::cf::map_adapter::getString();
        size = v24.__r_.__value_.__l.__size_;
        v9 = (std::string::value_type *)v24.__r_.__value_.__r.__words[0];
        v10 = v24.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
        v24.__r_.__value_.__s.__data_[0] = 0;
        MEMORY[0x1C3B8B8B4](v21);
        v14 = a1[7];
        if ((v10 & 0x8000000000000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v24, v9, size);
LABEL_11:
          (*(void (**)(uint64_t, std::string *))(v14 + 16))(v14, &v24);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v24.__r_.__value_.__l.__data_);
            v16 = v23;
            if (!v23)
              goto LABEL_24;
          }
          else
          {
            v16 = v23;
            if (!v23)
              goto LABEL_24;
          }
          goto LABEL_21;
        }
LABEL_10:
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v24.__r_.__value_.__l.__size_ = size;
        v24.__r_.__value_.__r.__words[2] = v10;
        goto LABEL_11;
      }
    }
    v14 = a1[7];
    size = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_10;
  }
  v16 = v8;
LABEL_21:
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
LABEL_24:
    if ((v10 & 0x8000000000000000) == 0)
      return;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v10 & 0x8000000000000000) != 0)
LABEL_25:
    operator delete(v9);
}

void sub_1BF60AD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1BF60AD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF60AD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v23 < 0)
    operator delete(v22);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t HealthModule::getFailureCountInHealthEventDB_sync(NSObject **this)
{
  HealthEventDB *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  NSObject *v23;
  _QWORD v25[3];
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((_QWORD)xmmword_1EF57D8E0)
    goto LABEL_2;
  v2 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v2);
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E7917080;
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
  *(_QWORD *)&xmmword_1EF57D8E0 = v2;
  *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_2:
    v3 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
    v2 = (HealthEventDB *)xmmword_1EF57D8E0;
    if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  memset(v25, 170, sizeof(v25));
  HealthModule::findMostRecentBarrierHealthEvent_sync((HealthModule *)this, v25);
  if (((LOBYTE(v25[1]) - 3) & 0xFD) != 0)
    v11 = 0;
  else
    v11 = v25[2];
  if (!*((_QWORD *)v2 + 14) || (v12 = *((_QWORD *)v2 + 12)) == 0)
  {
    v13 = 0;
    v20 = 0;
    v23 = this[11];
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      return v20 + v13;
    goto LABEL_48;
  }
  v13 = 0;
  v15 = *((_QWORD *)v2 + 10);
  v14 = *((_QWORD *)v2 + 11);
  v16 = *((_QWORD *)v2 + 12);
  v17 = *((_QWORD *)v2 + 13);
  do
  {
    if (*(_QWORD *)(v16 + 16) >= v11 && *(_BYTE *)(v16 + 8) == 1)
      ++v13;
    v16 += 24;
    if (v16 == v14)
      v16 = *((_QWORD *)v2 + 10);
  }
  while (v16 != v17 && v16 != 0);
  v20 = 0;
  do
  {
    if (*(_QWORD *)(v12 + 16) >= v11 && *(_BYTE *)(v12 + 8) == 4)
      ++v20;
    v12 += 24;
    if (v12 == v14)
      v12 = v15;
  }
  while (v12 != v17 && v12 != 0);
  v23 = this[11];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
LABEL_48:
    *(_DWORD *)buf = 134218240;
    v27 = v13;
    v28 = 2048;
    v29 = v20;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I boot failure count: %ld, ping failure count: %ld", buf, 0x16u);
  }
  return v20 + v13;
}

void sub_1BF60B0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthModule::findMostRecentBarrierHealthEvent_sync(HealthModule *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  HealthEventDB *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  BOOL v31;
  char *v32;
  BOOL v33;
  char *v34;
  NSObject *v35;
  std::logic_error *v36;
  unint64_t v37;
  BOOL v38;
  void *__p[2];
  __int128 v40;
  unint64_t v41;
  std::logic_error v42;
  char v43;
  void *v44[2];
  uint64_t v45;
  uint8_t buf[24];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  Timestamp::Timestamp((Timestamp *)&v42);
  Timestamp::asString((uint64_t)&v42, 0, 9, v44);
  *a2 = &unk_1E7917288;
  *((_BYTE *)a2 + 8) = 0;
  if (SHIBYTE(v45) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v44[0], (std::string::size_type)v44[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v44;
    *(_QWORD *)&v40 = v45;
  }
  a2[2] = Timestamp::convert((uint64_t)__p);
  if (SBYTE7(v40) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v44[0]);
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v42, (_QWORD *)v42.__imp_.__imp_);
  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v4;
  v40 = v4;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((_QWORD)xmmword_1EF57D8E0)
    goto LABEL_7;
  v6 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v6);
  v5 = operator new(0x20uLL);
  *v5 = off_1E7917080;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
  *(_QWORD *)&xmmword_1EF57D8E0 = v6;
  *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_7:
    v5 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
    v6 = (HealthEventDB *)xmmword_1EF57D8E0;
    *(_OWORD *)buf = xmmword_1EF57D8E0;
    if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
      goto LABEL_19;
    goto LABEL_17;
  }
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v5;
LABEL_17:
  v10 = v5 + 1;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
LABEL_19:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  v12 = *((_QWORD *)v6 + 14);
  v41 = v12;
  v14 = *((_QWORD *)v6 + 10);
  v13 = *((_QWORD *)v6 + 11);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
  if (v15 >= 0xAAAAAAAAAAAAAABLL)
  {
    std::logic_error::logic_error(&v42, "circular_buffer");
    v42.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
    boost::throw_exception<std::length_error>(&v42);
  }
  if (v13 == v14)
  {
    v16 = 0;
    v18 = (char *)(8 * ((v13 - v14) >> 3));
    __p[0] = 0;
    __p[1] = (void *)(24 * v15);
    *(_QWORD *)&v40 = 0;
    v19 = 0;
    if (!v12)
      goto LABEL_33;
  }
  else
  {
    v16 = (char *)operator new(v13 - v14);
    v17 = *((_QWORD *)v6 + 14);
    v18 = &v16[24 * v15];
    __p[0] = v16;
    __p[1] = v18;
    *(_QWORD *)&v40 = v16;
    v19 = v16;
    if (!v17)
      goto LABEL_33;
  }
  v20 = *((_QWORD *)v6 + 12);
  v19 = v16;
  if (v20)
  {
    v22 = *((_QWORD *)v6 + 10);
    v21 = *((_QWORD *)v6 + 11);
    v19 = v16;
    v23 = *((_QWORD *)v6 + 13);
    do
    {
      *(_QWORD *)v19 = &unk_1E7917288;
      *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
      v20 += 24;
      if (v20 == v21)
        v20 = v22;
      v19 += 24;
    }
    while (v20 != v23 && v20 != 0);
  }
LABEL_33:
  if (v19 == v18)
    v25 = v16;
  else
    v25 = v19;
  *((_QWORD *)&v40 + 1) = v25;
  v26 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_40;
  v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = v41;
    v30 = (char *)v40;
    if (v41)
      v38 = (_QWORD)v40 == 0;
    else
      v38 = 1;
    if (v38)
      goto LABEL_63;
  }
  else
  {
LABEL_40:
    v29 = v41;
    v30 = (char *)v40;
    if (v41)
      v31 = (_QWORD)v40 == 0;
    else
      v31 = 1;
    if (v31)
      goto LABEL_63;
  }
  if (v30 + 24 == __p[1])
    v32 = (char *)__p[0];
  else
    v32 = v30 + 24;
  v33 = v32 == *((char **)&v40 + 1) || v32 == 0;
  v34 = v30;
  if (!v33)
  {
    v34 = v30;
    do
    {
      if (((v34[8] - 3) & 0xFD) != 0)
      {
        if (((v32[8] - 3) & 0xFD) == 0)
          goto LABEL_57;
      }
      else if (((v32[8] - 3) & 0xFD) != 0)
      {
        goto LABEL_58;
      }
      if (*((_QWORD *)v34 + 2) < *((_QWORD *)v32 + 2))
LABEL_57:
        v34 = v32;
LABEL_58:
      v32 += 24;
      if (v32 == __p[1])
        v32 = (char *)__p[0];
    }
    while (v32 != *((char **)&v40 + 1) && v32);
  }
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(v34 + 8);
LABEL_63:
  v35 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    HealthEvent::asString((HealthEvent *)a2, &v42);
    v36 = v43 >= 0 ? &v42 : (std::logic_error *)v42.__vftable;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v36;
    _os_log_impl(&dword_1BF566000, v35, OS_LOG_TYPE_DEFAULT, "#I Found preliminary barrier event: %s", buf, 0xCu);
    if (v43 < 0)
      operator delete(v42.__vftable);
  }
  if (v29)
  {
    v37 = 0;
    do
    {
      (**(void (***)(char *))v30)(v30);
      v30 = (char *)(v40 + 24);
      *(_QWORD *)&v40 = v30;
      if (v30 == __p[1])
      {
        v30 = (char *)__p[0];
        *(void **)&v40 = __p[0];
      }
      ++v37;
    }
    while (v37 < v41);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1BF60B5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL HealthModule::hasBarrierEventType(uint64_t a1)
{
  return ((*(unsigned __int8 *)(a1 + 8) - 3) & 0xFD) == 0;
}

uint64_t boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(uint64_t a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = *(void (****)(_QWORD))(a1 + 16);
    do
    {
      (**v3)(v3);
      v4 = *(void (****)(_QWORD))(a1 + 8);
      v3 = (void (***)(_QWORD))(*(_QWORD *)(a1 + 16) + 24);
      *(_QWORD *)(a1 + 16) = v3;
      if (v3 == v4)
      {
        v3 = *(void (****)(_QWORD))a1;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
      }
      ++v2;
    }
    while (v2 < *(_QWORD *)(a1 + 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(NSObject **this)
{
  uint64_t FailureCountInHealthEventDB_sync;
  int v3;
  NSObject *v4;
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  HealthEventDB *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  xpc_object_t v29;
  _BYTE buf[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  FailureCountInHealthEventDB_sync = HealthModule::getFailureCountInHealthEventDB_sync(this);
  if (FailureCountInHealthEventDB_sync >= 10)
  {
    v3 = capabilities::abs::supportsEFSEraseOnBootLoop((capabilities::abs *)FailureCountInHealthEventDB_sync);
    v4 = this[11];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = ", but EFS erase is not supported";
      if (v3)
        v5 = "; requesting EFS erase";
      *(_QWORD *)buf = 0xA04000202;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v5;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Total health failure count reached EFS erase threshold (%d)%s", buf, 0x12u);
    }
    if (v3)
    {
      v6 = xpc_dictionary_create(0, 0, 0);
      if (v6 || (v6 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v6);
          v7 = v6;
        }
        else
        {
          v7 = xpc_null_create();
        }
      }
      else
      {
        v7 = xpc_null_create();
        v6 = 0;
      }
      xpc_release(v6);
      v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFB390]);
      if (!v8)
        v8 = xpc_null_create();
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFB8C8], v8);
      v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      v10 = (const void *)*MEMORY[0x1E0CFB5C8];
      v11 = strlen((const char *)*MEMORY[0x1E0CFB5C8]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&buf[8] = v12;
        *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
        *(_QWORD *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        v13 = buf;
        if (!v11)
        {
          buf[0] = 0;
          v29 = v7;
          if (v7)
          {
LABEL_19:
            xpc_retain(v7);
            goto LABEL_25;
          }
LABEL_24:
          v29 = xpc_null_create();
LABEL_25:
          abm::client::Command::create();
          xpc_release(v29);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          do
            v16 = __ldxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
          while (__stxr(v16 + 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
          AppleBasebandManager::perform();
          do
            v17 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
          while (__stlxr(v17 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
          if (!v17)
          {
            (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
          }
          pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          if (!(_QWORD)xmmword_1EF57D8E0)
          {
            v19 = (HealthEventDB *)operator new(0x78uLL);
            HealthEventDB::HealthEventDB(v19);
            v18 = operator new(0x20uLL);
            *v18 = off_1E7917080;
            v18[1] = 0;
            v18[2] = 0;
            v18[3] = v19;
            v20 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
            *(_QWORD *)&xmmword_1EF57D8E0 = v19;
            *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v18;
            if (!v20)
            {
              *(_QWORD *)buf = v19;
              *(_QWORD *)&buf[8] = v18;
              goto LABEL_41;
            }
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v18 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
          v19 = (HealthEventDB *)xmmword_1EF57D8E0;
          *(_OWORD *)buf = xmmword_1EF57D8E0;
          if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
          {
LABEL_43:
            pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
            HealthEventDB::addHealthEvent(v19, 5);
            v25 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            do
              v28 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
            while (__stlxr(v28 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
            if (!v28)
            {
              (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
            }
            xpc_release(v7);
            return;
          }
LABEL_41:
          v23 = v18 + 1;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          goto LABEL_43;
        }
      }
      memmove(v13, v10, v12);
      v13[v12] = 0;
      v29 = v7;
      if (v7)
        goto LABEL_19;
      goto LABEL_24;
    }
  }
}

void sub_1BF60BBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

void HealthModule::sendUserNotificationForCellularDiagnostics(HealthModule *this)
{
  std::string v1;
  std::string v2;
  std::string __p;
  void *v4[2];
  _BYTE v5[64];

  if ((config::hw::watch(this) & 1) != 0)
    return;
  *(_OWORD *)v4 = 0u;
  memset(v5, 0, 56);
  std::string::__assign_external((std::string *)&v5[8], "Cellular_Issue_Detected", 0x17uLL);
  v5[7] = 13;
  strcpy((char *)v4, "CellularIssue");
  if ((v5[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v1, (const std::string::value_type *)v4[0], (std::string::size_type)v4[1]);
  }
  else
  {
    *(_OWORD *)&v1.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v1.__r_.__value_.__r.__words[2] = *(_QWORD *)v5;
  }
  if ((v5[31] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)&v5[8], *(std::string::size_type *)&v5[16]);
  else
    v2 = *(std::string *)&v5[8];
  if ((v5[55] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v5[32], *(std::string::size_type *)&v5[40]);
  else
    __p = *(std::string *)&v5[32];
  support::ui::showNotification(2u, (uint64_t)&v1, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v2.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v5[55] & 0x80000000) == 0)
      goto LABEL_15;
LABEL_21:
    operator delete(*(void **)&v5[32]);
    if ((v5[31] & 0x80000000) == 0)
    {
LABEL_16:
      if ((v5[7] & 0x80000000) == 0)
        return;
LABEL_23:
      operator delete(v4[0]);
      return;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v1.__r_.__value_.__l.__data_);
  if ((v5[55] & 0x80000000) != 0)
    goto LABEL_21;
LABEL_15:
  if ((v5[31] & 0x80000000) == 0)
    goto LABEL_16;
LABEL_22:
  operator delete(*(void **)&v5[8]);
  if ((v5[7] & 0x80000000) != 0)
    goto LABEL_23;
}

void sub_1BF60BE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a25);
  _Unwind_Resume(a1);
}

void sub_1BF60BEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a19);
  _Unwind_Resume(a1);
}

void sub_1BF60BF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *HealthEventDB::create_default_global(HealthEventDB *this)
{
  HealthEventDB *v2;
  _QWORD *result;

  v2 = (HealthEventDB *)operator new(0x78uLL);
  HealthEventDB::HealthEventDB(v2);
  *(_QWORD *)this = v2;
  result = operator new(0x20uLL);
  *result = off_1E7917080;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((_QWORD *)this + 1) = result;
  return result;
}

void sub_1BF60C27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF60C298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<HealthEventDB>::operator=[abi:ne180100](uint64_t a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
  xmmword_1EF57D8E0 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73F413)
    return a1 + 24;
  if (((v3 & 0x80000001BF73F413 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73F413))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73F413 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_0>(HealthModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  const void *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  void *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  void (*v37)(_QWORD *, abm::client::Event **);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v45;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v48;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&v36, 2u);
  }
  v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_58:
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v48 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v48) = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, (size_t)v7);
LABEL_11:
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v11 = v36;
  v36 = 0uLL;
  v12 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_20;
  v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_20:
    v18 = cf;
    if (!cf)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v18 = cf;
  if (cf)
LABEL_21:
    CFRelease(v18);
LABEL_22:
  if (SHIBYTE(v48) < 0)
    operator delete(__dst[0]);
  v19 = (const void *)*MEMORY[0x1E0CFBD68];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = v21;
    v45 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_31;
  }
  HIBYTE(v45) = v20;
  v22 = __p;
  if (v20)
LABEL_31:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  *(_QWORD *)&v36 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v36 + 1) = 1174405120;
  v37 = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v38 = &__block_descriptor_tmp_22_2;
  v39 = v3;
  v40 = v2[2];
  v25 = (std::__shared_weak_count *)v2[3];
  v41 = v25;
  if (v25)
  {
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v28 = _Block_copy(&v36);
  v29 = *(NSObject **)(v3 + 136);
  if (v29)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  aBlock = v28;
  object = v29;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v3 + 152));
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  v30 = (std::__shared_weak_count *)v2[3];
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v31 = v2[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    v32 = v2[1];
    if (v32)
      dispatch_release(v32);
  }
  operator delete(v2);
  v33 = (std::__shared_weak_count *)a1[2];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(a1);
}

void sub_1BF60C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,CFTypeRef cf)
{
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v27;
  NSObject *v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v27 = (std::__shared_weak_count *)v25[3];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v25[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    v29 = v25[1];
    if (v29)
      dispatch_release(v29);
  }
  operator delete(v25);
  v30 = (std::__shared_weak_count *)v24[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;
  const char *v8;
  int v9;
  size_t v10;
  void **v11;
  void **v12;
  void **v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  const char *v30;
  char v31;
  size_t v32;
  _BYTE *v33;
  _QWORD *v34;
  HealthEventDB *v35;
  _QWORD *v36;
  HealthEventDB *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  HealthModule *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  _QWORD v57[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  dispatch_object_t object;
  void *__p;
  __int128 v62;
  __int128 v63;
  char v64;
  void *v65[3];
  _QWORD v66[2];
  unint64_t v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  _BYTE buf[24];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v69 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v29 = v6;
LABEL_109:
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    return;
  }
  v67 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v66[0] = 0xAAAAAAAAAAAAAAAALL;
    v66[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v66, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    memset(v65, 170, sizeof(v65));
    v8 = (const char *)*MEMORY[0x1E0CFB530];
    buf[23] = 0;
    buf[0] = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v63, v8);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&v63);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v9 = SHIBYTE(v65[2]);
    if (SHIBYTE(v65[2]) >= 0)
      v10 = HIBYTE(v65[2]);
    else
      v10 = (size_t)v65[1];
    if (v10 != strlen((const char *)*MEMORY[0x1E0CFBB68])
      || (SHIBYTE(v65[2]) >= 0 ? (v11 = v65) : (v11 = (void **)v65[0]),
          memcmp(v11, (const void *)*MEMORY[0x1E0CFBB68], v10)))
    {
      if (v10 != strlen((const char *)*MEMORY[0x1E0CFB588])
        || (v9 >= 0 ? (v12 = v65) : (v12 = (void **)v65[0]), memcmp(v12, (const void *)*MEMORY[0x1E0CFB588], v10)))
      {
        if (v10 == strlen((const char *)*MEMORY[0x1E0CFB980]))
        {
          v13 = v9 >= 0 ? v65 : (void **)v65[0];
          if (!memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v10))
          {
            if (*(_QWORD *)(v5 + 184))
            {
              v14 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband ping timer already running", buf, 2u);
                v14 = *(NSObject **)(v5 + 88);
              }
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Canceling baseband ping timer", buf, 2u);
              }
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 16))(*(_QWORD *)(v5 + 184));
              v15 = *(_QWORD *)(v5 + 184);
              *(_QWORD *)(v5 + 184) = 0;
              if (v15)
                (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
              pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              v16 = xmmword_1EF57D8E0;
              if (!(_QWORD)xmmword_1EF57D8E0)
              {
                HealthEventDB::create_default_global((HealthEventDB *)buf);
                std::shared_ptr<HealthEventDB>::operator=[abi:ne180100]((uint64_t)buf);
                std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                v16 = xmmword_1EF57D8E0;
              }
              *(_QWORD *)&v63 = v16;
              *((_QWORD *)&v63 + 1) = *((_QWORD *)&xmmword_1EF57D8E0 + 1);
              if (*((_QWORD *)&xmmword_1EF57D8E0 + 1))
              {
                v17 = (unint64_t *)(*((_QWORD *)&xmmword_1EF57D8E0 + 1) + 8);
                do
                  v18 = __ldxr(v17);
                while (__stxr(v18 + 1, v17));
              }
              pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              HealthEventDB::addHealthEvent((HealthEventDB *)v63, 4);
              std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v63);
            }
            v19 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)buf = 0xA04000100;
              _os_log_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEFAULT, "#I Starting %u sec timer before pinging baseband", buf, 8u);
            }
            v20 = *(_QWORD *)(v5 + 168);
            __p = operator new(0x28uLL);
            v62 = xmmword_1BF73EFE0;
            strcpy((char *)__p, "Baseband HealthModule Ping Timer");
            v21 = *(NSObject **)(v5 + 136);
            object = v21;
            if (v21)
              dispatch_retain(v21);
            v57[0] = MEMORY[0x1E0C809B0];
            v57[1] = 1174405120;
            v57[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_16;
            v57[3] = &__block_descriptor_tmp_20_3;
            v23 = a1[5];
            v22 = (std::__shared_weak_count *)a1[6];
            v57[4] = v5;
            v57[5] = v23;
            v58 = v22;
            if (v22)
            {
              p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
              do
                v25 = __ldxr(p_shared_weak_owners);
              while (__stxr(v25 + 1, p_shared_weak_owners));
            }
            aBlock = _Block_copy(v57);
            ctu::TimerService::createOneShotTimer(v20, (uint64_t)&__p, 0, 10000000, &object, &aBlock);
            v26 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            v27 = *(_QWORD *)(v5 + 184);
            *(_QWORD *)(v5 + 184) = v26;
            if (v27)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              v28 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
            if (aBlock)
              _Block_release(aBlock);
            if (object)
              dispatch_release(object);
            if (SHIBYTE(v62) < 0)
              operator delete(__p);
            if (v58)
              std::__shared_weak_count::__release_weak(v58);
          }
        }
LABEL_103:
        HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync((NSObject **)v5);
        if (SHIBYTE(v65[2]) < 0)
          operator delete(v65[0]);
        MEMORY[0x1C3B8B8B4](v66);
        v7 = (const void *)v67;
        goto LABEL_106;
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(_QWORD)xmmword_1EF57D8E0)
      {
        v37 = (HealthEventDB *)operator new(0x78uLL);
        HealthEventDB::HealthEventDB(v37);
        v36 = operator new(0x20uLL);
        *v36 = off_1E7917080;
        v36[1] = 0;
        v36[2] = 0;
        v36[3] = v37;
        v38 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
        *(_QWORD *)&xmmword_1EF57D8E0 = v37;
        *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v36;
        if (!v38)
        {
          *(_QWORD *)buf = v37;
          *(_QWORD *)&buf[8] = v36;
          goto LABEL_79;
        }
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v36 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
      v37 = (HealthEventDB *)xmmword_1EF57D8E0;
      *(_OWORD *)buf = xmmword_1EF57D8E0;
      if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
      {
LABEL_81:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        v43 = (HealthModule *)HealthEventDB::addHealthEvent(v37, 2);
        v44 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v45 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        HealthModule::sendUserNotificationForCellularDiagnostics(v43);
        goto LABEL_103;
      }
LABEL_79:
      v41 = v36 + 1;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      goto LABEL_81;
    }
    memset(buf, 170, sizeof(buf));
    v30 = (const char *)*MEMORY[0x1E0CFB8D0];
    v64 = 0;
    LOBYTE(v63) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v70, v30);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&v70);
    if (v64 < 0)
      operator delete((void *)v63);
    v31 = buf[23];
    if (buf[23] >= 0)
      v32 = buf[23];
    else
      v32 = *(_QWORD *)&buf[8];
    if (v32 != strlen((const char *)*MEMORY[0x1E0CFBEA0])
      || (buf[23] >= 0 ? (v33 = buf) : (v33 = *(_BYTE **)buf), memcmp(v33, (const void *)*MEMORY[0x1E0CFBEA0], v32)))
    {
LABEL_101:
      if (v31 < 0)
        operator delete(*(void **)buf);
      goto LABEL_103;
    }
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!(_QWORD)xmmword_1EF57D8E0)
    {
      v35 = (HealthEventDB *)operator new(0x78uLL);
      HealthEventDB::HealthEventDB(v35);
      v34 = operator new(0x20uLL);
      *v34 = off_1E7917080;
      v34[1] = 0;
      v34[2] = 0;
      v34[3] = v35;
      v47 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
      *(_QWORD *)&xmmword_1EF57D8E0 = v35;
      *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v34;
      if (!v47)
      {
        *(_QWORD *)&v63 = v35;
        *((_QWORD *)&v63 + 1) = v34;
        goto LABEL_93;
      }
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v34 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
    v35 = (HealthEventDB *)xmmword_1EF57D8E0;
    v63 = xmmword_1EF57D8E0;
    if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
    {
LABEL_95:
      pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      HealthEventDB::addHealthEvent(v35, 1);
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v31 = buf[23];
      goto LABEL_101;
    }
LABEL_93:
    v50 = v34 + 1;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    goto LABEL_95;
  }
LABEL_106:
  if (v7)
    CFRelease(v7);
  v29 = v69;
  if (v69)
    goto LABEL_109;
}

void sub_1BF60CFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a35 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](v36 - 128);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v36 - 112));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v36 - 104);
  _Unwind_Resume(a1);
}

void ctu::TimerService::createOneShotTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  NSObject *v6;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  uint64_t v10;

  v10 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)__p = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *a5;
  *a5 = 0;
  aBlock = *a6;
  object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD, dispatch_object_t *, void **))(*(_QWORD *)a1 + 16))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1BF60D278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  if (object)
  {
    dispatch_release(object);
    if ((a16 & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_16(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  void *v11;
  uint8_t buf[16];
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v14 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = v3[11];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Pinging baseband to verify it is healthy", buf, 2u);
        }
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_17;
        v10[3] = &__block_descriptor_tmp_19_2;
        v10[4] = v3;
        v7 = _Block_copy(v10);
        v11 = v7;
        HealthModule::getBasebandFWVersion_sync(v3, &v11);
        if (v7)
          _Block_release(v7);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF60D3F0(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  if (v1)
    _Block_release(v1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_17(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  NSObject **v3;
  char v4;
  NSObject *v5;
  _QWORD *v6;
  HealthEventDB *v7;
  _QWORD *v8;
  HealthEventDB *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;

  v2 = (_QWORD *)a2;
  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject ***)(a1 + 32);
  v4 = *(_BYTE *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_3:
      v5 = v3[11];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 < 0)
          v2 = (_QWORD *)*v2;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v2;
        _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Successfully received ping response from baseband (firmware version is %s)", (uint8_t *)&v25, 0xCu);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(_QWORD)xmmword_1EF57D8E0)
      {
        v7 = (HealthEventDB *)operator new(0x78uLL);
        HealthEventDB::HealthEventDB(v7);
        v6 = operator new(0x20uLL);
        *v6 = off_1E7917080;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v7;
        v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
        *(_QWORD *)&xmmword_1EF57D8E0 = v7;
        *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v6;
        if (!v10)
        {
          *(_QWORD *)&v25 = v7;
          *((_QWORD *)&v25 + 1) = v6;
LABEL_25:
          v16 = v6 + 1;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
LABEL_27:
          pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          HealthEventDB::addHealthEvent(v7, 3);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
          if (*((_QWORD *)&v25 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          return;
        }
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
      v7 = (HealthEventDB *)xmmword_1EF57D8E0;
      v25 = xmmword_1EF57D8E0;
      if (!*((_QWORD *)&xmmword_1EF57D8E0 + 1))
        goto LABEL_27;
      goto LABEL_25;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_3;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(_QWORD)xmmword_1EF57D8E0)
  {
    v9 = (HealthEventDB *)operator new(0x78uLL);
    HealthEventDB::HealthEventDB(v9);
    v8 = operator new(0x20uLL);
    *v8 = off_1E7917080;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
    *(_QWORD *)&xmmword_1EF57D8E0 = v9;
    *((_QWORD *)&xmmword_1EF57D8E0 + 1) = v8;
    if (!v13)
    {
      *(_QWORD *)&v25 = v9;
      *((_QWORD *)&v25 + 1) = v8;
LABEL_34:
      v21 = v8 + 1;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      goto LABEL_36;
    }
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)&xmmword_1EF57D8E0 + 1);
  v9 = (HealthEventDB *)xmmword_1EF57D8E0;
  v25 = xmmword_1EF57D8E0;
  if (*((_QWORD *)&xmmword_1EF57D8E0 + 1))
    goto LABEL_34;
LABEL_36:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::addHealthEvent(v9, 4);
  if (*((_QWORD *)&v25 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    }
  }
  HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(v3);
}

void sub_1BF60D700(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7916FF0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7912410;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E7917210;
  *(_QWORD *)(a1 + 8) = &unk_1E7917240;
  *(_QWORD *)(a1 + 24) = &unk_1E7917268;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E7912468;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x1C3B8C0C4](a1 + 8);
  return a1;
}

char *boost::wrapexcept<std::length_error>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E7912410;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = MEMORY[0x1E0DE5020] + 16;
  *((_QWORD *)v2 + 3) = &unk_1E7912468;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E7917210;
  *((_QWORD *)v2 + 1) = &unk_1E7917240;
  *((_QWORD *)v2 + 3) = &unk_1E7917268;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF60DB48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(_QWORD *a1)
{
  uint64_t v2;

  a1[3] = &unk_1E7912468;
  v2 = a1[4];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[4] = 0;
  MEMORY[0x1C3B8C0C4](a1 + 1);
  operator delete(a1);
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E7912468;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1C3B8C0C4);
}

{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E7912468;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x1C3B8C0C4](a1);
  operator delete((void *)(a1 - 8));
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E7912468;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  JUMPOUT(0x1C3B8C0C4);
}

{
  uint64_t v2;

  *a1 = &unk_1E7912468;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  MEMORY[0x1C3B8C0C4](a1 - 2);
  operator delete(a1 - 3);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7912410;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5020] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7912468;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E7917210;
  *(_QWORD *)(a1 + 8) = &unk_1E7917240;
  *(_QWORD *)(a1 + 24) = &unk_1E7917268;
  return a1;
}

uint64_t __cxx_global_var_init_11()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_12()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void sub_1BF60DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1BF60E108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF60E11C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF60E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BF60EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_guard_abort(&qword_1ED70F798);

  _Unwind_Resume(a1);
}

void sub_1BF60F1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  void **v25;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_1BF60F21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF60F954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  NSObject *v2;

  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    v2 = this[1];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = this[1];
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  NSObject *v10;
  std::string *v11;
  __int128 v12;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = _Block_copy(*(const void **)(a2 + 112));
  v10 = *(NSObject **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_1BF60FC28(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  NSObject *v4;

  v4 = *(NSObject **)(v2 + 120);
  if (v4)
    dispatch_release(v4);

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1BF60FC50(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    v2 = *(NSObject **)(a1 + 120);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(*(void **)(a1 + 40));
      return;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
}

void sub_1BF6101D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object)
{
  if (a24 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_1BF610BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (object)
    dispatch_release(object);

  CallBackData::~CallBackData((void **)&a21);
  if (a32 < 0)
    operator delete(__p);
  if (a40 < 0)
  {
    operator delete(a35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;

  v4 = _Block_copy(*(const void **)(a2 + 32));
  v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF610D2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 40);
  if (v3)
    dispatch_release(v3);

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  NSObject *v2;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:

}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  std::string v7;
  std::string v8;
  std::string __p;

  v5 = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v8 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);

}

void sub_1BF610F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_1BF610F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF610F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7;
  std::string::size_type size;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t **v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v55;
  __int128 v56;
  void *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  std::string::size_type v61;
  id v62;
  dispatch_object_t object;
  std::string __p;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string buf;
  std::string v70;
  uint8_t v71[16];
  __int128 block;
  std::string v73;

  v7 = a3;
  memset(&v70, 170, sizeof(v70));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v70 = *(std::string *)a2;
  size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v70.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::insert(&v70, 0, "com.apple.telephony.", 0x14uLL);
    goto LABEL_20;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_8;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_11:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  v13 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
  }
LABEL_20:
  memset(&buf, 0, sizeof(buf));
  if (a1 <= 2)
  {
    v16 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
    goto LABEL_33;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v73.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_tmp_13_8;
  v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_27;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_27:
  v21 = *((_QWORD *)GetGlobalLogger((uint64_t *)&block) + 4);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v16 = (std::string *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v16)
  {
    *(_WORD *)v71 = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v71, 2u);
    v61 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = v70.__r_.__value_.__l.__size_;
    if (!v61)
      goto LABEL_130;
    goto LABEL_36;
  }
LABEL_33:
  v24 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v70.__r_.__value_.__l.__size_;
  if (!v24)
    goto LABEL_130;
LABEL_36:
  v25 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = buf.__r_.__value_.__l.__size_;
  if (v25)
  {
    v26 = (uint64_t **)(a2 + 24);
    v27 = *(unsigned __int8 *)(a2 + 47);
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *(_QWORD *)(a2 + 32);
    switch(v27)
    {
      case 20:
        if (v28 >= 0)
          v29 = (uint64_t *)(a2 + 24);
        else
          v29 = *v26;
        v30 = *v29;
        v31 = v29[1];
        v32 = *((_DWORD *)v29 + 4);
        if (v30 == 0x6E6F6870656C6554 && v31 == 0x525F706D75445F79 && v32 == 2036621669)
          goto LABEL_94;
        goto LABEL_96;
      case 22:
        if (v28 >= 0)
          v35 = (uint64_t *)(a2 + 24);
        else
          v35 = *v26;
        v36 = *v35;
        v37 = v35[1];
        v38 = *(uint64_t *)((char *)v35 + 14);
        if (v36 != 0x6E6F6870656C6554 || v37 != 0x535F706D75445F79 || v38 != 0x646574726174535FLL)
          goto LABEL_96;
        goto LABEL_94;
      case 23:
        if (v28 >= 0)
          v41 = (uint64_t *)(a2 + 24);
        else
          v41 = *v26;
        v42 = *v41;
        v43 = v41[1];
        v44 = *(uint64_t *)((char *)v41 + 15);
        v46 = v42 == 0x72616C756C6C6543 && v43 == 0x445F65757373495FLL && v44 == 0x6465746365746544;
        if (v46 && (a1 != 2 || (config::hw::watch((config::hw *)v16) & 1) != 0))
          break;
        goto LABEL_96;
      case 27:
        if (v28 >= 0)
          v47 = (uint64_t *)(a2 + 24);
        else
          v47 = *v26;
        v48 = *v47;
        v49 = v47[1];
        v50 = v47[2];
        v51 = *(uint64_t *)((char *)v47 + 19);
        if (v48 != 0x6E6F6870656C6554
          || v49 != 0x495F706D75445F79
          || v50 != 0x696369666675736ELL
          || v51 != 0x746E656963696666)
        {
          goto LABEL_96;
        }
LABEL_94:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          goto LABEL_96;
        break;
      default:
LABEL_96:
        v55 = *(_QWORD *)a2;
        v56 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v70;
        v70.__r_.__value_.__r.__words[0] = v55;
        *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = v56;
        v73.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
        block = v56;
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v56;
        v57 = _Block_copy(v7);
        v58 = *a4;
        *(_QWORD *)&block = v57;
        *((_QWORD *)&block + 1) = v58;
        if (v58)
          dispatch_retain(v58);
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v68 = buf;
        +[UserNotificationManager sharedInstance:](UserNotificationManager, "sharedInstance:", &v68);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v65 = *(std::string *)a2;
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)v26;
          v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0)
          std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
        else
          v67 = *(std::string *)(a2 + 48);
        v62 = _Block_copy((const void *)block);
        object = (dispatch_object_t)*((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
          dispatch_retain(*((dispatch_object_t *)&block + 1));
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        else
          __p = v73;
        objc_msgSend(v59, "showNotification:withCallBackData:", &v65, &v62);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (object)
          dispatch_release(object);

        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v67.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_124:
            if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_125;
            goto LABEL_137;
          }
        }
        else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_124;
        }
        operator delete(v66.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_125:

          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_126;
          goto LABEL_138;
        }
LABEL_137:
        operator delete(v65.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_126:
          if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_127;
          goto LABEL_139;
        }
LABEL_138:
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_127:
          v60 = *((_QWORD *)&block + 1);
          if (!*((_QWORD *)&block + 1))
            goto LABEL_129;
          goto LABEL_128;
        }
LABEL_139:
        operator delete(v73.__r_.__value_.__l.__data_);
        v60 = *((_QWORD *)&block + 1);
        if (*((_QWORD *)&block + 1))
LABEL_128:
          dispatch_release(v60);
LABEL_129:

        break;
    }
  }
LABEL_130:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
LABEL_134:
    operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_132;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_134;
LABEL_132:

}

void sub_1BF6117A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  if (object)
    dispatch_release(object);

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0)
    operator delete(__p);
  CallBackData::~CallBackData((void **)(v45 - 112));
  if (a43 < 0)
  {
    operator delete(a38);
    if ((*(char *)(v45 - 137) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v45 - 137) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v45 - 160));

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  NSObject *v2;

  if (!a1)
    return;
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(_QWORD *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((_QWORD *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    v2 = *((_QWORD *)a1 + 8);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = *((_QWORD *)a1 + 8);
  if (v2)
LABEL_4:
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  operator delete(a1);
}

void AWDModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  __int128 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  __int128 block;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t *v19;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    v4 = operator new(0xC0uLL);
    v5 = (uint64_t)v4;
    v6 = *a1;
    v7 = (std::__shared_weak_count *)a1[1];
    v13[0] = v6;
    v13[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    AWDModule::AWDModule(v4, v13);
    *(_QWORD *)&block = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    v10 = block;
    block = 0uLL;
    *(_OWORD *)a2 = v10;
    if (v7)
    {
      v12 = v10;
      std::__shared_weak_count::__release_weak(v7);
      *(_QWORD *)&v10 = v12;
    }
    v14 = v10;
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 0x40000000;
    v16 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    v17 = &__block_descriptor_tmp_30_1;
    v18 = v10 + 120;
    v19 = &v14;
    v11 = *(NSObject **)(v10 + 136);
    if (*(_QWORD *)(v10 + 144))
      dispatch_async_and_wait(v11, &block);
    else
      dispatch_sync(v11, &block);
  }
}

void sub_1BF611AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_1BF611B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  NSObject *v1;
  char *v2;
  AWDModule *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_30_1;
  block[4] = (char *)this + 120;
  block[5] = &v3;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void AWDModule::~AWDModule(AWDModule *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E7917378;
  *((_QWORD *)this + 6) = &unk_1E79173E8;
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((_QWORD **)this + 22));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_1E79228B8;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  AWDModule::~AWDModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
}

{
  void *v1;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));
  operator delete(v1);
}

_QWORD *AWDModule::AWDModule(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v35[16];
  __int128 block;
  void (*v37)(uint64_t);
  void *v38;
  uint64_t *v39;
  _QWORD v40[2];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *a1 = off_1E79228B8;
    a1[1] = v3;
    a1[2] = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = &unk_1E79133B0;
    a1[1] = v3;
  }
  *a1 = off_1E7917378;
  a1[6] = &unk_1E79173E8;
  v9 = a1 + 6;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v35, "com.apple.telephony.abm", "awd.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v37 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v38 = &__block_descriptor_tmp_13_8;
  v39 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v16;
  if (v16)
  {
    dispatch_retain(v16);
    a1[18] = 0;
    dispatch_release(v16);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = off_1E7917778;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  a1[7] = &unk_1E7911E48;
  a1[13] = v12;
  a1[14] = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_1E7917808;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
    *v9 = off_1E7917808;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  *a1 = off_1E7917378;
  a1[6] = &unk_1E79173E8;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = block;
    block = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_1ED70F4D0;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v40[0] = v21;
  v40[1] = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1BF61216C(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6121B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Service *v19;
  _QWORD *v20;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v20);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF6121F0(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

_BYTE *AWDModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_14;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v2 = (uint64_t *)(a1 + 120);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v4[3] = &__block_descriptor_tmp_12_2;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v2, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  const void *v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  const void *v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  const void *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  const void *v54;
  void **__dst;
  size_t v56;
  unint64_t v57;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB858];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB858]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v57) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_2;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v53 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v54 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v54);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBAA0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBAA0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v56 = v21;
    v57 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v57) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v49[0] = v16;
  v49[1] = 1174405120;
  v49[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v49[3] = &__block_descriptor_tmp_7_2;
  v49[4] = v1;
  v49[5] = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v49);
  v51 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v51);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFB310];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB310]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v56 = v29;
    v57 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v57) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v46[0] = v16;
  v46[1] = 1174405120;
  v46[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8;
  v46[3] = &__block_descriptor_tmp_9_1;
  v46[4] = v1;
  v46[5] = v3;
  v47 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v46);
  v48 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFB8A0];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB8A0]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v56 = v37;
    v57 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v57) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v43[0] = v16;
  v43[1] = 1174405120;
  v43[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  v43[3] = &__block_descriptor_tmp_11_2;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v43);
  v45 = v42;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6128C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;

  if (v40)
    _Block_release(v40);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v41 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v43 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
          std::__shared_weak_count::__release_weak(a31);
        if (a39)
        {
          std::__shared_weak_count::__release_weak(a39);
          std::__shared_weak_count::__release_weak(v39);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v43);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v41 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v41 - 128));
  v43 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_8(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_14;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 56))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_1BF6131D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_16;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 64))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_1BF613388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  void *v15;
  void *aBlock;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_17_0;
    v8 = *(void **)a3;
    if (*(_QWORD *)a3)
      v8 = _Block_copy(v8);
    v15 = v8;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v4 + 72))(v4, &v17, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v9 = v18;
    if (!v18)
      goto LABEL_13;
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v15;
      if (!v15)
        return;
    }
    else
    {
LABEL_13:
      v12 = v15;
      if (!v15)
        return;
    }
    _Block_release(v12);
  }
  else
  {
    v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
  }
}

void sub_1BF613540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  char *v53;
  std::__shared_weak_count *v54;
  void *v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  char *v58;
  std::__shared_weak_count *v59;
  void *v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  uint8_t buf[4];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (v48 = *(_QWORD *)(a1 + 120), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  v49 = v8;
  v13 = (char *)operator new(0x58uLL);
  v14 = v13;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_1E79179F0;
  v15 = v13 + 24;
  v16 = *(NSObject **)(a1 + 136);
  if (v16)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((_QWORD *)v14 + 3) = v16;
    dispatch_retain(v16);
    *(_WORD *)(v14 + 33) = 0;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    v14[32] = a2;
    dispatch_release(v16);
  }
  else
  {
    *((_QWORD *)v13 + 3) = 0;
    *(_WORD *)(v13 + 33) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    v13[32] = a2;
  }
  *a3 = v15;
  a3[1] = v14;
  v17 = (unint64_t *)(v14 + 16);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v20 = (uint64_t **)(a1 + 176);
  v19 = *(uint64_t **)(a1 + 176);
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v19;
        v22 = *((unsigned __int8 *)v19 + 32);
        if (v22 <= a2)
          break;
        v19 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_21;
      }
      if (v22 >= a2)
        break;
      v19 = v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_21;
      }
    }
    v26 = v15;
    v27 = v14;
    goto LABEL_26;
  }
  v21 = (uint64_t **)(a1 + 176);
LABEL_21:
  v23 = operator new(0x38uLL);
  *((_BYTE *)v23 + 32) = a2;
  *((_QWORD *)v23 + 5) = 0;
  *((_QWORD *)v23 + 6) = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = v21;
  *v20 = (uint64_t *)v23;
  v24 = **(_QWORD **)(a1 + 168);
  v25 = (uint64_t *)v23;
  if (v24)
  {
    *(_QWORD *)(a1 + 168) = v24;
    v25 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v25);
  ++*(_QWORD *)(a1 + 184);
  v26 = *a3;
  v27 = a3[1];
  if (v27)
  {
    v21 = (uint64_t **)v23;
LABEL_26:
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v23 = v21;
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
  *((_QWORD *)v23 + 5) = v26;
  *((_QWORD *)v23 + 6) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
LABEL_34:
    *(_DWORD *)buf = 136315138;
    v65 = awd::asString();
    _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_35:
  v34 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_20_4;
  aBlock[4] = a1;
  aBlock[5] = v48;
  v62 = v49;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v63 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v63)
    _Block_release(v63);
  v56[0] = v34;
  v56[1] = 1174405120;
  v56[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21;
  v56[3] = &__block_descriptor_tmp_23_3;
  v56[4] = a1;
  v56[5] = v48;
  v57 = v49;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v58 = v15;
  v59 = (std::__shared_weak_count *)v14;
  do
    v37 = __ldxr(v17);
  while (__stxr(v37 + 1, v17));
  v60 = _Block_copy(v56);
  awd::AppContext::setHandler();
  if (v60)
    _Block_release(v60);
  v51[0] = v34;
  v51[1] = 1174405120;
  v51[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24;
  v51[3] = &__block_descriptor_tmp_26_1;
  v51[4] = a1;
  v51[5] = v48;
  v52 = v49;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v53 = v15;
  v54 = (std::__shared_weak_count *)v14;
  do
    v39 = __ldxr(v17);
  while (__stxr(v39 + 1, v17));
  v55 = _Block_copy(v51);
  awd::AppContext::setHandler();
  if (v55)
    _Block_release(v55);
  if (*(_QWORD *)(a1 + 152))
  {
    v40 = (std::__shared_weak_count *)a3[1];
    v50 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    awd::AwdCommandDriver::checkIn();
    if (v50)
    {
      v43 = (unint64_t *)&v50->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v45 = v54;
        if (!v54)
          goto LABEL_64;
LABEL_63:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_64;
      }
    }
LABEL_62:
    v45 = v54;
    if (!v54)
      goto LABEL_64;
    goto LABEL_63;
  }
  v46 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    goto LABEL_62;
  v47 = awd::asString();
  *(_DWORD *)buf = 136315138;
  v65 = v47;
  _os_log_error_impl(&dword_1BF566000, v46, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  v45 = v54;
  if (v54)
    goto LABEL_63;
LABEL_64:
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
  std::__shared_weak_count::__release_weak(v49);
}

void sub_1BF613AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,void *aBlock,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;

  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  std::__shared_weak_count::__release_weak(v39);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v40);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void sub_1BF613BBC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF613BD8()
{
  JUMPOUT(0x1BF613BACLL);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v10 = awd::asString();
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF613CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_21(_QWORD *a1, uint64_t a2, int *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  int v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  unsigned int AppID;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  size_t v26;
  void *v27;
  void **v28;
  const object *v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeID v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  std::__shared_weak_count *v46;
  uint8_t buf[8];
  std::__shared_weak_count *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v6 = a1[4];
  v7 = std::__shared_weak_count::lock(v4);
  v46 = v7;
  if (!v7)
    return;
  if (!a1[5])
  {
    v13 = v7;
LABEL_54:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v48 = 0;
  v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    v48 = std::__shared_weak_count::lock(v10);
    if (v48)
      *(_QWORD *)buf = a1[7];
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v11) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  v15 = xpc_int64_create(AppID);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFC210], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(a3[1]);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB080], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_int64_create(a3[2]);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB108], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_int64_create(*a3);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB038], v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = xpc_int64_create(*((_QWORD *)a3 + 2));
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB100], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = (const void *)*MEMORY[0x1E0CFAFD8];
  v26 = strlen((const char *)*MEMORY[0x1E0CFAFD8]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    v44 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    object = v12;
    if (v12)
      goto LABEL_30;
LABEL_35:
    object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v44) = v26;
  v28 = __dst;
  if (v26)
    goto LABEL_34;
  LOBYTE(__dst[0]) = 0;
  object = v12;
  if (!v12)
    goto LABEL_35;
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((xpc *)&object, v29);
  v32 = cf;
  if (cf && (v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    v42 = v32;
    CFRetain(v32);
  }
  else
  {
    v42 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  xpc_release(v12);
  v34 = v48;
  if (v48)
  {
    v35 = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v13 = v46;
  if (v46)
    goto LABEL_54;
}

void sub_1BF61418C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_24(_QWORD *a1, int *a2, int a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unsigned int AppID;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  const object *v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  CFTypeID v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *aBlock;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v51;
  void *__dst[2];
  unint64_t v53;
  std::__shared_weak_count *v55;
  uint8_t buf[8];
  std::__shared_weak_count *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v9 = a1[4];
  v10 = std::__shared_weak_count::lock(v5);
  v55 = v10;
  if (!v10)
    return;
  if (!a1[5])
  {
    v15 = v10;
LABEL_62:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a2[1];
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v57) = 1024;
    *(_DWORD *)((char *)&v57 + 2) = v12;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v13) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  *(_QWORD *)buf = 0;
  v57 = 0;
  v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    v16 = std::__shared_weak_count::lock(v16);
    v57 = v16;
    if (v16)
    {
      v16 = (std::__shared_weak_count *)a1[7];
      *(_QWORD *)buf = v16;
    }
  }
  AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  v18 = xpc_int64_create(AppID);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFC210], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_int64_create(a2[3]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB080], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(*a2);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB008], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(a2[1]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAFB8], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_BOOL_create(*((_BYTE *)a2 + 16));
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAF70], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_BOOL_create(*((_BYTE *)a2 + 17));
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB158], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((_BYTE *)a2 + 24))
  {
    v30 = xpc_int64_create(a2[5]);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFB150], v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = xpc_data_create(*(const void **)a4, *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  if (!v32)
    v32 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFAF78], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  v34 = (const void *)*MEMORY[0x1E0CFAFB0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFAFB0]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    v53 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v37) = 0;
    object = v14;
    if (v14)
      goto LABEL_38;
LABEL_43:
    object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v53) = v35;
  v37 = __dst;
  if (v35)
    goto LABEL_42;
  LOBYTE(__dst[0]) = 0;
  object = v14;
  if (!v14)
    goto LABEL_43;
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((xpc *)&object, v38);
  v41 = cf;
  if (cf && (v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    v51 = v41;
    CFRetain(v41);
  }
  else
  {
    v51 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v51, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v51)
    CFRelease(v51);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst[0]);
  v43 = v57;
  if (v57)
  {
    v44 = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  xpc_release(v14);
  v15 = v55;
  if (v55)
    goto LABEL_62;
}

void sub_1BF6148C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF614C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF614C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79177B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF614DB0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF614DD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917778;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(**(_QWORD **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7917860;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF615268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v6 = a2[7];
  v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  _Block_release(v5);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (((*(_BYTE *)(a1 + 48) != 0) & a2) != 0)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF6153F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  char v23;
  xpc_object_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[5];
  void *aBlock;
  void *v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  xpc_object_t v41;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = -534716414;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v41 = value;
    if (value)
      xpc_retain(value);
    else
      v41 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v38 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB350]);
          v41 = v22;
          if (v22)
            xpc_retain(v22);
          else
            v41 = xpc_null_create();
          v23 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB068]);
          v41 = v24;
          if (v24)
            xpc_retain(v24);
          else
            v41 = xpc_null_create();
          v25 = xpc::dyn_cast_or_default((xpc *)&v41, 0);
          xpc_release(v41);
          LOWORD(v41) = -21846;
          BYTE2(v41) = -86;
          LOBYTE(v41) = awd::AppContext::getProperties(*(awd::AppContext **)(v18 + 40));
          BYTE1(v41) = v25;
          BYTE2(v41) = v23;
          awd::AppContext::setProperties();
          v26 = *(std::__shared_weak_count **)(v18 + 48);
          v36[0] = *(_QWORD *)(v18 + 40);
          v36[1] = (uint64_t)v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
          v33[0] = MEMORY[0x1E0C809B0];
          v33[1] = 1174405120;
          v33[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v33[3] = &unk_1E79179B0;
          v33[4] = &v37;
          v29 = *(void **)(v2 + 32);
          if (v29)
            v29 = _Block_copy(v29);
          aBlock = v29;
          v30 = _Block_copy(v33);
          v35 = v30;
          AWDModule::updateProperties_sync(v3, v36, (uint64_t)&v35);
          if (v30)
            _Block_release(v30);
          if (v26)
          {
            v31 = (unint64_t *)&v26->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if (aBlock)
            _Block_release(aBlock);
        }
      }
    }
  }
  v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v41 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF6157D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  const void *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  if (v21)
    _Block_release(v21);
  if (aBlock)
    _Block_release(aBlock);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Block_object_dispose(&a18, 8);
  v25 = *(const void **)(v19 + 32);
  if (v25)
    _Block_release(v25);
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(_QWORD *)(v19 + 24) = 0;
  v26 = *(std::__shared_weak_count **)(v19 + 8);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  operator delete((void *)v19);
  v27 = (std::__shared_weak_count *)v18[2];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF6159F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E79179F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E79179F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;

  v2 = (const void *)a1[10];
  if (v2)
    _Block_release(v2);
  v3 = (const void *)a1[9];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[8];
  if (v4)
    _Block_release(v4);
  v5 = (const void *)a1[7];
  if (v5)
    _Block_release(v5);
  v6 = (const void *)a1[6];
  if (v6)
    _Block_release(v6);
  v7 = (const void *)a1[5];
  if (v7)
    _Block_release(v7);
  v8 = a1[3];
  if (v8)
    dispatch_release(v8);
}

uint64_t __cxx_global_var_init_27()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void antenna::Service::Internal::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, NSObject **a3@<X2>, antenna::Service::Internal **a4@<X8>)
{
  antenna::Service::Internal *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  antenna::Service::Internal *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  dispatch_object_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  *a4 = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v8 = (antenna::Service::Internal *)operator new(0x2E8uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v42 = *a1;
  v43 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(_QWORD *)a2)
  {
    v12 = _Block_copy(*(const void **)a2);
    v13 = *(NSObject **)(a2 + 8);
    v40 = v12;
    v41 = v13;
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  v12 = 0;
  v13 = *(NSObject **)(a2 + 8);
  v40 = 0;
  v41 = v13;
  if (v13)
LABEL_6:
    dispatch_retain(v13);
LABEL_7:
  v14 = *a3;
  v39 = v14;
  if (v14)
    dispatch_retain(v14);
  antenna::Service::Internal::Internal(v8, &v42, (uint64_t)&v40, &v39);
  *a4 = v8;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E7917D00;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (antenna::Service::Internal *)v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v25 = *a4;
    if (!*((_QWORD *)*a4 + 7))
      goto LABEL_37;
    goto LABEL_22;
  }
LABEL_21:
  v25 = *a4;
  if (!*((_QWORD *)*a4 + 7))
    goto LABEL_37;
LABEL_22:
  v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 10);
  if (!v26 || (v27 = *((_QWORD *)v25 + 9), (v28 = std::__shared_weak_count::lock(v26)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v29 = v28;
  v46 = v27;
  v47 = v28;
  ctu::LoggerCommonBase::getLogDomain((antenna::Service::Internal *)((char *)v25 + 8));
  v44 = v27;
  v45 = v29;
  v46 = 0;
  v47 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v30 = v45;
  if (v45)
  {
    v31 = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v47;
  if (v47)
  {
    v34 = (unint64_t *)&v47->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_37:
  if (v14)
    dispatch_release(v14);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
  v36 = v43;
  if (v43)
  {
    v37 = (unint64_t *)&v43->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (*a4)
    antenna::Service::Internal::init(*a4);
}

void sub_1BF615E00()
{
  __break(1u);
}

void sub_1BF615E4C()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF615E74);
}

void sub_1BF615E5C()
{
  JUMPOUT(0x1BF615E78);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void antenna::Service::Internal::init(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *antenna::Service::Internal::Internal(_QWORD *a1, _QWORD *a2, uint64_t a3, dispatch_object_t *a4)
{
  NSObject *v7;
  NSObject *initially_inactive;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  xpc_object_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v51[16];
  char v52[16];
  char v53[16];

  *a1 = off_1E7917A40;
  v7 = *a4;
  if (*a4)
    dispatch_retain(*a4);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v51, "com.apple.telephony.abm", "antenna.svc");
  if (v7)
    dispatch_retain(v7);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v9 = dispatch_queue_create_with_target_V2("antenna.svc", initially_inactive, v7);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v9;
  if (v9)
    dispatch_retain(v9);
  a1[12] = v7;
  if (v7)
    dispatch_retain(v7);
  if (v9)
    dispatch_release(v9);
  if (v7)
    dispatch_release(v7);
  *a1 = off_1E7917C60;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v53);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a2;
  v10 = a2[1];
  a1[8] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v52);
  *a1 = off_1E7917D50;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v51);
  if (v7)
    dispatch_release(v7);
  *a1 = off_1E7917A40;
  v13 = *(void **)a3;
  if (*(_QWORD *)a3)
    v13 = _Block_copy(v13);
  a1[13] = v13;
  v14 = *(NSObject **)(a3 + 8);
  a1[14] = v14;
  if (v14)
    dispatch_retain(v14);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = *a2;
  v15 = a2[1];
  a1[18] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_BYTE *)a1 + 164) = 0;
  *((_BYTE *)a1 + 168) = 0;
  a1[23] = 0;
  a1[25] = 0;
  *((_BYTE *)a1 + 216) = 0;
  v18 = xpc_null_create();
  a1[29] = 0;
  a1[28] = v18;
  a1[32] = 0;
  a1[36] = 0;
  a1[30] = 0;
  *((_BYTE *)a1 + 248) = 0;
  a1[33] = 0;
  *((_DWORD *)a1 + 68) = 0;
  a1[35] = a1 + 36;
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  *((_DWORD *)a1 + 88) = 255;
  a1[45] = 0;
  a1[47] = 0;
  *((_BYTE *)a1 + 368) = 0;
  a1[48] = 0;
  v19 = (const void *)*MEMORY[0x1E0CFC120];
  v20 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    a1[50] = v21;
    a1[51] = v24 | 0x8000000000000000;
    a1[49] = v22;
    goto LABEL_32;
  }
  *((_BYTE *)a1 + 415) = v20;
  v22 = a1 + 49;
  if (v20)
LABEL_32:
    memmove(v22, v19, v21);
  *((_BYTE *)v22 + v21) = 0;
  v25 = a1 + 52;
  v26 = strlen((const char *)v19);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v25 = operator new(v28 + 1);
    a1[53] = v27;
    a1[54] = v29 | 0x8000000000000000;
    a1[52] = v25;
    goto LABEL_40;
  }
  *((_BYTE *)a1 + 439) = v26;
  if (v26)
LABEL_40:
    memmove(v25, v19, v27);
  *((_BYTE *)v25 + v27) = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[55] = a1 + 56;
  *((_BYTE *)a1 + 476) = 0;
  *((_DWORD *)a1 + 120) = 0;
  *((_BYTE *)a1 + 488) = 0;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  v30 = a1 + 67;
  *((_DWORD *)a1 + 132) = 255;
  v31 = strlen((const char *)v19);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v30 = operator new(v33 + 1);
    a1[67] = v30;
    a1[69] = v34 | 0x8000000000000000;
    a1[68] = v32;
    goto LABEL_48;
  }
  *((_BYTE *)a1 + 559) = v31;
  if (v31)
LABEL_48:
    memmove(v30, v19, v32);
  *((_BYTE *)v30 + v32) = 0;
  *((_WORD *)a1 + 280) = 0;
  *(_QWORD *)((char *)a1 + 564) = 0xFFFFFFFF00000001;
  *((_BYTE *)a1 + 572) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  v35 = strlen((const char *)v19);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    a1[74] = v37;
    a1[76] = v39 | 0x8000000000000000;
    a1[75] = v36;
    goto LABEL_56;
  }
  *((_BYTE *)a1 + 615) = v35;
  v37 = a1 + 74;
  if (v35)
LABEL_56:
    memmove(v37, v19, v36);
  *((_BYTE *)v37 + v36) = 0;
  a1[79] = 0;
  a1[78] = 0;
  a1[77] = a1 + 78;
  v40 = strlen((const char *)v19);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    a1[80] = v42;
    a1[82] = v44 | 0x8000000000000000;
    a1[81] = v41;
    goto LABEL_64;
  }
  *((_BYTE *)a1 + 663) = v40;
  v42 = a1 + 80;
  if (v40)
LABEL_64:
    v40 = (size_t)memmove(v42, v19, v41);
  *((_BYTE *)v42 + v41) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((_BYTE *)a1 + 688) = config::hw::watch((config::hw *)v40);
  v45 = a1 + 87;
  v46 = strlen((const char *)v19);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v47 = v46;
  if (v46 >= 0x17)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v45 = operator new(v48 + 1);
    a1[87] = v45;
    a1[89] = v49 | 0x8000000000000000;
    a1[88] = v47;
  }
  else
  {
    *((_BYTE *)a1 + 719) = v46;
    if (!v46)
      goto LABEL_73;
  }
  memmove(v45, v19, v47);
LABEL_73:
  *((_BYTE *)v45 + v47) = 0;
  *((_WORD *)a1 + 368) = 0;
  return a1;
}

void sub_1BF616600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  if (v11)
  {
    dispatch_release(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

const char *antenna::Service::Internal::getName(antenna::Service::Internal *this)
{
  return "antenna.svc";
}

_QWORD *ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void antenna::Service::Internal::shutdown(antenna::Service::Internal *this)
{
  IOKitEventNotifier *v2;
  uint64_t **v3;
  PPMHandler **v4;
  uint64_t *v5;

  v2 = (IOKitEventNotifier *)*((_QWORD *)this + 47);
  if (v2)
    IOKitEventNotifier::shutdown(v2);
  v3 = (uint64_t **)*((_QWORD *)this + 64);
  if (v3)
  {
    v5 = *v3;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v5, &v5);
  }
  v4 = (PPMHandler **)*((_QWORD *)this + 72);
  if (v4)
    PPMHandler::shutdown(*v4);
  if (*((_QWORD *)this + 15))
    antenna::CommandDriver::registerHandler();
}

void sub_1BF616940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setupTxPower_sync(antenna::Service::Internal *this)
{
  ctu::iokit::IOHIDController *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (*((_BYTE *)this + 153))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 1u);
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  if (*((_BYTE *)this + 152))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 3u);
  if (*((_BYTE *)this + 153) || *((_BYTE *)this + 152))
  {
    antenna::Service::Internal::enableTxPowerCapping_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingIndication_sync(this);
  }
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)this + 163))
    antenna::Service::Internal::sendVideoAccessory_sync(this, *((unsigned __int8 *)this + 164));
  if (*((_BYTE *)this + 160))
    antenna::Service::Internal::sendAudioAccessory_sync(this);
  if (*((_BYTE *)this + 156) || *((_BYTE *)this + 158))
  {
    if (*((_BYTE *)this + 192))
    {
      v2 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 62);
      if (v2)
        ctu::iokit::IOHIDController::queryHIDEventTrigger(v2);
    }
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)this);
  }
  if (*((_BYTE *)this + 169))
    antenna::Service::Internal::sendPowerSource_sync(this);
  if (*((_BYTE *)this + 572))
    antenna::Service::Internal::enablePPM_sync(this, 1);
  if (*((_BYTE *)this + 170))
  {
    if (!*((_QWORD *)this + 79))
    {
      config::hw::deviceMaterial(this);
      if ((_QWORD **)((char *)this + 616) != &v3)
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)this + 77, v3, &v4);
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v4);
    }
    antenna::Service::Internal::sendDeviceMaterial_sync(this);
  }
}

void sub_1BF616AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::configTxPower_sync(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  _QWORD v19[2];
  xpc_object_t object;
  uint8_t buf[4];
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v22 = a2;
    _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D  Configuration tx power for %d", buf, 8u);
  }
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB90]);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    v11 = xpc_int64_create(*(unsigned int *)(a1 + 336));
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBE8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  else if (a2 == 2)
  {
    v13 = xpc_int64_create(*(unsigned int *)(a1 + 464));
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFC00], v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    v15 = xpc_int64_create(*(unsigned int *)(a1 + 468));
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBF8], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    v17 = xpc_int64_create(*(unsigned int *)(a1 + 472));
    if (!v17)
      v17 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFC10], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v19[0] = 0;
  v19[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync((_QWORD *)a1, &object, (uint64_t)v19);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF616DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enableTxPowerCapping_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  _QWORD v12[2];
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB88]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB60], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*((_BYTE *)this + 152))
  {
    v10 = xpc_int64_create(1);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF6170DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingNotification_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  config::hw *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  _QWORD v15[2];
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD0]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB98], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (config::hw::watch(v10))
  {
    v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBC0]);
    if (!v11)
      v11 = xpc_null_create();
  }
  else
  {
    v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBB8]);
    if (!v11)
      v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFBB0], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (*((_BYTE *)this + 152))
  {
    v13 = xpc_int64_create(1);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB70], v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
  }
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v15[0] = 0;
  v15[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v15);
  xpc_release(object);
  object = 0;
  xpc_release(v5);
}

void sub_1BF61741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingIndication_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  _QWORD v6[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFC08]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v6[0] = 0;
  v6[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v6);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF6175C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendVideoAccessory_sync(antenna::Service::Internal *this, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  capabilities::radio *v8;
  NSObject *v9;
  _BOOL4 v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  _QWORD v19[2];
  xpc_object_t object;
  uint8_t buf[16];

  if (*((unsigned __int8 *)this + 164) != a2)
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB08]);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    if (capabilities::radio::maverick(v8))
    {
      v9 = *((_QWORD *)this + 5);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link started", buf, 2u);
        }
        v11 = xpc_int64_create(1);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB40], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = xpc_int64_create(0);
        if (!v13)
          v13 = xpc_null_create();
      }
      else
      {
        if (v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link stopped or terminated", buf, 2u);
        }
        v16 = xpc_int64_create(0);
        if (!v16)
          v16 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB40], v16);
        v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        v13 = xpc_int64_create(1);
        if (!v13)
          v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB80], v13);
      v18 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v18);
    }
    else
    {
      v14 = xpc_BOOL_create(a2);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB68], v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    *((_BYTE *)this + 164) = a2;
    object = v5;
    if (v5)
      xpc_retain(v5);
    else
      object = xpc_null_create();
    v19[0] = 0;
    v19[1] = 0;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v19);
    xpc_release(object);
    object = 0;
    xpc_release(v5);
  }
}

void sub_1BF6179D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioAccessory_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBA8]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v6 = xpc_BOOL_create(*((_BYTE *)this + 334));
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFAA8], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF617BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAccessoryStatus_sync(NSObject **this)
{
  unint64_t AccessoryState_sync;
  NSObject *v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  const char **v7;
  const char **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  NSObject *v15;
  _BYTE *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  _BYTE *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  NSObject *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  NSObject *v31;
  _BYTE *v32;
  _BYTE *v33;
  _QWORD v34[2];
  xpc_object_t v35;
  _QWORD v36[2];
  xpc_object_t object;
  _BYTE buf[12];
  char v39;
  uint8_t v40[4];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)this);
  if (*((_BYTE *)this + 168))
  {
    v3 = this[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Ignore sending accessory status to BB in low power mode", buf, 2u);
    }
  }
  else
  {
    v4 = AccessoryState_sync;
    v5 = HIDWORD(AccessoryState_sync);
    v6 = MEMORY[0x1E0C812F8];
    v7 = (const char **)MEMORY[0x1E0DDFA68];
    v8 = (const char **)MEMORY[0x1E0DDFB28];
    if (*((_BYTE *)this + 156) || *((_BYTE *)this + 192))
    {
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v9) == v6)
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBC8]);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v10, *v7, v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      v13 = xpc_int64_create(v4 & 1);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v10, *v8, v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = this[5];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::asString();
        if (v39 >= 0)
          v16 = buf;
        else
          v16 = *(_BYTE **)buf;
        *(_DWORD *)v40 = 136315138;
        v41 = v16;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending accessory attachment for RF: %s", v40, 0xCu);
        if (v39 < 0)
          operator delete(*(void **)buf);
        v15 = this[5];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (*((_BYTE *)this + 561))
          v17 = "CLOSED";
        else
          v17 = "OPENED";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", buf, 0xCu);
      }
      if ((v4 & 1) != 0 && (*((_BYTE *)this + 157) || *((_BYTE *)this + 192)))
      {
        v18 = xpc_int64_create(v5);
        if (!v18)
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0DDFAF8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        v20 = this[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          ctu::iokit::asString();
          v21 = v39 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v40 = 136315138;
          v41 = v21;
          _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I Sending accessory type for RF: %s", v40, 0xCu);
          if (v39 < 0)
            operator delete(*(void **)buf);
        }
      }
      object = v10;
      if (v10)
        xpc_retain(v10);
      else
        object = xpc_null_create();
      v36[0] = 0;
      v36[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v36);
      xpc_release(object);
      object = 0;
      xpc_release(v10);
    }
    if (*((_BYTE *)this + 158) || *((_BYTE *)this + 192))
    {
      v22 = xpc_dictionary_create(0, 0, 0);
      if (v22 || (v22 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v22) == v6)
        {
          xpc_retain(v22);
          v23 = v22;
        }
        else
        {
          v23 = xpc_null_create();
        }
      }
      else
      {
        v23 = xpc_null_create();
        v22 = 0;
      }
      xpc_release(v22);
      v24 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBD8]);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v23, *v7, v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_int64_create(v4 & 1);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(v23, *v8, v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      v28 = this[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        v32 = v39 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v40 = 136315138;
        v41 = v32;
        _os_log_debug_impl(&dword_1BF566000, v28, OS_LOG_TYPE_DEBUG, "#D Sending accessory attachment for ARTD: %s", v40, 0xCu);
        if (v39 < 0)
          operator delete(*(void **)buf);
      }
      if ((v4 & 1) != 0 && (*((_BYTE *)this + 157) || *((_BYTE *)this + 192)))
      {
        v29 = xpc_int64_create(v5);
        if (!v29)
          v29 = xpc_null_create();
        xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0DDFAF8], v29);
        v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        v31 = this[5];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          ctu::iokit::asString();
          v33 = v39 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v40 = 136315138;
          v41 = v33;
          _os_log_debug_impl(&dword_1BF566000, v31, OS_LOG_TYPE_DEBUG, "#D Sending accessory type for ARTD: %s", v40, 0xCu);
          if (v39 < 0)
            operator delete(*(void **)buf);
        }
      }
      v35 = v23;
      if (v23)
        xpc_retain(v23);
      else
        v35 = xpc_null_create();
      v34[0] = 0;
      v34[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &v35, (uint64_t)v34);
      xpc_release(v35);
      v35 = 0;
      xpc_release(v23);
    }
    antenna::Service::Internal::reportAccessory_sync((uint64_t)this, v4);
  }
}

void sub_1BF618288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendPowerSource_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  char *v4;
  int64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  void **v11;
  _QWORD v12[2];
  xpc_object_t object;
  void *__p;
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  if (*((_DWORD *)this + 142) == -1
    || (v4 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v4 = (char *)this + 564;
  }
  v5 = *(unsigned int *)v4;
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB58]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create(v5);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFB00], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    v11 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v17 = v11;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending power source state: %s\n", buf, 0xCu);
    if (v15 < 0)
    {
      operator delete(__p);
      object = v3;
      if (v3)
        goto LABEL_21;
LABEL_23:
      object = xpc_null_create();
      goto LABEL_24;
    }
  }
  object = v3;
  if (!v3)
    goto LABEL_23;
LABEL_21:
  xpc_retain(v3);
LABEL_24:
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF61862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enablePPM_sync(antenna::Service::Internal *this, _BOOL4 a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  xpc_object_t v28;
  BOOL v29;
  _QWORD v30[2];
  xpc_object_t object;
  uint8_t buf[4];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 572) && *((_QWORD *)this + 72))
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v7 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAD8]);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = xpc_BOOL_create(a2);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFAA0], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a2)
    {
      v11 = xpc_int64_create(5);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFAB8], v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v16 = v15;
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (v20)
    {
      object = v5;
      if (v5)
      {
LABEL_27:
        xpc_retain(v5);
        goto LABEL_30;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      object = v5;
      if (v5)
        goto LABEL_27;
    }
    object = xpc_null_create();
LABEL_30:
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 1174405120;
    v26[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke;
    v26[3] = &__block_descriptor_tmp_24_0;
    v26[4] = this;
    v26[5] = v14;
    v27 = v16;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v29 = a2;
    v28 = v5;
    if (v5)
      xpc_retain(v5);
    else
      v28 = xpc_null_create();
    v22 = _Block_copy(v26);
    v23 = *((_QWORD *)this + 11);
    if (v23)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v30[0] = v22;
    v30[1] = v23;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v30);
    if (v23)
      dispatch_release(v23);
    if (v22)
      _Block_release(v22);
    xpc_release(object);
    object = 0;
    PPMHandler::start(**((PPMHandler ***)this + 72));
    v24 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = "Disabled";
      if (a2)
        v25 = "Enabled";
      *(_DWORD *)buf = 136315138;
      v33 = v25;
      _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s PPM", buf, 0xCu);
    }
    xpc_release(v28);
    v28 = 0;
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
    std::__shared_weak_count::__release_weak(v16);
    xpc_release(v5);
    return;
  }
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#E PPM is not supported or PPM Manager is not created properly", buf, 2u);
  }
}

void sub_1BF618AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, char a18, uint64_t a19, xpc_object_t a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendDeviceMaterial_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t *v35;
  uint64_t **v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  NSObject *v44;
  void *p_p;
  _QWORD v46[2];
  xpc_object_t v47;
  void *__p;
  char v49;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB18]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (uint64_t **)((char *)this + 624);
  v8 = (uint64_t *)*((_QWORD *)this + 78);
  v9 = (uint64_t **)((char *)this + 624);
  v10 = (uint64_t **)((char *)this + 624);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((_DWORD *)v8 + 7);
        if (v11 < 2)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_18;
      }
      if (v11)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_18;
      }
    }
    v12 = (uint64_t *)v10;
  }
  else
  {
LABEL_18:
    v12 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v12 + 28) = 1;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v9 = v12;
    v13 = **((_QWORD **)this + 77);
    v14 = v12;
    if (v13)
    {
      *((_QWORD *)this + 77) = v13;
      v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v14);
    ++*((_QWORD *)this + 79);
  }
  v15 = xpc_int64_create(*((unsigned int *)v12 + 8));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFB10], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = *v7;
  v18 = (uint64_t **)((char *)this + 624);
  v19 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v20 = *((_DWORD *)v17 + 7);
        if (v20 < 3)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 2)
        break;
      v17 = v19[1];
      if (!v17)
      {
        v18 = v19 + 1;
        goto LABEL_31;
      }
    }
    v21 = (uint64_t *)v19;
  }
  else
  {
LABEL_31:
    v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 2;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *v18 = v21;
    v22 = **((_QWORD **)this + 77);
    v23 = v21;
    if (v22)
    {
      *((_QWORD *)this + 77) = v22;
      v23 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v23);
    ++*((_QWORD *)this + 79);
  }
  v24 = xpc_int64_create(*((unsigned int *)v21 + 8));
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFAE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = *v7;
  v27 = (uint64_t **)((char *)this + 624);
  v28 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v26;
        v29 = *((_DWORD *)v26 + 7);
        if (v29 < 4)
          break;
        v26 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_44;
      }
      if (v29 == 3)
        break;
      v26 = v28[1];
      if (!v26)
      {
        v27 = v28 + 1;
        goto LABEL_44;
      }
    }
    v30 = (uint64_t *)v28;
  }
  else
  {
LABEL_44:
    v30 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v30 + 28) = 3;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = (uint64_t)v28;
    *v27 = v30;
    v31 = **((_QWORD **)this + 77);
    v32 = v30;
    if (v31)
    {
      *((_QWORD *)this + 77) = v31;
      v32 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v32);
    ++*((_QWORD *)this + 79);
  }
  v33 = xpc_int64_create(*((unsigned int *)v30 + 8));
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA98], v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = *v7;
  v36 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v35;
        v37 = *((_DWORD *)v35 + 7);
        if (v37 < 5)
          break;
        v35 = *v36;
        v7 = v36;
        if (!*v36)
          goto LABEL_57;
      }
      if (v37 == 4)
        break;
      v35 = v36[1];
      if (!v35)
      {
        v7 = v36 + 1;
        goto LABEL_57;
      }
    }
    v38 = (uint64_t *)v36;
  }
  else
  {
LABEL_57:
    v38 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v38 + 28) = 4;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v7 = v38;
    v39 = **((_QWORD **)this + 77);
    v40 = v38;
    if (v39)
    {
      *((_QWORD *)this + 77) = v39;
      v40 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v40);
    ++*((_QWORD *)this + 79);
  }
  v41 = xpc_int64_create(*((unsigned int *)v38 + 8));
  if (!v41)
    v41 = xpc_null_create();
  v42 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA90], v41);
  v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  v44 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v49 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v52 = p_p;
    _os_log_impl(&dword_1BF566000, v44, OS_LOG_TYPE_DEFAULT, "#I Sending device material: %s\n", buf, 0xCu);
    if (v49 < 0)
      operator delete(__p);
    v42 = xdict;
  }
  v47 = v42;
  if (v42)
  {
    xpc_retain(v42);
  }
  else
  {
    v42 = xpc_null_create();
    v47 = v42;
  }
  v46[0] = 0;
  v46[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v47, (uint64_t)v46);
  xpc_release(v42);
  v47 = 0;
  xpc_release(xdict);
}

void sub_1BF619118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t antenna::Service::Internal::configuration_sync(antenna::Service::Internal *this)
{
  capabilities::txpower *v2;
  BOOL v3;
  capabilities::txpower *v4;
  capabilities::txpower *v5;
  capabilities::radio *v6;
  capabilities::radio *v7;
  capabilities::radio *v8;
  capabilities::radio *v9;
  capabilities::txpower *v10;
  capabilities::txpower *v11;
  capabilities::radio *v12;
  capabilities::txpower *v13;
  capabilities::radio *v14;
  capabilities::radio *v15;
  capabilities::txpower *v16;
  capabilities::txpower *v17;
  uint64_t v18;
  uint64_t **v19;
  char *v20;
  uint64_t **v21;
  uint64_t **v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t **v49;
  char *v50;
  uint64_t **v51;
  uint64_t **v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  char v78;
  uint64_t *v79;
  uint64_t **v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  capabilities::radio *v85;
  config::hw *v86;
  capabilities::abs *v87;
  capabilities::txpower *CPMSVariant;
  capabilities::txpower *v89;
  capabilities::txpower *v90;
  capabilities::txpower *v91;
  uint64_t result;

  *((_DWORD *)this + 49) = capabilities::txpower::supportedControlInput(this);
  v2 = (capabilities::txpower *)capabilities::txpower::operator&();
  if ((_DWORD)v2)
  {
    v2 = (capabilities::txpower *)capabilities::txpower::operator&();
    v3 = (_DWORD)v2 != 0;
  }
  else
  {
    v3 = 0;
  }
  *((_BYTE *)this + 152) = v3;
  v4 = (capabilities::txpower *)capabilities::txpower::supportsMotion(v2);
  *((_BYTE *)this + 153) = (_BYTE)v4;
  v5 = (capabilities::txpower *)capabilities::txpower::supportsAntennaFreeSpaceConfig(v4);
  *((_BYTE *)this + 154) = (_BYTE)v5;
  v6 = (capabilities::radio *)capabilities::txpower::supportsMotionAlways(v5);
  *((_BYTE *)this + 155) = (_BYTE)v6;
  v7 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetection(v6);
  *((_BYTE *)this + 156) = (_BYTE)v7;
  v8 = (capabilities::radio *)capabilities::radio::supportsAccessoryTypeDetectionForRF(v7);
  *((_BYTE *)this + 157) = (_BYTE)v8;
  v9 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetectionForARTD(v8);
  *((_BYTE *)this + 158) = (_BYTE)v9;
  v10 = (capabilities::txpower *)capabilities::radio::supportsAccessoryTypeDetectionForARTD(v9);
  *((_BYTE *)this + 159) = (_BYTE)v10;
  v11 = (capabilities::txpower *)capabilities::txpower::supportsAudioJackReport(v10);
  *((_BYTE *)this + 160) = (_BYTE)v11;
  v12 = (capabilities::radio *)capabilities::txpower::supportsAudioSpeaker(v11);
  *((_BYTE *)this + 161) = (_BYTE)v12;
  v13 = (capabilities::txpower *)capabilities::radio::supportsMESA(v12);
  *((_BYTE *)this + 162) = (_BYTE)v13;
  v14 = (capabilities::radio *)capabilities::txpower::supportsVideoAntennaSwitching(v13);
  *((_BYTE *)this + 163) = (_BYTE)v14;
  v15 = (capabilities::radio *)capabilities::radio::supportsUMTS(v14);
  *((_BYTE *)this + 166) = (_BYTE)v15;
  v16 = (capabilities::txpower *)capabilities::radio::C2KDevice(v15);
  *((_BYTE *)this + 167) = (_BYTE)v16;
  v17 = (capabilities::txpower *)capabilities::txpower::timeoutConfig(v16);
  *((_QWORD *)this + 42) = v17;
  *((_QWORD *)this + 43) = v18;
  *((_QWORD *)this + 58) = 0x7F0000007FLL;
  *((_DWORD *)this + 118) = 0x7FFF;
  v19 = (uint64_t **)((char *)this + 312);
  v20 = (char *)*((_QWORD *)this + 39);
  v21 = (uint64_t **)((char *)this + 312);
  v22 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    v23 = (char *)*((_QWORD *)this + 39);
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v23;
        v24 = *((_DWORD *)v23 + 7);
        if (v24 < 1)
          break;
        v23 = (char *)*v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_11;
      }
      if ((v24 & 0x80000000) == 0)
        break;
      v23 = (char *)v22[1];
      if (!v23)
      {
        v21 = v22 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v25 = (char *)v22;
    v22 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v22 + 7) = 0;
    *((_BYTE *)v22 + 32) = 0;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t *)v25;
    *v21 = (uint64_t *)v22;
    v26 = **((_QWORD **)this + 38);
    v27 = (uint64_t *)v22;
    if (v26)
    {
      *((_QWORD *)this + 38) = v26;
      v27 = *v21;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v27);
    v20 = (char *)*((_QWORD *)this + 39);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v22 + 32) = 0;
  v28 = (uint64_t **)((char *)this + 312);
  v29 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v29 = (uint64_t **)v20;
        v30 = *((_DWORD *)v20 + 7);
        if (v30 < 2)
          break;
        v20 = (char *)*v29;
        v28 = v29;
        if (!*v29)
          goto LABEL_21;
      }
      if (v30 == 1)
        break;
      v20 = (char *)v29[1];
      if (!v20)
      {
        v28 = v29 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v31 = (char *)v29;
    v29 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v29 + 7) = 1;
    *((_BYTE *)v29 + 32) = 0;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t *)v31;
    *v28 = (uint64_t *)v29;
    v32 = **((_QWORD **)this + 38);
    v33 = (uint64_t *)v29;
    if (v32)
    {
      *((_QWORD *)this + 38) = v32;
      v33 = *v28;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v33);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v29 + 32) = 0;
  v34 = *v19;
  v35 = (uint64_t **)((char *)this + 312);
  v36 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    v37 = *v19;
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v37;
        v38 = *((_DWORD *)v37 + 7);
        if (v38 < 4)
          break;
        v37 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_31;
      }
      if (v38 == 3)
        break;
      v37 = v36[1];
      if (!v37)
      {
        v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v39 = (char *)v36;
    v36 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v36 + 7) = 3;
    *((_BYTE *)v36 + 32) = 0;
    *v36 = 0;
    v36[1] = 0;
    v36[2] = (uint64_t *)v39;
    *v35 = (uint64_t *)v36;
    v40 = **((_QWORD **)this + 38);
    v41 = (uint64_t *)v36;
    if (v40)
    {
      *((_QWORD *)this + 38) = v40;
      v41 = *v35;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v41);
    v34 = (uint64_t *)*((_QWORD *)this + 39);
    ++*((_QWORD *)this + 40);
  }
  *((_BYTE *)v36 + 32) = 0;
  v42 = (uint64_t **)((char *)this + 312);
  v43 = (uint64_t **)((char *)this + 312);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        v43 = (uint64_t **)v34;
        v44 = *((_DWORD *)v34 + 7);
        if (v44 < 1)
          break;
        v34 = *v43;
        v42 = v43;
        if (!*v43)
          goto LABEL_41;
      }
      if ((v44 & 0x80000000) == 0)
        break;
      v34 = v43[1];
      if (!v34)
      {
        v42 = v43 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    v45 = (char *)v43;
    v43 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v43 + 7) = 0;
    *((_BYTE *)v43 + 32) = 0;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = (uint64_t *)v45;
    *v42 = (uint64_t *)v43;
    v46 = **((_QWORD **)this + 38);
    v47 = (uint64_t *)v43;
    if (v46)
    {
      *((_QWORD *)this + 38) = v46;
      v47 = *v42;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v47);
    ++*((_QWORD *)this + 40);
  }
  v48 = *((_BYTE *)v43 + 32);
  v49 = (uint64_t **)((char *)this + 288);
  v50 = (char *)*((_QWORD *)this + 36);
  v51 = (uint64_t **)((char *)this + 288);
  v52 = (uint64_t **)((char *)this + 288);
  if (v50)
  {
    while (1)
    {
      while (1)
      {
        v52 = (uint64_t **)v50;
        v53 = *((_DWORD *)v50 + 7);
        if (v53 < 1)
          break;
        v50 = (char *)*v52;
        v51 = v52;
        if (!*v52)
          goto LABEL_51;
      }
      if ((v53 & 0x80000000) == 0)
        break;
      v50 = (char *)v52[1];
      if (!v50)
      {
        v51 = v52 + 1;
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    v54 = (char *)v52;
    v52 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v52 + 7) = 0;
    *((_BYTE *)v52 + 32) = 0;
    *v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t *)v54;
    *v51 = (uint64_t *)v52;
    v55 = **((_QWORD **)this + 35);
    v56 = (uint64_t *)v52;
    if (v55)
    {
      *((_QWORD *)this + 35) = v55;
      v56 = *v51;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v56);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v52 + 32) = v48;
  v57 = *v19;
  v58 = (uint64_t **)((char *)this + 312);
  v59 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        v59 = (uint64_t **)v57;
        v60 = *((_DWORD *)v57 + 7);
        if (v60 < 2)
          break;
        v57 = *v59;
        v58 = v59;
        if (!*v59)
          goto LABEL_61;
      }
      if (v60 == 1)
        break;
      v57 = v59[1];
      if (!v57)
      {
        v58 = v59 + 1;
        goto LABEL_61;
      }
    }
  }
  else
  {
LABEL_61:
    v61 = (char *)v59;
    v59 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v59 + 7) = 1;
    *((_BYTE *)v59 + 32) = 0;
    *v59 = 0;
    v59[1] = 0;
    v59[2] = (uint64_t *)v61;
    *v58 = (uint64_t *)v59;
    v62 = **((_QWORD **)this + 38);
    v63 = (uint64_t *)v59;
    if (v62)
    {
      *((_QWORD *)this + 38) = v62;
      v63 = *v58;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v63);
    ++*((_QWORD *)this + 40);
  }
  v64 = *((_BYTE *)v59 + 32);
  v65 = *v49;
  v66 = (uint64_t **)((char *)this + 288);
  v67 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        v67 = (uint64_t **)v65;
        v68 = *((_DWORD *)v65 + 7);
        if (v68 < 2)
          break;
        v65 = *v67;
        v66 = v67;
        if (!*v67)
          goto LABEL_71;
      }
      if (v68 == 1)
        break;
      v65 = v67[1];
      if (!v65)
      {
        v66 = v67 + 1;
        goto LABEL_71;
      }
    }
  }
  else
  {
LABEL_71:
    v69 = (char *)v67;
    v67 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v67 + 7) = 1;
    *((_BYTE *)v67 + 32) = 0;
    *v67 = 0;
    v67[1] = 0;
    v67[2] = (uint64_t *)v69;
    *v66 = (uint64_t *)v67;
    v70 = **((_QWORD **)this + 35);
    v71 = (uint64_t *)v67;
    if (v70)
    {
      *((_QWORD *)this + 35) = v70;
      v71 = *v66;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v71);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v67 + 32) = v64;
  v72 = *v19;
  v73 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        v73 = (uint64_t **)v72;
        v74 = *((_DWORD *)v72 + 7);
        if (v74 < 4)
          break;
        v72 = *v73;
        v19 = v73;
        if (!*v73)
          goto LABEL_81;
      }
      if (v74 == 3)
        break;
      v72 = v73[1];
      if (!v72)
      {
        v19 = v73 + 1;
        goto LABEL_81;
      }
    }
  }
  else
  {
LABEL_81:
    v75 = (char *)v73;
    v73 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v73 + 7) = 3;
    *((_BYTE *)v73 + 32) = 0;
    *v73 = 0;
    v73[1] = 0;
    v73[2] = (uint64_t *)v75;
    *v19 = (uint64_t *)v73;
    v76 = **((_QWORD **)this + 38);
    v77 = (uint64_t *)v73;
    if (v76)
    {
      *((_QWORD *)this + 38) = v76;
      v77 = *v19;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v77);
    ++*((_QWORD *)this + 40);
  }
  v78 = *((_BYTE *)v73 + 32);
  v79 = *v49;
  v80 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        v80 = (uint64_t **)v79;
        v81 = *((_DWORD *)v79 + 7);
        if (v81 < 4)
          break;
        v79 = *v80;
        v49 = v80;
        if (!*v80)
          goto LABEL_91;
      }
      if (v81 == 3)
        break;
      v79 = v80[1];
      if (!v79)
      {
        v49 = v80 + 1;
        goto LABEL_91;
      }
    }
  }
  else
  {
LABEL_91:
    v82 = (char *)v80;
    v80 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v80 + 7) = 3;
    *((_BYTE *)v80 + 32) = 0;
    *v80 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t *)v82;
    *v49 = (uint64_t *)v80;
    v83 = **((_QWORD **)this + 35);
    v84 = (uint64_t *)v80;
    if (v83)
    {
      *((_QWORD *)this + 35) = v83;
      v84 = *v49;
    }
    v17 = (capabilities::txpower *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v84);
    ++*((_QWORD *)this + 37);
  }
  *((_BYTE *)v80 + 32) = v78;
  *((_QWORD *)this + 26) = 0xFF00000004;
  v85 = (capabilities::radio *)capabilities::txpower::supportsPowerSourceDetection(v17);
  *((_BYTE *)this + 169) = (_BYTE)v85;
  v86 = (config::hw *)capabilities::radio::supportsDeviceMaterial(v85);
  *((_BYTE *)this + 170) = (_BYTE)v86;
  v87 = (capabilities::abs *)config::hw::watch(v86);
  *((_BYTE *)this + 688) = (_BYTE)v87;
  CPMSVariant = (capabilities::txpower *)capabilities::abs::getCPMSVariant(v87);
  *((_BYTE *)this + 664) = (_BYTE)CPMSVariant;
  if ((_DWORD)CPMSVariant)
    v89 = 0;
  else
    v89 = (capabilities::txpower *)capabilities::txpower::supportsPPM(CPMSVariant);
  *((_BYTE *)this + 572) = (_BYTE)v89;
  v90 = (capabilities::txpower *)capabilities::txpower::supportsKeyboard(v89);
  *((_BYTE *)this + 192) = (_BYTE)v90;
  v91 = (capabilities::txpower *)capabilities::txpower::supportedFaceID(v90);
  *((_DWORD *)this + 43) = (_DWORD)v91;
  result = capabilities::txpower::supportsFrontCamera(v91);
  *((_BYTE *)this + 176) = result;
  return result;
}

void antenna::Service::Internal::stopService_sync(antenna::Service::Internal *this)
{
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(this);
}

void antenna::Service::Internal::stopTxPowerCapping_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Stop", buf, 2u);
      v3 = *((_QWORD *)this + 25);
      if (v3)
      {
LABEL_4:
        dispatch_source_cancel(v3);
        v4 = *((_QWORD *)this + 25);
        *((_QWORD *)this + 25) = 0;
        if (v4)
          dispatch_release(v4);
      }
    }
    else
    {
      v3 = *((_QWORD *)this + 25);
      if (v3)
        goto LABEL_4;
    }
    *((_BYTE *)this + 333) = 0;
    antenna::Service::Internal::stopMotionDetection_sync(this);
    antenna::Service::Internal::stopHandDetection_sync(this);
    *((_DWORD *)this + 132) = 255;
  }
  if (*((_BYTE *)this + 153))
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Stop", v8, 2u);
      antenna::Service::Internal::stopMotionDetection_sync(this);
      v6 = *((_QWORD *)this + 45);
      if (v6)
      {
LABEL_10:
        dispatch_source_cancel(v6);
        v7 = *((_QWORD *)this + 45);
        *((_QWORD *)this + 45) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    else
    {
      antenna::Service::Internal::stopMotionDetection_sync(this);
      v6 = *((_QWORD *)this + 45);
      if (v6)
        goto LABEL_10;
    }
    *((_DWORD *)this + 88) = 255;
  }
  *((_BYTE *)this + 216) = 0;
}

void antenna::Service::Internal::stopService(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::startService(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::enterLowPower(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::exitLowPower(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::performCommandDriver_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  xpc_object_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  _QWORD aBlock[6];
  std::__shared_weak_count *v22;
  xpc_object_t v23;
  void *v24;
  dispatch_object_t v25;
  void *v26;
  dispatch_object_t object;
  xpc_object_t v28;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (MEMORY[0x1C3B8CD78](*a2) == MEMORY[0x1E0C812F8])
  {
    v14 = a1[15];
    v28 = (xpc_object_t)*a2;
    if (v28)
      xpc_retain(v28);
    else
      v28 = xpc_null_create();
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_32_0;
    aBlock[4] = a1;
    aBlock[5] = v7;
    v22 = v9;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = (xpc_object_t)*a2;
    v23 = v16;
    if (v16)
    {
      xpc_retain(v16);
      v17 = *(void **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_20;
    }
    else
    {
      v23 = xpc_null_create();
      v17 = *(void **)a3;
      if (!*(_QWORD *)a3)
      {
LABEL_20:
        v18 = *(NSObject **)(a3 + 8);
        v24 = v17;
        v25 = v18;
        if (v18)
          dispatch_retain(v18);
        v19 = _Block_copy(aBlock);
        v20 = a1[11];
        if (v20)
          dispatch_retain(v20);
        v26 = v19;
        object = v20;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(_QWORD *)v14 + 48))(v14, &v28, &v26);
        if (object)
          dispatch_release(object);
        if (v26)
          _Block_release(v26);
        xpc_release(v28);
        v28 = 0;
        if (v25)
          dispatch_release(v25);
        if (v24)
          _Block_release(v24);
        xpc_release(v23);
        v23 = 0;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        goto LABEL_34;
      }
    }
    v17 = _Block_copy(v17);
    goto LABEL_20;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF619F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, uint64_t a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a20);
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback(v21);
  xpc_release(object);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v22 - 72));
  *(_QWORD *)(v22 - 72) = 0;
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void sub_1BF619FF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void antenna::Service::Internal::transmitStateHandler(_QWORD *a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[11];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void antenna::Service::Internal::createTransmitStateDict_sync(int a1@<W1>, int a2@<W2>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  if (a1 == 1)
  {
    v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFBF28]);
    if (!v8)
      v8 = xpc_null_create();
  }
  else
  {
    if (a1)
    {
      *a3 = xpc_null_create();
      goto LABEL_31;
    }
    v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
    if (!v8)
      v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBBD8], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  switch(a2)
  {
    case 0:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD40]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 1:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB90]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 2:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC20]);
      if (!v10)
        v10 = xpc_null_create();
      goto LABEL_27;
    case 3:
      v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA78]);
      if (!v10)
        v10 = xpc_null_create();
LABEL_27:
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBD88], v10);
      v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
      break;
    default:
      break;
  }
  v12 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5F8]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFB680], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  *a3 = v7;
  v7 = xpc_null_create();
LABEL_31:
  xpc_release(v7);
}

void antenna::Service::Internal::startTxPowerCapping_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  Capabilities *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int isCMHandDetectionSupported;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[2];

  if (*((_BYTE *)this + 216) || *((_BYTE *)this + 168))
    return;
  *((_BYTE *)this + 216) = 1;
  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18[0]) = 0;
      _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Start", (uint8_t *)v18, 2u);
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      v3 = (Capabilities *)unk_1ED70F1F8;
      if (!unk_1ED70F1F8)
      {
LABEL_7:
        v4 = operator new(1uLL);
        v5 = operator new(0x20uLL);
        *v5 = off_1E7922580;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = v4;
        v6 = (std::__shared_weak_count *)off_1ED70F200;
        unk_1ED70F1F8 = v4;
        off_1ED70F200 = v5;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 = (Capabilities *)unk_1ED70F1F8;
      }
    }
    else
    {
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      v3 = (Capabilities *)unk_1ED70F1F8;
      if (!unk_1ED70F1F8)
        goto LABEL_7;
    }
    v9 = (std::__shared_weak_count *)off_1ED70F200;
    v18[0] = v3;
    v18[1] = off_1ED70F200;
    if (off_1ED70F200)
    {
      v10 = (unint64_t *)((char *)off_1ED70F200 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
    isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v3);
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (isCMHandDetectionSupported)
    {
      antenna::Service::Internal::processHandDetection_sync(this);
      antenna::Service::Internal::checkStartHandDetection_sync(this);
    }
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
  if (*((_BYTE *)this + 153))
  {
    v15 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18[0]) = 0;
      _os_log_debug_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Start", (uint8_t *)v18, 2u);
      if (*((_BYTE *)this + 248))
      {
LABEL_27:
        v16 = *((_QWORD *)this + 45);
        if (!v16)
          goto LABEL_35;
        goto LABEL_33;
      }
    }
    else if (*((_BYTE *)this + 248))
    {
      goto LABEL_27;
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
    v16 = *((_QWORD *)this + 45);
    if (!v16)
    {
LABEL_35:
      antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
      antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
      return;
    }
LABEL_33:
    dispatch_source_cancel(v16);
    v17 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v17)
      dispatch_release(v17);
    goto LABEL_35;
  }
}

void sub_1BF61A774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF61A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::processHandDetection_sync(antenna::Service::Internal *this)
{
  Capabilities *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int isCMHandDetectionSupported;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  const char **v15;
  int v16;
  const char *v17;
  size_t v18;
  NSObject *v19;
  _BOOL4 isHandednessCondition;
  NSObject *v21;
  _BOOL4 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (Capabilities *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7922580;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v3;
    off_1ED70F200 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (Capabilities *)unk_1ED70F1F8;
  }
  v8 = (std::__shared_weak_count *)off_1ED70F200;
  *(_QWORD *)&v23 = v2;
  *((_QWORD *)&v23 + 1) = off_1ED70F200;
  if (off_1ED70F200)
  {
    v9 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v2);
  v12 = isCMHandDetectionSupported;
  if (!v8)
    goto LABEL_15;
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v12)
      return;
  }
  else
  {
LABEL_15:
    if (!isCMHandDetectionSupported)
      return;
  }
  v15 = (const char **)((char *)this + 536);
  v16 = *((char *)this + 559);
  v17 = (char *)this + 536;
  if (v16 < 0)
    v17 = *v15;
  v18 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v17, (const char *)*MEMORY[0x1E0CFC120], v18))
  {
    isHandednessCondition = antenna::Service::Internal::isHandednessCondition(this);
    v21 = *((_QWORD *)this + 5);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
    if (isHandednessCondition)
    {
      if (v22)
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEBUG, "#D Handedness condition is met", (uint8_t *)&v23, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, *((_DWORD *)this + 132));
    }
    else
    {
      if (v22)
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEBUG, "#D Handedness condition is not met. Default handedness state is sending.", (uint8_t *)&v23, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, 0);
    }
  }
  else
  {
    v19 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (v16 < 0)
        v15 = (const char **)*v15;
      LODWORD(v23) = 136315138;
      *(_QWORD *)((char *)&v23 + 4) = v15;
      _os_log_debug_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding Mode is %s, and sending is skipped", (uint8_t *)&v23, 0xCu);
    }
  }
}

void sub_1BF61AA40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::checkStartHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t *v18[2];

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (uint64_t *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7922580;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v3;
    off_1ED70F200 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (uint64_t *)unk_1ED70F1F8;
  }
  v8 = (std::__shared_weak_count *)off_1ED70F200;
  v18[0] = v2;
  v18[1] = (uint64_t *)off_1ED70F200;
  if (off_1ED70F200)
  {
    v9 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    v11 = *((_QWORD *)this + 64);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v11)
    {
      if (*((_BYTE *)this + 560))
      {
        v18[0] = **((uint64_t ***)this + 64);
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v18[0], v18);
        v14 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v18[0]) = 0;
          _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Started!", (uint8_t *)v18, 2u);
        }
      }
      else
      {
        v17 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v18[0]) = 0;
          _os_log_debug_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEBUG, "#D Uncovered prox is detected. Set the detection state as default.", (uint8_t *)v18, 2u);
        }
        antenna::Service::Internal::processHandDetection_sync(this);
        antenna::Service::Internal::stopHandDetection_sync(this);
      }
    }
  }
  else if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF61ACCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF61ACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::startTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  uint64_t **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  unsigned int TxPowerCappingForWatch;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unsigned int v27;
  xpc_object_t v28;
  xpc_object_t v29;
  NSObject *v30;
  std::string *v31;
  _QWORD v32[2];
  xpc_object_t object;
  std::string v34;
  uint8_t buf[4];
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (capabilities::txpower::operator&())
  {
    if (!*((_BYTE *)this + 155))
    {
      v2 = (uint64_t **)((char *)this + 288);
      v3 = (char *)*((_QWORD *)this + 36);
      v4 = (uint64_t **)((char *)this + 288);
      v5 = (uint64_t **)((char *)this + 288);
      if (v3)
      {
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v3;
            v6 = *((_DWORD *)v3 + 7);
            if (v6 < 2)
              break;
            v3 = (char *)*v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_10;
          }
          if (v6 == 1)
            break;
          v3 = (char *)v5[1];
          if (!v3)
          {
            v4 = v5 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        v7 = (char *)v5;
        v5 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v5 + 7) = 1;
        *((_BYTE *)v5 + 32) = 0;
        *v5 = 0;
        v5[1] = 0;
        v5[2] = (uint64_t *)v7;
        *v4 = (uint64_t *)v5;
        v8 = **((_QWORD **)this + 35);
        v9 = (uint64_t *)v5;
        if (v8)
        {
          *((_QWORD *)this + 35) = v8;
          v9 = *v4;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
        ++*((_QWORD *)this + 37);
      }
      if (!*((_BYTE *)v5 + 32))
      {
        v10 = *v2;
        v11 = (uint64_t **)((char *)this + 288);
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v10;
              v12 = *((_DWORD *)v10 + 7);
              if (v12 < 4)
                break;
              v10 = *v11;
              v2 = v11;
              if (!*v11)
                goto LABEL_21;
            }
            if (v12 == 3)
              break;
            v10 = v11[1];
            if (!v10)
            {
              v2 = v11 + 1;
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          v13 = (char *)v11;
          v11 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v11 + 7) = 3;
          *((_BYTE *)v11 + 32) = 0;
          *v11 = 0;
          v11[1] = 0;
          v11[2] = (uint64_t *)v13;
          *v2 = (uint64_t *)v11;
          v14 = **((_QWORD **)this + 35);
          v15 = (uint64_t *)v11;
          if (v14)
          {
            *((_QWORD *)this + 35) = v14;
            v15 = *v2;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v15);
          ++*((_QWORD *)this + 37);
        }
        if (!*((_BYTE *)v11 + 32))
        {
          antenna::Service::Internal::stopMotionDetection_sync(this);
          v16 = *((_QWORD *)this + 25);
          if (!v16)
            goto LABEL_29;
          goto LABEL_27;
        }
      }
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
  }
  v16 = *((_QWORD *)this + 25);
  if (!v16)
    goto LABEL_29;
LABEL_27:
  dispatch_source_cancel(v16);
  v16 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v16)
    dispatch_release(v16);
LABEL_29:
  if (config::hw::watch((config::hw *)v16))
  {
    TxPowerCappingForWatch = antenna::Service::Internal::getTxPowerCappingForWatch(this);
  }
  else if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
         || (TxPowerCappingForWatch = *((_DWORD *)this + 52), TxPowerCappingForWatch == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      TxPowerCappingForWatch = 2;
    }
    else
    {
      TxPowerCappingForWatch = 3;
    }
  }
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v18) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB20]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFA68], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_BOOL_create(1);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFB48], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(TxPowerCappingForWatch);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFBE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    memset(&v34, 0, sizeof(v34));
    if (TxPowerCappingForWatch - 1 < 3)
      std::string::__assign_external(&v34, **((const std::string::value_type ***)&unk_1E79181A0 + (int)(TxPowerCappingForWatch - 1)));
    v31 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v36 = v31;
    _os_log_debug_impl(&dword_1BF566000, v26, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping: %s", buf, 0xCu);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 154))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (v27 = *((_DWORD *)this + 53), v27 == 255))
    {
      v27 = antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
    }
    v28 = xpc_int64_create(v27);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0DDFC18], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    v30 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v34.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v27;
      _os_log_debug_impl(&dword_1BF566000, v30, OS_LOG_TYPE_DEBUG, "#D iPhone Tx Power Free Space: 0x%x", (uint8_t *)&v34, 8u);
      object = v19;
      if (v19)
        goto LABEL_66;
LABEL_74:
      object = xpc_null_create();
      goto LABEL_75;
    }
  }
  object = v19;
  if (!v19)
    goto LABEL_74;
LABEL_66:
  xpc_retain(v19);
LABEL_75:
  v32[0] = 0;
  v32[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v32);
  xpc_release(object);
  object = 0;
  antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(this);
  if (*((_BYTE *)this + 332) && *((_BYTE *)this + 333))
  {
    AudioServicesPlaySystemSound(0x452u);
    *((_BYTE *)this + 333) = 0;
  }
  xpc_release(v19);
}

void sub_1BF61B2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotion_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  if (*((_BYTE *)this + 248))
  {
    v2 = *((_QWORD *)this + 45);
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    antenna::Service::Internal::startMotionDetection_sync(this);
    v2 = *((_QWORD *)this + 45);
    if (!v2)
      goto LABEL_3;
  }
  dispatch_source_cancel(v2);
  v3 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
  {
    dispatch_release(v3);
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
    return;
  }
LABEL_3:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

void antenna::Service::Internal::stopTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
  *((_BYTE *)this + 333) = 0;
  antenna::Service::Internal::stopMotionDetection_sync(this);
  antenna::Service::Internal::stopHandDetection_sync(this);
  *((_DWORD *)this + 132) = 255;
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotion_sync(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;

  antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)this);
  v2 = this[45];
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = this[45];
    this[45] = 0;
    if (v3)
      dispatch_release(v3);
  }
  *((_DWORD *)this + 88) = 255;
}

unint64_t antenna::Service::Internal::systemElapsedTime(antenna::Service::Internal *this)
{
  return ctu::Clock::now_in_nanoseconds(this) / 0xF4240uLL;
}

uint64_t antenna::Service::Internal::systemTimeDifference(antenna::Service::Internal *this, int a2, int a3)
{
  return (a2 - a3);
}

uint64_t antenna::Service::Internal::lqmState_sync(uint64_t a1, int a2)
{
  if (a2 == 100)
    return 2;
  else
    return a2 == 50;
}

void antenna::Service::Internal::setLinkQualityMetric_sync(uint64_t a1, int a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 162))
  {
    if (a2 == 100)
      v2 = 2;
    else
      v2 = a2 == 50;
    *(_DWORD *)(a1 + 484) = v2;
    v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_debug_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEBUG, "#D fLQMState has set to %d", (uint8_t *)v4, 8u);
    }
  }
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t value;
  unsigned int v6;
  int v7;
  const char *v8;
  xpc_object_t v9;
  unsigned int v10;
  int v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t object;

  v4 = (const char *)*MEMORY[0x1E0CFB308];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB308]))
  {
    value = xpc_dictionary_get_value(*a2, v4);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v6 <= 0x3E8)
      v7 = v6;
    else
      v7 = 0x7FFF;
    *((_DWORD *)this + 116) = v7;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB4C8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB4C8]))
  {
    v9 = xpc_dictionary_get_value(*a2, v8);
    object = v9;
    if (v9)
      xpc_retain(v9);
    else
      object = xpc_null_create();
    v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v10 <= 0x3E8)
      v11 = v10;
    else
      v11 = 0x7FFF;
    *((_DWORD *)this + 117) = v11;
  }
  v12 = (const char *)*MEMORY[0x1E0CFB120];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB120]))
  {
    v13 = xpc_dictionary_get_value(*a2, v12);
    object = v13;
    if (v13)
      xpc_retain(v13);
    else
      object = xpc_null_create();
    *((_DWORD *)this + 118) = (unsigned __int16)xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
}

void sub_1BF61B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

unint64_t antenna::Service::Internal::calculateTxValue(antenna::Service::Internal *this, int a2, int a3)
{
  unint64_t result;

  result = 0x7FFFLL;
  if (a3 != 0x7FFF)
    return (a3 * a2) / 0x64uLL;
  return result;
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this)
{
  if (!*((_BYTE *)this + 664))
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
}

void antenna::Service::Internal::callActive(antenna::Service::Internal *this)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
  }
  *((_BYTE *)this + 165) = 1;
  if (*((_BYTE *)this + 162))
  {
    v3 = *((_QWORD *)this + 47);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 72))
        ctu::iokit::Controller::setMesaQuality();
    }
  }
}

void antenna::Service::Internal::callInactive(antenna::Service::Internal *this)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
  }
  *((_BYTE *)this + 165) = 0;
  if (*((_BYTE *)this + 162))
  {
    v3 = *((_QWORD *)this + 47);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 72))
        ctu::iokit::Controller::setMesaQuality();
    }
  }
}

BOOL antenna::Service::Internal::isAudioReceiverOutputOnlyActive(antenna::Service::Internal *this)
{
  int **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t **v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v18;
  int **v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;

  v2 = (int **)((char *)this + 288);
  v3 = (char *)*((_QWORD *)this + 36);
  v4 = (uint64_t **)((char *)this + 288);
  v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v3;
        v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1)
          break;
        v3 = (char *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if ((v6 & 0x80000000) == 0)
        break;
      v3 = (char *)v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)v5;
    v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((_BYTE *)v5 + 32) = 0;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    *v4 = (uint64_t *)v5;
    v8 = **((_QWORD **)this + 35);
    v9 = (uint64_t *)v5;
    if (v8)
    {
      *((_QWORD *)this + 35) = v8;
      v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((_QWORD *)this + 37);
  }
  if (!*((_BYTE *)v5 + 32))
    return 0;
  v10 = *v2;
  v11 = (uint64_t **)v2;
  v12 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = v10;
        v13 = v10[7];
        if (v13 < 2)
          break;
        v10 = (int *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 == 1)
        break;
      v10 = (int *)v12[1];
      if (!v10)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v14 = v12;
    v12 = operator new(0x28uLL);
    *((_DWORD *)v12 + 7) = 1;
    *((_BYTE *)v12 + 32) = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = v12;
    v15 = **((_QWORD **)this + 35);
    v16 = v12;
    if (v15)
    {
      *((_QWORD *)this + 35) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v16);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v12 + 32))
    return 0;
  v18 = *v2;
  v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v19 = (int **)v18;
        v20 = v18[7];
        if (v20 < 4)
          break;
        v18 = *v19;
        v2 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 3)
        break;
      v18 = v19[1];
      if (!v18)
      {
        v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v21 = (int *)v19;
    v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((_BYTE *)v19 + 32) = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v21;
    *v2 = (int *)v19;
    v22 = **((_QWORD **)this + 35);
    v23 = (uint64_t *)v19;
    if (v22)
    {
      *((_QWORD *)this + 35) = v22;
      v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((_QWORD *)this + 37);
  }
  return *((_BYTE *)v19 + 32) == 0;
}

BOOL antenna::Service::Internal::isAudioAnyOutputActive(antenna::Service::Internal *this)
{
  int **v2;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v11;
  uint64_t **v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int *v18;
  int **v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;

  v2 = (int **)((char *)this + 288);
  v3 = (char *)*((_QWORD *)this + 36);
  v4 = (uint64_t **)((char *)this + 288);
  v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v3;
        v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1)
          break;
        v3 = (char *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if ((v6 & 0x80000000) == 0)
        break;
      v3 = (char *)v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)v5;
    v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((_BYTE *)v5 + 32) = 0;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    *v4 = (uint64_t *)v5;
    v8 = **((_QWORD **)this + 35);
    v9 = (uint64_t *)v5;
    if (v8)
    {
      *((_QWORD *)this + 35) = v8;
      v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v5 + 32))
    return 1;
  v11 = *v2;
  v12 = (uint64_t **)v2;
  v13 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v13 = v11;
        v14 = v11[7];
        if (v14 < 2)
          break;
        v11 = (int *)*v13;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_20;
      }
      if (v14 == 1)
        break;
      v11 = (int *)v13[1];
      if (!v11)
      {
        v12 = (uint64_t **)(v13 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    v15 = v13;
    v13 = operator new(0x28uLL);
    *((_DWORD *)v13 + 7) = 1;
    *((_BYTE *)v13 + 32) = 0;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    *v12 = v13;
    v16 = **((_QWORD **)this + 35);
    v17 = v13;
    if (v16)
    {
      *((_QWORD *)this + 35) = v16;
      v17 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v17);
    ++*((_QWORD *)this + 37);
  }
  if (*((_BYTE *)v13 + 32))
    return 1;
  v18 = *v2;
  v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        v19 = (int **)v18;
        v20 = v18[7];
        if (v20 < 4)
          break;
        v18 = *v19;
        v2 = v19;
        if (!*v19)
          goto LABEL_31;
      }
      if (v20 == 3)
        break;
      v18 = v19[1];
      if (!v18)
      {
        v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    v21 = (int *)v19;
    v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((_BYTE *)v19 + 32) = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v21;
    *v2 = (int *)v19;
    v22 = **((_QWORD **)this + 35);
    v23 = (uint64_t *)v19;
    if (v22)
    {
      *((_QWORD *)this + 35) = v22;
      v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((_QWORD *)this + 37);
  }
  return *((_BYTE *)v19 + 32) != 0;
}

uint64_t antenna::Service::Internal::isAudioOtherOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 2)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if (v5 == 1)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 1;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioSpeakerOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 4)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if (v5 == 3)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 3;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioReceiverOutputActive(antenna::Service::Internal *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 7);
        if (v5 < 1)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if ((v5 & 0x80000000) == 0)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 288);
    v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 0;
    *((_BYTE *)v4 + 32) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 35);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 35) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((_QWORD *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::setTxPowerPlayAlert_sync(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;

  *(_BYTE *)(result + 333) = 0;
  if (!*(_BYTE *)(result + 332))
    return result;
  v3 = result;
  result = TelephonyUtilIsInternalBuild();
  if ((result & 1) != 0 || (result = TelephonyUtilIsCarrierBuild(), (_DWORD)result))
  {
    v4 = *(_DWORD *)(v3 + 208);
    if (v4 != 4)
    {
LABEL_7:
      if (v4 == a2)
        return result;
      goto LABEL_8;
    }
  }
  result = antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)v3);
  if ((result & 1) != 0
    || (result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (_DWORD)result)
    && !*(_DWORD *)(v3 + 252)
    || *(_BYTE *)(v3 + 155)
    && (result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (result & 1) == 0)
    && !*(_DWORD *)(v3 + 252))
  {
    v4 = 2;
    goto LABEL_7;
  }
  if (a2 != 3)
LABEL_8:
    *(_BYTE *)(v3 + 333) = 1;
  return result;
}

uint64_t antenna::Service::Internal::getTxPowerCappingForIPhone(antenna::Service::Internal *this)
{
  uint64_t result;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (result = *((unsigned int *)this + 52), (_DWORD)result == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL antenna::Service::Internal::isMotionOnTablePosition(antenna::Service::Internal *this)
{
  return *((_DWORD *)this + 63) == 0;
}

void antenna::Service::Internal::stopTxMotionCallbackTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

void antenna::Service::Internal::startTxMotionCallbackTimer_sync(dispatch_queue_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  std::__shared_weak_count *v5;
  dispatch_queue_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, this[11]);
  v3 = this[32];
  this[32] = v2;
  if (v3)
  {
    dispatch_release(v3);
    v2 = this[32];
  }
  v4 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = this[32];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_15;
  handler[4] = this;
  handler[5] = v6;
  v16 = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v13, handler);
  dispatch_activate(this[32]);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  antenna::Service::Internal *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (antenna::Service::Internal *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF61C2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion callback missing", v7, 2u);
  }
  v3 = *((_QWORD *)this + 32);
  if (v3)
  {
    dispatch_source_cancel(v3);
    v4 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v4)
      dispatch_release(v4);
  }
  ++*((_QWORD *)this + 33);
  *((_DWORD *)this + 63) = 1;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
  if (*((_BYTE *)this + 153))
  {
    if (*((_BYTE *)this + 248))
    {
      v5 = *((_QWORD *)this + 45);
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      v5 = *((_QWORD *)this + 45);
      if (!v5)
      {
LABEL_13:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    dispatch_source_cancel(v5);
    v6 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v6)
      dispatch_release(v6);
    goto LABEL_13;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void antenna::Service::Internal::setMotionThresholds(CMOnBodyDelegate **a1, ctu **a2)
{
  void *v4;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  CFTypeRef cf;

  if (a1[29] && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)a1))
  {
    ctu::xpc_to_cf(*a2, v4);
    v5 = cf;
    if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
    {
      CFRetain(cf);
      v7 = cf;
    }
    else
    {
      v5 = 0;
      v7 = cf;
      if (!cf)
        goto LABEL_8;
    }
    CFRelease(v7);
LABEL_8:
    CMOnBodyDelegate::setThresholds(a1[29], v5);
    if (v5)
      CFRelease(v5);
  }
}

void sub_1BF61C4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF61C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::startMotionDetection_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  CMOnBodyDelegate *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v2 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v2)
      dispatch_release(v2);
  }
  if (*((_BYTE *)this + 216))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2))
    {
      if (!*((_BYTE *)this + 248))
      {
        v3 = (CMOnBodyDelegate *)*((_QWORD *)this + 29);
        if (v3)
        {
          *((_BYTE *)this + 248) = 1;
          *((_DWORD *)this + 63) = 1;
          CMOnBodyDelegate::startMotionDetection(v3);
          antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
          v4 = *((_QWORD *)this + 5);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v5 = 0;
            _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been started!", v5, 2u);
          }
        }
      }
    }
  }
}

void antenna::Service::Internal::stopMotionDetection_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v2 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (v2)
      dispatch_release(v2);
  }
  if (*((_BYTE *)this + 248)
    && *((_QWORD *)this + 29)
    && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2)
    && (*((_BYTE *)this + 248) = 0,
        CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 29)),
        *((_QWORD *)this + 33) = 0,
        v3 = *((_QWORD *)this + 5),
        os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been stopped!", v4, 2u);
    *((_DWORD *)this + 63) = 1;
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
  }
}

void antenna::Service::Internal::motionDetectCallback_sync(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  if (!*(_BYTE *)(a1 + 248))
    return;
  v4 = *(NSObject **)(a1 + 256);
  if (v4)
  {
    dispatch_source_cancel(v4);
    v5 = *(NSObject **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v5)
      dispatch_release(v5);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_10:
      if (!*(_BYTE *)(a1 + 152))
        goto LABEL_23;
      goto LABEL_11;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(_BYTE *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    v6 = 2;
    goto LABEL_10;
  }
  v6 = 3;
  if (!*(_BYTE *)(a1 + 152))
    goto LABEL_23;
LABEL_11:
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_23:
      v7 = *(NSObject **)(a1 + 40);
      v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (a2)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(_BYTE *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    v6 = 2;
    v7 = *(NSObject **)(a1 + 40);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
    {
LABEL_24:
      if (!v8)
      {
        v9 = 1;
        if (!*(_BYTE *)(a1 + 152))
          goto LABEL_46;
LABEL_35:
        *(_BYTE *)(a1 + 333) = 0;
        if (*(_BYTE *)(a1 + 332))
        {
          if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
            || (v10 = *(_DWORD *)(a1 + 208), v10 == 4))
          {
            if (!antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
              && (!antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252))
              && (!*(_BYTE *)(a1 + 155)
               || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252)))
            {
              if (v6 == 3)
                goto LABEL_43;
              goto LABEL_42;
            }
            v10 = 2;
          }
          if (v10 != v6)
LABEL_42:
            *(_BYTE *)(a1 + 333) = 1;
        }
LABEL_43:
        if (capabilities::txpower::operator&() && v9 != *(_DWORD *)(a1 + 252))
          antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)a1);
        goto LABEL_46;
      }
      *(_WORD *)v13 = 0;
      _os_log_debug_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEBUG, "#D Motion Other Position Detected.", v13, 2u);
      v9 = 1;
      if (*(_BYTE *)(a1 + 152))
        goto LABEL_35;
      goto LABEL_46;
    }
  }
  else
  {
    v6 = 3;
    v7 = *(NSObject **)(a1 + 40);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
      goto LABEL_24;
  }
LABEL_33:
  if (!v8)
  {
    v9 = 0;
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_46;
    goto LABEL_35;
  }
  *(_WORD *)buf = 0;
  _os_log_debug_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEBUG, "#D Motion On Table Detected.", buf, 2u);
  v9 = 0;
  if (*(_BYTE *)(a1 + 152))
    goto LABEL_35;
LABEL_46:
  if (*(_BYTE *)(a1 + 153) && *(_DWORD *)(a1 + 252) != v9)
  {
    if (!*(_BYTE *)(a1 + 248))
      antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)a1);
    v11 = *(NSObject **)(a1 + 360);
    if (v11)
    {
      dispatch_source_cancel(v11);
      v12 = *(NSObject **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = 0;
      if (v12)
        dispatch_release(v12);
    }
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)a1);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)a1);
  }
  *(_DWORD *)(a1 + 252) = v9;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)a1);
}

void antenna::Service::Internal::sendMotionHandDetectionState_sync(_QWORD *a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  _QWORD v11[2];
  xpc_object_t object;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB78]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFA68], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create((unsigned __int16)a2);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0DDFB30], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  v11[0] = 0;
  v11[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(a1, &object, (uint64_t)v11);
  xpc_release(object);
  object = 0;
  v10 = a1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Sent Hand Detection: %d", buf, 8u);
  }
  xpc_release(v5);
}

void sub_1BF61CB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL antenna::Service::Internal::isHandednessCondition(antenna::Service::Internal *this)
{
  NSObject *v2;
  int v3;
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 216);
    v4 = (char *)*((_QWORD *)this + 36);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = *((_DWORD *)v4 + 7);
          if (v7 < 1)
            break;
          v4 = (char *)*v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if ((v7 & 0x80000000) == 0)
          break;
        v4 = (char *)v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v5 = (uint64_t **)((char *)this + 288);
      v6 = (uint64_t **)((char *)this + 288);
LABEL_9:
      v8 = (char *)v6;
      v6 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v6 + 7) = 0;
      *((_BYTE *)v6 + 32) = 0;
      *v6 = 0;
      v6[1] = 0;
      v6[2] = (uint64_t *)v8;
      *v5 = (uint64_t *)v6;
      v9 = **((_QWORD **)this + 35);
      v10 = (uint64_t *)v6;
      if (v9)
      {
        *((_QWORD *)this + 35) = v9;
        v10 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v10);
      ++*((_QWORD *)this + 37);
    }
    v11 = *((unsigned __int8 *)v6 + 32);
    v12 = *((_DWORD *)this + 63);
    v13 = *((unsigned __int8 *)this + 560);
    v22[0] = 67109888;
    v22[1] = v3;
    v23 = 1024;
    v24 = v11;
    v25 = 1024;
    v26 = v12;
    v27 = 1024;
    v28 = v13;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I HandedCondition: fTxPowerTransmitStarted: %u, isAudioReceiverOutputActive(): %u, fMotionState: %u, fHandDetectionProxCovered: %u", (uint8_t *)v22, 0x1Au);
  }
  if (!*((_BYTE *)this + 216))
    return 0;
  v14 = (char *)*((_QWORD *)this + 36);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v14;
        v17 = *((_DWORD *)v14 + 7);
        if (v17 < 1)
          break;
        v14 = (char *)*v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_21;
      }
      if ((v17 & 0x80000000) == 0)
        break;
      v14 = (char *)v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_21;
      }
    }
    if (!*((_BYTE *)v16 + 32))
      return 0;
  }
  else
  {
    v15 = (uint64_t **)((char *)this + 288);
    v16 = (uint64_t **)((char *)this + 288);
LABEL_21:
    v18 = operator new(0x28uLL);
    v18[7] = 0;
    *((_BYTE *)v18 + 32) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = (uint64_t *)v18;
    v19 = **((_QWORD **)this + 35);
    v20 = (uint64_t *)v18;
    if (v19)
    {
      *((_QWORD *)this + 35) = v19;
      v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v20);
    ++*((_QWORD *)this + 37);
    if (!*((_BYTE *)v18 + 32))
      return 0;
  }
  return *((_DWORD *)this + 63) && *((_BYTE *)this + 560);
}

void antenna::Service::Internal::handDetectCallback(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _DWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = a1;
  v8[2] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void antenna::Service::Internal::stopHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17[2];

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v2 = (uint64_t *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v3 = operator new(1uLL);
    v4 = operator new(0x20uLL);
    *v4 = off_1E7922580;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v3;
    off_1ED70F200 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 = (uint64_t *)unk_1ED70F1F8;
  }
  v8 = (std::__shared_weak_count *)off_1ED70F200;
  v17[0] = v2;
  v17[1] = (uint64_t *)off_1ED70F200;
  if (off_1ED70F200)
  {
    v9 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    v11 = *((_QWORD *)this + 64);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v11)
    {
      v17[0] = **((uint64_t ***)this + 64);
      ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v17[0], v17);
      v14 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v17[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Stopped!", (uint8_t *)v17, 2u);
      }
    }
  }
  else if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF61D0CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF61D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::stopTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

uint64_t antenna::Service::Internal::getTxPowerCappingForWatch(antenna::Service::Internal *this)
{
  uint64_t result;
  char *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (result = *((unsigned int *)this + 52), (_DWORD)result == 4))
  {
    v3 = (char *)*((_QWORD *)this + 36);
    if (v3)
    {
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t **)v3;
          v6 = *((_DWORD *)v3 + 7);
          if (v6 < 4)
            break;
          v3 = (char *)*v5;
          v4 = v5;
          if (!*v5)
            goto LABEL_11;
        }
        if (v6 == 3)
          break;
        v3 = (char *)v5[1];
        if (!v3)
        {
          v4 = v5 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v4 = (uint64_t **)((char *)this + 288);
      v5 = (uint64_t **)((char *)this + 288);
LABEL_11:
      v7 = (char *)v5;
      v5 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v5 + 7) = 3;
      *((_BYTE *)v5 + 32) = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t *)v7;
      *v4 = (uint64_t *)v5;
      v8 = **((_QWORD **)this + 35);
      v9 = (uint64_t *)v5;
      if (v8)
      {
        *((_QWORD *)this + 35) = v8;
        v9 = *v4;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
      ++*((_QWORD *)this + 37);
    }
    result = 2;
    if (*((_BYTE *)v5 + 32))
    {
      if (*((_BYTE *)this + 165))
        return 3;
      else
        return 2;
    }
  }
  return result;
}

std::string *antenna::Service::Internal::getTxPowerCappingIPhoneModeString_sync@<X0>(_DWORD *a1@<X1>, std::string *a2@<X8>)
{
  int v3;
  std::string *result;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1 - 1;
  if (v3 < 4)
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E79181D8 + v3));
  return result;
}

void sub_1BF61D28C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t antenna::Service::Internal::getTxPowerCappingAntennaFreeSpaceMode(antenna::Service::Internal *this)
{
  uint64_t result;

  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  result = *((unsigned int *)this + 53);
  if ((_DWORD)result == 255)
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  return result;
}

void antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_time_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD handler[6];
  std::__shared_weak_count *v18;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v3)
      dispatch_release(v3);
  }
  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
  v5 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v4;
  if (v5)
  {
    dispatch_release(v5);
    v4 = *((_QWORD *)this + 25);
  }
  v6 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v7 || (v8 = *((_QWORD *)this + 9), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v15 = *((_QWORD *)this + 25);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_4_1;
  handler[4] = this;
  handler[5] = v8;
  v18 = v10;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v15, handler);
  dispatch_activate(*((dispatch_object_t *)this + 25));
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v10);
}

void ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  antenna::Service::Internal *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (antenna::Service::Internal *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *((_BYTE *)v3 + 216))
        antenna::Service::Internal::startTxPowerCappingIPhone_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF61D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleTxPowerCappingIPhoneTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (*((_BYTE *)this + 216))
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v4;
  const void **v5;
  const void **v6;
  int v7;
  size_t v8;
  const void *v9;
  const void *v10;
  const void **v11;
  const void *v12;
  size_t v13;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  size_t v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  size_t v31;
  const void *v32;
  int v33;
  xpc_object_t object;
  const void *__s1[3];

  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0E8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v4);
  xpc_release(object);
  if (SHIBYTE(__s1[2]) >= 0)
    v5 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v5 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) >= 0)
    v6 = __s1;
  else
    v6 = (const void **)__s1[0];
  for (; v6 != v5; v6 = (const void **)((char *)v6 + 1))
    *(_BYTE *)v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      v7 = 2;
    }
    else
    {
      v7 = 3;
    }
  }
  v8 = strlen((const char *)*MEMORY[0x1E0CFB960]);
  v9 = (const void *)v8;
  v10 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      v11 = __s1;
      v12 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_96:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1)
    goto LABEL_96;
  v11 = (const void **)__s1[0];
  v12 = __s1[1];
LABEL_28:
  if (v12 >= v9)
    v13 = (size_t)v9;
  else
    v13 = (size_t)v12;
  if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFB960], v13) && v12 == v9)
  {
    v20 = 1;
    goto LABEL_78;
  }
  v15 = (const void *)*MEMORY[0x1E0CFC120];
  v16 = (const void *)strlen((const char *)*MEMORY[0x1E0CFC120]);
  v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != (const void *)-1)
    {
      v18 = __s1[1];
      if (__s1[1] >= v16)
        v21 = v16;
      else
        v21 = __s1[1];
      if (memcmp(__s1[0], v15, (size_t)v21))
        goto LABEL_50;
      goto LABEL_48;
    }
LABEL_97:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == (const void *)-1)
    goto LABEL_97;
  v18 = v10;
  if (v10 >= v16)
    v19 = (size_t)v16;
  else
    v19 = (size_t)v10;
  if (memcmp(__s1, v15, v19))
    goto LABEL_50;
LABEL_48:
  if (v18 == v17)
  {
    v20 = 4;
    goto LABEL_78;
  }
LABEL_50:
  v22 = (const void *)*MEMORY[0x1E0CFBA50];
  v23 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBA50]);
  v24 = v23;
  if ((v10 & 0x80) == 0)
  {
    if (v23 != (const void *)-1)
    {
      v25 = v10;
      if (v10 >= v23)
        v26 = (size_t)v23;
      else
        v26 = (size_t)v10;
      if (memcmp(__s1, v22, v26))
        goto LABEL_64;
      goto LABEL_62;
    }
LABEL_98:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == (const void *)-1)
    goto LABEL_98;
  v25 = __s1[1];
  if (__s1[1] >= v23)
    v27 = v23;
  else
    v27 = __s1[1];
  if (!memcmp(__s1[0], v22, (size_t)v27))
  {
LABEL_62:
    if (v25 != v24)
      goto LABEL_64;
    v20 = 3;
LABEL_78:
    *((_DWORD *)this + 52) = v20;
    goto LABEL_79;
  }
LABEL_64:
  v28 = (const void *)*MEMORY[0x1E0CFBA58];
  v29 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBA58]);
  v30 = v29;
  if ((v10 & 0x80) == 0)
  {
    if (v29 != (const void *)-1)
    {
      if (v10 >= v29)
        v31 = (size_t)v29;
      else
        v31 = (size_t)v10;
      if (memcmp(__s1, v28, v31))
        goto LABEL_79;
      goto LABEL_76;
    }
LABEL_99:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == (const void *)-1)
    goto LABEL_99;
  v10 = __s1[1];
  if (__s1[1] >= v29)
    v32 = v29;
  else
    v32 = __s1[1];
  if (!memcmp(__s1[0], v28, (size_t)v32))
  {
LABEL_76:
    if (v10 != v30)
      goto LABEL_79;
    v20 = 2;
    goto LABEL_78;
  }
LABEL_79:
  *((_BYTE *)this + 333) = 0;
  if (!*((_BYTE *)this + 332))
    goto LABEL_87;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v33 = *((_DWORD *)this + 52);
    if (v33 != 4)
    {
LABEL_85:
      if (v33 == v7)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
    || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
    || *((_BYTE *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
  {
    v33 = 2;
    goto LABEL_85;
  }
  if (v7 != 3)
LABEL_86:
    *((_BYTE *)this + 333) = 1;
LABEL_87:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
}

void sub_1BF61D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  int v9;
  std::string *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  std::string v25;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8CD78](*a2) == v6)
  {
    memset(&v25, 0, sizeof(v25));
    v9 = *((_DWORD *)this + 52) - 1;
    if (v9 < 4)
      std::string::__assign_external(&v25, **((const std::string::value_type ***)&unk_1E79181D8 + v9));
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v25;
    else
      v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    v11 = xpc_string_create((const char *)v10);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFC0E8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      v13 = xpc_dictionary_create(0, 0, 0);
      if (v13 || (v13 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v13) == v6)
        {
          xpc_retain(v13);
          v14 = v13;
        }
        else
        {
          v14 = xpc_null_create();
        }
      }
      else
      {
        v14 = xpc_null_create();
        v13 = 0;
      }
      xpc_release(v13);
      if (MEMORY[0x1C3B8CD78](v14) == v6)
      {
        v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFB960]);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBDA8], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
        if (!v17)
          v17 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE20], v17);
        v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        v19 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA50]);
        if (!v19)
          v19 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE28], v19);
        v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA58]);
        if (!v21)
          v21 = xpc_null_create();
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CFBE30], v21);
        v22 = xpc_null_create();
        xpc_release(v21);
        xpc_release(v22);
        if (v14)
        {
          xpc_retain(v14);
          v23 = v14;
        }
        else
        {
          v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC0F0], v23);
        v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
      }
      xpc_release(v14);
    }
  }
}

void sub_1BF61DD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_object_t *v15;
  void *v16;

  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync(antenna::Service::Internal *this, const xpc::object *a2)
{
  const char *v4;
  const void **v5;
  unsigned __int8 v6;
  const void **v7;
  NSObject *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  const void **v12;
  size_t v13;
  size_t v15;
  unint64_t v16;
  size_t v17;
  const void **v18;
  int v19;
  size_t v20;
  const void *v22;
  const void *v23;
  const void *v24;
  unint64_t v25;
  size_t v26;
  const void *v27;
  NSObject *v28;
  const void **v29;
  int v30;
  const void *__s1[3];
  uint8_t buf[4];
  const void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((_BYTE *)this + 154))
  {
    return;
  }
  v5 = __s1;
  memset(__s1, 170, sizeof(__s1));
  xpc::dyn_cast_or_default(a2, (const object *)"", v4);
  v6 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v7 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v7 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) < 0)
    v5 = (const void **)__s1[0];
  if (v5 != v7)
  {
    do
    {
      *(_BYTE *)v5 = __toupper(*(char *)v5);
      v5 = (const void **)((char *)v5 + 1);
    }
    while (v5 != v7);
    v6 = HIBYTE(__s1[2]);
  }
  v8 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v29 = __s1;
    if ((v6 & 0x80u) != 0)
      v29 = (const void **)__s1[0];
    *(_DWORD *)buf = 136315138;
    v33 = v29;
    _os_log_debug_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEBUG, "#D Overridding Free Space as %s", buf, 0xCu);
    v6 = HIBYTE(__s1[2]);
  }
  v9 = strlen((const char *)*MEMORY[0x1E0CFBE08]);
  v10 = v9;
  if ((v6 & 0x80) == 0)
  {
    if (v9 != -1)
    {
      v11 = v6;
      v12 = __s1;
      goto LABEL_18;
    }
LABEL_63:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1)
    goto LABEL_63;
  v12 = (const void **)__s1[0];
  v11 = (size_t)__s1[1];
LABEL_18:
  if (v11 >= v10)
    v13 = v10;
  else
    v13 = v11;
  if (!memcmp(v12, (const void *)*MEMORY[0x1E0CFBE08], v13) && v11 == v10)
  {
    v19 = 0;
LABEL_53:
    *((_DWORD *)this + 53) = v19;
    goto LABEL_54;
  }
  v15 = strlen((const char *)*MEMORY[0x1E0CFBF90]);
  v16 = v15;
  if ((v6 & 0x80) == 0)
  {
    if (v15 != -1)
    {
      v17 = v6;
      v18 = __s1;
      goto LABEL_31;
    }
LABEL_64:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1)
    goto LABEL_64;
  v18 = (const void **)__s1[0];
  v17 = (size_t)__s1[1];
LABEL_31:
  if (v17 >= v16)
    v20 = v16;
  else
    v20 = v17;
  if (!memcmp(v18, (const void *)*MEMORY[0x1E0CFBF90], v20) && v17 == v16)
  {
    v19 = 1;
    goto LABEL_53;
  }
  v22 = (const void *)*MEMORY[0x1E0CFBFE8];
  v23 = (const void *)strlen((const char *)*MEMORY[0x1E0CFBFE8]);
  v24 = v23;
  if ((v6 & 0x80) != 0)
  {
    if (v23 != (const void *)-1)
    {
      v25 = (unint64_t)__s1[1];
      if (__s1[1] >= v23)
        v27 = v23;
      else
        v27 = __s1[1];
      if (memcmp(__s1[0], v22, (size_t)v27))
        goto LABEL_54;
      goto LABEL_51;
    }
LABEL_65:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == (const void *)-1)
    goto LABEL_65;
  v25 = v6;
  if (v6 >= (unint64_t)v23)
    v26 = (size_t)v23;
  else
    v26 = v6;
  if (memcmp(__s1, v22, v26))
    goto LABEL_54;
LABEL_51:
  if ((const void *)v25 == v24)
  {
    v19 = 255;
    goto LABEL_53;
  }
LABEL_54:
  v28 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80) == 0)
      return;
    goto LABEL_56;
  }
  v30 = *((_DWORD *)this + 53);
  *(_DWORD *)buf = 67109120;
  LODWORD(v33) = v30;
  _os_log_debug_impl(&dword_1BF566000, v28, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as 0x%x", buf, 8u);
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
LABEL_56:
    operator delete((void *)__s1[0]);
}

void sub_1BF61E108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type **v11;
  NSObject *v12;
  std::string *v13;
  int v14;
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, sizeof(std::string));
  v4 = (const void *)*MEMORY[0x1E0CFBFE8];
  v5 = strlen((const char *)*MEMORY[0x1E0CFBFE8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = v5;
  v7 = a2;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((_BYTE *)this + 154))
  {
    return;
  }
  v10 = *((_DWORD *)this + 53);
  if (v10)
  {
    if (v10 != 1)
      goto LABEL_17;
    v11 = (const std::string::value_type **)MEMORY[0x1E0CFBF90];
  }
  else
  {
    v11 = (const std::string::value_type **)MEMORY[0x1E0CFBE08];
  }
  std::string::__assign_external(a2, *v11);
LABEL_17:
  v12 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = a2;
    else
      v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v14 = 136315138;
    v15 = v13;
    _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_1BF61E2F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::setTxPowerAudioMode_sync(uint64_t **this, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v4;
  const void **v5;
  const void **v6;
  int v7;
  size_t v8;
  const void *v9;
  const void *v10;
  const void **v11;
  const void *v12;
  size_t v13;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  size_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  const void *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  size_t v48;
  const void *v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  _DWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  const void *v60;
  const void *v61;
  const void *v62;
  size_t v63;
  int v64;
  _DWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t **v70;
  int v71;
  _DWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  char v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t **v78;
  int v79;
  _DWORD *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t **v84;
  int v85;
  void *v86;
  uint64_t *v87;
  uint64_t *v88;
  char v89;
  char *v90;
  uint64_t *v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  const void *v96;
  uint64_t *v97;
  uint64_t **v98;
  uint64_t **v99;
  uint64_t *v100;
  int v101;
  _DWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t **v106;
  int v107;
  _DWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  int v112;
  int v113;
  _DWORD *v114;
  uint64_t *v115;
  uint64_t *v116;
  char *v117;
  int v118;
  NSObject *v119;
  xpc_object_t v120;
  uint64_t v121;
  xpc_object_t v122;
  xpc_object_t v123;
  xpc_object_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t **v128;
  int v129;
  void *v130;
  uint64_t *v131;
  uint64_t *v132;
  xpc_object_t v133;
  xpc_object_t v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  int v138;
  void *v139;
  uint64_t *v140;
  uint64_t *v141;
  xpc_object_t v142;
  xpc_object_t v143;
  uint64_t *v144;
  uint64_t **v145;
  int v146;
  void *v147;
  uint64_t *v148;
  uint64_t *v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t v154;
  int v155;
  uint64_t *v156;
  uint64_t **v157;
  uint64_t **v158;
  int v159;
  _DWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  int v163;
  uint64_t *v164;
  uint64_t **v165;
  uint64_t **v166;
  int v167;
  _DWORD *v168;
  uint64_t *v169;
  uint64_t *v170;
  int v171;
  uint64_t *v172;
  uint64_t **v173;
  uint64_t **v174;
  int v175;
  _DWORD *v176;
  uint64_t *v177;
  uint64_t *v178;
  int v179;
  int v180;
  _DWORD *v181;
  uint64_t *v182;
  uint64_t *v183;
  char *v184;
  int v185;
  uint64_t *v186;
  uint64_t *v187;
  xpc_object_t v188;
  const void *__s1[3];
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBF30]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v4);
  xpc_release(object[0]);
  if (SHIBYTE(__s1[2]) >= 0)
    v5 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
  else
    v5 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  if (SHIBYTE(__s1[2]) >= 0)
    v6 = __s1;
  else
    v6 = (const void **)__s1[0];
  for (; v6 != v5; v6 = (const void **)((char *)v6 + 1))
    *(_BYTE *)v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
      || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63)
      || *((_BYTE *)this + 155)
      && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63))
    {
      v7 = 2;
    }
    else
    {
      v7 = 3;
    }
  }
  v8 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  v9 = (const void *)v8;
  v10 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      v11 = __s1;
      v12 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_349:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1)
    goto LABEL_349;
  v11 = (const void **)__s1[0];
  v12 = __s1[1];
LABEL_28:
  if (v12 >= v9)
    v13 = (size_t)v9;
  else
    v13 = (size_t)v12;
  if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFC120], v13) && v12 == v9)
  {
    *((_DWORD *)this + 82) = 0;
    v20 = this + 39;
    v21 = this[39];
    v22 = this + 39;
    v23 = this + 39;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v23 = (uint64_t **)v21;
          v24 = *((_DWORD *)v21 + 7);
          if (v24 < 1)
            break;
          v21 = *v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_49;
        }
        if ((v24 & 0x80000000) == 0)
          break;
        v21 = v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_49;
        }
      }
      v28 = *((_BYTE *)v23 + 32);
      v29 = this + 36;
      v30 = this[36];
      v31 = this + 36;
      v32 = this + 36;
      if (v30)
        goto LABEL_104;
    }
    else
    {
LABEL_49:
      v25 = operator new(0x28uLL);
      v25[7] = 0;
      *((_BYTE *)v25 + 32) = 0;
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = v23;
      *v22 = (uint64_t *)v25;
      v26 = (uint64_t *)*this[38];
      v27 = (uint64_t *)v25;
      if (v26)
      {
        this[38] = v26;
        v27 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v27);
      this[40] = (uint64_t *)((char *)this[40] + 1);
      v28 = *((_BYTE *)v25 + 32);
      v29 = this + 36;
      v30 = this[36];
      v31 = this + 36;
      v32 = this + 36;
      if (v30)
      {
        while (1)
        {
LABEL_104:
          while (1)
          {
            v32 = (uint64_t **)v30;
            v64 = *((_DWORD *)v30 + 7);
            if (v64 < 1)
              break;
            v30 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_108;
          }
          if ((v64 & 0x80000000) == 0)
            break;
          v30 = v32[1];
          if (!v30)
          {
            v31 = v32 + 1;
            goto LABEL_108;
          }
        }
        *((_BYTE *)v32 + 32) = v28;
        v68 = *v20;
        v69 = this + 39;
        v70 = this + 39;
        if (*v20)
          goto LABEL_115;
        goto LABEL_119;
      }
    }
LABEL_108:
    v65 = operator new(0x28uLL);
    v65[7] = 0;
    *((_BYTE *)v65 + 32) = 0;
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 1) = 0;
    *((_QWORD *)v65 + 2) = v32;
    *v31 = (uint64_t *)v65;
    v66 = (uint64_t *)*this[35];
    v67 = (uint64_t *)v65;
    if (v66)
    {
      this[35] = v66;
      v67 = *v31;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v67);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v65 + 32) = v28;
    v68 = *v20;
    v69 = this + 39;
    v70 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_115:
        while (1)
        {
          v70 = (uint64_t **)v68;
          v71 = *((_DWORD *)v68 + 7);
          if (v71 < 2)
            break;
          v68 = *v70;
          v69 = v70;
          if (!*v70)
            goto LABEL_119;
        }
        if (v71 == 1)
          break;
        v68 = v70[1];
        if (!v68)
        {
          v69 = v70 + 1;
          goto LABEL_119;
        }
      }
      v75 = *((_BYTE *)v70 + 32);
      v76 = *v29;
      v77 = v29;
      v78 = v29;
      if (*v29)
        goto LABEL_126;
      goto LABEL_130;
    }
LABEL_119:
    v72 = operator new(0x28uLL);
    v72[7] = 1;
    *((_BYTE *)v72 + 32) = 0;
    *(_QWORD *)v72 = 0;
    *((_QWORD *)v72 + 1) = 0;
    *((_QWORD *)v72 + 2) = v70;
    *v69 = (uint64_t *)v72;
    v73 = (uint64_t *)*this[38];
    v74 = (uint64_t *)v72;
    if (v73)
    {
      this[38] = v73;
      v74 = *v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v74);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    v75 = *((_BYTE *)v72 + 32);
    v76 = *v29;
    v77 = v29;
    v78 = v29;
    if (*v29)
    {
      while (1)
      {
LABEL_126:
        while (1)
        {
          v78 = (uint64_t **)v76;
          v79 = *((_DWORD *)v76 + 7);
          if (v79 < 2)
            break;
          v76 = *v78;
          v77 = v78;
          if (!*v78)
            goto LABEL_130;
        }
        if (v79 == 1)
          break;
        v76 = v78[1];
        if (!v76)
        {
          v77 = v78 + 1;
          goto LABEL_130;
        }
      }
      *((_BYTE *)v78 + 32) = v75;
      v83 = *v20;
      v84 = this + 39;
      if (*v20)
        goto LABEL_137;
      goto LABEL_141;
    }
LABEL_130:
    v80 = operator new(0x28uLL);
    v80[7] = 1;
    *((_BYTE *)v80 + 32) = 0;
    *(_QWORD *)v80 = 0;
    *((_QWORD *)v80 + 1) = 0;
    *((_QWORD *)v80 + 2) = v78;
    *v77 = (uint64_t *)v80;
    v81 = (uint64_t *)*this[35];
    v82 = (uint64_t *)v80;
    if (v81)
    {
      this[35] = v81;
      v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v82);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v80 + 32) = v75;
    v83 = *v20;
    v84 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_137:
        while (1)
        {
          v84 = (uint64_t **)v83;
          v85 = *((_DWORD *)v83 + 7);
          if (v85 < 4)
            break;
          v83 = *v84;
          v20 = v84;
          if (!*v84)
            goto LABEL_141;
        }
        if (v85 == 3)
          break;
        v83 = v84[1];
        if (!v83)
        {
          v20 = v84 + 1;
          goto LABEL_141;
        }
      }
      v89 = *((_BYTE *)v84 + 32);
      v90 = (char *)*v29;
      v91 = (uint64_t *)v29;
      if (*v29)
        goto LABEL_148;
      goto LABEL_152;
    }
LABEL_141:
    v86 = operator new(0x28uLL);
    *((_DWORD *)v86 + 7) = 3;
    *((_BYTE *)v86 + 32) = 0;
    *(_QWORD *)v86 = 0;
    *((_QWORD *)v86 + 1) = 0;
    *((_QWORD *)v86 + 2) = v84;
    *v20 = (uint64_t *)v86;
    v87 = (uint64_t *)*this[38];
    v88 = (uint64_t *)v86;
    if (v87)
    {
      this[38] = v87;
      v88 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v88);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    v89 = *((_BYTE *)v86 + 32);
    v90 = (char *)*v29;
    v91 = (uint64_t *)v29;
    if (*v29)
    {
      while (1)
      {
LABEL_148:
        while (1)
        {
          v91 = (uint64_t *)v90;
          v92 = *((_DWORD *)v90 + 7);
          if (v92 < 4)
            break;
          v90 = (char *)*v91;
          v29 = (uint64_t **)v91;
          if (!*v91)
            goto LABEL_152;
        }
        if (v92 == 3)
          goto LABEL_211;
        v90 = (char *)v91[1];
        if (!v90)
        {
          v29 = (uint64_t **)(v91 + 1);
          break;
        }
      }
    }
LABEL_152:
    v93 = (uint64_t *)operator new(0x28uLL);
    v94 = v93;
    *((_DWORD *)v93 + 7) = 3;
    *((_BYTE *)v93 + 32) = 0;
    *v93 = 0;
    v93[1] = 0;
    v93[2] = (uint64_t)v91;
    *v29 = v93;
    v95 = (uint64_t *)*this[35];
    if (!v95)
    {
      v91 = v93;
LABEL_210:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v94);
      this[37] = (uint64_t *)((char *)this[37] + 1);
LABEL_211:
      *((_BYTE *)v91 + 32) = v89;
      goto LABEL_212;
    }
    goto LABEL_208;
  }
  v15 = (const void *)*MEMORY[0x1E0CFB958];
  v16 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB958]);
  v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != (const void *)-1)
    {
      v18 = __s1[1];
      if (__s1[1] >= v16)
        v33 = v16;
      else
        v33 = __s1[1];
      if (memcmp(__s1[0], v15, (size_t)v33))
        goto LABEL_70;
      goto LABEL_58;
    }
LABEL_350:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == (const void *)-1)
    goto LABEL_350;
  v18 = v10;
  if (v10 >= v16)
    v19 = (size_t)v16;
  else
    v19 = (size_t)v10;
  if (memcmp(__s1, v15, v19))
    goto LABEL_70;
LABEL_58:
  if (v18 == v17)
  {
    *((_DWORD *)this + 82) = 1;
    v29 = this + 36;
    v34 = this[36];
    v35 = this + 36;
    v36 = this + 36;
    if (v34)
    {
      v37 = this[36];
      do
      {
        while (1)
        {
          v36 = (uint64_t **)v37;
          v38 = *((_DWORD *)v37 + 7);
          if (v38 < 1)
            break;
          v37 = *v36;
          v35 = v36;
          if (!*v36)
            goto LABEL_66;
        }
        if ((v38 & 0x80000000) == 0)
        {
          *((_BYTE *)v36 + 32) = 1;
          goto LABEL_173;
        }
        v37 = v36[1];
      }
      while (v37);
      v35 = v36 + 1;
    }
LABEL_66:
    v39 = operator new(0x28uLL);
    v39[7] = 0;
    *((_BYTE *)v39 + 32) = 0;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = v36;
    *v35 = (uint64_t *)v39;
    v40 = (uint64_t *)*this[35];
    v41 = (uint64_t *)v39;
    if (v40)
    {
      this[35] = v40;
      v41 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v41);
    v34 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v39 + 32) = 1;
    v42 = this + 36;
    v43 = this + 36;
    if (v34)
    {
      while (1)
      {
LABEL_173:
        while (1)
        {
          v43 = (uint64_t **)v34;
          v107 = *((_DWORD *)v34 + 7);
          if (v107 < 2)
            break;
          v34 = *v43;
          v42 = v43;
          if (!*v43)
            goto LABEL_177;
        }
        if (v107 == 1)
          break;
        v34 = v43[1];
        if (!v34)
        {
          v42 = v43 + 1;
          goto LABEL_177;
        }
      }
      *((_BYTE *)v43 + 32) = 0;
      v111 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_184;
      goto LABEL_206;
    }
LABEL_177:
    v108 = operator new(0x28uLL);
    v108[7] = 1;
    *((_BYTE *)v108 + 32) = 0;
    *(_QWORD *)v108 = 0;
    *((_QWORD *)v108 + 1) = 0;
    *((_QWORD *)v108 + 2) = v43;
    *v42 = (uint64_t *)v108;
    v109 = (uint64_t *)*this[35];
    v110 = (uint64_t *)v108;
    if (v109)
    {
      this[35] = v109;
      v110 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v110);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v108 + 32) = 0;
    v111 = (char *)*v29;
    v91 = (uint64_t *)(this + 36);
    if (!*v29)
      goto LABEL_206;
    while (1)
    {
LABEL_184:
      while (1)
      {
        v91 = (uint64_t *)v111;
        v112 = *((_DWORD *)v111 + 7);
        if (v112 < 4)
          break;
        v111 = (char *)*v91;
        v29 = (uint64_t **)v91;
        if (!*v91)
          goto LABEL_206;
      }
      if (v112 == 3)
        goto LABEL_291;
      v111 = (char *)v91[1];
      if (!v111)
      {
        v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
  }
LABEL_70:
  v44 = (const void *)*MEMORY[0x1E0CFB6D0];
  v45 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB6D0]);
  v46 = v45;
  if ((v10 & 0x80) == 0)
  {
    if (v45 != (const void *)-1)
    {
      v47 = v10;
      if (v10 >= v45)
        v48 = (size_t)v45;
      else
        v48 = (size_t)v10;
      if (memcmp(__s1, v44, v48))
        goto LABEL_94;
      goto LABEL_82;
    }
LABEL_351:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v45 == (const void *)-1)
    goto LABEL_351;
  v47 = __s1[1];
  if (__s1[1] >= v45)
    v49 = v45;
  else
    v49 = __s1[1];
  if (!memcmp(__s1[0], v44, (size_t)v49))
  {
LABEL_82:
    if (v47 != v46)
      goto LABEL_94;
    *((_DWORD *)this + 82) = 2;
    v29 = this + 36;
    v50 = this[36];
    v51 = this + 36;
    v52 = this + 36;
    if (v50)
    {
      v53 = this[36];
      do
      {
        while (1)
        {
          v52 = (uint64_t **)v53;
          v54 = *((_DWORD *)v53 + 7);
          if (v54 < 1)
            break;
          v53 = *v52;
          v51 = v52;
          if (!*v52)
            goto LABEL_90;
        }
        if ((v54 & 0x80000000) == 0)
        {
          *((_BYTE *)v52 + 32) = 0;
          goto LABEL_191;
        }
        v53 = v52[1];
      }
      while (v53);
      v51 = v52 + 1;
    }
LABEL_90:
    v55 = operator new(0x28uLL);
    v55[7] = 0;
    *((_BYTE *)v55 + 32) = 0;
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 2) = v52;
    *v51 = (uint64_t *)v55;
    v56 = (uint64_t *)*this[35];
    v57 = (uint64_t *)v55;
    if (v56)
    {
      this[35] = v56;
      v57 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v57);
    v50 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v55 + 32) = 0;
    v58 = this + 36;
    v59 = this + 36;
    if (v50)
    {
      while (1)
      {
LABEL_191:
        while (1)
        {
          v59 = (uint64_t **)v50;
          v113 = *((_DWORD *)v50 + 7);
          if (v113 < 2)
            break;
          v50 = *v59;
          v58 = v59;
          if (!*v59)
            goto LABEL_195;
        }
        if (v113 == 1)
          break;
        v50 = v59[1];
        if (!v50)
        {
          v58 = v59 + 1;
          goto LABEL_195;
        }
      }
      *((_BYTE *)v59 + 32) = 1;
      v117 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_202;
      goto LABEL_206;
    }
LABEL_195:
    v114 = operator new(0x28uLL);
    v114[7] = 1;
    *((_BYTE *)v114 + 32) = 0;
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = 0;
    *((_QWORD *)v114 + 2) = v59;
    *v58 = (uint64_t *)v114;
    v115 = (uint64_t *)*this[35];
    v116 = (uint64_t *)v114;
    if (v115)
    {
      this[35] = v115;
      v116 = *v58;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v116);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v114 + 32) = 1;
    v117 = (char *)*v29;
    v91 = (uint64_t *)(this + 36);
    if (!*v29)
    {
LABEL_206:
      v94 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v94 + 7) = 3;
      *((_BYTE *)v94 + 32) = 0;
      *v94 = 0;
      v94[1] = 0;
      v94[2] = (uint64_t)v91;
      *v29 = v94;
      v95 = (uint64_t *)*this[35];
      if (!v95)
      {
        v89 = 0;
        v91 = v94;
        goto LABEL_210;
      }
      v89 = 0;
LABEL_208:
      this[35] = v95;
LABEL_209:
      v91 = v94;
      v94 = *v29;
      goto LABEL_210;
    }
    while (1)
    {
LABEL_202:
      while (1)
      {
        v91 = (uint64_t *)v117;
        v118 = *((_DWORD *)v117 + 7);
        if (v118 < 4)
          break;
        v117 = (char *)*v91;
        v29 = (uint64_t **)v91;
        if (!*v91)
          goto LABEL_206;
      }
      if (v118 == 3)
        break;
      v117 = (char *)v91[1];
      if (!v117)
      {
        v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
LABEL_291:
    v89 = 0;
    goto LABEL_211;
  }
LABEL_94:
  v60 = (const void *)*MEMORY[0x1E0CFB4A8];
  v61 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB4A8]);
  v62 = v61;
  if ((v10 & 0x80) == 0)
  {
    if (v61 != (const void *)-1)
    {
      if (v10 >= v61)
        v63 = (size_t)v61;
      else
        v63 = (size_t)v10;
      if (memcmp(__s1, v60, v63))
        goto LABEL_212;
      goto LABEL_159;
    }
LABEL_352:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == (const void *)-1)
    goto LABEL_352;
  v10 = __s1[1];
  if (__s1[1] >= v61)
    v96 = v61;
  else
    v96 = __s1[1];
  if (!memcmp(__s1[0], v60, (size_t)v96))
  {
LABEL_159:
    if (v10 != v62)
      goto LABEL_212;
    *((_DWORD *)this + 82) = 3;
    v29 = this + 36;
    v97 = this[36];
    v98 = this + 36;
    v99 = this + 36;
    if (v97)
    {
      v100 = this[36];
      do
      {
        while (1)
        {
          v99 = (uint64_t **)v100;
          v101 = *((_DWORD *)v100 + 7);
          if (v101 < 1)
            break;
          v100 = *v99;
          v98 = v99;
          if (!*v99)
            goto LABEL_167;
        }
        if ((v101 & 0x80000000) == 0)
        {
          *((_BYTE *)v99 + 32) = 0;
          goto LABEL_327;
        }
        v100 = v99[1];
      }
      while (v100);
      v98 = v99 + 1;
    }
LABEL_167:
    v102 = operator new(0x28uLL);
    v102[7] = 0;
    *((_BYTE *)v102 + 32) = 0;
    *(_QWORD *)v102 = 0;
    *((_QWORD *)v102 + 1) = 0;
    *((_QWORD *)v102 + 2) = v99;
    *v98 = (uint64_t *)v102;
    v103 = (uint64_t *)*this[35];
    v104 = (uint64_t *)v102;
    if (v103)
    {
      this[35] = v103;
      v104 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v104);
    v97 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((_BYTE *)v102 + 32) = 0;
    v105 = this + 36;
    v106 = this + 36;
    if (v97)
    {
      while (1)
      {
LABEL_327:
        while (1)
        {
          v106 = (uint64_t **)v97;
          v180 = *((_DWORD *)v97 + 7);
          if (v180 < 2)
            break;
          v97 = *v106;
          v105 = v106;
          if (!*v106)
            goto LABEL_331;
        }
        if (v180 == 1)
          break;
        v97 = v106[1];
        if (!v97)
        {
          v105 = v106 + 1;
          goto LABEL_331;
        }
      }
      *((_BYTE *)v106 + 32) = 0;
      v184 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
        goto LABEL_338;
    }
    else
    {
LABEL_331:
      v181 = operator new(0x28uLL);
      v181[7] = 1;
      *((_BYTE *)v181 + 32) = 0;
      *(_QWORD *)v181 = 0;
      *((_QWORD *)v181 + 1) = 0;
      *((_QWORD *)v181 + 2) = v106;
      *v105 = (uint64_t *)v181;
      v182 = (uint64_t *)*this[35];
      v183 = (uint64_t *)v181;
      if (v182)
      {
        this[35] = v182;
        v183 = *v105;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v183);
      this[37] = (uint64_t *)((char *)this[37] + 1);
      *((_BYTE *)v181 + 32) = 0;
      v184 = (char *)*v29;
      v91 = (uint64_t *)(this + 36);
      if (*v29)
      {
        while (1)
        {
LABEL_338:
          while (1)
          {
            v91 = (uint64_t *)v184;
            v185 = *((_DWORD *)v184 + 7);
            if (v185 < 4)
              break;
            v184 = (char *)*v91;
            v29 = (uint64_t **)v91;
            if (!*v91)
              goto LABEL_342;
          }
          if (v185 == 3)
            break;
          v184 = (char *)v91[1];
          if (!v184)
          {
            v29 = (uint64_t **)(v91 + 1);
            goto LABEL_342;
          }
        }
        v89 = 1;
        goto LABEL_211;
      }
    }
LABEL_342:
    v186 = (uint64_t *)operator new(0x28uLL);
    v94 = v186;
    *((_DWORD *)v186 + 7) = 3;
    *((_BYTE *)v186 + 32) = 0;
    *v186 = 0;
    v186[1] = 0;
    v186[2] = (uint64_t)v91;
    *v29 = v186;
    v187 = (uint64_t *)*this[35];
    if (!v187)
    {
      v89 = 1;
      v91 = v186;
      goto LABEL_210;
    }
    this[35] = v187;
    v89 = 1;
    goto LABEL_209;
  }
LABEL_212:
  v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    v156 = this[36];
    if (v156)
    {
      while (1)
      {
        while (1)
        {
          v158 = (uint64_t **)v156;
          v159 = *((_DWORD *)v156 + 7);
          if (v159 < 1)
            break;
          v156 = *v158;
          v157 = v158;
          if (!*v158)
            goto LABEL_299;
        }
        if ((v159 & 0x80000000) == 0)
          break;
        v156 = v158[1];
        if (!v156)
        {
          v157 = v158 + 1;
          goto LABEL_299;
        }
      }
      v160 = v158;
    }
    else
    {
      v157 = this + 36;
      v158 = this + 36;
LABEL_299:
      v160 = operator new(0x28uLL);
      v160[7] = 0;
      *((_BYTE *)v160 + 32) = 0;
      *(_QWORD *)v160 = 0;
      *((_QWORD *)v160 + 1) = 0;
      *((_QWORD *)v160 + 2) = v158;
      *v157 = (uint64_t *)v160;
      v161 = (uint64_t *)*this[35];
      v162 = (uint64_t *)v160;
      if (v161)
      {
        this[35] = v161;
        v162 = *v157;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v162);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    v163 = *((unsigned __int8 *)v160 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v163;
    _os_log_debug_impl(&dword_1BF566000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Receiver: %d", (uint8_t *)object, 8u);
    v119 = this[5];
    if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
    {
LABEL_214:
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
        goto LABEL_215;
      goto LABEL_314;
    }
  }
  else if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_214;
  }
  v164 = this[36];
  if (v164)
  {
    while (1)
    {
      while (1)
      {
        v166 = (uint64_t **)v164;
        v167 = *((_DWORD *)v164 + 7);
        if (v167 < 2)
          break;
        v164 = *v166;
        v165 = v166;
        if (!*v166)
          goto LABEL_310;
      }
      if (v167 == 1)
        break;
      v164 = v166[1];
      if (!v164)
      {
        v165 = v166 + 1;
        goto LABEL_310;
      }
    }
    v168 = v166;
  }
  else
  {
    v165 = this + 36;
    v166 = this + 36;
LABEL_310:
    v168 = operator new(0x28uLL);
    v168[7] = 1;
    *((_BYTE *)v168 + 32) = 0;
    *(_QWORD *)v168 = 0;
    *((_QWORD *)v168 + 1) = 0;
    *((_QWORD *)v168 + 2) = v166;
    *v165 = (uint64_t *)v168;
    v169 = (uint64_t *)*this[35];
    v170 = (uint64_t *)v168;
    if (v169)
    {
      this[35] = v169;
      v170 = *v165;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v170);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v171 = *((unsigned __int8 *)v168 + 32);
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v171;
  _os_log_debug_impl(&dword_1BF566000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Other: %d", (uint8_t *)object, 8u);
  v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
LABEL_314:
    v172 = this[36];
    if (v172)
    {
      while (1)
      {
        while (1)
        {
          v174 = (uint64_t **)v172;
          v175 = *((_DWORD *)v172 + 7);
          if (v175 < 4)
            break;
          v172 = *v174;
          v173 = v174;
          if (!*v174)
            goto LABEL_321;
        }
        if (v175 == 3)
          break;
        v172 = v174[1];
        if (!v172)
        {
          v173 = v174 + 1;
          goto LABEL_321;
        }
      }
      v176 = v174;
    }
    else
    {
      v173 = this + 36;
      v174 = this + 36;
LABEL_321:
      v176 = operator new(0x28uLL);
      v176[7] = 3;
      *((_BYTE *)v176 + 32) = 0;
      *(_QWORD *)v176 = 0;
      *((_QWORD *)v176 + 1) = 0;
      *((_QWORD *)v176 + 2) = v174;
      *v173 = (uint64_t *)v176;
      v177 = (uint64_t *)*this[35];
      v178 = (uint64_t *)v176;
      if (v177)
      {
        this[35] = v177;
        v178 = *v173;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v178);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    v179 = *((unsigned __int8 *)v176 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v179;
    _os_log_debug_impl(&dword_1BF566000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Speaker: %d", (uint8_t *)object, 8u);
  }
LABEL_215:
  v120 = xpc_dictionary_create(0, 0, 0);
  v121 = MEMORY[0x1E0C812F8];
  if (v120 || (v120 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v120) == v121)
    {
      xpc_retain(v120);
      v122 = v120;
    }
    else
    {
      v122 = xpc_null_create();
    }
  }
  else
  {
    v122 = xpc_null_create();
    v120 = 0;
  }
  xpc_release(v120);
  v123 = xpc_dictionary_create(0, 0, 0);
  if (v123 || (v123 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v123) == v121)
    {
      xpc_retain(v123);
      v124 = v123;
    }
    else
    {
      v124 = xpc_null_create();
    }
  }
  else
  {
    v124 = xpc_null_create();
    v123 = 0;
  }
  xpc_release(v123);
  v125 = this + 36;
  v126 = this[36];
  v127 = this + 36;
  v128 = this + 36;
  if (v126)
  {
    while (1)
    {
      while (1)
      {
        v128 = (uint64_t **)v126;
        v129 = *((_DWORD *)v126 + 7);
        if (v129 < 1)
          break;
        v126 = *v128;
        v127 = v128;
        if (!*v128)
          goto LABEL_234;
      }
      if ((v129 & 0x80000000) == 0)
        break;
      v126 = v128[1];
      if (!v126)
      {
        v127 = v128 + 1;
        goto LABEL_234;
      }
    }
    v130 = v128;
  }
  else
  {
LABEL_234:
    v130 = operator new(0x28uLL);
    *((_DWORD *)v130 + 7) = 0;
    *((_BYTE *)v130 + 32) = 0;
    *(_QWORD *)v130 = 0;
    *((_QWORD *)v130 + 1) = 0;
    *((_QWORD *)v130 + 2) = v128;
    *v127 = (uint64_t *)v130;
    v131 = (uint64_t *)*this[35];
    v132 = (uint64_t *)v130;
    if (v131)
    {
      this[35] = v131;
      v132 = *v127;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v132);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v133 = xpc_BOOL_create(*((_BYTE *)v130 + 32));
  if (!v133)
    v133 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB8C0], v133);
  v134 = xpc_null_create();
  xpc_release(v133);
  xpc_release(v134);
  v135 = *v125;
  v136 = this + 36;
  v137 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v137 = (uint64_t **)v135;
        v138 = *((_DWORD *)v135 + 7);
        if (v138 < 2)
          break;
        v135 = *v137;
        v136 = v137;
        if (!*v137)
          goto LABEL_246;
      }
      if (v138 == 1)
        break;
      v135 = v137[1];
      if (!v135)
      {
        v136 = v137 + 1;
        goto LABEL_246;
      }
    }
    v139 = v137;
  }
  else
  {
LABEL_246:
    v139 = operator new(0x28uLL);
    *((_DWORD *)v139 + 7) = 1;
    *((_BYTE *)v139 + 32) = 0;
    *(_QWORD *)v139 = 0;
    *((_QWORD *)v139 + 1) = 0;
    *((_QWORD *)v139 + 2) = v137;
    *v136 = (uint64_t *)v139;
    v140 = (uint64_t *)*this[35];
    v141 = (uint64_t *)v139;
    if (v140)
    {
      this[35] = v140;
      v141 = *v136;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v141);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v142 = xpc_BOOL_create(*((_BYTE *)v139 + 32));
  if (!v142)
    v142 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB528], v142);
  v143 = xpc_null_create();
  xpc_release(v142);
  xpc_release(v143);
  v144 = *v125;
  v145 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v145 = (uint64_t **)v144;
        v146 = *((_DWORD *)v144 + 7);
        if (v146 < 4)
          break;
        v144 = *v145;
        v125 = v145;
        if (!*v145)
          goto LABEL_259;
      }
      if (v146 == 3)
        break;
      v144 = v145[1];
      if (!v144)
      {
        v125 = v145 + 1;
        goto LABEL_259;
      }
    }
    v147 = v145;
  }
  else
  {
LABEL_259:
    v147 = operator new(0x28uLL);
    *((_DWORD *)v147 + 7) = 3;
    *((_BYTE *)v147 + 32) = 0;
    *(_QWORD *)v147 = 0;
    *((_QWORD *)v147 + 1) = 0;
    *((_QWORD *)v147 + 2) = v145;
    *v125 = (uint64_t *)v147;
    v148 = (uint64_t *)*this[35];
    v149 = (uint64_t *)v147;
    if (v148)
    {
      this[35] = v148;
      v149 = *v125;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v149);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  v150 = xpc_BOOL_create(*((_BYTE *)v147 + 32));
  if (!v150)
    v150 = xpc_null_create();
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFB768], v150);
  v151 = xpc_null_create();
  xpc_release(v150);
  xpc_release(v151);
  if (v124)
  {
    xpc_retain(v124);
    v152 = v124;
  }
  else
  {
    v152 = xpc_null_create();
  }
  xpc_dictionary_set_value(v122, (const char *)*MEMORY[0x1E0CFB140], v152);
  v153 = xpc_null_create();
  xpc_release(v152);
  xpc_release(v153);
  v188 = v122;
  if (v122)
  {
    xpc_retain(v122);
    v154 = v188;
  }
  else
  {
    v154 = xpc_null_create();
    v188 = v154;
  }
  antenna::Service::Internal::setAudioState(this, &v188);
  xpc_release(v154);
  v188 = 0;
  *((_BYTE *)this + 333) = 0;
  if (!*((_BYTE *)this + 332))
    goto LABEL_279;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    v155 = *((_DWORD *)this + 52);
    if (v155 != 4)
    {
LABEL_277:
      if (v155 == v7)
        goto LABEL_279;
      goto LABEL_278;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this) && !*((_DWORD *)this + 63)
    || *((_BYTE *)this + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
    && !*((_DWORD *)this + 63))
  {
    v155 = 2;
    goto LABEL_277;
  }
  if (v7 != 3)
LABEL_278:
    *((_BYTE *)this + 333) = 1;
LABEL_279:
  xpc_release(v124);
  xpc_release(v122);
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
}

void sub_1BF61F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerAudioModeString(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  int v7;
  std::string *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = *((int *)this + 82);
  if (v4 < 4)
    std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E79181B8 + v4));
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = a2;
    else
      v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v7 = 136315138;
    v8 = v6;
    _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D Audio Selected Mode: %s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1BF61F9A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerAudioMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::string *p_p;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string __p;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8CD78](*a2) == v6)
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = xpc_string_create((const char *)p_p);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBF30], v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v12) == v6)
        {
          xpc_retain(v12);
          v13 = v12;
        }
        else
        {
          v13 = xpc_null_create();
        }
      }
      else
      {
        v13 = xpc_null_create();
        v12 = 0;
      }
      xpc_release(v12);
      if (MEMORY[0x1C3B8CD78](v13) == v6)
      {
        v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
        if (!v14)
          v14 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB710], v14);
        v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFB958]);
        if (!v16)
          v16 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBA88], v16);
        v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6D0]);
        if (!v18)
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB850], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4A8]);
        if (!v20)
          v20 = xpc_null_create();
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBA90], v20);
        v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        if (v13)
        {
          xpc_retain(v13);
          v22 = v13;
        }
        else
        {
          v22 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFBF38], v22);
        v23 = xpc_null_create();
        xpc_release(v22);
        xpc_release(v23);
      }
      xpc_release(v13);
    }
  }
}

void sub_1BF61FD9C(_Unwind_Exception *a1)
{
  xpc_object_t *v1;
  void *v2;

  xpc_release(v2);
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerAudioAlert_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild;
  xpc_object_t value;
  const char *v6;
  unsigned __int8 v7;
  void **v8;
  void **v9;
  size_t v10;
  void *v11;
  size_t v12;
  void **v13;
  size_t v14;
  BOOL v15;
  xpc_object_t object;
  void *__p[3];

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__p, 170, sizeof(__p));
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBFA8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      v7 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0)
        v8 = (void **)((char *)__p + HIBYTE(__p[2]));
      else
        v8 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      if (SHIBYTE(__p[2]) >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if (v9 != v8)
      {
        do
        {
          *(_BYTE *)v9 = __toupper(*(char *)v9);
          v9 = (void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        v7 = HIBYTE(__p[2]);
      }
      v10 = strlen((const char *)*MEMORY[0x1E0CFB4A0]);
      v11 = (void *)v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          v13 = (void **)__p[0];
          v12 = (size_t)__p[1];
          goto LABEL_21;
        }
      }
      else if (v10 != -1)
      {
        v12 = v7;
        v13 = __p;
LABEL_21:
        if (v12 >= (unint64_t)v11)
          v14 = (size_t)v11;
        else
          v14 = v12;
        v15 = memcmp(v13, (const void *)*MEMORY[0x1E0CFB4A0], v14) == 0;
        if ((void *)v12 != v11)
          v15 = 0;
        *((_BYTE *)this + 332) = v15;
        *((_BYTE *)this + 333) = v15;
        if ((v7 & 0x80) != 0)
          operator delete(__p[0]);
        return;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1BF61FF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::copyTxPowerAudioAlert_sync(antenna::Service::Internal *this@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = (void *)*a2;
  if (MEMORY[0x1C3B8CD78](*a2) == v6)
  {
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((_BYTE *)this + 152))
    {
      if (*((_BYTE *)this + 332))
      {
        v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4A0]);
        if (!v9)
          v9 = xpc_null_create();
      }
      else
      {
        v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB578]);
        if (!v9)
          v9 = xpc_null_create();
      }
    }
    else
    {
      v9 = xpc_string_create((const char *)*MEMORY[0x1E0CFB578]);
      if (!v9)
        v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBFA8], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
}

void sub_1BF6201CC(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild;
  xpc_object_t value;
  const char *v6;
  unsigned __int8 v7;
  const void **v8;
  const void **v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  const void **v13;
  size_t v14;
  size_t v16;
  unint64_t v17;
  size_t v18;
  const void **v19;
  int v20;
  size_t v21;
  const void *v23;
  const void *v24;
  const void *v25;
  unint64_t v26;
  size_t v27;
  const void *v28;
  xpc_object_t object;
  const void *__s1[3];

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__s1, 170, sizeof(__s1));
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0C8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      v7 = HIBYTE(__s1[2]);
      if (SHIBYTE(__s1[2]) >= 0)
        v8 = (const void **)((char *)__s1 + HIBYTE(__s1[2]));
      else
        v8 = (const void **)((char *)__s1[0] + (unint64_t)__s1[1]);
      if (SHIBYTE(__s1[2]) >= 0)
        v9 = __s1;
      else
        v9 = (const void **)__s1[0];
      if (v9 != v8)
      {
        do
        {
          *(_BYTE *)v9 = __toupper(*(char *)v9);
          v9 = (const void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        v7 = HIBYTE(__s1[2]);
      }
      v10 = strlen((const char *)*MEMORY[0x1E0CFC120]);
      v11 = v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          v13 = (const void **)__s1[0];
          v12 = (size_t)__s1[1];
LABEL_21:
          if (v12 >= v11)
            v14 = v11;
          else
            v14 = v12;
          if (!memcmp(v13, (const void *)*MEMORY[0x1E0CFC120], v14) && v12 == v11)
          {
            v20 = 0;
            goto LABEL_56;
          }
          v16 = strlen((const char *)*MEMORY[0x1E0CFB970]);
          v17 = v16;
          if ((v7 & 0x80) != 0)
          {
            if (v16 != -1)
            {
              v19 = (const void **)__s1[0];
              v18 = (size_t)__s1[1];
LABEL_34:
              if (v18 >= v17)
                v21 = v17;
              else
                v21 = v18;
              if (!memcmp(v19, (const void *)*MEMORY[0x1E0CFB970], v21) && v18 == v17)
              {
                v20 = 1;
                goto LABEL_56;
              }
              v23 = (const void *)*MEMORY[0x1E0CFB968];
              v24 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB968]);
              v25 = v24;
              if ((v7 & 0x80) != 0)
              {
                if (v24 != (const void *)-1)
                {
                  v26 = (unint64_t)__s1[1];
                  if (__s1[1] >= v24)
                    v28 = v24;
                  else
                    v28 = __s1[1];
                  if (memcmp(__s1[0], v23, (size_t)v28))
                    goto LABEL_57;
LABEL_54:
                  if ((const void *)v26 != v25)
                    goto LABEL_57;
                  v20 = 2;
LABEL_56:
                  *((_DWORD *)this + 68) = v20;
LABEL_57:
                  if ((v7 & 0x80) != 0)
                    operator delete((void *)__s1[0]);
                  return;
                }
              }
              else if (v24 != (const void *)-1)
              {
                v26 = v7;
                if (v7 >= (unint64_t)v24)
                  v27 = (size_t)v24;
                else
                  v27 = v7;
                if (memcmp(__s1, v23, v27))
                  goto LABEL_57;
                goto LABEL_54;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          else if (v16 != -1)
          {
            v18 = v7;
            v19 = __s1;
            goto LABEL_34;
          }
          std::string::__throw_out_of_range[abi:ne180100]();
        }
      }
      else if (v10 != -1)
      {
        v12 = v7;
        v13 = __s1;
        goto LABEL_21;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1BF620450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

std::string *antenna::Service::Internal::getTxPowerMotionModeString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = SLODWORD(this[11].__r_.__value_.__r.__words[1]);
  if (v3 < 3)
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E79181F8 + v3));
  return this;
}

void sub_1BF6204CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerMotionMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  std::string *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t IsInternalBuild;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string v24;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  v6 = MEMORY[0x1E0C812F8];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v7 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  v8 = *a2;
  if (MEMORY[0x1C3B8CD78](*a2) == v6)
  {
    memset(&v24, 0, sizeof(v24));
    v9 = *((int *)this + 68);
    if (v9 < 3)
      std::string::__assign_external(&v24, **((const std::string::value_type ***)&unk_1E79181F8 + v9));
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v24;
    else
      v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
    v11 = xpc_string_create((const char *)v10);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFC0C8], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    {
      if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
      {
        v14 = xpc_dictionary_create(0, 0, 0);
        if (v14 || (v14 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v14) == v6)
          {
            xpc_retain(v14);
            v15 = v14;
          }
          else
          {
            v15 = xpc_null_create();
          }
        }
        else
        {
          v15 = xpc_null_create();
          v14 = 0;
        }
        xpc_release(v14);
        if (MEMORY[0x1C3B8CD78](v15) == v6)
        {
          v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFC120]);
          if (!v16)
            v16 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFBFB0], v16);
          v17 = xpc_null_create();
          xpc_release(v16);
          xpc_release(v17);
          v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB970]);
          if (!v18)
            v18 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFC038], v18);
          v19 = xpc_null_create();
          xpc_release(v18);
          xpc_release(v19);
          v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB968]);
          if (!v20)
            v20 = xpc_null_create();
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E0CFC030], v20);
          v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          if (v15)
          {
            xpc_retain(v15);
            v22 = v15;
          }
          else
          {
            v22 = xpc_null_create();
          }
          xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC0A8], v22);
          v23 = xpc_null_create();
          xpc_release(v22);
          xpc_release(v23);
        }
        xpc_release(v15);
      }
    }
  }
}

void sub_1BF620870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_object_t *v15;
  void *v16;

  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionHandDetection_sync(uint64_t a1, uint64_t a2)
{
  const char *v2;
  int v4;
  const char *v5;
  const std::string::value_type *v6;
  size_t v7;
  const char *v8;
  const std::string::value_type *v9;
  size_t v10;
  const std::string::value_type *v11;
  size_t v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = (const char *)a2;
  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(char *)(a2 + 23);
  v5 = (const char *)a2;
  if (v4 < 0)
    v5 = *(const char **)a2;
  v6 = (const std::string::value_type *)*MEMORY[0x1E0CFC120];
  v7 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v5, (const char *)*MEMORY[0x1E0CFC120], v7))
  {
    std::string::__assign_external((std::string *)(a1 + 536), v6);
    v13 = *(_DWORD *)(a1 + 528);
    v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
  }
  else
  {
    v8 = v2;
    if (v4 < 0)
      v8 = *(const char **)v2;
    v9 = (const std::string::value_type *)*MEMORY[0x1E0CFBE98];
    v10 = strlen((const char *)*MEMORY[0x1E0CFBE98]);
    if (!strncasecmp(v8, (const char *)*MEMORY[0x1E0CFBE98], v10))
    {
      std::string::__assign_external((std::string *)(a1 + 536), v9);
      v13 = 1;
      v14 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
    }
    else
    {
      if (v4 < 0)
        v2 = *(const char **)v2;
      v11 = (const std::string::value_type *)*MEMORY[0x1E0CFBF18];
      v12 = strlen((const char *)*MEMORY[0x1E0CFBF18]);
      if (!strncasecmp(v2, (const char *)*MEMORY[0x1E0CFBF18], v12))
      {
        std::string::__assign_external((std::string *)(a1 + 536), v11);
        v13 = 2;
        v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          goto LABEL_20;
      }
      else
      {
        v13 = 0;
        v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          goto LABEL_20;
      }
    }
  }
  v15 = (_QWORD *)(a1 + 536);
  if (*(char *)(a1 + 559) < 0)
    v15 = (_QWORD *)*v15;
  v16 = 136315138;
  v17 = v15;
  _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding: %s", (uint8_t *)&v16, 0xCu);
LABEL_20:
  antenna::Service::Internal::sendMotionHandDetectionState_sync((_QWORD *)a1, v13);
}

void antenna::Service::Internal::antennaGetProperty(NSObject **this@<X0>, void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  NSObject *v14;
  xpc_object_t *v15;
  xpc_object_t object;
  antenna::Service::Internal *v17;
  xpc_object_t v18;
  _QWORD block[6];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  v8 = MEMORY[0x1E0C812F8];
  if (v6)
  {
    v18 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v18 = v7;
    if (!v7)
    {
      v9 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v9 = xpc_null_create();
LABEL_8:
  v18 = v9;
LABEL_9:
  xpc_release(v7);
  v10 = v18;
  if (MEMORY[0x1C3B8CD78](v18) == v8)
  {
    v12 = *a2;
    v15 = &v18;
    object = v12;
    if (v12)
    {
      xpc_retain(v12);
      v17 = (antenna::Service::Internal *)this;
      if (this[12])
      {
LABEL_15:
        if ((dispatch_workloop_is_current() & 1) != 0)
        {
          antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()((uint64_t)&v15);
LABEL_23:
          xpc_release(object);
          *a3 = v18;
          v10 = xpc_null_create();
          v18 = v10;
          goto LABEL_24;
        }
        v13 = this[12] == 0;
LABEL_20:
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke;
        block[3] = &__block_descriptor_tmp_72;
        block[4] = this + 9;
        block[5] = &v15;
        v14 = this[11];
        if (v13)
          dispatch_sync(v14, block);
        else
          dispatch_async_and_wait(v14, block);
        goto LABEL_23;
      }
    }
    else
    {
      object = xpc_null_create();
      v17 = (antenna::Service::Internal *)this;
      if (this[12])
        goto LABEL_15;
    }
    v13 = 1;
    goto LABEL_20;
  }
  v11 = this[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to create a xpc dictionary!", (uint8_t *)block, 2u);
  }
  *a3 = xpc_null_create();
LABEL_24:
  xpc_release(v10);
}

void sub_1BF620CC8(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(antenna::Service::Internal *this)
{
  int v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  NSObject *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  _QWORD aBlock[6];
  std::__shared_weak_count *v28;
  uint8_t buf[8];
  dispatch_object_t object;
  xpc_object_t v31;

  v2 = *((_DWORD *)this + 68);
  if (v2 != 2)
  {
    if (v2)
    {
      v2 = 0;
    }
    else if (*((_DWORD *)this + 63))
    {
      v2 = 2;
    }
    else
    {
      v2 = 2 * (*((_BYTE *)this + 736) == 1);
    }
  }
  *((_DWORD *)this + 88) = v2;
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFB20]);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (*((_DWORD *)this + 88))
  {
    v7 = xpc_BOOL_create(1);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB48], v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v10 = "#D iPad Tx Power Capping Start";
LABEL_48:
      _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, v10, buf, 2u);
    }
  }
  else
  {
    v11 = xpc_BOOL_create(1);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFB38], v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v10 = "#D iPad Tx Power Capping Stop";
      goto LABEL_48;
    }
  }
  v13 = xpc_int64_create(*((unsigned int *)this + 85));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E0DDFA70], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
    v23 = *((_QWORD *)this + 15);
    v31 = v4;
    if (v4)
      goto LABEL_33;
LABEL_35:
    v31 = xpc_null_create();
    goto LABEL_36;
  }
  v23 = *((_QWORD *)this + 15);
  v31 = v4;
  if (!v4)
    goto LABEL_35;
LABEL_33:
  xpc_retain(v4);
LABEL_36:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_7_3;
  aBlock[4] = this;
  aBlock[5] = v16;
  v28 = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v25 = _Block_copy(aBlock);
  v26 = *((_QWORD *)this + 11);
  if (v26)
    dispatch_retain(v26);
  *(_QWORD *)buf = v25;
  object = v26;
  (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(_QWORD *)v23 + 48))(v23, &v31, buf);
  if (object)
    dispatch_release(object);
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  xpc_release(v31);
  v31 = 0;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v4);
}

void sub_1BF6210F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(_QWORD *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t antenna::Service::Internal::getTxPowerIPadWithMotionCappingMode_sync(antenna::Service::Internal *this)
{
  int v1;

  v1 = *((_DWORD *)this + 68);
  if (v1 == 2)
    return 2;
  if (v1)
    return 0;
  if (*((_DWORD *)this + 63))
    return 2;
  return 2 * (*((_BYTE *)this + 736) == 1);
}

void ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v14 = *MEMORY[0x1E0DDFB20];
          v15 = 136315138;
          v16 = v14;
          _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", (uint8_t *)&v15, 0xCu);
          if (!*(_BYTE *)(v5 + 153))
            return;
        }
        else if (!*(_BYTE *)(v5 + 153))
        {
          return;
        }
        antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)v5);
        v12 = *(NSObject **)(v5 + 360);
        if (v12)
        {
          dispatch_source_cancel(v12);
          v13 = *(NSObject **)(v5 + 360);
          *(_QWORD *)(v5 + 360) = 0;
          if (v13)
            dispatch_release(v13);
        }
        *(_DWORD *)(v5 + 352) = 255;
      }
    }
  }
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotionTimer_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v3)
      dispatch_release(v3);
  }
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync(dispatch_queue_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  std::__shared_weak_count *v5;
  dispatch_queue_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, this[11]);
  v3 = this[45];
  this[45] = v2;
  if (v3)
  {
    dispatch_release(v3);
    v2 = this[45];
  }
  v4 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13 = this[45];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_8_0;
  handler[4] = this;
  handler[5] = v6;
  v16 = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v13, handler);
  dispatch_activate(this[45]);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *(_BYTE *)(v3 + 216))
      {
        if (!*(_BYTE *)(v3 + 248))
          antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)v3);
        v6 = *(NSObject **)(v3 + 360);
        if (v6)
        {
          dispatch_source_cancel(v6);
          v7 = *(NSObject **)(v3 + 360);
          *(_QWORD *)(v3 + 360) = 0;
          if (v7)
            dispatch_release(v7);
        }
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)v3);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((antenna::Service::Internal *)v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF621568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::handleTxPowerCappingIPadWithMotionTimerExpiry_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  NSObject *v3;

  if (*((_BYTE *)this + 216))
  {
    if (*((_BYTE *)this + 248))
    {
      v2 = *((_QWORD *)this + 45);
      if (!v2)
      {
LABEL_4:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      v2 = *((_QWORD *)this + 45);
      if (!v2)
        goto LABEL_4;
    }
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (!v3)
      goto LABEL_4;
    dispatch_release(v3);
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
  }
}

uint64_t antenna::Service::Internal::getAccessoryState_sync(antenna::Service::Internal *this)
{
  const char *v2;
  const char *v3;
  size_t v4;
  int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  std::string::size_type v22;
  std::string *v23;
  char *v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  void *v28;
  std::string *v29;
  size_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t **v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t **v44;
  unsigned int AccessoryPrimaryPortNumber;
  unsigned int v46;
  char *v47;
  uint64_t **v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 *v54;
  __int128 *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 *v67;
  std::string v68;
  _QWORD v69[3];

  v2 = (char *)this + 392;
  v3 = (char *)this + 392;
  if (*((char *)this + 415) < 0)
    v3 = *(const char **)v2;
  v4 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v3, (const char *)*MEMORY[0x1E0CFC120], v4)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
  {
    v31 = (uint64_t *)*((_QWORD *)this + 55);
    v32 = (uint64_t **)((char *)this + 448);
    if (v31 == (uint64_t *)((char *)this + 448))
    {
LABEL_97:
      v10 = 0;
      goto LABEL_98;
    }
    v33 = (uint64_t *)*((_QWORD *)this + 55);
    while (1)
    {
      if ((v33[4] & 1) != 0)
      {
        v34 = *((_DWORD *)v33 + 9);
        if ((v34 & 0x1000) != 0)
          break;
      }
      v35 = (uint64_t *)v33[1];
      if (v35)
      {
        do
        {
          v36 = (uint64_t **)v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t **)v33[2];
          v37 = *v36 == v33;
          v33 = (uint64_t *)v36;
        }
        while (!v37);
      }
      v33 = (uint64_t *)v36;
      if (v36 == v32)
      {
        v10 = 0;
        v39 = 1;
        goto LABEL_103;
      }
    }
    v39 = 0;
    v40 = v34 & 0xFFFFEFFF;
    if (*((_BYTE *)this + 561))
      v10 = 4096;
    else
      v10 = v40;
LABEL_103:
    v38 = 1;
    while (1)
    {
      if (v39)
      {
        if ((v31[4] & 2) != 0)
        {
          v41 = *((_DWORD *)v31 + 7);
          if (v41 == ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((_QWORD *)this + 47) + 72)))
            break;
        }
      }
      if ((v31[4] & 1) != 0)
      {
        v42 = *((_DWORD *)v31 + 9);
        if ((v42 & 0x1000) != 0)
          v42 = 0;
        v10 = v42 | v10;
      }
      v43 = (uint64_t *)v31[1];
      if (v43)
      {
        do
        {
          v44 = (uint64_t **)v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t **)v31[2];
          v37 = *v44 == v31;
          v31 = (uint64_t *)v44;
        }
        while (!v37);
      }
      v31 = (uint64_t *)v44;
      if (v44 == v32)
        return v38 | (v10 << 32);
    }
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 56));
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 55) = v32;
    AccessoryPrimaryPortNumber = ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((_QWORD *)this + 47) + 72));
    v46 = AccessoryPrimaryPortNumber;
    v47 = (char *)*((_QWORD *)this + 56);
    v48 = (uint64_t **)((char *)this + 448);
    if (v47)
    {
      while (1)
      {
        while (1)
        {
          v48 = (uint64_t **)v47;
          v49 = *((_DWORD *)v47 + 7);
          if (AccessoryPrimaryPortNumber >= v49)
            break;
          v47 = (char *)*v48;
          v32 = v48;
          if (!*v48)
            goto LABEL_127;
        }
        if (v49 >= AccessoryPrimaryPortNumber)
          break;
        v47 = (char *)v48[1];
        if (!v47)
        {
          v32 = v48 + 1;
          goto LABEL_127;
        }
      }
    }
    else
    {
LABEL_127:
      v50 = (char *)v48;
      v48 = (uint64_t **)operator new(0x28uLL);
      v48[4] = 0;
      *((_DWORD *)v48 + 7) = v46;
      *v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t *)v50;
      *v32 = (uint64_t *)v48;
      v51 = **((_QWORD **)this + 55);
      v52 = (uint64_t *)v48;
      if (v51)
      {
        *((_QWORD *)this + 55) = v51;
        v52 = *v32;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 56), v52);
      ++*((_QWORD *)this + 57);
    }
    v48[4] = (uint64_t *)0x100000002;
LABEL_131:
    v10 = 1;
    v38 = 2;
    return v38 | (v10 << 32);
  }
  v5 = *((char *)this + 415);
  v6 = v2;
  if (v5 < 0)
    v6 = *(const char **)v2;
  v7 = strlen((const char *)*MEMORY[0x1E0CFB1D8]);
  if (!strncasecmp(v6, (const char *)*MEMORY[0x1E0CFB1D8], v7))
    goto LABEL_131;
  if (v5 < 0)
    v2 = *(const char **)v2;
  v8 = strlen((const char *)*MEMORY[0x1E0CFB1D0]);
  if (strncasecmp(v2, (const char *)*MEMORY[0x1E0CFB1D0], v8))
    goto LABEL_97;
  memset(v69, 170, sizeof(v69));
  ctu::split_any_copy();
  v9 = (__int128 *)v69[0];
  v67 = (__int128 *)v69[1];
  if (v69[0] != v69[1])
  {
    LODWORD(v10) = 0;
    v66 = (char *)*MEMORY[0x1E0CFAF98];
    v65 = (char *)*MEMORY[0x1E0CFAFA8];
    v64 = (char *)*MEMORY[0x1E0CFAF08];
    v63 = (char *)*MEMORY[0x1E0CFAF18];
    v62 = (char *)*MEMORY[0x1E0CFAFA0];
    v61 = (char *)*MEMORY[0x1E0CFAF20];
    v60 = (char *)*MEMORY[0x1E0CFAF28];
    v59 = (char *)*MEMORY[0x1E0CFAF30];
    v58 = (char *)*MEMORY[0x1E0CFAF38];
    v57 = (char *)*MEMORY[0x1E0CFAF40];
    v56 = (char *)*MEMORY[0x1E0CFAF48];
    v11 = (const char *)*MEMORY[0x1E0CFB130];
    v12 = MEMORY[0x1E0C80978];
    do
    {
      memset(&v68, 170, sizeof(v68));
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v13 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v13;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v68;
      else
        v14 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        size = v68.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_40;
      v16 = (std::string *)((char *)v14 + size);
      do
      {
        v17 = v14->__r_.__value_.__s.__data_[0];
        if ((v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v17 + 60) & 0x4000)
          break;
        v14 = (std::string *)((char *)v14 + 1);
        --size;
      }
      while (size);
      if (size == 1)
      {
LABEL_40:
        v16 = v14;
      }
      else
      {
        v19 = 1;
        v16 = v14;
        do
        {
          v20 = v14->__r_.__value_.__s.__data_[v19];
          if ((v20 & 0x80000000) != 0)
            v21 = __maskrune(v20, 0x4000uLL);
          else
            v21 = *(_DWORD *)(v12 + 4 * v20 + 60) & 0x4000;
          if (!v21)
          {
            v16->__r_.__value_.__s.__data_[0] = v14->__r_.__value_.__s.__data_[v19];
            v16 = (std::string *)((char *)v16 + 1);
          }
          ++v19;
        }
        while (size != v19);
      }
      v22 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
      v24 = (char *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v25 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      else
      {
        v24 = (char *)&v68 + HIBYTE(v68.__r_.__value_.__r.__words[2]);
        v25 = &v68;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = v68.__r_.__value_.__l.__size_;
      v26 = (char *)v16 - (char *)v25;
      if (v22 < (char *)v16 - (char *)v25)
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v24 - (char *)v16 == -1)
      {
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          v68.__r_.__value_.__l.__size_ = (char *)v16 - (char *)v25;
        }
        else
        {
          *((_BYTE *)&v68.__r_.__value_.__s + 23) = v26 & 0x7F;
          v23 = &v68;
        }
        v23->__r_.__value_.__s.__data_[v26] = 0;
      }
      else
      {
        std::string::__erase_external_with_move(&v68, v26, v24 - (char *)v16);
      }
      v27 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      v28 = (void *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v68;
      else
        v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v30 = v68.__r_.__value_.__l.__size_;
      if (!strncasecmp((const char *)v29, v66, v30))
        LODWORD(v10) = v10 | 2;
      if (!strncasecmp((const char *)v29, v65, v30))
        LODWORD(v10) = v10 | 4;
      if (!strncasecmp((const char *)v29, v64, v30))
        LODWORD(v10) = v10 | 8;
      if (!strncasecmp((const char *)v29, v63, v30))
        LODWORD(v10) = v10 | 0x10;
      if (!strncasecmp((const char *)v29, v62, v30))
        LODWORD(v10) = v10 | 0x20;
      if (!strncasecmp((const char *)v29, v61, v30))
        LODWORD(v10) = v10 | 0x40;
      if (!strncasecmp((const char *)v29, v60, v30))
        LODWORD(v10) = v10 | 0x80;
      if (!strncasecmp((const char *)v29, v59, v30))
        LODWORD(v10) = v10 | 0x100;
      if (!strncasecmp((const char *)v29, v58, v30))
        LODWORD(v10) = v10 | 0x200;
      if (!strncasecmp((const char *)v29, v57, v30))
        LODWORD(v10) = v10 | 0x400;
      if (!strncasecmp((const char *)v29, v56, v30))
        LODWORD(v10) = v10 | 0x800;
      if (!strncasecmp((const char *)v29, v11, v30))
        v10 = v10 | 0x1000;
      else
        v10 = v10;
      if (v27 < 0)
        operator delete(v28);
      v9 = (__int128 *)((char *)v9 + 24);
    }
    while (v9 != v67);
    v9 = (__int128 *)v69[0];
    if (!v69[0])
      goto LABEL_98;
    goto LABEL_134;
  }
  v10 = 0;
  if (v69[0])
  {
LABEL_134:
    v54 = (__int128 *)v69[1];
    v55 = v9;
    if ((__int128 *)v69[1] != v9)
    {
      do
      {
        if (*((char *)v54 - 1) < 0)
          operator delete(*((void **)v54 - 3));
        v54 = (__int128 *)((char *)v54 - 24);
      }
      while (v54 != v9);
      v55 = (__int128 *)v69[0];
    }
    v69[1] = v9;
    operator delete(v55);
  }
LABEL_98:
  v38 = 1;
  return v38 | (v10 << 32);
}

void sub_1BF621D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1BF621D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v26 - 104));
  _Unwind_Resume(a1);
}

BOOL antenna::Service::Internal::isAccessoryOverridden(antenna::Service::Internal *this)
{
  const char *v1;
  size_t v2;

  v1 = (char *)this + 392;
  if (*((char *)this + 415) < 0)
    v1 = *(const char **)v1;
  v2 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v1, (const char *)*MEMORY[0x1E0CFC120], v2))
    return 0;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

void antenna::Service::Internal::accessoryNotification_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  void **v7;
  void **v8;
  const char *v9;
  size_t v10;
  uint64_t AccessoryState_sync;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v21 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v23 = v7;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
    v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    v8 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v23 = v8;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu);
    if (v21 < 0)
    {
      operator delete(__p[0]);
      v9 = (const char *)(a1 + 392);
      if ((*(char *)(a1 + 415) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v9 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
LABEL_16:
    v9 = *(const char **)v9;
LABEL_17:
  v10 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (!strncasecmp(v9, (const char *)*MEMORY[0x1E0CFC120], v10)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1);
    v12 = *(uint64_t **)(a1 + 448);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v12;
          v15 = *((_DWORD *)v12 + 7);
          if (v15 <= a3)
            break;
          v12 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_27;
        }
        if (v15 >= a3)
          break;
        v12 = v14[1];
        if (!v12)
        {
          v13 = v14 + 1;
          goto LABEL_27;
        }
      }
      v16 = v14;
    }
    else
    {
      v13 = (uint64_t **)(a1 + 448);
      v14 = (uint64_t **)(a1 + 448);
LABEL_27:
      v16 = operator new(0x28uLL);
      v16[4] = 0;
      *((_DWORD *)v16 + 7) = a3;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = v14;
      *v13 = v16;
      v17 = **(_QWORD **)(a1 + 440);
      v18 = v16;
      if (v17)
      {
        *(_QWORD *)(a1 + 440) = v17;
        v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 448), v18);
      ++*(_QWORD *)(a1 + 456);
    }
    v16[4] = a2;
    if (AccessoryState_sync == antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1))
    {
      v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEBUG, "#D Skip sending accessory since previous and current states are same", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)a1);
    }
  }
}

void antenna::Service::Internal::mesaNotification_sync(uint64_t a1, char a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  uint8_t buf[2];

  if ((a2 & 1) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
    v4 = buf;
    goto LABEL_7;
  }
  if ((a2 & 2) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 0;
      v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
      v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
}

void antenna::Service::Internal::videoNotification_sync(antenna::Service::Internal *a1, unsigned int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v5, 8u);
  }
  antenna::Service::Internal::sendVideoAccessory_sync(a1, (a2 >> 2) & 1);
}

void antenna::Service::Internal::powerSourceNotification_sync(uint64_t a1, int a2)
{
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 564) != a2)
  {
    v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v7 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v9 = p_p;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p);
    }
    *(_DWORD *)(a1 + 564) = a2;
    antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)a1);
  }
}

void antenna::Service::Internal::sendSensorID_sync(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD aBlock[6];
  std::__shared_weak_count *v17;
  void *v18;
  dispatch_object_t object;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 43) == 1)
  {
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  }
  else
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    v10 = *((_BYTE *)this + 736) & 7 | (8 * (*((_BYTE *)this + 737) & 7u));
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v10;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Sending sensor-state to BB: 0x%x", buf, 8u);
    }
    v12 = *((_QWORD *)this + 15);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_10;
    aBlock[4] = this;
    aBlock[5] = v3;
    v17 = v5;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = _Block_copy(aBlock);
    v15 = *((_QWORD *)this + 11);
    if (v15)
      dispatch_retain(v15);
    v18 = v14;
    object = v15;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v12 + 56))(v12, v10, &v18);
    if (object)
      dispatch_release(object);
    if (v18)
      _Block_release(v18);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF622524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to send sensor ID to BB", v12, 2u);
        }
      }
    }
  }
}

void antenna::Service::Internal::reportAccessory_sync(uint64_t a1, unint64_t a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const void *v26;
  void *v27;
  NSObject *v28;
  _QWORD v29[4];
  void *aBlock;
  xpc_object_t object;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v7 = xpc_int64_create(HIDWORD(a2));
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB3D0], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a2);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB4F8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v11) == v5)
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB020], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(524584);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB0E8], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  if (v6)
  {
    xpc_retain(v6);
    v17 = v6;
  }
  else
  {
    v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB018], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_dictionary_create(0, 0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v19) == v5)
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFB1C0]);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB680], v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v12)
  {
    xpc_retain(v12);
    v23 = v12;
  }
  else
  {
    v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB1E8], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  if (v20)
  {
    xpc_retain(v20);
    v25 = v20;
    v26 = *(const void **)(a1 + 104);
    if (v26)
    {
LABEL_37:
      v27 = _Block_copy(v26);
      goto LABEL_40;
    }
  }
  else
  {
    v25 = xpc_null_create();
    v26 = *(const void **)(a1 + 104);
    if (v26)
      goto LABEL_37;
  }
  v27 = 0;
LABEL_40:
  v28 = *(NSObject **)(a1 + 112);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v29[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
  v29[3] = &__block_descriptor_tmp_68_1;
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v25;
    if (v25)
    {
LABEL_42:
      xpc_retain(v25);
      goto LABEL_45;
    }
  }
  else
  {
    aBlock = 0;
    object = v25;
    if (v25)
      goto LABEL_42;
  }
  object = xpc_null_create();
LABEL_45:
  dispatch_async(v28, v29);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v27)
    _Block_release(v27);
  xpc_release(v25);
  xpc_release(v20);
  xpc_release(v12);
  xpc_release(v6);
}

void antenna::Service::Internal::sendAudioSpeaker_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[2];
  xpc_object_t object;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAF0]);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFA68], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v6 = xpc_BOOL_create(*((_BYTE *)this + 335));
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0DDFAD0], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  object = 0;
  xpc_release(v3);
}

void sub_1BF622D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioSpeaker(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

BOOL antenna::Service::Internal::isPowerSourceOverridden_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1)
    return 0;
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

uint64_t antenna::Service::Internal::getPowerSourceState_sync(antenna::Service::Internal *this)
{
  char *v2;

  if (*((_DWORD *)this + 142) == -1
    || (v2 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v2 = (char *)this + 564;
  }
  return *(unsigned int *)v2;
}

uint64_t **std::map<unsigned int,unsigned int>::operator[](uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 7);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v6 + 7) = a2;
    *((_DWORD *)v6 + 8) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 4;
}

void antenna::Service::Internal::sendWorkoutInfo_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  void *p_p;
  _QWORD v18[2];
  xpc_object_t v19;
  void *__p;
  char v21;
  xpc_object_t xdict;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_string_create((const char *)*MEMORY[0x1E0DDFAE8]);
  if (!v5)
    v5 = xpc_null_create();
  v6 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0DDFA68], v5);
  v7 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v7);
  v8 = xpc_int64_create(*((unsigned int *)this + 180));
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutType", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 181));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutState", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(*((unsigned int *)this + 182));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeyWorkoutLocation", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(*((unsigned int *)this + 183));
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kKeySwimLocation", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&xdict);
    if (v21 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v24 = p_p;
    _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Sending workout info: %s\n", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p);
    v6 = xdict;
  }
  v19 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    v6 = xpc_null_create();
    v19 = v6;
  }
  v18[0] = 0;
  v18[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v19, (uint64_t)v18);
  xpc_release(v6);
  v19 = 0;
  xpc_release(xdict);
}

void sub_1BF6232AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::handleDumpState_sync(antenna::Service::Internal *this)
{
  NSObject *v2;
  int v3;
  const char *p_p;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  const char *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  const char *v58;
  NSObject *v59;
  const char *v60;
  NSObject *v61;
  int v62;
  const char *v63;
  const char *v64;
  const char *v65;
  Capabilities *v66;
  void *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int isCMHandDetectionSupported;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  NSObject *v79;
  _QWORD *v80;
  int v81;
  NSObject *v82;
  const char *v83;
  const char *v84;
  NSObject *v85;
  _QWORD *v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  char *v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t **v97;
  uint64_t **v98;
  char *v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t **v105;
  uint64_t **v106;
  char *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  uint64_t **v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  NSObject *v119;
  _QWORD *v120;
  int v121;
  int v122;
  NSObject *v123;
  const char *v124;
  NSObject *v125;
  int v126;
  NSObject *v127;
  const char *v128;
  __int128 __p;
  _QWORD v130[2];
  uint8_t buf[4];
  const char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Antenna state ---------------", (uint8_t *)&__p, 2u);
    v2 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
LABEL_19:
      xpc::object::to_string((antenna::Service::Internal *)((char *)this + 224));
      if (v130[0] >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = p_p;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Transmit state: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
      {
        operator delete((void *)__p);
        v2 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
      }
      else
      {
        v2 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
      }
LABEL_5:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_6;
      goto LABEL_30;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_3;
  }
  v3 = *((unsigned __int8 *)this + 216);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v3;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I fTransmitting=%u", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    goto LABEL_19;
LABEL_4:
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    goto LABEL_5;
LABEL_26:
  if (*((_BYTE *)this + 476))
    v5 = (uint64_t *)MEMORY[0x1E0CFAF88];
  else
    v5 = (uint64_t *)MEMORY[0x1E0CFC120];
  v6 = *v5;
  LODWORD(__p) = 136315138;
  *(_QWORD *)((char *)&__p + 4) = v6;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Overriding State: %s", (uint8_t *)&__p, 0xCu);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power/duty cycle (0.1%% units):", (uint8_t *)&__p, 2u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  v7 = *((_DWORD *)this + 116);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v7;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power backoff : %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  v8 = *((_DWORD *)this + 117);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v8;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM duty cycle: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power Unit: mW:", (uint8_t *)&__p, 2u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v9 = *((_DWORD *)this + 118);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v9;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *((unsigned __int8 *)this + 156);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v10;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for RF: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v11 = *((unsigned __int8 *)this + 158);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v11;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for ARTD: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v12 = *((unsigned __int8 *)this + 157);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v12;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for RF: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v13 = *((unsigned __int8 *)this + 159);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v13;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for ARTD: %d", (uint8_t *)&__p, 8u);
  v2 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_15:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_39:
  v14 = (_QWORD *)((char *)this + 392);
  if (*((char *)this + 415) < 0)
    v14 = (_QWORD *)*v14;
  LODWORD(__p) = 136315138;
  *(_QWORD *)((char *)&__p + 4) = v14;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden state: %s", (uint8_t *)&__p, 0xCu);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    v15 = (_QWORD *)((char *)this + 416);
    if (*((char *)this + 439) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v15;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden type: %s", (uint8_t *)&__p, 0xCu);
  }
LABEL_45:
  antenna::Service::Internal::getAccessoryState_sync(this);
  v16 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v130[0] >= 0)
      v17 = (const char *)&__p;
    else
      v17 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v17;
    _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory connected: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v16 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v130[0] >= 0)
      v18 = (const char *)&__p;
    else
      v18 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v18;
    _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory type: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v16 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *((unsigned __int8 *)this + 163);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v19;
    _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna Switching support: %d", (uint8_t *)&__p, 8u);
    v16 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
LABEL_61:
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_62;
      goto LABEL_67;
    }
  }
  else if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_61;
  }
  v20 = *((unsigned __int8 *)this + 164);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v20;
  _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna switched: %d", (uint8_t *)&__p, 8u);
  v16 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_62:
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_63;
    goto LABEL_68;
  }
LABEL_67:
  v21 = *((unsigned __int8 *)this + 162);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v21;
  _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA supported: %d", (uint8_t *)&__p, 8u);
  v16 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_63:
    if (!*((_BYTE *)this + 152))
      goto LABEL_143;
    goto LABEL_69;
  }
LABEL_68:
  v22 = *((_DWORD *)this + 121);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v22;
  _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA level: %d", (uint8_t *)&__p, 8u);
  if (!*((_BYTE *)this + 152))
    goto LABEL_143;
LABEL_69:
  v23 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    __p = 0uLL;
    v130[0] = 0;
    v24 = *((_DWORD *)this + 52) - 1;
    if (v24 < 4)
      std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E79181D8 + v24));
    v25 = (const char *)&__p;
    if (v130[0] < 0)
      v25 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v25;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Detection Mode: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, (std::string *)&__p);
    if (v130[0] >= 0)
      v26 = (const char *)&__p;
    else
      v26 = (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v26;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Mode: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 333))
      v27 = "ON";
    else
      v27 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v27;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Alert: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v28 = (uint64_t *)*((_QWORD *)this + 36);
    if (v28)
    {
      while (1)
      {
        while (1)
        {
          v30 = (uint64_t **)v28;
          v31 = *((_DWORD *)v28 + 7);
          if (v31 < 1)
            break;
          v28 = *v30;
          v29 = v30;
          if (!*v30)
            goto LABEL_97;
        }
        if ((v31 & 0x80000000) == 0)
          break;
        v28 = v30[1];
        if (!v28)
        {
          v29 = v30 + 1;
          goto LABEL_97;
        }
      }
      v32 = v30;
    }
    else
    {
      v29 = (uint64_t **)((char *)this + 288);
      v30 = (uint64_t **)((char *)this + 288);
LABEL_97:
      v32 = operator new(0x28uLL);
      v32[7] = 0;
      *((_BYTE *)v32 + 32) = 0;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v30;
      *v29 = (uint64_t *)v32;
      v33 = **((_QWORD **)this + 35);
      v34 = (uint64_t *)v32;
      if (v33)
      {
        *((_QWORD *)this + 35) = v33;
        v34 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v34);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v32 + 32))
      v35 = "ON";
    else
      v35 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v35;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Receiver Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v36 = (uint64_t *)*((_QWORD *)this + 36);
    if (v36)
    {
      while (1)
      {
        while (1)
        {
          v38 = (uint64_t **)v36;
          v39 = *((_DWORD *)v36 + 7);
          if (v39 < 2)
            break;
          v36 = *v38;
          v37 = v38;
          if (!*v38)
            goto LABEL_112;
        }
        if (v39 == 1)
          break;
        v36 = v38[1];
        if (!v36)
        {
          v37 = v38 + 1;
          goto LABEL_112;
        }
      }
      v40 = v38;
    }
    else
    {
      v37 = (uint64_t **)((char *)this + 288);
      v38 = (uint64_t **)((char *)this + 288);
LABEL_112:
      v40 = operator new(0x28uLL);
      v40[7] = 1;
      *((_BYTE *)v40 + 32) = 0;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = v38;
      *v37 = (uint64_t *)v40;
      v41 = **((_QWORD **)this + 35);
      v42 = (uint64_t *)v40;
      if (v41)
      {
        *((_QWORD *)this + 35) = v41;
        v42 = *v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v42);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v40 + 32))
      v43 = "ON";
    else
      v43 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v43;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Other Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v44 = (uint64_t *)*((_QWORD *)this + 36);
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          v46 = (uint64_t **)v44;
          v47 = *((_DWORD *)v44 + 7);
          if (v47 < 4)
            break;
          v44 = *v46;
          v45 = v46;
          if (!*v46)
            goto LABEL_128;
        }
        if (v47 == 3)
          break;
        v44 = v46[1];
        if (!v44)
        {
          v45 = v46 + 1;
          goto LABEL_128;
        }
      }
      v48 = v46;
    }
    else
    {
      v45 = (uint64_t **)((char *)this + 288);
      v46 = (uint64_t **)((char *)this + 288);
LABEL_128:
      v48 = operator new(0x28uLL);
      v48[7] = 3;
      *((_BYTE *)v48 + 32) = 0;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = 0;
      *((_QWORD *)v48 + 2) = v46;
      *v45 = (uint64_t *)v48;
      v49 = **((_QWORD **)this + 35);
      v50 = (uint64_t *)v48;
      if (v49)
      {
        *((_QWORD *)this + 35) = v49;
        v50 = *v45;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v50);
      ++*((_QWORD *)this + 37);
    }
    if (*((_BYTE *)v48 + 32))
      v51 = "ON";
    else
      v51 = "OFF";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v51;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Speaker Audio State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 63))
      v52 = "On-Body";
    else
      v52 = "Off-Body";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v52;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Motion State: %s", (uint8_t *)&__p, 0xCu);
    v23 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v53 = *((_QWORD *)this + 33);
    LODWORD(__p) = 134217984;
    *(_QWORD *)((char *)&__p + 4) = v53;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Motion fail counter: %lld", (uint8_t *)&__p, 0xCu);
  }
LABEL_143:
  if (*((_BYTE *)this + 153))
  {
    v54 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = "ON";
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad based on Motion support: %s", (uint8_t *)&__p, 0xCu);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      __p = 0uLL;
      v130[0] = 0;
      v55 = *((int *)this + 68);
      if (v55 < 3)
        std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E79181F8 + v55));
      v56 = (const char *)&__p;
      if (v130[0] < 0)
        v56 = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = v56;
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Mode: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
        operator delete((void *)__p);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 63))
        v57 = "On-Body";
      else
        v57 = "Off-Body";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v57;
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion State: %s", (uint8_t *)&__p, 0xCu);
      v54 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 248))
        v58 = "RUNNING";
      else
        v58 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v58;
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_BYTE *)this + 155))
  {
    v59 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&__p = 0x104000100;
      _os_log_impl(&dword_1BF566000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Always Supported: %d", (uint8_t *)&__p, 8u);
      v59 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
LABEL_167:
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          goto LABEL_172;
        goto LABEL_168;
      }
    }
    else if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      goto LABEL_167;
    }
    if (*((_DWORD *)this + 63))
      v64 = "On-Body";
    else
      v64 = "Off-Body";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v64;
    _os_log_impl(&dword_1BF566000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion State: %s", (uint8_t *)&__p, 0xCu);
    v59 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
LABEL_168:
      if (*((_BYTE *)this + 248))
        v60 = "RUNNING";
      else
        v60 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v60;
      _os_log_impl(&dword_1BF566000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
LABEL_172:
  if (!*((_BYTE *)this + 154))
    goto LABEL_198;
  v61 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&__p = 0x104000100;
    _os_log_impl(&dword_1BF566000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Configuration Support: %d", (uint8_t *)&__p, 8u);
    v61 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (v62 = *((_DWORD *)this + 53), v62 == 255))
    {
      if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this))
      {
        v63 = "Not Free Space";
LABEL_191:
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v63;
        _os_log_impl(&dword_1BF566000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Config: %s", (uint8_t *)&__p, 0xCu);
        v61 = *((_QWORD *)this + 5);
        goto LABEL_192;
      }
      v62 = *((_DWORD *)this + 63) != 0;
    }
    if (v62)
      v63 = "Not Free Space";
    else
      v63 = "Free Space";
    goto LABEL_191;
  }
LABEL_192:
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(this, (std::string *)&__p);
    v65 = v130[0] >= 0 ? (const char *)&__p : (const char *)__p;
    *(_DWORD *)buf = 136315138;
    v132 = v65;
    _os_log_impl(&dword_1BF566000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Overridden Free Space: %s", buf, 0xCu);
    if (SHIBYTE(v130[0]) < 0)
      operator delete((void *)__p);
  }
LABEL_198:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v66 = (Capabilities *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v67 = operator new(1uLL);
    v68 = operator new(0x20uLL);
    *v68 = off_1E7922580;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
    v69 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v67;
    off_1ED70F200 = v68;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v66 = (Capabilities *)unk_1ED70F1F8;
  }
  v72 = (std::__shared_weak_count *)off_1ED70F200;
  *(_QWORD *)&__p = v66;
  *((_QWORD *)&__p + 1) = off_1ED70F200;
  if (off_1ED70F200)
  {
    v73 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v66);
  v76 = isCMHandDetectionSupported;
  if (!v72)
    goto LABEL_212;
  v77 = (unint64_t *)&v72->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v76)
      goto LABEL_220;
  }
  else
  {
LABEL_212:
    if (!isCMHandDetectionSupported)
      goto LABEL_220;
  }
  v79 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v80 = (_QWORD *)((char *)this + 536);
    if (*((char *)this + 559) < 0)
      v80 = (_QWORD *)*v80;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v80;
    _os_log_impl(&dword_1BF566000, v79, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection Overriding: %s", (uint8_t *)&__p, 0xCu);
    v79 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    v81 = *((_DWORD *)this + 132);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v81;
    _os_log_impl(&dword_1BF566000, v79, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection State: %d", (uint8_t *)&__p, 8u);
  }
LABEL_220:
  if (*((_BYTE *)this + 169))
  {
    v82 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v130[0] >= 0)
        v83 = (const char *)&__p;
      else
        v83 = (const char *)__p;
      *(_DWORD *)buf = 136315138;
      v132 = v83;
      _os_log_impl(&dword_1BF566000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source: %s", buf, 0xCu);
      if (SHIBYTE(v130[0]) < 0)
        operator delete((void *)__p);
      v82 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 142) != -1
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        ctu::iokit::asString();
        if (v130[0] >= 0)
          v84 = (const char *)&__p;
        else
          v84 = (const char *)__p;
        *(_DWORD *)buf = 136315138;
        v132 = v84;
        _os_log_impl(&dword_1BF566000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
        if (SHIBYTE(v130[0]) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_DWORD *)buf = 136315138;
        v132 = "AUTO";
        _os_log_impl(&dword_1BF566000, v82, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
      }
    }
  }
  if (!*((_BYTE *)this + 170))
    goto LABEL_288;
  v85 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    v86 = (_QWORD *)((char *)this + 640);
    if (*((char *)this + 663) < 0)
      v86 = (_QWORD *)*v86;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v86;
    _os_log_impl(&dword_1BF566000, v85, OS_LOG_TYPE_DEFAULT, "#I Device Material Overridden State: %s", (uint8_t *)&__p, 0xCu);
    v85 = *((_QWORD *)this + 5);
  }
  if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    goto LABEL_288;
  v87 = (uint64_t **)((char *)this + 624);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v89 = (uint64_t **)((char *)this + 624);
  v90 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
    v91 = (char *)*((_QWORD *)this + 78);
    while (1)
    {
      while (1)
      {
        v90 = (uint64_t **)v91;
        v92 = *((_DWORD *)v91 + 7);
        if (v92 < 2)
          break;
        v91 = (char *)*v90;
        v89 = v90;
        if (!*v90)
          goto LABEL_251;
      }
      if (v92)
        break;
      v91 = (char *)v90[1];
      if (!v91)
      {
        v89 = v90 + 1;
        goto LABEL_251;
      }
    }
    v96 = *((_DWORD *)v90 + 8);
    goto LABEL_256;
  }
LABEL_251:
  v93 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v93 + 28) = 1;
  *v93 = 0;
  v93[1] = 0;
  v93[2] = (uint64_t)v90;
  *v89 = v93;
  v94 = **((_QWORD **)this + 77);
  v95 = v93;
  if (v94)
  {
    *((_QWORD *)this + 77) = v94;
    v95 = *v89;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v95);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v96 = *((_DWORD *)v93 + 8);
  v97 = (uint64_t **)((char *)this + 624);
  v98 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
LABEL_256:
    v99 = (char *)v88;
    while (1)
    {
      while (1)
      {
        v98 = (uint64_t **)v99;
        v100 = *((_DWORD *)v99 + 7);
        if (v100 < 3)
          break;
        v99 = (char *)*v98;
        v97 = v98;
        if (!*v98)
          goto LABEL_262;
      }
      if (v100 == 2)
        break;
      v99 = (char *)v98[1];
      if (!v99)
      {
        v97 = v98 + 1;
        goto LABEL_262;
      }
    }
    v104 = *((_DWORD *)v98 + 8);
    goto LABEL_267;
  }
LABEL_262:
  v101 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v101 + 28) = 2;
  *v101 = 0;
  v101[1] = 0;
  v101[2] = (uint64_t)v98;
  *v97 = v101;
  v102 = **((_QWORD **)this + 77);
  v103 = v101;
  if (v102)
  {
    *((_QWORD *)this + 77) = v102;
    v103 = *v97;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v103);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v104 = *((_DWORD *)v101 + 8);
  v105 = (uint64_t **)((char *)this + 624);
  v106 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
LABEL_267:
    v107 = (char *)v88;
    do
    {
      while (1)
      {
        v106 = (uint64_t **)v107;
        v108 = *((_DWORD *)v107 + 7);
        if (v108 < 4)
          break;
        v107 = (char *)*v106;
        v105 = v106;
        if (!*v106)
          goto LABEL_273;
      }
      if (v108 == 3)
      {
        v112 = *((_DWORD *)v106 + 8);
        goto LABEL_279;
      }
      v107 = (char *)v106[1];
    }
    while (v107);
    v105 = v106 + 1;
  }
LABEL_273:
  v109 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v109 + 28) = 3;
  *v109 = 0;
  v109[1] = 0;
  v109[2] = (uint64_t)v106;
  *v105 = v109;
  v110 = **((_QWORD **)this + 77);
  v111 = v109;
  if (v110)
  {
    *((_QWORD *)this + 77) = v110;
    v111 = *v105;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v111);
  ++*((_QWORD *)this + 79);
  v88 = (uint64_t *)*((_QWORD *)this + 78);
  v112 = *((_DWORD *)v109 + 8);
  v113 = (uint64_t **)((char *)this + 624);
  if (v88)
  {
    while (1)
    {
LABEL_279:
      while (1)
      {
        v113 = (uint64_t **)v88;
        v114 = *((_DWORD *)v88 + 7);
        if (v114 < 5)
          break;
        v88 = *v113;
        v87 = v113;
        if (!*v113)
          goto LABEL_283;
      }
      if (v114 == 4)
        break;
      v88 = v113[1];
      if (!v88)
      {
        v87 = v113 + 1;
        goto LABEL_283;
      }
    }
    v115 = (uint64_t *)v113;
  }
  else
  {
LABEL_283:
    v115 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v115 + 28) = 4;
    *v115 = 0;
    v115[1] = 0;
    v115[2] = (uint64_t)v113;
    *v87 = v115;
    v116 = **((_QWORD **)this + 77);
    v117 = v115;
    if (v116)
    {
      *((_QWORD *)this + 77) = v116;
      v117 = *v87;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v117);
    ++*((_QWORD *)this + 79);
  }
  v118 = *((_DWORD *)v115 + 8);
  *(_QWORD *)&__p = __PAIR64__(v96, 67109888);
  WORD4(__p) = 1024;
  *(_DWORD *)((char *)&__p + 10) = v104;
  HIWORD(__p) = 1024;
  LODWORD(v130[0]) = v112;
  WORD2(v130[0]) = 1024;
  *(_DWORD *)((char *)v130 + 6) = v118;
  _os_log_impl(&dword_1BF566000, v85, OS_LOG_TYPE_DEFAULT, "#I Current Device Material Values are as Bottom Enclosure: %d, Top Enclosure: %d, FCM Type: %d, BCM Type: %d", (uint8_t *)&__p, 0x1Au);
LABEL_288:
  if (*((_BYTE *)this + 688))
  {
    v119 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v120 = (_QWORD *)((char *)this + 696);
      if (*((char *)this + 719) < 0)
        v120 = (_QWORD *)*v120;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v120;
      _os_log_impl(&dword_1BF566000, v119, OS_LOG_TYPE_DEFAULT, "#I Workout info override: %s", (uint8_t *)&__p, 0xCu);
      v119 = *((_QWORD *)this + 5);
    }
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      v121 = *((_DWORD *)this + 180);
      v122 = *((_DWORD *)this + 181);
      LODWORD(__p) = 67109376;
      DWORD1(__p) = v121;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v122;
      _os_log_impl(&dword_1BF566000, v119, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d, State=%d", (uint8_t *)&__p, 0xEu);
    }
  }
  if (*((_BYTE *)this + 192))
  {
    v123 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 561))
        v124 = "CLOSED";
      else
        v124 = "OPENED";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v124;
      _os_log_impl(&dword_1BF566000, v123, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_DWORD *)this + 43))
  {
    v125 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
    {
      v126 = *((unsigned __int8 *)this + 736);
      LODWORD(__p) = 67109120;
      DWORD1(__p) = v126;
      _os_log_impl(&dword_1BF566000, v125, OS_LOG_TYPE_DEFAULT, "#I Face ID Support Version: %d", (uint8_t *)&__p, 8u);
    }
  }
  if (*((_BYTE *)this + 176))
  {
    v127 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 737))
        v128 = "ON";
      else
        v128 = "OFF";
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v128;
      _os_log_impl(&dword_1BF566000, v127, OS_LOG_TYPE_DEFAULT, "#I Front Camera: %s", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_1BF624DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::dumpState(antenna::Service::Internal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _QWORD aBlock[6];
  std::__shared_weak_count *v22;
  xpc_object_t v23;
  void *v24;
  dispatch_object_t object;
  xpc_object_t v26;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      if (*(_BYTE *)(a1 + 64))
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (v9 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v9);
            v10 = v9;
          }
          else
          {
            v10 = xpc_null_create();
          }
        }
        else
        {
          v10 = xpc_null_create();
          v9 = 0;
        }
        xpc_release(v9);
        v11 = xpc_string_create((const char *)*MEMORY[0x1E0DDFBA0]);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0DDFA68], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = *(_QWORD *)(v3 + 120);
        v26 = v10;
        if (v10)
          xpc_retain(v10);
        else
          v26 = xpc_null_create();
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_22_3;
        v15 = *(_QWORD *)(a1 + 40);
        v14 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock[4] = v3;
        aBlock[5] = v15;
        v22 = v14;
        if (v14)
        {
          p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
          do
            v17 = __ldxr(p_shared_weak_owners);
          while (__stxr(v17 + 1, p_shared_weak_owners));
        }
        v18 = *(void **)(a1 + 56);
        v23 = v18;
        if (v18)
          xpc_retain(v18);
        else
          v23 = xpc_null_create();
        v19 = _Block_copy(aBlock);
        v20 = *(NSObject **)(v3 + 88);
        if (v20)
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        v24 = v19;
        object = v20;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(_QWORD *)v13 + 48))(v13, &v26, &v24);
        if (object)
          dispatch_release(object);
        if (v24)
          _Block_release(v24);
        xpc_release(v26);
        v26 = 0;
        xpc_release(v23);
        v23 = 0;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(v10);
      }
    }
  }
}

void sub_1BF625194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, char a18)
{
  void *v18;
  uint64_t v19;

  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a18);
  xpc_release(object);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(_QWORD *)(v19 - 56) = 0;
  xpc_release(v18);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *antenna::Service::Service(_QWORD *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  dispatch_object_t object;
  void *aBlock;
  dispatch_object_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  *a1 = 0;
  a1[1] = 0;
  v7 = a2[1];
  v27 = *a2;
  v28 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a3 + 8);
  aBlock = v10;
  v26 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *a4;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  antenna::Service::Internal::create(&v27, (uint64_t)&aBlock, &object, (antenna::Service::Internal **)&v29);
  v13 = v29;
  v29 = 0uLL;
  v14 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (object)
    dispatch_release(object);
  if (v26)
    dispatch_release(v26);
  if (aBlock)
    _Block_release(aBlock);
  v20 = v28;
  if (!v28)
    return a1;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_1BF62544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  NSObject *v14;

  if (v14)
    dispatch_release(v14);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void antenna::Service::~Service(antenna::Service *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void antenna::Service::startService(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::startService(v1);
}

void antenna::Service::stopService(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::stopService(v1);
}

void antenna::Service::exitLowPower(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::exitLowPower(v1);
}

void antenna::Service::enterLowPower(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::enterLowPower(v1);
}

void antenna::Service::setMotionThresholds(CMOnBodyDelegate ***a1, ctu **a2)
{
  CMOnBodyDelegate **v2;
  ctu *v3;
  ctu *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      v3 = (ctu *)xpc_null_create();
      v4 = v3;
    }
    antenna::Service::Internal::setMotionThresholds(v2, &v4);
    xpc_release(v3);
  }
}

void sub_1BF6255F4(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::callActive(antenna::Service *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
    }
    *(_BYTE *)(v1 + 165) = 1;
    if (*(_BYTE *)(v1 + 162))
    {
      v3 = *(_QWORD *)(v1 + 376);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 72))
          ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::callInactive(antenna::Service *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
    }
    *(_BYTE *)(v1 + 165) = 0;
    if (*(_BYTE *)(v1 + 162))
    {
      v3 = *(_QWORD *)(v1 + 376);
      if (v3)
      {
        if (*(_QWORD *)(v3 + 72))
          ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::antennaSetProperty(antenna::Service::Internal **this, xpc_object_t *a2)
{
  antenna::Service::Internal *v2;

  v2 = *this;
  if (v2)
    antenna::Service::Internal::antennaSetProperty(v2, a2);
}

void antenna::Service::antennaGetProperty(NSObject ***this@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_null_create();
  *a3 = v6;
  if (*this)
  {
    antenna::Service::Internal::antennaGetProperty(*this, a2, &v9);
    v7 = v9;
    v8 = xpc_null_create();
    *a3 = v7;
    xpc_release(v6);
    xpc_release(v8);
  }
}

void sub_1BF6257C8(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::dumpState(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::dumpState(v1);
}

void antenna::Service::shutdown(antenna::Service::Internal **this)
{
  antenna::Service::Internal *v1;

  v1 = *this;
  if (v1)
    antenna::Service::Internal::shutdown(v1);
}

void antenna::Service::Internal::~Internal(xpc_object_t *this)
{
  void *v1;

  antenna::Service::Internal::~Internal(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  xpc_object_t v31;
  NSObject *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;

  *this = off_1E7917A40;
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)this);
  if (*((char *)this + 719) < 0)
    operator delete(this[87]);
  v2 = (std::__shared_weak_count *)this[85];
  if (!v2)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*((char *)this + 663) & 0x80000000) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[78]);
      if ((*((char *)this + 615) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 663) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(this[80]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[78]);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
LABEL_9:
    v5 = (std::__shared_weak_count *)this[73];
    if (!v5)
      goto LABEL_17;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(this[74]);
  v5 = (std::__shared_weak_count *)this[73];
  if (!v5)
    goto LABEL_17;
LABEL_14:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((*((char *)this + 559) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_17:
  if (*((char *)this + 559) < 0)
LABEL_18:
    operator delete(this[67]);
LABEL_19:
  v8 = (std::__shared_weak_count *)this[65];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)this[63];
  if (!v11)
    goto LABEL_28;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
    {
LABEL_29:
      if ((*((char *)this + 415) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  else
  {
LABEL_28:
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
      goto LABEL_29;
  }
  operator delete(this[52]);
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
LABEL_30:
    v14 = (std::__shared_weak_count *)this[48];
    if (!v14)
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(this[49]);
  v14 = (std::__shared_weak_count *)this[48];
  if (!v14)
    goto LABEL_41;
LABEL_37:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_41:
  v17 = this[45];
  if (v17)
    dispatch_release(v17);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[39]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[36]);
  v18 = this[32];
  if (v18)
    dispatch_release(v18);
  v19 = (std::__shared_weak_count *)this[30];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  xpc_release(this[28]);
  this[28] = 0;
  v22 = this[25];
  if (v22)
    dispatch_release(v22);
  v23 = this[23];
  if (v23)
    dispatch_release(v23);
  v24 = (std::__shared_weak_count *)this[18];
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)this[16];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = this[14];
  if (v30)
    dispatch_release(v30);
  v31 = this[13];
  if (v31)
    _Block_release(v31);
  *this = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v32 = this[12];
  if (v32)
    dispatch_release(v32);
  v33 = this[11];
  if (v33)
    dispatch_release(v33);
  v34 = (std::__shared_weak_count *)this[10];
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "antenna.svc");
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke(uint64_t a1, char a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  const char *v19;
  void **v20;
  _QWORD v21[2];
  xpc_object_t v22;
  void *block[2];
  void (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  xpc_object_t object;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      if ((a2 & 1) == 0)
      {
        v13 = *MEMORY[0x1E0DDFA68];
        if (xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 56), (const char *)*MEMORY[0x1E0DDFA68]))
        {
          v14 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v21[0] = a1 + 56;
            v21[1] = v13;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, &v22);
            xpc::dyn_cast_or_default((xpc *)&v22, (const object *)"None", v19);
            if (SHIBYTE(v24) >= 0)
              v20 = block;
            else
              v20 = (void **)block[0];
            *(_DWORD *)buf = 136315138;
            v29 = v20;
            _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
            if (SHIBYTE(v24) < 0)
              operator delete(block[0]);
            xpc_release(v22);
          }
        }
      }
      if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
      {
        v15 = *a3;
        if (v15)
        {
          xpc_retain(v15);
          v16 = *(const void **)(a1 + 64);
          if (v16)
          {
LABEL_16:
            v17 = _Block_copy(v16);
            goto LABEL_19;
          }
        }
        else
        {
          v15 = xpc_null_create();
          v16 = *(const void **)(a1 + 64);
          if (v16)
            goto LABEL_16;
        }
        v17 = 0;
LABEL_19:
        v18 = *(NSObject **)(a1 + 72);
        block[0] = (void *)MEMORY[0x1E0C809B0];
        block[1] = (void *)1174405120;
        v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke;
        v25 = &__block_descriptor_tmp_33_4;
        if (v17)
        {
          aBlock = _Block_copy(v17);
          object = v15;
          if (v15)
          {
LABEL_21:
            xpc_retain(v15);
LABEL_24:
            dispatch_async(v18, block);
            xpc_release(object);
            object = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v17)
              _Block_release(v17);
            xpc_release(v15);
            return;
          }
        }
        else
        {
          aBlock = 0;
          object = v15;
          if (v15)
            goto LABEL_21;
        }
        object = xpc_null_create();
        goto LABEL_24;
      }
    }
  }
}

void sub_1BF625B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  a1[7] = v7;
  if (!v7)
  {
    a1[7] = xpc_null_create();
    v8 = (void *)a2[8];
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v7);
  v8 = (void *)a2[8];
  if (v8)
LABEL_8:
    v8 = _Block_copy(v8);
LABEL_9:
  v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1BF625CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptr"
                     "IT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__11"
                                "0shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7917C60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  CommandDriverFactory *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  queue v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  NSObject *v89;
  void *v90;
  const void *v91;
  NSObject *v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  NSObject *v96;
  void *v97;
  const void *v98;
  NSObject *v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  NSObject *v103;
  void *v104;
  const void *v105;
  NSObject *v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  NSObject *v110;
  void *v111;
  const void *v112;
  NSObject *v113;
  ctu::iokit::Controller *v114;
  NSObject *v115;
  uint8_t *v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  NSObject *v120;
  void *v121;
  const void *v122;
  NSObject *v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  NSObject *v127;
  void *v128;
  const void *v129;
  NSObject *v130;
  Capabilities *v131;
  void *v132;
  _QWORD *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int isCMHandDetectionSupported;
  int v141;
  unint64_t *v142;
  unint64_t v143;
  NSObject *v144;
  NSObject *v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t **v153;
  unint64_t v154;
  void *v155;
  NSObject *v156;
  NSObject *v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  NSObject *v166;
  NSObject *v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  ctu::iokit::IOHIDController *v176;
  NSObject *v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  _QWORD v224[6];
  std::__shared_weak_count *v225;
  dispatch_object_t v226;
  _QWORD v227[6];
  std::__shared_weak_count *v228;
  void *v229;
  dispatch_object_t v230;
  dispatch_object_t v231;
  _QWORD v232[6];
  std::__shared_weak_count *v233;
  void *v234;
  dispatch_object_t v235;
  dispatch_object_t v236;
  _QWORD v237[6];
  std::__shared_weak_count *v238;
  const void *v239;
  dispatch_object_t object;
  dispatch_object_t v241;
  _QWORD v242[6];
  std::__shared_weak_count *v243;
  _QWORD v244[6];
  std::__shared_weak_count *v245;
  uint8_t buf[16];
  char v247;
  _QWORD v248[6];
  std::__shared_weak_count *v249;
  _QWORD v250[6];
  std::__shared_weak_count *v251;
  _QWORD v252[6];
  std::__shared_weak_count *v253;
  _QWORD v254[6];
  std::__shared_weak_count *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  _QWORD aBlock[6];
  std::__shared_weak_count *v259;
  const void *v260;
  dispatch_object_t v261;
  NSObject *v262;
  dispatch_object_t v263;
  _QWORD v264[3];
  _QWORD *v265;
  uint8_t v266[16];
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  v219 = *a1;
  antenna::Service::Internal::configuration_sync((antenna::Service::Internal *)v2);
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_null_create();
  v6 = *(void **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = v4;
  xpc_release(v6);
  xpc_release(v5);
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFBC28]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 224), (const char *)*MEMORY[0x1E0CFBBD8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v10 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v9);
    v11 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v12 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v10 = off_1ED70F4D0;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = *(NSObject **)(v2 + 96);
  v263 = v18;
  if (v18)
    dispatch_retain(v18);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *))(*(_QWORD *)v10 + 56))(v266, v10, &v263);
  v20 = *(_OWORD *)v266;
  memset(v266, 0, sizeof(v266));
  v21 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(std::__shared_weak_count **)&v266[8];
  if (*(_QWORD *)&v266[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v266[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v263)
    dispatch_release(v263);
  if (!v15)
    goto LABEL_437;
  v27 = (unint64_t *)&v15->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (*(_QWORD *)(v2 + 120))
      goto LABEL_41;
  }
  else
  {
LABEL_437:
    if (*(_QWORD *)(v2 + 120))
      goto LABEL_41;
  }
  v29 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v29, OS_LOG_TYPE_ERROR, "Failed to create command driver", buf, 2u);
  }
LABEL_41:
  v30 = MEMORY[0x1E0C809B0];
  if (!*(_BYTE *)(v2 + 152) && !*(_BYTE *)(v2 + 153))
    goto LABEL_85;
  v31 = *(NSObject **)(v2 + 88);
  v262 = v31;
  if (v31)
    dispatch_retain(v31);
  CMOnBodyDelegate::create(&v262, v19, buf);
  v32 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v33 = *(std::__shared_weak_count **)(v2 + 240);
  *(_OWORD *)(v2 + 232) = v32;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v262)
    dispatch_release(v262);
  if (*(_QWORD *)(v2 + 232))
  {
    v39 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v39 || (v40 = *(_QWORD *)(v2 + 72), (v41 = std::__shared_weak_count::lock(v39)) == 0))
LABEL_433:
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v42 = v41;
    p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v44 = __ldxr(p_shared_weak_owners);
    while (__stxr(v44 + 1, p_shared_weak_owners));
    v45 = (unint64_t *)&v41->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v42);
    }
    v47 = *(_QWORD **)(v2 + 232);
    aBlock[0] = v30;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_35_3;
    aBlock[4] = v2;
    aBlock[5] = v40;
    v259 = v42;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
    v49 = _Block_copy(aBlock);
    v50 = *(NSObject **)(v2 + 88);
    if (v50)
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    v260 = v49;
    v261 = v50;
    v51 = (_QWORD *)v47[4];
    if ((unint64_t)v51 >= v47[5])
    {
      v53 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v47 + 3, (uint64_t)&v260);
      goto LABEL_78;
    }
    if (v49)
    {
      v52 = _Block_copy(v49);
      v50 = v261;
      *v51 = v52;
      v51[1] = v50;
      if (!v50)
      {
LABEL_74:
        v53 = v51 + 2;
LABEL_78:
        v47[4] = v53;
        if (v261)
          dispatch_release(v261);
        if (v260)
          _Block_release(v260);
        if (v259)
          std::__shared_weak_count::__release_weak(v259);
        std::__shared_weak_count::__release_weak(v42);
        goto LABEL_85;
      }
    }
    else
    {
      *v51 = 0;
      v51[1] = v50;
      if (!v50)
        goto LABEL_74;
    }
    dispatch_retain(v50);
    goto LABEL_74;
  }
  v54 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v54, OS_LOG_TYPE_ERROR, "Failed to create on-body handler", buf, 2u);
  }
LABEL_85:
  v55 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v55)
    goto LABEL_433;
  v56 = *(_QWORD *)(v2 + 72);
  v57 = std::__shared_weak_count::lock(v55);
  if (!v57)
    goto LABEL_433;
  v58 = v57;
  v59 = (unint64_t *)&v57->__shared_weak_owners_;
  do
    v60 = __ldxr(v59);
  while (__stxr(v60 + 1, v59));
  v61 = (unint64_t *)&v57->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (v62)
  {
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_101;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v58);
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_101;
  }
  if (*(_BYTE *)(v2 + 158)
    || *(_BYTE *)(v2 + 162)
    || *(_BYTE *)(v2 + 163)
    || *(_BYTE *)(v2 + 169)
    || *(_DWORD *)(v2 + 172)
    || *(_BYTE *)(v2 + 176))
  {
LABEL_101:
    v63 = *(std::__shared_weak_count **)(v2 + 144);
    v256 = *(_QWORD *)(v2 + 136);
    v257 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v66 = off_1ED70F338;
    if (!off_1ED70F338)
    {
      ABMServer::create_default_global(buf);
      v67 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v68 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
      off_1ED70F338 = v67;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v66 = off_1ED70F338;
    }
    v74 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    if (*(&off_1ED70F338 + 1))
    {
      v75 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v66 + 208);
    v77 = operator new(0xD8uLL);
    std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v77, &v256, (uint64_t *)buf);
    v78 = *(std::__shared_weak_count **)(v2 + 384);
    *(_QWORD *)(v2 + 376) = v77 + 3;
    *(_QWORD *)(v2 + 384) = v77;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (!v74)
      goto LABEL_128;
    v81 = (unint64_t *)&v74->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
      v83 = v257;
      if (!v257)
        goto LABEL_132;
    }
    else
    {
LABEL_128:
      v83 = v257;
      if (!v257)
        goto LABEL_132;
    }
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
      if (*(_BYTE *)(v2 + 156))
        goto LABEL_138;
LABEL_133:
      if (!*(_BYTE *)(v2 + 158))
        goto LABEL_157;
LABEL_138:
      v86 = *(_QWORD *)(v2 + 376);
      v254[0] = v30;
      v254[1] = 1174405120;
      v254[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_36;
      v254[3] = &__block_descriptor_tmp_38;
      v254[4] = v2;
      v254[5] = v56;
      v255 = v58;
      do
        v87 = __ldxr(v59);
      while (__stxr(v87 + 1, v59));
      v88 = _Block_copy(v254);
      v89 = *(NSObject **)(v2 + 88);
      if (v89)
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      if (v88)
      {
        v90 = _Block_copy(v88);
        v91 = *(const void **)(v86 + 88);
        *(_QWORD *)(v86 + 88) = v90;
        if (!v91)
          goto LABEL_147;
      }
      else
      {
        v91 = *(const void **)(v86 + 88);
        *(_QWORD *)(v86 + 88) = 0;
        if (!v91)
        {
LABEL_147:
          if (v89)
            dispatch_retain(v89);
          v92 = *(NSObject **)(v86 + 96);
          *(_QWORD *)(v86 + 96) = v89;
          if (v92)
            dispatch_release(v92);
          if (v89)
            dispatch_release(v89);
          if (v88)
            _Block_release(v88);
          if (v255)
            std::__shared_weak_count::__release_weak(v255);
LABEL_157:
          if (!*(_BYTE *)(v2 + 162))
            goto LABEL_177;
          v93 = *(_QWORD *)(v2 + 376);
          v252[0] = v30;
          v252[1] = 1174405120;
          v252[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_39;
          v252[3] = &__block_descriptor_tmp_41_1;
          v252[4] = v2;
          v252[5] = v56;
          v253 = v58;
          do
            v94 = __ldxr(v59);
          while (__stxr(v94 + 1, v59));
          v95 = _Block_copy(v252);
          v96 = *(NSObject **)(v2 + 88);
          if (v96)
            dispatch_retain(*(dispatch_object_t *)(v2 + 88));
          if (v95)
          {
            v97 = _Block_copy(v95);
            v98 = *(const void **)(v93 + 120);
            *(_QWORD *)(v93 + 120) = v97;
            if (!v98)
              goto LABEL_167;
          }
          else
          {
            v98 = *(const void **)(v93 + 120);
            *(_QWORD *)(v93 + 120) = 0;
            if (!v98)
            {
LABEL_167:
              if (v96)
                dispatch_retain(v96);
              v99 = *(NSObject **)(v93 + 128);
              *(_QWORD *)(v93 + 128) = v96;
              if (v99)
                dispatch_release(v99);
              if (v96)
                dispatch_release(v96);
              if (v95)
                _Block_release(v95);
              if (v253)
                std::__shared_weak_count::__release_weak(v253);
LABEL_177:
              if (!*(_BYTE *)(v2 + 163))
                goto LABEL_197;
              v100 = *(_QWORD *)(v2 + 376);
              v250[0] = v30;
              v250[1] = 1174405120;
              v250[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_42;
              v250[3] = &__block_descriptor_tmp_44_0;
              v250[4] = v2;
              v250[5] = v56;
              v251 = v58;
              do
                v101 = __ldxr(v59);
              while (__stxr(v101 + 1, v59));
              v102 = _Block_copy(v250);
              v103 = *(NSObject **)(v2 + 88);
              if (v103)
                dispatch_retain(*(dispatch_object_t *)(v2 + 88));
              if (v102)
              {
                v104 = _Block_copy(v102);
                v105 = *(const void **)(v100 + 104);
                *(_QWORD *)(v100 + 104) = v104;
                if (!v105)
                  goto LABEL_187;
              }
              else
              {
                v105 = *(const void **)(v100 + 104);
                *(_QWORD *)(v100 + 104) = 0;
                if (!v105)
                {
LABEL_187:
                  if (v103)
                    dispatch_retain(v103);
                  v106 = *(NSObject **)(v100 + 112);
                  *(_QWORD *)(v100 + 112) = v103;
                  if (v106)
                    dispatch_release(v106);
                  if (v103)
                    dispatch_release(v103);
                  if (v102)
                    _Block_release(v102);
                  if (v251)
                    std::__shared_weak_count::__release_weak(v251);
LABEL_197:
                  if (!*(_BYTE *)(v2 + 169))
                    goto LABEL_226;
                  v107 = *(_QWORD *)(v2 + 376);
                  v248[0] = v30;
                  v248[1] = 1174405120;
                  v248[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_45;
                  v248[3] = &__block_descriptor_tmp_46_0;
                  v248[4] = v2;
                  v248[5] = v56;
                  v249 = v58;
                  do
                    v108 = __ldxr(v59);
                  while (__stxr(v108 + 1, v59));
                  v109 = _Block_copy(v248);
                  v110 = *(NSObject **)(v2 + 88);
                  if (v110)
                    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                  if (v109)
                  {
                    v111 = _Block_copy(v109);
                    v112 = *(const void **)(v107 + 136);
                    *(_QWORD *)(v107 + 136) = v111;
                    if (!v112)
                    {
LABEL_207:
                      if (v110)
                        dispatch_retain(v110);
                      v113 = *(NSObject **)(v107 + 144);
                      *(_QWORD *)(v107 + 144) = v110;
                      if (v113)
                        dispatch_release(v113);
                      if (v110)
                        dispatch_release(v110);
                      if (v109)
                        _Block_release(v109);
                      v114 = *(ctu::iokit::Controller **)(*(_QWORD *)(v2 + 376) + 72);
                      if (v114)
                      {
                        *(_DWORD *)(v2 + 564) = ctu::iokit::Controller::queryPowerSource(v114);
                        v115 = *(NSObject **)(v2 + 40);
                        if (!os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                        {
LABEL_224:
                          if (v249)
                            std::__shared_weak_count::__release_weak(v249);
LABEL_226:
                          if (!*(_DWORD *)(v2 + 172))
                            goto LABEL_246;
                          *(_BYTE *)(v2 + 736) = 0;
                          v117 = *(_QWORD *)(v2 + 376);
                          v244[0] = v30;
                          v244[1] = 1174405120;
                          v244[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_47;
                          v244[3] = &__block_descriptor_tmp_49_0;
                          v244[4] = v2;
                          v244[5] = v56;
                          v245 = v58;
                          do
                            v118 = __ldxr(v59);
                          while (__stxr(v118 + 1, v59));
                          v119 = _Block_copy(v244);
                          v120 = *(NSObject **)(v2 + 88);
                          if (v120)
                            dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                          if (v119)
                          {
                            v121 = _Block_copy(v119);
                            v122 = *(const void **)(v117 + 152);
                            *(_QWORD *)(v117 + 152) = v121;
                            if (!v122)
                              goto LABEL_236;
                          }
                          else
                          {
                            v122 = *(const void **)(v117 + 152);
                            *(_QWORD *)(v117 + 152) = 0;
                            if (!v122)
                            {
LABEL_236:
                              if (v120)
                                dispatch_retain(v120);
                              v123 = *(NSObject **)(v117 + 160);
                              *(_QWORD *)(v117 + 160) = v120;
                              if (v123)
                                dispatch_release(v123);
                              if (v120)
                                dispatch_release(v120);
                              if (v119)
                                _Block_release(v119);
                              if (v245)
                                std::__shared_weak_count::__release_weak(v245);
LABEL_246:
                              if (!*(_BYTE *)(v2 + 176))
                              {
LABEL_266:
                                IOKitEventNotifier::start(*(IOKitEventNotifier **)(v2 + 376));
                                goto LABEL_267;
                              }
                              *(_BYTE *)(v2 + 737) = 0;
                              v124 = *(_QWORD *)(v2 + 376);
                              v242[0] = v30;
                              v242[1] = 1174405120;
                              v242[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_50;
                              v242[3] = &__block_descriptor_tmp_51_1;
                              v242[4] = v2;
                              v242[5] = v56;
                              v243 = v58;
                              do
                                v125 = __ldxr(v59);
                              while (__stxr(v125 + 1, v59));
                              v126 = _Block_copy(v242);
                              v127 = *(NSObject **)(v2 + 88);
                              if (v127)
                                dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                              if (v126)
                              {
                                v128 = _Block_copy(v126);
                                v129 = *(const void **)(v124 + 168);
                                *(_QWORD *)(v124 + 168) = v128;
                                if (!v129)
                                  goto LABEL_256;
                              }
                              else
                              {
                                v129 = *(const void **)(v124 + 168);
                                *(_QWORD *)(v124 + 168) = 0;
                                if (!v129)
                                {
LABEL_256:
                                  if (v127)
                                    dispatch_retain(v127);
                                  v130 = *(NSObject **)(v124 + 176);
                                  *(_QWORD *)(v124 + 176) = v127;
                                  if (v130)
                                    dispatch_release(v130);
                                  if (v127)
                                    dispatch_release(v127);
                                  if (v126)
                                    _Block_release(v126);
                                  if (v243)
                                    std::__shared_weak_count::__release_weak(v243);
                                  goto LABEL_266;
                                }
                              }
                              _Block_release(v129);
                              goto LABEL_256;
                            }
                          }
                          _Block_release(v122);
                          goto LABEL_236;
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v2 + 564) = 1;
                        v115 = *(NSObject **)(v2 + 40);
                        if (!os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_224;
                      }
                      ctu::iokit::asString();
                      if (v247 >= 0)
                        v116 = buf;
                      else
                        v116 = *(uint8_t **)buf;
                      *(_DWORD *)v266 = 136315138;
                      *(_QWORD *)&v266[4] = v116;
                      _os_log_impl(&dword_1BF566000, v115, OS_LOG_TYPE_DEFAULT, "#I Initial Power Source: %s", v266, 0xCu);
                      if (v247 < 0)
                        operator delete(*(void **)buf);
                      goto LABEL_224;
                    }
                  }
                  else
                  {
                    v112 = *(const void **)(v107 + 136);
                    *(_QWORD *)(v107 + 136) = 0;
                    if (!v112)
                      goto LABEL_207;
                  }
                  _Block_release(v112);
                  goto LABEL_207;
                }
              }
              _Block_release(v105);
              goto LABEL_187;
            }
          }
          _Block_release(v98);
          goto LABEL_167;
        }
      }
      _Block_release(v91);
      goto LABEL_147;
    }
LABEL_132:
    if (*(_BYTE *)(v2 + 156))
      goto LABEL_138;
    goto LABEL_133;
  }
LABEL_267:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v131 = (Capabilities *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v132 = operator new(1uLL);
    v133 = operator new(0x20uLL);
    *v133 = off_1E7922580;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = v132;
    v134 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v132;
    off_1ED70F200 = v133;
    if (v134)
    {
      v135 = (unint64_t *)&v134->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    v131 = (Capabilities *)unk_1ED70F1F8;
  }
  v137 = (std::__shared_weak_count *)off_1ED70F200;
  if (off_1ED70F200)
  {
    v138 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v131);
  v141 = isCMHandDetectionSupported;
  if (!v137)
    goto LABEL_281;
  v142 = (unint64_t *)&v137->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
    if (!v141)
      goto LABEL_301;
  }
  else
  {
LABEL_281:
    if (!isCMHandDetectionSupported)
      goto LABEL_301;
  }
  v144 = *(NSObject **)(v2 + 88);
  v241 = v144;
  if (v144)
    dispatch_retain(v144);
  v145 = *(NSObject **)(v2 + 96);
  object = v145;
  if (v145)
    dispatch_retain(v145);
  CMHandDetectionDelegate::create(&v241, &object, buf);
  v146 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v147 = *(std::__shared_weak_count **)(v2 + 520);
  *(_OWORD *)(v2 + 512) = v146;
  if (v147)
  {
    v148 = (unint64_t *)&v147->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v151 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (object)
    dispatch_release(object);
  if (v241)
    dispatch_release(v241);
LABEL_301:
  v153 = *(uint64_t ***)(v2 + 512);
  if (v153)
  {
    v237[0] = v30;
    v237[1] = 1174405120;
    v237[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_52;
    v237[3] = &__block_descriptor_tmp_53_0;
    v237[4] = v2;
    v237[5] = v56;
    v238 = v58;
    do
      v154 = __ldxr(v59);
    while (__stxr(v154 + 1, v59));
    v155 = _Block_copy(v237);
    v239 = v155;
    CMHandDetectionDelegate::registerCallback(v153, &v239);
    if (v155)
      _Block_release(v155);
    if (v238)
      std::__shared_weak_count::__release_weak(v238);
  }
  if (*(_QWORD *)(v2 + 496))
    goto LABEL_328;
  v156 = *(NSObject **)(v2 + 88);
  v236 = v156;
  if (v156)
    dispatch_retain(v156);
  v157 = *(NSObject **)(v2 + 96);
  v235 = v157;
  if (v157)
    dispatch_retain(v157);
  ctu::iokit::IOHIDController::create();
  v158 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v159 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v158;
  if (v159)
  {
    v160 = (unint64_t *)&v159->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v163 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if (v235)
    dispatch_release(v235);
  if (v236)
    dispatch_release(v236);
  if (*(_QWORD *)(v2 + 496))
  {
LABEL_328:
    v232[0] = v30;
    v232[1] = 1174405120;
    v232[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_54;
    v232[3] = &__block_descriptor_tmp_55_0;
    v232[4] = v2;
    v232[5] = v56;
    v233 = v58;
    do
      v165 = __ldxr(v59);
    while (__stxr(v165 + 1, v59));
    v234 = _Block_copy(v232);
    ctu::iokit::IOHIDController::registerProxCallback();
    if (v234)
      _Block_release(v234);
    if (v233)
      std::__shared_weak_count::__release_weak(v233);
  }
  if (!*(_BYTE *)(v2 + 192))
    goto LABEL_361;
  if (*(_QWORD *)(v2 + 496))
    goto LABEL_355;
  v166 = *(NSObject **)(v2 + 88);
  v231 = v166;
  if (v166)
    dispatch_retain(v166);
  v167 = *(NSObject **)(v2 + 96);
  v230 = v167;
  if (v167)
    dispatch_retain(v167);
  ctu::iokit::IOHIDController::create();
  v168 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v169 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v168;
  if (v169)
  {
    v170 = (unint64_t *)&v169->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v173 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if (v230)
    dispatch_release(v230);
  if (v231)
    dispatch_release(v231);
  if (*(_QWORD *)(v2 + 496))
  {
LABEL_355:
    v227[0] = v30;
    v227[1] = 1174405120;
    v227[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_56;
    v227[3] = &__block_descriptor_tmp_58_0;
    v227[4] = v2;
    v227[5] = v56;
    v228 = v58;
    do
      v175 = __ldxr(v59);
    while (__stxr(v175 + 1, v59));
    v229 = _Block_copy(v227);
    ctu::iokit::IOHIDController::registerKeyboardCallback();
    if (v229)
      _Block_release(v229);
    if (v228)
      std::__shared_weak_count::__release_weak(v228);
LABEL_361:
    v176 = *(ctu::iokit::IOHIDController **)(v2 + 496);
    if (v176)
      ctu::iokit::IOHIDController::start(v176);
  }
  if (*(_BYTE *)(v2 + 688))
  {
    v177 = *(NSObject **)(v2 + 96);
    v226 = v177;
    if (v177)
      dispatch_retain(v177);
    memset(buf, 170, sizeof(buf));
    std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(&v226, (uint64_t *)buf);
    v178 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v179 = *(std::__shared_weak_count **)(v2 + 680);
    *(_OWORD *)(v2 + 672) = v178;
    if (v179)
    {
      v180 = (unint64_t *)&v179->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v182 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v183 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    if (v226)
      dispatch_release(v226);
    v185 = *(_QWORD **)(v2 + 672);
    if (v185)
    {
      v224[0] = v30;
      v224[1] = 1174405120;
      v224[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_59;
      v224[3] = &__block_descriptor_tmp_61_0;
      v224[4] = v2;
      v224[5] = v56;
      v225 = v58;
      do
        v186 = __ldxr(v59);
      while (__stxr(v186 + 1, v59));
      v265 = 0;
      v264[0] = off_1E7918000;
      v264[1] = _Block_copy(v224);
      v265 = v264;
      HKWorkoutManager::registerCallback(v185, v264);
      v187 = v265;
      if (v265 == v264)
      {
        v188 = 4;
        v187 = v264;
      }
      else
      {
        if (!v265)
          goto LABEL_386;
        v188 = 5;
      }
      (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_386:
      if (v225)
        std::__shared_weak_count::__release_weak(v225);
    }
  }
  v189 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v189 || (v190 = *(_QWORD *)(v2 + 72), (v191 = std::__shared_weak_count::lock(v189)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v192 = v191;
  v193 = (std::__shared_weak_count *)operator new(0x30uLL);
  v193->__shared_owners_ = 0;
  v194 = (unint64_t *)&v193->__shared_owners_;
  v193->__shared_weak_owners_ = 0;
  v193->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918090;
  v193[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7918138;
  v193[1].__shared_owners_ = v190;
  v193[1].__shared_weak_owners_ = (uint64_t)v192;
  v195 = (unint64_t *)&v192->__shared_weak_owners_;
  do
    v196 = __ldxr(v195);
  while (__stxr(v196 + 1, v195));
  v197 = (unint64_t *)&v192->__shared_owners_;
  do
    v198 = __ldaxr(v197);
  while (__stlxr(v198 - 1, v197));
  if (!v198)
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
  }
  v193[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E79180E0;
  v222 = v193 + 1;
  v223 = v193;
  do
    v199 = __ldxr(v194);
  while (__stxr(v199 + 1, v194));
  antenna::CommandDriver::registerHandler();
  if (!v223)
    goto LABEL_402;
  v200 = &v223->__shared_owners_;
  do
    v201 = __ldaxr((unint64_t *)v200);
  while (__stlxr(v201 - 1, (unint64_t *)v200));
  if (!v201)
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
    if (!*(_BYTE *)(v2 + 572))
      goto LABEL_422;
  }
  else
  {
LABEL_402:
    if (!*(_BYTE *)(v2 + 572))
      goto LABEL_422;
  }
  v202 = *(std::__shared_weak_count **)(v2 + 144);
  v220 = *(_QWORD *)(v2 + 136);
  v221 = v202;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  PPMManager::create(&v220, buf);
  v205 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v206 = *(std::__shared_weak_count **)(v2 + 584);
  *(_OWORD *)(v2 + 576) = v205;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v210 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v221;
  if (v221)
  {
    v213 = (unint64_t *)&v221->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  do
LABEL_422:
    v215 = __ldaxr(v194);
  while (__stlxr(v215 - 1, v194));
  if (!v215)
  {
    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
    std::__shared_weak_count::__release_weak(v193);
  }
  std::__shared_weak_count::__release_weak(v58);
  operator delete(v219);
  v216 = (std::__shared_weak_count *)a1[2];
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  operator delete(a1);
}

void sub_1BF627604(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::motionDetectCallback_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_36(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
LABEL_7:
        antenna::Service::Internal::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_39(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  __int16 v14;
  uint8_t buf[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        if ((a2 & 1) != 0)
        {
          v11 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            return;
          *(_WORD *)buf = 0;
          v12 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
          v13 = buf;
          goto LABEL_14;
        }
        if ((a2 & 2) != 0)
        {
          v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v14 = 0;
            v12 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
            v13 = (uint8_t *)&v14;
LABEL_14:
            _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
          }
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_42(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  antenna::Service::Internal *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (antenna::Service::Internal *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109120;
          v12[1] = a2;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v12, 8u);
        }
        antenna::Service::Internal::sendVideoAccessory_sync(v5, (a2 >> 2) & 1);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_45(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::powerSourceNotification_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_47(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(unsigned __int8 *)(v5 + 736);
        if (*(_QWORD *)(v5 + 184))
          v15 = "on";
        else
          v15 = "off";
        LODWORD(v29) = 67109634;
        HIDWORD(v29) = v14;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = a2;
        HIWORD(v30) = 2080;
        v31 = v15;
        _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v29, 0x18u);
        v12 = *(unsigned __int8 *)(v5 + 736);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
        {
LABEL_11:
          if (!v13)
            return;
          goto LABEL_18;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(v5 + 736);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
          goto LABEL_11;
      }
      if (v13)
      {
LABEL_18:
        *(_BYTE *)(v5 + 736) = a2;
        return;
      }
      if (a2 || v12 != 1)
      {
        *(_BYTE *)(v5 + 736) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(_BYTE *)(v5 + 736) = 0;
        v16 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v16 || (v17 = *(_QWORD *)(v5 + 72), (v18 = std::__shared_weak_count::lock(v16)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v19 = v18;
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        v22 = (unint64_t *)&v18->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
        v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        v25 = *(NSObject **)(v5 + 184);
        *(_QWORD *)(v5 + 184) = v24;
        if (v25)
        {
          dispatch_release(v25);
          v24 = *(NSObject **)(v5 + 184);
        }
        v26 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v24, v26, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        v27 = *(NSObject **)(v5 + 184);
        v29 = MEMORY[0x1E0C809B0];
        v30 = 1174405120;
        v31 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke;
        v32 = &__block_descriptor_tmp_64_0;
        v33 = v5;
        v34 = v17;
        v35 = v19;
        do
          v28 = __ldxr(p_shared_weak_owners);
        while (__stxr(v28 + 1, p_shared_weak_owners));
        dispatch_source_set_event_handler(v27, &v29);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_50(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  dispatch_time_t v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(unsigned __int8 *)(v5 + 737);
        if (*(_QWORD *)(v5 + 184))
          v15 = "on";
        else
          v15 = "off";
        LODWORD(v29) = 67109634;
        HIDWORD(v29) = v14;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = a2;
        HIWORD(v30) = 2080;
        v31 = v15;
        _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v29, 0x18u);
        v12 = *(unsigned __int8 *)(v5 + 737);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
        {
LABEL_11:
          if (!v13)
            return;
          goto LABEL_18;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(v5 + 737);
        v13 = *(_QWORD *)(v5 + 184);
        if (v12 == a2)
          goto LABEL_11;
      }
      if (v13)
      {
LABEL_18:
        *(_BYTE *)(v5 + 737) = a2;
        return;
      }
      if (a2 || v12 != 1)
      {
        *(_BYTE *)(v5 + 737) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(_BYTE *)(v5 + 737) = 0;
        v16 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v16 || (v17 = *(_QWORD *)(v5 + 72), (v18 = std::__shared_weak_count::lock(v16)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v19 = v18;
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        v22 = (unint64_t *)&v18->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }
        v24 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        v25 = *(NSObject **)(v5 + 184);
        *(_QWORD *)(v5 + 184) = v24;
        if (v25)
        {
          dispatch_release(v25);
          v24 = *(NSObject **)(v5 + 184);
        }
        v26 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v24, v26, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        v27 = *(NSObject **)(v5 + 184);
        v29 = MEMORY[0x1E0C809B0];
        v30 = 1174405120;
        v31 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke;
        v32 = &__block_descriptor_tmp_67_0;
        v33 = v5;
        v34 = v17;
        v35 = v19;
        do
          v28 = __ldxr(p_shared_weak_owners);
        while (__stxr(v28 + 1, p_shared_weak_owners));
        dispatch_source_set_event_handler(v27, &v29);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_52(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        antenna::Service::Internal::handDetectCallback(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_54(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int isProxCovered;
  int v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 496));
        if (*(unsigned __int8 *)(v5 + 560) != isProxCovered)
        {
          v12 = isProxCovered;
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            v14[0] = 67109376;
            v14[1] = v12;
            v15 = 1024;
            v16 = a2;
            _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Prox Covered State: %d mask value: 0x%x", (uint8_t *)v14, 0xEu);
          }
          *(_BYTE *)(v5 + 560) = v12;
          antenna::Service::Internal::checkStartHandDetection_sync((antenna::Service::Internal *)v5);
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_56(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && *(unsigned __int8 *)(v5 + 561) != a2)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = "OPENED";
          if (a2)
            v12 = "CLOSED";
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v13, 0xCu);
        }
        *(_BYTE *)(v5 + 561) = a2;
        antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v5);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_59(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _DWORD *v19;
  unint64_t *p_shared_owners;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v11 = a1[4];
    v12 = std::__shared_weak_count::lock(v6);
    if (v12)
    {
      v13 = v12;
      v14 = (_QWORD *)a1[5];
      if (v14)
      {
        v15 = (std::__shared_weak_count *)v14[10];
        if (!v15 || (v16 = v14[9], (v17 = std::__shared_weak_count::lock(v15)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v18 = v17;
        v19 = operator new(0x18uLL);
        *(_QWORD *)v19 = v11;
        v19[2] = a2;
        v19[3] = a3;
        v19[4] = a4;
        v19[5] = a5;
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        v21 = v14[11];
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = operator new(0x18uLL);
        *v23 = v19;
        v23[1] = v16;
        v23[2] = v18;
        dispatch_async_f(v21, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v25 = (unint64_t *)&v13->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

uint64_t std::shared_ptr<PPMManager>::operator=[abi:ne180100](uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v11 = 0;
          _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v11, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        v10 = v3[23];
        v3[23] = 0;
        if (v10)
          dispatch_release(v10);
      }
    }
  }
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v11 = 0;
          _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v11, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        v10 = v3[23];
        v3[23] = 0;
        if (v10)
          dispatch_release(v10);
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  void *v12;
  const char *v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD __dst[2];
  int64_t v20;

  v2 = *a1;
  v3 = **a1;
  v4 = (const void *)*MEMORY[0x1E0CFC120];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC120]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v6;
    v20 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v20) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  if (*(char *)(v3 + 719) >= 0)
    v10 = (const char *)(v3 + 696);
  else
    v10 = *(const char **)(v3 + 696);
  v11 = SHIBYTE(v20);
  v12 = (void *)__dst[0];
  if (v20 >= 0)
    v13 = (const char *)__dst;
  else
    v13 = (const char *)__dst[0];
  v14 = strcasecmp(v10, v13);
  v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (!v15)
    {
LABEL_19:
      *(_OWORD *)(v3 + 720) = *(_OWORD *)(v2 + 1);
      antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v3);
    }
  }
  else if (!v14)
  {
    goto LABEL_19;
  }
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_1BF628B80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = off_1E7918000;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73FAAALL)
    return a1 + 8;
  if (((v3 & 0x80000001BF73FAAALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73FAAALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73FAAALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target_type()
{
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7918138;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7918138;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD **)(a1 + 8);
      if (v9)
        antenna::Service::Internal::transmitStateHandler(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E7918138;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(_QWORD *)this = off_1E7918138;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
  operator delete(v3);
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (_QWORD *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = (uint64_t *)**a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (_QWORD *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (_QWORD *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = v15;
            if (v14 >= *((_DWORD *)v15 + 7))
              break;
            v15 = (uint64_t *)*v15;
            v17 = (uint64_t **)v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = (uint64_t **)(v16 + 1);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = (uint64_t *)**a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 1);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = *(_QWORD *)((char *)v4 + 28);
      *(uint64_t *)((char *)v25 + 28) = v27;
      v28 = *v24;
      v29 = a1 + 1;
      v30 = a1 + 1;
      if (*v24)
        break;
LABEL_50:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = (uint64_t *)**a1;
      if (v31)
        goto LABEL_51;
LABEL_52:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
      if (v33 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v29 = v28;
        if (*((_DWORD *)v28 + 7) <= v27)
          break;
        v28 = (uint64_t **)*v28;
        v30 = v29;
        if (!*v29)
          goto LABEL_50;
      }
      v28 = (uint64_t **)v28[1];
    }
    while (v28);
    v30 = v29 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    v31 = (uint64_t *)**a1;
    if (!v31)
      goto LABEL_52;
LABEL_51:
    *a1 = v31;
    v26 = *v30;
    goto LABEL_52;
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke(antenna::Service::Internal ***a1)
{
  antenna::Service::Internal **v2;
  antenna::Service::Internal *v3;
  HKWorkoutManager *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(v3);
  v4 = (HKWorkoutManager *)*((_QWORD *)v3 + 84);
  if (v4)
    HKWorkoutManager::stop(v4);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF62926C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke(antenna::Service::Internal ***a1)
{
  antenna::Service::Internal **v2;
  antenna::Service::Internal *v3;
  HKWorkoutManager *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  antenna::Service::Internal::setupTxPower_sync(v3);
  v4 = (HKWorkoutManager *)*((_QWORD *)v3 + 84);
  if (v4)
    HKWorkoutManager::start(v4);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF62935C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Enter Low Power ! ", v8, 2u);
  }
  *(_BYTE *)(v3 + 168) = 1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF62948C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D EXIT Low Power ! ", v8, 2u);
  }
  *(_BYTE *)(v3 + 168) = 0;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 1);
  antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF6295B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40));
}

void dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v2 = *a1;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1BF629674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  int *v2;
  antenna::Service::Internal *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  xpc_object_t value;
  const char *v12;
  xpc_object_t v13;
  const char *v14;
  int v15;
  size_t v16;
  void **v17;
  void **v18;
  NSObject *v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::ios_base *v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  xpc_object_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *__dst[2];
  int64_t v48;
  xpc_object_t block;
  __int128 v50;
  void *aBlock[2];
  xpc_object_t object[2];
  __int128 v53;
  void *__p[2];
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[3];
  void *v68[3];
  unint64_t v69;
  uint8_t buf[4];
  void **v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(antenna::Service::Internal **)*a1;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  antenna::Service::Internal::createTransmitStateDict_sync(v2[2], v2[3], (xpc_object_t *)&v69);
  v4 = (xpc_object_t)v69;
  if (MEMORY[0x1C3B8CD78](v69) == MEMORY[0x1E0C812F8])
  {
    if (v4)
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
    v6 = (void *)*((_QWORD *)v3 + 28);
    *((_QWORD *)v3 + 28) = v5;
    xpc_release(v6);
    if (v4)
    {
      xpc_retain(v4);
      v7 = v4;
      v8 = (const void *)*((_QWORD *)v3 + 13);
      if (v8)
      {
LABEL_7:
        v9 = _Block_copy(v8);
        goto LABEL_10;
      }
    }
    else
    {
      v7 = xpc_null_create();
      v8 = (const void *)*((_QWORD *)v3 + 13);
      if (v8)
        goto LABEL_7;
    }
    v9 = 0;
LABEL_10:
    v10 = *((_QWORD *)v3 + 14);
    block = (xpc_object_t)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v50 = 1174405120;
    *((_QWORD *)&v50 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    aBlock[0] = &__block_descriptor_tmp_68_1;
    if (v9)
    {
      aBlock[1] = _Block_copy(v9);
      object[0] = v7;
      if (v7)
      {
LABEL_12:
        xpc_retain(v7);
        goto LABEL_15;
      }
    }
    else
    {
      aBlock[1] = 0;
      object[0] = v7;
      if (v7)
        goto LABEL_12;
    }
    object[0] = xpc_null_create();
LABEL_15:
    dispatch_async(v10, &block);
    xpc_release(object[0]);
    object[0] = 0;
    if (aBlock[1])
      _Block_release(aBlock[1]);
    if (v9)
      _Block_release(v9);
    xpc_release(v7);
    memset(v68, 170, sizeof(v68));
    value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBBD8]);
    block = value;
    if (value)
      xpc_retain(value);
    else
      block = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&block, (const object *)"", v12);
    xpc_release(block);
    memset(v67, 170, sizeof(v67));
    v13 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFBD88]);
    block = v13;
    if (v13)
      xpc_retain(v13);
    else
      block = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&block, (const object *)"", v14);
    xpc_release(block);
    v15 = SHIBYTE(v68[2]);
    if (SHIBYTE(v68[2]) >= 0)
      v16 = HIBYTE(v68[2]);
    else
      v16 = (size_t)v68[1];
    if (v16 == strlen((const char *)*MEMORY[0x1E0CFBF28])
      && (SHIBYTE(v68[2]) >= 0 ? (v17 = v68) : (v17 = (void **)v68[0]),
          !memcmp(v17, (const void *)*MEMORY[0x1E0CFBF28], v16)))
    {
      v20 = *((_QWORD *)v3 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(block) = 0;
        _os_log_debug_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEBUG, "#D Tx Started", (uint8_t *)&block, 2u);
      }
      antenna::Service::Internal::startTxPowerCapping_sync(v3);
    }
    else if (v16 == strlen((const char *)*MEMORY[0x1E0CFBC28]))
    {
      v18 = v15 >= 0 ? v68 : (void **)v68[0];
      if (!memcmp(v18, (const void *)*MEMORY[0x1E0CFBC28], v16))
      {
        v19 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(block) = 0;
          _os_log_debug_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEBUG, "#D Tx Stopped", (uint8_t *)&block, 2u);
        }
        antenna::Service::Internal::stopTxPowerCapping_sync(v3);
      }
    }
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = 0xAAAAAAAAAAAAAAAALL;
    v66 = v21;
    v65 = v21;
    v64 = v21;
    v63 = v21;
    v62 = v21;
    v61 = v21;
    v60 = v21;
    v59 = v21;
    v58 = v21;
    v55 = v21;
    *(_OWORD *)__p = v21;
    v53 = v21;
    *(_OWORD *)object = v21;
    *(_OWORD *)aBlock = v21;
    v50 = v21;
    v22 = MEMORY[0x1E0DE4FE0];
    v23 = MEMORY[0x1E0DE4FE0] + 64;
    v57 = MEMORY[0x1E0DE4FE0] + 64;
    v24 = MEMORY[0x1E0DE4F60];
    v25 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    block = *(xpc_object_t *)(MEMORY[0x1E0DE4F60] + 8);
    *(xpc_object_t *)((char *)&block + *((_QWORD *)block - 3)) = v25;
    v26 = (std::ios_base *)((char *)&block + *((_QWORD *)block - 3));
    std::ios_base::init(v26, &v50);
    v26[1].__vftable = 0;
    v26[1].__fmtflags_ = -1;
    block = (xpc_object_t)(v22 + 24);
    v57 = v23;
    std::streambuf::basic_streambuf();
    v27 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v50 = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v55 = 0u;
    LODWORD(v56) = 16;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v68[2]) >= 0)
      v29 = v68;
    else
      v29 = (void **)v68[0];
    if (SHIBYTE(v68[2]) >= 0)
      v30 = HIBYTE(v68[2]);
    else
      v30 = (uint64_t)v68[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    v31 = (void *)HIBYTE(v67[2]);
    if (SHIBYTE(v67[2]) < 0)
      v31 = v67[1];
    if (v31)
    {
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)" (", 2);
      if (SHIBYTE(v67[2]) >= 0)
        v33 = v67;
      else
        v33 = (void **)v67[0];
      if (SHIBYTE(v67[2]) >= 0)
        v34 = HIBYTE(v67[2]);
      else
        v34 = (uint64_t)v67[1];
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)")", 1);
    }
    v36 = *((_QWORD *)v3 + 5);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
LABEL_79:
      block = *(xpc_object_t *)v24;
      *(xpc_object_t *)((char *)&block + *((_QWORD *)block - 3)) = *(xpc_object_t *)(v24 + 24);
      *(_QWORD *)&v50 = v27 + 16;
      if (SBYTE7(v55) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8C364](&v57);
      if (SHIBYTE(v67[2]) < 0)
      {
        operator delete(v67[0]);
        if ((SHIBYTE(v68[2]) & 0x80000000) == 0)
          goto LABEL_83;
      }
      else if ((SHIBYTE(v68[2]) & 0x80000000) == 0)
      {
LABEL_83:
        v4 = (xpc_object_t)v69;
        goto LABEL_84;
      }
      operator delete(v68[0]);
      goto LABEL_83;
    }
    if ((v56 & 0x10) != 0)
    {
      v39 = *((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) < (unint64_t)v53)
      {
        *((_QWORD *)&v55 + 1) = v53;
        v39 = v53;
      }
      v40 = object[1];
      v37 = v39 - (unint64_t)object[1];
      if (v39 - (unint64_t)object[1] >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_93;
    }
    else
    {
      if ((v56 & 8) == 0)
      {
        v37 = 0;
        HIBYTE(v48) = 0;
        v38 = __dst;
LABEL_75:
        *((_BYTE *)v38 + v37) = 0;
        v43 = __dst;
        if (v48 < 0)
          v43 = (void **)__dst[0];
        *(_DWORD *)buf = 136315138;
        v71 = v43;
        _os_log_impl(&dword_1BF566000, v36, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
        if (SHIBYTE(v48) < 0)
          operator delete(__dst[0]);
        goto LABEL_79;
      }
      v40 = aBlock[0];
      v37 = (char *)object[0] - (char *)aBlock[0];
      if ((xpc_object_t)((char *)object[0] - (char *)aBlock[0]) >= (xpc_object_t)0x7FFFFFFFFFFFFFF8)
LABEL_93:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v37 >= 0x17)
    {
      v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v41 = v37 | 7;
      v42 = v41 + 1;
      v38 = (void **)operator new(v41 + 1);
      __dst[1] = (void *)v37;
      v48 = v42 | 0x8000000000000000;
      __dst[0] = v38;
    }
    else
    {
      HIBYTE(v48) = v37;
      v38 = __dst;
      if (!v37)
        goto LABEL_74;
    }
    memmove(v38, v40, v37);
LABEL_74:
    v27 = MEMORY[0x1E0DE4FB8];
    goto LABEL_75;
  }
LABEL_84:
  xpc_release(v4);
  operator delete(v2);
  v44 = (std::__shared_weak_count *)a1[2];
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  operator delete(a1);
}

void sub_1BF629E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (*(char *)(v30 - 161) < 0)
    operator delete(*(void **)(v30 - 184));
  if (*(char *)(v30 - 137) < 0)
    operator delete(*(void **)(v30 - 160));
  xpc_release(v29);
  operator delete(v28);
  v32 = (std::__shared_weak_count *)v27[2];
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  xpc_object_t value;
  char v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  xpc_object_t v16;
  char v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  xpc_object_t v25;
  char v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t *v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  char v71;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t *v81;
  int v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  xpc_object_t v87;
  void *v88;
  xpc_object_t v89;
  size_t count;
  size_t v91;
  const char *v92;
  const object *v93;
  xpc_object_t v94;
  const char *v95;
  xpc_object_t v96;
  xpc_object_t v97;
  char v98;
  xpc_object_t v99;
  size_t v100;
  xpc_object_t v101;
  const object *v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t **v105;
  int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t **v119;
  uint64_t **v120;
  int v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  NSObject *v125;
  int v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  int v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t **v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  NSObject *v140;
  Capabilities *v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t **v160;
  xpc_object_t *v161;
  uint64_t v162;
  uint64_t **v163;
  xpc_object_t v164;
  xpc_object_t v165;
  xpc_object_t xdict;
  xpc_object_t object[4];

  v1 = a1;
  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v161 = (xpc_object_t *)*a1;
  if (!*(_DWORD *)(v3 + 328))
  {
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v4 = v2 + 1;
    v5 = (void *)*MEMORY[0x1E0CFB140];
    object[0] = v4;
    object[1] = v5;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
    value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB8C0]);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v8 = (uint64_t **)(v3 + 288);
    v9 = *(uint64_t **)(v3 + 288);
    v10 = (uint64_t **)(v3 + 288);
    v11 = (uint64_t **)(v3 + 288);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = *((_DWORD *)v9 + 7);
          if (v12 < 1)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_12;
        }
        if ((v12 & 0x80000000) == 0)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_12;
        }
      }
      v13 = v11;
    }
    else
    {
LABEL_12:
      v13 = operator new(0x28uLL);
      v13[7] = 0;
      *((_BYTE *)v13 + 32) = 0;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v11;
      *v10 = (uint64_t *)v13;
      v14 = **(_QWORD **)(v3 + 280);
      v15 = (uint64_t *)v13;
      if (v14)
      {
        *(_QWORD *)(v3 + 280) = v14;
        v15 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v15);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v13 + 32) = v7;
    xpc_release(object[0]);
    v16 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB528]);
    object[0] = v16;
    if (v16)
      xpc_retain(v16);
    else
      object[0] = xpc_null_create();
    v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v18 = *v8;
    v19 = (uint64_t **)(v3 + 288);
    v20 = (uint64_t **)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = *((_DWORD *)v18 + 7);
          if (v21 < 2)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_25;
        }
        if (v21 == 1)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_25;
        }
      }
      v22 = v20;
    }
    else
    {
LABEL_25:
      v22 = operator new(0x28uLL);
      v22[7] = 1;
      *((_BYTE *)v22 + 32) = 0;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v20;
      *v19 = (uint64_t *)v22;
      v23 = **(_QWORD **)(v3 + 280);
      v24 = (uint64_t *)v22;
      if (v23)
      {
        *(_QWORD *)(v3 + 280) = v23;
        v24 = *v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v24);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v22 + 32) = v17;
    xpc_release(object[0]);
    v25 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB768]);
    object[0] = v25;
    if (v25)
      xpc_retain(v25);
    else
      object[0] = xpc_null_create();
    v26 = xpc::dyn_cast_or_default((xpc *)object, 0);
    v27 = *v8;
    v28 = (uint64_t **)(v3 + 288);
    v29 = (uint64_t **)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v29 = (uint64_t **)v27;
          v30 = *((_DWORD *)v27 + 7);
          if (v30 < 4)
            break;
          v27 = *v29;
          v28 = v29;
          if (!*v29)
            goto LABEL_39;
        }
        if (v30 == 3)
          break;
        v27 = v29[1];
        if (!v27)
        {
          v28 = v29 + 1;
          goto LABEL_39;
        }
      }
      v31 = v29;
    }
    else
    {
LABEL_39:
      v31 = operator new(0x28uLL);
      v31[7] = 3;
      *((_BYTE *)v31 + 32) = 0;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v29;
      *v28 = (uint64_t *)v31;
      v32 = **(_QWORD **)(v3 + 280);
      v33 = (uint64_t *)v31;
      if (v32)
      {
        *(_QWORD *)(v3 + 280) = v32;
        v33 = *v28;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v33);
      ++*(_QWORD *)(v3 + 296);
    }
    *((_BYTE *)v31 + 32) = v26;
    xpc_release(object[0]);
    v34 = *v8;
    v35 = (uint64_t **)(v3 + 288);
    v36 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v36 = v34;
          v37 = *((_DWORD *)v34 + 7);
          if (v37 < 1)
            break;
          v34 = (uint64_t *)*v36;
          v35 = (uint64_t **)v36;
          if (!*v36)
            goto LABEL_50;
        }
        if ((v37 & 0x80000000) == 0)
          break;
        v34 = (uint64_t *)v36[1];
        if (!v34)
        {
          v35 = (uint64_t **)(v36 + 1);
          goto LABEL_50;
        }
      }
      v41 = *((_BYTE *)v36 + 32);
      v42 = (uint64_t **)(v3 + 312);
      v43 = *(uint64_t **)(v3 + 312);
      v44 = (uint64_t **)(v3 + 312);
      v45 = (uint64_t *)(v3 + 312);
      if (v43)
        goto LABEL_58;
    }
    else
    {
LABEL_50:
      v38 = operator new(0x28uLL);
      v38[7] = 0;
      *((_BYTE *)v38 + 32) = 0;
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = v36;
      *v35 = (uint64_t *)v38;
      v39 = **(_QWORD **)(v3 + 280);
      v40 = (uint64_t *)v38;
      if (v39)
      {
        *(_QWORD *)(v3 + 280) = v39;
        v40 = *v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v40);
      ++*(_QWORD *)(v3 + 296);
      v41 = *((_BYTE *)v38 + 32);
      v42 = (uint64_t **)(v3 + 312);
      v43 = *(uint64_t **)(v3 + 312);
      v44 = (uint64_t **)(v3 + 312);
      v45 = (uint64_t *)(v3 + 312);
      if (v43)
      {
        while (1)
        {
LABEL_58:
          while (1)
          {
            v45 = v43;
            v46 = *((_DWORD *)v43 + 7);
            if (v46 < 1)
              break;
            v43 = (uint64_t *)*v45;
            v44 = (uint64_t **)v45;
            if (!*v45)
              goto LABEL_62;
          }
          if ((v46 & 0x80000000) == 0)
            break;
          v43 = (uint64_t *)v45[1];
          if (!v43)
          {
            v44 = (uint64_t **)(v45 + 1);
            goto LABEL_62;
          }
        }
        *((_BYTE *)v45 + 32) = v41;
        v50 = *v8;
        v51 = (uint64_t **)(v3 + 288);
        v52 = (uint64_t *)(v3 + 288);
        if (*v8)
          goto LABEL_69;
        goto LABEL_73;
      }
    }
LABEL_62:
    v47 = operator new(0x28uLL);
    v47[7] = 0;
    *((_BYTE *)v47 + 32) = 0;
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = v45;
    *v44 = (uint64_t *)v47;
    v48 = **(_QWORD **)(v3 + 304);
    v49 = (uint64_t *)v47;
    if (v48)
    {
      *(_QWORD *)(v3 + 304) = v48;
      v49 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v49);
    ++*(_QWORD *)(v3 + 320);
    *((_BYTE *)v47 + 32) = v41;
    v50 = *v8;
    v51 = (uint64_t **)(v3 + 288);
    v52 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_69:
        while (1)
        {
          v52 = v50;
          v53 = *((_DWORD *)v50 + 7);
          if (v53 < 2)
            break;
          v50 = (uint64_t *)*v52;
          v51 = (uint64_t **)v52;
          if (!*v52)
            goto LABEL_73;
        }
        if (v53 == 1)
          break;
        v50 = (uint64_t *)v52[1];
        if (!v50)
        {
          v51 = (uint64_t **)(v52 + 1);
          goto LABEL_73;
        }
      }
      v57 = *((_BYTE *)v52 + 32);
      v58 = *v42;
      v59 = v42;
      v60 = v42;
      if (*v42)
        goto LABEL_80;
      goto LABEL_84;
    }
LABEL_73:
    v54 = operator new(0x28uLL);
    v54[7] = 1;
    *((_BYTE *)v54 + 32) = 0;
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    *((_QWORD *)v54 + 2) = v52;
    *v51 = (uint64_t *)v54;
    v55 = **(_QWORD **)(v3 + 280);
    v56 = (uint64_t *)v54;
    if (v55)
    {
      *(_QWORD *)(v3 + 280) = v55;
      v56 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v56);
    ++*(_QWORD *)(v3 + 296);
    v57 = *((_BYTE *)v54 + 32);
    v58 = *v42;
    v59 = v42;
    v60 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_80:
        while (1)
        {
          v60 = (uint64_t **)v58;
          v61 = *((_DWORD *)v58 + 7);
          if (v61 < 2)
            break;
          v58 = *v60;
          v59 = v60;
          if (!*v60)
            goto LABEL_84;
        }
        if (v61 == 1)
          break;
        v58 = v60[1];
        if (!v58)
        {
          v59 = v60 + 1;
          goto LABEL_84;
        }
      }
      *((_BYTE *)v60 + 32) = v57;
      v65 = *v8;
      v66 = (uint64_t *)(v3 + 288);
      if (*v8)
        goto LABEL_91;
      goto LABEL_95;
    }
LABEL_84:
    v62 = operator new(0x28uLL);
    v62[7] = 1;
    *((_BYTE *)v62 + 32) = 0;
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    *((_QWORD *)v62 + 2) = v60;
    *v59 = (uint64_t *)v62;
    v63 = **(_QWORD **)(v3 + 304);
    v64 = (uint64_t *)v62;
    if (v63)
    {
      *(_QWORD *)(v3 + 304) = v63;
      v64 = *v59;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v64);
    ++*(_QWORD *)(v3 + 320);
    *((_BYTE *)v62 + 32) = v57;
    v65 = *v8;
    v66 = (uint64_t *)(v3 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_91:
        while (1)
        {
          v66 = v65;
          v67 = *((_DWORD *)v65 + 7);
          if (v67 < 4)
            break;
          v65 = (uint64_t *)*v66;
          v8 = (uint64_t **)v66;
          if (!*v66)
            goto LABEL_95;
        }
        if (v67 == 3)
          break;
        v65 = (uint64_t *)v66[1];
        if (!v65)
        {
          v8 = (uint64_t **)(v66 + 1);
          goto LABEL_95;
        }
      }
      v71 = *((_BYTE *)v66 + 32);
      v72 = *v42;
      v73 = v42;
      if (*v42)
        goto LABEL_102;
      goto LABEL_106;
    }
LABEL_95:
    v68 = operator new(0x28uLL);
    v68[7] = 3;
    *((_BYTE *)v68 + 32) = 0;
    *(_QWORD *)v68 = 0;
    *((_QWORD *)v68 + 1) = 0;
    *((_QWORD *)v68 + 2) = v66;
    *v8 = (uint64_t *)v68;
    v69 = **(_QWORD **)(v3 + 280);
    v70 = (uint64_t *)v68;
    if (v69)
    {
      *(_QWORD *)(v3 + 280) = v69;
      v70 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v70);
    ++*(_QWORD *)(v3 + 296);
    v71 = *((_BYTE *)v68 + 32);
    v72 = *v42;
    v73 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_102:
        while (1)
        {
          v73 = (uint64_t **)v72;
          v74 = *((_DWORD *)v72 + 7);
          if (v74 < 4)
            break;
          v72 = *v73;
          v42 = v73;
          if (!*v73)
            goto LABEL_106;
        }
        if (v74 == 3)
          break;
        v72 = v73[1];
        if (!v72)
        {
          v42 = v73 + 1;
          goto LABEL_106;
        }
      }
      v75 = v73;
      goto LABEL_110;
    }
LABEL_106:
    v75 = operator new(0x28uLL);
    v75[7] = 3;
    *((_BYTE *)v75 + 32) = 0;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v73;
    *v42 = (uint64_t *)v75;
    v76 = **(_QWORD **)(v3 + 304);
    v77 = (uint64_t *)v75;
    if (v76)
    {
      *(_QWORD *)(v3 + 304) = v76;
      v77 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v77);
    ++*(_QWORD *)(v3 + 320);
LABEL_110:
    *((_BYTE *)v75 + 32) = v71;
    xpc_release(xdict);
  }
  v78 = (uint64_t **)(v3 + 288);
  v79 = *(uint64_t **)(v3 + 288);
  v80 = (uint64_t **)(v3 + 288);
  v81 = (uint64_t *)(v3 + 288);
  if (!v79)
  {
LABEL_118:
    v83 = operator new(0x28uLL);
    v83[7] = 2;
    *((_BYTE *)v83 + 32) = 0;
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 2) = v81;
    *v80 = (uint64_t *)v83;
    v84 = **(_QWORD **)(v3 + 280);
    v85 = (uint64_t *)v83;
    if (v84)
    {
      *(_QWORD *)(v3 + 280) = v84;
      v85 = *v80;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v85);
    ++*(_QWORD *)(v3 + 296);
    *((_BYTE *)v83 + 32) = 0;
    if (!*(_BYTE *)(v3 + 160))
      goto LABEL_198;
LABEL_123:
    v86 = (void *)*MEMORY[0x1E0CFB648];
    if (!xpc_dictionary_get_value(v161[1], (const char *)*MEMORY[0x1E0CFB648]))
      goto LABEL_198;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    object[0] = v161 + 1;
    object[1] = v86;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xdict);
    v87 = xdict;
    if (xdict)
    {
      xpc_retain(xdict);
    }
    else
    {
      v87 = xpc_null_create();
      if (!v87)
      {
        v87 = xpc_null_create();
        v88 = 0;
LABEL_128:
        v162 = v3;
        xpc_release(v88);
        v89 = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          v89 = xpc_null_create();
        v160 = v1;
        if (MEMORY[0x1C3B8CD78](xdict) == MEMORY[0x1E0C812C8])
        {
          count = xpc_array_get_count(xdict);
          if (v89)
            goto LABEL_133;
        }
        else
        {
          count = 0;
          if (v89)
          {
LABEL_133:
            xpc_retain(v89);
            v164 = v89;
LABEL_136:
            v163 = v78;
            xpc_release(v89);
            if (count || v87 != v164)
            {
              v91 = 0;
              v92 = (const char *)*MEMORY[0x1E0CFB2B0];
              v93 = (const object *)"";
              while (1)
              {
                memset(object, 170, 24);
                v94 = xpc_array_get_value(v87, v91);
                v165 = v94;
                if (v94)
                  xpc_retain(v94);
                else
                  v165 = xpc_null_create();
                xpc::dyn_cast_or_default((xpc *)&v165, v93, v95);
                xpc_release(v165);
                v96 = (xpc_object_t)strlen(v92);
                v97 = v96;
                v98 = HIBYTE(object[2]);
                if (SHIBYTE(object[2]) < 0)
                {
                  if (v96 == (xpc_object_t)-1)
LABEL_253:
                    std::string::__throw_out_of_range[abi:ne180100]();
                  v99 = object[1];
                  if (object[1] >= v96)
                    v101 = v96;
                  else
                    v101 = object[1];
                  if (memcmp(object[0], v92, (size_t)v101))
                    goto LABEL_166;
                }
                else
                {
                  if (v96 == (xpc_object_t)-1)
                    goto LABEL_253;
                  v99 = (xpc_object_t)HIBYTE(object[2]);
                  if (HIBYTE(object[2]) >= (unint64_t)v96)
                    v100 = (size_t)v96;
                  else
                    v100 = HIBYTE(object[2]);
                  if (memcmp(object, v92, v100))
                    goto LABEL_166;
                }
                if (v99 == v97)
                {
                  v102 = v93;
                  v103 = v163;
                  while (1)
                  {
                    v104 = *v103;
                    v105 = v103;
                    if (!*v103)
                      break;
                    while (1)
                    {
                      v103 = (uint64_t **)v104;
                      v106 = *((_DWORD *)v104 + 7);
                      if (v106 >= 3)
                        break;
                      if (v106 == 2)
                      {
                        v107 = v103;
                        goto LABEL_165;
                      }
                      v104 = v103[1];
                      if (!v104)
                      {
                        v105 = v103 + 1;
                        goto LABEL_161;
                      }
                    }
                  }
LABEL_161:
                  v107 = operator new(0x28uLL);
                  v107[7] = 2;
                  *((_BYTE *)v107 + 32) = 0;
                  *(_QWORD *)v107 = 0;
                  *((_QWORD *)v107 + 1) = 0;
                  *((_QWORD *)v107 + 2) = v103;
                  *v105 = (uint64_t *)v107;
                  v108 = **(_QWORD **)(v162 + 280);
                  v109 = (uint64_t *)v107;
                  if (v108)
                  {
                    *(_QWORD *)(v162 + 280) = v108;
                    v109 = *v105;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v109);
                  ++*(_QWORD *)(v162 + 296);
                  v98 = HIBYTE(object[2]);
LABEL_165:
                  *((_BYTE *)v107 + 32) = 1;
                  v93 = v102;
                }
LABEL_166:
                if (v98 < 0)
                {
                  operator delete(object[0]);
                  if (++v91 == count)
                    goto LABEL_170;
                }
                else if (++v91 == count)
                {
LABEL_170:
                  if (v87 == v164)
                    break;
                }
              }
            }
            xpc_release(v164);
            xpc_release(v87);
            v1 = v160;
            v3 = v162;
            v78 = v163;
            v110 = *(unsigned __int8 *)(v162 + 334);
            v111 = *(uint64_t **)(v162 + 288);
            v112 = v163;
            v113 = v163;
            if (v111)
            {
              while (1)
              {
                while (1)
                {
                  v113 = (uint64_t **)v111;
                  v114 = *((_DWORD *)v111 + 7);
                  if (v114 < 3)
                    break;
                  v111 = *v113;
                  v112 = v113;
                  if (!*v113)
                    goto LABEL_178;
                }
                if (v114 == 2)
                  break;
                v111 = v113[1];
                if (!v111)
                {
                  v112 = v113 + 1;
                  goto LABEL_178;
                }
              }
              if (v110 == *((unsigned __int8 *)v113 + 32))
                goto LABEL_197;
            }
            else
            {
LABEL_178:
              v115 = operator new(0x28uLL);
              v115[7] = 2;
              *((_BYTE *)v115 + 32) = 0;
              *(_QWORD *)v115 = 0;
              *((_QWORD *)v115 + 1) = 0;
              *((_QWORD *)v115 + 2) = v113;
              *v112 = (uint64_t *)v115;
              v116 = **(_QWORD **)(v162 + 280);
              v117 = (uint64_t *)v115;
              if (v116)
              {
                *(_QWORD *)(v162 + 280) = v116;
                v117 = *v112;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v117);
              ++*(_QWORD *)(v162 + 296);
              if (v110 == *((unsigned __int8 *)v115 + 32))
              {
LABEL_197:
                xpc_release(xdict);
                goto LABEL_198;
              }
            }
            v118 = *v163;
            v119 = v163;
            v120 = v163;
            if (*v163)
            {
              while (1)
              {
                while (1)
                {
                  v120 = (uint64_t **)v118;
                  v121 = *((_DWORD *)v118 + 7);
                  if (v121 < 3)
                    break;
                  v118 = *v120;
                  v119 = v120;
                  if (!*v120)
                    goto LABEL_190;
                }
                if (v121 == 2)
                  break;
                v118 = v120[1];
                if (!v118)
                {
                  v119 = v120 + 1;
                  goto LABEL_190;
                }
              }
              v122 = v120;
            }
            else
            {
LABEL_190:
              v122 = operator new(0x28uLL);
              v122[7] = 2;
              *((_BYTE *)v122 + 32) = 0;
              *(_QWORD *)v122 = 0;
              *((_QWORD *)v122 + 1) = 0;
              *((_QWORD *)v122 + 2) = v120;
              *v119 = (uint64_t *)v122;
              v123 = **(_QWORD **)(v162 + 280);
              v124 = (uint64_t *)v122;
              if (v123)
              {
                *(_QWORD *)(v162 + 280) = v123;
                v124 = *v119;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 288), v124);
              ++*(_QWORD *)(v162 + 296);
            }
            *(_BYTE *)(v162 + 334) = *((_BYTE *)v122 + 32);
            antenna::Service::Internal::sendAudioAccessory_sync((antenna::Service::Internal *)v162);
            v125 = *(NSObject **)(v162 + 40);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
            {
              v159 = *(unsigned __int8 *)(v162 + 334);
              LODWORD(object[0]) = 67109120;
              HIDWORD(object[0]) = v159;
              _os_log_debug_impl(&dword_1BF566000, v125, OS_LOG_TYPE_DEBUG, "#D Sent audio wired port to baseband as %d", (uint8_t *)object, 8u);
            }
            goto LABEL_197;
          }
        }
        v164 = xpc_null_create();
        goto LABEL_136;
      }
    }
    xpc_retain(v87);
    v88 = v87;
    goto LABEL_128;
  }
  while (1)
  {
    while (1)
    {
      v81 = v79;
      v82 = *((_DWORD *)v79 + 7);
      if (v82 < 3)
        break;
      v79 = (uint64_t *)*v81;
      v80 = (uint64_t **)v81;
      if (!*v81)
        goto LABEL_118;
    }
    if (v82 == 2)
      break;
    v79 = (uint64_t *)v81[1];
    if (!v79)
    {
      v80 = (uint64_t **)(v81 + 1);
      goto LABEL_118;
    }
  }
  *((_BYTE *)v81 + 32) = 0;
  if (*(_BYTE *)(v3 + 160))
    goto LABEL_123;
LABEL_198:
  if (!*(_BYTE *)(v3 + 161))
    goto LABEL_224;
  v126 = *(unsigned __int8 *)(v3 + 335);
  v127 = *(uint64_t **)(v3 + 288);
  v128 = v78;
  v129 = v78;
  if (!v127)
  {
LABEL_206:
    v131 = operator new(0x28uLL);
    v131[7] = 3;
    *((_BYTE *)v131 + 32) = 0;
    *(_QWORD *)v131 = 0;
    *((_QWORD *)v131 + 1) = 0;
    *((_QWORD *)v131 + 2) = v129;
    *v128 = (uint64_t *)v131;
    v132 = **(_QWORD **)(v3 + 280);
    v133 = (uint64_t *)v131;
    if (v132)
    {
      *(_QWORD *)(v3 + 280) = v132;
      v133 = *v128;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v133);
    ++*(_QWORD *)(v3 + 296);
    if (v126 == *((unsigned __int8 *)v131 + 32))
      goto LABEL_224;
    goto LABEL_211;
  }
  while (1)
  {
    while (1)
    {
      v129 = (uint64_t **)v127;
      v130 = *((_DWORD *)v127 + 7);
      if (v130 < 4)
        break;
      v127 = *v129;
      v128 = v129;
      if (!*v129)
        goto LABEL_206;
    }
    if (v130 == 3)
      break;
    v127 = v129[1];
    if (!v127)
    {
      v128 = v129 + 1;
      goto LABEL_206;
    }
  }
  if (v126 != *((unsigned __int8 *)v129 + 32))
  {
LABEL_211:
    v134 = *v78;
    v135 = v78;
    if (*v78)
    {
      while (1)
      {
        while (1)
        {
          v135 = (uint64_t **)v134;
          v136 = *((_DWORD *)v134 + 7);
          if (v136 < 4)
            break;
          v134 = *v135;
          v78 = v135;
          if (!*v135)
            goto LABEL_218;
        }
        if (v136 == 3)
          break;
        v134 = v135[1];
        if (!v134)
        {
          v78 = v135 + 1;
          goto LABEL_218;
        }
      }
      v137 = v135;
    }
    else
    {
LABEL_218:
      v137 = operator new(0x28uLL);
      v137[7] = 3;
      *((_BYTE *)v137 + 32) = 0;
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v137 + 1) = 0;
      *((_QWORD *)v137 + 2) = v135;
      *v78 = (uint64_t *)v137;
      v138 = **(_QWORD **)(v3 + 280);
      v139 = (uint64_t *)v137;
      if (v138)
      {
        *(_QWORD *)(v3 + 280) = v138;
        v139 = *v78;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 288), v139);
      ++*(_QWORD *)(v3 + 296);
    }
    *(_BYTE *)(v3 + 335) = *((_BYTE *)v137 + 32);
    antenna::Service::Internal::sendAudioSpeaker((antenna::Service::Internal *)v3);
    v140 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
    {
      v158 = *(unsigned __int8 *)(v3 + 335);
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v158;
      _os_log_debug_impl(&dword_1BF566000, v140, OS_LOG_TYPE_DEBUG, "#D Sent audio speaker message to baseband as %d", (uint8_t *)object, 8u);
    }
  }
LABEL_224:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v141 = (Capabilities *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v142 = operator new(1uLL);
    v143 = operator new(0x20uLL);
    *v143 = off_1E7922580;
    v143[1] = 0;
    v143[2] = 0;
    v143[3] = v142;
    v144 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v142;
    off_1ED70F200 = v143;
    if (v144)
    {
      p_shared_owners = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(p_shared_owners);
      while (__stlxr(v146 - 1, p_shared_owners));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v141 = (Capabilities *)unk_1ED70F1F8;
  }
  v147 = (std::__shared_weak_count *)off_1ED70F200;
  if (off_1ED70F200)
  {
    v148 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v141))
  {
    v150 = *(unsigned __int8 *)(v3 + 216);
    if (v147)
    {
      v151 = (unint64_t *)&v147->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        if (!v150)
          goto LABEL_247;
        goto LABEL_240;
      }
    }
    if (v150)
LABEL_240:
      antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  }
  else if (v147)
  {
    v153 = (unint64_t *)&v147->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_247:
  xpc_release(v161[1]);
  operator delete(v161);
  v155 = (std::__shared_weak_count *)v1[2];
  if (v155)
  {
    v156 = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  operator delete(v1);
}

void sub_1BF62AF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, xpc_object_t *__p, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t a15, xpc_object_t object, xpc_object_t a17)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  xpc_release(object);
  xpc_release(__p[1]);
  operator delete(__p);
  v18 = (std::__shared_weak_count *)a10[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF62B1C8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((_DWORD *)v2 + 2);
    v9[0] = 67109120;
    v9[1] = v8;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Hand Detection State: %d", (uint8_t *)v9, 8u);
  }
  *(_DWORD *)(v3 + 528) = *((_DWORD *)v2 + 2);
  antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF62B2E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(*(uint64_t **)a1);
  if (v2)
  {
    xpc_release((xpc_object_t)v2[1]);
    operator delete(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_7:
    operator delete((void *)a1);
  }
}

void sub_1BF62B3D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  xpc_object_t *v3;
  xpc_object_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = v2;
  if (v3)
  {
    v5 = v3;
    xpc_release(v3[1]);
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;
  xpc_object_t *v5;
  void *v6;
  xpc_object_t value;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *p_buf;
  std::string::size_type size;
  size_t v14;
  const void *v16;
  size_t v17;
  size_t v18;
  std::string::size_type v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  xpc_object_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  std::string::size_type v28;
  size_t v29;
  NSObject *v30;
  const char *v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  size_t v35;
  size_t v36;
  std::string::size_type v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  std::string::size_type v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  size_t v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  size_t v52;
  uint64_t v53;
  xpc_object_t v54;
  const char *v55;
  size_t v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  size_t v60;
  xpc_object_t v61;
  size_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  const object *v66;
  void **v67;
  xpc_object_t v68;
  const char *v69;
  void **v70;
  size_t v71;
  NSObject *v72;
  size_t v73;
  std::string::size_type v74;
  std::string *v75;
  size_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint8_t *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  xpc_object_t *v86;
  size_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  NSObject *v91;
  void *v92;
  const char *v93;
  const char *v94;
  void **v95;
  NSObject *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  const char *v101;
  size_t v102;
  const char *v103;
  size_t v104;
  size_t v105;
  capabilities::txpower *v106;
  int v107;
  void *v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  size_t v112;
  config::hw *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  void *v122;
  char *v123;
  const char *v124;
  void **v125;
  BOOL v126;
  NSObject *v127;
  std::string *v128;
  std::string *v129;
  uint8_t *v130;
  void *v131;
  char *v132;
  xpc_object_t v133;
  uint64_t v134[2];
  void *__p;
  char v136;
  xpc_object_t p_xdict;
  uint64_t v138;
  xpc_object_t xdict;
  xpc_object_t object[4];
  std::string buf;
  uint8_t v142[24];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(NSObject **)(*a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(a1 + 1));
    v4 = (v142[23] & 0x80u) == 0 ? v142 : *(uint8_t **)v142;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Set Property: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v142[23] < 0)
      operator delete(*(void **)v142);
  }
  memset(&buf, 170, sizeof(buf));
  v6 = (void *)a1[1];
  v5 = (xpc_object_t *)(a1 + 1);
  value = xpc_dictionary_get_value(v6, (const char *)*MEMORY[0x1E0CFB718]);
  *(_QWORD *)v142 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v142 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v142, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)v142);
  v9 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v10 = v9;
  v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9 != -1)
    {
      p_buf = &buf;
      size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      goto LABEL_15;
    }
LABEL_259:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1)
    goto LABEL_259;
  size = buf.__r_.__value_.__l.__size_;
  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_15:
  if (size >= v10)
    v14 = v10;
  else
    v14 = size;
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E0CFB990], v14) && size == v10)
  {
    v21 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v21;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
  v16 = (const void *)*MEMORY[0x1E0CFB3B0];
  v17 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v18 = v17;
  if ((v11 & 0x80) != 0)
  {
    if (v17 != -1)
    {
      v19 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v17)
        v22 = v17;
      else
        v22 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v16, v22))
        goto LABEL_40;
      goto LABEL_36;
    }
LABEL_260:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v17 == -1)
    goto LABEL_260;
  v19 = v11;
  if (v11 >= v17)
    v20 = v17;
  else
    v20 = v11;
  if (memcmp(&buf, v16, v20))
    goto LABEL_40;
LABEL_36:
  if (v19 == v18)
  {
    v23 = (const char *)*MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      v24 = xpc_dictionary_get_value(*v5, v23);
      *(_QWORD *)v142 = v24;
      if (v24)
        xpc_retain(v24);
      else
        *(_QWORD *)v142 = xpc_null_create();
      antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync((antenna::Service::Internal *)v2, (const xpc::object *)v142);
      xpc_release(*(xpc_object_t *)v142);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_40:
  v25 = (const void *)*MEMORY[0x1E0CFB5B8];
  v26 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v27 = v26;
  if ((v11 & 0x80) != 0)
  {
    if (v26 != -1)
    {
      v28 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v26)
        v32 = v26;
      else
        v32 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v25, v32))
        goto LABEL_57;
      goto LABEL_54;
    }
LABEL_261:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 == -1)
    goto LABEL_261;
  v28 = v11;
  if (v11 >= v26)
    v29 = v26;
  else
    v29 = v11;
  if (memcmp(&buf, v25, v29))
    goto LABEL_57;
LABEL_54:
  if (v28 == v27)
  {
    v33 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v33;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerAudioMode_sync((uint64_t **)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_57:
  v34 = (const void *)*MEMORY[0x1E0CFB708];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v36 = v35;
  if ((v11 & 0x80) != 0)
  {
    if (v35 != -1)
    {
      v37 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v35)
        v39 = v35;
      else
        v39 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v34, v39))
        goto LABEL_76;
      goto LABEL_73;
    }
LABEL_262:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1)
    goto LABEL_262;
  v37 = v11;
  if (v11 >= v35)
    v38 = v35;
  else
    v38 = v11;
  if (memcmp(&buf, v34, v38))
    goto LABEL_76;
LABEL_73:
  if (v37 == v36)
  {
    v40 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v40;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_76:
  v41 = (const void *)*MEMORY[0x1E0CFBE18];
  v42 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  v43 = v42;
  if ((v11 & 0x80) != 0)
  {
    if (v42 != -1)
    {
      v44 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v42)
        v46 = v42;
      else
        v46 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v41, v46))
        goto LABEL_93;
      goto LABEL_90;
    }
LABEL_263:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v42 == -1)
    goto LABEL_263;
  v44 = v11;
  if (v11 >= v42)
    v45 = v42;
  else
    v45 = v11;
  if (memcmp(&buf, v41, v45))
    goto LABEL_93;
LABEL_90:
  if (v44 == v43)
  {
    v47 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v47;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setTxPowerMotionMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_93:
  v48 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  v49 = v48;
  if ((v11 & 0x80) == 0)
  {
    if (v48 != -1)
    {
      v50 = &buf;
      v51 = v11;
      goto LABEL_100;
    }
LABEL_264:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v48 == -1)
    goto LABEL_264;
  v51 = buf.__r_.__value_.__l.__size_;
  v50 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_100:
  if (v51 >= v49)
    v52 = v49;
  else
    v52 = v51;
  if (!memcmp(v50, (const void *)*MEMORY[0x1E0CFBE40], v52) && v51 == v49)
  {
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v53 = *MEMORY[0x1E0CFB4D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v53;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
    v54 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB1B8]);
    p_xdict = v54;
    if (v54)
      xpc_retain(v54);
    else
      p_xdict = xpc_null_create();
    v66 = (const object *)*MEMORY[0x1E0CFC120];
    xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v55);
    v67 = (void **)(v2 + 392);
    if (*(char *)(v2 + 415) < 0)
      operator delete(*v67);
    *(_OWORD *)v67 = *(_OWORD *)v142;
    *(_QWORD *)(v2 + 408) = *(_QWORD *)&v142[16];
    v142[23] = 0;
    v142[0] = 0;
    xpc_release(p_xdict);
    v68 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB398]);
    p_xdict = v68;
    if (v68)
      xpc_retain(v68);
    else
      p_xdict = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&p_xdict, v66, v69);
    v70 = (void **)(v2 + 416);
    if (*(char *)(v2 + 439) < 0)
      operator delete(*v70);
    *(_OWORD *)v70 = *(_OWORD *)v142;
    *(_QWORD *)(v2 + 432) = *(_QWORD *)&v142[16];
    v142[23] = 0;
    v142[0] = 0;
    xpc_release(p_xdict);
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v2);
    xpc_release(object[0]);
    goto LABEL_247;
  }
  v56 = strlen((const char *)*MEMORY[0x1E0CFBC10]);
  v57 = v56;
  if ((v11 & 0x80) == 0)
  {
    if (v56 != -1)
    {
      v58 = &buf;
      v59 = v11;
      goto LABEL_115;
    }
LABEL_265:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v56 == -1)
    goto LABEL_265;
  v59 = buf.__r_.__value_.__l.__size_;
  v58 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_115:
  if (v59 >= v57)
    v60 = v57;
  else
    v60 = v59;
  if (!memcmp(v58, (const void *)*MEMORY[0x1E0CFBC10], v60) && v59 == v57)
  {
    v61 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]);
    *(_QWORD *)v142 = v61;
    if (v61)
      xpc_retain(v61);
    else
      *(_QWORD *)v142 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)v142, 0);
    xpc_release(*(xpc_object_t *)v142);
    if (!*(_BYTE *)(v2 + 664))
      antenna::Service::Internal::configTxPower_sync(v2, 2u);
    goto LABEL_247;
  }
  v62 = strlen((const char *)*MEMORY[0x1E0CFBE90]);
  v63 = v62;
  if ((v11 & 0x80) == 0)
  {
    if (v62 != -1)
    {
      v64 = &buf;
      v65 = v11;
      goto LABEL_136;
    }
LABEL_266:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v62 == -1)
    goto LABEL_266;
  v65 = buf.__r_.__value_.__l.__size_;
  v64 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_136:
  if (v65 >= v63)
    v71 = v63;
  else
    v71 = v65;
  if (!memcmp(v64, (const void *)*MEMORY[0x1E0CFBE90], v71) && v65 == v63)
  {
    if (*(_BYTE *)(v2 + 476))
    {
      v72 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v142 = 0;
        _os_log_impl(&dword_1BF566000, v72, OS_LOG_TYPE_DEFAULT, "#I Ignore to set CLTM/PPM since overriding is being used.", v142, 2u);
      }
    }
    else
    {
      v84 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v84;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, object);
      antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
    }
    goto LABEL_247;
  }
  v73 = strlen((const char *)*MEMORY[0x1E0CFBD28]);
  v74 = v73;
  if ((v11 & 0x80) == 0)
  {
    if (v73 != -1)
    {
      v75 = &buf;
      goto LABEL_152;
    }
LABEL_267:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v73 == -1)
    goto LABEL_267;
  v11 = buf.__r_.__value_.__l.__size_;
  v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_152:
  if (v11 >= v74)
    v76 = v74;
  else
    v76 = v11;
  if (!memcmp(v75, (const void *)*MEMORY[0x1E0CFBD28], v76) && v11 == v74)
  {
    v77 = *MEMORY[0x1E0CFB4D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v77;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v78 = xpc::dyn_cast_or_default((xpc *)object, 0);
    antenna::Service::Internal::setLinkQualityMetric_sync(v2, v78);
    xpc_release(object[0]);
    goto LABEL_247;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B0]))
  {
    memset(object, 170, 24);
    v85 = *MEMORY[0x1E0CFB4D0];
    p_xdict = v5;
    v138 = v85;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &xdict);
    memset(v142, 0, sizeof(v142));
    xpc::dyn_cast_or_default();
    if ((char)v142[23] < 0)
      operator delete(*(void **)v142);
    xpc_release(xdict);
    if (SHIBYTE(object[2]) >= 0)
      v86 = object;
    else
      v86 = (xpc_object_t *)object[0];
    v87 = strlen((const char *)*MEMORY[0x1E0CFB4B0]);
    *(_BYTE *)(v2 + 488) = strncasecmp((const char *)v86, (const char *)*MEMORY[0x1E0CFB4B0], v87) == 0;
    ctu::LoggerCommonBase::setLogLevel();
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_247;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE10]))
  {
    v88 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v88;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
      xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v89);
      antenna::Service::Internal::setTxPowerMotionHandDetection_sync(v2, (uint64_t)&__p);
      if (v136 < 0)
        operator delete(__p);
      xpc_release(object[0]);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE00]))
  {
    v90 = *MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      *(_QWORD *)v142 = v5;
      *(_QWORD *)&v142[8] = v90;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
      *(_DWORD *)(v2 + 568) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      v91 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        v130 = (v142[23] & 0x80u) == 0 ? v142 : *(uint8_t **)v142;
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v130;
        _os_log_debug_impl(&dword_1BF566000, v91, OS_LOG_TYPE_DEBUG, "#D Power source overriding as %s", (uint8_t *)object, 0xCu);
        if ((char)v142[23] < 0)
          operator delete(*(void **)v142);
      }
      antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)v2);
      goto LABEL_247;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    v92 = (void *)*MEMORY[0x1E0CFB4D0];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E0CFB4D0]))
    {
      object[0] = v5;
      object[1] = v92;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      v93 = (const char *)*MEMORY[0x1E0CFC120];
      xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v94);
      v95 = (void **)(v2 + 592);
      if (*(char *)(v2 + 615) < 0)
        operator delete(*v95);
      *(_OWORD *)v95 = *(_OWORD *)v142;
      *(_QWORD *)(v2 + 608) = *(_QWORD *)&v142[16];
      v142[23] = 0;
      v142[0] = 0;
      xpc_release(p_xdict);
      v96 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        v131 = (void *)(v2 + 592);
        if (*(char *)(v2 + 615) < 0)
          v131 = *v95;
        *(_DWORD *)v142 = 136315138;
        *(_QWORD *)&v142[4] = v131;
        _os_log_debug_impl(&dword_1BF566000, v96, OS_LOG_TYPE_DEBUG, "#D Overriding PPM: %s", v142, 0xCu);
        if (*(_QWORD *)(v2 + 576))
        {
LABEL_199:
          v100 = *(char *)(v2 + 615);
          v101 = (const char *)(v2 + 592);
          if (v100 < 0)
            v101 = (const char *)*v95;
          v102 = strlen((const char *)*MEMORY[0x1E0CFB488]);
          if (!strncasecmp(v101, (const char *)*MEMORY[0x1E0CFB488], v102))
          {
            v107 = 1;
          }
          else
          {
            v103 = (const char *)(v2 + 592);
            if (v100 < 0)
              v103 = (const char *)*v95;
            v104 = strlen((const char *)*MEMORY[0x1E0CFB560]);
            if (!strncasecmp(v103, (const char *)*MEMORY[0x1E0CFB560], v104))
            {
              v107 = 0;
              *(_BYTE *)(v2 + 572) = 0;
              goto LABEL_246;
            }
            if (v100 < 0)
              v95 = (void **)*v95;
            v105 = strlen(v93);
            v106 = (capabilities::txpower *)strncasecmp((const char *)v95, v93, v105);
            if ((_DWORD)v106)
            {
              v107 = *(_BYTE *)(v2 + 572) != 0;
LABEL_246:
              antenna::Service::Internal::enablePPM_sync((antenna::Service::Internal *)v2, v107);
              goto LABEL_247;
            }
            v107 = capabilities::txpower::supportsPPM(v106);
          }
          *(_BYTE *)(v2 + 572) = v107;
          goto LABEL_246;
        }
      }
      else if (*(_QWORD *)(v2 + 576))
      {
        goto LABEL_199;
      }
      v97 = *(_QWORD *)(v2 + 144);
      v134[0] = *(_QWORD *)(v2 + 136);
      v134[1] = v97;
      if (v97)
      {
        v98 = (unint64_t *)(v97 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      PPMManager::create(v134, v142);
      std::shared_ptr<PPMManager>::operator=[abi:ne180100](v2 + 576, (__int128 *)v142);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v142);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v134);
      goto LABEL_199;
    }
    v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    *(_WORD *)v142 = 0;
    v31 = "Cannot find the command data!";
LABEL_112:
    _os_log_error_impl(&dword_1BF566000, v30, OS_LOG_TYPE_ERROR, v31, v142, 2u);
    goto LABEL_247;
  }
  if (std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
      {
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v79 = *MEMORY[0x1E0CFB4D0];
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = v79;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)v142, &xdict);
        memset(v142, 170, sizeof(v142));
        std::string::basic_string[abi:ne180100]<0>(v142, "");
        v80 = *MEMORY[0x1E0CFBB48];
        if (xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBB48]))
        {
          p_xdict = &xdict;
          v138 = v80;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v133);
          xpc::dyn_cast_or_default((xpc *)&v133, (const object *)"", v81);
          if ((char)v142[23] < 0)
            operator delete(*(void **)v142);
          *(_OWORD *)v142 = *(_OWORD *)object;
          *(xpc_object_t *)&v142[16] = object[2];
          HIBYTE(object[2]) = 0;
          LOBYTE(object[0]) = 0;
          xpc_release(v133);
          if ((v142[23] & 0x80u) == 0)
            v82 = v142;
          else
            v82 = *(uint8_t **)v142;
          v83 = strlen((const char *)*MEMORY[0x1E0CFAF88]);
          *(_BYTE *)(v2 + 476) = strncmp((const char *)v82, (const char *)*MEMORY[0x1E0CFAF88], v83) == 0;
        }
        antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, &xdict);
        if ((char)v142[23] < 0)
          operator delete(*(void **)v142);
        xpc_release(xdict);
      }
      goto LABEL_247;
    }
    if (*(_BYTE *)(v2 + 688))
    {
      v122 = (void *)*MEMORY[0x1E0CFB4D0];
      object[0] = v5;
      object[1] = v122;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      v123 = (char *)*MEMORY[0x1E0CFC120];
      xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v124);
      v125 = (void **)(v2 + 696);
      if (*(char *)(v2 + 719) < 0)
        operator delete(*v125);
      *(_OWORD *)v125 = *(_OWORD *)v142;
      *(_QWORD *)(v2 + 712) = *(_QWORD *)&v142[16];
      v142[23] = 0;
      v142[0] = 0;
      xpc_release(p_xdict);
      std::string::basic_string[abi:ne180100]<0>(v142, v123);
      v126 = util::equal_nocase((const char *)(v2 + 696), (const char *)v142);
      if ((char)v142[23] < 0)
        operator delete(*(void **)v142);
      if (!v126)
      {
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 720) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 724) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 728) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(_QWORD *)v142 = v5;
        *(_QWORD *)&v142[8] = "kKeySwimLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
        *(_DWORD *)(v2 + 732) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v2);
      }
      goto LABEL_247;
    }
    v127 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    v129 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v129 = (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v142 = 136315138;
    *(_QWORD *)&v142[4] = v129;
LABEL_238:
    _os_log_error_impl(&dword_1BF566000, v127, OS_LOG_TYPE_ERROR, "%s is not supported in this device", v142, 0xCu);
    goto LABEL_247;
  }
  if (!*(_BYTE *)(v2 + 170))
  {
    v127 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      goto LABEL_247;
    v128 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v142 = 136315138;
    *(_QWORD *)&v142[4] = v128;
    goto LABEL_238;
  }
  v108 = (void *)*MEMORY[0x1E0CFB4D0];
  object[0] = v5;
  object[1] = v108;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
  v109 = (const char *)*MEMORY[0x1E0CFC120];
  xpc::dyn_cast_or_default((xpc *)&p_xdict, (const object *)*MEMORY[0x1E0CFC120], v110);
  v111 = v2 + 640;
  v132 = (char *)(v2 + 640);
  if (*(char *)(v2 + 663) < 0)
  {
    operator delete(*(void **)v111);
    v111 = v2 + 640;
  }
  *(_OWORD *)v111 = *(_OWORD *)v142;
  *(_QWORD *)(v111 + 16) = *(_QWORD *)&v142[16];
  v142[23] = 0;
  v142[0] = 0;
  xpc_release(p_xdict);
  if (*(char *)(v2 + 663) < 0)
    v132 = *(char **)v132;
  v112 = strlen(v109);
  v113 = (config::hw *)strncasecmp(v132, v109, v112);
  if ((_DWORD)v113)
  {
    v114 = *MEMORY[0x1E0CFC0D0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v114;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v115 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 1u) = v115;
    xpc_release(object[0]);
    v116 = *MEMORY[0x1E0CFC088];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v116;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v117 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 2u) = v117;
    xpc_release(object[0]);
    v118 = *MEMORY[0x1E0CFBEF0];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v118;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v119 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 3u) = v119;
    xpc_release(object[0]);
    v120 = *MEMORY[0x1E0CFBEE8];
    *(_QWORD *)v142 = v5;
    *(_QWORD *)&v142[8] = v120;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v142, object);
    v121 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 4u) = v121;
    xpc_release(object[0]);
  }
  else
  {
    config::hw::deviceMaterial(v113);
    if ((uint8_t *)(v2 + 616) != v142)
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(v2 + 616), *(_QWORD **)v142, &v142[8]);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(_QWORD **)&v142[8]);
  }
  antenna::Service::Internal::sendDeviceMaterial_sync((antenna::Service::Internal *)v2);
LABEL_247:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1BF62C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,xpc_object_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(_QWORD **)(v34 - 88));
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  std::string::size_type v3;
  const char *v4;
  xpc_object_t value;
  const char *v6;
  size_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *p_s1;
  std::string::size_type size;
  size_t v12;
  const void *v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  size_t v18;
  std::string *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  std::string::size_type v22;
  xpc_object_t v23;
  size_t v24;
  std::string *p_buf;
  xpc_object_t v26;
  xpc_object_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  std::string::size_type v31;
  size_t v32;
  size_t v33;
  std::string *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  std::string::size_type v37;
  xpc_object_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  std::string::size_type v42;
  size_t v43;
  size_t v44;
  std::string *v45;
  xpc_object_t v46;
  xpc_object_t v47;
  std::string::size_type v48;
  xpc_object_t v49;
  const void *v50;
  size_t v51;
  size_t v52;
  std::string::size_type v53;
  size_t v54;
  size_t v55;
  std::string *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  std::string::size_type v59;
  xpc_object_t v60;
  size_t v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  size_t v65;
  void **v66;
  xpc_object_t v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type v71;
  size_t v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  size_t v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  void *v83;
  size_t v84;
  const char **v85;
  std::string::size_type v86;
  size_t v87;
  std::string::size_type v88;
  std::string *v89;
  size_t v90;
  const char *v91;
  std::string::size_type v92;
  xpc_object_t *v93;
  xpc_object_t *v94;
  std::string::size_type v95;
  const char *v96;
  std::string::size_type v97;
  const char *v98;
  const char *v99;
  std::string::size_type v100;
  size_t v101;
  uint64_t **v102;
  uint64_t **v103;
  std::string::size_type v104;
  uint64_t **v105;
  std::string::size_type v106;
  uint64_t **v107;
  std::string::size_type v108;
  uint64_t **v109;
  std::string::size_type v110;
  const char *v111;
  const char *v112;
  std::string::size_type v113;
  NSObject *v114;
  std::string *v115;
  std::string *v116;
  xpc_object_t *v117;
  const char **v118;
  std::string::size_type v119;
  std::string::size_type v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  xpc_object_t v124;
  xpc_object_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  xpc_object_t v129;
  xpc_object_t v130;
  xpc_object_t v131;
  xpc_object_t v132;
  xpc_object_t v133;
  xpc_object_t v134;
  xpc_object_t v135;
  xpc_object_t v136;
  xpc_object_t v137;
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t v140;
  xpc_object_t v141;
  xpc_object_t v142;
  xpc_object_t v143;
  xpc_object_t v144;
  xpc_object_t v145;
  xpc_object_t v146;
  xpc_object_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  xpc_object_t v150;
  xpc_object_t v151;
  xpc_object_t v152;
  xpc_object_t v153;
  xpc_object_t object;
  xpc_object_t v155;
  xpc_object_t v156;
  xpc_object_t v157;
  xpc_object_t v158;
  xpc_object_t v159;
  xpc_object_t v160;
  xpc_object_t v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  xpc_object_t *v165;
  std::string::size_type v166;
  xpc_object_t v167;
  std::string __s1;
  std::string buf;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  memset(&__s1, 170, sizeof(__s1));
  v3 = a1 + 8;
  v4 = (const char *)*MEMORY[0x1E0CFB718];
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 8), (const char *)*MEMORY[0x1E0CFB718]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v6);
  xpc_release(buf.__r_.__value_.__l.__data_);
  v7 = strlen((const char *)*MEMORY[0x1E0CFBA80]);
  v8 = v7;
  v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != -1)
    {
      p_s1 = &__s1;
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      goto LABEL_9;
    }
LABEL_237:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 == -1)
    goto LABEL_237;
  size = __s1.__r_.__value_.__l.__size_;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (size >= v8)
    v12 = v8;
  else
    v12 = size;
  if (!memcmp(p_s1, (const void *)*MEMORY[0x1E0CFBA80], v12) && size == v8)
  {
    if ((v9 & 0x80u) == 0)
      v19 = &__s1;
    else
      v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v20 = xpc_string_create((const char *)v19);
    if (!v20)
      v20 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    v22 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v22;
    v165 = *(xpc_object_t **)a1;
    v166 = v22;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v167);
    xpc_release(v167);
    v167 = 0;
    antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, &v164);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v164);
    v23 = v164;
    v164 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v164);
    v164 = 0;
    goto LABEL_136;
  }
  v14 = (const void *)*MEMORY[0x1E0CFB3A8];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB3A8]);
  v16 = v15;
  if ((v9 & 0x80) != 0)
  {
    if (v15 != -1)
    {
      v17 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v15)
        v24 = v15;
      else
        v24 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v14, v24))
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_238:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1)
    goto LABEL_238;
  v17 = v9;
  if (v9 >= v15)
    v18 = v15;
  else
    v18 = v9;
  if (memcmp(&__s1, v14, v18))
    goto LABEL_42;
LABEL_34:
  if (v17 == v16)
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync((antenna::Service::Internal *)v2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v26 = xpc_string_create((const char *)p_buf);
    if (!v26)
      v26 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v26);
    v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_136;
  }
LABEL_42:
  v28 = (const void *)*MEMORY[0x1E0CFB700];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB700]);
  v30 = v29;
  if ((v9 & 0x80) != 0)
  {
    if (v29 != -1)
    {
      v31 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v29)
        v33 = v29;
      else
        v33 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v28, v33))
        goto LABEL_61;
      goto LABEL_54;
    }
LABEL_239:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1)
    goto LABEL_239;
  v31 = v9;
  if (v9 >= v29)
    v32 = v29;
  else
    v32 = v9;
  if (memcmp(&__s1, v28, v32))
    goto LABEL_61;
LABEL_54:
  if (v31 == v30)
  {
    if ((v9 & 0x80u) == 0)
      v34 = &__s1;
    else
      v34 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v35 = xpc_string_create((const char *)v34);
    if (!v35)
      v35 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v35);
    v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    v37 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v37;
    v165 = *(xpc_object_t **)a1;
    v166 = v37;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v163);
    xpc_release(v163);
    v163 = 0;
    antenna::Service::Internal::copyTxPowerAudioMode_sync((antenna::Service::Internal *)v2, &v162);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v162);
    v38 = v162;
    v162 = xpc_null_create();
    xpc_release(v38);
    xpc_release(v162);
    v162 = 0;
    goto LABEL_136;
  }
LABEL_61:
  v39 = (const void *)*MEMORY[0x1E0CFB848];
  v40 = strlen((const char *)*MEMORY[0x1E0CFB848]);
  v41 = v40;
  if ((v9 & 0x80) != 0)
  {
    if (v40 != -1)
    {
      v42 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v40)
        v44 = v40;
      else
        v44 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v39, v44))
        goto LABEL_80;
      goto LABEL_73;
    }
LABEL_240:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == -1)
    goto LABEL_240;
  v42 = v9;
  if (v9 >= v40)
    v43 = v40;
  else
    v43 = v9;
  if (memcmp(&__s1, v39, v43))
    goto LABEL_80;
LABEL_73:
  if (v42 == v41)
  {
    if ((v9 & 0x80u) == 0)
      v45 = &__s1;
    else
      v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v46 = xpc_string_create((const char *)v45);
    if (!v46)
      v46 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v46);
    v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    v48 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v48;
    v165 = *(xpc_object_t **)a1;
    v166 = v48;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v161);
    xpc_release(v161);
    v161 = 0;
    antenna::Service::Internal::copyTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, &v160);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v160);
    v49 = v160;
    v160 = xpc_null_create();
    xpc_release(v49);
    xpc_release(v160);
    v160 = 0;
    goto LABEL_136;
  }
LABEL_80:
  v50 = (const void *)*MEMORY[0x1E0CFBEB8];
  v51 = strlen((const char *)*MEMORY[0x1E0CFBEB8]);
  v52 = v51;
  if ((v9 & 0x80) != 0)
  {
    if (v51 != -1)
    {
      v53 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v51)
        v55 = v51;
      else
        v55 = __s1.__r_.__value_.__l.__size_;
      if (memcmp(__s1.__r_.__value_.__l.__data_, v50, v55))
        goto LABEL_100;
      goto LABEL_92;
    }
LABEL_241:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v51 == -1)
    goto LABEL_241;
  v53 = v9;
  if (v9 >= v51)
    v54 = v51;
  else
    v54 = v9;
  if (memcmp(&__s1, v50, v54))
    goto LABEL_100;
LABEL_92:
  if (v53 == v52)
  {
    if (*(_BYTE *)(v2 + 153))
    {
      if ((v9 & 0x80u) == 0)
        v56 = &__s1;
      else
        v56 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      v57 = xpc_string_create((const char *)v56);
      if (!v57)
        v57 = xpc_null_create();
      xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v57);
      v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      v59 = *MEMORY[0x1E0CFB4D0];
      buf.__r_.__value_.__r.__words[0] = v3;
      buf.__r_.__value_.__l.__size_ = v59;
      v165 = *(xpc_object_t **)a1;
      v166 = v59;
      xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v159);
      xpc_release(v159);
      v159 = 0;
      antenna::Service::Internal::copyTxPowerMotionMode_sync((antenna::Service::Internal *)v2, &v158);
      xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB5C0], v158);
      v60 = v158;
      v158 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v158);
      v158 = 0;
    }
    goto LABEL_136;
  }
LABEL_100:
  v61 = strlen((const char *)*MEMORY[0x1E0CFBBD8]);
  v62 = v61;
  if ((v9 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      v63 = &__s1;
      v64 = v9;
      goto LABEL_105;
    }
LABEL_242:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1)
    goto LABEL_242;
  v64 = __s1.__r_.__value_.__l.__size_;
  v63 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_105:
  if (v64 >= v62)
    v65 = v62;
  else
    v65 = v64;
  if (!memcmp(v63, (const void *)*MEMORY[0x1E0CFBBD8], v65) && v64 == v62)
  {
    v66 = *(void ***)a1;
    v67 = *(xpc_object_t *)(v2 + 224);
    if (v67)
      xpc_retain(*(xpc_object_t *)(v2 + 224));
    else
      v67 = xpc_null_create();
    v83 = *v66;
    *v66 = v67;
    xpc_release(v83);
    goto LABEL_136;
  }
  v68 = strlen((const char *)*MEMORY[0x1E0CFBAC8]);
  v69 = v68;
  if ((v9 & 0x80) == 0)
  {
    if (v68 != -1)
    {
      v70 = &__s1;
      v71 = v9;
      goto LABEL_117;
    }
LABEL_243:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v68 == -1)
    goto LABEL_243;
  v71 = __s1.__r_.__value_.__l.__size_;
  v70 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_117:
  if (v71 >= v69)
    v72 = v69;
  else
    v72 = v71;
  if (!memcmp(v70, (const void *)*MEMORY[0x1E0CFBAC8], v72) && v71 == v69)
  {
    v73 = (const char *)(v2 + 392);
    if (*(char *)(v2 + 415) < 0)
      v73 = *(const char **)v73;
    v74 = xpc_string_create(v73);
    if (!v74)
      v74 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB1B8], v74);
    v75 = xpc_null_create();
    xpc_release(v74);
    xpc_release(v75);
    v76 = (const char *)(v2 + 416);
    if (*(char *)(v2 + 439) < 0)
      v76 = *(const char **)v76;
    v77 = xpc_string_create(v76);
    if (!v77)
      v77 = xpc_null_create();
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E0CFB398], v77);
    v78 = xpc_null_create();
    xpc_release(v77);
    xpc_release(v78);
    goto LABEL_136;
  }
  v79 = strlen((const char *)*MEMORY[0x1E0CFB608]);
  v80 = v79;
  if ((v9 & 0x80) == 0)
  {
    if (v79 != -1)
    {
      v81 = &__s1;
      v82 = v9;
      goto LABEL_141;
    }
LABEL_244:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v79 == -1)
    goto LABEL_244;
  v82 = __s1.__r_.__value_.__l.__size_;
  v81 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_141:
  if (v82 >= v80)
    v84 = v80;
  else
    v84 = v82;
  if (!memcmp(v81, (const void *)*MEMORY[0x1E0CFB608], v84) && v82 == v80)
  {
    v85 = (const char **)MEMORY[0x1E0CFB4B0];
    if (!*(_BYTE *)(v2 + 488))
      v85 = (const char **)MEMORY[0x1E0CFB580];
    v156 = xpc_string_create(*v85);
    if (!v156)
      v156 = xpc_null_create();
    v86 = *MEMORY[0x1E0CFB4D0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v86;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v156, &v157);
    xpc_release(v157);
    v157 = 0;
    xpc_release(v156);
    v156 = 0;
    goto LABEL_136;
  }
  v87 = strlen((const char *)*MEMORY[0x1E0CFBEB0]);
  v88 = v87;
  if ((v9 & 0x80) == 0)
  {
    if (v87 != -1)
    {
      v89 = &__s1;
      goto LABEL_156;
    }
LABEL_245:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v87 == -1)
    goto LABEL_245;
  v9 = __s1.__r_.__value_.__l.__size_;
  v89 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_156:
  if (v9 >= v88)
    v90 = v88;
  else
    v90 = v9;
  if (!memcmp(v89, (const void *)*MEMORY[0x1E0CFBEB0], v90) && v9 == v88)
  {
    v91 = (const char *)(v2 + 536);
    if (*(char *)(v2 + 559) < 0)
      v91 = *(const char **)v91;
    object = xpc_string_create(v91);
    if (!object)
      object = xpc_null_create();
    v92 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v92;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &object, &v155);
    xpc_release(v155);
    v155 = 0;
    xpc_release(object);
    object = 0;
    goto LABEL_136;
  }
  if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFBDC0]))
  {
    v152 = xpc_int64_create(*(unsigned int *)(v2 + 568));
    if (!v152)
      v152 = xpc_null_create();
    v95 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v95;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v152, &v153);
    xpc_release(v153);
    v153 = 0;
    xpc_release(v152);
    v152 = 0;
  }
  else if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFB610]))
  {
    v96 = (const char *)(v2 + 592);
    if (*(char *)(v2 + 615) < 0)
      v96 = *(const char **)v96;
    v150 = xpc_string_create(v96);
    if (!v150)
      v150 = xpc_null_create();
    v97 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v97;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v150, &v151);
    xpc_release(v151);
    v151 = 0;
    xpc_release(v150);
    v150 = 0;
  }
  else
  {
    if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFBE48]))
    {
      if (std::string::compare(&__s1, "kGetWorkoutInfo"))
      {
        if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E0CFAF50]))
          goto LABEL_136;
        v165 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
        v93 = (xpc_object_t *)xpc_dictionary_create(0, 0, 0);
        v94 = v93;
        if (v93)
        {
          v165 = v93;
        }
        else
        {
          v94 = (xpc_object_t *)xpc_null_create();
          v165 = v94;
          if (!v94)
          {
            v117 = (xpc_object_t *)xpc_null_create();
            v94 = 0;
            goto LABEL_225;
          }
        }
        if (MEMORY[0x1C3B8CD78](v94) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v94);
LABEL_226:
          xpc_release(v94);
          v118 = (const char **)MEMORY[0x1E0CFAF88];
          if (!*(_BYTE *)(v2 + 476))
            v118 = (const char **)MEMORY[0x1E0CFC120];
          v132 = xpc_string_create(*v118);
          if (!v132)
            v132 = xpc_null_create();
          v119 = *MEMORY[0x1E0CFBB48];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v119;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v132, &v133);
          xpc_release(v133);
          v133 = 0;
          xpc_release(v132);
          v132 = 0;
          v130 = xpc_int64_create(*(unsigned int *)(v2 + 464));
          if (!v130)
            v130 = xpc_null_create();
          v120 = *MEMORY[0x1E0CFB308];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v120;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v130, &v131);
          xpc_release(v131);
          v131 = 0;
          xpc_release(v130);
          v130 = 0;
          v128 = xpc_int64_create(*(unsigned int *)(v2 + 468));
          if (!v128)
            v128 = xpc_null_create();
          v121 = *MEMORY[0x1E0CFB4C8];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v121;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v128, &v129);
          xpc_release(v129);
          v129 = 0;
          xpc_release(v128);
          v128 = 0;
          v126 = xpc_int64_create(*(unsigned int *)(v2 + 472));
          if (!v126)
            v126 = xpc_null_create();
          v122 = *MEMORY[0x1E0CFB120];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v122;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v126, &v127);
          xpc_release(v127);
          v127 = 0;
          xpc_release(v126);
          v126 = 0;
          xpc::dict::dict(&v124, (void **)&v165);
          v123 = *MEMORY[0x1E0CFB5C0];
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = v123;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v124, &v125);
          xpc_release(v125);
          v125 = 0;
          xpc_release(v124);
          v124 = 0;
          xpc_release(v165);
          goto LABEL_136;
        }
        v117 = (xpc_object_t *)xpc_null_create();
LABEL_225:
        v165 = v117;
        goto LABEL_226;
      }
      if (*(_BYTE *)(v2 + 688))
      {
        v111 = (const char *)(v2 + 696);
        v112 = (const char *)(v2 + 696);
        if (*(char *)(v2 + 719) < 0)
          v112 = *(const char **)v111;
        v138 = xpc_string_create(v112);
        if (!v138)
          v138 = xpc_null_create();
        v113 = *MEMORY[0x1E0CFB5C0];
        buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
        buf.__r_.__value_.__l.__size_ = v113;
        xpc::dict::object_proxy::operator=((uint64_t)&buf, &v138, &v139);
        xpc_release(v139);
        v139 = 0;
        xpc_release(v138);
        v138 = 0;
        if (*(char *)(v2 + 719) < 0)
          v111 = *(const char **)v111;
        if (!strncasecmp(v111, "OVERRIDE", 8uLL))
        {
          v136 = xpc_int64_create(*(unsigned int *)(v2 + 720));
          if (!v136)
            v136 = xpc_null_create();
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutType";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v136, &v137);
          xpc_release(v137);
          v137 = 0;
          xpc_release(v136);
          v136 = 0;
          v134 = xpc_int64_create(*(unsigned int *)(v2 + 724));
          if (!v134)
            v134 = xpc_null_create();
          buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutState";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v134, &v135);
          xpc_release(v135);
          v135 = 0;
          xpc_release(v134);
          v134 = 0;
        }
        goto LABEL_136;
      }
      v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        goto LABEL_136;
      v116 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v116 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
LABEL_219:
      _os_log_error_impl(&dword_1BF566000, v114, OS_LOG_TYPE_ERROR, "%s is not supported in this device", (uint8_t *)&buf, 0xCu);
      goto LABEL_136;
    }
    if (!*(_BYTE *)(v2 + 170))
    {
      v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        goto LABEL_136;
      v115 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v115;
      goto LABEL_219;
    }
    v98 = (const char *)(v2 + 640);
    v99 = (const char *)(v2 + 640);
    if (*(char *)(v2 + 663) < 0)
      v99 = *(const char **)v98;
    v148 = xpc_string_create(v99);
    if (!v148)
      v148 = xpc_null_create();
    v100 = *MEMORY[0x1E0CFB5C0];
    buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    buf.__r_.__value_.__l.__size_ = v100;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v148, &v149);
    xpc_release(v149);
    v149 = 0;
    xpc_release(v148);
    v148 = 0;
    if (*(char *)(v2 + 663) < 0)
      v98 = *(const char **)v98;
    v101 = strlen((const char *)*MEMORY[0x1E0CFB9A0]);
    if (!strncasecmp(v98, (const char *)*MEMORY[0x1E0CFB9A0], v101))
    {
      v102 = (uint64_t **)(v2 + 616);
      v103 = std::map<unsigned int,unsigned int>::operator[](v102, 1u);
      v146 = xpc_int64_create(*(unsigned int *)v103);
      if (!v146)
        v146 = xpc_null_create();
      v104 = *MEMORY[0x1E0CFC0D0];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v104;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v146, &v147);
      xpc_release(v147);
      v147 = 0;
      xpc_release(v146);
      v146 = 0;
      v105 = std::map<unsigned int,unsigned int>::operator[](v102, 2u);
      v144 = xpc_int64_create(*(unsigned int *)v105);
      if (!v144)
        v144 = xpc_null_create();
      v106 = *MEMORY[0x1E0CFC088];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v106;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v144, &v145);
      xpc_release(v145);
      v145 = 0;
      xpc_release(v144);
      v144 = 0;
      v107 = std::map<unsigned int,unsigned int>::operator[](v102, 3u);
      v142 = xpc_int64_create(*(unsigned int *)v107);
      if (!v142)
        v142 = xpc_null_create();
      v108 = *MEMORY[0x1E0CFBEF0];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v108;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v142, &v143);
      xpc_release(v143);
      v143 = 0;
      xpc_release(v142);
      v142 = 0;
      v109 = std::map<unsigned int,unsigned int>::operator[](v102, 4u);
      v140 = xpc_int64_create(*(unsigned int *)v109);
      if (!v140)
        v140 = xpc_null_create();
      v110 = *MEMORY[0x1E0CFBEE8];
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
      buf.__r_.__value_.__l.__size_ = v110;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v140, &v141);
      xpc_release(v141);
      v141 = 0;
      xpc_release(v140);
      v140 = 0;
    }
  }
LABEL_136:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1BF62DDEC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke(uint64_t a1)
{
  antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(*(_QWORD *)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  antenna::Service::Internal **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::sendAudioSpeaker_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF62E124(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  antenna::Service::Internal **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::handleDumpState_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF62E200(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_27_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_28()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_29_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_30_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void FSModuleICE::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x488uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  FSModuleICE::FSModuleICE((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<FSModuleICE>::shared_ptr[abi:ne180100]<FSModuleICE,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1},void>(a2, v5);
  ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF62E750(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void FSModuleICE::~FSModuleICE(FSModuleICE *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  FSModuleICE *v9;
  uint64_t v10;
  uint64_t v11;
  FSModuleICE *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  uint8_t v25[16];

  *(_QWORD *)this = off_1E7918220;
  *((_QWORD *)this + 6) = &unk_1E7918290;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v25, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 141);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!*((_QWORD *)this + 136))
      goto LABEL_21;
  }
  else
  {
LABEL_12:
    if (!*((_QWORD *)this + 136))
      goto LABEL_21;
  }
  v9 = (FSModuleICE *)*((_QWORD *)this + 135);
  v10 = *((_QWORD *)this + 134);
  v11 = *(_QWORD *)v9;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
  **(_QWORD **)(v10 + 8) = v11;
  *((_QWORD *)this + 136) = 0;
  if (v9 != (FSModuleICE *)((char *)this + 1072))
  {
    do
    {
      v12 = (FSModuleICE *)*((_QWORD *)v9 + 1);
      v13 = *((_QWORD *)v9 + 3);
      if (v13)
        dispatch_release(v13);
      v14 = (const void *)*((_QWORD *)v9 + 2);
      if (v14)
        _Block_release(v14);
      operator delete(v9);
      v9 = v12;
    }
    while (v12 != (FSModuleICE *)((char *)this + 1072));
  }
LABEL_21:
  if (*((char *)this + 1071) < 0)
    operator delete(*((void **)this + 131));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 130);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 976);
  *((_QWORD *)this + 6) = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v18 = *((_QWORD *)this + 18);
  if (v18)
    dispatch_release(v18);
  v19 = *((_QWORD *)this + 17);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  *(_QWORD *)this = off_1E79228B8;
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    v22 = *((_QWORD *)this + 4);
    v23 = (void *)*((_QWORD *)this + 3);
    if (v22 != v21)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0)
          operator delete(*(void **)(v22 - 24));
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v21;
    operator delete(v23);
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
}

{
  void *v1;

  FSModuleICE::~FSModuleICE(this);
  operator delete(v1);
}

uint64_t *std::list<dispatch::callback<void({block_pointer})(BOOL)>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  NSObject *v7;
  const void *v8;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = v3[3];
        if (v7)
          dispatch_release(v7);
        v8 = (const void *)v3[2];
        if (v8)
          _Block_release(v8);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

_QWORD *ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'FSModuleICE::~FSModuleICE(FSModuleICE *this)
{
  FSModuleICE::~FSModuleICE((FSModuleICE *)((char *)this - 48));
}

{
  void *v1;

  FSModuleICE::~FSModuleICE((FSModuleICE *)((char *)this - 48));
  operator delete(v1);
}

const char *FSModuleICE::getName(FSModuleICE *this)
{
  return "rfs.mod";
}

uint64_t FSModuleICE::FSModuleICE(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  CommandDriverFactory *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 block;
  void (*v51)(uint64_t);
  void *v52;
  uint64_t *v53;
  __int128 v54;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7918220;
  *(_QWORD *)(a1 + 48) = &unk_1E7918290;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v48, "com.apple.telephony.abm", "rfs.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v51 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v52 = &__block_descriptor_tmp_13_8;
  v53 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("rfs.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7918740;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v54);
    *v9 = off_1E79187D0;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v54);
    *v9 = off_1E79187D0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v48);
  *(_QWORD *)a1 = off_1E7918220;
  *(_QWORD *)(a1 + 48) = &unk_1E7918290;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 960) = 256;
  *(_BYTE *)(a1 + 964) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_QWORD *)(a1 + 1016) = 0;
  v20 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a1 + 1048) = v20;
  *(_OWORD *)(a1 + 1056) = xmmword_1BF73FC70;
  strcpy(v20, "com.apple.AppleBasebandManager.FSModuleSync");
  *(_QWORD *)(a1 + 1072) = a1 + 1072;
  *(_QWORD *)(a1 + 1080) = a1 + 1072;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  v21 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v22 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v21);
    v23 = block;
    block = 0uLL;
    v24 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = off_1ED70F4D0;
  }
  v48 = v22;
  v49 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v22 + 32))(&v54, v22);
  v32 = v54;
  v54 = 0uLL;
  v33 = *(std::__shared_weak_count **)(a1 + 1112);
  *(_OWORD *)(a1 + 1104) = v32;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v49;
  if (!v49)
    goto LABEL_54;
  v40 = (unint64_t *)&v49->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = *(void ***)(a1 + 984);
    v47 = *(_QWORD *)(a1 + 992);
    *(_QWORD *)(a1 + 1016) = 0;
    v44 = v47 - (_QWORD)v42;
    if (v44 < 0x11)
      goto LABEL_56;
  }
  else
  {
LABEL_54:
    v42 = *(void ***)(a1 + 984);
    v43 = *(_QWORD *)(a1 + 992);
    *(_QWORD *)(a1 + 1016) = 0;
    v44 = v43 - (_QWORD)v42;
    if (v44 < 0x11)
      goto LABEL_56;
  }
  do
  {
    operator delete(*v42);
    v42 = (void **)(*(_QWORD *)(a1 + 984) + 8);
    *(_QWORD *)(a1 + 984) = v42;
    v44 = *(_QWORD *)(a1 + 992) - (_QWORD)v42;
  }
  while (v44 > 0x10);
LABEL_56:
  if (v44 >> 3 == 1)
  {
    v45 = 256;
    goto LABEL_60;
  }
  if (v44 >> 3 == 2)
  {
    v45 = 512;
LABEL_60:
    *(_QWORD *)(a1 + 1008) = v45;
  }
  return a1;
}

void sub_1BF62F0C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 1120);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 1104);
  std::list<dispatch::callback<void({block_pointer})(BOOL)>>::~list(v4);
  if (*(char *)(v1 + 1071) < 0)
    operator delete(*(void **)(v1 + 1048));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100](v1 + 976);
  ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service((Service *)v1);
  _Unwind_Resume(a1);
}

void sub_1BF62F158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Service *v19;
  _QWORD *v20;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v20);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF62F194(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void FSModuleICE::checkAndExecPendingResponses_sync(FSModuleICE *this)
{
  NSObject *v2;
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 257) < *((_DWORD *)this + 256))
      return;
LABEL_5:
    FSModuleICE::execPendingResponses_sync(this, 1);
    return;
  }
  v3 = *((_DWORD *)this + 257);
  v4 = *((_DWORD *)this + 256);
  v5[0] = 67109376;
  v5[1] = v3;
  v6 = 1024;
  v7 = v4;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Checking response fSyncsCompleted=%u fSyncsRequested=%u", (uint8_t *)v5, 0xEu);
  if (*((_DWORD *)this + 257) >= *((_DWORD *)this + 256))
    goto LABEL_5;
}

void FSModuleICE::execPendingResponses_sync(FSModuleICE *this, char a2)
{
  NSObject *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  const void *v12;
  void *v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  const void *v20;
  FSModuleICE *v21;
  uint8_t buf[8];
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  char v27;

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Clearing responses", buf, 2u);
  }
  v5 = (char *)this + 1072;
  v21 = this;
  v6 = (char *)*((_QWORD *)this + 135);
  if (v6 != (char *)this + 1072)
  {
    v7 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v8 = (const void *)*((_QWORD *)v6 + 2);
      if (!v8)
        break;
      v9 = _Block_copy(v8);
      v10 = *((_QWORD *)v6 + 3);
      if (v10)
        goto LABEL_8;
LABEL_9:
      if (v9)
      {
        v11 = _Block_copy(v9);
        v12 = v11;
        *(_QWORD *)buf = v7;
        v23 = 1174405120;
        v24 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        v25 = &__block_descriptor_tmp_58_1;
        if (v11)
        {
          v13 = _Block_copy(v11);
          v14 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 1;
        }
      }
      else
      {
        v12 = 0;
        v13 = 0;
        *(_QWORD *)buf = v7;
        v23 = 1174405120;
        v14 = 1;
        v24 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        v25 = &__block_descriptor_tmp_58_1;
      }
      aBlock = v13;
      v27 = a2;
      dispatch_async(v10, buf);
      if (aBlock)
        _Block_release(aBlock);
      if ((v14 & 1) == 0)
        _Block_release(v12);
      if (v10)
        dispatch_release(v10);
      if (v9)
        _Block_release(v9);
      v6 = (char *)*((_QWORD *)v6 + 1);
      if (v6 == v5)
        goto LABEL_24;
    }
    v9 = 0;
    v10 = *((_QWORD *)v6 + 3);
    if (!v10)
      goto LABEL_9;
LABEL_8:
    dispatch_retain(v10);
    goto LABEL_9;
  }
LABEL_24:
  if (*((_QWORD *)v21 + 136))
  {
    v15 = (char *)*((_QWORD *)v21 + 135);
    v16 = *((_QWORD *)v21 + 134);
    v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v16 + 8) = v17;
    *((_QWORD *)v21 + 136) = 0;
    if (v15 != v5)
    {
      do
      {
        v18 = (char *)*((_QWORD *)v15 + 1);
        v19 = *((_QWORD *)v15 + 3);
        if (v19)
          dispatch_release(v19);
        v20 = (const void *)*((_QWORD *)v15 + 2);
        if (v20)
          _Block_release(v20);
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v5);
    }
  }
}

_BYTE *FSModuleICE::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void FSModuleICE::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN11FSModuleICE8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_16;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void FSModuleICE::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_36_0;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::initialize(dispatch::group_session)::$_0>(FSModuleICE::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  void **v36;
  NSObject *v37;
  unint64_t v38;
  void *v39;
  NSObject *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  unint64_t v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  std::__shared_weak_count *v54;
  void *v55;
  dispatch_object_t v56;
  void *v57;
  dispatch_object_t v58;
  void *v59;
  dispatch_object_t v60;
  void *v61;
  dispatch_object_t object;
  _QWORD v63[6];
  std::__shared_weak_count *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD v71[6];
  std::__shared_weak_count *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[6];
  std::__shared_weak_count *v76;
  _QWORD v77[6];
  std::__shared_weak_count *v78;
  const void *v79;
  _QWORD v80[6];
  std::__shared_weak_count *v81;
  const void *v82;
  _QWORD aBlock[6];
  std::__shared_weak_count *v84;
  const void *v85;
  void **__dst;
  unint64_t v87;
  unint64_t v88;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB5D0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB5D0]);
  v54 = v5;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v87 = v12;
    v88 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v88) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_12_3;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v84 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v85 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v85);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v88) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBC30];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBC30]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v87 = v21;
    v88 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v88) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v80[0] = v16;
  v80[1] = 1174405120;
  v80[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v80[3] = &__block_descriptor_tmp_16_0;
  v80[4] = v1;
  v80[5] = v3;
  v81 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v80);
  v82 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v82);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v88) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFB5C8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB5C8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v87 = v29;
    v88 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v88) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v77[0] = v16;
  v77[1] = 1174405120;
  v77[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_17;
  v77[3] = &__block_descriptor_tmp_23_4;
  v77[4] = v1;
  v77[5] = v3;
  v78 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v77);
  v79 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v79);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v88) < 0)
    operator delete(__dst);
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v87 = 0xAAAAAAAAAAAAAAAALL;
  v75[0] = v16;
  v75[1] = 1174405120;
  v75[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_24;
  v75[3] = &__block_descriptor_tmp_26_2;
  v75[4] = v1;
  v75[5] = v3;
  v76 = v5;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = (void **)_Block_copy(v75);
  v37 = *(NSObject **)(v1 + 136);
  if (v37)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  __dst = v36;
  v87 = (unint64_t)v37;
  v73 = 0xAAAAAAAAAAAAAAAALL;
  v74 = 0xAAAAAAAAAAAAAAAALL;
  v71[0] = v16;
  v71[1] = 1174405120;
  v71[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_27;
  v71[3] = &__block_descriptor_tmp_30_2;
  v71[4] = v1;
  v71[5] = v3;
  v72 = v5;
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v39 = _Block_copy(v71);
  v40 = *(NSObject **)(v1 + 136);
  if (v40)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  v73 = (unint64_t)v39;
  v74 = (unint64_t)v40;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v70 = 0xAAAAAAAAAAAAAAAALL;
  v67[0] = v16;
  v67[1] = 1174405120;
  v67[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v67[3] = &__block_descriptor_tmp_33_5;
  v67[4] = v1;
  v67[5] = v3;
  v68 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = v16;
  v53 = v36;
  v43 = _Block_copy(v67);
  v44 = *(NSObject **)(v1 + 136);
  if (v44)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  v69 = (unint64_t)v43;
  v70 = (unint64_t)v44;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  v66 = 0xAAAAAAAAAAAAAAAALL;
  v63[0] = v42;
  v63[1] = 1174405120;
  v63[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_34;
  v63[3] = &__block_descriptor_tmp_35_4;
  v63[4] = v1;
  v63[5] = v3;
  v64 = v54;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v46 = _Block_copy(v63);
  v47 = *(NSObject **)(v1 + 136);
  if (v47)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  v65 = (unint64_t)v46;
  v66 = (unint64_t)v47;
  v48 = *(_QWORD *)(v1 + 1104);
  v49 = v53;
  if (v53)
    v49 = _Block_copy(v53);
  v61 = v49;
  object = v37;
  if (v37)
    dispatch_retain(v37);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v48 + 64))(v48, &v61);
  if (object)
    dispatch_release(object);
  if (v61)
    _Block_release(v61);
  v50 = *(_QWORD *)(v1 + 1104);
  if (v39)
  {
    v59 = _Block_copy(v39);
    v60 = v40;
    if (!v40)
      goto LABEL_78;
    goto LABEL_77;
  }
  v59 = 0;
  v60 = v40;
  if (v40)
LABEL_77:
    dispatch_retain(v40);
LABEL_78:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v50 + 88))(v50, &v59);
  if (v60)
    dispatch_release(v60);
  if (v59)
    _Block_release(v59);
  v51 = *(_QWORD *)(v1 + 1104);
  if (v43)
  {
    v57 = _Block_copy(v43);
    v58 = v44;
    if (!v44)
      goto LABEL_85;
    goto LABEL_84;
  }
  v57 = 0;
  v58 = v44;
  if (v44)
LABEL_84:
    dispatch_retain(v44);
LABEL_85:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 72))(v51, &v57);
  if (v58)
    dispatch_release(v58);
  if (v57)
    _Block_release(v57);
  v52 = *(_QWORD *)(v1 + 1104);
  if (v46)
  {
    v55 = _Block_copy(v46);
    v56 = v47;
    if (!v47)
      goto LABEL_92;
    goto LABEL_91;
  }
  v55 = 0;
  v56 = v47;
  if (v47)
LABEL_91:
    dispatch_retain(v47);
LABEL_92:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 80))(v52, &v55);
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  if (v44)
    dispatch_release(v44);
  if (v43)
    _Block_release(v43);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  if (v40)
    dispatch_release(v40);
  if (v39)
    _Block_release(v39);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  if (v37)
    dispatch_release(v37);
  if (v53)
    _Block_release(v53);
  if (v76)
    std::__shared_weak_count::__release_weak(v76);
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  if (v81)
    std::__shared_weak_count::__release_weak(v81);
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  std::__shared_weak_count::__release_weak(v54);
}

void sub_1BF62FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  uint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;

  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a11);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a26);
  if (a25)
  {
    std::__shared_weak_count::__release_weak(a25);
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)&a35);
    v61 = a34;
    if (!a34)
    {
LABEL_3:
      dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback((uint64_t)&a44);
      v62 = a43;
      if (!a43)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)&a35);
    v61 = a34;
    if (!a34)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v61);
  dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback((uint64_t)&a44);
  v62 = a43;
  if (!a43)
  {
LABEL_4:
    dispatch::callback<void({block_pointer})>::~callback(v59 - 128);
    v63 = a52;
    if (!a52)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v62);
  dispatch::callback<void({block_pointer})>::~callback(v59 - 128);
  v63 = a52;
  if (!a52)
  {
LABEL_5:
    v64 = a59;
    if (!a59)
    {
LABEL_12:
      v65 = *(std::__shared_weak_count **)(v59 - 208);
      if (v65)
        std::__shared_weak_count::__release_weak(v65);
      v66 = *(std::__shared_weak_count **)(v59 - 144);
      if (v66)
      {
        std::__shared_weak_count::__release_weak(v66);
        std::__shared_weak_count::__release_weak(a10);
        _Unwind_Resume(a1);
      }
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(a1);
    }
LABEL_11:
    std::__shared_weak_count::__release_weak(v64);
    goto LABEL_12;
  }
LABEL_10:
  std::__shared_weak_count::__release_weak(v63);
  v64 = a59;
  if (!a59)
    goto LABEL_12;
  goto LABEL_11;
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_10_0;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  const char *v5;
  xpc_object_t value;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  int v20;
  int v21;
  unsigned int v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  _QWORD aBlock[4];
  void *v27;
  uint8_t buf[24];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "true";
    if (*(_BYTE *)(v2 + 961))
      v5 = "true";
    else
      v5 = "false";
    if (!*(_BYTE *)(v2 + 960))
      v4 = "false";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I RFS status during request: Remote=%s Ready=%s", buf, 0x16u);
  }
  if (!*(_BYTE *)(v2 + 961) || !*(_BYTE *)(v2 + 960))
  {
    v7 = xpc_null_create();
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)buf = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v8 + 16))(v8, 3760250887, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v9);
    return;
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFBBE0]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  v11 = *(NSObject **)(v2 + 88);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Responding immediately before fs-sync is complete", buf, 2u);
    }
    goto LABEL_32;
  }
  if (v12)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Holding response till fs-sync is complete", buf, 2u);
  }
  memset(buf, 170, 16);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_9_2;
  v13 = *(void **)(a1 + 48);
  if (v13)
    v13 = _Block_copy(v13);
  v27 = v13;
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 136);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 136));
  *(_QWORD *)buf = v14;
  *(_QWORD *)&buf[8] = v15;
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = 0;
  if (!v14)
  {
    v17 = v2 + 1072;
    v16[2] = 0;
    v16[3] = v15;
    if (!v15)
      goto LABEL_24;
    goto LABEL_23;
  }
  v17 = v2 + 1072;
  v16[2] = _Block_copy(v14);
  v16[3] = v15;
  if (v15)
LABEL_23:
    dispatch_retain(v15);
LABEL_24:
  v16[1] = v17;
  v18 = *(_QWORD *)(v2 + 1072);
  *v16 = v18;
  *(_QWORD *)(v18 + 8) = v16;
  *(_QWORD *)(v2 + 1072) = v16;
  ++*(_QWORD *)(v2 + 1088);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v27)
    _Block_release(v27);
LABEL_32:
  v19 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFB910]);
  *(_QWORD *)buf = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)buf = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (v20)
    v21 = 3;
  else
    v21 = 1;
  if (*(_DWORD *)(v2 + 1136))
    v22 = *(_DWORD *)(v2 + 1136);
  else
    v22 = v21;
  FSModuleICE::requestFSSync_sync((FSModuleICE *)v2, v22, v20);
  if ((v10 & 1) == 0)
  {
    v23 = xpc_null_create();
    v24 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)buf = v23;
    v25 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, uint8_t *))(v24 + 16))(v24, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v25);
  }
}

void sub_1BF630514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_7(uint64_t a1, int a2)
{
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = 3760250880;
  v4 = xpc_null_create();
  v5 = *(_QWORD *)(a1 + 32);
  object = v4;
  v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1BF630674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11FSModuleICEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11FSModuleICEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_14;
        v12[3] = &__block_descriptor_tmp_15_1;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  char v3;
  BOOL v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  unsigned int v12;
  xpc_object_t xdict;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 961))
  {
    v3 = BBUFSServerFlushInProgress();
    v4 = *(_BYTE *)(v2 + 964) != 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_11;
    }
  }
  if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_12;
  }
  v7 = xpc_null_create();
LABEL_11:
  xdict = v7;
LABEL_12:
  xpc_release(v6);
  v8 = xpc_BOOL_create(v3);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB438], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_BOOL_create(v4);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB440], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v12, &xdict);
  xpc_release(xdict);
}

void sub_1BF630960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_17(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v5;
  xpc_object_t value;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int v10;
  size_t v11;
  void **v12;
  void **v13;
  NSObject *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  void *v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void **v24;
  unsigned int v25;
  _QWORD v26[5];
  void *v27;
  _QWORD v28[5];
  void *aBlock;
  void *__p[3];
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  xpc_object_t buf[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8C8]);
  buf[0] = value;
  if (value)
    xpc_retain(value);
  else
    buf[0] = xpc_null_create();
  v31 = 0;
  v32 = 0;
  v33 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(buf[0]);
  v7 = (std::__shared_weak_count *)a1[6];
  if (!v7)
    goto LABEL_43;
  v8 = std::__shared_weak_count::lock(v7);
  v32 = v8;
  if (!v8)
    goto LABEL_43;
  v9 = v8;
  v31 = a1[5];
  if (!v31)
    goto LABEL_40;
  v10 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v11 = HIBYTE(__p[2]);
  else
    v11 = (size_t)__p[1];
  if (v11 == strlen((const char *)*MEMORY[0x1E0CFB390])
    && (SHIBYTE(__p[2]) >= 0 ? (v12 = __p) : (v12 = (void **)__p[0]),
        !memcmp(v12, (const void *)*MEMORY[0x1E0CFB390], v11)))
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1174405120;
    v28[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_18;
    v28[3] = &__block_descriptor_tmp_19_3;
    v28[4] = v5;
    v18 = (void *)*a3;
    if (*a3)
      v18 = _Block_copy(v18);
    aBlock = v18;
    ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v28);
    if (aBlock)
      _Block_release(aBlock);
  }
  else
  {
    if (v11 != strlen((const char *)*MEMORY[0x1E0CFC080])
      || (v10 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), memcmp(v13, (const void *)*MEMORY[0x1E0CFC080], v11)))
    {
      v14 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v24 = (void **)__p[0];
        if (v10 >= 0)
          v24 = __p;
        LODWORD(buf[0]) = 136315138;
        *(xpc_object_t *)((char *)buf + 4) = v24;
        _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "Command [%s] not supported", (uint8_t *)buf, 0xCu);
      }
      buf[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v15 = xpc_dictionary_create(0, 0, 0);
      v16 = v15;
      if (v15)
      {
        buf[0] = v15;
      }
      else
      {
        v16 = xpc_null_create();
        buf[0] = v16;
        if (!v16)
        {
          v17 = xpc_null_create();
          v16 = 0;
          goto LABEL_36;
        }
      }
      if (MEMORY[0x1C3B8CD78](v16) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v16);
        goto LABEL_37;
      }
      v17 = xpc_null_create();
LABEL_36:
      buf[0] = v17;
LABEL_37:
      xpc_release(v16);
      v20 = xpc_string_create("Command not supported");
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(buf[0], (const char *)*MEMORY[0x1E0CFB0D0], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      v25 = -534716414;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v25, buf);
      xpc_release(buf[0]);
      v9 = v32;
      if (v32)
        goto LABEL_40;
LABEL_43:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
      goto LABEL_44;
    }
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 1174405120;
    v26[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_20;
    v26[3] = &__block_descriptor_tmp_21_2;
    v26[4] = v5;
    v19 = (void *)*a3;
    if (*a3)
      v19 = _Block_copy(v19);
    v27 = v19;
    ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v26);
    if (v27)
      _Block_release(v27);
  }
LABEL_40:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (v23)
    goto LABEL_43;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(__p[2]) < 0)
LABEL_44:
    operator delete(__p[0]);
}

void sub_1BF630D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  xpc_object_t v24;
  uint64_t v25;
  xpc_object_t v26;
  std::string __dst;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  const void *v31;
  std::string v32;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 961))
  {
    if (!FSModuleICE::eraseRemoteFileSystem_sync((dispatch_object_t *)v2))
    {
      v18 = 3760250880;
LABEL_40:
      v24 = xpc_null_create();
      v25 = *(_QWORD *)(a1 + 40);
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v26 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v25 + 16))(v25, v18, &v32);
      xpc_release(v32.__r_.__value_.__l.__data_);
      xpc_release(v26);
      return;
    }
    v28 = 0xAAAAAAAAAAAAAAAALL;
    v29 = 0xAAAAAAAAAAAAAAAALL;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v3 = (uint64_t *)off_1ED70F338;
    if (!off_1ED70F338)
    {
      ABMServer::create_default_global(&v32);
      v4 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = 0uLL;
      v5 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
      off_1ED70F338 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      size = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
      if (v32.__r_.__value_.__l.__size_)
      {
        v9 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v3 = (uint64_t *)off_1ED70F338;
    }
    v28 = (unint64_t)v3;
    v29 = *(&off_1ED70F338 + 1);
    if (*(&off_1ED70F338 + 1))
    {
      v11 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v13 = (const void *)*MEMORY[0x1E0CFBAD0];
    v14 = strlen((const char *)*MEMORY[0x1E0CFBAD0]);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = v14;
    if (v14 >= 0x17)
    {
      v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v19 = v14 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v15;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
      p_dst = &__dst;
      if (!v14)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        v17 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          v32 = __dst;
          goto LABEL_29;
        }
LABEL_28:
        std::string::__init_copy_ctor_external(&v32, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_29:
        v30 = 0;
        v31 = 0;
        ABMServer::broadcast(v3, (uint64_t)&v32, &v31, &v30);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v32.__r_.__value_.__l.__data_);
          if ((v17 & 0x80000000) == 0)
          {
LABEL_31:
            v21 = (std::__shared_weak_count *)v29;
            if (!v29)
              goto LABEL_39;
            goto LABEL_35;
          }
        }
        else if ((v17 & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        v21 = (std::__shared_weak_count *)v29;
        if (!v29)
        {
LABEL_39:
          v18 = 0;
          goto LABEL_40;
        }
LABEL_35:
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_39;
      }
    }
    memmove(p_dst, v13, v15);
    p_dst->__r_.__value_.__s.__data_[v15] = 0;
    v17 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_28;
  }
}

void sub_1BF6310E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF631108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t FSModuleICE::eraseRemoteFileSystem_sync(dispatch_object_t *this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void **v12;
  void *__dst[3];
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  FSModuleICE::handleBasebandReset_sync(this);
  memset(__dst, 170, sizeof(__dst));
  v2 = (const char *)MEMORY[0x1C3B8A8F4]();
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    __dst[2] = (void *)(v7 | 0x8000000000000000);
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v8 = support::fs::removeDirContents((const char *)__dst, 0);
  v9 = this[11];
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = __dst;
      if (SHIBYTE(__dst[2]) < 0)
        v10 = (void **)__dst[0];
      *(_DWORD *)buf = 136315138;
      v15 = v10;
      _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I removed contents of %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0)
        goto LABEL_17;
      return v8;
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v12 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      v12 = (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v15 = v12;
    _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "failed removing %s", buf, 0xCu);
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_17;
    return v8;
  }
  if (SHIBYTE(__dst[2]) < 0)
LABEL_17:
    operator delete(__dst[0]);
  return v8;
}

void sub_1BF6313AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_20(uint64_t a1)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  uint8_t v6[8];
  xpc_object_t object;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_error_impl(&dword_1BF566000, v2, OS_LOG_TYPE_ERROR, "Restore carrier defaults command is not supported on this device", v6, 2u);
  }
  v3 = xpc_null_create();
  v4 = *(_QWORD *)(a1 + 40);
  object = v3;
  v5 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v4 + 16))(v4, 0, &object);
  xpc_release(object);
  xpc_release(v5);
}

void sub_1BF63147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_24(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        *(_DWORD *)(v5 + 1096) = a2;
        v8 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v13 = a2;
          _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I ice::Client provided ARI context id: 0x%08x", buf, 8u);
          v8 = *(NSObject **)(v5 + 88);
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Initializing BBU FS Server...", buf, 2u);
        }
        if ((FSModuleICE::initBBUServer_sync((FSModuleICE *)v5) & 1) == 0)
        {
          v9 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "failed FS Sync setup", buf, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF631630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FSModuleICE::initBBUServer_sync(FSModuleICE *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int shouldForceSyncFileSystem;
  char v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  int v13;
  NSObject *v14;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  _BYTE __dst[368];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1C3B8A8F4]();
  if (v2)
  {
    v3 = (void *)v2;
    if ((BBUFSServerParametersInit() & 1) != 0)
    {
      if ((FSModuleICE::initKTLOptions_sync(this) & 1) != 0)
      {
        memcpy(__dst, (char *)this + 560, sizeof(__dst));
        v4 = BBUFSServerCreate();
        if ((v4 & 1) != 0)
        {
          shouldForceSyncFileSystem = capabilities::abs::shouldForceSyncFileSystem((capabilities::abs *)v4);
          if (BBUFSServerSetConfig())
            v6 = BBUFSServerSetConfig();
          else
            v6 = 0;
          v11 = *((_QWORD *)this + 11);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = "false";
            v13 = *((_DWORD *)this + 274);
            if (shouldForceSyncFileSystem)
              v12 = "true";
            v16[0] = 67109378;
            v16[1] = v13;
            v17 = 2080;
            v18 = v12;
            _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I BBUFSConfig: ARI context: 0x%x ForcedSync: %s", (uint8_t *)v16, 0x12u);
          }
          if ((v6 & 1) != 0)
          {
            v8 = 1;
            *((_BYTE *)this + 960) = 1;
            v14 = *((_QWORD *)this + 11);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v16[0]) = 0;
              _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I BBU+KTL are ready for FS Sync", (uint8_t *)v16, 2u);
            }
            goto LABEL_28;
          }
          v9 = *((_QWORD *)this + 11);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v16[0]) = 0;
            v10 = "Failed to set BBUFS server config";
            goto LABEL_26;
          }
LABEL_27:
          v8 = 0;
LABEL_28:
          free(v3);
          return v8;
        }
        v9 = *((_QWORD *)this + 11);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        LOWORD(v16[0]) = 0;
        v10 = "failed creating file server";
      }
      else
      {
        v9 = *((_QWORD *)this + 11);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        LOWORD(v16[0]) = 0;
        v10 = "failed to create KTL options";
      }
    }
    else
    {
      v9 = *((_QWORD *)this + 11);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      LOWORD(v16[0]) = 0;
      v10 = "failed preparing fs sync parameters";
    }
LABEL_26:
    _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)v16, 2u);
    goto LABEL_27;
  }
  v7 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v16[0]) = 0;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "failed copying default destination", (uint8_t *)v16, 2u);
  }
  return 0;
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_27(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  const void *v19;
  size_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v30;
  uint8_t buf[8];
  __int128 v32;
  std::__shared_weak_count *v34;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v34 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
    goto LABEL_43;
  v8 = *(NSObject **)(v5 + 88);
  if (!*(_BYTE *)(v5 + 960))
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Skipping baseband indication request for FS sync as baseband is not ready", buf, 2u);
    }
    goto LABEL_43;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Triggering FS Sync due to baseband indication", buf, 2u);
  }
  FSModuleICE::requestFSSync_sync((FSModuleICE *)v5, 2u, 0);
  if (!a2)
  {
LABEL_43:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v9 = *(NSObject **)(v5 + 88);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Peforming soft reset due to baseband request for reset after FS sync", buf, 2u);
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
      v11 = v10;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v10 = 0;
  }
  xpc_release(v10);
  *(_QWORD *)buf = operator new(0x30uLL);
  v32 = xmmword_1BF73FC80;
  strcpy(*(char **)buf, "Baseband request for reset after FS sync");
  v12 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB538], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFF8]);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB8D0], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v32 >= 0)
    v16 = (const char *)buf;
  else
    v16 = *(const char **)buf;
  v17 = xpc_string_create(v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB788], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = (const void *)*MEMORY[0x1E0CFB4E0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    __dst[1] = v21;
    v30 = v24 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_34;
  }
  HIBYTE(v30) = v20;
  v22 = __dst;
  if (v20)
LABEL_34:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  object = v11;
  if (v11)
    xpc_retain(v11);
  else
    object = xpc_null_create();
  v27 = 0;
  Service::runCommand(v5, (uint64_t)__dst, &object, &v27);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v32) < 0)
    operator delete(*(void **)buf);
  xpc_release(v11);
  v7 = v34;
  if (v34)
    goto LABEL_43;
}

void sub_1BF631D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  xpc_release(v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        *(_BYTE *)(v3 + 963) = 1;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  FSModuleICE *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (FSModuleICE *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        *((_BYTE *)v3 + 963) = 0;
        FSModuleICE::runDeferred_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF631F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void FSModuleICE::runDeferred_sync(FSModuleICE *this)
{
  uint64_t v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t v13[16];

  if (!*((_BYTE *)this + 962) && !*((_BYTE *)this + 963))
  {
    v2 = *((_QWORD *)this + 127);
    if (v2)
    {
      v3 = (void **)*((_QWORD *)this + 123);
      v4 = (void **)*((_QWORD *)this + 124);
      if (v4 == v3)
      {
        v4 = (void **)*((_QWORD *)this + 123);
      }
      else
      {
        v5 = *((_QWORD *)this + 126);
        v6 = &v3[v5 >> 9];
        v7 = (uint64_t)*v6 + 8 * (v5 & 0x1FF);
        v8 = *(uint64_t *)((char *)v3 + (((v5 + v2) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v5 + v2) & 0x1FF);
        if (v7 != v8)
        {
          do
          {
            v9 = *((_QWORD *)this + 11);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v13 = 0;
              _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Invoking deferred sync", v13, 2u);
            }
            FSModuleICE::requestFSSync_sync(this, *(_DWORD *)v7, *(unsigned __int8 *)(v7 + 4));
            v7 += 8;
            if (v7 - (_QWORD)*v6 == 4096)
            {
              v10 = (uint64_t)v6[1];
              ++v6;
              v7 = v10;
            }
          }
          while (v7 != v8);
          v3 = (void **)*((_QWORD *)this + 123);
          v4 = (void **)*((_QWORD *)this + 124);
        }
      }
      *((_QWORD *)this + 127) = 0;
      v11 = (char *)v4 - (char *)v3;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v3);
          v3 = (void **)(*((_QWORD *)this + 123) + 8);
          *((_QWORD *)this + 123) = v3;
          v11 = *((_QWORD *)this + 124) - (_QWORD)v3;
        }
        while (v11 > 0x10);
      }
      if (v11 >> 3 == 1)
      {
        v12 = 256;
      }
      else
      {
        if (v11 >> 3 != 2)
          return;
        v12 = 512;
      }
      *((_QWORD *)this + 126) = v12;
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void FSModuleICE::finishInitialization_sync(FSModuleICE *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  NSObject *v41;
  const void *v42;
  size_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  unint64_t v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  _QWORD v55[6];
  std::__shared_weak_count *v56;
  void *v57;
  dispatch_object_t v58;
  void *v59[2];
  unint64_t v60;
  _QWORD v61[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v66;
  _QWORD aBlock[6];
  std::__shared_weak_count *v68;
  const void *v69;
  dispatch_object_t v70;
  void *v71[2];
  unint64_t v72;
  const void *v73;
  void *__dst[2];
  unint64_t v75;
  __int128 v76;

  if (!*((_BYTE *)this + 961))
    return;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(FSModuleICE *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v75 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v75) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_18;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_18:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v73 = 0;
  AppleBasebandManager::create();
  v16 = v76;
  v76 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 130);
  *(_OWORD *)((char *)this + 1032) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (!*((_QWORD *)&v76 + 1))
    goto LABEL_27;
  v21 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_27:
    v23 = v73;
    if (!v73)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v73;
  if (v73)
LABEL_28:
    CFRelease(v23);
LABEL_29:
  if (SHIBYTE(v75) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v71[1] = v26;
    v72 = v29 | 0x8000000000000000;
    v71[0] = v27;
  }
  else
  {
    HIBYTE(v72) = v25;
    v27 = v71;
    if (!v25)
      goto LABEL_39;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_39:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_38_0;
  aBlock[4] = this;
  aBlock[5] = v3;
  v68 = v5;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(aBlock);
  v32 = *((_QWORD *)this + 17);
  if (v32)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v69 = v31;
  v70 = v32;
  AppleBasebandManager::setEventHandler();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
  v33 = (const void *)*MEMORY[0x1E0CFBBB0];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __p[1] = v35;
    v66 = v38 | 0x8000000000000000;
    __p[0] = v36;
  }
  else
  {
    HIBYTE(v66) = v34;
    v36 = __p;
    if (!v34)
      goto LABEL_57;
  }
  memmove(v36, v33, (size_t)v35);
LABEL_57:
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v61[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_39;
  v61[3] = &__block_descriptor_tmp_40_0;
  v61[4] = this;
  v61[5] = v3;
  v62 = v5;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  v40 = _Block_copy(v61);
  v41 = *((_QWORD *)this + 17);
  if (v41)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v63 = v40;
  object = v41;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v63)
    _Block_release(v63);
  if (SHIBYTE(v66) < 0)
    operator delete(__p[0]);
  v42 = (const void *)*MEMORY[0x1E0CFB9A8];
  v43 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    v59[1] = v44;
    v60 = v47 | 0x8000000000000000;
    v59[0] = v45;
  }
  else
  {
    HIBYTE(v60) = v43;
    v45 = v59;
    if (!v43)
      goto LABEL_75;
  }
  memmove(v45, v42, (size_t)v44);
LABEL_75:
  *((_BYTE *)v44 + (_QWORD)v45) = 0;
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 1174405120;
  v55[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_41;
  v55[3] = &__block_descriptor_tmp_42;
  v55[4] = this;
  v55[5] = v3;
  v56 = v5;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v49 = _Block_copy(v55);
  v50 = *((_QWORD *)this + 17);
  if (v50)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v57 = v49;
  v58 = v50;
  AppleBasebandManager::setEventHandler();
  if (v58)
    dispatch_release(v58);
  if (v57)
    _Block_release(v57);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if (!*((_QWORD *)this + 140))
      goto LABEL_93;
LABEL_87:
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 1174405120;
    v52[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_43;
    v52[3] = &__block_descriptor_tmp_47_0;
    v52[4] = this;
    v52[5] = v3;
    v53 = v5;
    do
      v51 = __ldxr(p_shared_weak_owners);
    while (__stxr(v51 + 1, p_shared_weak_owners));
    v54 = _Block_copy(v52);
    HSFilerRT::registerBasebandResetDelegate();
    if (v54)
      _Block_release(v54);
    if (v53)
      std::__shared_weak_count::__release_weak(v53);
    goto LABEL_93;
  }
  operator delete(v59[0]);
  if (*((_QWORD *)this + 140))
    goto LABEL_87;
LABEL_93:
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 129));
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF632798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  std::__shared_weak_count *v53;

  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (a38)
    std::__shared_weak_count::__release_weak(a38);
  if (a53)
  {
    std::__shared_weak_count::__release_weak(a53);
    std::__shared_weak_count::__release_weak(v53);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  int v9;
  size_t v10;
  const char **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  HSFilerRT *v21;
  char v22;
  void *v23;
  void **v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v27;
  void *v28[2];
  uint64_t v29;
  void *v30[3];
  void *__p[2];
  void *v32;
  _QWORD v33[2];
  unint64_t v34;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v36 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v34 = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (const void *)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v33[0] = 0xAAAAAAAAAAAAAAAALL;
          v33[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v28, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8B878](v28);
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          v32 = v30[2];
          *(_OWORD *)__p = *(_OWORD *)v30;
          v9 = SHIBYTE(v30[2]);
          if (SHIBYTE(v30[2]) >= 0)
            v10 = HIBYTE(v30[2]);
          else
            v10 = (size_t)v30[1];
          v11 = (const char **)MEMORY[0x1E0CFB980];
          if (v10 == strlen((const char *)*MEMORY[0x1E0CFB7F0])
            && (SHIBYTE(v30[2]) >= 0 ? (v12 = __p) : (v12 = (void **)__p[0]),
                !memcmp(v12, (const void *)*MEMORY[0x1E0CFB7F0], v10)))
          {
            *(_QWORD *)(v5 + 1024) = 0;
            FSModuleICE::restartSyncTimer_sync((FSModuleICE *)v5);
          }
          else if (v10 == strlen(*v11) && (v9 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), !memcmp(v13, *v11, v10)))
          {
            v17 = *(_QWORD *)(v5 + 1104);
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
          }
          else if (v10 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v9 >= 0 ? (v14 = __p) : (v14 = (void **)__p[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E0CFBB68], v10)))
          {
            memset(v30, 170, sizeof(v30));
            v18 = (const char *)*MEMORY[0x1E0CFB538];
            v28[0] = 0;
            v28[1] = 0;
            v29 = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v18);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C3B8B878](&v37);
            if (SHIBYTE(v29) < 0)
              operator delete(v28[0]);
            if (SHIBYTE(v30[2]) >= 0)
              v19 = HIBYTE(v30[2]);
            else
              v19 = (size_t)v30[1];
            if (v19 == strlen((const char *)*MEMORY[0x1E0CFB590])
              && (SHIBYTE(v30[2]) >= 0 ? (v20 = v30) : (v20 = (void **)v30[0]),
                  !memcmp(v20, (const void *)*MEMORY[0x1E0CFB590], v19)))
            {
              FSModuleICE::handleBasebandReset_sync((dispatch_object_t *)v5);
              v27 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v28[0]) = 0;
                _os_log_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEFAULT, "#I Hard Will-Reset", (uint8_t *)v28, 2u);
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v30, (char *)*MEMORY[0x1E0CFB598]))
            {
              *(_BYTE *)(v5 + 964) = 1;
              *(_QWORD *)(v5 + 1144) = TelephonyUtilGetSystemTime();
              *(_DWORD *)(v5 + 1136) = 5;
              *(_BYTE *)(v5 + 1152) = 1;
            }
            if (SHIBYTE(v30[2]) < 0)
              operator delete(v30[0]);
          }
          else if (v10 == strlen((const char *)*MEMORY[0x1E0CFBA60])
                 && (v9 >= 0 ? (v15 = __p) : (v15 = (void **)__p[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E0CFBA60], v10))
                 || v10 == strlen((const char *)*MEMORY[0x1E0CFBD30])
                 && (v9 >= 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E0CFBD30], v10)))
          {
            FSModuleICE::handleBasebandReset_sync((dispatch_object_t *)v5);
          }
          v21 = *(HSFilerRT **)(v5 + 1120);
          v22 = HIBYTE(v32);
          if (v21)
          {
            v23 = SHIBYTE(v32) >= 0 ? (void *)HIBYTE(v32) : __p[1];
            if (v23 == (void *)strlen(*v11))
            {
              v24 = SHIBYTE(v32) >= 0 ? __p : (void **)__p[0];
              if (!memcmp(v24, *v11, (size_t)v23))
              {
                HSFilerRT::basebandReadyEventHandler(v21);
                v22 = HIBYTE(v32);
              }
            }
          }
          if (v22 < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B8B8B4](v33);
          v8 = (const void *)v34;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF632D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  MEMORY[0x1C3B8B8B4](&a28);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 80));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 72);
  _Unwind_Resume(a1);
}

void sub_1BF632DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 80));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void sub_1BF632E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void FSModuleICE::handleBasebandBooted_sync(FSModuleICE *this)
{
  *((_QWORD *)this + 128) = 0;
  FSModuleICE::restartSyncTimer_sync(this);
}

void FSModuleICE::handleBasebandReset_sync(dispatch_object_t *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  FSModuleICE::execPendingResponses_sync((FSModuleICE *)this, 0);
  v2 = this[121];
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(this[121]);
    this[121] = 0;
  }
  if (*((_BYTE *)this + 960))
  {
    *((_BYTE *)this + 964) = 0;
    *((_BYTE *)this + 960) = 0;
    v3 = this[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I RFS Not Ready", buf, 2u);
    }
    if (BBUFSServerSetConfig())
    {
      BBUFSServerStop();
    }
    else
    {
      v4 = this[11];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v5 = 0;
        _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "failed to set shutdown flag with BBU for baseband reset", v5, 2u);
      }
    }
    BBUFSServerRelease();
  }
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_39(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  HSFilerRT *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint8_t v10[16];
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v12 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        *(_BYTE *)(v3 + 960) = 0;
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Reset Detected", v10, 2u);
        }
        v7 = *(HSFilerRT **)(v3 + 1120);
        if (v7)
          HSFilerRT::basebandResetEventHandler(v7);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF633024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_41(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  HSFilerRT *v7;
  int v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_11;
      v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_DWORD *)(v3 + 1024);
        *(_DWORD *)buf = 67109120;
        v13 = v8;
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I syncs requested: %u", buf, 8u);
        v6 = *(NSObject **)(v3 + 88);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
LABEL_6:
          v7 = *(HSFilerRT **)(v3 + 1120);
          if (!v7)
          {
LABEL_11:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
LABEL_10:
          HSFilerRT::dumpState(v7);
          goto LABEL_11;
        }
      }
      else if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        goto LABEL_6;
      }
      v9 = *(_DWORD *)(v3 + 1028);
      *(_DWORD *)buf = 67109120;
      v13 = v9;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I syncs completed: %u", buf, 8u);
      v7 = *(HSFilerRT **)(v3 + 1120);
      if (!v7)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
}

void sub_1BF6331A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_43(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  std::string __p;
  std::__shared_weak_count *v13;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v13 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 1174405120;
        v10[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_2;
        v10[3] = &__block_descriptor_tmp_45_0;
        v10[4] = v5;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF6332CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  void **v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const void *v21;
  size_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  const void *v28;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v31;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v27 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v27 = (_QWORD *)*v27;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v27;
    _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "HSFiler requesting modem hard reset due to: %s", (uint8_t *)__p, 0xCu);
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB538], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *(char *)(a1 + 63);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 63);
  else
    v11 = *(_QWORD *)(a1 + 48);
  v12 = v11 + 10;
  memset(__p, 170, 24);
  if (v11 + 10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v16 = (char *)operator new(v14 + 1);
    __p[1] = (void *)(v11 + 10);
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v16;
    *((_WORD *)v16 + 4) = 8237;
    *(_QWORD *)v16 = *(_QWORD *)"HSFiler - ";
    v13 = v16 + 10;
  }
  else
  {
    __p[1] = (void *)8237;
    __p[2] = 0;
    HIBYTE(__p[2]) = v11 + 10;
    __p[0] = *(void **)"HSFiler - ";
    v13 = (char *)&__p[1] + 2;
    if (!v11)
      goto LABEL_26;
  }
  if (v10 >= 0)
    v17 = (const void *)(a1 + 40);
  else
    v17 = *(const void **)(a1 + 40);
  memmove(v13, v17, v11);
LABEL_26:
  v13[v11] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  v19 = xpc_string_create((const char *)v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB788], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (const void *)*MEMORY[0x1E0CFB4E0];
  v22 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = (void *)v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = (void **)operator new(v25 + 1);
    __dst[1] = v23;
    v31 = v26 | 0x8000000000000000;
    __dst[0] = v24;
LABEL_39:
    memmove(v24, v21, (size_t)v23);
    *((_BYTE *)v23 + (_QWORD)v24) = 0;
    object = v5;
    if (v5)
      goto LABEL_35;
    goto LABEL_40;
  }
  HIBYTE(v31) = v22;
  v24 = __dst;
  if (v22)
    goto LABEL_39;
  LOBYTE(__dst[0]) = 0;
  object = v5;
  if (v5)
  {
LABEL_35:
    xpc_retain(v5);
    goto LABEL_41;
  }
LABEL_40:
  object = xpc_null_create();
LABEL_41:
  v28 = 0;
  Service::runCommand(v2, (uint64_t)__dst, &object, &v28);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_43;
LABEL_45:
    operator delete(__p[0]);
    goto LABEL_43;
  }
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_45;
LABEL_43:
  xpc_release(v5);
}

void sub_1BF6336F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void FSModuleICE::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::sleep(dispatch::group_session)::$_0>(FSModuleICE::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModuleICE::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::wake(dispatch::group_session)::$_0>(FSModuleICE::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void FSModuleICE::restartSyncTimer_sync(FSModuleICE *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_time_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 121);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 121));
    *((_QWORD *)this + 121) = 0;
  }
  v3 = capabilities::abs::fileSystemFlushInterval((capabilities::abs *)v2);
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v21 = v3;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Automatic sync interval set to %llu seconds", buf, 0xCu);
  }
  if (v3)
  {
    v5 = 1000000000 * v3;
    v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 2uLL, 0, *((dispatch_queue_t *)this + 17));
    *((_QWORD *)this + 121) = v6;
    v7 = dispatch_time(0x8000000000000000, v5);
    dispatch_source_set_timer(v6, v7, v5, 0x45D964B800uLL);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v8 || (v9 = *((_QWORD *)this + 15), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = *((_QWORD *)this + 121);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN11FSModuleICE21restartSyncTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_48_0;
    handler[4] = this;
    handler[5] = v9;
    v19 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v16, handler);
    dispatch_activate(*((dispatch_object_t *)this + 121));
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void FSModuleICE::cancelSyncTimer_sync(FSModuleICE *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 121);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 121));
    *((_QWORD *)this + 121) = 0;
  }
}

void FSModuleICE::submitMetric_sync(FSModuleICE *this, BOOL a2)
{
  int v2;
  BOOL v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t SystemTime;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  size_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v43;

  v2 = *((_DWORD *)this + 284);
  if (!v2)
    return;
  v5 = (v2 != 5 || *((_BYTE *)this + 964) == 0) && a2;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v9 = xpc_int64_create(*((unsigned int *)this + 284));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3D8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  SystemTime = TelephonyUtilGetSystemTime();
  v12 = xpc_uint64_create(SystemTime - *((_QWORD *)this + 143));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB630], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_BOOL_create(v5);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB500], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_BOOL_create(*((_BYTE *)this + 1152) == 0);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFBBB8], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v18) == v7)
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB3E8], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_string_create((const char *)*MEMORY[0x1E0CFB328]);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB278], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_string_create((const char *)*MEMORY[0x1E0CFB508]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB3F0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (v8)
  {
    xpc_retain(v8);
    v26 = v8;
  }
  else
  {
    v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB9D8], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v28) == v7)
    {
      xpc_retain(v28);
      v29 = v28;
    }
    else
    {
      v29 = xpc_null_create();
    }
  }
  else
  {
    v29 = xpc_null_create();
    v28 = 0;
  }
  xpc_release(v28);
  v30 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E0CFB020], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (v19)
  {
    xpc_retain(v19);
    v32 = v19;
  }
  else
  {
    v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E0CFB018], v32);
  v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  v34 = (const void *)*MEMORY[0x1E0CFB5E0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = (void **)operator new(v38 + 1);
    __dst[1] = v36;
    v43 = v39 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_56:
    memmove(v37, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v37) = 0;
    object = v29;
    if (v29)
      goto LABEL_52;
LABEL_57:
    object = xpc_null_create();
    goto LABEL_58;
  }
  HIBYTE(v43) = v35;
  v37 = __dst;
  if (v35)
    goto LABEL_56;
  LOBYTE(__dst[0]) = 0;
  object = v29;
  if (!v29)
    goto LABEL_57;
LABEL_52:
  xpc_retain(v29);
LABEL_58:
  v40 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v40);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v43) < 0)
    operator delete(__dst[0]);
  *((_DWORD *)this + 284) = 0;
  xpc_release(v29);
  xpc_release(v19);
  xpc_release(v8);
}

void sub_1BF634208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void FSModuleICE::resetBaseband_sync(FSModuleICE *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const void *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v22;

  FSModuleICE::execPendingResponses_sync(a1, 0);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB538], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_string_create((const char *)*MEMORY[0x1E0CFC098]);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0)
    v10 = (const char *)a2;
  else
    v10 = *(const char **)a2;
  v11 = xpc_string_create(v10);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB788], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = (const void *)*MEMORY[0x1E0CFB4E0];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    v22 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_24:
    memmove(v16, v13, (size_t)v15);
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    object = v5;
    if (v5)
      goto LABEL_20;
    goto LABEL_25;
  }
  HIBYTE(v22) = v14;
  v16 = __dst;
  if (v14)
    goto LABEL_24;
  LOBYTE(__dst[0]) = 0;
  object = v5;
  if (v5)
  {
LABEL_20:
    xpc_retain(v5);
    goto LABEL_26;
  }
LABEL_25:
  object = xpc_null_create();
LABEL_26:
  v19 = 0;
  Service::runCommand((uint64_t)a1, (uint64_t)__dst, &object, &v19);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  xpc_release(v5);
}

void sub_1BF6345FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t FSModuleICE::initKTLOptions_sync(FSModuleICE *this)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 82) = (char *)this + 928;
  v2 = capabilities::abs::fileSystemFlushTimeout(this);
  v3 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = v2;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I NVMTimeout = %lld sec", (uint8_t *)&v6, 0xCu);
  }
  v4 = KTLInitOptions();
  result = 0;
  if (v4)
    return KTLOpenChannel();
  return result;
}

uint64_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF6349A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF6349BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<FSModuleICE>::shared_ptr[abi:ne180100]<FSModuleICE,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918780;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF634AD8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1}::operator() const(FSModuleICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF634AF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1}::operator() const(FSModuleICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1}::operator() const(FSModuleICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7918740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11FSModuleICEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11FSModuleICEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11FSModuleICEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::initialize(dispatch::group_session)::$_0>(FSModuleICE::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  FSModuleICE **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(FSModuleICE ***)a1;
  FSModuleICE::finishInitialization_sync(**(FSModuleICE ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF634E4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::sleep(dispatch::group_session)::$_0>(FSModuleICE::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  *(_BYTE *)(v4 + 962) = 1;
  if (v3)
  {
    dispatch_group_leave(v3);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::wake(dispatch::group_session)::$_0>(FSModuleICE::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(FSModuleICE ***a1)
{
  FSModuleICE **v2;
  FSModuleICE *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v3 = **a1;
  *((_BYTE *)v3 + 962) = 0;
  FSModuleICE::runDeferred_sync(v3);
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void sub_1BF634FD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = v2;
  v5 = (_QWORD *)v3;
  v6 = *(NSObject **)(v3 + 8);
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = v5[1];
    if (v7)
      dispatch_release(v7);
  }
  operator delete(v5);
  v8 = (std::__shared_weak_count *)v1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  _QWORD v10[5];
  int v11;
  char v12;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        ++*(_DWORD *)(v3 + 1024);
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZZN11FSModuleICE18requestFSSync_syncEjbENK3__0clEv_block_invoke;
        v10[3] = &__block_descriptor_tmp_60_0;
        v10[4] = v3;
        v11 = *((_DWORD *)__p + 9);
        v12 = *((_BYTE *)__p + 32);
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v10);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v8 = __p[3];
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)__p[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(__p);
}

void ___ZZN11FSModuleICE18requestFSSync_syncEjbENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 1136) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 1144) = TelephonyUtilGetSystemTime();
  FSModuleICE::singleFlushOperation_sync((FSModuleICE *)v2, *(unsigned __int8 *)(a1 + 44));
}

uint64_t __cxx_global_var_init_53_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_54_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_55_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  unsigned __int8 v12;
  NSObject *v13;
  void **v14;
  xpc_object_t object;
  void *__p[4];
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)__p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v13 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v13 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
  }
  v14 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v14 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v18 = v14;
  _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
LABEL_21:
  object = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    object = xpc_null_create();
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF6354D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1;
  xpc_object_t v2;

  v1 = *(xpc_object_t *)(a1 + 32);
  if (v1)
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  else
    v1 = xpc_null_create();
  v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1BF635568(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void BluetoothManager::create(BluetoothManager *this@<X0>, BluetoothManager **a2@<X8>)
{
  BluetoothManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];

  v5 = (BluetoothManager *)operator new(0x40uLL);
  BluetoothManager::BluetoothManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918928;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v21 = v6;
  *(_QWORD *)buf = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (*(_QWORD *)buf)
    BluetoothManager::~BluetoothManager(*(BluetoothManager **)buf);
  if (v5 && BluetoothManager::init(v5))
  {
    *a2 = v5;
    a2[1] = (BluetoothManager *)v6;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v17 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
LABEL_29:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    v18 = v21;
    if (!v21)
      return;
    goto LABEL_24;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v17 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_29;
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  v18 = v21;
  if (!v21)
    return;
LABEL_24:
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1BF635858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF63586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100]((BluetoothManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF635880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL BluetoothManager::init(BluetoothManager *this)
{
  id v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  *((_BYTE *)this + 24) = 1;
  v2 = objc_alloc_init(MEMORY[0x1E0C97740]);
  *((_QWORD *)this + 4) = v2;
  v4 = *((_QWORD *)this + 1);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = (id)*((_QWORD *)this + 4);
    if (v7)
    {
LABEL_5:
      v8 = MEMORY[0x1E0C809B0];
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3321888768;
      v19[2] = ___ZN16BluetoothManager4initEv_block_invoke;
      v19[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e5_v8__0l;
      v19[4] = this;
      v19[5] = v4;
      v20 = v3;
      v9 = v7;
      if (v3)
      {
        v10 = (unint64_t *)&v3->__shared_weak_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v9 = (void *)*((_QWORD *)this + 4);
      }
      objc_msgSend(v9, "setBluetoothStateChangedHandler:", v19);
      v12 = (void *)*((_QWORD *)this + 4);
      v17[0] = v8;
      v17[1] = 3321888768;
      v17[2] = ___ZN16BluetoothManager4initEv_block_invoke_3;
      v17[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e17_v16__0__NSError_8l;
      v17[4] = this;
      v17[5] = v4;
      v18 = v3;
      if (v3)
      {
        v13 = (unint64_t *)&v3->__shared_weak_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      objc_msgSend(v12, "activateWithCompletion:", v17);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v20)
      {
        std::__shared_weak_count::__release_weak(v20);
        if (!v3)
          return v7 != 0;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else
  {
    v7 = v2;
    if (v2)
      goto LABEL_5;
  }
  v15 = *(NSObject **)this;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Failed to create BluetoothManager interface", buf, 2u);
    if (!v3)
      return v7 != 0;
    goto LABEL_20;
  }
LABEL_19:
  if (v3)
LABEL_20:
    std::__shared_weak_count::__release_weak(v3);
  return v7 != 0;
}

void sub_1BF635A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v24;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v24 = a22;
    if (!a22)
    {
LABEL_3:
      if (!v22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v24);
  if (!v22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::BluetoothManager(BluetoothManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "BluetoothManager", 0x10uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1BF635C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::~BluetoothManager(BluetoothManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 6) = v2;
  objc_msgSend(*((id *)this + 4), "invalidate");
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = (void *)*((_QWORD *)this + 5);
    if (v7 != v6)
    {
      do
      {
        v9 = *(NSObject **)(v7 - 8);
        if (v9)
          dispatch_release(v9);
        v10 = *(const void **)(v7 - 16);
        if (v10)
          _Block_release(v10);
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v6;
    operator delete(v8);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x1C3B8B74CLL);
}

void ___ZN16BluetoothManager4initEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  os_log_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (os_log_t *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v10 = 0;
          _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D BluetoothManager Power Change Event", v10, 2u);
        }
        BluetoothManager::notifyClients((id *)v3);
      }
    }
  }
}

void BluetoothManager::notifyClients(id *this)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  char *v6;
  void *v7;
  NSObject *v8;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(this[4], "bluetoothState");
  *((_BYTE *)this + 24) = v2 == 5;
  v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "Off";
    if (v2 == 5)
      v4 = "On";
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying BT Power: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = (char *)this[5];
  v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (*(_QWORD *)v5)
    {
      v7 = _Block_copy(*(const void **)v5);
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
        goto LABEL_10;
LABEL_11:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(v8, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v5 += 16;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    v8 = *((_QWORD *)v5 + 1);
    if (!v8)
      goto LABEL_11;
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1BF636018(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN16BluetoothManager4initEv_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (a2)
      {
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to activate BT Controller", v12, 2u);
        }
      }
      else
      {
        (*(void (**)(void))(objc_msgSend(*(id *)(v5 + 32), "bluetoothStateChangedHandler") + 16))();
      }
    }
  }
}

uint64_t BluetoothManager::getBTState(BluetoothManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

_QWORD *BluetoothManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

BluetoothManager **std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100](BluetoothManager **a1)
{
  BluetoothManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    BluetoothManager::~BluetoothManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

BluetoothManager *std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__on_zero_shared(uint64_t a1)
{
  BluetoothManager *result;

  result = *(BluetoothManager **)(a1 + 24);
  if (result)
    BluetoothManager::~BluetoothManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73FF3FLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73FF3FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73FF3FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73FF3FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void AnalyticsHelper::create(uint64_t *a1@<X8>)
{
  AnalyticsHelper *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
}

void sub_1BF636354(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF636368(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  dispatch_object_t object[5];

  *(_QWORD *)this = off_1E7918978;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "stats.analytics");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_8;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, "stats.analytics", QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  *(_QWORD *)this = off_1E7918B40;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E7918978;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
}

void sub_1BF636544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF636568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7918978;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7918978;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)off_1E7918978;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = this[12];
  if (v2)
    dispatch_release(v2);
  v3 = this[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)this[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  char *v30;
  void *__dst[3];

  *(_QWORD *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = (_QWORD *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  v30 = (char *)this + 112;
  if (v5 != (_QWORD *)((char *)this + 112))
  {
    while (1)
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0)
        v7 = *(const char **)v7;
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      v10 = (_QWORD *)v5[7];
      if (v10 != v5 + 8)
        break;
LABEL_7:
      v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)v5[2];
          v29 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v29);
      }
      v5 = v12;
      if (v12 == v30)
        return;
    }
    while (1)
    {
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0)
        v14 = *(const char **)v14;
      v15 = strlen(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      v18 = (char *)MEMORY[0x1C3B8CCDC](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v20 = (_BYTE *)v19;
      if (v19 >= 0x17)
        break;
      HIBYTE(__dst[2]) = v19;
      v21 = __dst;
      if (v19)
        goto LABEL_20;
LABEL_21:
      v20[(_QWORD)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0)
        v24 = (const char *)__dst;
      else
        v24 = (const char *)__dst[0];
      v25 = strlen(v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        v27 = (_QWORD *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        v27 = (_QWORD *)v10[1];
        if (v27)
          goto LABEL_28;
      }
      do
      {
        v28 = (_QWORD *)v10[2];
        v29 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v29);
LABEL_10:
      v10 = v28;
      if (v28 == v5 + 8)
        goto LABEL_7;
    }
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_1BF6369B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF6369CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF6369E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF6369F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void sub_1BF636A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const char *v5;
  xpc_object_t v6;
  const char *v7;
  std::string::size_type size;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  xpc_object_t v38;
  int v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  char *v43;
  char *v44;
  int v45;
  const void *v46;
  unint64_t v47;
  size_t v48;
  int v49;
  int v50;
  const void *v51;
  unint64_t v52;
  size_t v53;
  int v54;
  xpc_object_t v55;
  const char *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  size_t v60;
  const void *v61;
  size_t v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  size_t v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  size_t v74;
  const void *v75;
  xpc_object_t v76;
  xpc_object_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  int v81;
  const void *v82;
  unint64_t v83;
  size_t v84;
  int v85;
  int v86;
  const void *v87;
  unint64_t v88;
  size_t v89;
  int v90;
  xpc_object_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  xpc_object_t *v96;
  xpc_object_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _OWORD *v100;
  xpc_object_t v101;
  std::string::size_type v102;
  NSObject *v103;
  std::string *v104;
  const void **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  std::string *v113;
  std::string::size_type v114;
  uint64_t v115;
  int v116;
  const void *v117;
  std::string::size_type v118;
  size_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  const void *v123;
  size_t v124;
  size_t v125;
  int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  const void *v137;
  size_t v138;
  char v139;
  std::string *v140;
  std::string::size_type v141;
  size_t v142;
  int v143;
  size_t v144;
  size_t v145;
  const void *v146;
  size_t v147;
  size_t v148;
  int v149;
  int v150;
  uint64_t *v151;
  uint64_t *v152;
  std::string *v153;
  __int128 v154;
  uint64_t *v155;
  uint64_t *v156;
  NSObject *v157;
  int64_t v158;
  std::string::size_type v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  std::string *v165;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  uint64_t v172;
  unint64_t v173;
  std::string *v174;
  void *v175;
  void *v176;
  uint64_t **v177;
  uint64_t *v178;
  xpc_object_t xdict;
  uint64_t v180;
  std::string v181;
  std::string v182;
  const void *__s1[3];
  xpc_object_t v184;
  xpc_object_t v185;
  void *__p[3];
  std::string v187;
  xpc_object_t object[3];
  uint64_t v189;
  std::string *v190;
  std::string *v191;
  std::string *v192;
  std::string *v193;
  std::string *v194;
  char *v195;
  std::string v196;
  std::string *v197;
  int v198;
  uint64_t v199;
  _BYTE v200[12];
  __int128 buf;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  memset(&v187, 170, sizeof(v187));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB278]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB3F0]);
  object[0] = v6;
  if (v6)
    xpc_retain(v6);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v187.__r_.__value_.__l.__size_;
  if (!size || (v9 = (void *)*MEMORY[0x1E0CFB9D8], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB9D8])))
  {
    v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_342;
    v13 = (char *)MEMORY[0x1C3B8CCDC](*a2);
    memset(object, 170, sizeof(object));
    v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v94 = v14 | 7;
      v95 = v94 + 1;
      v16 = operator new(v94 + 1);
      object[1] = v15;
      object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      v16 = object;
      if (!v14)
        goto LABEL_191;
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((_BYTE *)v15 + (_QWORD)v16) = 0;
    free(v13);
    v96 = object;
    if (SHIBYTE(object[2]) < 0)
      v96 = (xpc_object_t *)object[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_342;
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  v11 = MEMORY[0x1E0C812F8];
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v10) == v11)
    {
      xpc_retain(v10);
      xdict = v10;
    }
    else
    {
      xdict = xpc_null_create();
    }
  }
  else
  {
    xdict = xpc_null_create();
    v10 = 0;
  }
  v180 = a1;
  xpc_release(v10);
  *((_QWORD *)&buf + 1) = 0;
  v202 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  v177 = (uint64_t **)(a1 + 104);
  v17 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (__int128 *)(v17 + 7) || (v18 = (uint64_t *)v17[7], v19 = v17 + 8, v18 == v17 + 8))
  {
    v11 = MEMORY[0x1E0C812F8];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    v20 = (uint64_t *)object[0];
    v21 = (uint64_t *)*((_QWORD *)&buf + 1);
    v22 = (uint64_t **)&buf + 1;
    v23 = (uint64_t **)&buf + 1;
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_50;
    v24 = *((char *)object[0] + 55);
    if (v24 >= 0)
      v25 = (char *)object[0] + 32;
    else
      v25 = (char *)*((_QWORD *)object[0] + 4);
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)object[0] + 55);
    else
      v26 = *((_QWORD *)object[0] + 5);
    do
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        v29 = v21[4];
        v27 = v21 + 4;
        v28 = (_QWORD *)v29;
        v30 = *((char *)v27 + 23);
        v31 = v30 >= 0 ? v27 : v28;
        v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        v33 = v32 >= v26 ? v26 : v32;
        v34 = memcmp(v25, v31, v33);
        if (v34)
          break;
        if (v26 >= v32)
          goto LABEL_48;
LABEL_34:
        v21 = *v22;
        v23 = v22;
        if (!*v22)
          goto LABEL_50;
      }
      if (v34 < 0)
        goto LABEL_34;
LABEL_48:
      v21 = v22[1];
    }
    while (v21);
    v23 = v22 + 1;
LABEL_50:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *v23 = v20;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf = *(_QWORD *)buf;
      v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        v36 = v35;
        v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        v36 = (uint64_t *)v18[2];
        v37 = *v36 == (_QWORD)v18;
        v18 = v36;
      }
      while (!v37);
    }
    v18 = v36;
    if (v36 != v19)
      continue;
    break;
  }
  v43 = (char *)*((_QWORD *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v9 = v176;
  v11 = MEMORY[0x1E0C812F8];
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_59;
  v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v45 = v43[55];
      if (v45 >= 0)
        v46 = v43 + 32;
      else
        v46 = (const void *)*((_QWORD *)v43 + 4);
      if (v45 >= 0)
        v47 = v43[55];
      else
        v47 = *((_QWORD *)v43 + 5);
      if (v47 >= 9)
        v48 = 9;
      else
        v48 = v47;
      v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0)
          break;
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        v43 = (char *)*((_QWORD *)v43 + 1);
        if (!v43)
          goto LABEL_86;
        continue;
      }
      break;
    }
    v44 = v43;
    v43 = *(char **)v43;
    if (v43)
      continue;
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8)
    goto LABEL_59;
  v50 = v44[55];
  if (v50 >= 0)
    v51 = v44 + 32;
  else
    v51 = (const void *)*((_QWORD *)v44 + 4);
  if (v50 >= 0)
    v52 = v44[55];
  else
    v52 = *((_QWORD *)v44 + 5);
  if (v52 >= 9)
    v53 = 9;
  else
    v53 = v52;
  v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0)
      goto LABEL_59;
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  v97 = (xpc_object_t)*((_QWORD *)v44 + 7);
  if (v97)
    xpc_retain(*((xpc_object_t *)v44 + 7));
  else
    v97 = xpc_null_create();
  xpc_release(xdict);
  xdict = v97;
  v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38)
    xpc_retain(v38);
  else
    object[0] = xpc_null_create();
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v40 = xpc_dictionary_create(0, 0, 0);
  v41 = v40;
  if (v40)
  {
    v185 = v40;
    goto LABEL_66;
  }
  v41 = xpc_null_create();
  v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x1C3B8CD78](v41) != v11)
    {
      v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    v42 = xpc_null_create();
    v41 = 0;
LABEL_100:
    v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = &v185;
  __s1[1] = v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB3E8]);
  object[0] = v55;
  if (v55)
    xpc_retain(v55);
  else
    object[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  v57 = (const void *)*MEMORY[0x1E0CFB368];
  v58 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB368]);
  v59 = v58;
  v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != (const void *)-1)
    {
      v61 = (const void *)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v58)
        v62 = (size_t)v58;
      else
        v62 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v57, v62))
        goto LABEL_117;
LABEL_116:
      if (v61 != v59)
        goto LABEL_117;
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v182 = v187;
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == (const void *)-1)
    goto LABEL_405;
  v61 = __s1[1];
  if (__s1[1] >= v58)
    v63 = v58;
  else
    v63 = __s1[1];
  if (!memcmp(__s1[0], v57, (size_t)v63))
    goto LABEL_116;
LABEL_117:
  v64 = (const void *)*MEMORY[0x1E0CFB448];
  v65 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB448]);
  v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != (const void *)-1)
    {
      v67 = __s1[1];
      v39 = v39;
      if (__s1[1] >= v65)
        v69 = v65;
      else
        v69 = __s1[1];
      if (!memcmp(__s1[0], v64, (size_t)v69))
        goto LABEL_129;
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == (const void *)-1)
    goto LABEL_406;
  v67 = (const void *)v60;
  v39 = v39;
  if (v60 >= (unint64_t)v65)
    v68 = (size_t)v65;
  else
    v68 = v60;
  if (memcmp(__s1, v64, v68))
    goto LABEL_137;
LABEL_129:
  if (v67 == v66 && !v39)
    goto LABEL_131;
LABEL_137:
  v70 = (const void *)*MEMORY[0x1E0CFB358];
  v71 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB358]);
  v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != (const void *)-1)
    {
      v73 = (const void *)v60;
      if (v60 >= (unint64_t)v71)
        v74 = (size_t)v71;
      else
        v74 = v60;
      if (memcmp(__s1, v70, v74))
        goto LABEL_182;
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == (const void *)-1)
    goto LABEL_407;
  v73 = __s1[1];
  if (__s1[1] >= v71)
    v75 = v71;
  else
    v75 = __s1[1];
  if (memcmp(__s1[0], v70, (size_t)v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0)
      v93 = (const void *)v60;
    else
      v93 = __s1[1];
    if (!v93)
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72)
    goto LABEL_182;
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((_QWORD **)&buf, (const std::string::value_type **)__p, &v185);
  v76 = xpc_int64_create(0);
  if (!v76)
    v76 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v78 = (char *)*((_QWORD *)&buf + 1);
  v79 = (uint64_t *)&buf + 1;
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_202;
  v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      v81 = v78[55];
      if (v81 >= 0)
        v82 = v78 + 32;
      else
        v82 = (const void *)*((_QWORD *)v78 + 4);
      if (v81 >= 0)
        v83 = v78[55];
      else
        v83 = *((_QWORD *)v78 + 5);
      if (v83 >= 9)
        v84 = 9;
      else
        v84 = v83;
      v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0)
          break;
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        v78 = (char *)*((_QWORD *)v78 + 1);
        if (!v78)
          goto LABEL_169;
        continue;
      }
      break;
    }
    v80 = v78;
    v78 = *(char **)v78;
    if (v78)
      continue;
    break;
  }
LABEL_169:
  v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8)
    goto LABEL_202;
  v86 = v80[55];
  if (v86 >= 0)
    v87 = v80 + 32;
  else
    v87 = (const void *)*((_QWORD *)v80 + 4);
  if (v86 >= 0)
    v88 = v80[55];
  else
    v88 = *((_QWORD *)v80 + 5);
  if (v88 >= 9)
    v89 = 9;
  else
    v89 = v88;
  v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0)
      goto LABEL_181;
LABEL_201:
    v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)v200 = 0xAAAAAAAAAAAAAAAALL;
    v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      v99 = v98;
      v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      v101 = object[2];
      memset(object, 0, sizeof(object));
      *((_QWORD *)v100 + 6) = v101;
      *((_QWORD *)v100 + 7) = xdict;
      xdict = xpc_null_create();
      v102 = v181.__r_.__value_.__r.__words[0];
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 1) = 0;
      *((_QWORD *)v100 + 2) = v102;
      *v99 = (uint64_t)v100;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf = *(_QWORD *)buf;
        v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    v91 = xdict;
  }
  else
  {
    if (v88 > 9)
      goto LABEL_201;
LABEL_181:
    v91 = xpc_null_create();
    v92 = (void *)*((_QWORD *)v80 + 7);
    *((_QWORD *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  v39 = 0;
  xdict = v91;
LABEL_208:
  v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    v105 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v105 = (const void **)__s1[0];
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_1BF566000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    v106 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      v107 = v106;
      v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        v130 = v106;
        do
        {
          v109 = (uint64_t *)v130[2];
          v37 = *v109 == (_QWORD)v130;
          v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106)
        *v177 = v109;
      v131 = *(uint64_t **)(v180 + 112);
      --*(_QWORD *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0)
        operator delete((void *)v107[4]);
      operator delete(v107);
    }
    goto LABEL_338;
  }
  v110 = v202;
  if (!v202)
    goto LABEL_338;
  v111 = v178;
  v112 = *v178;
  if (!*v178)
  {
    v121 = v178;
    if (*v177 == v178)
    {
      v132 = 0;
      v133 = v178;
      v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v113 = &v187;
  else
    v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v114 = v187.__r_.__value_.__l.__size_;
  v115 = *v178;
  while (2)
  {
    while (1)
    {
      v116 = *(char *)(v115 + 55);
      v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(_QWORD *)(v115 + 40);
      v119 = v114 >= v118 ? v118 : v114;
      v120 = memcmp(v117, v113, v119);
      if (!v120)
        break;
      if (v120 < 0)
        goto LABEL_230;
LABEL_228:
      v111 = (uint64_t *)v115;
      v115 = *(_QWORD *)v115;
      if (!v115)
        goto LABEL_245;
    }
    if (v118 >= v114)
      goto LABEL_228;
LABEL_230:
    v115 = *(_QWORD *)(v115 + 8);
    if (v115)
      continue;
    break;
  }
LABEL_245:
  v121 = v178;
  if (v111 != v178)
  {
    v122 = *((char *)v111 + 55);
    if (v122 >= 0)
      v123 = v111 + 4;
    else
      v123 = (const void *)v111[4];
    if (v122 >= 0)
      v124 = *((unsigned __int8 *)v111 + 55);
    else
      v124 = v111[5];
    if (v124 >= v114)
      v125 = v114;
    else
      v125 = v124;
    v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        v128 = *((_QWORD *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(_QWORD *)(v128 + 16) = v127;
          *(_QWORD *)&buf = (char *)&buf + 8;
          *((_QWORD *)&buf + 1) = 0;
          v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    v121 = v111;
  }
  v132 = *v121;
  if (*v177 == v121)
  {
    v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    v133 = v121;
    do
    {
      v135 = v133;
      v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    v132 = 0;
    goto LABEL_279;
  }
  v134 = (uint64_t *)*v121;
  do
  {
    v133 = v134;
    v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  v136 = *((char *)v133 + 55);
  if (v136 >= 0)
    v137 = v133 + 4;
  else
    v137 = (const void *)v133[4];
  if (v136 >= 0)
    v138 = *((unsigned __int8 *)v133 + 55);
  else
    v138 = v133[5];
  v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &v187;
  else
    v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v141 = v187.__r_.__value_.__l.__size_;
  if (v141 >= v138)
    v142 = v138;
  else
    v142 = v141;
  v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0)
      goto LABEL_321;
LABEL_298:
    if (!v112)
    {
      v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      v133 = (uint64_t *)v112;
      v144 = *(unsigned __int8 *)(v112 + 55);
      v145 = *(_QWORD *)(v112 + 40);
      if ((v144 & 0x80u) == 0)
        v146 = (const void *)(v112 + 32);
      else
        v146 = *(const void **)(v112 + 32);
      if ((v144 & 0x80u) == 0)
        v147 = v144;
      else
        v147 = v145;
      if (v147 >= v141)
        v148 = v141;
      else
        v148 = v147;
      v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0)
          goto LABEL_314;
      }
      else if (v141 >= v147)
      {
LABEL_314:
        v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0)
            goto LABEL_338;
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        v112 = v133[1];
        if (!v112)
        {
          v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      v112 = *v133;
      if (!*v133)
      {
        v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141)
    goto LABEL_298;
LABEL_321:
  v151 = v133 + 1;
  if (!v132)
    v151 = v121;
  v178 = v151;
  if (!*v151)
  {
    if (!v132)
      v133 = v121;
    v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    v152 = (uint64_t *)operator new(0x50uLL);
    v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    v154 = buf;
    v152[8] = *((_QWORD *)&buf + 1);
    v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = v155;
      *(_QWORD *)&buf = (char *)&buf + 8;
      *((_QWORD *)&buf + 1) = 0;
      v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    *v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    *v178 = (uint64_t)v152;
    v156 = (uint64_t *)**v177;
    if (v156)
    {
      *v177 = v156;
      v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(_QWORD *)(v180 + 120);
  }
LABEL_338:
  v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0)
      goto LABEL_340;
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    v160 = v197;
    if (v197 < v194)
    {
      v197 = v194;
      v160 = v194;
    }
    v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      v158 = 0;
      v159 = 0;
      goto LABEL_359;
    }
    v161 = v190;
    v160 = v192;
  }
  v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    v159 = 0;
  }
LABEL_359:
  v181 = v196;
  memset(&v196, 0, sizeof(v196));
  v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2]))
      goto LABEL_363;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1)
      goto LABEL_371;
    *((_BYTE *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  v166 = &v196;
  v197 = 0;
  v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = &v196;
  else
    v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  else
    v169 = v196.__r_.__value_.__l.__size_;
  if ((v198 & 8) != 0)
  {
    v190 = v168;
    v191 = v168;
    v197 = (std::string *)((char *)v168 + v169);
    v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    v197 = (std::string *)((char *)v168 + v169);
    if ((*((_BYTE *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((_BYTE *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v171 = v196.__r_.__value_.__l.__size_;
    v193 = v168;
    v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        v169 = v169 - v173 - 0x7FFFFFFF;
        v194 = v168;
      }
      if (v169)
        v194 = (std::string *)((char *)v168 + v169);
    }
  }
  v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  *(_DWORD *)v200 = 136315138;
  *(_QWORD *)&v200[4] = v174;
  _os_log_debug_impl(&dword_1BF566000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  object[0] = *(xpc_object_t *)MEMORY[0x1E0DE4F50];
  v175 = *(void **)(MEMORY[0x1E0DE4F50] + 72);
  *(xpc_object_t *)((char *)object + *((_QWORD *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x1E0DE4F50] + 64);
  object[2] = v175;
  v189 = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8C364](&v199);
  if (SHIBYTE(__s1[2]) < 0)
LABEL_340:
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_346;
}

